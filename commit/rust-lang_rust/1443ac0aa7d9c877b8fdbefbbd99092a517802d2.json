{"sha": "1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDNhYzBhYTdkOWM4NzdiOGZkYmVmYmJkOTkwOTJhNTE3ODAyZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-11T21:18:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T20:25:08Z"}, "message": "introduce a more expressive `UserSubsts`", "tree": {"sha": "83c7b72b425c6e1308fcc58ec42f0ebc770101c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c7b72b425c6e1308fcc58ec42f0ebc770101c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "html_url": "https://github.com/rust-lang/rust/commit/1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "html_url": "https://github.com/rust-lang/rust/commit/2a7fc227a67a4d3abcc0f7a738c2fa419754840b"}], "stats": {"total": 162, "additions": 122, "deletions": 40}, "files": [{"sha": "e54968c5274bf130fea0d97d1baeb22f629bf69c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "patch": "@@ -1417,3 +1417,8 @@ impl_stable_hash_for!(enum traits::QuantifierKind {\n     Universal,\n     Existential\n });\n+\n+impl_stable_hash_for!(struct ty::subst::UserSubsts<'tcx> { substs, user_self_ty });\n+\n+impl_stable_hash_for!(struct ty::subst::UserSelfTy<'tcx> { impl_def_id, self_ty });\n+"}, {"sha": "48b2ccbcf873749c3eac4175b0f9a566a97b8481", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "patch": "@@ -37,7 +37,7 @@ use syntax::ast::{self, Name};\n use syntax::symbol::InternedString;\n use syntax_pos::{Span, DUMMY_SP};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use ty::subst::{CanonicalSubsts, Subst, Substs};\n+use ty::subst::{CanonicalUserSubsts, Subst, Substs};\n use ty::{self, AdtDef, CanonicalTy, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt};\n use util::ppaux;\n \n@@ -2413,8 +2413,8 @@ pub struct Constant<'tcx> {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UserTypeAnnotation<'tcx> {\n     Ty(CanonicalTy<'tcx>),\n-    FnDef(DefId, CanonicalSubsts<'tcx>),\n-    AdtDef(&'tcx AdtDef, CanonicalSubsts<'tcx>),\n+    FnDef(DefId, CanonicalUserSubsts<'tcx>),\n+    AdtDef(&'tcx AdtDef, CanonicalUserSubsts<'tcx>),\n }\n \n EnumTypeFoldableImpl! {"}, {"sha": "6f0f258a2175495f217fa5e8ff03fd11bced073b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "patch": "@@ -33,7 +33,7 @@ use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use middle::stability;\n use mir::{self, Mir, interpret};\n use mir::interpret::Allocation;\n-use ty::subst::{CanonicalSubsts, Kind, Substs, Subst};\n+use ty::subst::{CanonicalUserSubsts, Kind, Substs, Subst};\n use ty::ReprOptions;\n use traits;\n use traits::{Clause, Clauses, GoalKind, Goal, Goals};\n@@ -383,7 +383,7 @@ pub struct TypeckTables<'tcx> {\n     /// If the user wrote `foo.collect::<Vec<_>>()`, then the\n     /// canonical substitutions would include only `for<X> { Vec<X>\n     /// }`.\n-    user_substs: ItemLocalMap<CanonicalSubsts<'tcx>>,\n+    user_substs: ItemLocalMap<CanonicalUserSubsts<'tcx>>,\n \n     adjustments: ItemLocalMap<Vec<ty::adjustment::Adjustment<'tcx>>>,\n \n@@ -573,14 +573,14 @@ impl<'tcx> TypeckTables<'tcx> {\n         self.node_substs.get(&id.local_id).cloned()\n     }\n \n-    pub fn user_substs_mut(&mut self) -> LocalTableInContextMut<'_, CanonicalSubsts<'tcx>> {\n+    pub fn user_substs_mut(&mut self) -> LocalTableInContextMut<'_, CanonicalUserSubsts<'tcx>> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,\n             data: &mut self.user_substs\n         }\n     }\n \n-    pub fn user_substs(&self, id: hir::HirId) -> Option<CanonicalSubsts<'tcx>> {\n+    pub fn user_substs(&self, id: hir::HirId) -> Option<CanonicalUserSubsts<'tcx>> {\n         validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.user_substs.get(&id.local_id).cloned()\n     }"}, {"sha": "bea5ba04f7c95d6377f40c2ea93c351ea34c05a4", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 95, "deletions": 27, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "patch": "@@ -323,33 +323,6 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx Substs<'tcx> {\n     }\n }\n \n-pub type CanonicalSubsts<'gcx> = Canonical<'gcx, &'gcx Substs<'gcx>>;\n-\n-impl<'gcx> CanonicalSubsts<'gcx> {\n-    /// True if this represents a substitution like\n-    ///\n-    /// ```text\n-    /// [?0, ?1, ?2]\n-    /// ```\n-    ///\n-    /// i.e., each thing is mapped to a canonical variable with the same index.\n-    pub fn is_identity(&self) -> bool {\n-        self.value.iter().zip(CanonicalVar::new(0)..).all(|(kind, cvar)| {\n-            match kind.unpack() {\n-                UnpackedKind::Type(ty) => match ty.sty {\n-                    ty::Infer(ty::CanonicalTy(cvar1)) => cvar == cvar1,\n-                    _ => false,\n-                },\n-\n-                UnpackedKind::Lifetime(r) => match r {\n-                    ty::ReCanonical(cvar1) => cvar == *cvar1,\n-                    _ => false,\n-                },\n-            }\n-        })\n-    }\n-}\n-\n impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Substs<'tcx> {}\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -564,3 +537,98 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n         self.tcx().mk_region(ty::fold::shift_region(*region, self.region_binders_passed))\n     }\n }\n+\n+pub type CanonicalUserSubsts<'tcx> = Canonical<'tcx, UserSubsts<'tcx>>;\n+\n+impl CanonicalUserSubsts<'tcx> {\n+    /// True if this represents a substitution like\n+    ///\n+    /// ```text\n+    /// [?0, ?1, ?2]\n+    /// ```\n+    ///\n+    /// i.e., each thing is mapped to a canonical variable with the same index.\n+    pub fn is_identity(&self) -> bool {\n+        if self.value.user_self_ty.is_some() {\n+            return false;\n+        }\n+\n+        self.value.substs.iter().zip(CanonicalVar::new(0)..).all(|(kind, cvar)| {\n+            match kind.unpack() {\n+                UnpackedKind::Type(ty) => match ty.sty {\n+                    ty::Infer(ty::CanonicalTy(cvar1)) => cvar == cvar1,\n+                    _ => false,\n+                },\n+\n+                UnpackedKind::Lifetime(r) => match r {\n+                    ty::ReCanonical(cvar1) => cvar == *cvar1,\n+                    _ => false,\n+                },\n+            }\n+        })\n+    }\n+}\n+\n+/// Stores the user-given substs to reach some fully qualified path\n+/// (e.g., `<T>::Item` or `<T as Trait>::Item`).\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct UserSubsts<'tcx> {\n+    /// The substitutions for the item as given by the user.\n+    pub substs: &'tcx Substs<'tcx>,\n+\n+    /// The self-type, in the case of a `<T>::Item` path (when applied\n+    /// to an inherent impl). See `UserSubsts` below.\n+    pub user_self_ty: Option<UserSelfTy<'tcx>>,\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for UserSubsts<'tcx> {\n+        substs,\n+        user_self_ty,\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for UserSubsts<'a> {\n+        type Lifted = UserSubsts<'tcx>;\n+        substs,\n+        user_self_ty,\n+    }\n+}\n+\n+/// Specifies the user-given self-type. In the case of a path that\n+/// refers to a member in an inherent impl, this self-type is\n+/// sometimes needed to constrain the type parameters on the impl. For\n+/// example, in this code:\n+///\n+/// ```\n+/// struct Foo<T> { }\n+/// impl<A> Foo<A> { fn method() { } }\n+/// ```\n+///\n+/// when you then have a path like `<Foo<&'static u32>>::method`,\n+/// this struct would carry the def-id of the impl along with the\n+/// self-type `Foo<u32>`. Then we can instantiate the parameters of\n+/// the impl (with the substs from `UserSubsts`) and apply those to\n+/// the self-type, giving `Foo<?A>`. Finally, we unify that with\n+/// the self-type here, which contains `?A` to be `&'static u32`\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct UserSelfTy<'tcx> {\n+    pub impl_def_id: DefId,\n+    pub self_ty: Ty<'tcx>,\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for UserSelfTy<'tcx> {\n+        impl_def_id,\n+        self_ty,\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for UserSelfTy<'a> {\n+        type Lifted = UserSelfTy<'tcx>;\n+        impl_def_id,\n+        self_ty,\n+    }\n+}"}, {"sha": "ebf9c7b482631d0ad2a89b5a62bb6d69a1ffcec5", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "patch": "@@ -15,6 +15,7 @@ use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::mir::{ConstraintCategory, UserTypeAnnotation};\n use rustc::traits::query::Fallible;\n use rustc::ty::relate::TypeRelation;\n+use rustc::ty::subst::UserSubsts;\n use rustc::ty::{self, Ty};\n use syntax_pos::DUMMY_SP;\n \n@@ -78,13 +79,15 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n             ty\n         }\n         UserTypeAnnotation::FnDef(def_id, canonical_substs) => {\n-            let (substs, _) =\n+            let (UserSubsts { substs, user_self_ty }, _) =\n                 infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n+            assert!(user_self_ty.is_none()); // TODO for now\n             infcx.tcx.mk_fn_def(def_id, substs)\n         }\n         UserTypeAnnotation::AdtDef(adt_def, canonical_substs) => {\n-            let (substs, _) =\n+            let (UserSubsts { substs, user_self_ty }, _) =\n                 infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n+            assert!(user_self_ty.is_none()); // TODO for now\n             infcx.tcx.mk_adt(adt_def, substs)\n         }\n     };"}, {"sha": "62e4ef0f05c5c05ccd5e45525ddb87bc318bc8ea", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1443ac0aa7d9c877b8fdbefbbd99092a517802d2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "patch": "@@ -95,7 +95,7 @@ use rustc::infer::opaque_types::OpaqueTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n use rustc::mir::interpret::{ConstValue, GlobalId};\n-use rustc::ty::subst::{CanonicalSubsts, UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{CanonicalUserSubsts, UnpackedKind, Subst, Substs, UserSubsts};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n@@ -2136,7 +2136,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             method.substs[i]\n                         }\n                     });\n-                    self.infcx.canonicalize_response(&just_method_substs)\n+                    self.infcx.canonicalize_response(&UserSubsts {\n+                        substs: just_method_substs,\n+                        user_self_ty: None, // not relevant here\n+                    })\n                 });\n \n                 debug!(\"write_method_call: user_substs = {:?}\", user_substs);\n@@ -2172,13 +2175,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         );\n \n         if !substs.is_noop() {\n-            let user_substs = self.infcx.canonicalize_response(&substs);\n+            let user_substs = self.infcx.canonicalize_response(&UserSubsts {\n+                substs,\n+                user_self_ty: None, // TODO -- fix in future commit\n+            });\n             debug!(\"instantiate_value_path: user_substs = {:?}\", user_substs);\n             self.write_user_substs(hir_id, user_substs);\n         }\n     }\n \n-    pub fn write_user_substs(&self, hir_id: hir::HirId, substs: CanonicalSubsts<'tcx>) {\n+    pub fn write_user_substs(&self, hir_id: hir::HirId, substs: CanonicalUserSubsts<'tcx>) {\n         debug!(\n             \"write_user_substs({:?}, {:?}) in fcx {}\",\n             hir_id,"}]}