{"sha": "8b4f538320cbb40643bfb94f28313d4137126b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNGY1MzgzMjBjYmI0MDY0M2JmYjk0ZjI4MzEzZDQxMzcxMjZiMDE=", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-07-07T00:19:20Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-07-07T00:19:20Z"}, "message": "Unify lint tool and lint name checking\n\nThis shares a little more code between checking command line and\nattribute lint specifications.", "tree": {"sha": "649ee03090152db54b4f160465cdc9cebb46d550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/649ee03090152db54b4f160465cdc9cebb46d550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b4f538320cbb40643bfb94f28313d4137126b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4f538320cbb40643bfb94f28313d4137126b01", "html_url": "https://github.com/rust-lang/rust/commit/8b4f538320cbb40643bfb94f28313d4137126b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b4f538320cbb40643bfb94f28313d4137126b01/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0db4cfedcb9ecdc8df62aac22bec00a5c3c1b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0db4cfedcb9ecdc8df62aac22bec00a5c3c1b5", "html_url": "https://github.com/rust-lang/rust/commit/1e0db4cfedcb9ecdc8df62aac22bec00a5c3c1b5"}], "stats": {"total": 113, "additions": 73, "deletions": 40}, "files": [{"sha": "263ed83ed5a21d490fb3fea02bc83d44918972e2", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8b4f538320cbb40643bfb94f28313d4137126b01/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4f538320cbb40643bfb94f28313d4137126b01/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=8b4f538320cbb40643bfb94f28313d4137126b01", "patch": "@@ -16,7 +16,7 @@\n \n use self::TargetLint::*;\n \n-use crate::levels::LintLevelsBuilder;\n+use crate::levels::{is_known_lint_tool, LintLevelsBuilder};\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n@@ -129,6 +129,8 @@ pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n     /// Lint doesn't exist. Potentially contains a suggestion for a correct lint name.\n     NoLint(Option<Symbol>),\n+    /// The lint refers to a tool that has not been registered.\n+    NoTool,\n     /// The lint is either renamed or removed. This is the warning\n     /// message, and an optional new name (`None` if removed).\n     Warning(String, Option<String>),\n@@ -334,16 +336,17 @@ impl LintStore {\n         }\n     }\n \n-    /// Checks the validity of lint names derived from the command line. Returns\n-    /// true if the lint is valid, false otherwise.\n+    /// Checks the validity of lint names derived from the command line.\n     pub fn check_lint_name_cmdline(\n         &self,\n         sess: &Session,\n         lint_name: &str,\n-        level: Option<Level>,\n-    ) -> bool {\n+        level: Level,\n+        crate_attrs: &[ast::Attribute],\n+    ) {\n         let (tool_name, lint_name) = parse_lint_and_tool_name(lint_name);\n-        let db = match self.check_lint_name(lint_name, tool_name) {\n+\n+        let db = match self.check_lint_and_tool_name(sess, tool_name, lint_name, crate_attrs) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n             CheckLintNameResult::NoLint(suggestion) => {\n@@ -365,6 +368,13 @@ impl LintStore {\n                 ))),\n                 _ => None,\n             },\n+            CheckLintNameResult::NoTool => Some(struct_span_err!(\n+                sess,\n+                DUMMY_SP,\n+                E0602,\n+                \"unknown lint tool: `{}`\",\n+                tool_name.unwrap()\n+            )),\n         };\n \n         if let Some(mut db) = db {\n@@ -398,6 +408,22 @@ impl LintStore {\n         }\n     }\n \n+    pub fn check_lint_and_tool_name(\n+        &self,\n+        sess: &Session,\n+        tool_name: Option<Symbol>,\n+        lint_name: &str,\n+        crate_attrs: &[ast::Attribute],\n+    ) -> CheckLintNameResult<'_> {\n+        if let Some(tool_name) = tool_name {\n+            if !is_known_lint_tool(tool_name, sess, crate_attrs) {\n+                return CheckLintNameResult::NoTool;\n+            }\n+        }\n+\n+        self.check_lint_name(lint_name, tool_name)\n+    }\n+\n     /// Checks the name of a lint for its existence, and whether it was\n     /// renamed or removed. Generates a DiagnosticBuilder containing a\n     /// warning for renamed and removed lints. This is over both lint\n@@ -1028,7 +1054,11 @@ impl<'tcx> LayoutOf for LateContext<'tcx> {\n \n pub fn parse_lint_and_tool_name(lint_name: &str) -> (Option<Symbol>, &str) {\n     match lint_name.split_once(\"::\") {\n-        Some((tool_name, lint_name)) => (Some(Symbol::intern(tool_name)), lint_name),\n+        Some((tool_name, lint_name)) => {\n+            let tool_name = Symbol::intern(tool_name);\n+\n+            (Some(tool_name), lint_name)\n+        }\n         None => (None, lint_name),\n     }\n }"}, {"sha": "30ee8c9b6ae1b0abed87649baf7d47c5cd18b990", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8b4f538320cbb40643bfb94f28313d4137126b01/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4f538320cbb40643bfb94f28313d4137126b01/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=8b4f538320cbb40643bfb94f28313d4137126b01", "patch": "@@ -88,7 +88,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n-            store.check_lint_name_cmdline(sess, &lint_name, level);\n+            store.check_lint_name_cmdline(sess, &lint_name, level, self.crate_attrs);\n             let orig_level = level;\n \n             // If the cap is less than this specified level, e.g., if we've got\n@@ -110,7 +110,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         }\n \n         for lint_name in &sess.opts.force_warns {\n-            store.check_lint_name_cmdline(sess, lint_name, Level::ForceWarn);\n+            store.check_lint_name_cmdline(sess, lint_name, Level::ForceWarn, self.crate_attrs);\n             let lints = store\n                 .find_lints(lint_name)\n                 .unwrap_or_else(|_| bug!(\"A valid lint failed to produce a lint ids\"));\n@@ -321,33 +321,15 @@ impl<'s> LintLevelsBuilder<'s> {\n                         continue;\n                     }\n                 };\n-                let tool_name = if meta_item.path.segments.len() > 1 {\n-                    let tool_ident = meta_item.path.segments[0].ident;\n-                    if !is_known_lint_tool(tool_ident.name, sess, &self.crate_attrs) {\n-                        let mut err = struct_span_err!(\n-                            sess,\n-                            tool_ident.span,\n-                            E0710,\n-                            \"unknown tool name `{}` found in scoped lint: `{}`\",\n-                            tool_ident.name,\n-                            pprust::path_to_string(&meta_item.path),\n-                        );\n-                        if sess.is_nightly_build() {\n-                            err.help(&format!(\n-                                \"add `#![register_tool({})]` to the crate root\",\n-                                tool_ident.name\n-                            ));\n-                        }\n-                        err.emit();\n-                        continue;\n-                    }\n-\n-                    Some(meta_item.path.segments.remove(0).ident.name)\n+                let tool_ident = if meta_item.path.segments.len() > 1 {\n+                    Some(meta_item.path.segments.remove(0).ident)\n                 } else {\n                     None\n                 };\n+                let tool_name = tool_ident.map(|ident| ident.name);\n                 let name = pprust::path_to_string(&meta_item.path);\n-                let lint_result = store.check_lint_name(&name, tool_name);\n+                let lint_result =\n+                    store.check_lint_and_tool_name(sess, tool_name, &name, self.crate_attrs);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintLevelSource::Node(\n@@ -364,7 +346,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                     CheckLintNameResult::Tool(result) => {\n                         match *result {\n                             Ok(ids) => {\n-                                let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n+                                let complete_name =\n+                                    &format!(\"{}::{}\", tool_ident.unwrap().name, name);\n                                 let src = LintLevelSource::Node(\n                                     Symbol::intern(complete_name),\n                                     sp,\n@@ -419,6 +402,26 @@ impl<'s> LintLevelsBuilder<'s> {\n                         }\n                     }\n \n+                    &CheckLintNameResult::NoTool => {\n+                        let mut err = struct_span_err!(\n+                            sess,\n+                            tool_ident.map_or(DUMMY_SP, |ident| ident.span),\n+                            E0710,\n+                            \"unknown tool name `{}` found in scoped lint: `{}::{}`\",\n+                            tool_name.unwrap(),\n+                            tool_name.unwrap(),\n+                            pprust::path_to_string(&meta_item.path),\n+                        );\n+                        if sess.is_nightly_build() {\n+                            err.help(&format!(\n+                                \"add `#![register_tool({})]` to the crate root\",\n+                                tool_name.unwrap()\n+                            ));\n+                        }\n+                        err.emit();\n+                        continue;\n+                    }\n+\n                     _ if !self.warn_about_weird_lints => {}\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n@@ -450,8 +453,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                         let (level, src) =\n                             self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n                         struct_lint_level(self.sess, lint, level, src, Some(sp.into()), |lint| {\n-                            let name = if let Some(tool_name) = tool_name {\n-                                format!(\"{}::{}\", tool_name, name)\n+                            let name = if let Some(tool_ident) = tool_ident {\n+                                format!(\"{}::{}\", tool_ident.name, name)\n                             } else {\n                                 name.to_string()\n                             };\n@@ -578,7 +581,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n }\n \n-fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n+pub fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n     if [sym::clippy, sym::rustc, sym::rustdoc].contains(&m_item) {\n         return true;\n     }"}, {"sha": "b7c5893a0ea862de76ba778f8631cc7f14b90a5b", "filename": "src/test/ui/lint/command-line-register-unknown-lint-tool.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b4f538320cbb40643bfb94f28313d4137126b01/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4f538320cbb40643bfb94f28313d4137126b01/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr?ref=8b4f538320cbb40643bfb94f28313d4137126b01", "patch": "@@ -1,10 +1,10 @@\n-error[E0602]: unknown lint: `unknown_tool::foo`\n+error[E0602]: unknown lint tool: `unknown_tool`\n    |\n-   = note: requested on the command line with `-A unknown_tool::foo`\n+   = note: requested on the command line with `-A foo`\n \n-error[E0602]: unknown lint: `unknown_tool::foo`\n+error[E0602]: unknown lint tool: `unknown_tool`\n    |\n-   = note: requested on the command line with `-A unknown_tool::foo`\n+   = note: requested on the command line with `-A foo`\n \n error: aborting due to 2 previous errors\n "}]}