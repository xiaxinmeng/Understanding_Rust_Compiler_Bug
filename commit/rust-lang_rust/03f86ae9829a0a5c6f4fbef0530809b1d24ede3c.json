{"sha": "03f86ae9829a0a5c6f4fbef0530809b1d24ede3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZjg2YWU5ODI5YTBhNWM2ZjRmYmVmMDUzMDgwOWIxZDI0ZWRlM2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-23T01:01:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-24T15:18:01Z"}, "message": "llvm6: CodeModel::{JIT,}Default no longer exists\n\nLLVM has since removed the `CodeModel::Default` enum value in favor of an\n`Optional` implementationg throughout LLVM. Let's mirror the same change in Rust\nand update the various bindings we call accordingly.\n\nRemoved in llvm-mirror/llvm@9aafb854c", "tree": {"sha": "ad47557d75f33c57b4053805f7438ba7914512bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad47557d75f33c57b4053805f7438ba7914512bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c", "html_url": "https://github.com/rust-lang/rust/commit/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdecb0564b86f6876124903a05e590e929532039", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdecb0564b86f6876124903a05e590e929532039", "html_url": "https://github.com/rust-lang/rust/commit/fdecb0564b86f6876124903a05e590e929532039"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "2e860f940a7a7b7fa1cbf3fa25d11fe717ada873", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=03f86ae9829a0a5c6f4fbef0530809b1d24ede3c", "patch": "@@ -320,8 +320,8 @@ pub struct TargetOptions {\n     /// Relocation model to use in object file. Corresponds to `llc\n     /// -relocation-model=$relocation_model`. Defaults to \"pic\".\n     pub relocation_model: String,\n-    /// Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".\n-    pub code_model: String,\n+    /// Code model to use. Corresponds to `llc -code-model=$code_model`.\n+    pub code_model: Option<String>,\n     /// TLS model to use. Options are \"global-dynamic\" (default), \"local-dynamic\", \"initial-exec\"\n     /// and \"local-exec\". This is similar to the -ftls-model option in GCC/Clang.\n     pub tls_model: String,\n@@ -483,7 +483,7 @@ impl Default for TargetOptions {\n             only_cdylib: false,\n             executables: false,\n             relocation_model: \"pic\".to_string(),\n-            code_model: \"default\".to_string(),\n+            code_model: None,\n             tls_model: \"global-dynamic\".to_string(),\n             disable_redzone: false,\n             eliminate_frame_pointer: true,\n@@ -736,7 +736,7 @@ impl Target {\n         key!(only_cdylib, bool);\n         key!(executables, bool);\n         key!(relocation_model);\n-        key!(code_model);\n+        key!(code_model, optional);\n         key!(tls_model);\n         key!(disable_redzone, bool);\n         key!(eliminate_frame_pointer, bool);"}, {"sha": "9ce34a95eff6230d2323ea10fd5a08e486f93e5c", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=03f86ae9829a0a5c6f4fbef0530809b1d24ede3c", "patch": "@@ -299,12 +299,11 @@ pub enum RelocMode {\n #[repr(C)]\n pub enum CodeModel {\n     Other,\n-    Default,\n-    JITDefault,\n     Small,\n     Kernel,\n     Medium,\n     Large,\n+    None,\n }\n \n /// LLVMRustDiagnosticKind"}, {"sha": "863f006985349307c4958ebc8fba18941083d305", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=03f86ae9829a0a5c6f4fbef0530809b1d24ede3c", "patch": "@@ -68,8 +68,7 @@ pub const RELOC_MODEL_ARGS : [(&'static str, llvm::RelocMode); 7] = [\n     (\"ropi-rwpi\", llvm::RelocMode::ROPI_RWPI),\n ];\n \n-pub const CODE_GEN_MODEL_ARGS : [(&'static str, llvm::CodeModel); 5] = [\n-    (\"default\", llvm::CodeModel::Default),\n+pub const CODE_GEN_MODEL_ARGS: &[(&str, llvm::CodeModel)] = &[\n     (\"small\", llvm::CodeModel::Small),\n     (\"kernel\", llvm::CodeModel::Kernel),\n     (\"medium\", llvm::CodeModel::Medium),\n@@ -170,20 +169,23 @@ pub fn target_machine_factory(sess: &Session)\n     let ffunction_sections = sess.target.target.options.function_sections;\n     let fdata_sections = ffunction_sections;\n \n-    let code_model_arg = match sess.opts.cg.code_model {\n-        Some(ref s) => &s,\n-        None => &sess.target.target.options.code_model,\n-    };\n-\n-    let code_model = match CODE_GEN_MODEL_ARGS.iter().find(\n-        |&&arg| arg.0 == code_model_arg) {\n-        Some(x) => x.1,\n-        _ => {\n-            sess.err(&format!(\"{:?} is not a valid code model\",\n-                              code_model_arg));\n-            sess.abort_if_errors();\n-            bug!();\n+    let code_model_arg = sess.opts.cg.code_model.as_ref().or(\n+        sess.target.target.options.code_model.as_ref(),\n+    );\n+\n+    let code_model = match code_model_arg {\n+        Some(s) => {\n+            match CODE_GEN_MODEL_ARGS.iter().find(|arg| arg.0 == s) {\n+                Some(x) => x.1,\n+                _ => {\n+                    sess.err(&format!(\"{:?} is not a valid code model\",\n+                                      code_model_arg));\n+                    sess.abort_if_errors();\n+                    bug!();\n+                }\n+            }\n         }\n+        None => llvm::CodeModel::None,\n     };\n \n     let singlethread = sess.target.target.options.singlethread;"}, {"sha": "b501f6150bef82ab0dc76140511f55892a9af5c6", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/03f86ae9829a0a5c6f4fbef0530809b1d24ede3c/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=03f86ae9829a0a5c6f4fbef0530809b1d24ede3c", "patch": "@@ -23,9 +23,14 @@\n #include \"llvm/Support/FileSystem.h\"\n #include \"llvm/Support/Host.h\"\n #include \"llvm/Target/TargetMachine.h\"\n-#include \"llvm/Target/TargetSubtargetInfo.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n \n+#if LLVM_VERSION_GE(6, 0)\n+#include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n+#else\n+#include \"llvm/Target/TargetSubtargetInfo.h\"\n+#endif\n+\n #if LLVM_VERSION_GE(4, 0)\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n@@ -210,20 +215,15 @@ extern \"C\" bool LLVMRustHasFeature(LLVMTargetMachineRef TM,\n \n enum class LLVMRustCodeModel {\n   Other,\n-  Default,\n-  JITDefault,\n   Small,\n   Kernel,\n   Medium,\n   Large,\n+  None,\n };\n \n static CodeModel::Model fromRust(LLVMRustCodeModel Model) {\n   switch (Model) {\n-  case LLVMRustCodeModel::Default:\n-    return CodeModel::Default;\n-  case LLVMRustCodeModel::JITDefault:\n-    return CodeModel::JITDefault;\n   case LLVMRustCodeModel::Small:\n     return CodeModel::Small;\n   case LLVMRustCodeModel::Kernel:\n@@ -360,7 +360,6 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     bool TrapUnreachable,\n     bool Singlethread) {\n \n-  auto CM = fromRust(RustCM);\n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n \n@@ -399,6 +398,13 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     Options.ThreadModel = ThreadModel::Single;\n   }\n \n+#if LLVM_VERSION_GE(6, 0)\n+  Optional<CodeModel::Model> CM;\n+#else\n+  CodeModel::Model CM = CodeModel::Model::Default;\n+#endif\n+  if (RustCM != LLVMRustCodeModel::None)\n+    CM = fromRust(RustCM);\n   TargetMachine *TM = TheTarget->createTargetMachine(\n       Trip.getTriple(), RealCPU, Feature, Options, RM, CM, OptLevel);\n   return wrap(TM);"}]}