{"sha": "5ffebc2cb3a089c27a4c7da13d09fd2365c288aa", "node_id": "C_kwDOAAsO6NoAKDVmZmViYzJjYjNhMDg5YzI3YTRjN2RhMTNkMDlmZDIzNjVjMjg4YWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T16:47:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T16:47:13Z"}, "message": "Auto merge of #96301 - notriddle:notriddle/synthetic-impl-prim, r=GuillaumeGomez\n\nrustdoc: make primitive synthetic impls for correct doc module\n\nThis improves the accuracy of libcore primitive docs, which was missing the blanket and auto impls for most primitive types. To test this, compare nightly [libcore::str] docs, which lack auto traits like Send, with [std::str] docs, which show them.\n\n[libcore::str]: https://doc.rust-lang.org/nightly/core/primitive.str.html\n[libstd::str]: https://doc.rust-lang.org/nightly/std/primitive.str.html\n\nIt also avoids getting synthetic impls for primitive types on crates that do not actually show them.\n\n<details>\n\n<summary>Before and After trace logs</summary>\n\n## Before\n\n\t[notriddle@deep-thought test-dingus]$ RUSTDOC_LOG=rustdoc=trace rustdoc +nightly test.rs 2>&1 | grep -E 'get_blanket_impls\\('\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(Whatever)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(isize)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls([T])\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls([u8])\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls([T])\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls([u8])\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(char)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(u128)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(u16)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(i128)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(i16)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(str)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(str)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(f64)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(f64)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(u64)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(u8)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(i64)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(i8)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(*const T)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(*mut T)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(*const [T])\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(*mut [T])\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls([T; N])\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(bool)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(f32)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(f32)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(u32)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(usize)\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(i32)\n\n## After\n\n\t[notriddle@deep-thought test-dingus]$ RUSTDOC_LOG=rustdoc=trace rustdoc +dev test.rs 2>&1 | grep -E 'get_blanket_impls\\('\n\tTRACE rustdoc::clean::blanket_impl get_blanket_impls(Whatever)\n\n</details>", "tree": {"sha": "3cb336c16aa323cde40c88c8721b00bc4268944b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb336c16aa323cde40c88c8721b00bc4268944b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ffebc2cb3a089c27a4c7da13d09fd2365c288aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffebc2cb3a089c27a4c7da13d09fd2365c288aa", "html_url": "https://github.com/rust-lang/rust/commit/5ffebc2cb3a089c27a4c7da13d09fd2365c288aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ffebc2cb3a089c27a4c7da13d09fd2365c288aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41ef7678061dde625bf273ab6b036aebd7153a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ef7678061dde625bf273ab6b036aebd7153a43", "html_url": "https://github.com/rust-lang/rust/commit/41ef7678061dde625bf273ab6b036aebd7153a43"}, {"sha": "2e7b5abbfdf196cf1adb9f0804bb04cbac768e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7b5abbfdf196cf1adb9f0804bb04cbac768e08", "html_url": "https://github.com/rust-lang/rust/commit/2e7b5abbfdf196cf1adb9f0804bb04cbac768e08"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "6962b5c7ee302fd18a30b8b4556182d0b8dd654e", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ffebc2cb3a089c27a4c7da13d09fd2365c288aa/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffebc2cb3a089c27a4c7da13d09fd2365c288aa/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=5ffebc2cb3a089c27a4c7da13d09fd2365c288aa", "patch": "@@ -43,14 +43,19 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n         }\n     });\n \n-    // Also try to inline primitive impls from other crates.\n     cx.tcx.sess.prof.generic_activity(\"build_primitive_trait_impls\").run(|| {\n         for def_id in PrimitiveType::all_impls(cx.tcx) {\n+            // Try to inline primitive impls from other crates.\n             if !def_id.is_local() {\n                 inline::build_impl(cx, None, def_id, None, &mut new_items);\n-\n-                // FIXME(eddyb) is this `doc(hidden)` check needed?\n-                if !cx.tcx.is_doc_hidden(def_id) {\n+            }\n+        }\n+        for (prim, did) in PrimitiveType::primitive_locations(cx.tcx) {\n+            // Do not calculate blanket impl list for docs that are not going to be rendered.\n+            // While the `impl` blocks themselves are only in `libcore`, the module with `doc`\n+            // attached is directly included in `libstd` as well.\n+            if did.is_local() {\n+                for def_id in prim.impls(cx.tcx) {\n                     let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n                     new_items.extend(impls.filter(|i| cx.inlined.insert(i.item_id)));\n                 }"}]}