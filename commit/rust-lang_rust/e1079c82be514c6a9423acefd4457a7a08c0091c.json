{"sha": "e1079c82be514c6a9423acefd4457a7a08c0091c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDc5YzgyYmU1MTRjNmE5NDIzYWNlZmQ0NDU3YTdhMDhjMDA5MWM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-07T21:21:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-17T23:16:41Z"}, "message": "Split out just registration to separate function", "tree": {"sha": "f8e0be96740ede7560ead0a19da98a2a91f0467a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e0be96740ede7560ead0a19da98a2a91f0467a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1079c82be514c6a9423acefd4457a7a08c0091c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1079c82be514c6a9423acefd4457a7a08c0091c", "html_url": "https://github.com/rust-lang/rust/commit/e1079c82be514c6a9423acefd4457a7a08c0091c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1079c82be514c6a9423acefd4457a7a08c0091c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b060f3b84d98a0288cf51a6ab82be61e8f047c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/b060f3b84d98a0288cf51a6ab82be61e8f047c31", "html_url": "https://github.com/rust-lang/rust/commit/b060f3b84d98a0288cf51a6ab82be61e8f047c31"}], "stats": {"total": 74, "additions": 30, "deletions": 44}, "files": [{"sha": "ff0b5a9e25b79b037f6a5fc3e1395521d9b7a111", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e1079c82be514c6a9423acefd4457a7a08c0091c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1079c82be514c6a9423acefd4457a7a08c0091c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=e1079c82be514c6a9423acefd4457a7a08c0091c", "patch": "@@ -168,42 +168,28 @@ impl LintStore {\n             .collect()\n     }\n \n-    pub fn register_early_pass(&mut self,\n-                               register_only: bool,\n-                               pass: EarlyLintPassObject) {\n-        self.push_lints(&pass.get_lints());\n-        if !register_only {\n-            self.early_passes.as_mut().unwrap().push(pass);\n-        }\n+    pub fn register_early_pass(&mut self, pass: EarlyLintPassObject) {\n+        self.register_lints(&pass.get_lints());\n+        self.early_passes.as_mut().unwrap().push(pass);\n     }\n \n-    pub fn register_pre_expansion_pass(\n-        &mut self,\n-        register_only: bool,\n-        pass: EarlyLintPassObject,\n-    ) {\n-        self.push_lints(&pass.get_lints());\n-        if !register_only {\n-            self.pre_expansion_passes.as_mut().unwrap().push(pass);\n-        }\n+    pub fn register_pre_expansion_pass(&mut self, pass: EarlyLintPassObject) {\n+        self.register_lints(&pass.get_lints());\n+        self.pre_expansion_passes.as_mut().unwrap().push(pass);\n     }\n \n-    pub fn register_late_pass(&mut self, register_only: bool, pass: LateLintPassObject) {\n-        self.push_lints(&pass.get_lints());\n-        if !register_only {\n-            self.late_passes.lock().as_mut().unwrap().push(pass);\n-        }\n+    pub fn register_late_pass(&mut self, pass: LateLintPassObject) {\n+        self.register_lints(&pass.get_lints());\n+        self.late_passes.lock().as_mut().unwrap().push(pass);\n     }\n \n-    pub fn register_late_mod_pass(&mut self, register_only: bool, pass: LateLintPassObject) {\n-        self.push_lints(&pass.get_lints());\n-        if !register_only {\n-            self.late_module_passes.push(pass);\n-        }\n+    pub fn register_late_mod_pass(&mut self, pass: LateLintPassObject) {\n+        self.register_lints(&pass.get_lints());\n+        self.late_module_passes.push(pass);\n     }\n \n     // Helper method for register_early/late_pass\n-    fn push_lints(&mut self, lints: &[&'static Lint]) {\n+    pub fn register_lints(&mut self, lints: &[&'static Lint]) {\n         for lint in lints {\n             self.lints.push(lint);\n "}, {"sha": "4e879e508ab4955b4d2f92c7ef3fdfd0ab893701", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1079c82be514c6a9423acefd4457a7a08c0091c/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1079c82be514c6a9423acefd4457a7a08c0091c/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e1079c82be514c6a9423acefd4457a7a08c0091c", "patch": "@@ -299,10 +299,10 @@ pub fn register_plugins<'a>(\n \n     let mut ls = sess.lint_store.borrow_mut();\n     for pass in early_lint_passes {\n-        ls.register_early_pass(false, pass);\n+        ls.register_early_pass(pass);\n     }\n     for pass in late_lint_passes {\n-        ls.register_late_pass(false, pass);\n+        ls.register_late_pass(pass);\n     }\n \n     for (name, (to, deprecated_name)) in lint_groups {"}, {"sha": "49ab34b830a9b00301847004fc4797a22f4860a1", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1079c82be514c6a9423acefd4457a7a08c0091c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1079c82be514c6a9423acefd4457a7a08c0091c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e1079c82be514c6a9423acefd4457a7a08c0091c", "patch": "@@ -204,29 +204,29 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n     }\n \n     macro_rules! register_pass {\n-        ($method:ident, $constructor:expr, [$($args:expr),*]) => (\n-            store.$method(false, $($args,)* box $constructor);\n+        ($method:ident, $constructor:expr) => (\n+            store.$method(box $constructor);\n         )\n     }\n \n     macro_rules! register_passes {\n-        ([$method:ident, $args:tt], [$($passes:ident: $constructor:expr,)*]) => (\n+        ($method:ident, [$($passes:ident: $constructor:expr,)*]) => (\n             $(\n-                register_pass!($method, $constructor, $args);\n+                register_pass!($method, $constructor);\n             )*\n         )\n     }\n \n     if no_interleave_lints {\n-        pre_expansion_lint_passes!(register_passes, [register_pre_expansion_pass, []]);\n-        early_lint_passes!(register_passes, [register_early_pass, []]);\n-        late_lint_passes!(register_passes, [register_late_pass, []]);\n-        late_lint_mod_passes!(register_passes, [register_late_mod_pass, []]);\n+        pre_expansion_lint_passes!(register_passes, register_pre_expansion_pass);\n+        early_lint_passes!(register_passes, register_early_pass);\n+        late_lint_passes!(register_passes, register_late_pass);\n+        late_lint_mod_passes!(register_passes, register_late_mod_pass);\n     } else {\n-        store.register_pre_expansion_pass(true, box BuiltinCombinedPreExpansionLintPass::new());\n-        store.register_early_pass(true, box BuiltinCombinedEarlyLintPass::new());\n-        store.register_late_mod_pass(true, box BuiltinCombinedModuleLateLintPass::new());\n-        store.register_late_pass(true, box BuiltinCombinedLateLintPass::new());\n+        store.register_lints(&BuiltinCombinedPreExpansionLintPass::new().get_lints());\n+        store.register_lints(&BuiltinCombinedEarlyLintPass::new().get_lints());\n+        store.register_lints(&BuiltinCombinedModuleLateLintPass::new().get_lints());\n+        store.register_lints(&BuiltinCombinedLateLintPass::new().get_lints());\n     }\n \n     add_lint_group!(\"nonstandard_style\",\n@@ -484,9 +484,9 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n }\n \n pub fn register_internals(store: &mut lint::LintStore) {\n-    store.register_early_pass(false, box DefaultHashTypes::new());\n-    store.register_early_pass(false, box LintPassImpl);\n-    store.register_late_pass(false, box TyTyKind);\n+    store.register_early_pass(box DefaultHashTypes::new());\n+    store.register_early_pass(box LintPassImpl);\n+    store.register_late_pass(box TyTyKind);\n     store.register_group(\n         false,\n         \"rustc::internal\","}]}