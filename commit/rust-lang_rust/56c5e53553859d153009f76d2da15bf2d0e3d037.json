{"sha": "56c5e53553859d153009f76d2da15bf2d0e3d037", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YzVlNTM1NTM4NTlkMTUzMDA5Zjc2ZDJkYTE1YmYyZDBlM2QwMzc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-04T14:38:21Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-04T14:38:21Z"}, "message": "Handle host's `usize` correctly", "tree": {"sha": "90a02acc8238db26ee1d145a720869d6856adeb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a02acc8238db26ee1d145a720869d6856adeb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56c5e53553859d153009f76d2da15bf2d0e3d037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56c5e53553859d153009f76d2da15bf2d0e3d037", "html_url": "https://github.com/rust-lang/rust/commit/56c5e53553859d153009f76d2da15bf2d0e3d037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56c5e53553859d153009f76d2da15bf2d0e3d037/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b4407b258acdf87a2b44b687564468b115071a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b4407b258acdf87a2b44b687564468b115071a", "html_url": "https://github.com/rust-lang/rust/commit/d0b4407b258acdf87a2b44b687564468b115071a"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "c02ba3f1fab3972139b7b9296a66ce2a4502ff03", "filename": "src/helpers.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56c5e53553859d153009f76d2da15bf2d0e3d037/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c5e53553859d153009f76d2da15bf2d0e3d037/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=56c5e53553859d153009f76d2da15bf2d0e3d037", "patch": "@@ -1,5 +1,6 @@\n use std::{mem, iter};\n use std::ffi::{OsStr, OsString};\n+use std::convert::TryFrom;\n \n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n@@ -459,3 +460,16 @@ fn bytes_to_os_str<'tcx, 'a>(bytes: &'a[u8]) -> InterpResult<'tcx, &'a OsStr> {\n         .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n     Ok(&OsStr::new(s))\n }\n+\n+pub fn try_into_host_usize(i: impl Into<u128>) -> Option<usize> {\n+    let i: u128 = i.into();\n+    if i > usize::max_value() as u128 {\n+        None\n+    } else {\n+        Some(i as usize)\n+    }\n+}\n+\n+pub fn try_from_host_usize<T: TryFrom<u128>>(i: usize) -> Option<T> {\n+    T::try_from(i as u128).ok()\n+}"}, {"sha": "910e3907695c4aacd2c91b93aa0476591523b53c", "filename": "src/shims/fs.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/56c5e53553859d153009f76d2da15bf2d0e3d037/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c5e53553859d153009f76d2da15bf2d0e3d037/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=56c5e53553859d153009f76d2da15bf2d0e3d037", "patch": "@@ -178,16 +178,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let mut bytes = vec![0; count as usize];\n             let result = handle.file.read(&mut bytes);\n \n-            if let Ok(c) = result {\n-                // Check that we read less than `i64::MAX` bytes.\n-                if (c as u64) > (i64::max_value() as u64) {\n-                    throw_unsup_format!(\"Number of read bytes {} is larger than the maximum value\", c);\n+            match result {\n+                Ok(c) => {\n+                    if let Some(read_bytes) = helpers::try_from_host_usize::<i64>(c) {\n+                        // If reading to `bytes` did not fail, we write those bytes to the buffer.\n+                        this.memory.write_bytes(buf, bytes)?;\n+                        Ok(read_bytes)\n+                    } else {\n+                        throw_unsup_format!(\"Number of read bytes {} cannot be transformed to i64\", c);\n+                    }\n+                },\n+                Err(e) => {\n+                    this.set_last_error_from_io_error(e)?;\n+                    Ok(-1)\n                 }\n-                // If reading to `bytes` did not fail, we write those bytes to the buffer.\n-                this.memory.write_bytes(buf, bytes)?\n             }\n-\n-            this.try_unwrap_io_result(result.map(|c| c as i64))\n         } else {\n             this.handle_not_found()\n         }\n@@ -215,14 +220,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let bytes = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n             let result = handle.file.write(&bytes);\n \n-            if let Ok(c) = result {\n-                // Check that we wrote less than `i64::MAX` bytes.\n-                if (c as u64) > (i64::max_value() as u64) {\n-                    throw_unsup_format!(\"Number of written bytes {} is larger than the maximum value\", c);\n+            match result {\n+                Ok(c) => {\n+                    if let Some(written_bytes) = helpers::try_from_host_usize::<i64>(c) {\n+                        Ok(written_bytes)\n+                    } else {\n+                        throw_unsup_format!(\"Number of written bytes {} cannot be transformed to i64\", c);\n+                    }\n+                },\n+                Err(e) => {\n+                    this.set_last_error_from_io_error(e)?;\n+                    Ok(-1)\n                 }\n             }\n-\n-            this.try_unwrap_io_result(result.map(|c| c as i64))\n         } else {\n             this.handle_not_found()\n         }"}]}