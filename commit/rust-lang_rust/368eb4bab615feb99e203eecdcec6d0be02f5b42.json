{"sha": "368eb4bab615feb99e203eecdcec6d0be02f5b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OGViNGJhYjYxNWZlYjk5ZTIwM2VlY2RjZWM2ZDBiZTAyZjViNDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-18T20:53:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-18T20:53:49Z"}, "message": "Add some mutable variants of vector functions to the standard library", "tree": {"sha": "4c6349efdd41baf1caa8d1a774166f0f6b5372b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c6349efdd41baf1caa8d1a774166f0f6b5372b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368eb4bab615feb99e203eecdcec6d0be02f5b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368eb4bab615feb99e203eecdcec6d0be02f5b42", "html_url": "https://github.com/rust-lang/rust/commit/368eb4bab615feb99e203eecdcec6d0be02f5b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368eb4bab615feb99e203eecdcec6d0be02f5b42/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b82a549bf89f101efc19638357d360a968b1348", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b82a549bf89f101efc19638357d360a968b1348", "html_url": "https://github.com/rust-lang/rust/commit/8b82a549bf89f101efc19638357d360a968b1348"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "ce052283982d11e18c3e6a8c200212a9e6482999", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/368eb4bab615feb99e203eecdcec6d0be02f5b42/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368eb4bab615feb99e203eecdcec6d0be02f5b42/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=368eb4bab615feb99e203eecdcec6d0be02f5b42", "patch": "@@ -20,6 +20,7 @@ native \"rust\" mod rustrt {\n      * want to invoke this as vec_alloc[vec[U], U].\n      */\n     fn vec_alloc[T, U](uint n_elts) -> vec[U];\n+    fn vec_alloc_mut[T, U](uint n_elts) -> vec[mutable U];\n \n     fn refcount[T](vec[T] v) -> uint;\n \n@@ -30,6 +31,10 @@ fn alloc[T](uint n_elts) -> vec[T] {\n     ret rustrt.vec_alloc[vec[T], T](n_elts);\n }\n \n+fn alloc_mut[T](uint n_elts) -> vec[mutable T] {\n+    ret rustrt.vec_alloc_mut[vec[mutable T], T](n_elts);\n+}\n+\n fn refcount[T](vec[T] v) -> uint {\n     auto r = rustrt.refcount[T](v);\n     if (r == dbg.const_refcount) {\n@@ -52,6 +57,16 @@ fn init_fn[T](&init_op[T] op, uint n_elts) -> vec[T] {\n     ret v;\n }\n \n+fn init_fn_mut[T](&init_op[T] op, uint n_elts) -> vec[mutable T] {\n+    let vec[mutable T] v = alloc_mut[T](n_elts);\n+    let uint i = 0u;\n+    while (i < n_elts) {\n+        v += vec(mutable op(i));\n+        i += 1u;\n+    }\n+    ret v;\n+}\n+\n fn init_elt[T](&T t, uint n_elts) -> vec[T] {\n     /**\n      * FIXME (issue #81): should be:\n@@ -69,6 +84,16 @@ fn init_elt[T](&T t, uint n_elts) -> vec[T] {\n     ret v;\n }\n \n+fn init_elt_mut[T](&T t, uint n_elts) -> vec[mutable T] {\n+    let vec[mutable T] v = alloc_mut[T](n_elts);\n+    let uint i = n_elts;\n+    while (i > 0u) {\n+        i -= 1u;\n+        v += vec(mutable t);\n+    }\n+    ret v;\n+}\n+\n fn buf[T](vec[T] v) -> vbuf {\n     ret rustrt.vec_buf[T](v, 0u);\n }"}, {"sha": "1d8f8ba82aabcd71b43adc8c3d6d03566ff29f4e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/368eb4bab615feb99e203eecdcec6d0be02f5b42/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/368eb4bab615feb99e203eecdcec6d0be02f5b42/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=368eb4bab615feb99e203eecdcec6d0be02f5b42", "patch": "@@ -100,6 +100,12 @@ vec_alloc(rust_task *task, type_desc *t, type_desc *elem_t, size_t n_elts)\n     return vec;\n }\n \n+extern \"C\" CDECL rust_vec*\n+vec_alloc_mut(rust_task *task, type_desc *t, type_desc *elem_t, size_t n_elts)\n+{\n+    return vec_alloc(task, t, elem_t, n_elts);\n+}\n+\n extern \"C\" CDECL void *\n vec_buf(rust_task *task, type_desc *ty, rust_vec *v, size_t offset)\n {"}]}