{"sha": "7b065dba84362ce90a7d9a920e193dc719198a9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMDY1ZGJhODQzNjJjZTkwYTdkOWE5MjBlMTkzZGM3MTkxOThhOWI=", "commit": {"author": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-29T16:38:46Z"}, "committer": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-29T16:38:46Z"}, "message": "clippy: update reference file to match suggested change", "tree": {"sha": "9047a484097db4e52f449d8ed79cae89bad89725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9047a484097db4e52f449d8ed79cae89bad89725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b065dba84362ce90a7d9a920e193dc719198a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b065dba84362ce90a7d9a920e193dc719198a9b", "html_url": "https://github.com/rust-lang/rust/commit/7b065dba84362ce90a7d9a920e193dc719198a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b065dba84362ce90a7d9a920e193dc719198a9b/comments", "author": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230d9cbe36b809d45efb37092b102bc5d3b350d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/230d9cbe36b809d45efb37092b102bc5d3b350d8", "html_url": "https://github.com/rust-lang/rust/commit/230d9cbe36b809d45efb37092b102bc5d3b350d8"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "4e7fc800061185a3d593562168986905e53e4f52", "filename": "tests/ui/ref_option_ref.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7b065dba84362ce90a7d9a920e193dc719198a9b/tests%2Fui%2Fref_option_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b065dba84362ce90a7d9a920e193dc719198a9b/tests%2Fui%2Fref_option_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_option_ref.stderr?ref=7b065dba84362ce90a7d9a920e193dc719198a9b", "patch": "@@ -1,66 +1,66 @@\n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:10:23\n    |\n LL | static REF_THRESHOLD: &Option<&i32> = &Some(&THRESHOLD);\n    |                       ^^^^^^^^^^^^^ help: try: `Option<&i32>`\n    |\n    = note: `-D clippy::ref-option-ref` implied by `-D warnings`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:12:18\n    |\n LL | const REF_CONST: &Option<&i32> = &Some(&CONST_THRESHOLD);\n    |                  ^^^^^^^^^^^^^ help: try: `Option<&i32>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:14:25\n    |\n LL | type RefOptRefU32<'a> = &'a Option<&'a u32>;\n    |                         ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:15:25\n    |\n LL | type RefOptRef<'a, T> = &'a Option<&'a T>;\n    |                         ^^^^^^^^^^^^^^^^^ help: try: `Option<&'a T>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:17:14\n    |\n LL | fn foo(data: &Option<&u32>) {}\n    |              ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:19:23\n    |\n LL | fn bar(data: &u32) -> &Option<&u32> {\n    |                       ^^^^^^^^^^^^^ help: try: `Option<&u32>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:24:11\n    |\n LL |     data: &'a Option<&'a u32>,\n    |           ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:27:32\n    |\n LL | struct StructTupleRef<'a>(u32, &'a Option<&'a u32>);\n    |                                ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:31:14\n    |\n LL |     Variant2(&'a Option<&'a u32>),\n    |              ^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'a u32>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:40:14\n    |\n LL |     type A = &'static Option<&'static Self>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Option<&'static Self>`\n \n-error: since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\n+error: since `&` implements the `Copy` trait, `&Option<&T>` can be simplified to `Option<&T>`\n   --> $DIR/ref_option_ref.rs:46:12\n    |\n LL |     let x: &Option<&u32> = &None;"}]}