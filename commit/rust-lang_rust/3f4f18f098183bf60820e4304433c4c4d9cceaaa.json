{"sha": "3f4f18f098183bf60820e4304433c4c4d9cceaaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNGYxOGYwOTgxODNiZjYwODIwZTQzMDQ0MzNjNGM0ZDljY2VhYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T22:15:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T22:15:25Z"}, "message": "Auto merge of #52397 - estebank:println-comma, r=oli-obk\n\nSuggest comma when writing `println!(\"{}\" a);`\n\nFix #49370.", "tree": {"sha": "55ebf9dfc309669e521980d80bf32d2a7675b7f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55ebf9dfc309669e521980d80bf32d2a7675b7f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f4f18f098183bf60820e4304433c4c4d9cceaaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4f18f098183bf60820e4304433c4c4d9cceaaa", "html_url": "https://github.com/rust-lang/rust/commit/3f4f18f098183bf60820e4304433c4c4d9cceaaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f4f18f098183bf60820e4304433c4c4d9cceaaa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e90dc6f80d76c94a5b1b13d464d1de7e18a05d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90dc6f80d76c94a5b1b13d464d1de7e18a05d05", "html_url": "https://github.com/rust-lang/rust/commit/e90dc6f80d76c94a5b1b13d464d1de7e18a05d05"}, {"sha": "daa5bd35a8746126a4af014d135ddb8bc442b9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa5bd35a8746126a4af014d135ddb8bc442b9e6", "html_url": "https://github.com/rust-lang/rust/commit/daa5bd35a8746126a4af014d135ddb8bc442b9e6"}], "stats": {"total": 102, "additions": 92, "deletions": 10}, "files": [{"sha": "e7e94614ac8658e1683332953703486e2139e8e6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=3f4f18f098183bf60820e4304433c4c4d9cceaaa", "patch": "@@ -174,7 +174,32 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     }\n \n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n-    cx.span_err(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+    let mut err = cx.struct_span_err(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+\n+    // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n+    if let Some((arg, comma_span)) = arg.add_comma() {\n+        for lhs in lhses { // try each arm's matchers\n+            let lhs_tt = match *lhs {\n+                quoted::TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n+                _ => cx.span_bug(sp, \"malformed macro lhs\")\n+            };\n+            match TokenTree::parse(cx, lhs_tt, arg.clone()) {\n+                Success(_) => {\n+                    if comma_span == DUMMY_SP {\n+                        err.note(\"you might be missing a comma\");\n+                    } else {\n+                        err.span_suggestion_short(\n+                            comma_span,\n+                            \"missing comma here\",\n+                            \",\".to_string(),\n+                        );\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+    err.emit();\n     cx.trace_macros_diag();\n     DummyResult::any(sp)\n }"}, {"sha": "f84b5307a1137895e4240590621d723789cc1267", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=3f4f18f098183bf60820e4304433c4c4d9cceaaa", "patch": "@@ -182,6 +182,31 @@ pub struct TokenStream {\n     kind: TokenStreamKind,\n }\n \n+impl TokenStream {\n+    /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`\n+    /// separating the two arguments with a comma for diagnostic suggestions.\n+    pub(crate) fn add_comma(&self) -> Option<(TokenStream, Span)> {\n+        // Used to suggest if a user writes `println!(\"{}\" a);`\n+        if let TokenStreamKind::Stream(ref slice) = self.kind {\n+            if slice.len() == 2 {\n+                let comma_span = match slice[0] {\n+                    TokenStream { kind: TokenStreamKind::Tree(TokenTree::Token(sp, _)) } |\n+                    TokenStream { kind: TokenStreamKind::Tree(TokenTree::Delimited(sp, _)) } => {\n+                        sp.shrink_to_hi()\n+                    }\n+                    _ => DUMMY_SP,\n+                };\n+                let comma = TokenStream {\n+                    kind: TokenStreamKind::Tree(TokenTree::Token(comma_span, token::Comma)),\n+                };\n+                let slice = RcSlice::new(vec![slice[0].clone(), comma, slice[1].clone()]);\n+                return Some((TokenStream { kind: TokenStreamKind::Stream(slice) }, comma_span));\n+            }\n+        }\n+        None\n+    }\n+}\n+\n #[derive(Clone, Debug)]\n enum TokenStreamKind {\n     Empty,"}, {"sha": "53f8fe2b0c2230c942b8fbe8b9599edb1f5f8f0f", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=3f4f18f098183bf60820e4304433c4c4d9cceaaa", "patch": "@@ -147,7 +147,7 @@ fn parse_args(ecx: &mut ExtCtxt,\n     let mut named = false;\n     while p.token != token::Eof {\n         if !p.eat(&token::Comma) {\n-            ecx.span_err(sp, \"expected token: `,`\");\n+            ecx.span_err(p.span, \"expected token: `,`\");\n             return None;\n         }\n         if p.token == token::Eof {"}, {"sha": "1c801f2a79039e58007d992620e695ed39c4f612", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=3f4f18f098183bf60820e4304433c4c4d9cceaaa", "patch": "@@ -7,20 +7,16 @@ LL |     format!(); //~ ERROR requires at least a format string argument\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n-  --> $DIR/bad-format-args.rs:13:5\n+  --> $DIR/bad-format-args.rs:13:16\n    |\n LL |     format!(\"\" 1); //~ ERROR expected token: `,`\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |                ^\n \n error: expected token: `,`\n-  --> $DIR/bad-format-args.rs:14:5\n+  --> $DIR/bad-format-args.rs:14:19\n    |\n LL |     format!(\"\", 1 1); //~ ERROR expected token: `,`\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |                   ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ac82171a4e8cc065779490bbe848d6ad713bf7fd", "filename": "src/test/ui/macros/missing-comma.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.rs?ref=3f4f18f098183bf60820e4304433c4c4d9cceaaa", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($a:ident, $b:ident) => ()\n+}\n+\n+fn main() {\n+    println!(\"{}\" a);\n+    //~^ ERROR expected token: `,`\n+    foo!(a b);\n+    //~^ ERROR no rules expected the token `b`\n+}"}, {"sha": "3467032d9b5f3ada3818ed757e40f75795d7db21", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f4f18f098183bf60820e4304433c4c4d9cceaaa/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=3f4f18f098183bf60820e4304433c4c4d9cceaaa", "patch": "@@ -0,0 +1,16 @@\n+error: expected token: `,`\n+  --> $DIR/missing-comma.rs:16:19\n+   |\n+LL |     println!(\"{}\" a);\n+   |                   ^\n+\n+error: no rules expected the token `b`\n+  --> $DIR/missing-comma.rs:18:12\n+   |\n+LL |     foo!(a b);\n+   |           -^\n+   |           |\n+   |           help: missing comma here\n+\n+error: aborting due to 2 previous errors\n+"}]}