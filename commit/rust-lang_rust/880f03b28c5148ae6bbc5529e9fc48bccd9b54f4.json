{"sha": "880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MGYwM2IyOGM1MTQ4YWU2YmJjNTUyOWU5ZmM0OGJjY2Q5YjU0ZjQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-22T23:30:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-22T23:30:23Z"}, "message": "Rollup merge of #40509 - jseyfried:duplicate_check_macro_exports, r=nrc\n\nForbid conflicts between macros 1.0 exports and macros 2.0 exports\n\nThis PR forbids for conflicts between `#[macro_export]`/`#[macro_reexport]` macro exports and `pub use` macro exports. For example,\n```rust\n// crate A:\npub use macros::foo;\n//^ This is allowed today, will be forbidden by this PR.\n\n// crate B:\nextern crate A; // This triggers a confusing error today.\nuse A::foo; // This could refer to refer to either macro export in crate A.\n```\n\nr? @nrc", "tree": {"sha": "c89fc5b3068349d561984ce4f33333af66e82612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c89fc5b3068349d561984ce4f33333af66e82612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "html_url": "https://github.com/rust-lang/rust/commit/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c4f2c64c6759a82f143e23964a46a65c67509c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4f2c64c6759a82f143e23964a46a65c67509c9", "html_url": "https://github.com/rust-lang/rust/commit/8c4f2c64c6759a82f143e23964a46a65c67509c9"}, {"sha": "678e882ce2fdafdfa886cc23a288709140cfd125", "url": "https://api.github.com/repos/rust-lang/rust/commits/678e882ce2fdafdfa886cc23a288709140cfd125", "html_url": "https://github.com/rust-lang/rust/commit/678e882ce2fdafdfa886cc23a288709140cfd125"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "7bab4a8d725dc2bcdfd87fdde54c44d639c3973c", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "patch": "@@ -12,6 +12,7 @@ use hir::def_id::DefId;\n use util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n+use syntax_pos::Span;\n use hir;\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -116,6 +117,7 @@ pub type ExportMap = NodeMap<Vec<Export>>;\n pub struct Export {\n     pub name: ast::Name, // The name of the target.\n     pub def: Def, // The definition of the target.\n+    pub span: Span, // The span of the target definition.\n }\n \n impl CtorKind {"}, {"sha": "c2ad598b0c503c49acf8c080596f84360f411048", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "patch": "@@ -683,7 +683,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         },\n                         ext.kind()\n                     );\n-                    callback(def::Export { name: name, def: def });\n+                    callback(def::Export { name: name, def: def, span: DUMMY_SP });\n                 }\n             }\n             return\n@@ -720,6 +720,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                 callback(def::Export {\n                                     def: def,\n                                     name: self.item_name(child_index),\n+                                    span: self.entry(child_index).span.decode(self),\n                                 });\n                             }\n                         }\n@@ -732,34 +733,26 @@ impl<'a, 'tcx> CrateMetadata {\n                 }\n \n                 let def_key = self.def_key(child_index);\n+                let span = child.span.decode(self);\n                 if let (Some(def), Some(name)) =\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n-                    callback(def::Export {\n-                        def: def,\n-                        name: name,\n-                    });\n+                    callback(def::Export { def: def, name: name, span: span });\n                     // For non-reexport structs and variants add their constructors to children.\n                     // Reexport lists automatically contain constructors when necessary.\n                     match def {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {\n                                 let ctor_kind = self.get_ctor_kind(child_index);\n                                 let ctor_def = Def::StructCtor(ctor_def_id, ctor_kind);\n-                                callback(def::Export {\n-                                    def: ctor_def,\n-                                    name: name,\n-                                });\n+                                callback(def::Export { def: ctor_def, name: name, span: span });\n                             }\n                         }\n                         Def::Variant(def_id) => {\n                             // Braced variants, unlike structs, generate unusable names in\n                             // value namespace, they are reserved for possible future use.\n                             let ctor_kind = self.get_ctor_kind(child_index);\n                             let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n-                            callback(def::Export {\n-                                def: ctor_def,\n-                                name: name,\n-                            });\n+                            callback(def::Export { def: ctor_def, name: name, span: span });\n                         }\n                         _ => {}\n                     }"}, {"sha": "c33d5b9b6e16bb14bb4980039c00deac67c22c5c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "patch": "@@ -605,7 +605,7 @@ impl<'a> Resolver<'a> {\n             let ident = Ident::with_empty_ctxt(name);\n             let result = self.resolve_ident_in_module(module, ident, MacroNS, false, None);\n             if let Ok(binding) = result {\n-                self.macro_exports.push(Export { name: name, def: binding.def() });\n+                self.macro_exports.push(Export { name: name, def: binding.def(), span: span });\n             } else {\n                 span_err!(self.session, span, E0470, \"reexported macro not found\");\n             }"}, {"sha": "99fc1c142f6815fd2cc097699e3fd0be0e02cd2b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "patch": "@@ -653,7 +653,7 @@ impl<'a> Resolver<'a> {\n \n         if attr::contains_name(&item.attrs, \"macro_export\") {\n             let def = Def::Macro(def_id, MacroKind::Bang);\n-            self.macro_exports.push(Export { name: ident.name, def: def });\n+            self.macro_exports.push(Export { name: ident.name, def: def, span: item.span });\n         }\n     }\n "}, {"sha": "2f4ac12cd7363bf2604c8d738206947802300f27", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "patch": "@@ -21,7 +21,7 @@ use rustc::ty;\n use rustc::lint::builtin::PRIVATE_IN_PUBLIC;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc::util::nodemap::FxHashMap;\n \n use syntax::ast::{Ident, NodeId};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n@@ -763,10 +763,11 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         *module.globs.borrow_mut() = Vec::new();\n \n         let mut reexports = Vec::new();\n+        let mut exported_macro_names = FxHashMap();\n         if module as *const _ == self.graph_root as *const _ {\n-            let mut exported_macro_names = FxHashSet();\n-            for export in mem::replace(&mut self.macro_exports, Vec::new()).into_iter().rev() {\n-                if exported_macro_names.insert(export.name) {\n+            let macro_exports = mem::replace(&mut self.macro_exports, Vec::new());\n+            for export in macro_exports.into_iter().rev() {\n+                if exported_macro_names.insert(export.name, export.span).is_none() {\n                     reexports.push(export);\n                 }\n             }\n@@ -786,7 +787,17 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                     if !def.def_id().is_local() {\n                         self.session.cstore.export_macros(def.def_id().krate);\n                     }\n-                    reexports.push(Export { name: ident.name, def: def });\n+                    if let Def::Macro(..) = def {\n+                        if let Some(&span) = exported_macro_names.get(&ident.name) {\n+                            let msg =\n+                                format!(\"a macro named `{}` has already been exported\", ident);\n+                            self.session.struct_span_err(span, &msg)\n+                                .span_label(span, &format!(\"`{}` already exported\", ident))\n+                                .span_note(binding.span, \"previous macro export here\")\n+                                .emit();\n+                        }\n+                    }\n+                    reexports.push(Export { name: ident.name, def: def, span: binding.span });\n                 }\n             }\n "}, {"sha": "53d7e54ee5b7b26a8759989eda330b27b1fb5e5c", "filename": "src/test/compile-fail/duplicate-check-macro-exports.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Ftest%2Fcompile-fail%2Fduplicate-check-macro-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880f03b28c5148ae6bbc5529e9fc48bccd9b54f4/src%2Ftest%2Fcompile-fail%2Fduplicate-check-macro-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-check-macro-exports.rs?ref=880f03b28c5148ae6bbc5529e9fc48bccd9b54f4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(use_extern_macros)]\n+\n+pub use std::panic; //~ NOTE previous macro export here\n+\n+#[macro_export]\n+macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n+//~| NOTE `panic` already exported\n+\n+fn main() {}"}]}