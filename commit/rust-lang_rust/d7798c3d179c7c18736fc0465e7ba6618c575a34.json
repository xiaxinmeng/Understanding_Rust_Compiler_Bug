{"sha": "d7798c3d179c7c18736fc0465e7ba6618c575a34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Nzk4YzNkMTc5YzdjMTg3MzZmYzA0NjVlN2JhNjYxOGM1NzVhMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-02T12:14:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-02T12:14:14Z"}, "message": "Auto merge of #42128 - kennytm:travis-folder, r=alexcrichton\n\nImprove Travis CI log (travis_fold, colors)\n\nResult looks like (https://travis-ci.org/rust-lang/rust/jobs/234614611):\n\n<details><summary>Full page screenshot</summary>\n\n![1-fullpage](https://cloud.githubusercontent.com/assets/103023/26302841/2627c354-3f18-11e7-9299-52a2088639af.jpg)\n\n</details>\n\n---\n\n* Bring back colors on Travis, which was disabled since #39036. Append `--color=always` to cargo when running in CI environment.\n* Removed `set -x` from the shell scripts. The `retry` function already prints which command it is running, adding `-x` just adds noise to the output. Interesting information can be manually `echo`ed.\n* Support `travis_fold`/`travis_time`. Matching pairs of these allow Travis CI to collapse the output in between. This greatly cut down the unnecessary \"successful\" output one need to scroll through before finding the failed statement.\n* Passed `--quiet` to all tests, so tests not failing will not occupy a line of log, reducing bloat in the report.\n\nAlso include some minor changes, like changing the `script` of `.travis.yml` to execute a single-line command, so the log won't write the extremely long multi-line\n`The command \"if [ \"$ALLOW_PR\" = \"\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then \u2026 \" exited with 0` at the end.", "tree": {"sha": "d0c818c4816b7b17c8071e906aa0bd864d8b1325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c818c4816b7b17c8071e906aa0bd864d8b1325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7798c3d179c7c18736fc0465e7ba6618c575a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7798c3d179c7c18736fc0465e7ba6618c575a34", "html_url": "https://github.com/rust-lang/rust/commit/d7798c3d179c7c18736fc0465e7ba6618c575a34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7798c3d179c7c18736fc0465e7ba6618c575a34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558cd1e393188a07bda413931aa88e82996d31c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/558cd1e393188a07bda413931aa88e82996d31c2", "html_url": "https://github.com/rust-lang/rust/commit/558cd1e393188a07bda413931aa88e82996d31c2"}, {"sha": "6ac0787ff349dd6df81bb84e673b1b4881f9e856", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac0787ff349dd6df81bb84e673b1b4881f9e856", "html_url": "https://github.com/rust-lang/rust/commit/6ac0787ff349dd6df81bb84e673b1b4881f9e856"}], "stats": {"total": 285, "additions": 259, "deletions": 26}, "files": [{"sha": "ff839c34df1a7d323301568c4629f43eb84afd59", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -101,3 +101,4 @@ version.ml\n version.texi\n .cargo\n !src/vendor/**\n+/src/target/"}, {"sha": "9ef759b3f80ae6e7e88f5e94e5bc5b712812b106", "filename": ".travis.yml", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -1,4 +1,4 @@\n-language: minimal\n+language: generic\n sudo: required\n dist: trusty\n services:\n@@ -152,20 +152,21 @@ before_script:\n       echo \"#### Disk usage before running script:\";\n       df -h;\n       du . | sort -nr | head -n100\n-\n-script:\n   - >\n       if [ \"$ALLOW_PR\" = \"\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then\n-          echo skipping, not a full build\n+          export RUN_SCRIPT=\"echo 'skipping, not a full build'\";\n       else\n-          stamp src/ci/init_repo.sh . \"$HOME/rustsrc\" &&\n+          RUN_SCRIPT=\"stamp src/ci/init_repo.sh . $HOME/rustsrc\";\n           if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-              stamp src/ci/run.sh;\n+              export RUN_SCRIPT=\"$RUN_SCRIPT && stamp src/ci/run.sh\";\n           else\n-              stamp src/ci/docker/run.sh $IMAGE;\n+              export RUN_SCRIPT=\"$RUN_SCRIPT && stamp src/ci/docker/run.sh $IMAGE\";\n           fi\n       fi\n \n+script:\n+  - sh -x -c \"$RUN_SCRIPT\"\n+\n after_success:\n   - >\n       echo \"#### Build successful; Disk usage after running script:\";"}, {"sha": "d51e3102d8ad044a151d2954fc2b98a06e239aaa", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -124,13 +124,17 @@ pub fn cargo(build: &Build, stage: u32, host: &str) {\n /// otherwise just implements a few lint-like checks that are specific to the\n /// compiler itself.\n pub fn tidy(build: &Build, host: &str) {\n+    let _folder = build.fold_output(|| \"tidy\");\n     println!(\"tidy check ({})\", host);\n     let compiler = Compiler::new(0, host);\n     let mut cmd = build.tool_cmd(&compiler, \"tidy\");\n     cmd.arg(build.src.join(\"src\"));\n     if !build.config.vendor {\n         cmd.arg(\"--no-vendor\");\n     }\n+    if build.config.quiet_tests {\n+        cmd.arg(\"--quiet\");\n+    }\n     build.run(&mut cmd);\n }\n \n@@ -148,6 +152,7 @@ pub fn compiletest(build: &Build,\n                    target: &str,\n                    mode: &str,\n                    suite: &str) {\n+    let _folder = build.fold_output(|| format!(\"test_{}\", suite));\n     println!(\"Check compiletest suite={} mode={} ({} -> {})\",\n              suite, mode, compiler.host, target);\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, compiler.host),\n@@ -278,6 +283,8 @@ pub fn compiletest(build: &Build,\n         cmd.arg(\"--android-cross-path\").arg(\"\");\n     }\n \n+    build.ci_env.force_coloring_in_ci(&mut cmd);\n+\n     let _time = util::timeit();\n     build.run(&mut cmd);\n }\n@@ -292,6 +299,7 @@ pub fn docs(build: &Build, compiler: &Compiler) {\n     // tests for all files that end in `*.md`\n     let mut stack = vec![build.src.join(\"src/doc\")];\n     let _time = util::timeit();\n+    let _folder = build.fold_output(|| \"test_docs\");\n \n     while let Some(p) = stack.pop() {\n         if p.is_dir() {\n@@ -325,6 +333,7 @@ pub fn docs(build: &Build, compiler: &Compiler) {\n /// generate a markdown file from the error indexes of the code base which is\n /// then passed to `rustdoc --test`.\n pub fn error_index(build: &Build, compiler: &Compiler) {\n+    let _folder = build.fold_output(|| \"test_error_index\");\n     println!(\"Testing error-index stage{}\", compiler.stage);\n \n     let dir = testdir(build, compiler.host);\n@@ -349,13 +358,14 @@ fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n     cmd.arg(markdown);\n     cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n-    let mut test_args = build.flags.cmd.test_args().join(\" \");\n-    if build.config.quiet_tests {\n-        test_args.push_str(\" --quiet\");\n-    }\n+    let test_args = build.flags.cmd.test_args().join(\" \");\n     cmd.arg(\"--test-args\").arg(test_args);\n \n-    build.run(&mut cmd);\n+    if build.config.quiet_tests {\n+        build.run_quiet(&mut cmd);\n+    } else {\n+        build.run(&mut cmd);\n+    }\n }\n \n /// Run all unit tests plus documentation tests for an entire crate DAG defined\n@@ -384,6 +394,9 @@ pub fn krate(build: &Build,\n         }\n         _ => panic!(\"can only test libraries\"),\n     };\n+    let _folder = build.fold_output(|| {\n+        format!(\"{}_stage{}-{}\", test_kind.subcommand(), compiler.stage, name)\n+    });\n     println!(\"{} {} stage{} ({} -> {})\", test_kind, name, compiler.stage,\n              compiler.host, target);\n "}, {"sha": "9946c93913fe7292fd502c6d2e726831a6af3e5c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -41,6 +41,7 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     let libdir = build.sysroot_libdir(compiler, target);\n     t!(fs::create_dir_all(&libdir));\n \n+    let _folder = build.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n     println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n              compiler.host, target);\n \n@@ -192,6 +193,7 @@ pub fn build_startup_objects(build: &Build, for_compiler: &Compiler, target: &st\n /// the build using the `compiler` targeting the `target` architecture. The\n /// artifacts created will also be linked into the sysroot directory.\n pub fn test(build: &Build, target: &str, compiler: &Compiler) {\n+    let _folder = build.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n     println!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n              compiler.host, target);\n     let out_dir = build.cargo_out(compiler, Mode::Libtest, target);\n@@ -228,6 +230,7 @@ pub fn test_link(build: &Build,\n /// the `compiler` targeting the `target` architecture. The artifacts\n /// created will also be linked into the sysroot directory.\n pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n+    let _folder = build.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n     println!(\"Building stage{} compiler artifacts ({} -> {})\",\n              compiler.stage, compiler.host, target);\n \n@@ -435,6 +438,7 @@ pub fn maybe_clean_tools(build: &Build, stage: u32, target: &str, mode: Mode) {\n /// This will build the specified tool with the specified `host` compiler in\n /// `stage` into the normal cargo output directory.\n pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n+    let _folder = build.fold_output(|| format!(\"stage{}-{}\", stage, tool));\n     println!(\"Building stage{} tool {} ({})\", stage, tool, target);\n \n     let compiler = Compiler::new(stage, &build.config.build);"}, {"sha": "01235fe30bd65a5f886e0e71540b6bd5a788a274", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -90,7 +90,7 @@ use std::process::Command;\n \n use build_helper::{run_silent, run_suppressed, output, mtime};\n \n-use util::{exe, libdir, add_lib_path};\n+use util::{exe, libdir, add_lib_path, OutputFolder, CiEnv};\n \n mod cc;\n mod channel;\n@@ -179,6 +179,7 @@ pub struct Build {\n     crates: HashMap<String, Crate>,\n     is_sudo: bool,\n     src_is_git: bool,\n+    ci_env: CiEnv,\n }\n \n #[derive(Debug)]\n@@ -272,6 +273,7 @@ impl Build {\n             lldb_python_dir: None,\n             is_sudo: is_sudo,\n             src_is_git: src_is_git,\n+            ci_env: CiEnv::current(),\n         }\n     }\n \n@@ -507,6 +509,9 @@ impl Build {\n         if self.config.vendor || self.is_sudo {\n             cargo.arg(\"--frozen\");\n         }\n+\n+        self.ci_env.force_coloring_in_ci(&mut cargo);\n+\n         return cargo\n     }\n \n@@ -1011,6 +1016,19 @@ impl Build {\n             \"nightly\" | _ => true,\n         }\n     }\n+\n+    /// Fold the output of the commands after this method into a group. The fold\n+    /// ends when the returned object is dropped. Folding can only be used in\n+    /// the Travis CI environment.\n+    pub fn fold_output<D, F>(&self, name: F) -> Option<OutputFolder>\n+        where D: Into<String>, F: FnOnce() -> D\n+    {\n+        if self.ci_env == CiEnv::Travis {\n+            Some(OutputFolder::new(name().into()))\n+        } else {\n+            None\n+        }\n+    }\n }\n \n impl<'a> Compiler<'a> {"}, {"sha": "ce1f63b4233e229261ac4c7088792959abe06709", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -63,6 +63,7 @@ pub fn llvm(build: &Build, target: &str) {\n         drop(fs::remove_dir_all(&out_dir));\n     }\n \n+    let _folder = build.fold_output(|| \"llvm\");\n     println!(\"Building LLVM for {}\", target);\n     let _time = util::timeit();\n     t!(fs::create_dir_all(&out_dir));\n@@ -218,6 +219,7 @@ pub fn test_helpers(build: &Build, target: &str) {\n         return\n     }\n \n+    let _folder = build.fold_output(|| \"build_test_helpers\");\n     println!(\"Building test helpers\");\n     t!(fs::create_dir_all(&dst));\n     let mut cfg = gcc::Config::new();"}, {"sha": "61bd85e76c59882b9967746f8bbba3a76ec9382e", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 101, "deletions": 2, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -16,10 +16,10 @@\n use std::env;\n use std::ffi::OsString;\n use std::fs;\n-use std::io;\n+use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n use std::process::Command;\n-use std::time::Instant;\n+use std::time::{SystemTime, Instant};\n \n use filetime::{self, FileTime};\n \n@@ -324,3 +324,102 @@ pub fn symlink_dir(src: &Path, dest: &Path) -> io::Result<()> {\n         }\n     }\n }\n+\n+/// An RAII structure that indicates all output until this instance is dropped\n+/// is part of the same group.\n+///\n+/// On Travis CI, these output will be folded by default, together with the\n+/// elapsed time in this block. This reduces noise from unnecessary logs,\n+/// allowing developers to quickly identify the error.\n+///\n+/// Travis CI supports folding by printing `travis_fold:start:<name>` and\n+/// `travis_fold:end:<name>` around the block. Time elapsed is recognized\n+/// similarly with `travis_time:[start|end]:<name>`. These are undocumented, but\n+/// can easily be deduced from source code of the [Travis build commands].\n+///\n+/// [Travis build commands]:\n+/// https://github.com/travis-ci/travis-build/blob/f603c0089/lib/travis/build/templates/header.sh\n+pub struct OutputFolder {\n+    name: String,\n+    start_time: SystemTime, // we need SystemTime to get the UNIX timestamp.\n+}\n+\n+impl OutputFolder {\n+    /// Creates a new output folder with the given group name.\n+    pub fn new(name: String) -> OutputFolder {\n+        // \"\\r\" moves the cursor to the beginning of the line, and \"\\x1b[0K\" is\n+        // the ANSI escape code to clear from the cursor to end of line.\n+        // Travis seems to have trouble when _not_ using \"\\r\\x1b[0K\", that will\n+        // randomly put lines to the top of the webpage.\n+        print!(\"travis_fold:start:{0}\\r\\x1b[0Ktravis_time:start:{0}\\r\\x1b[0K\", name);\n+        OutputFolder {\n+            name,\n+            start_time: SystemTime::now(),\n+        }\n+    }\n+}\n+\n+impl Drop for OutputFolder {\n+    fn drop(&mut self) {\n+        use std::time::*;\n+        use std::u64;\n+\n+        fn to_nanos(duration: Result<Duration, SystemTimeError>) -> u64 {\n+            match duration {\n+                Ok(d) => d.as_secs() * 1_000_000_000 + d.subsec_nanos() as u64,\n+                Err(_) => u64::MAX,\n+            }\n+        }\n+\n+        let end_time = SystemTime::now();\n+        let duration = end_time.duration_since(self.start_time);\n+        let start = self.start_time.duration_since(UNIX_EPOCH);\n+        let finish = end_time.duration_since(UNIX_EPOCH);\n+        println!(\n+            \"travis_fold:end:{0}\\r\\x1b[0K\\n\\\n+                travis_time:end:{0}:start={1},finish={2},duration={3}\\r\\x1b[0K\",\n+            self.name,\n+            to_nanos(start),\n+            to_nanos(finish),\n+            to_nanos(duration)\n+        );\n+        io::stdout().flush().unwrap();\n+    }\n+}\n+\n+/// The CI environment rustbuild is running in. This mainly affects how the logs\n+/// are printed.\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum CiEnv {\n+    /// Not a CI environment.\n+    None,\n+    /// The Travis CI environment, for Linux (including Docker) and macOS builds.\n+    Travis,\n+    /// The AppVeyor environment, for Windows builds.\n+    AppVeyor,\n+}\n+\n+impl CiEnv {\n+    /// Obtains the current CI environment.\n+    pub fn current() -> CiEnv {\n+        if env::var(\"TRAVIS\").ok().map_or(false, |e| &*e == \"true\") {\n+            CiEnv::Travis\n+        } else if env::var(\"APPVEYOR\").ok().map_or(false, |e| &*e == \"True\") {\n+            CiEnv::AppVeyor\n+        } else {\n+            CiEnv::None\n+        }\n+    }\n+\n+    /// If in a CI environment, forces the command to run with colors.\n+    pub fn force_coloring_in_ci(self, cmd: &mut Command) {\n+        if self != CiEnv::None {\n+            // Due to use of stamp/docker, the output stream of rustbuild is not\n+            // a TTY in CI, so coloring is by-default turned off.\n+            // The explicit `TERM=xterm` environment is needed for\n+            // `--color always` to actually work. This env var was lost when\n+            // compiling through the Makefile. Very strange.\n+            cmd.env(\"TERM\", \"xterm\").args(&[\"--color\", \"always\"]);\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "a9b1167b6faf7460eb19e2b374c551cc6218c076", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -21,6 +21,9 @@ root_dir=\"`dirname $src_dir`\"\n \n source \"$ci_dir/shared.sh\"\n \n+travis_fold start build_docker\n+travis_time_start\n+\n if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n     retry docker \\\n       build \\\n@@ -44,6 +47,9 @@ else\n     exit 1\n fi\n \n+travis_fold end build_docker\n+travis_time_finish\n+\n objdir=$root_dir/obj\n \n mkdir -p $HOME/.cargo\n@@ -72,6 +78,7 @@ exec docker \\\n   --env DEPLOY=$DEPLOY \\\n   --env DEPLOY_ALT=$DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n+  --env TRAVIS=${TRAVIS-false} \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n   --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --privileged \\"}, {"sha": "282da009eac35c3f3e29c88b1e4e70c7c2ae1214", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -13,11 +13,11 @@ set -o errexit\n set -o pipefail\n set -o nounset\n \n-set -o xtrace\n-\n ci_dir=$(cd $(dirname $0) && pwd)\n . \"$ci_dir/shared.sh\"\n \n+travis_fold start init_repo\n+\n REPO_DIR=\"$1\"\n CACHE_DIR=\"$2\"\n \n@@ -38,6 +38,7 @@ fi\n \n # Wipe the cache if it's not valid, or mark it as invalid while we update it\n if [ ! -f \"$cache_valid_file\" ]; then\n+    echo \"Invalid cache, wiping ($cache_valid_file missing)\"\n     rm -rf \"$CACHE_DIR\"\n     mkdir \"$CACHE_DIR\"\n else\n@@ -54,10 +55,14 @@ else\n         rm -rf \"$CACHE_DIR\"\n         mkdir \"$CACHE_DIR\"\n     else\n+        echo \"Valid cache ($cache_valid_file exists)\"\n         rm \"$cache_valid_file\"\n     fi\n fi\n \n+travis_fold start update_cache\n+travis_time_start\n+\n # Update the cache (a pristine copy of the rust source master)\n if [ ! -d \"$cache_src_dir/.git\" ]; then\n     retry sh -c \"rm -rf $cache_src_dir && mkdir -p $cache_src_dir && \\\n@@ -69,8 +74,15 @@ retry sh -c \"cd $cache_src_dir && \\\n     git submodule deinit -f . && git submodule sync && git submodule update --init\"\n \n # Cache was updated without errors, mark it as valid\n+echo \"Refreshed cache (touch $cache_valid_file)\"\n touch \"$cache_valid_file\"\n \n+travis_fold end update_cache\n+travis_time_finish\n+\n+travis_fold start update_submodules\n+travis_time_start\n+\n # Update the submodules of the repo we're in, using the pristine repo as\n # a cache for any object files\n # No, `git submodule foreach` won't work:\n@@ -94,3 +106,8 @@ for module in $modules; do\n     retry sh -c \"git submodule deinit -f $module && \\\n         git submodule update --init --reference $cache_src_dir/$module $module\"\n done\n+\n+travis_fold end update_submodules\n+travis_time_finish\n+\n+travis_fold end init_repo"}, {"sha": "08f5939ef7908406e25cb0beeb1f4681fb9d06ea", "filename": "src/ci/run.sh", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -58,21 +58,39 @@ else\n   fi\n fi\n \n+travis_fold start configure\n+travis_time_start\n $SRC/configure $RUST_CONFIGURE_ARGS\n+travis_fold end configure\n+travis_time_finish\n+\n+travis_fold start make-prepare\n+travis_time_start\n retry make prepare\n+travis_fold end make-prepare\n+travis_time_finish\n \n if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n     ncpus=$(sysctl -n hw.ncpu)\n else\n     ncpus=$(grep processor /proc/cpuinfo | wc -l)\n fi\n \n-set -x\n-\n if [ ! -z \"$SCRIPT\" ]; then\n   sh -x -c \"$SCRIPT\"\n else\n-  make -j $ncpus tidy\n-  make -j $ncpus\n-  make $RUST_CHECK_TARGET -j $ncpus\n+  do_make() {\n+    travis_fold start \"make-$1\"\n+    travis_time_start\n+    echo \"make -j $ncpus $1\"\n+    make -j $ncpus \"$1\"\n+    local retval=$?\n+    travis_fold end \"make-$1\"\n+    travis_time_finish\n+    return $retval\n+  }\n+\n+  do_make tidy\n+  do_make all\n+  do_make \"$RUST_CHECK_TARGET\"\n fi"}, {"sha": "4a08683e3ee86511f505d16a88f00b39d3a2fe5d", "filename": "src/ci/shared.sh", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -30,3 +30,37 @@ function retry {\n     }\n   done\n }\n+\n+if ! declare -F travis_fold; then\n+  if [ \"${TRAVIS-false}\" = 'true' ]; then\n+    # This is a trimmed down copy of\n+    # https://github.com/travis-ci/travis-build/blob/master/lib/travis/build/templates/header.sh\n+    travis_fold() {\n+      echo -en \"travis_fold:$1:$2\\r\\033[0K\"\n+    }\n+    travis_time_start() {\n+      travis_timer_id=$(printf %08x $(( RANDOM * RANDOM )))\n+      travis_start_time=$(travis_nanoseconds)\n+      echo -en \"travis_time:start:$travis_timer_id\\r\\033[0K\"\n+    }\n+    travis_time_finish() {\n+      travis_end_time=$(travis_nanoseconds)\n+      local duration=$(($travis_end_time-$travis_start_time))\n+      local msg=\"travis_time:end:$travis_timer_id\"\n+      echo -en \"\\n$msg:start=$travis_start_time,finish=$travis_end_time,duration=$duration\\r\\033[0K\"\n+    }\n+    if [ $(uname) = 'Darwin' ]; then\n+      travis_nanoseconds() {\n+        date -u '+%s000000000'\n+      }\n+    else\n+      travis_nanoseconds() {\n+        date -u '+%s%N'\n+      }\n+    fi\n+  else\n+    travis_fold() { return 0; }\n+    travis_time_start() { return 0; }\n+    travis_time_finish() { return 0; }\n+  fi\n+fi"}, {"sha": "92f6f36d69d99538cd1c8fd248d99b65a3c6cddd", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -13,6 +13,8 @@ use std::fmt;\n use std::str::FromStr;\n use std::path::PathBuf;\n \n+use test::ColorConfig;\n+\n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Mode {\n     CompileFail,\n@@ -185,6 +187,9 @@ pub struct Config {\n     // Print one character per test instead of one line\n     pub quiet: bool,\n \n+    // Whether to use colors in test.\n+    pub color: ColorConfig,\n+\n     // where to find the remote test client process, if we're using it\n     pub remote_test_client: Option<PathBuf>,\n "}, {"sha": "1bb0b765f9f1c8dc6fa4031b11f1242e1d185387", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -37,7 +37,7 @@ use filetime::FileTime;\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Mode};\n-use test::TestPaths;\n+use test::{TestPaths, ColorConfig};\n use util::logv;\n \n use self::header::EarlyProps;\n@@ -90,6 +90,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\"),\n           optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n           optflag(\"\", \"quiet\", \"print one character per test instead of one line\"),\n+          optopt(\"\", \"color\", \"coloring: auto, always, never\", \"WHEN\"),\n           optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n@@ -147,6 +148,13 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n \n     let (gdb, gdb_version, gdb_native_rust) = analyze_gdb(matches.opt_str(\"gdb\"));\n \n+    let color = match matches.opt_str(\"color\").as_ref().map(|x| &**x) {\n+        Some(\"auto\") | None => ColorConfig::AutoColor,\n+        Some(\"always\") => ColorConfig::AlwaysColor,\n+        Some(\"never\") => ColorConfig::NeverColor,\n+        Some(x) => panic!(\"argument for --color must be auto, always, or never, but found `{}`\", x),\n+    };\n+\n     Config {\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n         run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n@@ -185,6 +193,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         verbose: matches.opt_present(\"verbose\"),\n         quiet: matches.opt_present(\"quiet\"),\n+        color: color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n@@ -332,7 +341,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n             Ok(val) => &val != \"0\",\n             Err(_) => false\n         },\n-        color: test::AutoColor,\n+        color: config.color,\n         test_threads: None,\n         skip: vec![],\n         list: false,"}, {"sha": "e34821e3584c5809953ea732b3e51350924be01d", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -49,7 +49,7 @@ pub struct Feature {\n     pub has_gate_test: bool,\n }\n \n-pub fn check(path: &Path, bad: &mut bool) {\n+pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n     let mut features = collect_lang_features(path);\n     assert!(!features.is_empty());\n \n@@ -134,6 +134,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n     if *bad {\n         return;\n     }\n+    if quiet {\n+        println!(\"* {} features\", features.len());\n+        return;\n+    }\n \n     let mut lines = Vec::new();\n     for (name, feature) in features.iter() {"}, {"sha": "23a31131f7a6ca6aaa1a7aa24d4c9474ce1ace4e", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7798c3d179c7c18736fc0465e7ba6618c575a34/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=d7798c3d179c7c18736fc0465e7ba6618c575a34", "patch": "@@ -57,11 +57,12 @@ fn main() {\n     let args: Vec<String> = env::args().skip(1).collect();\n \n     let mut bad = false;\n+    let quiet = args.iter().any(|s| *s == \"--quiet\");\n     bins::check(&path, &mut bad);\n     style::check(&path, &mut bad);\n     errors::check(&path, &mut bad);\n     cargo::check(&path, &mut bad);\n-    features::check(&path, &mut bad);\n+    features::check(&path, &mut bad, quiet);\n     pal::check(&path, &mut bad);\n     unstable_book::check(&path, &mut bad);\n     if !args.iter().any(|s| *s == \"--no-vendor\") {"}]}