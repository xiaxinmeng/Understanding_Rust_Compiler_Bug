{"sha": "e90b521a15f12863fced1023e700d02e015931a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MGI1MjFhMTVmMTI4NjNmY2VkMTAyM2U3MDBkMDJlMDE1OTMxYTQ=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-11T17:24:41Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-11T17:24:41Z"}, "message": "--emit=mir now emits both `mir_for_ctfe` and `optimized_mir` for `const fn`", "tree": {"sha": "81b608b7d3cbafab4a56e253935b3362c7df8896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81b608b7d3cbafab4a56e253935b3362c7df8896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e90b521a15f12863fced1023e700d02e015931a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e90b521a15f12863fced1023e700d02e015931a4", "html_url": "https://github.com/rust-lang/rust/commit/e90b521a15f12863fced1023e700d02e015931a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e90b521a15f12863fced1023e700d02e015931a4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a732dfd498af4d5eeed9943ead3692b2d1db0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a732dfd498af4d5eeed9943ead3692b2d1db0c", "html_url": "https://github.com/rust-lang/rust/commit/41a732dfd498af4d5eeed9943ead3692b2d1db0c"}], "stats": {"total": 97, "additions": 86, "deletions": 11}, "files": [{"sha": "7fc1c3a73af91e36dbaeb647f75d549cb483311d", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e90b521a15f12863fced1023e700d02e015931a4/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90b521a15f12863fced1023e700d02e015931a4/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=e90b521a15f12863fced1023e700d02e015931a4", "patch": "@@ -273,25 +273,35 @@ pub fn write_mir_pretty<'tcx>(\n \n     let mut first = true;\n     for def_id in dump_mir_def_ids(tcx, single) {\n-        let body = match tcx.hir().body_const_context(def_id.expect_local()) {\n-            // For `const fn` we want to render the optimized MIR. If you want the mir used in\n-            // ctfe, you can dump the MIR after the `Deaggregator` optimization pass.\n-            None | Some(rustc_hir::ConstContext::ConstFn) => tcx.optimized_mir(def_id),\n-            Some(_) => tcx.mir_for_ctfe(def_id),\n-        };\n-\n         if first {\n             first = false;\n         } else {\n             // Put empty lines between all items\n             writeln!(w)?;\n         }\n \n-        write_mir_fn(tcx, body, &mut |_, _| Ok(()), w)?;\n-\n-        for body in tcx.promoted_mir(def_id) {\n-            writeln!(w)?;\n+        let render_body = |w: &mut dyn Write, body| -> io::Result<()> {\n             write_mir_fn(tcx, body, &mut |_, _| Ok(()), w)?;\n+\n+            for body in tcx.promoted_mir(def_id) {\n+                writeln!(w)?;\n+                write_mir_fn(tcx, body, &mut |_, _| Ok(()), w)?;\n+            }\n+            Ok(())\n+        };\n+        match tcx.hir().body_const_context(def_id.expect_local()) {\n+            None => render_body(w, tcx.optimized_mir(def_id))?,\n+            // For `const fn` we want to render the optimized MIR. If you want the mir used in\n+            // ctfe, you can dump the MIR after the `Deaggregator` optimization pass.\n+            Some(rustc_hir::ConstContext::ConstFn) => {\n+                render_body(w, tcx.optimized_mir(def_id))?;\n+                writeln!(w)?;\n+                writeln!(w, \"// MIR FOR CTFE\")?;\n+                // Do not use `render_body`, as that would render the promoteds again, but these\n+                // are shared between mir_for_ctfe and optimized_mir\n+                write_mir_fn(tcx, tcx.mir_for_ctfe(def_id), &mut |_, _| Ok(()), w)?;\n+            }\n+            Some(_) => render_body(w, tcx.mir_for_ctfe(def_id))?,\n         }\n     }\n     Ok(())"}, {"sha": "2aa0bc9d45dc9701ea3fe7379f14699c5ce5f52a", "filename": "src/test/run-make/const_fn_mir/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e90b521a15f12863fced1023e700d02e015931a4/src%2Ftest%2Frun-make%2Fconst_fn_mir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e90b521a15f12863fced1023e700d02e015931a4/src%2Ftest%2Frun-make%2Fconst_fn_mir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2FMakefile?ref=e90b521a15f12863fced1023e700d02e015931a4", "patch": "@@ -0,0 +1,10 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) main.rs --emit=mir -o \"$(TMPDIR)\"/dump.mir\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/dump.mir dump.mir\n+else\n+\t$(DIFF) dump.mir \"$(TMPDIR)\"/dump.mir\n+endif"}, {"sha": "3dac42c6782eab4167c1c173641b7ef19496a34f", "filename": "src/test/run-make/const_fn_mir/dump.mir", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e90b521a15f12863fced1023e700d02e015931a4/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e90b521a15f12863fced1023e700d02e015931a4/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fdump.mir?ref=e90b521a15f12863fced1023e700d02e015931a4", "patch": "@@ -0,0 +1,45 @@\n+// WARNING: This output format is intended for human consumers only\n+// and is subject to change without notice. Knock yourself out.\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at main.rs:8:11: 8:11\n+    let _1: i32;                         // in scope 0 at main.rs:9:5: 9:10\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at main.rs:9:5: 9:10\n+        _1 = foo() -> bb1;               // scope 0 at main.rs:9:5: 9:10\n+                                         // mir::Constant\n+                                         // + span: main.rs:9:5: 9:8\n+                                         // + literal: Const { ty: fn() -> i32 {foo}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_1);                 // scope 0 at main.rs:9:10: 9:11\n+        _0 = const ();                   // scope 0 at main.rs:8:11: 10:2\n+        return;                          // scope 0 at main.rs:10:2: 10:2\n+    }\n+}\n+\n+fn foo() -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at main.rs:4:19: 4:22\n+\n+    bb0: {\n+        _0 = const 11_i32;               // scope 0 at main.rs:5:5: 5:10\n+        return;                          // scope 0 at main.rs:6:2: 6:2\n+    }\n+}\n+\n+// MIR FOR CTFE\n+fn foo() -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at main.rs:4:19: 4:22\n+    let mut _1: (i32, bool);             // in scope 0 at main.rs:5:5: 5:10\n+\n+    bb0: {\n+        _1 = CheckedAdd(const 5_i32, const 6_i32); // scope 0 at main.rs:5:5: 5:10\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 5_i32, const 6_i32) -> bb1; // scope 0 at main.rs:5:5: 5:10\n+    }\n+\n+    bb1: {\n+        _0 = move (_1.0: i32);           // scope 0 at main.rs:5:5: 5:10\n+        return;                          // scope 0 at main.rs:6:2: 6:2\n+    }\n+}"}, {"sha": "e8552bd285a8681a6950afe9409666f502d8c376", "filename": "src/test/run-make/const_fn_mir/main.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e90b521a15f12863fced1023e700d02e015931a4/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90b521a15f12863fced1023e700d02e015931a4/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fconst_fn_mir%2Fmain.rs?ref=e90b521a15f12863fced1023e700d02e015931a4", "patch": "@@ -0,0 +1,10 @@\n+// emit-mir\n+// check-pass\n+\n+const fn foo() -> i32 {\n+    5 + 6\n+}\n+\n+fn main() {\n+    foo();\n+}"}]}