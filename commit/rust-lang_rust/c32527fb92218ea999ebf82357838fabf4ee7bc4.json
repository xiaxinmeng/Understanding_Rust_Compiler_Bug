{"sha": "c32527fb92218ea999ebf82357838fabf4ee7bc4", "node_id": "C_kwDOAAsO6NoAKGMzMjUyN2ZiOTIyMThlYTk5OWViZjgyMzU3ODM4ZmFiZjRlZTdiYzQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T04:39:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-13T16:34:16Z"}, "message": "Treat projections with infer as placeholder during fast reject in new solver", "tree": {"sha": "fe810b8c2aff62d8949f054670a98e8960c4ce13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe810b8c2aff62d8949f054670a98e8960c4ce13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32527fb92218ea999ebf82357838fabf4ee7bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32527fb92218ea999ebf82357838fabf4ee7bc4", "html_url": "https://github.com/rust-lang/rust/commit/c32527fb92218ea999ebf82357838fabf4ee7bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32527fb92218ea999ebf82357838fabf4ee7bc4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b1ed7e18f1fbe5226a96626827c625985f8285", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b1ed7e18f1fbe5226a96626827c625985f8285", "html_url": "https://github.com/rust-lang/rust/commit/f1b1ed7e18f1fbe5226a96626827c625985f8285"}], "stats": {"total": 254, "additions": 186, "deletions": 68}, "files": [{"sha": "068e5a5eb7739c3daa284cc8b491c9a1c3c15e14", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n-use rustc_middle::ty::fast_reject::{simplify_type, SimplifiedType, TreatParams};\n+use rustc_middle::ty::fast_reject::{simplify_type, SimplifiedType, TreatParams, TreatProjections};\n use rustc_middle::ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n \n@@ -99,7 +99,12 @@ impl<'tcx> InherentCollect<'tcx> {\n                 }\n             }\n \n-            if let Some(simp) = simplify_type(self.tcx, self_ty, TreatParams::AsInfer) {\n+            if let Some(simp) = simplify_type(\n+                self.tcx,\n+                self_ty,\n+                TreatParams::AsInfer,\n+                TreatProjections::DefaultCandidate,\n+            ) {\n                 self.impls_map.incoherent_impls.entry(simp).or_default().push(impl_def_id);\n             } else {\n                 bug!(\"unexpected self type: {:?}\", self_ty);\n@@ -159,7 +164,9 @@ impl<'tcx> InherentCollect<'tcx> {\n             }\n         }\n \n-        if let Some(simp) = simplify_type(self.tcx, ty, TreatParams::AsInfer) {\n+        if let Some(simp) =\n+            simplify_type(self.tcx, ty, TreatParams::AsInfer, TreatProjections::DefaultCandidate)\n+        {\n             self.impls_map.incoherent_impls.entry(simp).or_default().push(impl_def_id);\n         } else {\n             bug!(\"unexpected primitive type: {:?}\", ty);"}, {"sha": "e9d4f9282a3f1e1ea271aa3be3f32ac226e9709f", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -15,6 +15,7 @@ use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::middle::stability;\n+use rustc_middle::ty::fast_reject::TreatProjections;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n@@ -699,7 +700,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     }\n \n     fn assemble_inherent_candidates_for_incoherent_ty(&mut self, self_ty: Ty<'tcx>) {\n-        let Some(simp) = simplify_type(self.tcx, self_ty, TreatParams::AsInfer) else {\n+        let Some(simp) = simplify_type(self.tcx, self_ty, TreatParams::AsInfer, TreatProjections::DefaultCandidate) else {\n             bug!(\"unexpected incoherent type: {:?}\", self_ty)\n         };\n         for &impl_def_id in self.tcx.incoherent_impls(simp) {"}, {"sha": "da0d180987aabc571b51046861a3f215f6beaf16", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -25,6 +25,7 @@ use rustc_infer::infer::{\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::DeepRejectCtxt;\n+use rustc_middle::ty::fast_reject::TreatProjections;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::{with_crate_prefix, with_forced_trimmed_paths};\n use rustc_middle::ty::{self, GenericArgKind, Ty, TyCtxt, TypeVisitableExt};\n@@ -1516,7 +1517,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .into_iter()\n             .any(|info| self.associated_value(info.def_id, item_name).is_some());\n         let found_assoc = |ty: Ty<'tcx>| {\n-            simplify_type(tcx, ty, TreatParams::AsInfer)\n+            simplify_type(tcx, ty, TreatParams::AsInfer, TreatProjections::DefaultCandidate)\n                 .and_then(|simp| {\n                     tcx.incoherent_impls(simp)\n                         .iter()\n@@ -2645,9 +2646,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // FIXME: Even though negative bounds are not implemented, we could maybe handle\n                 // cases where a positive bound implies a negative impl.\n                 (candidates, Vec::new())\n-            } else if let Some(simp_rcvr_ty) =\n-                simplify_type(self.tcx, rcvr_ty, TreatParams::AsPlaceholder)\n-            {\n+            } else if let Some(simp_rcvr_ty) = simplify_type(\n+                self.tcx,\n+                rcvr_ty,\n+                TreatParams::AsPlaceholder,\n+                TreatProjections::DefaultLookup,\n+            ) {\n                 let mut potential_candidates = Vec::new();\n                 let mut explicitly_negative = Vec::new();\n                 for candidate in candidates {\n@@ -2660,8 +2664,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         })\n                         .any(|imp_did| {\n                             let imp = self.tcx.impl_trait_ref(imp_did).unwrap().subst_identity();\n-                            let imp_simp =\n-                                simplify_type(self.tcx, imp.self_ty(), TreatParams::AsPlaceholder);\n+                            let imp_simp = simplify_type(\n+                                self.tcx,\n+                                imp.self_ty(),\n+                                TreatParams::AsPlaceholder,\n+                                TreatProjections::DefaultLookup,\n+                            );\n                             imp_simp.map_or(false, |s| s == simp_rcvr_ty)\n                         })\n                     {"}, {"sha": "ccadb0bada260ecb20fdc206c7bb5ad4fffd2efd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::middle::exported_symbols::{\n use rustc_middle::mir::interpret;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n-use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n+use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams, TreatProjections};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_middle::util::common::to_readable_str;\n@@ -1859,6 +1859,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                         self.tcx,\n                         trait_ref.self_ty(),\n                         TreatParams::AsInfer,\n+                        TreatProjections::DefaultCandidate,\n                     );\n \n                     fx_hash_map"}, {"sha": "d672c6cc8033ce5fa772358776c1c15f50c8f093", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -52,16 +52,33 @@ pub enum SimplifiedType {\n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n pub enum TreatParams {\n     /// Treat parameters as placeholders in the given environment.\n-    ///\n-    /// Note that this also causes us to treat projections as if they were\n-    /// placeholders. This is only correct if the given projection cannot\n-    /// be normalized in the current context. Even if normalization fails,\n-    /// it may still succeed later if the projection contains any inference\n-    /// variables.\n     AsPlaceholder,\n     AsInfer,\n }\n \n+/// During fast-rejection, we have the choice of treating projection types\n+/// as either simplifyable or not, depending on whether we expect the projection\n+/// to be normalized/rigid.\n+#[derive(PartialEq, Eq, Debug, Clone, Copy)]\n+pub enum TreatProjections {\n+    /// In candidates, we may be able to normalize the projection\n+    /// after instantiating the candidate and equating it with a goal.\n+    ///\n+    /// We must assume that the `impl<T> Trait<T> for <T as Id>::This`\n+    /// can apply to all self types so we don't return a simplified type\n+    /// for `<T as Id>::This`.\n+    DefaultCandidate,\n+    /// In the old solver we don't try to normalize projections\n+    /// when looking up impls and only access them by using the\n+    /// current self type. This means that if the self type is\n+    /// a projection which could later be normalized, we must not\n+    /// treat it as rigid.\n+    DefaultLookup,\n+    /// We can treat projections in the self type as opaque as\n+    /// we separately look up impls for the normalized self type.\n+    NextSolverLookup,\n+}\n+\n /// Tries to simplify a type by only returning the outermost injective\u00b9 layer, if one exists.\n ///\n /// **This function should only be used if you need to store or retrieve the type from some\n@@ -87,6 +104,7 @@ pub fn simplify_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     treat_params: TreatParams,\n+    treat_projections: TreatProjections,\n ) -> Option<SimplifiedType> {\n     match *ty.kind() {\n         ty::Bool => Some(BoolSimplifiedType),\n@@ -118,16 +136,10 @@ pub fn simplify_type<'tcx>(\n             TreatParams::AsPlaceholder => Some(PlaceholderSimplifiedType),\n             TreatParams::AsInfer => None,\n         },\n-        ty::Alias(..) => match treat_params {\n-            // When treating `ty::Param` as a placeholder, projections also\n-            // don't unify with anything else as long as they are fully normalized.\n-            //\n-            // We will have to be careful with lazy normalization here.\n-            TreatParams::AsPlaceholder if !ty.has_non_region_infer() => {\n-                debug!(\"treating `{}` as a placeholder\", ty);\n-                Some(PlaceholderSimplifiedType)\n-            }\n-            TreatParams::AsPlaceholder | TreatParams::AsInfer => None,\n+        ty::Alias(..) => match treat_projections {\n+            TreatProjections::DefaultLookup if !ty.needs_infer() => Some(PlaceholderSimplifiedType),\n+            TreatProjections::NextSolverLookup => Some(PlaceholderSimplifiedType),\n+            TreatProjections::DefaultCandidate | TreatProjections::DefaultLookup => None,\n         },\n         ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),\n         ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,"}, {"sha": "dec6011fe386e38347eef1317e5e41527a8bd2d0", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -1,5 +1,5 @@\n use crate::traits::specialization_graph;\n-use crate::ty::fast_reject::{self, SimplifiedType, TreatParams};\n+use crate::ty::fast_reject::{self, SimplifiedType, TreatParams, TreatProjections};\n use crate::ty::visit::TypeVisitableExt;\n use crate::ty::{Ident, Ty, TyCtxt};\n use hir::def_id::LOCAL_CRATE;\n@@ -118,16 +118,32 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Iterate over every impl that could possibly match the self type `self_ty`.\n     ///\n     /// `trait_def_id` MUST BE the `DefId` of a trait.\n-    pub fn for_each_relevant_impl<F: FnMut(DefId)>(\n+    pub fn for_each_relevant_impl(\n         self,\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n-        mut f: F,\n+        f: impl FnMut(DefId),\n     ) {\n-        let _: Option<()> = self.find_map_relevant_impl(trait_def_id, self_ty, |did| {\n-            f(did);\n-            None\n-        });\n+        self.for_each_relevant_impl_treating_projections(\n+            trait_def_id,\n+            self_ty,\n+            TreatProjections::DefaultLookup,\n+            f,\n+        )\n+    }\n+\n+    pub fn for_each_relevant_impl_treating_projections(\n+        self,\n+        trait_def_id: DefId,\n+        self_ty: Ty<'tcx>,\n+        treat_projections: TreatProjections,\n+        mut f: impl FnMut(DefId),\n+    ) {\n+        let _: Option<()> =\n+            self.find_map_relevant_impl(trait_def_id, self_ty, treat_projections, |did| {\n+                f(did);\n+                None\n+            });\n     }\n \n     /// `trait_def_id` MUST BE the `DefId` of a trait.\n@@ -137,7 +153,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         self_ty: Ty<'tcx>,\n     ) -> impl Iterator<Item = DefId> + 'tcx {\n         let impls = self.trait_impls_of(trait_def_id);\n-        if let Some(simp) = fast_reject::simplify_type(self, self_ty, TreatParams::AsInfer) {\n+        if let Some(simp) = fast_reject::simplify_type(\n+            self,\n+            self_ty,\n+            TreatParams::AsInfer,\n+            TreatProjections::DefaultCandidate,\n+        ) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 return impls.iter().copied();\n             }\n@@ -150,11 +171,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// the first non-none value.\n     ///\n     /// `trait_def_id` MUST BE the `DefId` of a trait.\n-    pub fn find_map_relevant_impl<T, F: FnMut(DefId) -> Option<T>>(\n+    pub fn find_map_relevant_impl<T>(\n         self,\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n-        mut f: F,\n+        treat_projections: TreatProjections,\n+        mut f: impl FnMut(DefId) -> Option<T>,\n     ) -> Option<T> {\n         // FIXME: This depends on the set of all impls for the trait. That is\n         // unfortunate wrt. incremental compilation.\n@@ -169,14 +191,13 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         }\n \n-        // Note that we're using `TreatParams::AsPlaceholder` to query `non_blanket_impls` while using\n-        // `TreatParams::AsInfer` while actually adding them.\n-        //\n         // This way, when searching for some impl for `T: Trait`, we do not look at any impls\n         // whose outer level is not a parameter or projection. Especially for things like\n         // `T: Clone` this is incredibly useful as we would otherwise look at all the impls\n         // of `Clone` for `Option<T>`, `Vec<T>`, `ConcreteType` and so on.\n-        if let Some(simp) = fast_reject::simplify_type(self, self_ty, TreatParams::AsPlaceholder) {\n+        if let Some(simp) =\n+            fast_reject::simplify_type(self, self_ty, TreatParams::AsPlaceholder, treat_projections)\n+        {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {\n                     if let result @ Some(_) = f(impl_def_id) {\n@@ -237,9 +258,12 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n             continue;\n         }\n \n-        if let Some(simplified_self_ty) =\n-            fast_reject::simplify_type(tcx, impl_self_ty, TreatParams::AsInfer)\n-        {\n+        if let Some(simplified_self_ty) = fast_reject::simplify_type(\n+            tcx,\n+            impl_self_ty,\n+            TreatParams::AsInfer,\n+            TreatProjections::DefaultCandidate,\n+        ) {\n             impls.non_blanket_impls.entry(simplified_self_ty).or_default().push(impl_def_id);\n         } else {\n             impls.blanket_impls.push(impl_def_id);"}, {"sha": "e3e8a57caf119c47a7a009543b8c90b35ad4ed60", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -2,6 +2,7 @@\n \n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n+use crate::ty::fast_reject::TreatProjections;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n     self, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n@@ -363,14 +364,20 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.ensure().coherent_trait(drop_trait);\n \n         let ty = self.type_of(adt_did).subst_identity();\n-        let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n-            if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {\n-                if validate(self, impl_did).is_ok() {\n-                    return Some((*item_id, self.constness(impl_did)));\n+        let (did, constness) = self.find_map_relevant_impl(\n+            drop_trait,\n+            ty,\n+            // FIXME: This could also be some other mode, like \"unexpected\"\n+            TreatProjections::DefaultLookup,\n+            |impl_did| {\n+                if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {\n+                    if validate(self, impl_did).is_ok() {\n+                        return Some((*item_id, self.constness(impl_did)));\n+                    }\n                 }\n-            }\n-            None\n-        })?;\n+                None\n+            },\n+        )?;\n \n         Some(ty::Destructor { did, constness })\n     }"}, {"sha": "891ea0cdebe5031be8908d1a92551530a3267713", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::elaborate_predicates;\n use rustc_middle::traits::solve::{CanonicalResponse, Certainty, Goal, MaybeCause, QueryResult};\n+use rustc_middle::ty::fast_reject::TreatProjections;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::fmt::Debug;\n@@ -299,9 +300,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         candidates: &mut Vec<Candidate<'tcx>>,\n     ) {\n         let tcx = self.tcx();\n-        tcx.for_each_relevant_impl(\n+        tcx.for_each_relevant_impl_treating_projections(\n             goal.predicate.trait_def_id(tcx),\n             goal.predicate.self_ty(),\n+            TreatProjections::NextSolverLookup,\n             |impl_def_id| match G::consider_impl_candidate(self, goal, impl_def_id) {\n                 Ok(result) => candidates\n                     .push(Candidate { source: CandidateSource::Impl(impl_def_id), result }),"}, {"sha": "e8696c7d0f5dd49bdb1d14fe1e4628f229ca5b20", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::LangItem;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::supertraits;\n use rustc_middle::traits::solve::{CanonicalResponse, Certainty, Goal, QueryResult};\n-use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n+use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams, TreatProjections};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n use rustc_middle::ty::{TraitPredicate, TypeVisitableExt};\n use rustc_span::DUMMY_SP;\n@@ -135,9 +135,15 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         // currently instead lint patterns which can be used to\n         // exploit this unsoundness on stable, see #93367 for\n         // more details.\n+        //\n+        // Using `TreatProjections::NextSolverLookup` is fine here because\n+        // `instantiate_constituent_tys_for_auto_trait` returns nothing for\n+        // projection types anyways. So it doesn't really matter what we do\n+        // here, and this is faster.\n         if let Some(def_id) = ecx.tcx().find_map_relevant_impl(\n             goal.predicate.def_id(),\n             goal.predicate.self_ty(),\n+            TreatProjections::NextSolverLookup,\n             Some,\n         ) {\n             debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");"}, {"sha": "4ceec0d6a57f9f7d9a3c864a523d8b31242687dc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -32,6 +32,7 @@ use rustc_infer::infer::{InferOk, TypeTrace};\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n+use rustc_middle::ty::fast_reject::TreatProjections;\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::print::{with_forced_trimmed_paths, FmtPrinter, Print};\n use rustc_middle::ty::{\n@@ -1799,12 +1800,17 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     })\n                     .and_then(|(trait_assoc_item, id)| {\n                         let trait_assoc_ident = trait_assoc_item.ident(self.tcx);\n-                        self.tcx.find_map_relevant_impl(id, proj.projection_ty.self_ty(), |did| {\n-                            self.tcx\n-                                .associated_items(did)\n-                                .in_definition_order()\n-                                .find(|assoc| assoc.ident(self.tcx) == trait_assoc_ident)\n-                        })\n+                        self.tcx.find_map_relevant_impl(\n+                            id,\n+                            proj.projection_ty.self_ty(),\n+                            TreatProjections::DefaultLookup,\n+                            |did| {\n+                                self.tcx\n+                                    .associated_items(did)\n+                                    .in_definition_order()\n+                                    .find(|assoc| assoc.ident(self.tcx) == trait_assoc_ident)\n+                            },\n+                        )\n                     })\n                     .and_then(|item| match self.tcx.hir().get_if_local(item.def_id) {\n                         Some(\n@@ -2176,7 +2182,12 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     ) -> bool {\n         let get_trait_impl = |trait_def_id| {\n-            self.tcx.find_map_relevant_impl(trait_def_id, trait_ref.skip_binder().self_ty(), Some)\n+            self.tcx.find_map_relevant_impl(\n+                trait_def_id,\n+                trait_ref.skip_binder().self_ty(),\n+                TreatProjections::DefaultLookup,\n+                Some,\n+            )\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n         let traits_with_same_path: std::collections::BTreeSet<_> = self"}, {"sha": "4305171aa8066ff6dfe04db4a38a9e22a344b0d3", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -9,6 +9,7 @@ use hir::LangItem;\n use rustc_hir as hir;\n use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n+use rustc_middle::ty::fast_reject::TreatProjections;\n use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n use rustc_target::spec::abi::Abi;\n \n@@ -783,6 +784,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let relevant_impl = self.tcx().find_map_relevant_impl(\n                     self.tcx().require_lang_item(LangItem::Drop, None),\n                     obligation.predicate.skip_binder().trait_ref.self_ty(),\n+                    TreatProjections::DefaultLookup,\n                     Some,\n                 );\n "}, {"sha": "bebaa885cf7c993fd98c209eafef0f827e39b2c4", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -3,7 +3,7 @@ use super::OverlapError;\n use crate::traits;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n+use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams, TreatProjections};\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n \n pub use rustc_middle::traits::specialization_graph::*;\n@@ -49,8 +49,12 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n-        if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n-        {\n+        if let Some(st) = fast_reject::simplify_type(\n+            tcx,\n+            trait_ref.self_ty(),\n+            TreatParams::AsInfer,\n+            fast_reject::TreatProjections::DefaultCandidate,\n+        ) {\n             debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n             self.non_blanket_impls.entry(st).or_default().push(impl_def_id)\n         } else {\n@@ -65,8 +69,12 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n     fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n         let vec: &mut Vec<DefId>;\n-        if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n-        {\n+        if let Some(st) = fast_reject::simplify_type(\n+            tcx,\n+            trait_ref.self_ty(),\n+            TreatParams::AsInfer,\n+            TreatProjections::DefaultCandidate,\n+        ) {\n             debug!(\"remove_existing: impl_def_id={:?} st={:?}\", impl_def_id, st);\n             vec = self.non_blanket_impls.get_mut(&st).unwrap();\n         } else {\n@@ -302,7 +310,12 @@ impl<'tcx> GraphExt<'tcx> for Graph {\n \n         let mut parent = trait_def_id;\n         let mut last_lint = None;\n-        let simplified = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer);\n+        let simplified = fast_reject::simplify_type(\n+            tcx,\n+            trait_ref.self_ty(),\n+            TreatParams::AsInfer,\n+            TreatProjections::DefaultCandidate,\n+        );\n \n         // Descend the specialization tree, where `parent` is the current parent node.\n         loop {"}, {"sha": "bd5e05770fe7201dc570e3f7b6b08c9ae24dfa1b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{DefKind, Namespace, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::Mutability;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{fast_reject::TreatProjections, Ty, TyCtxt};\n use rustc_middle::{bug, ty};\n use rustc_resolve::rustdoc::MalformedGenerics;\n use rustc_resolve::rustdoc::{prepare_to_doc_link_resolution, strip_generics_from_path};\n@@ -735,7 +735,7 @@ fn trait_impls_for<'a>(\n         trace!(\"considering explicit impl for trait {:?}\", trait_);\n \n         // Look at each trait implementation to see if it's an impl for `did`\n-        tcx.find_map_relevant_impl(trait_, ty, |impl_| {\n+        tcx.find_map_relevant_impl(trait_, ty, TreatProjections::DefaultLookup, |impl_| {\n             let trait_ref = tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n             // Check if these are the same type.\n             let impl_type = trait_ref.skip_binder().self_ty();"}, {"sha": "1dca86d3630b1a82e99700380b0b301e9183e771", "filename": "tests/ui/traits/new-solver/runaway-impl-candidate-selection.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/tests%2Fui%2Ftraits%2Fnew-solver%2Frunaway-impl-candidate-selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/tests%2Fui%2Ftraits%2Fnew-solver%2Frunaway-impl-candidate-selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frunaway-impl-candidate-selection.rs?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+// In the new solver, we are trying to select `<?0 as Iterator>::Item: Debug`,\n+// which, naively can be unified with every impl of `Debug` if we're not careful.\n+// This test makes sure that we treat projections with inference var substs as\n+// placeholders during fast reject.\n+\n+fn iter<T: Iterator>() -> <T as Iterator>::Item {\n+    todo!()\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", iter::<_>());\n+    //~^ ERROR type annotations needed\n+}"}, {"sha": "47004821ad7c6c1ce0058b2c17ede639331b365d", "filename": "tests/ui/traits/new-solver/runaway-impl-candidate-selection.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c32527fb92218ea999ebf82357838fabf4ee7bc4/tests%2Fui%2Ftraits%2Fnew-solver%2Frunaway-impl-candidate-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c32527fb92218ea999ebf82357838fabf4ee7bc4/tests%2Fui%2Ftraits%2Fnew-solver%2Frunaway-impl-candidate-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frunaway-impl-candidate-selection.stderr?ref=c32527fb92218ea999ebf82357838fabf4ee7bc4", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/runaway-impl-candidate-selection.rs:13:22\n+   |\n+LL |     println!(\"{:?}\", iter::<_>());\n+   |                      ^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `iter`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}