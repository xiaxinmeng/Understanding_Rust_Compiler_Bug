{"sha": "062ac8cb97fef80a370ef884c468c66c4c9d30e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MmFjOGNiOTdmZWY4MGEzNzBlZjg4NGM0NjhjNjZjNGM5ZDMwZTM=", "commit": {"author": {"name": "a_m0d", "email": "damien.schoof@gmail.com", "date": "2012-11-08T04:49:01Z"}, "committer": {"name": "a_m0d", "email": "damien.schoof@gmail.com", "date": "2012-11-08T04:49:01Z"}, "message": "Fix whitespace issues from previous commits.\n\nAlso added test for #3891.", "tree": {"sha": "7ec9cc90799a2e3c25ad19e1652b10f3f5320099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec9cc90799a2e3c25ad19e1652b10f3f5320099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/062ac8cb97fef80a370ef884c468c66c4c9d30e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/062ac8cb97fef80a370ef884c468c66c4c9d30e3", "html_url": "https://github.com/rust-lang/rust/commit/062ac8cb97fef80a370ef884c468c66c4c9d30e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/062ac8cb97fef80a370ef884c468c66c4c9d30e3/comments", "author": {"login": "am0d", "id": 139484, "node_id": "MDQ6VXNlcjEzOTQ4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/139484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/am0d", "html_url": "https://github.com/am0d", "followers_url": "https://api.github.com/users/am0d/followers", "following_url": "https://api.github.com/users/am0d/following{/other_user}", "gists_url": "https://api.github.com/users/am0d/gists{/gist_id}", "starred_url": "https://api.github.com/users/am0d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/am0d/subscriptions", "organizations_url": "https://api.github.com/users/am0d/orgs", "repos_url": "https://api.github.com/users/am0d/repos", "events_url": "https://api.github.com/users/am0d/events{/privacy}", "received_events_url": "https://api.github.com/users/am0d/received_events", "type": "User", "site_admin": false}, "committer": {"login": "am0d", "id": 139484, "node_id": "MDQ6VXNlcjEzOTQ4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/139484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/am0d", "html_url": "https://github.com/am0d", "followers_url": "https://api.github.com/users/am0d/followers", "following_url": "https://api.github.com/users/am0d/following{/other_user}", "gists_url": "https://api.github.com/users/am0d/gists{/gist_id}", "starred_url": "https://api.github.com/users/am0d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/am0d/subscriptions", "organizations_url": "https://api.github.com/users/am0d/orgs", "repos_url": "https://api.github.com/users/am0d/repos", "events_url": "https://api.github.com/users/am0d/events{/privacy}", "received_events_url": "https://api.github.com/users/am0d/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d42cf97bcc6110be8a8b2ec02669230b265332dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d42cf97bcc6110be8a8b2ec02669230b265332dd", "html_url": "https://github.com/rust-lang/rust/commit/d42cf97bcc6110be8a8b2ec02669230b265332dd"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "ea77949a45964461fa27820c65b0073e4f751031", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/062ac8cb97fef80a370ef884c468c66c4c9d30e3/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/062ac8cb97fef80a370ef884c468c66c4c9d30e3/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=062ac8cb97fef80a370ef884c468c66c4c9d30e3", "patch": "@@ -811,7 +811,7 @@ impl TcpSocketBuf: io::Reader {\n     }\n     fn read_byte() -> int {\n         let mut bytes = ~[0];\n-        if self.read(bytes, 1u) == 0 { \n+        if self.read(bytes, 1u) == 0 {\n             if self.end_of_stream {\n                 -1\n             } else {\n@@ -1280,7 +1280,10 @@ mod test {\n             fn test_gl_tcp_ipv4_server_client_reader_writer() {\n                 impl_gl_tcp_ipv4_server_client_reader_writer();\n             }\n-\n+            #[test]\n+            fn test_tcp_socket_impl_reader_handles_eof() {\n+                impl_tcp_socket_impl_reader_handles_eof();\n+            }\n         }\n         #[cfg(target_arch=\"x86\")]\n         mod impl32 {\n@@ -1553,6 +1556,49 @@ mod test {\n         */\n     }\n \n+    fn impl_tcp_socket_impl_reader_handles_eof() {\n+        use io::{Reader,ReaderUtil};\n+        let hl_loop = uv::global_loop::get();\n+        let server_ip = ~\"127.0.0.1\";\n+        let server_port = 10041u;\n+        let expected_req = ~\"GET /\";\n+        let expected_resp = ~\"A string\\nwith multiple lines\\n\";\n+\n+        let server_result_po = core::comm::Port::<~str>();\n+        let server_result_ch = core::comm::Chan(&server_result_po);\n+\n+        let cont_po = core::comm::Port::<()>();\n+        let cont_ch = core::comm::Chan(&cont_po);\n+        // server\n+        do task::spawn_sched(task::ManualThreads(1u)) {\n+            let actual_req = do comm::listen |server_ch| {\n+                run_tcp_test_server(\n+                    server_ip,\n+                    server_port,\n+                    expected_resp,\n+                    server_ch,\n+                    cont_ch,\n+                    hl_loop)\n+            };\n+            server_result_ch.send(actual_req);\n+        };\n+        core::comm::recv(cont_po);\n+        // client\n+        log(debug, ~\"server started, firing up client..\");\n+        let server_addr = ip::v4::parse_addr(server_ip);\n+        let conn_result = connect(server_addr, server_port, hl_loop);\n+        if result::is_err(&conn_result) {\n+            assert false;\n+        }\n+        let sock_buf = @socket_buf(result::unwrap(move conn_result));\n+        buf_write(sock_buf, expected_req);\n+\n+        let buf_reader = sock_buf as Reader;\n+        let actual_response = str::from_bytes(buf_reader.read_whole_stream());\n+        log(debug, fmt!(\"Actual response: %s\", actual_response));\n+        assert expected_resp == actual_response;\n+    }\n+\n     fn buf_write<W:io::Writer>(w: &W, val: &str) {\n         log(debug, fmt!(\"BUF_WRITE: val len %?\", str::len(val)));\n         do str::byte_slice(val) |b_slice| {"}]}