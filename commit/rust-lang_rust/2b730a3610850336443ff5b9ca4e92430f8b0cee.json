{"sha": "2b730a3610850336443ff5b9ca4e92430f8b0cee", "node_id": "C_kwDOAAsO6NoAKDJiNzMwYTM2MTA4NTAzMzY0NDNmZjViOWNhNGU5MjQzMGY4YjBjZWU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-07T09:05:02Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-15T14:40:39Z"}, "message": "remove `impl_implied_bounds` from `FnCtxt`", "tree": {"sha": "86b5167a1734a45e805919576d4db3e5f8d6e8d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86b5167a1734a45e805919576d4db3e5f8d6e8d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b730a3610850336443ff5b9ca4e92430f8b0cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b730a3610850336443ff5b9ca4e92430f8b0cee", "html_url": "https://github.com/rust-lang/rust/commit/2b730a3610850336443ff5b9ca4e92430f8b0cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b730a3610850336443ff5b9ca4e92430f8b0cee/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7808f69ad7a31e54719bf71017b745ee3ceac167", "url": "https://api.github.com/repos/rust-lang/rust/commits/7808f69ad7a31e54719bf71017b745ee3ceac167", "html_url": "https://github.com/rust-lang/rust/commit/7808f69ad7a31e54719bf71017b745ee3ceac167"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "a9a5034bb7f68fea7fa5926d643c85d99cb47bb7", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b730a3610850336443ff5b9ca4e92430f8b0cee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b730a3610850336443ff5b9ca4e92430f8b0cee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=2b730a3610850336443ff5b9ca4e92430f8b0cee", "patch": "@@ -1,4 +1,6 @@\n+use super::{potentially_plural_count, Inherited};\n use crate::check::regionck::OutlivesEnvironmentExt;\n+use crate::check::wfcheck;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n@@ -19,8 +21,6 @@ use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use std::iter;\n \n-use super::{potentially_plural_count, FnCtxt, Inherited};\n-\n /// Checks that a method from an impl conforms to the signature of\n /// the same method as declared in the trait.\n ///\n@@ -1491,12 +1491,11 @@ pub fn check_type_bounds<'tcx>(\n \n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n-        //\n-        // FIXME: Remove that `FnCtxt`.\n-        let fcx = FnCtxt::new(&inh, param_env, impl_ty_hir_id);\n         let implied_bounds = match impl_ty.container {\n             ty::TraitContainer(_) => FxHashSet::default(),\n-            ty::ImplContainer(def_id) => fcx.impl_implied_bounds(def_id, impl_ty_span),\n+            ty::ImplContainer(def_id) => {\n+                wfcheck::impl_implied_bounds(tcx, param_env, def_id.expect_local(), impl_ty_span)\n+            }\n         };\n         let mut outlives_environment = OutlivesEnvironment::new(param_env);\n         outlives_environment.add_implied_bounds(infcx, implied_bounds, impl_ty_hir_id);"}, {"sha": "d6ef9711dbb97748636de6f1ae310818f3f28f41", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2b730a3610850336443ff5b9ca4e92430f8b0cee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b730a3610850336443ff5b9ca4e92430f8b0cee/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2b730a3610850336443ff5b9ca4e92430f8b0cee", "patch": "@@ -1,7 +1,6 @@\n use crate::check::regionck::OutlivesEnvironmentExt;\n use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n-\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -13,6 +12,7 @@ use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::outlives::obligations::TypeOutlives;\n use rustc_infer::infer::region_constraints::GenericKind;\n use rustc_infer::infer::{self, InferCtxt, TyCtxtInferExt};\n+use rustc_infer::traits::Normalized;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n@@ -24,7 +24,9 @@ use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n+use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, WellFormedLoc};\n+use rustc_trait_selection::traits::query::NoSolution;\n \n use std::cell::LazyCell;\n use std::convert::TryInto;\n@@ -939,9 +941,10 @@ fn check_associated_item(\n \n         let (mut implied_bounds, self_ty) = match item.container {\n             ty::TraitContainer(_) => (FxHashSet::default(), fcx.tcx.types.self_param),\n-            ty::ImplContainer(def_id) => {\n-                (fcx.impl_implied_bounds(def_id, span), fcx.tcx.type_of(def_id))\n-            }\n+            ty::ImplContainer(def_id) => (\n+                impl_implied_bounds(tcx, fcx.param_env, def_id.expect_local(), span),\n+                fcx.tcx.type_of(def_id),\n+            ),\n         };\n \n         match item.kind {\n@@ -1259,7 +1262,7 @@ fn check_impl<'tcx>(\n \n         check_where_clauses(fcx, item.span, item.def_id, None);\n \n-        fcx.impl_implied_bounds(item.def_id.to_def_id(), item.span)\n+        impl_implied_bounds(tcx, fcx.param_env, item.def_id, item.span)\n     });\n }\n \n@@ -1917,28 +1920,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             })\n             .collect()\n     }\n+}\n \n-    pub(super) fn impl_implied_bounds(\n-        &self,\n-        impl_def_id: DefId,\n-        span: Span,\n-    ) -> FxHashSet<Ty<'tcx>> {\n-        match self.tcx.impl_trait_ref(impl_def_id) {\n+pub(super) fn impl_implied_bounds<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    impl_def_id: LocalDefId,\n+    span: Span,\n+) -> FxHashSet<Ty<'tcx>> {\n+    // We completely ignore any obligations caused by normalizing the types\n+    // we assume to be well formed. Considering that the user of the implied\n+    // bounds will also normalize them, we leave it to them to emit errors\n+    // which should result in better causes and spans.\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let cause = ObligationCause::misc(span, tcx.hir().local_def_id_to_hir_id(impl_def_id));\n+        match tcx.impl_trait_ref(impl_def_id) {\n             Some(trait_ref) => {\n                 // Trait impl: take implied bounds from all types that\n                 // appear in the trait reference.\n-                let trait_ref = self.normalize_associated_types_in(span, trait_ref);\n-                trait_ref.substs.types().collect()\n+                match infcx.at(&cause, param_env).normalize(trait_ref) {\n+                    Ok(Normalized { value, obligations: _ }) => value.substs.types().collect(),\n+                    Err(NoSolution) => FxHashSet::default(),\n+                }\n             }\n \n             None => {\n                 // Inherent impl: take implied bounds from the `self` type.\n-                let self_ty = self.tcx.type_of(impl_def_id);\n-                let self_ty = self.normalize_associated_types_in(span, self_ty);\n-                FxHashSet::from_iter([self_ty])\n+                let self_ty = tcx.type_of(impl_def_id);\n+                match infcx.at(&cause, param_env).normalize(self_ty) {\n+                    Ok(Normalized { value, obligations: _ }) => FxHashSet::from_iter([value]),\n+                    Err(NoSolution) => FxHashSet::default(),\n+                }\n             }\n         }\n-    }\n+    })\n }\n \n fn error_392("}, {"sha": "cfb9007c7a28cd35639eabd340131b437df2789f", "filename": "src/test/ui/specialization/min_specialization/issue-79224.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b730a3610850336443ff5b9ca4e92430f8b0cee/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b730a3610850336443ff5b9ca4e92430f8b0cee/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr?ref=2b730a3610850336443ff5b9ca4e92430f8b0cee", "patch": "@@ -11,12 +11,10 @@ LL | impl<B: ?Sized + std::clone::Clone> Display for Cow<'_, B> {\n    |                +++++++++++++++++++\n \n error[E0277]: the trait bound `B: Clone` is not satisfied\n-  --> $DIR/issue-79224.rs:19:5\n+  --> $DIR/issue-79224.rs:19:12\n    |\n-LL | /     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-LL | |         write!(f, \"foo\")\n-LL | |     }\n-   | |_____^ the trait `Clone` is not implemented for `B`\n+LL |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+   |            ^^^^^ the trait `Clone` is not implemented for `B`\n    |\n    = note: required because of the requirements on the impl of `ToOwned` for `B`\n help: consider further restricting this bound"}]}