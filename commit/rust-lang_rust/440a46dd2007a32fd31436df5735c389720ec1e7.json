{"sha": "440a46dd2007a32fd31436df5735c389720ec1e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MGE0NmRkMjAwN2EzMmZkMzE0MzZkZjU3MzVjMzg5NzIwZWMxZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-17T05:41:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-17T05:41:39Z"}, "message": "Auto merge of #5608 - flip1995:rustup, r=phansch\n\nRustup with git subtree\n\nThe commits from the last rustup #5587, are again included in this rustup, since I rebased the rustup. Lesson learned: never rebase, only merge when working with git subtree.\n\nchangelog: none", "tree": {"sha": "3d14f3ce930f0cf0a39a7c959adef476b93c9a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d14f3ce930f0cf0a39a7c959adef476b93c9a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440a46dd2007a32fd31436df5735c389720ec1e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440a46dd2007a32fd31436df5735c389720ec1e7", "html_url": "https://github.com/rust-lang/rust/commit/440a46dd2007a32fd31436df5735c389720ec1e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440a46dd2007a32fd31436df5735c389720ec1e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd720d506bee262130f86db814d840fd1ef2495", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd720d506bee262130f86db814d840fd1ef2495", "html_url": "https://github.com/rust-lang/rust/commit/cfd720d506bee262130f86db814d840fd1ef2495"}, {"sha": "7f317b708fe0889c04b7590ba53f3a41afa44a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f317b708fe0889c04b7590ba53f3a41afa44a1d", "html_url": "https://github.com/rust-lang/rust/commit/7f317b708fe0889c04b7590ba53f3a41afa44a1d"}], "stats": {"total": 246, "additions": 114, "deletions": 132}, "files": [{"sha": "438a9f42ccd239341327c88c57ef7ee9df6be779", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/440a46dd2007a32fd31436df5735c389720ec1e7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440a46dd2007a32fd31436df5735c389720ec1e7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=440a46dd2007a32fd31436df5735c389720ec1e7", "patch": "@@ -40,15 +40,12 @@ use rustc_hir::{\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::traits;\n use rustc_middle::ty::{self, layout::IntegerExt, subst::GenericArg, Binder, Ty, TyCtxt, TypeFoldable};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n-use rustc_trait_selection::traits::predicate_for_trait_def;\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use smallvec::SmallVec;\n \n@@ -326,19 +323,8 @@ pub fn implements_trait<'a, 'tcx>(\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n-    let ty = cx.tcx.erase_regions(&ty);\n-    let obligation = predicate_for_trait_def(\n-        cx.tcx,\n-        cx.param_env,\n-        traits::ObligationCause::dummy(),\n-        trait_id,\n-        0,\n-        ty,\n-        ty_params,\n-    );\n-    cx.tcx\n-        .infer_ctxt()\n-        .enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n+    let ty_params = cx.tcx.mk_substs(ty_params.iter());\n+    cx.tcx.type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n }\n \n /// Gets the `hir::TraitRef` of the trait the given method is implemented for."}, {"sha": "26bf463bd2922eefd941e9bedd4d106eb6f9a011", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/440a46dd2007a32fd31436df5735c389720ec1e7/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440a46dd2007a32fd31436df5735c389720ec1e7/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=440a46dd2007a32fd31436df5735c389720ec1e7", "patch": "@@ -483,8 +483,8 @@ fn check_newlines(fmtstr: &StrLit) -> bool {\n     };\n \n     match fmtstr.style {\n-        StrStyle::Cooked => unescape::unescape_str(contents, &mut cb),\n-        StrStyle::Raw(_) => unescape::unescape_raw_str(contents, &mut cb),\n+        StrStyle::Cooked => unescape::unescape_literal(contents, unescape::Mode::Str, &mut cb),\n+        StrStyle::Raw(_) => unescape::unescape_literal(contents, unescape::Mode::RawStr, &mut cb),\n     }\n \n     should_lint"}, {"sha": "d3a7e24937f95e865ff81cd7ae31ec6d994a8026", "filename": "src/driver.rs", "status": "modified", "additions": 110, "deletions": 114, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/440a46dd2007a32fd31436df5735c389720ec1e7/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440a46dd2007a32fd31436df5735c389720ec1e7/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=440a46dd2007a32fd31436df5735c389720ec1e7", "patch": "@@ -295,123 +295,119 @@ fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<Pat\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     lazy_static::initialize(&ICE_HOOK);\n-    exit(\n-        rustc_driver::catch_fatal_errors(move || {\n-            let mut orig_args: Vec<String> = env::args().collect();\n-\n-            if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n-                let version_info = rustc_tools_util::get_version_info!();\n-                println!(\"{}\", version_info);\n-                exit(0);\n-            }\n+    exit(rustc_driver::catch_with_exit_code(move || {\n+        let mut orig_args: Vec<String> = env::args().collect();\n \n-            // Get the sysroot, looking from most specific to this invocation to the least:\n-            // - command line\n-            // - runtime environment\n-            //    - SYSROOT\n-            //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n-            // - sysroot from rustc in the path\n-            // - compile-time environment\n-            //    - SYSROOT\n-            //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n-            let sys_root_arg = arg_value(&orig_args, \"--sysroot\", |_| true);\n-            let have_sys_root_arg = sys_root_arg.is_some();\n-            let sys_root = sys_root_arg\n-                .map(PathBuf::from)\n-                .or_else(|| std::env::var(\"SYSROOT\").ok().map(PathBuf::from))\n-                .or_else(|| {\n-                    let home = std::env::var(\"RUSTUP_HOME\")\n-                        .or_else(|_| std::env::var(\"MULTIRUST_HOME\"))\n-                        .ok();\n-                    let toolchain = std::env::var(\"RUSTUP_TOOLCHAIN\")\n-                        .or_else(|_| std::env::var(\"MULTIRUST_TOOLCHAIN\"))\n-                        .ok();\n-                    toolchain_path(home, toolchain)\n-                })\n-                .or_else(|| {\n-                    Command::new(\"rustc\")\n-                        .arg(\"--print\")\n-                        .arg(\"sysroot\")\n-                        .output()\n-                        .ok()\n-                        .and_then(|out| String::from_utf8(out.stdout).ok())\n-                        .map(|s| PathBuf::from(s.trim()))\n-                })\n-                .or_else(|| option_env!(\"SYSROOT\").map(PathBuf::from))\n-                .or_else(|| {\n-                    let home = option_env!(\"RUSTUP_HOME\")\n-                        .or(option_env!(\"MULTIRUST_HOME\"))\n-                        .map(ToString::to_string);\n-                    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\")\n-                        .or(option_env!(\"MULTIRUST_TOOLCHAIN\"))\n-                        .map(ToString::to_string);\n-                    toolchain_path(home, toolchain)\n-                })\n-                .map(|pb| pb.to_string_lossy().to_string())\n-                .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n-\n-            // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n-            // We're invoking the compiler programmatically, so we ignore this/\n-            let wrapper_mode = orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());\n-\n-            if wrapper_mode {\n-                // we still want to be able to invoke it normally though\n-                orig_args.remove(1);\n-            }\n+        if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n+            let version_info = rustc_tools_util::get_version_info!();\n+            println!(\"{}\", version_info);\n+            exit(0);\n+        }\n \n-            if !wrapper_mode && (orig_args.iter().any(|a| a == \"--help\" || a == \"-h\") || orig_args.len() == 1) {\n-                display_help();\n-                exit(0);\n-            }\n+        // Get the sysroot, looking from most specific to this invocation to the least:\n+        // - command line\n+        // - runtime environment\n+        //    - SYSROOT\n+        //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n+        // - sysroot from rustc in the path\n+        // - compile-time environment\n+        //    - SYSROOT\n+        //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n+        let sys_root_arg = arg_value(&orig_args, \"--sysroot\", |_| true);\n+        let have_sys_root_arg = sys_root_arg.is_some();\n+        let sys_root = sys_root_arg\n+            .map(PathBuf::from)\n+            .or_else(|| std::env::var(\"SYSROOT\").ok().map(PathBuf::from))\n+            .or_else(|| {\n+                let home = std::env::var(\"RUSTUP_HOME\")\n+                    .or_else(|_| std::env::var(\"MULTIRUST_HOME\"))\n+                    .ok();\n+                let toolchain = std::env::var(\"RUSTUP_TOOLCHAIN\")\n+                    .or_else(|_| std::env::var(\"MULTIRUST_TOOLCHAIN\"))\n+                    .ok();\n+                toolchain_path(home, toolchain)\n+            })\n+            .or_else(|| {\n+                Command::new(\"rustc\")\n+                    .arg(\"--print\")\n+                    .arg(\"sysroot\")\n+                    .output()\n+                    .ok()\n+                    .and_then(|out| String::from_utf8(out.stdout).ok())\n+                    .map(|s| PathBuf::from(s.trim()))\n+            })\n+            .or_else(|| option_env!(\"SYSROOT\").map(PathBuf::from))\n+            .or_else(|| {\n+                let home = option_env!(\"RUSTUP_HOME\")\n+                    .or(option_env!(\"MULTIRUST_HOME\"))\n+                    .map(ToString::to_string);\n+                let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\")\n+                    .or(option_env!(\"MULTIRUST_TOOLCHAIN\"))\n+                    .map(ToString::to_string);\n+                toolchain_path(home, toolchain)\n+            })\n+            .map(|pb| pb.to_string_lossy().to_string())\n+            .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n-            let should_describe_lints = || {\n-                let args: Vec<_> = env::args().collect();\n-                args.windows(2).any(|args| {\n-                    args[1] == \"help\"\n-                        && match args[0].as_str() {\n-                            \"-W\" | \"-A\" | \"-D\" | \"-F\" => true,\n-                            _ => false,\n-                        }\n-                })\n-            };\n-\n-            if !wrapper_mode && should_describe_lints() {\n-                describe_lints();\n-                exit(0);\n-            }\n+        // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n+        // We're invoking the compiler programmatically, so we ignore this/\n+        let wrapper_mode = orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());\n+\n+        if wrapper_mode {\n+            // we still want to be able to invoke it normally though\n+            orig_args.remove(1);\n+        }\n+\n+        if !wrapper_mode && (orig_args.iter().any(|a| a == \"--help\" || a == \"-h\") || orig_args.len() == 1) {\n+            display_help();\n+            exit(0);\n+        }\n+\n+        let should_describe_lints = || {\n+            let args: Vec<_> = env::args().collect();\n+            args.windows(2).any(|args| {\n+                args[1] == \"help\"\n+                    && match args[0].as_str() {\n+                        \"-W\" | \"-A\" | \"-D\" | \"-F\" => true,\n+                        _ => false,\n+                    }\n+            })\n+        };\n \n-            // this conditional check for the --sysroot flag is there so users can call\n-            // `clippy_driver` directly\n-            // without having to pass --sysroot or anything\n-            let mut args: Vec<String> = orig_args.clone();\n-            if !have_sys_root_arg {\n-                args.extend(vec![\"--sysroot\".into(), sys_root]);\n-            };\n-\n-            // this check ensures that dependencies are built but not linted and the final\n-            // crate is linted but not built\n-            let clippy_enabled = env::var(\"CLIPPY_TESTS\").map_or(false, |val| val == \"true\")\n-                || arg_value(&orig_args, \"--cap-lints\", |val| val == \"allow\").is_none();\n-\n-            if clippy_enabled {\n-                args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n-                if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-                    args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n-                        if s.is_empty() {\n-                            None\n-                        } else {\n-                            Some(s.to_string())\n-                        }\n-                    }));\n-                }\n+        if !wrapper_mode && should_describe_lints() {\n+            describe_lints();\n+            exit(0);\n+        }\n+\n+        // this conditional check for the --sysroot flag is there so users can call\n+        // `clippy_driver` directly\n+        // without having to pass --sysroot or anything\n+        let mut args: Vec<String> = orig_args.clone();\n+        if !have_sys_root_arg {\n+            args.extend(vec![\"--sysroot\".into(), sys_root]);\n+        };\n+\n+        // this check ensures that dependencies are built but not linted and the final\n+        // crate is linted but not built\n+        let clippy_enabled = env::var(\"CLIPPY_TESTS\").map_or(false, |val| val == \"true\")\n+            || arg_value(&orig_args, \"--cap-lints\", |val| val == \"allow\").is_none();\n+\n+        if clippy_enabled {\n+            args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n+            if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n+                args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n+                    if s.is_empty() {\n+                        None\n+                    } else {\n+                        Some(s.to_string())\n+                    }\n+                }));\n             }\n-            let mut clippy = ClippyCallbacks;\n-            let mut default = DefaultCallbacks;\n-            let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n-                if clippy_enabled { &mut clippy } else { &mut default };\n-            rustc_driver::run_compiler(&args, callbacks, None, None)\n-        })\n-        .and_then(|result| result)\n-        .is_err() as i32,\n-    )\n+        }\n+        let mut clippy = ClippyCallbacks;\n+        let mut default = DefaultCallbacks;\n+        let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n+            if clippy_enabled { &mut clippy } else { &mut default };\n+        rustc_driver::run_compiler(&args, callbacks, None, None)\n+    }))\n }"}]}