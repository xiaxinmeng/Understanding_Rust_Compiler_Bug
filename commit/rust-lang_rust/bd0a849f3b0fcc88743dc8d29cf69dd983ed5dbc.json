{"sha": "bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMGE4NDlmM2IwZmNjODg3NDNkYzhkMjljZjY5ZGQ5ODNlZDVkYmM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-06T11:23:43Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:52Z"}, "message": "trans: datum::lvalue_scratch_datum doesn't need a move-into-closure trick.", "tree": {"sha": "265d029bcb7ab9826d1fd3381238655c997916bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/265d029bcb7ab9826d1fd3381238655c997916bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc", "html_url": "https://github.com/rust-lang/rust/commit/bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03993882d634b923d9f8e467b7a991f3b07b6453", "url": "https://api.github.com/repos/rust-lang/rust/commits/03993882d634b923d9f8e467b7a991f3b07b6453", "html_url": "https://github.com/rust-lang/rust/commit/03993882d634b923d9f8e467b7a991f3b07b6453"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "436963ec26d49bc0be044f92482727c3ffe59b20", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc", "patch": "@@ -1277,7 +1277,7 @@ pub fn trans_drop_flag_ptr<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             let scratch = unpack_datum!(bcx, datum::lvalue_scratch_datum(\n                 bcx, tcx.dtor_type(), \"drop_flag\",\n                 InitAlloca::Uninit(\"drop flag itself has no dtor\"),\n-                cleanup::CustomScope(custom_cleanup_scope), (), |_, bcx, _| {\n+                cleanup::CustomScope(custom_cleanup_scope), |bcx, _| {\n                     debug!(\"no-op populate call for trans_drop_flag_ptr on dtor_type={:?}\",\n                            tcx.dtor_type());\n                     bcx"}, {"sha": "649f6180de20b01a794ed007f746aa17558e6420", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=bd0a849f3b0fcc88743dc8d29cf69dd983ed5dbc", "patch": "@@ -306,15 +306,14 @@ pub fn immediate_rvalue_bcx<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n /// caller can prove that either (1.) the code injected by `populate`\n /// onto `bcx` always dominates the end of `scope`, or (2.) the data\n /// being allocated has no associated destructor.\n-pub fn lvalue_scratch_datum<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n-                                              ty: Ty<'tcx>,\n-                                              name: &str,\n-                                              zero: InitAlloca,\n-                                              scope: cleanup::ScopeId,\n-                                              arg: A,\n-                                              populate: F)\n-                                              -> DatumBlock<'blk, 'tcx, Lvalue> where\n-    F: FnOnce(A, Block<'blk, 'tcx>, ValueRef) -> Block<'blk, 'tcx>,\n+pub fn lvalue_scratch_datum<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n+                                           ty: Ty<'tcx>,\n+                                           name: &str,\n+                                           zero: InitAlloca,\n+                                           scope: cleanup::ScopeId,\n+                                           populate: F)\n+                                           -> DatumBlock<'blk, 'tcx, Lvalue> where\n+    F: FnOnce(Block<'blk, 'tcx>, ValueRef) -> Block<'blk, 'tcx>,\n {\n     // Very subtle: potentially initialize the scratch memory at point where it is alloca'ed.\n     // (See discussion at Issue 30530.)\n@@ -323,7 +322,7 @@ pub fn lvalue_scratch_datum<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n            scope, Value(scratch), ty);\n \n     // Subtle. Populate the scratch memory *before* scheduling cleanup.\n-    let bcx = populate(arg, bcx, scratch);\n+    let bcx = populate(bcx, scratch);\n     bcx.fcx.schedule_drop_mem(scope, scratch, ty, None);\n \n     DatumBlock::new(bcx, Datum::new(scratch, ty, Lvalue::new(\"datum::lvalue_scratch_datum\")))\n@@ -517,14 +516,14 @@ impl<'tcx> Datum<'tcx, Rvalue> {\n \n             ByValue => {\n                 lvalue_scratch_datum(\n-                    bcx, self.ty, name, InitAlloca::Dropped, scope, self,\n-                    |this, bcx, llval| {\n+                    bcx, self.ty, name, InitAlloca::Dropped, scope,\n+                    |bcx, llval| {\n                         debug!(\"populate call for Datum::to_lvalue_datum_in_scope \\\n-                                self.ty={:?}\", this.ty);\n+                                self.ty={:?}\", self.ty);\n                         // do not call_lifetime_start here; the\n                         // `InitAlloc::Dropped` will start scratch\n                         // value's lifetime at open of function body.\n-                        let bcx = this.store_to(bcx, llval);\n+                        let bcx = self.store_to(bcx, llval);\n                         bcx.fcx.schedule_lifetime_end(scope, llval);\n                         bcx\n                     })"}]}