{"sha": "6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZjM5ZTY5ZWFjNDJlMWNjODZlYzhlZWIxYjg1YzZiM2E4Nzg0ZmE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-02T10:34:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-02T10:47:20Z"}, "message": "Avoid repeated interning of static strings.\n\n`file_metadata_raw` interns the strings `\"<unknown>\"` and `\"\"` very\nfrequently. This commit avoids that, which reduces the number of symbols\ninterned significantly and reduces instruction counts by up to 0.5% on\nsome workloads.", "tree": {"sha": "2ae27dc2fd60df15ec3c7361e4bcdefdefcb57ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae27dc2fd60df15ec3c7361e4bcdefdefcb57ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa", "html_url": "https://github.com/rust-lang/rust/commit/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03122e1bac482b150844ef9664b1ad2438b43072", "url": "https://api.github.com/repos/rust-lang/rust/commits/03122e1bac482b150844ef9664b1ad2438b43072", "html_url": "https://github.com/rust-lang/rust/commit/03122e1bac482b150844ef9664b1ad2438b43072"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "0d67865d7170849e8c2c22cbc44fa1cd9afd0378", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa", "patch": "@@ -784,26 +784,30 @@ pub fn file_metadata(cx: &CodegenCx<'ll, '_>,\n            file_name,\n            defining_crate);\n \n-    let directory = if defining_crate == LOCAL_CRATE {\n-        &cx.sess().working_dir.0\n+    let file_name = &file_name.to_string();\n+    let file_name_symbol = Symbol::intern(file_name);\n+    if defining_crate == LOCAL_CRATE {\n+        let directory = &cx.sess().working_dir.0.to_string_lossy();\n+        file_metadata_raw(cx, file_name, Some(file_name_symbol),\n+                          directory, Some(Symbol::intern(directory)))\n     } else {\n         // If the path comes from an upstream crate we assume it has been made\n         // independent of the compiler's working directory one way or another.\n-        Path::new(\"\")\n-    };\n-\n-    file_metadata_raw(cx, &file_name.to_string(), &directory.to_string_lossy())\n+        file_metadata_raw(cx, file_name, Some(file_name_symbol), \"\", None)\n+    }\n }\n \n pub fn unknown_file_metadata(cx: &CodegenCx<'ll, '_>) -> &'ll DIFile {\n-    file_metadata_raw(cx, \"<unknown>\", \"\")\n+    file_metadata_raw(cx, \"<unknown>\", None, \"\", None)\n }\n \n fn file_metadata_raw(cx: &CodegenCx<'ll, '_>,\n                      file_name: &str,\n-                     directory: &str)\n+                     file_name_symbol: Option<Symbol>,\n+                     directory: &str,\n+                     directory_symbol: Option<Symbol>)\n                      -> &'ll DIFile {\n-    let key = (Symbol::intern(file_name), Symbol::intern(directory));\n+    let key = (file_name_symbol, directory_symbol);\n \n     if let Some(file_metadata) = debug_context(cx).created_files.borrow().get(&key) {\n         return *file_metadata;"}, {"sha": "f3070a03b4ed523520abd34f1de0a648300edbfd", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa", "patch": "@@ -63,7 +63,7 @@ pub struct CrateDebugContext<'a, 'tcx> {\n     llcontext: &'a llvm::Context,\n     llmod: &'a llvm::Module,\n     builder: &'a mut DIBuilder<'a>,\n-    created_files: RefCell<FxHashMap<(Symbol, Symbol), &'a DIFile>>,\n+    created_files: RefCell<FxHashMap<(Option<Symbol>, Option<Symbol>), &'a DIFile>>,\n     created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Primitive), &'a DIType>>,\n \n     type_map: RefCell<TypeMap<'a, 'tcx>>,"}]}