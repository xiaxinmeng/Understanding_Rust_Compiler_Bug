{"sha": "1cad6322c36f480aee7ea9f5a5776e1271abbf67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYWQ2MzIyYzM2ZjQ4MGFlZTdlYTlmNWE1Nzc2ZTEyNzFhYmJmNjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-19T08:23:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-19T08:23:00Z"}, "message": "core: Move last_os_error from sys to os", "tree": {"sha": "bf780d3117f6e9a304c2f5085957a124a3bcf65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf780d3117f6e9a304c2f5085957a124a3bcf65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cad6322c36f480aee7ea9f5a5776e1271abbf67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cad6322c36f480aee7ea9f5a5776e1271abbf67", "html_url": "https://github.com/rust-lang/rust/commit/1cad6322c36f480aee7ea9f5a5776e1271abbf67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cad6322c36f480aee7ea9f5a5776e1271abbf67/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01e20dd0b3d053736fbb868ec7ea6f083c29aacd", "url": "https://api.github.com/repos/rust-lang/rust/commits/01e20dd0b3d053736fbb868ec7ea6f083c29aacd", "html_url": "https://github.com/rust-lang/rust/commit/01e20dd0b3d053736fbb868ec7ea6f083c29aacd"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "01edaeabe053feaf01170ba1ede2c67fdc543027", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cad6322c36f480aee7ea9f5a5776e1271abbf67/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cad6322c36f480aee7ea9f5a5776e1271abbf67/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=1cad6322c36f480aee7ea9f5a5776e1271abbf67", "patch": "@@ -317,7 +317,7 @@ impl of writer for *libc::FILE {\n             let nout = libc::fwrite(vbuf as *c_void, len, 1u, self);\n             if nout < 1 as size_t {\n                 #error(\"error writing buffer\");\n-                log(error, sys::last_os_error());\n+                log(error, os::last_os_error());\n                 fail;\n             }\n         }\n@@ -348,7 +348,7 @@ impl of writer for fd_t {\n                 let nout = libc::write(self, vb, len);\n                 if nout < 0 as ssize_t {\n                     #error(\"error writing buffer\");\n-                    log(error, sys::last_os_error());\n+                    log(error, os::last_os_error());\n                     fail;\n                 }\n                 count += nout as uint;\n@@ -402,7 +402,7 @@ fn mk_file_writer(path: str, flags: [fileflag])\n                    (S_IRUSR | S_IWUSR) as c_int)\n     };\n     if fd < (0 as c_int) {\n-        result::err(#fmt(\"error opening %s: %s\", path, sys::last_os_error()))\n+        result::err(#fmt(\"error opening %s: %s\", path, os::last_os_error()))\n     } else {\n         result::ok(fd_writer(fd, true))\n     }"}, {"sha": "6c5e4181ab54eeb1ca12c53a12c11cf1b8151f91", "filename": "src/libcore/os.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cad6322c36f480aee7ea9f5a5776e1271abbf67/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cad6322c36f480aee7ea9f5a5776e1271abbf67/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=1cad6322c36f480aee7ea9f5a5776e1271abbf67", "patch": "@@ -32,6 +32,7 @@ export exe_suffix, dll_suffix, sysname;\n export homedir, list_dir, list_dir_path, path_is_dir, path_exists,\n        make_absolute, make_dir, remove_dir, change_dir, remove_file,\n        copy_file;\n+export last_os_error;\n \n // FIXME: move these to str perhaps?\n export as_c_charp, fill_charp_buf;\n@@ -43,6 +44,7 @@ native mod rustrt {\n     fn rust_path_exists(path: *libc::c_char) -> c_int;\n     fn rust_list_files(path: str) -> [str];\n     fn rust_process_wait(handle: c_int) -> c_int;\n+    fn last_os_error() -> str;\n }\n \n \n@@ -623,6 +625,10 @@ fn remove_file(p: path) -> bool {\n     }\n }\n \n+#[doc = \"Get a string representing the platform-dependent last error\"]\n+fn last_os_error() -> str {\n+    rustrt::last_os_error()\n+}\n \n \n #[cfg(target_os = \"macos\")]\n@@ -659,6 +665,10 @@ mod consts {\n #[cfg(test)]\n mod tests {\n \n+    #[test]\n+    fn last_os_error() {\n+        log(debug, last_os_error());\n+    }\n \n     fn make_rand_name() -> str {\n         import rand;"}, {"sha": "ce83ab596e2254be4ffe99de1e7d9fb99b4edf70", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1cad6322c36f480aee7ea9f5a5776e1271abbf67/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cad6322c36f480aee7ea9f5a5776e1271abbf67/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=1cad6322c36f480aee7ea9f5a5776e1271abbf67", "patch": "@@ -2,7 +2,6 @@\n \n export type_desc;\n export get_type_desc;\n-export last_os_error;\n export size_of;\n export align_of;\n export refcount;\n@@ -18,10 +17,6 @@ enum type_desc = {\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    // Explicitly re-export native stuff we want to be made\n-    // available outside this crate. Otherwise it's\n-    // visible-in-crate, but not re-exported.\n-    fn last_os_error() -> str;\n     fn refcount<T>(t: @T) -> libc::intptr_t;\n     fn unsupervise();\n     fn shape_log_str<T>(t: *sys::type_desc, data: T) -> str;\n@@ -45,11 +40,6 @@ fn get_type_desc<T>() -> *type_desc {\n     rusti::get_tydesc::<T>() as *type_desc\n }\n \n-#[doc = \"Get a string representing the platform-dependent last error\"]\n-fn last_os_error() -> str {\n-    rustrt::last_os_error()\n-}\n-\n #[doc = \"Returns the size of a type\"]\n fn size_of<T>() -> uint unsafe {\n     rusti::size_of::<T>()\n@@ -84,11 +74,6 @@ fn set_exit_status(code: int) {\n #[cfg(test)]\n mod tests {\n \n-    #[test]\n-    fn last_os_error() {\n-        log(debug, last_os_error());\n-    }\n-\n     #[test]\n     fn size_of_basic() {\n         assert size_of::<u8>() == 1u;"}]}