{"sha": "d95d03ae8ad10f253dce81a62a9ac372835b9bb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NWQwM2FlOGFkMTBmMjUzZGNlODFhNjJhOWFjMzcyODM1YjliYjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-03T11:59:36Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-03T11:59:36Z"}, "message": "Support #[repr(simd)] on array wrappers\n\nComplement to rust-lang/rust#78863", "tree": {"sha": "b38608ef148b750a3076e8e48c6bbc010f618a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b38608ef148b750a3076e8e48c6bbc010f618a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95d03ae8ad10f253dce81a62a9ac372835b9bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95d03ae8ad10f253dce81a62a9ac372835b9bb4", "html_url": "https://github.com/rust-lang/rust/commit/d95d03ae8ad10f253dce81a62a9ac372835b9bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95d03ae8ad10f253dce81a62a9ac372835b9bb4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64e7ff25f65c29c80b7e1659a67562e68d1c8fac", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e7ff25f65c29c80b7e1659a67562e68d1c8fac", "html_url": "https://github.com/rust-lang/rust/commit/64e7ff25f65c29c80b7e1659a67562e68d1c8fac"}], "stats": {"total": 71, "additions": 28, "deletions": 43}, "files": [{"sha": "d58e4d499584210e78fda8527de716e4ccba5034", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d95d03ae8ad10f253dce81a62a9ac372835b9bb4/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d03ae8ad10f253dce81a62a9ac372835b9bb4/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=d95d03ae8ad10f253dce81a62a9ac372835b9bb4", "patch": "@@ -23,8 +23,8 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n \n         // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n         llvm.x86.sse2.pmovmskb.128 | llvm.x86.avx2.pmovmskb | llvm.x86.sse2.movmsk.pd, (c a) {\n-            let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, a.layout());\n-            let lane_ty = fx.clif_type(lane_layout.ty).unwrap();\n+            let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n+            let lane_ty = fx.clif_type(lane_ty).unwrap();\n             assert!(lane_count <= 32);\n \n             let mut res = fx.bcx.ins().iconst(types::I32, 0);"}, {"sha": "4cfd4569760ee7ffcb6037d7de8849cbff8e1a42", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d95d03ae8ad10f253dce81a62a9ac372835b9bb4/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d03ae8ad10f253dce81a62a9ac372835b9bb4/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=d95d03ae8ad10f253dce81a62a9ac372835b9bb4", "patch": "@@ -171,27 +171,6 @@ macro validate_simd_type($fx:ident, $intrinsic:ident, $span:ident, $ty:expr) {\n     }\n }\n \n-fn lane_type_and_count<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    layout: TyAndLayout<'tcx>,\n-) -> (TyAndLayout<'tcx>, u16) {\n-    assert!(layout.ty.is_simd());\n-    let lane_count = match layout.fields {\n-        rustc_target::abi::FieldsShape::Array { stride: _, count } => u16::try_from(count).unwrap(),\n-        _ => unreachable!(\"lane_type_and_count({:?})\", layout),\n-    };\n-    let lane_layout = layout\n-        .field(\n-            &ty::layout::LayoutCx {\n-                tcx,\n-                param_env: ParamEnv::reveal_all(),\n-            },\n-            0,\n-        )\n-        .unwrap();\n-    (lane_layout, lane_count)\n-}\n-\n pub(crate) fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> Option<Type> {\n     let (element, count) = match &layout.abi {\n         Abi::Vector { element, count } => (element.clone(), *count),\n@@ -218,8 +197,10 @@ fn simd_for_each_lane<'tcx, M: Module>(\n ) {\n     let layout = val.layout();\n \n-    let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, layout);\n-    let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n+    let (lane_count, lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n+    let lane_layout = fx.layout_of(lane_ty);\n+    let (ret_lane_count, ret_lane_ty) = ret.layout().ty.simd_size_and_type(fx.tcx);\n+    let ret_lane_layout = fx.layout_of(ret_lane_ty);\n     assert_eq!(lane_count, ret_lane_count);\n \n     for lane_idx in 0..lane_count {\n@@ -248,8 +229,10 @@ fn simd_pair_for_each_lane<'tcx, M: Module>(\n     assert_eq!(x.layout(), y.layout());\n     let layout = x.layout();\n \n-    let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, layout);\n-    let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n+    let (lane_count, lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n+    let lane_layout = fx.layout_of(lane_ty);\n+    let (ret_lane_count, ret_lane_ty) = ret.layout().ty.simd_size_and_type(fx.tcx);\n+    let ret_lane_layout = fx.layout_of(ret_lane_ty);\n     assert_eq!(lane_count, ret_lane_count);\n \n     for lane in 0..lane_count {\n@@ -269,13 +252,14 @@ fn simd_reduce<'tcx, M: Module>(\n     ret: CPlace<'tcx>,\n     f: impl Fn(&mut FunctionCx<'_, 'tcx, M>, TyAndLayout<'tcx>, Value, Value) -> Value,\n ) {\n-    let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, val.layout());\n+    let (lane_count, lane_ty) = val.layout().ty.simd_size_and_type(fx.tcx);\n+    let lane_layout = fx.layout_of(lane_ty);\n     assert_eq!(lane_layout, ret.layout());\n \n     let mut res_val = val.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n     for lane_idx in 1..lane_count {\n         let lane = val\n-            .value_field(fx, mir::Field::new(lane_idx.into()))\n+            .value_field(fx, mir::Field::new(lane_idx.try_into().unwrap()))\n             .load_scalar(fx);\n         res_val = f(fx, lane_layout, res_val, lane);\n     }\n@@ -289,14 +273,14 @@ fn simd_reduce_bool<'tcx, M: Module>(\n     ret: CPlace<'tcx>,\n     f: impl Fn(&mut FunctionCx<'_, 'tcx, M>, Value, Value) -> Value,\n ) {\n-    let (_lane_layout, lane_count) = lane_type_and_count(fx.tcx, val.layout());\n+    let (lane_count, _lane_ty) = val.layout().ty.simd_size_and_type(fx.tcx);\n     assert!(ret.layout().ty.is_bool());\n \n     let res_val = val.value_field(fx, mir::Field::new(0)).load_scalar(fx);\n     let mut res_val = fx.bcx.ins().band_imm(res_val, 1); // mask to boolean\n     for lane_idx in 1..lane_count {\n         let lane = val\n-            .value_field(fx, mir::Field::new(lane_idx.into()))\n+            .value_field(fx, mir::Field::new(lane_idx.try_into().unwrap()))\n             .load_scalar(fx);\n         let lane = fx.bcx.ins().band_imm(lane, 1); // mask to boolean\n         res_val = f(fx, res_val, lane);"}, {"sha": "e0eb5c59590ffba54aeffe2931d933875cf9f093", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d95d03ae8ad10f253dce81a62a9ac372835b9bb4/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d03ae8ad10f253dce81a62a9ac372835b9bb4/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=d95d03ae8ad10f253dce81a62a9ac372835b9bb4", "patch": "@@ -73,11 +73,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             assert_eq!(x.layout(), y.layout());\n             let layout = x.layout();\n \n-            let (lane_type, lane_count) = lane_type_and_count(fx.tcx, layout);\n-            let (ret_lane_type, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n+            let (lane_count, lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n+            let (ret_lane_count, ret_lane_ty) = ret.layout().ty.simd_size_and_type(fx.tcx);\n \n-            assert_eq!(lane_type, ret_lane_type);\n-            assert_eq!(n, ret_lane_count);\n+            assert_eq!(lane_ty, ret_lane_ty);\n+            assert_eq!(u64::from(n), ret_lane_count);\n \n             let total_len = lane_count * 2;\n \n@@ -105,14 +105,14 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             };\n \n             for &idx in &indexes {\n-                assert!(idx < total_len, \"idx {} out of range 0..{}\", idx, total_len);\n+                assert!(u64::from(idx) < total_len, \"idx {} out of range 0..{}\", idx, total_len);\n             }\n \n             for (out_idx, in_idx) in indexes.into_iter().enumerate() {\n-                let in_lane = if in_idx < lane_count {\n+                let in_lane = if u64::from(in_idx) < lane_count {\n                     x.value_field(fx, mir::Field::new(in_idx.into()))\n                 } else {\n-                    y.value_field(fx, mir::Field::new((in_idx - lane_count).into()))\n+                    y.value_field(fx, mir::Field::new(usize::from(in_idx) - usize::try_from(lane_count).unwrap()))\n                 };\n                 let out_lane = ret.place_field(fx, mir::Field::new(out_idx));\n                 out_lane.write_cvalue(fx, in_lane);\n@@ -131,7 +131,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             };\n \n             let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n-            let (_lane_type, lane_count) = lane_type_and_count(fx.tcx, base.layout());\n+            let (lane_count, _lane_ty) = base.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n             }\n@@ -160,7 +160,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             };\n \n             let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n-            let (_lane_type, lane_count) = lane_type_and_count(fx.tcx, v.layout());\n+            let (lane_count, _lane_ty) = v.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));\n             }\n@@ -212,12 +212,13 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             assert_eq!(a.layout(), c.layout());\n             let layout = a.layout();\n \n-            let (_lane_layout, lane_count) = lane_type_and_count(fx.tcx, layout);\n-            let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n+            let (lane_count, _lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n+            let (ret_lane_count, ret_lane_ty) = ret.layout().ty.simd_size_and_type(fx.tcx);\n             assert_eq!(lane_count, ret_lane_count);\n+            let ret_lane_layout = fx.layout_of(ret_lane_ty);\n \n             for lane in 0..lane_count {\n-                let lane = mir::Field::new(lane.into());\n+                let lane = mir::Field::new(lane.try_into().unwrap());\n                 let a_lane = a.value_field(fx, lane).load_scalar(fx);\n                 let b_lane = b.value_field(fx, lane).load_scalar(fx);\n                 let c_lane = c.value_field(fx, lane).load_scalar(fx);"}]}