{"sha": "0952856e6c78ec00fd2bc1bfc3a162d883446f50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NTI4NTZlNmM3OGVjMDBmZDJiYzFiZmMzYTE2MmQ4ODM0NDZmNTA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-26T18:11:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-30T19:48:08Z"}, "message": "Suggest an appropriate token when encountering `pub Ident<'a>`", "tree": {"sha": "47a5f976324a66bf28b72048dda1ec9bdda69da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47a5f976324a66bf28b72048dda1ec9bdda69da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0952856e6c78ec00fd2bc1bfc3a162d883446f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0952856e6c78ec00fd2bc1bfc3a162d883446f50", "html_url": "https://github.com/rust-lang/rust/commit/0952856e6c78ec00fd2bc1bfc3a162d883446f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0952856e6c78ec00fd2bc1bfc3a162d883446f50/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dde9e132207b5a40e12f8d5a1a363ebea60e0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dde9e132207b5a40e12f8d5a1a363ebea60e0b0", "html_url": "https://github.com/rust-lang/rust/commit/3dde9e132207b5a40e12f8d5a1a363ebea60e0b0"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "5257fc44934061ef26aec10cc5507854b5eb2568", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0952856e6c78ec00fd2bc1bfc3a162d883446f50", "patch": "@@ -5802,20 +5802,14 @@ impl<'a> Parser<'a> {\n     }\n \n     fn complain_if_pub_macro(&mut self, vis: &VisibilityKind, sp: Span) {\n-        if let Err(mut err) = self.complain_if_pub_macro_diag(vis, sp) {\n-            err.emit();\n-        }\n-    }\n-\n-    fn complain_if_pub_macro_diag(&mut self, vis: &VisibilityKind, sp: Span) -> PResult<'a, ()> {\n         match *vis {\n-            VisibilityKind::Inherited => Ok(()),\n+            VisibilityKind::Inherited => {}\n             _ => {\n                 let is_macro_rules: bool = match self.token {\n                     token::Ident(sid, _) => sid.name == Symbol::intern(\"macro_rules\"),\n                     _ => false,\n                 };\n-                if is_macro_rules {\n+                let mut err = if is_macro_rules {\n                     let mut err = self.diagnostic()\n                         .struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n                     err.span_suggestion_with_applicability(\n@@ -5824,13 +5818,14 @@ impl<'a> Parser<'a> {\n                         \"#[macro_export]\".to_owned(),\n                         Applicability::MaybeIncorrect // speculative\n                     );\n-                    Err(err)\n+                    err\n                 } else {\n                     let mut err = self.diagnostic()\n                         .struct_span_err(sp, \"can't qualify macro invocation with `pub`\");\n                     err.help(\"try adjusting the macro to put `pub` inside the invocation\");\n-                    Err(err)\n-                }\n+                    err\n+                };\n+                err.emit();\n             }\n         }\n     }\n@@ -7439,6 +7434,28 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 return Err(err);\n+            } else if self.look_ahead(1, |t| *t == token::Lt) {\n+                let ident = self.parse_ident().unwrap();\n+                self.eat_to_tokens(&[&token::Gt]);\n+                self.bump();\n+                let (kw, kw_name, ambiguous) = if self.check(&token::OpenDelim(token::Paren)) {\n+                    (\"fn\", \"method\", false)\n+                } else if self.check(&token::OpenDelim(token::Brace)) {\n+                    (\"struct\", \"struct\", false)\n+                } else {\n+                    (\"fn` or `struct\", \"method or struct\", true)\n+                };\n+                let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n+                let mut err = self.diagnostic().struct_span_err(sp, &msg);\n+                if !ambiguous {\n+                    err.span_suggestion_short_with_applicability(\n+                        sp,\n+                        &format!(\"add `{}` here to parse `{}` as a public {}\", kw, ident, kw_name),\n+                        format!(\" {} \", kw),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                return Err(err);\n             }\n         }\n         self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)"}, {"sha": "973bb924684a85707a59f5f4f6007176b1201c43", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs?ref=0952856e6c78ec00fd2bc1bfc3a162d883446f50", "patch": "@@ -0,0 +1,6 @@\n+pub   foo<'a>(_s: &'a usize) -> bool { true }\n+//~^ ERROR missing `fn` for method definition\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "aa609d2cbc6d6033ce360102aab128a8bb31a0bd", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr?ref=0952856e6c78ec00fd2bc1bfc3a162d883446f50", "patch": "@@ -0,0 +1,12 @@\n+error: missing `fn` for method definition\n+  --> $DIR/pub-ident-fn-with-lifetime.rs:1:4\n+   |\n+LL | pub   foo<'a>(_s: &'a usize) -> bool { true }\n+   |    ^^^\n+help: add `fn` here to parse `foo` as a public method\n+   |\n+LL | pub fn foo<'a>(_s: &'a usize) -> bool { true }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2feb0266070d5283f7051d3708dd73420c1ccb14", "filename": "src/test/ui/pub/pub-ident-struct-with-lifetime.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs?ref=0952856e6c78ec00fd2bc1bfc3a162d883446f50", "patch": "@@ -0,0 +1,4 @@\n+pub S<'a> {\n+//~^ ERROR missing `struct` for struct definition\n+}\n+fn main() {}"}, {"sha": "2bbcf5dfff01098a34c3a1098de7a92f47588dbd", "filename": "src/test/ui/pub/pub-ident-struct-with-lifetime.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr?ref=0952856e6c78ec00fd2bc1bfc3a162d883446f50", "patch": "@@ -0,0 +1,12 @@\n+error: missing `struct` for struct definition\n+  --> $DIR/pub-ident-struct-with-lifetime.rs:1:4\n+   |\n+LL | pub S<'a> {\n+   |    ^\n+help: add `struct` here to parse `S` as a public struct\n+   |\n+LL | pub struct S<'a> {\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "55b1b746bc81de93897d910f861249a81b63030e", "filename": "src/test/ui/pub/pub-ident-with-lifetime-incomplete.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs?ref=0952856e6c78ec00fd2bc1bfc3a162d883446f50", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+}\n+\n+pub   foo<'a>\n+//~^ ERROR missing `fn` or `struct` for method or struct definition"}, {"sha": "a55c06f72df298d1cb8087df1f145097a4996134", "filename": "src/test/ui/pub/pub-ident-with-lifetime-incomplete.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0952856e6c78ec00fd2bc1bfc3a162d883446f50/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr?ref=0952856e6c78ec00fd2bc1bfc3a162d883446f50", "patch": "@@ -0,0 +1,8 @@\n+error: missing `fn` or `struct` for method or struct definition\n+  --> $DIR/pub-ident-with-lifetime-incomplete.rs:4:4\n+   |\n+LL | pub   foo<'a>\n+   |    ^^^\n+\n+error: aborting due to previous error\n+"}]}