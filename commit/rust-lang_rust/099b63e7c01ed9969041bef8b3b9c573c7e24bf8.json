{"sha": "099b63e7c01ed9969041bef8b3b9c573c7e24bf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OWI2M2U3YzAxZWQ5OTY5MDQxYmVmOGIzYjljNTczYzdlMjRiZjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-21T17:14:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-21T17:14:38Z"}, "message": "feature: massively improve performance for large files\n\nThis story begins in #8384, where we added a smart test for our syntax\nhighting, which run the algorithm on synthetic files of varying length\nin order to guesstimate if the complexity is O(N^2) or O(N)-ish.\n\nThe test turned out to be pretty effective, and flagged #9031 as a\nchange that makes syntax highlighting accidentally quadratic. There was\nmuch rejoicing, for the time being.\n\nThen, lnicola asked an ominous question[1]: \"Are we sure that the time\nis linear right now?\"\n\nOf course it turned out that our sophisticated non-linearity detector\n*was* broken, and that our syntax highlighting *was* quadratic.\n\nInvestigating that, many brave hearts dug deeper and deeper into the\nguts of rust-analyzer, only to get lost in a maze of traits delegating\nto traits delegating to macros.\n\nEventually, matklad managed to peel off all layers of abstraction one by\none, until almost nothing was left. In fact, the issue was discovered in\nthe very foundation of the rust-analyzer -- in the syntax trees.\n\nWorse, it was not a new problem, but rather a well-know, well-understood\nand event (almost) well-fixed (!) performance bug.\n\nThe problem lies within `SyntaxNodePtr` type -- a light-weight \"address\"\nof a node in a syntax tree [3]. Such pointers are used by rust-analyzer all\nother the place to record relationships between IR nodes and the\noriginal syntax.\n\nInternally, the pointer to a syntax node is represented by node's range.\nTo \"dereference\" the pointer, you traverse the syntax tree from the\nroot, looking for the node with the right range. The inner loop of this\nsearch is finding a node's child whose range contains the specified\nrange. This inner loop was implemented by naive linear search over all\nthe children. For wide trees, dereferencing a single `SyntaxNodePtr` was\nlinear. The problem with wide trees though is that they contain a lot of\nnodes! And dereferencing pointers to all the nodes is quadratic in the\nsize of the file!\n\nThe solution to this problem is to speed up the children search --\nrather than doing a linear lookup, we can use binary search to locate\nthe child with the desired interval.\n\nDoing this optimization was one of the motivations (or rather, side\neffects) of #6857. That's why `rowan` grew the useful\n`child_or_token_at_range` method which does exactly this binary search.\n\nBut looks like we've never actually switch to this method? Oups.\n\nLesson learned: do not leave broken windows in the fundamental infra.\nOtherwise, you'll have to repeatedly re-investigate the issue, by\ndigging from the top of the Everest down to the foundation!\n\n[1]: https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/.60syntax_highlighting_not_quadratic.60.20failure/near/240811501\n[2]: https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Syntax.20highlighting.20is.20quadratic\n[3]: https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Syntax.20highlighting.20is.20quadratic/near/243412392", "tree": {"sha": "4dcdc1b52930e8017b79c003a9bd6abf6800f86c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dcdc1b52930e8017b79c003a9bd6abf6800f86c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/099b63e7c01ed9969041bef8b3b9c573c7e24bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/099b63e7c01ed9969041bef8b3b9c573c7e24bf8", "html_url": "https://github.com/rust-lang/rust/commit/099b63e7c01ed9969041bef8b3b9c573c7e24bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/099b63e7c01ed9969041bef8b3b9c573c7e24bf8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e61bdfea5454dec4408a4947e037bcd042c886", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e61bdfea5454dec4408a4947e037bcd042c886", "html_url": "https://github.com/rust-lang/rust/commit/56e61bdfea5454dec4408a4947e037bcd042c886"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "32aa699796720f0d8a3f1b1151cf4a28422d40d3", "filename": "crates/syntax/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099b63e7c01ed9969041bef8b3b9c573c7e24bf8/crates%2Fsyntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099b63e7c01ed9969041bef8b3b9c573c7e24bf8/crates%2Fsyntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fptr.rs?ref=099b63e7c01ed9969041bef8b3b9c573c7e24bf8", "patch": "@@ -35,7 +35,7 @@ impl SyntaxNodePtr {\n     pub fn to_node(&self, root: &SyntaxNode) -> SyntaxNode {\n         assert!(root.parent().is_none());\n         successors(Some(root.clone()), |node| {\n-            node.children().find(|it| it.text_range().contains_range(self.range))\n+            node.child_or_token_at_range(self.range).and_then(|it| it.into_node())\n         })\n         .find(|it| it.text_range() == self.range && it.kind() == self.kind)\n         .unwrap_or_else(|| panic!(\"can't resolve local ptr to SyntaxNode: {:?}\", self))"}]}