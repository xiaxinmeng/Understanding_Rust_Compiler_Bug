{"sha": "d922b0ad9c126e416b1d6d68a567e0dcbabbbf29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjJiMGFkOWMxMjZlNDE2YjFkNmQ2OGE1NjdlMGRjYmFiYmJmMjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-03T03:44:24Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-03T03:44:24Z"}, "message": "Drop slots on the way out of scopes. Un-XFAIL box.rs.", "tree": {"sha": "960f262ee36a8d6d91d3e6d838d3efddc8ba946d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/960f262ee36a8d6d91d3e6d838d3efddc8ba946d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d922b0ad9c126e416b1d6d68a567e0dcbabbbf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d922b0ad9c126e416b1d6d68a567e0dcbabbbf29", "html_url": "https://github.com/rust-lang/rust/commit/d922b0ad9c126e416b1d6d68a567e0dcbabbbf29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d922b0ad9c126e416b1d6d68a567e0dcbabbbf29/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "966cfed07ca1514736335365d8f631872c1cd002", "url": "https://api.github.com/repos/rust-lang/rust/commits/966cfed07ca1514736335365d8f631872c1cd002", "html_url": "https://github.com/rust-lang/rust/commit/966cfed07ca1514736335365d8f631872c1cd002"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "814f78e7bb5de65a530ad88bc13727d3dcf7f650", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d922b0ad9c126e416b1d6d68a567e0dcbabbbf29/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d922b0ad9c126e416b1d6d68a567e0dcbabbbf29/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=d922b0ad9c126e416b1d6d68a567e0dcbabbbf29", "patch": "@@ -523,6 +523,7 @@ TEST_XFAILS_SELF := $(filter-out \\\n                         arith-1.rs \\\n                         arith-2.rs \\\n                         bool-not.rs \\\n+                        box.rs \\\n                         char.rs \\\n                         complex.rs \\\n                         dead-code-one-arm-if.rs \\"}, {"sha": "ccacffca25b8ebe5ff117c5285db47e4c133d8d1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d922b0ad9c126e416b1d6d68a567e0dcbabbbf29/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d922b0ad9c126e416b1d6d68a567e0dcbabbbf29/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d922b0ad9c126e416b1d6d68a567e0dcbabbbf29", "patch": "@@ -640,6 +640,16 @@ fn incr_all_refcnts(@block_ctxt cx,\n     ret res(cx, C_nil());\n }\n \n+fn drop_slot(@block_ctxt cx,\n+             ValueRef slot,\n+             @typeck.ty t) -> result {\n+    if (typeck.type_is_structural(t)) {\n+        be drop_ty(cx, slot, t);\n+    } else {\n+        be drop_ty(cx, cx.build.Load(slot), t);\n+    }\n+}\n+\n fn drop_ty(@block_ctxt cx,\n            ValueRef v,\n            @typeck.ty t) -> result {\n@@ -812,7 +822,8 @@ impure fn trans_lit(@block_ctxt cx, &ast.lit lit) -> result {\n                                         C_int(len)));\n             sub.val = sub.bcx.build.IntToPtr(sub.val,\n                                              T_ptr(T_str()));\n-            cx.cleanups += clean(bind trans_drop_str(_, sub.val));\n+            find_scope_cx(cx).cleanups +=\n+                clean(bind trans_drop_str(_, sub.val));\n             ret sub;\n         }\n     }\n@@ -1529,13 +1540,18 @@ impure fn trans_stmt(@block_ctxt cx, &ast.stmt s) -> result {\n         case (ast.stmt_decl(?d)) {\n             alt (d.node) {\n                 case (ast.decl_local(?local)) {\n+\n+                    // Make a note to drop this slot on the way out.\n+                    check (cx.fcx.lllocals.contains_key(local.id));\n+                    auto llptr = cx.fcx.lllocals.get(local.id);\n+                    auto ty = node_ann_type(cx.fcx.ccx, local.ann);\n+                    find_scope_cx(sub.bcx).cleanups +=\n+                        clean(bind drop_slot(_, llptr, ty));\n+\n                     alt (local.init) {\n                         case (some[@ast.expr](?e)) {\n-                            check (cx.fcx.lllocals.contains_key(local.id));\n-                            auto llptr = cx.fcx.lllocals.get(local.id);\n                             sub = trans_expr(cx, e);\n-                            sub = copy_ty(sub.bcx, true, llptr, sub.val,\n-                                          typeck.expr_ty(e));\n+                            sub = copy_ty(sub.bcx, true, llptr, sub.val, ty);\n                         }\n                         case (_) { /* fall through */  }\n                     }\n@@ -1658,7 +1674,7 @@ impure fn trans_block(@block_ctxt cx, &ast.block b) -> result {\n         }\n     }\n \n-    bcx = trans_block_cleanups(bcx, bcx);\n+    bcx = trans_block_cleanups(bcx, find_scope_cx(bcx));\n     ret res(bcx, r.val);\n }\n "}]}