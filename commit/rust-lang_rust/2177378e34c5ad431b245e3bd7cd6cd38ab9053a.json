{"sha": "2177378e34c5ad431b245e3bd7cd6cd38ab9053a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNzczNzhlMzRjNWFkNDMxYjI0NWUzYmQ3Y2Q2Y2QzOGFiOTA1M2E=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-13T07:09:57Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-13T07:32:59Z"}, "message": "Improve core::task::TaskObj", "tree": {"sha": "1424ea1552ce012efc2303394ca50da4e000022d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1424ea1552ce012efc2303394ca50da4e000022d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2177378e34c5ad431b245e3bd7cd6cd38ab9053a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2177378e34c5ad431b245e3bd7cd6cd38ab9053a", "html_url": "https://github.com/rust-lang/rust/commit/2177378e34c5ad431b245e3bd7cd6cd38ab9053a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2177378e34c5ad431b245e3bd7cd6cd38ab9053a/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8398ab82e5d6623f49f054af848f1553f429d307", "url": "https://api.github.com/repos/rust-lang/rust/commits/8398ab82e5d6623f49f054af848f1553f429d307", "html_url": "https://github.com/rust-lang/rust/commit/8398ab82e5d6623f49f054af848f1553f429d307"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "ea60c7775af59f6881a77a6c59824acfc2db6f5f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2177378e34c5ad431b245e3bd7cd6cd38ab9053a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2177378e34c5ad431b245e3bd7cd6cd38ab9053a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2177378e34c5ad431b245e3bd7cd6cd38ab9053a", "patch": "@@ -66,7 +66,7 @@ use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::task::{Context, Poll, UnsafePoll, TaskObj};\n+use core::task::{Context, Poll, UnsafeTask, TaskObj};\n use core::convert::From;\n \n use raw_vec::RawVec;\n@@ -933,7 +933,7 @@ impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-unsafe impl<F: Future<Output = ()> + Send + 'static> UnsafePoll for PinBox<F> {\n+unsafe impl<F: Future<Output = ()> + Send + 'static> UnsafeTask for PinBox<F> {\n     fn into_raw(self) -> *mut () {\n         PinBox::into_raw(self) as *mut ()\n     }\n@@ -952,13 +952,13 @@ unsafe impl<F: Future<Output = ()> + Send + 'static> UnsafePoll for PinBox<F> {\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n impl<F: Future<Output = ()> + Send + 'static> From<PinBox<F>> for TaskObj {\n     fn from(boxed: PinBox<F>) -> Self {\n-        TaskObj::from_poll_task(boxed)\n+        TaskObj::new(boxed)\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n impl<F: Future<Output = ()> + Send + 'static> From<Box<F>> for TaskObj {\n     fn from(boxed: Box<F>) -> Self {\n-        TaskObj::from_poll_task(PinBox::from(boxed))\n+        TaskObj::new(PinBox::from(boxed))\n     }\n }"}, {"sha": "1a6018ffb65adcdb1d20ca5415b771e30a0cef99", "filename": "src/libcore/task.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2177378e34c5ad431b245e3bd7cd6cd38ab9053a/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2177378e34c5ad431b245e3bd7cd6cd38ab9053a/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=2177378e34c5ad431b245e3bd7cd6cd38ab9053a", "patch": "@@ -16,6 +16,8 @@\n \n use fmt;\n use ptr::NonNull;\n+use future::Future;\n+use mem::PinMut;\n \n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n@@ -455,8 +457,8 @@ pub trait Executor {\n /// `Box<Future<Output = ()> + Send>`.\n pub struct TaskObj {\n     ptr: *mut (),\n-    poll: unsafe fn(*mut (), &mut Context) -> Poll<()>,\n-    drop: unsafe fn(*mut ()),\n+    poll_fn: unsafe fn(*mut (), &mut Context) -> Poll<()>,\n+    drop_fn: unsafe fn(*mut ()),\n }\n \n impl fmt::Debug for TaskObj {\n@@ -467,7 +469,6 @@ impl fmt::Debug for TaskObj {\n }\n \n unsafe impl Send for TaskObj {}\n-unsafe impl Sync for TaskObj {}\n \n /// A custom implementation of a task trait object for `TaskObj`, providing\n /// a hand-rolled vtable.\n@@ -478,7 +479,7 @@ unsafe impl Sync for TaskObj {}\n /// The implementor must guarantee that it is safe to call `poll` repeatedly (in\n /// a non-concurrent fashion) with the result of `into_raw` until `drop` is\n /// called.\n-pub unsafe trait UnsafePoll: Send + 'static {\n+pub unsafe trait UnsafeTask: Send + 'static {\n     /// Convert a owned instance into a (conceptually owned) void pointer.\n     fn into_raw(self) -> *mut ();\n \n@@ -504,30 +505,30 @@ pub unsafe trait UnsafePoll: Send + 'static {\n impl TaskObj {\n     /// Create a `TaskObj` from a custom trait object representation.\n     #[inline]\n-    pub fn from_poll_task<T: UnsafePoll>(t: T) -> TaskObj {\n+    pub fn new<T: UnsafeTask>(t: T) -> TaskObj {\n         TaskObj {\n             ptr: t.into_raw(),\n-            poll: T::poll,\n-            drop: T::drop,\n+            poll_fn: T::poll,\n+            drop_fn: T::drop,\n         }\n     }\n+}\n+\n+impl Future for TaskObj {\n+    type Output = ();\n \n-    /// Poll the task.\n-    ///\n-    /// The semantics here are identical to that for futures, but unlike\n-    /// futures only an `&mut self` reference is needed here.\n     #[inline]\n-    pub fn poll_task(&mut self, cx: &mut Context) -> Poll<()> {\n+    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<()> {\n         unsafe {\n-            (self.poll)(self.ptr, cx)\n+            (self.poll_fn)(self.ptr, cx)\n         }\n     }\n }\n \n impl Drop for TaskObj {\n     fn drop(&mut self) {\n         unsafe {\n-            (self.drop)(self.ptr)\n+            (self.drop_fn)(self.ptr)\n         }\n     }\n }"}]}