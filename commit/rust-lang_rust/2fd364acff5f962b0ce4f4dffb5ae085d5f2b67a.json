{"sha": "2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "node_id": "C_kwDOAAsO6NoAKDJmZDM2NGFjZmY1Zjk2MmIwY2U0ZjRkZmZiNWFlMDg1ZDVmMmI2N2E", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-29T02:36:00Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-02T02:49:19Z"}, "message": "Remove `token::Lit` from `ast::MetaItemLit`.\n\n`token::Lit` contains a `kind` field that indicates what kind of literal\nit is. `ast::MetaItemLit` currently wraps a `token::Lit` but also has\nits own `kind` field. This means that `ast::MetaItemLit` encodes the\nliteral kind in two different ways.\n\nThis commit changes `ast::MetaItemLit` so it no longer wraps\n`token::Lit`. It now contains the `symbol` and `suffix` fields from\n`token::Lit`, but not the `kind` field, eliminating the redundancy.", "tree": {"sha": "041c2e45d4449c44f874c737a3dcdbcaa8895c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/041c2e45d4449c44f874c737a3dcdbcaa8895c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "html_url": "https://github.com/rust-lang/rust/commit/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f35c42d474f893c56b6e0f7df3f8bb965f2650", "html_url": "https://github.com/rust-lang/rust/commit/a7f35c42d474f893c56b6e0f7df3f8bb965f2650"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "c1795be229098bb55d1b66b3720bf3303c70b91c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -1733,8 +1733,10 @@ pub enum StrStyle {\n /// A literal in a meta item.\n #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct MetaItemLit {\n-    /// The original literal token as written in source code.\n-    pub token_lit: token::Lit,\n+    /// The original literal as written in the source code.\n+    pub symbol: Symbol,\n+    /// The original suffix as written in the source code.\n+    pub suffix: Option<Symbol>,\n     /// The \"semantic\" representation of the literal lowered from the original tokens.\n     /// Strings are unescaped, hexadecimal forms are eliminated, etc.\n     pub kind: LitKind,\n@@ -3103,7 +3105,7 @@ mod size_asserts {\n     static_assert_size!(ItemKind, 112);\n     static_assert_size!(LitKind, 24);\n     static_assert_size!(Local, 72);\n-    static_assert_size!(MetaItemLit, 48);\n+    static_assert_size!(MetaItemLit, 40);\n     static_assert_size!(Param, 40);\n     static_assert_size!(Pat, 88);\n     static_assert_size!(Path, 24);"}, {"sha": "2ec126715e79e2d7beab3451408fd770f398bd1e", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -328,7 +328,9 @@ pub fn mk_name_value_item_str(ident: Ident, str: Symbol, str_span: Span) -> Meta\n }\n \n pub fn mk_name_value_item(ident: Ident, kind: LitKind, lit_span: Span) -> MetaItem {\n-    let lit = MetaItemLit { token_lit: kind.synthesize_token_lit(), kind, span: lit_span };\n+    let token_lit = kind.synthesize_token_lit();\n+    let lit =\n+        MetaItemLit { symbol: token_lit.symbol, suffix: token_lit.suffix, kind, span: lit_span };\n     let span = ident.span.to(lit_span);\n     MetaItem { path: Path::from_ident(ident), kind: MetaItemKind::NameValue(lit), span }\n }"}, {"sha": "a0a925d4700bd186bbd39819bb51cfcdb7dda207", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -202,9 +202,32 @@ impl LitKind {\n }\n \n impl MetaItemLit {\n-    /// Converts token literal into a meta item literal.\n+    /// Converts a token literal into a meta item literal.\n     pub fn from_token_lit(token_lit: token::Lit, span: Span) -> Result<MetaItemLit, LitError> {\n-        Ok(MetaItemLit { token_lit, kind: LitKind::from_token_lit(token_lit)?, span })\n+        Ok(MetaItemLit {\n+            symbol: token_lit.symbol,\n+            suffix: token_lit.suffix,\n+            kind: LitKind::from_token_lit(token_lit)?,\n+            span,\n+        })\n+    }\n+\n+    /// Cheaply converts a meta item literal into a token literal.\n+    pub fn as_token_lit(&self) -> token::Lit {\n+        let kind = match self.kind {\n+            LitKind::Bool(_) => token::Bool,\n+            LitKind::Str(_, ast::StrStyle::Cooked) => token::Str,\n+            LitKind::Str(_, ast::StrStyle::Raw(n)) => token::StrRaw(n),\n+            LitKind::ByteStr(_, ast::StrStyle::Cooked) => token::ByteStr,\n+            LitKind::ByteStr(_, ast::StrStyle::Raw(n)) => token::ByteStrRaw(n),\n+            LitKind::Byte(_) => token::Byte,\n+            LitKind::Char(_) => token::Char,\n+            LitKind::Int(..) => token::Integer,\n+            LitKind::Float(..) => token::Float,\n+            LitKind::Err => token::Err,\n+        };\n+\n+        token::Lit::new(kind, self.symbol, self.suffix)\n     }\n \n     /// Converts an arbitrary token into meta item literal."}, {"sha": "8e4bfb71336067777a234d9d6267dc7b2e175ca5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -954,7 +954,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lit\n                 } else {\n                     MetaItemLit {\n-                        token_lit: token::Lit::new(token::LitKind::Err, kw::Empty, None),\n+                        symbol: kw::Empty,\n+                        suffix: None,\n                         kind: LitKind::Err,\n                         span: DUMMY_SP,\n                     }"}, {"sha": "d555cf48730995cb2001f70f0c7c593b2be7a9af", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -376,7 +376,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn print_meta_item_lit(&mut self, lit: &ast::MetaItemLit) {\n-        self.print_token_literal(lit.token_lit, lit.span)\n+        self.print_token_literal(lit.as_token_lit(), lit.span)\n     }\n \n     fn print_token_literal(&mut self, token_lit: token::Lit, span: Span) {"}, {"sha": "2a8dc02849ea71e6a51701e7905a812966395b2c", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -1,7 +1,7 @@\n use crate::cfg_eval::cfg_eval;\n \n use rustc_ast as ast;\n-use rustc_ast::{token, GenericParamKind, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n+use rustc_ast::{GenericParamKind, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, Indeterminate, MultiItemModifier};\n use rustc_feature::AttributeTemplate;\n@@ -130,9 +130,11 @@ fn report_bad_target(sess: &Session, item: &Annotatable, span: Span) -> bool {\n }\n \n fn report_unexpected_meta_item_lit(sess: &Session, lit: &ast::MetaItemLit) {\n-    let help_msg = match lit.token_lit.kind {\n-        token::Str if rustc_lexer::is_ident(lit.token_lit.symbol.as_str()) => {\n-            format!(\"try using `#[derive({})]`\", lit.token_lit.symbol)\n+    let help_msg = match lit.kind {\n+        ast::LitKind::Str(_, ast::StrStyle::Cooked)\n+            if rustc_lexer::is_ident(lit.symbol.as_str()) =>\n+        {\n+            format!(\"try using `#[derive({})]`\", lit.symbol)\n         }\n         _ => \"for example, write `#[derive(Debug)]` for `Debug`\".to_string(),\n     };"}, {"sha": "1c773bea000b22f8e0a1ecdf89ef59e5088f5523", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -1551,7 +1551,7 @@ impl<'a> Parser<'a> {\n                 })\n             });\n             consume_colon = false;\n-            Ok(self.mk_expr(lo, ExprKind::Lit(lit.token_lit)))\n+            Ok(self.mk_expr(lo, ExprKind::Lit(lit.as_token_lit())))\n         } else if !ate_colon\n             && (self.check_noexpect(&TokenKind::Comma) || self.check_noexpect(&TokenKind::Gt))\n         {\n@@ -1654,7 +1654,8 @@ impl<'a> Parser<'a> {\n         }\n         let name = lifetime.without_first_quote().name;\n         ast::MetaItemLit {\n-            token_lit: token::Lit::new(token::LitKind::Char, name, None),\n+            symbol: name,\n+            suffix: None,\n             kind: ast::LitKind::Char(name.as_str().chars().next().unwrap_or('_')),\n             span: lifetime.span,\n         }\n@@ -1773,8 +1774,8 @@ impl<'a> Parser<'a> {\n             Some(lit) => match lit.kind {\n                 ast::LitKind::Str(symbol_unescaped, style) => Ok(ast::StrLit {\n                     style,\n-                    symbol: lit.token_lit.symbol,\n-                    suffix: lit.token_lit.suffix,\n+                    symbol: lit.symbol,\n+                    suffix: lit.suffix,\n                     span: lit.span,\n                     symbol_unescaped,\n                 }),\n@@ -1817,7 +1818,7 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_token_lit(&mut self) -> PResult<'a, (token::Lit, Span)> {\n         self.parse_opt_token_lit()\n             .ok_or(())\n-            .or_else(|()| self.handle_missing_lit().map(|lit| (lit.token_lit, lit.span)))\n+            .or_else(|()| self.handle_missing_lit().map(|lit| (lit.as_token_lit(), lit.span)))\n     }\n \n     pub(super) fn parse_meta_item_lit(&mut self) -> PResult<'a, MetaItemLit> {"}, {"sha": "b5147158f708e625d3e1baf1712d121c4fca2e72", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -420,7 +420,7 @@ impl<'a> Parser<'a> {\n                 err.span_label(self_.token.span, format!(\"expected {}\", expected));\n                 err\n             });\n-            PatKind::Lit(self.mk_expr(lo, ExprKind::Lit(lit.token_lit)))\n+            PatKind::Lit(self.mk_expr(lo, ExprKind::Lit(lit.as_token_lit())))\n         } else {\n             // Try to parse everything else as literal with optional minus\n             match self.parse_literal_maybe_minus() {"}, {"sha": "c503eeeb9b3b950e387d7b8b0e6a82dcd40a226b", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=2fd364acff5f962b0ce4f4dffb5ae085d5f2b67a", "patch": "@@ -260,7 +260,9 @@ impl Rewrite for ast::NestedMetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self {\n             ast::NestedMetaItem::MetaItem(ref meta_item) => meta_item.rewrite(context, shape),\n-            ast::NestedMetaItem::Lit(ref l) => rewrite_literal(context, l.token_lit, l.span, shape),\n+            ast::NestedMetaItem::Lit(ref l) => {\n+                rewrite_literal(context, l.as_token_lit(), l.span, shape)\n+            }\n         }\n     }\n }\n@@ -308,18 +310,18 @@ impl Rewrite for ast::MetaItem {\n                     }),\n                 )?\n             }\n-            ast::MetaItemKind::NameValue(ref literal) => {\n+            ast::MetaItemKind::NameValue(ref lit) => {\n                 let path = rewrite_path(context, PathContext::Type, &None, &self.path, shape)?;\n                 // 3 = ` = `\n                 let lit_shape = shape.shrink_left(path.len() + 3)?;\n-                // `rewrite_literal` returns `None` when `literal` exceeds max\n+                // `rewrite_literal` returns `None` when `lit` exceeds max\n                 // width. Since a literal is basically unformattable unless it\n                 // is a string literal (and only if `format_strings` is set),\n                 // we might be better off ignoring the fact that the attribute\n                 // is longer than the max width and continue on formatting.\n                 // See #2479 for example.\n-                let value = rewrite_literal(context, literal.token_lit, literal.span, lit_shape)\n-                    .unwrap_or_else(|| context.snippet(literal.span).to_owned());\n+                let value = rewrite_literal(context, lit.as_token_lit(), lit.span, lit_shape)\n+                    .unwrap_or_else(|| context.snippet(lit.span).to_owned());\n                 format!(\"{} = {}\", path, value)\n             }\n         })"}]}