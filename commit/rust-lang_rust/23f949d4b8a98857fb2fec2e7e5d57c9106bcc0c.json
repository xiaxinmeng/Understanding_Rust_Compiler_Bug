{"sha": "23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZjk0OWQ0YjhhOTg4NTdmYjJmZWMyZTdlNWQ1N2M5MTA2YmNjMGM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-02T19:27:53Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-02T19:27:53Z"}, "message": "Merge pull request #610 from inrustwetrust/drop_ref_lint\n\nAdd lint to warn for calls to `std::mem::drop` with a reference argument", "tree": {"sha": "6649c0e990c2dbc0dc4245f3c49df6ecb1e8cf0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6649c0e990c2dbc0dc4245f3c49df6ecb1e8cf0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "html_url": "https://github.com/rust-lang/rust/commit/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0d3659c29589531f838778e858b4602b127c090", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d3659c29589531f838778e858b4602b127c090", "html_url": "https://github.com/rust-lang/rust/commit/b0d3659c29589531f838778e858b4602b127c090"}, {"sha": "bd86922c4f33e2528bb87a7f693e57935970f1cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd86922c4f33e2528bb87a7f693e57935970f1cf", "html_url": "https://github.com/rust-lang/rust/commit/bd86922c4f33e2528bb87a7f693e57935970f1cf"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "d24dc3de1bda5b9be5b598e08896fcd6930c67da", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 106 lints included in this crate:\n+There are 107 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -28,6 +28,7 @@ name\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                 | warn    | finds functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                         | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_not_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_not_eq)                       | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n+[drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                           | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not not call the `Drop::drop` method on the underlying value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument) | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                       | warn    | empty `loop {}` detected\n [enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#enum_variant_names)                       | warn    | finds enums where all variants share a prefix/postfix"}, {"sha": "fecb69f5c140d737d2009206f8ab44bcd64c1164", "filename": "src/drop_ref.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/src%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/src%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdrop_ref.rs?ref=23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "patch": "@@ -0,0 +1,61 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use rustc::middle::ty;\n+use syntax::codemap::Span;\n+\n+use utils::DROP_PATH;\n+use utils::{match_def_path, span_note_and_lint};\n+\n+/// **What it does:** This lint checks for calls to `std::mem::drop` with a reference instead of an owned value.\n+///\n+/// **Why is this bad?** Calling `drop` on a reference will only drop the reference itself, which is a no-op. It will not call the `drop` method (from the `Drop` trait implementation) on the underlying referenced value, which is likely what was intended.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// let mut lock_guard = mutex.lock();\n+/// std::mem::drop(&lock_guard) //Should have been drop(lock_guard), mutex still locked\n+/// operation_that_requires_mutex_to_be_unlocked();\n+/// ```\n+declare_lint!(pub DROP_REF, Warn,\n+    \"call to `std::mem::drop` with a reference instead of an owned value, \\\n+    which will not not call the `Drop::drop` method on the underlying value\");\n+\n+#[allow(missing_copy_implementations)]\n+pub struct DropRefPass;\n+\n+impl LintPass for DropRefPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DROP_REF)\n+    }\n+}\n+\n+impl LateLintPass for DropRefPass {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if let ExprCall(ref path, ref args) = expr.node {\n+            if let ExprPath(None, _) = path.node {\n+                let def_id = cx.tcx.def_map.borrow()[&path.id].def_id();\n+                if match_def_path(cx, def_id, &DROP_PATH) {\n+                    if args.len() != 1 {\n+                        return;\n+                    }\n+                    check_drop_arg(cx, expr.span, &*args[0]);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_drop_arg(cx: &LateContext, call_span: Span, arg: &Expr) {\n+    let arg_ty = cx.tcx.expr_ty(arg);\n+    if let ty::TyRef(..) = arg_ty.sty {\n+        span_note_and_lint(cx,\n+                           DROP_REF,\n+                           call_span,\n+                           \"call to `std::mem::drop` with a reference argument. \\\n+                           Dropping a reference does nothing\",\n+                           arg.span,\n+                           &format!(\"argument has type {}\", arg_ty.sty));\n+    }\n+}"}, {"sha": "e2596dd58ca9a9e95872d362adf3482b49968e58", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "patch": "@@ -81,6 +81,7 @@ pub mod panic;\n pub mod derive;\n pub mod print;\n pub mod vec;\n+pub mod drop_ref;\n \n mod reexport {\n     pub use syntax::ast::{Name, NodeId};\n@@ -148,6 +149,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n     reg.register_late_lint_pass(box print::PrintLint);\n     reg.register_late_lint_pass(box vec::UselessVec);\n+    reg.register_late_lint_pass(box drop_ref::DropRefPass);\n \n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n@@ -184,6 +186,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_NOT_EQ,\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n+        drop_ref::DROP_REF,\n         entry::MAP_ENTRY,\n         enum_variants::ENUM_VARIANT_NAMES,\n         eq_op::EQ_OP,"}, {"sha": "bc6fcd44891477bf2598e0188614f2d906f519af", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "patch": "@@ -27,6 +27,7 @@ pub const CLONE_PATH: [&'static str; 3] = [\"clone\", \"Clone\", \"clone\"];\n pub const CLONE_TRAIT_PATH: [&'static str; 2] = [\"clone\", \"Clone\"];\n pub const COW_PATH: [&'static str; 3] = [\"collections\", \"borrow\", \"Cow\"];\n pub const DEFAULT_TRAIT_PATH: [&'static str; 3] = [\"core\", \"default\", \"Default\"];\n+pub const DROP_PATH: [&'static str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const HASHMAP_ENTRY_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASH_PATH: [&'static str; 2] = [\"hash\", \"Hash\"];"}, {"sha": "3e4c0a9d8ec111e4db0a3f19f033a86f63cdad33", "filename": "tests/compile-fail/drop_ref.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/tests%2Fcompile-fail%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c/tests%2Fcompile-fail%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdrop_ref.rs?ref=23f949d4b8a98857fb2fec2e7e5d57c9106bcc0c", "patch": "@@ -0,0 +1,43 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(drop_ref)]\n+#![allow(toplevel_ref_arg)]\n+\n+use std::mem::drop;\n+\n+struct DroppableStruct;\n+impl Drop for DroppableStruct { fn drop(&mut self) {} }\n+\n+fn main() {\n+    drop(&DroppableStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+\n+    let mut owned = DroppableStruct;\n+    drop(&owned); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(&&owned); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(&mut owned); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(owned); //OK\n+\n+    let reference1 = &DroppableStruct;\n+    drop(reference1); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(&*reference1); //~ERROR call to `std::mem::drop` with a reference argument\n+\n+    let reference2 = &mut DroppableStruct;\n+    drop(reference2); //~ERROR call to `std::mem::drop` with a reference argument\n+\n+    let ref reference3 = DroppableStruct;\n+    drop(reference3); //~ERROR call to `std::mem::drop` with a reference argument\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn<T>(val: T) {\n+    drop(&val); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(val); //OK\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn drop<T>(_val: T) {}\n+    drop(&DroppableStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::drop(&DroppableStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+}"}]}