{"sha": "cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMmYzNGRjNmQ3ZTgzZDhiY2ZlZjc5ZTAzODhkNDlmMGMyNGFjYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-22T17:34:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-22T17:34:06Z"}, "message": "Auto merge of #58953 - jethrogb:jb/unify-ffi, r=alexcrichton\n\nUnify OsString/OsStr for byte-based implementations\n\nAs requested in #57860\n\nr? @joshtriplett", "tree": {"sha": "68f4c730b3f4486210f1114adde53435533d2a54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f4c730b3f4486210f1114adde53435533d2a54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "html_url": "https://github.com/rust-lang/rust/commit/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed196221d889ae8a87be677402e4319237ef67f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed196221d889ae8a87be677402e4319237ef67f4", "html_url": "https://github.com/rust-lang/rust/commit/ed196221d889ae8a87be677402e4319237ef67f4"}, {"sha": "2079df1c8740dd76d5c28bb8f6193826f6afdec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2079df1c8740dd76d5c28bb8f6193826f6afdec4", "html_url": "https://github.com/rust-lang/rust/commit/2079df1c8740dd76d5c28bb8f6193826f6afdec4"}], "stats": {"total": 995, "additions": 186, "deletions": 809}, "files": [{"sha": "3f8e67a7af85ee7408029d70d9ca36a1c3c8bb58", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -14,8 +14,6 @@ pub mod io;\n pub mod memchr;\n pub mod mutex;\n pub mod os;\n-#[path = \"../unix/os_str.rs\"]\n-pub mod os_str;\n pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n@@ -24,6 +22,8 @@ pub mod thread;\n pub mod thread_local;\n pub mod time;\n \n+pub use crate::sys_common::os_str_bytes as os_str;\n+\n mod abi;\n \n mod shims;"}, {"sha": "974d7b82c125fd1293b76c468449e01a07c22abe", "filename": "src/libstd/sys/redox/ext/ffi.rs", "status": "modified", "additions": 33, "deletions": 50, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,55 +1,38 @@\n //! Redox-specific extension to the primitives in the `std::ffi` module.\n+//!\n+//! # Examples\n+//!\n+//! ```\n+//! use std::ffi::OsString;\n+//! use std::os::redox::ffi::OsStringExt;\n+//!\n+//! let bytes = b\"foo\".to_vec();\n+//!\n+//! // OsStringExt::from_vec\n+//! let os_string = OsString::from_vec(bytes);\n+//! assert_eq!(os_string.to_str(), Some(\"foo\"));\n+//!\n+//! // OsStringExt::into_vec\n+//! let bytes = os_string.into_vec();\n+//! assert_eq!(bytes, b\"foo\");\n+//! ```\n+//!\n+//! ```\n+//! use std::ffi::OsStr;\n+//! use std::os::redox::ffi::OsStrExt;\n+//!\n+//! let bytes = b\"foo\";\n+//!\n+//! // OsStrExt::from_bytes\n+//! let os_str = OsStr::from_bytes(bytes);\n+//! assert_eq!(os_str.to_str(), Some(\"foo\"));\n+//!\n+//! // OsStrExt::as_bytes\n+//! let bytes = os_str.as_bytes();\n+//! assert_eq!(bytes, b\"foo\");\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::ffi::{OsStr, OsString};\n-use crate::mem;\n-use crate::sys::os_str::Buf;\n-use crate::sys_common::{FromInner, IntoInner, AsInner};\n-\n-/// Redox-specific extensions to [`OsString`].\n-///\n-/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStringExt {\n-    /// Creates an `OsString` from a byte vector.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_vec(vec: Vec<u8>) -> Self;\n-\n-    /// Yields the underlying byte vector of this `OsString`.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn into_vec(self) -> Vec<u8>;\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl OsStringExt for OsString {\n-    fn from_vec(vec: Vec<u8>) -> OsString {\n-        FromInner::from_inner(Buf { inner: vec })\n-    }\n-    fn into_vec(self) -> Vec<u8> {\n-        self.into_inner().inner\n-    }\n-}\n-\n-/// Redox-specific extensions to [`OsStr`].\n-///\n-/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStrExt {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_bytes(slice: &[u8]) -> &Self;\n-\n-    /// Gets the underlying byte view of the `OsStr` slice.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn as_bytes(&self) -> &[u8];\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl OsStrExt for OsStr {\n-    fn from_bytes(slice: &[u8]) -> &OsStr {\n-        unsafe { mem::transmute(slice) }\n-    }\n-    fn as_bytes(&self) -> &[u8] {\n-        &self.as_inner().inner\n-    }\n-}\n+pub use crate::sys_common::os_str_bytes::*;"}, {"sha": "0e8ed8e303d43a046d8ca236dce365a44c0111cf", "filename": "src/libstd/sys/redox/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -22,7 +22,6 @@ pub mod memchr;\n pub mod mutex;\n pub mod net;\n pub mod os;\n-pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n@@ -35,6 +34,8 @@ pub mod thread;\n pub mod thread_local;\n pub mod time;\n \n+pub use crate::sys_common::os_str_bytes as os_str;\n+\n #[cfg(not(test))]\n pub fn init() {}\n "}, {"sha": "63fc5ff2866a81c1b7f3e0de1d0c4d259199ef25", "filename": "src/libstd/sys/sgx/ext/ffi.rs", "status": "modified", "additions": 33, "deletions": 104, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,109 +1,38 @@\n //! SGX-specific extension to the primitives in the `std::ffi` module\n+//!\n+//! # Examples\n+//!\n+//! ```\n+//! use std::ffi::OsString;\n+//! use std::os::fortanix_sgx::ffi::OsStringExt;\n+//!\n+//! let bytes = b\"foo\".to_vec();\n+//!\n+//! // OsStringExt::from_vec\n+//! let os_string = OsString::from_vec(bytes);\n+//! assert_eq!(os_string.to_str(), Some(\"foo\"));\n+//!\n+//! // OsStringExt::into_vec\n+//! let bytes = os_string.into_vec();\n+//! assert_eq!(bytes, b\"foo\");\n+//! ```\n+//!\n+//! ```\n+//! use std::ffi::OsStr;\n+//! use std::os::fortanix_sgx::ffi::OsStrExt;\n+//!\n+//! let bytes = b\"foo\";\n+//!\n+//! // OsStrExt::from_bytes\n+//! let os_str = OsStr::from_bytes(bytes);\n+//! assert_eq!(os_str.to_str(), Some(\"foo\"));\n+//!\n+//! // OsStrExt::as_bytes\n+//! let bytes = os_str.as_bytes();\n+//! assert_eq!(bytes, b\"foo\");\n+//! ```\n \n #![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n \n-use crate::ffi::{OsStr, OsString};\n-use crate::mem;\n-use crate::sys::os_str::Buf;\n-use crate::sys_common::{FromInner, IntoInner, AsInner};\n-\n-/// SGX-specific extensions to [`OsString`].\n-///\n-/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n-#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-pub trait OsStringExt {\n-    /// Creates an [`OsString`] from a byte vector.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ffi::OsString;\n-    /// use std::os::unix::ffi::OsStringExt;\n-    ///\n-    /// let bytes = b\"foo\".to_vec();\n-    /// let os_string = OsString::from_vec(bytes);\n-    /// assert_eq!(os_string.to_str(), Some(\"foo\"));\n-    /// ```\n-    ///\n-    /// [`OsString`]: ../../../ffi/struct.OsString.html\n-    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-    fn from_vec(vec: Vec<u8>) -> Self;\n-\n-    /// Yields the underlying byte vector of this [`OsString`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ffi::OsString;\n-    /// use std::os::unix::ffi::OsStringExt;\n-    ///\n-    /// let mut os_string = OsString::new();\n-    /// os_string.push(\"foo\");\n-    /// let bytes = os_string.into_vec();\n-    /// assert_eq!(bytes, b\"foo\");\n-    /// ```\n-    ///\n-    /// [`OsString`]: ../../../ffi/struct.OsString.html\n-    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-    fn into_vec(self) -> Vec<u8>;\n-}\n-\n-#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-impl OsStringExt for OsString {\n-    fn from_vec(vec: Vec<u8>) -> OsString {\n-        FromInner::from_inner(Buf { inner: vec })\n-    }\n-    fn into_vec(self) -> Vec<u8> {\n-        self.into_inner().inner\n-    }\n-}\n-\n-/// SGX-specific extensions to [`OsStr`].\n-///\n-/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n-#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-pub trait OsStrExt {\n-    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-    /// Creates an [`OsStr`] from a byte slice.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ffi::OsStr;\n-    /// use std::os::unix::ffi::OsStrExt;\n-    ///\n-    /// let bytes = b\"foo\";\n-    /// let os_str = OsStr::from_bytes(bytes);\n-    /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n-    /// ```\n-    ///\n-    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n-    fn from_bytes(slice: &[u8]) -> &Self;\n-\n-    /// Gets the underlying byte view of the [`OsStr`] slice.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ffi::OsStr;\n-    /// use std::os::unix::ffi::OsStrExt;\n-    ///\n-    /// let mut os_str = OsStr::new(\"foo\");\n-    /// let bytes = os_str.as_bytes();\n-    /// assert_eq!(bytes, b\"foo\");\n-    /// ```\n-    ///\n-    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n-    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-    fn as_bytes(&self) -> &[u8];\n-}\n-\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-impl OsStrExt for OsStr {\n-    fn from_bytes(slice: &[u8]) -> &OsStr {\n-        unsafe { mem::transmute(slice) }\n-    }\n-    fn as_bytes(&self) -> &[u8] {\n-        &self.as_inner().inner\n-    }\n-}\n+pub use crate::sys_common::os_str_bytes::*;"}, {"sha": "dc51a932c616c40fbe87beb5366e2b5464ae3f14", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -25,7 +25,6 @@ pub mod memchr;\n pub mod mutex;\n pub mod net;\n pub mod os;\n-pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n@@ -36,6 +35,8 @@ pub mod thread_local;\n pub mod time;\n pub mod stdio;\n \n+pub use crate::sys_common::os_str_bytes as os_str;\n+\n #[cfg(not(test))]\n pub fn init() {\n }"}, {"sha": "79b43458d00f3cad06079838d2c0ab3b3c3ef06a", "filename": "src/libstd/sys/sgx/os_str.rs", "status": "removed", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/ed196221d889ae8a87be677402e4319237ef67f4/src%2Flibstd%2Fsys%2Fsgx%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed196221d889ae8a87be677402e4319237ef67f4/src%2Flibstd%2Fsys%2Fsgx%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fos_str.rs?ref=ed196221d889ae8a87be677402e4319237ef67f4", "patch": "@@ -1,180 +0,0 @@\n-/// The underlying OsString/OsStr implementation on Unix systems: just\n-/// a `Vec<u8>`/`[u8]`.\n-\n-use crate::borrow::Cow;\n-use crate::fmt;\n-use crate::str;\n-use crate::mem;\n-use crate::rc::Rc;\n-use crate::sync::Arc;\n-use crate::sys_common::{AsInner, IntoInner};\n-use crate::sys_common::bytestring::debug_fmt_bytestring;\n-\n-use core::str::lossy::Utf8Lossy;\n-\n-#[derive(Clone, Hash)]\n-pub struct Buf {\n-    pub inner: Vec<u8>\n-}\n-\n-pub struct Slice {\n-    pub inner: [u8]\n-}\n-\n-impl fmt::Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        debug_fmt_bytestring(&self.inner, formatter)\n-    }\n-}\n-\n-impl fmt::Display for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n-    }\n-}\n-\n-impl fmt::Debug for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(self.as_slice(), formatter)\n-    }\n-}\n-\n-impl fmt::Display for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self.as_slice(), formatter)\n-    }\n-}\n-\n-impl IntoInner<Vec<u8>> for Buf {\n-    fn into_inner(self) -> Vec<u8> {\n-        self.inner\n-    }\n-}\n-\n-impl AsInner<[u8]> for Buf {\n-    fn as_inner(&self) -> &[u8] {\n-        &self.inner\n-    }\n-}\n-\n-\n-impl Buf {\n-    pub fn from_string(s: String) -> Buf {\n-        Buf { inner: s.into_bytes() }\n-    }\n-\n-    #[inline]\n-    pub fn with_capacity(capacity: usize) -> Buf {\n-        Buf {\n-            inner: Vec::with_capacity(capacity)\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn clear(&mut self) {\n-        self.inner.clear()\n-    }\n-\n-    #[inline]\n-    pub fn capacity(&self) -> usize {\n-        self.inner.capacity()\n-    }\n-\n-    #[inline]\n-    pub fn reserve(&mut self, additional: usize) {\n-        self.inner.reserve(additional)\n-    }\n-\n-    #[inline]\n-    pub fn reserve_exact(&mut self, additional: usize) {\n-        self.inner.reserve_exact(additional)\n-    }\n-\n-    #[inline]\n-    pub fn shrink_to_fit(&mut self) {\n-        self.inner.shrink_to_fit()\n-    }\n-\n-    #[inline]\n-    pub fn shrink_to(&mut self, min_capacity: usize) {\n-        self.inner.shrink_to(min_capacity)\n-    }\n-\n-    pub fn as_slice(&self) -> &Slice {\n-        unsafe { mem::transmute(&*self.inner) }\n-    }\n-\n-    pub fn into_string(self) -> Result<String, Buf> {\n-        String::from_utf8(self.inner).map_err(|p| Buf { inner: p.into_bytes() } )\n-    }\n-\n-    pub fn push_slice(&mut self, s: &Slice) {\n-        self.inner.extend_from_slice(&s.inner)\n-    }\n-\n-    #[inline]\n-    pub fn into_box(self) -> Box<Slice> {\n-        unsafe { mem::transmute(self.inner.into_boxed_slice()) }\n-    }\n-\n-    #[inline]\n-    pub fn from_box(boxed: Box<Slice>) -> Buf {\n-        let inner: Box<[u8]> = unsafe { mem::transmute(boxed) };\n-        Buf { inner: inner.into_vec() }\n-    }\n-\n-    #[inline]\n-    pub fn into_arc(&self) -> Arc<Slice> {\n-        self.as_slice().into_arc()\n-    }\n-\n-    #[inline]\n-    pub fn into_rc(&self) -> Rc<Slice> {\n-        self.as_slice().into_rc()\n-    }\n-}\n-\n-impl Slice {\n-    fn from_u8_slice(s: &[u8]) -> &Slice {\n-        unsafe { mem::transmute(s) }\n-    }\n-\n-    pub fn from_str(s: &str) -> &Slice {\n-        Slice::from_u8_slice(s.as_bytes())\n-    }\n-\n-    pub fn to_str(&self) -> Option<&str> {\n-        str::from_utf8(&self.inner).ok()\n-    }\n-\n-    pub fn to_string_lossy(&self) -> Cow<str> {\n-        String::from_utf8_lossy(&self.inner)\n-    }\n-\n-    pub fn to_owned(&self) -> Buf {\n-        Buf { inner: self.inner.to_vec() }\n-    }\n-\n-    #[inline]\n-    pub fn into_box(&self) -> Box<Slice> {\n-        let boxed: Box<[u8]> = self.inner.into();\n-        unsafe { mem::transmute(boxed) }\n-    }\n-\n-    pub fn empty_box() -> Box<Slice> {\n-        let boxed: Box<[u8]> = Default::default();\n-        unsafe { mem::transmute(boxed) }\n-    }\n-\n-    #[inline]\n-    pub fn into_arc(&self) -> Arc<Slice> {\n-        let arc: Arc<[u8]> = Arc::from(&self.inner);\n-        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Slice) }\n-    }\n-\n-    #[inline]\n-    pub fn into_rc(&self) -> Rc<Slice> {\n-        let rc: Rc<[u8]> = Rc::from(&self.inner);\n-        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n-    }\n-}"}, {"sha": "76b34a6b5d84aa64a0a9a429e56218fc59931752", "filename": "src/libstd/sys/unix/ext/ffi.rs", "status": "modified", "additions": 33, "deletions": 104, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,109 +1,38 @@\n //! Unix-specific extension to the primitives in the `std::ffi` module\n+//!\n+//! # Examples\n+//!\n+//! ```\n+//! use std::ffi::OsString;\n+//! use std::os::unix::ffi::OsStringExt;\n+//!\n+//! let bytes = b\"foo\".to_vec();\n+//!\n+//! // OsStringExt::from_vec\n+//! let os_string = OsString::from_vec(bytes);\n+//! assert_eq!(os_string.to_str(), Some(\"foo\"));\n+//!\n+//! // OsStringExt::into_vec\n+//! let bytes = os_string.into_vec();\n+//! assert_eq!(bytes, b\"foo\");\n+//! ```\n+//!\n+//! ```\n+//! use std::ffi::OsStr;\n+//! use std::os::unix::ffi::OsStrExt;\n+//!\n+//! let bytes = b\"foo\";\n+//!\n+//! // OsStrExt::from_bytes\n+//! let os_str = OsStr::from_bytes(bytes);\n+//! assert_eq!(os_str.to_str(), Some(\"foo\"));\n+//!\n+//! // OsStrExt::as_bytes\n+//! let bytes = os_str.as_bytes();\n+//! assert_eq!(bytes, b\"foo\");\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::ffi::{OsStr, OsString};\n-use crate::mem;\n-use crate::sys::os_str::Buf;\n-use crate::sys_common::{FromInner, IntoInner, AsInner};\n-\n-/// Unix-specific extensions to [`OsString`].\n-///\n-/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStringExt {\n-    /// Creates an [`OsString`] from a byte vector.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ffi::OsString;\n-    /// use std::os::unix::ffi::OsStringExt;\n-    ///\n-    /// let bytes = b\"foo\".to_vec();\n-    /// let os_string = OsString::from_vec(bytes);\n-    /// assert_eq!(os_string.to_str(), Some(\"foo\"));\n-    /// ```\n-    ///\n-    /// [`OsString`]: ../../../ffi/struct.OsString.html\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_vec(vec: Vec<u8>) -> Self;\n-\n-    /// Yields the underlying byte vector of this [`OsString`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ffi::OsString;\n-    /// use std::os::unix::ffi::OsStringExt;\n-    ///\n-    /// let mut os_string = OsString::new();\n-    /// os_string.push(\"foo\");\n-    /// let bytes = os_string.into_vec();\n-    /// assert_eq!(bytes, b\"foo\");\n-    /// ```\n-    ///\n-    /// [`OsString`]: ../../../ffi/struct.OsString.html\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn into_vec(self) -> Vec<u8>;\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl OsStringExt for OsString {\n-    fn from_vec(vec: Vec<u8>) -> OsString {\n-        FromInner::from_inner(Buf { inner: vec })\n-    }\n-    fn into_vec(self) -> Vec<u8> {\n-        self.into_inner().inner\n-    }\n-}\n-\n-/// Unix-specific extensions to [`OsStr`].\n-///\n-/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStrExt {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    /// Creates an [`OsStr`] from a byte slice.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ffi::OsStr;\n-    /// use std::os::unix::ffi::OsStrExt;\n-    ///\n-    /// let bytes = b\"foo\";\n-    /// let os_str = OsStr::from_bytes(bytes);\n-    /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n-    /// ```\n-    ///\n-    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n-    fn from_bytes(slice: &[u8]) -> &Self;\n-\n-    /// Gets the underlying byte view of the [`OsStr`] slice.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::ffi::OsStr;\n-    /// use std::os::unix::ffi::OsStrExt;\n-    ///\n-    /// let mut os_str = OsStr::new(\"foo\");\n-    /// let bytes = os_str.as_bytes();\n-    /// assert_eq!(bytes, b\"foo\");\n-    /// ```\n-    ///\n-    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn as_bytes(&self) -> &[u8];\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl OsStrExt for OsStr {\n-    fn from_bytes(slice: &[u8]) -> &OsStr {\n-        unsafe { mem::transmute(slice) }\n-    }\n-    fn as_bytes(&self) -> &[u8] {\n-        &self.as_inner().inner\n-    }\n-}\n+pub use crate::sys_common::os_str_bytes::*;"}, {"sha": "90e26449ae280096dd5699700eb17a728294d177", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -47,7 +47,6 @@ mod l4re;\n #[cfg(target_os = \"l4re\")]\n pub use self::l4re::net;\n pub mod os;\n-pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n@@ -59,6 +58,8 @@ pub mod thread_local;\n pub mod time;\n pub mod stdio;\n \n+pub use crate::sys_common::os_str_bytes as os_str;\n+\n #[cfg(not(test))]\n pub fn init() {\n     // By default, some platforms will send a *signal* when an EPIPE error"}, {"sha": "79b43458d00f3cad06079838d2c0ab3b3c3ef06a", "filename": "src/libstd/sys/unix/os_str.rs", "status": "removed", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/ed196221d889ae8a87be677402e4319237ef67f4/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed196221d889ae8a87be677402e4319237ef67f4/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=ed196221d889ae8a87be677402e4319237ef67f4", "patch": "@@ -1,180 +0,0 @@\n-/// The underlying OsString/OsStr implementation on Unix systems: just\n-/// a `Vec<u8>`/`[u8]`.\n-\n-use crate::borrow::Cow;\n-use crate::fmt;\n-use crate::str;\n-use crate::mem;\n-use crate::rc::Rc;\n-use crate::sync::Arc;\n-use crate::sys_common::{AsInner, IntoInner};\n-use crate::sys_common::bytestring::debug_fmt_bytestring;\n-\n-use core::str::lossy::Utf8Lossy;\n-\n-#[derive(Clone, Hash)]\n-pub struct Buf {\n-    pub inner: Vec<u8>\n-}\n-\n-pub struct Slice {\n-    pub inner: [u8]\n-}\n-\n-impl fmt::Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        debug_fmt_bytestring(&self.inner, formatter)\n-    }\n-}\n-\n-impl fmt::Display for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n-    }\n-}\n-\n-impl fmt::Debug for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(self.as_slice(), formatter)\n-    }\n-}\n-\n-impl fmt::Display for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self.as_slice(), formatter)\n-    }\n-}\n-\n-impl IntoInner<Vec<u8>> for Buf {\n-    fn into_inner(self) -> Vec<u8> {\n-        self.inner\n-    }\n-}\n-\n-impl AsInner<[u8]> for Buf {\n-    fn as_inner(&self) -> &[u8] {\n-        &self.inner\n-    }\n-}\n-\n-\n-impl Buf {\n-    pub fn from_string(s: String) -> Buf {\n-        Buf { inner: s.into_bytes() }\n-    }\n-\n-    #[inline]\n-    pub fn with_capacity(capacity: usize) -> Buf {\n-        Buf {\n-            inner: Vec::with_capacity(capacity)\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn clear(&mut self) {\n-        self.inner.clear()\n-    }\n-\n-    #[inline]\n-    pub fn capacity(&self) -> usize {\n-        self.inner.capacity()\n-    }\n-\n-    #[inline]\n-    pub fn reserve(&mut self, additional: usize) {\n-        self.inner.reserve(additional)\n-    }\n-\n-    #[inline]\n-    pub fn reserve_exact(&mut self, additional: usize) {\n-        self.inner.reserve_exact(additional)\n-    }\n-\n-    #[inline]\n-    pub fn shrink_to_fit(&mut self) {\n-        self.inner.shrink_to_fit()\n-    }\n-\n-    #[inline]\n-    pub fn shrink_to(&mut self, min_capacity: usize) {\n-        self.inner.shrink_to(min_capacity)\n-    }\n-\n-    pub fn as_slice(&self) -> &Slice {\n-        unsafe { mem::transmute(&*self.inner) }\n-    }\n-\n-    pub fn into_string(self) -> Result<String, Buf> {\n-        String::from_utf8(self.inner).map_err(|p| Buf { inner: p.into_bytes() } )\n-    }\n-\n-    pub fn push_slice(&mut self, s: &Slice) {\n-        self.inner.extend_from_slice(&s.inner)\n-    }\n-\n-    #[inline]\n-    pub fn into_box(self) -> Box<Slice> {\n-        unsafe { mem::transmute(self.inner.into_boxed_slice()) }\n-    }\n-\n-    #[inline]\n-    pub fn from_box(boxed: Box<Slice>) -> Buf {\n-        let inner: Box<[u8]> = unsafe { mem::transmute(boxed) };\n-        Buf { inner: inner.into_vec() }\n-    }\n-\n-    #[inline]\n-    pub fn into_arc(&self) -> Arc<Slice> {\n-        self.as_slice().into_arc()\n-    }\n-\n-    #[inline]\n-    pub fn into_rc(&self) -> Rc<Slice> {\n-        self.as_slice().into_rc()\n-    }\n-}\n-\n-impl Slice {\n-    fn from_u8_slice(s: &[u8]) -> &Slice {\n-        unsafe { mem::transmute(s) }\n-    }\n-\n-    pub fn from_str(s: &str) -> &Slice {\n-        Slice::from_u8_slice(s.as_bytes())\n-    }\n-\n-    pub fn to_str(&self) -> Option<&str> {\n-        str::from_utf8(&self.inner).ok()\n-    }\n-\n-    pub fn to_string_lossy(&self) -> Cow<str> {\n-        String::from_utf8_lossy(&self.inner)\n-    }\n-\n-    pub fn to_owned(&self) -> Buf {\n-        Buf { inner: self.inner.to_vec() }\n-    }\n-\n-    #[inline]\n-    pub fn into_box(&self) -> Box<Slice> {\n-        let boxed: Box<[u8]> = self.inner.into();\n-        unsafe { mem::transmute(boxed) }\n-    }\n-\n-    pub fn empty_box() -> Box<Slice> {\n-        let boxed: Box<[u8]> = Default::default();\n-        unsafe { mem::transmute(boxed) }\n-    }\n-\n-    #[inline]\n-    pub fn into_arc(&self) -> Arc<Slice> {\n-        let arc: Arc<[u8]> = Arc::from(&self.inner);\n-        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Slice) }\n-    }\n-\n-    #[inline]\n-    pub fn into_rc(&self) -> Rc<Slice> {\n-        let rc: Rc<[u8]> = Rc::from(&self.inner);\n-        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n-    }\n-}"}, {"sha": "670d07de1d1e0b0ebe5499a882e9ac3597692d76", "filename": "src/libstd/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -32,7 +32,6 @@ pub mod io;\n pub mod memchr;\n pub mod net;\n pub mod os;\n-pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n@@ -41,6 +40,8 @@ pub mod thread;\n pub mod time;\n pub mod stdio;\n \n+pub use crate::sys_common::os_str_bytes as os_str;\n+\n cfg_if! {\n     if #[cfg(target_feature = \"atomics\")] {\n         #[path = \"condvar_atomics.rs\"]"}, {"sha": "79b43458d00f3cad06079838d2c0ab3b3c3ef06a", "filename": "src/libstd/sys/wasm/os_str.rs", "status": "removed", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/ed196221d889ae8a87be677402e4319237ef67f4/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed196221d889ae8a87be677402e4319237ef67f4/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs?ref=ed196221d889ae8a87be677402e4319237ef67f4", "patch": "@@ -1,180 +0,0 @@\n-/// The underlying OsString/OsStr implementation on Unix systems: just\n-/// a `Vec<u8>`/`[u8]`.\n-\n-use crate::borrow::Cow;\n-use crate::fmt;\n-use crate::str;\n-use crate::mem;\n-use crate::rc::Rc;\n-use crate::sync::Arc;\n-use crate::sys_common::{AsInner, IntoInner};\n-use crate::sys_common::bytestring::debug_fmt_bytestring;\n-\n-use core::str::lossy::Utf8Lossy;\n-\n-#[derive(Clone, Hash)]\n-pub struct Buf {\n-    pub inner: Vec<u8>\n-}\n-\n-pub struct Slice {\n-    pub inner: [u8]\n-}\n-\n-impl fmt::Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        debug_fmt_bytestring(&self.inner, formatter)\n-    }\n-}\n-\n-impl fmt::Display for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n-    }\n-}\n-\n-impl fmt::Debug for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(self.as_slice(), formatter)\n-    }\n-}\n-\n-impl fmt::Display for Buf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self.as_slice(), formatter)\n-    }\n-}\n-\n-impl IntoInner<Vec<u8>> for Buf {\n-    fn into_inner(self) -> Vec<u8> {\n-        self.inner\n-    }\n-}\n-\n-impl AsInner<[u8]> for Buf {\n-    fn as_inner(&self) -> &[u8] {\n-        &self.inner\n-    }\n-}\n-\n-\n-impl Buf {\n-    pub fn from_string(s: String) -> Buf {\n-        Buf { inner: s.into_bytes() }\n-    }\n-\n-    #[inline]\n-    pub fn with_capacity(capacity: usize) -> Buf {\n-        Buf {\n-            inner: Vec::with_capacity(capacity)\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn clear(&mut self) {\n-        self.inner.clear()\n-    }\n-\n-    #[inline]\n-    pub fn capacity(&self) -> usize {\n-        self.inner.capacity()\n-    }\n-\n-    #[inline]\n-    pub fn reserve(&mut self, additional: usize) {\n-        self.inner.reserve(additional)\n-    }\n-\n-    #[inline]\n-    pub fn reserve_exact(&mut self, additional: usize) {\n-        self.inner.reserve_exact(additional)\n-    }\n-\n-    #[inline]\n-    pub fn shrink_to_fit(&mut self) {\n-        self.inner.shrink_to_fit()\n-    }\n-\n-    #[inline]\n-    pub fn shrink_to(&mut self, min_capacity: usize) {\n-        self.inner.shrink_to(min_capacity)\n-    }\n-\n-    pub fn as_slice(&self) -> &Slice {\n-        unsafe { mem::transmute(&*self.inner) }\n-    }\n-\n-    pub fn into_string(self) -> Result<String, Buf> {\n-        String::from_utf8(self.inner).map_err(|p| Buf { inner: p.into_bytes() } )\n-    }\n-\n-    pub fn push_slice(&mut self, s: &Slice) {\n-        self.inner.extend_from_slice(&s.inner)\n-    }\n-\n-    #[inline]\n-    pub fn into_box(self) -> Box<Slice> {\n-        unsafe { mem::transmute(self.inner.into_boxed_slice()) }\n-    }\n-\n-    #[inline]\n-    pub fn from_box(boxed: Box<Slice>) -> Buf {\n-        let inner: Box<[u8]> = unsafe { mem::transmute(boxed) };\n-        Buf { inner: inner.into_vec() }\n-    }\n-\n-    #[inline]\n-    pub fn into_arc(&self) -> Arc<Slice> {\n-        self.as_slice().into_arc()\n-    }\n-\n-    #[inline]\n-    pub fn into_rc(&self) -> Rc<Slice> {\n-        self.as_slice().into_rc()\n-    }\n-}\n-\n-impl Slice {\n-    fn from_u8_slice(s: &[u8]) -> &Slice {\n-        unsafe { mem::transmute(s) }\n-    }\n-\n-    pub fn from_str(s: &str) -> &Slice {\n-        Slice::from_u8_slice(s.as_bytes())\n-    }\n-\n-    pub fn to_str(&self) -> Option<&str> {\n-        str::from_utf8(&self.inner).ok()\n-    }\n-\n-    pub fn to_string_lossy(&self) -> Cow<str> {\n-        String::from_utf8_lossy(&self.inner)\n-    }\n-\n-    pub fn to_owned(&self) -> Buf {\n-        Buf { inner: self.inner.to_vec() }\n-    }\n-\n-    #[inline]\n-    pub fn into_box(&self) -> Box<Slice> {\n-        let boxed: Box<[u8]> = self.inner.into();\n-        unsafe { mem::transmute(boxed) }\n-    }\n-\n-    pub fn empty_box() -> Box<Slice> {\n-        let boxed: Box<[u8]> = Default::default();\n-        unsafe { mem::transmute(boxed) }\n-    }\n-\n-    #[inline]\n-    pub fn into_arc(&self) -> Arc<Slice> {\n-        let arc: Arc<[u8]> = Arc::from(&self.inner);\n-        unsafe { Arc::from_raw(Arc::into_raw(arc) as *const Slice) }\n-    }\n-\n-    #[inline]\n-    pub fn into_rc(&self) -> Rc<Slice> {\n-        let rc: Rc<[u8]> = Rc::from(&self.inner);\n-        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n-    }\n-}"}, {"sha": "883ab34f07c5832513d5a5c5753baac903ee0247", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -35,6 +35,13 @@ pub mod backtrace;\n pub mod condvar;\n pub mod io;\n pub mod mutex;\n+#[cfg(any(rustdoc, // see `mod os`, docs are generated for multiple platforms\n+          unix,\n+          target_os = \"redox\",\n+          target_os = \"cloudabi\",\n+          target_arch = \"wasm32\",\n+          all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n+pub mod os_str_bytes;\n pub mod poison;\n pub mod remutex;\n pub mod rwlock;"}, {"sha": "5a9235a608cd4047cba324f766bf3145295acf59", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "renamed", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=cb2f34dc6d7e83d8bcfef79e0388d49f0c24aca7", "patch": "@@ -1,23 +1,24 @@\n-/// The underlying OsString/OsStr implementation on Unix systems: just\n-/// a `Vec<u8>`/`[u8]`.\n+//! The underlying OsString/OsStr implementation on Unix and many other\n+//! systems: just a `Vec<u8>`/`[u8]`.\n \n use crate::borrow::Cow;\n+use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::str;\n use crate::mem;\n use crate::rc::Rc;\n use crate::sync::Arc;\n-use crate::sys_common::{AsInner, IntoInner};\n+use crate::sys_common::{FromInner, IntoInner, AsInner};\n use crate::sys_common::bytestring::debug_fmt_bytestring;\n \n use core::str::lossy::Utf8Lossy;\n \n #[derive(Clone, Hash)]\n-pub struct Buf {\n+pub(crate) struct Buf {\n     pub inner: Vec<u8>\n }\n \n-pub struct Slice {\n+pub(crate) struct Slice {\n     pub inner: [u8]\n }\n \n@@ -178,3 +179,67 @@ impl Slice {\n         unsafe { Rc::from_raw(Rc::into_raw(rc) as *const Slice) }\n     }\n }\n+\n+/// Platform-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait OsStringExt {\n+    /// Creates an [`OsString`] from a byte vector.\n+    ///\n+    /// See the module docmentation for an example.\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn from_vec(vec: Vec<u8>) -> Self;\n+\n+    /// Yields the underlying byte vector of this [`OsString`].\n+    ///\n+    /// See the module docmentation for an example.\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn into_vec(self) -> Vec<u8>;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl OsStringExt for OsString {\n+    fn from_vec(vec: Vec<u8>) -> OsString {\n+        FromInner::from_inner(Buf { inner: vec })\n+    }\n+    fn into_vec(self) -> Vec<u8> {\n+        self.into_inner().inner\n+    }\n+}\n+\n+/// Platform-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait OsStrExt {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    /// Creates an [`OsStr`] from a byte slice.\n+    ///\n+    /// See the module docmentation for an example.\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n+    fn from_bytes(slice: &[u8]) -> &Self;\n+\n+    /// Gets the underlying byte view of the [`OsStr`] slice.\n+    ///\n+    /// See the module docmentation for an example.\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn as_bytes(&self) -> &[u8];\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl OsStrExt for OsStr {\n+    fn from_bytes(slice: &[u8]) -> &OsStr {\n+        unsafe { mem::transmute(slice) }\n+    }\n+    fn as_bytes(&self) -> &[u8] {\n+        &self.as_inner().inner\n+    }\n+}", "previous_filename": "src/libstd/sys/redox/os_str.rs"}]}