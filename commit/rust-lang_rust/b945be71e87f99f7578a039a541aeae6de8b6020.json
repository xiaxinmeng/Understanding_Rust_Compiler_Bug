{"sha": "b945be71e87f99f7578a039a541aeae6de8b6020", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NDViZTcxZTg3Zjk5Zjc1NzhhMDM5YTU0MWFlYWU2ZGU4YjYwMjA=", "commit": {"author": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-05-31T23:50:07Z"}, "committer": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-05-31T23:50:07Z"}, "message": "Make the OOM hook return `()` rather than `!`\n\nPer discussion in https://github.com/rust-lang/rust/issues/51245#issuecomment-393651083\n\nThis allows more flexibility in what can be done with the API. This also\nsplits `rtabort!` into `dumb_print` happening in the default hook and\n`abort_internal`, happening in the actual oom handler after calling the\nhook. Registering an empty function thus makes the oom handler not print\nanything but still abort.\n\nCc: @alexcrichton", "tree": {"sha": "4de8984a807db51bc16c0dde129ce250add3a7af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de8984a807db51bc16c0dde129ce250add3a7af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b945be71e87f99f7578a039a541aeae6de8b6020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b945be71e87f99f7578a039a541aeae6de8b6020", "html_url": "https://github.com/rust-lang/rust/commit/b945be71e87f99f7578a039a541aeae6de8b6020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b945be71e87f99f7578a039a541aeae6de8b6020/comments", "author": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e38554cd80af2e99d626230ad3531b55ee3de65c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38554cd80af2e99d626230ad3531b55ee3de65c", "html_url": "https://github.com/rust-lang/rust/commit/e38554cd80af2e99d626230ad3531b55ee3de65c"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "3b1a3a439e79711d85ae5fe5c447081db98fab58", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b945be71e87f99f7578a039a541aeae6de8b6020/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b945be71e87f99f7578a039a541aeae6de8b6020/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=b945be71e87f99f7578a039a541aeae6de8b6020", "patch": "@@ -19,21 +19,22 @@\n \n use core::sync::atomic::{AtomicPtr, Ordering};\n use core::{mem, ptr};\n+use sys_common::util::dumb_print;\n \n static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());\n \n /// Registers a custom OOM hook, replacing any that was previously registered.\n ///\n-/// The OOM hook is invoked when an infallible memory allocation fails.\n-/// The default hook prints a message to standard error and aborts the\n-/// execution, but this behavior can be customized with the [`set_oom_hook`]\n-/// and [`take_oom_hook`] functions.\n+/// The OOM hook is invoked when an infallible memory allocation fails, before\n+/// the runtime aborts. The default hook prints a message to standard error,\n+/// but this behavior can be customized with the [`set_oom_hook`] and\n+/// [`take_oom_hook`] functions.\n ///\n /// The hook is provided with a `Layout` struct which contains information\n /// about the allocation that failed.\n ///\n /// The OOM hook is a global resource.\n-pub fn set_oom_hook(hook: fn(Layout) -> !) {\n+pub fn set_oom_hook(hook: fn(Layout)) {\n     HOOK.store(hook as *mut (), Ordering::SeqCst);\n }\n \n@@ -42,7 +43,7 @@ pub fn set_oom_hook(hook: fn(Layout) -> !) {\n /// *See also the function [`set_oom_hook`].*\n ///\n /// If no custom hook is registered, the default hook will be returned.\n-pub fn take_oom_hook() -> fn(Layout) -> ! {\n+pub fn take_oom_hook() -> fn(Layout) {\n     let hook = HOOK.swap(ptr::null_mut(), Ordering::SeqCst);\n     if hook.is_null() {\n         default_oom_hook\n@@ -51,21 +52,22 @@ pub fn take_oom_hook() -> fn(Layout) -> ! {\n     }\n }\n \n-fn default_oom_hook(layout: Layout) -> ! {\n-    rtabort!(\"memory allocation of {} bytes failed\", layout.size())\n+fn default_oom_hook(layout: Layout) {\n+    dumb_print(format_args!(\"memory allocation of {} bytes failed\", layout.size()));\n }\n \n #[cfg(not(test))]\n #[doc(hidden)]\n #[lang = \"oom\"]\n pub extern fn rust_oom(layout: Layout) -> ! {\n     let hook = HOOK.load(Ordering::SeqCst);\n-    let hook: fn(Layout) -> ! = if hook.is_null() {\n+    let hook: fn(Layout) = if hook.is_null() {\n         default_oom_hook\n     } else {\n         unsafe { mem::transmute(hook) }\n     };\n-    hook(layout)\n+    hook(layout);\n+    unsafe { ::sys::abort_internal(); }\n }\n \n #[cfg(not(test))]"}]}