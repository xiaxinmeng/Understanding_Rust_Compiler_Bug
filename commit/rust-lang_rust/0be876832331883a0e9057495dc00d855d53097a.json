{"sha": "0be876832331883a0e9057495dc00d855d53097a", "node_id": "C_kwDOAAsO6NoAKDBiZTg3NjgzMjMzMTg4M2EwZTkwNTc0OTVkYzAwZDg1NWQ1MzA5N2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T04:52:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T04:52:16Z"}, "message": "Auto merge of #96602 - TApplencourt:patch-1, r=Mark-Simulacrum\n\nboostrap.py use curl by default\n\nFixes #61611", "tree": {"sha": "813ae402fb84f9e568db42de8659b0896e9a0692", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/813ae402fb84f9e568db42de8659b0896e9a0692"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0be876832331883a0e9057495dc00d855d53097a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0be876832331883a0e9057495dc00d855d53097a", "html_url": "https://github.com/rust-lang/rust/commit/0be876832331883a0e9057495dc00d855d53097a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0be876832331883a0e9057495dc00d855d53097a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fb2d0ecef572120c4f2fc9a12a23f9bc9ace3d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb2d0ecef572120c4f2fc9a12a23f9bc9ace3d9", "html_url": "https://github.com/rust-lang/rust/commit/7fb2d0ecef572120c4f2fc9a12a23f9bc9ace3d9"}, {"sha": "ad7dbe18da68aff54de4315274a7ca8442d08ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7dbe18da68aff54de4315274a7ca8442d08ed8", "html_url": "https://github.com/rust-lang/rust/commit/ad7dbe18da68aff54de4315274a7ca8442d08ed8"}], "stats": {"total": 148, "additions": 98, "deletions": 50}, "files": [{"sha": "d36344ece4ea3d113bca3e8eb64012fd3fed1977", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0be876832331883a0e9057495dc00d855d53097a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0be876832331883a0e9057495dc00d855d53097a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0be876832331883a0e9057495dc00d855d53097a", "patch": "@@ -110,29 +110,42 @@ def download(path, url, probably_big, verbose, help_on_error=None):\n \n \n def _download(path, url, probably_big, verbose, exception, help_on_error=None):\n+    # Try to use curl (potentially available on win32\n+    #    https://devblogs.microsoft.com/commandline/tar-and-curl-come-to-windows/)\n+    # If an error occurs:\n+    #  - If we are on win32 fallback to powershell\n+    #  - Otherwise raise the error if appropriate\n     if probably_big or verbose:\n         print(\"downloading {}\".format(url))\n-    # see https://serverfault.com/questions/301128/how-to-download\n-    if sys.platform == 'win32':\n-        run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n-             \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\",\n-             \"(New-Object System.Net.WebClient).DownloadFile('{}', '{}')\".format(url, path)],\n-            verbose=verbose,\n-            exception=exception)\n-    else:\n+\n+    platform_is_win32 = sys.platform == 'win32'\n+    try:\n         if probably_big or verbose:\n             option = \"-#\"\n         else:\n             option = \"-s\"\n-        require([\"curl\", \"--version\"])\n+        # If curl is not present on Win32, we shoud not sys.exit\n+        #   but raise `CalledProcessError` or `OSError` instead\n+        require([\"curl\", \"--version\"], exception=platform_is_win32)\n         run([\"curl\", option,\n              \"-L\", # Follow redirect.\n              \"-y\", \"30\", \"-Y\", \"10\",    # timeout if speed is < 10 bytes/sec for > 30 seconds\n              \"--connect-timeout\", \"30\",  # timeout if cannot connect within 30 seconds\n              \"--retry\", \"3\", \"-Sf\", \"-o\", path, url],\n             verbose=verbose,\n-            exception=exception,\n+            exception=True, # Will raise RuntimeError on failure\n             help_on_error=help_on_error)\n+    except (subprocess.CalledProcessError, OSError, RuntimeError):\n+        # see http://serverfault.com/questions/301128/how-to-download\n+        if platform_is_win32:\n+            run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n+                 \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\",\n+                 \"(New-Object System.Net.WebClient).DownloadFile('{}', '{}')\".format(url, path)],\n+                verbose=verbose,\n+                exception=exception)\n+        # Check if the RuntimeError raised by run(curl) should be silenced\n+        elif verbose or exception:\n+            raise\n \n \n def verify(path, expected, verbose):\n@@ -198,19 +211,23 @@ def run(args, verbose=False, exception=False, is_bootstrap=False, help_on_error=\n             sys.exit(err)\n \n \n-def require(cmd, exit=True):\n+def require(cmd, exit=True, exception=False):\n     '''Run a command, returning its output.\n     On error,\n-        If `exit` is `True`, exit the process.\n-        Otherwise, return None.'''\n+        If `exception` is `True`, raise the error\n+        Otherwise If `exit` is `True`, exit the process\n+        Else return None.'''\n     try:\n         return subprocess.check_output(cmd).strip()\n     except (subprocess.CalledProcessError, OSError) as exc:\n-        if not exit:\n-            return None\n-        print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc))\n-        print(\"Please make sure it's installed and in the path.\")\n-        sys.exit(1)\n+        if exception:\n+            raise\n+        elif exit:\n+            print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc))\n+            print(\"Please make sure it's installed and in the path.\")\n+            sys.exit(1)\n+        return None\n+\n \n \n def format_build_time(duration):"}, {"sha": "a4e35bf6d475b64919072f4bd42686250e9de746", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0be876832331883a0e9057495dc00d855d53097a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be876832331883a0e9057495dc00d855d53097a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0be876832331883a0e9057495dc00d855d53097a", "patch": "@@ -122,7 +122,8 @@ use once_cell::sync::OnceCell;\n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n use crate::util::{\n-    exe, libdir, mtime, output, run, run_suppressed, t, try_run, try_run_suppressed, CiEnv,\n+    check_run, exe, libdir, mtime, output, run, run_suppressed, t, try_run, try_run_suppressed,\n+    CiEnv,\n };\n \n mod builder;\n@@ -961,6 +962,17 @@ impl Build {\n         try_run_suppressed(cmd)\n     }\n \n+    /// Runs a command, printing out nice contextual information if it fails.\n+    /// Returns false if do not execute at all, otherwise returns its\n+    /// `status.success()`.\n+    fn check_run(&self, cmd: &mut Command) -> bool {\n+        if self.config.dry_run {\n+            return true;\n+        }\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        check_run(cmd, self.is_verbose())\n+    }\n+\n     pub fn is_verbose(&self) -> bool {\n         self.verbosity > 0\n     }"}, {"sha": "9438a19f27d94e04299995947877318ab47abb12", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0be876832331883a0e9057495dc00d855d53097a/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be876832331883a0e9057495dc00d855d53097a/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0be876832331883a0e9057495dc00d855d53097a", "patch": "@@ -306,39 +306,40 @@ fn download_component(builder: &Builder<'_>, base: &str, url: &str, dest_path: &\n \n fn download_with_retries(builder: &Builder<'_>, tempfile: &str, url: &str) {\n     println!(\"downloading {}\", url);\n-\n-    // FIXME: check if curl is installed instead of skipping straight to powershell\n-    if builder.build.build.contains(\"windows-msvc\") {\n-        for _ in 0..3 {\n-            if builder.try_run(Command::new(\"PowerShell.exe\").args(&[\n-                \"/nologo\",\n-                \"-Command\",\n-                \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\",\n-                &format!(\n-                    \"(New-Object System.Net.WebClient).DownloadFile('{}', '{}')\",\n-                    url, tempfile\n-                ),\n-            ])) {\n-                return;\n+    // Try curl. If that fails and we are on windows, fallback to PowerShell.\n+    if !builder.check_run(Command::new(\"curl\").args(&[\n+        \"-#\",\n+        \"-y\",\n+        \"30\",\n+        \"-Y\",\n+        \"10\", // timeout if speed is < 10 bytes/sec for > 30 seconds\n+        \"--connect-timeout\",\n+        \"30\", // timeout if cannot connect within 30 seconds\n+        \"--retry\",\n+        \"3\",\n+        \"-Sf\",\n+        \"-o\",\n+        tempfile,\n+        url,\n+    ])) {\n+        if builder.build.build.contains(\"windows-msvc\") {\n+            println!(\"Fallback to PowerShell\");\n+            for _ in 0..3 {\n+                if builder.try_run(Command::new(\"PowerShell.exe\").args(&[\n+                    \"/nologo\",\n+                    \"-Command\",\n+                    \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\",\n+                    &format!(\n+                        \"(New-Object System.Net.WebClient).DownloadFile('{}', '{}')\",\n+                        url, tempfile\n+                    ),\n+                ])) {\n+                    return;\n+                }\n+                println!(\"\\nspurious failure, trying again\");\n             }\n-            println!(\"\\nspurious failure, trying again\");\n         }\n-    } else {\n-        builder.run(Command::new(\"curl\").args(&[\n-            \"-#\",\n-            \"-y\",\n-            \"30\",\n-            \"-Y\",\n-            \"10\", // timeout if speed is < 10 bytes/sec for > 30 seconds\n-            \"--connect-timeout\",\n-            \"30\", // timeout if cannot connect within 30 seconds\n-            \"--retry\",\n-            \"3\",\n-            \"-Sf\",\n-            \"-o\",\n-            tempfile,\n-            url,\n-        ]));\n+        std::process::exit(1);\n     }\n }\n "}, {"sha": "710b3588b845bf9b874e6ca6003cead1252be4e9", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0be876832331883a0e9057495dc00d855d53097a/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be876832331883a0e9057495dc00d855d53097a/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=0be876832331883a0e9057495dc00d855d53097a", "patch": "@@ -346,6 +346,24 @@ pub fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n     status.success()\n }\n \n+pub fn check_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n+    let status = match cmd.status() {\n+        Ok(status) => status,\n+        Err(e) => {\n+            println!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e);\n+            return false;\n+        }\n+    };\n+    if !status.success() && print_cmd_on_fail {\n+        println!(\n+            \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n\\n\",\n+            cmd, status\n+        );\n+    }\n+    status.success()\n+}\n+\n pub fn run_suppressed(cmd: &mut Command) {\n     if !try_run_suppressed(cmd) {\n         std::process::exit(1);"}]}