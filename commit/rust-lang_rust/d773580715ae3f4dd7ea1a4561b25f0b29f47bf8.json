{"sha": "d773580715ae3f4dd7ea1a4561b25f0b29f47bf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzM1ODA3MTVhZTNmNGRkN2VhMWE0NTYxYjI1ZjBiMjlmNDdiZjg=", "commit": {"author": {"name": "Aaron Lobb", "email": "alobb@hmc.edu", "date": "2015-09-14T20:43:55Z"}, "committer": {"name": "Aaron Lobb", "email": "alobb@hmc.edu", "date": "2015-09-14T20:43:55Z"}, "message": "Changed ConfigType trait to only return a string of variants, rather than a vec", "tree": {"sha": "0bb023e93313e53b07a8de6ef9ffa37d02a1d202", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bb023e93313e53b07a8de6ef9ffa37d02a1d202"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8", "html_url": "https://github.com/rust-lang/rust/commit/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8/comments", "author": {"login": "alobb", "id": 5897943, "node_id": "MDQ6VXNlcjU4OTc5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5897943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alobb", "html_url": "https://github.com/alobb", "followers_url": "https://api.github.com/users/alobb/followers", "following_url": "https://api.github.com/users/alobb/following{/other_user}", "gists_url": "https://api.github.com/users/alobb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alobb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alobb/subscriptions", "organizations_url": "https://api.github.com/users/alobb/orgs", "repos_url": "https://api.github.com/users/alobb/repos", "events_url": "https://api.github.com/users/alobb/events{/privacy}", "received_events_url": "https://api.github.com/users/alobb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alobb", "id": 5897943, "node_id": "MDQ6VXNlcjU4OTc5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5897943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alobb", "html_url": "https://github.com/alobb", "followers_url": "https://api.github.com/users/alobb/followers", "following_url": "https://api.github.com/users/alobb/following{/other_user}", "gists_url": "https://api.github.com/users/alobb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alobb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alobb/subscriptions", "organizations_url": "https://api.github.com/users/alobb/orgs", "repos_url": "https://api.github.com/users/alobb/repos", "events_url": "https://api.github.com/users/alobb/events{/privacy}", "received_events_url": "https://api.github.com/users/alobb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd9e9b5db08f03dff80e91cbc7e6beaf441cf3ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9e9b5db08f03dff80e91cbc7e6beaf441cf3ec", "html_url": "https://github.com/rust-lang/rust/commit/cd9e9b5db08f03dff80e91cbc7e6beaf441cf3ec"}], "stats": {"total": 53, "additions": 18, "deletions": 35}, "files": [{"sha": "2bc6e255ac0eb784aecc95f159c429fdacf910ce", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=d773580715ae3f4dd7ea1a4561b25f0b29f47bf8", "patch": "@@ -17,7 +17,7 @@ extern crate rustfmt;\n extern crate toml;\n \n use rustfmt::{WriteMode, run};\n-use rustfmt::config::{Config, ConfigHelpVariantTypes};\n+use rustfmt::config::Config;\n \n use std::env;\n use std::fs::{File, PathExt};\n@@ -87,13 +87,7 @@ fn print_usage<S: Into<String>>(reason: S) {\n              reason.into());\n \n     for option in Config::get_docs() {\n-        let variants = option.variant_names();\n-        let variant_names: String = match *variants {\n-            ConfigHelpVariantTypes::UsizeConfig => \"<unsigned integer>\".into(),\n-            ConfigHelpVariantTypes::BoolConfig => \"<boolean>\".into(),\n-            ConfigHelpVariantTypes::EnumConfig(ref variants) => variants.join(\", \"),\n-        };\n-        println!(\"{}, {}, Possible values: {}\", option.option_name(), option.doc_string(), variant_names);\n+        println!(\"{}, {}, Possible values: {}\", option.option_name(), option.doc_string(), option.variant_names());\n     }\n }\n "}, {"sha": "e3ff126ee837bcc929dc4dea2a7d934c837fff5f", "filename": "src/config.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=d773580715ae3f4dd7ea1a4561b25f0b29f47bf8", "patch": "@@ -82,34 +82,28 @@ macro_rules! create_config {\n             $(pub $i: Option<$ty>),+\n         }\n \n-        // This trait and the following impl blocks are there only so that we\n-        // can use UCFS inside the get_docs() function on builtin types for configs.\n-        trait IsConfigType {\n-            fn get_variant_names() -> Vec<&'static str>;\n+        // This trait and the following impl blocks are there so that we an use\n+        // UCFS inside the get_docs() function on types for configs.\n+        pub trait ConfigType {\n+            fn get_variant_names() -> String;\n         }\n \n-        impl IsConfigType for bool {\n-            fn get_variant_names() -> Vec<&'static str> {\n-                unreachable!()\n+        impl ConfigType for bool {\n+            fn get_variant_names() -> String {\n+                String::from(\"<boolean>\")\n             }\n         }\n \n-        impl IsConfigType for usize {\n-            fn get_variant_names() -> Vec<&'static str> {\n-                unreachable!()\n+        impl ConfigType for usize {\n+            fn get_variant_names() -> String {\n+                String::from(\"<unsigned integer>\")\n             }\n         }\n \n         pub struct ConfigHelpItem {\n             option_name: &'static str,\n             doc_string : &'static str,\n-            variant_names: ConfigHelpVariantTypes,\n-        }\n-\n-        pub enum ConfigHelpVariantTypes {\n-            UsizeConfig,\n-            BoolConfig,\n-            EnumConfig(Vec<&'static str>),\n+            variant_names: String,\n         }\n \n         impl ConfigHelpItem {\n@@ -121,7 +115,7 @@ macro_rules! create_config {\n                 self.doc_string\n             }\n \n-            pub fn variant_names(&self) -> &ConfigHelpVariantTypes {\n+            pub fn variant_names(&self) -> &String {\n                 &self.variant_names\n             }\n         }\n@@ -165,15 +159,10 @@ macro_rules! create_config {\n             pub fn get_docs() -> Vec<ConfigHelpItem> {\n                 let mut options: Vec<ConfigHelpItem> = Vec::new();\n                 $(\n-                    let config_variant_type = match stringify!($ty) {\n-                        \"bool\" => ConfigHelpVariantTypes::BoolConfig,\n-                        \"usize\" => ConfigHelpVariantTypes::UsizeConfig,\n-                        _ => ConfigHelpVariantTypes::EnumConfig(<$ty>::get_variant_names()),\n-                    };\n                     options.push(ConfigHelpItem {\n                         option_name: stringify!($i),\n                         doc_string: stringify!($dstring),\n-                        variant_names: config_variant_type,\n+                        variant_names: <$ty>::get_variant_names(),\n                     });\n                 )+\n                 options"}, {"sha": "42d1151ba38cac79690ca3182418d74d6da70fb0", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d773580715ae3f4dd7ea1a4561b25f0b29f47bf8/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=d773580715ae3f4dd7ea1a4561b25f0b29f47bf8", "patch": "@@ -162,14 +162,14 @@ macro_rules! impl_enum_decodable {\n             }\n         }\n \n-        impl $e {\n-            pub fn get_variant_names() -> Vec<&'static str> {\n+        impl ::config::ConfigType for $e {\n+            fn get_variant_names() -> String {\n                 let mut variants = Vec::new();\n                 $(\n                     variants.push(stringify!($x));\n                 )*\n \n-                variants\n+                variants.join(\", \")\n             }\n         }\n     };"}]}