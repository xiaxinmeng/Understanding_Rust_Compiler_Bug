{"sha": "0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOGE5N2Y4ZTdjZjFkYTE5YzcwOGQzM2Y1NjAyN2UxZDlkOWYwNjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-13T23:17:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-18T10:57:04Z"}, "message": "resolve: Avoid marking `extern crate` items as used in certain cases", "tree": {"sha": "b3986307262622718fef87c10e4ac7a7dd7b7c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3986307262622718fef87c10e4ac7a7dd7b7c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "html_url": "https://github.com/rust-lang/rust/commit/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e88c3470a1513f6ad3dabc82f00076977da91ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e88c3470a1513f6ad3dabc82f00076977da91ae", "html_url": "https://github.com/rust-lang/rust/commit/8e88c3470a1513f6ad3dabc82f00076977da91ae"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "24a89f7cd549c400f6c79ebc268a1746296dbd78", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "patch": "@@ -1970,14 +1970,26 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.arenas.alloc_module(module)\n     }\n \n-    fn record_use(&mut self, ident: Ident, ns: Namespace, binding: &'a NameBinding<'a>) {\n-        match binding.kind {\n+    fn record_use(&mut self, ident: Ident, ns: Namespace,\n+                  used_binding: &'a NameBinding<'a>, is_lexical_scope: bool) {\n+        match used_binding.kind {\n             NameBindingKind::Import { directive, binding, ref used } if !used.get() => {\n+                // Avoid marking `extern crate` items that refer to a name from extern prelude,\n+                // but not introduce it, as used if they are accessed from lexical scope.\n+                if is_lexical_scope {\n+                    if let Some(entry) = self.extern_prelude.get(&ident.modern()) {\n+                        if let Some(crate_item) = entry.extern_crate_item {\n+                            if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                }\n                 used.set(true);\n                 directive.used.set(true);\n                 self.used_imports.insert((directive.id, ns));\n                 self.add_to_glob_map(directive.id, ident);\n-                self.record_use(ident, ns, binding);\n+                self.record_use(ident, ns, binding, false);\n             }\n             NameBindingKind::Ambiguity { kind, b1, b2 } => {\n                 self.ambiguity_errors.push(AmbiguityError {\n@@ -2965,7 +2977,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                             Def::Const(..) if is_syntactic_ambiguity => {\n                                 // Disambiguate in favor of a unit struct/variant\n                                 // or constant pattern.\n-                                self.record_use(ident, ValueNS, binding.unwrap());\n+                                self.record_use(ident, ValueNS, binding.unwrap(), false);\n                                 Some(PathResolution::new(def))\n                             }\n                             Def::StructCtor(..) | Def::VariantCtor(..) |"}, {"sha": "14e54631f2409634647f093a3fe5d615a3f74831", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "patch": "@@ -996,7 +996,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                                             &parent_scope, true, true, ident.span) {\n                 Ok(binding) => {\n                     let initial_def = initial_binding.map(|initial_binding| {\n-                        self.record_use(ident, MacroNS, initial_binding);\n+                        self.record_use(ident, MacroNS, initial_binding, false);\n                         initial_binding.def_ignoring_ambiguity()\n                     });\n                     let def = binding.def_ignoring_ambiguity();"}, {"sha": "4637e73ee0fbb6e699055e253e15d5fb9717e81e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                 if self.last_import_segment && check_usable(self, binding).is_err() {\n                     Err(DeterminacyExt::Determined)\n                 } else {\n-                    self.record_use(ident, ns, binding);\n+                    self.record_use(ident, ns, binding, restricted_shadowing);\n \n                     if let Some(shadowed_glob) = resolution.shadowed_glob {\n                         // Forbid expanded shadowing to avoid time travel.\n@@ -924,7 +924,8 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                     // Consistency checks, analogous to `finalize_current_module_macro_resolutions`.\n                     let initial_def = result[ns].get().map(|initial_binding| {\n                         all_ns_err = false;\n-                        this.record_use(ident, MacroNS, initial_binding);\n+                        this.record_use(ident, ns, initial_binding,\n+                                        directive.module_path.is_empty());\n                         initial_binding.def_ignoring_ambiguity()\n                     });\n                     let def = binding.def_ignoring_ambiguity();"}]}