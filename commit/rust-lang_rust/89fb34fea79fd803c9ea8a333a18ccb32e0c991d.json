{"sha": "89fb34fea79fd803c9ea8a333a18ccb32e0c991d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZmIzNGZlYTc5ZmQ4MDNjOWVhOGEzMzNhMThjY2IzMmUwYzk5MWQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-10T18:43:13Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-11T11:36:42Z"}, "message": "Turn unstable trait impl error into a lint, so it can be disabled.", "tree": {"sha": "c0223c5fafd66a1c4e2faa56fb0d8ce2af814a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0223c5fafd66a1c4e2faa56fb0d8ce2af814a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89fb34fea79fd803c9ea8a333a18ccb32e0c991d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89fb34fea79fd803c9ea8a333a18ccb32e0c991d", "html_url": "https://github.com/rust-lang/rust/commit/89fb34fea79fd803c9ea8a333a18ccb32e0c991d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89fb34fea79fd803c9ea8a333a18ccb32e0c991d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf8e5d1bc969987aba074bd7f4b01565badca434", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8e5d1bc969987aba074bd7f4b01565badca434", "html_url": "https://github.com/rust-lang/rust/commit/cf8e5d1bc969987aba074bd7f4b01565badca434"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "4eb983365ffb530a821087e5864a2d3fca0c9eef", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/89fb34fea79fd803c9ea8a333a18ccb32e0c991d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fb34fea79fd803c9ea8a333a18ccb32e0c991d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=89fb34fea79fd803c9ea8a333a18ccb32e0c991d", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::middle::stability::{DeprecationEntry, Index};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n+use rustc_session::lint::builtin::INEFFECTIVE_UNSTABLE_TRAIT_IMPL;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n@@ -539,27 +540,33 @@ impl Visitor<'tcx> for Checker<'tcx> {\n             // individually as it's possible to have a stable trait with unstable\n             // items.\n             hir::ItemKind::Impl { of_trait: Some(ref t), self_ty, items, .. } => {\n-                // If this impl block has an #[unstable] attribute, give an\n-                // error if all involved types and traits are stable, because\n-                // it will have no effect.\n-                // See: https://github.com/rust-lang/rust/issues/55436\n-                if let (Some(Stability { level: attr::Unstable { .. }, .. }), _) =\n-                    attr::find_stability(&self.tcx.sess, &item.attrs, item.span)\n-                {\n-                    let mut c = CheckTraitImplStable { tcx: self.tcx, fully_stable: true };\n-                    c.visit_ty(self_ty);\n-                    c.visit_trait_ref(t);\n-                    if c.fully_stable {\n-                        let span = item\n-                            .attrs\n-                            .iter()\n-                            .find(|a| a.has_name(sym::unstable))\n-                            .map_or(item.span, |a| a.span);\n-                        self.tcx.sess.span_err(\n-                            span,\n-                            \"An `#[unstable]` annotation here has no effect. \\\n-                            See issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information.\",\n-                        );\n+                if self.tcx.features().staged_api {\n+                    // If this impl block has an #[unstable] attribute, give an\n+                    // error if all involved types and traits are stable, because\n+                    // it will have no effect.\n+                    // See: https://github.com/rust-lang/rust/issues/55436\n+                    if let (Some(Stability { level: attr::Unstable { .. }, .. }), _) =\n+                        attr::find_stability(&self.tcx.sess, &item.attrs, item.span)\n+                    {\n+                        let mut c = CheckTraitImplStable { tcx: self.tcx, fully_stable: true };\n+                        c.visit_ty(self_ty);\n+                        c.visit_trait_ref(t);\n+                        if c.fully_stable {\n+                            let span = item\n+                                .attrs\n+                                .iter()\n+                                .find(|a| a.has_name(sym::unstable))\n+                                .map_or(item.span, |a| a.span);\n+                            self.tcx.struct_span_lint_hir(\n+                                INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n+                                item.hir_id,\n+                                span,\n+                                |lint| lint.build(\n+                                    \"An `#[unstable]` annotation here has no effect. \\\n+                                    See issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information.\",\n+                                ).emit()\n+                            );\n+                        }\n                     }\n                 }\n "}, {"sha": "0fd6cc1038284f5bb68a4cc04f856dd4728ef715", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89fb34fea79fd803c9ea8a333a18ccb32e0c991d/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89fb34fea79fd803c9ea8a333a18ccb32e0c991d/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=89fb34fea79fd803c9ea8a333a18ccb32e0c991d", "patch": "@@ -5,7 +5,7 @@\n //! lints are all available in `rustc_lint::builtin`.\n \n use crate::lint::FutureIncompatibleInfo;\n-use crate::{declare_lint, declare_lint_pass};\n+use crate::{declare_lint, declare_lint_pass, declare_tool_lint};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n@@ -555,6 +555,12 @@ declare_lint! {\n     };\n }\n \n+declare_tool_lint! {\n+    pub rustc::INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n+    Deny,\n+    \"detects `#[unstable]` on stable trait implementations for stable types\"\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -630,6 +636,7 @@ declare_lint_pass! {\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,\n         CONST_EVALUATABLE_UNCHECKED,\n+        INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n     ]\n }\n "}]}