{"sha": "7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZTFiNDcwOTIwZDJmZjRkNmZmYjEwMGE1YmJjZjU5NGI5MDMxYTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-11T16:17:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-11T16:17:55Z"}, "message": "review comments", "tree": {"sha": "9ea6d34dd2312ead23bcac6e911c9e6421f3e696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ea6d34dd2312ead23bcac6e911c9e6421f3e696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1", "html_url": "https://github.com/rust-lang/rust/commit/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29be741c9c15a69487cb2eae9bb895399806731f", "url": "https://api.github.com/repos/rust-lang/rust/commits/29be741c9c15a69487cb2eae9bb895399806731f", "html_url": "https://github.com/rust-lang/rust/commit/29be741c9c15a69487cb2eae9bb895399806731f"}], "stats": {"total": 104, "additions": 53, "deletions": 51}, "files": [{"sha": "2a39dc6b011e7ce6e6d5bc9ded5fed27d9d1c50d", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1", "patch": "@@ -9,6 +9,7 @@\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::expand::is_proc_macro_attr;\n+use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n@@ -594,6 +595,54 @@ impl<'a> AstValidator<'a> {\n             .span_label(ident.span, format!(\"`_` is not a valid name for this `{}` item\", kind))\n             .emit();\n     }\n+\n+    fn deny_generic_params(&self, generics: &Generics, ident_span: Span) {\n+        if !generics.params.is_empty() {\n+            struct_span_err!(\n+                self.session,\n+                generics.span,\n+                E0567,\n+                \"auto traits cannot have generic parameters\"\n+            )\n+            .span_label(ident_span, \"auto trait cannot have generic parameters\")\n+            .span_suggestion(\n+                generics.span,\n+                \"remove the parameters\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+        }\n+    }\n+\n+    fn deny_super_traits(&self, bounds: &GenericBounds, ident_span: Span) {\n+        if let [first @ last] | [first, .., last] = &bounds[..] {\n+            let span = first.span().to(last.span());\n+            struct_span_err!(self.session, span, E0568, \"auto traits cannot have super traits\")\n+                .span_label(ident_span, \"auto trait cannot have super traits\")\n+                .span_suggestion(\n+                    span,\n+                    \"remove the super traits\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+    }\n+\n+    fn deny_items(&self, trait_items: &[P<AssocItem>], ident_span: Span) {\n+        if !trait_items.is_empty() {\n+            let spans: Vec<_> = trait_items.iter().map(|i| i.ident.span).collect();\n+            struct_span_err!(\n+                self.session,\n+                spans,\n+                E0380,\n+                \"auto traits cannot have methods or associated items\"\n+            )\n+            .span_label(ident_span, \"auto trait cannot have items\")\n+            .emit();\n+        }\n+    }\n }\n \n fn validate_generic_param_order<'a>(\n@@ -881,57 +930,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::Trait(is_auto, _, ref generics, ref bounds, ref trait_items) => {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n-                    if !generics.params.is_empty() {\n-                        let mut err = struct_span_err!(\n-                            self.session,\n-                            generics.span,\n-                            E0567,\n-                            \"auto traits cannot have generic parameters\"\n-                        );\n-                        err.span_label(\n-                            item.ident.span,\n-                            \"auto trait cannot have generic parameters\",\n-                        );\n-                        err.span_suggestion(\n-                            generics.span,\n-                            \"remove the parameters\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    }\n-                    if !bounds.is_empty() {\n-                        let span = match &bounds[..] {\n-                            [] => unreachable!(),\n-                            [single] => single.span(),\n-                            [first, .., last] => first.span().to(last.span()),\n-                        };\n-                        let mut err = struct_span_err!(\n-                            self.session,\n-                            span,\n-                            E0568,\n-                            \"auto traits cannot have super traits\"\n-                        );\n-                        err.span_label(item.ident.span, \"auto trait cannot have super traits\");\n-                        err.span_suggestion(\n-                            span,\n-                            \"remove the super traits\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    }\n-                    if !trait_items.is_empty() {\n-                        let spans: Vec<_> = trait_items.iter().map(|i| i.ident.span).collect();\n-                        struct_span_err!(\n-                            self.session,\n-                            spans,\n-                            E0380,\n-                            \"auto traits cannot have methods or associated items\"\n-                        )\n-                        .span_label(item.ident.span, \"auto trait cannot have items\")\n-                        .emit();\n-                    }\n+                    self.deny_generic_params(generics, item.ident.span);\n+                    self.deny_super_traits(bounds, item.ident.span);\n+                    self.deny_items(trait_items, item.ident.span);\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n "}, {"sha": "10081d36754ba43f652593ee3ab13e91a69fdcf4", "filename": "src/librustc_ast_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1/src%2Flibrustc_ast_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1/src%2Flibrustc_ast_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Flib.rs?ref=7ee1b470920d2ff4d6ffb100a5bbcf594b9031a1", "patch": "@@ -1,3 +1,4 @@\n+#![feature(bindings_after_at)]\n //! The `rustc_ast_passes` crate contains passes which validate the AST in `syntax`\n //! parsed by `rustc_parse` and then lowered, after the passes in this crate,\n //! by `rustc_ast_lowering`."}]}