{"sha": "864b3c8017024afb99dc7f3ab0d335822934154d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGIzYzgwMTcwMjRhZmI5OWRjN2YzYWIwZDMzNTgyMjkzNDE1NGQ=", "commit": {"author": {"name": "Leo Testard", "email": "leo.testard@gmail.com", "date": "2016-05-17T15:39:11Z"}, "committer": {"name": "Leo Testard", "email": "leo.testard@gmail.com", "date": "2016-05-26T17:05:44Z"}, "message": "Reject a LHS formed of a single sequence TT during `macro_rules!` checking.\n\nThis was already rejected during expansion. Encountering malformed LHS or RHS during expansion is now considered a bug.", "tree": {"sha": "c22202c2cda938da178b857ccfa0c880a6722a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c22202c2cda938da178b857ccfa0c880a6722a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864b3c8017024afb99dc7f3ab0d335822934154d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864b3c8017024afb99dc7f3ab0d335822934154d", "html_url": "https://github.com/rust-lang/rust/commit/864b3c8017024afb99dc7f3ab0d335822934154d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864b3c8017024afb99dc7f3ab0d335822934154d/comments", "author": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da66f2fd8cab261911163ece04d5c15a13cf5e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/da66f2fd8cab261911163ece04d5c15a13cf5e58", "html_url": "https://github.com/rust-lang/rust/commit/da66f2fd8cab261911163ece04d5c15a13cf5e58"}], "stats": {"total": 36, "additions": 6, "deletions": 30}, "files": [{"sha": "69e24cf071902252c6a211fdfd8435d48d5509b9", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/864b3c8017024afb99dc7f3ab0d335822934154d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b3c8017024afb99dc7f3ab0d335822934154d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=864b3c8017024afb99dc7f3ab0d335822934154d", "patch": "@@ -179,15 +179,15 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n     for (i, lhs) in lhses.iter().enumerate() { // try each arm's matchers\n         let lhs_tt = match *lhs {\n             TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n-            _ => cx.span_fatal(sp, \"malformed macro lhs\")\n+            _ => cx.span_bug(sp, \"malformed macro lhs\")\n         };\n \n         match TokenTree::parse(cx, lhs_tt, arg) {\n             Success(named_matches) => {\n                 let rhs = match rhses[i] {\n                     // ignore delimiters\n                     TokenTree::Delimited(_, ref delimed) => delimed.tts.clone(),\n-                    _ => cx.span_fatal(sp, \"malformed macro rhs\"),\n+                    _ => cx.span_bug(sp, \"malformed macro rhs\"),\n                 };\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n                 let trncbr = new_tt_reader(&cx.parse_sess().span_diagnostic,\n@@ -326,19 +326,14 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n     NormalTT(exp, Some(def.span), def.allow_internal_unstable)\n }\n \n-// why is this here? because of https://github.com/rust-lang/rust/issues/27774\n-fn ref_slice<A>(s: &A) -> &[A] { use std::slice::from_raw_parts; unsafe { from_raw_parts(s, 1) } }\n-\n fn check_lhs_nt_follows(cx: &mut ExtCtxt, lhs: &TokenTree) -> bool {\n     // lhs is going to be like TokenTree::Delimited(...), where the\n     // entire lhs is those tts. Or, it can be a \"bare sequence\", not wrapped in parens.\n     match lhs {\n         &TokenTree::Delimited(_, ref tts) => check_matcher(cx, &tts.tts),\n-        tt @ &TokenTree::Sequence(..) => check_matcher(cx, ref_slice(tt)),\n         _ => {\n-            cx.span_err(lhs.get_span(),\n-                        \"invalid macro matcher; matchers must be contained \\\n-                         in balanced delimiters or a repetition indicator\");\n+            cx.span_err(lhs.get_span(), \"invalid macro matcher; matchers must \\\n+                                         be contained in balanced delimiters\");\n             false\n         }\n     }"}, {"sha": "5d81e21f05684e1f816522c214a289bc287458b7", "filename": "src/test/compile-fail/malformed_macro_lhs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/864b3c8017024afb99dc7f3ab0d335822934154d/src%2Ftest%2Fcompile-fail%2Fmalformed_macro_lhs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b3c8017024afb99dc7f3ab0d335822934154d/src%2Ftest%2Fcompile-fail%2Fmalformed_macro_lhs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed_macro_lhs.rs?ref=864b3c8017024afb99dc7f3ab0d335822934154d", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n macro_rules! my_precioooous {\n-    $($t:tt)* => (1);\n+    $($t:tt)* => (1); //~ ERROR invalid macro matcher\n }\n \n fn main() {\n-    my_precioooous!(); //~ ERROR malformed macro lhs\n+    my_precioooous!();\n }"}, {"sha": "ff205cd694c3a848fab7c06bc9f37d343cf391a6", "filename": "src/test/run-pass/issue-21350.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/da66f2fd8cab261911163ece04d5c15a13cf5e58/src%2Ftest%2Frun-pass%2Fissue-21350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da66f2fd8cab261911163ece04d5c15a13cf5e58/src%2Ftest%2Frun-pass%2Fissue-21350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21350.rs?ref=da66f2fd8cab261911163ece04d5c15a13cf5e58", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure that \"bare sequences\" don't ICE in follow checking\n-\n-// pretty-expanded FIXME #23616\n-\n-macro_rules! bare {\n-    $($id:expr),+ => ( $($id)+ )\n-}\n-\n-fn main() { }"}]}