{"sha": "a783fe2f77dfc69bdfbee539488403ff8883fd25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ODNmZTJmNzdkZmM2OWJkZmJlZTUzOTQ4ODQwM2ZmODg4M2ZkMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-15T14:51:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-15T14:51:02Z"}, "message": "Auto merge of #43246 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 8 pull requests\n\n- Successful merges: #43074, #43145, #43159, #43202, #43222, #43228, #43229, #43240\n- Failed merges:", "tree": {"sha": "2f2b941613ea1aa7b2d62977052c3504f89398f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f2b941613ea1aa7b2d62977052c3504f89398f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a783fe2f77dfc69bdfbee539488403ff8883fd25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a783fe2f77dfc69bdfbee539488403ff8883fd25", "html_url": "https://github.com/rust-lang/rust/commit/a783fe2f77dfc69bdfbee539488403ff8883fd25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a783fe2f77dfc69bdfbee539488403ff8883fd25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4373bd6a29e4f68becfb0874f3199b8b0c2d482", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4373bd6a29e4f68becfb0874f3199b8b0c2d482", "html_url": "https://github.com/rust-lang/rust/commit/c4373bd6a29e4f68becfb0874f3199b8b0c2d482"}, {"sha": "e3825ecd4c4e79eff77cb0c2ed51447a8a344ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3825ecd4c4e79eff77cb0c2ed51447a8a344ce0", "html_url": "https://github.com/rust-lang/rust/commit/e3825ecd4c4e79eff77cb0c2ed51447a8a344ce0"}], "stats": {"total": 110, "additions": 89, "deletions": 21}, "files": [{"sha": "5a1ef818ccfc9357efb9830f2cefe32ccf031d5c", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -28,6 +28,7 @@\n \n use std::collections::{BTreeMap, HashSet, HashMap};\n use std::mem;\n+use std::path::PathBuf;\n use std::process;\n \n use check::{self, TestKind};\n@@ -1209,11 +1210,19 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             if paths.len() == 0 && rule.default {\n                 Some((rule, 0))\n             } else {\n-                paths.iter().position(|path| path.ends_with(rule.path))\n+                paths.iter()\n+                     .position(|path| path.ends_with(rule.path))\n                      .map(|priority| (rule, priority))\n             }\n         }).collect();\n \n+        if rules.is_empty() &&\n+           !paths.get(0).unwrap_or(&PathBuf::new())\n+                 .ends_with(\"nonexistent/path/to/trigger/cargo/metadata\") {\n+            println!(\"\\nNothing to run...\\n\");\n+            process::exit(1);\n+        }\n+\n         rules.sort_by_key(|&(_, priority)| priority);\n \n         rules.into_iter().flat_map(|(rule, _)| {"}, {"sha": "4ee596df22f8ecaa9a0b2ddc0624b0104540dbf7", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -1 +1 @@\n-Subproject commit 325c3da0814f44916bef00ff225f934f2d613203\n+Subproject commit 4ee596df22f8ecaa9a0b2ddc0624b0104540dbf7"}, {"sha": "81134a4dff811403b3b2f349b0c59a819f0fe0c1", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -1 +1 @@\n-Subproject commit eee5ffb12773469bc02895d6b5e7e663b3a572a2\n+Subproject commit 81134a4dff811403b3b2f349b0c59a819f0fe0c1"}, {"sha": "1abfbaa70313fdf527cf799ffd9b9a096a62105c", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -1 +1 @@\n-Subproject commit 876582e9d0fbdc9cecb03133c28db96e9ff8c844\n+Subproject commit 1abfbaa70313fdf527cf799ffd9b9a096a62105c"}, {"sha": "79e6b11beaca680058d853bd8b3a2d131e2c47f1", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -359,11 +359,19 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n \n+    #[inline]\n     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n         where P: FnMut(&Self::Item) -> bool\n     {\n         self.iter.rfind(predicate)\n     }\n+\n+    #[inline]\n+    fn rposition<P>(&mut self, predicate: P) -> Option<usize> where\n+        P: FnMut(Self::Item) -> bool\n+    {\n+        self.iter.position(predicate)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4f118f58441c4bb8f0c4dcef25ad424cedd0675f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -160,7 +160,10 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     // #[repr(simd)], even if we don't actually use this struct directly.\n     //\n     // FIXME repr(simd) broken on emscripten and redox\n-    #[cfg_attr(not(any(target_os = \"emscripten\", target_os = \"redox\")), repr(simd))]\n+    // It's also broken on big-endian powerpc64 and s390x.  #42778\n+    #[cfg_attr(not(any(target_os = \"emscripten\", target_os = \"redox\",\n+                       target_endian = \"big\")),\n+               repr(simd))]\n     struct Block(u64, u64, u64, u64);\n     struct UnalignedBlock(u64, u64, u64, u64);\n "}, {"sha": "3862b4a2eb0463feff3fbee0cf40a8ad9520fef6", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -710,6 +710,37 @@ impl<'a> Iterator for Bytes<'a> {\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n         self.0.nth(n)\n     }\n+\n+    #[inline]\n+    fn all<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool {\n+        self.0.all(f)\n+    }\n+\n+    #[inline]\n+    fn any<F>(&mut self, f: F) -> bool where F: FnMut(Self::Item) -> bool {\n+        self.0.any(f)\n+    }\n+\n+    #[inline]\n+    fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where\n+        P: FnMut(&Self::Item) -> bool\n+    {\n+        self.0.find(predicate)\n+    }\n+\n+    #[inline]\n+    fn position<P>(&mut self, predicate: P) -> Option<usize> where\n+        P: FnMut(Self::Item) -> bool\n+    {\n+        self.0.position(predicate)\n+    }\n+\n+    #[inline]\n+    fn rposition<P>(&mut self, predicate: P) -> Option<usize> where\n+        P: FnMut(Self::Item) -> bool\n+    {\n+        self.0.rposition(predicate)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -718,6 +749,13 @@ impl<'a> DoubleEndedIterator for Bytes<'a> {\n     fn next_back(&mut self) -> Option<u8> {\n         self.0.next_back()\n     }\n+\n+    #[inline]\n+    fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item> where\n+        P: FnMut(&Self::Item) -> bool\n+    {\n+        self.0.rfind(predicate)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "432605cf3b25b271e8bb1bf9bdff10048a302f77", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -135,12 +135,12 @@ use sys::path::{is_sep_byte, is_verbatim_sep, MAIN_SEP_STR, parse_prefix};\n ///            get_path_prefix(r\"\\\\?\\pictures\\kittens\"));\n /// assert_eq!(VerbatimUNC(OsStr::new(\"server\"), OsStr::new(\"share\")),\n ///            get_path_prefix(r\"\\\\?\\UNC\\server\\share\"));\n-/// assert_eq!(VerbatimDisk('C' as u8), get_path_prefix(r\"\\\\?\\c:\\\"));\n+/// assert_eq!(VerbatimDisk(b'C'), get_path_prefix(r\"\\\\?\\c:\\\"));\n /// assert_eq!(DeviceNS(OsStr::new(\"BrainInterface\")),\n ///            get_path_prefix(r\"\\\\.\\BrainInterface\"));\n /// assert_eq!(UNC(OsStr::new(\"server\"), OsStr::new(\"share\")),\n ///            get_path_prefix(r\"\\\\server\\share\"));\n-/// assert_eq!(Disk('C' as u8), get_path_prefix(r\"C:\\Users\\Rust\\Pictures\\Ferris\"));\n+/// assert_eq!(Disk(b'C'), get_path_prefix(r\"C:\\Users\\Rust\\Pictures\\Ferris\"));\n /// # }\n /// ```\n #[derive(Copy, Clone, Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]\n@@ -235,10 +235,10 @@ impl<'a> Prefix<'a> {\n     ///\n     /// assert!(Verbatim(OsStr::new(\"pictures\")).is_verbatim());\n     /// assert!(VerbatimUNC(OsStr::new(\"server\"), OsStr::new(\"share\")).is_verbatim());\n-    /// assert!(VerbatimDisk('C' as u8).is_verbatim());\n+    /// assert!(VerbatimDisk(b'C').is_verbatim());\n     /// assert!(!DeviceNS(OsStr::new(\"BrainInterface\")).is_verbatim());\n     /// assert!(!UNC(OsStr::new(\"server\"), OsStr::new(\"share\")).is_verbatim());\n-    /// assert!(!Disk('C' as u8).is_verbatim());\n+    /// assert!(!Disk(b'C').is_verbatim());\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -401,7 +401,7 @@ enum State {\n /// let path = Path::new(r\"c:\\you\\later\\\");\n /// match path.components().next().unwrap() {\n ///     Component::Prefix(prefix_component) => {\n-///         assert_eq!(Prefix::Disk('C' as u8), prefix_component.kind());\n+///         assert_eq!(Prefix::Disk(b'C'), prefix_component.kind());\n ///         assert_eq!(OsStr::new(\"c:\"), prefix_component.as_os_str());\n ///     }\n ///     _ => unreachable!(),\n@@ -1040,7 +1040,7 @@ impl<'a> cmp::Ord for Components<'a> {\n /// [`Deref`]: ../ops/trait.Deref.html\n ///\n /// More details about the overall approach can be found in\n-/// the module documentation.\n+/// the [module documentation](index.html).\n ///\n /// # Examples\n ///\n@@ -1186,7 +1186,7 @@ impl PathBuf {\n         self.inner.push(path);\n     }\n \n-    /// Truncate `self` to [`self.parent`].\n+    /// Truncates `self` to [`self.parent`].\n     ///\n     /// Returns `false` and does nothing if [`self.file_name`] is [`None`].\n     /// Otherwise, returns `true`.\n@@ -1512,7 +1512,7 @@ impl AsRef<OsStr> for PathBuf {\n /// [`PathBuf`]: struct.PathBuf.html\n ///\n /// More details about the overall approach can be found in\n-/// the module documentation.\n+/// the [module documentation](index.html).\n ///\n /// # Examples\n ///\n@@ -1689,7 +1689,7 @@ impl Path {\n         self.has_root() && (cfg!(unix) || cfg!(target_os = \"redox\") || self.prefix().is_some())\n     }\n \n-    /// Return `false` if the `Path` is relative, i.e. not absolute.\n+    /// Returns `true` if the `Path` is relative, i.e. not absolute.\n     ///\n     /// See [`is_absolute`]'s documentation for more details.\n     ///\n@@ -2019,7 +2019,7 @@ impl Path {\n     /// * Repeated separators are ignored, so `a/b` and `a//b` both have\n     ///   `a` and `b` as components.\n     ///\n-    /// * Occurentces of `.` are normalized away, exept if they are at the\n+    /// * Occurences of `.` are normalized away, except if they are at the\n     ///   beginning of the path. For example, `a/./b`, `a/b/`, `a/b/.` and\n     ///   `a/b` all have `a` and `b` as components, but `./a/b` starts with\n     ///   an additional [`CurDir`] component."}, {"sha": "6cafe3e69bac12bc99f338ef3b0ca637e86d99cb", "filename": "src/libstd/sys/redox/backtrace.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -8,16 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc;\n use io;\n use sys_common::backtrace::Frame;\n \n-pub use sys_common::gnu::libbacktrace::*;\n+pub use sys_common::gnu::libbacktrace::{foreach_symbol_fileline, resolve_symname};\n pub struct BacktraceContext;\n \n #[inline(never)]\n-pub fn unwind_backtrace(frames: &mut [Frame])\n+pub fn unwind_backtrace(_frames: &mut [Frame])\n     -> io::Result<(usize, BacktraceContext)>\n {\n     Ok((0, BacktraceContext))\n }\n+\n+pub mod gnu {\n+    use io;\n+    use fs;\n+    use libc::c_char;\n+\n+    pub fn get_executable_filename() -> io::Result<(Vec<c_char>, fs::File)> {\n+        Err(io::Error::new(io::ErrorKind::Other, \"Not implemented\"))\n+    }\n+}"}, {"sha": "98ec3aa3e295986bc366d1302f22919a9f88b673", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -32,7 +32,7 @@ impl TcpStream {\n         Ok(TcpStream(File::open(&Path::new(path.as_str()), &options)?))\n     }\n \n-    pub fn connect_timeout(_addr: &SocketAddr, _timeout: Duration) -> Result<()> {\n+    pub fn connect_timeout(_addr: &SocketAddr, _timeout: Duration) -> Result<TcpStream> {\n         Err(Error::new(ErrorKind::Other, \"TcpStream::connect_timeout not implemented\"))\n     }\n "}, {"sha": "a1c63e3358840bfbc7b52a2fd2cd5a73ed5906e3", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -477,7 +477,7 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// fs::symlink_file(\"a\", \"b\")?;\n+/// fs::symlink_dir(\"a\", \"b\")?;\n /// # Ok(())\n /// # }\n /// ```"}, {"sha": "ccd4b91a7b7339038cbf498571c1344bb0e574a2", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a783fe2f77dfc69bdfbee539488403ff8883fd25/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=a783fe2f77dfc69bdfbee539488403ff8883fd25", "patch": "@@ -52,7 +52,8 @@ pub mod net;\n \n #[cfg(feature = \"backtrace\")]\n #[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\"))),\n-          all(windows, target_env = \"gnu\")))]\n+          all(windows, target_env = \"gnu\"),\n+          target_os = \"redox\"))]\n pub mod gnu;\n \n // common error constructors"}]}