{"sha": "1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMmYyYmUwODVkOTcyM2ZkNzJiZDAzM2I2ZmU4MWQ4YWEzMWMwNzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-14T20:09:17Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-14T20:11:31Z"}, "message": "Remove now-unnecessary calls to node_to_hir_id", "tree": {"sha": "a16fbcd3d8b9895296c0d7544e73511aa95e9e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16fbcd3d8b9895296c0d7544e73511aa95e9e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "html_url": "https://github.com/rust-lang/rust/commit/1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6505794bc64d1dc2beacbcec3ba351c834cbf47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6505794bc64d1dc2beacbcec3ba351c834cbf47f", "html_url": "https://github.com/rust-lang/rust/commit/6505794bc64d1dc2beacbcec3ba351c834cbf47f"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "d657bb6a0b4eea016a761fa44eb0815aefb29718", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "patch": "@@ -327,7 +327,7 @@ impl<'a, 'tcx: 'a> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr) {\n         if let hir::ExprKind::Path(ref qpath) = ptr.node {\n             if let Def::Local(id) = self.cx.tables.qpath_def(qpath, ptr.hir_id) {\n-                if self.ptrs.contains(&self.cx.tcx.hir().node_to_hir_id(id)) {\n+                if self.ptrs.contains(&id) {\n                     span_lint(\n                         self.cx,\n                         NOT_UNSAFE_PTR_ARG_DEREF,"}, {"sha": "1f454c4983a96c936bf6015ade6dd9b551fd8280", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n         if_chain! {\n             if let hir::ExprKind::Path(ref qpath) = expr.node;\n             if let Def::Local(local_id) = self.cx.tables.qpath_def(qpath, expr.hir_id);\n-            if self.id == self.cx.tcx.hir().node_to_hir_id(local_id);\n+            if self.id == local_id;\n             then {\n                 self.used = true;\n                 return;\n@@ -175,7 +175,7 @@ fn check_assign<'a, 'tcx>(\n         if let hir::ExprKind::Assign(ref var, ref value) = expr.node;\n         if let hir::ExprKind::Path(ref qpath) = var.node;\n         if let Def::Local(local_id) = cx.tables.qpath_def(qpath, var.hir_id);\n-        if decl == cx.tcx.hir().node_to_hir_id(local_id);\n+        if decl == local_id;\n         then {\n             let mut v = UsedVisitor {\n                 cx,"}, {"sha": "ccd8be38868cbe086dee1746813255bd35c1d98b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "patch": "@@ -790,7 +790,7 @@ fn same_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var: HirId) -> bo\n         if path.segments.len() == 1;\n         if let Def::Local(local_id) = cx.tables.qpath_def(qpath, expr.hir_id);\n         // our variable!\n-        if cx.tcx.hir().node_to_hir_id(local_id) == var;\n+        if local_id == var;\n         then {\n             return true;\n         }\n@@ -1663,7 +1663,7 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr) -> Option<HirId>\n                     if let PatKind::Binding(bind_ann, ..) = pat.node;\n                     if let BindingAnnotation::Mutable = bind_ann;\n                     then {\n-                        return Some(cx.tcx.hir().node_to_hir_id(node_id));\n+                        return Some(node_id);\n                     }\n                 }\n             }\n@@ -1792,9 +1792,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                     }\n                     let def = self.cx.tables.qpath_def(seqpath, seqexpr.hir_id);\n                     match def {\n-                        Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n-                            let hir_id = self.cx.tcx.hir().node_to_hir_id(node_id);\n-\n+                        Def::Local(hir_id) | Def::Upvar(hir_id, ..) => {\n                             let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n                             let parent_def_id = self.cx.tcx.hir().local_def_id_from_hir_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n@@ -1856,15 +1854,15 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             then {\n                 match self.cx.tables.qpath_def(qpath, expr.hir_id) {\n                     Def::Upvar(local_id, ..) => {\n-                        if self.cx.tcx.hir().node_to_hir_id(local_id) == self.var {\n+                        if local_id == self.var {\n                             // we are not indexing anything, record that\n                             self.nonindex = true;\n                         }\n                     }\n                     Def::Local(local_id) =>\n                     {\n \n-                        if self.cx.tcx.hir().node_to_hir_id(local_id) == self.var {\n+                        if local_id == self.var {\n                             self.nonindex = true;\n                         } else {\n                             // not the correct variable, but still a variable\n@@ -2209,7 +2207,7 @@ fn var_def_id(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<HirId> {\n     if let ExprKind::Path(ref qpath) = expr.node {\n         let path_res = cx.tables.qpath_def(qpath, expr.hir_id);\n         if let Def::Local(node_id) = path_res {\n-            return Some(cx.tcx.hir().node_to_hir_id(node_id));\n+            return Some(node_id);\n         }\n     }\n     None\n@@ -2404,7 +2402,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n             then {\n                 match def {\n                     Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n-                        self.ids.insert(self.cx.tcx.hir().node_to_hir_id(node_id));\n+                        self.ids.insert(node_id);\n                     },\n                     Def::Static(def_id, mutable) => {\n                         self.def_ids.insert(def_id, mutable);"}, {"sha": "c751de865bee1b7d524e8d09103c74e1de0081cc", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "patch": "@@ -68,7 +68,7 @@ fn check_expression<'a, 'tcx: 'a>(\n                             if let hir::ExprKind::Path(path) = &args[0].node;\n                             if let Def::Local(ref local) = cx.tables.qpath_def(path, args[0].hir_id);\n                             then {\n-                                if arg_id == cx.tcx.hir().node_to_hir_id(*local) {\n+                                if arg_id == *local {\n                                     return (false, false)\n                                 }\n                             }"}, {"sha": "e5ce17cf1927cf9ab413ccbb7f2a4386c85da1ca", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "patch": "@@ -958,7 +958,7 @@ pub fn is_try<'a>(cx: &'_ LateContext<'_, '_>, expr: &'a Expr) -> Option<&'a Exp\n             if let PatKind::Binding(_, hir_id, _, None) = pat[0].node;\n             if let ExprKind::Path(QPath::Resolved(None, ref path)) = arm.body.node;\n             if let Def::Local(lid) = path.def;\n-            if cx.tcx.hir().node_to_hir_id(lid) == hir_id;\n+            if lid == hir_id;\n             then {\n                 return true;\n             }"}, {"sha": "14711b7fe1b4833999af54a322decfd7e9b65d41", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b2f2be085d9723fd72bd033b6fe81d8aa31c071/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=1b2f2be085d9723fd72bd033b6fe81d8aa31c071", "patch": "@@ -33,7 +33,7 @@ pub fn is_potentially_mutated<'a, 'tcx: 'a>(\n         Def::Local(id) | Def::Upvar(id, ..) => id,\n         _ => return true,\n     };\n-    mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&cx.tcx.hir().node_to_hir_id(id)))\n+    mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&id))\n }\n \n struct MutVarsDelegate {"}]}