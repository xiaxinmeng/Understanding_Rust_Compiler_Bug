{"sha": "6e6dec0cab0731c4c32f6592f02c02cf4fd03a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNmRlYzBjYWIwNzMxYzRjMzJmNjU5MmYwMmMwMmNmNGZkMDNhOGQ=", "commit": {"author": {"name": "aStoate", "email": "alan.stoate@gmail.com", "date": "2017-03-26T11:17:22Z"}, "committer": {"name": "aStoate", "email": "alan.stoate@gmail.com", "date": "2017-03-26T11:56:03Z"}, "message": "change string references in asciiext r? @steveklabnik", "tree": {"sha": "91b8676cbe281906d38f1cf4be4000b7d0301f94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b8676cbe281906d38f1cf4be4000b7d0301f94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e6dec0cab0731c4c32f6592f02c02cf4fd03a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6dec0cab0731c4c32f6592f02c02cf4fd03a8d", "html_url": "https://github.com/rust-lang/rust/commit/6e6dec0cab0731c4c32f6592f02c02cf4fd03a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e6dec0cab0731c4c32f6592f02c02cf4fd03a8d/comments", "author": {"login": "alanstoate", "id": 16761755, "node_id": "MDQ6VXNlcjE2NzYxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/16761755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanstoate", "html_url": "https://github.com/alanstoate", "followers_url": "https://api.github.com/users/alanstoate/followers", "following_url": "https://api.github.com/users/alanstoate/following{/other_user}", "gists_url": "https://api.github.com/users/alanstoate/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanstoate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanstoate/subscriptions", "organizations_url": "https://api.github.com/users/alanstoate/orgs", "repos_url": "https://api.github.com/users/alanstoate/repos", "events_url": "https://api.github.com/users/alanstoate/events{/privacy}", "received_events_url": "https://api.github.com/users/alanstoate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alanstoate", "id": 16761755, "node_id": "MDQ6VXNlcjE2NzYxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/16761755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanstoate", "html_url": "https://github.com/alanstoate", "followers_url": "https://api.github.com/users/alanstoate/followers", "following_url": "https://api.github.com/users/alanstoate/following{/other_user}", "gists_url": "https://api.github.com/users/alanstoate/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanstoate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanstoate/subscriptions", "organizations_url": "https://api.github.com/users/alanstoate/orgs", "repos_url": "https://api.github.com/users/alanstoate/repos", "events_url": "https://api.github.com/users/alanstoate/events{/privacy}", "received_events_url": "https://api.github.com/users/alanstoate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd4e2db785c8ec360a989f69891b1e97dd4d369", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd4e2db785c8ec360a989f69891b1e97dd4d369", "html_url": "https://github.com/rust-lang/rust/commit/7dd4e2db785c8ec360a989f69891b1e97dd4d369"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "ba2b059f8284be2a09eb9dbfd14a0a6e6ba445e4", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e6dec0cab0731c4c32f6592f02c02cf4fd03a8d/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6dec0cab0731c4c32f6592f02c02cf4fd03a8d/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=6e6dec0cab0731c4c32f6592f02c02cf4fd03a8d", "patch": "@@ -17,7 +17,7 @@ use mem;\n use ops::Range;\n use iter::FusedIterator;\n \n-/// Extension methods for ASCII-subset only operations on string slices.\n+/// Extension methods for ASCII-subset only operations.\n ///\n /// Be aware that operations on seemingly non-ASCII characters can sometimes\n /// have unexpected results. Consider this example:\n@@ -54,19 +54,21 @@ pub trait AsciiExt {\n     ///\n     /// let ascii = 'a';\n     /// let utf8 = '\u2764';\n+    /// let int_ascii = 97;\n     ///\n     /// assert!(ascii.is_ascii());\n     /// assert!(!utf8.is_ascii());\n+    /// assert!(int_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn is_ascii(&self) -> bool;\n \n-    /// Makes a copy of the string in ASCII upper case.\n+    /// Makes a copy of the value in it's ASCII upper case equivalent.\n     ///\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n     ///\n-    /// To uppercase the string in-place, use [`make_ascii_uppercase`].\n+    /// To uppercase the value in-place, use [`make_ascii_uppercase`].\n     ///\n     /// To uppercase ASCII characters in addition to non-ASCII characters, use\n     /// [`str::to_uppercase`].\n@@ -78,22 +80,24 @@ pub trait AsciiExt {\n     ///\n     /// let ascii = 'a';\n     /// let utf8 = '\u2764';\n+    /// let int_ascii = 97;\n     ///\n     /// assert_eq!('A', ascii.to_ascii_uppercase());\n     /// assert_eq!('\u2764', utf8.to_ascii_uppercase());\n+    /// assert_eq!(65, int_ascii.to_ascii_uppercase());\n     /// ```\n     ///\n     /// [`make_ascii_uppercase`]: #tymethod.make_ascii_uppercase\n     /// [`str::to_uppercase`]: ../primitive.str.html#method.to_uppercase\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_ascii_uppercase(&self) -> Self::Owned;\n \n-    /// Makes a copy of the string in ASCII lower case.\n+    /// Makes a copy of the value in it's ASCII lower case equivalent.\n     ///\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n     ///\n-    /// To lowercase the string in-place, use [`make_ascii_lowercase`].\n+    /// To lowercase the value in-place, use [`make_ascii_lowercase`].\n     ///\n     /// To lowercase ASCII characters in addition to non-ASCII characters, use\n     /// [`str::to_lowercase`].\n@@ -105,20 +109,22 @@ pub trait AsciiExt {\n     ///\n     /// let ascii = 'A';\n     /// let utf8 = '\u2764';\n+    /// let int_ascii = 65;\n     ///\n     /// assert_eq!('a', ascii.to_ascii_lowercase());\n     /// assert_eq!('\u2764', utf8.to_ascii_lowercase());\n+    /// assert_eq!(97, int_ascii.to_ascii_lowercase());\n     /// ```\n     ///\n     /// [`make_ascii_lowercase`]: #tymethod.make_ascii_lowercase\n     /// [`str::to_lowercase`]: ../primitive.str.html#method.to_lowercase\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_ascii_lowercase(&self) -> Self::Owned;\n \n-    /// Checks that two strings are an ASCII case-insensitive match.\n+    /// Checks that two values are an ASCII case-insensitive match.\n     ///\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\n-    /// but without allocating and copying temporary strings.\n+    /// but without allocating and copying temporaries.\n     ///\n     /// # Examples\n     ///\n@@ -142,7 +148,7 @@ pub trait AsciiExt {\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n     ///\n-    /// To return a new uppercased string without modifying the existing one, use\n+    /// To return a new uppercased value without modifying the existing one, use\n     /// [`to_ascii_uppercase`].\n     ///\n     /// # Examples\n@@ -166,7 +172,7 @@ pub trait AsciiExt {\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n     ///\n-    /// To return a new lowercased string without modifying the existing one, use\n+    /// To return a new lowercased value without modifying the existing one, use\n     /// [`to_ascii_lowercase`].\n     ///\n     /// # Examples"}]}