{"sha": "4352a8554f3765b98d27c1a0b1a170414f82b199", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTJhODU1NGYzNzY1Yjk4ZDI3YzFhMGIxYTE3MDQxNGY4MmIxOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-08T01:04:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-08T01:04:36Z"}, "message": "Auto merge of #31986 - ashleysommer:emscripten_fixes, r=alexcrichton\n\nFix building libstd on emscripten targets.\n\nThe main cause of the problem is that libstd/os/mod.rs treats emscripten targets as an alias of linux targets, whereas liblibc treats emscripten targets as musl-compliant, so it gets a slightly different struct stat64 defined.\nThis commit adds conditional compilation checks to use the correct timestamp format on fs metadata functions in the case of compiling to emscripten targets.\n\nThis commit also depends needs https://github.com/ashleysommer/rust/commit/f1575cff2d631e977038fdba3fa3422ba5f8f2fe applied in order to successfully build libstd with emscripten target.", "tree": {"sha": "1e67584b82b9f652f8bb1cc7e387746499288a0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e67584b82b9f652f8bb1cc7e387746499288a0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4352a8554f3765b98d27c1a0b1a170414f82b199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4352a8554f3765b98d27c1a0b1a170414f82b199", "html_url": "https://github.com/rust-lang/rust/commit/4352a8554f3765b98d27c1a0b1a170414f82b199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4352a8554f3765b98d27c1a0b1a170414f82b199/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388ccda455140e51456980efc07d175c19dcf005", "url": "https://api.github.com/repos/rust-lang/rust/commits/388ccda455140e51456980efc07d175c19dcf005", "html_url": "https://github.com/rust-lang/rust/commit/388ccda455140e51456980efc07d175c19dcf005"}, {"sha": "660bbf4f6f4ce7a3d9e4fa7fdfc5e7c87145e049", "url": "https://api.github.com/repos/rust-lang/rust/commits/660bbf4f6f4ce7a3d9e4fa7fdfc5e7c87145e049", "html_url": "https://github.com/rust-lang/rust/commit/660bbf4f6f4ce7a3d9e4fa7fdfc5e7c87145e049"}], "stats": {"total": 240, "additions": 232, "deletions": 8}, "files": [{"sha": "8056ce4fdc4ee4ba02365682be02ff5f5000acce", "filename": "src/libstd/os/emscripten/fs.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs?ref=4352a8554f3765b98d27c1a0b1a170414f82b199", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::emscripten::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat64\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "8ec44b9fae49759aef99fb752456b87be4200050", "filename": "src/libstd/os/emscripten/mod.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fos%2Femscripten%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fos%2Femscripten%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Fmod.rs?ref=4352a8554f3765b98d27c1a0b1a170414f82b199", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Linux-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod raw;\n+pub mod fs;"}, {"sha": "9da400a69131b58c155c87eb4e32418cc1f9743f", "filename": "src/libstd/os/emscripten/raw.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Fraw.rs?ref=4352a8554f3765b98d27c1a0b1a170414f82b199", "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Emscripten-specific raw type definitions\n+//! This is basically exactly the same as the linux definitions,\n+//! except using the musl-specific stat64 structure in liblibc.\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(since = \"1.8.0\",\n+                    reason = \"these type aliases are no longer supported by \\\n+                              the standard library, the `libc` crate on \\\n+                              crates.io should be used instead for the correct \\\n+                              definitions\")]\n+#![allow(deprecated)]\n+\n+use os::raw::{c_long, c_short, c_uint, c_ulong};\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+\n+#[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = c_ulong;\n+\n+#[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: u64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub __pad1: c_short,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub __st_ino: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: u64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub __pad2: c_uint,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: i64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: i32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: i64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: u64,\n+}"}, {"sha": "a91d251fc120aaa504823dbfcd68afa4d27bfb57", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=4352a8554f3765b98d27c1a0b1a170414f82b199", "patch": "@@ -31,10 +31,6 @@ pub use sys::ext as windows;\n #[cfg(target_os = \"netbsd\")]   pub mod netbsd;\n #[cfg(target_os = \"openbsd\")]   pub mod openbsd;\n #[cfg(target_os = \"solaris\")]   pub mod solaris;\n-\n-// Emscripten is just like linux\n-#[cfg(target_os = \"emscripten\")]\n-#[path = \"linux/mod.rs\"]\n-pub mod emscripten;\n+#[cfg(target_os = \"emscripten\")] pub mod emscripten;\n \n pub mod raw;"}, {"sha": "d1b4b1c5c0895e33c3dbdc825d1eb78ab9892f22", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4352a8554f3765b98d27c1a0b1a170414f82b199/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=4352a8554f3765b98d27c1a0b1a170414f82b199", "patch": "@@ -25,15 +25,19 @@ use sys::time::SystemTime;\n use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n use libc::{stat64, fstat64, lstat64, off64_t, ftruncate64, lseek64, dirent64, readdir64_r, open64};\n #[cfg(target_os = \"android\")]\n use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, off64_t, ftruncate64, lseek64,\n            dirent as dirent64, open as open64};\n-#[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n+#[cfg(not(any(target_os = \"linux\",\n+              target_os = \"emscripten\",\n+              target_os = \"android\")))]\n use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, off_t as off64_t,\n            ftruncate as ftruncate64, lseek as lseek64, dirent as dirent64, open as open64};\n-#[cfg(not(any(target_os = \"linux\", target_os = \"solaris\")))]\n+#[cfg(not(any(target_os = \"linux\",\n+              target_os = \"emscripten\",\n+              target_os = \"solaris\")))]\n use libc::{readdir_r as readdir64_r};\n \n pub struct File(FileDesc);"}]}