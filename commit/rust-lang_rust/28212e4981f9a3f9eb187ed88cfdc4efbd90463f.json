{"sha": "28212e4981f9a3f9eb187ed88cfdc4efbd90463f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MjEyZTQ5ODFmOWEzZjllYjE4N2VkODhjZmRjNGVmYmQ5MDQ2M2Y=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-04T12:24:49Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-04T12:24:49Z"}, "message": "fixed dogfood by using snippet instead of the (escaped) literal string", "tree": {"sha": "f84d7215b563678700faf260cb42051a9d4ef32e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f84d7215b563678700faf260cb42051a9d4ef32e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28212e4981f9a3f9eb187ed88cfdc4efbd90463f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28212e4981f9a3f9eb187ed88cfdc4efbd90463f", "html_url": "https://github.com/rust-lang/rust/commit/28212e4981f9a3f9eb187ed88cfdc4efbd90463f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28212e4981f9a3f9eb187ed88cfdc4efbd90463f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb148a50b2766d1baf2a7e75474939d0f02e27ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb148a50b2766d1baf2a7e75474939d0f02e27ac", "html_url": "https://github.com/rust-lang/rust/commit/fb148a50b2766d1baf2a7e75474939d0f02e27ac"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "e745c0960eae697d912e8a60eafcb9314ea7881d", "filename": "src/unicode.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28212e4981f9a3f9eb187ed88cfdc4efbd90463f/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28212e4981f9a3f9eb187ed88cfdc4efbd90463f/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=28212e4981f9a3f9eb187ed88cfdc4efbd90463f", "patch": "@@ -4,7 +4,7 @@ use syntax::codemap::Span;\n \n use unicode_normalization::UnicodeNormalization;\n \n-use utils::span_help_and_lint;\n+use utils::{snippet, span_help_and_lint};\n \n declare_lint!{ pub ZERO_WIDTH_SPACE, Deny,\n                \"using a zero-width space in a string literal, which is confusing\" }\n@@ -26,8 +26,8 @@ impl LintPass for Unicode {\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let ExprLit(ref lit) = expr.node {\n-            if let LitStr(ref string, _) = lit.node {\n-                check_str(cx, string, lit.span)\n+            if let LitStr(_, _) = lit.node {\n+                check_str(cx, lit.span)\n             }\n         }\n     }\n@@ -45,7 +45,8 @@ fn escape<T: Iterator<Item=char>>(s: T) -> String {\n     result\n }\n \n-fn check_str(cx: &Context, string: &str, span: Span) {\n+fn check_str(cx: &Context, span: Span) {\n+    let string = snippet(cx, span, \"\");\n     if string.contains('\\u{200B}') {\n         span_help_and_lint(cx, ZERO_WIDTH_SPACE, span,\n             \"zero-width space detected\",\n@@ -62,12 +63,11 @@ fn check_str(cx: &Context, string: &str, span: Span) {\n                     escape(string.nfc())\n                 }));\n     }\n-    if string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n-        if cx.current_level(NON_ASCII_LITERAL) == Level::Allow {\n-            span_help_and_lint(cx, UNICODE_NOT_NFC, span,\n-                \"non-nfc unicode sequence detected\",\n-                &format!(\"Consider replacing the string with:\\n\\\"{}\\\"\",\n-                    string.nfc().collect::<String>()));\n-        }\n+    if cx.current_level(NON_ASCII_LITERAL) == Level::Allow &&\n+            string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n+        span_help_and_lint(cx, UNICODE_NOT_NFC, span,\n+            \"non-nfc unicode sequence detected\",\n+            &format!(\"Consider replacing the string with:\\n\\\"{}\\\"\",\n+                string.nfc().collect::<String>()));\n     }\n }"}]}