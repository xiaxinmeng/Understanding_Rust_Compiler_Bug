{"sha": "9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOThmMWQyMjYzMDU5MTNjN2MyMDViZDk4YjZlYTZiOWZlM2I4Y2U=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-22T22:00:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-22T22:00:48Z"}, "message": "Rollup merge of #76941 - clarfonthey:is_subnormal, r=m-ou-se\n\nAdd f{32,64}::is_subnormal\n\nThe docs recommend that you use dedicated methods instead of calling `classify` directly, although there isn't actually a way of checking if a number is subnormal without calling classify. There are dedicated methods for all other forms, excluding `is_zero` (which is just `== 0.0` anyway).", "tree": {"sha": "16f64087d89671cc4d4df8da21243d486c54bcdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16f64087d89671cc4d4df8da21243d486c54bcdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfut+QCRBK7hj4Ov3rIwAAdHIIACrK9CMI754mPtEncakeF82j\natVoff1SdU75E8NrOOPi9uOyi0aTRdZ8PhxNhKgmRN91QyDYNbdRtlLxKETo9dEB\n06/croWCtgnaO7yUOgFIriqRFmND7xZPmj/Jx2hvsWF13PvZcOcNemVeGPUpawUh\nDSWVHw57E7RsA/KMDbJdXH6jRWrZCMvUjxDDz2d4sF1ENvBcGjE2m9SrqGUgn+/f\n446uxxppU8ladgicGZkouqXSGaVRd/rBECGzUTfU44zNOUgpIrz5DtM9kSE68Xjy\nSrnj1JG0bc8Rp7BrdvABX/XQRcLZ1sFf4wNP1MjXEzq+JkQEZl2lLPW4E9bX7xE=\n=sEx7\n-----END PGP SIGNATURE-----\n", "payload": "tree 16f64087d89671cc4d4df8da21243d486c54bcdd\nparent c643dd2ec8fed2852f5eee8f776d657293a6a8f2\nparent cf26f2f00eed908038e6e7606b1275057b379984\nauthor Mara Bos <m-ou.se@m-ou.se> 1606082448 +0100\ncommitter GitHub <noreply@github.com> 1606082448 +0100\n\nRollup merge of #76941 - clarfonthey:is_subnormal, r=m-ou-se\n\nAdd f{32,64}::is_subnormal\n\nThe docs recommend that you use dedicated methods instead of calling `classify` directly, although there isn't actually a way of checking if a number is subnormal without calling classify. There are dedicated methods for all other forms, excluding `is_zero` (which is just `== 0.0` anyway).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce", "html_url": "https://github.com/rust-lang/rust/commit/9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "html_url": "https://github.com/rust-lang/rust/commit/c643dd2ec8fed2852f5eee8f776d657293a6a8f2"}, {"sha": "cf26f2f00eed908038e6e7606b1275057b379984", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf26f2f00eed908038e6e7606b1275057b379984", "html_url": "https://github.com/rust-lang/rust/commit/cf26f2f00eed908038e6e7606b1275057b379984"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "33df175bfc54d628ff3db0f9fd1763bd5b4e92eb", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce", "patch": "@@ -441,6 +441,32 @@ impl f32 {\n         self.abs_private() < Self::INFINITY\n     }\n \n+    /// Returns `true` if the number is [subnormal].\n+    ///\n+    /// ```\n+    /// #![feature(is_subnormal)]\n+    /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n+    /// let max = f32::MAX;\n+    /// let lower_than_min = 1.0e-40_f32;\n+    /// let zero = 0.0_f32;\n+    ///\n+    /// assert!(!min.is_subnormal());\n+    /// assert!(!max.is_subnormal());\n+    ///\n+    /// assert!(!zero.is_subnormal());\n+    /// assert!(!f32::NAN.is_subnormal());\n+    /// assert!(!f32::INFINITY.is_subnormal());\n+    /// // Values between `0` and `min` are Subnormal.\n+    /// assert!(lower_than_min.is_subnormal());\n+    /// ```\n+    /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[unstable(feature = \"is_subnormal\", issue = \"79288\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    #[inline]\n+    pub const fn is_subnormal(self) -> bool {\n+        matches!(self.classify(), FpCategory::Subnormal)\n+    }\n+\n     /// Returns `true` if the number is neither zero, infinite,\n     /// [subnormal], or `NaN`.\n     ///"}, {"sha": "b85e8deb6d22c47606b95456a5698b0b37a1e751", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=9b98f1d226305913c7c205bd98b6ea6b9fe3b8ce", "patch": "@@ -440,6 +440,32 @@ impl f64 {\n         self.abs_private() < Self::INFINITY\n     }\n \n+    /// Returns `true` if the number is [subnormal].\n+    ///\n+    /// ```\n+    /// #![feature(is_subnormal)]\n+    /// let min = f64::MIN_POSITIVE; // 2.2250738585072014e-308_f64\n+    /// let max = f64::MAX;\n+    /// let lower_than_min = 1.0e-308_f64;\n+    /// let zero = 0.0_f64;\n+    ///\n+    /// assert!(!min.is_subnormal());\n+    /// assert!(!max.is_subnormal());\n+    ///\n+    /// assert!(!zero.is_subnormal());\n+    /// assert!(!f64::NAN.is_subnormal());\n+    /// assert!(!f64::INFINITY.is_subnormal());\n+    /// // Values between `0` and `min` are Subnormal.\n+    /// assert!(lower_than_min.is_subnormal());\n+    /// ```\n+    /// [subnormal]: https://en.wikipedia.org/wiki/Denormal_number\n+    #[unstable(feature = \"is_subnormal\", issue = \"79288\")]\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    #[inline]\n+    pub const fn is_subnormal(self) -> bool {\n+        matches!(self.classify(), FpCategory::Subnormal)\n+    }\n+\n     /// Returns `true` if the number is neither zero, infinite,\n     /// [subnormal], or `NaN`.\n     ///"}]}