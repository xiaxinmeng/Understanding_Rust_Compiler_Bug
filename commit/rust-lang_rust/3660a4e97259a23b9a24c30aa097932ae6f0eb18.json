{"sha": "3660a4e97259a23b9a24c30aa097932ae6f0eb18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NjBhNGU5NzI1OWEyM2I5YTI0YzMwYWEwOTc5MzJhZTZmMGViMTg=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-04T15:50:34Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-10T12:54:47Z"}, "message": "Applied suggestions", "tree": {"sha": "d740a6fdc515c949256ab1798ad06bb0f322b387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d740a6fdc515c949256ab1798ad06bb0f322b387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3660a4e97259a23b9a24c30aa097932ae6f0eb18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDpmJcACgkQZSV3NIU3\nbZKv8A/7BupNiOqRt7ZrsX+SOOkxA3ZVTUUfohyjkuogcbFMw+2Z7GxcnW5iX7lh\nKSntdr77i/JfUaKSYSVwaMugRZ/HAtvnoT32j/NOP/KS8jBZ3nCsVkMGzkCS/2ru\nDOC48zvAsFSbfj3gY8KQq37Eonl4RCdbrTRK6RXlAq9AmOx4Nx6vtuYAQoWoGo1H\nawvCUEO4Z/fmEB/vRkwtEoDOVyeJxCYD5Lr8boK2v29iCCU7pANbnz9Kl7HIirHO\nD4WC19BUwDDnRDybEupN7jv/DE5cQT+kL7c2ZxJzG3FPN5SIVcq0W10LzsPfyVco\n63lbdUcbwDlr11EziYkPnqfr1XrCeQLmhcdPaZa4F5aWuhLkSnTURciv4zQVbWaL\nHyqz50OHDr0icLBYGewJRUKCW9HlyMXcGYZ/xaTUv3kdn0wr8/7W5fNUbmgATrwp\nhvACfMuJa0gKbOwrIrbhs/85hpp9fFJuD2WAxqGZgAunwHo1xG9ocngvcL2txGiO\nPT23eTGZ4BEW/dH+KwRHgia4WiSNTkNWPJ82+v34OGLLoszKPOr6av5VY8vZLND2\nFmeZE8DRjEd/ptQIC6oztFEdjARZ+nF6aYT1GBQDjGzoE6tegv9GXDlMZKJy6CL/\nbBGD4HXsL5myqY/1XKvrbXeEOxDhUj+vF5bpxblI/KneJbfBkyQ=\n=nQ3M\n-----END PGP SIGNATURE-----", "payload": "tree d740a6fdc515c949256ab1798ad06bb0f322b387\nparent 2db927d8d82260759e4aaa183dbebd0adbb00177\nauthor Deadbeef <ent3rm4n@gmail.com> 1625413834 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1625921687 +0800\n\nApplied suggestions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3660a4e97259a23b9a24c30aa097932ae6f0eb18", "html_url": "https://github.com/rust-lang/rust/commit/3660a4e97259a23b9a24c30aa097932ae6f0eb18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3660a4e97259a23b9a24c30aa097932ae6f0eb18/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db927d8d82260759e4aaa183dbebd0adbb00177", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db927d8d82260759e4aaa183dbebd0adbb00177", "html_url": "https://github.com/rust-lang/rust/commit/2db927d8d82260759e4aaa183dbebd0adbb00177"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "24a5a007dedf693cf5ae83b2f2bd92ff41c24daf", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3660a4e97259a23b9a24c30aa097932ae6f0eb18/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3660a4e97259a23b9a24c30aa097932ae6f0eb18/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=3660a4e97259a23b9a24c30aa097932ae6f0eb18", "patch": "@@ -349,6 +349,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     gated!(cmse_nonsecure_entry, AssumedUsed, template!(Word), experimental!(cmse_nonsecure_entry)),\n+    // RFC 2632\n+    gated!(\n+        default_method_body_is_const, AssumedUsed, template!(Word), const_trait_impl,\n+        \"`default_method_body_is_const` is a temporary placeholder for declaring default bodies \\\n+        as `const`, which may be removed or renamed in the future.\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n@@ -470,11 +476,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n     rustc_attr!(rustc_legacy_const_generics, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n-    gated!(\n-        default_method_body_is_const, AssumedUsed, template!(Word), const_trait_impl,\n-        \"the `#[default_method_body_is_const]` attribute marks a default method of a trait \\\n-        as const, so it does not need to be duplicated by a const impl.\"\n-    ),\n \n     // ==========================================================================\n     // Internal attributes, Layout related:"}, {"sha": "6ee54cfe37f306cbbc9a18cdf1885ae8b7c668dc", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3660a4e97259a23b9a24c30aa097932ae6f0eb18/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3660a4e97259a23b9a24c30aa097932ae6f0eb18/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=3660a4e97259a23b9a24c30aa097932ae6f0eb18", "patch": "@@ -93,17 +93,12 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n                             kind: ty::AssocKind::Fn, ident, defaultness, ..\n                         } = self.tcx.associated_item(*did)\n                         {\n-                            match (\n-                                self.tcx.has_attr(*did, sym::default_method_body_is_const),\n-                                defaultness.has_value(),\n-                            ) {\n-                                (false, true) => {\n-                                    to_implement.insert(ident);\n-                                }\n-                                // ignore functions that do not have default bodies\n-                                // if those are unimplemented it will be catched by\n-                                // typeck.\n-                                _ => {}\n+                            // we can ignore functions that do not have default bodies:\n+                            // if those are unimplemented it will be catched by typeck.\n+                            if defaultness.has_value()\n+                                && !self.tcx.has_attr(*did, sym::default_method_body_is_const)\n+                            {\n+                                to_implement.insert(ident);\n                             }\n                         }\n                     }"}]}