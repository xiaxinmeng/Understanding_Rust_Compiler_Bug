{"sha": "b81d164f61804764c9e7f8f670bb7a79644c4c1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MWQxNjRmNjE4MDQ3NjRjOWU3ZjhmNjcwYmI3YTc5NjQ0YzRjMWE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-29T09:37:33Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-29T09:37:33Z"}, "message": "Address review comments", "tree": {"sha": "5044b787ede9ec46b0e1a5bd9291fee23aacb2bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5044b787ede9ec46b0e1a5bd9291fee23aacb2bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b81d164f61804764c9e7f8f670bb7a79644c4c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b81d164f61804764c9e7f8f670bb7a79644c4c1a", "html_url": "https://github.com/rust-lang/rust/commit/b81d164f61804764c9e7f8f670bb7a79644c4c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b81d164f61804764c9e7f8f670bb7a79644c4c1a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d67a1b871c41fb498eeffcadfa33f1fa4c35774", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d67a1b871c41fb498eeffcadfa33f1fa4c35774", "html_url": "https://github.com/rust-lang/rust/commit/7d67a1b871c41fb498eeffcadfa33f1fa4c35774"}], "stats": {"total": 90, "additions": 46, "deletions": 44}, "files": [{"sha": "25320a8d6a7858f1dd242be3959b44686b9a21c7", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b81d164f61804764c9e7f8f670bb7a79644c4c1a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81d164f61804764c9e7f8f670bb7a79644c4c1a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b81d164f61804764c9e7f8f670bb7a79644c4c1a", "patch": "@@ -84,13 +84,11 @@ impl std::ops::Deref for CrateMetadataRef<'_> {\n \n struct CrateDump<'a>(&'a CStore);\n \n-fn crate_dump(cstore: &'a CStore) -> impl std::fmt::Debug + 'a {\n-    CrateDump(cstore)\n-}\n-\n impl<'a> std::fmt::Debug for CrateDump<'a> {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         writeln!(fmt, \"resolved crates:\")?;\n+        // `iter_crate_data` does not allow returning values. Thus we use a mutable variable here\n+        // that aggregates the value (and any errors that could happen).\n         let mut res = Ok(());\n         self.0.iter_crate_data(|cnum, data| {\n             res = res.and(\n@@ -878,7 +876,7 @@ impl<'a> CrateLoader<'a> {\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);\n \n-        info!(\"{:?}\", crate_dump(&self.cstore));\n+        info!(\"{:?}\", CrateDump(&self.cstore));\n \n         self.report_unused_deps(krate);\n     }"}, {"sha": "d307131a99036970d8e35d6e47db505cd6e32403", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b81d164f61804764c9e7f8f670bb7a79644c4c1a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81d164f61804764c9e7f8f670bb7a79644c4c1a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=b81d164f61804764c9e7f8f670bb7a79644c4c1a", "patch": "@@ -1905,46 +1905,50 @@ macro_rules! sty_debug_print {\n \n impl<'tcx> TyCtxt<'tcx> {\n     pub fn debug_stats(self) -> impl std::fmt::Debug + 'tcx {\n-        DebugStats(self)\n-    }\n-}\n+        struct DebugStats<'tcx>(TyCtxt<'tcx>);\n+\n+        impl std::fmt::Debug for DebugStats<'tcx> {\n+            fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+                sty_debug_print!(\n+                    fmt,\n+                    self.0,\n+                    Adt,\n+                    Array,\n+                    Slice,\n+                    RawPtr,\n+                    Ref,\n+                    FnDef,\n+                    FnPtr,\n+                    Placeholder,\n+                    Generator,\n+                    GeneratorWitness,\n+                    Dynamic,\n+                    Closure,\n+                    Tuple,\n+                    Bound,\n+                    Param,\n+                    Infer,\n+                    Projection,\n+                    Opaque,\n+                    Foreign\n+                )?;\n+\n+                writeln!(fmt, \"InternalSubsts interner: #{}\", self.0.interners.substs.len())?;\n+                writeln!(fmt, \"Region interner: #{}\", self.0.interners.region.len())?;\n+                writeln!(fmt, \"Stability interner: #{}\", self.0.stability_interner.len())?;\n+                writeln!(\n+                    fmt,\n+                    \"Const Stability interner: #{}\",\n+                    self.0.const_stability_interner.len()\n+                )?;\n+                writeln!(fmt, \"Allocation interner: #{}\", self.0.allocation_interner.len())?;\n+                writeln!(fmt, \"Layout interner: #{}\", self.0.layout_interner.len())?;\n+\n+                Ok(())\n+            }\n+        }\n \n-struct DebugStats<'tcx>(TyCtxt<'tcx>);\n-\n-impl std::fmt::Debug for DebugStats<'tcx> {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        sty_debug_print!(\n-            fmt,\n-            self.0,\n-            Adt,\n-            Array,\n-            Slice,\n-            RawPtr,\n-            Ref,\n-            FnDef,\n-            FnPtr,\n-            Placeholder,\n-            Generator,\n-            GeneratorWitness,\n-            Dynamic,\n-            Closure,\n-            Tuple,\n-            Bound,\n-            Param,\n-            Infer,\n-            Projection,\n-            Opaque,\n-            Foreign\n-        )?;\n-\n-        writeln!(fmt, \"InternalSubsts interner: #{}\", self.0.interners.substs.len())?;\n-        writeln!(fmt, \"Region interner: #{}\", self.0.interners.region.len())?;\n-        writeln!(fmt, \"Stability interner: #{}\", self.0.stability_interner.len())?;\n-        writeln!(fmt, \"Const Stability interner: #{}\", self.0.const_stability_interner.len())?;\n-        writeln!(fmt, \"Allocation interner: #{}\", self.0.allocation_interner.len())?;\n-        writeln!(fmt, \"Layout interner: #{}\", self.0.layout_interner.len())?;\n-\n-        Ok(())\n+        DebugStats(self)\n     }\n }\n "}]}