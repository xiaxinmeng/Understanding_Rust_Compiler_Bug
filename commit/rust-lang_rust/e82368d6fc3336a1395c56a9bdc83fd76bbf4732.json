{"sha": "e82368d6fc3336a1395c56a9bdc83fd76bbf4732", "node_id": "C_kwDOAAsO6NoAKGU4MjM2OGQ2ZmMzMzM2YTEzOTVjNTZhOWJkYzgzZmQ3NmJiZjQ3MzI", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-04-12T20:38:27Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-06-06T11:10:13Z"}, "message": "Add examples to docs\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "726cf05c208f4e10baa46df824fdcff2ae6c20ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/726cf05c208f4e10baa46df824fdcff2ae6c20ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82368d6fc3336a1395c56a9bdc83fd76bbf4732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82368d6fc3336a1395c56a9bdc83fd76bbf4732", "html_url": "https://github.com/rust-lang/rust/commit/e82368d6fc3336a1395c56a9bdc83fd76bbf4732", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82368d6fc3336a1395c56a9bdc83fd76bbf4732/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda", "html_url": "https://github.com/rust-lang/rust/commit/17730e66f6e1e8c6d5be490b27ee6cf6f30c0fda"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "a4d902150f879d27d402eb9f24a4e86eeeb28342", "filename": "library/core/src/any.rs", "status": "modified", "additions": 76, "deletions": 2, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e82368d6fc3336a1395c56a9bdc83fd76bbf4732/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82368d6fc3336a1395c56a9bdc83fd76bbf4732/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=e82368d6fc3336a1395c56a9bdc83fd76bbf4732", "patch": "@@ -134,10 +134,10 @@\n //! }\n //!\n //! impl Provider for SomeConcreteType {\n-//!     fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+//!     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n //!         // Provide a string reference. We could provide multiple values with\n //!         // different types here.\n-//!         req.provide_ref::<String>(&self.some_string);\n+//!         demand.provide_ref::<String>(&self.some_string);\n //!     }\n //! }\n //!\n@@ -780,11 +780,40 @@ pub const fn type_name_of_val<T: ?Sized>(_val: &T) -> &'static str {\n pub trait Provider {\n     /// Data providers should implement this method to provide *all* values they are able to\n     /// provide by using `demand`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Provides a reference to a field with type `String` as a `&str`.\n+    ///\n+    /// ```rust\n+    /// # #![feature(provide_any)]\n+    /// use std::any::{Provider, Demand};\n+    /// # struct SomeConcreteType { field: String }\n+    ///\n+    /// impl Provider for SomeConcreteType {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         demand.provide_ref::<str>(&self.field);\n+    ///     }\n+    /// }\n+    /// ```\n     #[unstable(feature = \"provide_any\", issue = \"none\")]\n     fn provide<'a>(&'a self, demand: &mut Demand<'a>);\n }\n \n /// Request a value from the `Provider`.\n+///\n+/// # Examples\n+///\n+/// Get a string value from a provider.\n+///\n+/// ```rust\n+/// # #![feature(provide_any)]\n+/// use std::any::{Provider, request_value};\n+///\n+/// fn get_string<P: Provider>(provider: &P) -> String {\n+///     request_value::<String, _>(provider).unwrap()\n+/// }\n+/// ```\n #[unstable(feature = \"provide_any\", issue = \"none\")]\n pub fn request_value<'a, T, P>(provider: &'a P) -> Option<T>\n where\n@@ -795,6 +824,19 @@ where\n }\n \n /// Request a reference from the `Provider`.\n+///\n+/// # Examples\n+///\n+/// Get a string reference from a provider.\n+///\n+/// ```rust\n+/// # #![feature(provide_any)]\n+/// use std::any::{Provider, request_ref};\n+///\n+/// fn get_str<P: Provider>(provider: &P) -> &str {\n+///     request_ref::<str, _>(provider).unwrap()\n+/// }\n+/// ```\n #[unstable(feature = \"provide_any\", issue = \"none\")]\n pub fn request_ref<'a, T, P>(provider: &'a P) -> Option<&'a T>\n where\n@@ -829,6 +871,22 @@ pub struct Demand<'a>(dyn Erased<'a> + 'a);\n \n impl<'a> Demand<'a> {\n     /// Provide a value or other type with only static lifetimes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Provides a `String` by cloning.\n+    ///\n+    /// ```rust\n+    /// # #![feature(provide_any)]\n+    /// use std::any::{Provider, Demand};\n+    /// # struct SomeConcreteType { field: String }\n+    ///\n+    /// impl Provider for SomeConcreteType {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         demand.provide_value::<String, _>(|| self.field.clone());\n+    ///     }\n+    /// }\n+    /// ```\n     #[unstable(feature = \"provide_any\", issue = \"none\")]\n     pub fn provide_value<T, F>(&mut self, fulfil: F) -> &mut Self\n     where\n@@ -840,6 +898,22 @@ impl<'a> Demand<'a> {\n \n     /// Provide a reference, note that the referee type must be bounded by `'static`,\n     /// but may be unsized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Provides a reference to a field as a `&str`.\n+    ///\n+    /// ```rust\n+    /// # #![feature(provide_any)]\n+    /// use std::any::{Provider, Demand};\n+    /// # struct SomeConcreteType { field: String }\n+    ///\n+    /// impl Provider for SomeConcreteType {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         demand.provide_ref::<str>(&self.field);\n+    ///     }\n+    /// }\n+    /// ```\n     #[unstable(feature = \"provide_any\", issue = \"none\")]\n     pub fn provide_ref<T: ?Sized + 'static>(&mut self, value: &'a T) -> &mut Self {\n         self.provide::<tags::Ref<tags::MaybeSizedValue<T>>>(value)"}]}