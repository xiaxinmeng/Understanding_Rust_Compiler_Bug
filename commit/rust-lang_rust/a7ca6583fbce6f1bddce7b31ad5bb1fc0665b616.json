{"sha": "a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Y2E2NTgzZmJjZTZmMWJkZGNlN2IzMWFkNWJiMWZjMDY2NWI2MTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T13:40:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T13:40:48Z"}, "message": "Handwrite Stmt", "tree": {"sha": "b148be3186c9de3de526fe798eac36f27517c178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b148be3186c9de3de526fe798eac36f27517c178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "html_url": "https://github.com/rust-lang/rust/commit/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d38b0dce1884dab0da7394ccc979eef0a21076c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d38b0dce1884dab0da7394ccc979eef0a21076c", "html_url": "https://github.com/rust-lang/rust/commit/4d38b0dce1884dab0da7394ccc979eef0a21076c"}], "stats": {"total": 112, "additions": 61, "deletions": 51}, "files": [{"sha": "d536bb1e7d63492418248b07e3c3f5db548fd4d5", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "patch": "@@ -17,7 +17,7 @@ use crate::{\n \n pub use self::{\n     expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n-    generated::{nodes::*, tokens::*},\n+    generated::*,\n     node_ext::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n         StructKind, TypeBoundKind, VisibilityKind,"}, {"sha": "ba55f1c427c8361df49b95ad568f26cda0ed864e", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "patch": "@@ -1,6 +1,37 @@\n //! This file is actually hand-written, but the submodules are indeed generated.\n-\n #[rustfmt::skip]\n-pub(super) mod nodes;\n+mod nodes;\n #[rustfmt::skip]\n-pub(super) mod tokens;\n+mod tokens;\n+\n+use crate::{\n+    AstNode,\n+    SyntaxKind::{self, *},\n+    SyntaxNode,\n+};\n+\n+pub use {nodes::*, tokens::*};\n+\n+// Stmt is the only nested enum, so it's easier to just hand-write it\n+impl AstNode for Stmt {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            LET_STMT | EXPR_STMT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            LET_STMT => Stmt::LetStmt(LetStmt { syntax }),\n+            EXPR_STMT => Stmt::ExprStmt(ExprStmt { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            Stmt::LetStmt(it) => &it.syntax,\n+            Stmt::ExprStmt(it) => &it.syntax,\n+        }\n+    }\n+}"}, {"sha": "8ef72fec71e429373536acd0d21ec44b73408e59", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "patch": "@@ -3380,28 +3380,6 @@ impl From<LetStmt> for Stmt {\n impl From<ExprStmt> for Stmt {\n     fn from(node: ExprStmt) -> Stmt { Stmt::ExprStmt(node) }\n }\n-impl AstNode for Stmt {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LET_STMT | EXPR_STMT => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            LET_STMT => Stmt::LetStmt(LetStmt { syntax }),\n-            EXPR_STMT => Stmt::ExprStmt(ExprStmt { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            Stmt::LetStmt(it) => &it.syntax,\n-            Stmt::ExprStmt(it) => &it.syntax,\n-        }\n-    }\n-}\n impl std::fmt::Display for Item {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "e3d4269f6e4f59388fe41a23da863839a79aaa97", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=a7ca6583fbce6f1bddce7b31ad5bb1fc0665b616", "patch": "@@ -153,25 +153,10 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n                 quote!(impl ast::#trait_name for #name {})\n             });\n \n-            (\n-                quote! {\n-                    #[pretty_doc_comment_placeholder_workaround]\n-                    #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-                    pub enum #name {\n-                        #(#variants(#variants),)*\n-                    }\n-\n-                    #(#traits)*\n-                },\n+            let ast_node = if en.name == \"Stmt\" {\n+                quote! {}\n+            } else {\n                 quote! {\n-                    #(\n-                    impl From<#variants> for #name {\n-                        fn from(node: #variants) -> #name {\n-                            #name::#variants(node)\n-                        }\n-                    }\n-                    )*\n-\n                     impl AstNode for #name {\n                         fn can_cast(kind: SyntaxKind) -> bool {\n                             match kind {\n@@ -196,6 +181,28 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n                             }\n                         }\n                     }\n+                }\n+            };\n+\n+            (\n+                quote! {\n+                    #[pretty_doc_comment_placeholder_workaround]\n+                    #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+                    pub enum #name {\n+                        #(#variants(#variants),)*\n+                    }\n+\n+                    #(#traits)*\n+                },\n+                quote! {\n+                    #(\n+                        impl From<#variants> for #name {\n+                            fn from(node: #variants) -> #name {\n+                                #name::#variants(node)\n+                            }\n+                        }\n+                    )*\n+                    #ast_node\n                 },\n             )\n         })\n@@ -497,13 +504,7 @@ fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc::default();\n     res.tokens = vec![\"Whitespace\".into(), \"Comment\".into(), \"String\".into(), \"RawString\".into()];\n \n-    let nodes = grammar\n-        .iter()\n-        .filter(|&node| match grammar[node].rule {\n-            Rule::Node(it) if it == node => false,\n-            _ => true,\n-        })\n-        .collect::<Vec<_>>();\n+    let nodes = grammar.iter().collect::<Vec<_>>();\n \n     for &node in &nodes {\n         let name = grammar[node].name.clone();"}]}