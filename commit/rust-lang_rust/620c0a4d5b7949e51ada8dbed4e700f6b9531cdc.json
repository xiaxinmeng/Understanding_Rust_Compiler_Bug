{"sha": "620c0a4d5b7949e51ada8dbed4e700f6b9531cdc", "node_id": "C_kwDOAAsO6NoAKDYyMGMwYTRkNWI3OTQ5ZTUxYWRhOGRiZWQ0ZTcwMGY2Yjk1MzFjZGM", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2022-04-18T04:23:58Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2022-04-18T04:33:56Z"}, "message": "Replace sys/unix/weak AtomicUsize with AtomicPtr", "tree": {"sha": "a3adcf0828861ac9f4c0597a9775f7de70f2a0b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3adcf0828861ac9f4c0597a9775f7de70f2a0b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/620c0a4d5b7949e51ada8dbed4e700f6b9531cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/620c0a4d5b7949e51ada8dbed4e700f6b9531cdc", "html_url": "https://github.com/rust-lang/rust/commit/620c0a4d5b7949e51ada8dbed4e700f6b9531cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/620c0a4d5b7949e51ada8dbed4e700f6b9531cdc/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e27d9df4319bd822e64f620676543d31e9c7ae2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27d9df4319bd822e64f620676543d31e9c7ae2c", "html_url": "https://github.com/rust-lang/rust/commit/e27d9df4319bd822e64f620676543d31e9c7ae2c"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "e4ff21b25bd9ce47aea69b7fd0f2eb696c873306", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/620c0a4d5b7949e51ada8dbed4e700f6b9531cdc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620c0a4d5b7949e51ada8dbed4e700f6b9531cdc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=620c0a4d5b7949e51ada8dbed4e700f6b9531cdc", "patch": "@@ -25,7 +25,8 @@\n use crate::ffi::CStr;\n use crate::marker::PhantomData;\n use crate::mem;\n-use crate::sync::atomic::{self, AtomicUsize, Ordering};\n+use crate::ptr;\n+use crate::sync::atomic::{self, AtomicPtr, Ordering};\n \n // We can use true weak linkage on ELF targets.\n #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n@@ -83,25 +84,25 @@ pub(crate) macro dlsym {\n }\n pub(crate) struct DlsymWeak<F> {\n     name: &'static str,\n-    addr: AtomicUsize,\n+    func: AtomicPtr<libc::c_void>,\n     _marker: PhantomData<F>,\n }\n \n impl<F> DlsymWeak<F> {\n     pub(crate) const fn new(name: &'static str) -> Self {\n-        DlsymWeak { name, addr: AtomicUsize::new(1), _marker: PhantomData }\n+        DlsymWeak { name, func: AtomicPtr::new(ptr::invalid_mut(1)), _marker: PhantomData }\n     }\n \n     #[inline]\n     pub(crate) fn get(&self) -> Option<F> {\n         unsafe {\n             // Relaxed is fine here because we fence before reading through the\n             // pointer (see the comment below).\n-            match self.addr.load(Ordering::Relaxed) {\n-                1 => self.initialize(),\n-                0 => None,\n-                addr => {\n-                    let func = mem::transmute_copy::<usize, F>(&addr);\n+            match self.func.load(Ordering::Relaxed) {\n+                func if func.addr() == 1 => self.initialize(),\n+                func if func.is_null() => None,\n+                func => {\n+                    let func = mem::transmute_copy::<*mut libc::c_void, F>(&func);\n                     // The caller is presumably going to read through this value\n                     // (by calling the function we've dlsymed). This means we'd\n                     // need to have loaded it with at least C11's consume\n@@ -129,25 +130,22 @@ impl<F> DlsymWeak<F> {\n     // Cold because it should only happen during first-time initialization.\n     #[cold]\n     unsafe fn initialize(&self) -> Option<F> {\n-        assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());\n+        assert_eq!(mem::size_of::<F>(), mem::size_of::<*mut libc::c_void>());\n \n         let val = fetch(self.name);\n         // This synchronizes with the acquire fence in `get`.\n-        self.addr.store(val, Ordering::Release);\n+        self.func.store(val, Ordering::Release);\n \n-        match val {\n-            0 => None,\n-            addr => Some(mem::transmute_copy::<usize, F>(&addr)),\n-        }\n+        if val.is_null() { None } else { Some(mem::transmute_copy::<*mut libc::c_void, F>(&val)) }\n     }\n }\n \n-unsafe fn fetch(name: &str) -> usize {\n+unsafe fn fetch(name: &str) -> *mut libc::c_void {\n     let name = match CStr::from_bytes_with_nul(name.as_bytes()) {\n         Ok(cstr) => cstr,\n-        Err(..) => return 0,\n+        Err(..) => return ptr::null_mut(),\n     };\n-    libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n+    libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr())\n }\n \n #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]"}]}