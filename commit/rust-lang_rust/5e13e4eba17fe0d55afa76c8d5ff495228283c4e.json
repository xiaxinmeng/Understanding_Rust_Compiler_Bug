{"sha": "5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTNlNGViYTE3ZmUwZDU1YWZhNzZjOGQ1ZmY0OTUyMjgyODNjNGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T21:14:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T21:33:03Z"}, "message": "More snippets", "tree": {"sha": "d2bca091c4672d1a481d0a89daf8a03396a178f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2bca091c4672d1a481d0a89daf8a03396a178f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "html_url": "https://github.com/rust-lang/rust/commit/5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd771707187a505c826096fc62ced6ba9b65460e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd771707187a505c826096fc62ced6ba9b65460e", "html_url": "https://github.com/rust-lang/rust/commit/fd771707187a505c826096fc62ced6ba9b65460e"}], "stats": {"total": 142, "additions": 45, "deletions": 97}, "files": [{"sha": "4cc75a7ce2dcda9733ff936908485520aa0b0808", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "patch": "@@ -97,7 +97,6 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     }\n \n     then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n-    let cursor_position = ctx.offset();\n \n     let target = if_expr.syntax().text_range();\n     acc.add(AssistId(\"convert_to_guarded_return\"), \"Convert to guarded return\", target, |edit| {\n@@ -148,7 +147,6 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n             }\n         };\n         edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n-        edit.set_cursor(cursor_position);\n \n         fn replace(\n             new_expr: &SyntaxNode,\n@@ -207,7 +205,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 bar();\n-                if<|> !true {\n+                if !true {\n                     return;\n                 }\n                 foo();\n@@ -237,7 +235,7 @@ mod tests {\n             r#\"\n             fn main(n: Option<String>) {\n                 bar();\n-                le<|>t n = match n {\n+                let n = match n {\n                     Some(it) => it,\n                     _ => return,\n                 };\n@@ -263,7 +261,7 @@ mod tests {\n             \"#,\n             r#\"\n             fn main() {\n-                le<|>t x = match Err(92) {\n+                let x = match Err(92) {\n                     Ok(it) => it,\n                     _ => return,\n                 };\n@@ -291,7 +289,7 @@ mod tests {\n             r#\"\n             fn main(n: Option<String>) {\n                 bar();\n-                le<|>t n = match n {\n+                let n = match n {\n                     Ok(it) => it,\n                     _ => return,\n                 };\n@@ -321,7 +319,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 while true {\n-                    if<|> !true {\n+                    if !true {\n                         continue;\n                     }\n                     foo();\n@@ -349,7 +347,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 while true {\n-                    le<|>t n = match n {\n+                    let n = match n {\n                         Some(it) => it,\n                         _ => continue,\n                     };\n@@ -378,7 +376,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 loop {\n-                    if<|> !true {\n+                    if !true {\n                         continue;\n                     }\n                     foo();\n@@ -406,7 +404,7 @@ mod tests {\n             r#\"\n             fn main() {\n                 loop {\n-                    le<|>t n = match n {\n+                    let n = match n {\n                         Some(it) => it,\n                         _ => continue,\n                     };"}, {"sha": "972d162419468d830b8aa08ea6595b4db840b791", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "patch": "@@ -58,8 +58,6 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     let target = tree.syntax().text_range();\n     acc.add(AssistId(\"merge_imports\"), \"Merge imports\", target, |builder| {\n         builder.rewrite(rewriter);\n-        // FIXME: we only need because our diff is imprecise\n-        builder.set_cursor(offset);\n     })\n }\n \n@@ -142,7 +140,7 @@ use std::fmt<|>::Debug;\n use std::fmt::Display;\n \",\n             r\"\n-use std::fmt<|>::{Debug, Display};\n+use std::fmt::{Debug, Display};\n \",\n         )\n     }\n@@ -156,7 +154,7 @@ use std::fmt::Debug;\n use std::fmt<|>::Display;\n \",\n             r\"\n-use std::fmt:<|>:{Display, Debug};\n+use std::fmt::{Display, Debug};\n \",\n         );\n     }\n@@ -169,7 +167,7 @@ use std::fmt:<|>:{Display, Debug};\n use std::{fmt<|>::Debug, fmt::Display};\n \",\n             r\"\n-use std::{fmt<|>::{Debug, Display}};\n+use std::{fmt::{Debug, Display}};\n \",\n         );\n         check_assist(\n@@ -178,7 +176,7 @@ use std::{fmt<|>::{Debug, Display}};\n use std::{fmt::Debug, fmt<|>::Display};\n \",\n             r\"\n-use std::{fmt::<|>{Display, Debug}};\n+use std::{fmt::{Display, Debug}};\n \",\n         );\n     }\n@@ -192,7 +190,7 @@ use std<|>::cell::*;\n use std::str;\n \",\n             r\"\n-use std<|>::{cell::*, str};\n+use std::{cell::*, str};\n \",\n         )\n     }\n@@ -206,7 +204,7 @@ use std<|>::cell::*;\n use std::str::*;\n \",\n             r\"\n-use std<|>::{cell::*, str::*};\n+use std::{cell::*, str::*};\n \",\n         )\n     }\n@@ -222,7 +220,7 @@ use foo::baz;\n /// Doc comment\n \",\n             r\"\n-use foo<|>::{bar, baz};\n+use foo::{bar, baz};\n \n /// Doc comment\n \",\n@@ -241,7 +239,7 @@ use {\n \",\n             r\"\n use {\n-    foo<|>::{bar, baz},\n+    foo::{bar, baz},\n };\n \",\n         );\n@@ -255,7 +253,7 @@ use {\n \",\n             r\"\n use {\n-    foo::{bar<|>, baz},\n+    foo::{bar, baz},\n };\n \",\n         );\n@@ -272,7 +270,7 @@ use foo::<|>{\n };\n \",\n             r\"\n-use foo::{<|>\n+use foo::{\n     FooBar,\n bar::baz};\n \","}, {"sha": "ca04ec671a0f0761cd6568c0d71b3ef6a74fd81f", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "patch": "@@ -3,7 +3,7 @@ use std::iter::successors;\n use ra_syntax::{\n     algo::neighbor,\n     ast::{self, AstNode},\n-    Direction, TextSize,\n+    Direction,\n };\n \n use crate::{AssistContext, AssistId, Assists, TextRange};\n@@ -41,17 +41,6 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n     let current_expr = current_arm.expr()?;\n     let current_text_range = current_arm.syntax().text_range();\n \n-    enum CursorPos {\n-        InExpr(TextSize),\n-        InPat(TextSize),\n-    }\n-    let cursor_pos = ctx.offset();\n-    let cursor_pos = if current_expr.syntax().text_range().contains(cursor_pos) {\n-        CursorPos::InExpr(current_text_range.end() - cursor_pos)\n-    } else {\n-        CursorPos::InPat(cursor_pos)\n-    };\n-\n     // We check if the following match arms match this one. We could, but don't,\n     // compare to the previous match arm as well.\n     let arms_to_merge = successors(Some(current_arm), |it| neighbor(it, Direction::Next))\n@@ -87,10 +76,6 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n         let start = arms_to_merge.first().unwrap().syntax().text_range().start();\n         let end = arms_to_merge.last().unwrap().syntax().text_range().end();\n \n-        edit.set_cursor(match cursor_pos {\n-            CursorPos::InExpr(back_offset) => start + TextSize::of(&arm) - back_offset,\n-            CursorPos::InPat(offset) => offset,\n-        });\n         edit.replace(TextRange::new(start, end), arm);\n     })\n }\n@@ -132,7 +117,7 @@ mod tests {\n             fn main() {\n                 let x = X::A;\n                 let y = match x {\n-                    X::A | X::B => { 1i32<|> }\n+                    X::A | X::B => { 1i32 }\n                     X::C => { 2i32 }\n                 }\n             }\n@@ -164,7 +149,7 @@ mod tests {\n             fn main() {\n                 let x = X::A;\n                 let y = match x {\n-                    X::A | X::B | X::C | X::D => {<|> 1i32 },\n+                    X::A | X::B | X::C | X::D => { 1i32 },\n                     X::E => { 2i32 },\n                 }\n             }\n@@ -197,7 +182,7 @@ mod tests {\n                 let x = X::A;\n                 let y = match x {\n                     X::A => { 1i32 },\n-                    _ => { 2i<|>32 }\n+                    _ => { 2i32 }\n                 }\n             }\n             \"#,\n@@ -226,7 +211,7 @@ mod tests {\n \n             fn main() {\n                 match X::A {\n-                    X::A<|> | X::B | X::C => 92,\n+                    X::A | X::B | X::C => 92,\n                     X::D => 62,\n                     _ => panic!(),\n                 }"}, {"sha": "7edcf07489584d1df0571c38c2f33b14db33faeb", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "patch": "@@ -1,7 +1,6 @@\n use ra_syntax::{\n-    ast,\n-    ast::{AstNode, AstToken, IfExpr, MatchArm},\n-    TextSize,\n+    ast::{AstNode, IfExpr, MatchArm},\n+    SyntaxKind::WHITESPACE,\n };\n \n use crate::{AssistContext, AssistId, Assists};\n@@ -42,24 +41,15 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n \n     let target = guard.syntax().text_range();\n     acc.add(AssistId(\"move_guard_to_arm_body\"), \"Move guard to arm body\", target, |edit| {\n-        let offseting_amount = match space_before_guard.and_then(|it| it.into_token()) {\n-            Some(tok) => {\n-                if ast::Whitespace::cast(tok.clone()).is_some() {\n-                    let ele = tok.text_range();\n-                    edit.delete(ele);\n-                    ele.len()\n-                } else {\n-                    TextSize::from(0)\n-                }\n+        match space_before_guard {\n+            Some(element) if element.kind() == WHITESPACE => {\n+                edit.delete(element.text_range());\n             }\n-            _ => TextSize::from(0),\n+            _ => (),\n         };\n \n         edit.delete(guard.syntax().text_range());\n         edit.replace_node_and_indent(arm_expr.syntax(), buf);\n-        edit.set_cursor(\n-            arm_expr.syntax().text_range().start() + TextSize::from(3) - offseting_amount,\n-        );\n     })\n }\n \n@@ -124,7 +114,6 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n             }\n \n             edit.insert(match_pat.syntax().text_range().end(), buf);\n-            edit.set_cursor(match_pat.syntax().text_range().end() + TextSize::from(1));\n         },\n     )\n }\n@@ -172,7 +161,7 @@ mod tests {\n                 let t = 'a';\n                 let chars = \"abcd\";\n                 match t {\n-                    '\\r' => if chars.clone().next() == Some('\\n') { <|>false },\n+                    '\\r' => if chars.clone().next() == Some('\\n') { false },\n                     _ => true\n                 }\n             }\n@@ -195,7 +184,7 @@ mod tests {\n             r#\"\n             fn f() {\n                 match x {\n-                    y @ 4 | y @ 5 => if y > 5 { <|>true },\n+                    y @ 4 | y @ 5 => if y > 5 { true },\n                     _ => false\n                 }\n             }\n@@ -222,7 +211,7 @@ mod tests {\n                 let t = 'a';\n                 let chars = \"abcd\";\n                 match t {\n-                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n+                    '\\r' if chars.clone().next() == Some('\\n') => false,\n                     _ => true\n                 }\n             }\n@@ -266,7 +255,7 @@ mod tests {\n                 let t = 'a';\n                 let chars = \"abcd\";\n                 match t {\n-                    '\\r' <|>if chars.clone().next().is_some() => {  },\n+                    '\\r' if chars.clone().next().is_some() => {  },\n                     _ => true\n                 }\n             }\n@@ -296,7 +285,7 @@ mod tests {\n                 let mut t = 'a';\n                 let chars = \"abcd\";\n                 match t {\n-                    '\\r' <|>if chars.clone().next().is_some() => {\n+                    '\\r' if chars.clone().next().is_some() => {\n                         t = 'e';\n                         false\n                     },"}, {"sha": "961ee1731ad0f79106552985f59cd62e50ed60e3", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "patch": "@@ -29,26 +29,6 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let macro_range = macro_call.syntax().text_range();\n \n-    // If the cursor is inside the macro call, we'll try to maintain the cursor\n-    // position by subtracting the length of dbg!( from the start of the file\n-    // range, otherwise we'll default to using the start of the macro call\n-    let cursor_pos = {\n-        let file_range = ctx.frange.range;\n-\n-        let offset_start = file_range\n-            .start()\n-            .checked_sub(macro_range.start())\n-            .unwrap_or_else(|| TextSize::from(0));\n-\n-        let dbg_size = TextSize::of(\"dbg!(\");\n-\n-        if offset_start > dbg_size {\n-            file_range.start() - dbg_size\n-        } else {\n-            macro_range.start()\n-        }\n-    };\n-\n     let macro_content = {\n         let macro_args = macro_call.token_tree()?.syntax().clone();\n \n@@ -58,9 +38,8 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     let target = macro_call.syntax().text_range();\n-    acc.add(AssistId(\"remove_dbg\"), \"Remove dbg!()\", target, |edit| {\n-        edit.replace(macro_range, macro_content);\n-        edit.set_cursor(cursor_pos);\n+    acc.add(AssistId(\"remove_dbg\"), \"Remove dbg!()\", target, |builder| {\n+        builder.replace(macro_range, macro_content);\n     })\n }\n \n@@ -94,13 +73,13 @@ mod tests {\n \n     #[test]\n     fn test_remove_dbg() {\n-        check_assist(remove_dbg, \"<|>dbg!(1 + 1)\", \"<|>1 + 1\");\n+        check_assist(remove_dbg, \"<|>dbg!(1 + 1)\", \"1 + 1\");\n \n-        check_assist(remove_dbg, \"dbg!<|>((1 + 1))\", \"<|>(1 + 1)\");\n+        check_assist(remove_dbg, \"dbg!<|>((1 + 1))\", \"(1 + 1)\");\n \n-        check_assist(remove_dbg, \"dbg!(1 <|>+ 1)\", \"1 <|>+ 1\");\n+        check_assist(remove_dbg, \"dbg!(1 <|>+ 1)\", \"1 + 1\");\n \n-        check_assist(remove_dbg, \"let _ = <|>dbg!(1 + 1)\", \"let _ = <|>1 + 1\");\n+        check_assist(remove_dbg, \"let _ = <|>dbg!(1 + 1)\", \"let _ = 1 + 1\");\n \n         check_assist(\n             remove_dbg,\n@@ -113,7 +92,7 @@ fn foo(n: usize) {\n \",\n             \"\n fn foo(n: usize) {\n-    if let Some(_) = n.<|>checked_sub(4) {\n+    if let Some(_) = n.checked_sub(4) {\n         // ...\n     }\n }\n@@ -122,8 +101,8 @@ fn foo(n: usize) {\n     }\n     #[test]\n     fn test_remove_dbg_with_brackets_and_braces() {\n-        check_assist(remove_dbg, \"dbg![<|>1 + 1]\", \"<|>1 + 1\");\n-        check_assist(remove_dbg, \"dbg!{<|>1 + 1}\", \"<|>1 + 1\");\n+        check_assist(remove_dbg, \"dbg![<|>1 + 1]\", \"1 + 1\");\n+        check_assist(remove_dbg, \"dbg!{<|>1 + 1}\", \"1 + 1\");\n     }\n \n     #[test]"}, {"sha": "fe4eada0340876ef9bbc9d5fd2bae8bf1ec99538", "filename": "crates/ra_assists/src/handlers/remove_mut.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e13e4eba17fe0d55afa76c8d5ff495228283c4e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs?ref=5e13e4eba17fe0d55afa76c8d5ff495228283c4e", "patch": "@@ -26,8 +26,7 @@ pub(crate) fn remove_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     let target = mut_token.text_range();\n-    acc.add(AssistId(\"remove_mut\"), \"Remove `mut` keyword\", target, |edit| {\n-        edit.set_cursor(delete_from);\n-        edit.delete(TextRange::new(delete_from, delete_to));\n+    acc.add(AssistId(\"remove_mut\"), \"Remove `mut` keyword\", target, |builder| {\n+        builder.delete(TextRange::new(delete_from, delete_to));\n     })\n }"}]}