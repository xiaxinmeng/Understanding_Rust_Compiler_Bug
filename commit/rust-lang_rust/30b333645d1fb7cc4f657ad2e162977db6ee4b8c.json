{"sha": "30b333645d1fb7cc4f657ad2e162977db6ee4b8c", "node_id": "C_kwDOAAsO6NoAKDMwYjMzMzY0NWQxZmI3Y2M0ZjY1N2FkMmUxNjI5NzdkYjZlZTRiOGM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-03-15T20:52:28Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-03-15T20:52:28Z"}, "message": "Don't lint `undocumented_unsafe_blocks` on bad proc-macro spans.", "tree": {"sha": "f7fa54d9483eae015039098ba5702ae463fe525d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7fa54d9483eae015039098ba5702ae463fe525d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b333645d1fb7cc4f657ad2e162977db6ee4b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b333645d1fb7cc4f657ad2e162977db6ee4b8c", "html_url": "https://github.com/rust-lang/rust/commit/30b333645d1fb7cc4f657ad2e162977db6ee4b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65f96e2b53369f6b403b655b2212272c2ae13d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f96e2b53369f6b403b655b2212272c2ae13d42", "html_url": "https://github.com/rust-lang/rust/commit/65f96e2b53369f6b403b655b2212272c2ae13d42"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "ac13a309e7b83675bdf0760ca77ea2195e57abe9", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=30b333645d1fb7cc4f657ad2e162977db6ee4b8c", "patch": "@@ -48,6 +48,7 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n         if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n             && !in_external_macro(cx.tcx.sess, block.span)\n             && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, block.hir_id)\n+            && !is_unsafe_from_proc_macro(cx, block)\n             && !block_has_safety_comment(cx, block)\n         {\n             let source_map = cx.tcx.sess.source_map();\n@@ -69,6 +70,17 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n     }\n }\n \n+fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n+    let source_map = cx.sess().source_map();\n+    let file_pos = source_map.lookup_byte_offset(block.span.lo());\n+    file_pos\n+        .sf\n+        .src\n+        .as_deref()\n+        .and_then(|src| src.get(file_pos.pos.to_usize()..))\n+        .map_or(true, |src| !src.starts_with(\"unsafe\"))\n+}\n+\n /// Checks if the lines immediately preceding the block contain a safety comment.\n fn block_has_safety_comment(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n     // This intentionally ignores text before the start of a function so something like:"}, {"sha": "3c40f77469b8207bcf2d8e4ae7e22751e3f9bbc8", "filename": "tests/ui/auxiliary/proc_macro_unsafe.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/tests%2Fui%2Fauxiliary%2Fproc_macro_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/tests%2Fui%2Fauxiliary%2Fproc_macro_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_unsafe.rs?ref=30b333645d1fb7cc4f657ad2e162977db6ee4b8c", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: --emit=link\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Delimiter, Group, Ident, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn unsafe_block(input: TokenStream) -> TokenStream {\n+    let span = input.into_iter().next().unwrap().span();\n+    TokenStream::from_iter([TokenTree::Ident(Ident::new(\"unsafe\", span)), {\n+        let mut group = Group::new(Delimiter::Brace, TokenStream::new());\n+        group.set_span(span);\n+        TokenTree::Group(group)\n+    }])\n+}"}, {"sha": "80fb198ab5384ae4e67882f0ea4559128868e830", "filename": "tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=30b333645d1fb7cc4f657ad2e162977db6ee4b8c", "patch": "@@ -1,5 +1,9 @@\n+// aux-build:proc_macro_unsafe.rs\n+\n #![warn(clippy::undocumented_unsafe_blocks)]\n \n+extern crate proc_macro_unsafe;\n+\n // Valid comments\n \n fn nested_local() {\n@@ -241,6 +245,10 @@ fn in_multiline_macro_call(x: *const u32) {\n     );\n }\n \n+fn from_proc_macro() {\n+    proc_macro_unsafe::unsafe_block!(token);\n+}\n+\n // Invalid comments\n \n fn no_comment() {"}, {"sha": "746bbe2f14146b5efa6eba8d9875ec0e2fbe4c9a", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30b333645d1fb7cc4f657ad2e162977db6ee4b8c/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=30b333645d1fb7cc4f657ad2e162977db6ee4b8c", "patch": "@@ -1,5 +1,5 @@\n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:247:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:255:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^^^^\n@@ -8,95 +8,95 @@ LL |     unsafe {}\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:251:14\n+  --> $DIR/undocumented_unsafe_blocks.rs:259:14\n    |\n LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n    |              ^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:251:29\n+  --> $DIR/undocumented_unsafe_blocks.rs:259:29\n    |\n LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n    |                             ^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:251:48\n+  --> $DIR/undocumented_unsafe_blocks.rs:259:48\n    |\n LL |     let _ = [unsafe { 14 }, unsafe { 15 }, 42, unsafe { 16 }];\n    |                                                ^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:255:18\n+  --> $DIR/undocumented_unsafe_blocks.rs:263:18\n    |\n LL |     let _ = (42, unsafe {}, \"test\", unsafe {});\n    |                  ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:255:37\n+  --> $DIR/undocumented_unsafe_blocks.rs:263:37\n    |\n LL |     let _ = (42, unsafe {}, \"test\", unsafe {});\n    |                                     ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:259:14\n+  --> $DIR/undocumented_unsafe_blocks.rs:267:14\n    |\n LL |     let _ = *unsafe { &42 };\n    |              ^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:264:19\n+  --> $DIR/undocumented_unsafe_blocks.rs:272:19\n    |\n LL |     let _ = match unsafe {} {\n    |                   ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:270:14\n+  --> $DIR/undocumented_unsafe_blocks.rs:278:14\n    |\n LL |     let _ = &unsafe {};\n    |              ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:274:14\n+  --> $DIR/undocumented_unsafe_blocks.rs:282:14\n    |\n LL |     let _ = [unsafe {}; 5];\n    |              ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:278:13\n+  --> $DIR/undocumented_unsafe_blocks.rs:286:13\n    |\n LL |     let _ = unsafe {};\n    |             ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:288:8\n+  --> $DIR/undocumented_unsafe_blocks.rs:296:8\n    |\n LL |     t!(unsafe {});\n    |        ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:294:13\n+  --> $DIR/undocumented_unsafe_blocks.rs:302:13\n    |\n LL |             unsafe {}\n    |             ^^^^^^^^^\n@@ -108,31 +108,31 @@ LL |     t!();\n    = note: this error originates in the macro `t` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:302:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:310:5\n    |\n LL |     unsafe {} // SAFETY:\n    |     ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:306:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:314:5\n    |\n LL |     unsafe {\n    |     ^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:316:5\n+  --> $DIR/undocumented_unsafe_blocks.rs:324:5\n    |\n LL |     unsafe {};\n    |     ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:320:20\n+  --> $DIR/undocumented_unsafe_blocks.rs:328:20\n    |\n LL |     println!(\"{}\", unsafe { String::from_utf8_unchecked(vec![]) });\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}