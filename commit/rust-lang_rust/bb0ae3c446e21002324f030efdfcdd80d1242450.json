{"sha": "bb0ae3c446e21002324f030efdfcdd80d1242450", "node_id": "C_kwDOAAsO6NoAKGJiMGFlM2M0NDZlMjEwMDIzMjRmMDMwZWZkZmNkZDgwZDEyNDI0NTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-30T06:54:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-05T04:20:25Z"}, "message": "Make `hir::PathSegment::hir_id` non-optional.", "tree": {"sha": "de506ce34112c7d441812344bb3d2793ae4a529a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de506ce34112c7d441812344bb3d2793ae4a529a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb0ae3c446e21002324f030efdfcdd80d1242450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0ae3c446e21002324f030efdfcdd80d1242450", "html_url": "https://github.com/rust-lang/rust/commit/bb0ae3c446e21002324f030efdfcdd80d1242450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb0ae3c446e21002324f030efdfcdd80d1242450/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84", "html_url": "https://github.com/rust-lang/rust/commit/6d850d936bae9745b68b08c6e1d62a1b1cc6bc84"}], "stats": {"total": 200, "additions": 103, "deletions": 97}, "files": [{"sha": "d31ec91fcaad35e0f516ff6efc454be9274d337e", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -1776,13 +1776,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         binding: hir::HirId,\n         attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n+        let hir_id = self.next_id();\n         let res = Res::Local(binding);\n         let expr_path = hir::ExprKind::Path(hir::QPath::Resolved(\n             None,\n             self.arena.alloc(hir::Path {\n                 span: self.lower_span(span),\n                 res,\n-                segments: arena_vec![self; hir::PathSegment::from_ident(ident, res)],\n+                segments: arena_vec![self; hir::PathSegment::from_ident(ident, hir_id, res)],\n             }),\n         ));\n "}, {"sha": "61470d93bdb2c3bb3411c5b4a78c54a346bcb4ea", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -246,9 +246,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'hir PathSegment<'hir>) {\n-        if let Some(hir_id) = path_segment.hir_id {\n-            self.insert(path_span, hir_id, Node::PathSegment(path_segment));\n-        }\n+        self.insert(path_span, path_segment.hir_id, Node::PathSegment(path_segment));\n         intravisit::walk_path_segment(self, path_span, path_segment);\n     }\n "}, {"sha": "778203acf7df878d7965c1d3cb2a160cb70d9a6b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -1431,13 +1431,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             GenericParamKind::Const { .. } => None,\n             GenericParamKind::Type { .. } => {\n                 let def_id = self.local_def_id(id).to_def_id();\n+                let hir_id = self.next_id();\n                 let res = Res::Def(DefKind::TyParam, def_id);\n                 let ty_path = self.arena.alloc(hir::Path {\n                     span: param_span,\n                     res,\n                     segments: self\n                         .arena\n-                        .alloc_from_iter([hir::PathSegment::from_ident(ident, res)]),\n+                        .alloc_from_iter([hir::PathSegment::from_ident(ident, hir_id, res)]),\n                 });\n                 let ty_id = self.next_id();\n                 let bounded_ty ="}, {"sha": "097855bb6bf6aaa9457a135ebc1057e1a4144c81", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -1260,6 +1260,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 return self.lower_path_ty(t, qself, path, ParamMode::Explicit, itctx);\n             }\n             TyKind::ImplicitSelf => {\n+                let hir_id = self.lower_node_id(t.id);\n                 let res = self.expect_full_res(t.id);\n                 let res = self.lower_res(res);\n                 hir::TyKind::Path(hir::QPath::Resolved(\n@@ -1268,6 +1269,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         res,\n                         segments: arena_vec![self; hir::PathSegment::from_ident(\n                             Ident::with_dummy_span(kw::SelfUpper),\n+                            hir_id,\n                             res\n                         )],\n                         span: self.lower_span(t.span),\n@@ -2194,13 +2196,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir::PredicateOrigin::ImplTrait,\n         );\n \n+        let hir_id = self.next_id();\n         let res = Res::Def(DefKind::TyParam, def_id.to_def_id());\n         let ty = hir::TyKind::Path(hir::QPath::Resolved(\n             None,\n             self.arena.alloc(hir::Path {\n                 span: self.lower_span(span),\n                 res,\n-                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident), res)],\n+                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident), hir_id, res)],\n             }),\n         ));\n "}, {"sha": "a23f5fddc57e07be5aacf48adda1a2de674cb3df", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -255,13 +255,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 )\n             }\n             Some(res) => {\n+                let hir_id = self.next_id();\n                 let res = self.lower_res(res);\n                 hir::PatKind::Path(hir::QPath::Resolved(\n                     None,\n                     self.arena.alloc(hir::Path {\n                         span: self.lower_span(ident.span),\n                         res,\n-                        segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident), res)],\n+                        segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident), hir_id, res)],\n                     }),\n             ))\n             }"}, {"sha": "5f0ddd5ac1c68847fd8c54eac25481bb2f8f2548", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -250,15 +250,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         let res = self.expect_full_res(segment.id);\n-        let id = self.lower_node_id(segment.id);\n+        let hir_id = self.lower_node_id(segment.id);\n         debug!(\n             \"lower_path_segment: ident={:?} original-id={:?} new-id={:?}\",\n-            segment.ident, segment.id, id,\n+            segment.ident, segment.id, hir_id,\n         );\n \n         hir::PathSegment {\n             ident: self.lower_ident(segment.ident),\n-            hir_id: Some(id),\n+            hir_id,\n             res: self.lower_res(res),\n             infer_args,\n             args: if generic_args.is_empty() && generic_args.span.is_empty() {"}, {"sha": "66d2614b190d4db19ec3d7c00425ff41ac158f8a", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -935,10 +935,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 _,\n             ) = hir_map.body(fn_body_id).value.kind\n             {\n-                let opt_suggestions = path_segment\n-                    .hir_id\n-                    .map(|path_hir_id| self.infcx.tcx.typeck(path_hir_id.owner))\n-                    .and_then(|typeck| typeck.type_dependent_def_id(*hir_id))\n+                let opt_suggestions = self\n+                    .infcx\n+                    .tcx\n+                    .typeck(path_segment.hir_id.owner)\n+                    .type_dependent_def_id(*hir_id)\n                     .and_then(|def_id| self.infcx.tcx.impl_of_method(def_id))\n                     .map(|def_id| self.infcx.tcx.associated_items(def_id))\n                     .map(|assoc_items| {"}, {"sha": "561045ff4ef0f54d37b06c579ad0057a0919dbe1", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -203,7 +203,7 @@ pub struct PathSegment<'hir> {\n     /// The identifier portion of this path segment.\n     pub ident: Ident,\n \n-    pub hir_id: Option<HirId>,\n+    pub hir_id: HirId,\n \n     pub res: Res,\n \n@@ -223,12 +223,12 @@ pub struct PathSegment<'hir> {\n \n impl<'hir> PathSegment<'hir> {\n     /// Converts an identifier to the corresponding segment.\n-    pub fn from_ident(ident: Ident, res: Res) -> PathSegment<'hir> {\n-        PathSegment { ident, hir_id: None, res, infer_args: true, args: None }\n+    pub fn from_ident(ident: Ident, hir_id: HirId, res: Res) -> PathSegment<'hir> {\n+        PathSegment { ident, hir_id, res, infer_args: true, args: None }\n     }\n \n     pub fn invalid() -> Self {\n-        Self::from_ident(Ident::empty(), Res::Err)\n+        Self::from_ident(Ident::empty(), HirId::INVALID, Res::Err)\n     }\n \n     pub fn args(&self) -> &GenericArgs<'hir> {"}, {"sha": "e586d5cd5d941baf999cb728095f8621d3786aa0", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -20,6 +20,9 @@ pub struct HirId {\n }\n \n impl HirId {\n+    /// Signal local id which should never be used.\n+    pub const INVALID: HirId = HirId { owner: CRATE_DEF_ID, local_id: ItemLocalId::INVALID };\n+\n     #[inline]\n     pub fn expect_owner(self) -> LocalDefId {\n         assert_eq!(self.local_id.index(), 0);"}, {"sha": "036becf4b7ccbb7ffd6a5937133a30b19af1fd26", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -724,7 +724,7 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(\n     segment: &'v PathSegment<'v>,\n ) {\n     visitor.visit_ident(segment.ident);\n-    walk_list!(visitor, visit_id, segment.hir_id);\n+    visitor.visit_id(segment.hir_id);\n     if let Some(ref args) = segment.args {\n         visitor.visit_generic_args(path_span, args);\n     }"}, {"sha": "126c39c3bad5ad2f4b72176f0ebae0c5d8c4076c", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -909,7 +909,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                             None?\n                         }\n                         let substs = self.node_substs_opt(expr.hir_id)?;\n-                        let span = tcx.hir().span(segment.hir_id?);\n+                        let span = tcx.hir().span(segment.hir_id);\n                         let insert_span = segment.ident.span.shrink_to_hi().with_hi(span.hi());\n                         InsertableGenericArgs {\n                             insert_span,\n@@ -963,7 +963,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                 if generics.has_impl_trait() {\n                     return None;\n                 }\n-                let span = tcx.hir().span(segment.hir_id?);\n+                let span = tcx.hir().span(segment.hir_id);\n                 let insert_span = segment.ident.span.shrink_to_hi().with_hi(span.hi());\n                 Some(InsertableGenericArgs {\n                     insert_span,\n@@ -996,7 +996,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                     if !segment.infer_args || generics.has_impl_trait() {\n                         None?;\n                     }\n-                    let span = tcx.hir().span(segment.hir_id?);\n+                    let span = tcx.hir().span(segment.hir_id);\n                     let insert_span = segment.ident.span.shrink_to_hi().with_hi(span.hi());\n                     InsertableGenericArgs { insert_span, substs, generics_def_id: def_id, def_id }\n                 };"}, {"sha": "f2b2daaf20bfa683832264a81049e6d81f61eaaf", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -912,7 +912,10 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     _,\n                 )\n                 | Res::SelfTy { .. } => {\n-                    self.dump_path_segment_ref(id, &hir::PathSegment::from_ident(ident, Res::Err));\n+                    self.dump_path_segment_ref(\n+                        id,\n+                        &hir::PathSegment::from_ident(ident, hir::HirId::INVALID, Res::Err),\n+                    );\n                 }\n                 def => {\n                     error!(\"unexpected definition kind when processing collected idents: {:?}\", def)"}, {"sha": "c58ccde43907cd2b6e6be0f9b597c649f0365f52", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -649,7 +649,7 @@ impl<'tcx> SaveContext<'tcx> {\n     }\n \n     pub fn get_path_segment_data(&self, path_seg: &hir::PathSegment<'_>) -> Option<Ref> {\n-        self.get_path_segment_data_with_id(path_seg, path_seg.hir_id?)\n+        self.get_path_segment_data_with_id(path_seg, path_seg.hir_id)\n     }\n \n     pub fn get_path_segment_data_with_id("}, {"sha": "faf3d7a1000c600d78cce3599dcd22d5af87e1e9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -1113,7 +1113,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let ident = Ident::new(assoc_item.name, binding.item_name.span);\n             let item_segment = hir::PathSegment {\n                 ident,\n-                hir_id: Some(binding.hir_id),\n+                hir_id: binding.hir_id,\n                 res: Res::Err,\n                 args: Some(binding.gen_args),\n                 infer_args: false,"}, {"sha": "eeb0e9ce738d58678cf8bb2a43df963b316511c4", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 51, "deletions": 54, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -291,62 +291,60 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     // Creates lifetime name suggestions from the lifetime parameter names\n     fn get_lifetime_args_suggestions_from_param_names(\n         &self,\n-        path_hir_id: Option<hir::HirId>,\n+        path_hir_id: hir::HirId,\n         num_params_to_take: usize,\n     ) -> String {\n         debug!(?path_hir_id);\n \n-        if let Some(path_hir_id) = path_hir_id {\n-            let mut ret = Vec::new();\n-            for (id, node) in self.tcx.hir().parent_iter(path_hir_id) {\n-                debug!(?id);\n-                let params = if let Some(generics) = node.generics() {\n-                    generics.params\n-                } else if let hir::Node::Ty(ty) = node\n-                    && let hir::TyKind::BareFn(bare_fn) = ty.kind\n-                {\n-                    bare_fn.generic_params\n-                } else {\n-                    &[]\n-                };\n-                ret.extend(params.iter().filter_map(|p| {\n-                    let hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n-                        = p.kind\n-                    else { return None };\n-                    let hir::ParamName::Plain(name) = p.name else { return None };\n-                    Some(name.to_string())\n-                }));\n-                // Suggest `'static` when in const/static item-like.\n-                if let hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Static { .. } | hir::ItemKind::Const { .. },\n-                    ..\n-                })\n-                | hir::Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Const { .. },\n-                    ..\n-                })\n-                | hir::Node::ImplItem(hir::ImplItem {\n-                    kind: hir::ImplItemKind::Const { .. },\n-                    ..\n-                })\n-                | hir::Node::ForeignItem(hir::ForeignItem {\n-                    kind: hir::ForeignItemKind::Static { .. },\n-                    ..\n-                })\n-                | hir::Node::AnonConst(..) = node\n-                {\n-                    ret.extend(\n-                        std::iter::repeat(\"'static\".to_owned())\n-                            .take(num_params_to_take.saturating_sub(ret.len())),\n-                    );\n-                }\n-                if ret.len() >= num_params_to_take {\n-                    return ret[..num_params_to_take].join(\", \");\n-                }\n-                // We cannot refer to lifetimes defined in an outer function.\n-                if let hir::Node::Item(_) = node {\n-                    break;\n-                }\n+        let mut ret = Vec::new();\n+        for (id, node) in self.tcx.hir().parent_iter(path_hir_id) {\n+            debug!(?id);\n+            let params = if let Some(generics) = node.generics() {\n+                generics.params\n+            } else if let hir::Node::Ty(ty) = node\n+                && let hir::TyKind::BareFn(bare_fn) = ty.kind\n+            {\n+                bare_fn.generic_params\n+            } else {\n+                &[]\n+            };\n+            ret.extend(params.iter().filter_map(|p| {\n+                let hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n+                    = p.kind\n+                else { return None };\n+                let hir::ParamName::Plain(name) = p.name else { return None };\n+                Some(name.to_string())\n+            }));\n+            // Suggest `'static` when in const/static item-like.\n+            if let hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Static { .. } | hir::ItemKind::Const { .. },\n+                ..\n+            })\n+            | hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Const { .. },\n+                ..\n+            })\n+            | hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Const { .. },\n+                ..\n+            })\n+            | hir::Node::ForeignItem(hir::ForeignItem {\n+                kind: hir::ForeignItemKind::Static { .. },\n+                ..\n+            })\n+            | hir::Node::AnonConst(..) = node\n+            {\n+                ret.extend(\n+                    std::iter::repeat(\"'static\".to_owned())\n+                        .take(num_params_to_take.saturating_sub(ret.len())),\n+                );\n+            }\n+            if ret.len() >= num_params_to_take {\n+                return ret[..num_params_to_take].join(\", \");\n+            }\n+            // We cannot refer to lifetimes defined in an outer function.\n+            if let hir::Node::Item(_) = node {\n+                break;\n             }\n         }\n \n@@ -690,8 +688,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             num = num_trait_generics_except_self,\n         );\n \n-        if let Some(hir_id) = self.path_segment.hir_id\n-        && let Some(parent_node) = self.tcx.hir().find_parent_node(hir_id)\n+        if let Some(parent_node) = self.tcx.hir().find_parent_node(self.path_segment.hir_id)\n         && let Some(parent_node) = self.tcx.hir().find(parent_node)\n         && let hir::Node::Expr(expr) = parent_node {\n             match expr.kind {"}, {"sha": "151ec2b28adc9860b47e71fbb48edd0f69d399a7", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bb0ae3c446e21002324f030efdfcdd80d1242450/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0ae3c446e21002324f030efdfcdd80d1242450/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=bb0ae3c446e21002324f030efdfcdd80d1242450", "patch": "@@ -166,25 +166,23 @@ impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n \n     fn visit_expr(&mut self, expr: &'tcx rustc_hir::Expr<'tcx>) {\n         if let ExprKind::MethodCall(segment, ..) = expr.kind {\n-            if let Some(hir_id) = segment.hir_id {\n-                let hir = self.tcx.hir();\n-                let body_id = hir.enclosing_body_owner(hir_id);\n-                // FIXME: this is showing error messages for parts of the code that are not\n-                // compiled (because of cfg)!\n-                //\n-                // See discussion in https://github.com/rust-lang/rust/issues/69426#issuecomment-1019412352\n-                let typeck_results = self.tcx.typeck_body(\n-                    hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"),\n+            let hir = self.tcx.hir();\n+            let body_id = hir.enclosing_body_owner(segment.hir_id);\n+            // FIXME: this is showing error messages for parts of the code that are not\n+            // compiled (because of cfg)!\n+            //\n+            // See discussion in https://github.com/rust-lang/rust/issues/69426#issuecomment-1019412352\n+            let typeck_results = self\n+                .tcx\n+                .typeck_body(hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"));\n+            if let Some(def_id) = typeck_results.type_dependent_def_id(expr.hir_id) {\n+                self.matches.insert(\n+                    segment.ident.span,\n+                    match hir.span_if_local(def_id) {\n+                        Some(span) => LinkFromSrc::Local(clean::Span::new(span)),\n+                        None => LinkFromSrc::External(def_id),\n+                    },\n                 );\n-                if let Some(def_id) = typeck_results.type_dependent_def_id(expr.hir_id) {\n-                    self.matches.insert(\n-                        segment.ident.span,\n-                        match hir.span_if_local(def_id) {\n-                            Some(span) => LinkFromSrc::Local(clean::Span::new(span)),\n-                            None => LinkFromSrc::External(def_id),\n-                        },\n-                    );\n-                }\n             }\n         } else if self.handle_macro(expr.span) {\n             // We don't want to go deeper into the macro."}]}