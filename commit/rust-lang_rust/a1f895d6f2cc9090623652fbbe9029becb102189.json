{"sha": "a1f895d6f2cc9090623652fbbe9029becb102189", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZjg5NWQ2ZjJjYzkwOTA2MjM2NTJmYmJlOTAyOWJlY2IxMDIxODk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-13T11:48:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-16T10:09:33Z"}, "message": "retagging: descent into values, type-driven", "tree": {"sha": "f86279e419011dbb879aecb3eda50e626d5cbc3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f86279e419011dbb879aecb3eda50e626d5cbc3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f895d6f2cc9090623652fbbe9029becb102189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f895d6f2cc9090623652fbbe9029becb102189", "html_url": "https://github.com/rust-lang/rust/commit/a1f895d6f2cc9090623652fbbe9029becb102189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f895d6f2cc9090623652fbbe9029becb102189/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d78b62e3e4d45dfa07e64f84a72cd6bfb865d9a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d78b62e3e4d45dfa07e64f84a72cd6bfb865d9a3", "html_url": "https://github.com/rust-lang/rust/commit/d78b62e3e4d45dfa07e64f84a72cd6bfb865d9a3"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "85329ddcf17f50a16d6cbe25d8cbca2c7911700b", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1f895d6f2cc9090623652fbbe9029becb102189/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f895d6f2cc9090623652fbbe9029becb102189/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a1f895d6f2cc9090623652fbbe9029becb102189", "patch": "@@ -158,8 +158,10 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             unsafe_cell_action: F,\n         }\n \n-        impl<'ecx, 'a, 'mir, 'tcx, F> ValueVisitor<'a, 'mir, 'tcx, Evaluator<'tcx>>\n-        for UnsafeCellVisitor<'ecx, 'a, 'mir, 'tcx, F>\n+        impl<'ecx, 'a, 'mir, 'tcx, F>\n+            ValueVisitor<'a, 'mir, 'tcx, Evaluator<'tcx>>\n+        for\n+            UnsafeCellVisitor<'ecx, 'a, 'mir, 'tcx, F>\n         where\n             F: FnMut(MPlaceTy<'tcx, Borrow>) -> EvalResult<'tcx>\n         {\n@@ -230,7 +232,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             }\n \n             // We should never get to a primitive, but always short-circuit somewhere above\n-            fn visit_primitive(&mut self, _val: ImmTy<'tcx, Borrow>) -> EvalResult<'tcx>\n+            fn visit_primitive(&mut self, _v: MPlaceTy<'tcx, Borrow>) -> EvalResult<'tcx>\n             {\n                 bug!(\"We should always short-circit before coming to a primitive\")\n             }"}, {"sha": "44fa605fd6a23bef4be3b5bb875ebdfaaa3f2898", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a1f895d6f2cc9090623652fbbe9029becb102189/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f895d6f2cc9090623652fbbe9029becb102189/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=a1f895d6f2cc9090623652fbbe9029becb102189", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::{self, layout::Size};\n use rustc::hir::{Mutability, MutMutable, MutImmutable};\n \n use crate::{\n-    EvalResult, EvalErrorKind, MiriEvalContext, HelpersEvalContextExt,\n+    EvalResult, EvalErrorKind, MiriEvalContext, HelpersEvalContextExt, Evaluator, MutValueVisitor,\n     MemoryKind, MiriMemoryKind, RangeMap, AllocId, Allocation, AllocationExtra,\n     Pointer, MemPlace, Scalar, Immediate, ImmTy, PlaceTy, MPlaceTy,\n };\n@@ -602,17 +602,56 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         _fn_entry: bool,\n         place: PlaceTy<'tcx, Borrow>\n     ) -> EvalResult<'tcx> {\n-        // For now, we only retag if the toplevel type is a reference.\n-        // TODO: Recurse into structs and enums, sharing code with validation.\n         // TODO: Honor `fn_entry`.\n-        let mutbl = match place.layout.ty.sty {\n-            ty::Ref(_, _, mutbl) => mutbl, // go ahead\n-            _ => return Ok(()), // do nothing, for now\n+\n+        // We need a visitor to visit all references.  However, that requires\n+        // a `MemPlace`, so we have a fast path for reference types that\n+        // avoids allocating.\n+        match place.layout.ty.sty {\n+            ty::Ref(_, _, mutbl) => {\n+                // fast path\n+                let val = self.read_immediate(self.place_to_op(place)?)?;\n+                let val = self.reborrow(val, mutbl)?;\n+                self.write_immediate(val, place)?;\n+            }\n+            _ => {}, // handled with the general case below\n         };\n-        // Retag the pointer and write it back.\n-        let val = self.read_immediate(self.place_to_op(place)?)?;\n-        let val = self.reborrow(val, mutbl)?;\n-        self.write_immediate(val, place)?;\n+        let place = self.force_allocation(place)?;\n+\n+        let mut visitor = RetagVisitor { ecx: self };\n+        visitor.visit_value(place)?;\n+\n+        // The actual visitor\n+        struct RetagVisitor<'ecx, 'a, 'mir, 'tcx> {\n+            ecx: &'ecx mut MiriEvalContext<'a, 'mir, 'tcx>,\n+        }\n+        impl<'ecx, 'a, 'mir, 'tcx>\n+            MutValueVisitor<'a, 'mir, 'tcx, Evaluator<'tcx>>\n+        for\n+            RetagVisitor<'ecx, 'a, 'mir, 'tcx>\n+        {\n+            type V = MPlaceTy<'tcx, Borrow>;\n+\n+            #[inline(always)]\n+            fn ecx(&mut self) -> &mut MiriEvalContext<'a, 'mir, 'tcx> {\n+                &mut self.ecx\n+            }\n+\n+            // Primitives of reference type, that is the one thing we are interested in.\n+            fn visit_primitive(&mut self, place: MPlaceTy<'tcx, Borrow>) -> EvalResult<'tcx>\n+            {\n+                match place.layout.ty.sty {\n+                    ty::Ref(_, _, mutbl) => {\n+                        let val = self.ecx.read_immediate(place.into())?;\n+                        let val = self.ecx.reborrow(val, mutbl)?;\n+                        self.ecx.write_immediate(val, place.into())?;\n+                    }\n+                    _ => {}, // nothing to do\n+                }\n+                Ok(())\n+            }\n+        }\n+\n         Ok(())\n     }\n }"}, {"sha": "a6daa5d93d772ddb6dafedfc14539c7480db1ddd", "filename": "tests/compile-fail-fullmir/stacked_borrows/buggy_split_at_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f895d6f2cc9090623652fbbe9029becb102189/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f895d6f2cc9090623652fbbe9029becb102189/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=a1f895d6f2cc9090623652fbbe9029becb102189", "patch": "@@ -11,6 +11,7 @@ mod safe {\n             assert!(mid <= len);\n \n             (from_raw_parts_mut(ptr, len - mid), // BUG: should be \"mid\" instead of \"len - mid\"\n+            //~^ ERROR does not exist on the stack\n             from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n         }\n     }\n@@ -19,7 +20,6 @@ mod safe {\n fn main() {\n     let mut array = [1,2,3,4];\n     let (a, b) = safe::split_at_mut(&mut array, 0);\n-    //~^ ERROR does not exist on the stack\n     a[1] = 5;\n     b[1] = 6;\n }"}]}