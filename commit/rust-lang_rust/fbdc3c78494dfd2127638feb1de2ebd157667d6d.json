{"sha": "fbdc3c78494dfd2127638feb1de2ebd157667d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZGMzYzc4NDk0ZGZkMjEyNzYzOGZlYjFkZTJlYmQxNTc2NjdkNmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-15T12:38:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-15T12:38:24Z"}, "message": "Merge #5390\n\n5390: Don't drop flycheck messages during restart r=matklad a=matklad\n\ncloses #5386\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ad3207d4621d8f9ef7459a2337660ec9dacb05ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad3207d4621d8f9ef7459a2337660ec9dacb05ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbdc3c78494dfd2127638feb1de2ebd157667d6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDvjACRBK7hj4Ov3rIwAAdHIIAFhlFma4fwKQ5PPQgCXhRb84\n3Hz3Hb7OkPPZSdBT/RJl7cFg6lvFhv+cEa7CfeXVRz1x6f7sF64+biVDn2YklhVA\nYjKP75JKKHWSgqdKzeow9bDTyDIQKzXVB3sq3Rw8IqJzpor50uM0KBizJTlDHaIg\nHq8iCIvbrW7Shog3KFXXX4FsqkZYYGOkaNaeJ2cyuDrjL66xmQJtzzshVv/YajqU\no3h/IGctK1kXEQssIls1TnHS69BYhdQ7ITWerA1b2ILuiFW8AhonifDy+uHSiFNK\nJmq5l34AUDZ/1odVSlkufZnRYNOaM7z5SBc4PQxbimWV9CSCTPZA35cYOhynABQ=\n=U+a8\n-----END PGP SIGNATURE-----\n", "payload": "tree ad3207d4621d8f9ef7459a2337660ec9dacb05ba\nparent 2c67ca0146c215df908de0066b124d63d2ba8fe7\nparent a40e05dd5d8b2c5f74c61cd08efed9dc83124657\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594816704 +0000\ncommitter GitHub <noreply@github.com> 1594816704 +0000\n\nMerge #5390\n\n5390: Don't drop flycheck messages during restart r=matklad a=matklad\n\ncloses #5386\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdc3c78494dfd2127638feb1de2ebd157667d6d", "html_url": "https://github.com/rust-lang/rust/commit/fbdc3c78494dfd2127638feb1de2ebd157667d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbdc3c78494dfd2127638feb1de2ebd157667d6d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c67ca0146c215df908de0066b124d63d2ba8fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c67ca0146c215df908de0066b124d63d2ba8fe7", "html_url": "https://github.com/rust-lang/rust/commit/2c67ca0146c215df908de0066b124d63d2ba8fe7"}, {"sha": "a40e05dd5d8b2c5f74c61cd08efed9dc83124657", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40e05dd5d8b2c5f74c61cd08efed9dc83124657", "html_url": "https://github.com/rust-lang/rust/commit/a40e05dd5d8b2c5f74c61cd08efed9dc83124657"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "94973b90a49faf47dabfd05605aaee89a67c8ba4", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbdc3c78494dfd2127638feb1de2ebd157667d6d/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdc3c78494dfd2127638feb1de2ebd157667d6d/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=fbdc3c78494dfd2127638feb1de2ebd157667d6d", "patch": "@@ -63,7 +63,9 @@ pub(crate) struct GlobalState {\n     req_queue: ReqQueue,\n     pub(crate) task_pool: Handle<TaskPool<Task>, Receiver<Task>>,\n     pub(crate) loader: Handle<Box<dyn vfs::loader::Handle>, Receiver<vfs::loader::Message>>,\n-    pub(crate) flycheck: Option<Handle<FlycheckHandle, Receiver<flycheck::Message>>>,\n+    pub(crate) flycheck: Option<FlycheckHandle>,\n+    pub(crate) flycheck_sender: Sender<flycheck::Message>,\n+    pub(crate) flycheck_receiver: Receiver<flycheck::Message>,\n     pub(crate) config: Config,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n@@ -103,12 +105,15 @@ impl GlobalState {\n         };\n \n         let analysis_host = AnalysisHost::new(config.lru_capacity);\n+        let (flycheck_sender, flycheck_receiver) = unbounded();\n         GlobalState {\n             sender,\n             req_queue: ReqQueue::default(),\n             task_pool,\n             loader,\n             flycheck: None,\n+            flycheck_sender,\n+            flycheck_receiver,\n             config,\n             analysis_host,\n             diagnostics: Default::default(),"}, {"sha": "a41f7f56466c561dfc65c2e01b48693eb9cea479", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbdc3c78494dfd2127638feb1de2ebd157667d6d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdc3c78494dfd2127638feb1de2ebd157667d6d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=fbdc3c78494dfd2127638feb1de2ebd157667d6d", "patch": "@@ -5,7 +5,7 @@ use std::{\n     time::{Duration, Instant},\n };\n \n-use crossbeam_channel::{never, select, Receiver};\n+use crossbeam_channel::{select, Receiver};\n use lsp_server::{Connection, Notification, Request, Response};\n use lsp_types::notification::Notification as _;\n use ra_db::VfsPath;\n@@ -108,7 +108,7 @@ impl GlobalState {\n             recv(self.loader.receiver) -> task =>\n                 Some(Event::Vfs(task.unwrap())),\n \n-            recv(self.flycheck.as_ref().map_or(&never(), |it| &it.receiver)) -> task =>\n+            recv(self.flycheck_receiver) -> task =>\n                 Some(Event::Flycheck(task.unwrap())),\n         }\n     }\n@@ -292,7 +292,7 @@ impl GlobalState {\n         let state_changed = self.process_changes();\n         if prev_status == Status::Loading && self.status == Status::Ready {\n             if let Some(flycheck) = &self.flycheck {\n-                flycheck.handle.update();\n+                flycheck.update();\n             }\n         }\n \n@@ -441,7 +441,7 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::DidSaveTextDocument>(|this, params| {\n                 if let Some(flycheck) = &this.flycheck {\n-                    flycheck.handle.update();\n+                    flycheck.update();\n                 }\n                 if let Ok(abs_path) = from_proto::abs_path(&params.text_document.uri) {\n                     this.maybe_refresh(&[(abs_path, ChangeKind::Modify)]);"}, {"sha": "3f4dbdd8c3aa66f57d60b045d18f00fa77afd474", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fbdc3c78494dfd2127638feb1de2ebd157667d6d/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdc3c78494dfd2127638feb1de2ebd157667d6d/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=fbdc3c78494dfd2127638feb1de2ebd157667d6d", "patch": "@@ -1,20 +1,19 @@\n //! Project loading & configuration updates\n use std::{mem, sync::Arc};\n \n-use crossbeam_channel::unbounded;\n use flycheck::FlycheckHandle;\n use ra_db::{CrateGraph, SourceRoot, VfsPath};\n use ra_ide::AnalysisChange;\n+use ra_prof::profile;\n use ra_project_model::{PackageRoot, ProcMacroClient, ProjectWorkspace};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n use crate::{\n     config::{Config, FilesWatcher, LinkedProject},\n-    global_state::{GlobalState, Handle, Status},\n+    global_state::{GlobalState, Status},\n     lsp_ext,\n     main_loop::Task,\n };\n-use ra_prof::profile;\n \n impl GlobalState {\n     pub(crate) fn update_configuration(&mut self, config: Config) {\n@@ -231,21 +230,20 @@ impl GlobalState {\n             }\n         };\n \n-        // FIXME: Figure out the multi-workspace situation\n-        self.flycheck = self.workspaces.iter().find_map(move |w| match w {\n-            ProjectWorkspace::Cargo { cargo, .. } => {\n-                let (sender, receiver) = unbounded();\n-                let sender = Box::new(move |msg| sender.send(msg).unwrap());\n+        let sender = self.flycheck_sender.clone();\n+        let sender = Box::new(move |msg| sender.send(msg).unwrap());\n+        self.flycheck = self\n+            .workspaces\n+            .iter()\n+            // FIXME: Figure out the multi-workspace situation\n+            .find_map(|w| match w {\n+                ProjectWorkspace::Cargo { cargo, sysroot: _ } => Some(cargo),\n+                ProjectWorkspace::Json { .. } => None,\n+            })\n+            .map(move |cargo| {\n                 let cargo_project_root = cargo.workspace_root().to_path_buf();\n-                let handle =\n-                    FlycheckHandle::spawn(sender, config.clone(), cargo_project_root.into());\n-                Some(Handle { handle, receiver })\n-            }\n-            ProjectWorkspace::Json { .. } => {\n-                log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n-                None\n-            }\n-        })\n+                FlycheckHandle::spawn(sender, config.clone(), cargo_project_root.into())\n+            })\n     }\n }\n "}]}