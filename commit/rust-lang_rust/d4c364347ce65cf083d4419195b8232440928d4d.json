{"sha": "d4c364347ce65cf083d4419195b8232440928d4d", "node_id": "C_kwDOAAsO6NoAKGQ0YzM2NDM0N2NlNjVjZjA4M2Q0NDE5MTk1YjgyMzI0NDA5MjhkNGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T15:58:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T15:58:17Z"}, "message": "Auto merge of #96904 - JohnTitor:rollup-f1sz5x0, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #96717 (Handle mismatched generic param kinds in trait impls betterly)\n - #96725 (Expose process windows_process_extensions_main_thread_handle on Windows)\n - #96849 (Move some tests to more reasonable places)\n - #96861 (Use Rust 2021 prelude in std itself.)\n - #96879 (rustdoc: search result ranking fix)\n - #96882 (Don't subst an AdtDef with its own substs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5930ec89b5ac33c607c0475a79d7ac17bf278d92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5930ec89b5ac33c607c0475a79d7ac17bf278d92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c364347ce65cf083d4419195b8232440928d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c364347ce65cf083d4419195b8232440928d4d", "html_url": "https://github.com/rust-lang/rust/commit/d4c364347ce65cf083d4419195b8232440928d4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c364347ce65cf083d4419195b8232440928d4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eead58e75bb3a1d9f00b5a988704328fed6bb2c9", "html_url": "https://github.com/rust-lang/rust/commit/eead58e75bb3a1d9f00b5a988704328fed6bb2c9"}, {"sha": "c5f2c4476e1c72315e7bf405a2e15b5c9489c001", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f2c4476e1c72315e7bf405a2e15b5c9489c001", "html_url": "https://github.com/rust-lang/rust/commit/c5f2c4476e1c72315e7bf405a2e15b5c9489c001"}], "stats": {"total": 494, "additions": 368, "deletions": 126}, "files": [{"sha": "4141d952683efd62f25d35dcc73beddf70b02321", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -41,7 +41,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::lint::{in_external_macro, LintDiagnosticBuilder};\n use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::subst::{GenericArgKind, Subst};\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::{BuiltinLintDiagnostics, FutureIncompatibilityReason};\n@@ -2777,7 +2777,7 @@ impl ClashingExternDeclarations {\n                 let mut ty = ty;\n                 loop {\n                     if let ty::Adt(def, substs) = *ty.kind() {\n-                        let is_transparent = def.subst(tcx, substs).repr().transparent();\n+                        let is_transparent = def.repr().transparent();\n                         let is_non_null = crate::types::nonnull_optimization_guaranteed(tcx, def);\n                         debug!(\n                             \"non_transparent_ty({:?}) -- type is transparent? {}, type is non-null? {}\",\n@@ -2837,11 +2837,7 @@ impl ClashingExternDeclarations {\n \n                 ensure_sufficient_stack(|| {\n                     match (a_kind, b_kind) {\n-                        (Adt(a_def, a_substs), Adt(b_def, b_substs)) => {\n-                            let a = a.subst(cx.tcx, a_substs);\n-                            let b = b.subst(cx.tcx, b_substs);\n-                            debug!(\"Comparing {:?} and {:?}\", a, b);\n-\n+                        (Adt(a_def, _), Adt(b_def, _)) => {\n                             // We can immediately rule out these types as structurally same if\n                             // their layouts differ.\n                             match compare_layouts(a, b) {"}, {"sha": "a83924d4636c59f4f57791c2eb4107591a0dccf4", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 116, "deletions": 51, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -7,10 +7,10 @@ use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::util;\n-use rustc_middle::ty;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::util::ExplicitSelf;\n+use rustc_middle::ty::{self, DefIdTree};\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n@@ -48,6 +48,10 @@ crate fn compare_impl_method<'tcx>(\n         return;\n     }\n \n+    if let Err(_) = compare_generic_param_kinds(tcx, impl_m, trait_m) {\n+        return;\n+    }\n+\n     if let Err(_) =\n         compare_number_of_method_arguments(tcx, impl_m, impl_m_span, trait_m, trait_item_span)\n     {\n@@ -62,10 +66,6 @@ crate fn compare_impl_method<'tcx>(\n     {\n         return;\n     }\n-\n-    if let Err(_) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n-        return;\n-    }\n }\n \n fn compare_predicate_entailment<'tcx>(\n@@ -579,6 +579,27 @@ fn compare_self_type<'tcx>(\n     Ok(())\n }\n \n+/// Checks that the number of generics on a given assoc item in a trait impl is the same\n+/// as the number of generics on the respective assoc item in the trait definition.\n+///\n+/// For example this code emits the errors in the following code:\n+/// ```\n+/// trait Trait {\n+///     fn foo();\n+///     type Assoc<T>;\n+/// }\n+///\n+/// impl Trait for () {\n+///     fn foo<T>() {}\n+///     //~^ error\n+///     type Assoc = u32;\n+///     //~^ error\n+/// }\n+/// ```\n+///\n+/// Notably this does not error on `foo<T>` implemented as `foo<const N: u8>` or\n+/// `foo<const N: u8>` implemented as `foo<const N: u32>`. This is handled in\n+/// [`compare_generic_param_kinds`]. This function also does not handle lifetime parameters\n fn compare_number_of_generics<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_: &ty::AssocItem,\n@@ -589,6 +610,15 @@ fn compare_number_of_generics<'tcx>(\n     let trait_own_counts = tcx.generics_of(trait_.def_id).own_counts();\n     let impl_own_counts = tcx.generics_of(impl_.def_id).own_counts();\n \n+    // This avoids us erroring on `foo<T>` implemented as `foo<const N: u8>` as this is implemented\n+    // in `compare_generic_param_kinds` which will give a nicer error message than something like:\n+    // \"expected 1 type parameter, found 0 type parameters\"\n+    if (trait_own_counts.types + trait_own_counts.consts)\n+        == (impl_own_counts.types + impl_own_counts.consts)\n+    {\n+        return Ok(());\n+    }\n+\n     let matchings = [\n         (\"type\", trait_own_counts.types, impl_own_counts.types),\n         (\"const\", trait_own_counts.consts, impl_own_counts.consts),\n@@ -914,60 +944,93 @@ fn compare_synthetic_generics<'tcx>(\n     if let Some(reported) = error_found { Err(reported) } else { Ok(()) }\n }\n \n-fn compare_const_param_types<'tcx>(\n+/// Checks that all parameters in the generics of a given assoc item in a trait impl have\n+/// the same kind as the respective generic parameter in the trait def.\n+///\n+/// For example all 4 errors in the following code are emitted here:\n+/// ```\n+/// trait Foo {\n+///     fn foo<const N: u8>();\n+///     type bar<const N: u8>;\n+///     fn baz<const N: u32>();\n+///     type blah<T>;\n+/// }\n+///\n+/// impl Foo for () {\n+///     fn foo<const N: u64>() {}\n+///     //~^ error\n+///     type bar<const N: u64> {}\n+///     //~^ error\n+///     fn baz<T>() {}\n+///     //~^ error\n+///     type blah<const N: i64> = u32;\n+///     //~^ error\n+/// }\n+/// ```\n+///\n+/// This function does not handle lifetime parameters\n+fn compare_generic_param_kinds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    impl_m: &ty::AssocItem,\n-    trait_m: &ty::AssocItem,\n-    trait_item_span: Option<Span>,\n+    impl_item: &ty::AssocItem,\n+    trait_item: &ty::AssocItem,\n ) -> Result<(), ErrorGuaranteed> {\n-    let const_params_of = |def_id| {\n-        tcx.generics_of(def_id).params.iter().filter_map(|param| match param.kind {\n-            GenericParamDefKind::Const { .. } => Some(param.def_id),\n-            _ => None,\n+    assert_eq!(impl_item.kind, trait_item.kind);\n+\n+    let ty_const_params_of = |def_id| {\n+        tcx.generics_of(def_id).params.iter().filter(|param| {\n+            matches!(\n+                param.kind,\n+                GenericParamDefKind::Const { .. } | GenericParamDefKind::Type { .. }\n+            )\n         })\n     };\n-    let const_params_impl = const_params_of(impl_m.def_id);\n-    let const_params_trait = const_params_of(trait_m.def_id);\n-\n-    for (const_param_impl, const_param_trait) in iter::zip(const_params_impl, const_params_trait) {\n-        let impl_ty = tcx.type_of(const_param_impl);\n-        let trait_ty = tcx.type_of(const_param_trait);\n-        if impl_ty != trait_ty {\n-            let (impl_span, impl_ident) = match tcx.hir().get_if_local(const_param_impl) {\n-                Some(hir::Node::GenericParam(hir::GenericParam { span, name, .. })) => (\n-                    span,\n-                    match name {\n-                        hir::ParamName::Plain(ident) => Some(ident),\n-                        _ => None,\n-                    },\n-                ),\n-                other => bug!(\n-                    \"expected GenericParam, found {:?}\",\n-                    other.map_or_else(|| \"nothing\".to_string(), |n| format!(\"{:?}\", n))\n-                ),\n-            };\n-            let trait_span = match tcx.hir().get_if_local(const_param_trait) {\n-                Some(hir::Node::GenericParam(hir::GenericParam { span, .. })) => Some(span),\n-                _ => None,\n-            };\n+\n+    for (param_impl, param_trait) in\n+        iter::zip(ty_const_params_of(impl_item.def_id), ty_const_params_of(trait_item.def_id))\n+    {\n+        use GenericParamDefKind::*;\n+        if match (&param_impl.kind, &param_trait.kind) {\n+            (Const { .. }, Const { .. })\n+                if tcx.type_of(param_impl.def_id) != tcx.type_of(param_trait.def_id) =>\n+            {\n+                true\n+            }\n+            (Const { .. }, Type { .. }) | (Type { .. }, Const { .. }) => true,\n+            // this is exhaustive so that anyone adding new generic param kinds knows\n+            // to make sure this error is reported for them.\n+            (Const { .. }, Const { .. }) | (Type { .. }, Type { .. }) => false,\n+            (Lifetime { .. }, _) | (_, Lifetime { .. }) => unreachable!(),\n+        } {\n+            let param_impl_span = tcx.def_span(param_impl.def_id);\n+            let param_trait_span = tcx.def_span(param_trait.def_id);\n+\n             let mut err = struct_span_err!(\n                 tcx.sess,\n-                *impl_span,\n+                param_impl_span,\n                 E0053,\n-                \"method `{}` has an incompatible const parameter type for trait\",\n-                trait_m.name\n-            );\n-            err.span_note(\n-                trait_span.map_or_else(|| trait_item_span.unwrap_or(*impl_span), |span| *span),\n-                &format!(\n-                    \"the const parameter{} has type `{}`, but the declaration \\\n-                              in trait `{}` has type `{}`\",\n-                    &impl_ident.map_or_else(|| \"\".to_string(), |ident| format!(\" `{ident}`\")),\n-                    impl_ty,\n-                    tcx.def_path_str(trait_m.def_id),\n-                    trait_ty\n-                ),\n+                \"{} `{}` has an incompatible generic parameter for trait `{}`\",\n+                assoc_item_kind_str(&impl_item),\n+                trait_item.name,\n+                &tcx.def_path_str(tcx.parent(trait_item.def_id))\n             );\n+\n+            let make_param_message = |prefix: &str, param: &ty::GenericParamDef| match param.kind {\n+                Const { .. } => {\n+                    format!(\"{} const parameter of type `{}`\", prefix, tcx.type_of(param.def_id))\n+                }\n+                Type { .. } => format!(\"{} type parameter\", prefix),\n+                Lifetime { .. } => unreachable!(),\n+            };\n+\n+            let trait_header_span = tcx.def_ident_span(tcx.parent(trait_item.def_id)).unwrap();\n+            err.span_label(trait_header_span, \"\");\n+            err.span_label(param_trait_span, make_param_message(\"expected\", param_trait));\n+\n+            let impl_header_span =\n+                tcx.sess.source_map().guess_head_span(tcx.def_span(tcx.parent(impl_item.def_id)));\n+            err.span_label(impl_header_span, \"\");\n+            err.span_label(param_impl_span, make_param_message(\"found\", param_impl));\n+\n             let reported = err.emit();\n             return Err(reported);\n         }\n@@ -1095,6 +1158,8 @@ crate fn compare_ty_impl<'tcx>(\n     let _: Result<(), ErrorGuaranteed> = (|| {\n         compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n \n+        compare_generic_param_kinds(tcx, impl_ty, trait_ty)?;\n+\n         let sp = tcx.def_span(impl_ty.def_id);\n         compare_type_predicate_entailment(tcx, impl_ty, sp, trait_ty, impl_trait_ref)?;\n "}, {"sha": "977714281fbbea8169a30c44dc26f0ffe2b94547", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -12,7 +12,7 @@ use crate::collections::TryReserveErrorKind;\n use crate::fmt::{self, Debug};\n #[allow(deprecated)]\n use crate::hash::{BuildHasher, Hash, Hasher, SipHasher13};\n-use crate::iter::{FromIterator, FusedIterator};\n+use crate::iter::FusedIterator;\n use crate::ops::Index;\n use crate::sys;\n "}, {"sha": "13bba0a6fd8922c613f32f73ba90c2a4795f0277", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -7,7 +7,7 @@ use crate::borrow::Borrow;\n use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{BuildHasher, Hash};\n-use crate::iter::{Chain, FromIterator, FusedIterator};\n+use crate::iter::{Chain, FusedIterator};\n use crate::ops::{BitAnd, BitOr, BitXor, Sub};\n \n use super::map::{map_try_reserve_error, RandomState};"}, {"sha": "ae13275e4b35d7869478db492b25b1efc60720c8", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -6,7 +6,7 @@ use crate::cmp;\n use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::iter::{Extend, FromIterator};\n+use crate::iter::Extend;\n use crate::ops;\n use crate::rc::Rc;\n use crate::str::FromStr;"}, {"sha": "0ce6ae00ee250e5054b2072a51bdc4416981a126", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -7,8 +7,6 @@ use crate::alloc::Allocator;\n use crate::cmp;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n \n-use core::convert::TryInto;\n-\n /// A `Cursor` wraps an in-memory buffer and provides it with a\n /// [`Seek`] implementation.\n ///"}, {"sha": "94812e3fe3b2c483b15019c6695d8e2704fa2921", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -252,7 +252,6 @@\n mod tests;\n \n use crate::cmp;\n-use crate::convert::TryInto;\n use crate::fmt;\n use crate::mem::replace;\n use crate::ops::{Deref, DerefMut};"}, {"sha": "6dc3fd9858451910ce5ee74a98970374a325e591", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -343,7 +343,7 @@\n // to import the prelude implicitly when building crates that depend on std.\n #[prelude_import]\n #[allow(unused)]\n-use prelude::v1::*;\n+use prelude::rust_2021::*;\n \n // Access to Bencher, etc.\n #[cfg(test)]"}, {"sha": "81dd042425c1d0dfd52addbf74379f6865ecf2af", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -2,7 +2,6 @@\n mod tests;\n \n use crate::cmp::Ordering;\n-use crate::convert::TryInto;\n use crate::fmt;\n use crate::hash;\n use crate::io::{self, Write};"}, {"sha": "069b66099855956d6d6d41b236baefd05ebfe52d", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -6,7 +6,6 @@\n #[cfg(test)]\n mod tests;\n \n-use crate::convert::TryInto as _;\n use crate::error::Error;\n use crate::fmt;\n use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};"}, {"sha": "9e31b8b32a19738744e65362c4241e27df6de127", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,5 +1,4 @@\n use super::{sockaddr_un, SocketAddr};\n-use crate::convert::TryFrom;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::marker::PhantomData;\n use crate::mem::{size_of, zeroed};"}, {"sha": "c1f11c56b8f65a1a01f78e9857907d45302209c3", "filename": "library/std/src/os/unix/net/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -10,7 +10,6 @@ use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n ))]\n-use crate::iter::FromIterator;\n #[cfg(any(\n     target_os = \"android\",\n     target_os = \"dragonfly\","}, {"sha": "41758f2ced111caf2ec5f79be494d93cab70cba6", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -3,7 +3,6 @@\n #![unstable(feature = \"io_safety\", issue = \"87074\")]\n \n use super::raw::{AsRawHandle, FromRawHandle, IntoRawHandle, RawHandle};\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::fs;\n use crate::io;"}, {"sha": "1c7e361c2a4a8d3767ea98b9e140ffce68c71c2c", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -180,3 +180,17 @@ impl CommandExt for process::Command {\n         self\n     }\n }\n+\n+#[unstable(feature = \"windows_process_extensions_main_thread_handle\", issue = \"96723\")]\n+pub trait ChildExt: Sealed {\n+    /// Extracts the main thread raw handle, without taking ownership\n+    #[unstable(feature = \"windows_process_extensions_main_thread_handle\", issue = \"96723\")]\n+    fn main_thread_handle(&self) -> BorrowedHandle<'_>;\n+}\n+\n+#[unstable(feature = \"windows_process_extensions_main_thread_handle\", issue = \"96723\")]\n+impl ChildExt for process::Child {\n+    fn main_thread_handle(&self) -> BorrowedHandle<'_> {\n+        self.handle.main_thread_handle()\n+    }\n+}"}, {"sha": "74547617150b0b48bd22294456d8fbe43766072e", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};"}, {"sha": "c17e6c8af62763c6f13ac388f0a32ee48a8e16c6", "filename": "library/std/src/sys/hermit/time.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,7 +1,6 @@\n #![allow(dead_code)]\n \n use crate::cmp::Ordering;\n-use crate::convert::TryInto;\n use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::timespec;\n use crate::sys::hermit::abi::{CLOCK_MONOTONIC, CLOCK_REALTIME, NSEC_PER_SEC};"}, {"sha": "44d409444bca48ec90efdbc059e8ce1bc0f4e8a9", "filename": "library/std/src/sys/itron/spin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fspin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fspin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fspin.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,7 +1,6 @@\n use super::abi;\n use crate::{\n     cell::UnsafeCell,\n-    convert::TryFrom,\n     mem::MaybeUninit,\n     sync::atomic::{AtomicBool, AtomicUsize, Ordering},\n };"}, {"sha": "d28f57f33be20566de33bd7a79389a85067105a6", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -8,7 +8,6 @@ use super::{\n };\n use crate::{\n     cell::UnsafeCell,\n-    convert::TryFrom,\n     ffi::CStr,\n     hint, io,\n     mem::ManuallyDrop,"}, {"sha": "427ea0d80e10739aff897e15a162feb833a60d9a", "filename": "library/std/src/sys/itron/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Ftime.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,5 +1,5 @@\n use super::{abi, error::expect_success};\n-use crate::{convert::TryInto, mem::MaybeUninit, time::Duration};\n+use crate::{mem::MaybeUninit, time::Duration};\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n pub struct Instant(abi::SYSTIM);"}, {"sha": "2f99abba77667a46de92aef2fc10455b1f54ea7f", "filename": "library/std/src/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,5 +1,4 @@\n use crate::cmp;\n-use crate::convert::TryFrom;\n use crate::io::{Error as IoError, ErrorKind, IoSlice, IoSliceMut, Result as IoResult};\n use crate::sys::rand::rdrand64;\n use crate::time::{Duration, Instant};"}, {"sha": "1d899525081b97a1c4ea6e05c3d50f8ed8016161", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::TryFrom;\n use crate::error;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};"}, {"sha": "ce31cb45a69a1aef67290687d9b818e26654cf9d", "filename": "library/std/src/sys/solid/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,5 +1,5 @@\n use super::{abi, error::expect_success};\n-use crate::{convert::TryInto, mem::MaybeUninit, time::Duration};\n+use crate::{mem::MaybeUninit, time::Duration};\n \n pub use super::itron::time::Instant;\n "}, {"sha": "5d0fb07900326fd218856b7b2fd923653cdc5d3d", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -943,7 +943,6 @@ impl File {\n     }\n \n     pub fn truncate(&self, size: u64) -> io::Result<()> {\n-        use crate::convert::TryInto;\n         let size: off64_t =\n             size.try_into().map_err(|e| io::Error::new(io::ErrorKind::InvalidInput, e))?;\n         cvt_r(|| unsafe { ftruncate64(self.as_raw_fd(), size) }).map(drop)"}, {"sha": "8d5ad18997d07859a03e5d1778f878458cf72f52", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -136,7 +136,6 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n \n #[cfg(target_os = \"openbsd\")]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n-    use crate::convert::TryInto;\n     use crate::ptr::{null, null_mut};\n     let timespec = timeout.and_then(|d| {\n         Some(libc::timespec {\n@@ -185,8 +184,6 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n \n #[cfg(target_os = \"dragonfly\")]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n-    use crate::convert::TryFrom;\n-\n     // A timeout of 0 means infinite.\n     // We round smaller timeouts up to 1 millisecond.\n     // Overflows are rounded up to an infinite timeout."}, {"sha": "8f7abb55e237644ef0b03d90c6b58cc09ec20dbd", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -45,7 +45,6 @@\n //! * complexity\n \n use crate::cmp::min;\n-use crate::convert::TryInto;\n use crate::fs::{File, Metadata};\n use crate::io::copy::generic_copy;\n use crate::io::{"}, {"sha": "9967588939ac9f675338ab67474bf02f9c92de82", "filename": "library/std/src/sys/unix/l4re.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -9,7 +9,6 @@ macro_rules! unimpl {\n \n pub mod net {\n     #![allow(warnings)]\n-    use crate::convert::TryFrom;\n     use crate::fmt;\n     use crate::io::{self, IoSlice, IoSliceMut};\n     use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};"}, {"sha": "73f5d3a618badc12e557e77f9f0af05624b31bed", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io;\n use crate::mem;"}, {"sha": "23bb6d6c15f637fe1a36f61b5f5400d8125cefc9", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n use crate::mem;"}, {"sha": "5db57ee9e9e18691e346fa7081cf31d9dc4992da", "filename": "library/std/src/sys/unix/process/process_unsupported.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io;\n use crate::io::ErrorKind;"}, {"sha": "200ef6719679845ca7ed9076ebc7a23bc46ccbea", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n use crate::num::NonZeroI32;"}, {"sha": "2e596486f9c8690e1a132bcf07289e5bef02d85c", "filename": "library/std/src/sys/unix/process/zircon.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,6 +1,5 @@\n #![allow(non_camel_case_types, unused)]\n \n-use crate::convert::TryInto;\n use crate::io;\n use crate::mem::MaybeUninit;\n use crate::os::raw::c_char;"}, {"sha": "333182bdad4de809d7313d430f8ebc4209952a95", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -2,7 +2,6 @@ use crate::fmt;\n use crate::time::Duration;\n \n pub use self::inner::Instant;\n-use crate::convert::TryInto;\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };\n@@ -127,7 +126,6 @@ impl Timespec {\n     }\n \n     pub fn to_timespec(&self) -> Option<libc::timespec> {\n-        use crate::convert::TryInto;\n         Some(libc::timespec {\n             tv_sec: self.tv_sec.try_into().ok()?,\n             tv_nsec: self.tv_nsec.try_into().ok()?,"}, {"sha": "360115d5033747c298c23d1d8a9c48d3bc1eaefc", "filename": "library/std/src/sys/unsupported/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};"}, {"sha": "937b1b850e7ba7201a61161c3d42ff41efa127d6", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -2,7 +2,6 @@\n \n use super::err2io;\n use super::fd::WasiFd;\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};"}, {"sha": "f4fbe9f48554b0e19fb2db3db3ceb2adf5b09c6d", "filename": "library/std/src/sys/wasm/atomics/futex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,5 +1,4 @@\n use crate::arch::wasm32;\n-use crate::convert::TryInto;\n use crate::sync::atomic::AtomicU32;\n use crate::time::Duration;\n "}, {"sha": "157d8a044d3cd815ff2cda9c7fc69c01314c52bb", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,6 +1,5 @@\n use crate::os::windows::prelude::*;\n \n-use crate::convert::TryInto;\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::io::{self, Error, IoSlice, IoSliceMut, ReadBuf, SeekFrom};"}, {"sha": "8e5325b80e4a50564b86bb70eda44b08028611cf", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -5,7 +5,6 @@ mod tests;\n \n use crate::cmp;\n use crate::collections::BTreeMap;\n-use crate::convert::{TryFrom, TryInto};\n use crate::env;\n use crate::env::consts::{EXE_EXTENSION, EXE_SUFFIX};\n use crate::ffi::{OsStr, OsString};\n@@ -14,7 +13,7 @@ use crate::io::{self, Error, ErrorKind};\n use crate::mem;\n use crate::num::NonZeroI32;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n-use crate::os::windows::io::{AsRawHandle, FromRawHandle, IntoRawHandle};\n+use crate::os::windows::io::{AsHandle, AsRawHandle, BorrowedHandle, FromRawHandle, IntoRawHandle};\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n use crate::sys::args::{self, Arg};\n@@ -334,13 +333,14 @@ impl Command {\n             ))\n         }?;\n \n-        // We close the thread handle because we don't care about keeping\n-        // the thread id valid, and we aren't keeping the thread handle\n-        // around to be able to close it later.\n         unsafe {\n-            drop(Handle::from_raw_handle(pi.hThread));\n-\n-            Ok((Process { handle: Handle::from_raw_handle(pi.hProcess) }, pipes))\n+            Ok((\n+                Process {\n+                    handle: Handle::from_raw_handle(pi.hProcess),\n+                    main_thread_handle: Handle::from_raw_handle(pi.hThread),\n+                },\n+                pipes,\n+            ))\n         }\n     }\n }\n@@ -609,6 +609,7 @@ impl From<File> for Stdio {\n /// for the process to terminate.\n pub struct Process {\n     handle: Handle,\n+    main_thread_handle: Handle,\n }\n \n impl Process {\n@@ -621,6 +622,10 @@ impl Process {\n         unsafe { c::GetProcessId(self.handle.as_raw_handle()) as u32 }\n     }\n \n+    pub fn main_thread_handle(&self) -> BorrowedHandle<'_> {\n+        self.main_thread_handle.as_handle()\n+    }\n+\n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n         unsafe {\n             let res = c::WaitForSingleObject(self.handle.as_raw_handle(), c::INFINITE);"}, {"sha": "3fc0c75240c33c0adede4c91f73c1d77fcde74e2", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -24,6 +24,31 @@ fn test_raw_args() {\n     );\n }\n \n+#[test]\n+fn test_thread_handle() {\n+    use crate::os::windows::io::BorrowedHandle;\n+    use crate::os::windows::process::{ChildExt, CommandExt};\n+    const CREATE_SUSPENDED: u32 = 0x00000004;\n+\n+    let p = Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).creation_flags(CREATE_SUSPENDED).spawn();\n+    assert!(p.is_ok());\n+    let mut p = p.unwrap();\n+\n+    extern \"system\" {\n+        fn ResumeThread(_: BorrowedHandle<'_>) -> u32;\n+    }\n+    unsafe {\n+        ResumeThread(p.main_thread_handle());\n+    }\n+\n+    crate::thread::sleep(crate::time::Duration::from_millis(100));\n+\n+    let res = p.try_wait();\n+    assert!(res.is_ok());\n+    assert!(res.unwrap().is_some());\n+    assert!(p.try_wait().unwrap().unwrap().success());\n+}\n+\n #[test]\n fn test_make_command_line() {\n     fn test_wrapper(prog: &str, args: &[&str], force_quotes: bool) -> String {"}, {"sha": "c5c9e97e646fb94fa6960c1da38ba09f1265f04b", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::TryInto;\n use crate::ffi::CStr;\n use crate::io;\n use crate::num::NonZeroUsize;"}, {"sha": "d876e0f6f3c03b5bf8a590d78c4461b1429585de", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -57,7 +57,6 @@\n // [3]: https://docs.microsoft.com/en-us/archive/msdn-magazine/2012/november/windows-with-c-the-evolution-of-synchronization-in-windows-and-c\n // [4]: Windows Internals, Part 1, ISBN 9780735671300\n \n-use crate::convert::TryFrom;\n use crate::pin::Pin;\n use crate::ptr;\n use crate::sync::atomic::{"}, {"sha": "8f46781c7534092a6f11d8d4205eebff812b2fcc", "filename": "library/std/src/sys/windows/time.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,5 +1,4 @@\n use crate::cmp::Ordering;\n-use crate::convert::TryInto;\n use crate::fmt;\n use crate::mem;\n use crate::sys::c;"}, {"sha": "05425f4a3622ce04167f4df5dca684774bfd17ce", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -2,7 +2,6 @@\n mod tests;\n \n use crate::cmp;\n-use crate::convert::{TryFrom, TryInto};\n use crate::ffi::CString;\n use crate::fmt;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};"}, {"sha": "57fa4989358a4f5d880aa142a6dcfdf907693610", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -25,7 +25,7 @@ use crate::char;\n use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::iter::{FromIterator, FusedIterator};\n+use crate::iter::FusedIterator;\n use crate::mem;\n use crate::ops;\n use crate::rc::Rc;"}, {"sha": "7754d626e209ef179ef6ced58973c4af34eb1538", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1323,7 +1323,6 @@ window.initSearch = rawSearchIndex => {\n                 }\n             }\n             lev = levenshtein(searchWord, elem.pathLast);\n-            lev += lev_add;\n             if (lev > 0 && elem.pathLast.length > 2 && searchWord.indexOf(elem.pathLast) > -1)\n             {\n                 if (elem.pathLast.length < 6) {\n@@ -1332,6 +1331,7 @@ window.initSearch = rawSearchIndex => {\n                     lev = 0;\n                 }\n             }\n+            lev += lev_add;\n             if (lev > MAX_LEV_DISTANCE) {\n                 return;\n             } else if (index !== -1 && elem.fullPath.length < 2) {"}, {"sha": "7dcdd402312483fad08d960e98b9a6ee2ac301ea", "filename": "src/test/rustdoc-js-std/path-ordering.js", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Frustdoc-js-std%2Fpath-ordering.js", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Frustdoc-js-std%2Fpath-ordering.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fpath-ordering.js?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -0,0 +1,12 @@\n+const QUERY = 'hashset::insert';\n+\n+const EXPECTED = {\n+    'others': [\n+        // ensure hashset::insert comes first\n+        { 'path': 'std::collections::hash_set::HashSet', 'name': 'insert' },\n+        { 'path': 'std::collections::hash_set::HashSet', 'name': 'get_or_insert' },\n+        { 'path': 'std::collections::hash_set::HashSet', 'name': 'get_or_insert_with' },\n+        { 'path': 'std::collections::hash_set::HashSet', 'name': 'get_or_insert_owned' },\n+        { 'path': 'std::collections::hash_map::HashMap', 'name': 'insert' },\n+    ],\n+};"}, {"sha": "4aee569b0f481c4ee6791cb5ac800bad4991182f", "filename": "src/test/rustdoc-js/path-ordering.js", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Frustdoc-js%2Fpath-ordering.js", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Frustdoc-js%2Fpath-ordering.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fpath-ordering.js?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -0,0 +1,14 @@\n+// exact-check\n+\n+const QUERY = 'b::ccccccc';\n+\n+const EXPECTED = {\n+    'others': [\n+        // `ccccccc` is an exact match for all three of these.\n+        // However `b` is a closer match for `bb` than for any\n+        // of the others, so it ought to go first.\n+        { 'path': 'path_ordering::bb', 'name': 'Ccccccc' },\n+        { 'path': 'path_ordering::aa', 'name': 'Ccccccc' },\n+        { 'path': 'path_ordering::dd', 'name': 'Ccccccc' },\n+    ],\n+};"}, {"sha": "7843cf7f9dc489a0830fec7decb6288f7ea637c6", "filename": "src/test/rustdoc-js/path-ordering.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Frustdoc-js%2Fpath-ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Frustdoc-js%2Fpath-ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fpath-ordering.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -0,0 +1,9 @@\n+pub mod dd {\n+    pub struct Ccccccc;\n+}\n+pub mod aa {\n+    pub struct Ccccccc;\n+}\n+pub mod bb {\n+    pub struct Ccccccc;\n+}"}, {"sha": "1e48878f632e569a75989da8fbc217540846196d", "filename": "src/test/ui/borrowck/issue-28934.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fborrowck%2Fissue-28934.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fborrowck%2Fissue-28934.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-28934.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-28934.rs"}, {"sha": "694d86feb5a34cc39526d96fa4f61e4d58ebf080", "filename": "src/test/ui/closures/issue-6801.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-6801.rs"}, {"sha": "48c6acd1f49e44a7e6447df407ce4be6fede7816", "filename": "src/test/ui/closures/issue-6801.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-6801.stderr"}, {"sha": "5c9323261a973622d2bcaa4da320a13d948bf5f5", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -0,0 +1,41 @@\n+trait Trait {\n+    fn foo<U>() {}\n+}\n+impl Trait for () {\n+    fn foo<const M: u64>() {}\n+    //~^ error: method `foo` has an incompatible generic parameter for trait\n+}\n+\n+trait Other {\n+    fn bar<const M: u8>() {}\n+}\n+impl Other for () {\n+    fn bar<T>() {}\n+    //~^ error: method `bar` has an incompatible generic parameter for trait\n+}\n+\n+trait Uwu {\n+    fn baz<const N: u32>() {}\n+}\n+impl Uwu for () {\n+    fn baz<const N: i32>() {}\n+    //~^ error: method `baz` has an incompatible generic parameter for trait\n+}\n+\n+trait Aaaaaa {\n+    fn bbbb<const N: u32, T>() {}\n+}\n+impl Aaaaaa for () {\n+    fn bbbb<T, const N: u32>() {}\n+    //~^ error: method `bbbb` has an incompatible generic parameter for trait\n+}\n+\n+trait Names {\n+    fn abcd<T, const N: u32>() {}\n+}\n+impl Names for () {\n+    fn abcd<const N: u32, T>() {}\n+    //~^ error: method `abcd` has an incompatible generic parameter for trait\n+}\n+\n+fn main() {}"}, {"sha": "3455f2c8ea97b3db709d7ae345242ecf40798e92", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -0,0 +1,68 @@\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Trait`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:5:12\n+   |\n+LL | trait Trait {\n+   |       -----\n+LL |     fn foo<U>() {}\n+   |            - expected type parameter\n+LL | }\n+LL | impl Trait for () {\n+   | -----------------\n+LL |     fn foo<const M: u64>() {}\n+   |            ^^^^^^^^^^^^ found const parameter of type `u64`\n+\n+error[E0053]: method `bar` has an incompatible generic parameter for trait `Other`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:13:12\n+   |\n+LL | trait Other {\n+   |       -----\n+LL |     fn bar<const M: u8>() {}\n+   |            ----------- expected const parameter of type `u8`\n+LL | }\n+LL | impl Other for () {\n+   | -----------------\n+LL |     fn bar<T>() {}\n+   |            ^ found type parameter\n+\n+error[E0053]: method `baz` has an incompatible generic parameter for trait `Uwu`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:21:12\n+   |\n+LL | trait Uwu {\n+   |       ---\n+LL |     fn baz<const N: u32>() {}\n+   |            ------------ expected const parameter of type `u32`\n+LL | }\n+LL | impl Uwu for () {\n+   | ---------------\n+LL |     fn baz<const N: i32>() {}\n+   |            ^^^^^^^^^^^^ found const parameter of type `i32`\n+\n+error[E0053]: method `bbbb` has an incompatible generic parameter for trait `Aaaaaa`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:29:13\n+   |\n+LL | trait Aaaaaa {\n+   |       ------\n+LL |     fn bbbb<const N: u32, T>() {}\n+   |             ------------ expected const parameter of type `u32`\n+LL | }\n+LL | impl Aaaaaa for () {\n+   | ------------------\n+LL |     fn bbbb<T, const N: u32>() {}\n+   |             ^ found type parameter\n+\n+error[E0053]: method `abcd` has an incompatible generic parameter for trait `Names`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:37:13\n+   |\n+LL | trait Names {\n+   |       -----\n+LL |     fn abcd<T, const N: u32>() {}\n+   |             - expected type parameter\n+LL | }\n+LL | impl Names for () {\n+   | -----------------\n+LL |     fn abcd<const N: u32, T>() {}\n+   |             ^^^^^^^^^^^^ found const parameter of type `u32`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "ae4bd943fd415d1414731414603902c6bfb62967", "filename": "src/test/ui/const-generics/issues/issue-86820.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,6 +1,6 @@\n // Regression test for the ICE described in #86820.\n \n-#![allow(unused,dead_code)]\n+#![allow(unused, dead_code)]\n use std::ops::BitAnd;\n \n const C: fn() = || is_set();\n@@ -9,13 +9,12 @@ fn is_set() {\n }\n \n trait Bits {\n-    fn bit<const I : u8>(self) -> bool;\n-    //~^ NOTE: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n+    fn bit<const I: u8>(self) -> bool;\n }\n \n impl Bits for u8 {\n-    fn bit<const I : usize>(self) -> bool {\n-    //~^ ERROR: method `bit` has an incompatible const parameter type for trait [E0053]\n+    fn bit<const I: usize>(self) -> bool {\n+        //~^ ERROR: method `bit` has an incompatible generic parameter for trait `Bits` [E0053]\n         let i = 1 << I;\n         let mask = u8::from(i);\n         mask & self == mask"}, {"sha": "3a9cd957f35e7a65c3e1959d7a5ce878fa59ac09", "filename": "src/test/ui/const-generics/issues/issue-86820.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -1,14 +1,15 @@\n-error[E0053]: method `bit` has an incompatible const parameter type for trait\n-  --> $DIR/issue-86820.rs:17:12\n+error[E0053]: method `bit` has an incompatible generic parameter for trait `Bits`\n+  --> $DIR/issue-86820.rs:16:12\n    |\n-LL |     fn bit<const I : usize>(self) -> bool {\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-note: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n-  --> $DIR/issue-86820.rs:12:12\n-   |\n-LL |     fn bit<const I : u8>(self) -> bool;\n-   |            ^^^^^^^^^^^^\n+LL | trait Bits {\n+   |       ----\n+LL |     fn bit<const I: u8>(self) -> bool;\n+   |            ----------- expected const parameter of type `u8`\n+...\n+LL | impl Bits for u8 {\n+   | ----------------\n+LL |     fn bit<const I: usize>(self) -> bool {\n+   |            ^^^^^^^^^^^^^^ found const parameter of type `usize`\n \n error: aborting due to previous error\n "}, {"sha": "6bed8e3aff9754832a89037db7becddd51d6f8d6", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -0,0 +1,12 @@\n+#![feature(generic_associated_types)]\n+\n+trait Trait {\n+    type Foo<const N: u8>;\n+}\n+\n+impl Trait for () {\n+    type Foo<const N: u64> = u32;\n+    //~^ error: type `Foo` has an incompatible generic parameter for trait\n+}\n+\n+fn main() {}"}, {"sha": "89c993dee5e694c270b23bc0a000bab3742308b9", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -0,0 +1,16 @@\n+error[E0053]: type `Foo` has an incompatible generic parameter for trait `Trait`\n+  --> $DIR/const_params_have_right_type.rs:8:14\n+   |\n+LL | trait Trait {\n+   |       -----\n+LL |     type Foo<const N: u8>;\n+   |              ----------- expected const parameter of type `u8`\n+...\n+LL | impl Trait for () {\n+   | -----------------\n+LL |     type Foo<const N: u64> = u32;\n+   |              ^^^^^^^^^^^^ found const parameter of type `u64`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "9a9a501cae157ddb52fa2fa75f2ed26f7b8cd2bf", "filename": "src/test/ui/macros/issue-38715.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fmacros%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fmacros%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-38715.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-38715.rs"}, {"sha": "c87d9f7360b98b4032919c473eff2217a8020cb0", "filename": "src/test/ui/macros/issue-38715.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fmacros%2Fissue-38715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fmacros%2Fissue-38715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-38715.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-38715.stderr"}, {"sha": "ebebabe349b85a509ce23d641bc6948a7fb18b6e", "filename": "src/test/ui/nll/continue-after-missing-main.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.nll.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/continue-after-missing-main.nll.stderr"}, {"sha": "1019cacce64213feb8fcfe230fe78bbc46bd5857", "filename": "src/test/ui/nll/continue-after-missing-main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/continue-after-missing-main.rs"}, {"sha": "29e7dc1e56c732b2da0180afb3b6afc862d01150", "filename": "src/test/ui/nll/continue-after-missing-main.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/continue-after-missing-main.stderr"}, {"sha": "f7fd04179f26e35e70216fb2fb87b3770c1d87d5", "filename": "src/test/ui/nll/issue-48803.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-48803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-48803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48803.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-48803.rs"}, {"sha": "2f94039c0c3a934af7970fa24cc473ce8f4e8c8f", "filename": "src/test/ui/nll/issue-48803.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-48803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-48803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48803.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-48803.stderr"}, {"sha": "20f19b2596716db6f8489ea84a7618681e80bfc7", "filename": "src/test/ui/nll/issue-52533-1.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.nll.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-52533-1.nll.stderr"}, {"sha": "c80f43237fc767672afe473b8a4d0e9cf69d3927", "filename": "src/test/ui/nll/issue-52533-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-52533-1.rs"}, {"sha": "475c7d0b48bfb8c3b1b6b4b58aa1dd4c34513281", "filename": "src/test/ui/nll/issue-52533-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.stderr?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-52533-1.stderr"}, {"sha": "98a4af0c467a33acf42b804238fe8e4f9507c95c", "filename": "src/test/ui/process/issue-14940.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fprocess%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftest%2Fui%2Fprocess%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fissue-14940.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "previous_filename": "src/test/ui/issues/issue-14940.rs"}, {"sha": "5712e84adbc202475fdb25752c0095610f5448b6", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c364347ce65cf083d4419195b8232440928d4d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=d4c364347ce65cf083d4419195b8232440928d4d", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 977;\n-const ISSUES_ENTRY_LIMIT: usize = 2278;\n+const ROOT_ENTRY_LIMIT: usize = 974;\n+const ISSUES_ENTRY_LIMIT: usize = 2248;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}