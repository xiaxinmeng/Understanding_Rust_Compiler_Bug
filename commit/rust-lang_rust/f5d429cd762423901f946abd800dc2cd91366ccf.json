{"sha": "f5d429cd762423901f946abd800dc2cd91366ccf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZDQyOWNkNzYyNDIzOTAxZjk0NmFiZDgwMGRjMmNkOTEzNjZjY2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-26T19:48:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-26T19:48:17Z"}, "message": "Auto merge of #5820 - ThibsG:FixSuspiciousArithmeticImpl, r=flip1995\n\nFix FP for `suspicious_arithmetic_impl` from `suspicious_trait_impl` \u2026\n\nAs discussed in #3215, the `suspicious_trait_impl` lint causes too many false positives, as it is complex to find out if binary operations are suspicious or not.\n\nThis PR restricts the number of binary operations to at most one, otherwise we don't lint.\nThis can be seen as very conservative, but at least FP can be reduced to bare minimum.\n\nFixes: #3215\n\nchangelog: limit the `suspicious_arithmetic_impl` lint to one binop, to avoid many FPs", "tree": {"sha": "676a361733f8b6dd8ded9d0230d84d5e28f57aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/676a361733f8b6dd8ded9d0230d84d5e28f57aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5d429cd762423901f946abd800dc2cd91366ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d429cd762423901f946abd800dc2cd91366ccf", "html_url": "https://github.com/rust-lang/rust/commit/f5d429cd762423901f946abd800dc2cd91366ccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5d429cd762423901f946abd800dc2cd91366ccf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5a6fb1b65ec6581a67e942a3850f6bc15a552c", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5a6fb1b65ec6581a67e942a3850f6bc15a552c", "html_url": "https://github.com/rust-lang/rust/commit/da5a6fb1b65ec6581a67e942a3850f6bc15a552c"}, {"sha": "442c8ae23b90874485468b3becfc011f8c9d40bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/442c8ae23b90874485468b3becfc011f8c9d40bb", "html_url": "https://github.com/rust-lang/rust/commit/442c8ae23b90874485468b3becfc011f8c9d40bb"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "502fffc5e6c610b82ec237146c056459fe3dc8d9", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f5d429cd762423901f946abd800dc2cd91366ccf/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d429cd762423901f946abd800dc2cd91366ccf/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=f5d429cd762423901f946abd800dc2cd91366ccf", "patch": "@@ -64,26 +64,22 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n                 | hir::BinOpKind::Gt => return,\n                 _ => {},\n             }\n-            // Check if the binary expression is part of another bi/unary expression\n-            // or operator assignment as a child node\n-            let mut parent_expr = cx.tcx.hir().get_parent_node(expr.hir_id);\n-            while parent_expr != hir::CRATE_HIR_ID {\n-                if let hir::Node::Expr(e) = cx.tcx.hir().get(parent_expr) {\n-                    match e.kind {\n-                        hir::ExprKind::Binary(..)\n-                        | hir::ExprKind::Unary(hir::UnOp::UnNot | hir::UnOp::UnNeg, _)\n-                        | hir::ExprKind::AssignOp(..) => return,\n-                        _ => {},\n+\n+            // Check for more than one binary operation in the implemented function\n+            // Linting when multiple operations are involved can result in false positives\n+            if_chain! {\n+                let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n+                if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get(parent_fn);\n+                if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n+                let body = cx.tcx.hir().body(body_id);\n+                let mut visitor = BinaryExprVisitor { nb_binops: 0 };\n+\n+                then {\n+                    walk_expr(&mut visitor, &body.value);\n+                    if visitor.nb_binops > 1 {\n+                        return;\n                     }\n                 }\n-                parent_expr = cx.tcx.hir().get_parent_node(parent_expr);\n-            }\n-            // as a parent node\n-            let mut visitor = BinaryExprVisitor { in_binary_expr: false };\n-            walk_expr(&mut visitor, expr);\n-\n-            if visitor.in_binary_expr {\n-                return;\n             }\n \n             if let Some(impl_trait) = check_binop(\n@@ -181,7 +177,7 @@ fn check_binop(\n }\n \n struct BinaryExprVisitor {\n-    in_binary_expr: bool,\n+    nb_binops: u32,\n }\n \n impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n@@ -191,12 +187,13 @@ impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n             | hir::ExprKind::Unary(hir::UnOp::UnNot | hir::UnOp::UnNeg, _)\n-            | hir::ExprKind::AssignOp(..) => self.in_binary_expr = true,\n+            | hir::ExprKind::AssignOp(..) => self.nb_binops += 1,\n             _ => {},\n         }\n \n         walk_expr(self, expr);\n     }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }"}, {"sha": "60c2f3ec9b652159db0b19696b1139ca9a8bff4c", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f5d429cd762423901f946abd800dc2cd91366ccf/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d429cd762423901f946abd800dc2cd91366ccf/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=f5d429cd762423901f946abd800dc2cd91366ccf", "patch": "@@ -88,3 +88,33 @@ fn main() {}\n fn do_nothing(x: u32) -> u32 {\n     x\n }\n+\n+struct MultipleBinops(u32);\n+\n+impl Add for MultipleBinops {\n+    type Output = MultipleBinops;\n+\n+    // OK: multiple Binops in `add` impl\n+    fn add(self, other: Self) -> Self::Output {\n+        let mut result = self.0 + other.0;\n+        if result >= u32::max_value() {\n+            result -= u32::max_value();\n+        }\n+        MultipleBinops(result)\n+    }\n+}\n+\n+impl Mul for MultipleBinops {\n+    type Output = MultipleBinops;\n+\n+    // OK: multiple Binops in `mul` impl\n+    fn mul(self, other: Self) -> Self::Output {\n+        let mut result: u32 = 0;\n+        let size = std::cmp::max(self.0, other.0) as usize;\n+        let mut v = vec![0; size + 1];\n+        for i in 0..size + 1 {\n+            result *= i as u32;\n+        }\n+        MultipleBinops(result)\n+    }\n+}"}]}