{"sha": "7f16b4218875847f3265a5624f1328a4a5f2de77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMTZiNDIxODg3NTg0N2YzMjY1YTU2MjRmMTMyOGE0YTVmMmRlNzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-07T17:47:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-07T17:47:23Z"}, "message": "Merge #9170\n\n9170: internal: Remove unnecessary `completion::macro_in_item_position` module r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "97245a63ccc290e94a8df37eef086d21bbe23e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97245a63ccc290e94a8df37eef086d21bbe23e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f16b4218875847f3265a5624f1328a4a5f2de77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvlurCRBK7hj4Ov3rIwAAEWcIAG9hH99YsYR7RK5vjJzmL0rp\nPrie8N7QkQIL/6bpsSHJl9aO6Wt7RHxy9DF+eivs99vEkeOHw/v0U+qq8J0V1+JD\nrb/gUVXfB4Tv+37piaqr6Roo4AR3wcEJpkvVnhqynVuIQ8kO8N7B5dSB7EH0erSz\nkHQ1JAvyuzKmkKFjckoXwu3Z7i/jN3u1Uoy0CvH+kmMF6tNWRZFYBk5QMwRRNOJf\n6KdY5pmk+RdGrJ5Y/njAhubVqCOoeg0+/G4tqtou4iqXGpGRCjiV03vm1DF29A05\nVb+S4kc64AhEY3gm0ZXqU72nseFTKDrt7I0aDZGEthVV4cbqc12yfnqaoAAm7uQ=\n=fqUJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 97245a63ccc290e94a8df37eef086d21bbe23e94\nparent 2f376f74750d054a69e6f633647d5a7d65dd2e94\nparent b29e8ed994c573273a8182efd9b74ec8c664a848\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623088043 +0000\ncommitter GitHub <noreply@github.com> 1623088043 +0000\n\nMerge #9170\n\n9170: internal: Remove unnecessary `completion::macro_in_item_position` module r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f16b4218875847f3265a5624f1328a4a5f2de77", "html_url": "https://github.com/rust-lang/rust/commit/7f16b4218875847f3265a5624f1328a4a5f2de77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f16b4218875847f3265a5624f1328a4a5f2de77/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f376f74750d054a69e6f633647d5a7d65dd2e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f376f74750d054a69e6f633647d5a7d65dd2e94", "html_url": "https://github.com/rust-lang/rust/commit/2f376f74750d054a69e6f633647d5a7d65dd2e94"}, {"sha": "b29e8ed994c573273a8182efd9b74ec8c664a848", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29e8ed994c573273a8182efd9b74ec8c664a848", "html_url": "https://github.com/rust-lang/rust/commit/b29e8ed994c573273a8182efd9b74ec8c664a848"}], "stats": {"total": 122, "additions": 32, "deletions": 90}, "files": [{"sha": "7a4d71e9182609ea1c04af0b0d2a3da03d94c6d0", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=7f16b4218875847f3265a5624f1328a4a5f2de77", "patch": "@@ -6,7 +6,6 @@ pub(crate) mod flyimport;\n pub(crate) mod fn_param;\n pub(crate) mod keyword;\n pub(crate) mod lifetime;\n-pub(crate) mod macro_in_item_position;\n pub(crate) mod mod_;\n pub(crate) mod pattern;\n pub(crate) mod postfix;"}, {"sha": "781b96ff185a17aa35714a02bcdab8b32d0ab0d5", "filename": "crates/ide_completion/src/completions/macro_in_item_position.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2f376f74750d054a69e6f633647d5a7d65dd2e94/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f376f74750d054a69e6f633647d5a7d65dd2e94/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs?ref=2f376f74750d054a69e6f633647d5a7d65dd2e94", "patch": "@@ -1,48 +0,0 @@\n-//! Completes macro invocations used in item position.\n-\n-use crate::{CompletionContext, Completions};\n-\n-// Ideally this should be removed and moved into `(un)qualified_path` respectively\n-pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n-    // Show only macros in top level.\n-    if !ctx.expects_item() {\n-        return;\n-    }\n-\n-    ctx.scope.process_all_names(&mut |name, res| {\n-        if let hir::ScopeDef::MacroDef(mac) = res {\n-            acc.add_macro(ctx, Some(name.clone()), mac);\n-        }\n-        // FIXME: This should be done in qualified_path/unqualified_path instead?\n-        if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n-            acc.add_resolution(ctx, name, &res);\n-        }\n-    })\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use expect_test::{expect, Expect};\n-\n-    use crate::{test_utils::completion_list, CompletionKind};\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n-        expect.assert_eq(&actual)\n-    }\n-\n-    #[test]\n-    fn completes_macros_as_item() {\n-        check(\n-            r#\"\n-macro_rules! foo { () => {} }\n-fn foo() {}\n-\n-$0\n-\"#,\n-            expect![[r#\"\n-                ma foo!(\u2026) macro_rules! foo\n-            \"#]],\n-        )\n-    }\n-}"}, {"sha": "d58745fb4dae13b6d09393e81a8ad1dd5dd8e861", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=7f16b4218875847f3265a5624f1328a4a5f2de77", "patch": "@@ -7,7 +7,7 @@ use syntax::AstNode;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_path_disallowed() || ctx.expects_item() {\n+    if ctx.is_path_disallowed() {\n         return;\n     }\n     let path = match ctx.path_qual() {\n@@ -20,7 +20,8 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n     let context_module = ctx.scope.module();\n-    if ctx.expects_assoc_item() {\n+\n+    if ctx.expects_item() || ctx.expects_assoc_item() {\n         if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n@@ -631,25 +632,25 @@ impl MyStruct {\n \"#,\n             expect![[r##\"\n                 md bar\n-                ma foo! #[macro_export] macro_rules! foo\n+                ma foo!(\u2026) #[macro_export] macro_rules! foo\n             \"##]],\n         );\n     }\n \n     #[test]\n-    #[ignore] // FIXME doesn't complete anything atm\n     fn completes_in_item_list() {\n         check(\n             r#\"\n struct MyStruct {}\n+#[macro_export]\n macro_rules! foo {}\n mod bar {}\n \n crate::$0\n \"#,\n             expect![[r#\"\n                 md bar\n-                ma foo! macro_rules! foo\n+                ma foo!(\u2026) #[macro_export] macro_rules! foo\n             \"#]],\n         )\n     }"}, {"sha": "8b22933e0a211b5abd99993bfb857a30f91aab06", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=7f16b4218875847f3265a5624f1328a4a5f2de77", "patch": "@@ -5,26 +5,25 @@ use hir::ScopeDef;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path() {\n-        return;\n-    }\n-    if ctx.is_path_disallowed() || ctx.expects_item() {\n+    if ctx.is_path_disallowed() || !ctx.is_trivial_path() {\n         return;\n     }\n \n-    if ctx.expects_assoc_item() {\n-        ctx.scope.process_all_names(&mut |name, def| {\n-            if let ScopeDef::MacroDef(macro_def) = def {\n-                acc.add_macro(ctx, Some(name.clone()), macro_def);\n+    if ctx.expects_item() || ctx.expects_assoc_item() {\n+        // only show macros in {Assoc}ItemList\n+        ctx.scope.process_all_names(&mut |name, res| {\n+            if let hir::ScopeDef::MacroDef(mac) = res {\n+                acc.add_macro(ctx, Some(name.clone()), mac);\n             }\n-            if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n-                acc.add_resolution(ctx, name, &def);\n+            if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n+                acc.add_resolution(ctx, name, &res);\n             }\n         });\n         return;\n     }\n \n     if ctx.expects_use_tree() {\n+        // only show modules in a fresh UseTree\n         cov_mark::hit!(only_completes_modules_in_import);\n         ctx.scope.process_all_names(&mut |name, res| {\n             if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n@@ -693,12 +692,11 @@ impl MyStruct {\n \"#,\n             expect![[r#\"\n                 md bar\n-                ma foo! macro_rules! foo\n+                ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         )\n     }\n \n-    // FIXME: The completions here currently come from `macro_in_item_position`, but they shouldn't\n     #[test]\n     fn completes_in_item_list() {\n         check("}, {"sha": "7e4b14926312655eb3fd22169e88858c7d2322dc", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=7f16b4218875847f3265a5624f1328a4a5f2de77", "patch": "@@ -67,14 +67,13 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) krate: Option<hir::Crate>,\n     pub(super) expected_name: Option<NameOrNameRef>,\n     pub(super) expected_type: Option<Type>,\n-    pub(super) name_ref_syntax: Option<ast::NameRef>,\n-\n-    pub(super) use_item_syntax: Option<ast::Use>,\n \n     /// The parent function of the cursor position if it exists.\n     pub(super) function_def: Option<ast::Fn>,\n     /// The parent impl of the cursor position if it exists.\n     pub(super) impl_def: Option<ast::Impl>,\n+    pub(super) name_ref_syntax: Option<ast::NameRef>,\n+    pub(super) use_item_syntax: Option<ast::Use>,\n \n     // potentially set if we are completing a lifetime\n     pub(super) lifetime_syntax: Option<ast::Lifetime>,\n@@ -89,13 +88,12 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) completion_location: Option<ImmediateLocation>,\n     pub(super) prev_sibling: Option<ImmediatePrevSibling>,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n+    pub(super) previous_token: Option<SyntaxToken>,\n \n     pub(super) path_context: Option<PathCompletionContext>,\n-    /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) locals: Vec<(String, Local)>,\n \n-    pub(super) previous_token: Option<SyntaxToken>,\n     pub(super) in_loop_body: bool,\n     pub(super) incomplete_let: bool,\n \n@@ -143,28 +141,28 @@ impl<'a> CompletionContext<'a> {\n             original_token,\n             token,\n             krate,\n-            lifetime_allowed: false,\n             expected_name: None,\n             expected_type: None,\n+            function_def: None,\n+            impl_def: None,\n             name_ref_syntax: None,\n+            use_item_syntax: None,\n             lifetime_syntax: None,\n             lifetime_param_syntax: None,\n-            function_def: None,\n-            use_item_syntax: None,\n-            impl_def: None,\n-            active_parameter: ActiveParameter::at(db, position),\n+            lifetime_allowed: false,\n             is_label_ref: false,\n-            is_param: false,\n             is_pat_or_const: None,\n-            path_context: None,\n-            previous_token: None,\n-            in_loop_body: false,\n+            is_param: false,\n             completion_location: None,\n             prev_sibling: None,\n-            no_completion_required: false,\n-            incomplete_let: false,\n             attribute_under_caret: None,\n+            previous_token: None,\n+            path_context: None,\n+            active_parameter: ActiveParameter::at(db, position),\n             locals,\n+            in_loop_body: false,\n+            incomplete_let: false,\n+            no_completion_required: false,\n         };\n \n         let mut original_file = original_file.syntax().clone();\n@@ -563,10 +561,6 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n \n-        if matches!(self.completion_location, Some(ImmediateLocation::ItemList)) {\n-            return;\n-        }\n-\n         self.use_item_syntax =\n             self.sema.token_ancestors_with_macros(self.token.clone()).find_map(ast::Use::cast);\n \n@@ -597,7 +591,7 @@ impl<'a> CompletionContext<'a> {\n                 path_ctx.call_kind = match_ast! {\n                     match p {\n                         ast::PathExpr(it) => it.syntax().parent().and_then(ast::CallExpr::cast).map(|_| CallKind::Expr),\n-                        ast::MacroCall(_it) => Some(CallKind::Mac),\n+                        ast::MacroCall(it) => it.excl_token().and(Some(CallKind::Mac)),\n                         ast::TupleStructPat(_it) => Some(CallKind::Pat),\n                         _ => None\n                     }"}, {"sha": "18983aa01b155557048cf4288f70a58862adec68", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=7f16b4218875847f3265a5624f1328a4a5f2de77", "patch": "@@ -158,7 +158,6 @@ pub fn completions(\n     completions::record::complete_record(&mut acc, &ctx);\n     completions::pattern::complete_pattern(&mut acc, &ctx);\n     completions::postfix::complete_postfix(&mut acc, &ctx);\n-    completions::macro_in_item_position::complete_macro_in_item_position(&mut acc, &ctx);\n     completions::trait_impl::complete_trait_impl(&mut acc, &ctx);\n     completions::mod_::complete_mod(&mut acc, &ctx);\n     completions::flyimport::import_on_the_fly(&mut acc, &ctx);"}, {"sha": "933bcad55b24a77daddbd352ad006138f03fe2e8", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f16b4218875847f3265a5624f1328a4a5f2de77/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=7f16b4218875847f3265a5624f1328a4a5f2de77", "patch": "@@ -223,9 +223,8 @@ impl FnCallNode {\n                 ast::Expr::PathExpr(path_expr) => path_expr.path()?.segment()?.name_ref()?,\n                 _ => return None,\n             }),\n-\n             FnCallNode::MethodCallExpr(call_expr) => {\n-                call_expr.syntax().children().filter_map(ast::NameRef::cast).next()\n+                call_expr.syntax().children().find_map(ast::NameRef::cast)\n             }\n         }\n     }"}]}