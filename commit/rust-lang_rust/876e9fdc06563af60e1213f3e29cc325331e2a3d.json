{"sha": "876e9fdc06563af60e1213f3e29cc325331e2a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NmU5ZmRjMDY1NjNhZjYwZTEyMTNmM2UyOWNjMzI1MzMxZTJhM2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T06:11:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T23:14:43Z"}, "message": "rustc: Rename diagnostic::diagnostictype to 'level'", "tree": {"sha": "32355cffa87719a30deb75131d02fc1a91733a7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32355cffa87719a30deb75131d02fc1a91733a7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876e9fdc06563af60e1213f3e29cc325331e2a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876e9fdc06563af60e1213f3e29cc325331e2a3d", "html_url": "https://github.com/rust-lang/rust/commit/876e9fdc06563af60e1213f3e29cc325331e2a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876e9fdc06563af60e1213f3e29cc325331e2a3d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824beb4c3b5c1bcd12ce7aaa21b1d82dc408d475", "url": "https://api.github.com/repos/rust-lang/rust/commits/824beb4c3b5c1bcd12ce7aaa21b1d82dc408d475", "html_url": "https://github.com/rust-lang/rust/commit/824beb4c3b5c1bcd12ce7aaa21b1d82dc408d475"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "2536e5ebe1664d06800aa8f2100d5d64e0aaf54f", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/876e9fdc06563af60e1213f3e29cc325331e2a3d/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876e9fdc06563af60e1213f3e29cc325331e2a3d/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=876e9fdc06563af60e1213f3e29cc325331e2a3d", "patch": "@@ -4,11 +4,11 @@ import syntax::codemap;\n import codemap::span;\n \n export emitter, emit_diagnostic;\n-export diagnostictype, fatal, error, warning, note;\n+export level, fatal, error, warning, note;\n export handler, mk_codemap_handler;\n \n type emitter = fn@(cmsp: option<(codemap::codemap, span)>,\n-                   msg: str, t: diagnostictype);\n+                   msg: str, lvl: level);\n \n \n iface handler {\n@@ -88,7 +88,7 @@ fn mk_codemap_handler(cm: codemap::codemap,\n       some(e) { e }\n       none. {\n         let f = fn@(cmsp: option<(codemap::codemap, span)>,\n-            msg: str, t: diagnostictype) {\n+            msg: str, t: level) {\n             emit_diagnostic(cmsp, msg, t);\n         };\n         f\n@@ -102,56 +102,56 @@ fn mk_codemap_handler(cm: codemap::codemap,\n     } as handler\n }\n \n-tag diagnostictype {\n+tag level {\n     fatal;\n     error;\n     warning;\n     note;\n }\n \n-fn diagnosticstr(t: diagnostictype) -> str {\n-    alt t {\n+fn diagnosticstr(lvl: level) -> str {\n+    alt lvl {\n       fatal. { \"error\" }\n       error. { \"error\" }\n       warning. { \"warning\" }\n       note. { \"note\" }\n     }\n }\n \n-fn diagnosticcolor(t: diagnostictype) -> u8 {\n-    alt t {\n+fn diagnosticcolor(lvl: level) -> u8 {\n+    alt lvl {\n       fatal. { term::color_bright_red }\n       error. { term::color_bright_red }\n       warning. { term::color_bright_yellow }\n       note. { term::color_bright_green }\n     }\n }\n \n-fn print_diagnostic(topic: str, t: diagnostictype, msg: str) {\n+fn print_diagnostic(topic: str, lvl: level, msg: str) {\n     if str::is_not_empty(topic) {\n         io::stdout().write_str(#fmt[\"%s \", topic]);\n     }\n     if term::color_supported() {\n-        term::fg(io::stdout(), diagnosticcolor(t));\n+        term::fg(io::stdout(), diagnosticcolor(lvl));\n     }\n-    io::stdout().write_str(#fmt[\"%s:\", diagnosticstr(t)]);\n+    io::stdout().write_str(#fmt[\"%s:\", diagnosticstr(lvl)]);\n     if term::color_supported() {\n         term::reset(io::stdout());\n     }\n     io::stdout().write_str(#fmt[\" %s\\n\", msg]);\n }\n \n fn emit_diagnostic(cmsp: option<(codemap::codemap, span)>,\n-                   msg: str, t: diagnostictype) {\n+                   msg: str, lvl: level) {\n     alt cmsp {\n       some((cm, sp)) {\n         let ss = codemap::span_to_str(sp, cm);\n         let lines = codemap::span_to_lines(sp, cm);\n-        print_diagnostic(ss, t, msg);\n+        print_diagnostic(ss, lvl, msg);\n         highlight_lines(cm, sp, lines);\n       }\n       none. {\n-        print_diagnostic(\"\", t, msg);\n+        print_diagnostic(\"\", lvl, msg);\n       }\n     }\n }"}]}