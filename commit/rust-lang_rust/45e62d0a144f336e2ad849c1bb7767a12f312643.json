{"sha": "45e62d0a144f336e2ad849c1bb7767a12f312643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZTYyZDBhMTQ0ZjMzNmUyYWQ4NDljMWJiNzc2N2ExMmYzMTI2NDM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:51:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:51:37Z"}, "message": "tutorial: Discuss argument patterns", "tree": {"sha": "b99e4b64fa6e21acbe6178a1042d187f0d8a7c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99e4b64fa6e21acbe6178a1042d187f0d8a7c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45e62d0a144f336e2ad849c1bb7767a12f312643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45e62d0a144f336e2ad849c1bb7767a12f312643", "html_url": "https://github.com/rust-lang/rust/commit/45e62d0a144f336e2ad849c1bb7767a12f312643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45e62d0a144f336e2ad849c1bb7767a12f312643/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c", "html_url": "https://github.com/rust-lang/rust/commit/d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "3a90b0baacd798bbae4cef2c596b27120cae695f", "filename": "doc/tutorial.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45e62d0a144f336e2ad849c1bb7767a12f312643/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/45e62d0a144f336e2ad849c1bb7767a12f312643/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=45e62d0a144f336e2ad849c1bb7767a12f312643", "patch": "@@ -813,6 +813,15 @@ assert 8  == line(5, 3, 1);\n assert () == oops(5, 3, 1);\n ~~~~\n \n+As with `match` expressions and `let` bindings, function arguments support\n+pattern destructuring. Like `let`, argument patterns must be irrefutable,\n+as in this example that unpacks a tuple and returns it.\n+\n+~~~\n+fn first((value, _): (int, float)) -> int { value }\n+~~~\n+\n+\n # The Rust memory model\n \n At this junction, let's take a detour to explain the concepts involved\n@@ -1576,6 +1585,21 @@ fn contains(v: &[int], elt: int) -> bool {\n }\n ~~~~\n \n+Notice that, because `each` passes each value by borrowed pointer,\n+the iteratee needs to dereference it before using.\n+In these situations it can be convenient to lean on Rust's\n+argument patterns to bind `x` to the actual value, not the pointer.\n+\n+~~~~\n+# use each = vec::each;\n+# fn contains(v: &[int], elt: int) -> bool {\n+    for each(v) |&x| {\n+        if (x == elt) { return true; }\n+    }\n+#    false\n+# }\n+~~~~\n+\n `for` syntax only works with stack closures.\n \n > ***Note:*** This is, essentially, a special loop protocol:"}]}