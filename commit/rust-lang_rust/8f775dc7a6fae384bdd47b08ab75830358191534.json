{"sha": "8f775dc7a6fae384bdd47b08ab75830358191534", "node_id": "C_kwDOAAsO6NoAKDhmNzc1ZGM3YTZmYWUzODRiZGQ0N2IwOGFiNzU4MzAzNTgxOTE1MzQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-03-07T14:06:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-07T14:06:22Z"}, "message": "Rollup merge of #108731 - Ezrashaw:pin-suggestion-on-impl-future, r=petrochenkov\n\nfeat: impl better help for `.poll()` not found on `impl Future`\n\nPartially address #108572\n\nI'd like to also address suggestions for generalized `Self` parameters as well. That'll be a separate PR.", "tree": {"sha": "4904d8b8ae0a9541949c7bd8608af47910282639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4904d8b8ae0a9541949c7bd8608af47910282639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f775dc7a6fae384bdd47b08ab75830358191534", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkB0TeCRBK7hj4Ov3rIwAAHzUIAKHtA6Klzd6r0J8+Cdbgk7we\n/FZBCBY6Rwh9PUgui1PzNsqoWV3YbKAhUvOeV0ExX4Ba5u5aRhBIy+INrtnOHapc\nu+fiWlXNnbm171+ORyfMr/pP6jgIznCas73lU1uGBby+ygRGLUjiyNJGrydl25gC\nx4itffXhHjZG2dQ2wkaAnGqDCaXHr69vwZd4RdputprmcgqLw20rJT/OM4vbDREs\nFJPjgiOT6ksFXo2iN/VslgeqQcwfjEiqYFEWLfLTgJWPfVJbCOhkFhrQYCAR8S9b\n/GbPJPsytCgy4+6WIN462Tcn0jSpOzmMmscN4ZABXUv1FirQOCOSh/G0KzV1M04=\n=t3FQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4904d8b8ae0a9541949c7bd8608af47910282639\nparent 2a196db1f25f4fdee5f5071c26bafb873cdb229d\nparent aaaffa9a3ee4851422ff435bf6b24dd2e55da171\nauthor Yuki Okushi <jtitor@2k36.org> 1678197982 +0900\ncommitter GitHub <noreply@github.com> 1678197982 +0900\n\nRollup merge of #108731 - Ezrashaw:pin-suggestion-on-impl-future, r=petrochenkov\n\nfeat: impl better help for `.poll()` not found on `impl Future`\n\nPartially address #108572\n\nI'd like to also address suggestions for generalized `Self` parameters as well. That'll be a separate PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f775dc7a6fae384bdd47b08ab75830358191534", "html_url": "https://github.com/rust-lang/rust/commit/8f775dc7a6fae384bdd47b08ab75830358191534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f775dc7a6fae384bdd47b08ab75830358191534/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a196db1f25f4fdee5f5071c26bafb873cdb229d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a196db1f25f4fdee5f5071c26bafb873cdb229d", "html_url": "https://github.com/rust-lang/rust/commit/2a196db1f25f4fdee5f5071c26bafb873cdb229d"}, {"sha": "aaaffa9a3ee4851422ff435bf6b24dd2e55da171", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaffa9a3ee4851422ff435bf6b24dd2e55da171", "html_url": "https://github.com/rust-lang/rust/commit/aaaffa9a3ee4851422ff435bf6b24dd2e55da171"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "e6d6586d5eefd6eb16503557075c3e3417342206", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f775dc7a6fae384bdd47b08ab75830358191534/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f775dc7a6fae384bdd47b08ab75830358191534/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=8f775dc7a6fae384bdd47b08ab75830358191534", "patch": "@@ -348,6 +348,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.downgrade_to_delayed_bug();\n         }\n \n+        if tcx.ty_is_opaque_future(rcvr_ty) && item_name.name == sym::poll {\n+            err.help(&format!(\n+                \"method `poll` found on `Pin<&mut {ty_str}>`, \\\n+                see documentation for `std::pin::Pin`\"\n+            ));\n+            err.help(\"self type must be pinned to call `Future::poll`, \\\n+                see https://rust-lang.github.io/async-book/04_pinning/01_chapter.html#pinning-in-practice\"\n+            );\n+        }\n+\n         if let Mode::MethodCall = mode && let SelfSource::MethodCall(cal) = source {\n             self.suggest_await_before_method(\n                 &mut err, item_name, rcvr_ty, cal, span, expected.only_has_type(self),"}, {"sha": "efcb8b8ebab0a7ebbc326870a510d10d57de96f6", "filename": "tests/ui/async-await/issue-108572.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f775dc7a6fae384bdd47b08ab75830358191534/tests%2Fui%2Fasync-await%2Fissue-108572.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f775dc7a6fae384bdd47b08ab75830358191534/tests%2Fui%2Fasync-await%2Fissue-108572.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-108572.rs?ref=8f775dc7a6fae384bdd47b08ab75830358191534", "patch": "@@ -0,0 +1,12 @@\n+// edition: 2021\n+\n+use std::future::Future;\n+fn foo() -> impl Future<Output=()> {\n+    async { }\n+}\n+\n+fn main() {\n+    let fut = foo();\n+    fut.poll();\n+    //~^ ERROR no method named `poll` found for opaque type `impl Future<Output = ()>` in the current scope [E0599]\n+}"}, {"sha": "0dbcf4d660a98a1d74e7b0b8ca7402da4b3c7323", "filename": "tests/ui/async-await/issue-108572.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f775dc7a6fae384bdd47b08ab75830358191534/tests%2Fui%2Fasync-await%2Fissue-108572.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f775dc7a6fae384bdd47b08ab75830358191534/tests%2Fui%2Fasync-await%2Fissue-108572.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-108572.stderr?ref=8f775dc7a6fae384bdd47b08ab75830358191534", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `poll` found for opaque type `impl Future<Output = ()>` in the current scope\n+  --> $DIR/issue-108572.rs:10:9\n+   |\n+LL |     fut.poll();\n+   |         ^^^^ method not found in `impl Future<Output = ()>`\n+   |\n+   = help: method `poll` found on `Pin<&mut impl Future<Output = ()>>`, see documentation for `std::pin::Pin`\n+   = help: self type must be pinned to call `Future::poll`, see https://rust-lang.github.io/async-book/04_pinning/01_chapter.html#pinning-in-practice\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}