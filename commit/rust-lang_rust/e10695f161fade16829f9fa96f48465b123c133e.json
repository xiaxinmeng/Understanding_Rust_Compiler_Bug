{"sha": "e10695f161fade16829f9fa96f48465b123c133e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMDY5NWYxNjFmYWRlMTY4MjlmOWZhOTZmNDg0NjViMTIzYzEzM2U=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-18T23:05:40Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:32Z"}, "message": "Move param_substs onto MirContext", "tree": {"sha": "bbb2ac4bdfcf055e3fb6663c0e5142847f683a50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbb2ac4bdfcf055e3fb6663c0e5142847f683a50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e10695f161fade16829f9fa96f48465b123c133e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e10695f161fade16829f9fa96f48465b123c133e", "html_url": "https://github.com/rust-lang/rust/commit/e10695f161fade16829f9fa96f48465b123c133e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e10695f161fade16829f9fa96f48465b123c133e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a42a3429fe357fc5a455e96d65cda7465d0be860", "url": "https://api.github.com/repos/rust-lang/rust/commits/a42a3429fe357fc5a455e96d65cda7465d0be860", "html_url": "https://github.com/rust-lang/rust/commit/a42a3429fe357fc5a455e96d65cda7465d0be860"}], "stats": {"total": 104, "additions": 48, "deletions": 56}, "files": [{"sha": "9a6127746ff3ca742dcc8ad5823ac1ab3b4fc36d", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=e10695f161fade16829f9fa96f48465b123c133e", "patch": "@@ -20,10 +20,8 @@ use monomorphize::Instance;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n-use rustc::infer::TransNormalize;\n use rustc::util::common::MemoizationMap;\n use middle::lang_items::LangItem;\n-use rustc::ty::subst::Substs;\n use abi::{Abi, FnType};\n use base;\n use builder::Builder;\n@@ -37,7 +35,6 @@ use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::Layout;\n use rustc::traits::{self, SelectionContext, Reveal};\n-use rustc::ty::fold::TypeFoldable;\n use rustc::hir;\n \n use libc::{c_uint, c_char};\n@@ -249,10 +246,6 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // Describes the return/argument LLVM types and their ABI handling.\n     pub fn_ty: FnType,\n \n-    // If this function is being monomorphized, this contains the type\n-    // substitutions used.\n-    pub param_substs: &'tcx Substs<'tcx>,\n-\n     // This function's enclosing crate context.\n     pub ccx: &'a CrateContext<'a, 'tcx>,\n \n@@ -266,23 +259,13 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         ccx: &'a CrateContext<'a, 'tcx>,\n         llfndecl: ValueRef,\n         fn_ty: FnType,\n-        definition: Option<(Instance<'tcx>, &ty::FnSig<'tcx>, Abi)>,\n         skip_retptr: bool,\n     ) -> FunctionContext<'a, 'tcx> {\n-        let param_substs = match definition {\n-            Some((instance, ..)) => {\n-                assert!(!instance.substs.needs_infer());\n-                instance.substs\n-            }\n-            None => ccx.tcx().intern_substs(&[])\n-        };\n-\n         let mut fcx = FunctionContext {\n             llfn: llfndecl,\n             llretslotptr: None,\n             alloca_insert_pt: None,\n             fn_ty: fn_ty,\n-            param_substs: param_substs,\n             ccx: ccx,\n             alloca_builder: Builder::with_ccx(ccx),\n         };\n@@ -340,14 +323,6 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         BlockAndBuilder::new(self.new_block(name), self)\n     }\n \n-    pub fn monomorphize<T>(&self, value: &T) -> T\n-        where T: TransNormalize<'tcx>\n-    {\n-        monomorphize::apply_param_substs(self.ccx.shared(),\n-                                         self.param_substs,\n-                                         value)\n-    }\n-\n     pub fn eh_personality(&self) -> ValueRef {\n         // The exception handling personality function.\n         //"}, {"sha": "71375f1160c3fe92b4ede7332ef2698641aa552d", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=e10695f161fade16829f9fa96f48465b123c133e", "patch": "@@ -17,15 +17,18 @@ use rustc::mir::{self, Location, TerminatorKind};\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir::traversal;\n use common::{self, BlockAndBuilder};\n+use super::MirContext;\n use super::rvalue;\n \n-pub fn lvalue_locals<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>, mir: &mir::Mir<'tcx>) -> BitVector {\n-    let mut analyzer = LocalAnalyzer::new(mir, &bcx);\n+pub fn lvalue_locals<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>, mircx: &MirContext<'a, 'tcx>)\n+    -> BitVector {\n+    let mir = mircx.mir;\n+    let mut analyzer = LocalAnalyzer::new(mircx, &bcx);\n \n     analyzer.visit_mir(mir);\n \n     for (index, ty) in mir.local_decls.iter().map(|l| l.ty).enumerate() {\n-        let ty = bcx.fcx().monomorphize(&ty);\n+        let ty = mircx.monomorphize(&ty);\n         debug!(\"local {} has type {:?}\", index, ty);\n         if ty.is_scalar() ||\n             ty.is_unique() ||\n@@ -54,20 +57,20 @@ pub fn lvalue_locals<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>, mir: &mir::Mir<'\n }\n \n struct LocalAnalyzer<'mir, 'a: 'mir, 'tcx: 'a> {\n-    mir: &'mir mir::Mir<'tcx>,\n+    mir: &'mir MirContext<'a, 'tcx>,\n     bcx: &'mir BlockAndBuilder<'a, 'tcx>,\n     lvalue_locals: BitVector,\n     seen_assigned: BitVector\n }\n \n impl<'mir, 'a, 'tcx> LocalAnalyzer<'mir, 'a, 'tcx> {\n-    fn new(mir: &'mir mir::Mir<'tcx>, bcx: &'mir BlockAndBuilder<'a, 'tcx>)\n+    fn new(mircx: &'mir MirContext<'a, 'tcx>, bcx: &'mir BlockAndBuilder<'a, 'tcx>)\n            -> LocalAnalyzer<'mir, 'a, 'tcx> {\n         LocalAnalyzer {\n-            mir: mir,\n+            mir: mircx,\n             bcx: bcx,\n-            lvalue_locals: BitVector::new(mir.local_decls.len()),\n-            seen_assigned: BitVector::new(mir.local_decls.len())\n+            lvalue_locals: BitVector::new(mircx.mir.local_decls.len()),\n+            seen_assigned: BitVector::new(mircx.mir.local_decls.len())\n         }\n     }\n \n@@ -93,7 +96,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n \n         if let mir::Lvalue::Local(index) = *lvalue {\n             self.mark_assigned(index);\n-            if !rvalue::rvalue_creates_operand(self.mir, self.bcx, rvalue) {\n+            if !rvalue::rvalue_creates_operand(self.mir.mir, self.bcx, rvalue) {\n                 self.mark_as_lvalue(index);\n             }\n         } else {\n@@ -136,9 +139,9 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n         // Allow uses of projections of immediate pair fields.\n         if let mir::Lvalue::Projection(ref proj) = *lvalue {\n             if let mir::Lvalue::Local(_) = proj.base {\n-                let ty = proj.base.ty(self.mir, self.bcx.tcx());\n+                let ty = proj.base.ty(self.mir.mir, self.bcx.tcx());\n \n-                let ty = self.bcx.fcx().monomorphize(&ty.to_ty(self.bcx.tcx()));\n+                let ty = self.mir.monomorphize(&ty.to_ty(self.bcx.tcx()));\n                 if common::type_is_imm_pair(self.bcx.ccx(), ty) {\n                     if let mir::ProjectionElem::Field(..) = proj.elem {\n                         if let LvalueContext::Consume = context {\n@@ -167,8 +170,8 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n                 }\n \n                 LvalueContext::Drop => {\n-                    let ty = lvalue.ty(self.mir, self.bcx.tcx());\n-                    let ty = self.bcx.fcx().monomorphize(&ty.to_ty(self.bcx.tcx()));\n+                    let ty = lvalue.ty(self.mir.mir, self.bcx.tcx());\n+                    let ty = self.mir.monomorphize(&ty.to_ty(self.bcx.tcx()));\n \n                     // Only need the lvalue if we're actually dropping it.\n                     if self.bcx.ccx().shared().type_needs_drop(ty) {"}, {"sha": "577c304d0f7aa40302ca5c0549f018a3b1c2df80", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=e10695f161fade16829f9fa96f48465b123c133e", "patch": "@@ -242,7 +242,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n             mir::TerminatorKind::Drop { ref location, target, unwind } => {\n                 let ty = location.ty(&self.mir, bcx.tcx()).to_ty(bcx.tcx());\n-                let ty = bcx.fcx().monomorphize(&ty);\n+                let ty = self.monomorphize(&ty);\n \n                 // Double check for necessity to drop\n                 if !bcx.ccx().shared().type_needs_drop(ty) {\n@@ -522,7 +522,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 let extra_args = &args[sig.inputs().len()..];\n                 let extra_args = extra_args.iter().map(|op_arg| {\n                     let op_ty = op_arg.ty(&self.mir, bcx.tcx());\n-                    bcx.fcx().monomorphize(&op_ty)\n+                    self.monomorphize(&op_ty)\n                 }).collect::<Vec<_>>();\n                 let fn_ty = callee.direct_fn_type(bcx.ccx(), &extra_args);\n "}, {"sha": "56f88977c865da698ef9360bad2f14387414fb9c", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=e10695f161fade16829f9fa96f48465b123c133e", "patch": "@@ -952,7 +952,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                           -> Const<'tcx>\n     {\n         debug!(\"trans_constant({:?})\", constant);\n-        let ty = bcx.fcx().monomorphize(&constant.ty);\n+        let ty = self.monomorphize(&constant.ty);\n         let result = match constant.literal.clone() {\n             mir::Literal::Item { def_id, substs } => {\n                 // Shortcut for zero-sized types, including function item\n@@ -962,14 +962,13 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     return Const::new(C_null(llty), ty);\n                 }\n \n-                let substs = bcx.fcx().monomorphize(&substs);\n+                let substs = self.monomorphize(&substs);\n                 let instance = Instance::new(def_id, substs);\n                 MirConstContext::trans_def(bcx.ccx(), instance, IndexVec::new())\n             }\n             mir::Literal::Promoted { index } => {\n                 let mir = &self.mir.promoted[index];\n-                MirConstContext::new(bcx.ccx(), mir, bcx.fcx().param_substs,\n-                                     IndexVec::new()).trans()\n+                MirConstContext::new(bcx.ccx(), mir, self.param_substs, IndexVec::new()).trans()\n             }\n             mir::Literal::Value { value } => {\n                 Ok(Const::from_constval(bcx.ccx(), value, ty))"}, {"sha": "673a786f1f8bb7b91f166e0d0f875c4e9f762894", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=e10695f161fade16829f9fa96f48465b123c133e", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 let ptr = self.trans_consume(bcx, base);\n                 let projected_ty = LvalueTy::from_ty(ptr.ty)\n                     .projection_ty(tcx, &mir::ProjectionElem::Deref);\n-                let projected_ty = bcx.fcx().monomorphize(&projected_ty);\n+                let projected_ty = self.monomorphize(&projected_ty);\n                 let (llptr, llextra) = match ptr.val {\n                     OperandValue::Immediate(llptr) => (llptr, ptr::null_mut()),\n                     OperandValue::Pair(llptr, llextra) => (llptr, llextra),\n@@ -118,7 +118,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             mir::Lvalue::Projection(ref projection) => {\n                 let tr_base = self.trans_lvalue(bcx, &projection.base);\n                 let projected_ty = tr_base.ty.projection_ty(tcx, &projection.elem);\n-                let projected_ty = bcx.fcx().monomorphize(&projected_ty);\n+                let projected_ty = self.monomorphize(&projected_ty);\n \n                 let project_index = |llindex| {\n                     let element = if let ty::TySlice(_) = tr_base.ty.to_ty(tcx).sty {\n@@ -274,6 +274,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n     pub fn monomorphized_lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n         let tcx = self.fcx.ccx.tcx();\n         let lvalue_ty = lvalue.ty(&self.mir, tcx);\n-        self.fcx.monomorphize(&lvalue_ty.to_ty(tcx))\n+        self.monomorphize(&lvalue_ty.to_ty(tcx))\n     }\n }"}, {"sha": "6f376251d9b7c72e7d0fad5ee8b9f83c92ed20ef", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=e10695f161fade16829f9fa96f48465b123c133e", "patch": "@@ -14,11 +14,14 @@ use llvm::debuginfo::DIScope;\n use rustc::ty;\n use rustc::mir::{self, Mir};\n use rustc::mir::tcx::LvalueTy;\n+use rustc::ty::subst::Substs;\n+use rustc::infer::TransNormalize;\n+use rustc::ty::TypeFoldable;\n use session::config::FullDebugInfo;\n use base;\n use common::{self, BlockAndBuilder, CrateContext, FunctionContext, C_null, Funclet};\n use debuginfo::{self, declare_local, VariableAccess, VariableKind, FunctionDebugContext};\n-use monomorphize::Instance;\n+use monomorphize::{self, Instance};\n use machine;\n use type_of;\n \n@@ -88,9 +91,17 @@ pub struct MirContext<'a, 'tcx:'a> {\n \n     /// Debug information for MIR scopes.\n     scopes: IndexVec<mir::VisibilityScope, debuginfo::MirDebugScope>,\n+\n+    /// If this function is being monomorphized, this contains the type substitutions used.\n+    param_substs: &'tcx Substs<'tcx>,\n }\n \n impl<'a, 'tcx> MirContext<'a, 'tcx> {\n+    pub fn monomorphize<T>(&self, value: &T) -> T\n+        where T: TransNormalize<'tcx> {\n+        monomorphize::apply_param_substs(self.fcx.ccx.shared(), self.param_substs, value)\n+    }\n+\n     pub fn debug_loc(&mut self, source_info: mir::SourceInfo) -> (DIScope, Span) {\n         // Bail out if debug info emission is not enabled.\n         match self.debug_context {\n@@ -207,8 +218,6 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     let bcx = fcx.get_entry_block();\n \n     // Analyze the temps to determine which must be lvalues\n-    // FIXME\n-    let lvalue_locals = analyze::lvalue_locals(&bcx, &mir);\n     let cleanup_kinds = analyze::cleanup_kinds(&mir);\n \n     // Allocate a `Block` for every basic block\n@@ -235,15 +244,21 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n         scopes: scopes,\n         locals: IndexVec::new(),\n         debug_context: debug_context,\n+        param_substs: {\n+            assert!(!instance.substs.needs_infer());\n+            instance.substs\n+        },\n     };\n \n+    let lvalue_locals = analyze::lvalue_locals(&bcx, &mircx);\n+\n     // Allocate variable and temp allocas\n     mircx.locals = {\n         let args = arg_local_refs(&bcx, &mircx, &mircx.scopes, &lvalue_locals);\n \n         let mut allocate_local = |local| {\n             let decl = &mir.local_decls[local];\n-            let ty = bcx.fcx().monomorphize(&decl.ty);\n+            let ty = mircx.monomorphize(&decl.ty);\n \n             if let Some(name) = decl.name {\n                 // User variable\n@@ -356,7 +371,7 @@ fn arg_local_refs<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n \n     mir.args_iter().enumerate().map(|(arg_index, local)| {\n         let arg_decl = &mir.local_decls[local];\n-        let arg_ty = bcx.fcx().monomorphize(&arg_decl.ty);\n+        let arg_ty = mircx.monomorphize(&arg_decl.ty);\n \n         if Some(local) == mir.spread_arg {\n             // This argument (e.g. the last argument in the \"rust-call\" ABI)"}, {"sha": "6e69608e51e6b8fd08688af1e04b925703f66391", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=e10695f161fade16829f9fa96f48465b123c133e", "patch": "@@ -197,7 +197,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                             let llval = [a, b][f.index()];\n                             let op = OperandRef {\n                                 val: OperandValue::Immediate(llval),\n-                                ty: bcx.fcx().monomorphize(&ty)\n+                                ty: self.monomorphize(&ty)\n                             };\n \n                             // Handle nested pairs."}, {"sha": "5037bd9dae3954e51c224f53b7e3bfb6a811c148", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10695f161fade16829f9fa96f48465b123c133e/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=e10695f161fade16829f9fa96f48465b123c133e", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n            }\n \n             mir::Rvalue::Cast(mir::CastKind::Unsize, ref source, cast_ty) => {\n-                let cast_ty = bcx.fcx().monomorphize(&cast_ty);\n+                let cast_ty = self.monomorphize(&cast_ty);\n \n                 if common::type_is_fat_ptr(bcx.ccx(), cast_ty) {\n                     // into-coerce of a thin pointer to a fat pointer - just\n@@ -186,7 +186,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             mir::Rvalue::Cast(ref kind, ref source, cast_ty) => {\n                 let operand = self.trans_operand(&bcx, source);\n                 debug!(\"cast operand is {:?}\", operand);\n-                let cast_ty = bcx.fcx().monomorphize(&cast_ty);\n+                let cast_ty = self.monomorphize(&cast_ty);\n \n                 let val = match *kind {\n                     mir::CastKind::ReifyFnPointer => {\n@@ -443,7 +443,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             mir::Rvalue::Box(content_ty) => {\n-                let content_ty: Ty<'tcx> = bcx.fcx().monomorphize(&content_ty);\n+                let content_ty: Ty<'tcx> = self.monomorphize(&content_ty);\n                 let llty = type_of::type_of(bcx.ccx(), content_ty);\n                 let llsize = machine::llsize_of(bcx.ccx(), llty);\n                 let align = type_of::align_of(bcx.ccx(), content_ty);"}]}