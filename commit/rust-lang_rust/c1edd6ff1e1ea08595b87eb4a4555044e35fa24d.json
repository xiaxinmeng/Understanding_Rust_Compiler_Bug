{"sha": "c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWRkNmZmMWUxZWEwODU5NWI4N2ViNGE0NTU1MDQ0ZTM1ZmEyNGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-11T13:54:56Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-11T13:54:56Z"}, "message": "Merge pull request #651 from oli-obk/improve_no_effect\n\nimprove the `no_effect` lint", "tree": {"sha": "d81dcc63782b236bebec4fdf346c3f63f174aa5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81dcc63782b236bebec4fdf346c3f63f174aa5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "html_url": "https://github.com/rust-lang/rust/commit/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1013026f18bbe921e5e221f068bc5a850da4d679", "url": "https://api.github.com/repos/rust-lang/rust/commits/1013026f18bbe921e5e221f068bc5a850da4d679", "html_url": "https://github.com/rust-lang/rust/commit/1013026f18bbe921e5e221f068bc5a850da4d679"}, {"sha": "eed9ec15fb2f38f4ea315f0a112f726d5623264f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed9ec15fb2f38f4ea315f0a112f726d5623264f", "html_url": "https://github.com/rust-lang/rust/commit/eed9ec15fb2f38f4ea315f0a112f726d5623264f"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "0df5ede82dacceffbf75689b5e077e9bfa41dea9", "filename": "src/no_effect.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/src%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/src%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fno_effect.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::middle::def::Def;\n-use rustc_front::hir::{Expr, ExprCall, ExprLit, ExprPath, ExprStruct};\n+use rustc_front::hir::{Expr, Expr_};\n use rustc_front::hir::{Stmt, StmtSemi};\n \n use utils::in_macro;\n@@ -24,16 +24,33 @@ fn has_no_effect(cx: &LateContext, expr: &Expr) -> bool {\n         return false;\n     }\n     match expr.node {\n-        ExprLit(..) |\n-        ExprPath(..) => true,\n-        ExprStruct(_, ref fields, ref base) => {\n+        Expr_::ExprLit(..) |\n+        Expr_::ExprClosure(..) |\n+        Expr_::ExprRange(None, None) |\n+        Expr_::ExprPath(..) => true,\n+        Expr_::ExprIndex(ref a, ref b) |\n+        Expr_::ExprRange(Some(ref a), Some(ref b)) |\n+        Expr_::ExprBinary(_, ref a, ref b) => has_no_effect(cx, a) && has_no_effect(cx, b),\n+        Expr_::ExprVec(ref v) |\n+        Expr_::ExprTup(ref v) => v.iter().all(|val| has_no_effect(cx, val)),\n+        Expr_::ExprRange(Some(ref inner), None) |\n+        Expr_::ExprRange(None, Some(ref inner)) |\n+        Expr_::ExprRepeat(ref inner, _) |\n+        Expr_::ExprCast(ref inner, _) |\n+        Expr_::ExprType(ref inner, _) |\n+        Expr_::ExprUnary(_, ref inner) |\n+        Expr_::ExprField(ref inner, _) |\n+        Expr_::ExprTupField(ref inner, _) |\n+        Expr_::ExprAddrOf(_, ref inner) |\n+        Expr_::ExprBox(ref inner) => has_no_effect(cx, inner),\n+        Expr_::ExprStruct(_, ref fields, ref base) => {\n             fields.iter().all(|field| has_no_effect(cx, &field.expr)) &&\n             match *base {\n                 Some(ref base) => has_no_effect(cx, base),\n                 None => true,\n             }\n         }\n-        ExprCall(ref callee, ref args) => {\n+        Expr_::ExprCall(ref callee, ref args) => {\n             let def = cx.tcx.def_map.borrow().get(&callee.id).map(|d| d.full_def());\n             match def {\n                 Some(Def::Struct(..)) |"}, {"sha": "7e2ad1fede5469c2f78028de6e74e6ebdc2b62a5", "filename": "tests/compile-fail/absurd-extreme-comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(absurd_extreme_comparisons)]\n-#![allow(unused, eq_op)]\n+#![allow(unused, eq_op, no_effect)]\n fn main() {\n     const Z: u32 = 0;\n "}, {"sha": "1d9492bc0ab1c6b9840ef27134d9342a03da0f10", "filename": "tests/compile-fail/array_indexing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(out_of_bounds_indexing)]\n+#![allow(no_effect)]\n \n fn main() {\n     let x = [1,2,3,4];"}, {"sha": "9813529586290cb9b8c01b3c76e0f9e5c38207e0", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -5,7 +5,7 @@ const THREE_BITS : i64 = 7;\n const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n \n #[deny(bad_bit_mask)]\n-#[allow(ineffective_bit_mask, identity_op)]\n+#[allow(ineffective_bit_mask, identity_op, no_effect)]\n fn main() {\n     let x = 5;\n \n@@ -45,7 +45,7 @@ fn main() {\n }\n \n #[deny(ineffective_bit_mask)]\n-#[allow(bad_bit_mask)]\n+#[allow(bad_bit_mask, no_effect)]\n fn ineffective() {\n     let x = 5;\n "}, {"sha": "0f44fa2c1fd0ff2c1dc3a1aefbb210faa9ae4224", "filename": "tests/compile-fail/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+#[allow(no_effect)]\n fn main() {\n     // Test cast_precision_loss\n     1i32 as f32; //~ERROR casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)"}, {"sha": "d2188130a61ea9cc7f731e3c7c5f55998ca5051c", "filename": "tests/compile-fail/cmp_nan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_nan.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(cmp_nan)]\n-#[allow(float_cmp)]\n+#[allow(float_cmp, no_effect)]\n fn main() {\n     let x = 5f32;\n     x == std::f32::NAN; //~ERROR doomed comparison with NAN"}, {"sha": "d6e666f299b7d93acdbcb59480671596a15d1c34", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![allow(dead_code)]\n+#![allow(dead_code, no_effect)]\n #![allow(let_and_return)]\n #![allow(needless_return)]\n #![allow(unused_variables)]"}, {"sha": "487185516bf27063d36cafab1f584c9aaf0187c0", "filename": "tests/compile-fail/eq_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -3,6 +3,7 @@\n \n #[deny(eq_op)]\n #[allow(identity_op)]\n+#[allow(no_effect)]\n fn main() {\n     // simple values and comparisons\n     1 == 1; //~ERROR equal expressions"}, {"sha": "46680f2b8d83256371e9c17657bc0e162467c1a4", "filename": "tests/compile-fail/eta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feta.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unknown_lints, unused)]\n+#![allow(unknown_lints, unused, no_effect)]\n #![deny(redundant_closure)]\n \n fn main() {"}, {"sha": "d1ecb37cdd5298e6d57c2e66ba428a752d1ead46", "filename": "tests/compile-fail/float_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffloat_cmp.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(float_cmp)]\n-#![allow(unused)]\n+#![allow(unused, no_effect)]\n \n use std::ops::Add;\n "}, {"sha": "28873ee6b73105b6ce62c86fd1bb6c58c55460b3", "filename": "tests/compile-fail/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fidentity_op.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -5,7 +5,7 @@ const ONE : i64 = 1;\n const NEG_ONE : i64 = -1;\n const ZERO : i64 = 0;\n \n-#[allow(eq_op)]\n+#[allow(eq_op, no_effect)]\n #[deny(identity_op)]\n fn main() {\n     let x = 0;"}, {"sha": "e84209a6d1eec2f7c57b64619f0b62bb41204640", "filename": "tests/compile-fail/modulo_one.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodulo_one.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -1,6 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n #![deny(modulo_one)]\n+#![allow(no_effect)]\n \n fn main() {\n     10 % 1; //~ERROR any number modulo 1 will be 0"}, {"sha": "0db9cb3bdef803dd1f903de63b65b5264df862d9", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![allow(unused)]\n+#![allow(unused, no_effect)]\n \n //#![plugin(regex_macros)]\n //extern crate regex;"}, {"sha": "52ea423a57d7d8212883fb90ce98f14533365ff8", "filename": "tests/compile-fail/no_effect.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1edd6ff1e1ea08595b87eb4a4555044e35fa24d/tests%2Fcompile-fail%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_effect.rs?ref=c1edd6ff1e1ea08595b87eb4a4555044e35fa24d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(plugin)]\n+#![feature(plugin, box_syntax)]\n #![plugin(clippy)]\n \n #![deny(no_effect)]\n@@ -20,14 +20,32 @@ fn get_struct() -> Struct { Struct { field: 0 } }\n \n fn main() {\n     let s = get_struct();\n+    let s2 = get_struct();\n \n     0; //~ERROR statement with no effect\n+    s2; //~ERROR statement with no effect\n     Unit; //~ERROR statement with no effect\n     Tuple(0); //~ERROR statement with no effect\n     Struct { field: 0 }; //~ERROR statement with no effect\n     Struct { ..s }; //~ERROR statement with no effect\n     Enum::Tuple(0); //~ERROR statement with no effect\n     Enum::Struct { field: 0 }; //~ERROR statement with no effect\n+    5 + 6; //~ERROR statement with no effect\n+    *&42; //~ERROR statement with no effect\n+    &6; //~ERROR statement with no effect\n+    (5, 6, 7); //~ERROR statement with no effect\n+    box 42; //~ERROR statement with no effect\n+    ..; //~ERROR statement with no effect\n+    5..; //~ERROR statement with no effect\n+    ..5; //~ERROR statement with no effect\n+    5..6; //~ERROR statement with no effect\n+    [42, 55]; //~ERROR statement with no effect\n+    [42, 55][1]; //~ERROR statement with no effect\n+    (42, 55).1; //~ERROR statement with no effect\n+    [42; 55]; //~ERROR statement with no effect\n+    [42; 55][13]; //~ERROR statement with no effect\n+    let mut x = 0;\n+    || x += 5; //~ERROR statement with no effect\n \n     // Do not warn\n     get_number();\n@@ -36,4 +54,17 @@ fn main() {\n     Struct { ..get_struct() };\n     Enum::Tuple(get_number());\n     Enum::Struct { field: get_number() };\n+    5 + get_number();\n+    *&get_number();\n+    &get_number();\n+    (5, 6, get_number());\n+    box get_number();\n+    get_number()..;\n+    ..get_number();\n+    5..get_number();\n+    [42, get_number()];\n+    [42, 55][get_number() as usize];\n+    (42, get_number()).1;\n+    [get_number(); 55];\n+    [42; 55][get_number() as usize];\n }"}]}