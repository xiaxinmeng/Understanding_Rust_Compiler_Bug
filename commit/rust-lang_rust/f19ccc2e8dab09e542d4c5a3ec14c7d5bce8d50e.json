{"sha": "f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "node_id": "C_kwDOAAsO6NoAKGYxOWNjYzJlOGRhYjA5ZTU0MmQ0YzVhM2VjMTRjN2Q1YmNlOGQ1MGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-10T09:05:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-10T09:05:50Z"}, "message": "Auto merge of #97939 - JohnTitor:rollup-79pxupb, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #97718 (Fix `delayed_good_path_bug` ice for expected diagnostics (RFC 2383))\n - #97876 (update docs for `std::future::IntoFuture`)\n - #97888 (Don't use __gxx_personality_v0 in panic_unwind on emscripten target)\n - #97922 (Remove redundant calls to reserve in impl Write for VecDeque)\n - #97927 (Do not introduce bindings for types and consts in HRTB.)\n - #97937 (Fix a typo in `test/ui/hrtb/hrtb-just-for-static.rs`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4bb9736aa9f8bbc35b256aafcbf7c07e1c2402f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bb9736aa9f8bbc35b256aafcbf7c07e1c2402f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "html_url": "https://github.com/rust-lang/rust/commit/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dea0033f7f40fc3a96b728cb2095da91135f0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dea0033f7f40fc3a96b728cb2095da91135f0a4", "html_url": "https://github.com/rust-lang/rust/commit/3dea0033f7f40fc3a96b728cb2095da91135f0a4"}, {"sha": "9d25bc37446529038255f92c2c461a37d227bb9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d25bc37446529038255f92c2c461a37d227bb9e", "html_url": "https://github.com/rust-lang/rust/commit/9d25bc37446529038255f92c2c461a37d227bb9e"}], "stats": {"total": 211, "additions": 182, "deletions": 29}, "files": [{"sha": "83fe2a2df892f52d5ab04b447a92e21ca0c002d6", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -400,6 +400,9 @@ struct HandlerInner {\n     emitter: Box<dyn Emitter + sync::Send>,\n     delayed_span_bugs: Vec<Diagnostic>,\n     delayed_good_path_bugs: Vec<DelayedDiagnostic>,\n+    /// This flag indicates that an expected diagnostic was emitted and suppressed.\n+    /// This is used for the `delayed_good_path_bugs` check.\n+    suppressed_expected_diag: bool,\n \n     /// This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     /// emitting the same diagnostic with extended help (`--teach`) twice, which\n@@ -495,7 +498,7 @@ impl Drop for HandlerInner {\n         // instead of \"require some error happened\". Sadly that isn't ideal, as\n         // lints can be `#[allow]`'d, potentially leading to this triggering.\n         // Also, \"good path\" should be replaced with a better naming.\n-        if !self.has_any_message() {\n+        if !self.has_any_message() && !self.suppressed_expected_diag {\n             let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n             self.flush_delayed(\n                 bugs.into_iter().map(DelayedDiagnostic::decorate),\n@@ -577,6 +580,7 @@ impl Handler {\n                 emitter,\n                 delayed_span_bugs: Vec::new(),\n                 delayed_good_path_bugs: Vec::new(),\n+                suppressed_expected_diag: false,\n                 taught_diagnostics: Default::default(),\n                 emitted_diagnostic_codes: Default::default(),\n                 emitted_diagnostics: Default::default(),\n@@ -1000,20 +1004,20 @@ impl Handler {\n         let mut inner = self.inner.borrow_mut();\n         let diags = std::mem::take(&mut inner.unstable_expect_diagnostics);\n         inner.check_unstable_expect_diagnostics = true;\n-        if diags.is_empty() {\n-            return;\n-        }\n \n-        for mut diag in diags.into_iter() {\n-            diag.update_unstable_expectation_id(unstable_to_stable);\n+        if !diags.is_empty() {\n+            inner.suppressed_expected_diag = true;\n+            for mut diag in diags.into_iter() {\n+                diag.update_unstable_expectation_id(unstable_to_stable);\n \n-            let stable_id = diag\n-                .level\n-                .get_expectation_id()\n-                .expect(\"all diagnostics inside `unstable_expect_diagnostics` must have a `LintExpectationId`\");\n-            inner.fulfilled_expectations.insert(stable_id);\n+                let stable_id = diag\n+                    .level\n+                    .get_expectation_id()\n+                    .expect(\"all diagnostics inside `unstable_expect_diagnostics` must have a `LintExpectationId`\");\n+                inner.fulfilled_expectations.insert(stable_id);\n \n-            (*TRACK_DIAGNOSTICS)(&diag);\n+                (*TRACK_DIAGNOSTICS)(&diag);\n+            }\n         }\n \n         inner\n@@ -1100,6 +1104,7 @@ impl HandlerInner {\n         (*TRACK_DIAGNOSTICS)(diagnostic);\n \n         if let Level::Expect(expectation_id) = diagnostic.level {\n+            self.suppressed_expected_diag = true;\n             self.fulfilled_expectations.insert(expectation_id);\n             return None;\n         } else if diagnostic.level == Allow {"}, {"sha": "45a5adb90cfd2363019c4fd976c725bf4ae91d77", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -1981,7 +1981,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     continue;\n                 }\n             };\n-            let res = Res::Def(def_kind, def_id.to_def_id());\n+\n+            let res = match kind {\n+                ItemRibKind(..) | AssocItemRibKind => Res::Def(def_kind, def_id.to_def_id()),\n+                NormalRibKind => Res::Err,\n+                _ => bug!(\"Unexpected rib kind {:?}\", kind),\n+            };\n             self.r.record_partial_res(param.id, PartialRes::new(res));\n             rib.bindings.insert(ident, res);\n         }"}, {"sha": "d22094130ad9a1cf0eca2686b847a94bdc65606a", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -1,6 +1,109 @@\n use crate::future::Future;\n \n /// Conversion into a `Future`.\n+///\n+/// By implementing `Intofuture` for a type, you define how it will be\n+/// converted to a future.\n+///\n+/// # `.await` desugaring\n+///\n+/// The `.await` keyword desugars into a call to `IntoFuture::into_future`\n+/// first before polling the future to completion. `IntoFuture` is implemented\n+/// for all `T: Future` which means the `into_future` method will be available\n+/// on all futures.\n+///\n+/// ```no_run\n+/// #![feature(into_future)]\n+///\n+/// use std::future::IntoFuture;\n+///\n+/// # async fn foo() {\n+/// let v = async { \"meow\" };\n+/// let mut fut = v.into_future();\n+/// assert_eq!(\"meow\", fut.await);\n+/// # }\n+/// ```\n+///\n+/// # Async builders\n+///\n+/// When implementing futures manually there will often be a choice between\n+/// implementing `Future` or `IntoFuture` for a type. Implementing `Future` is a\n+/// good choice in most cases. But implementing `IntoFuture` is most useful when\n+/// implementing \"async builder\" types, which allows the type to be modified\n+/// multiple times before being `.await`ed.\n+///\n+/// ```rust\n+/// #![feature(into_future)]\n+///\n+/// use std::future::{ready, Ready, IntoFuture};\n+///\n+/// /// Eventually multiply two numbers\n+/// pub struct Multiply {\n+///     num: u16,\n+///     factor: u16,\n+/// }\n+///\n+/// impl Multiply {\n+///     /// Construct a new instance of `Multiply`.\n+///     pub fn new(num: u16, factor: u16) -> Self {\n+///         Self { num, factor }\n+///     }\n+///\n+///     /// Set the number to multiply by the factor.\n+///     pub fn number(mut self, num: u16) -> Self {\n+///         self.num = num;\n+///         self\n+///     }\n+///\n+///     /// Set the factor to multiply the number with.\n+///     pub fn factor(mut self, factor: u16) -> Self {\n+///         self.factor = factor;\n+///         self\n+///     }\n+/// }\n+///\n+/// impl IntoFuture for Multiply {\n+///     type Output = u16;\n+///     type IntoFuture = Ready<Self::Output>;\n+///\n+///     fn into_future(self) -> Self::IntoFuture {\n+///         ready(self.num * self.factor)\n+///     }\n+/// }\n+///\n+/// // NOTE: Rust does not yet have an `async fn main` function, that functionality\n+/// // currently only exists in the ecosystem.\n+/// async fn run() {\n+///     let num = Multiply::new(0, 0)  // initialize the builder to number: 0, factor: 0\n+///         .number(2)                 // change the number to 2\n+///         .factor(2)                 // change the factor to 2\n+///         .await;                    // convert to future and .await\n+///\n+///     assert_eq!(num, 4);\n+/// }\n+/// ```\n+///\n+/// # Usage in trait bounds\n+///\n+/// Using `IntoFuture` in trait bounds allows a function to be generic over both\n+/// `Future` and `IntoFuture`. This is convenient for users of the function, so\n+/// when they are using it they don't have to make an extra call to\n+/// `IntoFuture::into_future` to obtain an instance of `Future`:\n+///\n+/// ```rust\n+/// #![feature(into_future)]\n+///\n+/// use std::future::IntoFuture;\n+///\n+/// /// Convert the output of a future to a string.\n+/// async fn fut_to_string<Fut>(fut: Fut) -> String\n+/// where\n+///     Fut: IntoFuture,\n+///     Fut::Output: std::fmt::Debug,\n+/// {\n+///     format!(\"{:?}\", fut.await)\n+/// }\n+/// ```\n #[unstable(feature = \"into_future\", issue = \"67644\")]\n pub trait IntoFuture {\n     /// The output that the future will produce on completion.\n@@ -12,6 +115,22 @@ pub trait IntoFuture {\n     type IntoFuture: Future<Output = Self::Output>;\n \n     /// Creates a future from a value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```no_run\n+    /// #![feature(into_future)]\n+    ///\n+    /// use std::future::IntoFuture;\n+    ///\n+    /// # async fn foo() {\n+    /// let v = async { \"meow\" };\n+    /// let mut fut = v.into_future();\n+    /// assert_eq!(\"meow\", fut.await);\n+    /// # }\n+    /// ```\n     #[unstable(feature = \"into_future\", issue = \"67644\")]\n     #[lang = \"into_future\"]\n     fn into_future(self) -> Self::IntoFuture;"}, {"sha": "1ee69ff9cb2857a7108d99d74d6950da525c5f6b", "filename": "library/panic_unwind/src/emcc.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Femcc.rs?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -105,15 +105,19 @@ extern \"C\" fn exception_cleanup(ptr: *mut libc::c_void) -> *mut libc::c_void {\n     }\n }\n \n+// This is required by the compiler to exist (e.g., it's a lang item), but it's\n+// never actually called by the compiler.  Emscripten EH doesn't use a\n+// personality function at all, it instead uses __cxa_find_matching_catch.\n+// Wasm error handling would use __gxx_personality_wasm0.\n #[lang = \"eh_personality\"]\n unsafe extern \"C\" fn rust_eh_personality(\n-    version: c_int,\n-    actions: uw::_Unwind_Action,\n-    exception_class: uw::_Unwind_Exception_Class,\n-    exception_object: *mut uw::_Unwind_Exception,\n-    context: *mut uw::_Unwind_Context,\n+    _version: c_int,\n+    _actions: uw::_Unwind_Action,\n+    _exception_class: uw::_Unwind_Exception_Class,\n+    _exception_object: *mut uw::_Unwind_Exception,\n+    _context: *mut uw::_Unwind_Context,\n ) -> uw::_Unwind_Reason_Code {\n-    __gxx_personality_v0(version, actions, exception_class, exception_object, context)\n+    core::intrinsics::abort()\n }\n \n extern \"C\" {\n@@ -125,11 +129,4 @@ extern \"C\" {\n         tinfo: *const TypeInfo,\n         dest: extern \"C\" fn(*mut libc::c_void) -> *mut libc::c_void,\n     ) -> !;\n-    fn __gxx_personality_v0(\n-        version: c_int,\n-        actions: uw::_Unwind_Action,\n-        exception_class: uw::_Unwind_Exception_Class,\n-        exception_object: *mut uw::_Unwind_Exception,\n-        context: *mut uw::_Unwind_Context,\n-    ) -> uw::_Unwind_Reason_Code;\n }"}, {"sha": "95072547302eb05d6ff2fde41478b327de47f7c0", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -441,14 +441,12 @@ impl<A: Allocator> Read for VecDeque<u8, A> {\n impl<A: Allocator> Write for VecDeque<u8, A> {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        self.reserve(buf.len());\n         self.extend(buf);\n         Ok(buf.len())\n     }\n \n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n-        self.reserve(buf.len());\n         self.extend(buf);\n         Ok(())\n     }"}, {"sha": "1a9bb252340a6f1d0048fa0235341e3f24099507", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-wrong-kind.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.rs?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -0,0 +1,7 @@\n+fn a() where for<T> T: Copy {}\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+fn b() where for<const C: usize> [(); C]: Copy {}\n+//~^ ERROR only lifetime parameters can be used in this context\n+\n+fn main() {}"}, {"sha": "f31aa554634707396e4aeb9fe638f227887b2a4e", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-wrong-kind.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-wrong-kind.stderr?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -0,0 +1,14 @@\n+error: only lifetime parameters can be used in this context\n+  --> $DIR/hrtb-wrong-kind.rs:1:18\n+   |\n+LL | fn a() where for<T> T: Copy {}\n+   |                  ^\n+\n+error: only lifetime parameters can be used in this context\n+  --> $DIR/hrtb-wrong-kind.rs:4:24\n+   |\n+LL | fn b() where for<const C: usize> [(); C]: Copy {}\n+   |                        ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8fb4218f8a409cb3d50993eab69b043c40048456", "filename": "src/test/ui/hrtb/hrtb-just-for-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -24,7 +24,7 @@ fn give_static() {\n     want_hrtb::<StaticInt>() //~ ERROR\n }\n \n-// AnyInt implements Foo<&'a isize> for any 'a, so it is a match.\n+// &'a u32 only implements Foo<&'a isize> for specific 'a, so it is an error.\n impl<'a> Foo<&'a isize> for &'a u32 { }\n fn give_some<'a>() {\n     want_hrtb::<&'a u32>()"}, {"sha": "912e831d88a7d93cf4d54dc26ba64c6ca3a37589", "filename": "src/test/ui/lint/rfc-2383-lint-reason/avoid_delayed_good_path_ice.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Favoid_delayed_good_path_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Favoid_delayed_good_path_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Favoid_delayed_good_path_ice.rs?ref=f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+#![feature(lint_reasons)]\n+\n+#[expect(drop_bounds)]\n+fn trigger_rustc_lints<T: Drop>() {\n+}\n+\n+fn main() {}"}]}