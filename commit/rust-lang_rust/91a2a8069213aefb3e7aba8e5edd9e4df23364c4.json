{"sha": "91a2a8069213aefb3e7aba8e5edd9e4df23364c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYTJhODA2OTIxM2FlZmIzZTdhYmE4ZTVlZGQ5ZTRkZjIzMzY0YzQ=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-26T14:01:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:36:43Z"}, "message": "Renamed lifetimes for better understanding", "tree": {"sha": "89f102c985f7d300e70b91c31370f1ac29ba27eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f102c985f7d300e70b91c31370f1ac29ba27eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91a2a8069213aefb3e7aba8e5edd9e4df23364c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91a2a8069213aefb3e7aba8e5edd9e4df23364c4", "html_url": "https://github.com/rust-lang/rust/commit/91a2a8069213aefb3e7aba8e5edd9e4df23364c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91a2a8069213aefb3e7aba8e5edd9e4df23364c4/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d530db2c5e63da2fed3ec1ac3bba2fa0fb4363c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d530db2c5e63da2fed3ec1ac3bba2fa0fb4363c", "html_url": "https://github.com/rust-lang/rust/commit/8d530db2c5e63da2fed3ec1ac3bba2fa0fb4363c"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "af75c15e26020e1f6ae6cd50975ed29892800bc4", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91a2a8069213aefb3e7aba8e5edd9e4df23364c4/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91a2a8069213aefb3e7aba8e5edd9e4df23364c4/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=91a2a8069213aefb3e7aba8e5edd9e4df23364c4", "patch": "@@ -45,14 +45,14 @@ use abi::Abi;\n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n /// `llvm::Context` so that several compilation units may be optimized in parallel.\n /// All other LLVM data structures in the `CodegenCx` are tied to that `llvm::Context`.\n-pub struct CodegenCx<'a, 'tcx: 'a, V = &'a Value> {\n-    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub struct CodegenCx<'ll, 'tcx: 'll, V = &'ll Value> {\n+    pub tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n     pub check_overflow: bool,\n     pub use_dll_storage_attrs: bool,\n     pub tls_model: llvm::ThreadLocalMode,\n \n-    pub llmod: &'a llvm::Module,\n-    pub llcx: &'a llvm::Context,\n+    pub llmod: &'ll llvm::Module,\n+    pub llcx: &'ll llvm::Context,\n     pub stats: RefCell<Stats>,\n     pub codegen_unit: Arc<CodegenUnit<'tcx>>,\n \n@@ -86,12 +86,12 @@ pub struct CodegenCx<'a, 'tcx: 'a, V = &'a Value> {\n     /// See http://llvm.org/docs/LangRef.html#the-llvm-used-global-variable for details\n     pub used_statics: RefCell<Vec<V>>,\n \n-    pub lltypes: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), &'a Type>>,\n-    pub scalar_lltypes: RefCell<FxHashMap<Ty<'tcx>, &'a Type>>,\n+    pub lltypes: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), &'ll Type>>,\n+    pub scalar_lltypes: RefCell<FxHashMap<Ty<'tcx>, &'ll Type>>,\n     pub pointee_infos: RefCell<FxHashMap<(Ty<'tcx>, Size), Option<PointeeInfo>>>,\n-    pub isize_ty: &'a Type,\n+    pub isize_ty: &'ll Type,\n \n-    pub dbg_cx: Option<debuginfo::CrateDebugContext<'a, 'tcx>>,\n+    pub dbg_cx: Option<debuginfo::CrateDebugContext<'ll, 'tcx>>,\n \n     eh_personality: Cell<Option<V>>,\n     eh_unwind_resume: Cell<Option<V>>,\n@@ -103,8 +103,7 @@ pub struct CodegenCx<'a, 'tcx: 'a, V = &'a Value> {\n     local_gen_sym_counter: Cell<usize>,\n }\n \n-impl<'a, 'tcx> DepGraphSafe for CodegenCx<'a, 'tcx> {\n-}\n+impl<'ll, 'tcx> DepGraphSafe for CodegenCx<'ll, 'tcx> {}\n \n pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n     let reloc_model_arg = match sess.opts.cg.relocation_model {\n@@ -217,11 +216,11 @@ pub unsafe fn create_module(\n     llmod\n }\n \n-impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n-    crate fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n+    crate fn new(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n                  codegen_unit: Arc<CodegenUnit<'tcx>>,\n-                 llvm_module: &'a ::ModuleLlvm)\n-                 -> CodegenCx<'a, 'tcx> {\n+                 llvm_module: &'ll ::ModuleLlvm)\n+                 -> Self {\n         // An interesting part of Windows which MSVC forces our hand on (and\n         // apparently MinGW didn't) is the usage of `dllimport` and `dllexport`\n         // attributes in LLVM IR as well as native dependencies (in C these"}]}