{"sha": "d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZDJmYzUxZjdmYzIwZWM3YWRiZjE0N2VkNGZkOWY4OTAzNGJkM2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-21T12:34:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-31T23:59:34Z"}, "message": "some new tests", "tree": {"sha": "e704653fbfba160fa21283a537bec833685b2dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e704653fbfba160fa21283a537bec833685b2dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d", "html_url": "https://github.com/rust-lang/rust/commit/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b97070ff1281c4dc4cc69ce3c2b186b9eb81d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b97070ff1281c4dc4cc69ce3c2b186b9eb81d7", "html_url": "https://github.com/rust-lang/rust/commit/72b97070ff1281c4dc4cc69ce3c2b186b9eb81d7"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "a753527ea53d55f341943aa9cedd98d90b4783de", "filename": "src/test/compile-fail/associated-types/cache/chrono-scan.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fchrono-scan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fchrono-scan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fchrono-scan.rs?ref=d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+pub type ParseResult<T> = Result<T, ()>;\n+\n+pub enum Item<'a> {     Literal(&'a str),\n+ }\n+\n+pub fn colon_or_space(s: &str) -> ParseResult<&str> {\n+    unimplemented!()\n+}\n+\n+pub fn timezone_offset_zulu<F>(s: &str, colon: F) -> ParseResult<(&str, i32)>\n+        where F: FnMut(&str) -> ParseResult<&str> {\n+    unimplemented!()\n+}\n+\n+pub fn parse<'a, I>(mut s: &str, items: I) -> ParseResult<()>\n+        where I: Iterator<Item=Item<'a>> {\n+    macro_rules! try_consume {\n+        ($e:expr) => ({ let (s_, v) = try!($e); s = s_; v })\n+    }\n+    let offset = try_consume!(timezone_offset_zulu(s.trim_left(), colon_or_space));\n+    let offset = try_consume!(timezone_offset_zulu(s.trim_left(), colon_or_space));\n+    Ok(())\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "d1117328c8657b3213746f72714f027b46509037", "filename": "src/test/compile-fail/associated-types/cache/elision.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Felision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Felision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Felision.rs?ref=d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+// Check that you are allowed to implement using elision but write\n+// trait without elision (a bug in this cropped up during\n+// bootstrapping, so this is a regression test).\n+\n+pub struct SplitWhitespace<'a> {\n+    x: &'a u8\n+}\n+\n+pub trait UnicodeStr {\n+    fn split_whitespace<'a>(&'a self) -> SplitWhitespace<'a>;\n+}\n+\n+impl UnicodeStr for str {\n+    #[inline]\n+    fn split_whitespace(&self) -> SplitWhitespace {\n+        unimplemented!()\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "d03424b2b2b7afa28f23f0e79803faf3c9e002c3", "filename": "src/test/run-pass/project-cache-issue-31849.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d/src%2Ftest%2Frun-pass%2Fproject-cache-issue-31849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d/src%2Ftest%2Frun-pass%2Fproject-cache-issue-31849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproject-cache-issue-31849.rs?ref=d3d2fc51f7fc20ec7adbf147ed4fd9f89034bd3d", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #31849: the problem here was actually a performance\n+// cliff, but I'm adding the test for reference.\n+\n+pub trait Upcast<T> {\n+    fn upcast(self) -> T;\n+}\n+\n+impl<S1, S2, T1, T2> Upcast<(T1, T2)> for (S1,S2)\n+    where S1: Upcast<T1>,\n+          S2: Upcast<T2>,\n+{\n+    fn upcast(self) -> (T1, T2) { (self.0.upcast(), self.1.upcast()) }\n+}\n+\n+impl Upcast<()> for ()\n+{\n+    fn upcast(self) -> () { () }\n+}\n+\n+pub trait ToStatic {\n+    type Static: 'static;\n+    fn to_static(self) -> Self::Static where Self: Sized;\n+}\n+\n+impl<T, U> ToStatic for (T, U)\n+    where T: ToStatic,\n+          U: ToStatic\n+{\n+    type Static = (T::Static, U::Static);\n+    fn to_static(self) -> Self::Static { (self.0.to_static(), self.1.to_static()) }\n+}\n+\n+impl ToStatic for ()\n+{\n+    type Static = ();\n+    fn to_static(self) -> () { () }\n+}\n+\n+\n+trait Factory {\n+    type Output;\n+    fn build(&self) -> Self::Output;\n+}\n+\n+impl<S,T> Factory for (S, T)\n+    where S: Factory,\n+          T: Factory,\n+          S::Output: ToStatic,\n+          <S::Output as ToStatic>::Static: Upcast<S::Output>,\n+{\n+    type Output = (S::Output, T::Output);\n+    fn build(&self) -> Self::Output { (self.0.build().to_static().upcast(), self.1.build()) }\n+}\n+\n+impl Factory for () {\n+    type Output = ();\n+    fn build(&self) -> Self::Output { () }\n+}\n+\n+fn main() {\n+    // More parens, more time.\n+    let it = ((((((((((),()),()),()),()),()),()),()),()),());\n+    it.build();\n+}\n+"}]}