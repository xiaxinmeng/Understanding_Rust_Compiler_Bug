{"sha": "23d880b127c346be631d2a9dbcef3bd5dff7d305", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDg4MGIxMjdjMzQ2YmU2MzFkMmE5ZGJjZWYzYmQ1ZGZmN2QzMDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-10T21:36:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-10T21:36:41Z"}, "message": "rustc_driver: factor out computing the exit code", "tree": {"sha": "d8211bd172e59b45c8bf115213d046a1801c64aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8211bd172e59b45c8bf115213d046a1801c64aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d880b127c346be631d2a9dbcef3bd5dff7d305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d880b127c346be631d2a9dbcef3bd5dff7d305", "html_url": "https://github.com/rust-lang/rust/commit/23d880b127c346be631d2a9dbcef3bd5dff7d305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d880b127c346be631d2a9dbcef3bd5dff7d305/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d16eeb8c9a8d6d85130b15ec9bd26df55773b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d16eeb8c9a8d6d85130b15ec9bd26df55773b12", "html_url": "https://github.com/rust-lang/rust/commit/8d16eeb8c9a8d6d85130b15ec9bd26df55773b12"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "f8afaecf21858b447151de63b23c8a674f378d1c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/23d880b127c346be631d2a9dbcef3bd5dff7d305/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d880b127c346be631d2a9dbcef3bd5dff7d305/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=23d880b127c346be631d2a9dbcef3bd5dff7d305", "patch": "@@ -1138,6 +1138,16 @@ pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported>\n     })\n }\n \n+/// Variant of `catch_fatal_errors` for the `interface::Result` return type\n+/// that also computes the exit code.\n+pub fn catch_with_exit_code(f: impl FnOnce() -> interface::Result<()>) -> i32 {\n+    let result = catch_fatal_errors(f).and_then(|result| result);\n+    match result {\n+        Ok(()) => EXIT_SUCCESS,\n+        Err(_) => EXIT_FAILURE,\n+    }\n+}\n+\n lazy_static! {\n     static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n         let hook = panic::take_hook();\n@@ -1233,7 +1243,7 @@ pub fn main() {\n     init_rustc_env_logger();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();\n-    let result = catch_fatal_errors(|| {\n+    let exit_code = catch_with_exit_code(|| {\n         let args = env::args_os()\n             .enumerate()\n             .map(|(i, arg)| {\n@@ -1246,12 +1256,7 @@ pub fn main() {\n             })\n             .collect::<Vec<_>>();\n         run_compiler(&args, &mut callbacks, None, None)\n-    })\n-    .and_then(|result| result);\n-    let exit_code = match result {\n-        Ok(_) => EXIT_SUCCESS,\n-        Err(_) => EXIT_FAILURE,\n-    };\n+    });\n     // The extra `\\t` is necessary to align this label with the others.\n     print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());\n     process::exit(exit_code);"}, {"sha": "1ce0300f23904c6a9dc80004cfd3bf3959725472", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23d880b127c346be631d2a9dbcef3bd5dff7d305/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d880b127c346be631d2a9dbcef3bd5dff7d305/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=23d880b127c346be631d2a9dbcef3bd5dff7d305", "patch": "@@ -296,7 +296,7 @@ pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     lazy_static::initialize(&ICE_HOOK);\n     exit(\n-        rustc_driver::catch_fatal_errors(move || {\n+        rustc_driver::catch_with_exit_code(move || {\n             let mut orig_args: Vec<String> = env::args().collect();\n \n             if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n@@ -411,7 +411,5 @@ pub fn main() {\n                 if clippy_enabled { &mut clippy } else { &mut default };\n             rustc_driver::run_compiler(&args, callbacks, None, None)\n         })\n-        .and_then(|result| result)\n-        .is_err() as i32,\n     )\n }"}]}