{"sha": "71addded64548ff845d9ef3852a2c1d2592ae39f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYWRkZGVkNjQ1NDhmZjg0NWQ5ZWYzODUyYTJjMWQyNTkyYWUzOWY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-08T13:21:26Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:43Z"}, "message": "std::rand: remove `seed`.\n\nThis much better handled by directly calling out to `OSRng` where\nappropriate.", "tree": {"sha": "097cca91cc14adc05e4a4a81e2b9ec3c0d41a92a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097cca91cc14adc05e4a4a81e2b9ec3c0d41a92a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71addded64548ff845d9ef3852a2c1d2592ae39f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71addded64548ff845d9ef3852a2c1d2592ae39f", "html_url": "https://github.com/rust-lang/rust/commit/71addded64548ff845d9ef3852a2c1d2592ae39f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71addded64548ff845d9ef3852a2c1d2592ae39f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb5f7678530c32caa11a1bc31e27187ff74bc19", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb5f7678530c32caa11a1bc31e27187ff74bc19", "html_url": "https://github.com/rust-lang/rust/commit/5bb5f7678530c32caa11a1bc31e27187ff74bc19"}], "stats": {"total": 94, "additions": 42, "deletions": 52}, "files": [{"sha": "b785189ef93747f57a44ed7e8c3031328544b30b", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/71addded64548ff845d9ef3852a2c1d2592ae39f/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71addded64548ff845d9ef3852a2c1d2592ae39f/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=71addded64548ff845d9ef3852a2c1d2592ae39f", "patch": "@@ -10,7 +10,8 @@\n \n //! The ISAAC random number generator.\n \n-use rand::{seed, Rng, SeedableRng};\n+use cast;\n+use rand::{Rng, SeedableRng, OSRng};\n use iter::{Iterator, range, range_step, Repeat};\n use option::{None, Some};\n \n@@ -29,23 +30,31 @@ pub struct IsaacRng {\n     priv b: u32,\n     priv c: u32\n }\n+static EMPTY: IsaacRng = IsaacRng {\n+    cnt: 0,\n+    rsl: [0, .. RAND_SIZE],\n+    mem: [0, .. RAND_SIZE],\n+    a: 0, b: 0, c: 0\n+};\n \n impl IsaacRng {\n     /// Create an ISAAC random number generator with a random seed.\n     pub fn new() -> IsaacRng {\n-        let s = unsafe {seed::<u32>(RAND_SIZE as uint)};\n-        SeedableRng::from_seed(s.as_slice())\n+        let mut rng = EMPTY;\n+\n+        {\n+            let bytes = unsafe {cast::transmute::<&mut [u32], &mut [u8]>(rng.rsl)};\n+            OSRng::new().fill_bytes(bytes);\n+        }\n+\n+        rng.init(true);\n+        rng\n     }\n \n     /// Create an ISAAC random number generator using the default\n     /// fixed seed.\n     pub fn new_unseeded() -> IsaacRng {\n-        let mut rng = IsaacRng {\n-            cnt: 0,\n-            rsl: [0, .. RAND_SIZE],\n-            mem: [0, .. RAND_SIZE],\n-            a: 0, b: 0, c: 0\n-        };\n+        let mut rng = EMPTY;\n         rng.init(false);\n         rng\n     }\n@@ -193,15 +202,8 @@ impl<'self> SeedableRng<&'self [u32]> for IsaacRng {\n     /// constructed with a given seed will generate the same sequence\n     /// of values as all other generators constructed with that seed.\n     fn from_seed(seed: &'self [u32]) -> IsaacRng {\n-        let mut rng = IsaacRng {\n-            cnt: 0,\n-            rsl: [0, .. RAND_SIZE],\n-            mem: [0, .. RAND_SIZE],\n-            a: 0, b: 0, c: 0\n-        };\n-\n+        let mut rng = EMPTY;\n         rng.reseed(seed);\n-\n         rng\n     }\n }\n@@ -224,23 +226,30 @@ pub struct Isaac64Rng {\n     priv c: u64,\n }\n \n+static EMPTY_64: Isaac64Rng = Isaac64Rng {\n+    cnt: 0,\n+    rsl: [0, .. RAND_SIZE_64],\n+    mem: [0, .. RAND_SIZE_64],\n+    a: 0, b: 0, c: 0,\n+};\n+\n impl Isaac64Rng {\n     /// Create a 64-bit ISAAC random number generator with a random\n     /// seed.\n     pub fn new() -> Isaac64Rng {\n-        let s = unsafe {seed::<u64>(RAND_SIZE_64)};\n-        SeedableRng::from_seed(s.as_slice())\n+        let mut rng = EMPTY_64;\n+        {\n+            let bytes = unsafe {cast::transmute::<&mut [u64], &mut [u8]>(rng.rsl)};\n+            OSRng::new().fill_bytes(bytes);\n+        }\n+        rng.init(true);\n+        rng\n     }\n \n     /// Create a 64-bit ISAAC random number generator using the\n     /// default fixed seed.\n     pub fn new_unseeded() -> Isaac64Rng {\n-        let mut rng = Isaac64Rng {\n-            cnt: 0,\n-            rsl: [0, .. RAND_SIZE_64],\n-            mem: [0, .. RAND_SIZE_64],\n-            a: 0, b: 0, c: 0,\n-        };\n+        let mut rng = EMPTY_64;\n         rng.init(false);\n         rng\n     }\n@@ -388,12 +397,7 @@ impl<'self> SeedableRng<&'self [u64]> for Isaac64Rng {\n     /// constructed with a given seed will generate the same sequence\n     /// of values as all other generators constructed with that seed.\n     fn from_seed(seed: &'self [u64]) -> Isaac64Rng {\n-        let mut rng = Isaac64Rng {\n-            cnt: 0,\n-            rsl: [0, .. RAND_SIZE_64],\n-            mem: [0, .. RAND_SIZE_64],\n-            a: 0, b: 0, c: 0,\n-        };\n+        let mut rng = EMPTY_64;\n         rng.reseed(seed);\n         rng\n     }\n@@ -402,21 +406,21 @@ impl<'self> SeedableRng<&'self [u64]> for Isaac64Rng {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use rand::{Rng, SeedableRng, seed};\n+    use rand::{Rng, SeedableRng, OSRng};\n     use option::Some;\n     use iter::range;\n     use vec;\n \n     #[test]\n     fn test_rng_32_rand_seeded() {\n-        let s = unsafe {seed::<u32>(256)};\n+        let s = OSRng::new().gen_vec::<u32>(256);\n         let mut ra: IsaacRng = SeedableRng::from_seed(s.as_slice());\n         let mut rb: IsaacRng = SeedableRng::from_seed(s.as_slice());\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n     }\n     #[test]\n     fn test_rng_64_rand_seeded() {\n-        let s = unsafe {seed::<u64>(256)};\n+        let s = OSRng::new().gen_vec::<u64>(256);\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n@@ -439,7 +443,7 @@ mod test {\n \n     #[test]\n     fn test_rng_32_reseed() {\n-        let s = unsafe {seed::<u32>(256)};\n+        let s = OSRng::new().gen_vec::<u32>(256);\n         let mut r: IsaacRng = SeedableRng::from_seed(s.as_slice());\n         let string1 = r.gen_ascii_str(100);\n \n@@ -450,7 +454,7 @@ mod test {\n     }\n     #[test]\n     fn test_rng_64_reseed() {\n-        let s = unsafe {seed::<u64>(256)};\n+        let s = OSRng::new().gen_vec::<u64>(256);\n         let mut r: Isaac64Rng = SeedableRng::from_seed(s.as_slice());\n         let string1 = r.gen_ascii_str(100);\n "}, {"sha": "b07d00f2236ab160775ca5cec105d24c4dea5ba8", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71addded64548ff845d9ef3852a2c1d2592ae39f/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71addded64548ff845d9ef3852a2c1d2592ae39f/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=71addded64548ff845d9ef3852a2c1d2592ae39f", "patch": "@@ -672,20 +672,6 @@ impl XorShiftRng {\n     }\n }\n \n-/// Create a new random seed of length `n`. This should only be used\n-/// to create types for which *any* bit pattern is valid.\n-pub unsafe fn seed<T: Clone>(n: uint) -> ~[T] {\n-    use unstable::intrinsics;\n-    let mut s = vec::from_elem(n, intrinsics::init());\n-    let mut r = OSRng::new();\n-\n-    {\n-        let s_u8 = cast::transmute::<&mut [T], &mut [u8]>(s);\n-        r.fill_bytes(s_u8);\n-    }\n-    s\n-}\n-\n /// Controls how the task-local RNG is reseeded.\n enum TaskRngReseeder {\n     /// Reseed using the StdRng::new() function, i.e. reading new\n@@ -994,15 +980,15 @@ mod test {\n \n     #[test]\n     fn test_std_rng_seeded() {\n-        let s = unsafe {seed::<uint>(256)};\n+        let s = OSRng::new().gen_vec::<uint>(256);\n         let mut ra: StdRng = SeedableRng::from_seed(s.as_slice());\n         let mut rb: StdRng = SeedableRng::from_seed(s.as_slice());\n         assert_eq!(ra.gen_ascii_str(100u), rb.gen_ascii_str(100u));\n     }\n \n     #[test]\n     fn test_std_rng_reseed() {\n-        let s = unsafe {seed::<uint>(256)};\n+        let s = OSRng::new().gen_vec::<uint>(256);\n         let mut r: StdRng = SeedableRng::from_seed(s.as_slice());\n         let string1 = r.gen_ascii_str(100);\n "}]}