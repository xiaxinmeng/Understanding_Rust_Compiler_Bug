{"sha": "b8f5090a9a10e4dcc20dc64ee61a7b3749500738", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZjUwOTBhOWExMGU0ZGNjMjBkYzY0ZWU2MWE3YjM3NDk1MDA3Mzg=", "commit": {"author": {"name": "Jacob Hegna", "email": "jacobhegna@gmail.com", "date": "2014-04-27T20:49:47Z"}, "committer": {"name": "Jacob Hegna", "email": "jacobhegna@gmail.com", "date": "2014-04-27T20:49:47Z"}, "message": "Rewrote documentation for parse_bytes and to_str_bytes in {int, uint}_macros.rs", "tree": {"sha": "83f0c374b3c1116619d3993e3a6c4f9f08dd59b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f0c374b3c1116619d3993e3a6c4f9f08dd59b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8f5090a9a10e4dcc20dc64ee61a7b3749500738", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f5090a9a10e4dcc20dc64ee61a7b3749500738", "html_url": "https://github.com/rust-lang/rust/commit/b8f5090a9a10e4dcc20dc64ee61a7b3749500738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8f5090a9a10e4dcc20dc64ee61a7b3749500738/comments", "author": {"login": "jacob-hegna", "id": 2281666, "node_id": "MDQ6VXNlcjIyODE2NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2281666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacob-hegna", "html_url": "https://github.com/jacob-hegna", "followers_url": "https://api.github.com/users/jacob-hegna/followers", "following_url": "https://api.github.com/users/jacob-hegna/following{/other_user}", "gists_url": "https://api.github.com/users/jacob-hegna/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacob-hegna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacob-hegna/subscriptions", "organizations_url": "https://api.github.com/users/jacob-hegna/orgs", "repos_url": "https://api.github.com/users/jacob-hegna/repos", "events_url": "https://api.github.com/users/jacob-hegna/events{/privacy}", "received_events_url": "https://api.github.com/users/jacob-hegna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jacob-hegna", "id": 2281666, "node_id": "MDQ6VXNlcjIyODE2NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2281666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacob-hegna", "html_url": "https://github.com/jacob-hegna", "followers_url": "https://api.github.com/users/jacob-hegna/followers", "following_url": "https://api.github.com/users/jacob-hegna/following{/other_user}", "gists_url": "https://api.github.com/users/jacob-hegna/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacob-hegna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacob-hegna/subscriptions", "organizations_url": "https://api.github.com/users/jacob-hegna/orgs", "repos_url": "https://api.github.com/users/jacob-hegna/repos", "events_url": "https://api.github.com/users/jacob-hegna/events{/privacy}", "received_events_url": "https://api.github.com/users/jacob-hegna/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ffe56ce38d8680fa3c1a7cfd6f8bde609e4bc7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffe56ce38d8680fa3c1a7cfd6f8bde609e4bc7a", "html_url": "https://github.com/rust-lang/rust/commit/3ffe56ce38d8680fa3c1a7cfd6f8bde609e4bc7a"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "c6a9924e4eca296399c1195f948b4dc222c9e064", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8f5090a9a10e4dcc20dc64ee61a7b3749500738/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f5090a9a10e4dcc20dc64ee61a7b3749500738/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=b8f5090a9a10e4dcc20dc64ee61a7b3749500738", "patch": "@@ -234,16 +234,15 @@ impl Primitive for $T {}\n \n // String conversion functions and impl str -> num\n \n-/// Parse a byte slice as a number in the given base.\n+/// Parse a byte slice as a number in the given base\n ///\n /// Yields an `Option` because `buf` may or may not actually be parseable.\n ///\n /// # Examples\n ///\n-/// ```rust\n-/// let digits = [49,50,51,52,53,54,55,56,57];\n-/// let base   = 10;\n-/// let num    = std::i64::parse_bytes(digits, base);\n+/// ```\n+/// let num = std::i64::parse_bytes([49,50,51,52,53,54,55,56,57], 10);\n+/// assert!(num == Some(123456789));\n /// ```\n #[inline]\n pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<$T> {\n@@ -270,6 +269,16 @@ impl FromStrRadix for $T {\n // String conversion functions and impl num -> str\n \n /// Convert to a string as a byte slice in a given base.\n+///\n+/// Use in place of x.to_str() when you do not need to store the string permanently\n+///\n+/// # Examples\n+///\n+/// ```\n+/// std::int::to_str_bytes(123, 10, |v| {\n+///     assert!(v == \"123\".as_bytes());\n+/// });\n+/// ```\n #[inline]\n pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     // The radix can be as low as 2, so we need at least 64 characters for a"}, {"sha": "8acedb080c2c76f7cc38b30a116a44d714db90ba", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8f5090a9a10e4dcc20dc64ee61a7b3749500738/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f5090a9a10e4dcc20dc64ee61a7b3749500738/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=b8f5090a9a10e4dcc20dc64ee61a7b3749500738", "patch": "@@ -148,16 +148,15 @@ impl Int for $T {}\n \n // String conversion functions and impl str -> num\n \n-/// Parse a byte slice as a number in the given base.\n+/// Parse a byte slice as a number in the given base\n ///\n /// Yields an `Option` because `buf` may or may not actually be parseable.\n ///\n /// # Examples\n ///\n-/// ```rust\n-/// let digits = [49,50,51,52,53,54,55,56,57];\n-/// let base   = 10;\n-/// let num    = std::i64::parse_bytes(digits, base);\n+/// ```\n+/// let num = std::uint::parse_bytes([49,50,51,52,53,54,55,56,57], 10);\n+/// assert!(num == Some(123456789));\n /// ```\n #[inline]\n pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<$T> {\n@@ -184,6 +183,16 @@ impl FromStrRadix for $T {\n // String conversion functions and impl num -> str\n \n /// Convert to a string as a byte slice in a given base.\n+///\n+/// Use in place of x.to_str() when you do not need to store the string permanently\n+///\n+/// # Examples\n+///\n+/// ```\n+/// std::uint::to_str_bytes(123, 10, |v| {\n+///     assert!(v == \"123\".as_bytes());\n+/// });\n+/// ```\n #[inline]\n pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n     // The radix can be as low as 2, so we need at least 64 characters for a"}]}