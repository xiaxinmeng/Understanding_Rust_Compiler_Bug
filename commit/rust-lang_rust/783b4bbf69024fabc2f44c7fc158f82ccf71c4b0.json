{"sha": "783b4bbf69024fabc2f44c7fc158f82ccf71c4b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4M2I0YmJmNjkwMjRmYWJjMmY0NGM3ZmMxNThmODJjY2Y3MWM0YjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-29T22:45:42Z"}, "message": "rollup merge of #24886: GBGamer/master\n\nThese are useful when you want to catch the signals, like when you're making a kernel, or if you just don't want the overhead. (I don't know if there are any of the second kind of people, I don't think it's a good idea, but hey, choice is good).", "tree": {"sha": "a4137cda1ed751b1ce1127a2988d3b4383bf2682", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4137cda1ed751b1ce1127a2988d3b4383bf2682"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0", "html_url": "https://github.com/rust-lang/rust/commit/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8daf961a630178cb96d4136b897e3aef66ea854f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8daf961a630178cb96d4136b897e3aef66ea854f", "html_url": "https://github.com/rust-lang/rust/commit/8daf961a630178cb96d4136b897e3aef66ea854f"}, {"sha": "83814325b45f9f53480f633d7d36ed005f9fa823", "url": "https://api.github.com/repos/rust-lang/rust/commits/83814325b45f9f53480f633d7d36ed005f9fa823", "html_url": "https://github.com/rust-lang/rust/commit/83814325b45f9f53480f633d7d36ed005f9fa823"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "ac43055a7c4a5ff65e3110ad4b5765fb19a0756c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=783b4bbf69024fabc2f44c7fc158f82ccf71c4b0", "patch": "@@ -582,3 +582,20 @@ extern \"rust-intrinsic\" {\n     /// cast to a `u64`; if `T` has no discriminant, returns 0.\n     pub fn discriminant_value<T>(v: &T) -> u64;\n }\n+\n+#[cfg(not(stage0))]\n+extern \"rust-intrinsic\" {\n+    /// Performs an unchecked signed division, which results in undefined behavior,\n+    /// in cases where y == 0, or x == int::MIN and y == -1\n+    pub fn unchecked_sdiv<T>(x: T, y: T) -> T;\n+    /// Performs an unchecked unsigned division, which results in undefined behavior,\n+    /// in cases where y == 0\n+    pub fn unchecked_udiv<T>(x: T, y: T) -> T;\n+\n+    /// Returns the remainder of an unchecked signed division, which results in\n+    /// undefined behavior, in cases where y == 0, or x == int::MIN and y == -1\n+    pub fn unchecked_urem<T>(x: T, y: T) -> T;\n+    /// Returns the remainder of an unchecked signed division, which results in\n+    /// undefined behavior, in cases where y == 0\n+    pub fn unchecked_srem<T>(x: T, y: T) -> T;\n+}"}, {"sha": "41ef566f2fd7f8e916c7af0039a62e28d91dc9c4", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=783b4bbf69024fabc2f44c7fc158f82ccf71c4b0", "patch": "@@ -735,6 +735,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     }\n }\n \n+/// Declare any llvm intrinsics that you might need\n fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef> {\n     macro_rules! ifn {\n         ($name:expr, fn() -> $ret:expr) => ("}, {"sha": "7188fdebeecf4c170ddb47f2a67f6a4ebb3f654a", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=783b4bbf69024fabc2f44c7fc158f82ccf71c4b0", "patch": "@@ -144,6 +144,9 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n     ccx.sess().abort_if_errors();\n }\n \n+/// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,\n+/// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n+/// add them to librustc_trans/trans/context.rs\n pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                             node: ast::NodeId,\n                                             callee_ty: Ty<'tcx>,\n@@ -676,6 +679,11 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                     llargs[1],\n                                     call_debug_location),\n \n+        (_, \"unchecked_udiv\") => UDiv(bcx, llargs[0], llargs[1], call_debug_location),\n+        (_, \"unchecked_sdiv\") => SDiv(bcx, llargs[0], llargs[1], call_debug_location),\n+        (_, \"unchecked_urem\") => URem(bcx, llargs[0], llargs[1], call_debug_location),\n+        (_, \"unchecked_srem\") => SRem(bcx, llargs[0], llargs[1], call_debug_location),\n+\n         (_, \"overflowing_add\") => Add(bcx, llargs[0], llargs[1], call_debug_location),\n         (_, \"overflowing_sub\") => Sub(bcx, llargs[0], llargs[1], call_debug_location),\n         (_, \"overflowing_mul\") => Mul(bcx, llargs[0], llargs[1], call_debug_location),"}, {"sha": "cb5b569fd79cb284a4ccce936aa6cecfed8ecd32", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b4bbf69024fabc2f44c7fc158f82ccf71c4b0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=783b4bbf69024fabc2f44c7fc158f82ccf71c4b0", "patch": "@@ -4882,6 +4882,8 @@ pub fn check_bounds_are_used<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n }\n \n+/// Remember to add all intrinsics here, in librustc_trans/trans/intrinsic.rs,\n+/// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n     fn param<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, n: u32) -> Ty<'tcx> {\n         let name = token::intern(&format!(\"P{}\", n));\n@@ -5119,6 +5121,9 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                 (0, vec!(tcx.types.u64, tcx.types.u64),\n                 ty::mk_tup(tcx, vec!(tcx.types.u64, tcx.types.bool))),\n \n+            \"unchecked_udiv\" | \"unchecked_sdiv\" | \"unchecked_urem\" | \"unchecked_srem\" =>\n+                (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),\n+\n             \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" =>\n                 (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),\n "}]}