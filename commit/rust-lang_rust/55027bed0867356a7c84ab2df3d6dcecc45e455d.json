{"sha": "55027bed0867356a7c84ab2df3d6dcecc45e455d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MDI3YmVkMDg2NzM1NmE3Yzg0YWIyZGYzZDZkY2VjYzQ1ZTQ1NWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T18:46:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-07T18:46:10Z"}, "message": "Split into modules", "tree": {"sha": "d9188e801d202b76cdb8a242f693cba310bb8fe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9188e801d202b76cdb8a242f693cba310bb8fe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55027bed0867356a7c84ab2df3d6dcecc45e455d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55027bed0867356a7c84ab2df3d6dcecc45e455d", "html_url": "https://github.com/rust-lang/rust/commit/55027bed0867356a7c84ab2df3d6dcecc45e455d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55027bed0867356a7c84ab2df3d6dcecc45e455d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aef78e512bfa271e8ff411359072dc1132e2c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aef78e512bfa271e8ff411359072dc1132e2c65", "html_url": "https://github.com/rust-lang/rust/commit/0aef78e512bfa271e8ff411359072dc1132e2c65"}], "stats": {"total": 168, "additions": 85, "deletions": 83}, "files": [{"sha": "c80f782abba9ba8a36a80d7c77822435aaecca2a", "filename": "src/parser/event_parser/grammar/attributes.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/55027bed0867356a7c84ab2df3d6dcecc45e455d/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55027bed0867356a7c84ab2df3d6dcecc45e455d/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fattributes.rs?ref=55027bed0867356a7c84ab2df3d6dcecc45e455d", "patch": "@@ -0,0 +1,42 @@\n+use super::*;\n+\n+pub(super) fn inner_attributes(p: &mut Parser) {\n+    many(p, |p| attribute(p, true))\n+}\n+\n+pub(super) fn outer_attributes(_: &mut Parser) {\n+}\n+\n+\n+fn attribute(p: &mut Parser, inner: bool) -> bool {\n+    let attr_start = inner && p.lookahead(&[POUND, EXCL, L_BRACK])\n+        || !inner && p.lookahead(&[POUND, L_BRACK]);\n+    if !attr_start {\n+        return false;\n+    }\n+    node(p, ATTR, |p| {\n+        p.bump_n(if inner { 3 } else { 2 });\n+        meta_item(p) && p.expect(R_BRACK);\n+    });\n+    true\n+}\n+\n+fn meta_item(p: &mut Parser) -> bool {\n+    node_if(p, IDENT, META_ITEM, |p| {\n+        if p.eat(EQ) {\n+            if !expressions::literal(p) {\n+                p.error()\n+                    .message(\"expected literal\")\n+                    .emit();\n+            }\n+        } else if p.eat(L_PAREN) {\n+            comma_list(p, R_PAREN, meta_item_inner);\n+            p.expect(R_PAREN);\n+        }\n+    })\n+}\n+\n+fn meta_item_inner(p: &mut Parser) -> bool {\n+    meta_item(p) || expressions::literal(p)\n+}\n+"}, {"sha": "9b43bdf2acf136b2fd94ab797d0c2695a17936cb", "filename": "src/parser/event_parser/grammar/expressions.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55027bed0867356a7c84ab2df3d6dcecc45e455d/src%2Fparser%2Fevent_parser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55027bed0867356a7c84ab2df3d6dcecc45e455d/src%2Fparser%2Fevent_parser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fexpressions.rs?ref=55027bed0867356a7c84ab2df3d6dcecc45e455d", "patch": "@@ -0,0 +1,5 @@\n+use super::*;\n+\n+pub(super) fn literal(p: &mut Parser) -> bool {\n+    p.eat(INT_NUMBER) || p.eat(FLOAT_NUMBER)\n+}\n\\ No newline at end of file"}, {"sha": "b9eb1934c584d840f7c32c86560c5a8604979533", "filename": "src/parser/event_parser/grammar/items.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55027bed0867356a7c84ab2df3d6dcecc45e455d/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55027bed0867356a7c84ab2df3d6dcecc45e455d/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs?ref=55027bed0867356a7c84ab2df3d6dcecc45e455d", "patch": "@@ -0,0 +1,33 @@\n+use super::*;\n+\n+pub(super) fn item_first(p: &Parser) -> bool {\n+    match p.current() {\n+        STRUCT_KW | FN_KW => true,\n+        _ => false,\n+    }\n+}\n+\n+pub(super) fn item(p: &mut Parser) {\n+    attributes::outer_attributes(p);\n+    visibility(p);\n+    node_if(p, STRUCT_KW, STRUCT_ITEM, struct_item)\n+        || node_if(p, FN_KW, FN_ITEM, fn_item);\n+}\n+\n+fn struct_item(p: &mut Parser) {\n+    p.expect(IDENT)\n+        && p.curly_block(|p| comma_list(p, EOF, struct_field));\n+}\n+\n+fn struct_field(p: &mut Parser) -> bool {\n+    node_if(p, IDENT, STRUCT_FIELD, |p| {\n+        p.expect(COLON) && p.expect(IDENT);\n+    })\n+}\n+\n+fn fn_item(p: &mut Parser) {\n+    p.expect(IDENT) && p.expect(L_PAREN) && p.expect(R_PAREN)\n+        && p.curly_block(|p| ());\n+}\n+\n+"}, {"sha": "b67ceeb138be16f609834a0c3a02785336868616", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 5, "deletions": 83, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/55027bed0867356a7c84ab2df3d6dcecc45e455d/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55027bed0867356a7c84ab2df3d6dcecc45e455d/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=55027bed0867356a7c84ab2df3d6dcecc45e455d", "patch": "@@ -3,104 +3,26 @@ use {SyntaxKind};\n use tree::EOF;\n use syntax_kinds::*;\n \n-// Items //\n+mod items;\n+mod attributes;\n+mod expressions;\n \n pub(crate) fn file(p: &mut Parser) {\n     node(p, FILE, |p| {\n         p.optional(SHEBANG);\n-        inner_attributes(p);\n+        attributes::inner_attributes(p);\n         many(p, |p| {\n             skip_to_first(\n-                p, item_first, item,\n+                p, items::item_first, items::item,\n                 \"expected item\",\n             )\n         });\n     })\n }\n \n-fn item_first(p: &Parser) -> bool {\n-    match p.current() {\n-        STRUCT_KW | FN_KW => true,\n-        _ => false,\n-    }\n-}\n-\n-fn item(p: &mut Parser) {\n-    outer_attributes(p);\n-    visibility(p);\n-    node_if(p, STRUCT_KW, STRUCT_ITEM, struct_item)\n-        || node_if(p, FN_KW, FN_ITEM, fn_item);\n-}\n-\n-fn struct_item(p: &mut Parser) {\n-    p.expect(IDENT)\n-        && p.curly_block(|p| comma_list(p, EOF, struct_field));\n-}\n-\n-fn struct_field(p: &mut Parser) -> bool {\n-    node_if(p, IDENT, STRUCT_FIELD, |p| {\n-        p.expect(COLON) && p.expect(IDENT);\n-    })\n-}\n-\n-fn fn_item(p: &mut Parser) {\n-    p.expect(IDENT) && p.expect(L_PAREN) && p.expect(R_PAREN)\n-        && p.curly_block(|p| ());\n-}\n-\n-\n-// Paths, types, attributes, and stuff //\n-\n-fn inner_attributes(p: &mut Parser) {\n-    many(p, |p| attribute(p, true))\n-}\n-\n-fn attribute(p: &mut Parser, inner: bool) -> bool {\n-    let attr_start = inner && p.lookahead(&[POUND, EXCL, L_BRACK])\n-        || !inner && p.lookahead(&[POUND, L_BRACK]);\n-    if !attr_start {\n-        return false;\n-    }\n-    node(p, ATTR, |p| {\n-        p.bump_n(if inner { 3 } else { 2 });\n-        meta_item(p) && p.expect(R_BRACK);\n-    });\n-    true\n-}\n-\n-fn meta_item(p: &mut Parser) -> bool {\n-    node_if(p, IDENT, META_ITEM, |p| {\n-        if p.eat(EQ) {\n-            if !literal(p) {\n-                p.error()\n-                    .message(\"expected literal\")\n-                    .emit();\n-            }\n-        } else if p.eat(L_PAREN) {\n-            comma_list(p, R_PAREN, meta_item_inner);\n-            p.expect(R_PAREN);\n-        }\n-    })\n-}\n-\n-fn meta_item_inner(p: &mut Parser) -> bool {\n-    meta_item(p) || literal(p)\n-}\n-\n-fn literal(p: &mut Parser) -> bool {\n-    p.eat(INT_NUMBER) || p.eat(FLOAT_NUMBER)\n-}\n-\n-fn outer_attributes(_: &mut Parser) {\n-}\n-\n fn visibility(_: &mut Parser) {\n }\n \n-// Expressions //\n-\n-// Error recovery and high-order utils //\n-\n fn node_if<F: FnOnce(&mut Parser)>(\n     p: &mut Parser,\n     first: SyntaxKind,"}]}