{"sha": "91feb76d133952825e3eb32bed399ec6e4bd9219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZmViNzZkMTMzOTUyODI1ZTNlYjMyYmVkMzk5ZWM2ZTRiZDkyMTk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-09-08T18:03:40Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-09-09T13:14:17Z"}, "message": "Revert \"Implement Anonymous{Struct, Union} in the AST\"\n\nThis reverts commit 059b68dd677808e14e560802d235ad40beeba71e.\n\nNote that this was manually adjusted to retain some of the refactoring\nintroduced by commit 059b68dd677808e14e560802d235ad40beeba71e, so that it could\nlikewise retain the correction introduced in commit\n5b4bc05fa57be19bb5962f4b7c0f165e194e3151", "tree": {"sha": "f52085a7d7c2d52d8bd41e6006e97b89dfe1c998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f52085a7d7c2d52d8bd41e6006e97b89dfe1c998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91feb76d133952825e3eb32bed399ec6e4bd9219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91feb76d133952825e3eb32bed399ec6e4bd9219", "html_url": "https://github.com/rust-lang/rust/commit/91feb76d133952825e3eb32bed399ec6e4bd9219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91feb76d133952825e3eb32bed399ec6e4bd9219/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "html_url": "https://github.com/rust-lang/rust/commit/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5"}], "stats": {"total": 223, "additions": 14, "deletions": 209}, "files": [{"sha": "c27ab810a4c608f0e1cefc98c4881577b269f887", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -1902,10 +1902,6 @@ pub enum TyKind {\n     Never,\n     /// A tuple (`(A, B, C, D,...)`).\n     Tup(Vec<P<Ty>>),\n-    /// An anonymous struct type i.e. `struct { foo: Type }`\n-    AnonymousStruct(Vec<FieldDef>, bool),\n-    /// An anonymous union type i.e. `union { bar: Type }`\n-    AnonymousUnion(Vec<FieldDef>, bool),\n     /// A path (`module::module::...::Type`), optionally\n     /// \"qualified\", e.g., `<Vec<T> as SomeTrait>::SomeType`.\n     ///"}, {"sha": "ba86036577ac5c1f5efb12102a19b13d783159f5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -484,9 +484,6 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             visit_vec(bounds, |bound| vis.visit_param_bound(bound));\n         }\n         TyKind::MacCall(mac) => vis.visit_mac_call(mac),\n-        TyKind::AnonymousStruct(fields, ..) | TyKind::AnonymousUnion(fields, ..) => {\n-            fields.flat_map_in_place(|field| vis.flat_map_field_def(field));\n-        }\n     }\n     vis.visit_span(span);\n     visit_lazy_tts(tokens, vis);"}, {"sha": "b38031042e0f09ed1265acf60725eca661dc84f5", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -407,9 +407,6 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n         TyKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n-        TyKind::AnonymousStruct(ref fields, ..) | TyKind::AnonymousUnion(ref fields, ..) => {\n-            walk_list!(visitor, visit_field_def, fields)\n-        }\n         TyKind::Never | TyKind::CVarArgs => {}\n     }\n }"}, {"sha": "a77e3e1997fd67555b0eef0e892e00df8cc5d9e8", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -748,10 +748,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    pub(super) fn lower_field_def(\n-        &mut self,\n-        (index, f): (usize, &FieldDef),\n-    ) -> hir::FieldDef<'hir> {\n+    fn lower_field_def(&mut self, (index, f): (usize, &FieldDef)) -> hir::FieldDef<'hir> {\n         let ty = if let TyKind::Path(ref qself, ref path) = f.ty.kind {\n             let t = self.lower_path_ty(\n                 &f.ty,"}, {"sha": "6a387d62c90c46a3341621e0251d03713c99f0f0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -1289,15 +1289,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n-            // FIXME(unnamed_fields): IMPLEMENTATION IN PROGRESS\n-            TyKind::AnonymousStruct(ref _fields, _recovered) => {\n-                self.sess.struct_span_err(t.span, \"anonymous structs are unimplemented\").emit();\n-                hir::TyKind::Err\n-            }\n-            TyKind::AnonymousUnion(ref _fields, _recovered) => {\n-                self.sess.struct_span_err(t.span, \"anonymous unions are unimplemented\").emit();\n-                hir::TyKind::Err\n-            }\n             TyKind::Slice(ref ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(ref mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {"}, {"sha": "30bc4edd7e69c0aa0fbd2d966c5a8f88598d39cc", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -668,7 +668,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         // involved, so we only emit errors where there are no other parsing errors.\n         gate_all!(destructuring_assignment, \"destructuring assignments are unstable\");\n     }\n-    gate_all!(unnamed_fields, \"unnamed fields are not yet fully implemented\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "c24882086e12d16d1b808e6f4270adebd4820658", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -985,14 +985,6 @@ impl<'a> State<'a> {\n                 }\n                 self.pclose();\n             }\n-            ast::TyKind::AnonymousStruct(ref fields, ..) => {\n-                self.s.word(\"struct\");\n-                self.print_record_struct_body(fields, ty.span);\n-            }\n-            ast::TyKind::AnonymousUnion(ref fields, ..) => {\n-                self.s.word(\"union\");\n-                self.print_record_struct_body(fields, ty.span);\n-            }\n             ast::TyKind::Paren(ref typ) => {\n                 self.popen();\n                 self.print_type(typ);"}, {"sha": "d409746584274652a0c752e8ee69eb8067b55d76", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -639,9 +639,6 @@ declare_features! (\n     /// Allows specifying the as-needed link modifier\n     (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n \n-    /// Allows unnamed fields of struct and union type\n-    (incomplete, unnamed_fields, \"1.53.0\", Some(49804), None),\n-\n     /// Allows qualified paths in struct expressions, struct patterns and tuple struct patterns.\n     (active, more_qualified_paths, \"1.54.0\", Some(86935), None),\n "}, {"sha": "29e20f2747f1bdf43b63a14beb5106c89ab027b0", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -1234,7 +1234,7 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Union(vdata, generics)))\n     }\n \n-    pub(super) fn parse_record_struct_body(\n+    fn parse_record_struct_body(\n         &mut self,\n         adt_ty: &str,\n     ) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n@@ -1468,28 +1468,19 @@ impl<'a> Parser<'a> {\n     fn parse_field_ident(&mut self, adt_ty: &str, lo: Span) -> PResult<'a, Ident> {\n         let (ident, is_raw) = self.ident_or_err()?;\n         if !is_raw && ident.is_reserved() {\n-            if ident.name == kw::Underscore {\n-                self.sess.gated_spans.gate(sym::unnamed_fields, lo);\n+            let err = if self.check_fn_front_matter(false) {\n+                let _ = self.parse_fn(&mut Vec::new(), |_| true, lo);\n+                let mut err = self.struct_span_err(\n+                    lo.to(self.prev_token.span),\n+                    &format!(\"functions are not allowed in {} definitions\", adt_ty),\n+                );\n+                err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n+                err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n+                err\n             } else {\n-                let err = if self.check_fn_front_matter(false) {\n-                    // We use `parse_fn` to get a span for the function\n-                    if let Err(mut db) = self.parse_fn(&mut Vec::new(), |_| true, lo) {\n-                        db.delay_as_bug();\n-                    }\n-                    let mut err = self.struct_span_err(\n-                        lo.to(self.prev_token.span),\n-                        &format!(\"functions are not allowed in {} definitions\", adt_ty),\n-                    );\n-                    err.help(\n-                        \"unlike in C++, Java, and C#, functions are declared in `impl` blocks\",\n-                    );\n-                    err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n-                    err\n-                } else {\n-                    self.expected_ident_found()\n-                };\n-                return Err(err);\n-            }\n+                self.expected_ident_found()\n+            };\n+            return Err(err);\n         }\n         self.bump();\n         Ok(ident)"}, {"sha": "98400372c36a6576e9c90b8350f2d430d52a6a20", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -226,19 +226,6 @@ impl<'a> Parser<'a> {\n             }\n         } else if self.eat_keyword(kw::Impl) {\n             self.parse_impl_ty(&mut impl_dyn_multi)?\n-        } else if self.token.is_keyword(kw::Union)\n-            && self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace))\n-        {\n-            self.bump();\n-            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n-            let span = lo.to(self.prev_token.span);\n-            self.sess.gated_spans.gate(sym::unnamed_fields, span);\n-            TyKind::AnonymousUnion(fields, recovered)\n-        } else if self.eat_keyword(kw::Struct) {\n-            let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n-            let span = lo.to(self.prev_token.span);\n-            self.sess.gated_spans.gate(sym::unnamed_fields, span);\n-            TyKind::AnonymousStruct(fields, recovered)\n         } else if self.is_explicit_dyn_type() {\n             self.parse_dyn_ty(&mut impl_dyn_multi)?\n         } else if self.eat_lt() {"}, {"sha": "675c5108720bb9e57f818c6d83eba91f7f885970", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91feb76d133952825e3eb32bed399ec6e4bd9219/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=91feb76d133952825e3eb32bed399ec6e4bd9219", "patch": "@@ -1358,7 +1358,6 @@ symbols! {\n         unix,\n         unlikely,\n         unmarked_api,\n-        unnamed_fields,\n         unpin,\n         unreachable,\n         unreachable_code,"}, {"sha": "bd815dbcc92424274e1cff1f4a7438247549a909", "filename": "src/test/ui/feature-gates/feature-gate-unnamed_fields.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs?ref=b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "patch": "@@ -1,27 +0,0 @@\n-struct Foo {\n-    foo: u8,\n-    _: union { //~ ERROR unnamed fields are not yet fully implemented [E0658]\n-    //~^ ERROR unnamed fields are not yet fully implemented [E0658]\n-    //~| ERROR anonymous unions are unimplemented\n-        bar: u8,\n-        baz: u16\n-    }\n-}\n-\n-union Bar {\n-    foobar: u8,\n-    _: struct { //~ ERROR unnamed fields are not yet fully implemented [E0658]\n-    //~^ ERROR unnamed fields are not yet fully implemented [E0658]\n-    //~| ERROR anonymous structs are unimplemented\n-    //~| ERROR unions may not contain fields that need dropping [E0740]\n-        foobaz: u8,\n-        barbaz: u16\n-    }\n-}\n-\n-struct S;\n-struct Baz {\n-    _: S //~ ERROR unnamed fields are not yet fully implemented [E0658]\n-}\n-\n-fn main(){}"}, {"sha": "4f3ab85c987926247d167c1540fd64f883803586", "filename": "src/test/ui/feature-gates/feature-gate-unnamed_fields.stderr", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr?ref=b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "patch": "@@ -1,111 +0,0 @@\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:3:5\n-   |\n-LL |     _: union {\n-   |     ^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:3:8\n-   |\n-LL |       _: union {\n-   |  ________^\n-LL | |\n-LL | |\n-LL | |         bar: u8,\n-LL | |         baz: u16\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n-   |\n-LL |     _: struct {\n-   |     ^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:8\n-   |\n-LL |       _: struct {\n-   |  ________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         foobaz: u8,\n-LL | |         barbaz: u16\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:24:5\n-   |\n-LL |     _: S\n-   |     ^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error: anonymous unions are unimplemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:3:8\n-   |\n-LL |       _: union {\n-   |  ________^\n-LL | |\n-LL | |\n-LL | |         bar: u8,\n-LL | |         baz: u16\n-LL | |     }\n-   | |_____^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:8\n-   |\n-LL |       _: struct {\n-   |  ________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         foobaz: u8,\n-LL | |         barbaz: u16\n-LL | |     }\n-   | |_____^\n-\n-error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n-   |\n-LL | /     _: struct {\n-LL | |\n-LL | |\n-LL | |\n-LL | |         foobaz: u8,\n-LL | |         barbaz: u16\n-LL | |     }\n-   | |_____^\n-   |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n-   |\n-LL | /     _: struct {\n-LL | |\n-LL | |\n-LL | |\n-LL | |         foobaz: u8,\n-LL | |         barbaz: u16\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 8 previous errors\n-\n-Some errors have detailed explanations: E0658, E0740.\n-For more information about an error, try `rustc --explain E0658`."}]}