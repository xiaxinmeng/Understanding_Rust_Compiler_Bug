{"sha": "ece4f472c923d72faf50efaaba60a8f51c143bec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZTRmNDcyYzkyM2Q3MmZhZjUwZWZhYWJhNjBhOGY1MWMxNDNiZWM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-08T10:37:27Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-08T11:54:20Z"}, "message": "For diagnostics, set spans of drops of temps to be that of the statement's terminating semicolon.", "tree": {"sha": "e2131fb42fa9b2697dac563e948a8d512e521522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2131fb42fa9b2697dac563e948a8d512e521522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece4f472c923d72faf50efaaba60a8f51c143bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece4f472c923d72faf50efaaba60a8f51c143bec", "html_url": "https://github.com/rust-lang/rust/commit/ece4f472c923d72faf50efaaba60a8f51c143bec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece4f472c923d72faf50efaaba60a8f51c143bec/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d834550d54e4c5211f03f877c1756425f24be98", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d834550d54e4c5211f03f877c1756425f24be98", "html_url": "https://github.com/rust-lang/rust/commit/1d834550d54e4c5211f03f877c1756425f24be98"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "83e132054a9ab6bf228f11492bb1500876afdc4f", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=ece4f472c923d72faf50efaaba60a8f51c143bec", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         let source_info = this.source_info(span);\n         for stmt in stmts {\n-            let Stmt { kind, opt_destruction_scope } = this.hir.mirror(stmt);\n+            let Stmt { kind, opt_destruction_scope, span: stmt_span } = this.hir.mirror(stmt);\n             match kind {\n                 StmtKind::Expr { scope, expr } => {\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result: true });\n@@ -99,7 +99,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             let si = (scope, source_info);\n                             this.in_scope(si, LintLevel::Inherited, block, |this| {\n                                 let expr = this.hir.mirror(expr);\n-                                this.stmt_expr(block, expr)\n+                                this.stmt_expr(block, expr, Some(stmt_span))\n                             })\n                         }));\n                 }"}, {"sha": "18ce7ae4907085b1d4eb1cd37db59710951dd4a4", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=ece4f472c923d72faf50efaaba60a8f51c143bec", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 block.and(Rvalue::Aggregate(adt, fields))\n             }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n-                block = unpack!(this.stmt_expr(block, expr));\n+                block = unpack!(this.stmt_expr(block, expr, None));\n                 block.and(this.unit_rvalue())\n             }\n             ExprKind::Yield { value } => {"}, {"sha": "8eb46a0483917c69551c03351cf2c5ee6c0d10f1", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=ece4f472c923d72faf50efaaba60a8f51c143bec", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Break { .. }\n             | ExprKind::InlineAsm { .. }\n             | ExprKind::Return { .. } => {\n-                unpack!(block = this.stmt_expr(block, expr));\n+                unpack!(block = this.stmt_expr(block, expr, None));\n                 this.cfg.push_assign_unit(block, source_info, destination);\n                 block.unit()\n             }"}, {"sha": "3b9fb7237b0c74af069537c45ebe5a11e5dbe908", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=ece4f472c923d72faf50efaaba60a8f51c143bec", "patch": "@@ -14,7 +14,18 @@ use hair::*;\n use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n-    pub fn stmt_expr(&mut self, mut block: BasicBlock, expr: Expr<'tcx>) -> BlockAnd<()> {\n+    /// Builds a block of MIR statements to evaluate the HAIR `expr`.\n+    /// If the original expression was an AST statement,\n+    /// (e.g. `some().code(&here());`) then `opt_stmt_span` is the\n+    /// span of that statement (including its semicolon, if any).\n+    /// Diagnostics use this span (which may be larger than that of\n+    /// `expr`) to identify when statement temporaries are dropped.\n+    pub fn stmt_expr(&mut self,\n+                     mut block: BasicBlock,\n+                     expr: Expr<'tcx>,\n+                     opt_stmt_span: Option<StatementSpan>)\n+                     -> BlockAnd<()>\n+    {\n         let this = self;\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr.span);\n@@ -29,7 +40,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             } => {\n                 let value = this.hir.mirror(value);\n                 this.in_scope((region_scope, source_info), lint_level, block, |this| {\n-                    this.stmt_expr(block, value)\n+                    this.stmt_expr(block, value, opt_stmt_span)\n                 })\n             }\n             ExprKind::Assign { lhs, rhs } => {\n@@ -192,7 +203,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let expr_ty = expr.ty;\n                 let temp = this.temp(expr.ty.clone(), expr_span);\n                 unpack!(block = this.into(&temp, block, expr));\n-                unpack!(block = this.build_drop(block, expr_span, temp, expr_ty));\n+\n+                // Attribute drops of the statement's temps to the\n+                // semicolon at the statement's end.\n+                let drop_point = this.hir.tcx().sess.source_map().end_point(match opt_stmt_span {\n+                    None => expr_span,\n+                    Some(StatementSpan(span)) => span,\n+                });\n+\n+                unpack!(block = this.build_drop(block, drop_point, temp, expr_ty));\n                 block.unit()\n             }\n         }"}, {"sha": "d56ddcb494406ba666beb0f0c6d7e91539675a68", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=ece4f472c923d72faf50efaaba60a8f51c143bec", "patch": "@@ -57,6 +57,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     for (index, stmt) in stmts.iter().enumerate() {\n         let hir_id = cx.tcx.hir.node_to_hir_id(stmt.node.id());\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n+        let stmt_span = StatementSpan(cx.tcx.hir.span(stmt.node.id()));\n         match stmt.node {\n             hir::StmtKind::Expr(ref expr, _) |\n             hir::StmtKind::Semi(ref expr, _) => {\n@@ -69,6 +70,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         expr: expr.to_ref(),\n                     },\n                     opt_destruction_scope: opt_dxn_ext,\n+                    span: stmt_span,\n                 })))\n             }\n             hir::StmtKind::Decl(ref decl, _) => {\n@@ -111,6 +113,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 lint_level: cx.lint_level_of(local.id),\n                             },\n                             opt_destruction_scope: opt_dxn_ext,\n+                            span: stmt_span,\n                         })));\n                     }\n                 }"}, {"sha": "fd1ddcc1cc6cabaab0d967e8e192273dc4ee7503", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece4f472c923d72faf50efaaba60a8f51c143bec/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=ece4f472c923d72faf50efaaba60a8f51c143bec", "patch": "@@ -71,10 +71,14 @@ pub enum StmtRef<'tcx> {\n     Mirror(Box<Stmt<'tcx>>),\n }\n \n+#[derive(Clone, Debug)]\n+pub struct StatementSpan(pub Span);\n+\n #[derive(Clone, Debug)]\n pub struct Stmt<'tcx> {\n     pub kind: StmtKind<'tcx>,\n     pub opt_destruction_scope: Option<region::Scope>,\n+    pub span: StatementSpan,\n }\n \n #[derive(Clone, Debug)]"}]}