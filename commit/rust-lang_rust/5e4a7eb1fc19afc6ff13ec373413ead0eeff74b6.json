{"sha": "5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNGE3ZWIxZmMxOWFmYzZmZjEzZWMzNzM0MTNlYWQwZWVmZjc0YjY=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-14T06:26:47Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-14T06:26:47Z"}, "message": "UI test cleanup: Extract manual_memcpy tests", "tree": {"sha": "e4b08e3eaad741f61e7bcc8277bcd8817ad335cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b08e3eaad741f61e7bcc8277bcd8817ad335cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlyJ9FwACgkQtvoGpuDi\nZlunnw//TNAFz/WX1eKNXNBIuUuAxI8JDKPZcfc6gVK4imlHxeWANoIn/UJkwOwK\nLA1eaezS4Y19y26d+2F2I9Z8e07mOI2FdjgcYA0p8PMrcuv3R+WKsdQTgXslKMmi\nxfycYG2m0Jqc18SvjeDp5XABJVlYX8EpaWMTA3ZSaFowz0kMacUz9GPpWuYi6OiV\nzWxvTWmRsLM3AYLeRPNjpj2LlMsw2T8H6fVZHE597E6kermsVaDkUuAkJlk71WVk\nwelNsZasjajTA4ntgwFuRYn4Yig7IqKGu8lJdsQP+2GwrCw8+TwnzZDwRsjYHLNm\nYmHr4v62l7WHdkS3fKZn7ssChv8QFTiY8WbYVCd0wo2f5mO8Ya83q5OmqZy1h3he\nD58ju8JEdQ92KeOUUge8QCJstAD0xTI9xLYYnwvu8ePqFIeIGljCvMaz89SFT86b\nXJD8cXyZvpibBmtCSn2GaL2+wrd213V8kEdLJXwe4rHmey3X/85CPVHO4IgCWb1R\nZ8WcgRtm9FM9Gco/ffvm/pkAlXrgVNK8ocup6mEXLjzrrzrSxvhToCYYGn0UgFq2\nGv88WioTI5gliKY708NfL8hKwywkac3p9zNDn+bBUO0h0HpkR5Oz1dpHsli+P8rB\nYG1tsJtOBGRAJM17m1VF1RPt/EvTTOA9JHQSc+BNzevjWVWDHmw=\n=Nyl8\n-----END PGP SIGNATURE-----", "payload": "tree e4b08e3eaad741f61e7bcc8277bcd8817ad335cb\nparent 99fdf2607e600f31d202092a48202bccaff6f04b\nauthor Philipp Hansch <dev@phansch.net> 1552544807 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1552544807 +0100\n\nUI test cleanup: Extract manual_memcpy tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6", "html_url": "https://github.com/rust-lang/rust/commit/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fdf2607e600f31d202092a48202bccaff6f04b", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fdf2607e600f31d202092a48202bccaff6f04b", "html_url": "https://github.com/rust-lang/rust/commit/99fdf2607e600f31d202092a48202bccaff6f04b"}], "stats": {"total": 368, "additions": 186, "deletions": 182}, "files": [{"sha": "41ac824e869dd25f4e139d2b5d6b2c4a69d06691", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6", "patch": "@@ -355,114 +355,6 @@ fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n     i\n }\n \n-const LOOP_OFFSET: usize = 5000;\n-\n-#[warn(clippy::needless_range_loop)]\n-pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n-    // plain manual memcpy\n-    for i in 0..src.len() {\n-        dst[i] = src[i];\n-    }\n-\n-    // dst offset memcpy\n-    for i in 0..src.len() {\n-        dst[i + 10] = src[i];\n-    }\n-\n-    // src offset memcpy\n-    for i in 0..src.len() {\n-        dst[i] = src[i + 10];\n-    }\n-\n-    // src offset memcpy\n-    for i in 11..src.len() {\n-        dst[i] = src[i - 10];\n-    }\n-\n-    // overwrite entire dst\n-    for i in 0..dst.len() {\n-        dst[i] = src[i];\n-    }\n-\n-    // manual copy with branch - can't easily convert to memcpy!\n-    for i in 0..src.len() {\n-        dst[i] = src[i];\n-        if dst[i] > 5 {\n-            break;\n-        }\n-    }\n-\n-    // multiple copies - suggest two memcpy statements\n-    for i in 10..256 {\n-        dst[i] = src[i - 5];\n-        dst2[i + 500] = src[i]\n-    }\n-\n-    // this is a reversal - the copy lint shouldn't be triggered\n-    for i in 10..LOOP_OFFSET {\n-        dst[i + LOOP_OFFSET] = src[LOOP_OFFSET - i];\n-    }\n-\n-    let some_var = 5;\n-    // Offset in variable\n-    for i in 10..LOOP_OFFSET {\n-        dst[i + LOOP_OFFSET] = src[i - some_var];\n-    }\n-\n-    // Non continuous copy - don't trigger lint\n-    for i in 0..10 {\n-        dst[i + i] = src[i];\n-    }\n-\n-    let src_vec = vec![1, 2, 3, 4, 5];\n-    let mut dst_vec = vec![0, 0, 0, 0, 0];\n-\n-    // make sure vectors are supported\n-    for i in 0..src_vec.len() {\n-        dst_vec[i] = src_vec[i];\n-    }\n-\n-    // lint should not trigger when either\n-    // source or destination type is not\n-    // slice-like, like DummyStruct\n-    struct DummyStruct(i32);\n-\n-    impl ::std::ops::Index<usize> for DummyStruct {\n-        type Output = i32;\n-\n-        fn index(&self, _: usize) -> &i32 {\n-            &self.0\n-        }\n-    }\n-\n-    let src = DummyStruct(5);\n-    let mut dst_vec = vec![0; 10];\n-\n-    for i in 0..10 {\n-        dst_vec[i] = src[i];\n-    }\n-\n-    // Simplify suggestion (issue #3004)\n-    let src = [0, 1, 2, 3, 4];\n-    let mut dst = [0, 0, 0, 0, 0, 0];\n-    let from = 1;\n-\n-    for i in from..from + src.len() {\n-        dst[i] = src[i - from];\n-    }\n-\n-    for i in from..from + 3 {\n-        dst[i] = src[i - from];\n-    }\n-}\n-\n-#[warn(clippy::needless_range_loop)]\n-pub fn manual_clone(src: &[String], dst: &mut [String]) {\n-    for i in 0..src.len() {\n-        dst[i] = src[i].clone();\n-    }\n-}\n-\n #[warn(clippy::needless_range_loop)]\n pub fn manual_copy_same_destination(dst: &mut [i32], d: usize, s: usize) {\n     // Same source and destination - don't trigger lint"}, {"sha": "e8964c26796e95301b556bec78daa602de3bc0a0", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 1, "deletions": 74, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6", "patch": "@@ -292,78 +292,5 @@ LL |     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n    |\n    = note: `-D clippy::unused-collect` implied by `-D warnings`\n \n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:363:14\n-   |\n-LL |     for i in 0..src.len() {\n-   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n-   |\n-   = note: `-D clippy::manual-memcpy` implied by `-D warnings`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:368:14\n-   |\n-LL |     for i in 0..src.len() {\n-   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[10..(src.len() + 10)].clone_from_slice(&src[..])`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:373:14\n-   |\n-LL |     for i in 0..src.len() {\n-   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[10..])`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:378:14\n-   |\n-LL |     for i in 11..src.len() {\n-   |              ^^^^^^^^^^^^^ help: try replacing the loop by: `dst[11..src.len()].clone_from_slice(&src[(11 - 10)..(src.len() - 10)])`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:383:14\n-   |\n-LL |     for i in 0..dst.len() {\n-   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst.clone_from_slice(&src[..dst.len()])`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:396:14\n-   |\n-LL |     for i in 10..256 {\n-   |              ^^^^^^^\n-help: try replacing the loop by\n-   |\n-LL |     for i in dst[10..256].clone_from_slice(&src[(10 - 5)..(256 - 5)])\n-LL |     dst2[(10 + 500)..(256 + 500)].clone_from_slice(&src[10..256]) {\n-   |\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:408:14\n-   |\n-LL |     for i in 10..LOOP_OFFSET {\n-   |              ^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[(10 + LOOP_OFFSET)..(LOOP_OFFSET + LOOP_OFFSET)].clone_from_slice(&src[(10 - some_var)..(LOOP_OFFSET - some_var)])`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:421:14\n-   |\n-LL |     for i in 0..src_vec.len() {\n-   |              ^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst_vec[..src_vec.len()].clone_from_slice(&src_vec[..])`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:450:14\n-   |\n-LL |     for i in from..from + src.len() {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + src.len()].clone_from_slice(&src[0..(from + src.len() - from)])`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:454:14\n-   |\n-LL |     for i in from..from + 3 {\n-   |              ^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + 3].clone_from_slice(&src[0..(from + 3 - from)])`\n-\n-error: it looks like you're manually copying between slices\n-  --> $DIR/for_loop.rs:461:14\n-   |\n-LL |     for i in 0..src.len() {\n-   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n-\n-error: aborting due to 46 previous errors\n+error: aborting due to 35 previous errors\n "}, {"sha": "aa347288875d5cc5f89058de21964be3230e3f55", "filename": "tests/ui/manual_memcpy.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/tests%2Fui%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/tests%2Fui%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_memcpy.rs?ref=5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6", "patch": "@@ -0,0 +1,110 @@\n+#![warn(clippy::needless_range_loop, clippy::manual_memcpy)]\n+\n+const LOOP_OFFSET: usize = 5000;\n+\n+pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n+    // plain manual memcpy\n+    for i in 0..src.len() {\n+        dst[i] = src[i];\n+    }\n+\n+    // dst offset memcpy\n+    for i in 0..src.len() {\n+        dst[i + 10] = src[i];\n+    }\n+\n+    // src offset memcpy\n+    for i in 0..src.len() {\n+        dst[i] = src[i + 10];\n+    }\n+\n+    // src offset memcpy\n+    for i in 11..src.len() {\n+        dst[i] = src[i - 10];\n+    }\n+\n+    // overwrite entire dst\n+    for i in 0..dst.len() {\n+        dst[i] = src[i];\n+    }\n+\n+    // manual copy with branch - can't easily convert to memcpy!\n+    for i in 0..src.len() {\n+        dst[i] = src[i];\n+        if dst[i] > 5 {\n+            break;\n+        }\n+    }\n+\n+    // multiple copies - suggest two memcpy statements\n+    for i in 10..256 {\n+        dst[i] = src[i - 5];\n+        dst2[i + 500] = src[i]\n+    }\n+\n+    // this is a reversal - the copy lint shouldn't be triggered\n+    for i in 10..LOOP_OFFSET {\n+        dst[i + LOOP_OFFSET] = src[LOOP_OFFSET - i];\n+    }\n+\n+    let some_var = 5;\n+    // Offset in variable\n+    for i in 10..LOOP_OFFSET {\n+        dst[i + LOOP_OFFSET] = src[i - some_var];\n+    }\n+\n+    // Non continuous copy - don't trigger lint\n+    for i in 0..10 {\n+        dst[i + i] = src[i];\n+    }\n+\n+    let src_vec = vec![1, 2, 3, 4, 5];\n+    let mut dst_vec = vec![0, 0, 0, 0, 0];\n+\n+    // make sure vectors are supported\n+    for i in 0..src_vec.len() {\n+        dst_vec[i] = src_vec[i];\n+    }\n+\n+    // lint should not trigger when either\n+    // source or destination type is not\n+    // slice-like, like DummyStruct\n+    struct DummyStruct(i32);\n+\n+    impl ::std::ops::Index<usize> for DummyStruct {\n+        type Output = i32;\n+\n+        fn index(&self, _: usize) -> &i32 {\n+            &self.0\n+        }\n+    }\n+\n+    let src = DummyStruct(5);\n+    let mut dst_vec = vec![0; 10];\n+\n+    for i in 0..10 {\n+        dst_vec[i] = src[i];\n+    }\n+\n+    // Simplify suggestion (issue #3004)\n+    let src = [0, 1, 2, 3, 4];\n+    let mut dst = [0, 0, 0, 0, 0, 0];\n+    let from = 1;\n+\n+    for i in from..from + src.len() {\n+        dst[i] = src[i - from];\n+    }\n+\n+    for i in from..from + 3 {\n+        dst[i] = src[i - from];\n+    }\n+}\n+\n+#[warn(clippy::needless_range_loop, clippy::manual_memcpy)]\n+pub fn manual_clone(src: &[String], dst: &mut [String]) {\n+    for i in 0..src.len() {\n+        dst[i] = src[i].clone();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "49ab83f2dd2a8e8abac24deaf907cf4308c35fac", "filename": "tests/ui/manual_memcpy.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/tests%2Fui%2Fmanual_memcpy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6/tests%2Fui%2Fmanual_memcpy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_memcpy.stderr?ref=5e4a7eb1fc19afc6ff13ec373413ead0eeff74b6", "patch": "@@ -0,0 +1,75 @@\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:7:14\n+   |\n+LL |     for i in 0..src.len() {\n+   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n+   |\n+   = note: `-D clippy::manual-memcpy` implied by `-D warnings`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:12:14\n+   |\n+LL |     for i in 0..src.len() {\n+   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[10..(src.len() + 10)].clone_from_slice(&src[..])`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:17:14\n+   |\n+LL |     for i in 0..src.len() {\n+   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[10..])`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:22:14\n+   |\n+LL |     for i in 11..src.len() {\n+   |              ^^^^^^^^^^^^^ help: try replacing the loop by: `dst[11..src.len()].clone_from_slice(&src[(11 - 10)..(src.len() - 10)])`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:27:14\n+   |\n+LL |     for i in 0..dst.len() {\n+   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst.clone_from_slice(&src[..dst.len()])`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:40:14\n+   |\n+LL |     for i in 10..256 {\n+   |              ^^^^^^^\n+help: try replacing the loop by\n+   |\n+LL |     for i in dst[10..256].clone_from_slice(&src[(10 - 5)..(256 - 5)])\n+LL |     dst2[(10 + 500)..(256 + 500)].clone_from_slice(&src[10..256]) {\n+   |\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:52:14\n+   |\n+LL |     for i in 10..LOOP_OFFSET {\n+   |              ^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[(10 + LOOP_OFFSET)..(LOOP_OFFSET + LOOP_OFFSET)].clone_from_slice(&src[(10 - some_var)..(LOOP_OFFSET - some_var)])`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:65:14\n+   |\n+LL |     for i in 0..src_vec.len() {\n+   |              ^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst_vec[..src_vec.len()].clone_from_slice(&src_vec[..])`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:94:14\n+   |\n+LL |     for i in from..from + src.len() {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + src.len()].clone_from_slice(&src[0..(from + src.len() - from)])`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:98:14\n+   |\n+LL |     for i in from..from + 3 {\n+   |              ^^^^^^^^^^^^^^ help: try replacing the loop by: `dst[from..from + 3].clone_from_slice(&src[0..(from + 3 - from)])`\n+\n+error: it looks like you're manually copying between slices\n+  --> $DIR/manual_memcpy.rs:105:14\n+   |\n+LL |     for i in 0..src.len() {\n+   |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n+\n+error: aborting due to 11 previous errors\n+"}]}