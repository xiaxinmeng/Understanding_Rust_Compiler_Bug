{"sha": "e9e92d53ade5767e533338bc6b2aaa70083c30ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTkyZDUzYWRlNTc2N2U1MzMzMzhiYzZiMmFhYTcwMDgzYzMwZWM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-06T06:49:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-06T06:49:01Z"}, "message": "Rollup merge of #56548 - Lucretiel:string-extend-optimize, r=sfackler\n\nOptimized string FromIterator + Extend impls\n\nI noticed that there was a lost opportunity to reuse string buffers in `FromIterator<String>` and `FromIterator<Cow<str>>`; updated the implementations to use these. In practice this translates to at least one fewer allocation when using these APIs.\n\nAdditionally, rewrote `Extend` implementations to use `iter.for_each`, which (supposedly) helps the compiler optimize those loops (because iterator adapters are encouraged to provide optimized implementations of `fold` and `try_fold`.", "tree": {"sha": "abf1fdf1e56c1f55d60c880e5c046d67299fdf84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abf1fdf1e56c1f55d60c880e5c046d67299fdf84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e92d53ade5767e533338bc6b2aaa70083c30ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCMZdCRBK7hj4Ov3rIwAAdHIIABWwCHzjjQbqdlzvHJySiqLb\n0K9qf8zKf5tN1yjtcPz+0yVQqJvP0e4TQ2KsSKJ7L7nOCXGjvZcqEcM9l3w1kLpM\nclZi+n9fckzESBTn/r64n6gnmhnDnO/UgmTHdIark5emvauWLtjaIZ29RY9fNWiq\nYk4nNjKyy8sJ6He+fjk90npsj0oZYR8mH6iawBE6JNXoymWoJvX32PR/qbGLuN9y\nFoMkvopOjql9For8uO0UFrOnLy30DZNso07ocvZ+NfryEonldUXog65fk/vNAOMX\npbEz6y6IfUTHav+XZUPDiJMBWHNFBy1c4cswXc/ukXHZMOLH4k7TEg/FIYejqf4=\n=rnO3\n-----END PGP SIGNATURE-----\n", "payload": "tree abf1fdf1e56c1f55d60c880e5c046d67299fdf84\nparent 9e7ff567501f48b62a4ee6b441ae4b3d3afcb38e\nparent 811a2bfe5332081d7145de6c488ea7f6c5cf42a5\nauthor Pietro Albini <pietro@pietroalbini.org> 1544078941 +0100\ncommitter GitHub <noreply@github.com> 1544078941 +0100\n\nRollup merge of #56548 - Lucretiel:string-extend-optimize, r=sfackler\n\nOptimized string FromIterator + Extend impls\n\nI noticed that there was a lost opportunity to reuse string buffers in `FromIterator<String>` and `FromIterator<Cow<str>>`; updated the implementations to use these. In practice this translates to at least one fewer allocation when using these APIs.\n\nAdditionally, rewrote `Extend` implementations to use `iter.for_each`, which (supposedly) helps the compiler optimize those loops (because iterator adapters are encouraged to provide optimized implementations of `fold` and `try_fold`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e92d53ade5767e533338bc6b2aaa70083c30ec", "html_url": "https://github.com/rust-lang/rust/commit/e9e92d53ade5767e533338bc6b2aaa70083c30ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e92d53ade5767e533338bc6b2aaa70083c30ec/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e7ff567501f48b62a4ee6b441ae4b3d3afcb38e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7ff567501f48b62a4ee6b441ae4b3d3afcb38e", "html_url": "https://github.com/rust-lang/rust/commit/9e7ff567501f48b62a4ee6b441ae4b3d3afcb38e"}, {"sha": "811a2bfe5332081d7145de6c488ea7f6c5cf42a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/811a2bfe5332081d7145de6c488ea7f6c5cf42a5", "html_url": "https://github.com/rust-lang/rust/commit/811a2bfe5332081d7145de6c488ea7f6c5cf42a5"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "006c602649b74675af53e13a407db736bcb0128c", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e9e92d53ade5767e533338bc6b2aaa70083c30ec/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e92d53ade5767e533338bc6b2aaa70083c30ec/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=e9e92d53ade5767e533338bc6b2aaa70083c30ec", "patch": "@@ -1732,18 +1732,37 @@ impl<'a> FromIterator<&'a str> for String {\n #[stable(feature = \"extend_string\", since = \"1.4.0\")]\n impl FromIterator<String> for String {\n     fn from_iter<I: IntoIterator<Item = String>>(iter: I) -> String {\n-        let mut buf = String::new();\n-        buf.extend(iter);\n-        buf\n+        let mut iterator = iter.into_iter();\n+\n+        // Because we're iterating over `String`s, we can avoid at least\n+        // one allocation by getting the first string from the iterator\n+        // and appending to it all the subsequent strings.\n+        match iterator.next() {\n+            None => String::new(),\n+            Some(mut buf) => {\n+                buf.extend(iterator);\n+                buf\n+            }\n+        }\n     }\n }\n \n #[stable(feature = \"herd_cows\", since = \"1.19.0\")]\n impl<'a> FromIterator<Cow<'a, str>> for String {\n     fn from_iter<I: IntoIterator<Item = Cow<'a, str>>>(iter: I) -> String {\n-        let mut buf = String::new();\n-        buf.extend(iter);\n-        buf\n+        let mut iterator = iter.into_iter();\n+\n+        // Because we're iterating over CoWs, we can (potentially) avoid at least\n+        // one allocation by getting the first item and appending to it all the\n+        // subsequent items.\n+        match iterator.next() {\n+            None => String::new(),\n+            Some(cow) => {\n+                let mut buf = cow.into_owned();\n+                buf.extend(iterator);\n+                buf\n+            }\n+        }\n     }\n }\n \n@@ -1753,9 +1772,7 @@ impl Extend<char> for String {\n         let iterator = iter.into_iter();\n         let (lower_bound, _) = iterator.size_hint();\n         self.reserve(lower_bound);\n-        for ch in iterator {\n-            self.push(ch)\n-        }\n+        iterator.for_each(move |c| self.push(c));\n     }\n }\n \n@@ -1769,27 +1786,21 @@ impl<'a> Extend<&'a char> for String {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Extend<&'a str> for String {\n     fn extend<I: IntoIterator<Item = &'a str>>(&mut self, iter: I) {\n-        for s in iter {\n-            self.push_str(s)\n-        }\n+        iter.into_iter().for_each(move |s| self.push_str(s));\n     }\n }\n \n #[stable(feature = \"extend_string\", since = \"1.4.0\")]\n impl Extend<String> for String {\n     fn extend<I: IntoIterator<Item = String>>(&mut self, iter: I) {\n-        for s in iter {\n-            self.push_str(&s)\n-        }\n+        iter.into_iter().for_each(move |s| self.push_str(&s));\n     }\n }\n \n #[stable(feature = \"herd_cows\", since = \"1.19.0\")]\n impl<'a> Extend<Cow<'a, str>> for String {\n     fn extend<I: IntoIterator<Item = Cow<'a, str>>>(&mut self, iter: I) {\n-        for s in iter {\n-            self.push_str(&s)\n-        }\n+        iter.into_iter().for_each(move |s| self.push_str(&s));\n     }\n }\n "}]}