{"sha": "6174a30d7c136c0fd163d512dfac840741a39f7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNzRhMzBkN2MxMzZjMGZkMTYzZDUxMmRmYWM4NDA3NDFhMzlmN2M=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-11-21T23:49:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-29T20:09:11Z"}, "message": "Respect semicolons always when expanding statments.", "tree": {"sha": "91789a810036952fbb7d461e548d6aa4e74b4446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91789a810036952fbb7d461e548d6aa4e74b4446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6174a30d7c136c0fd163d512dfac840741a39f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6174a30d7c136c0fd163d512dfac840741a39f7c", "html_url": "https://github.com/rust-lang/rust/commit/6174a30d7c136c0fd163d512dfac840741a39f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6174a30d7c136c0fd163d512dfac840741a39f7c/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f07cb2a377628922b337fdd08ca2dbbb14f2a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f07cb2a377628922b337fdd08ca2dbbb14f2a5", "html_url": "https://github.com/rust-lang/rust/commit/e7f07cb2a377628922b337fdd08ca2dbbb14f2a5"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "f56f6e26ba69aa59c41f711f12877d6c2112a0cf", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6174a30d7c136c0fd163d512dfac840741a39f7c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6174a30d7c136c0fd163d512dfac840741a39f7c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6174a30d7c136c0fd163d512dfac840741a39f7c", "patch": "@@ -1,7 +1,7 @@\n use std::map::HashMap;\n \n use ast::{crate, expr_, expr_mac, mac_invoc, mac_invoc_tt,\n-          tt_delim, tt_tok, item_mac, stmt_, stmt_mac};\n+          tt_delim, tt_tok, item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n use fold::*;\n use ext::base::*;\n use ext::qquote::{qq_helper};\n@@ -281,16 +281,14 @@ fn expand_stmt(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n \n     assert(vec::len(pth.idents) == 1u);\n     let extname = cx.parse_sess().interner.get(pth.idents[0]);\n-    match exts.find(*extname) {\n+    let (fully_expanded, sp) = match exts.find(*extname) {\n         None =>\n             cx.span_fatal(pth.span, fmt!(\"macro undefined: '%s'\", *extname)),\n \n         Some(normal_tt({expander: exp, span: exp_sp})) => {\n             let expanded = match exp(cx, mac.span, tts) {\n-                mr_expr(e) if !semi =>\n-                    @{node: ast::stmt_expr(e, cx.next_id()), span: e.span},\n-                mr_expr(e) if semi =>\n-                    @{node: ast::stmt_semi(e, cx.next_id()), span: e.span},\n+                mr_expr(e) =>\n+                    @{node: stmt_expr(e, cx.next_id()), span: e.span},\n                 mr_any(_,_,stmt_mkr) => stmt_mkr(),\n                 _ => cx.span_fatal(\n                     pth.span,\n@@ -303,14 +301,14 @@ fn expand_stmt(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n             let fully_expanded = fld.fold_stmt(expanded).node;\n             cx.bt_pop();\n \n-            return (fully_expanded, sp)\n+            (fully_expanded, sp)\n         }\n \n         Some(normal({expander: exp, span: exp_sp})) => {\n             //convert the new-style invoc for the old-style macro\n             let arg = base::tt_args_to_original_flavor(cx, pth.span, tts);\n             let exp_expr = exp(cx, mac.span, arg, None);\n-            let expanded = @{node: ast::stmt_expr(exp_expr, cx.next_id()),\n+            let expanded = @{node: stmt_expr(exp_expr, cx.next_id()),\n                              span: exp_expr.span};\n \n             cx.bt_push(ExpandedFrom({call_site: sp,\n@@ -325,10 +323,14 @@ fn expand_stmt(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n \n         _ => {\n             cx.span_fatal(pth.span,\n-                          fmt!(\"'%s' is not a tt-style macro\",\n-                               *extname))\n+                          fmt!(\"'%s' is not a tt-style macro\", *extname))\n         }\n-    }\n+    };\n+\n+    return (match fully_expanded {\n+        stmt_expr(e, stmt_id) if semi => stmt_semi(e, stmt_id),\n+        _ => { fully_expanded } /* might already have a semi */\n+    }, sp)\n \n }\n "}]}