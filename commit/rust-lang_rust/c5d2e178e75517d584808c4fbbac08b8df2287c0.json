{"sha": "c5d2e178e75517d584808c4fbbac08b8df2287c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZDJlMTc4ZTc1NTE3ZDU4NDgwOGM0ZmJiYWMwOGI4ZGYyMjg3YzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-26T12:54:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:10Z"}, "message": "Prefer enum instead of magic numbers", "tree": {"sha": "9f718db805467b9a5ec0911edba3c1e4c19336c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f718db805467b9a5ec0911edba3c1e4c19336c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d2e178e75517d584808c4fbbac08b8df2287c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53IACgkQpp+NIls6\n19nkNg/6A2VnTGTrF6v1NTJOsX9+8ynWh7PVr0YOdGhXdXbwg057gH2aJw0qEAhs\n8WOD/0mL2QdBExWmZJwNgDqPWA1bZmnFvTDa01k1Lm+KDs629mqJEgeq1L3VGmN8\nlKFgIHMBJ4ybsxxp9dy1nxAXs8jLtxkv0QsItNQlXSbGHwoXAw5FiRLTJyETDFsg\nr2hBl3qXjmtKOGjsZeC0JZVtdGvfpyj7xS2bT/MTbxuSRSw16D9uCRcx3r4yUdLg\nN76m8hguZQMDL+vRoXL1x03H09n0NlldjNH38vqmelTcu4zCqtH8UWNry3hBiXbv\ntuo59EXTRQdZEwsoEZ71syenRYT7Uu/4kGcVFPY0CE91HtXAYHZ+Ssgn/EAxD/P0\n/wty2JDOoyEq608QoOnl5RjorePPqQlPB+nNrUY0UNz6Y5eGs0czgnRQk/qfxVj7\ndKk5Y9/35igDhErOaGB6WsQTP2q63mT8oetnoMDAPdEkJxKuAH0d2yUpI7reDOuX\nqTE7tDyPjjvTwBStjM6X3aiQn2Nky4w+4aiycjeVsiwqeMg6Qgmd84u/HYI4QZVC\nOncJJ4eVHE+0xf0OqFz3I50U+kda3EdzwdU59VSiw0QrQskwBtufd36e0uT78RmU\npGsXOInuebQ20sfR00vg+036SdoeM796Q7QuNTsWi60w4f4p7O0=\n=EWrR\n-----END PGP SIGNATURE-----", "payload": "tree 9f718db805467b9a5ec0911edba3c1e4c19336c4\nparent 8c2db0ba8cc178a35ff3bda92c637958f6d143e7\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1516971291 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494450 +0100\n\nPrefer enum instead of magic numbers\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d2e178e75517d584808c4fbbac08b8df2287c0", "html_url": "https://github.com/rust-lang/rust/commit/c5d2e178e75517d584808c4fbbac08b8df2287c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d2e178e75517d584808c4fbbac08b8df2287c0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c2db0ba8cc178a35ff3bda92c637958f6d143e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2db0ba8cc178a35ff3bda92c637958f6d143e7", "html_url": "https://github.com/rust-lang/rust/commit/8c2db0ba8cc178a35ff3bda92c637958f6d143e7"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "4f691c0d39485a331e4b9f638eacb3029eddf212", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c5d2e178e75517d584808c4fbbac08b8df2287c0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d2e178e75517d584808c4fbbac08b8df2287c0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=c5d2e178e75517d584808c4fbbac08b8df2287c0", "patch": "@@ -368,6 +368,17 @@ impl_stable_hash_for!(struct mir::interpret::MemoryPointer {\n     offset\n });\n \n+enum AllocDiscriminant {\n+    Static,\n+    Constant,\n+    Function,\n+}\n+impl_stable_hash_for!(enum self::AllocDiscriminant {\n+    Static,\n+    Constant,\n+    Function\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::AllocId {\n     fn hash_stable<W: StableHasherResult>(\n         &self,\n@@ -377,15 +388,15 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::AllocId {\n         ty::tls::with_opt(|tcx| {\n             let tcx = tcx.expect(\"can't hash AllocIds during hir lowering\");\n             if let Some(def_id) = tcx.interpret_interner.get_corresponding_static_def_id(*self) {\n-                0.hash_stable(hcx, hasher);\n+                AllocDiscriminant::Static.hash_stable(hcx, hasher);\n                 // statics are unique via their DefId\n                 def_id.hash_stable(hcx, hasher);\n             } else if let Some(alloc) = tcx.interpret_interner.get_alloc(*self) {\n                 // not a static, can't be recursive, hash the allocation\n-                1.hash_stable(hcx, hasher);\n+                AllocDiscriminant::Constant.hash_stable(hcx, hasher);\n                 alloc.hash_stable(hcx, hasher);\n             } else if let Some(inst) = tcx.interpret_interner.get_fn(*self) {\n-                2.hash_stable(hcx, hasher);\n+                AllocDiscriminant::Function.hash_stable(hcx, hasher);\n                 inst.hash_stable(hcx, hasher);\n             } else {\n                 bug!(\"no allocation for {}\", self);"}]}