{"sha": "ca6f9203461f57a1f1a88266efeb61a5aa47d66b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNmY5MjAzNDYxZjU3YTFmMWE4ODI2NmVmZWI2MWE1YWE0N2Q2NmI=", "commit": {"author": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2016-02-03T02:21:39Z"}, "committer": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2016-02-03T05:42:11Z"}, "message": "trying again at fixing stackp initialization", "tree": {"sha": "6c680499f3822c50f9e900b2acc079bf4ca0f0b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c680499f3822c50f9e900b2acc079bf4ca0f0b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca6f9203461f57a1f1a88266efeb61a5aa47d66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6f9203461f57a1f1a88266efeb61a5aa47d66b", "html_url": "https://github.com/rust-lang/rust/commit/ca6f9203461f57a1f1a88266efeb61a5aa47d66b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca6f9203461f57a1f1a88266efeb61a5aa47d66b/comments", "author": null, "committer": null, "parents": [{"sha": "68bfd43eefe42b429a463731fe81d62bf9c27907", "url": "https://api.github.com/repos/rust-lang/rust/commits/68bfd43eefe42b429a463731fe81d62bf9c27907", "html_url": "https://github.com/rust-lang/rust/commit/68bfd43eefe42b429a463731fe81d62bf9c27907"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "b5cbcaa44d56c5993928fb612997abe441f3d97e", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ca6f9203461f57a1f1a88266efeb61a5aa47d66b/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6f9203461f57a1f1a88266efeb61a5aa47d66b/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=ca6f9203461f57a1f1a88266efeb61a5aa47d66b", "patch": "@@ -135,7 +135,7 @@ mod imp {\n         Handler { _data: MAIN_ALTSTACK };\n     }\n \n-    unsafe fn get_stack() -> *mut i8 {\n+    unsafe fn get_stackp() -> *mut libc::c_void {\n         let stackp = mmap(ptr::null_mut(),\n                           SIGSTKSZ,\n                           PROT_READ | PROT_WRITE,\n@@ -145,11 +145,26 @@ mod imp {\n         if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack\");\n         }\n-        stackp as *mut i8\n+        stackp\n+    }\n+\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"macos\",\n+              target_os = \"bitrig\",\n+              target_os = \"netbsd\",\n+              target_os = \"openbsd\"))]\n+    unsafe fn get_stack() -> libc::stack_t {\n+        libc::stack_t { ss_sp: get_stackp(), ss_flags: 0, ss_size: SIGSTKSZ }\n+    }\n+\n+    #[cfg(any(target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n+    unsafe fn get_stack() -> libc::stack_t {\n+        libc::stack_t { ss_sp: get_stackp() as *mut i8, ss_flags: 0, ss_size: SIGSTKSZ }\n     }\n \n     pub unsafe fn make_handler() -> Handler {\n-        let stack = libc::stack_t { ss_sp: get_stack(), ss_flags: 0, ss_size: SIGSTKSZ }\n+        let stack = get_stack();\n         sigaltstack(&stack, ptr::null_mut());\n         Handler { _data: stack.ss_sp as *mut libc::c_void }\n     }"}]}