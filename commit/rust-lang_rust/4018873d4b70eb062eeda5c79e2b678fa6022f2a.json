{"sha": "4018873d4b70eb062eeda5c79e2b678fa6022f2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTg4NzNkNGI3MGViMDYyZWVkYTVjNzllMmI2NzhmYTYwMjJmMmE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-03T21:00:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-03T21:00:07Z"}, "message": "Merge pull request #2219 from topecongiro/issue-549\n\nHandle special-case format! like macros", "tree": {"sha": "358c25ea57c318bb58948fdae23fb1d8cc39ff0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/358c25ea57c318bb58948fdae23fb1d8cc39ff0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4018873d4b70eb062eeda5c79e2b678fa6022f2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaJGXXCRBK7hj4Ov3rIwAAdHIIAG5SQthnDpz3qvoIRvx1w1+G\ny11oP+TEkwv7AXJrjHo/9IuK78pYCwi9NEWGa4+9QmErir0MZzqIkdtVYoSiKuiE\njsPpmTHfB0qxlKyr8ckHJwSuY2FXtOXZrCqKFAKAbvm8FC8DWbGmWy3VqNwa/nLh\npZXGZNwV2O4z+sJFRbmKOpAf69dnnGkp9riCRDwkQPMdJHRH9VskN2XSyTJkYFP3\n+znx2QSHZ6dwke7O3n7Q2aNco/rsPDvpHfhmpa++6QtCRyOeI3DdoHLRjcmPmCes\nA8V4Wxdtu3xjxRFAUFK7qIuoDatUC71z0/w4Huijt/FbamVvrYXeZ2hTG1LQD4s=\n=YOXX\n-----END PGP SIGNATURE-----\n", "payload": "tree 358c25ea57c318bb58948fdae23fb1d8cc39ff0a\nparent 07106d444c81fef07a9a57301112406ac3d6e848\nparent 026c716168963f0fa8739112f91cea3354534edc\nauthor Nick Cameron <nrc@ncameron.org> 1512334807 +1300\ncommitter GitHub <noreply@github.com> 1512334807 +1300\n\nMerge pull request #2219 from topecongiro/issue-549\n\nHandle special-case format! like macros"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4018873d4b70eb062eeda5c79e2b678fa6022f2a", "html_url": "https://github.com/rust-lang/rust/commit/4018873d4b70eb062eeda5c79e2b678fa6022f2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4018873d4b70eb062eeda5c79e2b678fa6022f2a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07106d444c81fef07a9a57301112406ac3d6e848", "url": "https://api.github.com/repos/rust-lang/rust/commits/07106d444c81fef07a9a57301112406ac3d6e848", "html_url": "https://github.com/rust-lang/rust/commit/07106d444c81fef07a9a57301112406ac3d6e848"}, {"sha": "026c716168963f0fa8739112f91cea3354534edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/026c716168963f0fa8739112f91cea3354534edc", "html_url": "https://github.com/rust-lang/rust/commit/026c716168963f0fa8739112f91cea3354534edc"}], "stats": {"total": 227, "additions": 168, "deletions": 59}, "files": [{"sha": "642fb93c3baf5ac44f7f46745d4481188c6a7368", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -136,8 +136,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     };\n     debug!(\n         \"child_shapes {:?} {:?}\",\n-        first_child_shape,\n-        other_child_shape\n+        first_child_shape, other_child_shape\n     );\n \n     let child_shape_iter = Some(first_child_shape)"}, {"sha": "cbb6573b322e8f5e57b74ff6db075647abfa8ec3", "filename": "src/checkstyle.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -57,8 +57,7 @@ where\n                     writer,\n                     \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be `{}`\\\" \\\n                      />\",\n-                    mismatch.line_number,\n-                    message\n+                    mismatch.line_number, message\n                 )?;\n             }\n         }"}, {"sha": "8b8112618b4a8c948ae616846cd74cdc5c2a57b0", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -205,11 +205,7 @@ pub fn combine_strs_with_missing_comments(\n     };\n     Some(format!(\n         \"{}{}{}{}{}\",\n-        prev_str,\n-        first_sep,\n-        missing_comment,\n-        second_sep,\n-        next_str,\n+        prev_str, first_sep, missing_comment, second_sep, next_str,\n     ))\n }\n "}, {"sha": "d7b5e8c6ee3a62fbfa1401475cb5cb6bac6175ee", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -714,8 +714,7 @@ mod test {\n             toml,\n             format!(\n                 \"merge_derives = {}\\nskip_children = {}\\n\",\n-                merge_derives,\n-                skip_children,\n+                merge_derives, skip_children,\n             )\n         );\n     }"}, {"sha": "e3b06b343fead58ebbd07c4dd7e9dd48404944d9", "filename": "src/expr.rs", "status": "modified", "additions": 108, "deletions": 30, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -353,10 +353,7 @@ where\n             if one_line_width <= shape.width {\n                 return Some(format!(\n                     \"{}{}{}{}\",\n-                    lhs_result,\n-                    pp.infix,\n-                    rhs_result,\n-                    pp.suffix\n+                    lhs_result, pp.infix, rhs_result, pp.suffix\n                 ));\n             }\n         }\n@@ -390,10 +387,7 @@ where\n     };\n     Some(format!(\n         \"{}{}{}{}\",\n-        lhs_result,\n-        infix_with_sep,\n-        rhs_result,\n-        pp.suffix\n+        lhs_result, infix_with_sep, rhs_result, pp.suffix\n     ))\n }\n \n@@ -883,10 +877,7 @@ impl<'a> ControlFlow<'a> {\n \n             let result = format!(\n                 \"{} {} {{ {} }} else {{ {} }}\",\n-                self.keyword,\n-                pat_expr_str,\n-                if_str,\n-                else_str\n+                self.keyword, pat_expr_str, if_str, else_str\n             );\n \n             if result.len() <= width {\n@@ -1589,10 +1580,7 @@ fn rewrite_match_body(\n \n         Some(format!(\n             \"{} =>{}{}{}\",\n-            pats_str,\n-            block_sep,\n-            body_str,\n-            body_suffix\n+            pats_str, block_sep, body_str, body_suffix\n         ))\n     };\n \n@@ -1807,6 +1795,25 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n     )\n }\n \n+const FORMAT_LIKE_WHITELIST: &[&str] = &[\n+    // From the Rust Standard Library.\n+    \"eprint!\",\n+    \"eprintln!\",\n+    \"format!\",\n+    \"format_args!\",\n+    \"panic!\",\n+    \"println!\",\n+    \"unreachable!\",\n+    // From the `log` crate.\n+    \"debug!\",\n+    \"error!\",\n+    \"info!\",\n+    \"panic!\",\n+    \"warn!\",\n+];\n+\n+const WRITE_LIKE_WHITELIST: &[&str] = &[\"assert!\", \"write!\", \"writeln!\"];\n+\n pub fn rewrite_call(\n     context: &RewriteContext,\n     callee: &str,\n@@ -1850,9 +1857,6 @@ where\n     };\n     let used_width = extra_offset(callee_str, shape);\n     let one_line_width = shape.width.checked_sub(used_width + 2 * paren_overhead)?;\n-    // 1 = \"(\"\n-    let combine_arg_with_callee =\n-        callee_str.len() + 1 <= context.config.tab_spaces() && args.len() == 1;\n \n     // 1 = \"(\" or \")\"\n     let one_line_shape = shape\n@@ -1877,7 +1881,7 @@ where\n         one_line_width,\n         args_max_width,\n         force_trailing_comma,\n-        combine_arg_with_callee,\n+        callee_str,\n     )?;\n \n     if !context.use_block_indent() && need_block_indent(&list_str, nested_shape) && !extendable {\n@@ -1918,7 +1922,7 @@ fn rewrite_call_args<'a, T>(\n     one_line_width: usize,\n     args_max_width: usize,\n     force_trailing_comma: bool,\n-    combine_arg_with_callee: bool,\n+    callee_str: &str,\n ) -> Option<(bool, String)>\n where\n     T: Rewrite + Spanned + ToExpr + 'a,\n@@ -1948,7 +1952,7 @@ where\n         nested_shape,\n         one_line_width,\n         args_max_width,\n-        combine_arg_with_callee,\n+        callee_str,\n     );\n \n     let fmt = ListFormatting {\n@@ -1968,7 +1972,8 @@ where\n         config: context.config,\n     };\n \n-    write_list(&item_vec, &fmt).map(|args_str| (tactic != DefinitiveListTactic::Vertical, args_str))\n+    write_list(&item_vec, &fmt)\n+        .map(|args_str| (tactic == DefinitiveListTactic::Horizontal, args_str))\n }\n \n fn try_overflow_last_arg<'a, T>(\n@@ -1979,11 +1984,14 @@ fn try_overflow_last_arg<'a, T>(\n     nested_shape: Shape,\n     one_line_width: usize,\n     args_max_width: usize,\n-    combine_arg_with_callee: bool,\n+    callee_str: &str,\n ) -> DefinitiveListTactic\n where\n     T: Rewrite + Spanned + ToExpr + 'a,\n {\n+    // 1 = \"(\"\n+    let combine_arg_with_callee =\n+        callee_str.len() + 1 <= context.config.tab_spaces() && args.len() == 1;\n     let overflow_last = combine_arg_with_callee || can_be_overflowed(context, args);\n \n     // Replace the last item with its first line to see if it fits with\n@@ -2020,6 +2028,16 @@ where\n         _ if args.len() >= 1 => {\n             item_vec[args.len() - 1].item = args.last()\n                 .and_then(|last_arg| last_arg.rewrite(context, nested_shape));\n+\n+            let default_tactic = || {\n+                definitive_tactic(\n+                    &*item_vec,\n+                    ListTactic::LimitedHorizontalVertical(args_max_width),\n+                    Separator::Comma,\n+                    one_line_width,\n+                )\n+            };\n+\n             // Use horizontal layout for a function with a single argument as long as\n             // everything fits in a single line.\n             if args.len() == 1\n@@ -2030,12 +2048,29 @@ where\n             {\n                 tactic = DefinitiveListTactic::Horizontal;\n             } else {\n-                tactic = definitive_tactic(\n-                    &*item_vec,\n-                    ListTactic::LimitedHorizontalVertical(args_max_width),\n-                    Separator::Comma,\n-                    one_line_width,\n-                );\n+                tactic = default_tactic();\n+\n+                // For special-case macros, we may want to use different tactics.\n+                let maybe_args_offset = maybe_get_args_offset(callee_str, args);\n+\n+                if tactic == DefinitiveListTactic::Vertical && maybe_args_offset.is_some() {\n+                    let args_offset = maybe_args_offset.unwrap();\n+                    let args_tactic = definitive_tactic(\n+                        &item_vec[args_offset..],\n+                        ListTactic::HorizontalVertical,\n+                        Separator::Comma,\n+                        nested_shape.width,\n+                    );\n+\n+                    // Every argument is simple and fits on a single line.\n+                    if args_tactic == DefinitiveListTactic::Horizontal {\n+                        tactic = if args_offset == 1 {\n+                            DefinitiveListTactic::FormatCall\n+                        } else {\n+                            DefinitiveListTactic::WriteCall\n+                        };\n+                    }\n+                }\n             }\n         }\n         _ => (),\n@@ -2044,6 +2079,49 @@ where\n     tactic\n }\n \n+fn is_simple_arg(expr: &ast::Expr) -> bool {\n+    match expr.node {\n+        ast::ExprKind::Lit(..) => true,\n+        ast::ExprKind::Path(ref qself, ref path) => qself.is_none() && path.segments.len() <= 1,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Cast(ref expr, _)\n+        | ast::ExprKind::Field(ref expr, _)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::TupField(ref expr, _)\n+        | ast::ExprKind::Unary(_, ref expr) => is_simple_arg(expr),\n+        ast::ExprKind::Index(ref lhs, ref rhs) | ast::ExprKind::Repeat(ref lhs, ref rhs) => {\n+            is_simple_arg(lhs) && is_simple_arg(rhs)\n+        }\n+        _ => false,\n+    }\n+}\n+\n+fn is_every_args_simple<T: ToExpr>(lists: &[&T]) -> bool {\n+    lists\n+        .iter()\n+        .all(|arg| arg.to_expr().map_or(false, is_simple_arg))\n+}\n+\n+/// In case special-case style is required, returns an offset from which we start horizontal layout.\n+fn maybe_get_args_offset<T: ToExpr>(callee_str: &str, args: &[&T]) -> Option<usize> {\n+    if FORMAT_LIKE_WHITELIST\n+        .iter()\n+        .find(|s| **s == callee_str)\n+        .is_some() && args.len() >= 1 && is_every_args_simple(args)\n+    {\n+        Some(1)\n+    } else if WRITE_LIKE_WHITELIST\n+        .iter()\n+        .find(|s| **s == callee_str)\n+        .is_some() && args.len() >= 2 && is_every_args_simple(args)\n+    {\n+        Some(2)\n+    } else {\n+        None\n+    }\n+}\n+\n /// Returns a shape for the last argument which is going to be overflowed.\n fn last_arg_shape<T>(\n     lists: &[&T],"}, {"sha": "a198d93ca76cbba1e6389e9ac01f172d84830a99", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -48,9 +48,7 @@ impl Rewrite for ast::Local {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         debug!(\n             \"Local::rewrite {:?} {} {:?}\",\n-            self,\n-            shape.width,\n-            shape.indent\n+            self, shape.width, shape.indent\n         );\n \n         skip_out_of_file_lines_range!(context, self.span);\n@@ -844,9 +842,7 @@ fn rewrite_trait_ref(\n         if !(retry && trait_ref_str.contains('\\n')) {\n             return Some(format!(\n                 \"{} {}{}\",\n-                generics_str,\n-                polarity_str,\n-                &trait_ref_str\n+                generics_str, polarity_str, &trait_ref_str\n             ));\n         }\n     }\n@@ -1842,9 +1838,7 @@ fn rewrite_fn_base(\n \n     debug!(\n         \"rewrite_fn_base: one_line_budget: {}, multi_line_budget: {}, arg_indent: {:?}\",\n-        one_line_budget,\n-        multi_line_budget,\n-        arg_indent\n+        one_line_budget, multi_line_budget, arg_indent\n     );\n \n     // Check if vertical layout was forced."}, {"sha": "0b54c71a6eb07f8a8ea4a7304e5ceea8ec96c49e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -93,8 +93,7 @@ impl fmt::Display for ErrorKind {\n             ErrorKind::LineOverflow(found, maximum) => write!(\n                 fmt,\n                 \"line exceeded maximum width (maximum: {}, found: {})\",\n-                maximum,\n-                found\n+                maximum, found\n             ),\n             ErrorKind::TrailingWhitespace => write!(fmt, \"left behind trailing whitespace\"),\n             ErrorKind::BadIssue(issue) => write!(fmt, \"found {}\", issue),"}, {"sha": "a51653b3732ae37a7404d5c028d7863a0bc33e30", "filename": "src/lists.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -160,6 +160,10 @@ pub enum DefinitiveListTactic {\n     Vertical,\n     Horizontal,\n     Mixed,\n+    // Special case tactic for `format!()` variants.\n+    FormatCall,\n+    // Special case tactic for `write!()` varianta.\n+    WriteCall,\n }\n \n impl DefinitiveListTactic {\n@@ -267,7 +271,7 @@ where\n     I: IntoIterator<Item = T> + Clone,\n     T: AsRef<ListItem>,\n {\n-    let tactic = formatting.tactic;\n+    let mut tactic = formatting.tactic;\n     let sep_len = formatting.separator.len();\n \n     // Now that we know how we will layout, we can decide for sure if there\n@@ -309,6 +313,28 @@ where\n             DefinitiveListTactic::Horizontal if !first => {\n                 result.push(' ');\n             }\n+            DefinitiveListTactic::FormatCall if !first => {\n+                result.push('\\n');\n+                result.push_str(indent_str);\n+                tactic = DefinitiveListTactic::Horizontal;\n+            }\n+            DefinitiveListTactic::WriteCall => {\n+                let second = i == 1;\n+                let third = i == 2;\n+\n+                if first {\n+                    // Nothing\n+                } else if second {\n+                    result.push('\\n');\n+                    result.push_str(indent_str);\n+                } else if third {\n+                    result.push('\\n');\n+                    result.push_str(indent_str);\n+                    tactic = DefinitiveListTactic::Horizontal;\n+                } else {\n+                    unreachable!();\n+                }\n+            }\n             DefinitiveListTactic::Vertical if !first => {\n                 result.push('\\n');\n                 result.push_str(indent_str);"}, {"sha": "ef185a3f7d4d1a02bd89afdda3e297826d2be363", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -442,10 +442,7 @@ impl Rewrite for ast::WherePredicate {\n                     {\n                         format!(\n                             \"for< {} > {}{}{}\",\n-                            lifetime_str,\n-                            type_str,\n-                            colon,\n-                            bounds_str\n+                            lifetime_str, type_str, colon, bounds_str\n                         )\n                     } else {\n                         format!(\"for<{}> {}{}{}\", lifetime_str, type_str, colon, bounds_str)"}, {"sha": "ff24939668c24626a9edd2495dd5f914f81e6be7", "filename": "tests/source/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -216,3 +216,11 @@ make_test!(str_searcher_ascii_haystack, \"bb\", \"abbcbbd\", [\n     Reject(6, 7),\n ]);\n }\n+\n+fn special_case_macros() {\n+    // format!\n+    let s = format!(\"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n+\n+    // assert!\n+    assert!(result, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n+}"}, {"sha": "8b22a45746311c454fa4f5b8f0121ae6b367def5", "filename": "tests/target/macros.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4018873d4b70eb062eeda5c79e2b678fa6022f2a/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4018873d4b70eb062eeda5c79e2b678fa6022f2a/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=4018873d4b70eb062eeda5c79e2b678fa6022f2a", "patch": "@@ -135,8 +135,7 @@ fn issue_1279() {\n fn issue_1555() {\n     let hello = &format!(\n         \"HTTP/1.1 200 OK\\r\\nServer: {}\\r\\n\\r\\n{}\",\n-        \"65454654654654654654654655464\",\n-        \"4\"\n+        \"65454654654654654654654655464\", \"4\"\n     );\n }\n \n@@ -270,3 +269,18 @@ fn issue2214() {\n         ]\n     );\n }\n+\n+fn special_case_macros() {\n+    // format!\n+    let s = format!(\n+        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n+        result, input, expected\n+    );\n+\n+    // assert!\n+    assert!(\n+        result,\n+        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n+        result, input, expected\n+    );\n+}"}]}