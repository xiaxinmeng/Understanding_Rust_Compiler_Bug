{"sha": "93ac09c3b538be483ddd01ad908801dafd103b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYWMwOWMzYjUzOGJlNDgzZGRkMDFhZDkwODgwMWRhZmQxMDNiNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-05T13:56:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-05T13:56:07Z"}, "message": "Auto merge of #55466 - sinkuu:cleanup, r=petrochenkov\n\nsyntax: Use iterator and pattern APIs instead of `char_at`\n\nIterating over chars with the `char_at(str, i)` `i += ch.len_utf8()` loop seems unidiomatic.", "tree": {"sha": "b885967eb30af4b47bd2f5bf6308f2a9ed01c0ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b885967eb30af4b47bd2f5bf6308f2a9ed01c0ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ac09c3b538be483ddd01ad908801dafd103b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ac09c3b538be483ddd01ad908801dafd103b57", "html_url": "https://github.com/rust-lang/rust/commit/93ac09c3b538be483ddd01ad908801dafd103b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ac09c3b538be483ddd01ad908801dafd103b57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21cb46a6e94906c2fdfda4df33c822ba28422b7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/21cb46a6e94906c2fdfda4df33c822ba28422b7f", "html_url": "https://github.com/rust-lang/rust/commit/21cb46a6e94906c2fdfda4df33c822ba28422b7f"}, {"sha": "f423ff7be86da0333e4c6459fd4eaf0181183e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/f423ff7be86da0333e4c6459fd4eaf0181183e73", "html_url": "https://github.com/rust-lang/rust/commit/f423ff7be86da0333e4c6459fd4eaf0181183e73"}], "stats": {"total": 98, "additions": 34, "deletions": 64}, "files": [{"sha": "3c66db082cc412d0b1a4aa62690aaf2b33c22a9c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=93ac09c3b538be483ddd01ad908801dafd103b57", "patch": "@@ -173,7 +173,6 @@ pub mod parse;\n pub mod ptr;\n pub mod show_span;\n pub mod std_inject;\n-pub mod str;\n pub use syntax_pos::edition;\n pub use syntax_pos::symbol;\n pub mod test;"}, {"sha": "d3039326c8941d95c3c8cd0c8eaea1e534b7a77d", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=93ac09c3b538be483ddd01ad908801dafd103b57", "patch": "@@ -16,7 +16,6 @@ use syntax_pos::{BytePos, CharPos, Pos, FileName};\n use parse::lexer::{is_block_doc_comment, is_pattern_whitespace};\n use parse::lexer::{self, ParseSess, StringReader, TokenAndSpan};\n use print::pprust;\n-use str::char_at;\n \n use std::io::Read;\n use std::usize;\n@@ -207,28 +206,22 @@ fn read_line_comments(rdr: &mut StringReader,\n /// Otherwise returns Some(k) where k is first char offset after that leading\n /// whitespace.  Note k may be outside bounds of s.\n fn all_whitespace(s: &str, col: CharPos) -> Option<usize> {\n-    let len = s.len();\n-    let mut col = col.to_usize();\n-    let mut cursor: usize = 0;\n-\n-    while col > 0 && cursor < len {\n-        let ch = char_at(s, cursor);\n+    let mut idx = 0;\n+    for (i, ch) in s.char_indices().take(col.to_usize()) {\n         if !ch.is_whitespace() {\n             return None;\n         }\n-        cursor += ch.len_utf8();\n-        col -= 1;\n+        idx = i + ch.len_utf8();\n     }\n-\n-    Some(cursor)\n+    Some(idx)\n }\n \n fn trim_whitespace_prefix_and_push_line(lines: &mut Vec<String>, s: String, col: CharPos) {\n     let len = s.len();\n     let s1 = match all_whitespace(&s[..], col) {\n         Some(col) => {\n             if col < len {\n-                (&s[col..len]).to_string()\n+                s[col..len].to_string()\n             } else {\n                 String::new()\n             }\n@@ -247,20 +240,13 @@ fn read_block_comment(rdr: &mut StringReader,\n     let mut lines: Vec<String> = Vec::new();\n \n     // Count the number of chars since the start of the line by rescanning.\n-    let mut src_index = rdr.src_index(rdr.source_file.line_begin_pos(rdr.pos));\n+    let src_index = rdr.src_index(rdr.source_file.line_begin_pos(rdr.pos));\n     let end_src_index = rdr.src_index(rdr.pos);\n     assert!(src_index <= end_src_index,\n         \"src_index={}, end_src_index={}, line_begin_pos={}\",\n         src_index, end_src_index, rdr.source_file.line_begin_pos(rdr.pos).to_u32());\n-    let mut n = 0;\n-\n-    while src_index < end_src_index {\n-        let c = char_at(&rdr.src, src_index);\n-        src_index += c.len_utf8();\n-        n += 1;\n-    }\n \n-    let col = CharPos(n);\n+    let col = CharPos(rdr.src[src_index..end_src_index].chars().count());\n \n     rdr.bump();\n     rdr.bump();"}, {"sha": "0c8e81a0ee611f21c83dcfebd55136d202188d82", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=93ac09c3b538be483ddd01ad908801dafd103b57", "patch": "@@ -13,12 +13,12 @@ use syntax_pos::{self, BytePos, CharPos, Pos, Span, NO_EXPANSION};\n use source_map::{SourceMap, FilePathMapping};\n use errors::{Applicability, FatalError, Diagnostic, DiagnosticBuilder};\n use parse::{token, ParseSess};\n-use str::char_at;\n use symbol::{Symbol, keywords};\n use core::unicode::property::Pattern_White_Space;\n \n use std::borrow::Cow;\n use std::char;\n+use std::iter;\n use std::mem::replace;\n use rustc_data_structures::sync::Lrc;\n \n@@ -459,45 +459,42 @@ impl<'a> StringReader<'a> {\n \n     /// Converts CRLF to LF in the given string, raising an error on bare CR.\n     fn translate_crlf<'b>(&self, start: BytePos, s: &'b str, errmsg: &'b str) -> Cow<'b, str> {\n-        let mut i = 0;\n-        while i < s.len() {\n-            let ch = char_at(s, i);\n-            let next = i + ch.len_utf8();\n+        let mut chars = s.char_indices().peekable();\n+        while let Some((i, ch)) = chars.next() {\n             if ch == '\\r' {\n-                if next < s.len() && char_at(s, next) == '\\n' {\n-                    return translate_crlf_(self, start, s, errmsg, i).into();\n+                if let Some((lf_idx, '\\n')) = chars.peek() {\n+                    return translate_crlf_(self, start, s, *lf_idx, chars, errmsg).into();\n                 }\n                 let pos = start + BytePos(i as u32);\n-                let end_pos = start + BytePos(next as u32);\n+                let end_pos = start + BytePos((i + ch.len_utf8()) as u32);\n                 self.err_span_(pos, end_pos, errmsg);\n             }\n-            i = next;\n         }\n         return s.into();\n \n         fn translate_crlf_(rdr: &StringReader,\n                            start: BytePos,\n                            s: &str,\n-                           errmsg: &str,\n-                           mut i: usize)\n+                           mut j: usize,\n+                           mut chars: iter::Peekable<impl Iterator<Item = (usize, char)>>,\n+                           errmsg: &str)\n                            -> String {\n             let mut buf = String::with_capacity(s.len());\n-            let mut j = 0;\n-            while i < s.len() {\n-                let ch = char_at(s, i);\n-                let next = i + ch.len_utf8();\n+            // Skip first CR\n+            buf.push_str(&s[.. j - 1]);\n+            while let Some((i, ch)) = chars.next() {\n                 if ch == '\\r' {\n                     if j < i {\n                         buf.push_str(&s[j..i]);\n                     }\n+                    let next = i + ch.len_utf8();\n                     j = next;\n-                    if next >= s.len() || char_at(s, next) != '\\n' {\n+                    if chars.peek().map(|(_, ch)| *ch) != Some('\\n') {\n                         let pos = start + BytePos(i as u32);\n                         let end_pos = start + BytePos(next as u32);\n                         rdr.err_span_(pos, end_pos, errmsg);\n                     }\n                 }\n-                i = next;\n             }\n             if j < s.len() {\n                 buf.push_str(&s[j..]);\n@@ -1858,6 +1855,11 @@ fn ident_continue(c: Option<char>) -> bool {\n     (c > '\\x7f' && c.is_xid_continue())\n }\n \n+#[inline]\n+fn char_at(s: &str, byte: usize) -> char {\n+    s[byte..].chars().next().unwrap()\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "58068ce5f601d23117048e8c0684a0d177f26559", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=93ac09c3b538be483ddd01ad908801dafd103b57", "patch": "@@ -19,7 +19,6 @@ use errors::{Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n use feature_gate::UnstableFeatures;\n use parse::parser::Parser;\n use ptr::P;\n-use str::char_at;\n use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n use diagnostics::plugin::ErrorMap;\n@@ -436,9 +435,7 @@ fn raw_str_lit(lit: &str) -> String {\n \n // check if `s` looks like i32 or u1234 etc.\n fn looks_like_width_suffix(first_chars: &[char], s: &str) -> bool {\n-    s.len() > 1 &&\n-        first_chars.contains(&char_at(s, 0)) &&\n-        s[1..].chars().all(|c| '0' <= c && c <= '9')\n+    s.starts_with(first_chars) && s[1..].chars().all(|c| c.is_ascii_digit())\n }\n \n macro_rules! err {\n@@ -645,11 +642,11 @@ fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n     let orig = s;\n     let mut ty = ast::LitIntType::Unsuffixed;\n \n-    if char_at(s, 0) == '0' && s.len() > 1 {\n-        match char_at(s, 1) {\n-            'x' => base = 16,\n-            'o' => base = 8,\n-            'b' => base = 2,\n+    if s.starts_with('0') && s.len() > 1 {\n+        match s.as_bytes()[1] {\n+            b'x' => base = 16,\n+            b'o' => base = 8,\n+            b'b' => base = 2,\n             _ => { }\n         }\n     }"}, {"sha": "281861918fd8eefaecf88570f6d23ae49e993db2", "filename": "src/libsyntax/str.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Flibsyntax%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21cb46a6e94906c2fdfda4df33c822ba28422b7f/src%2Flibsyntax%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstr.rs?ref=21cb46a6e94906c2fdfda4df33c822ba28422b7f", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[inline]\n-pub fn char_at(s: &str, byte: usize) -> char {\n-    s[byte..].chars().next().unwrap()\n-}"}, {"sha": "fb281154be0bbabab39e8a048699e64c939a2058", "filename": "src/libsyntax/util/lev_distance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Flibsyntax%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance.rs?ref=93ac09c3b538be483ddd01ad908801dafd103b57", "patch": "@@ -38,7 +38,8 @@ pub fn lev_distance(a: &str, b: &str) -> usize {\n             current = next;\n             t_last = j;\n         }\n-    } dcol[t_last + 1]\n+    }\n+    dcol[t_last + 1]\n }\n \n /// Find the best match for a given word in the given iterator"}, {"sha": "f7fa2798051072f3755d44ee6f23b39f15a45281", "filename": "src/test/run-pass-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac09c3b538be483ddd01ad908801dafd103b57/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs?ref=93ac09c3b538be483ddd01ad908801dafd103b57", "patch": "@@ -25,7 +25,6 @@ use syntax::parse::new_parser_from_source_str;\n use syntax::parse::parser::Parser;\n use syntax::parse::token;\n use syntax::ptr::P;\n-use syntax::str::char_at;\n use syntax::parse::attr::*;\n use syntax::print::pprust;\n use std::fmt;"}]}