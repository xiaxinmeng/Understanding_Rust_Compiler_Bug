{"sha": "44978acf51e25513ef8420e228221273f42abf8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OTc4YWNmNTFlMjU1MTNlZjg0MjBlMjI4MjIxMjczZjQyYWJmOGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-10T16:18:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-10T16:18:49Z"}, "message": "Merge #6769\n\n6769: Add native \"remove this semicolon\" diagnostics r=matklad a=ivan770\n\nCloses #6739 \r\n![demo2](https://user-images.githubusercontent.com/14003886/101530533-b76c3180-399a-11eb-9d18-5c8457721655.gif)\r\n\n\nCo-authored-by: ivan770 <leshenko.ivan770@gmail.com>", "tree": {"sha": "cc798690135a0adc9ee43bdb6d2b99686ce9e6f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc798690135a0adc9ee43bdb6d2b99686ce9e6f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44978acf51e25513ef8420e228221273f42abf8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0kppCRBK7hj4Ov3rIwAAdHIIAIpqrHLK97RoEKF2b1nEn7L4\nH4F2oUTRpzGoCF36zUbGibpsyms9E5Md6IebEnfytHky+eoUSMR/TEqdRAudePri\n1AooD3dhBi2/bMB1QSkB5Vpgo+rXz+x3P3qcuh+WSW1cXJvzcZsR9X7jQ5xiRr6G\npJZqZYm6iOK41jH+omq0GurKEPqVXIe39WExeYXqtZmquXCzXiAktZw0GLwzCIMv\njLxtr/DozxZSVi099U4NXmg2kcpljpSFWi7pYkgkump4/1xSc8TM7R0+wGKEqaAo\n6SfmuXlfaa+V/yjuE2kpK4vtnFEhjPNmuBQ2nX/688Jm2tSSYwZDNjZ8hG7cIj0=\n=2oua\n-----END PGP SIGNATURE-----\n", "payload": "tree cc798690135a0adc9ee43bdb6d2b99686ce9e6f1\nparent 5a6065e3b05e2624c4c340f928b20c04ce579928\nparent bbb0bc7b041278480edbfaa7c3cdadc5a704fc03\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607617129 +0000\ncommitter GitHub <noreply@github.com> 1607617129 +0000\n\nMerge #6769\n\n6769: Add native \"remove this semicolon\" diagnostics r=matklad a=ivan770\n\nCloses #6739 \r\n![demo2](https://user-images.githubusercontent.com/14003886/101530533-b76c3180-399a-11eb-9d18-5c8457721655.gif)\r\n\n\nCo-authored-by: ivan770 <leshenko.ivan770@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44978acf51e25513ef8420e228221273f42abf8c", "html_url": "https://github.com/rust-lang/rust/commit/44978acf51e25513ef8420e228221273f42abf8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44978acf51e25513ef8420e228221273f42abf8c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6065e3b05e2624c4c340f928b20c04ce579928", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6065e3b05e2624c4c340f928b20c04ce579928", "html_url": "https://github.com/rust-lang/rust/commit/5a6065e3b05e2624c4c340f928b20c04ce579928"}, {"sha": "bbb0bc7b041278480edbfaa7c3cdadc5a704fc03", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb0bc7b041278480edbfaa7c3cdadc5a704fc03", "html_url": "https://github.com/rust-lang/rust/commit/bbb0bc7b041278480edbfaa7c3cdadc5a704fc03"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "b1c9241670b92e89eec8829b38723a8d82970e35", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=44978acf51e25513ef8420e228221273f42abf8c", "patch": "@@ -5,5 +5,5 @@ pub use hir_expand::diagnostics::{\n };\n pub use hir_ty::diagnostics::{\n     IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr,\n-    NoSuchField,\n+    NoSuchField, RemoveThisSemicolon,\n };"}, {"sha": "e59487e544b869e6d3992da8075e7da453d23bbc", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=44978acf51e25513ef8420e228221273f42abf8c", "patch": "@@ -216,6 +216,30 @@ impl Diagnostic for MissingOkInTailExpr {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct RemoveThisSemicolon {\n+    pub file: HirFileId,\n+    pub expr: AstPtr<ast::Expr>,\n+}\n+\n+impl Diagnostic for RemoveThisSemicolon {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"remove-this-semicolon\")\n+    }\n+\n+    fn message(&self) -> String {\n+        \"Remove this semicolon\".to_string()\n+    }\n+\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.expr.clone().into() }\n+    }\n+\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n // Diagnostic: break-outside-of-loop\n //\n // This diagnostic is triggered if `break` keyword is used outside of a loop."}, {"sha": "84941570630edc83b5338f0a3f58406596961ef4", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=44978acf51e25513ef8420e228221273f42abf8c", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{path::path, resolver::HasResolver, AdtId, DefWithBodyId};\n+use hir_def::{expr::Statement, path::path, resolver::HasResolver, AdtId, DefWithBodyId};\n use hir_expand::diagnostics::DiagnosticSink;\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstPtr};\n@@ -12,6 +12,7 @@ use crate::{\n     diagnostics::{\n         match_check::{is_useful, MatchCheckCtx, Matrix, PatStack, Usefulness},\n         MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, MissingPatFields,\n+        RemoveThisSemicolon,\n     },\n     utils::variant_data,\n     ApplicationTy, InferenceResult, Ty, TypeCtor,\n@@ -76,8 +77,12 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             }\n         }\n         let body_expr = &body[body.body_expr];\n-        if let Expr::Block { tail: Some(t), .. } = body_expr {\n-            self.validate_results_in_tail_expr(body.body_expr, *t, db);\n+        if let Expr::Block { statements, tail, .. } = body_expr {\n+            if let Some(t) = tail {\n+                self.validate_results_in_tail_expr(body.body_expr, *t, db);\n+            } else if let Some(Statement::Expr(id)) = statements.last() {\n+                self.validate_missing_tail_expr(body.body_expr, *id, db);\n+            }\n         }\n     }\n \n@@ -317,6 +322,34 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             }\n         }\n     }\n+\n+    fn validate_missing_tail_expr(\n+        &mut self,\n+        body_id: ExprId,\n+        possible_tail_id: ExprId,\n+        db: &dyn HirDatabase,\n+    ) {\n+        let mismatch = match self.infer.type_mismatch_for_expr(body_id) {\n+            Some(m) => m,\n+            None => return,\n+        };\n+\n+        let possible_tail_ty = match self.infer.type_of_expr.get(possible_tail_id) {\n+            Some(ty) => ty,\n+            None => return,\n+        };\n+\n+        if mismatch.actual != Ty::unit() || mismatch.expected != *possible_tail_ty {\n+            return;\n+        }\n+\n+        let (_, source_map) = db.body_with_source_map(self.owner.into());\n+\n+        if let Ok(source_ptr) = source_map.expr_syntax(possible_tail_id) {\n+            self.sink\n+                .push(RemoveThisSemicolon { file: source_ptr.file_id, expr: source_ptr.value });\n+        }\n+    }\n }\n \n pub fn record_literal_missing_fields("}, {"sha": "049f808dc60089e2a81f49414a51a931510eb2cc", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=44978acf51e25513ef8420e228221273f42abf8c", "patch": "@@ -131,6 +131,9 @@ pub(crate) fn diagnostics(\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n+        .on::<hir::diagnostics::RemoveThisSemicolon, _>(|d| {\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n+        })\n         .on::<hir::diagnostics::IncorrectCase, _>(|d| {\n             res.borrow_mut().push(warning_with_fix(d, &sema));\n         })"}, {"sha": "13240672f0b79ea0862b4c09ecee2652def55ed8", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44978acf51e25513ef8420e228221273f42abf8c/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=44978acf51e25513ef8420e228221273f42abf8c", "patch": "@@ -4,7 +4,7 @@ use hir::{\n     db::AstDatabase,\n     diagnostics::{\n         Diagnostic, IncorrectCase, MissingFields, MissingOkInTailExpr, NoSuchField,\n-        UnresolvedModule,\n+        RemoveThisSemicolon, UnresolvedModule,\n     },\n     HasSource, HirDisplay, InFile, Semantics, VariantDef,\n };\n@@ -105,6 +105,27 @@ impl DiagnosticWithFix for MissingOkInTailExpr {\n     }\n }\n \n+impl DiagnosticWithFix for RemoveThisSemicolon {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n+        let root = sema.db.parse_or_expand(self.file)?;\n+\n+        let semicolon = self\n+            .expr\n+            .to_node(&root)\n+            .syntax()\n+            .parent()\n+            .and_then(ast::ExprStmt::cast)\n+            .and_then(|expr| expr.semicolon_token())?\n+            .text_range();\n+\n+        let edit = TextEdit::delete(semicolon);\n+        let source_change =\n+            SourceFileEdit { file_id: self.file.original_file(sema.db), edit }.into();\n+\n+        Some(Fix::new(\"Remove this semicolon\", source_change, semicolon))\n+    }\n+}\n+\n impl DiagnosticWithFix for IncorrectCase {\n     fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n         let root = sema.db.parse_or_expand(self.file)?;"}]}