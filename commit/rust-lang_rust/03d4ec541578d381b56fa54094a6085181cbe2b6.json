{"sha": "03d4ec541578d381b56fa54094a6085181cbe2b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZDRlYzU0MTU3OGQzODFiNTZmYTU0MDk0YTYwODUxODFjYmUyYjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-06T22:39:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-06T22:40:30Z"}, "message": "Fix next-node-id \"hackasaurus\" in comp/front/test.rs.", "tree": {"sha": "18144bbb8a61a0ee41d8ef2a8fd5118c2aba2370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18144bbb8a61a0ee41d8ef2a8fd5118c2aba2370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03d4ec541578d381b56fa54094a6085181cbe2b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03d4ec541578d381b56fa54094a6085181cbe2b6", "html_url": "https://github.com/rust-lang/rust/commit/03d4ec541578d381b56fa54094a6085181cbe2b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03d4ec541578d381b56fa54094a6085181cbe2b6/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89efb7d9810643eb1b25c04e63203b591915448f", "url": "https://api.github.com/repos/rust-lang/rust/commits/89efb7d9810643eb1b25c04e63203b591915448f", "html_url": "https://github.com/rust-lang/rust/commit/89efb7d9810643eb1b25c04e63203b591915448f"}], "stats": {"total": 62, "additions": 25, "deletions": 37}, "files": [{"sha": "d128cdfac146a3020557a2e58eed62982276899a", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 25, "deletions": 37, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/03d4ec541578d381b56fa54094a6085181cbe2b6/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d4ec541578d381b56fa54094a6085181cbe2b6/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=03d4ec541578d381b56fa54094a6085181cbe2b6", "patch": "@@ -19,7 +19,6 @@ type test = {span: span, path: [ast::ident], ignore: bool, should_fail: bool};\n type test_ctxt =\n     @{sess: session::session,\n       crate: @ast::crate,\n-      next_node_id: node_id_gen,\n       mutable path: [ast::ident],\n       mutable testfns: [test]};\n \n@@ -28,22 +27,9 @@ type test_ctxt =\n fn modify_for_testing(sess: session::session,\n                       crate: @ast::crate) -> @ast::crate {\n \n-    // FIXME: This hackasaurus assumes that 200000 is a safe number to start\n-    // generating node_ids at (which is totally not the case). pauls is going\n-    // to land a patch that puts parse_sess into session, which will give us\n-    // access to the real next node_id.\n-    let next_node_id = @mutable 200000;\n-    let next_node_id_fn =\n-        bind fn (next_node_id: @mutable ast::node_id) -> ast::node_id {\n-                  let this_node_id = *next_node_id;\n-                  *next_node_id += 1;\n-                  ret this_node_id;\n-              }(next_node_id);\n-\n     let cx: test_ctxt =\n         @{sess: sess,\n           crate: crate,\n-          next_node_id: next_node_id_fn,\n           mutable path: [],\n           mutable testfns: []};\n \n@@ -187,7 +173,7 @@ fn mk_test_module(cx: test_ctxt) -> @ast::item {\n     let item: ast::item =\n         {ident: \"__test\",\n          attrs: [],\n-         id: cx.next_node_id(),\n+         id: cx.sess.next_node_id(),\n          node: item_,\n          span: dummy_sp()};\n \n@@ -216,7 +202,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n     let test_descs = mk_test_desc_vec(cx);\n \n     let body_: ast::blk_ =\n-        default_block([], option::some(test_descs), cx.next_node_id());\n+        default_block([], option::some(test_descs), cx.sess.next_node_id());\n     let body = nospan(body_);\n \n     let fn_ = {decl: decl, proto: proto, body: body};\n@@ -225,7 +211,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n     let item: ast::item =\n         {ident: \"tests\",\n          attrs: [],\n-         id: cx.next_node_id(),\n+         id: cx.sess.next_node_id(),\n          node: item_,\n          span: dummy_sp()};\n     ret @item;\n@@ -240,15 +226,15 @@ fn mk_test_desc_vec_ty(cx: test_ctxt) -> @ast::ty {\n                 idents: [\"std\", \"test\", \"default_test_fn\"],\n                 types: []\n             }),\n-            cx.next_node_id()));\n+            cx.sess.next_node_id()));\n \n     let test_desc_ty_path =\n         @nospan({global: false,\n                  idents: [\"std\", \"test\", \"test_desc\"],\n                  types: [@test_fn_ty]});\n \n     let test_desc_ty: ast::ty =\n-        nospan(ast::ty_path(test_desc_ty_path, cx.next_node_id()));\n+        nospan(ast::ty_path(test_desc_ty_path, cx.sess.next_node_id()));\n \n     let vec_mt: ast::mt = {ty: @test_desc_ty, mut: ast::imm};\n \n@@ -263,7 +249,7 @@ fn mk_test_desc_vec(cx: test_ctxt) -> @ast::expr {\n         descs += [mk_test_desc_rec(cx, test_)];\n     }\n \n-    ret @{id: cx.next_node_id(),\n+    ret @{id: cx.sess.next_node_id(),\n           node: ast::expr_vec(descs, ast::imm),\n           span: dummy_sp()};\n }\n@@ -277,7 +263,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let name_lit: ast::lit =\n         nospan(ast::lit_str(ast_util::path_name_i(path)));\n     let name_expr: ast::expr =\n-        {id: cx.next_node_id(),\n+        {id: cx.sess.next_node_id(),\n          node: ast::expr_lit(@name_lit),\n          span: span};\n \n@@ -287,7 +273,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let fn_path = @nospan({global: false, idents: path, types: []});\n \n     let fn_expr: ast::expr =\n-        {id: cx.next_node_id(),\n+        {id: cx.sess.next_node_id(),\n          node: ast::expr_path(fn_path),\n          span: span};\n \n@@ -299,7 +285,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let ignore_lit: ast::lit = nospan(ast::lit_bool(test.ignore));\n \n     let ignore_expr: ast::expr =\n-        {id: cx.next_node_id(),\n+        {id: cx.sess.next_node_id(),\n          node: ast::expr_lit(@ignore_lit),\n          span: span};\n \n@@ -309,7 +295,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let fail_lit: ast::lit = nospan(ast::lit_bool(test.should_fail));\n \n     let fail_expr: ast::expr =\n-        {id: cx.next_node_id(),\n+        {id: cx.sess.next_node_id(),\n          node: ast::expr_lit(@fail_lit),\n          span: span};\n \n@@ -320,7 +306,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n         ast::expr_rec([name_field, fn_field, ignore_field, fail_field],\n             option::none);\n     let desc_rec: ast::expr =\n-        {id: cx.next_node_id(), node: desc_rec_, span: span};\n+        {id: cx.sess.next_node_id(), node: desc_rec_, span: span};\n     ret @desc_rec;\n }\n \n@@ -330,13 +316,13 @@ fn mk_test_wrapper(cx: test_ctxt,\n                    fn_path_expr: ast::expr,\n                    span: span) -> @ast::expr {\n     let call_expr: ast::expr = {\n-        id: cx.next_node_id(),\n+        id: cx.sess.next_node_id(),\n         node: ast::expr_call(@fn_path_expr, [], false),\n         span: span\n     };\n \n     let call_stmt: ast::stmt = nospan(\n-        ast::stmt_expr(@call_expr, cx.next_node_id()));\n+        ast::stmt_expr(@call_expr, cx.sess.next_node_id()));\n \n     let wrapper_decl: ast::fn_decl = {\n         inputs: [],\n@@ -351,7 +337,7 @@ fn mk_test_wrapper(cx: test_ctxt,\n         view_items: [],\n         stmts: [@call_stmt],\n         expr: option::none,\n-        id: cx.next_node_id(),\n+        id: cx.sess.next_node_id(),\n         rules: ast::default_blk\n     });\n \n@@ -362,7 +348,7 @@ fn mk_test_wrapper(cx: test_ctxt,\n     };\n \n     let wrapper_expr: ast::expr = {\n-        id: cx.next_node_id(),\n+        id: cx.sess.next_node_id(),\n         node: ast::expr_fn(wrapper_fn),\n         span: span\n     };\n@@ -379,7 +365,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n         {mode: ast::by_val,\n          ty: @args_ty,\n          ident: \"args\",\n-         id: cx.next_node_id()};\n+         id: cx.sess.next_node_id()};\n \n     let ret_ty = nospan(ast::ty_nil);\n \n@@ -396,7 +382,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n \n     let body_: ast::blk_ =\n         default_block([], option::some(test_main_call_expr),\n-                      cx.next_node_id());\n+                      cx.sess.next_node_id());\n     let body = {node: body_, span: dummy_sp()};\n \n     let fn_ = {decl: decl, proto: proto, body: body};\n@@ -405,7 +391,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n     let item: ast::item =\n         {ident: \"main\",\n          attrs: [],\n-         id: cx.next_node_id(),\n+         id: cx.sess.next_node_id(),\n          node: item_,\n          span: dummy_sp()};\n     ret @item;\n@@ -420,7 +406,7 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n     let args_path_expr_: ast::expr_ = ast::expr_path(args_path);\n \n     let args_path_expr: ast::expr =\n-        {id: cx.next_node_id(), node: args_path_expr_, span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), node: args_path_expr_, span: dummy_sp()};\n \n     // Call __test::test to generate the vector of test_descs\n     let test_path =\n@@ -429,12 +415,12 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n     let test_path_expr_: ast::expr_ = ast::expr_path(test_path);\n \n     let test_path_expr: ast::expr =\n-        {id: cx.next_node_id(), node: test_path_expr_, span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), node: test_path_expr_, span: dummy_sp()};\n \n     let test_call_expr_ = ast::expr_call(@test_path_expr, [], false);\n \n     let test_call_expr: ast::expr =\n-        {id: cx.next_node_id(), node: test_call_expr_, span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), node: test_call_expr_, span: dummy_sp()};\n \n     // Call std::test::test_main\n     let test_main_path =\n@@ -445,14 +431,16 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n     let test_main_path_expr_: ast::expr_ = ast::expr_path(test_main_path);\n \n     let test_main_path_expr: ast::expr =\n-        {id: cx.next_node_id(), node: test_main_path_expr_, span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), node: test_main_path_expr_,\n+         span: dummy_sp()};\n \n     let test_main_call_expr_: ast::expr_ =\n         ast::expr_call(@test_main_path_expr,\n                        [@args_path_expr, @test_call_expr], false);\n \n     let test_main_call_expr: ast::expr =\n-        {id: cx.next_node_id(), node: test_main_call_expr_, span: dummy_sp()};\n+        {id: cx.sess.next_node_id(), node: test_main_call_expr_,\n+         span: dummy_sp()};\n \n     ret @test_main_call_expr;\n }"}]}