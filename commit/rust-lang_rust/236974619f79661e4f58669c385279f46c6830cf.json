{"sha": "236974619f79661e4f58669c385279f46c6830cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNjk3NDYxOWY3OTY2MWU0ZjU4NjY5YzM4NTI3OWY0NmM2ODMwY2Y=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-08T13:24:33Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-08T13:24:33Z"}, "message": "normalize associated types in both self_ty and self_arg_ty\n\nI was only doing it for self_arg_ty, and ended up causing\nrun-pass/associated-types-projection-from-known-type-in-impl.rs to fail.", "tree": {"sha": "84cec757327fd70f493ef99ecebaa4c4ae5d1609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84cec757327fd70f493ef99ecebaa4c4ae5d1609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/236974619f79661e4f58669c385279f46c6830cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/236974619f79661e4f58669c385279f46c6830cf", "html_url": "https://github.com/rust-lang/rust/commit/236974619f79661e4f58669c385279f46c6830cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/236974619f79661e4f58669c385279f46c6830cf/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3902643c27e961baf79240f0d489f354ea880ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3902643c27e961baf79240f0d489f354ea880ffb", "html_url": "https://github.com/rust-lang/rust/commit/3902643c27e961baf79240f0d489f354ea880ffb"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "45e8d2ffb851035a666477a4cd51606b3a6e325c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/236974619f79661e4f58669c385279f46c6830cf/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236974619f79661e4f58669c385279f46c6830cf/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=236974619f79661e4f58669c385279f46c6830cf", "patch": "@@ -469,10 +469,22 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n         debug!(\"check_method_receiver: sig={:?}\", sig);\n \n+        let self_ty = fcx.normalize_associated_types_in(span, &self_ty);\n+        let self_ty = fcx.liberate_late_bound_regions(\n+            method.def_id,\n+            &ty::Binder(self_ty)\n+        );\n+\n         let self_arg_ty = sig.inputs()[0];\n \n         let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n         let eq = |expected, actual| fcx.at(&cause, fcx.param_env).eq(expected, actual);\n+        let self_arg_ty = fcx.normalize_associated_types_in(span, &self_arg_ty);\n+        let self_arg_ty = fcx.liberate_late_bound_regions(\n+            method.def_id,\n+            &ty::Binder(self_arg_ty)\n+        );\n+\n         let mut autoderef = fcx.autoderef(span, self_arg_ty);\n \n         loop {\n@@ -484,7 +496,6 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                     autoderef.finalize();\n                     break\n                 }\n-\n             } else {\n                 fcx.tcx.sess.diagnostic().mut_span_err(span, &format!(\"invalid `self` type: {:?}\", self_arg_ty))\n                 .note(&format!(\"type must be `{:?}` or a type that dereferences to it`\", self_ty))"}]}