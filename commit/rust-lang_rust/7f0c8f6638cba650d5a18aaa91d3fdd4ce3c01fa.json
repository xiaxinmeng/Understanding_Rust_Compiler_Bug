{"sha": "7f0c8f6638cba650d5a18aaa91d3fdd4ce3c01fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMGM4ZjY2MzhjYmE2NTBkNWExOGFhYTkxZDNmZGQ0Y2UzYzAxZmE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-22T14:45:21Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-29T21:02:40Z"}, "message": "Review feedback: Remove a fixme/tbd note and just add a note for the post-NLL future.\n\nDriveby: just inline the two-line `fn inject_borrow` into its one call\nsite and remove its definition.", "tree": {"sha": "c7052ea0dc04f8b965ee636d4611fb216346f427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7052ea0dc04f8b965ee636d4611fb216346f427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f0c8f6638cba650d5a18aaa91d3fdd4ce3c01fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0c8f6638cba650d5a18aaa91d3fdd4ce3c01fa", "html_url": "https://github.com/rust-lang/rust/commit/7f0c8f6638cba650d5a18aaa91d3fdd4ce3c01fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f0c8f6638cba650d5a18aaa91d3fdd4ce3c01fa/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4a5fa293453c4ff9339f11c47eb7262925f7c12", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a5fa293453c4ff9339f11c47eb7262925f7c12", "html_url": "https://github.com/rust-lang/rust/commit/a4a5fa293453c4ff9339f11c47eb7262925f7c12"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "7555827ff01ec4441f65ae158d4935c123002d78", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7f0c8f6638cba650d5a18aaa91d3fdd4ce3c01fa/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0c8f6638cba650d5a18aaa91d3fdd4ce3c01fa/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=7f0c8f6638cba650d5a18aaa91d3fdd4ce3c01fa", "patch": "@@ -30,16 +30,6 @@ mod simplify;\n mod test;\n mod util;\n \n-/// Injects a borrow of `place`. The region is unknown at this point; we rely on NLL\n-/// inference to find an appropriate one. Therefore you can only call this when NLL\n-/// is turned on.\n-fn inject_borrow<'a, 'gcx, 'tcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n-                                 place: Place<'tcx>)\n-                                 -> Rvalue<'tcx> {\n-    assert!(tcx.use_mir_borrowck());\n-    Rvalue::Ref(tcx.types.re_empty, BorrowKind::Shared, place)\n-}\n-\n /// ArmHasGuard is isomorphic to a boolean flag. It indicates whether\n /// a match arm has a guard expression attached to it.\n #[derive(Copy, Clone, Debug)]\n@@ -67,8 +57,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // of `discriminant_place`, specifically by applying `Rvalue::Discriminant`\n         // (which will work regardless of type) and storing the result in a temp.\n         //\n-        // FIXME: would just the borrow into `borrowed_input_temp`\n-        // also achieve the desired effect here? TBD.\n+        // NOTE: Under NLL, the above issue should no longer occur because it\n+        // injects a borrow of the matched input, which should have the same effect\n+        // as eddyb's hack. Once NLL is the default, we can remove the hack.\n+\n         let dummy_source_info = self.source_info(span);\n         let dummy_access = Rvalue::Discriminant(discriminant_place.clone());\n         let dummy_ty = dummy_access.ty(&self.local_decls, tcx);\n@@ -77,7 +69,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         let source_info = self.source_info(span);\n         let borrowed_input_temp = if tcx.generate_borrow_of_any_match_input() {\n-            let borrowed_input = inject_borrow(tcx, discriminant_place.clone());\n+            // The region is unknown at this point; we rely on NLL\n+            // inference to find an appropriate one. Therefore you can\n+            // only use this when NLL is turned on.\n+            assert!(tcx.use_mir_borrowck());\n+            let borrowed_input =\n+                Rvalue::Ref(tcx.types.re_empty, BorrowKind::Shared, discriminant_place.clone());\n             let borrowed_input_ty = borrowed_input.ty(&self.local_decls, tcx);\n             let borrowed_input_temp = self.temp(borrowed_input_ty, span);\n             self.cfg.push_assign(block, source_info, &borrowed_input_temp, borrowed_input);"}]}