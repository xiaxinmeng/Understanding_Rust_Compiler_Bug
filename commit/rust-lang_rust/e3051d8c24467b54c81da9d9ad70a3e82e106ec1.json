{"sha": "e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMDUxZDhjMjQ0NjdiNTRjODFkYTlkOWFkNzBhM2U4MmUxMDZlYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-16T20:43:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-16T20:43:27Z"}, "message": "Auto merge of #78028 - JohnTitor:rollup-jt3hikb, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #75209 (Suggest imports of unresolved macros)\n - #77547 (stabilize union with 'ManuallyDrop' fields and 'impl Drop for Union')\n - #77827 (Don't link to nightly primitives on stable channel)\n - #77855 (resolve: further improvements to \"try using the enum's variant\" diagnostic)\n - #77900 (Use fdatasync for File::sync_data on more OSes)\n - #77925 (Suggest minimal subset features in `incomplete_features` lint)\n - #77971 (Deny broken intra-doc links in linkchecker)\n - #77991 (Bump backtrace-rs)\n - #77992 (instrument-coverage: try our best to not ICE)\n - #78013 (Fix sidebar scroll on mobile devices)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "873bd9741598b37674e9fbf07a65d6e2f39d2d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/873bd9741598b37674e9fbf07a65d6e2f39d2d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "html_url": "https://github.com/rust-lang/rust/commit/e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a51185fd4600e96cc79a3db9da3c4bf927f2281", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a51185fd4600e96cc79a3db9da3c4bf927f2281", "html_url": "https://github.com/rust-lang/rust/commit/5a51185fd4600e96cc79a3db9da3c4bf927f2281"}, {"sha": "001fcd96d5b88a541df4657f2df0d5125023f13b", "url": "https://api.github.com/repos/rust-lang/rust/commits/001fcd96d5b88a541df4657f2df0d5125023f13b", "html_url": "https://github.com/rust-lang/rust/commit/001fcd96d5b88a541df4657f2df0d5125023f13b"}], "stats": {"total": 942, "additions": 667, "deletions": 275}, "files": [{"sha": "0d2170a9927472103350cfb6db2d568e0a426da5", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1744,6 +1744,10 @@ dependencies = [\n [[package]]\n name = \"linkchecker\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"once_cell\",\n+ \"regex\",\n+]\n \n [[package]]\n name = \"linked-hash-map\""}, {"sha": "26d35f2620cb26ca249182672c6d0442bfe280ab", "filename": "compiler/rustc_error_codes/src/error_codes/E0660.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -9,4 +9,4 @@ llvm_asm!(\"nop\" \"nop\");\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "0b8ba7fbbedac76d1caf2fa17347e1eae0c07800", "filename": "compiler/rustc_error_codes/src/error_codes/E0661.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -10,4 +10,4 @@ llvm_asm!(\"nop\" : \"r\"(a));\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "8c1bab8d0410da5e0fcaef32ac3161488879cd65", "filename": "compiler/rustc_error_codes/src/error_codes/E0662.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -13,4 +13,4 @@ llvm_asm!(\"xor %eax, %eax\"\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "53ffd3373a51c30cd43988ac59c2ae232523f637", "filename": "compiler/rustc_error_codes/src/error_codes/E0663.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -13,4 +13,4 @@ llvm_asm!(\"xor %eax, %eax\"\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "f8e72cd330a31d91b2fcfc6816d304a02f2b159c", "filename": "compiler/rustc_error_codes/src/error_codes/E0664.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -13,4 +13,4 @@ llvm_asm!(\"mov $$0x200, %eax\"\n Considering that this would be a long explanation, we instead recommend you\n take a look at the [`llvm_asm`] chapter of the Unstable book:\n \n-[llvm_asm]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html\n+[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "a7db9199665ee5e2db4f0e0ec1873d25534a4dad", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -2288,12 +2288,20 @@ impl EarlyLintPass for IncompleteFeatures {\n                             n, n,\n                         ));\n                     }\n+                    if HAS_MIN_FEATURES.contains(&name) {\n+                        builder.help(&format!(\n+                            \"consider using `min_{}` instead, which is more stable and complete\",\n+                            name,\n+                        ));\n+                    }\n                     builder.emit();\n                 })\n             });\n     }\n }\n \n+const HAS_MIN_FEATURES: &[Symbol] = &[sym::const_generics, sym::specialization];\n+\n declare_lint! {\n     /// The `invalid_value` lint detects creating a value that is not valid,\n     /// such as a NULL reference."}, {"sha": "6824c73ab60a05f69ffa00f1813b6c709469890c", "filename": "compiler/rustc_mir/src/transform/instrument_coverage.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -22,9 +22,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::DefId;\n use rustc_span::source_map::original_sp;\n-use rustc_span::{\n-    BytePos, CharPos, FileName, Pos, RealFileName, SourceFile, Span, Symbol, SyntaxContext,\n-};\n+use rustc_span::{BytePos, CharPos, Pos, SourceFile, Span, Symbol, SyntaxContext};\n \n use std::cmp::Ordering;\n \n@@ -549,13 +547,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let mir_body = &self.mir_body;\n         let body_span = self.body_span();\n         let source_file = source_map.lookup_source_file(body_span.lo());\n-        let file_name = match &source_file.name {\n-            FileName::Real(RealFileName::Named(path)) => Symbol::intern(&path.to_string_lossy()),\n-            _ => bug!(\n-                \"source_file.name should be a RealFileName, but it was: {:?}\",\n-                source_file.name\n-            ),\n-        };\n+        let file_name = Symbol::intern(&source_file.name.to_string());\n \n         debug!(\"instrumenting {:?}, span: {}\", def_id, source_map.span_to_string(body_span));\n "}, {"sha": "c9497f2a5b2b058a3b89150d82e556515a442461", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -13,15 +13,13 @@ use rustc_hir::{Generics, HirId, Item, StructField, TraitRef, Ty, TyKind, Varian\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{DeprecationEntry, Index};\n-use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{self, query::Providers, TyCtxt};\n use rustc_session::lint;\n use rustc_session::lint::builtin::INEFFECTIVE_UNSTABLE_TRAIT_IMPL;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::Span;\n-use rustc_trait_selection::traits::misc::can_type_implement_copy;\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::cmp::Ordering;\n use std::mem::replace;\n@@ -711,27 +709,35 @@ impl Visitor<'tcx> for Checker<'tcx> {\n             // so semi-randomly perform it here in stability.rs\n             hir::ItemKind::Union(..) if !self.tcx.features().untagged_unions => {\n                 let def_id = self.tcx.hir().local_def_id(item.hir_id);\n-                let adt_def = self.tcx.adt_def(def_id);\n                 let ty = self.tcx.type_of(def_id);\n+                let (adt_def, substs) = match ty.kind() {\n+                    ty::Adt(adt_def, substs) => (adt_def, substs),\n+                    _ => bug!(),\n+                };\n \n-                if adt_def.has_dtor(self.tcx) {\n-                    feature_err(\n-                        &self.tcx.sess.parse_sess,\n-                        sym::untagged_unions,\n-                        item.span,\n-                        \"unions with `Drop` implementations are unstable\",\n-                    )\n-                    .emit();\n-                } else {\n-                    let param_env = self.tcx.param_env(def_id);\n-                    if can_type_implement_copy(self.tcx, param_env, ty).is_err() {\n-                        feature_err(\n-                            &self.tcx.sess.parse_sess,\n-                            sym::untagged_unions,\n-                            item.span,\n-                            \"unions with non-`Copy` fields are unstable\",\n-                        )\n-                        .emit();\n+                // Non-`Copy` fields are unstable, except for `ManuallyDrop`.\n+                let param_env = self.tcx.param_env(def_id);\n+                for field in &adt_def.non_enum_variant().fields {\n+                    let field_ty = field.ty(self.tcx, substs);\n+                    if !field_ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n+                        && !field_ty.is_copy_modulo_regions(self.tcx.at(DUMMY_SP), param_env)\n+                    {\n+                        if field_ty.needs_drop(self.tcx, param_env) {\n+                            // Avoid duplicate error: This will error later anyway because fields\n+                            // that need drop are not allowed.\n+                            self.tcx.sess.delay_span_bug(\n+                                item.span,\n+                                \"union should have been rejected due to potentially dropping field\",\n+                            );\n+                        } else {\n+                            feature_err(\n+                                &self.tcx.sess.parse_sess,\n+                                sym::untagged_unions,\n+                                self.tcx.def_span(field.did),\n+                                \"unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\",\n+                            )\n+                            .emit();\n+                        }\n                     }\n                 }\n             }"}, {"sha": "33ab09a8f4280ddd5ada23d2b22d8a547275be00", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -922,6 +922,17 @@ impl<'a> Resolver<'a> {\n         );\n         self.add_typo_suggestion(err, suggestion, ident.span);\n \n+        let import_suggestions = self.lookup_import_candidates(\n+            ident,\n+            Namespace::MacroNS,\n+            parent_scope,\n+            |res| match res {\n+                Res::Def(DefKind::Macro(MacroKind::Bang), _) => true,\n+                _ => false,\n+            },\n+        );\n+        show_candidates(err, None, &import_suggestions, false, true);\n+\n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n             let msg = format!(\"unsafe traits like `{}` should be implemented explicitly\", ident);\n             err.span_note(ident.span, &msg);"}, {"sha": "c24b383f3b81171d39eea893f9137cad1f19d333", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 88, "deletions": 62, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1330,58 +1330,17 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         let suggest_only_tuple_variants =\n             matches!(source, PathSource::TupleStruct(..)) || source.is_call();\n-        let mut suggestable_variants = if suggest_only_tuple_variants {\n+        if suggest_only_tuple_variants {\n             // Suggest only tuple variants regardless of whether they have fields and do not\n             // suggest path with added parenthesis.\n-            variants\n+            let mut suggestable_variants = variants\n                 .iter()\n                 .filter(|(.., kind)| *kind == CtorKind::Fn)\n                 .map(|(variant, ..)| path_names_to_string(variant))\n-                .collect::<Vec<_>>()\n-        } else {\n-            variants\n-                .iter()\n-                .filter(|(_, def_id, kind)| {\n-                    // Suggest only variants that have no fields (these can definitely\n-                    // be constructed).\n-                    let has_fields =\n-                        self.r.field_names.get(&def_id).map(|f| f.is_empty()).unwrap_or(false);\n-                    match kind {\n-                        CtorKind::Const => true,\n-                        CtorKind::Fn | CtorKind::Fictive if has_fields => true,\n-                        _ => false,\n-                    }\n-                })\n-                .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n-                .map(|(variant_str, kind)| {\n-                    // Add constructor syntax where appropriate.\n-                    match kind {\n-                        CtorKind::Const => variant_str,\n-                        CtorKind::Fn => format!(\"({}())\", variant_str),\n-                        CtorKind::Fictive => format!(\"({} {{}})\", variant_str),\n-                    }\n-                })\n-                .collect::<Vec<_>>()\n-        };\n-\n-        let non_suggestable_variant_count = variants.len() - suggestable_variants.len();\n+                .collect::<Vec<_>>();\n \n-        if !suggestable_variants.is_empty() {\n-            let msg = if non_suggestable_variant_count == 0 && suggestable_variants.len() == 1 {\n-                \"try using the enum's variant\"\n-            } else {\n-                \"try using one of the enum's variants\"\n-            };\n+            let non_suggestable_variant_count = variants.len() - suggestable_variants.len();\n \n-            err.span_suggestions(\n-                span,\n-                msg,\n-                suggestable_variants.drain(..),\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n-\n-        if suggest_only_tuple_variants {\n             let source_msg = if source.is_call() {\n                 \"to construct\"\n             } else if matches!(source, PathSource::TupleStruct(..)) {\n@@ -1390,6 +1349,21 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 unreachable!()\n             };\n \n+            if !suggestable_variants.is_empty() {\n+                let msg = if non_suggestable_variant_count == 0 && suggestable_variants.len() == 1 {\n+                    format!(\"try {} the enum's variant\", source_msg)\n+                } else {\n+                    format!(\"try {} one of the enum's variants\", source_msg)\n+                };\n+\n+                err.span_suggestions(\n+                    span,\n+                    &msg,\n+                    suggestable_variants.drain(..),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+\n             // If the enum has no tuple variants..\n             if non_suggestable_variant_count == variants.len() {\n                 err.help(&format!(\"the enum has no tuple variants {}\", source_msg));\n@@ -1408,24 +1382,76 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 ));\n             }\n         } else {\n-            let made_suggestion = non_suggestable_variant_count != variants.len();\n-            if made_suggestion {\n-                if non_suggestable_variant_count == 1 {\n-                    err.help(\n-                        \"you might have meant to use the enum's other variant that has fields\",\n-                    );\n-                } else if non_suggestable_variant_count >= 1 {\n-                    err.help(\n-                        \"you might have meant to use one of the enum's other variants that \\\n-                         have fields\",\n-                    );\n-                }\n-            } else {\n-                if non_suggestable_variant_count == 1 {\n-                    err.help(\"you might have meant to use the enum's variant\");\n-                } else if non_suggestable_variant_count >= 1 {\n-                    err.help(\"you might have meant to use one of the enum's variants\");\n+            let needs_placeholder = |def_id: DefId, kind: CtorKind| {\n+                let has_no_fields =\n+                    self.r.field_names.get(&def_id).map(|f| f.is_empty()).unwrap_or(false);\n+                match kind {\n+                    CtorKind::Const => false,\n+                    CtorKind::Fn | CtorKind::Fictive if has_no_fields => false,\n+                    _ => true,\n                 }\n+            };\n+\n+            let mut suggestable_variants = variants\n+                .iter()\n+                .filter(|(_, def_id, kind)| !needs_placeholder(*def_id, *kind))\n+                .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n+                .map(|(variant, kind)| match kind {\n+                    CtorKind::Const => variant,\n+                    CtorKind::Fn => format!(\"({}())\", variant),\n+                    CtorKind::Fictive => format!(\"({} {{}})\", variant),\n+                })\n+                .collect::<Vec<_>>();\n+\n+            if !suggestable_variants.is_empty() {\n+                let msg = if suggestable_variants.len() == 1 {\n+                    \"you might have meant to use the following enum variant\"\n+                } else {\n+                    \"you might have meant to use one of the following enum variants\"\n+                };\n+\n+                err.span_suggestions(\n+                    span,\n+                    msg,\n+                    suggestable_variants.drain(..),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+\n+            let mut suggestable_variants_with_placeholders = variants\n+                .iter()\n+                .filter(|(_, def_id, kind)| needs_placeholder(*def_id, *kind))\n+                .map(|(variant, _, kind)| (path_names_to_string(variant), kind))\n+                .filter_map(|(variant, kind)| match kind {\n+                    CtorKind::Fn => Some(format!(\"({}(/* fields */))\", variant)),\n+                    CtorKind::Fictive => Some(format!(\"({} {{ /* fields */ }})\", variant)),\n+                    _ => None,\n+                })\n+                .collect::<Vec<_>>();\n+\n+            if !suggestable_variants_with_placeholders.is_empty() {\n+                let msg = match (\n+                    suggestable_variants.is_empty(),\n+                    suggestable_variants_with_placeholders.len(),\n+                ) {\n+                    (true, 1) => \"the following enum variant is available\",\n+                    (true, _) => \"the following enum variants are available\",\n+                    (false, 1) => \"alternatively, the following enum variant is available\",\n+                    (false, _) => \"alternatively, the following enum variants are also available\",\n+                };\n+\n+                err.span_suggestions(\n+                    span,\n+                    msg,\n+                    suggestable_variants_with_placeholders.drain(..),\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n+        };\n+\n+        if def_id.is_local() {\n+            if let Some(span) = self.def_span(def_id) {\n+                err.span_note(span, \"the enum is defined here\");\n             }\n         }\n     }"}, {"sha": "3d8653b4a6a470ecd72001ecfc5c477fec151b55", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -348,8 +348,7 @@ pub(super) fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     check_packed(tcx, span, def);\n }\n \n-/// When the `#![feature(untagged_unions)]` gate is active,\n-/// check that the fields of the `union` does not contain fields that need dropping.\n+/// Check that the fields of the `union` do not need dropping.\n pub(super) fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> bool {\n     let item_type = tcx.type_of(item_def_id);\n     if let ty::Adt(def, substs) = item_type.kind() {"}, {"sha": "a6dd47bd588c882e735675a1379d2b61719fa380", "filename": "library/backtrace", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fbacktrace?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1 +1 @@\n-Subproject commit 893fbb23688e98376e54c26b59432a2966a8cc96\n+Subproject commit a6dd47bd588c882e735675a1379d2b61719fa380"}, {"sha": "c61c19cc7d1d1a3c94f080f8d7038273c132dd45", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -89,13 +89,11 @@ impl fmt::Display for AllocError {\n pub unsafe trait AllocRef {\n     /// Attempts to allocate a block of memory.\n     ///\n-    /// On success, returns a [`NonNull<[u8]>`] meeting the size and alignment guarantees of `layout`.\n+    /// On success, returns a [`NonNull<[u8]>`][NonNull] meeting the size and alignment guarantees of `layout`.\n     ///\n     /// The returned block may have a larger size than specified by `layout.size()`, and may or may\n     /// not have its contents initialized.\n     ///\n-    /// [`NonNull<[u8]>`]: NonNull\n-    ///\n     /// # Errors\n     ///\n     /// Returning `Err` indicates that either memory is exhausted or `layout` does not meet\n@@ -146,7 +144,7 @@ pub unsafe trait AllocRef {\n \n     /// Attempts to extend the memory block.\n     ///\n-    /// Returns a new [`NonNull<[u8]>`] containing a pointer and the actual size of the allocated\n+    /// Returns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\n     /// memory. The pointer is suitable for holding data described by `new_layout`. To accomplish\n     /// this, the allocator may extend the allocation referenced by `ptr` to fit the new layout.\n     ///\n@@ -158,8 +156,6 @@ pub unsafe trait AllocRef {\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n     ///\n-    /// [`NonNull<[u8]>`]: NonNull\n-    ///\n     /// # Safety\n     ///\n     /// * `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n@@ -271,7 +267,7 @@ pub unsafe trait AllocRef {\n \n     /// Attempts to shrink the memory block.\n     ///\n-    /// Returns a new [`NonNull<[u8]>`] containing a pointer and the actual size of the allocated\n+    /// Returns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\n     /// memory. The pointer is suitable for holding data described by `new_layout`. To accomplish\n     /// this, the allocator may shrink the allocation referenced by `ptr` to fit the new layout.\n     ///\n@@ -283,8 +279,6 @@ pub unsafe trait AllocRef {\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n     ///\n-    /// [`NonNull<[u8]>`]: NonNull\n-    ///\n     /// # Safety\n     ///\n     /// * `ptr` must denote a block of memory [*currently allocated*] via this allocator."}, {"sha": "3f7110b34cc67de60eb1bdc0b9ab3cbf00b89e3b", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -134,6 +134,7 @@ pub const fn identity<T>(x: T) -> T {\n /// want to accept all references that can be converted to [`&str`] as an argument.\n /// Since both [`String`] and [`&str`] implement `AsRef<str>` we can accept both as input argument.\n ///\n+/// [`&str`]: primitive@str\n /// [`Option<T>`]: Option\n /// [`Result<T, E>`]: Result\n /// [`Borrow`]: crate::borrow::Borrow"}, {"sha": "2253648ac2e0476affceca958de07ab5dbe7cd86", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -122,6 +122,9 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(iter.advance_back_by(0), Ok(()));\n     /// assert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n     /// ```\n+    ///\n+    /// [`Ok(())`]: Ok\n+    /// [`Err(k)`]: Err\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {"}, {"sha": "4af61111128e9ae635d5d9b4359afa070ffa56e3", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -289,12 +289,12 @@ pub trait Iterator {\n     /// This method will eagerly skip `n` elements by calling [`next`] up to `n`\n     /// times until [`None`] is encountered.\n     ///\n-    /// `advance_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n-    /// `n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number\n+    /// `advance_by(n)` will return [`Ok(())`][Ok] if the iterator successfully advances by\n+    /// `n` elements, or [`Err(k)`][Err] if [`None`] is encountered, where `k` is the number\n     /// of elements the iterator is advanced by before running out of elements (i.e. the\n     /// length of the iterator). Note that `k` is always less than `n`.\n     ///\n-    /// Calling `advance_by(0)` does not consume any elements and always returns [`Ok(())`].\n+    /// Calling `advance_by(0)` does not consume any elements and always returns [`Ok(())`][Ok].\n     ///\n     /// [`next`]: Iterator::next\n     ///"}, {"sha": "737a95b603b2ac37653167118d2546f2f75776b7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -131,7 +131,7 @@\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n-#![feature(untagged_unions)]\n+#![cfg_attr(bootstrap, feature(untagged_unions))]\n #![feature(unwind_attributes)]\n #![feature(variant_count)]\n #![feature(tbm_target_feature)]"}, {"sha": "825144e5a6fbed4054a52d3d14b2a4cc647e8f97", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -687,6 +687,7 @@ impl<T> Option<T> {\n     /// assert_eq!(Some(4).filter(is_even), Some(4));\n     /// ```\n     ///\n+    /// [`Some(t)`]: Some\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n     pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {"}, {"sha": "bca3be56ba5f525a7ba6364d53e7a200f02b3eac", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -229,6 +229,16 @@ pub(crate) struct FatPtr<T> {\n     pub(crate) len: usize,\n }\n \n+// Manual impl needed to avoid `T: Clone` bound.\n+impl<T> Clone for FatPtr<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+// Manual impl needed to avoid `T: Copy` bound.\n+impl<T> Copy for FatPtr<T> {}\n+\n /// Forms a raw slice from a pointer and a length.\n ///\n /// The `len` argument is the number of **elements**, not the number of bytes."}, {"sha": "6df4eb992594fc145595ed074aa7ff8f9f389e7a", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1383,7 +1383,8 @@ impl CStr {\n     /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD] and return a\n     /// [`Cow`]`::`[`Owned`]`(`[`String`]`)` with the result.\n     ///\n-    /// [`str`]: prim@str\n+    /// [`str`]: primitive@str\n+    /// [`&str`]: primitive@str\n     /// [`Borrowed`]: Cow::Borrowed\n     /// [`Owned`]: Cow::Owned\n     /// [U+FFFD]: crate::char::REPLACEMENT_CHARACTER"}, {"sha": "30e7a7f3c3b10f5600dd551803cb573fbe514b01", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -319,7 +319,7 @@\n #![feature(unsafe_block_in_unsafe_fn)]\n #![feature(unsafe_cell_get_mut)]\n #![feature(unsafe_cell_raw_get)]\n-#![feature(untagged_unions)]\n+#![cfg_attr(bootstrap, feature(untagged_unions))]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]\n #![feature(wake_trait)]"}, {"sha": "d27d6e2c5659b65944cfc3de9b2033368bb795e1", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -787,11 +787,25 @@ impl File {\n         unsafe fn os_datasync(fd: c_int) -> c_int {\n             libc::fcntl(fd, libc::F_FULLFSYNC)\n         }\n-        #[cfg(target_os = \"linux\")]\n+        #[cfg(any(\n+            target_os = \"freebsd\",\n+            target_os = \"linux\",\n+            target_os = \"android\",\n+            target_os = \"netbsd\",\n+            target_os = \"openbsd\"\n+        ))]\n         unsafe fn os_datasync(fd: c_int) -> c_int {\n             libc::fdatasync(fd)\n         }\n-        #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"linux\")))]\n+        #[cfg(not(any(\n+            target_os = \"android\",\n+            target_os = \"freebsd\",\n+            target_os = \"ios\",\n+            target_os = \"linux\",\n+            target_os = \"macos\",\n+            target_os = \"netbsd\",\n+            target_os = \"openbsd\"\n+        )))]\n         unsafe fn os_datasync(fd: c_int) -> c_int {\n             libc::fsync(fd)\n         }"}, {"sha": "ca8169e69b479f615855d0eece7e318138fcfc00", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1 +1 @@\n-Subproject commit 79ab7776929c66db83203397958fa7037d5d9a30\n+Subproject commit ca8169e69b479f615855d0eece7e318138fcfc00"}, {"sha": "d40a27dddf362537a684669241b17ff0656afd84", "filename": "src/doc/unstable-book/src/library-features/default-free-fn.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -10,6 +10,8 @@ Adds a free `default()` function to the `std::default` module.  This function\n just forwards to [`Default::default()`], but may remove repetition of the word\n \"default\" from the call site.\n \n+[`Default::default()`]: https://doc.rust-lang.org/nightly/std/default/trait.Default.html#tymethod.default\n+\n Here is an example:\n \n ```rust"}, {"sha": "32b3f69ecd4f0d3bc1cc63371ee62516fdfabf99", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -14,6 +14,7 @@ use rustc_ast::{self as ast, AttrStyle};\n use rustc_ast::{FloatTy, IntTy, UintTy};\n use rustc_attr::{Stability, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -679,9 +680,13 @@ impl Attributes {\n                                     \"../\".repeat(depth)\n                                 }\n                                 Some(&(_, _, ExternalLocation::Remote(ref s))) => s.to_string(),\n-                                Some(&(_, _, ExternalLocation::Unknown)) | None => {\n-                                    String::from(\"https://doc.rust-lang.org/nightly\")\n-                                }\n+                                Some(&(_, _, ExternalLocation::Unknown)) | None => String::from(\n+                                    if UnstableFeatures::from_environment().is_nightly_build() {\n+                                        \"https://doc.rust-lang.org/nightly\"\n+                                    } else {\n+                                        \"https://doc.rust-lang.org\"\n+                                    },\n+                                ),\n                             };\n                             // This is a primitive so the url is done \"by hand\".\n                             let tail = fragment.find('#').unwrap_or_else(|| fragment.len());"}, {"sha": "67e50bba1f2e077c0c5d4339cfe563156b35cea7", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -2716,10 +2716,6 @@ function defocusSearchBar() {\n         };\n     }\n \n-    window.onresize = function() {\n-        hideSidebar();\n-    };\n-\n     if (main) {\n         onEachLazy(main.getElementsByClassName(\"loading-content\"), function(e) {\n             e.remove();"}, {"sha": "7c1a92c79d973f297e5f690e6215f25daf90016d", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0308]: mismatched types\n   --> $DIR/match_arr_unknown_len.rs:6:9"}, {"sha": "920f8322813fee7cebbbaf1557197ebdb172330b", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(associated_type_defaults, specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:19:18"}, {"sha": "d3d06a2d834fc9951b3e81998c4414e7dc4fd762", "filename": "src/test/ui/binding/const-param.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0158]: const parameters cannot be referenced in patterns\n   --> $DIR/const-param.rs:7:9"}, {"sha": "f3edf1c350f508d992573b349066f4b91ded2ddc", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0391]: cycle detected when building specialization graph of trait `Trait`\n   --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1"}, {"sha": "99f46309bf6ff37c709a035a2961909a0f67d2e4", "filename": "src/test/ui/const-generics/defaults/wrong-order.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -14,6 +14,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "50e914185511297cc9f0ba233e74d45392f6ca32", "filename": "src/test/ui/const-generics/issues/issue-56445.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0771]: use of non-static lifetime `'a` in const generic\n   --> $DIR/issue-56445.rs:9:26"}, {"sha": "cc014ea429d5c200d4295ea93e1cf2451fde4b12", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "3a9f819a6262cb3dac1b580e63383044a09e46c9", "filename": "src/test/ui/const-generics/issues/issue-61336-1.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "883ebbef3e80dff20f507a0ffcf8620f4e327f48", "filename": "src/test/ui/const-generics/issues/issue-61336-2.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-61336-2.rs:10:5"}, {"sha": "3863da8da05484060e236e17d4e35d0d15c6eba4", "filename": "src/test/ui/const-generics/issues/issue-61336.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-61336.rs:10:5"}, {"sha": "294378a66901a4eea5790eda99b9b1c29ca30f4b", "filename": "src/test/ui/const-generics/issues/issue-61422.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "eec1b20254ed780178bc4f944e491e8fa6341b75", "filename": "src/test/ui/const-generics/issues/issue-61432.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "3a266c8e97422ae4e3bbaf6a4b8c6e4548e5cffb", "filename": "src/test/ui/const-generics/issues/issue-61747.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: constant expression depends on a generic parameter\n   --> $DIR/issue-61747.rs:8:23"}, {"sha": "8a1462c59e810fffdef71afb4d87655b667829a7", "filename": "src/test/ui/const-generics/occurs-check/unify-fixpoint.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: constant expression depends on a generic parameter\n   --> $DIR/unify-fixpoint.rs:9:32"}, {"sha": "e80821cf46a4a53287cb3ad85d7ad22ee55144c2", "filename": "src/test/ui/consts/trait_specialization.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "99ebe84cd9d83772506f5b2d7537f53c59985abd", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -68,7 +68,6 @@ enum N<F> where F: Fn() -> _ {\n \n union O<F> where F: Fn() -> _ {\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR unions with non-`Copy` fields are unstable\n     foo: F,\n }\n "}, {"sha": "ebc0883370b7d62b0a57f95132d878c23288030c", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -57,19 +57,6 @@ LL | type J = ty!(u8);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0658]: unions with non-`Copy` fields are unstable\n-  --> $DIR/bad-assoc-ty.rs:69:1\n-   |\n-LL | / union O<F> where F: Fn() -> _ {\n-LL | |\n-LL | |\n-LL | |     foo: F,\n-LL | | }\n-   | |_^\n-   |\n-   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n-   = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n-\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:1:10\n    |\n@@ -215,7 +202,7 @@ LL | union O<F, T> where F: Fn() -> T {\n    |          ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/bad-assoc-ty.rs:75:29\n+  --> $DIR/bad-assoc-ty.rs:74:29\n    |\n LL | trait P<F> where F: Fn() -> _ {\n    |                             ^ not allowed in type signatures\n@@ -226,7 +213,7 @@ LL | trait P<F, T> where F: Fn() -> T {\n    |          ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/bad-assoc-ty.rs:80:38\n+  --> $DIR/bad-assoc-ty.rs:79:38\n    |\n LL |     fn foo<F>(_: F) where F: Fn() -> _ {}\n    |                                      ^ not allowed in type signatures\n@@ -236,7 +223,7 @@ help: use type parameters instead\n LL |     fn foo<F, T>(_: F) where F: Fn() -> T {}\n    |             ^^^                         ^\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 28 previous errors\n \n-Some errors have detailed explanations: E0121, E0223, E0658.\n+Some errors have detailed explanations: E0121, E0223.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "bca493e67d5431a152685ad4302b93da8ec180ce", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -2,25 +2,30 @@ error[E0423]: expected function, tuple struct or tuple variant, found enum `Opti\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:19:13\n    |\n LL |     let x = Option(1);\n-   |             ^^^^^^ help: try using one of the enum's variants: `std::option::Option::Some`\n+   |             ^^^^^^ help: try to construct one of the enum's variants: `std::option::Option::Some`\n    |\n    = help: you might have meant to construct the enum's non-tuple variant\n \n error[E0532]: expected tuple struct or tuple variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:21:12\n    |\n LL |     if let Option(_) = x {\n-   |            ^^^^^^ help: try using one of the enum's variants: `std::option::Option::Some`\n+   |            ^^^^^^ help: try to match against one of the enum's variants: `std::option::Option::Some`\n    |\n    = help: you might have meant to match against the enum's non-tuple variant\n \n error[E0532]: expected tuple struct or tuple variant, found enum `Example`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:27:12\n    |\n LL |     if let Example(_) = y {\n-   |            ^^^^^^^ help: try using one of the enum's variants: `Example::Ex`\n+   |            ^^^^^^^ help: try to match against one of the enum's variants: `Example::Ex`\n    |\n    = help: you might have meant to match against the enum's non-tuple variant\n+note: the enum is defined here\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:1:1\n+   |\n+LL | enum Example { Ex(String), NotEx }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found enum `Void`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:31:13\n@@ -29,6 +34,11 @@ LL |     let y = Void();\n    |             ^^^^\n    |\n    = help: the enum has no tuple variants to construct\n+note: the enum is defined here\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:3:1\n+   |\n+LL | enum Void {}\n+   | ^^^^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found enum `ManyVariants`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:33:13\n@@ -38,6 +48,17 @@ LL |     let z = ManyVariants();\n    |\n    = help: the enum has no tuple variants to construct\n    = help: you might have meant to construct one of the enum's non-tuple variants\n+note: the enum is defined here\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:5:1\n+   |\n+LL | / enum ManyVariants {\n+LL | |     One,\n+LL | |     Two,\n+LL | |     Three,\n+...  |\n+LL | |     Ten,\n+LL | | }\n+   | |_^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "6d0cd101dbc809a47b98d845f9419b9d81a8fbcb", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![feature(generators, generator_trait, untagged_unions)]\n+#![feature(generators, generator_trait)]\n #![feature(bindings_after_at)]\n \n #![allow(unused_assignments)]"}, {"sha": "5a9965db5ed47a5913ce0fa728b1798e79de2264", "filename": "src/test/ui/dropck/dropck-union.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,5 +1,3 @@\n-#![feature(untagged_unions)]\n-\n use std::cell::Cell;\n use std::ops::Deref;\n use std::mem::ManuallyDrop;"}, {"sha": "854e29385a81bcc04785808f7410b4110d4d3d97", "filename": "src/test/ui/dropck/dropck-union.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `v` does not live long enough\n-  --> $DIR/dropck-union.rs:39:18\n+  --> $DIR/dropck-union.rs:37:18\n    |\n LL |     v.0.set(Some(&v));\n    |                  ^^ borrowed value does not live long enough"}, {"sha": "700f6616af40ff02586e2c66752b0d326aa32ef1", "filename": "src/test/ui/empty/empty-macro-use.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fempty%2Fempty-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fempty%2Fempty-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-macro-use.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -3,6 +3,9 @@ error: cannot find macro `macro_two` in this scope\n    |\n LL |     macro_two!();\n    |     ^^^^^^^^^\n+   |\n+   = note: consider importing this macro:\n+           two_macros::macro_two\n \n error: aborting due to previous error\n "}, {"sha": "be7b95465a5f7db77f87023d7ac35bfb8c8c8c06", "filename": "src/test/ui/error-codes/E0520.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0520]: `fly` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/E0520.rs:17:5"}, {"sha": "356e4f36042ae5005c7bcf051a36f4d7e2d497c9", "filename": "src/test/ui/error-codes/E0730.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0730]: cannot pattern-match on an array without a fixed length\n   --> $DIR/E0730.rs:6:9"}, {"sha": "b184b59981701acd5ed4f5cfec2a754ca936f826", "filename": "src/test/ui/error-codes/E0771.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0771]: use of non-static lifetime `'a` in const generic\n   --> $DIR/E0771.rs:4:41"}, {"sha": "f5f9631c3bcf9af99af2a4cdf279cb1b9ce8dbef", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n union U1 { // OK\n     a: u8,\n }\n@@ -6,15 +8,23 @@ union U2<T: Copy> { // OK\n     a: T,\n }\n \n-union U3 { //~ ERROR unions with non-`Copy` fields are unstable\n+union U22<T> { // OK\n+    a: std::mem::ManuallyDrop<T>,\n+}\n+\n+union U3 {\n     a: String, //~ ERROR unions may not contain fields that need dropping\n }\n \n-union U4<T> { //~ ERROR unions with non-`Copy` fields are unstable\n+union U32 { // field that does not drop but is not `Copy`, either -- this is the real feature gate test!\n+    a: std::cell::RefCell<i32>, //~ ERROR unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\n+}\n+\n+union U4<T> {\n     a: T, //~ ERROR unions may not contain fields that need dropping\n }\n \n-union U5 { //~ ERROR unions with `Drop` implementations are unstable\n+union U5 { // Having a drop impl is OK\n     a: u8,\n }\n "}, {"sha": "ed973871b3f06a7051141b751233abe2ea312008", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,61 +1,37 @@\n-error[E0658]: unions with non-`Copy` fields are unstable\n-  --> $DIR/feature-gate-untagged_unions.rs:9:1\n+error[E0658]: unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\n+  --> $DIR/feature-gate-untagged_unions.rs:20:5\n    |\n-LL | / union U3 {\n-LL | |     a: String,\n-LL | | }\n-   | |_^\n-   |\n-   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n-   = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n-\n-error[E0658]: unions with non-`Copy` fields are unstable\n-  --> $DIR/feature-gate-untagged_unions.rs:13:1\n-   |\n-LL | / union U4<T> {\n-LL | |     a: T,\n-LL | | }\n-   | |_^\n-   |\n-   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n-   = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n-\n-error[E0658]: unions with `Drop` implementations are unstable\n-  --> $DIR/feature-gate-untagged_unions.rs:17:1\n-   |\n-LL | / union U5 {\n-LL | |     a: u8,\n-LL | | }\n-   | |_^\n+LL |     a: std::cell::RefCell<i32>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n    = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n \n error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:10:5\n+  --> $DIR/feature-gate-untagged_unions.rs:16:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/feature-gate-untagged_unions.rs:10:5\n+  --> $DIR/feature-gate-untagged_unions.rs:16:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n \n error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:14:5\n+  --> $DIR/feature-gate-untagged_unions.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/feature-gate-untagged_unions.rs:14:5\n+  --> $DIR/feature-gate-untagged_unions.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0658, E0740.\n For more information about an error, try `rustc --explain E0658`."}, {"sha": "cd128c1ea0b488d470d99f88c6facdcf595035c3", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -24,7 +24,17 @@ error[E0423]: expected value, found enum `B`\n   --> $DIR/glob-resolve1.rs:24:5\n    |\n LL |     B;\n-   |     ^ help: try using the enum's variant: `B::B1`\n+   |     ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/glob-resolve1.rs:12:5\n+   |\n+LL |     pub enum B { B1 }\n+   |     ^^^^^^^^^^^^^^^^^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |     B::B1;\n+   |     ^^^^^\n \n error[E0425]: cannot find value `C` in this scope\n   --> $DIR/glob-resolve1.rs:25:5"}, {"sha": "6de36deb5976480b97cb25ef2630a1f1f3d80ec6", "filename": "src/test/ui/hygiene/generic_params.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(decl_macro, rustc_attrs, const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "3f85383eb33fa05b49245fe3c31c17471c8e5a9b", "filename": "src/test/ui/hygiene/issue-61574-const-parameters.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "02ddc391f6e3c01f1e22a096ad47ae982771dc3d", "filename": "src/test/ui/hygiene/no_implicit_prelude-2018.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -3,6 +3,9 @@ error: cannot find macro `print` in this scope\n    |\n LL |         print!();\n    |         ^^^^^\n+   |\n+   = note: consider importing this macro:\n+           std::print\n \n error: aborting due to previous error\n "}, {"sha": "843dee2478b3ff8b983a17714dfb908aa53989a6", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -4,6 +4,9 @@ error: cannot find macro `panic` in this scope\n LL |         assert_eq!(0, 0);\n    |         ^^^^^^^^^^^^^^^^^\n    |\n+   = note: consider importing one of these items:\n+           core::panic\n+           std::panic\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type `Vec`"}, {"sha": "11eeceba0eed9a4e9349b38501af01af94823847", "filename": "src/test/ui/impl-trait/equality-rpass.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "536a4726c6de225f02c2247332f6c399a92b49f6", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5"}, {"sha": "1443b76048b324402385f00e6e41a86a5cb2e27e", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18"}, {"sha": "835277d408ef25de730918f83e3c054055680df4", "filename": "src/test/ui/issues/issue-35376.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35376.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "65e94d7967075a273d4230b189ea18bcc52466a9", "filename": "src/test/ui/issues/issue-55380.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "2a4ccda8929191b881dcca193b19ccb847397876", "filename": "src/test/ui/issues/issue-59508-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -12,6 +12,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "4b5f65b346174668b8979d4d36cb76639f4cbd49", "filename": "src/test/ui/issues/issue-73427.stderr", "status": "modified", "additions": 93, "deletions": 9, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73427.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -4,39 +4,101 @@ error[E0423]: expected value, found enum `A`\n LL |     A.foo();\n    |     ^\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n-help: try using one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:1:1\n+   |\n+LL | / enum A {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | |     Struct {},\n+LL | |     Tuple(),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n+help: you might have meant to use one of the following enum variants\n    |\n LL |     (A::Struct {}).foo();\n    |     ^^^^^^^^^^^^^^\n LL |     (A::Tuple()).foo();\n    |     ^^^^^^^^^^^^\n LL |     A::Unit.foo();\n    |     ^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |     (A::StructWithFields { /* fields */ }).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (A::TupleWithFields(/* fields */)).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found enum `B`\n   --> $DIR/issue-73427.rs:31:5\n    |\n LL |     B.foo();\n    |     ^\n    |\n-   = help: you might have meant to use one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:9:1\n+   |\n+LL | / enum B {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | | }\n+   | |_^\n+help: the following enum variants are available\n+   |\n+LL |     (B::StructWithFields { /* fields */ }).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (B::TupleWithFields(/* fields */)).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found enum `C`\n   --> $DIR/issue-73427.rs:33:5\n    |\n LL |     C.foo();\n-   |     ^ help: try using one of the enum's variants: `C::Unit`\n+   |     ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:14:1\n+   |\n+LL | / enum C {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |     C::Unit.foo();\n+   |     ^^^^^^^\n+help: the following enum variants are available\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n+LL |     (C::StructWithFields { /* fields */ }).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (C::TupleWithFields(/* fields */)).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found enum `D`\n   --> $DIR/issue-73427.rs:35:5\n    |\n LL |     D.foo();\n-   |     ^ help: try using one of the enum's variants: `D::Unit`\n+   |     ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:20:1\n+   |\n+LL | / enum D {\n+LL | |     TupleWithFields(()),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n+help: you might have meant to use the following enum variant\n    |\n-   = help: you might have meant to use the enum's other variant that has fields\n+LL |     D::Unit.foo();\n+   |     ^^^^^^^\n+help: the following enum variant is available\n+   |\n+LL |     (D::TupleWithFields(/* fields */)).foo();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found enum `A`\n   --> $DIR/issue-73427.rs:40:13\n@@ -45,7 +107,18 @@ LL |     let x = A(3);\n    |             ^\n    |\n    = help: you might have meant to construct one of the enum's non-tuple variants\n-help: try using one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:1:1\n+   |\n+LL | / enum A {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | |     Struct {},\n+LL | |     Tuple(),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n+help: try to construct one of the enum's variants\n    |\n LL |     let x = A::TupleWithFields(3);\n    |             ^^^^^^^^^^^^^^^^^^\n@@ -59,7 +132,18 @@ LL |     if let A(3) = x { }\n    |            ^\n    |\n    = help: you might have meant to match against one of the enum's non-tuple variants\n-help: try using one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/issue-73427.rs:1:1\n+   |\n+LL | / enum A {\n+LL | |     StructWithFields { x: () },\n+LL | |     TupleWithFields(()),\n+LL | |     Struct {},\n+LL | |     Tuple(),\n+LL | |     Unit,\n+LL | | }\n+   | |_^\n+help: try to match against one of the enum's variants\n    |\n LL |     if let A::TupleWithFields(3) = x { }\n    |            ^^^^^^^^^^^^^^^^^^"}, {"sha": "888fb913fb71c5ede67e4b72638a17a6274d9269", "filename": "src/test/ui/macros/macro-use-wrong-name.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -8,6 +8,9 @@ LL |     macro_two!();\n    |\n LL | macro_rules! macro_one { () => (\"one\") }\n    | ---------------------- similarly named macro `macro_one` defined here\n+   |\n+   = note: consider importing this macro:\n+           two_macros::macro_two\n \n error: aborting due to previous error\n "}, {"sha": "ced062269df68569795cb6fde437c35749c9a5b7", "filename": "src/test/ui/missing/missing-macro-use.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fmissing%2Fmissing-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fmissing%2Fmissing-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-macro-use.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -3,6 +3,9 @@ error: cannot find macro `macro_two` in this scope\n    |\n LL |     macro_two!();\n    |     ^^^^^^^^^\n+   |\n+   = note: consider importing this macro:\n+           two_macros::macro_two\n \n error: aborting due to previous error\n "}, {"sha": "fca98662708db13edf89e3242a20cd47eb696efa", "filename": "src/test/ui/overlap-doesnt-conflict-with-specialization.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-doesnt-conflict-with-specialization.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "7ae092cee6723b44cd63cda0f43426ee702a3bd3", "filename": "src/test/ui/parser/assoc-static-semantic-fail.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -170,6 +170,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error: aborting due to 24 previous errors; 1 warning emitted\n "}, {"sha": "5b763ae72f5eee88fdf9ead93d1fbce7981eaf9e", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -31,6 +31,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0046]: not all trait items implemented, missing: `foo`\n   --> $DIR/default.rs:22:1"}, {"sha": "cdc9ee8d9e7c9f94638ca0ba037d4aa214488ed0", "filename": "src/test/ui/parser/trait-item-with-defaultness-fail-semantic.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-item-with-defaultness-fail-semantic.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -54,6 +54,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error: aborting due to 6 previous errors; 1 warning emitted\n "}, {"sha": "63335586b765ce85b763f076765e6ea340a2a6de", "filename": "src/test/ui/polymorphization/const_parameters/closures.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics, rustc_attrs)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:19:19"}, {"sha": "c976a5b62aa308ea11106862b2c06bb36f16eade", "filename": "src/test/ui/polymorphization/const_parameters/functions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics, rustc_attrs)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: item has unused generic parameters\n   --> $DIR/functions.rs:15:8"}, {"sha": "b2b32db045d6a78e4f4e9239b951c4a5120f51fc", "filename": "src/test/ui/polymorphization/generators.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics, generators, generator_trait, rustc_attrs)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: item has unused generic parameters\n   --> $DIR/generators.rs:36:5"}, {"sha": "eac246175335568c605877c5bf5241f6fab71b31", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,15 +1,3 @@\n-error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:67:21\n-   |\n-LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n-   |                     ^^^^^\n-   |\n-note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:21:1\n-   |\n-LL | union Union<T: Copy> { f: T }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0367]: `Drop` impl requires `'adds_bnd: 'al` but the struct it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:23:20\n    |\n@@ -145,6 +133,18 @@ note: the implementor must specify the same requirement\n LL | struct TupleStruct<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:67:21\n+   |\n+LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   |                     ^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/reject-specialized-drops-8142.rs:21:1\n+   |\n+LL | union Union<T: Copy> { f: T }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0308, E0366, E0367, E0495."}, {"sha": "5de8eb215821a4a8afb879ae19568a6a03ac5f01", "filename": "src/test/ui/resolve/issue-65035-static-with-parent-generics.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -48,6 +48,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: aborting due to 5 previous errors; 1 warning emitted\n "}, {"sha": "807dadf417bf5c2a0d3b535c1a23101ce8a83eba", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 102, "deletions": 10, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -2,17 +2,57 @@ error[E0423]: expected value, found enum `n::Z`\n   --> $DIR/privacy-enum-ctor.rs:23:9\n    |\n LL |         n::Z;\n-   |         ^^^^ help: try using one of the enum's variants: `m::Z::Unit`\n+   |         ^^^^\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n+   |\n+LL | /         pub(in m) enum Z {\n+LL | |             Fn(u8),\n+LL | |             Struct {\n+LL | |                 s: u8,\n+LL | |             },\n+LL | |             Unit,\n+LL | |         }\n+   | |_________^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |         m::Z::Unit;\n+   |         ^^^^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |         (m::Z::Fn(/* fields */));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         (m::Z::Struct { /* fields */ });\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n LL |         Z;\n-   |         ^ help: try using one of the enum's variants: `m::Z::Unit`\n+   |         ^\n+   |\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n+LL | /         pub(in m) enum Z {\n+LL | |             Fn(u8),\n+LL | |             Struct {\n+LL | |                 s: u8,\n+LL | |             },\n+LL | |             Unit,\n+LL | |         }\n+   | |_________^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |         m::Z::Unit;\n+   |         ^^^^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |         (m::Z::Fn(/* fields */));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         (m::Z::Struct { /* fields */ });\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found struct variant `Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:29:20\n@@ -34,11 +74,27 @@ LL |     fn f() {\n LL |     let _: E = m::E;\n    |                ^^^^\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n-help: try using one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:2:5\n+   |\n+LL | /     pub enum E {\n+LL | |         Fn(u8),\n+LL | |         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+LL | |         Unit,\n+LL | |     }\n+   | |_____^\n+help: you might have meant to use the following enum variant\n    |\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |     let _: E = (E::Fn(/* fields */));\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: E = (E::Struct { /* fields */ });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: a function with a similar name exists\n    |\n LL |     let _: E = m::f;\n@@ -67,11 +123,27 @@ error[E0423]: expected value, found enum `E`\n LL |     let _: E = E;\n    |                ^\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n-help: try using one of the enum's variants\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:2:5\n+   |\n+LL | /     pub enum E {\n+LL | |         Fn(u8),\n+LL | |         Struct {\n+LL | |             s: u8,\n+LL | |         },\n+LL | |         Unit,\n+LL | |     }\n+   | |_____^\n+help: you might have meant to use the following enum variant\n    |\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n+help: the following enum variants are available\n+   |\n+LL |     let _: E = (E::Fn(/* fields */));\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: E = (E::Struct { /* fields */ });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider importing one of these items instead\n    |\n LL | use std::f32::consts::E;\n@@ -112,9 +184,29 @@ error[E0423]: expected value, found enum `m::n::Z`\n   --> $DIR/privacy-enum-ctor.rs:57:16\n    |\n LL |     let _: Z = m::n::Z;\n-   |                ^^^^^^^ help: try using one of the enum's variants: `m::Z::Unit`\n+   |                ^^^^^^^\n+   |\n+note: the enum is defined here\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n+   |\n+LL | /         pub(in m) enum Z {\n+LL | |             Fn(u8),\n+LL | |             Struct {\n+LL | |                 s: u8,\n+LL | |             },\n+LL | |             Unit,\n+LL | |         }\n+   | |_________^\n+help: you might have meant to use the following enum variant\n+   |\n+LL |     let _: Z = m::Z::Unit;\n+   |                ^^^^^^^^^^\n+help: the following enum variants are available\n    |\n-   = help: you might have meant to use one of the enum's other variants that have fields\n+LL |     let _: Z = (m::Z::Fn(/* fields */));\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: Z = (m::Z::Struct { /* fields */ });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:61:12"}, {"sha": "bd39650702c7c30a393a5fc20800a5a6f9b91ca2", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -507,6 +507,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/disallowed-positions.rs:22:12"}, {"sha": "81e557d53a660cc58cf49cca53102daf601cd0c7", "filename": "src/test/ui/self/self-in-typedefs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,7 +1,4 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-\n-#![feature(untagged_unions)]\n-\n #![allow(dead_code)]\n \n use std::mem::ManuallyDrop;"}, {"sha": "17da34caa70d7ab70ebfdd678eb4e124c540c8f1", "filename": "src/test/ui/specialization/assoc-ty-graph-cycle.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fassoc-ty-graph-cycle.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "e368c2e73b6a97ba9a4a0c4c189bea54616cd6c0", "filename": "src/test/ui/specialization/cross-crate-defaults.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fcross-crate-defaults.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "4ca3d8311983924a16673d3f226af105381ed72c", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/deafult-associated-type-bound-1.rs:19:5"}, {"sha": "2bc14dbe3b2e7542394faefebbe46baf19baf8c7", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `&'static B` with `B`\n   --> $DIR/deafult-associated-type-bound-2.rs:16:5"}, {"sha": "b5a1877ea1931f97c4c2bbe7c4c4c89910b2f6bc", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/deafult-generic-associated-type-bound.rs:4:12"}, {"sha": "d8b9c48c72e9224b757499913c035210364cebf3", "filename": "src/test/ui/specialization/defaultimpl/allowed-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fallowed-cross-crate.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "9ca915686e84f265519c69ab6eb827d35dc7591f", "filename": "src/test/ui/specialization/defaultimpl/out-of-order.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fout-of-order.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "31d0e6e38824bea086482b0efd7c5edc93cd0737", "filename": "src/test/ui/specialization/defaultimpl/overlap-projection.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Foverlap-projection.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "2d5c80d05f0193dbb770d41fc37e18d37f7bafd7", "filename": "src/test/ui/specialization/defaultimpl/projection.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fprojection.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "3f1a5495e212f573b9b491b63fb8c958515b899c", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/specialization-no-default.rs:20:5"}, {"sha": "163c93550fb4d7ce2f67fc895e227e44d44ec639", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented-rpass.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented-rpass.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "250f0017bea27450af11170405517cbe2e1e5eae", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-item-not-implemented.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0046]: not all trait items implemented, missing: `foo_two`\n   --> $DIR/specialization-trait-item-not-implemented.rs:18:1"}, {"sha": "fb623c97f4209492fa031c9046d13ef75ffc0a39", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0599]: no method named `foo_one` found for struct `MyStruct` in the current scope\n   --> $DIR/specialization-trait-not-implemented.rs:22:29"}, {"sha": "57b90c457cb77f082fd7939b94f406d13ef2b800", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: the trait bound `U: Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17"}, {"sha": "cbf0cef5e7462fbade6c67d837dd7073a7b5b7ee", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -16,6 +16,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error: impls of auto traits cannot be default\n   --> $DIR/validation.rs:9:21"}, {"sha": "783a38e6bdc0028ddae51f31c5c3736be7e3d017", "filename": "src/test/ui/specialization/issue-36804.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "bd5ed498d92ca6889d76742d39d06ea7ce8dfd9e", "filename": "src/test/ui/specialization/issue-38091-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0275]: overflow evaluating the requirement `i32: Check`\n    |"}, {"sha": "97e5775ab54ee8fdc9d4353f0809104f7a94267a", "filename": "src/test/ui/specialization/issue-38091.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: the trait bound `(): Valid` is not satisfied\n   --> $DIR/issue-38091.rs:12:5"}, {"sha": "98e49b1bab3b794b3432a7797f566a309655bfc1", "filename": "src/test/ui/specialization/issue-39448.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0275]: overflow evaluating the requirement `T: FromA<U>`\n   --> $DIR/issue-39448.rs:45:13"}, {"sha": "77a45806edbabd3732ce95f9fa08f13e8065cf39", "filename": "src/test/ui/specialization/issue-39618.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39618.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "2f05c41346f90488e2ef4abf0aab589a4e6a0729", "filename": "src/test/ui/specialization/issue-50452.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-50452.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "27070f8e4a1ca88fe03bb1c2cd8b50aafe626ce4", "filename": "src/test/ui/specialization/issue-52050.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0119]: conflicting implementations of trait `IntoPyDictPointer` for type `()`:\n   --> $DIR/issue-52050.rs:28:1"}, {"sha": "cde17872d6bbeebb098f26c177c1bad8e320591d", "filename": "src/test/ui/specialization/issue-63716-parse-async.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-63716-parse-async.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "5ee82e9915b6a2fb4c9d6c9f605343600e47234d", "filename": "src/test/ui/specialization/issue-70442.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-70442.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "85ccbd809b02d0a1c30d40cad85d22f9a7b13ad3", "filename": "src/test/ui/specialization/non-defaulted-item-fail.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization, associated_type_defaults)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0520]: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/non-defaulted-item-fail.rs:30:5"}, {"sha": "9605bd089351452871d0ddf8f18fa805fee038f0", "filename": "src/test/ui/specialization/specialization-allowed-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-allowed-cross-crate.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "a7c0661a825dcc075efc1c28532643680053292c", "filename": "src/test/ui/specialization/specialization-assoc-fns.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-assoc-fns.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "afb2af3803f1d73218d3a57ae8509e827ad96fde", "filename": "src/test/ui/specialization/specialization-basics.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-basics.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "c69130c0aef7b28b4d5321776c4f17a54e56b38f", "filename": "src/test/ui/specialization/specialization-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-cross-crate.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "ef6365ed31f8686c3d55ffe5a35e3b9714183363", "filename": "src/test/ui/specialization/specialization-default-methods.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "445bc1646f04eb503db823f316535ee1d61d3d74", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0308]: mismatched types\n   --> $DIR/specialization-default-projection.rs:21:5"}, {"sha": "5ba38facee0c07570d8b715cff8f0e1a91711656", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:15:9"}, {"sha": "711c1fda1499d092d9a153493d6b4ceb10ecd2f0", "filename": "src/test/ui/specialization/specialization-no-default.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/specialization-no-default.rs:20:5"}, {"sha": "d051ffe0a02c65e2d66a9bf5244183cf67480a2d", "filename": "src/test/ui/specialization/specialization-on-projection.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-on-projection.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "785ec29239b2040698126a010890041a9c0bd1ef", "filename": "src/test/ui/specialization/specialization-out-of-order.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-out-of-order.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "552b04a601930818000ae329cf1e92aec892d94f", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1"}, {"sha": "c92db73074d4faaa72fd373296328b08f8548123", "filename": "src/test/ui/specialization/specialization-overlap-projection.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-projection.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "7e5c96ac1c88464407b6e5884b4bb5a9945a1d35", "filename": "src/test/ui/specialization/specialization-overlap.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0119]: conflicting implementations of trait `Foo` for type `std::vec::Vec<_>`:\n   --> $DIR/specialization-overlap.rs:5:1"}, {"sha": "be013552f5d5fb64560fdbb1e649573f41843868", "filename": "src/test/ui/specialization/specialization-polarity.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0751]: found both positive and negative implementation of trait `Foo` for type `u8`:\n   --> $DIR/specialization-polarity.rs:10:1"}, {"sha": "6d2bca5d2df8c0a85821484a946279f8e0ea9dd3", "filename": "src/test/ui/specialization/specialization-projection-alias.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection-alias.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "0f1ecf5e379c29ffe371c6c760867193dbb797bc", "filename": "src/test/ui/specialization/specialization-projection.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-projection.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "165703d63657483cda92f2be3b7f884edab96822", "filename": "src/test/ui/specialization/specialization-super-traits.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-super-traits.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "d30f7af2cbdce33a72d2df0bf8776bea7300f3cc", "filename": "src/test/ui/specialization/specialization-translate-projections-with-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-lifetimes.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "1762248f6956b5b8e7eebbb4408c19651a3169e3", "filename": "src/test/ui/specialization/specialization-translate-projections-with-params.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections-with-params.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "94a0e79dd56637001d63378ca8db3203ee3cd66b", "filename": "src/test/ui/specialization/specialization-translate-projections.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-translate-projections.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "ceb86559d85e2886efa05172bb43b926b82dec02", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0750]: negative impls cannot be default impls\n   --> $DIR/negative-default-impls.rs:9:1"}, {"sha": "9a846143d3d30ea14276737be450e9695f2ae19d", "filename": "src/test/ui/traits/negative-impls/negative-specializes-negative.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-negative.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "77b4373a273b7f9508afbc2e991015903488c87e", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive-item.rs:11:1"}, {"sha": "e5dc81b3eb75abf94007f814605fdbd056b57239", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive.rs:7:1"}, {"sha": "c091bc81da34098092023500eaceccfea5fa2a54", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/positive-specializes-negative.rs:7:1"}, {"sha": "a0ea72415a18905fe1273b2a67a83bca3ba4db3b", "filename": "src/test/ui/transmute-specialization.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftransmute-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftransmute-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute-specialization.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(specialization)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "cb46fc5ec467d78fd518a0c9a04a2700bdf8c200", "filename": "src/test/ui/transmute/main.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,9 +1,6 @@\n // normalize-stderr-32bit: \"`&str` \\(64 bits\\)\" -> \"`&str` ($$STR bits)\"\n // normalize-stderr-64bit: \"`&str` \\(128 bits\\)\" -> \"`&str` ($$STR bits)\"\n \n-\n-\n-#![feature(untagged_unions)]\n use std::mem::transmute;\n \n pub trait TypeConstructor<'a> {"}, {"sha": "f48562094a4bc4e783b66dc1c6544033573a1c50", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,13 +1,13 @@\n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:16:5\n+  --> $DIR/main.rs:13:5\n    |\n LL |     transmute(x)\n    |     ^^^^^^^^^\n    |\n    = note: `<C as TypeConstructor>::T` does not have a fixed size\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:20:17\n+  --> $DIR/main.rs:17:17\n    |\n LL |     let x: u8 = transmute(10u16);\n    |                 ^^^^^^^^^\n@@ -16,7 +16,7 @@ LL |     let x: u8 = transmute(10u16);\n    = note: target type: `u8` (8 bits)\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:24:17\n+  --> $DIR/main.rs:21:17\n    |\n LL |     let x: u8 = transmute(\"test\");\n    |                 ^^^^^^^^^\n@@ -25,7 +25,7 @@ LL |     let x: u8 = transmute(\"test\");\n    = note: target type: `u8` (8 bits)\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:29:18\n+  --> $DIR/main.rs:26:18\n    |\n LL |     let x: Foo = transmute(10);\n    |                  ^^^^^^^^^"}, {"sha": "c5b22f0026de438b206bd25410f08181963c4c1b", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -6,6 +6,7 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "1340ae43cd6afd5c6182b79e7cc65990f5602da6", "filename": "src/test/ui/union/union-align.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-align.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(untagged_unions)]\n-\n use std::mem::{size_of, size_of_val, align_of, align_of_val};\n \n #[repr(align(16))]\n@@ -35,6 +33,7 @@ mod hybrid {\n     use std::mem::{size_of, align_of};\n \n     #[repr(align(16))]\n+    #[derive(Copy, Clone)]\n     struct S1 {\n         a: u16,\n         b: u8,"}, {"sha": "5c3f8d90898199ad9911a73886623b6eab1af339", "filename": "src/test/ui/union/union-copy.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,13 +1,11 @@\n-#![feature(untagged_unions)]\n-\n #[derive(Clone)]\n union U {\n     a: u8\n }\n \n #[derive(Clone)]\n union W {\n-    a: String\n+    a: std::mem::ManuallyDrop<String>\n }\n \n impl Copy for U {} // OK"}, {"sha": "0f47bae7f0fede41ce85502fd44f2445c782ba57", "filename": "src/test/ui/union/union-copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,8 +1,8 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/union-copy.rs:14:6\n+  --> $DIR/union-copy.rs:12:6\n    |\n-LL |     a: String\n-   |     --------- this field does not implement `Copy`\n+LL |     a: std::mem::ManuallyDrop<String>\n+   |     --------------------------------- this field does not implement `Copy`\n ...\n LL | impl Copy for W {}\n    |      ^^^^"}, {"sha": "753a9f74d03e4f68e8561c1bbffbdf68b249cf76", "filename": "src/test/ui/union/union-derive-clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,5 +1,3 @@\n-#![feature(untagged_unions)]\n-\n use std::mem::ManuallyDrop;\n \n #[derive(Clone)] //~ ERROR the trait bound `U1: Copy` is not satisfied"}, {"sha": "e18f457a8b6f5b440dd0174b73506fe871bdcabd", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:5:10\n+  --> $DIR/union-derive-clone.rs:3:10\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `Copy` is not implemented for `U1`\n@@ -12,7 +12,7 @@ LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the current scope\n-  --> $DIR/union-derive-clone.rs:37:15\n+  --> $DIR/union-derive-clone.rs:35:15\n    |\n LL | union U5<T> {\n    | -----------"}, {"sha": "e689f8c27d772ba38fe16ed86b68671e06b8c7e6", "filename": "src/test/ui/union/union-derive-eq.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,13 +1,11 @@\n-#![feature(untagged_unions)]\n-\n #[derive(Eq)] // OK\n union U1 {\n     a: u8,\n }\n \n impl PartialEq for U1 { fn eq(&self, rhs: &Self) -> bool { true } }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Copy, Clone)]\n struct PartialEqNotEq;\n \n #[derive(Eq)]"}, {"sha": "0591d12d598ba790e8b3993f57bf5cfa1b6ad03f", "filename": "src/test/ui/union/union-derive-eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `PartialEqNotEq: Eq` is not satisfied\n-  --> $DIR/union-derive-eq.rs:15:5\n+  --> $DIR/union-derive-eq.rs:13:5\n    |\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`"}, {"sha": "db18a81c1f6651a0c8ec95090cac5d412afff8a7", "filename": "src/test/ui/union/union-derive-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -4,8 +4,6 @@\n \n // Some traits can be derived for unions.\n \n-#![feature(untagged_unions)]\n-\n #[derive(\n     Copy,\n     Clone,"}, {"sha": "215666bdd9d985f5ac5b5651509d13c42bf8b47e", "filename": "src/test/ui/union/union-drop-assign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -3,8 +3,6 @@\n \n // Drop works for union itself.\n \n-#![feature(untagged_unions)]\n-\n use std::mem::ManuallyDrop;\n \n struct S;"}, {"sha": "9edf5827511525d3b5e48f2b20e411dc3347499b", "filename": "src/test/ui/union/union-drop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -4,8 +4,7 @@\n \n // Drop works for union itself.\n \n-#![feature(untagged_unions)]\n-\n+#[derive(Copy, Clone)]\n struct S;\n \n union U {"}, {"sha": "69837f31cab27aa78e6ef57bf11ca08d6f1797d3", "filename": "src/test/ui/union/union-generic-rpass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(untagged_unions)]\n-\n use std::mem::ManuallyDrop;\n \n union MaybeItem<T: Iterator> {\n@@ -16,7 +14,7 @@ union U<A, B> where A: Copy, B: Copy {\n }\n \n unsafe fn union_transmute<A, B>(a: A) -> B where A: Copy, B: Copy {\n-    U { a: a }.b\n+    U { a }.b\n }\n \n fn main() {"}, {"sha": "977d12f1086028bb1e37fc7c4933955a4f27a36f", "filename": "src/test/ui/union/union-manuallydrop-rpass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,4 +1,3 @@\n-#![feature(untagged_unions)]\n #![allow(dead_code)]\n // run-pass\n "}, {"sha": "bc58c5995cb80e2ed8317a7976362fe9a7fc2bae", "filename": "src/test/ui/union/union-nodrop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(untagged_unions)]\n-\n #![allow(dead_code)]\n \n use std::mem::needs_drop;"}, {"sha": "399ed9ae458b8f664435e414a4b0f9da2debbbea", "filename": "src/test/ui/union/union-overwrite.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(untagged_unions)]\n \n #[repr(C)]\n #[derive(Copy, Clone)]"}, {"sha": "9cde44c06bd476ccdf363079d3fe149a1582632e", "filename": "src/test/ui/union/union-packed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-packed.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -2,8 +2,6 @@\n #![allow(dead_code)]\n #![allow(non_snake_case)]\n \n-#![feature(untagged_unions)]\n-\n use std::mem::{size_of, size_of_val, align_of, align_of_val};\n \n struct S {\n@@ -118,6 +116,7 @@ mod hybrid {\n     use std::mem::{size_of, align_of};\n \n     #[repr(packed)]\n+    #[derive(Copy, Clone)]\n     struct S1 {\n         a: u16,\n         b: u8,"}, {"sha": "10f0c467560f42184fc80a69212b1cbbd6b26677", "filename": "src/test/ui/union/union-unsafe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,4 +1,3 @@\n-#![feature(untagged_unions)]\n use std::mem::ManuallyDrop;\n \n union U1 {"}, {"sha": "b50d9e1750657e7a829b29123348548add99e02e", "filename": "src/test/ui/union/union-unsafe.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1,85 +1,85 @@\n error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:22:5\n+  --> $DIR/union-unsafe.rs:21:5\n    |\n LL |     u3.a = ManuallyDrop::new(T::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:23:6\n+  --> $DIR/union-unsafe.rs:22:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:29:6\n+  --> $DIR/union-unsafe.rs:28:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:37:13\n+  --> $DIR/union-unsafe.rs:36:13\n    |\n LL |     let a = u1.a;\n    |             ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:40:14\n+  --> $DIR/union-unsafe.rs:39:14\n    |\n LL |     let U1 { a } = u1;\n    |              ^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:41:20\n+  --> $DIR/union-unsafe.rs:40:20\n    |\n LL |     if let U1 { a: 12 } = u1 {}\n    |                    ^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:45:5\n+  --> $DIR/union-unsafe.rs:44:5\n    |\n LL |     u2.a = ManuallyDrop::new(String::from(\"new\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:46:6\n+  --> $DIR/union-unsafe.rs:45:6\n    |\n LL |     *u2.a = String::from(\"new\");\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:50:6\n+  --> $DIR/union-unsafe.rs:49:6\n    |\n LL |     *u3.a = 1;\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:53:5\n+  --> $DIR/union-unsafe.rs:52:5\n    |\n LL |     u3.a = ManuallyDrop::new(String::from(\"new\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:54:6\n+  --> $DIR/union-unsafe.rs:53:6\n    |\n LL |     *u3.a = String::from(\"new\");\n    |      ^^^^ access to union field"}, {"sha": "79b397d72c557eb6444a2ba0dc00a211a226a35a", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -1 +1 @@\n-Subproject commit 12db56cdedbc2c26a9aa18f994c0188cdcc67df5\n+Subproject commit 79b397d72c557eb6444a2ba0dc00a211a226a35a"}, {"sha": "e5d870c039dc11c9bcea644bf159e8c075b39568", "filename": "src/tools/linkchecker/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftools%2Flinkchecker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftools%2Flinkchecker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.toml?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -7,3 +7,7 @@ edition = \"2018\"\n [[bin]]\n name = \"linkchecker\"\n path = \"main.rs\"\n+\n+[dependencies]\n+regex = \"1\"\n+once_cell = \"1\""}, {"sha": "f213944e0ab673656f703e514e0a80ac991131f0", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3051d8c24467b54c81da9d9ad70a3e82e106ec1/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=e3051d8c24467b54c81da9d9ad70a3e82e106ec1", "patch": "@@ -21,6 +21,9 @@ use std::fs;\n use std::path::{Component, Path, PathBuf};\n use std::rc::Rc;\n \n+use once_cell::sync::Lazy;\n+use regex::Regex;\n+\n use crate::Redirect::*;\n \n // Add linkcheck exceptions here\n@@ -50,6 +53,44 @@ const LINKCHECK_EXCEPTIONS: &[(&str, &[&str])] = &[\n     (\"alloc/collections/btree_set/struct.BTreeSet.html\", &[\"#insert-and-complex-keys\"]),\n ];\n \n+#[rustfmt::skip]\n+const INTRA_DOC_LINK_EXCEPTIONS: &[(&str, &[&str])] = &[\n+    // This will never have links that are not in other pages.\n+    // To avoid repeating the exceptions twice, an empty list means all broken links are allowed.\n+    (\"reference/print.html\", &[]),\n+    // All the reference 'links' are actually ENBF highlighted as code\n+    (\"reference/comments.html\", &[\n+         \"/</code> <code>!\",\n+         \"*</code> <code>!\",\n+    ]),\n+    (\"reference/identifiers.html\", &[\n+         \"a</code>-<code>z</code> <code>A</code>-<code>Z\",\n+         \"a</code>-<code>z</code> <code>A</code>-<code>Z</code> <code>0</code>-<code>9</code> <code>_\",\n+         \"a</code>-<code>z</code> <code>A</code>-<code>Z</code>]\u00a0[<code>a</code>-<code>z</code> <code>A</code>-<code>Z</code> <code>0</code>-<code>9</code> <code>_\",\n+    ]),\n+    (\"reference/tokens.html\", &[\n+         \"0</code>-<code>1\",\n+         \"0</code>-<code>7\",\n+         \"0</code>-<code>9\",\n+         \"0</code>-<code>9\",\n+         \"0</code>-<code>9</code> <code>a</code>-<code>f</code> <code>A</code>-<code>F\",\n+    ]),\n+    (\"reference/notation.html\", &[\n+         \"b</code> <code>B\",\n+         \"a</code>-<code>z\",\n+    ]),\n+    // This is being used in the sense of 'inclusive range', not a markdown link\n+    (\"core/ops/struct.RangeInclusive.html\", &[\"begin</code>, <code>end\"]),\n+    (\"std/ops/struct.RangeInclusive.html\", &[\"begin</code>, <code>end\"]),\n+    (\"core/slice/trait.SliceIndex.html\", &[\"begin</code>, <code>end\"]),\n+    (\"alloc/slice/trait.SliceIndex.html\", &[\"begin</code>, <code>end\"]),\n+    (\"std/slice/trait.SliceIndex.html\", &[\"begin</code>, <code>end\"]),\n+\n+];\n+\n+static BROKEN_INTRA_DOC_LINK: Lazy<Regex> =\n+    Lazy::new(|| Regex::new(r#\"\\[<code>(.*)</code>\\]\"#).unwrap());\n+\n macro_rules! t {\n     ($e:expr) => {\n         match $e {\n@@ -138,6 +179,14 @@ fn walk(cache: &mut Cache, root: &Path, dir: &Path, errors: &mut bool) {\n     }\n }\n \n+fn is_intra_doc_exception(file: &Path, link: &str) -> bool {\n+    if let Some(entry) = INTRA_DOC_LINK_EXCEPTIONS.iter().find(|&(f, _)| file.ends_with(f)) {\n+        entry.1.is_empty() || entry.1.contains(&link)\n+    } else {\n+        false\n+    }\n+}\n+\n fn is_exception(file: &Path, link: &str) -> bool {\n     if let Some(entry) = LINKCHECK_EXCEPTIONS.iter().find(|&(f, _)| file.ends_with(f)) {\n         entry.1.contains(&link)\n@@ -292,6 +341,19 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n             }\n         }\n     });\n+\n+    // Search for intra-doc links that rustdoc didn't warn about\n+    // FIXME(#77199, 77200) Rustdoc should just warn about these directly.\n+    // NOTE: only looks at one line at a time; in practice this should find most links\n+    for (i, line) in contents.lines().enumerate() {\n+        for broken_link in BROKEN_INTRA_DOC_LINK.captures_iter(line) {\n+            if !is_intra_doc_exception(file, &broken_link[1]) {\n+                *errors = true;\n+                print!(\"{}:{}: broken intra-doc link - \", pretty_file.display(), i + 1);\n+                println!(\"{}\", &broken_link[0]);\n+            }\n+        }\n+    }\n     Some(pretty_file)\n }\n "}]}