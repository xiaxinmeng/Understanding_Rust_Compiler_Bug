{"sha": "2aa28ad4f013d520740b0e990e6bf93e0d0471b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYTI4YWQ0ZjAxM2Q1MjA3NDBiMGU5OTBlNmJmOTNlMGQwNDcxYjU=", "commit": {"author": {"name": "Arnav Jindal", "email": "arnav.jindal7@gmail.com", "date": "2021-03-08T06:19:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-08T06:19:26Z"}, "message": "Grammar Fixes", "tree": {"sha": "bd4d62cbb335fb8062a759dad597ffffc3d1b187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd4d62cbb335fb8062a759dad597ffffc3d1b187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aa28ad4f013d520740b0e990e6bf93e0d0471b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRcHuCRBK7hj4Ov3rIwAAdHIIALE33iSFc64AWzKJln+FXCOs\ncHFm3KYa/BCbG5F4ujMHqbukv9JYmlgdVa1tbJ7MdJ/VCmv3qr6nrtJCQGs7yqpX\nfUlVE5qnXlnShKcMTlfYsmANtpgfe7lYQTdUf9aReXuYdjOxZ7vmU5Rioamgl9Ca\nGh6NqL+NAVdJ94spSe+9dEktwIWPBf16kCbdXSkNuDJlcFAFAVrU4qgW2PqeX8WB\nT2ZfgKfRXriSN/MKC0avCqYHyzgqGLaYSPMKT7bhc6oi0gLDfWIw5KMbAX747Yfh\nifmadQwV+MlGC5xTXufRBG1ofYYwuDMZL4BbdPcHpIc6nKHAAr5n55ZveTO4R1s=\n=ypFw\n-----END PGP SIGNATURE-----\n", "payload": "tree bd4d62cbb335fb8062a759dad597ffffc3d1b187\nparent 76c500ec6c36fa8287317d6dc342a64c079301de\nauthor Arnav Jindal <arnav.jindal7@gmail.com> 1615184366 +0530\ncommitter GitHub <noreply@github.com> 1615184366 +0530\n\nGrammar Fixes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa28ad4f013d520740b0e990e6bf93e0d0471b5", "html_url": "https://github.com/rust-lang/rust/commit/2aa28ad4f013d520740b0e990e6bf93e0d0471b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aa28ad4f013d520740b0e990e6bf93e0d0471b5/comments", "author": {"login": "daggy1234", "id": 60603110, "node_id": "MDQ6VXNlcjYwNjAzMTEw", "avatar_url": "https://avatars.githubusercontent.com/u/60603110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daggy1234", "html_url": "https://github.com/daggy1234", "followers_url": "https://api.github.com/users/daggy1234/followers", "following_url": "https://api.github.com/users/daggy1234/following{/other_user}", "gists_url": "https://api.github.com/users/daggy1234/gists{/gist_id}", "starred_url": "https://api.github.com/users/daggy1234/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daggy1234/subscriptions", "organizations_url": "https://api.github.com/users/daggy1234/orgs", "repos_url": "https://api.github.com/users/daggy1234/repos", "events_url": "https://api.github.com/users/daggy1234/events{/privacy}", "received_events_url": "https://api.github.com/users/daggy1234/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c500ec6c36fa8287317d6dc342a64c079301de", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c500ec6c36fa8287317d6dc342a64c079301de", "html_url": "https://github.com/rust-lang/rust/commit/76c500ec6c36fa8287317d6dc342a64c079301de"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "201e73c2ba614a1b3e136c8c68d26c6b1ab6f33e", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aa28ad4f013d520740b0e990e6bf93e0d0471b5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa28ad4f013d520740b0e990e6bf93e0d0471b5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=2aa28ad4f013d520740b0e990e6bf93e0d0471b5", "patch": "@@ -42,7 +42,7 @@ pub fn from_mut<T>(s: &mut T) -> &mut [T; 1] {\n /// without causing much metadata bloat.\n ///\n /// The trait is marked unsafe in order to restrict implementors to fixed-size\n-/// arrays. User of this trait can assume that implementors have the exact\n+/// arrays. A user of this trait can assume that implementors have the exact\n /// layout in memory of a fixed size array (for example, for unsafe\n /// initialization).\n ///\n@@ -382,7 +382,7 @@ impl<T: Ord, const N: usize> Ord for [T; N] {\n \n // The Default impls cannot be done with const generics because `[T; 0]` doesn't\n // require Default to be implemented, and having different impl blocks for\n-// different numbers isn't supported yet.\n+// different numbers aren't supported yet.\n \n macro_rules! array_impl_default {\n     {$n:expr, $t:ident $($ts:ident)*} => {\n@@ -489,7 +489,7 @@ impl<T, const N: usize> [T; N] {\n     /// ```\n     ///\n     /// This method is particularly useful if combined with other methods, like\n-    /// [`map`](#method.map). This way, you can can avoid moving the original\n+    /// [`map`](#method.map). This way, you can avoid moving the original\n     /// array if its elements are not `Copy`.\n     ///\n     /// ```\n@@ -564,7 +564,7 @@ where\n /// yields fewer than `N` items, `None` is returned and all already yielded\n /// items are dropped.\n ///\n-/// Since the iterator is passed as mutable reference and this function calls\n+/// Since the iterator is passed as a mutable reference and this function calls\n /// `next` at most `N` times, the iterator can still be used afterwards to\n /// retrieve the remaining items.\n ///"}]}