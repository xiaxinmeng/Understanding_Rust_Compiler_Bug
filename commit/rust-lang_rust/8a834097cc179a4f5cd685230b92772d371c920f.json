{"sha": "8a834097cc179a4f5cd685230b92772d371c920f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhODM0MDk3Y2MxNzlhNGY1Y2Q2ODUyMzBiOTI3NzJkMzcxYzkyMGY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-12-30T16:25:35Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-12-30T16:25:41Z"}, "message": "Use built-in comparisons for range matching in MIR.\n\nThe previous version using `PartialOrd::le` was broken since it passed `T`\narguments where `&T` was expected.\n\nIt makes sense to use primitive comparisons since range patterns can only be\nused with chars and numeric types.", "tree": {"sha": "dcf9a3377f2b24fab310d07508559856b23c16d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcf9a3377f2b24fab310d07508559856b23c16d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a834097cc179a4f5cd685230b92772d371c920f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a834097cc179a4f5cd685230b92772d371c920f", "html_url": "https://github.com/rust-lang/rust/commit/8a834097cc179a4f5cd685230b92772d371c920f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a834097cc179a4f5cd685230b92772d371c920f/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2a64b57a74f35bef215972adf1b803cff288bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2a64b57a74f35bef215972adf1b803cff288bd", "html_url": "https://github.com/rust-lang/rust/commit/6e2a64b57a74f35bef215972adf1b803cff288bd"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "7591e80e85f19666e91e0383aa37b6c466ef8643", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8a834097cc179a4f5cd685230b92772d371c920f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a834097cc179a4f5cd685230b92772d371c920f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=8a834097cc179a4f5cd685230b92772d371c920f", "patch": "@@ -185,28 +185,16 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n \n             TestKind::Range { ref lo, ref hi, ty } => {\n-                // Test `v` by computing `PartialOrd::le(lo, v) && PartialOrd::le(v, hi)`.\n+                // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n                 let lo = self.literal_operand(test.span, ty.clone(), lo.clone());\n                 let hi = self.literal_operand(test.span, ty.clone(), hi.clone());\n-                let item_ref = self.hir.partial_le(ty);\n+                let val = Operand::Consume(lvalue.clone());\n \n-                let lo_blocks = self.call_comparison_fn(block,\n-                                                        test.span,\n-                                                        item_ref.clone(),\n-                                                        lo,\n-                                                        Operand::Consume(lvalue.clone()));\n+                let fail = self.cfg.start_new_block();\n+                let block = self.compare(block, fail, test.span, BinOp::Le, lo, val.clone());\n+                let block = self.compare(block, fail, test.span, BinOp::Le, val, hi);\n \n-                let hi_blocks = self.call_comparison_fn(lo_blocks[0],\n-                                                        test.span,\n-                                                        item_ref,\n-                                                        Operand::Consume(lvalue.clone()),\n-                                                        hi);\n-\n-                let failure = self.cfg.start_new_block();\n-                self.cfg.terminate(lo_blocks[1], Terminator::Goto { target: failure });\n-                self.cfg.terminate(hi_blocks[1], Terminator::Goto { target: failure });\n-\n-                vec![hi_blocks[0], failure]\n+                vec![block, fail]\n             }\n \n             TestKind::Len { len, op } => {\n@@ -240,6 +228,29 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         }\n     }\n \n+    fn compare(&mut self,\n+               block: BasicBlock,\n+               fail_block: BasicBlock,\n+               span: Span,\n+               op: BinOp,\n+               left: Operand<'tcx>,\n+               right: Operand<'tcx>) -> BasicBlock {\n+        let bool_ty = self.hir.bool_ty();\n+        let result = self.temp(bool_ty);\n+\n+        // result = op(left, right)\n+        self.cfg.push_assign(block, span, &result, Rvalue::BinaryOp(op, left, right));\n+\n+        // branch based on result\n+        let target_block = self.cfg.start_new_block();\n+        self.cfg.terminate(block, Terminator::If {\n+            cond: Operand::Consume(result),\n+            targets: (target_block, fail_block)\n+        });\n+\n+        target_block\n+    }\n+\n     fn call_comparison_fn(&mut self,\n                           block: BasicBlock,\n                           span: Span,"}, {"sha": "d24d0985355c2bb24e0d87208a0714f86c421232", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a834097cc179a4f5cd685230b92772d371c920f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a834097cc179a4f5cd685230b92772d371c920f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=8a834097cc179a4f5cd685230b92772d371c920f", "patch": "@@ -88,11 +88,6 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         self.cmp_method_ref(eq_def_id, \"eq\", ty)\n     }\n \n-    pub fn partial_le(&mut self, ty: Ty<'tcx>) -> ItemRef<'tcx> {\n-        let ord_def_id = self.tcx.lang_items.ord_trait().unwrap();\n-        self.cmp_method_ref(ord_def_id, \"le\", ty)\n-    }\n-\n     pub fn num_variants(&mut self, adt_def: ty::AdtDef<'tcx>) -> usize {\n         adt_def.variants.len()\n     }"}]}