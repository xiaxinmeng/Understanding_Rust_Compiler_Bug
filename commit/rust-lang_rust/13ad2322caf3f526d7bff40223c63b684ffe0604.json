{"sha": "13ad2322caf3f526d7bff40223c63b684ffe0604", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYWQyMzIyY2FmM2Y1MjZkN2JmZjQwMjIzYzYzYjY4NGZmZTA2MDQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-28T17:31:48Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-28T20:26:38Z"}, "message": "Cache non-exhaustive separately from attributes", "tree": {"sha": "ce8e534be8ba807b5dafc4734a953c6cbb96a0f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce8e534be8ba807b5dafc4734a953c6cbb96a0f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ad2322caf3f526d7bff40223c63b684ffe0604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ad2322caf3f526d7bff40223c63b684ffe0604", "html_url": "https://github.com/rust-lang/rust/commit/13ad2322caf3f526d7bff40223c63b684ffe0604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ad2322caf3f526d7bff40223c63b684ffe0604/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3a7819371cef92a187e9bac8f7810ccde15216", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3a7819371cef92a187e9bac8f7810ccde15216", "html_url": "https://github.com/rust-lang/rust/commit/7b3a7819371cef92a187e9bac8f7810ccde15216"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "414c3ad633e34114be47125a466e5b2986e0ac4d", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=13ad2322caf3f526d7bff40223c63b684ffe0604", "patch": "@@ -780,7 +780,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_variant(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n         kind: &EntryKind,\n         index: DefIndex,\n         parent_did: DefId,\n@@ -805,7 +804,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         let ctor_did = data.ctor.map(|index| self.local_def_id(index));\n \n         ty::VariantDef::new(\n-            tcx,\n             self.item_ident(index, sess),\n             variant_did,\n             ctor_did,\n@@ -826,6 +824,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             adt_kind,\n             parent_did,\n             false,\n+            data.is_non_exhaustive,\n         )\n     }\n \n@@ -847,10 +846,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .get(self, item_id)\n                 .unwrap_or(Lazy::empty())\n                 .decode(self)\n-                .map(|index| self.get_variant(tcx, &self.kind(index), index, did, tcx.sess))\n+                .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))\n                 .collect()\n         } else {\n-            std::iter::once(self.get_variant(tcx, &kind, item_id, did, tcx.sess)).collect()\n+            std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()\n         };\n \n         tcx.alloc_adt_def(did, adt_kind, variants, repr)"}, {"sha": "49aaa845bc2267606094dbfff66d68d1d14394ab", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=13ad2322caf3f526d7bff40223c63b684ffe0604", "patch": "@@ -738,6 +738,7 @@ impl EncodeContext<'a, 'tcx> {\n             ctor_kind: variant.ctor_kind,\n             discr: variant.discr,\n             ctor: variant.ctor_def_id.map(|did| did.index),\n+            is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n         let enum_id = tcx.hir().as_local_hir_id(def.did.expect_local());\n@@ -782,6 +783,7 @@ impl EncodeContext<'a, 'tcx> {\n             ctor_kind: variant.ctor_kind,\n             discr: variant.discr,\n             ctor: Some(def_id.index),\n+            is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n         // Variant constructors have the same visibility as the parent enums, unless marked as\n@@ -886,6 +888,7 @@ impl EncodeContext<'a, 'tcx> {\n             ctor_kind: variant.ctor_kind,\n             discr: variant.discr,\n             ctor: Some(def_id.index),\n+            is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n         let struct_id = tcx.hir().as_local_hir_id(adt_def.did.expect_local());\n@@ -1235,6 +1238,7 @@ impl EncodeContext<'a, 'tcx> {\n                     ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n                     ctor,\n+                    is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                 }), adt_def.repr)\n             }\n             hir::ItemKind::Union(..) => {\n@@ -1245,6 +1249,7 @@ impl EncodeContext<'a, 'tcx> {\n                     ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n                     ctor: None,\n+                    is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                 }), adt_def.repr)\n             }\n             hir::ItemKind::Impl { defaultness, .. } => {"}, {"sha": "1837b86f4b58940ae521a40bd983b4be19b7423e", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=13ad2322caf3f526d7bff40223c63b684ffe0604", "patch": "@@ -346,6 +346,7 @@ struct VariantData {\n     discr: ty::VariantDiscr,\n     /// If this is unit or tuple-variant/struct, then this is the index of the ctor id.\n     ctor: Option<DefIndex>,\n+    is_non_exhaustive: bool,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "6e77aab27772057f3c2f1cfd4c665d54eb04a759", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=13ad2322caf3f526d7bff40223c63b684ffe0604", "patch": "@@ -2046,7 +2046,6 @@ impl<'tcx> VariantDef {\n     /// If someone speeds up attribute loading to not be a performance concern, they can\n     /// remove this hack and use the constructor `DefId` everywhere.\n     pub fn new(\n-        tcx: TyCtxt<'tcx>,\n         ident: Ident,\n         variant_did: Option<DefId>,\n         ctor_def_id: Option<DefId>,\n@@ -2056,6 +2055,7 @@ impl<'tcx> VariantDef {\n         adt_kind: AdtKind,\n         parent_did: DefId,\n         recovered: bool,\n+        is_field_list_non_exhaustive: bool,\n     ) -> Self {\n         debug!(\n             \"VariantDef::new(ident = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},\n@@ -2064,14 +2064,8 @@ impl<'tcx> VariantDef {\n         );\n \n         let mut flags = VariantFlags::NO_VARIANT_FLAGS;\n-        if adt_kind == AdtKind::Struct && tcx.has_attr(parent_did, sym::non_exhaustive) {\n-            debug!(\"found non-exhaustive field list for {:?}\", parent_did);\n-            flags = flags | VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;\n-        } else if let Some(variant_did) = variant_did {\n-            if tcx.has_attr(variant_did, sym::non_exhaustive) {\n-                debug!(\"found non-exhaustive field list for {:?}\", variant_did);\n-                flags = flags | VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;\n-            }\n+        if is_field_list_non_exhaustive {\n+            flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;\n         }\n \n         VariantDef {"}, {"sha": "8715dacb324b0974768401026899425226cbfe4e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ad2322caf3f526d7bff40223c63b684ffe0604/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=13ad2322caf3f526d7bff40223c63b684ffe0604", "patch": "@@ -858,7 +858,6 @@ fn convert_variant(\n         _ => false,\n     };\n     ty::VariantDef::new(\n-        tcx,\n         ident,\n         variant_did.map(LocalDefId::to_def_id),\n         ctor_did.map(LocalDefId::to_def_id),\n@@ -868,6 +867,10 @@ fn convert_variant(\n         adt_kind,\n         parent_did.to_def_id(),\n         recovered,\n+        adt_kind == AdtKind::Struct && tcx.has_attr(parent_did.to_def_id(), sym::non_exhaustive)\n+            || variant_did.map_or(false, |variant_did| {\n+                tcx.has_attr(variant_did.to_def_id(), sym::non_exhaustive)\n+            }),\n     )\n }\n "}]}