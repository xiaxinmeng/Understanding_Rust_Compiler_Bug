{"sha": "1dceaddfbe163e2d916c904b98923342730ba970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkY2VhZGRmYmUxNjNlMmQ5MTZjOTA0Yjk4OTIzMzQyNzMwYmE5NzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-17T11:47:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-17T11:47:53Z"}, "message": "Auto merge of #54946 - estebank:iterator, r=varkor\n\nAdd filtering option to `rustc_on_unimplemented` and reword `Iterator` E0277 errors\n\n - Add more targetting filters for arrays to `rustc_on_unimplemented` (Fix #53766)\n - Detect one element array of `Range` type, which is potentially a typo:\n   `for _ in [0..10] {}` where iterating between `0` and `10` was intended.\n   (Fix #23141)\n - Suggest `.bytes()` and `.chars()` for `String`.\n - Suggest borrowing or `.iter()` on arrays (Fix #36391)\n - Suggest using range literal when iterating on integers (Fix #34353)\n - Do not suggest `.iter()` by default (Fix #50773, fix #46806)\n - Add regression test (Fix #22872)", "tree": {"sha": "a15be80b63089d985c84b03e6c9ed814f06d8232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15be80b63089d985c84b03e6c9ed814f06d8232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dceaddfbe163e2d916c904b98923342730ba970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dceaddfbe163e2d916c904b98923342730ba970", "html_url": "https://github.com/rust-lang/rust/commit/1dceaddfbe163e2d916c904b98923342730ba970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dceaddfbe163e2d916c904b98923342730ba970/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7", "html_url": "https://github.com/rust-lang/rust/commit/cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7"}, {"sha": "def0f544a31bc6cc3dbf153f28304219fa38fa5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/def0f544a31bc6cc3dbf153f28304219fa38fa5c", "html_url": "https://github.com/rust-lang/rust/commit/def0f544a31bc6cc3dbf153f28304219fa38fa5c"}], "stats": {"total": 604, "additions": 559, "deletions": 45}, "files": [{"sha": "5b6d9e2033caa74078f804e2dbdf70d24414fb37", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -30,11 +30,72 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n /// [impl]: index.html#implementing-iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n+    on(\n+        _Self=\"[std::ops::Range<Idx>; 1]\",\n+        label=\"if you meant to iterate between two values, remove the square brackets\",\n+        note=\"`[start..end]` is an array of one `Range`; you might have meant to have a `Range` \\\n+              without the brackets: `start..end`\"\n+    ),\n+    on(\n+        _Self=\"[std::ops::RangeFrom<Idx>; 1]\",\n+        label=\"if you meant to iterate from a value onwards, remove the square brackets\",\n+        note=\"`[start..]` is an array of one `RangeFrom`; you might have meant to have a \\\n+              `RangeFrom` without the brackets: `start..`, keeping in mind that iterating over an \\\n+              unbounded iterator will run forever unless you `break` or `return` from within the \\\n+              loop\"\n+    ),\n+    on(\n+        _Self=\"[std::ops::RangeTo<Idx>; 1]\",\n+        label=\"if you meant to iterate until a value, remove the square brackets and add a \\\n+               starting value\",\n+        note=\"`[..end]` is an array of one `RangeTo`; you might have meant to have a bounded \\\n+              `Range` without the brackets: `0..end`\"\n+    ),\n+    on(\n+        _Self=\"[std::ops::RangeInclusive<Idx>; 1]\",\n+        label=\"if you meant to iterate between two values, remove the square brackets\",\n+        note=\"`[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a \\\n+              `RangeInclusive` without the brackets: `start..=end`\"\n+    ),\n+    on(\n+        _Self=\"[std::ops::RangeToInclusive<Idx>; 1]\",\n+        label=\"if you meant to iterate until a value (including it), remove the square brackets \\\n+               and add a starting value\",\n+        note=\"`[..=end]` is an array of one `RangeToInclusive`; you might have meant to have a \\\n+              bounded `RangeInclusive` without the brackets: `0..=end`\"\n+    ),\n+    on(\n+        _Self=\"std::ops::RangeTo<Idx>\",\n+        label=\"if you meant to iterate until a value, add a starting value\",\n+        note=\"`..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a \\\n+              bounded `Range`: `0..end`\"\n+    ),\n+    on(\n+        _Self=\"std::ops::RangeToInclusive<Idx>\",\n+        label=\"if you meant to iterate until a value (including it), add a starting value\",\n+        note=\"`..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant \\\n+              to have a bounded `RangeInclusive`: `0..=end`\"\n+    ),\n     on(\n         _Self=\"&str\",\n         label=\"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"\n     ),\n-    label=\"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"\n+    on(\n+        _Self=\"std::string::String\",\n+        label=\"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"\n+    ),\n+    on(\n+        _Self=\"[]\",\n+        label=\"borrow the array with `&` or call `.iter()` on it to iterate over it\",\n+        note=\"arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\"\n+    ),\n+    on(\n+        _Self=\"{integral}\",\n+        note=\"if you want to iterate between `start` until a value `end`, use the exclusive range \\\n+              syntax `start..end` or the inclusive range syntax `start..=end`\"\n+    ),\n+    label=\"`{Self}` is not an iterator\",\n+    message=\"`{Self}` is not an iterator\"\n )]\n #[doc(spotlight)]\n pub trait Iterator {"}, {"sha": "fc34a71f39221c00f2bbbbe9c030002a0d275dc8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -349,9 +349,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn on_unimplemented_note(\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        obligation: &PredicateObligation<'tcx>) ->\n-        OnUnimplementedNote\n-    {\n+        obligation: &PredicateObligation<'tcx>,\n+    ) -> OnUnimplementedNote {\n         let def_id = self.impl_similar_to(trait_ref, obligation)\n             .unwrap_or(trait_ref.def_id());\n         let trait_ref = *trait_ref.skip_binder();\n@@ -410,6 +409,38 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"crate_local\".to_owned(), None));\n         }\n \n+        // Allow targetting all integers using `{integral}`, even if the exact type was resolved\n+        if self_ty.is_integral() {\n+            flags.push((\"_Self\".to_owned(), Some(\"{integral}\".to_owned())));\n+        }\n+\n+        if let ty::Array(aty, len) = self_ty.sty {\n+            flags.push((\"_Self\".to_owned(), Some(\"[]\".to_owned())));\n+            flags.push((\"_Self\".to_owned(), Some(format!(\"[{}]\", aty))));\n+            if let Some(def) = aty.ty_adt_def() {\n+                // We also want to be able to select the array's type's original\n+                // signature with no type arguments resolved\n+                flags.push((\n+                    \"_Self\".to_owned(),\n+                    Some(format!(\"[{}]\", self.tcx.type_of(def.did).to_string())),\n+                ));\n+                let tcx = self.tcx;\n+                if let Some(len) = len.val.try_to_scalar().and_then(|scalar| {\n+                    scalar.to_usize(tcx).ok()\n+                }) {\n+                    flags.push((\n+                        \"_Self\".to_owned(),\n+                        Some(format!(\"[{}; {}]\", self.tcx.type_of(def.did).to_string(), len)),\n+                    ));\n+                } else {\n+                    flags.push((\n+                        \"_Self\".to_owned(),\n+                        Some(format!(\"[{}; _]\", self.tcx.type_of(def.did).to_string())),\n+                    ));\n+                }\n+            }\n+        }\n+\n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item(\n             self.tcx, trait_ref.def_id, def_id\n         ) {"}, {"sha": "8554b346beb28490f668518e833905187dcc2826", "filename": "src/test/ui/conservative_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fconservative_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fconservative_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -11,7 +11,7 @@\n // #39872, #39553\n \n fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n-    //~^ ERROR the trait bound `(): std::iter::Iterator` is not satisfied [E0277]\n+    //~^ ERROR `()` is not an iterator\n }\n \n fn main() {}"}, {"sha": "cfa4618566ef1cea057b3b1df1972be7749ed427", "filename": "src/test/ui/conservative_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconservative_impl_trait.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): std::iter::Iterator` is not satisfied\n+error[E0277]: `()` is not an iterator\n   --> $DIR/conservative_impl_trait.rs:13:33\n    |\n LL | fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: the return type of a function must have a statically known size"}, {"sha": "14764b4e9f0f8afae82c8e263b4f34f67d09ec0b", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -75,15 +75,16 @@ LL | | }\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the trait bound `i32: std::iter::Iterator` is not satisfied\n+error[E0277]: `i32` is not an iterator\n   --> $DIR/feature-gate-trivial_bounds.rs:50:1\n    |\n LL | / fn use_for() where i32: Iterator { //~ ERROR\n LL | |     for _ in 2i32 {}\n LL | | }\n-   | |_^ `i32` is not an iterator; maybe try calling `.iter()` or a similar method\n+   | |_^ `i32` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `i32`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n "}, {"sha": "83ec6c2db9b806c90f809659b5f92b52fb90754f", "filename": "src/test/ui/for/for-c-in-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     for c in \"asdf\" {\n-    //~^ ERROR the trait bound `&str: std::iter::Iterator` is not satisfied\n+    //~^ ERROR `&str` is not an iterator\n     //~| NOTE `&str` is not an iterator\n     //~| HELP the trait `std::iter::Iterator` is not implemented for `&str`\n     //~| NOTE required by `std::iter::IntoIterator::into_iter`"}, {"sha": "d3db935166eb4e5f99fff2d4d37586ce628e5cd2", "filename": "src/test/ui/for/for-c-in-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `&str: std::iter::Iterator` is not satisfied\n+error[E0277]: `&str` is not an iterator\n   --> $DIR/for-c-in-str.rs:14:14\n    |\n LL |     for c in \"asdf\" {"}, {"sha": "b54d445ae37f0f645ddda32ab8a87ebdb64ce33c", "filename": "src/test/ui/for/for-loop-bogosity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -24,7 +24,8 @@ pub fn main() {\n         x: 1,\n         y: 2,\n     };\n-    for x in bogus { //~ ERROR `MyStruct: std::iter::Iterator` is not satisfied\n+    for x in bogus {\n+    //~^ ERROR `MyStruct` is not an iterator\n         drop(x);\n     }\n }"}, {"sha": "1aaf12c5da029277d87b3e3a9a811f95b3cda62d", "filename": "src/test/ui/for/for-loop-bogosity.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `MyStruct: std::iter::Iterator` is not satisfied\n+error[E0277]: `MyStruct` is not an iterator\n   --> $DIR/for-loop-bogosity.rs:27:14\n    |\n-LL |     for x in bogus { //~ ERROR `MyStruct: std::iter::Iterator` is not satisfied\n-   |              ^^^^^ `MyStruct` is not an iterator; maybe try calling `.iter()` or a similar method\n+LL |     for x in bogus {\n+   |              ^^^^^ `MyStruct` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `MyStruct`\n    = note: required by `std::iter::IntoIterator::into_iter`"}, {"sha": "7a83b098e78feca03761c0af8a0aa4c2f45ff6d4", "filename": "src/test/ui/issues/issue-22872.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,23 @@\n+trait Wrap<'b> {\n+    fn foo(&'b mut self);\n+}\n+\n+struct Wrapper<P>(P);\n+\n+impl<'b, P> Wrap<'b> for Wrapper<P>\n+where P: Process<'b>,\n+      <P as Process<'b>>::Item: Iterator {\n+    fn foo(&mut self) {}\n+}\n+\n+\n+pub trait Process<'a> {\n+    type Item;\n+    fn bar(&'a self);\n+}\n+\n+fn push_process<P>(process: P) where P: Process<'static> {\n+    let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n+}\n+\n+fn main() {}"}, {"sha": "231080add9bd0da7a51116779cdb2d3e4179887a", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: the trait bound `for<'b> P: Process<'b>` is not satisfied\n+  --> $DIR/issue-22872.rs:20:36\n+   |\n+LL |     let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'b> Process<'b>` is not implemented for `P`\n+   |\n+   = help: consider adding a `where for<'b> P: Process<'b>` bound\n+   = note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n+   = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n+\n+error[E0277]: `<P as Process<'b>>::Item` is not an iterator\n+  --> $DIR/issue-22872.rs:20:36\n+   |\n+LL |     let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'b>>::Item` is not an iterator\n+   |\n+   = help: the trait `for<'b> std::iter::Iterator` is not implemented for `<P as Process<'b>>::Item`\n+   = note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n+   = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "11990c34fbae44ac1a4501b2bf47421228204501", "filename": "src/test/ui/issues/issue-28098.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -10,13 +10,13 @@\n \n fn main() {\n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR `(): std::iter::Iterator` is not satisfied\n+    //~^ ERROR `()` is not an iterator\n \n     for _ in false {}\n-    //~^ ERROR `bool: std::iter::Iterator` is not satisfied\n+    //~^ ERROR `bool` is not an iterator\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR `(): std::iter::Iterator` is not satisfied\n+    //~^ ERROR `()` is not an iterator\n \n     other()\n }\n@@ -25,11 +25,11 @@ pub fn other() {\n     // check errors are still reported globally\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR `(): std::iter::Iterator` is not satisfied\n+    //~^ ERROR `()` is not an iterator\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR `(): std::iter::Iterator` is not satisfied\n+    //~^ ERROR `()` is not an iterator\n \n     for _ in false {}\n-    //~^ ERROR `bool: std::iter::Iterator` is not satisfied\n+    //~^ ERROR `bool` is not an iterator\n }"}, {"sha": "c7537065b32b6adae4abe98d52062a0a4d667930", "filename": "src/test/ui/issues/issue-28098.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,53 +1,53 @@\n-error[E0277]: the trait bound `(): std::iter::Iterator` is not satisfied\n+error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:12:13\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: required by `std::iter::Iterator::next`\n \n-error[E0277]: the trait bound `bool: std::iter::Iterator` is not satisfied\n+error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:15:14\n    |\n LL |     for _ in false {}\n-   |              ^^^^^ `bool` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `bool`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n-error[E0277]: the trait bound `(): std::iter::Iterator` is not satisfied\n+error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:18:13\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: required by `std::iter::Iterator::next`\n \n-error[E0277]: the trait bound `(): std::iter::Iterator` is not satisfied\n+error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:27:13\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: required by `std::iter::Iterator::next`\n \n-error[E0277]: the trait bound `(): std::iter::Iterator` is not satisfied\n+error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:30:13\n    |\n LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `()`\n    = note: required by `std::iter::Iterator::next`\n \n-error[E0277]: the trait bound `bool: std::iter::Iterator` is not satisfied\n+error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:33:14\n    |\n LL |     for _ in false {}\n-   |              ^^^^^ `bool` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `bool`\n    = note: required by `std::iter::IntoIterator::into_iter`"}, {"sha": "565ba8dd4de45259d7ffc4de5ca7c6ae743de0ad", "filename": "src/test/ui/issues/issue-50480.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -12,6 +12,6 @@\n //~^ ERROR the trait `Copy` may not be implemented for this type\n struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n-//~| ERROR the trait bound `i32: std::iter::Iterator` is not satisfied\n+//~| ERROR `i32` is not an iterator\n \n fn main() {}"}, {"sha": "cbff927ac74d4370b45dd2b31f80fa2fd680eda8", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -4,13 +4,14 @@ error[E0412]: cannot find type `NotDefined` in this scope\n LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |            ^^^^^^^^^^ not found in this scope\n \n-error[E0277]: the trait bound `i32: std::iter::Iterator` is not satisfied\n+error[E0277]: `i32` is not an iterator\n   --> $DIR/issue-50480.rs:13:24\n    |\n LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `i32`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/issue-50480.rs:11:17"}, {"sha": "a7d6e80bae5f766e34f3bfed429a73a39a7da341", "filename": "src/test/ui/iterators/array-of-ranges.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    for _ in [0..1] {}\n+    for _ in [0..=1] {}\n+    for _ in [0..] {}\n+    for _ in [..1] {}\n+    for _ in [..=1] {}\n+    let start = 0;\n+    let end = 0;\n+    for _ in [start..end] {}\n+    let array_of_range = [start..end];\n+    for _ in array_of_range {}\n+    for _ in [0..1, 2..3] {}\n+    for _ in [0..=1] {}\n+}"}, {"sha": "fbe7e0ee74889aa6f9d3a22ee548cc4903680122", "filename": "src/test/ui/iterators/array-of-ranges.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,93 @@\n+error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:2:14\n+   |\n+LL |     for _ in [0..1] {}\n+   |              ^^^^^^ if you meant to iterate between two values, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n+   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::RangeInclusive<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:3:14\n+   |\n+LL |     for _ in [0..=1] {}\n+   |              ^^^^^^^ if you meant to iterate between two values, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeInclusive<{integer}>; 1]`\n+   = note: `[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a `RangeInclusive` without the brackets: `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::RangeFrom<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:4:14\n+   |\n+LL |     for _ in [0..] {}\n+   |              ^^^^^ if you meant to iterate from a value onwards, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeFrom<{integer}>; 1]`\n+   = note: `[start..]` is an array of one `RangeFrom`; you might have meant to have a `RangeFrom` without the brackets: `start..`, keeping in mind that iterating over an unbounded iterator will run forever unless you `break` or `return` from within the loop\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::RangeTo<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:5:14\n+   |\n+LL |     for _ in [..1] {}\n+   |              ^^^^^ if you meant to iterate until a value, remove the square brackets and add a starting value\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeTo<{integer}>; 1]`\n+   = note: `[..end]` is an array of one `RangeTo`; you might have meant to have a bounded `Range` without the brackets: `0..end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::RangeToInclusive<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:6:14\n+   |\n+LL |     for _ in [..=1] {}\n+   |              ^^^^^^ if you meant to iterate until a value (including it), remove the square brackets and add a starting value\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeToInclusive<{integer}>; 1]`\n+   = note: `[..=end]` is an array of one `RangeToInclusive`; you might have meant to have a bounded `RangeInclusive` without the brackets: `0..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:9:14\n+   |\n+LL |     for _ in [start..end] {}\n+   |              ^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n+   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:11:14\n+   |\n+LL |     for _ in array_of_range {}\n+   |              ^^^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n+   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::Range<{integer}>; 2]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:12:14\n+   |\n+LL |     for _ in [0..1, 2..3] {}\n+   |              ^^^^^^^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 2]`\n+   = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::RangeInclusive<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:13:14\n+   |\n+LL |     for _ in [0..=1] {}\n+   |              ^^^^^^^ if you meant to iterate between two values, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeInclusive<{integer}>; 1]`\n+   = note: `[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a `RangeInclusive` without the brackets: `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f54bb812743624bb535f51002a81d8ba83a51c69", "filename": "src/test/ui/iterators/array.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    for _ in [1, 2] {}\n+    let x = [1, 2];\n+    for _ in x {}\n+    for _ in [1.0, 2.0] {}\n+}"}, {"sha": "fd74cd7a727e28e402be358bdcf92156f4be5fad", "filename": "src/test/ui/iterators/array.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: `[{integer}; 2]` is not an iterator\n+  --> $DIR/array.rs:2:14\n+   |\n+LL |     for _ in [1, 2] {}\n+   |              ^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[{integer}; 2]`\n+   = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[{integer}; 2]` is not an iterator\n+  --> $DIR/array.rs:4:14\n+   |\n+LL |     for _ in x {}\n+   |              ^ borrow the array with `&` or call `.iter()` on it to iterate over it\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[{integer}; 2]`\n+   = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[{float}; 2]` is not an iterator\n+  --> $DIR/array.rs:5:14\n+   |\n+LL |     for _ in [1.0, 2.0] {}\n+   |              ^^^^^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[{float}; 2]`\n+   = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "78285b8161c3895f723024a53a8aa23b055f440d", "filename": "src/test/ui/iterators/bound.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fbound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fbound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fbound.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,3 @@\n+struct S<I: Iterator>(I);\n+struct T(S<u8>);\n+fn main() {}"}, {"sha": "14057387c4f4077f78828e4965f1ed0db5891066", "filename": "src/test/ui/iterators/bound.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `u8` is not an iterator\n+  --> $DIR/bound.rs:2:10\n+   |\n+LL | struct T(S<u8>);\n+   |          ^^^^^ `u8` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `u8`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+note: required by `S`\n+  --> $DIR/bound.rs:1:1\n+   |\n+LL | struct S<I: Iterator>(I);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7537c7904c0bf7fe5849afb6ffa5803002f57b20", "filename": "src/test/ui/iterators/integral.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fintegral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fintegral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fintegral.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,26 @@\n+fn main() {\n+    for _ in 42 {}\n+    //~^ ERROR `{integer}` is not an iterator\n+    for _ in 42 as u8 {}\n+    //~^ ERROR `u8` is not an iterator\n+    for _ in 42 as i8 {}\n+    //~^ ERROR `i8` is not an iterator\n+    for _ in 42 as u16 {}\n+    //~^ ERROR `u16` is not an iterator\n+    for _ in 42 as i16 {}\n+    //~^ ERROR `i16` is not an iterator\n+    for _ in 42 as u32 {}\n+    //~^ ERROR `u32` is not an iterator\n+    for _ in 42 as i32 {}\n+    //~^ ERROR `i32` is not an iterator\n+    for _ in 42 as u64 {}\n+    //~^ ERROR `u64` is not an iterator\n+    for _ in 42 as i64 {}\n+    //~^ ERROR `i64` is not an iterator\n+    for _ in 42 as usize {}\n+    //~^ ERROR `usize` is not an iterator\n+    for _ in 42 as isize {}\n+    //~^ ERROR `isize` is not an iterator\n+    for _ in 42.0 {}\n+    //~^ ERROR `{float}` is not an iterator\n+}"}, {"sha": "71e1e81e5afec9e1e3414666877d4b287a6ff80f", "filename": "src/test/ui/iterators/integral.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,122 @@\n+error[E0277]: `{integer}` is not an iterator\n+  --> $DIR/integral.rs:2:14\n+   |\n+LL |     for _ in 42 {}\n+   |              ^^ `{integer}` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `{integer}`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `u8` is not an iterator\n+  --> $DIR/integral.rs:4:14\n+   |\n+LL |     for _ in 42 as u8 {}\n+   |              ^^^^^^^^ `u8` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `u8`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `i8` is not an iterator\n+  --> $DIR/integral.rs:6:14\n+   |\n+LL |     for _ in 42 as i8 {}\n+   |              ^^^^^^^^ `i8` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `i8`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `u16` is not an iterator\n+  --> $DIR/integral.rs:8:14\n+   |\n+LL |     for _ in 42 as u16 {}\n+   |              ^^^^^^^^^ `u16` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `u16`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `i16` is not an iterator\n+  --> $DIR/integral.rs:10:14\n+   |\n+LL |     for _ in 42 as i16 {}\n+   |              ^^^^^^^^^ `i16` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `i16`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `u32` is not an iterator\n+  --> $DIR/integral.rs:12:14\n+   |\n+LL |     for _ in 42 as u32 {}\n+   |              ^^^^^^^^^ `u32` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `u32`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `i32` is not an iterator\n+  --> $DIR/integral.rs:14:14\n+   |\n+LL |     for _ in 42 as i32 {}\n+   |              ^^^^^^^^^ `i32` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `i32`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `u64` is not an iterator\n+  --> $DIR/integral.rs:16:14\n+   |\n+LL |     for _ in 42 as u64 {}\n+   |              ^^^^^^^^^ `u64` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `u64`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `i64` is not an iterator\n+  --> $DIR/integral.rs:18:14\n+   |\n+LL |     for _ in 42 as i64 {}\n+   |              ^^^^^^^^^ `i64` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `i64`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `usize` is not an iterator\n+  --> $DIR/integral.rs:20:14\n+   |\n+LL |     for _ in 42 as usize {}\n+   |              ^^^^^^^^^^^ `usize` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `usize`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `isize` is not an iterator\n+  --> $DIR/integral.rs:22:14\n+   |\n+LL |     for _ in 42 as isize {}\n+   |              ^^^^^^^^^^^ `isize` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `isize`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `{float}` is not an iterator\n+  --> $DIR/integral.rs:24:14\n+   |\n+LL |     for _ in 42.0 {}\n+   |              ^^^^ `{float}` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `{float}`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "925d2d61a124744f076fbed6ffd6a5bd1a0cfef2", "filename": "src/test/ui/iterators/ranges.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    for _ in ..10 {}\n+    //~^ ERROR E0277\n+    for _ in ..=10 {}\n+    //~^ ERROR E0277\n+    for _ in 0..10 {}\n+    for _ in 0..=10 {}\n+    for _ in 0.. {}\n+}"}, {"sha": "e5e2d87879d2350981a201a608c9be5405719a00", "filename": "src/test/ui/iterators/ranges.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: `std::ops::RangeTo<{integer}>` is not an iterator\n+  --> $DIR/ranges.rs:2:14\n+   |\n+LL |     for _ in ..10 {}\n+   |              ^^^^ if you meant to iterate until a value, add a starting value\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `std::ops::RangeTo<{integer}>`\n+   = note: `..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a bounded `Range`: `0..end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `std::ops::RangeToInclusive<{integer}>` is not an iterator\n+  --> $DIR/ranges.rs:4:14\n+   |\n+LL |     for _ in ..=10 {}\n+   |              ^^^^^ if you meant to iterate until a value (including it), add a starting value\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `std::ops::RangeToInclusive<{integer}>`\n+   = note: `..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant to have a bounded `RangeInclusive`: `0..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4373dcaabe57bfe86069e7c37106ac6a7fd3e9c8", "filename": "src/test/ui/iterators/string.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fstring.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    for _ in \"\".to_owned() {}\n+    //~^ ERROR `std::string::String` is not an iterator\n+    for _ in \"\" {}\n+    //~^ ERROR `&str` is not an iterator\n+}"}, {"sha": "927de952cc8270b9dd9221d0d7688c15be6dc176", "filename": "src/test/ui/iterators/string.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: `std::string::String` is not an iterator\n+  --> $DIR/string.rs:2:14\n+   |\n+LL |     for _ in \"\".to_owned() {}\n+   |              ^^^^^^^^^^^^^ `std::string::String` is not an iterator; try calling `.chars()` or `.bytes()`\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `std::string::String`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `&str` is not an iterator\n+  --> $DIR/string.rs:4:14\n+   |\n+LL |     for _ in \"\" {}\n+   |              ^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `&str`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d7c80a677a5e13d334ca4a98d7e457e04dcc63b7", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let v = vec![0, 1, 2, 3];\n \n     for (i, n) in &v.iter().enumerate() {\n-        //~^ ERROR the trait bound\n+        //~^ ERROR `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n         println!(\"{}\", i);\n     }\n }"}, {"sha": "1fc661efd91f4b7f9bdffa01771e6b4d9a1d6f8f", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the trait bound `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>: std::iter::Iterator` is not satisfied\n+error[E0277]: `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n   --> $DIR/suggest-remove-refs-1.rs:14:19\n    |\n LL |     for (i, n) in &v.iter().enumerate() {\n    |                   -^^^^^^^^^^^^^^^^^^^^\n    |                   |\n-   |                   `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |                   `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |                   help: consider removing 1 leading `&`-references\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>`"}, {"sha": "37af97323d5980b8c7d2c00a2179aa4be94df74a", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let v = vec![0, 1, 2, 3];\n \n     for (i, n) in & & & & &v.iter().enumerate() {\n-        //~^ ERROR the trait bound\n+        //~^ ERROR `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n         println!(\"{}\", i);\n     }\n }"}, {"sha": "96c6c92d59baa94a356c17fac1267baa33e50691", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the trait bound `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>: std::iter::Iterator` is not satisfied\n+error[E0277]: `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n   --> $DIR/suggest-remove-refs-2.rs:14:19\n    |\n LL |     for (i, n) in & & & & &v.iter().enumerate() {\n    |                   ---------^^^^^^^^^^^^^^^^^^^^\n    |                   |\n-   |                   `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |                   `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |                   help: consider removing 5 leading `&`-references\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>`"}, {"sha": "c9dff35f92c0b860f1f24fa76bb041a70251998b", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -15,7 +15,7 @@ fn main() {\n         & &v\n         .iter()\n         .enumerate() {\n-        //~^^^^ ERROR the trait bound\n+        //~^^^^ ERROR `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an\n         println!(\"{}\", i);\n     }\n }"}, {"sha": "4311c432b41d35a82f74a6caaaa6da91150087ad", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>: std::iter::Iterator` is not satisfied\n+error[E0277]: `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n   --> $DIR/suggest-remove-refs-3.rs:14:19\n    |\n LL |        for (i, n) in & & &\n@@ -9,7 +9,7 @@ LL | ||         & &v\n    | ||___________- help: consider removing 5 leading `&`-references\n LL | |          .iter()\n LL | |          .enumerate() {\n-   | |_____________________^ `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator; maybe try calling `.iter()` or a similar method\n+   | |_____________________^ `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required by `std::iter::IntoIterator::into_iter`"}]}