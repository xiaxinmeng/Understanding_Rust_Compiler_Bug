{"sha": "86ff9fa9c95b618605fad27bd752486c6259187b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZmY5ZmE5Yzk1YjYxODYwNWZhZDI3YmQ3NTI0ODZjNjI1OTE4N2I=", "commit": {"author": {"name": "Havvy", "email": "ryan.havvy@gmail.com", "date": "2018-06-01T15:52:07Z"}, "committer": {"name": "Havvy", "email": "ryan.havvy@gmail.com", "date": "2018-06-01T21:37:16Z"}, "message": "Dedup auto traits in trait objects", "tree": {"sha": "a6e2ba5cbdc7b71f012f0cbf958a26e8942042f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e2ba5cbdc7b71f012f0cbf958a26e8942042f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86ff9fa9c95b618605fad27bd752486c6259187b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86ff9fa9c95b618605fad27bd752486c6259187b", "html_url": "https://github.com/rust-lang/rust/commit/86ff9fa9c95b618605fad27bd752486c6259187b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86ff9fa9c95b618605fad27bd752486c6259187b/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd8cb45b4f19b433aea080c5e0f296954db8ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd8cb45b4f19b433aea080c5e0f296954db8ded", "html_url": "https://github.com/rust-lang/rust/commit/0fd8cb45b4f19b433aea080c5e0f296954db8ded"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "68553ece3a750cf0d5cb8cef65f75d533e510848", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86ff9fa9c95b618605fad27bd752486c6259187b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ff9fa9c95b618605fad27bd752486c6259187b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=86ff9fa9c95b618605fad27bd752486c6259187b", "patch": "@@ -30,6 +30,7 @@ use util::common::ErrorReported;\n use util::nodemap::{FxHashSet, FxHashMap};\n use errors::FatalError;\n \n+use std::cmp::Ordering;\n use std::iter;\n use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n@@ -706,10 +707,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         .emit();\n         }\n \n+        // Dedup auto traits so that `dyn Trait + Send + Send` is the same as `dyn Trait + Send`.\n+        let mut auto_traits =\n+            auto_traits.into_iter().map(ty::ExistentialPredicate::AutoTrait).collect::<Vec<_>>();\n+        auto_traits.sort_by(|a, b| a.cmp(tcx, b));\n+        auto_traits.dedup_by(|a, b| (&*a).cmp(tcx, b) == Ordering::Equal);\n+\n         // skip_binder is okay, because the predicates are re-bound.\n         let mut v =\n             iter::once(ty::ExistentialPredicate::Trait(*existential_principal.skip_binder()))\n-            .chain(auto_traits.into_iter().map(ty::ExistentialPredicate::AutoTrait))\n+            .chain(auto_traits.into_iter())\n             .chain(existential_projections\n                    .map(|x| ty::ExistentialPredicate::Projection(*x.skip_binder())))\n             .collect::<AccumulateVec<[_; 8]>>();"}, {"sha": "9f5845f6d77b06091bc70b892325908af0bfb742", "filename": "src/test/run-pass/trait-object-auto-dedup.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/86ff9fa9c95b618605fad27bd752486c6259187b/src%2Ftest%2Frun-pass%2Ftrait-object-auto-dedup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ff9fa9c95b618605fad27bd752486c6259187b/src%2Ftest%2Frun-pass%2Ftrait-object-auto-dedup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-auto-dedup.rs?ref=86ff9fa9c95b618605fad27bd752486c6259187b", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that duplicate auto trait bounds in trait objects don't create new types.\n+#[allow(unused_assignments)]\n+\n+use std::marker::Send as SendAlias;\n+\n+// A dummy trait for the non-auto trait.\n+trait Trait {}\n+\n+// A dummy struct to implement Trait, Send, and .\n+struct Struct;\n+\n+impl Trait for Struct {}\n+\n+// These three functions should be equivalent.\n+fn takes_dyn_trait_send(_: Box<dyn Trait + Send>) {}\n+fn takes_dyn_trait_send_send(_: Box<dyn Trait + Send + Send>) {}\n+fn takes_dyn_trait_send_sendalias(_: Box<dyn Trait + Send + SendAlias>) {}\n+\n+impl dyn Trait + Send + Send {\n+    fn do_nothing(&self) {}\n+}\n+\n+fn main() {\n+    // 1. Moving into a variable with more Sends and back.\n+    let mut dyn_trait_send = Box::new(Struct) as Box<dyn Trait + Send>;\n+    let dyn_trait_send_send: Box<dyn Trait + Send + Send> = dyn_trait_send;\n+    dyn_trait_send = dyn_trait_send_send;\n+\n+    // 2. Calling methods with different number of Sends.\n+    let dyn_trait_send = Box::new(Struct) as Box<dyn Trait + Send>;\n+    takes_dyn_trait_send_send(dyn_trait_send);\n+\n+    let dyn_trait_send_send = Box::new(Struct) as Box<dyn Trait + Send + Send>;\n+    takes_dyn_trait_send(dyn_trait_send_send);\n+\n+    // 3. Aliases to the trait are transparent.\n+    let dyn_trait_send = Box::new(Struct) as Box<dyn Trait + Send>;\n+    takes_dyn_trait_send_sendalias(dyn_trait_send);\n+\n+    // 4. Calling an impl that duplicates an auto trait.\n+    let dyn_trait_send = Box::new(Struct) as Box<dyn Trait + Send>;\n+    dyn_trait_send.do_nothing();\n+}"}, {"sha": "d3e4627a4c9b8c56ef237e1ec7186f3373738c4e", "filename": "src/test/ui/trait-object-auto-dedup-in-impl.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/86ff9fa9c95b618605fad27bd752486c6259187b/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ff9fa9c95b618605fad27bd752486c6259187b/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.rs?ref=86ff9fa9c95b618605fad27bd752486c6259187b", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks to make sure that `dyn Trait + Send` and `dyn Trait + Send + Send` are the same type.\n+// Issue: #47010\n+\n+struct Struct;\n+impl Trait for Struct {}\n+trait Trait {}\n+\n+type Send1 = Trait + Send;\n+type Send2 = Trait + Send + Send;\n+\n+fn main () {}\n+\n+impl Trait + Send {\n+    fn test(&self) { println!(\"one\"); } //~ ERROR duplicate definitions with name `test`\n+}\n+\n+impl Trait + Send + Send {\n+    fn test(&self) { println!(\"two\"); }\n+}"}, {"sha": "9abd81cdcfa2370acb44f282099db5ce32c2f8e2", "filename": "src/test/ui/trait-object-auto-dedup-in-impl.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86ff9fa9c95b618605fad27bd752486c6259187b/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86ff9fa9c95b618605fad27bd752486c6259187b/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.stderr?ref=86ff9fa9c95b618605fad27bd752486c6259187b", "patch": "@@ -0,0 +1,12 @@\n+error[E0592]: duplicate definitions with name `test`\n+  --> $DIR/trait-object-auto-dedup-in-impl.rs:24:5\n+   |\n+LL |     fn test(&self) { println!(\"one\"); } //~ ERROR duplicate definitions with name `test`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `test`\n+...\n+LL |     fn test(&self) { println!(\"two\"); }\n+   |     ----------------------------------- other definition for `test`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}]}