{"sha": "54b9b03ca2e90083fd1d1fe199c5dde595423b53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjliMDNjYTJlOTAwODNmZDFkMWZlMTk5YzVkZGU1OTU0MjNiNTM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-04T14:44:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-04T14:54:45Z"}, "message": "Show GotoTypeAction for TypeParam", "tree": {"sha": "a6f3fee61b7f920ea9a2464fbf2e3ae3c3c893c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f3fee61b7f920ea9a2464fbf2e3ae3c3c893c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b9b03ca2e90083fd1d1fe199c5dde595423b53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b9b03ca2e90083fd1d1fe199c5dde595423b53", "html_url": "https://github.com/rust-lang/rust/commit/54b9b03ca2e90083fd1d1fe199c5dde595423b53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b9b03ca2e90083fd1d1fe199c5dde595423b53/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd47e140b6f6f39743d52f72437e6eaa2bfd9de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1", "html_url": "https://github.com/rust-lang/rust/commit/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "071e553a88b7aaa9c3964d9ba8398829aec56cb8", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54b9b03ca2e90083fd1d1fe199c5dde595423b53/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b9b03ca2e90083fd1d1fe199c5dde595423b53/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=54b9b03ca2e90083fd1d1fe199c5dde595423b53", "patch": "@@ -1276,6 +1276,18 @@ impl TypeParam {\n         }\n     }\n \n+    pub fn trait_bounds(self, db: &dyn HirDatabase) -> Vec<Trait> {\n+        db.generic_predicates_for_param(self.id)\n+            .into_iter()\n+            .filter_map(|pred| match &pred.value {\n+                hir_ty::GenericPredicate::Implemented(trait_ref) => {\n+                    Some(Trait::from(trait_ref.trait_))\n+                }\n+                _ => None,\n+            })\n+            .collect()\n+    }\n+\n     pub fn default(self, db: &dyn HirDatabase) -> Option<Type> {\n         let params = db.generic_defaults(self.id.parent);\n         let local_idx = hir_ty::param_idx(db, self.id)?;"}, {"sha": "f2ad95cb607f62e9ce6a2994740ea439418adfa9", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 54, "deletions": 17, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/54b9b03ca2e90083fd1d1fe199c5dde595423b53/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b9b03ca2e90083fd1d1fe199c5dde595423b53/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=54b9b03ca2e90083fd1d1fe199c5dde595423b53", "patch": "@@ -228,29 +228,34 @@ fn runnable_action(\n }\n \n fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n-    let ty = match def {\n-        Definition::Local(it) => it.ty(db),\n-        Definition::ConstParam(it) => it.ty(db),\n-        _ => return None,\n-    };\n     let mut targets: Vec<ModuleDef> = Vec::new();\n     let mut push_new_def = |item: ModuleDef| {\n         if !targets.contains(&item) {\n             targets.push(item);\n         }\n     };\n \n-    ty.walk(db, |t| {\n-        if let Some(adt) = t.as_adt() {\n-            push_new_def(adt.into());\n-        } else if let Some(trait_) = t.as_dyn_trait() {\n-            push_new_def(trait_.into());\n-        } else if let Some(traits) = t.as_impl_traits(db) {\n-            traits.into_iter().for_each(|it| push_new_def(it.into()));\n-        } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n-            push_new_def(trait_.into());\n-        }\n-    });\n+    if let Definition::TypeParam(it) = def {\n+        it.trait_bounds(db).into_iter().for_each(|it| push_new_def(it.into()));\n+    } else {\n+        let ty = match def {\n+            Definition::Local(it) => it.ty(db),\n+            Definition::ConstParam(it) => it.ty(db),\n+            _ => return None,\n+        };\n+\n+        ty.walk(db, |t| {\n+            if let Some(adt) = t.as_adt() {\n+                push_new_def(adt.into());\n+            } else if let Some(trait_) = t.as_dyn_trait() {\n+                push_new_def(trait_.into());\n+            } else if let Some(traits) = t.as_impl_traits(db) {\n+                traits.into_iter().for_each(|it| push_new_def(it.into()));\n+            } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n+                push_new_def(trait_.into());\n+            }\n+        });\n+    }\n \n     let targets = targets\n         .into_iter()\n@@ -3086,7 +3091,7 @@ fn main() { let s<|>t = test().get(); }\n struct Bar;\n struct Foo<const BAR: Bar>;\n \n-impl<const BAR: Bar> Foo<BAR<|>> {} \n+impl<const BAR: Bar> Foo<BAR<|>> {}\n \"#,\n             expect![[r#\"\n                 [\n@@ -3112,6 +3117,38 @@ impl<const BAR: Bar> Foo<BAR<|>> {}\n         );\n     }\n \n+    #[test]\n+    fn test_hover_type_param_has_goto_type_action() {\n+        check_actions(\n+            r#\"\n+trait Foo {}\n+\n+fn foo<T: Foo>(t: T<|>){}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    GoToType(\n+                        [\n+                            HoverGotoTypeData {\n+                                mod_path: \"test::Foo\",\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..12,\n+                                    focus_range: 6..9,\n+                                    name: \"Foo\",\n+                                    kind: Trait,\n+                                    description: \"trait Foo\",\n+                                },\n+                            },\n+                        ],\n+                    ),\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn hover_displays_normalized_crate_names() {\n         check("}]}