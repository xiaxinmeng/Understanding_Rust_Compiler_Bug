{"sha": "419a14772a6ae4c61fd275e31dbfceedd0223630", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOWExNDc3MmE2YWU0YzYxZmQyNzVlMzFkYmZjZWVkZDAyMjM2MzA=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-02T01:38:41Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-03T16:59:45Z"}, "message": "Fix make_mono_id to take into account self types. Closes #7536.", "tree": {"sha": "8cf5fce6ca7e83d83821760ad85deda5520eab1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf5fce6ca7e83d83821760ad85deda5520eab1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/419a14772a6ae4c61fd275e31dbfceedd0223630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/419a14772a6ae4c61fd275e31dbfceedd0223630", "html_url": "https://github.com/rust-lang/rust/commit/419a14772a6ae4c61fd275e31dbfceedd0223630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/419a14772a6ae4c61fd275e31dbfceedd0223630/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6fc46c030ab0515a052fa99c9e10c75cfc8184", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6fc46c030ab0515a052fa99c9e10c75cfc8184", "html_url": "https://github.com/rust-lang/rust/commit/0c6fc46c030ab0515a052fa99c9e10c75cfc8184"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "65271faa7b0869b8cb05b03b1eea5130d6ec1546", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/419a14772a6ae4c61fd275e31dbfceedd0223630/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419a14772a6ae4c61fd275e31dbfceedd0223630/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=419a14772a6ae4c61fd275e31dbfceedd0223630", "patch": "@@ -641,16 +641,18 @@ pub fn vtable_id(ccx: @mut CrateContext,\n               -> mono_id {\n     match origin {\n         &typeck::vtable_static(impl_id, ref substs, sub_vtables) => {\n+            let psubsts = param_substs {\n+                tys: copy *substs,\n+                vtables: Some(sub_vtables),\n+                self_ty: None,\n+                self_vtable: None\n+            };\n+\n             monomorphize::make_mono_id(\n                 ccx,\n                 impl_id,\n-                *substs,\n-                if sub_vtables.is_empty() {\n-                    None\n-                } else {\n-                    Some(sub_vtables)\n-                },\n                 None,\n+                &psubsts,\n                 None)\n         }\n "}, {"sha": "1a597e30afd5cfdde0f44d597c9ec64186e6a02c", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/419a14772a6ae4c61fd275e31dbfceedd0223630/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419a14772a6ae4c61fd275e31dbfceedd0223630/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=419a14772a6ae4c61fd275e31dbfceedd0223630", "patch": "@@ -50,11 +50,13 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n             fn_id=%s, \\\n             real_substs=%s, \\\n             vtables=%s, \\\n+            self_vtable=%s, \\\n             impl_did_opt=%s, \\\n             ref_id=%?)\",\n            fn_id.repr(ccx.tcx),\n            real_substs.repr(ccx.tcx),\n            vtables.repr(ccx.tcx),\n+           self_vtable.repr(ccx.tcx),\n            impl_did_opt.repr(ccx.tcx),\n            ref_id);\n \n@@ -71,7 +73,16 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     for real_substs.tps.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n     for substs.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n     let param_uses = type_use::type_uses_for(ccx, fn_id, substs.len());\n-    let hash_id = make_mono_id(ccx, fn_id, substs, vtables, impl_did_opt,\n+\n+    let psubsts = @param_substs {\n+        tys: substs,\n+        vtables: vtables,\n+        self_ty: real_substs.self_ty,\n+        self_vtable: self_vtable\n+    };\n+\n+    let hash_id = make_mono_id(ccx, fn_id, impl_did_opt,\n+                               &*psubsts,\n                                Some(param_uses));\n     if hash_id.params.iter().any_(\n                 |p| match *p { mono_precise(_, _) => false, _ => true }) {\n@@ -80,12 +91,10 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n \n     debug!(\"monomorphic_fn(\\\n             fn_id=%s, \\\n-            vtables=%s, \\\n-            substs=%s, \\\n+            psubsts=%s, \\\n             hash_id=%?)\",\n            fn_id.repr(ccx.tcx),\n-           vtables.repr(ccx.tcx),\n-           substs.repr(ccx.tcx),\n+           psubsts.repr(ccx.tcx),\n            hash_id);\n \n     match ccx.monomorphized.find(&hash_id) {\n@@ -142,8 +151,8 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n       ast_map::node_struct_ctor(_, i, pt) => (pt, i.ident, i.span)\n     };\n \n-    let mono_ty = ty::subst_tps(ccx.tcx, substs,\n-                                real_substs.self_ty, llitem_ty);\n+    let mono_ty = ty::subst_tps(ccx.tcx, psubsts.tys,\n+                                psubsts.self_ty, llitem_ty);\n     let llfty = type_of_fn_from_ty(ccx, mono_ty);\n \n     ccx.stats.n_monos += 1;\n@@ -172,13 +181,6 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         lldecl\n     };\n \n-    let psubsts = Some(@param_substs {\n-        tys: substs,\n-        vtables: vtables,\n-        self_ty: real_substs.self_ty,\n-        self_vtable: self_vtable\n-    });\n-\n     let lldecl = match map_node {\n       ast_map::node_item(i@@ast::item {\n                 node: ast::item_fn(ref decl, _, _, _, ref body),\n@@ -192,7 +194,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n                  body,\n                  d,\n                  no_self,\n-                 psubsts,\n+                 Some(psubsts),\n                  fn_id.node,\n                  []);\n         d\n@@ -202,7 +204,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n       }\n       ast_map::node_foreign_item(i, _, _, _) => {\n           let d = mk_lldecl();\n-          foreign::trans_intrinsic(ccx, d, i, pt, psubsts.get(), i.attrs,\n+          foreign::trans_intrinsic(ccx, d, i, pt, psubsts, i.attrs,\n                                 ref_id);\n           d\n       }\n@@ -214,7 +216,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         match v.node.kind {\n             ast::tuple_variant_kind(ref args) => {\n                 trans_enum_variant(ccx, enum_item.id, v, /*bad*/copy *args,\n-                                   this_tv.disr_val, psubsts, d);\n+                                   this_tv.disr_val, Some(psubsts), d);\n             }\n             ast::struct_variant_kind(_) =>\n                 ccx.tcx.sess.bug(\"can't monomorphize struct variants\"),\n@@ -225,13 +227,13 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         // XXX: What should the self type be here?\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(/*bad*/copy mth.attrs, d);\n-        meth::trans_method(ccx, pt, mth, psubsts, d);\n+        meth::trans_method(ccx, pt, mth, Some(psubsts), d);\n         d\n       }\n       ast_map::node_trait_method(@ast::provided(mth), _, pt) => {\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(/*bad*/copy mth.attrs, d);\n-        meth::trans_method(ccx, /*bad*/copy *pt, mth, psubsts, d);\n+        meth::trans_method(ccx, /*bad*/copy *pt, mth, Some(psubsts), d);\n         d\n       }\n       ast_map::node_struct_ctor(struct_def, _, _) => {\n@@ -241,7 +243,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n                                  /*bad*/copy struct_def.fields,\n                                  struct_def.ctor_id.expect(\"ast-mapped tuple struct \\\n                                                             didn't have a ctor id\"),\n-                                 psubsts,\n+                                 Some(psubsts),\n                                  d);\n         d\n       }\n@@ -320,26 +322,36 @@ pub fn normalize_for_monomorphization(tcx: ty::ctxt,\n \n pub fn make_mono_id(ccx: @mut CrateContext,\n                     item: ast::def_id,\n-                    substs: &[ty::t],\n-                    vtables: Option<typeck::vtable_res>,\n                     impl_did_opt: Option<ast::def_id>,\n+                    substs: &param_substs,\n                     param_uses: Option<@~[type_use::type_uses]>) -> mono_id {\n     // FIXME (possibly #5801): Need a lot of type hints to get\n     // .collect() to work.\n-    let precise_param_ids: ~[(ty::t, Option<@~[mono_id]>)] = match vtables {\n+    let substs_iter = substs.self_ty.iter().chain_(substs.tys.iter());\n+    let precise_param_ids: ~[(ty::t, Option<@~[mono_id]>)] = match substs.vtables {\n       Some(vts) => {\n         debug!(\"make_mono_id vtables=%s substs=%s\",\n-               vts.repr(ccx.tcx), substs.repr(ccx.tcx));\n-        vts.iter().zip(substs.iter()).transform(|(vtable, subst)| {\n+               vts.repr(ccx.tcx), substs.tys.repr(ccx.tcx));\n+        let self_vtables = substs.self_vtable.map(|vtbl| @~[copy *vtbl]);\n+        let vts_iter = self_vtables.iter().chain_(vts.iter());\n+        vts_iter.zip(substs_iter).transform(|(vtable, subst)| {\n             let v = vtable.map(|vt| meth::vtable_id(ccx, vt));\n             (*subst, if !v.is_empty() { Some(@v) } else { None })\n         }).collect()\n       }\n-      None => substs.iter().transform(|subst| (*subst, None::<@~[mono_id]>)).collect()\n+      None => substs_iter.transform(|subst| (*subst, None::<@~[mono_id]>)).collect()\n     };\n+\n+\n     let param_ids = match param_uses {\n       Some(ref uses) => {\n-        precise_param_ids.iter().zip(uses.iter()).transform(|(id, uses)| {\n+        // param_uses doesn't include a use for the self type.\n+        // We just say it is fully used.\n+        let self_use =\n+            substs.self_ty.map(|_| type_use::use_repr|type_use::use_tydesc);\n+        let uses_iter = self_use.iter().chain_(uses.iter());\n+\n+        precise_param_ids.iter().zip(uses_iter).transform(|(id, uses)| {\n             if ccx.sess.no_monomorphic_collapse() {\n                 match copy *id {\n                     (a, b) => mono_precise(a, b)"}, {"sha": "532b2312a987101e8da24c65f948ee45224564cd", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/419a14772a6ae4c61fd275e31dbfceedd0223630/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/419a14772a6ae4c61fd275e31dbfceedd0223630/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=419a14772a6ae4c61fd275e31dbfceedd0223630", "patch": "@@ -39,7 +39,6 @@ fn main() {\n     assert_eq!(Some(Some(3)).hi(), ~\"something!something!hello: 3\");\n     assert_eq!(None::<int>.hi(), ~\"hello - none\");\n \n-    // These fail because of a bug in monomorphization's ID generation.\n-    //assert_eq!(Some(None::<int>).hi(), ~\"something!hello - none\");\n-    //assert_eq!(Some(3).hi(), ~\"something!hello: 3\");\n+    assert_eq!(Some(None::<int>).hi(), ~\"something!hello - none\");\n+    assert_eq!(Some(3).hi(), ~\"something!hello: 3\");\n }"}]}