{"sha": "298ae8c721102c36243335653e57a7f94e08f94a", "node_id": "C_kwDOAAsO6NoAKDI5OGFlOGM3MjExMDJjMzYyNDMzMzU2NTNlNTdhN2Y5NGUwOGY5NGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T22:23:10Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T22:23:45Z"}, "message": "Rename ty_error_with_guaranteed to ty_error, ty_error to ty_error_misc", "tree": {"sha": "56895f00fc739fa4584b454a5feaa086d7a9397e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56895f00fc739fa4584b454a5feaa086d7a9397e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/298ae8c721102c36243335653e57a7f94e08f94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/298ae8c721102c36243335653e57a7f94e08f94a", "html_url": "https://github.com/rust-lang/rust/commit/298ae8c721102c36243335653e57a7f94e08f94a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/298ae8c721102c36243335653e57a7f94e08f94a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e7ef03b40127b58692bc272a4b765c7a05bb851", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7ef03b40127b58692bc272a4b765c7a05bb851", "html_url": "https://github.com/rust-lang/rust/commit/1e7ef03b40127b58692bc272a4b765c7a05bb851"}], "stats": {"total": 261, "additions": 121, "deletions": 140}, "files": [{"sha": "c550e37c63eefd06d4532a9c1d1cf34ffb557534", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                             infcx.tcx,\n                         )\n                     });\n-                    prev.ty = infcx.tcx.ty_error_with_guaranteed(guar);\n+                    prev.ty = infcx.tcx.ty_error(guar);\n                 }\n                 // Pick a better span if there is one.\n                 // FIXME(oli-obk): collect multiple spans for better diagnostics down the road.\n@@ -248,7 +248,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n         if let Some(e) = self.tainted_by_errors() {\n-            return self.tcx.ty_error_with_guaranteed(e);\n+            return self.tcx.ty_error(e);\n         }\n \n         let definition_ty = instantiated_ty\n@@ -261,7 +261,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             origin,\n             instantiated_ty.span,\n         ) {\n-            return self.tcx.ty_error_with_guaranteed(guar);\n+            return self.tcx.ty_error(guar);\n         }\n \n         // Only check this for TAIT. RPIT already supports `tests/ui/impl-trait/nested-return-type2.rs`\n@@ -326,7 +326,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             definition_ty\n         } else {\n             let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n-            self.tcx.ty_error_with_guaranteed(reported)\n+            self.tcx.ty_error(reported)\n         }\n     }\n }"}, {"sha": "e2f897a89e82e1cc44259842de0e4e228dad2583", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -276,7 +276,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                         .sess\n                         .delay_span_bug(span, &format!(\"failed to normalize {:?}\", ty));\n                     TypeOpOutput {\n-                        output: self.infcx.tcx.ty_error_with_guaranteed(guar),\n+                        output: self.infcx.tcx.ty_error(guar),\n                         constraints: None,\n                         error_info: None,\n                     }"}, {"sha": "c4e7e1f8ffa304b0b2b64c3ded9f8aa74ad4a933", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -239,7 +239,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                     decl.hidden_type.span,\n                     &format!(\"could not resolve {:#?}\", hidden_type.ty.kind()),\n                 );\n-                hidden_type.ty = infcx.tcx.ty_error_with_guaranteed(reported);\n+                hidden_type.ty = infcx.tcx.ty_error(reported);\n             }\n \n             (opaque_type_key, (hidden_type, decl.origin))\n@@ -531,7 +531,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             if place_ty.variant_index.is_none() {\n                 if let Err(guar) = place_ty.ty.error_reported() {\n                     assert!(self.errors_reported);\n-                    return PlaceTy::from_ty(self.tcx().ty_error_with_guaranteed(guar));\n+                    return PlaceTy::from_ty(self.tcx().ty_error(guar));\n                 }\n             }\n             place_ty = self.sanitize_projection(place_ty, elem, place, location, context);\n@@ -763,7 +763,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n     fn error(&mut self) -> Ty<'tcx> {\n         self.errors_reported = true;\n-        self.tcx().ty_error()\n+        self.tcx().ty_error_misc()\n     }\n \n     fn get_ambient_variance(&self, context: PlaceContext) -> ty::Variance {"}, {"sha": "f3afbcd48a985a333bce7f73aed787f1b88857d6", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -429,7 +429,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                     if let (hir::TyKind::Infer, false) = (&ty.kind, self.astconv.allow_ty_infer()) {\n                         self.inferred_params.push(ty.span);\n-                        tcx.ty_error().into()\n+                        tcx.ty_error_misc().into()\n                     } else {\n                         self.astconv.ast_ty_to_ty(ty).into()\n                     }\n@@ -502,14 +502,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 _ => false,\n                             }) {\n                                 // Avoid ICE #86756 when type error recovery goes awry.\n-                                return tcx.ty_error().into();\n+                                return tcx.ty_error_misc().into();\n                             }\n                             tcx.at(self.span).type_of(param.def_id).subst(tcx, substs).into()\n                         } else if infer_args {\n                             self.astconv.ty_infer(Some(param), self.span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n-                            tcx.ty_error().into()\n+                            tcx.ty_error_misc().into()\n                         }\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n@@ -1239,9 +1239,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         }\n                         let reported = err.emit();\n                         term = match def_kind {\n-                            hir::def::DefKind::AssocTy => {\n-                                tcx.ty_error_with_guaranteed(reported).into()\n-                            }\n+                            hir::def::DefKind::AssocTy => tcx.ty_error(reported).into(),\n                             hir::def::DefKind::AssocConst => tcx\n                                 .const_error_with_guaranteed(\n                                     tcx.type_of(assoc_item_def_id)\n@@ -1397,7 +1395,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .map(|trait_ref| tcx.def_span(trait_ref));\n             let reported =\n                 tcx.sess.emit_err(TraitObjectDeclaredWithNoTraits { span, trait_alias_span });\n-            return tcx.ty_error_with_guaranteed(reported);\n+            return tcx.ty_error(reported);\n         }\n \n         // Check that there are no gross object safety violations;\n@@ -1414,7 +1412,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     &object_safety_violations,\n                 )\n                 .emit();\n-                return tcx.ty_error_with_guaranteed(reported);\n+                return tcx.ty_error(reported);\n             }\n         }\n \n@@ -1523,10 +1521,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         if arg == dummy_self.into() {\n                             let param = &generics.params[index];\n                             missing_type_params.push(param.name);\n-                            return tcx.ty_error().into();\n+                            return tcx.ty_error_misc().into();\n                         } else if arg.walk().any(|arg| arg == dummy_self.into()) {\n                             references_self = true;\n-                            return tcx.ty_error().into();\n+                            return tcx.ty_error_misc().into();\n                         }\n                         arg\n                     })\n@@ -1588,7 +1586,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         .iter()\n                         .map(|arg| {\n                             if arg.walk().any(|arg| arg == dummy_self.into()) {\n-                                return tcx.ty_error_with_guaranteed(guar).into();\n+                                return tcx.ty_error(guar).into();\n                             }\n                             arg\n                         })\n@@ -2474,7 +2472,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &[path_str],\n                 item_segment.ident.name,\n             );\n-            return tcx.ty_error_with_guaranteed(reported)\n+            return tcx.ty_error(reported)\n         };\n \n         debug!(\"qpath_to_ty: self_type={:?}\", self_ty);\n@@ -2821,7 +2819,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let index = generics.param_def_id_to_index[&def_id.to_def_id()];\n                         tcx.mk_ty_param(index, tcx.hir().ty_param_name(def_id))\n                     }\n-                    Some(rbv::ResolvedArg::Error(guar)) => tcx.ty_error_with_guaranteed(guar),\n+                    Some(rbv::ResolvedArg::Error(guar)) => tcx.ty_error(guar),\n                     arg => bug!(\"unexpected bound var resolution for {hir_id:?}: {arg:?}\"),\n                 }\n             }\n@@ -2933,7 +2931,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     {\n                         err.span_note(impl_.self_ty.span, \"not a concrete type\");\n                     }\n-                    tcx.ty_error_with_guaranteed(err.emit())\n+                    tcx.ty_error(err.emit())\n                 } else {\n                     ty\n                 }\n@@ -2986,7 +2984,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .sess\n                     .delay_span_bug(path.span, \"path with `Res::Err` but no error emitted\");\n                 self.set_tainted_by_errors(e);\n-                self.tcx().ty_error_with_guaranteed(e)\n+                self.tcx().ty_error(e)\n             }\n             _ => span_bug!(span, \"unexpected resolution: {:?}\", path.res),\n         }\n@@ -3065,7 +3063,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let ty = self.ast_ty_to_ty_inner(qself, false, true);\n                 self.associated_path_to_ty(ast_ty.hir_id, ast_ty.span, ty, qself, segment, false)\n                     .map(|(ty, _, _)| ty)\n-                    .unwrap_or_else(|guar| tcx.ty_error_with_guaranteed(guar))\n+                    .unwrap_or_else(|guar| tcx.ty_error(guar))\n             }\n             &hir::TyKind::Path(hir::QPath::LangItem(lang_item, span, _)) => {\n                 let def_id = tcx.require_lang_item(lang_item, Some(span));\n@@ -3113,7 +3111,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // handled specially and will not descend into this routine.\n                 self.ty_infer(None, ast_ty.span)\n             }\n-            hir::TyKind::Err => tcx.ty_error(),\n+            hir::TyKind::Err => tcx.ty_error_misc(),\n         };\n \n         self.record_ty(ast_ty.hir_id, result_ty, ast_ty.span);"}, {"sha": "bdc9ff5cada9af2723f7ab1114d8a0cb3161c445", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -790,7 +790,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                     return_span,\n                     format!(\"could not fully resolve: {ty} => {err:?}\"),\n                 );\n-                collected_tys.insert(def_id, tcx.ty_error_with_guaranteed(reported));\n+                collected_tys.insert(def_id, tcx.ty_error(reported));\n             }\n         }\n     }"}, {"sha": "a2900037797c685e62d4d30970daa4c4181f0196", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -499,7 +499,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n                 }\n                 _ => {}\n             }\n-            self.tcx().ty_error_with_guaranteed(err.emit())\n+            self.tcx().ty_error(err.emit())\n         }\n     }\n "}, {"sha": "50073d94ea5c975a3fe84372c950f73cd369bf0c", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -320,7 +320,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     match self_ty.find_self_aliases() {\n                         spans if spans.len() > 0 => {\n                             let guar = tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: spans.into(), note: () });\n-                            tcx.ty_error_with_guaranteed(guar)\n+                            tcx.ty_error(guar)\n                         },\n                         _ => icx.to_ty(*self_ty),\n                     }\n@@ -600,10 +600,8 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n             // ```\n             let tables = self.tcx.typeck(item_def_id);\n             if let Some(guar) = tables.tainted_by_errors {\n-                self.found = Some(ty::OpaqueHiddenType {\n-                    span: DUMMY_SP,\n-                    ty: self.tcx.ty_error_with_guaranteed(guar),\n-                });\n+                self.found =\n+                    Some(ty::OpaqueHiddenType { span: DUMMY_SP, ty: self.tcx.ty_error(guar) });\n                 return;\n             }\n             let Some(&typeck_hidden_ty) = tables.concrete_opaque_types.get(&self.def_id) else {\n@@ -622,7 +620,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n                 if let Some(prev) = &mut self.found {\n                     if concrete_type.ty != prev.ty && !(concrete_type, prev.ty).references_error() {\n                         let guar = prev.report_mismatch(&concrete_type, self.tcx);\n-                        prev.ty = self.tcx.ty_error_with_guaranteed(guar);\n+                        prev.ty = self.tcx.ty_error(guar);\n                     }\n                 } else {\n                     self.found = Some(concrete_type);\n@@ -709,7 +707,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n                 _ => \"item\",\n             },\n         });\n-        return tcx.ty_error_with_guaranteed(reported);\n+        return tcx.ty_error(reported);\n     };\n \n     // Only check against typeck if we didn't already error\n@@ -821,7 +819,7 @@ fn find_opaque_ty_constraints_for_rpit(\n             // Some error in the\n             // owner fn prevented us from populating\n             // the `concrete_opaque_types` table.\n-            tcx.ty_error_with_guaranteed(guar)\n+            tcx.ty_error(guar)\n         } else {\n             table.concrete_opaque_types.get(&def_id).map(|ty| ty.ty).unwrap_or_else(|| {\n                 // We failed to resolve the opaque type or it"}, {"sha": "b683915ef856c12ac2596d7382b25499bc754156", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -438,7 +438,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 let err = self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n \n-                return self.tcx.ty_error_with_guaranteed(err);\n+                return self.tcx.ty_error(err);\n             }\n         };\n "}, {"sha": "6c7004283233ac5e43c8432662f99fb7eac8b81f", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -800,7 +800,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         guar: ErrorGuaranteed,\n     ) -> ty::PolyFnSig<'tcx> {\n         let astconv: &dyn AstConv<'_> = self;\n-        let err_ty = self.tcx.ty_error_with_guaranteed(guar);\n+        let err_ty = self.tcx.ty_error(guar);\n \n         let supplied_arguments = decl.inputs.iter().map(|a| {\n             // Convert the types that the user supplied (if any), but ignore them."}, {"sha": "00b86890b33f4ec54e2449444b69ccb58e8caaf6", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -177,7 +177,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             let _ = self.commit_if_ok(|_| {\n                 self.at(&self.cause, self.param_env).define_opaque_types(true).eq(a, b)\n             });\n-            return success(vec![], self.fcx.tcx.ty_error_with_guaranteed(guar), vec![]);\n+            return success(vec![], self.fcx.tcx.ty_error(guar), vec![]);\n         }\n \n         // Coercing from `!` to any type is allowed:\n@@ -997,11 +997,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (adjustments, _) = self.register_infer_ok_obligations(ok);\n         self.apply_adjustments(expr, adjustments);\n-        Ok(if let Err(guar) = expr_ty.error_reported() {\n-            self.tcx.ty_error_with_guaranteed(guar)\n-        } else {\n-            target\n-        })\n+        Ok(if let Err(guar) = expr_ty.error_reported() { self.tcx.ty_error(guar) } else { target })\n     }\n \n     /// Same as `try_coerce()`, but without side-effects.\n@@ -1439,7 +1435,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         // If we see any error types, just propagate that error\n         // upwards.\n         if let Err(guar) = (expression_ty, self.merged_ty()).error_reported() {\n-            self.final_ty = Some(fcx.tcx.ty_error_with_guaranteed(guar));\n+            self.final_ty = Some(fcx.tcx.ty_error(guar));\n             return;\n         }\n \n@@ -1624,7 +1620,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n \n                 let reported = err.emit_unless(unsized_return);\n \n-                self.final_ty = Some(fcx.tcx.ty_error_with_guaranteed(reported));\n+                self.final_ty = Some(fcx.tcx.ty_error(reported));\n             }\n         }\n     }"}, {"sha": "e4516a50a89680548ecf59e7961d14138efc86a8", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return if let [Adjustment { kind: Adjust::NeverToAny, target }] = &adjustments[..] {\n                     target.to_owned()\n                 } else {\n-                    self.tcx().ty_error_with_guaranteed(reported)\n+                    self.tcx().ty_error(reported)\n                 };\n             }\n \n@@ -313,7 +313,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     tcx.types.never\n                 } else {\n                     // There was an error; make type-check fail.\n-                    tcx.ty_error()\n+                    tcx.ty_error_misc()\n                 }\n             }\n             ExprKind::Ret(ref expr_opt) => self.check_expr_return(expr_opt.as_deref(), expr),\n@@ -354,7 +354,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Field(base, field) => self.check_field(expr, &base, field, expected),\n             ExprKind::Index(base, idx) => self.check_expr_index(base, idx, expr),\n             ExprKind::Yield(value, ref src) => self.check_expr_yield(value, expr, src),\n-            hir::ExprKind::Err => tcx.ty_error(),\n+            hir::ExprKind::Err => tcx.ty_error_misc(),\n         }\n     }\n \n@@ -402,7 +402,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         {\n                             err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                         }\n-                        oprnd_t = tcx.ty_error_with_guaranteed(err.emit());\n+                        oprnd_t = tcx.ty_error(err.emit());\n                     }\n                 }\n                 hir::UnOp::Not => {\n@@ -452,7 +452,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let tm = ty::TypeAndMut { ty, mutbl };\n         match kind {\n-            _ if tm.ty.references_error() => self.tcx.ty_error(),\n+            _ if tm.ty.references_error() => self.tcx.ty_error_misc(),\n             hir::BorrowKind::Raw => {\n                 self.check_named_place_expr(oprnd);\n                 self.tcx.mk_ptr(tm)\n@@ -531,11 +531,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let e =\n                     self.tcx.sess.delay_span_bug(qpath.span(), \"`Res::Err` but no error emitted\");\n                 self.set_tainted_by_errors(e);\n-                tcx.ty_error_with_guaranteed(e)\n+                tcx.ty_error(e)\n             }\n             Res::Def(DefKind::Variant, _) => {\n                 let e = report_unexpected_variant_res(tcx, res, qpath, expr.span, \"E0533\", \"value\");\n-                tcx.ty_error_with_guaranteed(e)\n+                tcx.ty_error(e)\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,\n         };\n@@ -634,7 +634,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // If the loop context is not a `loop { }`, then break with\n                 // a value is illegal, and `opt_coerce_to` will be `None`.\n                 // Just set expectation to error in that case.\n-                let coerce_to = opt_coerce_to.unwrap_or_else(|| tcx.ty_error());\n+                let coerce_to = opt_coerce_to.unwrap_or_else(|| tcx.ty_error_misc());\n \n                 // Recurse without `enclosing_breakables` borrowed.\n                 e_ty = self.check_expr_with_hint(e, coerce_to);\n@@ -1033,11 +1033,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let result_ty = coerce.complete(self);\n-        if let Err(guar) = cond_ty.error_reported() {\n-            self.tcx.ty_error_with_guaranteed(guar)\n-        } else {\n-            result_ty\n-        }\n+        if let Err(guar) = cond_ty.error_reported() { self.tcx.ty_error(guar) } else { result_ty }\n     }\n \n     /// Type check assignment expression `expr` of form `lhs = rhs`.\n@@ -1113,7 +1109,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // If the assignment expression itself is ill-formed, don't\n             // bother emitting another error\n             let reported = err.emit_unless(lhs_ty.references_error() || rhs_ty.references_error());\n-            return self.tcx.ty_error_with_guaranteed(reported);\n+            return self.tcx.ty_error(reported);\n         }\n \n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n@@ -1160,7 +1156,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);\n \n         if let Err(guar) = (lhs_ty, rhs_ty).error_reported() {\n-            self.tcx.ty_error_with_guaranteed(guar)\n+            self.tcx.ty_error(guar)\n         } else {\n             self.tcx.mk_unit()\n         }\n@@ -1279,7 +1275,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Eagerly check for some obvious errors.\n         if let Err(guar) = (t_expr, t_cast).error_reported() {\n-            self.tcx.ty_error_with_guaranteed(guar)\n+            self.tcx.ty_error(guar)\n         } else {\n             // Defer other checks until we're done type checking.\n             let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n@@ -1300,7 +1296,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }\n-                Err(guar) => self.tcx.ty_error_with_guaranteed(guar),\n+                Err(guar) => self.tcx.ty_error(guar),\n             }\n         }\n     }\n@@ -1428,7 +1424,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         if let Err(guar) = element_ty.error_reported() {\n-            return tcx.ty_error_with_guaranteed(guar);\n+            return tcx.ty_error(guar);\n         }\n \n         self.check_repeat_element_needs_copy_bound(element, count, element_ty);\n@@ -1498,7 +1494,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         });\n         let tuple = self.tcx.mk_tup(elt_ts_iter);\n         if let Err(guar) = tuple.error_reported() {\n-            self.tcx.ty_error_with_guaranteed(guar)\n+            self.tcx.ty_error(guar)\n         } else {\n             self.require_type_is_sized(tuple, expr.span, traits::TupleInitializerSized);\n             tuple\n@@ -1518,7 +1514,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Ok(data) => data,\n             Err(guar) => {\n                 self.check_struct_fields_on_error(fields, base_expr);\n-                return self.tcx.ty_error_with_guaranteed(guar);\n+                return self.tcx.ty_error(guar);\n             }\n         };\n \n@@ -1618,7 +1614,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     )\n                 };\n \n-                tcx.ty_error_with_guaranteed(guar)\n+                tcx.ty_error(guar)\n             };\n \n             // Make sure to give a type to the field even if there's\n@@ -2270,7 +2266,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 did,\n                 expected.only_has_type(self),\n             );\n-            return self.tcx().ty_error_with_guaranteed(guar);\n+            return self.tcx().ty_error(guar);\n         }\n \n         let guar = if field.name == kw::Empty {\n@@ -2356,7 +2352,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.emit()\n         };\n \n-        self.tcx().ty_error_with_guaranteed(guar)\n+        self.tcx().ty_error(guar)\n     }\n \n     fn suggest_await_on_field_access(\n@@ -2848,7 +2844,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     let reported = err.emit();\n-                    self.tcx.ty_error_with_guaranteed(reported)\n+                    self.tcx.ty_error(reported)\n                 }\n             }\n         }"}, {"sha": "b7ae621c6859f390524b2480ad03e3155bad0502", "filename": "compiler/rustc_hir_typeck/src/fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         // type, `?T` is not considered unsolved, but `?I` is. The\n         // same is true for float variables.)\n         let fallback = match ty.kind() {\n-            _ if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n+            _ if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error(e),\n             ty::Infer(ty::IntVar(_)) => self.tcx.types.i32,\n             ty::Infer(ty::FloatVar(_)) => self.tcx.types.f64,\n             _ => match diverging_fallback.get(&ty) {"}, {"sha": "60e55c7b0cf57cc25dd1cb467b03bd1c5e2aebd1", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -451,7 +451,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn node_ty(&self, id: hir::HirId) -> Ty<'tcx> {\n         match self.typeck_results.borrow().node_types().get(id) {\n             Some(&t) => t,\n-            None if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n+            None if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error(e),\n             None => {\n                 bug!(\n                     \"no type for node {} in fcx {}\",\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn node_ty_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n         match self.typeck_results.borrow().node_types().get(id) {\n             Some(&t) => Some(t),\n-            None if let Some(e) = self.tainted_by_errors() => Some(self.tcx.ty_error_with_guaranteed(e)),\n+            None if let Some(e) = self.tainted_by_errors() => Some(self.tcx.ty_error(e)),\n             None => None,\n         }\n     }\n@@ -701,7 +701,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub(in super::super) fn err_args(&self, len: usize) -> Vec<Ty<'tcx>> {\n-        let ty_error = self.tcx.ty_error();\n+        let ty_error = self.tcx.ty_error_misc();\n         vec![ty_error; len]\n     }\n \n@@ -1162,7 +1162,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     let reported = err.emit();\n-                    return (tcx.ty_error_with_guaranteed(reported), res);\n+                    return (tcx.ty_error(reported), res);\n                 }\n             }\n         } else {\n@@ -1418,7 +1418,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282, true)\n                     .emit()\n             });\n-            let err = self.tcx.ty_error_with_guaranteed(e);\n+            let err = self.tcx.ty_error(e);\n             self.demand_suptype(sp, err, ty);\n             err\n         }"}, {"sha": "dbb76094058a50ad7f5e09029855d2155b8bf431", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = self.typeck_results.borrow().expr_ty_adjusted(expr);\n                 let ty = self.resolve_vars_if_possible(ty);\n                 if ty.has_non_region_infer() {\n-                    self.tcx.ty_error()\n+                    self.tcx.ty_error_misc()\n                 } else {\n                     self.tcx.erase_regions(ty)\n                 }\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tuple_arguments,\n                 method.ok().map(|method| method.def_id),\n             );\n-            return self.tcx.ty_error();\n+            return self.tcx.ty_error_misc();\n         }\n \n         let method = method.unwrap();\n@@ -535,7 +535,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .typeck_results\n                     .borrow()\n                     .expr_ty_adjusted_opt(*expr)\n-                    .unwrap_or_else(|| tcx.ty_error());\n+                    .unwrap_or_else(|| tcx.ty_error_misc());\n                 (self.resolve_vars_if_possible(ty), normalize_span(expr.span))\n             })\n             .collect();\n@@ -1288,7 +1288,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 opt_ty.unwrap_or_else(|| self.next_float_var())\n             }\n             ast::LitKind::Bool(_) => tcx.types.bool,\n-            ast::LitKind::Err => tcx.ty_error(),\n+            ast::LitKind::Err => tcx.ty_error_misc(),\n         }\n     }\n \n@@ -1717,7 +1717,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         if let Err(guar) = ty.error_reported() {\n             // Override the types everywhere with `err()` to avoid knock on errors.\n-            let err = self.tcx.ty_error_with_guaranteed(guar);\n+            let err = self.tcx.ty_error(guar);\n             self.write_ty(hir_id, err);\n             self.write_ty(pat.hir_id, err);\n             let local_ty = LocalTy { decl_ty: err, revealed_ty: err };\n@@ -1746,9 +1746,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let result = self\n                     .astconv()\n                     .associated_path_to_ty(hir_id, path_span, ty.raw, qself, segment, true);\n-                let ty = result\n-                    .map(|(ty, _, _)| ty)\n-                    .unwrap_or_else(|guar| self.tcx().ty_error_with_guaranteed(guar));\n+                let ty =\n+                    result.map(|(ty, _, _)| ty).unwrap_or_else(|guar| self.tcx().ty_error(guar));\n                 let ty = self.handle_raw_ty(path_span, ty);\n                 let result = result.map(|(_, kind, def_id)| (kind, def_id));\n "}, {"sha": "a4b325a9b798435b7ca54e6201b108da7a5263c0", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -297,7 +297,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method.sig.output()\n             }\n             // error types are considered \"builtin\"\n-            Err(_) if lhs_ty.references_error() || rhs_ty.references_error() => self.tcx.ty_error(),\n+            Err(_) if lhs_ty.references_error() || rhs_ty.references_error() => {\n+                self.tcx.ty_error_misc()\n+            }\n             Err(errors) => {\n                 let (_, trait_def_id) =\n                     lang_item_for_op(self.tcx, Op::Binary(op, is_assign), op.span);\n@@ -518,7 +520,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n                 let reported = err.emit();\n-                self.tcx.ty_error_with_guaranteed(reported)\n+                self.tcx.ty_error(reported)\n             }\n         };\n \n@@ -703,7 +705,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     err.emit()\n                 });\n-                self.tcx.ty_error_with_guaranteed(guar)\n+                self.tcx.ty_error(guar)\n             }\n         }\n     }"}, {"sha": "9d95866fca4ab2d1c750be9e03eb86d11173d992", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -476,7 +476,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // There exists a side that didn't meet our criteria that the end-point\n             // be of a numeric or char type, as checked in `calc_side` above.\n             let guar = self.emit_err_pat_range(span, lhs, rhs);\n-            return self.tcx.ty_error_with_guaranteed(guar);\n+            return self.tcx.ty_error(guar);\n         }\n \n         // Unify each side with `expected`.\n@@ -496,7 +496,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         demand_eqtype(&mut rhs, lhs);\n \n         if let (Some((true, ..)), _) | (_, Some((true, ..))) = (lhs, rhs) {\n-            return self.tcx.ty_error();\n+            return self.tcx.ty_error_misc();\n         }\n \n         // Find the unified type and check if it's of numeric or char type again.\n@@ -512,7 +512,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 *fail = true;\n             }\n             let guar = self.emit_err_pat_range(span, lhs, rhs);\n-            return self.tcx.ty_error_with_guaranteed(guar);\n+            return self.tcx.ty_error(guar);\n         }\n         ty\n     }\n@@ -850,7 +850,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (variant, pat_ty) = match self.check_struct_path(qpath, pat.hir_id) {\n             Ok(data) => data,\n             Err(guar) => {\n-                let err = self.tcx.ty_error_with_guaranteed(guar);\n+                let err = self.tcx.ty_error(guar);\n                 for field in fields {\n                     let ti = ti;\n                     self.check_pat(field.pat, err, def_bm, ti);\n@@ -866,7 +866,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.check_struct_pat_fields(pat_ty, &pat, variant, fields, has_rest_pat, def_bm, ti) {\n             pat_ty\n         } else {\n-            self.tcx.ty_error()\n+            self.tcx.ty_error_misc()\n         }\n     }\n \n@@ -886,12 +886,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Res::Err => {\n                 let e = tcx.sess.delay_span_bug(qpath.span(), \"`Res::Err` but no error emitted\");\n                 self.set_tainted_by_errors(e);\n-                return tcx.ty_error_with_guaranteed(e);\n+                return tcx.ty_error(e);\n             }\n             Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fn) | DefKind::Variant, _) => {\n                 let expected = \"unit struct, unit variant or constant\";\n                 let e = report_unexpected_variant_res(tcx, res, qpath, pat.span, \"E0533\", expected);\n-                return tcx.ty_error_with_guaranteed(e);\n+                return tcx.ty_error(e);\n             }\n             Res::SelfCtor(..)\n             | Res::Def(\n@@ -1034,7 +1034,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         let on_error = |e| {\n             for pat in subpats {\n-                self.check_pat(pat, tcx.ty_error_with_guaranteed(e), def_bm, ti);\n+                self.check_pat(pat, tcx.ty_error(e), def_bm, ti);\n             }\n         };\n         let report_unexpected_res = |res: Res| {\n@@ -1051,27 +1051,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let e = tcx.sess.delay_span_bug(pat.span, \"`Res::Err` but no error emitted\");\n             self.set_tainted_by_errors(e);\n             on_error(e);\n-            return tcx.ty_error_with_guaranteed(e);\n+            return tcx.ty_error(e);\n         }\n \n         // Type-check the path.\n         let (pat_ty, res) =\n             self.instantiate_value_path(segments, opt_ty, res, pat.span, pat.hir_id);\n         if !pat_ty.is_fn() {\n             let e = report_unexpected_res(res);\n-            return tcx.ty_error_with_guaranteed(e);\n+            return tcx.ty_error(e);\n         }\n \n         let variant = match res {\n             Res::Err => {\n                 let e = tcx.sess.delay_span_bug(pat.span, \"`Res::Err` but no error emitted\");\n                 self.set_tainted_by_errors(e);\n                 on_error(e);\n-                return tcx.ty_error_with_guaranteed(e);\n+                return tcx.ty_error(e);\n             }\n             Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) => {\n                 let e = report_unexpected_res(res);\n-                return tcx.ty_error_with_guaranteed(e);\n+                return tcx.ty_error(e);\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => tcx.expect_variant_res(res),\n             _ => bug!(\"unexpected pattern resolution: {:?}\", res),\n@@ -1112,7 +1112,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Pattern has wrong number of fields.\n             let e = self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n             on_error(e);\n-            return tcx.ty_error_with_guaranteed(e);\n+            return tcx.ty_error(e);\n         }\n         pat_ty\n     }\n@@ -1308,9 +1308,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let reported = err.emit();\n             // Walk subpatterns with an expected type of `err` in this case to silence\n             // further errors being emitted when using the bindings. #50333\n-            let element_tys_iter = (0..max_len).map(|_| tcx.ty_error_with_guaranteed(reported));\n+            let element_tys_iter = (0..max_len).map(|_| tcx.ty_error(reported));\n             for (_, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n-                self.check_pat(elem, tcx.ty_error_with_guaranteed(reported), def_bm, ti);\n+                self.check_pat(elem, tcx.ty_error(reported), def_bm, ti);\n             }\n             tcx.mk_tup(element_tys_iter)\n         } else {\n@@ -1358,7 +1358,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Occupied(occupied) => {\n                     no_field_errors = false;\n                     let guar = self.error_field_already_bound(span, field.ident, *occupied.get());\n-                    tcx.ty_error_with_guaranteed(guar)\n+                    tcx.ty_error(guar)\n                 }\n                 Vacant(vacant) => {\n                     vacant.insert(span);\n@@ -1372,7 +1372,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .unwrap_or_else(|| {\n                             inexistent_fields.push(field);\n                             no_field_errors = false;\n-                            tcx.ty_error()\n+                            tcx.ty_error_misc()\n                         })\n                 }\n             };\n@@ -1944,7 +1944,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (box_ty, inner_ty)\n             }\n             Err(guar) => {\n-                let err = tcx.ty_error_with_guaranteed(guar);\n+                let err = tcx.ty_error(guar);\n                 (err, err)\n             }\n         };\n@@ -1995,7 +1995,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             Err(guar) => {\n-                let err = tcx.ty_error_with_guaranteed(guar);\n+                let err = tcx.ty_error(guar);\n                 (err, err)\n             }\n         };\n@@ -2049,7 +2049,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .error_reported()\n                     .err()\n                     .unwrap_or_else(|| self.error_expected_array_or_slice(span, expected, ti));\n-                let err = self.tcx.ty_error_with_guaranteed(guar);\n+                let err = self.tcx.ty_error(guar);\n                 (err, Some(err), err)\n             }\n         };\n@@ -2116,7 +2116,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // If we get here, we must have emitted an error.\n-        (Some(self.tcx.ty_error_with_guaranteed(guar)), arr_ty)\n+        (Some(self.tcx.ty_error(guar)), arr_ty)\n     }\n \n     fn error_scrutinee_inconsistent_length("}, {"sha": "8fcec3363c0be13379ba0797e4e43d67bd3e30dd", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -91,10 +91,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n         }\n         let reported = err.emit();\n-        Some((\n-            self.tcx.ty_error_with_guaranteed(reported),\n-            self.tcx.ty_error_with_guaranteed(reported),\n-        ))\n+        Some((self.tcx.ty_error(reported), self.tcx.ty_error(reported)))\n     }\n \n     /// To type-check `base_expr[index_expr]`, we progressively autoderef"}, {"sha": "00348f3afdc442a294cf0c7e508ed9cd282de0c4", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -797,7 +797,7 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 let e = self.report_error(t);\n                 self.replaced_with_error = Some(e);\n-                self.interner().ty_error_with_guaranteed(e)\n+                self.interner().ty_error(e)\n             }\n         }\n     }"}, {"sha": "02f6d2e014a3de4c78295b4725c9dbc83da0df10", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n \n             (&ty::Error(e), _) | (_, &ty::Error(e)) => {\n                 infcx.set_tainted_by_errors(e);\n-                Ok(self.tcx().ty_error_with_guaranteed(e))\n+                Ok(self.tcx().ty_error(e))\n             }\n \n             ("}, {"sha": "df9aa765dc1533744972fc26f155ad45a64354e9", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -89,9 +89,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n                 Err(TypeError::Sorts(relate::expected_found(self, a, b)))\n             }\n \n-            (&ty::Error(guar), _) | (_, &ty::Error(guar)) => {\n-                Ok(self.tcx().ty_error_with_guaranteed(guar))\n-            }\n+            (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(self.tcx().ty_error(guar)),\n \n             _ => relate::super_relate_tys(self, a, b),\n         }"}, {"sha": "35a6834e8260f9bee38e5c9f15ec84e0b49575b1", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -718,13 +718,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Constructs a `TyKind::Error` type with current `ErrorGuaranteed`\n     #[track_caller]\n-    pub fn ty_error_with_guaranteed(self, reported: ErrorGuaranteed) -> Ty<'tcx> {\n+    pub fn ty_error(self, reported: ErrorGuaranteed) -> Ty<'tcx> {\n         self.mk_ty(Error(reported))\n     }\n \n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n     #[track_caller]\n-    pub fn ty_error(self) -> Ty<'tcx> {\n+    pub fn ty_error_misc(self) -> Ty<'tcx> {\n         self.ty_error_with_message(DUMMY_SP, \"TyKind::Error constructed but no error reported\")\n     }\n \n@@ -2463,7 +2463,7 @@ impl<'tcx> TyCtxt<'tcx> {\n impl<'tcx> TyCtxtAt<'tcx> {\n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n     #[track_caller]\n-    pub fn ty_error(self) -> Ty<'tcx> {\n+    pub fn ty_error_misc(self) -> Ty<'tcx> {\n         self.tcx.ty_error_with_message(self.span, \"TyKind::Error constructed but no error reported\")\n     }\n "}, {"sha": "baef4ffeda73266cbca003b4462fe5c0dc71b779", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -101,7 +101,7 @@ impl GenericParamDef {\n     ) -> ty::GenericArg<'tcx> {\n         match &self.kind {\n             ty::GenericParamDefKind::Lifetime => tcx.mk_re_error_misc().into(),\n-            ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n+            ty::GenericParamDefKind::Type { .. } => tcx.ty_error_misc().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n                 tcx.const_error(tcx.type_of(self.def_id).subst(tcx, preceding_substs)).into()\n             }"}, {"sha": "6463b38c7e19c1767705cbdd886a288b15a21f4c", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -186,7 +186,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                                 .emit();\n                         }\n \n-                        self.interner().ty_error()\n+                        self.interner().ty_error_misc()\n                     }\n                 }\n             }"}, {"sha": "735b87d08e3272fe9f46aa7a200d69e2dec6e7ff", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -412,7 +412,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             bug!(\"bound types encountered in super_relate_tys\")\n         }\n \n-        (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(tcx.ty_error_with_guaranteed(guar)),\n+        (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(tcx.ty_error(guar)),\n \n         (&ty::Never, _)\n         | (&ty::Char, _)"}, {"sha": "c4f526dbdc89d254dc847feb68316e82475b7877", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -16,7 +16,7 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for Ty<'_> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>, _: &[QueryInfo<DepKind>]) -> Self {\n         // SAFETY: This is never called when `Self` is not `Ty<'tcx>`.\n         // FIXME: Represent the above fact in the trait system somehow.\n-        unsafe { std::mem::transmute::<Ty<'tcx>, Ty<'_>>(tcx.ty_error()) }\n+        unsafe { std::mem::transmute::<Ty<'tcx>, Ty<'_>>(tcx.ty_error_misc()) }\n     }\n }\n \n@@ -34,7 +34,7 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::SymbolName<'_> {\n \n impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::Binder<'_, ty::FnSig<'_>> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>, stack: &[QueryInfo<DepKind>]) -> Self {\n-        let err = tcx.ty_error();\n+        let err = tcx.ty_error_misc();\n \n         let arity = if let Some(frame) = stack.get(0)\n             && frame.query.dep_kind == DepKind::fn_sig"}, {"sha": "27536fcddd759998869ea55ef62d83417e57ef32", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -639,7 +639,7 @@ fn construct_error(\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def);\n     let generator_kind = tcx.generator_kind(def);\n \n-    let ty = tcx.ty_error_with_guaranteed(err);\n+    let ty = tcx.ty_error(err);\n     let num_params = match body_owner_kind {\n         hir::BodyOwnerKind::Fn => tcx.fn_sig(def).skip_binder().inputs().skip_binder().len(),\n         hir::BodyOwnerKind::Closure => {"}, {"sha": "d4fdd5457375164fece0eb3e28fdf2db82c1e24a", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -316,7 +316,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 | ty::Never\n                 | ty::Foreign(..) => tcx.types.unit,\n \n-                ty::Error(e) => tcx.ty_error_with_guaranteed(*e),\n+                ty::Error(e) => tcx.ty_error(*e),\n \n                 ty::Str | ty::Slice(_) => tcx.types.usize,\n "}, {"sha": "7c9628e44a93bc5373001b5822bc43b8e4ffedc2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -3531,7 +3531,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         {\n             if let hir::Expr { kind: hir::ExprKind::Block(..), .. } = expr {\n                 let expr = expr.peel_blocks();\n-                let ty = typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error());\n+                let ty = typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error_misc());\n                 let span = expr.span;\n                 if Some(span) != err.span.primary_span() {\n                     err.span_label(\n@@ -3634,7 +3634,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let mut assocs = vec![];\n         let mut expr = expr;\n         let mut prev_ty = self.resolve_vars_if_possible(\n-            typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error()),\n+            typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error_misc()),\n         );\n         while let hir::ExprKind::MethodCall(_path_segment, rcvr_expr, _args, span) = expr.kind {\n             // Point at every method call in the chain with the resulting type.\n@@ -3645,7 +3645,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 self.probe_assoc_types_at_expr(&type_diffs, span, prev_ty, expr.hir_id, param_env);\n             assocs.push(assocs_in_this_method);\n             prev_ty = self.resolve_vars_if_possible(\n-                typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error()),\n+                typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error_misc()),\n             );\n \n             if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n@@ -3663,7 +3663,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if let hir::Node::Param(param) = parent {\n                     // ...and it is a an fn argument.\n                     let prev_ty = self.resolve_vars_if_possible(\n-                        typeck_results.node_type_opt(param.hir_id).unwrap_or(tcx.ty_error()),\n+                        typeck_results.node_type_opt(param.hir_id).unwrap_or(tcx.ty_error_misc()),\n                     );\n                     let assocs_in_this_method = self.probe_assoc_types_at_expr(&type_diffs, param.ty_span, prev_ty, param.hir_id, param_env);\n                     if assocs_in_this_method.iter().any(|a| a.is_some()) {"}, {"sha": "14bba00b57e052acf4f0f37fa297cf991ea1a1f7", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -1214,7 +1214,7 @@ struct Progress<'tcx> {\n \n impl<'tcx> Progress<'tcx> {\n     fn error(tcx: TyCtxt<'tcx>, guar: ErrorGuaranteed) -> Self {\n-        Progress { term: tcx.ty_error_with_guaranteed(guar).into(), obligations: vec![] }\n+        Progress { term: tcx.ty_error(guar).into(), obligations: vec![] }\n     }\n \n     fn with_addl_obligations(mut self, mut obligations: Vec<PredicateObligation<'tcx>>) -> Self {\n@@ -2111,7 +2111,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n             \"confirm_impl_candidate: no associated type {:?} for {:?}\",\n             assoc_ty.item.name, obligation.predicate\n         );\n-        return Progress { term: tcx.ty_error().into(), obligations: nested };\n+        return Progress { term: tcx.ty_error_misc().into(), obligations: nested };\n     }\n     // If we're trying to normalize `<Vec<u32> as X>::A<S>` using\n     //`impl<T> X for Vec<T> { type A<Y> = Box<Y>; }`, then:\n@@ -2200,7 +2200,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         Err(guar) => return Progress::error(tcx, guar),\n     };\n     if !leaf_def.item.defaultness(tcx).has_value() {\n-        return Progress { term: tcx.ty_error().into(), obligations };\n+        return Progress { term: tcx.ty_error_misc().into(), obligations };\n     }\n \n     // Use the default `impl Trait` for the trait, e.g., for a default trait body\n@@ -2271,10 +2271,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         obligation.recursion_depth + 1,\n         tcx.bound_return_position_impl_trait_in_trait_tys(impl_fn_def_id)\n             .map_bound(|tys| {\n-                tys.map_or_else(\n-                    |guar| tcx.ty_error_with_guaranteed(guar),\n-                    |tys| tys[&obligation.predicate.def_id],\n-                )\n+                tys.map_or_else(|guar| tcx.ty_error(guar), |tys| tys[&obligation.predicate.def_id])\n             })\n             .subst(tcx, impl_fn_substs),\n         &mut obligations,"}, {"sha": "e2fb954e31f360e4871c48241c09f03efddff1ba", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -2451,7 +2451,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ),\n                 );\n                 let value = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);\n-                let err = self.tcx().ty_error_with_guaranteed(guar);\n+                let err = self.tcx().ty_error(guar);\n                 let value = value.fold_with(&mut BottomUpFolder {\n                     tcx: self.tcx(),\n                     ty_op: |_| err,"}, {"sha": "50cd1d1c0e8e107529502c6151dbd24dccdd7dee", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -455,7 +455,7 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 interner.tcx.mk_alias_ty(assoc_ty.0, substitution.lower_into(interner)),\n             ),\n             TyKind::Foreign(def_id) => ty::Foreign(def_id.0),\n-            TyKind::Error => return interner.tcx.ty_error(),\n+            TyKind::Error => return interner.tcx.ty_error_misc(),\n             TyKind::Alias(alias_ty) => match alias_ty {\n                 chalk_ir::AliasTy::Projection(projection) => ty::Alias(\n                     ty::Projection,"}, {"sha": "853c50f52462f663a920ae4372434fd5f03ed7d7", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298ae8c721102c36243335653e57a7f94e08f94a/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=298ae8c721102c36243335653e57a7f94e08f94a", "patch": "@@ -98,7 +98,7 @@ fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n     if let Some(def_id) = def_id.as_local() {\n         if matches!(tcx.representability(def_id), ty::Representability::Infinite) {\n-            return tcx.intern_type_list(&[tcx.ty_error()]);\n+            return tcx.intern_type_list(&[tcx.ty_error_misc()]);\n         }\n     }\n     let def = tcx.adt_def(def_id);"}]}