{"sha": "633a6c8b66a8a2e54d9545071312d4406fa195e5", "node_id": "C_kwDOAAsO6NoAKDYzM2E2YzhiNjZhOGEyZTU0ZDk1NDUwNzEzMTJkNDQwNmZhMTk1ZTU", "commit": {"author": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2022-12-14T14:42:22Z"}, "committer": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2022-12-27T13:54:37Z"}, "message": "Format only modified files\n\nAs discussed on #105688, this makes x fmt only format modified files", "tree": {"sha": "ae307ab8c447150c65b05ff27d409eadd8e4ca3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae307ab8c447150c65b05ff27d409eadd8e4ca3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/633a6c8b66a8a2e54d9545071312d4406fa195e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTou3NNtBmr78Wcak/5H7IMIOEwbAUCY6r5HQAKCRD5H7IMIOEw\nbLvlAP9EpcGXQFR8F/KA3zI/RCdMf0pk9oIVElia2joIWbPuxQD/VmLXZAXdmBv6\nDOxTH+wt188BTJ0LU7j9T4p5Gd/AFgo=\n=CNnr\n-----END PGP SIGNATURE-----", "payload": "tree ae307ab8c447150c65b05ff27d409eadd8e4ca3e\nparent a1fc71196a5554eafc5dd9a1b4e0c159717141e0\nauthor Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1671028942 +0100\ncommitter Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1672149277 +0100\n\nFormat only modified files\n\nAs discussed on #105688, this makes x fmt only format modified files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/633a6c8b66a8a2e54d9545071312d4406fa195e5", "html_url": "https://github.com/rust-lang/rust/commit/633a6c8b66a8a2e54d9545071312d4406fa195e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/633a6c8b66a8a2e54d9545071312d4406fa195e5/comments", "author": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "committer": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1fc71196a5554eafc5dd9a1b4e0c159717141e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fc71196a5554eafc5dd9a1b4e0c159717141e0", "html_url": "https://github.com/rust-lang/rust/commit/a1fc71196a5554eafc5dd9a1b4e0c159717141e0"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "b99bf33f4829c75c6931bc34b9ef45ae9c95c77e", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/633a6c8b66a8a2e54d9545071312d4406fa195e5/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633a6c8b66a8a2e54d9545071312d4406fa195e5/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=633a6c8b66a8a2e54d9545071312d4406fa195e5", "patch": "@@ -44,6 +44,35 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n     }\n }\n \n+/// Finds the remote for rust-lang/rust.\n+/// For example for these remotes it will return `upstream`.\n+/// ```text\n+/// origin  https://github.com/Nilstrieb/rust.git (fetch)\n+/// origin  https://github.com/Nilstrieb/rust.git (push)\n+/// upstream        https://github.com/rust-lang/rust (fetch)\n+/// upstream        https://github.com/rust-lang/rust (push)\n+/// ```\n+fn get_rust_lang_rust_remote() -> Result<String, String> {\n+    let mut git = Command::new(\"git\");\n+    git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n+\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+    if !output.status.success() {\n+        return Err(\"failed to execute git config command\".to_owned());\n+    }\n+\n+    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+\n+    let rust_lang_remote = stdout\n+        .lines()\n+        .find(|remote| remote.contains(\"rust-lang\"))\n+        .ok_or_else(|| \"rust-lang/rust remote not found\".to_owned())?;\n+\n+    let remote_name =\n+        rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n+    Ok(remote_name.into())\n+}\n+\n #[derive(serde::Deserialize)]\n struct RustfmtConfig {\n     ignore: Vec<String>,\n@@ -110,6 +139,23 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 // preventing the latter from being formatted.\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n+            if !check && paths.is_empty() {\n+                let remote = t!(get_rust_lang_rust_remote());\n+                let base = output(\n+                    build\n+                        .config\n+                        .git()\n+                        .arg(\"merge-base\")\n+                        .arg(\"HEAD\")\n+                        .arg(format!(\"{remote}/master\")),\n+                );\n+                let files =\n+                    output(build.config.git().arg(\"diff\").arg(\"--name-only\").arg(base.trim()));\n+                for file in files.lines() {\n+                    println!(\"formatting modified file {file}\");\n+                    ignore_fmt.add(&format!(\"/{file}\")).expect(file);\n+                }\n+            }\n         } else {\n             println!(\"Not in git tree. Skipping git-aware format checks\");\n         }"}]}