{"sha": "afe145d227c5739ec5305f6b5352230a58ebb029", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZTE0NWQyMjdjNTczOWVjNTMwNWY2YjUzNTIyMzBhNThlYmIwMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-23T20:56:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-23T20:56:20Z"}, "message": "Auto merge of #43096 - estebank:ascription-help, r=nikomatsakis\n\nPoint at `:` when using it instead of `;`\n\nWhen triggering type ascription in such a way that we can infer a\nstatement end was intended, add a suggestion for the change. Always\npoint out the reason for the expectation of a type is due to type\nascription.\n\nFix #42057, #41928.", "tree": {"sha": "1b5f895b939f1ffafa71612dcb2e82d73b137c46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b5f895b939f1ffafa71612dcb2e82d73b137c46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe145d227c5739ec5305f6b5352230a58ebb029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe145d227c5739ec5305f6b5352230a58ebb029", "html_url": "https://github.com/rust-lang/rust/commit/afe145d227c5739ec5305f6b5352230a58ebb029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe145d227c5739ec5305f6b5352230a58ebb029/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3e26a02ebc64d4593d42d6fbcea844e03cd7ad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e26a02ebc64d4593d42d6fbcea844e03cd7ad6", "html_url": "https://github.com/rust-lang/rust/commit/f3e26a02ebc64d4593d42d6fbcea844e03cd7ad6"}, {"sha": "e39bcecf79a6951f528b12b47ea671f9b0328bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e39bcecf79a6951f528b12b47ea671f9b0328bb3", "html_url": "https://github.com/rust-lang/rust/commit/e39bcecf79a6951f528b12b47ea671f9b0328bb3"}], "stats": {"total": 192, "additions": 174, "deletions": 18}, "files": [{"sha": "91d32dbb84fea53f09916cd02307326de99ee9a9", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -209,6 +209,22 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Prints out a message with a suggested edit of the code. If the suggestion is presented\n+    /// inline it will only show the text message and not the text.\n+    ///\n+    /// See `diagnostic::CodeSuggestion` for more information.\n+    pub fn span_suggestion_short(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitution_parts: vec![Substitution {\n+                span: sp,\n+                substitutions: vec![suggestion],\n+            }],\n+            msg: msg.to_owned(),\n+            show_code_when_inline: false,\n+        });\n+        self\n+    }\n+\n     /// Prints out a message with a suggested edit of the code.\n     ///\n     /// In case of short messages and a simple suggestion,\n@@ -231,6 +247,7 @@ impl Diagnostic {\n                 substitutions: vec![suggestion],\n             }],\n             msg: msg.to_owned(),\n+            show_code_when_inline: true,\n         });\n         self\n     }\n@@ -242,6 +259,7 @@ impl Diagnostic {\n                 substitutions: suggestions,\n             }],\n             msg: msg.to_owned(),\n+            show_code_when_inline: true,\n         });\n         self\n     }"}, {"sha": "6f6470089d77a6826c8c87de0fd9153b3cd152ad", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -146,6 +146,11 @@ impl<'a> DiagnosticBuilder<'a> {\n                                                   sp: S,\n                                                   msg: &str)\n                                                   -> &mut Self);\n+    forward!(pub fn span_suggestion_short(&mut self,\n+                                          sp: Span,\n+                                          msg: &str,\n+                                          suggestion: String)\n+                                          -> &mut Self);\n     forward!(pub fn span_suggestion(&mut self,\n                                     sp: Span,\n                                     msg: &str,"}, {"sha": "3cfa635f5b208004b6985fba2f7d01c2589f7589", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -47,8 +47,9 @@ impl Emitter for EmitterWriter {\n                // don't display multiline suggestions as labels\n                sugg.substitution_parts[0].substitutions[0].find('\\n').is_none() {\n                 let substitution = &sugg.substitution_parts[0].substitutions[0];\n-                let msg = if substitution.len() == 0 {\n-                    // This substitution is only removal, don't show it\n+                let msg = if substitution.len() == 0 || !sugg.show_code_when_inline {\n+                    // This substitution is only removal or we explicitely don't want to show the\n+                    // code inline, don't show it\n                     format!(\"help: {}\", sugg.msg)\n                 } else {\n                     format!(\"help: {}: `{}`\", sugg.msg, substitution)"}, {"sha": "e873137444d25afdfcfc7a8967d94bbfbdc3796c", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -84,6 +84,7 @@ pub struct CodeSuggestion {\n     /// ```\n     pub substitution_parts: Vec<Substitution>,\n     pub msg: String,\n+    pub show_code_when_inline: bool,\n }\n \n #[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]"}, {"sha": "64a88854fd63f14c74ca357a9083a734f1e8f383", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 63, "deletions": 14, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -599,19 +599,24 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         self.resolve_local(local);\n     }\n     fn visit_ty(&mut self, ty: &'tcx Ty) {\n-        if let TyKind::Path(ref qself, ref path) = ty.node {\n-            self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n-        } else if let TyKind::ImplicitSelf = ty.node {\n-            let self_ty = keywords::SelfType.ident();\n-            let def = self.resolve_ident_in_lexical_scope(self_ty, TypeNS, true, ty.span)\n-                          .map_or(Def::Err, |d| d.def());\n-            self.record_def(ty.id, PathResolution::new(def));\n-        } else if let TyKind::Array(ref element, ref length) = ty.node {\n-            self.visit_ty(element);\n-            self.with_constant_rib(|this| {\n-                this.visit_expr(length);\n-            });\n-            return;\n+        match ty.node {\n+            TyKind::Path(ref qself, ref path) => {\n+                self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n+            }\n+            TyKind::ImplicitSelf => {\n+                let self_ty = keywords::SelfType.ident();\n+                let def = self.resolve_ident_in_lexical_scope(self_ty, TypeNS, true, ty.span)\n+                              .map_or(Def::Err, |d| d.def());\n+                self.record_def(ty.id, PathResolution::new(def));\n+            }\n+            TyKind::Array(ref element, ref length) => {\n+                self.visit_ty(element);\n+                self.with_constant_rib(|this| {\n+                    this.visit_expr(length);\n+                });\n+                return;\n+            }\n+            _ => (),\n         }\n         visit::walk_ty(self, ty);\n     }\n@@ -1221,6 +1226,9 @@ pub struct Resolver<'a> {\n     // This table maps struct IDs into struct constructor IDs,\n     // it's not used during normal resolution, only for better error reporting.\n     struct_constructors: DefIdMap<(Def, ty::Visibility)>,\n+\n+    // Only used for better errors on `fn(): fn()`\n+    current_type_ascription: Vec<Span>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1411,6 +1419,7 @@ impl<'a> Resolver<'a> {\n             struct_constructors: DefIdMap(),\n             found_unresolved_macro: false,\n             unused_macros: FxHashSet(),\n+            current_type_ascription: Vec::new(),\n         }\n     }\n \n@@ -2499,6 +2508,7 @@ impl<'a> Resolver<'a> {\n             // Fallback label.\n             if !levenshtein_worked {\n                 err.span_label(base_span, fallback_label);\n+                this.type_ascription_suggestion(&mut err, base_span);\n             }\n             err\n         };\n@@ -2554,6 +2564,41 @@ impl<'a> Resolver<'a> {\n         resolution\n     }\n \n+    fn type_ascription_suggestion(&self,\n+                                  err: &mut DiagnosticBuilder,\n+                                  base_span: Span) {\n+        debug!(\"type_ascription_suggetion {:?}\", base_span);\n+        let cm = self.session.codemap();\n+        debug!(\"self.current_type_ascription {:?}\", self.current_type_ascription);\n+        if let Some(sp) = self.current_type_ascription.last() {\n+            let mut sp = *sp;\n+            loop {  // try to find the `:`, bail on first non-':'/non-whitespace\n+                sp = sp.next_point();\n+                if let Ok(snippet) = cm.span_to_snippet(sp.to(sp.next_point())) {\n+                    debug!(\"snippet {:?}\", snippet);\n+                    let line_sp = cm.lookup_char_pos(sp.hi).line;\n+                    let line_base_sp = cm.lookup_char_pos(base_span.lo).line;\n+                    debug!(\"{:?} {:?}\", line_sp, line_base_sp);\n+                    if snippet == \":\" {\n+                        err.span_label(base_span,\n+                                       \"expecting a type here because of type ascription\");\n+                        if line_sp != line_base_sp {\n+                            err.span_suggestion_short(sp,\n+                                                      \"did you mean to use `;` here instead?\",\n+                                                      \";\".to_string());\n+                        }\n+                        break;\n+                    } else if snippet.trim().len() != 0  {\n+                        debug!(\"tried to find type ascription `:` token, couldn't find it\");\n+                        break;\n+                    }\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n     fn self_type_is_available(&mut self, span: Span) -> bool {\n         let binding = self.resolve_ident_in_lexical_scope(keywords::SelfType.ident(),\n                                                           TypeNS, false, span);\n@@ -3170,7 +3215,11 @@ impl<'a> Resolver<'a> {\n                     self.resolve_expr(argument, None);\n                 }\n             }\n-\n+            ExprKind::Type(ref type_expr, _) => {\n+                self.current_type_ascription.push(type_expr.span);\n+                visit::walk_expr(self, expr);\n+                self.current_type_ascription.pop();\n+            }\n             _ => {\n                 visit::walk_expr(self, expr);\n             }"}, {"sha": "d6a57c2874f8bd5afd36677852ba9b92eef58245", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -2798,7 +2798,22 @@ impl<'a> Parser<'a> {\n                 lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Cast)?;\n                 continue\n             } else if op == AssocOp::Colon {\n-                lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;\n+                lhs = match self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type) {\n+                    Ok(lhs) => lhs,\n+                    Err(mut err) => {\n+                        err.span_label(self.span,\n+                                       \"expecting a type here because of type ascription\");\n+                        let cm = self.sess.codemap();\n+                        let cur_pos = cm.lookup_char_pos(self.span.lo);\n+                        let op_pos = cm.lookup_char_pos(cur_op_span.hi);\n+                        if cur_pos.line != op_pos.line {\n+                            err.span_suggestion_short(cur_op_span,\n+                                                      \"did you mean to use `;` here?\",\n+                                                      \";\".to_string());\n+                        }\n+                        return Err(err);\n+                    }\n+                };\n                 continue\n             } else if op == AssocOp::DotDot || op == AssocOp::DotDotDot {\n                 // If we didn\u2019t have to handle `x..`/`x...`, it would be pretty easy to"}, {"sha": "54c325b24a3b720f712f087b2bfd206fee377b6f", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -80,5 +80,5 @@ error: expected type, found `4`\n   --> $DIR/issue-22644.rs:38:28\n    |\n 38 |     println!(\"{}\", a: &mut 4);\n-   |                            ^\n+   |                            ^ expecting a type here because of type ascription\n "}, {"sha": "93de55a39e954072dd71fe55537bfdc0a55860e3", "filename": "src/test/ui/suggestions/type-ascription-instead-of-statement-end.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.rs?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(type_ascription)]\n+\n+fn main() {\n+    println!(\"test\"):\n+    0;\n+}\n+\n+fn foo() {\n+    println!(\"test\"): 0;\n+}"}, {"sha": "550048c7b88f1a32028573f7ac556b41547b91fc", "filename": "src/test/ui/suggestions/type-ascription-instead-of-statement-end.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.stderr?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -0,0 +1,16 @@\n+error: expected type, found `0`\n+  --> $DIR/type-ascription-instead-of-statement-end.rs:15:5\n+   |\n+14 |     println!(\"test\"):\n+   |                     - help: did you mean to use `;` here?\n+15 |     0;\n+   |     ^ expecting a type here because of type ascription\n+\n+error: expected type, found `0`\n+  --> $DIR/type-ascription-instead-of-statement-end.rs:19:23\n+   |\n+19 |     println!(\"test\"): 0;\n+   |                       ^ expecting a type here because of type ascription\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7c10bf98c8409b1052161f4b7d5db59629daebd0", "filename": "src/test/ui/suggestions/type-ascription-with-fn-call.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-with-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-with-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-with-fn-call.rs?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(type_ascription)]\n+\n+fn main() {\n+    f()  :\n+    f();\n+}\n+\n+fn f() {}"}, {"sha": "93c65c263dd12f0dbed3cef3a4d01b2bbac1e00f", "filename": "src/test/ui/suggestions/type-ascription-with-fn-call.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-with-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afe145d227c5739ec5305f6b5352230a58ebb029/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-with-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-with-fn-call.stderr?ref=afe145d227c5739ec5305f6b5352230a58ebb029", "patch": "@@ -0,0 +1,13 @@\n+error[E0573]: expected type, found function `f`\n+  --> $DIR/type-ascription-with-fn-call.rs:15:5\n+   |\n+14 |     f()  :\n+   |          - help: did you mean to use `;` here instead?\n+15 |     f();\n+   |     ^^^\n+   |     |\n+   |     not a type\n+   |     expecting a type here because of type ascription\n+\n+error: aborting due to previous error\n+"}]}