{"sha": "1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZThmMjIxNDUwYmFkM2ZmYjEzNTFjNjU0OWY2N2MxOGNlMGI5NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-06T05:20:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-06T05:20:11Z"}, "message": "Auto merge of #22899 - huonw:macro-stability, r=alexcrichton\n\nUnstable items used in a macro expansion will now always trigger\r\nstability warnings, *unless* the unstable items are directly inside a\r\nmacro marked with `#[allow_internal_unstable]`. IOW, the compiler warns\r\nunless the span of the unstable item is a subspan of the definition of a\r\nmacro marked with that attribute.\r\n\r\nE.g.\r\n\r\n    #[allow_internal_unstable]\r\n    macro_rules! foo {\r\n        ($e: expr) => {{\r\n            $e;\r\n            unstable(); // no warning\r\n            only_called_by_foo!();\r\n        }}\r\n    }\r\n\r\n    macro_rules! only_called_by_foo {\r\n        () => { unstable() } // warning\r\n    }\r\n\r\n    foo!(unstable()) // warning\r\n\r\nThe unstable inside `foo` is fine, due to the attribute. But the\r\n`unstable` inside `only_called_by_foo` is not, since that macro doesn't\r\nhave the attribute, and the `unstable` passed into `foo` is also not\r\nfine since it isn't contained in the macro itself (that is, even though\r\nit is only used directly in the macro).\r\n\r\nIn the process this makes the stability tracking much more precise,\r\ne.g. previously `println!(\"{}\", unstable())` got no warning, but now it\r\ndoes. As such, this is a bug fix that may cause [breaking-change]s.\r\n\r\nThe attribute is definitely feature gated, since it explicitly allows\r\nside-stepping the feature gating system.\r\n\r\n---\r\n\r\nThis updates `thread_local!` macro to use the attribute, since it uses\r\nunstable features internally (initialising a struct with unstable\r\nfields).", "tree": {"sha": "475876888ff3be07f3b72e58bc3c7d3554107f1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/475876888ff3be07f3b72e58bc3c7d3554107f1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "html_url": "https://github.com/rust-lang/rust/commit/1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0746ff19b3bc204215f04bbb5756159f9bc5c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0746ff19b3bc204215f04bbb5756159f9bc5c92", "html_url": "https://github.com/rust-lang/rust/commit/b0746ff19b3bc204215f04bbb5756159f9bc5c92"}, {"sha": "b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c", "html_url": "https://github.com/rust-lang/rust/commit/b5c6ab20b7d1f4d6b0cc31c2987b2e0f8ea43e0c"}], "stats": {"total": 507, "additions": 423, "deletions": 84}, "files": [{"sha": "95ccc71532a34f740a413da5b081a5f6a41ed95a", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -2555,6 +2555,14 @@ The currently implemented features of the reference compiler are:\n                             types, e.g. as the return type of a public function.\n                             This capability may be removed in the future.\n \n+* `allow_internal_unstable` - Allows `macro_rules!` macros to be tagged with the\n+                              `#[allow_internal_unstable]` attribute, designed\n+                              to allow `std` macros to call\n+                              `#[unstable]`/feature-gated functionality\n+                              internally without imposing on callers\n+                              (i.e. making them behave like function calls in\n+                              terms of encapsulation).\n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about #[feature] directives which enabled\n the new feature (because the directive is no longer necessary). However, if a"}, {"sha": "76edec80896bb400c4a3d154960b1ed5c99cbd92", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -1238,6 +1238,7 @@ pub fn from_f64<A: FromPrimitive>(n: f64) -> Option<A> {\n \n macro_rules! impl_from_primitive {\n     ($T:ty, $to_ty:ident) => (\n+        #[allow(deprecated)]\n         impl FromPrimitive for $T {\n             #[inline] fn from_int(n: int) -> Option<$T> { n.$to_ty() }\n             #[inline] fn from_i8(n: i8) -> Option<$T> { n.$to_ty() }\n@@ -1299,6 +1300,7 @@ macro_rules! impl_num_cast {\n     ($T:ty, $conv:ident) => (\n         impl NumCast for $T {\n             #[inline]\n+            #[allow(deprecated)]\n             fn from<N: ToPrimitive>(n: N) -> Option<$T> {\n                 // `$conv` could be generated using `concat_idents!`, but that\n                 // macro seems to be broken at the moment"}, {"sha": "515e85410d9fd031767da5a65446b7217daf4e3a", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -542,6 +542,7 @@ impl<'a> CrateReader<'a> {\n                     // overridden in plugin/load.rs\n                     export: false,\n                     use_locally: false,\n+                    allow_internal_unstable: false,\n \n                     body: body,\n                 });"}, {"sha": "3714e3b8c73da6a7cc4ca9eecb641743c7751388", "filename": "src/librustc/metadata/macro_import.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -166,6 +166,9 @@ impl<'a> MacroLoader<'a> {\n                 Some(sel) => sel.contains_key(&name),\n             };\n             def.export = reexport.contains_key(&name);\n+            def.allow_internal_unstable = attr::contains_name(&def.attrs,\n+                                                              \"allow_internal_unstable\");\n+            debug!(\"load_macros: loaded: {:?}\", def);\n             self.macros.push(def);\n         }\n "}, {"sha": "3599ba5a0f779a4c2eb2f5ff0bd5a604ab65f017", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -362,8 +362,6 @@ pub fn check_item(tcx: &ty::ctxt, item: &ast::Item, warn_about_defns: bool,\n /// Helper for discovering nodes to check for stability\n pub fn check_expr(tcx: &ty::ctxt, e: &ast::Expr,\n                   cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n-    if is_internal(tcx, e.span) { return; }\n-\n     let span;\n     let id = match e.node {\n         ast::ExprMethodCall(i, _, _) => {\n@@ -527,12 +525,13 @@ pub fn check_pat(tcx: &ty::ctxt, pat: &ast::Pat,\n fn maybe_do_stability_check(tcx: &ty::ctxt, id: ast::DefId, span: Span,\n                             cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n     if !is_staged_api(tcx, id) { return  }\n+    if is_internal(tcx, span) { return }\n     let ref stability = lookup(tcx, id);\n     cb(id, span, stability);\n }\n \n fn is_internal(tcx: &ty::ctxt, span: Span) -> bool {\n-    tcx.sess.codemap().span_is_internal(span)\n+    tcx.sess.codemap().span_allows_unstable(span)\n }\n \n fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool {"}, {"sha": "78f7b3b91ddf74d5c9935466183229933fd87dda", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -81,8 +81,12 @@ impl<'a> Registry<'a> {\n     /// This is the most general hook into `libsyntax`'s expansion behavior.\n     pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) {\n         self.syntax_exts.push((name, match extension {\n-            NormalTT(ext, _) => NormalTT(ext, Some(self.krate_span)),\n-            IdentTT(ext, _) => IdentTT(ext, Some(self.krate_span)),\n+            NormalTT(ext, _, allow_internal_unstable) => {\n+                NormalTT(ext, Some(self.krate_span), allow_internal_unstable)\n+            }\n+            IdentTT(ext, _, allow_internal_unstable) => {\n+                IdentTT(ext, Some(self.krate_span), allow_internal_unstable)\n+            }\n             Decorator(ext) => Decorator(ext),\n             Modifier(ext) => Modifier(ext),\n             MultiModifier(ext) => MultiModifier(ext),\n@@ -99,7 +103,8 @@ impl<'a> Registry<'a> {\n     /// It builds for you a `NormalTT` that calls `expander`,\n     /// and also takes care of interning the macro's name.\n     pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n-        self.register_syntax_extension(token::intern(name), NormalTT(Box::new(expander), None));\n+        self.register_syntax_extension(token::intern(name),\n+                                       NormalTT(Box::new(expander), None, false));\n     }\n \n     /// Register a compiler lint pass."}, {"sha": "6ec36886252f0b250eb170da77ed9eec96132caa", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -493,12 +493,16 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     );\n \n-    // Needs to go *after* expansion to be able to check the results of macro expansion.\n-    time(time_passes, \"complete gated feature checking\", (), |_| {\n+    // Needs to go *after* expansion to be able to check the results\n+    // of macro expansion.  This runs before #[cfg] to try to catch as\n+    // much as possible (e.g. help the programmer avoid platform\n+    // specific differences)\n+    time(time_passes, \"complete gated feature checking 1\", (), |_| {\n         let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n-                                          &sess.parse_sess.span_diagnostic,\n-                                          &krate);\n+                                              &sess.parse_sess.span_diagnostic,\n+                                              &krate,\n+                                              true);\n         *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });\n@@ -521,6 +525,19 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     time(time_passes, \"checking that all macro invocations are gone\", &krate, |krate|\n          syntax::ext::expand::check_for_macros(&sess.parse_sess, krate));\n \n+    // One final feature gating of the true AST that gets compiled\n+    // later, to make sure we've got everything (e.g. configuration\n+    // can insert new attributes via `cfg_attr`)\n+    time(time_passes, \"complete gated feature checking 2\", (), |_| {\n+        let features =\n+            syntax::feature_gate::check_crate(sess.codemap(),\n+                                              &sess.parse_sess.span_diagnostic,\n+                                              &krate,\n+                                              false);\n+        *sess.features.borrow_mut() = features;\n+        sess.abort_if_errors();\n+    });\n+\n     Some(krate)\n }\n "}, {"sha": "c0db163e0874dce39f28099ac8ddae334d23af5c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -125,6 +125,7 @@\n #![feature(hash)]\n #![feature(int_uint)]\n #![feature(unique)]\n+#![feature(allow_internal_unstable)]\n #![cfg_attr(test, feature(test, rustc_private))]\n \n // Don't link to std. We are std."}, {"sha": "91de2662883f8ce6aa717b326fd6ddccbf954897", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -55,6 +55,7 @@\n //! ```\n \n #![allow(non_camel_case_types)]\n+#![unstable(feature = \"thread_local_internals\")]\n \n use prelude::v1::*;\n \n@@ -84,17 +85,14 @@ use sys::thread_local as imp;\n ///     KEY.set(1 as *mut u8);\n /// }\n /// ```\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StaticKey {\n     /// Inner static TLS key (internals), created with by `INIT_INNER` in this\n     /// module.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub inner: StaticKeyInner,\n     /// Destructor for the TLS value.\n     ///\n     /// See `Key::new` for information about when the destructor runs and how\n     /// it runs.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub dtor: Option<unsafe extern fn(*mut u8)>,\n }\n \n@@ -131,7 +129,6 @@ pub struct Key {\n /// Constant initialization value for static TLS keys.\n ///\n /// This value specifies no destructor by default.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INIT: StaticKey = StaticKey {\n     inner: INIT_INNER,\n     dtor: None,\n@@ -140,7 +137,6 @@ pub const INIT: StaticKey = StaticKey {\n /// Constant initialization value for the inner part of static TLS keys.\n ///\n /// This value allows specific configuration of the destructor for a TLS key.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INIT_INNER: StaticKeyInner = StaticKeyInner {\n     key: atomic::ATOMIC_USIZE_INIT,\n };"}, {"sha": "6bba73420d8512cd7b7c563230941ec171792d5b", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -45,7 +45,7 @@ pub mod scoped;\n \n // Sure wish we had macro hygiene, no?\n #[doc(hidden)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"thread_local_internals\")]\n pub mod __impl {\n     pub use super::imp::Key as KeyInner;\n     pub use super::imp::destroy_value;\n@@ -117,6 +117,7 @@ pub struct Key<T> {\n /// Declare a new thread local storage key of type `std::thread_local::Key`.\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n macro_rules! thread_local {\n     (static $name:ident: $t:ty = $init:expr) => (\n         static $name: ::std::thread_local::Key<$t> = {\n@@ -176,6 +177,7 @@ macro_rules! thread_local {\n \n #[macro_export]\n #[doc(hidden)]\n+#[allow_internal_unstable]\n macro_rules! __thread_local_inner {\n     (static $name:ident: $t:ty = $init:expr) => (\n         #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n@@ -337,22 +339,22 @@ mod imp {\n     use ptr;\n \n     #[doc(hidden)]\n-    #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+    #[unstable(feature = \"thread_local_internals\")]\n     pub struct Key<T> {\n         // Place the inner bits in an `UnsafeCell` to currently get around the\n         // \"only Sync statics\" restriction. This allows any type to be placed in\n         // the cell.\n         //\n         // Note that all access requires `T: 'static` so it can't be a type with\n         // any borrowed pointers still.\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub inner: UnsafeCell<T>,\n \n         // Metadata to keep track of the state of the destructor. Remember that\n         // these variables are thread-local, not global.\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub dtor_registered: UnsafeCell<bool>, // should be Cell\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub dtor_running: UnsafeCell<bool>, // should be Cell\n     }\n \n@@ -455,7 +457,7 @@ mod imp {\n     }\n \n     #[doc(hidden)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"thread_local_internals\")]\n     pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n         let ptr = ptr as *mut Key<T>;\n         // Right before we run the user destructor be sure to flag the\n@@ -477,15 +479,15 @@ mod imp {\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n \n     #[doc(hidden)]\n-    #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+    #[unstable(feature = \"thread_local_internals\")]\n     pub struct Key<T> {\n         // Statically allocated initialization expression, using an `UnsafeCell`\n         // for the same reasons as above.\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub inner: UnsafeCell<T>,\n \n         // OS-TLS key that we'll use to key off.\n-        #[stable(since = \"1.0.0\", feature = \"rust1\")]\n+        #[unstable(feature = \"thread_local_internals\")]\n         pub os: OsStaticKey,\n     }\n \n@@ -528,7 +530,7 @@ mod imp {\n     }\n \n     #[doc(hidden)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"thread_local_internals\")]\n     pub unsafe extern fn destroy_value<T: 'static>(ptr: *mut u8) {\n         // The OS TLS ensures that this key contains a NULL value when this\n         // destructor starts to run. We set it back to a sentinel value of 1 to"}, {"sha": "a5339568e9ef69088cce9f97f73686c4ad6a9a0e", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -65,6 +65,7 @@ pub struct Key<T> { #[doc(hidden)] pub inner: __impl::KeyInner<T> }\n /// This macro declares a `static` item on which methods are used to get and\n /// set the value stored within.\n #[macro_export]\n+#[allow_internal_unstable]\n macro_rules! scoped_thread_local {\n     (static $name:ident: $t:ty) => (\n         __scoped_thread_local_inner!(static $name: $t);\n@@ -76,6 +77,7 @@ macro_rules! scoped_thread_local {\n \n #[macro_export]\n #[doc(hidden)]\n+#[allow_internal_unstable]\n macro_rules! __scoped_thread_local_inner {\n     (static $name:ident: $t:ty) => (\n         #[cfg_attr(not(any(windows,"}, {"sha": "b41eb05ded695041108291b4d5b63935bb6c96d7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -1743,6 +1743,7 @@ pub struct MacroDef {\n     pub imported_from: Option<Ident>,\n     pub export: bool,\n     pub use_locally: bool,\n+    pub allow_internal_unstable: bool,\n     pub body: Vec<TokenTree>,\n }\n "}, {"sha": "44df8a6d3daec74139a3b91e3aa234ebf4da2a1d", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -243,6 +243,10 @@ pub struct NameAndSpan {\n     pub name: String,\n     /// The format with which the macro was invoked.\n     pub format: MacroFormat,\n+    /// Whether the macro is allowed to use #[unstable]/feature-gated\n+    /// features internally without forcing the whole crate to opt-in\n+    /// to them.\n+    pub allow_internal_unstable: bool,\n     /// The span of the macro definition itself. The macro may not\n     /// have a sensible definition span (e.g. something defined\n     /// completely inside libsyntax) in which case this is None.\n@@ -830,41 +834,43 @@ impl CodeMap {\n         }\n     }\n \n-    /// Check if a span is \"internal\" to a macro. This means that it is entirely generated by a\n-    /// macro expansion and contains no code that was passed in as an argument.\n-    pub fn span_is_internal(&self, span: Span) -> bool {\n-        // first, check if the given expression was generated by a macro or not\n-        // we need to go back the expn_info tree to check only the arguments\n-        // of the initial macro call, not the nested ones.\n-        let mut is_internal = false;\n-        let mut expnid = span.expn_id;\n-        while self.with_expn_info(expnid, |expninfo| {\n-            match expninfo {\n-                Some(ref info) => {\n-                    // save the parent expn_id for next loop iteration\n-                    expnid = info.call_site.expn_id;\n-                    if info.callee.name == \"format_args\" {\n-                        // This is a hack because the format_args builtin calls unstable APIs.\n-                        // I spent like 6 hours trying to solve this more generally but am stupid.\n-                        is_internal = true;\n-                        false\n-                    } else if info.callee.span.is_none() {\n-                        // it's a compiler built-in, we *really* don't want to mess with it\n-                        // so we skip it, unless it was called by a regular macro, in which case\n-                        // we will handle the caller macro next turn\n-                        is_internal = true;\n-                        true // continue looping\n+    /// Check if a span is \"internal\" to a macro in which #[unstable]\n+    /// items can be used (that is, a macro marked with\n+    /// `#[allow_internal_unstable]`).\n+    pub fn span_allows_unstable(&self, span: Span) -> bool {\n+        debug!(\"span_allows_unstable(span = {:?})\", span);\n+        let mut allows_unstable = false;\n+        let mut expn_id = span.expn_id;\n+        loop {\n+            let quit = self.with_expn_info(expn_id, |expninfo| {\n+                debug!(\"span_allows_unstable: expninfo = {:?}\", expninfo);\n+                expninfo.map_or(/* hit the top level */ true, |info| {\n+\n+                    let span_comes_from_this_expansion =\n+                        info.callee.span.map_or(span == info.call_site, |mac_span| {\n+                            mac_span.lo <= span.lo && span.hi < mac_span.hi\n+                        });\n+\n+                    debug!(\"span_allows_unstable: from this expansion? {}, allows unstable? {}\",\n+                           span_comes_from_this_expansion,\n+                           info.callee.allow_internal_unstable);\n+                    if span_comes_from_this_expansion {\n+                        allows_unstable = info.callee.allow_internal_unstable;\n+                        // we've found the right place, stop looking\n+                        true\n                     } else {\n-                        // was this expression from the current macro arguments ?\n-                        is_internal = !( span.lo > info.call_site.lo &&\n-                                         span.hi < info.call_site.hi );\n-                        true // continue looping\n+                        // not the right place, keep looking\n+                        expn_id = info.call_site.expn_id;\n+                        false\n                     }\n-                },\n-                _ => false // stop looping\n+                })\n+            });\n+            if quit {\n+                break\n             }\n-        }) { /* empty while loop body */ }\n-        return is_internal;\n+        }\n+        debug!(\"span_allows_unstable? {}\", allows_unstable);\n+        allows_unstable\n     }\n }\n "}, {"sha": "d256698b88598cd5cd764379514d23aaf3056785", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -214,6 +214,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             name: \"asm\".to_string(),\n             format: codemap::MacroBang,\n             span: None,\n+            allow_internal_unstable: false,\n         },\n     });\n "}, {"sha": "5513b44235d2c444fc24d08baf3f44a1cbf0da97", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -430,12 +430,15 @@ pub enum SyntaxExtension {\n     /// A normal, function-like syntax extension.\n     ///\n     /// `bytes!` is a `NormalTT`.\n-    NormalTT(Box<TTMacroExpander + 'static>, Option<Span>),\n+    ///\n+    /// The `bool` dictates whether the contents of the macro can\n+    /// directly use `#[unstable]` things (true == yes).\n+    NormalTT(Box<TTMacroExpander + 'static>, Option<Span>, bool),\n \n     /// A function-like syntax extension that has an extra ident before\n     /// the block.\n     ///\n-    IdentTT(Box<IdentMacroExpander + 'static>, Option<Span>),\n+    IdentTT(Box<IdentMacroExpander + 'static>, Option<Span>, bool),\n \n     /// Represents `macro_rules!` itself.\n     MacroRulesTT,\n@@ -465,14 +468,14 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n                                         -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n-        NormalTT(Box::new(f), None)\n+        NormalTT(Box::new(f), None, false)\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n     syntax_expanders.insert(intern(\"macro_rules\"), MacroRulesTT);\n     syntax_expanders.insert(intern(\"format_args\"),\n-                            builtin_normal_expander(\n-                                ext::format::expand_format_args));\n+                            // format_args uses `unstable` things internally.\n+                            NormalTT(Box::new(ext::format::expand_format_args), None, true));\n     syntax_expanders.insert(intern(\"env\"),\n                             builtin_normal_expander(\n                                     ext::env::expand_env));"}, {"sha": "9cd965a8138e083d475da73ced390cc630b3f347", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -1216,7 +1216,8 @@ impl<'a> TraitDef<'a> {\n             callee: codemap::NameAndSpan {\n                 name: format!(\"derive({})\", trait_name),\n                 format: codemap::MacroAttribute,\n-                span: Some(self.span)\n+                span: Some(self.span),\n+                allow_internal_unstable: false,\n             }\n         });\n         to_set"}, {"sha": "d48108f17ff9a6a39d82adb843e1e1b0d147b17b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -22,7 +22,7 @@ use attr::AttrMetaMethods;\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use ext::base::*;\n-use feature_gate::{Features};\n+use feature_gate::{self, Features};\n use fold;\n use fold::*;\n use parse;\n@@ -395,13 +395,14 @@ fn expand_mac_invoc<T, F, G>(mac: ast::Mac, span: codemap::Span,\n                     None\n                 }\n                 Some(rc) => match *rc {\n-                    NormalTT(ref expandfun, exp_span) => {\n+                    NormalTT(ref expandfun, exp_span, allow_internal_unstable) => {\n                         fld.cx.bt_push(ExpnInfo {\n                                 call_site: span,\n                                 callee: NameAndSpan {\n                                     name: extnamestr.to_string(),\n                                     format: MacroBang,\n                                     span: exp_span,\n+                                    allow_internal_unstable: allow_internal_unstable,\n                                 },\n                             });\n                         let fm = fresh_mark();\n@@ -530,6 +531,9 @@ fn expand_item_modifiers(mut it: P<ast::Item>, fld: &mut MacroExpander)\n                             name: mname.to_string(),\n                             format: MacroAttribute,\n                             span: None,\n+                            // attributes can do whatever they like,\n+                            // for now\n+                            allow_internal_unstable: true,\n                         }\n                     });\n                     it = mac.expand(fld.cx, attr.span, &*attr.node.value, it);\n@@ -614,7 +618,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n             }\n \n             Some(rc) => match *rc {\n-                NormalTT(ref expander, span) => {\n+                NormalTT(ref expander, span, allow_internal_unstable) => {\n                     if it.ident.name != parse::token::special_idents::invalid.name {\n                         fld.cx\n                             .span_err(path_span,\n@@ -628,14 +632,15 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                         callee: NameAndSpan {\n                             name: extnamestr.to_string(),\n                             format: MacroBang,\n-                            span: span\n+                            span: span,\n+                            allow_internal_unstable: allow_internal_unstable,\n                         }\n                     });\n                     // mark before expansion:\n                     let marked_before = mark_tts(&tts[..], fm);\n                     expander.expand(fld.cx, it.span, &marked_before[..])\n                 }\n-                IdentTT(ref expander, span) => {\n+                IdentTT(ref expander, span, allow_internal_unstable) => {\n                     if it.ident.name == parse::token::special_idents::invalid.name {\n                         fld.cx.span_err(path_span,\n                                         &format!(\"macro {}! expects an ident argument\",\n@@ -647,7 +652,8 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                         callee: NameAndSpan {\n                             name: extnamestr.to_string(),\n                             format: MacroBang,\n-                            span: span\n+                            span: span,\n+                            allow_internal_unstable: allow_internal_unstable,\n                         }\n                     });\n                     // mark before expansion:\n@@ -661,16 +667,35 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                                         );\n                         return SmallVector::zero();\n                     }\n+\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: it.span,\n                         callee: NameAndSpan {\n                             name: extnamestr.to_string(),\n                             format: MacroBang,\n                             span: None,\n+                            // `macro_rules!` doesn't directly allow\n+                            // unstable (this is orthogonal to whether\n+                            // the macro it creates allows it)\n+                            allow_internal_unstable: false,\n                         }\n                     });\n                     // DON'T mark before expansion.\n \n+                    let allow_internal_unstable = attr::contains_name(&it.attrs,\n+                                                                      \"allow_internal_unstable\");\n+\n+                    // ensure any #[allow_internal_unstable]s are\n+                    // detected (including nested macro definitions\n+                    // etc.)\n+                    if allow_internal_unstable && !fld.cx.ecfg.enable_allow_internal_unstable() {\n+                        feature_gate::emit_feature_err(\n+                            &fld.cx.parse_sess.span_diagnostic,\n+                            \"allow_internal_unstable\",\n+                            it.span,\n+                            feature_gate::EXPLAIN_ALLOW_INTERNAL_UNSTABLE)\n+                    }\n+\n                     let def = ast::MacroDef {\n                         ident: it.ident,\n                         attrs: it.attrs.clone(),\n@@ -679,6 +704,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                         imported_from: None,\n                         export: attr::contains_name(&it.attrs, \"macro_export\"),\n                         use_locally: true,\n+                        allow_internal_unstable: allow_internal_unstable,\n                         body: tts,\n                     };\n                     fld.cx.insert_macro(def);\n@@ -959,13 +985,14 @@ fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> {\n             }\n \n             Some(rc) => match *rc {\n-                NormalTT(ref expander, tt_span) => {\n+                NormalTT(ref expander, tt_span, allow_internal_unstable) => {\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: span,\n                         callee: NameAndSpan {\n                             name: extnamestr.to_string(),\n                             format: MacroBang,\n-                            span: tt_span\n+                            span: tt_span,\n+                            allow_internal_unstable: allow_internal_unstable,\n                         }\n                     });\n \n@@ -1094,7 +1121,10 @@ fn expand_annotatable(a: Annotatable,\n                         callee: NameAndSpan {\n                             name: mname.to_string(),\n                             format: MacroAttribute,\n-                            span: None\n+                            span: None,\n+                            // attributes can do whatever they like,\n+                            // for now.\n+                            allow_internal_unstable: true,\n                         }\n                     });\n \n@@ -1244,6 +1274,9 @@ fn expand_item_multi_modifier(mut it: Annotatable,\n                             name: mname.to_string(),\n                             format: MacroAttribute,\n                             span: None,\n+                            // attributes can do whatever they like,\n+                            // for now\n+                            allow_internal_unstable: true,\n                         }\n                     });\n                     it = mac.expand(fld.cx, attr.span, &*attr.node.value, it);\n@@ -1457,6 +1490,13 @@ impl<'feat> ExpansionConfig<'feat> {\n             _ => false,\n         }\n     }\n+\n+    pub fn enable_allow_internal_unstable(&self) -> bool {\n+        match self.features {\n+            Some(&Features { allow_internal_unstable: true, .. }) => true,\n+            _ => false\n+        }\n+    }\n }\n \n pub fn expand_crate<'feat>(parse_sess: &parse::ParseSess,"}, {"sha": "644c6cd7e2833f60c9ff8f4350d306a35eec2355", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -267,7 +267,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n         rhses: rhses,\n     };\n \n-    NormalTT(exp, Some(def.span))\n+    NormalTT(exp, Some(def.span), def.allow_internal_unstable)\n }\n \n fn check_lhs_nt_follows(cx: &mut ExtCtxt, lhs: &NamedMatch, sp: Span) {"}, {"sha": "c6a94b26a0a51fd32ba3b52ac6ca12c68c2140bd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -142,6 +142,12 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     // Allows the use of `static_assert`\n     (\"static_assert\", \"1.0.0\", Active),\n+\n+    // Allows the use of #[allow_internal_unstable]. This is an\n+    // attribute on macro_rules! and can't use the attribute handling\n+    // below (it has to be checked before expansion possibly makes\n+    // macros disappear).\n+    (\"allow_internal_unstable\", \"1.0.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -279,7 +285,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"recursion_limit\", CrateLevel),\n ];\n \n-#[derive(PartialEq, Copy)]\n+#[derive(PartialEq, Copy, Debug)]\n pub enum AttributeType {\n     /// Normal, builtin attribute that is consumed\n     /// by the compiler before the unused_attribute check\n@@ -308,6 +314,7 @@ pub struct Features {\n     pub allow_log_syntax: bool,\n     pub allow_concat_idents: bool,\n     pub allow_trace_macros: bool,\n+    pub allow_internal_unstable: bool,\n     pub old_orphan_check: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n@@ -328,6 +335,7 @@ impl Features {\n             allow_log_syntax: false,\n             allow_concat_idents: false,\n             allow_trace_macros: false,\n+            allow_internal_unstable: false,\n             old_orphan_check: false,\n             simd_ffi: false,\n             unmarked_api: false,\n@@ -341,17 +349,20 @@ struct Context<'a> {\n     features: Vec<&'static str>,\n     span_handler: &'a SpanHandler,\n     cm: &'a CodeMap,\n+    do_warnings: bool,\n }\n \n impl<'a> Context<'a> {\n     fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n-        if !self.has_feature(feature) {\n+        let has_feature = self.has_feature(feature);\n+        debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", feature, span, has_feature);\n+        if !has_feature {\n             emit_feature_err(self.span_handler, feature, span, explain);\n         }\n     }\n \n     fn warn_feature(&self, feature: &str, span: Span, explain: &str) {\n-        if !self.has_feature(feature) {\n+        if !self.has_feature(feature) && self.do_warnings {\n             emit_feature_warn(self.span_handler, feature, span, explain);\n         }\n     }\n@@ -387,6 +398,8 @@ pub const EXPLAIN_CONCAT_IDENTS: &'static str =\n \n pub const EXPLAIN_TRACE_MACROS: &'static str =\n     \"`trace_macros` is not stable enough for use and is subject to change\";\n+pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str =\n+    \"allow_internal_unstable side-steps feature gating and stability checks\";\n \n struct MacroVisitor<'a> {\n     context: &'a Context<'a>\n@@ -421,6 +434,13 @@ impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n             self.context.gate_feature(\"concat_idents\", path.span, EXPLAIN_CONCAT_IDENTS);\n         }\n     }\n+\n+    fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n+        if attr.name() == \"allow_internal_unstable\" {\n+            self.context.gate_feature(\"allow_internal_unstable\", attr.span,\n+                                      EXPLAIN_ALLOW_INTERNAL_UNSTABLE)\n+        }\n+    }\n }\n \n struct PostExpansionVisitor<'a> {\n@@ -429,7 +449,7 @@ struct PostExpansionVisitor<'a> {\n \n impl<'a> PostExpansionVisitor<'a> {\n     fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n-        if !self.context.cm.span_is_internal(span) {\n+        if !self.context.cm.span_allows_unstable(span) {\n             self.context.gate_feature(feature, span, explain)\n         }\n     }\n@@ -617,12 +637,14 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+        debug!(\"visit_attribute(attr = {:?})\", attr);\n         let name = &*attr.name();\n         for &(n, ty) in KNOWN_ATTRIBUTES {\n             if n == name {\n                 if let Gated(gate, desc) = ty {\n                     self.gate_feature(gate, attr.span, desc);\n                 }\n+                debug!(\"visit_attribute: {:?} is known, {:?}\", name, ty);\n                 return;\n             }\n         }\n@@ -679,13 +701,15 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n }\n \n fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n+                        do_warnings: bool,\n                         check: F)\n                        -> Features\n     where F: FnOnce(&mut Context, &ast::Crate)\n {\n     let mut cx = Context {\n         features: Vec::new(),\n         span_handler: span_handler,\n+        do_warnings: do_warnings,\n         cm: cm,\n     };\n \n@@ -754,6 +778,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         allow_log_syntax: cx.has_feature(\"log_syntax\"),\n         allow_concat_idents: cx.has_feature(\"concat_idents\"),\n         allow_trace_macros: cx.has_feature(\"trace_macros\"),\n+        allow_internal_unstable: cx.has_feature(\"allow_internal_unstable\"),\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n@@ -764,13 +789,14 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n \n pub fn check_crate_macros(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n -> Features {\n-    check_crate_inner(cm, span_handler, krate,\n+    check_crate_inner(cm, span_handler, krate, true,\n                       |ctx, krate| visit::walk_crate(&mut MacroVisitor { context: ctx }, krate))\n }\n \n-pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n--> Features {\n-    check_crate_inner(cm, span_handler, krate,\n+pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n+                   do_warnings: bool) -> Features\n+{\n+    check_crate_inner(cm, span_handler, krate, do_warnings,\n                       |ctx, krate| visit::walk_crate(&mut PostExpansionVisitor { context: ctx },\n                                                      krate))\n }"}, {"sha": "d889453a5f977127708805124cf273979392a68c", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -256,7 +256,8 @@ fn generate_test_harness(sess: &ParseSess,\n         callee: NameAndSpan {\n             name: \"test\".to_string(),\n             format: MacroAttribute,\n-            span: None\n+            span: None,\n+            allow_internal_unstable: false,\n         }\n     });\n \n@@ -288,7 +289,8 @@ fn ignored_span(cx: &TestCtxt, sp: Span) -> Span {\n         callee: NameAndSpan {\n             name: \"test\".to_string(),\n             format: MacroAttribute,\n-            span: None\n+            span: None,\n+            allow_internal_unstable: true,\n         }\n     };\n     let expn_id = cx.sess.span_diagnostic.cm.record_expansion(info);"}, {"sha": "3d59b8e900992dc3e45235d0dabd1e2d9a4d91ad", "filename": "src/test/auxiliary/internal_unstable.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api, allow_internal_unstable)]\n+#![staged_api]\n+#![stable(feature = \"stable\", since = \"1.0.0\")]\n+\n+#[unstable(feature = \"function\")]\n+pub fn unstable() {}\n+\n+\n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n+pub struct Foo {\n+    #[unstable(feature = \"struct_field\")]\n+    pub x: u8\n+}\n+\n+#[allow_internal_unstable]\n+#[macro_export]\n+macro_rules! call_unstable_allow {\n+    () => { $crate::unstable() }\n+}\n+\n+#[allow_internal_unstable]\n+#[macro_export]\n+macro_rules! construct_unstable_allow {\n+    ($e: expr) => {\n+        $crate::Foo { x: $e }\n+    }\n+}\n+\n+#[allow_internal_unstable]\n+#[macro_export]\n+macro_rules! pass_through_allow {\n+    ($e: expr) => { $e }\n+}\n+\n+#[macro_export]\n+macro_rules! call_unstable_noallow {\n+    () => { $crate::unstable() }\n+}\n+\n+#[macro_export]\n+macro_rules! construct_unstable_noallow {\n+    ($e: expr) => {\n+        $crate::Foo { x: $e }\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! pass_through_noallow {\n+    ($e: expr) => { $e }\n+}"}, {"sha": "30b18a3618ffa09174f70bcb64757472a20a5934", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -47,5 +47,5 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     let args = reg.args().clone();\n     reg.register_syntax_extension(token::intern(\"plugin_args\"),\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-        NormalTT(Box::new(Expander { args: args, }), None));\n+        NormalTT(Box::new(Expander { args: args, }), None, false));\n }"}, {"sha": "afcb896b43c2a52e426a5dda4223d48a2515236c", "filename": "src/test/compile-fail/cfg-attr-unknown-attribute-macro-expansion.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Fcfg-attr-unknown-attribute-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Fcfg-attr-unknown-attribute-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-attr-unknown-attribute-macro-expansion.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    () => {\n+        #[cfg_attr(all(), unknown)] //~ ERROR `unknown` is currently unknown\n+        fn foo() {}\n+    }\n+}\n+\n+foo!();\n+\n+fn main() {}"}, {"sha": "c9251c925cc40cc9f1951af642eb9bb062ca97c9", "filename": "src/test/compile-fail/feature-gate-allow-internal-unstable-nested-macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! bar {\n+    () => {\n+        // more layers don't help:\n+        #[allow_internal_unstable]\n+        macro_rules! baz { //~ ERROR allow_internal_unstable side-steps\n+            () => {}\n+        }\n+    }\n+}\n+\n+bar!();\n+\n+fn main() {}"}, {"sha": "8a2d8dddac0741fdaff21fdcb8e4e1343637ba86", "filename": "src/test/compile-fail/feature-gate-allow-internal-unstable.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n+macro_rules! foo {\n+    () => {}\n+}\n+\n+fn main() {}"}, {"sha": "4e296198be8e4b295fd8b94bf7f1b712db697d6a", "filename": "src/test/compile-fail/internal-unstable-noallow.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// this has to be separate to internal-unstable.rs because these tests\n+// have error messages pointing deep into the internals of the\n+// cross-crate macros, and hence need to use error-pattern instead of\n+// the // ~ form.\n+\n+// aux-build:internal_unstable.rs\n+// error-pattern:use of unstable library feature 'function'\n+// error-pattern:use of unstable library feature 'struct_field'\n+// error-pattern:compilation successful\n+#![feature(rustc_attrs)]\n+\n+#[macro_use]\n+extern crate internal_unstable;\n+\n+#[rustc_error]\n+fn main() {\n+    call_unstable_noallow!();\n+\n+    construct_unstable_noallow!(0);\n+}"}, {"sha": "ff1584975462f18974441bbc2262dc543e5d520a", "filename": "src/test/compile-fail/internal-unstable-thread-local.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable-thread-local.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:internal_unstable.rs\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+extern crate internal_unstable;\n+\n+\n+thread_local!(static FOO: () = ());\n+thread_local!(static BAR: () = internal_unstable::unstable()); //~ WARN use of unstable\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR"}, {"sha": "8674e8ab5b2cdaf95bac7751a7d8edcedd57ed93", "filename": "src/test/compile-fail/internal-unstable.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe8f221450bad3ffb1351c6549f67c18ce0b94e/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs?ref=1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:internal_unstable.rs\n+\n+#![feature(rustc_attrs, allow_internal_unstable)]\n+\n+#[macro_use]\n+extern crate internal_unstable;\n+\n+macro_rules! foo {\n+    ($e: expr, $f: expr) => {{\n+        $e;\n+        $f;\n+        internal_unstable::unstable(); //~ WARN use of unstable\n+    }}\n+}\n+\n+#[allow_internal_unstable]\n+macro_rules! bar {\n+    ($e: expr) => {{\n+        foo!($e,\n+             internal_unstable::unstable());\n+        internal_unstable::unstable();\n+    }}\n+}\n+\n+#[rustc_error]\n+fn main() { //~ ERROR\n+    // ok, the instability is contained.\n+    call_unstable_allow!();\n+    construct_unstable_allow!(0);\n+\n+    // bad.\n+    pass_through_allow!(internal_unstable::unstable()); //~ WARN use of unstable\n+\n+    pass_through_noallow!(internal_unstable::unstable()); //~ WARN use of unstable\n+\n+\n+\n+    println!(\"{:?}\", internal_unstable::unstable()); //~ WARN use of unstable\n+\n+    bar!(internal_unstable::unstable()); //~ WARN use of unstable\n+}"}]}