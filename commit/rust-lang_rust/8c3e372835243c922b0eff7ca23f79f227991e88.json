{"sha": "8c3e372835243c922b0eff7ca23f79f227991e88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjM2UzNzI4MzUyNDNjOTIyYjBlZmY3Y2EyM2Y3OWYyMjc5OTFlODg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T10:10:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T10:10:26Z"}, "message": "Remove Resolver from autoderef\n\nResolver holds onto too much context, including local scopes. Let's\ntry to pass in only what is necessary -- the trait environment.", "tree": {"sha": "5dda185ddeba593b7af36f66eeb6098e4f913c05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dda185ddeba593b7af36f66eeb6098e4f913c05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c3e372835243c922b0eff7ca23f79f227991e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c3e372835243c922b0eff7ca23f79f227991e88", "html_url": "https://github.com/rust-lang/rust/commit/8c3e372835243c922b0eff7ca23f79f227991e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c3e372835243c922b0eff7ca23f79f227991e88/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd53bd80bff9a1f320615a975235399b1fa4792e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd53bd80bff9a1f320615a975235399b1fa4792e", "html_url": "https://github.com/rust-lang/rust/commit/bd53bd80bff9a1f320615a975235399b1fa4792e"}], "stats": {"total": 122, "additions": 73, "deletions": 49}, "files": [{"sha": "b4f0e81d3069da02f51638512a2281e5d876a3c1", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=8c3e372835243c922b0eff7ca23f79f227991e88", "patch": "@@ -26,7 +26,10 @@ use ra_syntax::{\n use crate::{\n     db::HirDatabase,\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n-    ty::method_resolution::{self, implements_trait},\n+    ty::{\n+        method_resolution::{self, implements_trait},\n+        TraitEnvironment,\n+    },\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n     GenericParam, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Ty, TypeAlias,\n };\n@@ -408,7 +411,10 @@ impl SourceAnalyzer {\n         // There should be no inference vars in types passed here\n         // FIXME check that?\n         let canonical = crate::ty::Canonical { value: ty, num_vars: 0 };\n-        crate::ty::autoderef(db, &self.resolver, canonical).map(|canonical| canonical.value)\n+        let krate = self.resolver.krate();\n+        let environment = TraitEnvironment::lower(db, &self.resolver);\n+        let ty = crate::ty::InEnvironment { value: canonical, environment };\n+        crate::ty::autoderef(db, krate, ty).map(|canonical| canonical.value)\n     }\n \n     /// Checks that particular type `ty` implements `std::future::Future`."}, {"sha": "44547197caff5e06ed7b0864368de6ac727ce315", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=8c3e372835243c922b0eff7ca23f79f227991e88", "patch": "@@ -5,7 +5,7 @@\n \n use std::iter::successors;\n \n-use hir_def::{lang_item::LangItemTarget, resolver::Resolver};\n+use hir_def::lang_item::LangItemTarget;\n use hir_expand::name;\n use log::{info, warn};\n use ra_db::CrateId;\n@@ -21,23 +21,25 @@ const AUTODEREF_RECURSION_LIMIT: usize = 10;\n \n pub(crate) fn autoderef<'a>(\n     db: &'a impl HirDatabase,\n-    resolver: &'a Resolver,\n-    ty: Canonical<Ty>,\n+    krate: Option<CrateId>,\n+    ty: InEnvironment<Canonical<Ty>>,\n ) -> impl Iterator<Item = Canonical<Ty>> + 'a {\n-    successors(Some(ty), move |ty| deref(db, resolver, ty)).take(AUTODEREF_RECURSION_LIMIT)\n+    let InEnvironment { value: ty, environment } = ty;\n+    successors(Some(ty), move |ty| {\n+        deref(db, krate?, InEnvironment { value: ty, environment: environment.clone() })\n+    })\n+    .take(AUTODEREF_RECURSION_LIMIT)\n }\n \n pub(crate) fn deref(\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n-    ty: &Canonical<Ty>,\n+    krate: CrateId,\n+    ty: InEnvironment<&Canonical<Ty>>,\n ) -> Option<Canonical<Ty>> {\n-    if let Some(derefed) = ty.value.builtin_deref() {\n-        Some(Canonical { value: derefed, num_vars: ty.num_vars })\n+    if let Some(derefed) = ty.value.value.builtin_deref() {\n+        Some(Canonical { value: derefed, num_vars: ty.value.num_vars })\n     } else {\n-        let krate = resolver.krate()?;\n-        let environment = super::lower::trait_env(db, resolver);\n-        deref_by_trait(db, krate, InEnvironment { value: ty, environment })\n+        deref_by_trait(db, krate, ty)\n     }\n }\n "}, {"sha": "6fd00d457f6f78d907a5a15aee59db36657e9224", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=8c3e372835243c922b0eff7ca23f79f227991e88", "patch": "@@ -34,7 +34,6 @@ use ra_prof::profile;\n use test_utils::tested_by;\n \n use super::{\n-    lower,\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n     ApplicationTy, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypableDef,\n     TypeCtor, TypeWalk, Uncertain,\n@@ -216,7 +215,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             var_unification_table: InPlaceUnificationTable::new(),\n             obligations: Vec::default(),\n             return_ty: Ty::Unknown, // set in collect_fn_signature\n-            trait_env: lower::trait_env(db, &resolver),\n+            trait_env: TraitEnvironment::lower(db, &resolver),\n             coerce_unsized_map: Self::init_coerce_unsized_map(db, &resolver),\n             db,\n             owner,"}, {"sha": "4b53bba73b466ec5b89cd986cc9488b0cf2ed809", "filename": "crates/ra_hir/src/ty/infer/coerce.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs?ref=8c3e372835243c922b0eff7ca23f79f227991e88", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     Adt, Mutability,\n };\n \n-use super::{InferTy, InferenceContext, TypeVarValue};\n+use super::{InEnvironment, InferTy, InferenceContext, TypeVarValue};\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// Unify two types, but may coerce the first one to the second one\n@@ -320,9 +320,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let canonicalized = self.canonicalizer().canonicalize_ty(from_ty.clone());\n         let to_ty = self.resolve_ty_shallow(&to_ty);\n         // FIXME: Auto DerefMut\n-        for derefed_ty in\n-            autoderef::autoderef(self.db, &self.resolver.clone(), canonicalized.value.clone())\n-        {\n+        for derefed_ty in autoderef::autoderef(\n+            self.db,\n+            self.resolver.krate(),\n+            InEnvironment {\n+                value: canonicalized.value.clone(),\n+                environment: self.trait_env.clone(),\n+            },\n+        ) {\n             let derefed_ty = canonicalized.decanonicalize_ty(derefed_ty.value);\n             match (&*self.resolve_ty_shallow(&derefed_ty), &*to_ty) {\n                 // Stop when constructor matches."}, {"sha": "194e5581915595361e971fb8b8758dcb3451c6f1", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=8c3e372835243c922b0eff7ca23f79f227991e88", "patch": "@@ -15,9 +15,9 @@ use crate::{\n     db::HirDatabase,\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     ty::{\n-        autoderef, method_resolution, op, CallableDef, InferTy, IntTy, Mutability, Namespace,\n-        Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n-        Uncertain,\n+        autoderef, method_resolution, op, traits::InEnvironment, CallableDef, InferTy, IntTy,\n+        Mutability, Namespace, Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty,\n+        TypeCtor, TypeWalk, Uncertain,\n     },\n     Adt, Name,\n };\n@@ -245,8 +245,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let canonicalized = self.canonicalizer().canonicalize_ty(receiver_ty);\n                 let ty = autoderef::autoderef(\n                     self.db,\n-                    &self.resolver.clone(),\n-                    canonicalized.value.clone(),\n+                    self.resolver.krate(),\n+                    InEnvironment {\n+                        value: canonicalized.value.clone(),\n+                        environment: self.trait_env.clone(),\n+                    },\n                 )\n                 .find_map(|derefed_ty| match canonicalized.decanonicalize_ty(derefed_ty.value) {\n                     Ty::Apply(a_ty) => match a_ty.ctor {\n@@ -337,16 +340,25 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::UnaryOp { expr, op } => {\n                 let inner_ty = self.infer_expr(*expr, &Expectation::none());\n                 match op {\n-                    UnaryOp::Deref => {\n-                        let canonicalized = self.canonicalizer().canonicalize_ty(inner_ty);\n-                        if let Some(derefed_ty) =\n-                            autoderef::deref(self.db, &self.resolver, &canonicalized.value)\n-                        {\n-                            canonicalized.decanonicalize_ty(derefed_ty.value)\n-                        } else {\n-                            Ty::Unknown\n+                    UnaryOp::Deref => match self.resolver.krate() {\n+                        Some(krate) => {\n+                            let canonicalized = self.canonicalizer().canonicalize_ty(inner_ty);\n+                            match autoderef::deref(\n+                                self.db,\n+                                krate,\n+                                InEnvironment {\n+                                    value: &canonicalized.value,\n+                                    environment: self.trait_env.clone(),\n+                                },\n+                            ) {\n+                                Some(derefed_ty) => {\n+                                    canonicalized.decanonicalize_ty(derefed_ty.value)\n+                                }\n+                                None => Ty::Unknown,\n+                            }\n                         }\n-                    }\n+                        None => Ty::Unknown,\n+                    },\n                     UnaryOp::Neg => {\n                         match &inner_ty {\n                             Ty::Apply(a_ty) => match a_ty.ctor {"}, {"sha": "b769295018b8d55f55f40db3d3fda195117e472a", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=8c3e372835243c922b0eff7ca23f79f227991e88", "patch": "@@ -19,8 +19,8 @@ use hir_def::{\n use ra_arena::map::ArenaMap;\n \n use super::{\n-    FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n-    TypeWalk,\n+    FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, TraitRef,\n+    Ty, TypeCtor, TypeWalk,\n };\n use crate::{\n     db::HirDatabase,\n@@ -591,16 +591,15 @@ pub(crate) fn generic_predicates_for_param_query(\n         .collect()\n }\n \n-pub(crate) fn trait_env(\n-    db: &impl HirDatabase,\n-    resolver: &Resolver,\n-) -> Arc<super::TraitEnvironment> {\n-    let predicates = resolver\n-        .where_predicates_in_scope()\n-        .flat_map(|pred| GenericPredicate::from_where_predicate(db, &resolver, pred))\n-        .collect::<Vec<_>>();\n+impl TraitEnvironment {\n+    pub(crate) fn lower(db: &impl HirDatabase, resolver: &Resolver) -> Arc<TraitEnvironment> {\n+        let predicates = resolver\n+            .where_predicates_in_scope()\n+            .flat_map(|pred| GenericPredicate::from_where_predicate(db, &resolver, pred))\n+            .collect::<Vec<_>>();\n \n-    Arc::new(super::TraitEnvironment { predicates })\n+        Arc::new(TraitEnvironment { predicates })\n+    }\n }\n \n /// Resolve the where clause(s) of an item with generics."}, {"sha": "f7905b5ffe2d88718b6e169da3fcc948004f8789", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c3e372835243c922b0eff7ca23f79f227991e88/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=8c3e372835243c922b0eff7ca23f79f227991e88", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     AssocItem, Crate, Function, ImplBlock, Module, Mutability, Name, Trait,\n };\n \n-use super::{autoderef, lower, Canonical, InEnvironment, TraitEnvironment, TraitRef};\n+use super::{autoderef, Canonical, InEnvironment, TraitEnvironment, TraitRef};\n \n /// This is used as a key for indexing impls.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n@@ -179,8 +179,9 @@ pub(crate) fn iterate_method_candidates<T>(\n             // Also note that when we've got a receiver like &S, even if the method we\n             // find in the end takes &self, we still do the autoderef step (just as\n             // rustc does an autoderef and then autoref again).\n-\n-            for derefed_ty in autoderef::autoderef(db, resolver, ty.clone()) {\n+            let environment = TraitEnvironment::lower(db, resolver);\n+            let ty = InEnvironment { value: ty.clone(), environment };\n+            for derefed_ty in autoderef::autoderef(db, resolver.krate(), ty) {\n                 if let Some(result) = iterate_inherent_methods(\n                     &derefed_ty,\n                     db,\n@@ -230,7 +231,7 @@ fn iterate_trait_method_candidates<T>(\n ) -> Option<T> {\n     let krate = resolver.krate()?;\n     // FIXME: maybe put the trait_env behind a query (need to figure out good input parameters for that)\n-    let env = lower::trait_env(db, resolver);\n+    let env = TraitEnvironment::lower(db, resolver);\n     // if ty is `impl Trait` or `dyn Trait`, the trait doesn't need to be in scope\n     let inherent_trait = ty.value.inherent_trait().into_iter();\n     // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n@@ -324,7 +325,7 @@ pub(crate) fn implements_trait(\n         // anyway, but currently Chalk doesn't implement `dyn/impl Trait` yet\n         return true;\n     }\n-    let env = lower::trait_env(db, resolver);\n+    let env = TraitEnvironment::lower(db, resolver);\n     let goal = generic_implements_goal(db, env, trait_, ty.clone());\n     let solution = db.trait_solve(krate, goal);\n "}]}