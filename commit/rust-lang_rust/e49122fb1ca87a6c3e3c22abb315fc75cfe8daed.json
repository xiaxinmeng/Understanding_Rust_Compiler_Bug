{"sha": "e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "node_id": "C_kwDOAAsO6NoAKGU0OTEyMmZiMWNhODdhNmMzZTNjMjJhYmIzMTVmYzc1Y2ZlOGRhZWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T09:38:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T09:38:31Z"}, "message": "Auto merge of #110367 - saethlin:no-truncations, r=oli-obk\n\nRemove some suspicious cast truncations\n\nThese truncations were added a long time ago, and as best I can tell without a perf justification. And with rust-lang/rust#110410 it has become perf-neutral to not truncate anymore. We worked hard for all these bits, let's use them.", "tree": {"sha": "628b1cea7fda715a40200a5576a9bfa4362286db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/628b1cea7fda715a40200a5576a9bfa4362286db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "html_url": "https://github.com/rust-lang/rust/commit/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "html_url": "https://github.com/rust-lang/rust/commit/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6"}, {"sha": "84facac97a3a13a1ea29b227d55513b58ffe7692", "url": "https://api.github.com/repos/rust-lang/rust/commits/84facac97a3a13a1ea29b227d55513b58ffe7692", "html_url": "https://github.com/rust-lang/rust/commit/84facac97a3a13a1ea29b227d55513b58ffe7692"}], "stats": {"total": 42, "additions": 9, "deletions": 33}, "files": [{"sha": "b955df94f16334b34b1d4d88ffe62b9bfc6dbc87", "filename": "compiler/rustc_data_structures/src/svh.rs", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs?ref=e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "patch": "@@ -5,40 +5,30 @@\n //! mismatches where we have two versions of the same crate that were\n //! compiled from distinct sources.\n \n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use crate::fingerprint::Fingerprint;\n use std::fmt;\n-use std::hash::{Hash, Hasher};\n \n use crate::stable_hasher;\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, Encodable, Decodable, Hash)]\n pub struct Svh {\n-    hash: u64,\n+    hash: Fingerprint,\n }\n \n impl Svh {\n     /// Creates a new `Svh` given the hash. If you actually want to\n     /// compute the SVH from some HIR, you want the `calculate_svh`\n     /// function found in `rustc_incremental`.\n-    pub fn new(hash: u64) -> Svh {\n+    pub fn new(hash: Fingerprint) -> Svh {\n         Svh { hash }\n     }\n \n     pub fn as_u64(&self) -> u64 {\n-        self.hash\n+        self.hash.to_smaller_hash()\n     }\n \n     pub fn to_string(&self) -> String {\n-        format!(\"{:016x}\", self.hash)\n-    }\n-}\n-\n-impl Hash for Svh {\n-    fn hash<H>(&self, state: &mut H)\n-    where\n-        H: Hasher,\n-    {\n-        self.hash.to_le().hash(state);\n+        format!(\"{:016x}\", self.hash.to_smaller_hash())\n     }\n }\n \n@@ -48,18 +38,6 @@ impl fmt::Display for Svh {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for Svh {\n-    fn encode(&self, s: &mut S) {\n-        s.emit_u64(self.as_u64().to_le());\n-    }\n-}\n-\n-impl<D: Decoder> Decodable<D> for Svh {\n-    fn decode(d: &mut D) -> Svh {\n-        Svh::new(u64::from_le(d.read_u64()))\n-    }\n-}\n-\n impl<T> stable_hasher::HashStable<T> for Svh {\n     #[inline]\n     fn hash_stable(&self, ctx: &mut T, hasher: &mut stable_hasher::StableHasher) {"}, {"sha": "64aff27744fd1f6cd99f4b755cb08fca0f067003", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "patch": "@@ -1199,7 +1199,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, _: LocalCrate) -> Svh {\n         stable_hasher.finish()\n     });\n \n-    Svh::new(crate_hash.to_smaller_hash())\n+    Svh::new(crate_hash)\n }\n \n fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {"}, {"sha": "8865ecf3e054a7ea64b74f89355d8215b5085909", "filename": "compiler/rustc_query_system/src/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "patch": "@@ -75,7 +75,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n             ref normalized_pos,\n         } = *self;\n \n-        (name_hash as u64).hash_stable(hcx, hasher);\n+        name_hash.hash_stable(hcx, hasher);\n \n         src_hash.hash_stable(hcx, hasher);\n "}, {"sha": "911d6902c981aa09ef37f8037aba3b62cd5332bb", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49122fb1ca87a6c3e3c22abb315fc75cfe8daed/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=e49122fb1ca87a6c3e3c22abb315fc75cfe8daed", "patch": "@@ -2160,9 +2160,7 @@ where\n         };\n \n         Hash::hash(&TAG_VALID_SPAN, hasher);\n-        // We truncate the stable ID hash and line and column numbers. The chances\n-        // of causing a collision this way should be minimal.\n-        Hash::hash(&(file.name_hash as u64), hasher);\n+        Hash::hash(&file.name_hash, hasher);\n \n         // Hash both the length and the end location (line/column) of a span. If we\n         // hash only the length, for example, then two otherwise equal spans with"}]}