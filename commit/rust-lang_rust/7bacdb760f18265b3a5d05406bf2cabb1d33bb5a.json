{"sha": "7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "node_id": "C_kwDOAAsO6NoAKDdiYWNkYjc2MGYxODI2NWIzYTVkMDU0MDZiZjJjYWJiMWQzM2JiNWE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-18T18:09:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:41:41Z"}, "message": "Add rendered_const table.", "tree": {"sha": "ccaa4583f665a0d2a6f1d1d27c18f2f6d8f507a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccaa4583f665a0d2a6f1d1d27c18f2f6d8f507a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "html_url": "https://github.com/rust-lang/rust/commit/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14", "html_url": "https://github.com/rust-lang/rust/commit/f8fd9733b600e5175fc6810b30f2e0e14e0aaf14"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "7071a0ee22a79400abcf8bca3f5bf0807735bd9f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "patch": "@@ -1193,7 +1193,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         let name = self.item_name(id);\n \n         let (kind, container, has_self) = match self.kind(id) {\n-            EntryKind::AssocConst(container, _) => (ty::AssocKind::Const, container, false),\n+            EntryKind::AssocConst(container) => (ty::AssocKind::Const, container, false),\n             EntryKind::AssocFn(data) => {\n                 let data = data.decode(self);\n                 (ty::AssocKind::Fn, data.container, data.has_self)\n@@ -1411,15 +1411,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))\n     }\n \n-    fn get_rendered_const(self, id: DefIndex) -> String {\n-        match self.kind(id) {\n-            EntryKind::AnonConst(data)\n-            | EntryKind::Const(data)\n-            | EntryKind::AssocConst(_, data) => data.decode(self).0,\n-            _ => bug!(),\n-        }\n-    }\n-\n     fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {\n         match self.kind(id) {\n             EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),"}, {"sha": "0a065dc19109885eacd7bd75535127eae37aed38", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "patch": "@@ -137,6 +137,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     impl_constness => { table }\n     coerce_unsized_info => { table }\n     mir_const_qualif => { table }\n+    rendered_const => { table }\n \n     trait_def => { cdata.get_trait_def(def_id.index, tcx.sess) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n@@ -154,7 +155,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generator_kind => { cdata.generator_kind(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     fn_arg_names => { cdata.get_fn_param_names(tcx, def_id.index) }\n-    rendered_const => { cdata.get_rendered_const(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }"}, {"sha": "fcb2f3acdd62f3768f8544749bf918f8c42b2c3b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "patch": "@@ -1188,13 +1188,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     &(&self.tcx.hir() as &dyn intravisit::Map<'_>),\n                     |s| s.print_trait_item(ast_item),\n                 );\n-                let rendered_const = self.lazy(RenderedConst(rendered));\n \n-                record!(self.tables.kind[def_id] <- EntryKind::AssocConst(\n-                    container,\n-                    rendered_const,\n-                ));\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocConst(container));\n                 record!(self.tables.mir_const_qualif[def_id] <- mir::ConstQualifs::default());\n+                record!(self.tables.rendered_const[def_id] <- rendered);\n             }\n             ty::AssocKind::Fn => {\n                 let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n@@ -1256,12 +1253,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ty::AssocKind::Const => {\n                 if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {\n                     let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);\n+                    let const_data = self.encode_rendered_const_for_body(body_id);\n \n-                    record!(self.tables.kind[def_id] <- EntryKind::AssocConst(\n-                        container,\n-                        self.encode_rendered_const_for_body(body_id))\n-                    );\n+                    record!(self.tables.kind[def_id] <- EntryKind::AssocConst(container));\n                     record!(self.tables.mir_const_qualif[def_id] <- qualifs);\n+                    record!(self.tables.rendered_const[def_id] <- const_data);\n                 } else {\n                     bug!()\n                 }\n@@ -1385,14 +1381,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {\n+    fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> String {\n         let hir = self.tcx.hir();\n         let body = hir.body(body_id);\n-        let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {\n+        rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {\n             s.print_expr(&body.value)\n-        });\n-        let rendered_const = &RenderedConst(rendered);\n-        self.lazy(rendered_const)\n+        })\n     }\n \n     fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {\n@@ -1407,8 +1401,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,\n             hir::ItemKind::Const(_, body_id) => {\n                 let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);\n+                let const_data = self.encode_rendered_const_for_body(body_id);\n                 record!(self.tables.mir_const_qualif[def_id] <- qualifs);\n-                EntryKind::Const(self.encode_rendered_const_for_body(body_id))\n+                record!(self.tables.rendered_const[def_id] <- const_data);\n+                EntryKind::Const\n             }\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 let data = FnData {\n@@ -1604,8 +1600,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let const_data = self.encode_rendered_const_for_body(body_id);\n         let qualifs = self.tcx.mir_const_qualif(def_id);\n \n-        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(const_data));\n+        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst);\n         record!(self.tables.mir_const_qualif[def_id.to_def_id()] <- qualifs);\n+        record!(self.tables.rendered_const[def_id.to_def_id()] <- const_data);\n         self.encode_item_type(def_id.to_def_id());\n     }\n "}, {"sha": "c0cfcf3f702f4feccfaf44e7c75cb63044f12509", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bacdb760f18265b3a5d05406bf2cabb1d33bb5a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=7bacdb760f18265b3a5d05406bf2cabb1d33bb5a", "patch": "@@ -309,6 +309,7 @@ define_tables! {\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n     coerce_unsized_info: Table<DefIndex, Lazy!(ty::adjustment::CoerceUnsizedInfo)>,\n     mir_const_qualif: Table<DefIndex, Lazy!(mir::ConstQualifs)>,\n+    rendered_const: Table<DefIndex, Lazy!(String)>,\n \n     trait_item_def_id: Table<DefIndex, Lazy<DefId>>,\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n@@ -325,8 +326,8 @@ define_tables! {\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]\n enum EntryKind {\n-    AnonConst(Lazy<RenderedConst>),\n-    Const(Lazy<RenderedConst>),\n+    AnonConst,\n+    Const,\n     ImmStatic,\n     MutStatic,\n     ForeignImmStatic,\n@@ -354,15 +355,10 @@ enum EntryKind {\n     Impl,\n     AssocFn(Lazy<AssocFnData>),\n     AssocType(AssocContainer),\n-    AssocConst(AssocContainer, Lazy<RenderedConst>),\n+    AssocConst(AssocContainer),\n     TraitAlias,\n }\n \n-/// Contains a constant which has been rendered to a String.\n-/// Used by rustdoc.\n-#[derive(Encodable, Decodable)]\n-struct RenderedConst(String);\n-\n #[derive(MetadataEncodable, MetadataDecodable)]\n struct FnData {\n     asyncness: hir::IsAsync,"}]}