{"sha": "0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNWNiNzU3NjZmMzViZjViMGJlZjIxZGZjMTJjYzliZmYwYTA3MmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T17:00:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T17:00:10Z"}, "message": "rollup merge of #17250 : ahmedcharles/bitflags", "tree": {"sha": "a4f95ae981da858e3e78b1a4554c0768892dfdf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f95ae981da858e3e78b1a4554c0768892dfdf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f", "html_url": "https://github.com/rust-lang/rust/commit/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1686353650034e19e59c1415202f4f99e8b013cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1686353650034e19e59c1415202f4f99e8b013cf", "html_url": "https://github.com/rust-lang/rust/commit/1686353650034e19e59c1415202f4f99e8b013cf"}, {"sha": "0f6cbcaa883864343faf83f7b84119a731c6fc21", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6cbcaa883864343faf83f7b84119a731c6fc21", "html_url": "https://github.com/rust-lang/rust/commit/0f6cbcaa883864343faf83f7b84119a731c6fc21"}], "stats": {"total": 79, "additions": 36, "deletions": 43}, "files": [{"sha": "d7785d5b79c6819994ea0b4e3abe42752af3c5bf", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f", "patch": "@@ -191,21 +191,13 @@ pub fn decl_fn(ccx: &CrateContext, name: &str, cc: llvm::CallConv,\n     match ty::get(output).sty {\n         // functions returning bottom may unwind, but can never return normally\n         ty::ty_bot => {\n-            unsafe {\n-                llvm::LLVMAddFunctionAttribute(llfn,\n-                                               llvm::FunctionIndex as c_uint,\n-                                               llvm::NoReturnAttribute as uint64_t)\n-            }\n+            llvm::SetFunctionAttribute(llfn, llvm::NoReturnAttribute)\n         }\n         _ => {}\n     }\n \n     if ccx.tcx().sess.opts.cg.no_redzone {\n-        unsafe {\n-            llvm::LLVMAddFunctionAttribute(llfn,\n-                                           llvm::FunctionIndex as c_uint,\n-                                           llvm::NoRedZoneAttribute as uint64_t)\n-        }\n+        llvm::SetFunctionAttribute(llfn, llvm::NoRedZoneAttribute)\n     }\n \n     llvm::SetFunctionCallConv(llfn, cc);"}, {"sha": "9cff7261806dd2bb389cf73470459cdb8006aed7", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f", "patch": "@@ -998,7 +998,7 @@ fn add_argument_attributes(tys: &ForeignTypes,\n \n     match tys.fn_ty.ret_ty.attr {\n         Some(attr) => unsafe {\n-            llvm::LLVMAddFunctionAttribute(llfn, i as c_uint, attr as u64);\n+            llvm::LLVMAddFunctionAttribute(llfn, i as c_uint, attr.bits() as u64);\n         },\n         None => {}\n     }\n@@ -1014,7 +1014,7 @@ fn add_argument_attributes(tys: &ForeignTypes,\n \n         match arg_ty.attr {\n             Some(attr) => unsafe {\n-                llvm::LLVMAddFunctionAttribute(llfn, i as c_uint, attr as u64);\n+                llvm::LLVMAddFunctionAttribute(llfn, i as c_uint, attr.bits() as u64);\n             },\n             None => ()\n         }"}, {"sha": "271b19826b661da72583a3a85f28c5cd8a84870b", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=0e5cb75766f35bf5b0bef21dfc12cc9bff0a072f", "patch": "@@ -91,34 +91,35 @@ pub enum DiagnosticSeverity {\n     Note,\n }\n \n-#[deriving(Clone)]\n-pub enum Attribute {\n-    ZExtAttribute = 1 << 0,\n-    SExtAttribute = 1 << 1,\n-    NoReturnAttribute = 1 << 2,\n-    InRegAttribute = 1 << 3,\n-    StructRetAttribute = 1 << 4,\n-    NoUnwindAttribute = 1 << 5,\n-    NoAliasAttribute = 1 << 6,\n-    ByValAttribute = 1 << 7,\n-    NestAttribute = 1 << 8,\n-    ReadNoneAttribute = 1 << 9,\n-    ReadOnlyAttribute = 1 << 10,\n-    NoInlineAttribute = 1 << 11,\n-    AlwaysInlineAttribute = 1 << 12,\n-    OptimizeForSizeAttribute = 1 << 13,\n-    StackProtectAttribute = 1 << 14,\n-    StackProtectReqAttribute = 1 << 15,\n-    AlignmentAttribute = 31 << 16,\n-    NoCaptureAttribute = 1 << 21,\n-    NoRedZoneAttribute = 1 << 22,\n-    NoImplicitFloatAttribute = 1 << 23,\n-    NakedAttribute = 1 << 24,\n-    InlineHintAttribute = 1 << 25,\n-    StackAttribute = 7 << 26,\n-    ReturnsTwiceAttribute = 1 << 29,\n-    UWTableAttribute = 1 << 30,\n-    NonLazyBindAttribute = 1 << 31,\n+bitflags! {\n+    flags Attribute : u32 {\n+        static ZExtAttribute = 1 << 0,\n+        static SExtAttribute = 1 << 1,\n+        static NoReturnAttribute = 1 << 2,\n+        static InRegAttribute = 1 << 3,\n+        static StructRetAttribute = 1 << 4,\n+        static NoUnwindAttribute = 1 << 5,\n+        static NoAliasAttribute = 1 << 6,\n+        static ByValAttribute = 1 << 7,\n+        static NestAttribute = 1 << 8,\n+        static ReadNoneAttribute = 1 << 9,\n+        static ReadOnlyAttribute = 1 << 10,\n+        static NoInlineAttribute = 1 << 11,\n+        static AlwaysInlineAttribute = 1 << 12,\n+        static OptimizeForSizeAttribute = 1 << 13,\n+        static StackProtectAttribute = 1 << 14,\n+        static StackProtectReqAttribute = 1 << 15,\n+        static AlignmentAttribute = 31 << 16,\n+        static NoCaptureAttribute = 1 << 21,\n+        static NoRedZoneAttribute = 1 << 22,\n+        static NoImplicitFloatAttribute = 1 << 23,\n+        static NakedAttribute = 1 << 24,\n+        static InlineHintAttribute = 1 << 25,\n+        static StackAttribute = 7 << 26,\n+        static ReturnsTwiceAttribute = 1 << 29,\n+        static UWTableAttribute = 1 << 30,\n+        static NonLazyBindAttribute = 1 << 31,\n+    }\n }\n \n #[repr(u64)]\n@@ -160,13 +161,13 @@ trait AttrHelper {\n impl AttrHelper for Attribute {\n     fn apply_llfn(&self, idx: c_uint, llfn: ValueRef) {\n         unsafe {\n-            LLVMAddFunctionAttribute(llfn, idx, *self as uint64_t);\n+            LLVMAddFunctionAttribute(llfn, idx, self.bits() as uint64_t);\n         }\n     }\n \n     fn apply_callsite(&self, idx: c_uint, callsite: ValueRef) {\n         unsafe {\n-            LLVMAddCallSiteAttribute(callsite, idx, *self as uint64_t);\n+            LLVMAddCallSiteAttribute(callsite, idx, self.bits() as uint64_t);\n         }\n     }\n }\n@@ -2009,7 +2010,7 @@ pub fn ConstFCmp(pred: RealPredicate, v1: ValueRef, v2: ValueRef) -> ValueRef {\n \n pub fn SetFunctionAttribute(fn_: ValueRef, attr: Attribute) {\n     unsafe {\n-        LLVMAddFunctionAttribute(fn_, FunctionIndex as c_uint, attr as uint64_t)\n+        LLVMAddFunctionAttribute(fn_, FunctionIndex as c_uint, attr.bits() as uint64_t)\n     }\n }\n "}]}