{"sha": "e33d8707c8ed516fd798c835acf7e1567293cf9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzM2Q4NzA3YzhlZDUxNmZkNzk4YzgzNWFjZjdlMTU2NzI5M2NmOWE=", "commit": {"author": {"name": "Phosphorus15", "email": "steepout@qq.com", "date": "2019-08-20T07:12:41Z"}, "committer": {"name": "Phosphorus15", "email": "steepout@qq.com", "date": "2019-08-20T07:12:41Z"}, "message": "Refined implementations of `asinh` and `acosh`", "tree": {"sha": "bec8ae8b48bb034cf890873f98ede69cab7d6e6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec8ae8b48bb034cf890873f98ede69cab7d6e6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33d8707c8ed516fd798c835acf7e1567293cf9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33d8707c8ed516fd798c835acf7e1567293cf9a", "html_url": "https://github.com/rust-lang/rust/commit/e33d8707c8ed516fd798c835acf7e1567293cf9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33d8707c8ed516fd798c835acf7e1567293cf9a/comments", "author": {"login": "Phosphorus15", "id": 15113098, "node_id": "MDQ6VXNlcjE1MTEzMDk4", "avatar_url": "https://avatars.githubusercontent.com/u/15113098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phosphorus15", "html_url": "https://github.com/Phosphorus15", "followers_url": "https://api.github.com/users/Phosphorus15/followers", "following_url": "https://api.github.com/users/Phosphorus15/following{/other_user}", "gists_url": "https://api.github.com/users/Phosphorus15/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phosphorus15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phosphorus15/subscriptions", "organizations_url": "https://api.github.com/users/Phosphorus15/orgs", "repos_url": "https://api.github.com/users/Phosphorus15/repos", "events_url": "https://api.github.com/users/Phosphorus15/events{/privacy}", "received_events_url": "https://api.github.com/users/Phosphorus15/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Phosphorus15", "id": 15113098, "node_id": "MDQ6VXNlcjE1MTEzMDk4", "avatar_url": "https://avatars.githubusercontent.com/u/15113098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phosphorus15", "html_url": "https://github.com/Phosphorus15", "followers_url": "https://api.github.com/users/Phosphorus15/followers", "following_url": "https://api.github.com/users/Phosphorus15/following{/other_user}", "gists_url": "https://api.github.com/users/Phosphorus15/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phosphorus15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phosphorus15/subscriptions", "organizations_url": "https://api.github.com/users/Phosphorus15/orgs", "repos_url": "https://api.github.com/users/Phosphorus15/repos", "events_url": "https://api.github.com/users/Phosphorus15/events{/privacy}", "received_events_url": "https://api.github.com/users/Phosphorus15/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535efa4afd3bb5a141eae8579f54aa641ccedaa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/535efa4afd3bb5a141eae8579f54aa641ccedaa2", "html_url": "https://github.com/rust-lang/rust/commit/535efa4afd3bb5a141eae8579f54aa641ccedaa2"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "f8f38cb75ab77b39523aec0f6703ad00fd23753d", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e33d8707c8ed516fd798c835acf7e1567293cf9a/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33d8707c8ed516fd798c835acf7e1567293cf9a/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=e33d8707c8ed516fd798c835acf7e1567293cf9a", "patch": "@@ -908,9 +908,10 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f32 {\n-        match self {\n-            x if x == NEG_INFINITY => NEG_INFINITY,\n-            x => (x + ((x * x) + 1.0).sqrt()).ln().copysign(self)\n+        if self == NEG_INFINITY {\n+            NEG_INFINITY\n+        } else {\n+            (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n     }\n \n@@ -931,9 +932,10 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f32 {\n-        match self {\n-            x if x < 1.0 => crate::f32::NAN,\n-            x => (x + ((x * x) - 1.0).sqrt()).ln(),\n+        if self < 1.0 {\n+            crate::f32::NAN\n+        } else {\n+            (self + ((self * self) - 1.0).sqrt()).ln()\n         }\n     }\n "}, {"sha": "06f68bc72e764819d1146b6e623787c89b98c8ca", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e33d8707c8ed516fd798c835acf7e1567293cf9a/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33d8707c8ed516fd798c835acf7e1567293cf9a/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=e33d8707c8ed516fd798c835acf7e1567293cf9a", "patch": "@@ -244,7 +244,7 @@ impl f64 {\n     pub fn div_euclid(self, rhs: f64) -> f64 {\n         let q = (self / rhs).trunc();\n         if self % rhs < 0.0 {\n-            return if rhs > 0.0 { q - 1.0 } else { q + 1.0 }\n+            return if rhs > 0.0 { q - 1.0 } else { q + 1.0 };\n         }\n         q\n     }\n@@ -437,9 +437,9 @@ impl f64 {\n     pub fn log2(self) -> f64 {\n         self.log_wrapper(|n| {\n             #[cfg(target_os = \"android\")]\n-            return crate::sys::android::log2f64(n);\n+                return crate::sys::android::log2f64(n);\n             #[cfg(not(target_os = \"android\"))]\n-            return unsafe { intrinsics::log2f64(n) };\n+                return unsafe { intrinsics::log2f64(n) };\n         })\n     }\n \n@@ -481,16 +481,16 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     #[rustc_deprecated(since = \"1.10.0\",\n-                       reason = \"you probably meant `(self - other).abs()`: \\\n+    reason = \"you probably meant `(self - other).abs()`: \\\n                                  this operation is `(self - other).max(0.0)` \\\n                                  except that `abs_sub` also propagates NaNs (also \\\n                                  known as `fdim` in C). If you truly need the positive \\\n                                  difference, consider using that expression or the C function \\\n                                  `fdim`, depending on how you wish to handle NaN (please consider \\\n                                  filing an issue describing your use-case too).\")]\n-     pub fn abs_sub(self, other: f64) -> f64 {\n-         unsafe { cmath::fdim(self, other) }\n-     }\n+    pub fn abs_sub(self, other: f64) -> f64 {\n+        unsafe { cmath::fdim(self, other) }\n+    }\n \n     /// Takes the cubic root of a number.\n     ///\n@@ -831,9 +831,10 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f64 {\n-        match self {\n-            x if x == NEG_INFINITY => NEG_INFINITY,\n-            x => (x + ((x * x) + 1.0).sqrt()).ln().copysign(self)\n+        if self == NEG_INFINITY {\n+            NEG_INFINITY\n+        } else {\n+            (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n     }\n \n@@ -852,9 +853,10 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f64 {\n-        match self {\n-            x if x < 1.0 => NAN,\n-            x => (x + ((x * x) - 1.0).sqrt()).ln(),\n+        if self < 1.0 {\n+            NAN\n+        } else {\n+            (self + ((self * self) - 1.0).sqrt()).ln()\n         }\n     }\n \n@@ -1187,7 +1189,7 @@ mod tests {\n         assert_eq!((-0f64).abs(), 0f64);\n         assert_eq!((-1f64).abs(), 1f64);\n         assert_eq!(NEG_INFINITY.abs(), INFINITY);\n-        assert_eq!((1f64/NEG_INFINITY).abs(), 0f64);\n+        assert_eq!((1f64 / NEG_INFINITY).abs(), 0f64);\n         assert!(NAN.abs().is_nan());\n     }\n \n@@ -1199,7 +1201,7 @@ mod tests {\n         assert_eq!((-0f64).signum(), -1f64);\n         assert_eq!((-1f64).signum(), -1f64);\n         assert_eq!(NEG_INFINITY.signum(), -1f64);\n-        assert_eq!((1f64/NEG_INFINITY).signum(), -1f64);\n+        assert_eq!((1f64 / NEG_INFINITY).signum(), -1f64);\n         assert!(NAN.signum().is_nan());\n     }\n \n@@ -1211,7 +1213,7 @@ mod tests {\n         assert!(!(-0f64).is_sign_positive());\n         assert!(!(-1f64).is_sign_positive());\n         assert!(!NEG_INFINITY.is_sign_positive());\n-        assert!(!(1f64/NEG_INFINITY).is_sign_positive());\n+        assert!(!(1f64 / NEG_INFINITY).is_sign_positive());\n         assert!(NAN.is_sign_positive());\n         assert!(!(-NAN).is_sign_positive());\n     }\n@@ -1224,7 +1226,7 @@ mod tests {\n         assert!((-0f64).is_sign_negative());\n         assert!((-1f64).is_sign_negative());\n         assert!(NEG_INFINITY.is_sign_negative());\n-        assert!((1f64/NEG_INFINITY).is_sign_negative());\n+        assert!((1f64 / NEG_INFINITY).is_sign_negative());\n         assert!(!NAN.is_sign_negative());\n         assert!((-NAN).is_sign_negative());\n     }\n@@ -1433,7 +1435,8 @@ mod tests {\n         assert_eq!(inf.asinh(), inf);\n         assert_eq!(neg_inf.asinh(), neg_inf);\n         assert!(nan.asinh().is_nan());\n-        assert!((-0.0f64).asinh().is_sign_negative()); // issue 63271\n+        assert!((-0.0f64).asinh().is_sign_negative());\n+        // issue 63271\n         assert_approx_eq!(2.0f64.asinh(), 1.443635475178810342493276740273105f64);\n         assert_approx_eq!((-2.0f64).asinh(), -1.443635475178810342493276740273105f64);\n     }"}]}