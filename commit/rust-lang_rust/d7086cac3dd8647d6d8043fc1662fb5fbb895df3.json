{"sha": "d7086cac3dd8647d6d8043fc1662fb5fbb895df3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDg2Y2FjM2RkODY0N2Q2ZDgwNDNmYzE2NjJmYjVmYmI4OTVkZjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-05-22T20:29:28Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-05-22T20:29:28Z"}, "message": "Fix span for type-only arguments", "tree": {"sha": "05223b631a90eaa0cde6ea8819a5a2a1c52515c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05223b631a90eaa0cde6ea8819a5a2a1c52515c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7086cac3dd8647d6d8043fc1662fb5fbb895df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7086cac3dd8647d6d8043fc1662fb5fbb895df3", "html_url": "https://github.com/rust-lang/rust/commit/d7086cac3dd8647d6d8043fc1662fb5fbb895df3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7086cac3dd8647d6d8043fc1662fb5fbb895df3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe63e479d1f6e3122b61f86f5117eac981b071f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe63e479d1f6e3122b61f86f5117eac981b071f2", "html_url": "https://github.com/rust-lang/rust/commit/fe63e479d1f6e3122b61f86f5117eac981b071f2"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "15ae0198e6811ca31e2bbaf989f1548238fc49e9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d7086cac3dd8647d6d8043fc1662fb5fbb895df3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7086cac3dd8647d6d8043fc1662fb5fbb895df3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d7086cac3dd8647d6d8043fc1662fb5fbb895df3", "patch": "@@ -1761,27 +1761,27 @@ impl<'a> Parser<'a> {\n     pub fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n-        let pat = if require_name || self.is_named_argument() {\n+        let (pat, ty) = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n             let pat = self.parse_pat()?;\n \n             self.expect(&token::Colon)?;\n-            pat\n+            (pat, self.parse_ty()?)\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n             let ident = Ident::new(keywords::Invalid.name(), self.prev_span);\n-            P(Pat {\n+            let ty = self.parse_ty()?;\n+            let pat = P(Pat {\n                 id: ast::DUMMY_NODE_ID,\n                 node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None),\n-                span: ident.span,\n-            })\n+                span: ty.span,\n+            });\n+            (pat, ty)\n         };\n \n-        let t = self.parse_ty()?;\n-\n         Ok(Arg {\n-            ty: t,\n+            ty,\n             pat,\n             id: ast::DUMMY_NODE_ID,\n         })"}]}