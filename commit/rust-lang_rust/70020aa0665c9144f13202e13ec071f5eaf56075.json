{"sha": "70020aa0665c9144f13202e13ec071f5eaf56075", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMDIwYWEwNjY1YzkxNDRmMTMyMDJlMTNlYzA3MWY1ZWFmNTYwNzU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-01T05:42:15Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-01T14:50:18Z"}, "message": "Rollup merge of #24981 - carols10cents:remove-more-priv, r=alexcrichton\n\nHi! While researching stuff for the reference and the grammar, I came across a few mentions of using the `priv` keyword that was removed in 0.11.0 (#13547, #8122, rust-lang/rfcs#26, [RFC 0026](https://github.com/rust-lang/rfcs/blob/master/text/0026-remove-priv.md)).\n\nOne occurrence is a mention in the reference, a few are in comments, and a few are marking test functions. I left the test that makes sure you can't name an ident `priv` since it's still a reserved keyword. I did a little grepping around for `priv `, priv in backticks, `Private` etc and I think the remaining instances are fine, but if anyone knows anywhere in particular I should check for any other lingering mentions of `priv`, please let me know and I would be happy to! :fallen_leaf: :ocean:", "tree": {"sha": "192b47cc1faaa1d6260f943567645ebc1dfec876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/192b47cc1faaa1d6260f943567645ebc1dfec876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70020aa0665c9144f13202e13ec071f5eaf56075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70020aa0665c9144f13202e13ec071f5eaf56075", "html_url": "https://github.com/rust-lang/rust/commit/70020aa0665c9144f13202e13ec071f5eaf56075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70020aa0665c9144f13202e13ec071f5eaf56075/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aecf3d8b659c1f5bc457a5a146357ba484e27346", "url": "https://api.github.com/repos/rust-lang/rust/commits/aecf3d8b659c1f5bc457a5a146357ba484e27346", "html_url": "https://github.com/rust-lang/rust/commit/aecf3d8b659c1f5bc457a5a146357ba484e27346"}, {"sha": "2fdd1b01987314c0b0fc27a3a572d452c0b29ab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdd1b01987314c0b0fc27a3a572d452c0b29ab1", "html_url": "https://github.com/rust-lang/rust/commit/2fdd1b01987314c0b0fc27a3a572d452c0b29ab1"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "6be67fc51447e75060f1b5775b19be48d5d12a6a", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70020aa0665c9144f13202e13ec071f5eaf56075/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/70020aa0665c9144f13202e13ec071f5eaf56075/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=70020aa0665c9144f13202e13ec071f5eaf56075", "patch": "@@ -1557,8 +1557,7 @@ warnings are generated, or otherwise \"you used a private item of another module\n and weren't allowed to.\"\n \n By default, everything in Rust is *private*, with one exception. Enum variants\n-in a `pub` enum are also public by default. You are allowed to alter this\n-default visibility with the `priv` keyword. When an item is declared as `pub`,\n+in a `pub` enum are also public by default. When an item is declared as `pub`,\n it can be thought of as being accessible to the outside world. For example:\n \n ```"}, {"sha": "014991f7ea560e377aeb751014bb65e05e67fb1d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70020aa0665c9144f13202e13ec071f5eaf56075/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70020aa0665c9144f13202e13ec071f5eaf56075/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=70020aa0665c9144f13202e13ec071f5eaf56075", "patch": "@@ -899,7 +899,7 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n                 if let ast::MethodImplItem(ref sig, _) = ii.node {\n                     // if the method specifies a visibility, use that, otherwise\n                     // inherit the visibility from the impl (so `foo` in `pub impl\n-                    // { fn foo(); }` is public, but private in `priv impl { fn\n+                    // { fn foo(); }` is public, but private in `impl { fn\n                     // foo(); }`).\n                     let method_vis = ii.vis.inherit_from(parent_visibility);\n                     Some((sig, ii.id, ii.ident, method_vis, ii.span))"}, {"sha": "a7b1beace51d31de0ccb7473d39640a33504e164", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70020aa0665c9144f13202e13ec071f5eaf56075/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70020aa0665c9144f13202e13ec071f5eaf56075/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=70020aa0665c9144f13202e13ec071f5eaf56075", "patch": "@@ -4775,7 +4775,7 @@ impl<'a> Parser<'a> {\n         return self.parse_single_struct_field(Inherited, attrs);\n     }\n \n-    /// Parse visibility: PUB, PRIV, or nothing\n+    /// Parse visibility: PUB or nothing\n     fn parse_visibility(&mut self) -> PResult<Visibility> {\n         if try!(self.eat_keyword(keywords::Pub)) { Ok(Public) }\n         else { Ok(Inherited) }"}, {"sha": "c9b684fd656940a8db975ef9758ff3eda5b35aca", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70020aa0665c9144f13202e13ec071f5eaf56075/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70020aa0665c9144f13202e13ec071f5eaf56075/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=70020aa0665c9144f13202e13ec071f5eaf56075", "patch": "@@ -28,7 +28,7 @@ enum Result {\n   Status(String)\n }\n \n-priv fn parse_data(len: usize, io: @io::Reader) -> Result {\n+fn parse_data(len: usize, io: @io::Reader) -> Result {\n   let res =\n       if (len > 0) {\n       let bytes = io.read_bytes(len as usize);\n@@ -42,7 +42,7 @@ priv fn parse_data(len: usize, io: @io::Reader) -> Result {\n   return res;\n }\n \n-priv fn parse_list(len: usize, io: @io::Reader) -> Result {\n+fn parse_list(len: usize, io: @io::Reader) -> Result {\n     let mut list: ~[Result] = ~[];\n     for _ in 0..len {\n         let v = match io.read_char() {\n@@ -55,11 +55,11 @@ priv fn parse_list(len: usize, io: @io::Reader) -> Result {\n     return List(list);\n }\n \n-priv fn chop(s: String) -> String {\n+fn chop(s: String) -> String {\n   s.slice(0, s.len() - 1).to_string()\n }\n \n-priv fn parse_bulk(io: @io::Reader) -> Result {\n+fn parse_bulk(io: @io::Reader) -> Result {\n     match from_str::<isize>(chop(io.read_line())) {\n     None => panic!(),\n     Some(-1) => Nil,\n@@ -68,7 +68,7 @@ priv fn parse_bulk(io: @io::Reader) -> Result {\n     }\n }\n \n-priv fn parse_multi(io: @io::Reader) -> Result {\n+fn parse_multi(io: @io::Reader) -> Result {\n     match from_str::<isize>(chop(io.read_line())) {\n     None => panic!(),\n     Some(-1) => Nil,\n@@ -78,14 +78,14 @@ priv fn parse_multi(io: @io::Reader) -> Result {\n     }\n }\n \n-priv fn parse_int(io: @io::Reader) -> Result {\n+fn parse_int(io: @io::Reader) -> Result {\n     match from_str::<isize>(chop(io.read_line())) {\n     None => panic!(),\n     Some(i) => Int(i)\n     }\n }\n \n-priv fn parse_response(io: @io::Reader) -> Result {\n+fn parse_response(io: @io::Reader) -> Result {\n     match io.read_char() {\n     '$' => parse_bulk(io),\n     '*' => parse_multi(io),\n@@ -96,7 +96,7 @@ priv fn parse_response(io: @io::Reader) -> Result {\n     }\n }\n \n-priv fn cmd_to_string(cmd: ~[String]) -> String {\n+fn cmd_to_string(cmd: ~[String]) -> String {\n   let mut res = \"*\".to_string();\n   res.push_str(cmd.len().to_string());\n   res.push_str(\"\\r\\n\");"}]}