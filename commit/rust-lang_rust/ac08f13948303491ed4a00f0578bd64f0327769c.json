{"sha": "ac08f13948303491ed4a00f0578bd64f0327769c", "node_id": "C_kwDOAAsO6NoAKGFjMDhmMTM5NDgzMDM0OTFlZDRhMDBmMDU3OGJkNjRmMDMyNzc2OWM", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2021-12-13T08:19:59Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2021-12-13T15:11:28Z"}, "message": "Remove sort from hashing hashset, treeset and treemap", "tree": {"sha": "e8812cc44a640316c52ada40d630209f05e6983e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8812cc44a640316c52ada40d630209f05e6983e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac08f13948303491ed4a00f0578bd64f0327769c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmG3YqAACgkQ28VT5UDC\n9hnMbwv/eWEKKaue11f2OaIPBHhO2c3tF0b37VOHync2ISpt2s9VPwXs3TUSb444\nD7gFTHnmWOKxfO4w5JIzgOVRxLwV1qjVKR3tIjTkvXo9kZAzU08+GB0M5vyaIT7o\nEqzoTubzedIofyHhJ+5S3Q221DuwHLSw88M78oNTagaZ/Y1jC7oasW632pU3ZeXL\nN4ue+j48iSnFOwNUVsxVEpU4CoUBbwYtEHm8CHouB+ZKQ0n+SLdz+SQaH99AFIJY\niuy5iU4yfil8TcMgS2d5XVwdtVzGvj+6l82FkAOXtBWpKVY3ACKfQ8RzBxREkEn/\nyLudTXg8Xy5khyOyStP9i5kKyCiJ5oDWk81WKpce4tJX9qNOc37chzs0vrzAsmmB\nGmKKUqO2bILjNHbK0lA+PX6doEFQVJeS9N6jqgd8Taf175UVfw1hvnfkLOHe20/G\nfI2oCMwEpja7aq4TOoQrS3lJvXddNillnmx9yqZGHP1WxG5pf7PimRfIYSR61sXc\n/jDDqv01\n=caG4\n-----END PGP SIGNATURE-----", "payload": "tree e8812cc44a640316c52ada40d630209f05e6983e\nparent 6e33d3ecc26f294c275b55fe02a33645e252f81a\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1639383599 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1639408288 +0100\n\nRemove sort from hashing hashset, treeset and treemap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac08f13948303491ed4a00f0578bd64f0327769c", "html_url": "https://github.com/rust-lang/rust/commit/ac08f13948303491ed4a00f0578bd64f0327769c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac08f13948303491ed4a00f0578bd64f0327769c/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e33d3ecc26f294c275b55fe02a33645e252f81a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e33d3ecc26f294c275b55fe02a33645e252f81a", "html_url": "https://github.com/rust-lang/rust/commit/6e33d3ecc26f294c275b55fe02a33645e252f81a"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "f37cf76c32bdeba28e96924afb5682fb92745f17", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ac08f13948303491ed4a00f0578bd64f0327769c/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac08f13948303491ed4a00f0578bd64f0327769c/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=ac08f13948303491ed4a00f0578bd64f0327769c", "patch": "@@ -503,13 +503,17 @@ impl_stable_hash_via_hash!(::std::path::PathBuf);\n \n impl<K, V, R, HCX> HashStable<HCX> for ::std::collections::HashMap<K, V, R>\n where\n-    K: HashStable<HCX> + ToStableHashKey<HCX> + Eq,\n+    K: ToStableHashKey<HCX> + Eq,\n     V: HashStable<HCX>,\n     R: BuildHasher,\n {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        hash_stable_hashmap(hcx, hasher, self, ToStableHashKey::to_stable_hash_key);\n+        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, (key, value)| {\n+            let key = key.to_stable_hash_key(hcx);\n+            key.hash_stable(hcx, hasher);\n+            value.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n@@ -519,9 +523,10 @@ where\n     R: BuildHasher,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        let mut keys: Vec<_> = self.iter().map(|k| k.to_stable_hash_key(hcx)).collect();\n-        keys.sort_unstable();\n-        keys.hash_stable(hcx, hasher);\n+        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, key| {\n+            let key = key.to_stable_hash_key(hcx);\n+            key.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n@@ -531,10 +536,11 @@ where\n     V: HashStable<HCX>,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        let mut entries: Vec<_> =\n-            self.iter().map(|(k, v)| (k.to_stable_hash_key(hcx), v)).collect();\n-        entries.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n-        entries.hash_stable(hcx, hasher);\n+        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, (key, value)| {\n+            let key = key.to_stable_hash_key(hcx);\n+            key.hash_stable(hcx, hasher);\n+            value.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n@@ -543,34 +549,30 @@ where\n     K: ToStableHashKey<HCX>,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        let mut keys: Vec<_> = self.iter().map(|k| k.to_stable_hash_key(hcx)).collect();\n-        keys.sort_unstable();\n-        keys.hash_stable(hcx, hasher);\n+        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, key| {\n+            let key = key.to_stable_hash_key(hcx);\n+            key.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n-pub fn hash_stable_hashmap<HCX, K, V, R, SK, F>(\n+fn stable_hash_reduce<HCX, I, C, F>(\n     hcx: &mut HCX,\n     hasher: &mut StableHasher,\n-    map: &::std::collections::HashMap<K, V, R>,\n-    to_stable_hash_key: F,\n+    collection: C,\n+    length: usize,\n+    hash_function: F,\n ) where\n-    K: Eq + HashStable<HCX>,\n-    V: HashStable<HCX>,\n-    R: BuildHasher,\n-    SK: HashStable<HCX> + Ord,\n-    F: Fn(&K, &HCX) -> SK,\n+    C: Iterator<Item = I>,\n+    F: Fn(&mut StableHasher, &mut HCX, I),\n {\n-    let hash = map\n-        .iter()\n-        .map(|(key, value)| {\n-            let key = to_stable_hash_key(key, hcx);\n+    let hash = collection\n+        .map(|value| {\n             let mut hasher = StableHasher::new();\n-            key.hash_stable(hcx, &mut hasher);\n-            value.hash_stable(hcx, &mut hasher);\n+            hash_function(&mut hasher, hcx, value);\n             hasher.finish::<u128>()\n         })\n         .reduce(|accum, value| accum.wrapping_add(value));\n-    map.len().hash_stable(hcx, hasher);\n+    length.hash_stable(hcx, hasher);\n     hash.hash_stable(hcx, hasher);\n }"}]}