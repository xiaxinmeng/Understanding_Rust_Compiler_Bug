{"sha": "95337a29789ee856367d52266dea876fb45bafcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MzM3YTI5Nzg5ZWU4NTYzNjdkNTIyNjZkZWE4NzZmYjQ1YmFmY2Y=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:27:44Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:36:10Z"}, "message": "Add missing lifetime intrinsics in a few places", "tree": {"sha": "5e4437750af9df41b71fba00ba93c01765d75b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4437750af9df41b71fba00ba93c01765d75b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95337a29789ee856367d52266dea876fb45bafcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95337a29789ee856367d52266dea876fb45bafcf", "html_url": "https://github.com/rust-lang/rust/commit/95337a29789ee856367d52266dea876fb45bafcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95337a29789ee856367d52266dea876fb45bafcf/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c512dc52b6ddea8137e3e44effee7f140ed1f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c512dc52b6ddea8137e3e44effee7f140ed1f53", "html_url": "https://github.com/rust-lang/rust/commit/6c512dc52b6ddea8137e3e44effee7f140ed1f53"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "d226bc3f155df10c8b33e18bcbe3a86bffa9422e", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95337a29789ee856367d52266dea876fb45bafcf/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95337a29789ee856367d52266dea876fb45bafcf/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=95337a29789ee856367d52266dea876fb45bafcf", "patch": "@@ -730,8 +730,9 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n                         let prev_bcx = self.new_block(true, \"resume\", None);\n                         let personality = self.personality.get().expect(\n                             \"create_landing_pad() should have set this\");\n-                        build::Resume(prev_bcx,\n-                                      build::Load(prev_bcx, personality));\n+                        let lp = build::Load(prev_bcx, personality);\n+                        base::call_lifetime_end(prev_bcx, personality);\n+                        build::Resume(prev_bcx, lp);\n                         prev_llbb = prev_bcx.llbb;\n                         break;\n                     }"}, {"sha": "fa4151348fde24af4b04598bbfd80d1e27b30b1f", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95337a29789ee856367d52266dea876fb45bafcf/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95337a29789ee856367d52266dea876fb45bafcf/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=95337a29789ee856367d52266dea876fb45bafcf", "patch": "@@ -432,6 +432,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // - Truncating foreign type to correct integral type and then\n             //   bitcasting to the struct type yields invalid cast errors.\n             let llscratch = base::alloca(bcx, llforeign_ret_ty, \"__cast\");\n+            base::call_lifetime_start(bcx, llscratch);\n             Store(bcx, llforeign_retval, llscratch);\n             let llscratch_i8 = BitCast(bcx, llscratch, Type::i8(ccx).ptr_to());\n             let llretptr_i8 = BitCast(bcx, llretptr, Type::i8(ccx).ptr_to());\n@@ -442,6 +443,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             debug!(\"llrust_size={}\", llrust_size);\n             base::call_memcpy(bcx, llretptr_i8, llscratch_i8,\n                               C_uint(ccx, llrust_size), llalign as u32);\n+            base::call_lifetime_end(bcx, llscratch);\n         }\n     }\n "}, {"sha": "63ac662d4e3e307369d0e0939dee10492b0e8caa", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95337a29789ee856367d52266dea876fb45bafcf/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95337a29789ee856367d52266dea876fb45bafcf/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=95337a29789ee856367d52266dea876fb45bafcf", "patch": "@@ -190,7 +190,9 @@ pub fn drop_ty_immediate<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let vp = alloca(bcx, type_of(bcx.ccx(), t), \"\");\n     call_lifetime_start(bcx, vp);\n     store_ty(bcx, v, vp, t);\n-    drop_ty_core(bcx, vp, t, debug_loc, skip_dtor, None)\n+    let bcx = drop_ty_core(bcx, vp, t, debug_loc, skip_dtor, None);\n+    call_lifetime_end(bcx, vp);\n+    bcx\n }\n \n pub fn get_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> ValueRef {"}, {"sha": "aab22290efed4f2ce50328edb0d1ff66fb745af9", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95337a29789ee856367d52266dea876fb45bafcf/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95337a29789ee856367d52266dea876fb45bafcf/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=95337a29789ee856367d52266dea876fb45bafcf", "patch": "@@ -966,6 +966,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     match dest {\n         expr::Ignore => {\n             bcx = glue::drop_ty(bcx, llresult, ret_ty, call_debug_location);\n+            call_lifetime_end(bcx, llresult);\n         }\n         expr::SaveIn(_) => {}\n     }"}]}