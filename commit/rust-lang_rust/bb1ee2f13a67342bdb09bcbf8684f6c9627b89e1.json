{"sha": "bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMWVlMmYxM2E2NzM0MmJkYjA5YmNiZjg2ODRmNmM5NjI3Yjg5ZTE=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-21T23:01:16Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-21T23:01:16Z"}, "message": "Move the self handling from directly inside the loop", "tree": {"sha": "bc99c40e8247623f344cb59bdcb3a0a83323810a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc99c40e8247623f344cb59bdcb3a0a83323810a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1", "html_url": "https://github.com/rust-lang/rust/commit/bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d60215dacc3eeddeda4d6af7007e2129fdb00e", "html_url": "https://github.com/rust-lang/rust/commit/d8d60215dacc3eeddeda4d6af7007e2129fdb00e"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "e04d00900aa8b1de0976260288beeb5907e238ae", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=bb1ee2f13a67342bdb09bcbf8684f6c9627b89e1", "patch": "@@ -86,25 +86,22 @@ fn expand_use_tree(\n             },\n         };\n         for child_tree in use_tree_list.use_trees() {\n+            expand_use_tree(prefix.clone(), child_tree, cb);\n+        }\n+    } else {\n+        if let Some(ast_path) = tree.path() {\n             // Handle self in a path.\n             // E.g. `use something::{self, <...>}`\n-            if let Some(path) = child_tree.path() {\n-                if path.qualifier().is_none() {\n-                    if let Some(segment) = path.segment() {\n-                        if segment.kind() == Some(ast::PathSegmentKind::SelfKw) {\n-                            /* TODO: Work out what on earth range means in this callback */\n-                            if let Some(prefix) = prefix.clone() {\n-                                cb(prefix, Some(segment.syntax().range()));\n-                                continue;\n-                            }\n+            if ast_path.qualifier().is_none() {\n+                if let Some(segment) = ast_path.segment() {\n+                    if segment.kind() == Some(ast::PathSegmentKind::SelfKw) {\n+                        if let Some(prefix) = prefix {\n+                            cb(prefix, Some(segment.syntax().range()));\n+                            return;\n                         }\n                     }\n                 }\n             }\n-            expand_use_tree(prefix.clone(), child_tree, cb);\n-        }\n-    } else {\n-        if let Some(ast_path) = tree.path() {\n             if let Some(path) = convert_path(prefix, ast_path) {\n                 let range = if tree.has_star() {\n                     None\n@@ -114,6 +111,8 @@ fn expand_use_tree(\n                 };\n                 cb(path, range)\n             }\n+            // TODO: report errors somewhere\n+            // We get here if we do\n         }\n     }\n }"}]}