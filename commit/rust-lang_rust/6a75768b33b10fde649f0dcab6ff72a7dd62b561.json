{"sha": "6a75768b33b10fde649f0dcab6ff72a7dd62b561", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzU3NjhiMzNiMTBmZGU2NDlmMGRjYWI2ZmY3MmE3ZGQ2MmI1NjE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-29T16:11:11Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T11:31:10Z"}, "message": "rustc_codegen_ssa: clean up lifetimes on TerminatorCodegenHelper's methods.", "tree": {"sha": "25fabb34cdd5c9bfe85bd03cbb1e4c70ef22375a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fabb34cdd5c9bfe85bd03cbb1e4c70ef22375a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a75768b33b10fde649f0dcab6ff72a7dd62b561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a75768b33b10fde649f0dcab6ff72a7dd62b561", "html_url": "https://github.com/rust-lang/rust/commit/6a75768b33b10fde649f0dcab6ff72a7dd62b561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a75768b33b10fde649f0dcab6ff72a7dd62b561/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fce40a22569d31dcb20b4bc9505d835f12278d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/fce40a22569d31dcb20b4bc9505d835f12278d98", "html_url": "https://github.com/rust-lang/rust/commit/fce40a22569d31dcb20b4bc9505d835f12278d98"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "370c172f97fd159016c223e6c25b0b178ff2fb28", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a75768b33b10fde649f0dcab6ff72a7dd62b561/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a75768b33b10fde649f0dcab6ff72a7dd62b561/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=6a75768b33b10fde649f0dcab6ff72a7dd62b561", "patch": "@@ -30,23 +30,22 @@ struct TerminatorCodegenHelper<'tcx> {\n     funclet_bb: Option<mir::BasicBlock>,\n }\n \n-// FIXME(eddyb) clean up the lifetimes in this impl.\n-impl<'tcx> TerminatorCodegenHelper<'tcx> {\n+impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n     /// Returns the associated funclet from `FunctionCx::funclets` for the\n     /// `funclet_bb` member if it is not `None`.\n-    fn funclet<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn funclet<'b, Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n-    ) -> Option<&'c Bx::Funclet> {\n+        fx: &'b mut FunctionCx<'a, 'tcx, Bx>,\n+    ) -> Option<&'b Bx::Funclet> {\n         match self.funclet_bb {\n             Some(funcl) => fx.funclets[funcl].as_ref(),\n             None => None,\n         }\n     }\n \n-    fn lltarget<'b, 'c, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn lltarget<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n+        fx: &mut FunctionCx<'a, 'tcx, Bx>,\n         target: mir::BasicBlock,\n     ) -> (Bx::BasicBlock, bool) {\n         let span = self.terminator.source_info.span;\n@@ -64,9 +63,9 @@ impl<'tcx> TerminatorCodegenHelper<'tcx> {\n     }\n \n     /// Create a basic block.\n-    fn llblock<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn llblock<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n+        fx: &mut FunctionCx<'a, 'tcx, Bx>,\n         target: mir::BasicBlock,\n     ) -> Bx::BasicBlock {\n         let (lltarget, is_cleanupret) = self.lltarget(fx, target);\n@@ -84,9 +83,9 @@ impl<'tcx> TerminatorCodegenHelper<'tcx> {\n         }\n     }\n \n-    fn funclet_br<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn funclet_br<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n+        fx: &mut FunctionCx<'a, 'tcx, Bx>,\n         bx: &mut Bx,\n         target: mir::BasicBlock,\n     ) {\n@@ -102,9 +101,9 @@ impl<'tcx> TerminatorCodegenHelper<'tcx> {\n \n     /// Call `fn_ptr` of `fn_abi` with the arguments `llargs`, the optional\n     /// return destination `destination` and the cleanup function `cleanup`.\n-    fn do_call<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn do_call<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        fx: &'c mut FunctionCx<'b, 'tcx, Bx>,\n+        fx: &mut FunctionCx<'a, 'tcx, Bx>,\n         bx: &mut Bx,\n         fn_abi: FnAbi<'tcx, Ty<'tcx>>,\n         fn_ptr: Bx::Value,\n@@ -152,7 +151,7 @@ impl<'tcx> TerminatorCodegenHelper<'tcx> {\n \n     // Generate sideeffect intrinsic if jumping to any of the targets can form\n     // a loop.\n-    fn maybe_sideeffect<'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn maybe_sideeffect<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n         mir: mir::ReadOnlyBodyCache<'tcx, 'tcx>,\n         bx: &mut Bx,"}]}