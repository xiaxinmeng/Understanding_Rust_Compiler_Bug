{"sha": "666022730ffc40e2f4dc7802954b9c0a5697cf22", "node_id": "C_kwDOAAsO6NoAKDY2NjAyMjczMGZmYzQwZTJmNGRjNzgwMjk1NGI5YzBhNTY5N2NmMjI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-23T14:25:32Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-24T07:57:05Z"}, "message": "Instantiate constness in wfcheck", "tree": {"sha": "5da8dfb5583afee98431780e1cd15653b9d4a03c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5da8dfb5583afee98431780e1cd15653b9d4a03c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/666022730ffc40e2f4dc7802954b9c0a5697cf22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/666022730ffc40e2f4dc7802954b9c0a5697cf22", "html_url": "https://github.com/rust-lang/rust/commit/666022730ffc40e2f4dc7802954b9c0a5697cf22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/666022730ffc40e2f4dc7802954b9c0a5697cf22/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05bb26fdb6635508aaa75c26e593672a86d03084", "url": "https://api.github.com/repos/rust-lang/rust/commits/05bb26fdb6635508aaa75c26e593672a86d03084", "html_url": "https://github.com/rust-lang/rust/commit/05bb26fdb6635508aaa75c26e593672a86d03084"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "414857f0acc8096b4f938f9e6e3c85405ab06c91", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/666022730ffc40e2f4dc7802954b9c0a5697cf22/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666022730ffc40e2f4dc7802954b9c0a5697cf22/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=666022730ffc40e2f4dc7802954b9c0a5697cf22", "patch": "@@ -85,7 +85,7 @@ pub fn trait_obligations<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n-    trait_ref: &ty::TraitRef<'tcx>,\n+    trait_pred: &ty::TraitPredicate<'tcx>,\n     span: Span,\n     item: &'tcx hir::Item<'tcx>,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n@@ -98,7 +98,7 @@ pub fn trait_obligations<'a, 'tcx>(\n         recursion_depth: 0,\n         item: Some(item),\n     };\n-    wf.compute_trait_ref(trait_ref, Elaborate::All);\n+    wf.compute_trait_pred(trait_pred, Elaborate::All);\n     debug!(obligations = ?wf.out);\n     wf.normalize(infcx)\n }\n@@ -123,7 +123,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n     // It's ok to skip the binder here because wf code is prepared for it\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Trait(t) => {\n-            wf.compute_trait_ref(&t.trait_ref, Elaborate::None);\n+            wf.compute_trait_pred(&t, Elaborate::None);\n         }\n         ty::PredicateKind::RegionOutlives(..) => {}\n         ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _reg)) => {\n@@ -301,11 +301,18 @@ impl<'tcx> WfPredicates<'tcx> {\n     }\n \n     /// Pushes the obligations required for `trait_ref` to be WF into `self.out`.\n-    fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>, elaborate: Elaborate) {\n+    fn compute_trait_pred(&mut self, trait_pred: &ty::TraitPredicate<'tcx>, elaborate: Elaborate) {\n         let tcx = self.tcx;\n-        let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n+        let trait_ref = &trait_pred.trait_ref;\n \n-        debug!(\"compute_trait_ref obligations {:?}\", obligations);\n+        // if the trait predicate is not const, the wf obligations should not be const as well.\n+        let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n+            self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n+        } else {\n+            self.nominal_obligations(trait_ref.def_id, trait_ref.substs)\n+        };\n+\n+        debug!(\"compute_trait_pred obligations {:?}\", obligations);\n         let param_env = self.param_env;\n         let depth = self.recursion_depth;\n \n@@ -685,10 +692,11 @@ impl<'tcx> WfPredicates<'tcx> {\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn nominal_obligations(\n+    fn nominal_obligations_inner(\n         &mut self,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n+        remap_constness: bool,\n     ) -> Vec<traits::PredicateObligation<'tcx>> {\n         let predicates = self.tcx.predicates_of(def_id);\n         let mut origins = vec![def_id; predicates.predicates.len()];\n@@ -703,19 +711,38 @@ impl<'tcx> WfPredicates<'tcx> {\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n-            .map(|((pred, span), origin_def_id)| {\n+            .map(|((mut pred, span), origin_def_id)| {\n                 let code = if span.is_dummy() {\n                     traits::MiscObligation\n                 } else {\n                     traits::BindingObligation(origin_def_id, span)\n                 };\n                 let cause = self.cause(code);\n+                if remap_constness {\n+                    pred = pred.without_const(self.tcx);\n+                }\n                 traits::Obligation::with_depth(cause, self.recursion_depth, self.param_env, pred)\n             })\n             .filter(|pred| !pred.has_escaping_bound_vars())\n             .collect()\n     }\n \n+    fn nominal_obligations(\n+        &mut self,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Vec<traits::PredicateObligation<'tcx>> {\n+        self.nominal_obligations_inner(def_id, substs, false)\n+    }\n+\n+    fn nominal_obligations_without_const(\n+        &mut self,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Vec<traits::PredicateObligation<'tcx>> {\n+        self.nominal_obligations_inner(def_id, substs, true)\n+    }\n+\n     fn from_object_ty(\n         &mut self,\n         ty: Ty<'tcx>,"}, {"sha": "b8e998229ba8eba4e869169a1d119d0de23bdf43", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/666022730ffc40e2f4dc7802954b9c0a5697cf22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666022730ffc40e2f4dc7802954b9c0a5697cf22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=666022730ffc40e2f4dc7802954b9c0a5697cf22", "patch": "@@ -183,7 +183,7 @@ fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n             // We match on both `ty::ImplPolarity` and `ast::ImplPolarity` just to get the `!` span.\n             match (tcx.impl_polarity(def_id), impl_.polarity) {\n                 (ty::ImplPolarity::Positive, _) => {\n-                    check_impl(tcx, item, impl_.self_ty, &impl_.of_trait);\n+                    check_impl(tcx, item, impl_.self_ty, &impl_.of_trait, impl_.constness);\n                 }\n                 (ty::ImplPolarity::Negative, ast::ImplPolarity::Negative(span)) => {\n                     // FIXME(#27579): what amount of WF checking do we need for neg impls?\n@@ -1242,6 +1242,7 @@ fn check_impl<'tcx>(\n     item: &'tcx hir::Item<'tcx>,\n     ast_self_ty: &hir::Ty<'_>,\n     ast_trait_ref: &Option<hir::TraitRef<'_>>,\n+    constness: hir::Constness,\n ) {\n     enter_wf_checking_ctxt(tcx, item.span, item.def_id, |wfcx| {\n         match *ast_trait_ref {\n@@ -1251,11 +1252,19 @@ fn check_impl<'tcx>(\n                 // won't hold).\n                 let trait_ref = tcx.impl_trait_ref(item.def_id).unwrap();\n                 let trait_ref = wfcx.normalize(ast_trait_ref.path.span, None, trait_ref);\n+                let trait_pred = ty::TraitPredicate {\n+                    trait_ref,\n+                    constness: match constness {\n+                        hir::Constness::Const => ty::BoundConstness::ConstIfConst,\n+                        hir::Constness::NotConst => ty::BoundConstness::NotConst,\n+                    },\n+                    polarity: ty::ImplPolarity::Positive,\n+                };\n                 let obligations = traits::wf::trait_obligations(\n                     wfcx.infcx,\n                     wfcx.param_env,\n                     wfcx.body_id,\n-                    &trait_ref,\n+                    &trait_pred,\n                     ast_trait_ref.path.span,\n                     item,\n                 );"}]}