{"sha": "d5ff0e6422061c390a141354af8eacd540dca10b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZmYwZTY0MjIwNjFjMzkwYTE0MTM1NGFmOGVhY2Q1NDBkY2ExMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-10T01:40:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-10T01:40:21Z"}, "message": "Auto merge of #45773 - Badel2:dotdoteq, r=petrochenkov\n\nAdd error for `...` in expressions\n\nFollow-up to https://github.com/rust-lang/rust/pull/44709\nTracking issue: https://github.com/rust-lang/rust/issues/28237\n\n* Using `...` in expressions was a warning, now it's an error\n* The error message suggests using `..` or `..=` instead, and explains the difference\n* Updated remaining occurrences of `...` to `..=`\n\nr? petrochenkov", "tree": {"sha": "4ad997935d27db7d5a0dc758415f757d62fe12fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad997935d27db7d5a0dc758415f757d62fe12fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5ff0e6422061c390a141354af8eacd540dca10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ff0e6422061c390a141354af8eacd540dca10b", "html_url": "https://github.com/rust-lang/rust/commit/d5ff0e6422061c390a141354af8eacd540dca10b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5ff0e6422061c390a141354af8eacd540dca10b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1b0b239127ee379c5b3041240bc5ae247cf280", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1b0b239127ee379c5b3041240bc5ae247cf280", "html_url": "https://github.com/rust-lang/rust/commit/aa1b0b239127ee379c5b3041240bc5ae247cf280"}, {"sha": "b81a7b333abce1d5de85406947db5007d19730c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81a7b333abce1d5de85406947db5007d19730c4", "html_url": "https://github.com/rust-lang/rust/commit/b81a7b333abce1d5de85406947db5007d19730c4"}], "stats": {"total": 98, "additions": 69, "deletions": 29}, "files": [{"sha": "25d7d0e3b0cc32fb5780cb9fa05a15340ddce49c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -16,9 +16,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-// FIXME: after next stage0, change RangeInclusive { ... } back to ..=\n-use ops::RangeInclusive;\n-\n // How this module is organized.\n //\n // The library infrastructure for slices is fairly messy. There's\n@@ -1047,32 +1044,32 @@ impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n \n     #[inline]\n     fn get(self, slice: &[T]) -> Option<&[T]> {\n-        (RangeInclusive { start: 0, end: self.end }).get(slice)\n+        (0..=self.end).get(slice)\n     }\n \n     #[inline]\n     fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {\n-        (RangeInclusive { start: 0, end: self.end }).get_mut(slice)\n+        (0..=self.end).get_mut(slice)\n     }\n \n     #[inline]\n     unsafe fn get_unchecked(self, slice: &[T]) -> &[T] {\n-        (RangeInclusive { start: 0, end: self.end }).get_unchecked(slice)\n+        (0..=self.end).get_unchecked(slice)\n     }\n \n     #[inline]\n     unsafe fn get_unchecked_mut(self, slice: &mut [T]) -> &mut [T] {\n-        (RangeInclusive { start: 0, end: self.end }).get_unchecked_mut(slice)\n+        (0..=self.end).get_unchecked_mut(slice)\n     }\n \n     #[inline]\n     fn index(self, slice: &[T]) -> &[T] {\n-        (RangeInclusive { start: 0, end: self.end }).index(slice)\n+        (0..=self.end).index(slice)\n     }\n \n     #[inline]\n     fn index_mut(self, slice: &mut [T]) -> &mut [T] {\n-        (RangeInclusive { start: 0, end: self.end }).index_mut(slice)\n+        (0..=self.end).index_mut(slice)\n     }\n }\n "}, {"sha": "24ce8fb2995983de53543d5488dfb8ffc7d04299", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -165,7 +165,7 @@ impl<'a> CacheDecoder<'a> {\n     fn find_filemap_prev_bytepos(&self,\n                                  prev_bytepos: BytePos)\n                                  -> Option<(BytePos, StableFilemapId)> {\n-        for (start, id) in self.prev_filemap_starts.range(BytePos(0) ... prev_bytepos).rev() {\n+        for (start, id) in self.prev_filemap_starts.range(BytePos(0) ..= prev_bytepos).rev() {\n             return Some((*start, *id))\n         }\n "}, {"sha": "e583981d9816b967854dac449964b7c65a422f27", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -2783,10 +2783,11 @@ impl<'a> Parser<'a> {\n             if op.precedence() < min_prec {\n                 break;\n             }\n-            // Warn about deprecated ... syntax (until SNAP)\n-            if self.token == token::DotDotDot {\n-                self.warn_dotdoteq(self.span);\n+            // Check for deprecated `...` syntax\n+            if self.token == token::DotDotDot && op == AssocOp::DotDotEq {\n+                self.err_dotdotdot_syntax(self.span);\n             }\n+\n             self.bump();\n             if op.is_comparison() {\n                 self.check_no_chained_comparison(&lhs, &op);\n@@ -2819,7 +2820,6 @@ impl<'a> Parser<'a> {\n                 //\n                 // We have 2 alternatives here: `x..y`/`x..=y` and `x..`/`x..=` The other\n                 // two variants are handled with `parse_prefix_range_expr` call above.\n-                // (and `x...y`/`x...` until SNAP)\n                 let rhs = if self.is_at_start_of_range_notation_rhs() {\n                     Some(self.parse_assoc_expr_with(op.precedence() + 1,\n                                                     LhsExpr::NotYetParsed)?)\n@@ -3007,22 +3007,22 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parse prefix-forms of range notation: `..expr`, `..`, `..=expr` (and `...expr` until SNAP)\n+    /// Parse prefix-forms of range notation: `..expr`, `..`, `..=expr`\n     fn parse_prefix_range_expr(&mut self,\n                                already_parsed_attrs: Option<ThinVec<Attribute>>)\n                                -> PResult<'a, P<Expr>> {\n-        // SNAP remove DotDotDot\n+        // Check for deprecated `...` syntax\n+        if self.token == token::DotDotDot {\n+            self.err_dotdotdot_syntax(self.span);\n+        }\n+\n         debug_assert!([token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token),\n-                      \"parse_prefix_range_expr: token {:?} is not DotDot/DotDotDot/DotDotEq\",\n+                      \"parse_prefix_range_expr: token {:?} is not DotDot/DotDotEq\",\n                       self.token);\n         let tok = self.token.clone();\n         let attrs = self.parse_or_use_outer_attributes(already_parsed_attrs)?;\n         let lo = self.span;\n         let mut hi = self.span;\n-        // Warn about deprecated ... syntax (until SNAP)\n-        if tok == token::DotDotDot {\n-            self.warn_dotdoteq(self.span);\n-        }\n         self.bump();\n         let opt_end = if self.is_at_start_of_range_notation_rhs() {\n             // RHS must be parsed with more associativity than the dots.\n@@ -4332,9 +4332,13 @@ impl<'a> Parser<'a> {\n         }).emit();\n     }\n \n-    fn warn_dotdoteq(&self, span: Span) {\n-        self.diagnostic().struct_span_warn(span, {\n-            \"`...` is being replaced by `..=`\"\n+    fn err_dotdotdot_syntax(&self, span: Span) {\n+        self.diagnostic().struct_span_err(span, {\n+            \"`...` syntax cannot be used in expressions\"\n+        }).help({\n+            \"Use `..` if you need an exclusive range (a < b)\"\n+        }).help({\n+            \"or `..=` if you need an inclusive range (a <= b)\"\n         }).emit();\n     }\n "}, {"sha": "f83343bf9afa51fe1785c2a0163699e3cc157467", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -222,8 +222,8 @@ impl Token {\n             BinOp(Or) | OrOr                  | // closure\n             BinOp(And)                        | // reference\n             AndAnd                            | // double reference\n+            // DotDotDot is no longer supported, but we need some way to display the error\n             DotDot | DotDotDot | DotDotEq     | // range notation\n-                // SNAP remove DotDotDot\n             Lt | BinOp(Shl)                   | // associated path\n             ModSep                            | // global path\n             Pound                             => true, // expression attributes"}, {"sha": "38627b40544f5a500c1eec64040c32c04fc92795", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -2213,7 +2213,7 @@ impl<'a> State<'a> {\n                 if limits == ast::RangeLimits::HalfOpen {\n                     self.s.word(\"..\")?;\n                 } else {\n-                    self.s.word(\"...\")?;\n+                    self.s.word(\"..=\")?;\n                 }\n                 if let Some(ref e) = *end {\n                     self.print_expr_maybe_paren(e, fake_prec)?;"}, {"sha": "6014ec5aa92a5b36daac1cbf5a6349ee31bcdc6a", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -106,7 +106,8 @@ impl AssocOp {\n             Token::OrOr => Some(LOr),\n             Token::DotDot => Some(DotDot),\n             Token::DotDotEq => Some(DotDotEq),\n-            Token::DotDotDot => Some(DotDotEq), // remove this after SNAP\n+            // DotDotDot is no longer supported, but we need some way to display the error\n+            Token::DotDotDot => Some(DotDotEq),\n             Token::Colon => Some(Colon),\n             _ if t.is_keyword(keywords::As) => Some(As),\n             _ => None"}, {"sha": "a4c36a2f0ba8ddaa20c282ba7dbf89d93beef66f", "filename": "src/test/parse-fail/range_inclusive_dotdotdot.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n+\n+// Make sure that inclusive ranges with `...` syntax don't parse.\n+\n+#![feature(inclusive_range_syntax, inclusive_range)]\n+\n+use std::ops::RangeToInclusive;\n+\n+fn return_range_to() -> RangeToInclusive<i32> {\n+    return ...1; //~ERROR `...` syntax cannot be used in expressions\n+                 //~^HELP  Use `..` if you need an exclusive range (a < b)\n+                 //~^^HELP or `..=` if you need an inclusive range (a <= b)\n+}\n+\n+pub fn main() {\n+    let x = ...0;    //~ERROR `...` syntax cannot be used in expressions\n+                     //~^HELP  Use `..` if you need an exclusive range (a < b)\n+                     //~^^HELP or `..=` if you need an inclusive range (a <= b)\n+\n+    let x = 5...5;   //~ERROR `...` syntax cannot be used in expressions\n+                     //~^HELP  Use `..` if you need an exclusive range (a < b)\n+                     //~^^HELP or `..=` if you need an inclusive range (a <= b)\n+\n+    for _ in 0...1 {} //~ERROR `...` syntax cannot be used in expressions\n+                     //~^HELP  Use `..` if you need an exclusive range (a < b)\n+                     //~^^HELP or `..=` if you need an inclusive range (a <= b)\n+}\n+"}, {"sha": "f17a0494a69c48d9e4d8b6acf39cc3df6086962f", "filename": "src/test/run-pass-fulldeps/issue-35829.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ff0e6422061c390a141354af8eacd540dca10b/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs?ref=d5ff0e6422061c390a141354af8eacd540dca10b", "patch": "@@ -41,8 +41,8 @@ fn main() {\n     let raw_byte_string_lit_kind = LitKind::ByteStr(Rc::new(b\"#\\\"two\\\"#\".to_vec()));\n     assert_eq!(raw_byte_string.node, ExprKind::Lit(P(dummy_spanned(raw_byte_string_lit_kind))));\n \n-    // check dotdotdot\n-    let closed_range = quote_expr!(&cx, 0 ... 1);\n+    // check dotdoteq\n+    let closed_range = quote_expr!(&cx, 0 ..= 1);\n     assert_eq!(closed_range.node, ExprKind::Range(\n         Some(quote_expr!(&cx, 0)),\n         Some(quote_expr!(&cx, 1)),"}]}