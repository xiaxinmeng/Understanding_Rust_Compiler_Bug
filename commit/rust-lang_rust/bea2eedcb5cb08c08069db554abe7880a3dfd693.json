{"sha": "bea2eedcb5cb08c08069db554abe7880a3dfd693", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTJlZWRjYjVjYjA4YzA4MDY5ZGI1NTRhYmU3ODgwYTNkZmQ2OTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-23T07:42:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-23T07:42:12Z"}, "message": "Rollup merge of #74587 - lzutao:consts, r=dtolnay\n\nPrefer constant over function\n\nJust that I prefer constants over functions that can be made const.", "tree": {"sha": "6e56d61ce1637860042bed4fc8a078bd84253cde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e56d61ce1637860042bed4fc8a078bd84253cde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea2eedcb5cb08c08069db554abe7880a3dfd693", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGT9UCRBK7hj4Ov3rIwAAdHIIADiTkDxul23YzuNBP+vGAToY\n28sUty+nB6KvYLDHy/erN/AT++UYeYekfj5cpQunoy3a1QrPzxeVeIZhweazXYqO\ngu6yB3ZnDytLkn1HzFdbBeh1pio3x2Kej3H6UMrMBRkodJ+PEAqkp/RjriB7sJEg\nGign4AeKD2ZyYfZmo4JV51CjjVeCapsiz85E2H3ofUW4MhymbAbcRdSqUopsQM3R\nuhZvCM8OLmlArCH6ME5IVBPe+6ZU+jbI/znTggERzw7Zjk6G/x/brBhWzcGTlaBo\n6mFSoby19NP9KGYULk6vGUxuGQ5tbZNXqGclNy5RdKMR0LC2ffYoKjnHh7HR4Zs=\n=Rm7j\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e56d61ce1637860042bed4fc8a078bd84253cde\nparent 5629223782074cc38597775e47e947081253ac26\nparent 0de7fade1053f553f83ac603079602d50ab14e19\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595490132 -0700\ncommitter GitHub <noreply@github.com> 1595490132 -0700\n\nRollup merge of #74587 - lzutao:consts, r=dtolnay\n\nPrefer constant over function\n\nJust that I prefer constants over functions that can be made const.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea2eedcb5cb08c08069db554abe7880a3dfd693", "html_url": "https://github.com/rust-lang/rust/commit/bea2eedcb5cb08c08069db554abe7880a3dfd693", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea2eedcb5cb08c08069db554abe7880a3dfd693/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5629223782074cc38597775e47e947081253ac26", "url": "https://api.github.com/repos/rust-lang/rust/commits/5629223782074cc38597775e47e947081253ac26", "html_url": "https://github.com/rust-lang/rust/commit/5629223782074cc38597775e47e947081253ac26"}, {"sha": "0de7fade1053f553f83ac603079602d50ab14e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de7fade1053f553f83ac603079602d50ab14e19", "html_url": "https://github.com/rust-lang/rust/commit/0de7fade1053f553f83ac603079602d50ab14e19"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "b746b0feb623bde9b0c0868bf43733f7113d1abe", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bea2eedcb5cb08c08069db554abe7880a3dfd693/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea2eedcb5cb08c08069db554abe7880a3dfd693/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=bea2eedcb5cb08c08069db554abe7880a3dfd693", "patch": "@@ -7,24 +7,25 @@ use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::cvt;\n use crate::sys_common::AsInner;\n \n-use libc::{c_int, c_void, ssize_t};\n+use libc::{c_int, c_void};\n \n #[derive(Debug)]\n pub struct FileDesc {\n     fd: c_int,\n }\n \n-fn max_len() -> usize {\n-    // The maximum read limit on most posix-like systems is `SSIZE_MAX`,\n-    // with the man page quoting that if the count of bytes to read is\n-    // greater than `SSIZE_MAX` the result is \"unspecified\".\n-    //\n-    // On macOS, however, apparently the 64-bit libc is either buggy or\n-    // intentionally showing odd behavior by rejecting any read with a size\n-    // larger than or equal to INT_MAX. To handle both of these the read\n-    // size is capped on both platforms.\n-    if cfg!(target_os = \"macos\") { <c_int>::MAX as usize - 1 } else { <ssize_t>::MAX as usize }\n-}\n+// The maximum read limit on most POSIX-like systems is `SSIZE_MAX`,\n+// with the man page quoting that if the count of bytes to read is\n+// greater than `SSIZE_MAX` the result is \"unspecified\".\n+//\n+// On macOS, however, apparently the 64-bit libc is either buggy or\n+// intentionally showing odd behavior by rejecting any read with a size\n+// larger than or equal to INT_MAX. To handle both of these the read\n+// size is capped on both platforms.\n+#[cfg(target_os = \"macos\")]\n+const READ_LIMIT: usize = c_int::MAX as usize - 1;\n+#[cfg(not(target_os = \"macos\"))]\n+const READ_LIMIT: usize = libc::ssize_t::MAX as usize;\n \n impl FileDesc {\n     pub fn new(fd: c_int) -> FileDesc {\n@@ -44,7 +45,7 @@ impl FileDesc {\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n-            libc::read(self.fd, buf.as_mut_ptr() as *mut c_void, cmp::min(buf.len(), max_len()))\n+            libc::read(self.fd, buf.as_mut_ptr() as *mut c_void, cmp::min(buf.len(), READ_LIMIT))\n         })?;\n         Ok(ret as usize)\n     }\n@@ -92,7 +93,7 @@ impl FileDesc {\n             cvt_pread64(\n                 self.fd,\n                 buf.as_mut_ptr() as *mut c_void,\n-                cmp::min(buf.len(), max_len()),\n+                cmp::min(buf.len(), READ_LIMIT),\n                 offset as i64,\n             )\n             .map(|n| n as usize)\n@@ -101,7 +102,7 @@ impl FileDesc {\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n-            libc::write(self.fd, buf.as_ptr() as *const c_void, cmp::min(buf.len(), max_len()))\n+            libc::write(self.fd, buf.as_ptr() as *const c_void, cmp::min(buf.len(), READ_LIMIT))\n         })?;\n         Ok(ret as usize)\n     }\n@@ -144,7 +145,7 @@ impl FileDesc {\n             cvt_pwrite64(\n                 self.fd,\n                 buf.as_ptr() as *const c_void,\n-                cmp::min(buf.len(), max_len()),\n+                cmp::min(buf.len(), READ_LIMIT),\n                 offset as i64,\n             )\n             .map(|n| n as usize)"}, {"sha": "ea186846929be135479736277e31ece1035b4960", "filename": "src/libstd/sys/vxworks/fd.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bea2eedcb5cb08c08069db554abe7880a3dfd693/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea2eedcb5cb08c08069db554abe7880a3dfd693/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs?ref=bea2eedcb5cb08c08069db554abe7880a3dfd693", "patch": "@@ -13,12 +13,10 @@ pub struct FileDesc {\n     fd: c_int,\n }\n \n-fn max_len() -> usize {\n-    // The maximum read limit on most posix-like systems is `SSIZE_MAX`,\n-    // with the man page quoting that if the count of bytes to read is\n-    // greater than `SSIZE_MAX` the result is \"unspecified\".\n-    <ssize_t>::MAX as usize\n-}\n+// The maximum read limit on most POSIX-like systems is `SSIZE_MAX`,\n+// with the man page quoting that if the count of bytes to read is\n+// greater than `SSIZE_MAX` the result is \"unspecified\".\n+const READ_LIMIT: usize = ssize_t::MAX as usize;\n \n impl FileDesc {\n     pub fn new(fd: c_int) -> FileDesc {\n@@ -38,7 +36,7 @@ impl FileDesc {\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n-            libc::read(self.fd, buf.as_mut_ptr() as *mut c_void, cmp::min(buf.len(), max_len()))\n+            libc::read(self.fd, buf.as_mut_ptr() as *mut c_void, cmp::min(buf.len(), READ_LIMIT))\n         })?;\n         Ok(ret as usize)\n     }\n@@ -79,7 +77,7 @@ impl FileDesc {\n             cvt_pread(\n                 self.fd,\n                 buf.as_mut_ptr() as *mut c_void,\n-                cmp::min(buf.len(), max_len()),\n+                cmp::min(buf.len(), READ_LIMIT),\n                 offset as i64,\n             )\n             .map(|n| n as usize)\n@@ -88,7 +86,7 @@ impl FileDesc {\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n-            libc::write(self.fd, buf.as_ptr() as *const c_void, cmp::min(buf.len(), max_len()))\n+            libc::write(self.fd, buf.as_ptr() as *const c_void, cmp::min(buf.len(), READ_LIMIT))\n         })?;\n         Ok(ret as usize)\n     }\n@@ -124,7 +122,7 @@ impl FileDesc {\n             cvt_pwrite(\n                 self.fd,\n                 buf.as_ptr() as *const c_void,\n-                cmp::min(buf.len(), max_len()),\n+                cmp::min(buf.len(), READ_LIMIT),\n                 offset as i64,\n             )\n             .map(|n| n as usize)"}, {"sha": "8f46f4d284f0bf71ad499c3457da75c9faac5a55", "filename": "src/libstd/sys/vxworks/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea2eedcb5cb08c08069db554abe7880a3dfd693/src%2Flibstd%2Fsys%2Fvxworks%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea2eedcb5cb08c08069db554abe7880a3dfd693/src%2Flibstd%2Fsys%2Fvxworks%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ftime.rs?ref=bea2eedcb5cb08c08069db554abe7880a3dfd693", "patch": "@@ -1,6 +1,6 @@\n use crate::cmp::Ordering;\n use crate::time::Duration;\n-use ::core::hash::{Hash, Hasher};\n+use core::hash::{Hash, Hasher};\n \n pub use self::inner::{Instant, SystemTime, UNIX_EPOCH};\n use crate::convert::TryInto;"}]}