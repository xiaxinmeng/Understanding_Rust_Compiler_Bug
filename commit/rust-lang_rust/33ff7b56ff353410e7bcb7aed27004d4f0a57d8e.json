{"sha": "33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZmY3YjU2ZmYzNTM0MTBlN2JjYjdhZWQyNzAwNGQ0ZjBhNTdkOGU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-27T19:50:57Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-01T21:45:25Z"}, "message": "Use the new Resolver API in completion", "tree": {"sha": "88dba144f41cdbd20584306a296031cb8f0ced3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88dba144f41cdbd20584306a296031cb8f0ced3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "html_url": "https://github.com/rust-lang/rust/commit/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b076f1931d7dc324d7bbbc4c1df9f7c1c1db8b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b076f1931d7dc324d7bbbc4c1df9f7c1c1db8b7", "html_url": "https://github.com/rust-lang/rust/commit/6b076f1931d7dc324d7bbbc4c1df9f7c1c1db8b7"}], "stats": {"total": 296, "additions": 190, "deletions": 106}, "files": [{"sha": "6c294bf108ab53176b5ac5534179f6d6deb5ef24", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -72,11 +72,23 @@ impl Body {\n }\n \n // needs arbitrary_self_types to be a method... or maybe move to the def?\n-#[allow(dead_code)]\n-pub fn resolver_for_expr(body: Arc<Body>, db: &impl HirDatabase, expr_id: ExprId) -> Resolver {\n+pub fn resolver_for_expr(\n+    body: Arc<Body>,\n+    db: &impl HirDatabase,\n+    expr_id: ExprId,\n+) -> Resolver<'static> {\n+    let scopes = db.expr_scopes(body.owner);\n+    resolver_for_scope(body, db, scopes.scope_for(expr_id))\n+}\n+\n+pub fn resolver_for_scope(\n+    body: Arc<Body>,\n+    db: &impl HirDatabase,\n+    scope_id: Option<scope::ScopeId>,\n+) -> Resolver<'static> {\n     let mut r = body.owner.resolver(db);\n     let scopes = db.expr_scopes(body.owner);\n-    let scope_chain = scopes.scope_chain_for(expr_id).collect::<Vec<_>>();\n+    let scope_chain = scopes.scope_chain_for(scope_id).collect::<Vec<_>>();\n     for scope in scope_chain.into_iter().rev() {\n         r = r.push_expr_scope(Arc::clone(&scopes), scope);\n     }"}, {"sha": "23f1c5e7f2747c70637a0da4db0c2fed4d17069f", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -62,25 +62,11 @@ impl ExprScopes {\n         &self.scopes[scope].entries\n     }\n \n-    pub fn scope_chain_for<'a>(&'a self, expr: ExprId) -> impl Iterator<Item = ScopeId> + 'a {\n-        generate(self.scope_for(expr), move |&scope| {\n-            self.scopes[scope].parent\n-        })\n-    }\n-\n-    pub fn resolve_local_name<'a>(\n+    pub fn scope_chain_for<'a>(\n         &'a self,\n-        context_expr: ExprId,\n-        name: Name,\n-    ) -> Option<&'a ScopeEntry> {\n-        // TODO replace by Resolver::resolve_name\n-        let mut shadowed = FxHashSet::default();\n-        let ret = self\n-            .scope_chain_for(context_expr)\n-            .flat_map(|scope| self.entries(scope).iter())\n-            .filter(|entry| shadowed.insert(entry.name()))\n-            .find(|entry| entry.name() == &name);\n-        ret\n+        scope: Option<ScopeId>,\n+    ) -> impl Iterator<Item = ScopeId> + 'a {\n+        generate(scope, move |&scope| self.scopes[scope].parent)\n     }\n \n     fn root_scope(&mut self) -> ScopeId {\n@@ -123,7 +109,7 @@ impl ExprScopes {\n         self.scope_for.insert(node, scope);\n     }\n \n-    fn scope_for(&self, expr: ExprId) -> Option<ScopeId> {\n+    pub fn scope_for(&self, expr: ExprId) -> Option<ScopeId> {\n         self.scope_for.get(&expr).map(|&scope| scope)\n     }\n }\n@@ -151,18 +137,14 @@ impl ScopeEntryWithSyntax {\n }\n \n impl ScopesWithSyntaxMapping {\n-    pub fn scope_chain<'a>(&'a self, node: &SyntaxNode) -> impl Iterator<Item = ScopeId> + 'a {\n+    fn scope_chain<'a>(&'a self, node: &SyntaxNode) -> impl Iterator<Item = ScopeId> + 'a {\n         generate(self.scope_for(node), move |&scope| {\n             self.scopes.scopes[scope].parent\n         })\n     }\n \n-    pub fn scope_chain_for_offset<'a>(\n-        &'a self,\n-        offset: TextUnit,\n-    ) -> impl Iterator<Item = ScopeId> + 'a {\n-        let scope = self\n-            .scopes\n+    pub fn scope_for_offset<'a>(&'a self, offset: TextUnit) -> Option<ScopeId> {\n+        self.scopes\n             .scope_for\n             .iter()\n             .filter_map(|(id, scope)| Some((self.syntax_mapping.expr_syntax(*id)?, scope)))\n@@ -173,9 +155,7 @@ impl ScopesWithSyntaxMapping {\n                     ptr.range().len(),\n                 )\n             })\n-            .map(|(ptr, scope)| self.adjust(ptr, *scope, offset));\n-\n-        generate(scope, move |&scope| self.scopes.scopes[scope].parent)\n+            .map(|(ptr, scope)| self.adjust(ptr, *scope, offset))\n     }\n \n     // XXX: during completion, cursor might be outside of any particular"}, {"sha": "9b020db811df5853b79fc76fc58bd2349a6dd5d2", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -81,6 +81,15 @@ pub struct PerNs<T> {\n     pub values: Option<T>,\n }\n \n+impl<T> Default for PerNs<T> {\n+    fn default() -> Self {\n+        PerNs {\n+            types: None,\n+            values: None,\n+        }\n+    }\n+}\n+\n impl<T> PerNs<T> {\n     pub fn none() -> PerNs<T> {\n         PerNs {"}, {"sha": "30cf9c69e7acdd25284b9daaace9d9f6309c0c89", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -89,8 +89,20 @@ impl Resolver {\n         }\n     }\n \n-    pub fn all_names(&self) -> FxHashMap<Name, Resolution> {\n-        unimplemented!()\n+    pub fn all_names(&self) -> FxHashMap<Name, PerNs<Resolution>> {\n+        let mut names = FxHashMap::default();\n+        for scope in &self.scopes {\n+            scope.collect_names(&mut |name, res| {\n+                let current: &mut PerNs<Resolution> = names.entry(name).or_default();\n+                if current.types.is_none() {\n+                    current.types = res.types;\n+                }\n+                if current.values.is_none() {\n+                    current.values = res.values;\n+                }\n+            });\n+        }\n+        names\n     }\n \n     fn module(&self) -> Option<(&ItemMap, Module)> {\n@@ -175,4 +187,45 @@ impl Scope {\n             }\n         }\n     }\n+\n+    fn collect_names(&self, f: &mut FnMut(Name, PerNs<Resolution>)) {\n+        match self {\n+            Scope::ModuleScope(m) => {\n+                m.item_map[m.module.module_id]\n+                    .entries()\n+                    .for_each(|(name, res)| {\n+                        f(name.clone(), res.def.map(|def| Resolution::Def { def }));\n+                    })\n+            }\n+            Scope::ModuleScopeRef(m) => {\n+                m.item_map[m.module.module_id]\n+                    .entries()\n+                    .for_each(|(name, res)| {\n+                        f(name.clone(), res.def.map(|def| Resolution::Def { def }));\n+                    })\n+            }\n+            Scope::GenericParams(gp) => {\n+                for param in &gp.params {\n+                    f(\n+                        param.name.clone(),\n+                        PerNs::types(Resolution::GenericParam { idx: param.idx }),\n+                    )\n+                }\n+            }\n+            Scope::ImplBlockScope(i) => {\n+                f(\n+                    Name::self_type(),\n+                    PerNs::types(Resolution::SelfType(i.clone())),\n+                );\n+            }\n+            Scope::ExprScope(e) => {\n+                e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {\n+                    f(\n+                        e.name().clone(),\n+                        PerNs::values(Resolution::LocalBinding { pat: e.pat() }),\n+                    );\n+                });\n+            }\n+        }\n+    }\n }"}, {"sha": "998158b3e867ccc4614c1a8c49a68f8098d1844f", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -9,13 +9,14 @@ use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n     SmolStr, TextRange, SyntaxNode,\n     ast::{self, AstNode, NameOwner},\n-    algo::find_node_at_offset,\n+    algo::{find_node_at_offset, find_leaf_at_offset},\n };\n \n use crate::{\n     HirDatabase, Function, ModuleDef, Struct, Enum,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n     ids::{LocationCtx, SourceFileItemId},\n+    expr\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file.\n@@ -202,7 +203,29 @@ pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, Te\n     res\n }\n \n-#[allow(unused_variables)]\n-pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> Resolver {\n-    unimplemented!()\n+pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> Resolver<'static> {\n+    let file = db.parse(position.file_id);\n+    find_leaf_at_offset(file.syntax(), position.offset)\n+        .find_map(|node| {\n+            node.ancestors().find_map(|node| {\n+                if ast::Expr::cast(node).is_some() || ast::Block::cast(node).is_some() {\n+                    if let Some(func) = function_from_child_node(db, position.file_id, node) {\n+                        let scopes = func.scopes(db);\n+                        let scope = scopes.scope_for_offset(position.offset);\n+                        Some(expr::resolver_for_scope(func.body(db), db, scope))\n+                    } else {\n+                        // TODO const/static/array length\n+                        None\n+                    }\n+                } else if let Some(module) = ast::Module::cast(node) {\n+                    Some(module_from_declaration(db, position.file_id, module)?.resolver(db))\n+                } else if let Some(_) = ast::SourceFile::cast(node) {\n+                    Some(module_from_source(db, position.file_id.into(), None)?.resolver(db))\n+                } else {\n+                    // TODO add missing cases\n+                    None\n+                }\n+            })\n+        })\n+        .unwrap_or_default()\n }"}, {"sha": "9e61c021275c13683a541599cc81f7b86ce2ca35", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -7,13 +7,13 @@ use crate::{\n use hir::Docs;\n \n pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (path, module) = match (&ctx.path_prefix, &ctx.module) {\n-        (Some(path), Some(module)) => (path.clone(), module),\n+    let path = match &ctx.path_prefix {\n+        Some(path) => path.clone(),\n         _ => return,\n     };\n-    let def_id = match module.resolve_path(ctx.db, &path).take_types() {\n-        Some(it) => it,\n-        None => return,\n+    let def = match ctx.resolver.resolve_path(ctx.db, &path).take_types() {\n+        Some(Resolution::Def { def }) => def,\n+        _ => return,\n     };\n     match def_id {\n         hir::ModuleDef::Module(module) => {\n@@ -24,7 +24,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                     ctx.source_range(),\n                     name.to_string(),\n                 )\n-                .from_resolution(ctx, res)\n+                .from_resolution(ctx, &res.def.map(|def| hir::Resolution::Def { def }))\n                 .add_to(acc);\n             }\n         }"}, {"sha": "3488d648060baddc39641c204bbef55efab9ae8e", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 17, "deletions": 46, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -1,61 +1,32 @@\n-use rustc_hash::FxHashSet;\n-use ra_syntax::ast::AstNode;\n-use crate::completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext};\n+use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionContext};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n         return;\n     }\n-    let module = match &ctx.module {\n-        Some(it) => it,\n-        None => return,\n-    };\n-    if let Some(function) = &ctx.function {\n-        let scopes = function.scopes(ctx.db);\n-        complete_fn(acc, &scopes, ctx);\n-    }\n+    let names = ctx.resolver.all_names();\n \n-    let module_scope = module.scope(ctx.db);\n-    module_scope\n-        .entries()\n-        .filter(|(_name, res)| {\n-            // For cases like `use self::foo<|>` don't suggest foo itself.\n-            match res.import {\n-                None => true,\n-                Some(import) => {\n-                    let source = module.import_source(ctx.db, import);\n-                    !source.syntax().range().is_subrange(&ctx.leaf.range())\n-                }\n-            }\n-        })\n+    // let module_scope = module.scope(ctx.db);\n+    names\n+        .into_iter()\n+        // FIXME check tests\n+        // .filter(|(_name, res)| {\n+        //     // For cases like `use self::foo<|>` don't suggest foo itself.\n+        //     match res.import {\n+        //         None => true,\n+        //         Some(import) => {\n+        //             let source = module.import_source(ctx.db, import);\n+        //             !source.syntax().range().is_subrange(&ctx.leaf.range())\n+        //         }\n+        //     }\n+        // })\n         .for_each(|(name, res)| {\n             CompletionItem::new(\n                 CompletionKind::Reference,\n                 ctx.source_range(),\n                 name.to_string(),\n             )\n-            .from_resolution(ctx, res)\n-            .add_to(acc)\n-        });\n-}\n-\n-fn complete_fn(\n-    acc: &mut Completions,\n-    scopes: &hir::ScopesWithSyntaxMapping,\n-    ctx: &CompletionContext,\n-) {\n-    let mut shadowed = FxHashSet::default();\n-    scopes\n-        .scope_chain_for_offset(ctx.offset)\n-        .flat_map(|scope| scopes.scopes.entries(scope).iter())\n-        .filter(|entry| shadowed.insert(entry.name()))\n-        .for_each(|entry| {\n-            CompletionItem::new(\n-                CompletionKind::Reference,\n-                ctx.source_range(),\n-                entry.name().to_string(),\n-            )\n-            .kind(CompletionItemKind::Binding)\n+            .from_resolution(ctx, &res)\n             .add_to(acc)\n         });\n }"}, {"sha": "aea32fce397c30fe61bcd2aaba42f30e0470bb5c", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     algo::{find_leaf_at_offset, find_covering_node, find_node_at_offset},\n     SyntaxKind::*,\n };\n-use hir::source_binder;\n+use hir::{source_binder, Resolver};\n \n use crate::{db, FilePosition};\n \n@@ -16,6 +16,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) db: &'a db::RootDatabase,\n     pub(super) offset: TextUnit,\n     pub(super) leaf: &'a SyntaxNode,\n+    pub(super) resolver: Resolver<'static>,\n     pub(super) module: Option<hir::Module>,\n     pub(super) function: Option<hir::Function>,\n     pub(super) function_syntax: Option<&'a ast::FnDef>,\n@@ -42,12 +43,14 @@ impl<'a> CompletionContext<'a> {\n         original_file: &'a SourceFile,\n         position: FilePosition,\n     ) -> Option<CompletionContext<'a>> {\n+        let resolver = source_binder::resolver_for_position(db, position);\n         let module = source_binder::module_from_position(db, position);\n         let leaf = find_leaf_at_offset(original_file.syntax(), position.offset).left_biased()?;\n         let mut ctx = CompletionContext {\n             db,\n             leaf,\n             offset: position.offset,\n+            resolver,\n             module,\n             function: None,\n             function_syntax: None,"}, {"sha": "4101ce88a0d95c2279367f8ec0572dbacf4b5ad9", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -1,5 +1,7 @@\n-use hir::{Docs, Documentation};\n-use ra_syntax::TextRange;\n+use hir::{Docs, Documentation, PerNs, Resolution};\n+use ra_syntax::{\n+    TextRange,\n+};\n use ra_text_edit::TextEdit;\n use test_utils::tested_by;\n \n@@ -48,6 +50,7 @@ pub enum CompletionItemKind {\n     Trait,\n     TypeAlias,\n     Method,\n+    TypeParam,\n }\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n@@ -207,23 +210,38 @@ impl Builder {\n     pub(super) fn from_resolution(\n         mut self,\n         ctx: &CompletionContext,\n-        resolution: &hir::Resolution,\n+        resolution: &PerNs<Resolution>,\n     ) -> Builder {\n-        let def = resolution.def.take_types().or(resolution.def.take_values());\n+        use hir::ModuleDef::*;\n+\n+        let def = resolution\n+            .as_ref()\n+            .take_types()\n+            .or(resolution.as_ref().take_values());\n         let def = match def {\n             None => return self,\n             Some(it) => it,\n         };\n         let (kind, docs) = match def {\n-            hir::ModuleDef::Module(it) => (CompletionItemKind::Module, it.docs(ctx.db)),\n-            hir::ModuleDef::Function(func) => return self.from_function(ctx, func),\n-            hir::ModuleDef::Struct(it) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n-            hir::ModuleDef::Enum(it) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n-            hir::ModuleDef::EnumVariant(it) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n-            hir::ModuleDef::Const(it) => (CompletionItemKind::Const, it.docs(ctx.db)),\n-            hir::ModuleDef::Static(it) => (CompletionItemKind::Static, it.docs(ctx.db)),\n-            hir::ModuleDef::Trait(it) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n-            hir::ModuleDef::Type(it) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            Resolution::Def { def: Module(it) } => (CompletionItemKind::Module, it.docs(ctx.db)),\n+            Resolution::Def {\n+                def: Function(func),\n+            } => return self.from_function(ctx, *func),\n+            Resolution::Def { def: Struct(it) } => (CompletionItemKind::Struct, it.docs(ctx.db)),\n+            Resolution::Def { def: Enum(it) } => (CompletionItemKind::Enum, it.docs(ctx.db)),\n+            Resolution::Def {\n+                def: EnumVariant(it),\n+            } => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n+            Resolution::Def { def: Const(it) } => (CompletionItemKind::Const, it.docs(ctx.db)),\n+            Resolution::Def { def: Static(it) } => (CompletionItemKind::Static, it.docs(ctx.db)),\n+            Resolution::Def { def: Trait(it) } => (CompletionItemKind::Trait, it.docs(ctx.db)),\n+            Resolution::Def { def: Type(it) } => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            Resolution::GenericParam { .. } => (CompletionItemKind::TypeParam, None),\n+            Resolution::LocalBinding { .. } => (CompletionItemKind::Binding, None),\n+            Resolution::SelfType { .. } => (\n+                CompletionItemKind::TypeParam, // (does this need its own kind?)\n+                None,\n+            ),\n         };\n         self.kind = Some(kind);\n         self.documentation = docs;"}, {"sha": "ba1d4abbd5b2a10ae1f493eb657250a1ebd5fa5c", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__self_in_methods.snap", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__self_in_methods.snap", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__self_in_methods.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__self_in_methods.snap?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -1,10 +1,24 @@\n ---\n-created: \"2019-01-23T05:27:32.422259+00:00\"\n-creator: insta@0.4.0\n+created: \"2019-01-27T20:17:10.051725945+00:00\"\n+creator: insta@0.5.2\n expression: kind_completions\n source: crates/ra_ide_api/src/completion/completion_item.rs\n ---\n [\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Self\",\n+        kind: Some(\n+            TypeParam\n+        ),\n+        detail: None,\n+        documentation: None,\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [25; 25),\n+        text_edit: None\n+    },\n     CompletionItem {\n         completion_kind: Reference,\n         label: \"self\","}, {"sha": "17fa073406b286d1e324cc50d6139112f3f0f432", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "patch": "@@ -70,6 +70,7 @@ impl Conv for CompletionItemKind {\n             CompletionItemKind::Const => Constant,\n             CompletionItemKind::Static => Value,\n             CompletionItemKind::Method => Method,\n+            CompletionItemKind::TypeParam => TypeParameter,\n         }\n     }\n }"}]}