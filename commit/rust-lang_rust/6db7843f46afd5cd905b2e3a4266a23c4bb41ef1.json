{"sha": "6db7843f46afd5cd905b2e3a4266a23c4bb41ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYjc4NDNmNDZhZmQ1Y2Q5MDViMmUzYTQyNjZhMjNjNGJiNDFlZjE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-18T20:34:50Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-21T03:12:14Z"}, "message": "Monomorphize dtors correctly\n\nThe same dtor was getting re-used for different instances, which\ndidn't always work right. Fixed.", "tree": {"sha": "8fedd98f7d6485539d84f677789dce2d2cbb49b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fedd98f7d6485539d84f677789dce2d2cbb49b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db7843f46afd5cd905b2e3a4266a23c4bb41ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db7843f46afd5cd905b2e3a4266a23c4bb41ef1", "html_url": "https://github.com/rust-lang/rust/commit/6db7843f46afd5cd905b2e3a4266a23c4bb41ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db7843f46afd5cd905b2e3a4266a23c4bb41ef1/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b4dcbecac824796bf7cd49a1fbadc20e63c99ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4dcbecac824796bf7cd49a1fbadc20e63c99ea", "html_url": "https://github.com/rust-lang/rust/commit/1b4dcbecac824796bf7cd49a1fbadc20e63c99ea"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "8eab69b1133dcbeab5cac09c9ed452c7967e71e9", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6db7843f46afd5cd905b2e3a4266a23c4bb41ef1/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db7843f46afd5cd905b2e3a4266a23c4bb41ef1/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6db7843f46afd5cd905b2e3a4266a23c4bb41ef1", "patch": "@@ -2304,14 +2304,14 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n         }\n       }\n       ast_map::node_dtor(_, dtor, _, pt) {\n-          let parent_id = alt ty::ty_to_def_id(ty::node_id_to_type(ccx.tcx,\n-                                     dtor.node.self_id)) {\n-                  some(did) { did }\n-                  none      { ccx.sess.span_bug(dtor.span, \"Bad self ty in \\\n+        let parent_id = alt ty::ty_to_def_id(ty::node_id_to_type(ccx.tcx,\n+                                              dtor.node.self_id)) {\n+                some(did) { did }\n+                none      { ccx.sess.span_bug(dtor.span, \"Bad self ty in \\\n                                dtor\"); }\n-          };\n-          trans_class_dtor(ccx, *pt, dtor.node.body,\n-                           dtor.node.id, psubsts, some(hash_id), parent_id)\n+        };\n+        trans_class_dtor(ccx, *pt, dtor.node.body,\n+          dtor.node.id, psubsts, some(hash_id), parent_id)\n       }\n       // Ugh -- but this ensures any new variants won't be forgotten\n       ast_map::node_expr(*) { ccx.tcx.sess.bug(\"Can't monomorphize an expr\") }\n@@ -4930,15 +4930,15 @@ fn trans_class_ctor(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n }\n \n fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n-    body: ast::blk,\n-    dtor_id: ast::node_id, substs: option<param_substs>,\n-                    hash_id: option<mono_id>, parent_id: ast::def_id)\n+    body: ast::blk, dtor_id: ast::node_id,\n+    psubsts: option<param_substs>,\n+    hash_id: option<mono_id>, parent_id: ast::def_id)\n     -> ValueRef {\n   let tcx = ccx.tcx;\n   /* Look up the parent class's def_id */\n   let mut class_ty = ty::lookup_item_type(tcx, parent_id).ty;\n   /* Substitute in the class type if necessary */\n-  option::iter(substs) {|ss|\n+  option::iter(psubsts) {|ss|\n     class_ty = ty::subst_tps(tcx, ss.tys, class_ty);\n   }\n \n@@ -4947,7 +4947,9 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n   let lldty = T_fn([T_ptr(type_of(ccx, ty::mk_nil(tcx))),\n                     T_ptr(type_of(ccx, class_ty))],\n                    llvm::LLVMVoidType());\n-  let s = get_dtor_symbol(ccx, path, dtor_id);\n+\n+  let s = get_dtor_symbol(ccx, path, dtor_id, psubsts);\n+\n   /* Register the dtor as a function. It has external linkage */\n   let lldecl = decl_internal_cdecl_fn(ccx.llmod, s, lldty);\n   lib::llvm::SetLinkage(lldecl, lib::llvm::ExternalLinkage);\n@@ -4959,7 +4961,7 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n   }\n   /* Translate the dtor body */\n   trans_fn(ccx, path, ast_util::dtor_dec(),\n-           body, lldecl, impl_self(class_ty), substs, dtor_id);\n+           body, lldecl, impl_self(class_ty), psubsts, dtor_id);\n   lldecl\n }\n \n@@ -5196,16 +5198,34 @@ fn item_path(ccx: @crate_ctxt, i: @ast::item) -> path {\n     } + [path_name(i.ident)]\n }\n \n-/* If there's already a symbol for the dtor with <id>, return it;\n-   otherwise, create one and register it, returning it as well */\n-fn get_dtor_symbol(ccx: @crate_ctxt, path: path, id: ast::node_id) -> str {\n+/* If there's already a symbol for the dtor with <id> and substs <substs>,\n+   return it; otherwise, create one and register it, returning it as well */\n+fn get_dtor_symbol(ccx: @crate_ctxt, path: path, id: ast::node_id,\n+                   substs: option<param_substs>) -> str {\n+  let t = ty::node_id_to_type(ccx.tcx, id);\n   alt ccx.item_symbols.find(id) {\n      some(s) { s }\n+     none if is_none(substs) {\n+       let s = mangle_exported_name(ccx,\n+                               path + [path_name(@ccx.names(\"dtor\"))],\n+                               t);\n+       ccx.item_symbols.insert(id, s);\n+       s\n+     }\n      none    {\n-         let s = mangle_exported_name(ccx, path +\n-           [path_name(@ccx.names(\"dtor\"))], ty::node_id_to_type(ccx.tcx, id));\n-         ccx.item_symbols.insert(id, s);\n-         s\n+       // Monomorphizing, so just make a symbol, don't add\n+       // this to item_symbols\n+       alt substs {\n+         some(ss) {\n+           let mono_ty = ty::subst_tps(ccx.tcx, ss.tys, t);\n+           mangle_exported_name(ccx, path +\n+                           [path_name(@ccx.names(\"dtor\"))], mono_ty)\n+         }\n+         none {\n+             ccx.sess.bug(#fmt(\"get_dtor_symbol: not monomorphizing and \\\n+               couldn't find a symbol for dtor %?\", path));\n+         }\n+       }\n      }\n   }\n }\n@@ -5289,7 +5309,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             let lldty = T_fn([T_ptr(type_of(ccx, ty::mk_nil(tcx))),\n                     T_ptr(type_of(ccx, class_ty))],\n                                    llvm::LLVMVoidType());\n-            let s = get_dtor_symbol(ccx, *pt, dt.node.id);\n+            let s = get_dtor_symbol(ccx, *pt, dt.node.id, none);\n \n             /* Make the declaration for the dtor */\n             let llfn = decl_internal_cdecl_fn(ccx.llmod, s, lldty);"}]}