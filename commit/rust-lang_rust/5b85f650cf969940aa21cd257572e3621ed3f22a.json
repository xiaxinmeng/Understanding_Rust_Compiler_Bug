{"sha": "5b85f650cf969940aa21cd257572e3621ed3f22a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODVmNjUwY2Y5Njk5NDBhYTIxY2QyNTc1NzJlMzYyMWVkM2YyMmE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-30T00:03:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-30T00:03:54Z"}, "message": "Rollup merge of #43512 - arielb1:untyped-move-paths, r=eddyb\n\nerase types in the move-path abstract domain\n\nLeaving types unerased would lead to 2 types with a different \"name\"\ngetting different move-paths, which would cause major brokenness (see\ne.g. #42903).\n\nThis does not fix any *known* issue, but is required if we want to use\nabs_domain with non-erased regions (because the same can easily\nhave different names). cc @RalfJung.\n\nr? @eddyb", "tree": {"sha": "0f9dfbc97a6a6e46f86079e9d46969ed72e78d37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f9dfbc97a6a6e46f86079e9d46969ed72e78d37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b85f650cf969940aa21cd257572e3621ed3f22a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b85f650cf969940aa21cd257572e3621ed3f22a", "html_url": "https://github.com/rust-lang/rust/commit/5b85f650cf969940aa21cd257572e3621ed3f22a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b85f650cf969940aa21cd257572e3621ed3f22a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4122b6bd5bca5fecacd75d184d12153e8e4fc8a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4122b6bd5bca5fecacd75d184d12153e8e4fc8a6", "html_url": "https://github.com/rust-lang/rust/commit/4122b6bd5bca5fecacd75d184d12153e8e4fc8a6"}, {"sha": "e268ddf52d7b52b0633572dacdf628c17978f1df", "url": "https://api.github.com/repos/rust-lang/rust/commits/e268ddf52d7b52b0633572dacdf628c17978f1df", "html_url": "https://github.com/rust-lang/rust/commit/e268ddf52d7b52b0633572dacdf628c17978f1df"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "6dadb702b9f24ada8ae4db46356787303b582afd", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b85f650cf969940aa21cd257572e3621ed3f22a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b85f650cf969940aa21cd257572e3621ed3f22a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=5b85f650cf969940aa21cd257572e3621ed3f22a", "patch": "@@ -258,10 +258,11 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::L\n     }\n }\n \n-impl<'a, 'gcx, 'tcx, B, V> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::Projection<'tcx, B, V>\n+impl<'a, 'gcx, 'tcx, B, V, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+for mir::Projection<'tcx, B, V, T>\n     where B: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n-          V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+          V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n+          T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n@@ -276,17 +277,18 @@ for mir::Projection<'tcx, B, V>\n     }\n }\n \n-impl<'a, 'gcx, 'tcx, V> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::ProjectionElem<'tcx, V>\n-    where V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+impl<'a, 'gcx, 'tcx, V, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+for mir::ProjectionElem<'tcx, V, T>\n+    where V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n+          T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n             mir::ProjectionElem::Deref => {}\n-            mir::ProjectionElem::Field(field, ty) => {\n+            mir::ProjectionElem::Field(field, ref ty) => {\n                 field.hash_stable(hcx, hasher);\n                 ty.hash_stable(hcx, hasher);\n             }"}, {"sha": "3dcd64af2ede07a8db7f3ade91aba2078480b9fe", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b85f650cf969940aa21cd257572e3621ed3f22a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b85f650cf969940aa21cd257572e3621ed3f22a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5b85f650cf969940aa21cd257572e3621ed3f22a", "patch": "@@ -887,15 +887,15 @@ impl_stable_hash_for!(struct Static<'tcx> {\n /// shared between `Constant` and `Lvalue`. See the aliases\n /// `LvalueProjection` etc below.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub struct Projection<'tcx, B, V> {\n+pub struct Projection<'tcx, B, V, T> {\n     pub base: B,\n-    pub elem: ProjectionElem<'tcx, V>,\n+    pub elem: ProjectionElem<'tcx, V, T>,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum ProjectionElem<'tcx, V> {\n+pub enum ProjectionElem<'tcx, V, T> {\n     Deref,\n-    Field(Field, Ty<'tcx>),\n+    Field(Field, T),\n     Index(V),\n \n     /// These indices are generated by slice patterns. Easiest to explain\n@@ -932,11 +932,11 @@ pub enum ProjectionElem<'tcx, V> {\n \n /// Alias for projections as they appear in lvalues, where the base is an lvalue\n /// and the index is an operand.\n-pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Operand<'tcx>>;\n+pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Operand<'tcx>, Ty<'tcx>>;\n \n /// Alias for projections as they appear in lvalues, where the base is an lvalue\n /// and the index is an operand.\n-pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Operand<'tcx>>;\n+pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Operand<'tcx>, Ty<'tcx>>;\n \n newtype_index!(Field, \"field\");\n \n@@ -1720,16 +1720,16 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n     }\n }\n \n-impl<'tcx, B, V> TypeFoldable<'tcx> for Projection<'tcx, B, V>\n-    where B: TypeFoldable<'tcx>, V: TypeFoldable<'tcx>\n+impl<'tcx, B, V, T> TypeFoldable<'tcx> for Projection<'tcx, B, V, T>\n+    where B: TypeFoldable<'tcx>, V: TypeFoldable<'tcx>, T: TypeFoldable<'tcx>\n {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         use mir::ProjectionElem::*;\n \n         let base = self.base.fold_with(folder);\n         let elem = match self.elem {\n             Deref => Deref,\n-            Field(f, ty) => Field(f, ty.fold_with(folder)),\n+            Field(f, ref ty) => Field(f, ty.fold_with(folder)),\n             Index(ref v) => Index(v.fold_with(folder)),\n             ref elem => elem.clone()\n         };\n@@ -1745,7 +1745,7 @@ impl<'tcx, B, V> TypeFoldable<'tcx> for Projection<'tcx, B, V>\n \n         self.base.visit_with(visitor) ||\n             match self.elem {\n-                Field(_, ty) => ty.visit_with(visitor),\n+                Field(_, ref ty) => ty.visit_with(visitor),\n                 Index(ref v) => v.visit_with(visitor),\n                 _ => false\n             }"}, {"sha": "1255209322b0ee4245384f21138bb5cb9e5d8c47", "filename": "src/librustc_mir/dataflow/move_paths/abs_domain.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b85f650cf969940aa21cd257572e3621ed3f22a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b85f650cf969940aa21cd257572e3621ed3f22a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs?ref=5b85f650cf969940aa21cd257572e3621ed3f22a", "patch": "@@ -23,11 +23,14 @@\n \n use rustc::mir::LvalueElem;\n use rustc::mir::{Operand, ProjectionElem};\n+use rustc::ty::Ty;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct AbstractOperand;\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub struct AbstractType;\n pub type AbstractElem<'tcx> =\n-    ProjectionElem<'tcx, AbstractOperand>;\n+    ProjectionElem<'tcx, AbstractOperand, AbstractType>;\n \n pub trait Lift {\n     type Abstract;\n@@ -37,14 +40,18 @@ impl<'tcx> Lift for Operand<'tcx> {\n     type Abstract = AbstractOperand;\n     fn lift(&self) -> Self::Abstract { AbstractOperand }\n }\n+impl<'tcx> Lift for Ty<'tcx> {\n+    type Abstract = AbstractType;\n+    fn lift(&self) -> Self::Abstract { AbstractType }\n+}\n impl<'tcx> Lift for LvalueElem<'tcx> {\n     type Abstract = AbstractElem<'tcx>;\n     fn lift(&self) -> Self::Abstract {\n         match *self {\n             ProjectionElem::Deref =>\n                 ProjectionElem::Deref,\n             ProjectionElem::Field(ref f, ty) =>\n-                ProjectionElem::Field(f.clone(), ty.clone()),\n+                ProjectionElem::Field(f.clone(), ty.lift()),\n             ProjectionElem::Index(ref i) =>\n                 ProjectionElem::Index(i.lift()),\n             ProjectionElem::Subslice {from, to} =>"}]}