{"sha": "c2da477853e1bd8e3a6077d17efabc7dc9b1b792", "node_id": "C_kwDOAAsO6NoAKGMyZGE0Nzc4NTNlMWJkOGUzYTYwNzdkMTdlZmFiYzdkYzliMWI3OTI", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-02-17T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-02-19T16:10:11Z"}, "message": "Fix pretty printing of enums without variants\n\n92d20c4aaddea9507f8ad37fe37c551219153bbf removed no-variants special\ncase from try_destructure_const with expectation that this case would be\nhandled gracefully when read_discriminant returns an error.\n\nAlas in that case read_discriminant succeeds while returning a\nnon-existing variant, so the special case is still necessary.", "tree": {"sha": "7446203105f981fce67a2e811490f02c88e895fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7446203105f981fce67a2e811490f02c88e895fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2da477853e1bd8e3a6077d17efabc7dc9b1b792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2da477853e1bd8e3a6077d17efabc7dc9b1b792", "html_url": "https://github.com/rust-lang/rust/commit/c2da477853e1bd8e3a6077d17efabc7dc9b1b792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2da477853e1bd8e3a6077d17efabc7dc9b1b792/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e08d5693609a659e45025b8ea4dbd9efa342fa68", "url": "https://api.github.com/repos/rust-lang/rust/commits/e08d5693609a659e45025b8ea4dbd9efa342fa68", "html_url": "https://github.com/rust-lang/rust/commit/e08d5693609a659e45025b8ea4dbd9efa342fa68"}], "stats": {"total": 140, "additions": 75, "deletions": 65}, "files": [{"sha": "724f92243d07ee73116b46cfd0c5c6ffa18fe68a", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2da477853e1bd8e3a6077d17efabc7dc9b1b792/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da477853e1bd8e3a6077d17efabc7dc9b1b792/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=c2da477853e1bd8e3a6077d17efabc7dc9b1b792", "patch": "@@ -147,6 +147,10 @@ pub(crate) fn try_destructure_const<'tcx>(\n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n         ty::Array(_, len) => (usize::try_from(len.eval_usize(tcx, param_env)).unwrap(), None, op),\n+        // Checks if we have any variants, to avoid downcasting to a non-existing variant (when\n+        // there are no variants `read_discriminant` successfully returns a non-existing variant\n+        // index).\n+        ty::Adt(def, _) if def.variants.is_empty() => throw_ub!(Unreachable),\n         ty::Adt(def, _) => {\n             let variant = ecx.read_discriminant(&op)?.1;\n             let down = ecx.operand_downcast(&op, variant)?;"}, {"sha": "03f827f63f37fe43be26ff06ffea1a069d249d7d", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 45, "deletions": 50, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c2da477853e1bd8e3a6077d17efabc7dc9b1b792/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c2da477853e1bd8e3a6077d17efabc7dc9b1b792/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=c2da477853e1bd8e3a6077d17efabc7dc9b1b792", "patch": "@@ -2,68 +2,63 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:15:11: 15:11\n-      let _1: std::option::Option<()>;     // in scope 0 at $DIR/invalid_constant.rs:16:5: 16:12\n-      let mut _2: std::option::Option<std::option::Option<()>>; // in scope 0 at $DIR/invalid_constant.rs:16:7: 16:11\n-      let _3: main::Union;                 // in scope 0 at $DIR/invalid_constant.rs:22:9: 22:22\n+      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:13:11: 13:11\n+      let _1: main::InvalidChar;           // in scope 0 at $DIR/invalid_constant.rs:19:9: 19:22\n+      let mut _3: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:26:25: 26:46\n+      let mut _5: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:33:35: 33:56\n       scope 1 {\n-          debug _invalid_char => _3;       // in scope 1 at $DIR/invalid_constant.rs:22:9: 22:22\n-      }\n-      scope 2 (inlined f) {                // at $DIR/invalid_constant.rs:16:5: 16:12\n-          debug x => _2;                   // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n-          let mut _4: isize;               // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n-          let _5: std::option::Option<()>; // in scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n-          scope 3 {\n-              debug y => _5;               // in scope 3 at $DIR/invalid_constant.rs:16:5: 16:12\n+          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:19:9: 19:22\n+          let _2: [main::InvalidTag; 1];   // in scope 1 at $DIR/invalid_constant.rs:26:9: 26:21\n+          scope 2 {\n+              debug _invalid_tag => _2;    // in scope 2 at $DIR/invalid_constant.rs:26:9: 26:21\n+              let _4: [main::NoVariants; 1]; // in scope 2 at $DIR/invalid_constant.rs:33:9: 33:31\n+              scope 3 {\n+                  debug _enum_without_variants => _4; // in scope 3 at $DIR/invalid_constant.rs:33:9: 33:31\n+              }\n           }\n       }\n   \n       bb0: {\n-          discriminant(_2) = 0;            // scope 0 at $DIR/invalid_constant.rs:16:7: 16:11\n--         _4 = discriminant(_2);           // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n--         switchInt(move _4) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n-+         _4 = const 0_isize;              // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n-+         switchInt(const 0_isize) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n-      }\n-  \n-      bb1: {\n--         _3 = const { Union { int: 0x110001 } }; // scope 0 at $DIR/invalid_constant.rs:22:25: 22:58\n-+         _3 = const main::Union { int: 1114113_u32, chr: {transmute(0x00110001): char} }; // scope 0 at $DIR/invalid_constant.rs:22:25: 22:58\n+          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:19:9: 19:22\n+-         _1 = const { InvalidChar { int: 0x110001 } }; // scope 0 at $DIR/invalid_constant.rs:19:25: 19:64\n++         _1 = const InvalidChar { int: 1114113_u32, chr: {transmute(0x00110001): char} }; // scope 0 at $DIR/invalid_constant.rs:19:25: 19:64\n                                            // ty::Const\n-                                           // + ty: main::Union\n--                                          // + val: Unevaluated(main::{constant#0}, [main::Union], None)\n+                                           // + ty: main::InvalidChar\n+-                                          // + val: Unevaluated(main::{constant#0}, [main::InvalidChar], None)\n +                                          // + val: Value(Scalar(0x00110001))\n                                            // mir::Constant\n-                                           // + span: $DIR/invalid_constant.rs:22:25: 22:58\n--                                          // + literal: Const { ty: main::Union, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:8 ~ invalid_constant[726d]::main::{constant#0}), const_param_did: None }, substs: [main::Union], promoted: None }) }\n-+                                          // + literal: Const { ty: main::Union, val: Value(Scalar(0x00110001)) }\n-          nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 23:2\n-          return;                          // scope 0 at $DIR/invalid_constant.rs:23:2: 23:2\n-      }\n-  \n-      bb2: {\n--         _5 = ((_2 as Some).0: std::option::Option<()>); // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n--         _1 = _5;                         // scope 3 at $DIR/invalid_constant.rs:16:5: 16:12\n-+         _5 = const Scalar(0x02): Option::<()>; // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n+                                           // + span: $DIR/invalid_constant.rs:19:25: 19:64\n+-                                          // + literal: Const { ty: main::InvalidChar, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ invalid_constant[726d]::main::{constant#0}), const_param_did: None }, substs: [main::InvalidChar], promoted: None }) }\n++                                          // + literal: Const { ty: main::InvalidChar, val: Value(Scalar(0x00110001)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/invalid_constant.rs:26:9: 26:21\n+          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:26:25: 26:46\n+          (_3.0: u32) = const 4_u32;       // scope 1 at $DIR/invalid_constant.rs:26:25: 26:46\n+-         _2 = [move _3];                  // scope 1 at $DIR/invalid_constant.rs:26:24: 26:47\n++         _2 = [const InvalidTag { int: 4_u32, e: Scalar(0x00000004): E }]; // scope 1 at $DIR/invalid_constant.rs:26:24: 26:47\n +                                          // ty::Const\n-+                                          // + ty: std::option::Option<()>\n-+                                          // + val: Value(Scalar(0x02))\n++                                          // + ty: main::InvalidTag\n++                                          // + val: Value(Scalar(0x00000004))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:16:5: 16:12\n-+                                          // + literal: Const { ty: std::option::Option<()>, val: Value(Scalar(0x02)) }\n-+         _1 = const Scalar(0x02): Option::<()>; // scope 3 at $DIR/invalid_constant.rs:16:5: 16:12\n++                                          // + span: $DIR/invalid_constant.rs:26:24: 26:47\n++                                          // + literal: Const { ty: main::InvalidTag, val: Value(Scalar(0x00000004)) }\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:26:46: 26:47\n+          StorageLive(_4);                 // scope 2 at $DIR/invalid_constant.rs:33:9: 33:31\n+          StorageLive(_5);                 // scope 2 at $DIR/invalid_constant.rs:33:35: 33:56\n+          (_5.0: u32) = const 0_u32;       // scope 2 at $DIR/invalid_constant.rs:33:35: 33:56\n+-         _4 = [move _5];                  // scope 2 at $DIR/invalid_constant.rs:33:34: 33:57\n++         _4 = [const NoVariants { int: 0_u32, empty: Scalar(<ZST>): Empty }]; // scope 2 at $DIR/invalid_constant.rs:33:34: 33:57\n +                                          // ty::Const\n-+                                          // + ty: std::option::Option<()>\n-+                                          // + val: Value(Scalar(0x02))\n++                                          // + ty: main::NoVariants\n++                                          // + val: Value(Scalar(0x00000000))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:16:5: 16:12\n-+                                          // + literal: Const { ty: std::option::Option<()>, val: Value(Scalar(0x02)) }\n-          goto -> bb1;                     // scope 0 at $DIR/invalid_constant.rs:10:20: 10:21\n-      }\n-  \n-      bb3: {\n-          discriminant(_1) = 0;            // scope 2 at $DIR/invalid_constant.rs:16:5: 16:12\n-          goto -> bb1;                     // scope 0 at $DIR/invalid_constant.rs:9:17: 9:21\n++                                          // + span: $DIR/invalid_constant.rs:33:34: 33:57\n++                                          // + literal: Const { ty: main::NoVariants, val: Value(Scalar(0x00000000)) }\n+          StorageDead(_5);                 // scope 2 at $DIR/invalid_constant.rs:33:56: 33:57\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:13:11: 34:2\n+          StorageDead(_4);                 // scope 2 at $DIR/invalid_constant.rs:34:1: 34:2\n+          StorageDead(_2);                 // scope 1 at $DIR/invalid_constant.rs:34:1: 34:2\n+          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:34:1: 34:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:34:2: 34:2\n       }\n   }\n   "}, {"sha": "e0879cf4800caa4219243a89c5f997fd73a26745", "filename": "src/test/mir-opt/const_prop/invalid_constant.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c2da477853e1bd8e3a6077d17efabc7dc9b1b792/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da477853e1bd8e3a6077d17efabc7dc9b1b792/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=c2da477853e1bd8e3a6077d17efabc7dc9b1b792", "patch": "@@ -1,23 +1,34 @@\n-// Verify that we can pretty print invalid constant introduced\n-// by constant propagation. Regression test for issue #93688.\n-//\n-// compile-flags: -Copt-level=0 -Zinline-mir\n+// Verify that we can pretty print invalid constants.\n+\n #![feature(inline_const)]\n-#[inline(always)]\n-pub fn f(x: Option<Option<()>>) -> Option<()> {\n-    match x {\n-        None => None,\n-        Some(y) => y,\n-    }\n-}\n+\n+#[derive(Copy, Clone)]\n+#[repr(u32)]\n+enum E { A, B, C }\n+\n+#[derive(Copy, Clone)]\n+enum Empty {}\n \n // EMIT_MIR invalid_constant.main.ConstProp.diff\n fn main() {\n-    f(None);\n-\n-    union Union {\n+    // An invalid char.\n+    union InvalidChar {\n         int: u32,\n         chr: char,\n     }\n-    let _invalid_char = const { Union { int: 0x110001 } };\n+    let _invalid_char = const { InvalidChar { int: 0x110001 } };\n+\n+    // An enum with an invalid tag. Regression test for #93688.\n+    union InvalidTag {\n+        int: u32,\n+        e: E,\n+    }\n+    let _invalid_tag = [InvalidTag { int: 4 }];\n+\n+    // An enum without variants. Regression test for #94073.\n+    union NoVariants {\n+        int: u32,\n+        empty: Empty,\n+    }\n+    let _enum_without_variants = [NoVariants { int: 0 }];\n }"}]}