{"sha": "519651accaa8352747dd1019b4396bdd77d31ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOTY1MWFjY2FhODM1Mjc0N2RkMTAxOWI0Mzk2YmRkNzdkMzFhYzc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-22T14:10:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-22T14:10:13Z"}, "message": "Rollup merge of #52508 - joshtriplett:dangling-not-sentinel, r=Mark-Simulacrum\n\nDocument that Unique::empty() and NonNull::dangling() aren't sentinel values\n\nThe documentation of Unique::empty() and NonNull::dangling() could\npotentially suggest that they work as sentinel values indicating a\nnot-yet-initialized pointer. However, they both declare a non-null\npointer equal to the alignment of the type, which could potentially\nreference a valid value of that type (specifically, the first such valid\nvalue in memory). Explicitly document that the return value of these\nfunctions does not work as a sentinel value.", "tree": {"sha": "0c2e949abb6e1311eeccb781bd8d63efdcc96946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2e949abb6e1311eeccb781bd8d63efdcc96946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/519651accaa8352747dd1019b4396bdd77d31ac7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbVJBFCRBK7hj4Ov3rIwAAdHIIAHmN5uapehY+Wvc08ky55MH1\nP1TUj6t6l9o4UKvJYJK3wCcDBoiKXGmAoy/+ye0XpDIXYZR0Vln5KpXHxt2G7Jqd\noev3ujYJZEWc30M5SA+P+559BXKN4atetMQHOEZRSMHsN89QLOTMZ9qcgahIsD7Y\nA2JUhIA0vmr5lZJwFuj80BNwVXQe9q6RKXOet4wDyPWC49pCoeGpULEiFEgNlCFa\nVoPRw6JgBse2GxbI9nCUxyqJpMxFE6Z6y4VBlN2sQqyiBccxcIUmtgjXydc4dj1r\nRDXo9due2AsepX5gf3EdONR+M7V204S6/P/xpDQmtwP1Uc6EzJ4W4lIRIjRNoG8=\n=uc9l\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c2e949abb6e1311eeccb781bd8d63efdcc96946\nparent 82cdbf1d3ac67b4d1abf37ce748465a6ed97888c\nparent ce756321ba888c7701cb81febd1de2bd98f87724\nauthor kennytm <kennytm@gmail.com> 1532268613 +0800\ncommitter GitHub <noreply@github.com> 1532268613 +0800\n\nRollup merge of #52508 - joshtriplett:dangling-not-sentinel, r=Mark-Simulacrum\n\nDocument that Unique::empty() and NonNull::dangling() aren't sentinel values\n\nThe documentation of Unique::empty() and NonNull::dangling() could\npotentially suggest that they work as sentinel values indicating a\nnot-yet-initialized pointer. However, they both declare a non-null\npointer equal to the alignment of the type, which could potentially\nreference a valid value of that type (specifically, the first such valid\nvalue in memory). Explicitly document that the return value of these\nfunctions does not work as a sentinel value.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/519651accaa8352747dd1019b4396bdd77d31ac7", "html_url": "https://github.com/rust-lang/rust/commit/519651accaa8352747dd1019b4396bdd77d31ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/519651accaa8352747dd1019b4396bdd77d31ac7/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82cdbf1d3ac67b4d1abf37ce748465a6ed97888c", "url": "https://api.github.com/repos/rust-lang/rust/commits/82cdbf1d3ac67b4d1abf37ce748465a6ed97888c", "html_url": "https://github.com/rust-lang/rust/commit/82cdbf1d3ac67b4d1abf37ce748465a6ed97888c"}, {"sha": "ce756321ba888c7701cb81febd1de2bd98f87724", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce756321ba888c7701cb81febd1de2bd98f87724", "html_url": "https://github.com/rust-lang/rust/commit/ce756321ba888c7701cb81febd1de2bd98f87724"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "d8e061496d91569adf71bf4d820e4c0e4ee36294", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/519651accaa8352747dd1019b4396bdd77d31ac7/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519651accaa8352747dd1019b4396bdd77d31ac7/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=519651accaa8352747dd1019b4396bdd77d31ac7", "patch": "@@ -2703,6 +2703,11 @@ impl<T: Sized> Unique<T> {\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n+    ///\n+    /// Note that the pointer value may potentially represent a valid pointer to\n+    /// a `T`, which means this must not be used as a \"not yet initialized\"\n+    /// sentinel value. Types that lazily allocate must track initialization by\n+    /// some other means.\n     // FIXME: rename to dangling() to match NonNull?\n     pub const fn empty() -> Self {\n         unsafe {\n@@ -2834,6 +2839,11 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n+    ///\n+    /// Note that the pointer value may potentially represent a valid pointer to\n+    /// a `T`, which means this must not be used as a \"not yet initialized\"\n+    /// sentinel value. Types that lazily allocate must track initialization by\n+    /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn dangling() -> Self {\n         unsafe {"}]}