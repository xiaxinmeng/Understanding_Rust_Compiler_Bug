{"sha": "b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Mjk4Mjc1OWNiY2RkNmYyZTE2MmZjZjRhNDU2NTZkM2FkMDVhZjU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-09-11T06:26:57Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-09-11T06:26:57Z"}, "message": "run rustfmt", "tree": {"sha": "0ead842aaad6727d7454b1d524de7ac1e056edc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ead842aaad6727d7454b1d524de7ac1e056edc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "html_url": "https://github.com/rust-lang/rust/commit/b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12bb7d668dd90888e99da8c59ae70fabd55f69af", "url": "https://api.github.com/repos/rust-lang/rust/commits/12bb7d668dd90888e99da8c59ae70fabd55f69af", "html_url": "https://github.com/rust-lang/rust/commit/12bb7d668dd90888e99da8c59ae70fabd55f69af"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "882d9889742c95df2e1be12f2afdce749084dfb5", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "patch": "@@ -11,7 +11,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{sext, sugg, is_type_diagnostic_item};\n+use crate::utils::{is_type_diagnostic_item, sext, sugg};\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::mem_categorization::Categorization;"}, {"sha": "54c93ca0d4e5651b451f15213cfe85c89cbd9a87", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "patch": "@@ -16,16 +16,16 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::Span;\n-use syntax::symbol::{sym, Symbol, LocalInternedString};\n+use syntax::symbol::{sym, LocalInternedString, Symbol};\n \n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n     get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n     is_ctor_function, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path,\n-    match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, remove_blocks,\n+    match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, paths, remove_blocks,\n     return_ty, same_tys, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n-    span_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth,\n-    SpanlessEq, sugg, paths, span_help_and_lint\n+    span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, sugg, walk_ptrs_ty,\n+    walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -2988,7 +2988,7 @@ fn contains_return(expr: &hir::Expr) -> bool {\n         }\n     }\n \n-    let mut visitor = RetCallFinder{ found: false };\n+    let mut visitor = RetCallFinder { found: false };\n     visitor.visit_expr(expr);\n     visitor.found\n }"}, {"sha": "16693d8209bc4ae80be5c811e7a8b3c18c440a1f", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::ptr::get_spans;\n use crate::utils::{\n-    get_trait_def_id, implements_trait, is_copy, is_self, match_type, multispan_sugg, paths, snippet, snippet_opt,\n-    span_lint_and_then, is_type_diagnostic_item,\n+    get_trait_def_id, implements_trait, is_copy, is_self, is_type_diagnostic_item, match_type, multispan_sugg, paths,\n+    snippet, snippet_opt, span_lint_and_then,\n };\n use if_chain::if_chain;\n use matches::matches;"}, {"sha": "d95d61e4027eb2eb64f955a429eae46c6bf30026", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "patch": "@@ -1,8 +1,10 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n use crate::utils::ptr::get_spans;\n-use crate::utils::{match_qpath, is_type_diagnostic_item, match_type, paths, snippet_opt, \n-                   span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n+use crate::utils::{\n+    is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then,\n+    walk_ptrs_hir_ty,\n+};\n use if_chain::if_chain;\n use rustc::hir::QPath;\n use rustc::hir::*;"}, {"sha": "9940269e5b340964f1785c24241078cde4b9fe65", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    differing_macro_contexts, match_type, is_type_diagnostic_item, paths, snippet,\n-    span_lint_and_then, walk_ptrs_ty, SpanlessEq,\n+    differing_macro_contexts, is_type_diagnostic_item, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty,\n+    SpanlessEq,\n };\n use if_chain::if_chain;\n use matches::matches;"}, {"sha": "41b472b2764aee26604bed007617f83cc6b91ec6", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "patch": "@@ -47,8 +47,8 @@ use syntax::ext::hygiene::ExpnKind;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol::{kw, Symbol};\n \n-use crate::reexport::*;\n use crate::consts::{constant, Constant};\n+use crate::reexport::*;\n \n /// Returns `true` if the two spans come from differing expansions (i.e., one is\n /// from a macro and one isn't).\n@@ -671,15 +671,17 @@ pub fn walk_ptrs_ty_depth(ty: Ty<'_>) -> (Ty<'_>, usize) {\n }\n \n /// Checks whether the given expression is a constant integer of the given value.\n-/// unlike `is_integer_literal`, this version does const folding \n+/// unlike `is_integer_literal`, this version does const folding\n pub fn is_integer_const(cx: &LateContext<'_, '_>, e: &Expr, value: u128) -> bool {\n     if is_integer_literal(e, value) {\n         return true;\n     }\n     let map = cx.tcx.hir();\n     let parent_item = map.get_parent_item(e.hir_id);\n-    if let Some((Constant::Int(v), _)) = map.maybe_body_owned_by(parent_item)\n-            .and_then(|body_id| constant(cx, cx.tcx.body_tables(body_id), e)) {\n+    if let Some((Constant::Int(v), _)) = map\n+        .maybe_body_owned_by(parent_item)\n+        .and_then(|body_id| constant(cx, cx.tcx.body_tables(body_id), e))\n+    {\n         value == v\n     } else {\n         false"}, {"sha": "198d9862e3f72c168ec6bfd252a117247734dc03", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "patch": "@@ -99,7 +99,6 @@ fn test_or_with_ctors() {\n         .or(Some(Bar(b, Duration::from_secs(2))));\n }\n \n-\n // Issue 4514 - early return\n fn f() -> Option<()> {\n     let a = Some(1);\n@@ -110,5 +109,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-\n fn main() {}"}, {"sha": "35fd0a30f6ce121e5fc49f6829d43ef5d956287a", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b72982759cbcdd6f2e162fcf4a45656d3ad05af5/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=b72982759cbcdd6f2e162fcf4a45656d3ad05af5", "patch": "@@ -99,7 +99,6 @@ fn test_or_with_ctors() {\n         .or(Some(Bar(b, Duration::from_secs(2))));\n }\n \n-\n // Issue 4514 - early return\n fn f() -> Option<()> {\n     let a = Some(1);\n@@ -110,5 +109,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-\n fn main() {}"}]}