{"sha": "43c4b81be7b35a3d1c60590e6f9b9270e8127aeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYzRiODFiZTdiMzVhM2QxYzYwNTkwZTZmOWI5MjcwZTgxMjdhZWI=", "commit": {"author": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2019-10-03T22:00:03Z"}, "committer": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2019-10-04T07:47:21Z"}, "message": "Add C ABI for wasm-bindgen compat", "tree": {"sha": "0bbfb92c8631d9fc4b04ccdd9ff0ccc9ede17e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bbfb92c8631d9fc4b04ccdd9ff0ccc9ede17e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43c4b81be7b35a3d1c60590e6f9b9270e8127aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43c4b81be7b35a3d1c60590e6f9b9270e8127aeb", "html_url": "https://github.com/rust-lang/rust/commit/43c4b81be7b35a3d1c60590e6f9b9270e8127aeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43c4b81be7b35a3d1c60590e6f9b9270e8127aeb/comments", "author": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63955bbdf96e39f2005ccb92c4e1c9e5304b685e", "url": "https://api.github.com/repos/rust-lang/rust/commits/63955bbdf96e39f2005ccb92c4e1c9e5304b685e", "html_url": "https://github.com/rust-lang/rust/commit/63955bbdf96e39f2005ccb92c4e1c9e5304b685e"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "17bad189bcfdad0d72d204b7272d9364d965b74e", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43c4b81be7b35a3d1c60590e6f9b9270e8127aeb/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43c4b81be7b35a3d1c60590e6f9b9270e8127aeb/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=43c4b81be7b35a3d1c60590e6f9b9270e8127aeb", "patch": "@@ -21,6 +21,7 @@ mod x86;\n mod x86_64;\n mod x86_win64;\n mod wasm32;\n+mod wasm32_bindgen_compat;\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum PassMode {\n@@ -564,6 +565,8 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" => riscv::compute_abi_info(self, 32),\n             \"riscv64\" => riscv::compute_abi_info(self, 64),\n+            \"wasm32\" if cx.target_spec().target_os != \"emscripten\"\n+                => wasm32_bindgen_compat::compute_abi_info(self),\n             \"wasm32\" | \"asmjs\" => wasm32::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }"}, {"sha": "2645e30594ceae0725fff9690ba20309bf6156b6", "filename": "src/librustc_target/abi/call/wasm32_bindgen_compat.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/43c4b81be7b35a3d1c60590e6f9b9270e8127aeb/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43c4b81be7b35a3d1c60590e6f9b9270e8127aeb/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs?ref=43c4b81be7b35a3d1c60590e6f9b9270e8127aeb", "patch": "@@ -0,0 +1,27 @@\n+// This is not and has never been a correct C ABI for WebAssembly, but\n+// for a long time this was the C ABI that Rust used. wasm-bindgen\n+// depends on ABI details for this ABI and is incompatible with the\n+// correct C ABI, so this ABI is being kept around until wasm-bindgen\n+// can be fixed to work with the correct ABI. See #63649 for further\n+// discussion.\n+\n+use crate::abi::call::{FnType, ArgType};\n+\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n+    ret.extend_integer_width_to(32);\n+}\n+\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n+    arg.extend_integer_width_to(32);\n+}\n+\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(&mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(arg);\n+    }\n+}"}]}