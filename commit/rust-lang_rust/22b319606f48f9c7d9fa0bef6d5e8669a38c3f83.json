{"sha": "22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "node_id": "C_kwDOAAsO6NoAKDIyYjMxOTYwNmY0OGY5YzdkOWZhMGJlZjZkNWU4NjY5YTM4YzNmODM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T09:52:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T09:52:27Z"}, "message": "Auto merge of #10753 - disco07:master, r=xFrednet\n\nredundant_pattern_matching\n\nThis PR try to solve this issue https://github.com/rust-lang/rust-clippy/pull/10726,\nbut it enter in conflict with another test.\n\nchangelog: none\n\nTry to test this:\n```\nlet _w = match x {\n     Some(_) => true,\n     _ => false,\n};\n```\n\nthis happen:\n```\n error: match expression looks like `matches!` macro\n   --> $DIR/match_expr_like_matches_macro.rs:21:14\n    |\n LL |       let _w = match x {\n    |  ______________^\n LL | |         Some(_) => true,\n LL | |         _ => false,\n LL | |     };\n    | |_____^ help: try this: `matches!(x, Some(_))`\n\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/match_expr_like_matches_macro.rs:21:14\n+   |\n+LL |       let _w = match x {\n+   |  ______________^\n+LL | |         Some(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_some()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n```\nI need some help to fix this. Thanks", "tree": {"sha": "87732db781597aa06e04adbd105e047aa26f762c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87732db781597aa06e04adbd105e047aa26f762c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "html_url": "https://github.com/rust-lang/rust/commit/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270cbeb735ee558e2ee74bfe127e1bad3d2eacc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/270cbeb735ee558e2ee74bfe127e1bad3d2eacc5", "html_url": "https://github.com/rust-lang/rust/commit/270cbeb735ee558e2ee74bfe127e1bad3d2eacc5"}, {"sha": "79a8867addbaad8c2d15adc2accf4c9d7194136a", "url": "https://api.github.com/repos/rust-lang/rust/commits/79a8867addbaad8c2d15adc2accf4c9d7194136a", "html_url": "https://github.com/rust-lang/rust/commit/79a8867addbaad8c2d15adc2accf4c9d7194136a"}], "stats": {"total": 483, "additions": 385, "deletions": 98}, "files": [{"sha": "0064619ef89d1bb4ec78d14abb972600e8f5b854", "filename": "clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -1,10 +1,12 @@\n+use super::REDUNDANT_PATTERN_MATCHING;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_lint_allowed;\n use clippy_utils::is_wild;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::span_contains_comment;\n use rustc_ast::{Attribute, LitKind};\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, BorrowKind, Expr, ExprKind, Guard, Pat};\n+use rustc_hir::{Arm, BorrowKind, Expr, ExprKind, Guard, Pat, PatKind, QPath};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty;\n use rustc_span::source_map::Spanned;\n@@ -99,6 +101,14 @@ where\n                 }\n             }\n \n+            for arm in iter_without_last.clone() {\n+                if let Some(pat) = arm.1 {\n+                    if !is_lint_allowed(cx, REDUNDANT_PATTERN_MATCHING, pat.hir_id) && is_some(pat.kind) {\n+                        return false;\n+                    }\n+                }\n+            }\n+\n             // The suggestion may be incorrect, because some arms can have `cfg` attributes\n             // evaluated into `false` and so such arms will be stripped before.\n             let mut applicability = Applicability::MaybeIncorrect;\n@@ -170,3 +180,13 @@ fn find_bool_lit(ex: &ExprKind<'_>) -> Option<bool> {\n         _ => None,\n     }\n }\n+\n+fn is_some(path_kind: PatKind<'_>) -> bool {\n+    match path_kind {\n+        PatKind::TupleStruct(QPath::Resolved(_, path), [first, ..], _) if is_wild(first) => {\n+            let name = path.segments[0].ident;\n+            name.name == rustc_span::sym::Some\n+        },\n+        _ => false,\n+    }\n+}"}, {"sha": "7a06443f5d9d2ee48432dc1da2c9ef4dee48679d", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 148, "deletions": 67, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -189,73 +189,7 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n     if arms.len() == 2 {\n         let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n-        let found_good_method = match node_pair {\n-            (\n-                PatKind::TupleStruct(ref path_left, patterns_left, _),\n-                PatKind::TupleStruct(ref path_right, patterns_right, _),\n-            ) if patterns_left.len() == 1 && patterns_right.len() == 1 => {\n-                if let (PatKind::Wild, PatKind::Wild) = (&patterns_left[0].kind, &patterns_right[0].kind) {\n-                    find_good_method_for_match(\n-                        cx,\n-                        arms,\n-                        path_left,\n-                        path_right,\n-                        Item::Lang(ResultOk),\n-                        Item::Lang(ResultErr),\n-                        \"is_ok()\",\n-                        \"is_err()\",\n-                    )\n-                    .or_else(|| {\n-                        find_good_method_for_match(\n-                            cx,\n-                            arms,\n-                            path_left,\n-                            path_right,\n-                            Item::Diag(sym::IpAddr, sym!(V4)),\n-                            Item::Diag(sym::IpAddr, sym!(V6)),\n-                            \"is_ipv4()\",\n-                            \"is_ipv6()\",\n-                        )\n-                    })\n-                } else {\n-                    None\n-                }\n-            },\n-            (PatKind::TupleStruct(ref path_left, patterns, _), PatKind::Path(ref path_right))\n-            | (PatKind::Path(ref path_left), PatKind::TupleStruct(ref path_right, patterns, _))\n-                if patterns.len() == 1 =>\n-            {\n-                if let PatKind::Wild = patterns[0].kind {\n-                    find_good_method_for_match(\n-                        cx,\n-                        arms,\n-                        path_left,\n-                        path_right,\n-                        Item::Lang(OptionSome),\n-                        Item::Lang(OptionNone),\n-                        \"is_some()\",\n-                        \"is_none()\",\n-                    )\n-                    .or_else(|| {\n-                        find_good_method_for_match(\n-                            cx,\n-                            arms,\n-                            path_left,\n-                            path_right,\n-                            Item::Lang(PollReady),\n-                            Item::Lang(PollPending),\n-                            \"is_ready()\",\n-                            \"is_pending()\",\n-                        )\n-                    })\n-                } else {\n-                    None\n-                }\n-            },\n-            _ => None,\n-        };\n-\n-        if let Some(good_method) = found_good_method {\n+        if let Some(good_method) = found_good_method(cx, arms, node_pair) {\n             let span = expr.span.to(op.span);\n             let result_expr = match &op.kind {\n                 ExprKind::AddrOf(_, _, borrowed) => borrowed,\n@@ -279,6 +213,127 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n     }\n }\n \n+fn found_good_method<'a>(\n+    cx: &LateContext<'_>,\n+    arms: &[Arm<'_>],\n+    node: (&PatKind<'_>, &PatKind<'_>),\n+) -> Option<&'a str> {\n+    match node {\n+        (\n+            PatKind::TupleStruct(ref path_left, patterns_left, _),\n+            PatKind::TupleStruct(ref path_right, patterns_right, _),\n+        ) if patterns_left.len() == 1 && patterns_right.len() == 1 => {\n+            if let (PatKind::Wild, PatKind::Wild) = (&patterns_left[0].kind, &patterns_right[0].kind) {\n+                find_good_method_for_match(\n+                    cx,\n+                    arms,\n+                    path_left,\n+                    path_right,\n+                    Item::Lang(ResultOk),\n+                    Item::Lang(ResultErr),\n+                    \"is_ok()\",\n+                    \"is_err()\",\n+                )\n+                .or_else(|| {\n+                    find_good_method_for_match(\n+                        cx,\n+                        arms,\n+                        path_left,\n+                        path_right,\n+                        Item::Diag(sym::IpAddr, sym!(V4)),\n+                        Item::Diag(sym::IpAddr, sym!(V6)),\n+                        \"is_ipv4()\",\n+                        \"is_ipv6()\",\n+                    )\n+                })\n+            } else {\n+                None\n+            }\n+        },\n+        (PatKind::TupleStruct(ref path_left, patterns, _), PatKind::Path(ref path_right))\n+        | (PatKind::Path(ref path_left), PatKind::TupleStruct(ref path_right, patterns, _))\n+            if patterns.len() == 1 =>\n+        {\n+            if let PatKind::Wild = patterns[0].kind {\n+                find_good_method_for_match(\n+                    cx,\n+                    arms,\n+                    path_left,\n+                    path_right,\n+                    Item::Lang(OptionSome),\n+                    Item::Lang(OptionNone),\n+                    \"is_some()\",\n+                    \"is_none()\",\n+                )\n+                .or_else(|| {\n+                    find_good_method_for_match(\n+                        cx,\n+                        arms,\n+                        path_left,\n+                        path_right,\n+                        Item::Lang(PollReady),\n+                        Item::Lang(PollPending),\n+                        \"is_ready()\",\n+                        \"is_pending()\",\n+                    )\n+                })\n+            } else {\n+                None\n+            }\n+        },\n+        (PatKind::TupleStruct(ref path_left, patterns, _), PatKind::Wild) if patterns.len() == 1 => {\n+            if let PatKind::Wild = patterns[0].kind {\n+                get_good_method(cx, arms, path_left)\n+            } else {\n+                None\n+            }\n+        },\n+        (PatKind::Path(ref path_left), PatKind::Wild) => get_good_method(cx, arms, path_left),\n+        _ => None,\n+    }\n+}\n+\n+fn get_ident(path: &QPath<'_>) -> Option<rustc_span::symbol::Ident> {\n+    match path {\n+        QPath::Resolved(_, path) => {\n+            let name = path.segments[0].ident;\n+            Some(name)\n+        },\n+        _ => None,\n+    }\n+}\n+\n+fn get_good_method<'a>(cx: &LateContext<'_>, arms: &[Arm<'_>], path_left: &QPath<'_>) -> Option<&'a str> {\n+    if let Some(name) = get_ident(path_left) {\n+        return match name.as_str() {\n+            \"Ok\" => {\n+                find_good_method_for_matches_macro(cx, arms, path_left, Item::Lang(ResultOk), \"is_ok()\", \"is_err()\")\n+            },\n+            \"Err\" => {\n+                find_good_method_for_matches_macro(cx, arms, path_left, Item::Lang(ResultErr), \"is_err()\", \"is_ok()\")\n+            },\n+            \"Some\" => find_good_method_for_matches_macro(\n+                cx,\n+                arms,\n+                path_left,\n+                Item::Lang(OptionSome),\n+                \"is_some()\",\n+                \"is_none()\",\n+            ),\n+            \"None\" => find_good_method_for_matches_macro(\n+                cx,\n+                arms,\n+                path_left,\n+                Item::Lang(OptionNone),\n+                \"is_none()\",\n+                \"is_some()\",\n+            ),\n+            _ => None,\n+        };\n+    }\n+    None\n+}\n+\n #[derive(Clone, Copy)]\n enum Item {\n     Lang(LangItem),\n@@ -345,3 +400,29 @@ fn find_good_method_for_match<'a>(\n         _ => None,\n     }\n }\n+\n+fn find_good_method_for_matches_macro<'a>(\n+    cx: &LateContext<'_>,\n+    arms: &[Arm<'_>],\n+    path_left: &QPath<'_>,\n+    expected_item_left: Item,\n+    should_be_left: &'a str,\n+    should_be_right: &'a str,\n+) -> Option<&'a str> {\n+    let first_pat = arms[0].pat;\n+\n+    let body_node_pair = if is_pat_variant(cx, first_pat, path_left, expected_item_left) {\n+        (&arms[0].body.kind, &arms[1].body.kind)\n+    } else {\n+        return None;\n+    };\n+\n+    match body_node_pair {\n+        (ExprKind::Lit(lit_left), ExprKind::Lit(lit_right)) => match (&lit_left.node, &lit_right.node) {\n+            (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n+            (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}"}, {"sha": "60f590661735cc0d20a117bb73f1be3d614db7c1", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let _y = matches!(x, Some(0));\n \n     // Lint\n-    let _w = matches!(x, Some(_));\n+    let _w = x.is_some();\n \n     // Turn into is_none\n     let _z = x.is_none();"}, {"sha": "b72fe10b748042a0965eec5a086051fea7219090", "filename": "tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -10,15 +10,17 @@ LL | |     };\n    |\n    = note: `-D clippy::match-like-matches-macro` implied by `-D warnings`\n \n-error: match expression looks like `matches!` macro\n+error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/match_expr_like_matches_macro.rs:21:14\n    |\n LL |       let _w = match x {\n    |  ______________^\n LL | |         Some(_) => true,\n LL | |         _ => false,\n LL | |     };\n-   | |_____^ help: try this: `matches!(x, Some(_))`\n+   | |_____^ help: try this: `x.is_some()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_none()`\n   --> $DIR/match_expr_like_matches_macro.rs:27:14\n@@ -29,8 +31,6 @@ LL | |         Some(_) => false,\n LL | |         None => true,\n LL | |     };\n    | |_____^ help: try this: `x.is_none()`\n-   |\n-   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: match expression looks like `matches!` macro\n   --> $DIR/match_expr_like_matches_macro.rs:33:15"}, {"sha": "accdf1da9ddc9ec50888387e4ab529801b0f3176", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -46,6 +46,7 @@ fn main() {\n     let _ = if opt.is_some() { true } else { false };\n \n     issue6067();\n+    issue10726();\n \n     let _ = if gen_opt().is_some() {\n         1\n@@ -88,3 +89,21 @@ fn issue7921() {\n     if (&None::<()>).is_none() {}\n     if (&None::<()>).is_none() {}\n }\n+\n+fn issue10726() {\n+    let x = Some(42);\n+\n+    x.is_some();\n+\n+    x.is_none();\n+\n+    x.is_none();\n+\n+    x.is_some();\n+\n+    // Don't lint\n+    match x {\n+        Some(21) => true,\n+        _ => false,\n+    };\n+}"}, {"sha": "ec684bdf71c11b5136358de1f28d7cf338f82795", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -55,6 +55,7 @@ fn main() {\n     let _ = if let Some(_) = opt { true } else { false };\n \n     issue6067();\n+    issue10726();\n \n     let _ = if let Some(_) = gen_opt() {\n         1\n@@ -103,3 +104,33 @@ fn issue7921() {\n     if let None = *(&None::<()>) {}\n     if let None = *&None::<()> {}\n }\n+\n+fn issue10726() {\n+    let x = Some(42);\n+\n+    match x {\n+        Some(_) => true,\n+        _ => false,\n+    };\n+\n+    match x {\n+        None => true,\n+        _ => false,\n+    };\n+\n+    match x {\n+        Some(_) => false,\n+        _ => true,\n+    };\n+\n+    match x {\n+        None => false,\n+        _ => true,\n+    };\n+\n+    // Don't lint\n+    match x {\n+        Some(21) => true,\n+        _ => false,\n+    };\n+}"}, {"sha": "a69eb3905205f49ffc5d9c689d23a9ceab730db2", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -77,49 +77,49 @@ LL |     let _ = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:59:20\n+  --> $DIR/redundant_pattern_matching_option.rs:60:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:61:19\n+  --> $DIR/redundant_pattern_matching_option.rs:62:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:67:12\n+  --> $DIR/redundant_pattern_matching_option.rs:68:12\n    |\n LL |     if let Some(..) = gen_opt() {}\n    |     -------^^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:82:12\n+  --> $DIR/redundant_pattern_matching_option.rs:83:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:84:12\n+  --> $DIR/redundant_pattern_matching_option.rs:85:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:86:15\n+  --> $DIR/redundant_pattern_matching_option.rs:87:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:88:15\n+  --> $DIR/redundant_pattern_matching_option.rs:89:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:90:5\n+  --> $DIR/redundant_pattern_matching_option.rs:91:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -128,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:95:5\n+  --> $DIR/redundant_pattern_matching_option.rs:96:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -137,16 +137,52 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:103:12\n+  --> $DIR/redundant_pattern_matching_option.rs:104:12\n    |\n LL |     if let None = *(&None::<()>) {}\n    |     -------^^^^----------------- help: try this: `if (&None::<()>).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:104:12\n+  --> $DIR/redundant_pattern_matching_option.rs:105:12\n    |\n LL |     if let None = *&None::<()> {}\n    |     -------^^^^--------------- help: try this: `if (&None::<()>).is_none()`\n \n-error: aborting due to 22 previous errors\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:111:5\n+   |\n+LL | /     match x {\n+LL | |         Some(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:116:5\n+   |\n+LL | /     match x {\n+LL | |         None => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:121:5\n+   |\n+LL | /     match x {\n+LL | |         Some(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:126:5\n+   |\n+LL | /     match x {\n+LL | |         None => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_some()`\n+\n+error: aborting due to 26 previous errors\n "}, {"sha": "e4032ae44b71509a9dfc17690cc2692cf4389944", "filename": "tests/ui/redundant_pattern_matching_result.fixed", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.fixed?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -43,6 +43,7 @@ fn main() {\n     issue5504();\n     issue6067();\n     issue6065();\n+    issue10726();\n \n     let _ = if gen_res().is_ok() {\n         1\n@@ -107,3 +108,28 @@ const fn issue6067() {\n \n     Err::<i32, i32>(42).is_err();\n }\n+\n+fn issue10726() {\n+    // This is optional, but it makes the examples easier\n+    let x: Result<i32, i32> = Ok(42);\n+\n+    x.is_ok();\n+\n+    x.is_err();\n+\n+    x.is_err();\n+\n+    x.is_ok();\n+\n+    // Don't lint\n+    match x {\n+        Err(16) => false,\n+        _ => true,\n+    };\n+\n+    // Don't lint\n+    match x {\n+        Ok(16) => false,\n+        _ => true,\n+    };\n+}"}, {"sha": "39eb10df8789ed5f0fbe613282e42b531cb37fc2", "filename": "tests/ui/redundant_pattern_matching_result.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.rs?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -55,6 +55,7 @@ fn main() {\n     issue5504();\n     issue6067();\n     issue6065();\n+    issue10726();\n \n     let _ = if let Ok(_) = gen_res() {\n         1\n@@ -125,3 +126,40 @@ const fn issue6067() {\n         Err(_) => true,\n     };\n }\n+\n+fn issue10726() {\n+    // This is optional, but it makes the examples easier\n+    let x: Result<i32, i32> = Ok(42);\n+\n+    match x {\n+        Ok(_) => true,\n+        _ => false,\n+    };\n+\n+    match x {\n+        Ok(_) => false,\n+        _ => true,\n+    };\n+\n+    match x {\n+        Err(_) => true,\n+        _ => false,\n+    };\n+\n+    match x {\n+        Err(_) => false,\n+        _ => true,\n+    };\n+\n+    // Don't lint\n+    match x {\n+        Err(16) => false,\n+        _ => true,\n+    };\n+\n+    // Don't lint\n+    match x {\n+        Ok(16) => false,\n+        _ => true,\n+    };\n+}"}, {"sha": "5893ae4dcc492ddef8bc14d59ce78394d36159e5", "filename": "tests/ui/redundant_pattern_matching_result.stderr", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b319606f48f9c7d9fa0bef6d5e8669a38c3f83/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.stderr?ref=22b319606f48f9c7d9fa0bef6d5e8669a38c3f83", "patch": "@@ -73,67 +73,67 @@ LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:59:20\n+  --> $DIR/redundant_pattern_matching_result.rs:60:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:61:19\n+  --> $DIR/redundant_pattern_matching_result.rs:62:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:84:19\n+  --> $DIR/redundant_pattern_matching_result.rs:85:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:85:16\n+  --> $DIR/redundant_pattern_matching_result.rs:86:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:91:12\n+  --> $DIR/redundant_pattern_matching_result.rs:92:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:92:15\n+  --> $DIR/redundant_pattern_matching_result.rs:93:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:110:12\n+  --> $DIR/redundant_pattern_matching_result.rs:111:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:112:12\n+  --> $DIR/redundant_pattern_matching_result.rs:113:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:114:15\n+  --> $DIR/redundant_pattern_matching_result.rs:115:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:116:15\n+  --> $DIR/redundant_pattern_matching_result.rs:117:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:118:5\n+  --> $DIR/redundant_pattern_matching_result.rs:119:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,13 +142,49 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:123:5\n+  --> $DIR/redundant_pattern_matching_result.rs:124:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n LL | |         Err(_) => true,\n LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n-error: aborting due to 22 previous errors\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_result.rs:134:5\n+   |\n+LL | /     match x {\n+LL | |         Ok(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_result.rs:139:5\n+   |\n+LL | /     match x {\n+LL | |         Ok(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_err()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_result.rs:144:5\n+   |\n+LL | /     match x {\n+LL | |         Err(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_result.rs:149:5\n+   |\n+LL | /     match x {\n+LL | |         Err(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `x.is_ok()`\n+\n+error: aborting due to 26 previous errors\n "}]}