{"sha": "113688cef0e98c91e803d94e4b3ab90682cc8a1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzY4OGNlZjBlOThjOTFlODAzZDk0ZTRiM2FiOTA2ODJjYzhhMWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-19T14:16:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-19T14:16:05Z"}, "message": "Clarify the meaning of no-op highlight tag", "tree": {"sha": "a00820d0b682f01f2f01d21040a577aedb53105d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a00820d0b682f01f2f01d21040a577aedb53105d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113688cef0e98c91e803d94e4b3ab90682cc8a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113688cef0e98c91e803d94e4b3ab90682cc8a1d", "html_url": "https://github.com/rust-lang/rust/commit/113688cef0e98c91e803d94e4b3ab90682cc8a1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113688cef0e98c91e803d94e4b3ab90682cc8a1d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a13947abe62a44c4ffa802be54e041a3d18e7f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a13947abe62a44c4ffa802be54e041a3d18e7f2b", "html_url": "https://github.com/rust-lang/rust/commit/a13947abe62a44c4ffa802be54e041a3d18e7f2b"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "9eb184c74bffa2e0ce8bf5cc255be4ca0184eb8d", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/113688cef0e98c91e803d94e4b3ab90682cc8a1d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113688cef0e98c91e803d94e4b3ab90682cc8a1d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=113688cef0e98c91e803d94e4b3ab90682cc8a1d", "patch": "@@ -179,6 +179,5 @@ pub(super) fn highlight_doc_comment(\n         stack.add(comment);\n     }\n     stack.pop_and_inject(None);\n-    stack\n-        .pop_and_inject(Some(Highlight::from(HighlightTag::Generic) | HighlightModifier::Injected));\n+    stack.pop_and_inject(Some(Highlight::from(HighlightTag::Dummy) | HighlightModifier::Injected));\n }"}, {"sha": "e07cfb43fe6f132d130098e5168b9a39f7e5281a", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/113688cef0e98c91e803d94e4b3ab90682cc8a1d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113688cef0e98c91e803d94e4b3ab90682cc8a1d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=113688cef0e98c91e803d94e4b3ab90682cc8a1d", "patch": "@@ -33,8 +33,8 @@ pub enum HighlightTag {\n     Operator,\n     UnresolvedReference,\n \n-    // FIXME: this one is random and don't fit with the others\n-    Generic,\n+    // For things which don't have proper Tag, but want to use modifiers.\n+    Dummy,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -90,7 +90,7 @@ impl HighlightTag {\n             HighlightTag::Comment => \"comment\",\n             HighlightTag::EscapeSequence => \"escape_sequence\",\n             HighlightTag::FormatSpecifier => \"format_specifier\",\n-            HighlightTag::Generic => \"generic\",\n+            HighlightTag::Dummy => \"dummy\",\n             HighlightTag::Keyword => \"keyword\",\n             HighlightTag::Punctuation => \"punctuation\",\n             HighlightTag::NumericLiteral => \"numeric_literal\","}, {"sha": "56aba43e86bb825257ac0414c0391076a48a6ca1", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/113688cef0e98c91e803d94e4b3ab90682cc8a1d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/113688cef0e98c91e803d94e4b3ab90682cc8a1d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=113688cef0e98c91e803d94e4b3ab90682cc8a1d", "patch": "@@ -36,7 +36,7 @@\n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n <pre><code><span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n </span><span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"punctuation\">{</span>\n     <span class=\"field declaration\">bar</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">bool</span><span class=\"punctuation\">,</span>\n@@ -50,8 +50,8 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span><span class=\"generic injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"punctuation attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"punctuation attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"punctuation injected\">:</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n+    <span class=\"comment documentation\">/// #</span><span class=\"dummy injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"punctuation attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"punctuation attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"punctuation injected\">:</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n </span>    <span class=\"comment documentation\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n         <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">bar</span><span class=\"punctuation\">:</span> <span class=\"bool_literal\">true</span> <span class=\"punctuation\">}</span>\n@@ -62,26 +62,26 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"generic injected\"> </span><span class=\"module injected\">x</span><span class=\"operator injected\">::</span><span class=\"module injected\">y</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"dummy injected\"> </span><span class=\"module injected\">x</span><span class=\"operator injected\">::</span><span class=\"module injected\">y</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"punctuation injected\">(</span><span class=\"generic injected\">foo</span><span class=\"operator injected\">.</span><span class=\"generic injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"punctuation injected\">(</span><span class=\"dummy injected\">foo</span><span class=\"operator injected\">.</span><span class=\"dummy injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"generic injected\"> </span><span class=\"operator injected\">||</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">||</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">/* multi-line\n     </span><span class=\"comment documentation\">/// </span><span class=\"comment injected\">       comment */</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"string_literal injected\">\"Foo\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"string_literal injected\">\"Foo\n     </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar\n     </span><span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"punctuation injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```rust,no_run</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"dummy injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"dummy injected\"> </span><span class=\"operator injected\">=</span><span class=\"dummy injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n </span>    <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```sh</span>"}, {"sha": "e0561b5a7a8a63645c0e9626dd3b5131a84fd3c1", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113688cef0e98c91e803d94e4b3ab90682cc8a1d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113688cef0e98c91e803d94e4b3ab90682cc8a1d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=113688cef0e98c91e803d94e4b3ab90682cc8a1d", "patch": "@@ -406,7 +406,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n         },\n         HighlightTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n-        HighlightTag::Generic => semantic_tokens::GENERIC,\n+        HighlightTag::Dummy => semantic_tokens::GENERIC,\n         HighlightTag::ByteLiteral | HighlightTag::NumericLiteral => {\n             lsp_types::SemanticTokenType::NUMBER\n         }"}]}