{"sha": "f7a0dffc7870224f87263b4cda81d98b2436d8f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YTBkZmZjNzg3MDIyNGY4NzI2M2I0Y2RhODFkOThiMjQzNmQ4ZjA=", "commit": {"author": {"name": "Jed Davis", "email": "jld@xlerb.net", "date": "2017-09-16T03:14:34Z"}, "committer": {"name": "Scott Abbey", "email": "scottabbey2@gmail.com", "date": "2017-12-22T08:34:09Z"}, "message": "Re-do the FreeBSD cross-builds to use Clang and libc++.  Fixes #44433.\n\nThe main goal here is to use FreeBSD's normal libc++, instead of\nstatically linking the libstdc++ packaged with GCC, because that\nlibstdc++ has bugs that cause rustc to deadlock inside LLVM.\n\nBut the easiest way to use libc++ is to switch the build from GCC to\nClang, and the Clang package in the Ubuntu image already knows how to\ncross-compile (given a sysroot and preferably cross-binutils), so the\ntoolchain script now uses that instead of building a custom compiler.\n\nThis also de-duplicates the `build-toolchain.sh` script.", "tree": {"sha": "a81ef3733c3e33cbdcdf98432839bf720ef7d31f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a81ef3733c3e33cbdcdf98432839bf720ef7d31f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7a0dffc7870224f87263b4cda81d98b2436d8f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a0dffc7870224f87263b4cda81d98b2436d8f0", "html_url": "https://github.com/rust-lang/rust/commit/f7a0dffc7870224f87263b4cda81d98b2436d8f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7a0dffc7870224f87263b4cda81d98b2436d8f0/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ScottAbbey", "id": 14281035, "node_id": "MDQ6VXNlcjE0MjgxMDM1", "avatar_url": "https://avatars.githubusercontent.com/u/14281035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScottAbbey", "html_url": "https://github.com/ScottAbbey", "followers_url": "https://api.github.com/users/ScottAbbey/followers", "following_url": "https://api.github.com/users/ScottAbbey/following{/other_user}", "gists_url": "https://api.github.com/users/ScottAbbey/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScottAbbey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScottAbbey/subscriptions", "organizations_url": "https://api.github.com/users/ScottAbbey/orgs", "repos_url": "https://api.github.com/users/ScottAbbey/repos", "events_url": "https://api.github.com/users/ScottAbbey/events{/privacy}", "received_events_url": "https://api.github.com/users/ScottAbbey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76f224af867b198e4051806cc6e1ac686085cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76f224af867b198e4051806cc6e1ac686085cdc", "html_url": "https://github.com/rust-lang/rust/commit/b76f224af867b198e4051806cc6e1ac686085cdc"}], "stats": {"total": 349, "additions": 115, "deletions": 234}, "files": [{"sha": "686afc97289b14c1951e39a903c0d9491683ee39", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7a0dffc7870224f87263b4cda81d98b2436d8f0/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f7a0dffc7870224f87263b4cda81d98b2436d8f0/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=f7a0dffc7870224f87263b4cda81d98b2436d8f0", "patch": "@@ -1,7 +1,7 @@\n FROM ubuntu:16.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n-  g++ \\\n+  clang \\\n   make \\\n   file \\\n   curl \\\n@@ -16,16 +16,16 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY dist-i686-freebsd/build-toolchain.sh /tmp/\n-RUN /tmp/build-toolchain.sh i686\n+COPY scripts/freebsd-toolchain.sh /tmp/\n+RUN /tmp/freebsd-toolchain.sh i686\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV \\\n     AR_i686_unknown_freebsd=i686-unknown-freebsd10-ar \\\n-    CC_i686_unknown_freebsd=i686-unknown-freebsd10-gcc \\\n-    CXX_i686_unknown_freebsd=i686-unknown-freebsd10-g++\n+    CC_i686_unknown_freebsd=i686-unknown-freebsd10-clang \\\n+    CXX_i686_unknown_freebsd=i686-unknown-freebsd10-clang++\n \n ENV HOSTS=i686-unknown-freebsd\n "}, {"sha": "3c86a8e38175eaabe43c3fcb8c2403b98ddf1b59", "filename": "src/ci/docker/dist-i686-freebsd/build-toolchain.sh", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/b76f224af867b198e4051806cc6e1ac686085cdc/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b76f224af867b198e4051806cc6e1ac686085cdc/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh?ref=b76f224af867b198e4051806cc6e1ac686085cdc", "patch": "@@ -1,112 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-ARCH=$1\n-BINUTILS=2.25.1\n-GCC=6.4.0\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir binutils\n-cd binutils\n-\n-# First up, build binutils\n-curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.bz2 | tar xjf -\n-mkdir binutils-build\n-cd binutils-build\n-hide_output ../binutils-$BINUTILS/configure \\\n-  --target=$ARCH-unknown-freebsd10\n-hide_output make -j10\n-hide_output make install\n-cd ../..\n-rm -rf binutils\n-\n-# Next, download the FreeBSD libc and relevant header files\n-\n-mkdir freebsd\n-case \"$ARCH\" in\n-    x86_64)\n-        URL=ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/10.2-RELEASE/base.txz\n-        ;;\n-    i686)\n-        URL=ftp://ftp.freebsd.org/pub/FreeBSD/releases/i386/10.2-RELEASE/base.txz\n-        ;;\n-esac\n-curl $URL | tar xJf - -C freebsd ./usr/include ./usr/lib ./lib\n-\n-dst=/usr/local/$ARCH-unknown-freebsd10\n-\n-cp -r freebsd/usr/include $dst/\n-cp freebsd/usr/lib/crt1.o $dst/lib\n-cp freebsd/usr/lib/Scrt1.o $dst/lib\n-cp freebsd/usr/lib/crti.o $dst/lib\n-cp freebsd/usr/lib/crtn.o $dst/lib\n-cp freebsd/usr/lib/libc.a $dst/lib\n-cp freebsd/usr/lib/libutil.a $dst/lib\n-cp freebsd/usr/lib/libutil_p.a $dst/lib\n-cp freebsd/usr/lib/libm.a $dst/lib\n-cp freebsd/usr/lib/librt.so.1 $dst/lib\n-cp freebsd/usr/lib/libexecinfo.so.1 $dst/lib\n-cp freebsd/lib/libc.so.7 $dst/lib\n-cp freebsd/lib/libm.so.5 $dst/lib\n-cp freebsd/lib/libutil.so.9 $dst/lib\n-cp freebsd/lib/libthr.so.3 $dst/lib/libpthread.so\n-\n-ln -s libc.so.7 $dst/lib/libc.so\n-ln -s libm.so.5 $dst/lib/libm.so\n-ln -s librt.so.1 $dst/lib/librt.so\n-ln -s libutil.so.9 $dst/lib/libutil.so\n-ln -s libexecinfo.so.1 $dst/lib/libexecinfo.so\n-rm -rf freebsd\n-\n-# Finally, download and build gcc to target FreeBSD\n-mkdir gcc\n-cd gcc\n-curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.gz | tar xzf -\n-cd gcc-$GCC\n-./contrib/download_prerequisites\n-\n-mkdir ../gcc-build\n-cd ../gcc-build\n-hide_output ../gcc-$GCC/configure                \\\n-  --enable-languages=c,c++                       \\\n-  --target=$ARCH-unknown-freebsd10               \\\n-  --disable-multilib                             \\\n-  --disable-nls                                  \\\n-  --disable-libgomp                              \\\n-  --disable-libquadmath                          \\\n-  --disable-libssp                               \\\n-  --disable-libvtv                               \\\n-  --disable-libcilkrts                           \\\n-  --disable-libada                               \\\n-  --disable-libsanitizer                         \\\n-  --disable-libquadmath-support                  \\\n-  --disable-lto\n-hide_output make -j10\n-hide_output make install\n-cd ../..\n-rm -rf gcc"}, {"sha": "7483d395622c89a21201e732f73d9e9a1f5f0b41", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7a0dffc7870224f87263b4cda81d98b2436d8f0/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f7a0dffc7870224f87263b4cda81d98b2436d8f0/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=f7a0dffc7870224f87263b4cda81d98b2436d8f0", "patch": "@@ -1,7 +1,7 @@\n FROM ubuntu:16.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n-  g++ \\\n+  clang \\\n   make \\\n   file \\\n   curl \\\n@@ -16,16 +16,16 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY dist-x86_64-freebsd/build-toolchain.sh /tmp/\n-RUN /tmp/build-toolchain.sh x86_64\n+COPY scripts/freebsd-toolchain.sh /tmp/\n+RUN /tmp/freebsd-toolchain.sh x86_64\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV \\\n     AR_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-ar \\\n-    CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-gcc \\\n-    CXX_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-g++\n+    CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-clang \\\n+    CXX_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-clang++\n \n ENV HOSTS=x86_64-unknown-freebsd\n "}, {"sha": "3c86a8e38175eaabe43c3fcb8c2403b98ddf1b59", "filename": "src/ci/docker/dist-x86_64-freebsd/build-toolchain.sh", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/b76f224af867b198e4051806cc6e1ac686085cdc/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b76f224af867b198e4051806cc6e1ac686085cdc/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh?ref=b76f224af867b198e4051806cc6e1ac686085cdc", "patch": "@@ -1,112 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-ARCH=$1\n-BINUTILS=2.25.1\n-GCC=6.4.0\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir binutils\n-cd binutils\n-\n-# First up, build binutils\n-curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.bz2 | tar xjf -\n-mkdir binutils-build\n-cd binutils-build\n-hide_output ../binutils-$BINUTILS/configure \\\n-  --target=$ARCH-unknown-freebsd10\n-hide_output make -j10\n-hide_output make install\n-cd ../..\n-rm -rf binutils\n-\n-# Next, download the FreeBSD libc and relevant header files\n-\n-mkdir freebsd\n-case \"$ARCH\" in\n-    x86_64)\n-        URL=ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/10.2-RELEASE/base.txz\n-        ;;\n-    i686)\n-        URL=ftp://ftp.freebsd.org/pub/FreeBSD/releases/i386/10.2-RELEASE/base.txz\n-        ;;\n-esac\n-curl $URL | tar xJf - -C freebsd ./usr/include ./usr/lib ./lib\n-\n-dst=/usr/local/$ARCH-unknown-freebsd10\n-\n-cp -r freebsd/usr/include $dst/\n-cp freebsd/usr/lib/crt1.o $dst/lib\n-cp freebsd/usr/lib/Scrt1.o $dst/lib\n-cp freebsd/usr/lib/crti.o $dst/lib\n-cp freebsd/usr/lib/crtn.o $dst/lib\n-cp freebsd/usr/lib/libc.a $dst/lib\n-cp freebsd/usr/lib/libutil.a $dst/lib\n-cp freebsd/usr/lib/libutil_p.a $dst/lib\n-cp freebsd/usr/lib/libm.a $dst/lib\n-cp freebsd/usr/lib/librt.so.1 $dst/lib\n-cp freebsd/usr/lib/libexecinfo.so.1 $dst/lib\n-cp freebsd/lib/libc.so.7 $dst/lib\n-cp freebsd/lib/libm.so.5 $dst/lib\n-cp freebsd/lib/libutil.so.9 $dst/lib\n-cp freebsd/lib/libthr.so.3 $dst/lib/libpthread.so\n-\n-ln -s libc.so.7 $dst/lib/libc.so\n-ln -s libm.so.5 $dst/lib/libm.so\n-ln -s librt.so.1 $dst/lib/librt.so\n-ln -s libutil.so.9 $dst/lib/libutil.so\n-ln -s libexecinfo.so.1 $dst/lib/libexecinfo.so\n-rm -rf freebsd\n-\n-# Finally, download and build gcc to target FreeBSD\n-mkdir gcc\n-cd gcc\n-curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.gz | tar xzf -\n-cd gcc-$GCC\n-./contrib/download_prerequisites\n-\n-mkdir ../gcc-build\n-cd ../gcc-build\n-hide_output ../gcc-$GCC/configure                \\\n-  --enable-languages=c,c++                       \\\n-  --target=$ARCH-unknown-freebsd10               \\\n-  --disable-multilib                             \\\n-  --disable-nls                                  \\\n-  --disable-libgomp                              \\\n-  --disable-libquadmath                          \\\n-  --disable-libssp                               \\\n-  --disable-libvtv                               \\\n-  --disable-libcilkrts                           \\\n-  --disable-libada                               \\\n-  --disable-libsanitizer                         \\\n-  --disable-libquadmath-support                  \\\n-  --disable-lto\n-hide_output make -j10\n-hide_output make install\n-cd ../..\n-rm -rf gcc"}, {"sha": "15ed318f8ce85ed2bf73efdfab98eedaa59ad06c", "filename": "src/ci/docker/scripts/freebsd-toolchain.sh", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/f7a0dffc7870224f87263b4cda81d98b2436d8f0/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f7a0dffc7870224f87263b4cda81d98b2436d8f0/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh?ref=f7a0dffc7870224f87263b4cda81d98b2436d8f0", "patch": "@@ -0,0 +1,103 @@\n+#!/bin/bash\n+# Copyright 2016-2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -eux\n+\n+arch=$1\n+binutils_version=2.25.1\n+freebsd_version=10.3\n+triple=$arch-unknown-freebsd10\n+sysroot=/usr/local/$triple\n+\n+hide_output() {\n+  set +x\n+  local on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  local ping_loop_pid=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $ping_loop_pid\n+  set -x\n+}\n+\n+# First up, build binutils\n+mkdir binutils\n+cd binutils\n+curl https://ftp.gnu.org/gnu/binutils/binutils-${binutils_version}.tar.bz2 | tar xjf -\n+mkdir binutils-build\n+cd binutils-build\n+hide_output ../binutils-${binutils_version}/configure \\\n+  --target=\"$triple\" --with-sysroot=\"$sysroot\"\n+hide_output make -j\"$(getconf _NPROCESSORS_ONLN)\"\n+hide_output make install\n+cd ../..\n+rm -rf binutils\n+\n+# Next, download the FreeBSD libraries and header files\n+mkdir -p \"$sysroot\"\n+case $arch in\n+  (x86_64) freebsd_arch=amd64 ;;\n+  (i686) freebsd_arch=i386 ;;\n+esac\n+\n+files_to_extract=(\n+\"./usr/include\"\n+\"./usr/lib/*crt*.o\"\n+)\n+# Try to unpack only the libraries the build needs, to save space.\n+for lib in c cxxrt gcc_s m thr util; do\n+  files_to_extract=(\"${files_to_extract[@]}\" \"./lib/lib${lib}.*\" \"./usr/lib/lib${lib}.*\")\n+done\n+for lib in c++ c_nonshared compiler_rt execinfo gcc pthread rt ssp_nonshared; do\n+  files_to_extract=(\"${files_to_extract[@]}\" \"./usr/lib/lib${lib}.*\")\n+done\n+\n+URL=https://download.freebsd.org/ftp/releases/${freebsd_arch}/${freebsd_version}-RELEASE/base.txz\n+curl \"$URL\" | tar xJf - -C \"$sysroot\" --wildcards \"${files_to_extract[@]}\"\n+\n+# Fix up absolute symlinks from the system image.  This can be removed\n+# for FreeBSD 11.  (If there's an easy way to make them relative\n+# symlinks instead, feel free to change this.)\n+set +x\n+find \"$sysroot\" -type l | while read symlink_path; do\n+  symlink_target=$(readlink \"$symlink_path\")\n+  case $symlink_target in\n+    (/*)\n+      echo \"Fixing symlink ${symlink_path} -> ${sysroot}${symlink_target}\" >&2\n+      ln -nfs \"${sysroot}${symlink_target}\" \"${symlink_path}\" ;;\n+  esac\n+done\n+set -x\n+\n+# Clang can do cross-builds out of the box, if we give it the right\n+# flags.  (The local binutils seem to work, but they set the ELF\n+# header \"OS/ABI\" (EI_OSABI) field to SysV rather than FreeBSD, so\n+# there might be other problems.)\n+#\n+# The --target option is last because the cross-build of LLVM uses\n+# --target without an OS version (\"-freebsd\" vs. \"-freebsd10\").  This\n+# makes Clang default to libstdc++ (which no longer exists), and also\n+# controls other features, like GNU-style symbol table hashing and\n+# anything predicated on the version number in the __FreeBSD__\n+# preprocessor macro.\n+for tool in clang clang++; do\n+  tool_path=/usr/local/bin/${triple}-${tool}\n+  cat > \"$tool_path\" <<EOF\n+#!/bin/sh\n+exec $tool --sysroot=$sysroot --prefix=${sysroot}/bin \"\\$@\" --target=$triple\n+EOF\n+  chmod +x \"$tool_path\"\n+done"}, {"sha": "91dc3210e11abc025d5671947f3f1eea0eccf149", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7a0dffc7870224f87263b4cda81d98b2436d8f0/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a0dffc7870224f87263b4cda81d98b2436d8f0/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=f7a0dffc7870224f87263b4cda81d98b2436d8f0", "patch": "@@ -234,6 +234,8 @@ fn main() {\n     let stdcppname = if target.contains(\"openbsd\") {\n         // llvm-config on OpenBSD doesn't mention stdlib=libc++\n         \"c++\"\n+    } else if target.contains(\"freebsd\") {\n+        \"c++\"\n     } else if target.contains(\"netbsd\") && llvm_static_stdcpp.is_some() {\n         // NetBSD uses a separate library when relocation is required\n         \"stdc++_pic\""}]}