{"sha": "1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkM2Y0OWY1MzY1NGYxMmNmOWYzNTAxNjY2YzBkZmQxYWZlNWNmOGI=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-21T14:49:38Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-21T22:13:31Z"}, "message": "Always create a root definition when creating a new `Definitions` object.", "tree": {"sha": "c2e8999cf8bcf021a8d871529e85e553fdf3b81c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2e8999cf8bcf021a8d871529e85e553fdf3b81c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "html_url": "https://github.com/rust-lang/rust/commit/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60513ec8d97414a346cedb755a4cac3abd55ed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60513ec8d97414a346cedb755a4cac3abd55ed1", "html_url": "https://github.com/rust-lang/rust/commit/f60513ec8d97414a346cedb755a4cac3abd55ed1"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "39b14ac4588326dd66ca3b520d5d4b3edb496381", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "patch": "@@ -210,7 +210,7 @@ pub trait Resolver {\n \n     fn local_def_id(&self, node: NodeId) -> LocalDefId;\n \n-    fn create_def_with_parent(\n+    fn create_def(\n         &mut self,\n         parent: LocalDefId,\n         node_id: ast::NodeId,\n@@ -449,7 +449,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 match tree.kind {\n                     UseTreeKind::Simple(_, id1, id2) => {\n                         for &id in &[id1, id2] {\n-                            self.lctx.resolver.create_def_with_parent(\n+                            self.lctx.resolver.create_def(\n                                 owner,\n                                 id,\n                                 DefPathData::Misc,\n@@ -696,7 +696,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             *local_id_counter += 1;\n             let owner = this.resolver.opt_local_def_id(owner).expect(\n-                \"you forgot to call `create_def_with_parent` or are lowering node-IDs \\\n+                \"you forgot to call `create_def` or are lowering node-IDs \\\n                  that do not belong to the current owner\",\n             );\n \n@@ -824,7 +824,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         };\n \n         // Add a definition for the in-band lifetime def.\n-        self.resolver.create_def_with_parent(\n+        self.resolver.create_def(\n             parent_def_id,\n             node_id,\n             DefPathData::LifetimeNs(str_name),\n@@ -1112,7 +1112,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                     let impl_trait_node_id = self.resolver.next_node_id();\n                     let parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n-                    self.resolver.create_def_with_parent(\n+                    self.resolver.create_def(\n                         parent_def_id,\n                         impl_trait_node_id,\n                         DefPathData::ImplTrait,\n@@ -1178,7 +1178,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             let node_id = self.resolver.next_node_id();\n \n                             // Add a definition for the in-band const def.\n-                            self.resolver.create_def_with_parent(\n+                            self.resolver.create_def(\n                                 parent_def_id,\n                                 node_id,\n                                 DefPathData::AnonConst,\n@@ -1644,7 +1644,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     let def_node_id = self.context.resolver.next_node_id();\n                     let hir_id =\n                         self.context.lower_node_id_with_owner(def_node_id, self.opaque_ty_id);\n-                    self.context.resolver.create_def_with_parent(\n+                    self.context.resolver.create_def(\n                         self.parent,\n                         def_node_id,\n                         DefPathData::LifetimeNs(name.ident().name),"}, {"sha": "5e072d37eaad4be6ed292066880133c9d02fb19e", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "patch": "@@ -71,9 +71,9 @@ impl DefPathTable {\n }\n \n /// The definition table containing node definitions.\n-/// It holds the `DefPathTable` for local `DefId`s/`DefPath`s and it also stores a\n-/// mapping from `NodeId`s to local `DefId`s.\n-#[derive(Clone, Default)]\n+/// It holds the `DefPathTable` for `LocalDefId`s/`DefPath`s.\n+/// It also stores mappings to convert `LocalDefId`s to/from `HirId`s.\n+#[derive(Clone)]\n pub struct Definitions {\n     table: DefPathTable,\n \n@@ -328,11 +328,7 @@ impl Definitions {\n     }\n \n     /// Adds a root definition (no parent) and a few other reserved definitions.\n-    pub fn create_root_def(\n-        &mut self,\n-        crate_name: &str,\n-        crate_disambiguator: CrateDisambiguator,\n-    ) -> LocalDefId {\n+    pub fn new(crate_name: &str, crate_disambiguator: CrateDisambiguator) -> Definitions {\n         let key = DefKey {\n             parent: None,\n             disambiguated_data: DisambiguatedDefPathData {\n@@ -344,24 +340,34 @@ impl Definitions {\n         let parent_hash = DefKey::root_parent_stable_hash(crate_name, crate_disambiguator);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n \n-        // Create the definition.\n-        let root = LocalDefId { local_def_index: self.table.allocate(key, def_path_hash) };\n+        // Create the root definition.\n+        let mut table = DefPathTable::default();\n+        let root = LocalDefId { local_def_index: table.allocate(key, def_path_hash) };\n         assert_eq!(root.local_def_index, CRATE_DEF_INDEX);\n \n-        root\n+        Definitions {\n+            table,\n+            def_id_to_hir_id: Default::default(),\n+            hir_id_to_def_id: Default::default(),\n+            expansions_that_defined: Default::default(),\n+            next_disambiguator: Default::default(),\n+            parent_modules_of_macro_defs: Default::default(),\n+        }\n+    }\n+\n+    /// Retrieves the root definition.\n+    pub fn get_root_def(&self) -> LocalDefId {\n+        LocalDefId { local_def_index: CRATE_DEF_INDEX }\n     }\n \n     /// Adds a definition with a parent definition.\n-    pub fn create_def_with_parent(\n+    pub fn create_def(\n         &mut self,\n         parent: LocalDefId,\n         data: DefPathData,\n         expn_id: ExpnId,\n     ) -> LocalDefId {\n-        debug!(\n-            \"create_def_with_parent(parent={:?}, data={:?}, expn_id={:?})\",\n-            parent, data, expn_id\n-        );\n+        debug!(\"create_def(parent={:?}, data={:?}, expn_id={:?})\", parent, data, expn_id);\n \n         // The root node must be created with `create_root_def()`.\n         assert!(data != DefPathData::CrateRoot);\n@@ -382,7 +388,7 @@ impl Definitions {\n         let parent_hash = self.table.def_path_hash(parent.local_def_index);\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n \n-        debug!(\"create_def_with_parent: after disambiguation, key = {:?}\", key);\n+        debug!(\"create_def: after disambiguation, key = {:?}\", key);\n \n         // Create the definition.\n         let def_id = LocalDefId { local_def_index: self.table.allocate(key, def_path_hash) };"}, {"sha": "ea3b19ab4a75d92716ec271830af6998f76efd09", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "patch": "@@ -734,7 +734,10 @@ pub fn create_global_ctxt<'tcx>(\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n     let sess = &compiler.session();\n-    let defs: &'tcx Definitions = arena.alloc(mem::take(&mut resolver_outputs.definitions));\n+    let defs: &'tcx Definitions = arena.alloc(mem::replace(\n+        &mut resolver_outputs.definitions,\n+        Definitions::new(crate_name, sess.local_crate_disambiguator()),\n+    ));\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n "}, {"sha": "f1063f42c91ecb295ea84920ca14f288ea1eff60", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'b> DefCollector<'a, 'b> {\n     fn create_def(&mut self, node_id: NodeId, data: DefPathData, span: Span) -> LocalDefId {\n         let parent_def = self.parent_def;\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n-        self.resolver.create_def_with_parent(parent_def, node_id, data, self.expansion, span)\n+        self.resolver.create_def(parent_def, node_id, data, self.expansion, span)\n     }\n \n     fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: LocalDefId, f: F) {"}, {"sha": "6005f009cc3d510e570e7f2d91d00341a47643f5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1d3f49f53654f12cf9f3501666c0dfd1afe5cf8b", "patch": "@@ -1126,7 +1126,7 @@ impl ResolverAstLowering for Resolver<'_> {\n     }\n \n     /// Adds a definition with a parent definition.\n-    fn create_def_with_parent(\n+    fn create_def(\n         &mut self,\n         parent: LocalDefId,\n         node_id: ast::NodeId,\n@@ -1142,15 +1142,15 @@ impl ResolverAstLowering for Resolver<'_> {\n             self.definitions.def_key(self.node_id_to_def_id[&node_id]),\n         );\n \n-        let def_id = self.definitions.create_def_with_parent(parent, data, expn_id);\n+        let def_id = self.definitions.create_def(parent, data, expn_id);\n \n         assert_eq!(self.def_id_to_span.push(span), def_id);\n \n         // Some things for which we allocate `LocalDefId`s don't correspond to\n         // anything in the AST, so they don't have a `NodeId`. For these cases\n         // we don't need a mapping from `NodeId` to `LocalDefId`.\n         if node_id != ast::DUMMY_NODE_ID {\n-            debug!(\"create_def_with_parent: def_id_to_node_id[{:?}] <-> {:?}\", def_id, node_id);\n+            debug!(\"create_def: def_id_to_node_id[{:?}] <-> {:?}\", def_id, node_id);\n             self.node_id_to_def_id.insert(node_id, def_id);\n         }\n         assert_eq!(self.def_id_to_node_id.push(node_id), def_id);\n@@ -1187,8 +1187,8 @@ impl<'a> Resolver<'a> {\n         let mut module_map = FxHashMap::default();\n         module_map.insert(LocalDefId { local_def_index: CRATE_DEF_INDEX }, graph_root);\n \n-        let mut definitions = Definitions::default();\n-        let root = definitions.create_root_def(crate_name, session.local_crate_disambiguator());\n+        let definitions = Definitions::new(crate_name, session.local_crate_disambiguator());\n+        let root = definitions.get_root_def();\n \n         let mut def_id_to_span = IndexVec::default();\n         assert_eq!(def_id_to_span.push(rustc_span::DUMMY_SP), root);"}]}