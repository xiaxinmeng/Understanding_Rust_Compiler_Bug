{"sha": "c55c26cb36a988d5df8b9f4442dc8af93e687a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NWMyNmNiMzZhOTg4ZDVkZjhiOWY0NDQyZGM4YWY5M2U2ODdhMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-09T22:01:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-09T22:01:26Z"}, "message": "Auto merge of #83800 - xobs:impl-16351-nightly, r=nagisa\n\nAdd default search path to `Target::search()`\n\nThe function `Target::search()` accepts a target triple and returns a `Target` struct defining the requested target.\n\nThere is a `// FIXME 16351: add a sane default search path?` comment that indicates it is desirable to include some sort of default. This was raised in https://github.com/rust-lang/rust/issues/16351 which was closed without any resolution.\n\nhttps://github.com/rust-lang/rust/pull/31117 was proposed, however that has platform-specific logic that is unsuitable for systems without `/etc/`.\n\nThis patch implements the suggestion raised in https://github.com/rust-lang/rust/issues/16351#issuecomment-180878193 where a `target.json` file may be placed in `$(rustc --print sysroot)/lib/rustlib/<target-triple>/target.json`. This allows shipping a toolchain distribution as a single file that gets extracted to the sysroot.", "tree": {"sha": "05e391c93be122728f668d175f54fc9723f26a91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e391c93be122728f668d175f54fc9723f26a91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c55c26cb36a988d5df8b9f4442dc8af93e687a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c55c26cb36a988d5df8b9f4442dc8af93e687a39", "html_url": "https://github.com/rust-lang/rust/commit/c55c26cb36a988d5df8b9f4442dc8af93e687a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c55c26cb36a988d5df8b9f4442dc8af93e687a39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca82264ec7556a6011b9d3f1b2fd4c7cd0bc8ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca82264ec7556a6011b9d3f1b2fd4c7cd0bc8ae2", "html_url": "https://github.com/rust-lang/rust/commit/ca82264ec7556a6011b9d3f1b2fd4c7cd0bc8ae2"}, {"sha": "f9d390d14ad891c4ce9fe108b86d6756ea5154ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d390d14ad891c4ce9fe108b86d6756ea5154ee", "html_url": "https://github.com/rust-lang/rust/commit/f9d390d14ad891c4ce9fe108b86d6756ea5154ee"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "44007974a158b55c7be73c05f9295d42d184f176", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c55c26cb36a988d5df8b9f4442dc8af93e687a39/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55c26cb36a988d5df8b9f4442dc8af93e687a39/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c55c26cb36a988d5df8b9f4442dc8af93e687a39", "patch": "@@ -893,8 +893,13 @@ pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateCo\n     user_cfg\n }\n \n-pub(super) fn build_target_config(opts: &Options, target_override: Option<Target>) -> Target {\n-    let target_result = target_override.map_or_else(|| Target::search(&opts.target_triple), Ok);\n+pub(super) fn build_target_config(\n+    opts: &Options,\n+    target_override: Option<Target>,\n+    sysroot: &PathBuf,\n+) -> Target {\n+    let target_result =\n+        target_override.map_or_else(|| Target::search(&opts.target_triple, sysroot), Ok);\n     let target = target_result.unwrap_or_else(|e| {\n         early_error(\n             opts.error_format,"}, {"sha": "66b0f5c11be4f41f6a976b75b6b7027f67acff5f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c55c26cb36a988d5df8b9f4442dc8af93e687a39/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55c26cb36a988d5df8b9f4442dc8af93e687a39/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=c55c26cb36a988d5df8b9f4442dc8af93e687a39", "patch": "@@ -1276,9 +1276,14 @@ pub fn build_session(\n         DiagnosticOutput::Raw(write) => Some(write),\n     };\n \n-    let target_cfg = config::build_target_config(&sopts, target_override);\n+    let sysroot = match &sopts.maybe_sysroot {\n+        Some(sysroot) => sysroot.clone(),\n+        None => filesearch::get_or_default_sysroot(),\n+    };\n+\n+    let target_cfg = config::build_target_config(&sopts, target_override, &sysroot);\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n-    let host = Target::search(&host_triple).unwrap_or_else(|e| {\n+    let host = Target::search(&host_triple, &sysroot).unwrap_or_else(|e| {\n         early_error(sopts.error_format, &format!(\"Error loading host specification: {}\", e))\n     });\n \n@@ -1325,10 +1330,6 @@ pub fn build_session(\n \n     let mut parse_sess = ParseSess::with_span_handler(span_diagnostic, source_map);\n     parse_sess.assume_incomplete_release = sopts.debugging_opts.assume_incomplete_release;\n-    let sysroot = match &sopts.maybe_sysroot {\n-        Some(sysroot) => sysroot.clone(),\n-        None => filesearch::get_or_default_sysroot(),\n-    };\n \n     let host_triple = config::host_triple();\n     let target_triple = sopts.target_triple.triple();"}, {"sha": "27ca6a23a96bcc10916706b32328b8a83e3ffb99", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c55c26cb36a988d5df8b9f4442dc8af93e687a39/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55c26cb36a988d5df8b9f4442dc8af93e687a39/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=c55c26cb36a988d5df8b9f4442dc8af93e687a39", "patch": "@@ -1898,13 +1898,15 @@ impl Target {\n     }\n \n     /// Search RUST_TARGET_PATH for a JSON file specifying the given target\n-    /// triple. Note that it could also just be a bare filename already, so also\n+    /// triple. If none is found, look for a file called `target.json` inside\n+    /// the sysroot under the target-triple's `rustlib` directory.\n+    /// Note that it could also just be a bare filename already, so also\n     /// check for that. If one of the hardcoded targets we know about, just\n     /// return it directly.\n     ///\n     /// The error string could come from any of the APIs called, including\n     /// filesystem access and JSON decoding.\n-    pub fn search(target_triple: &TargetTriple) -> Result<Target, String> {\n+    pub fn search(target_triple: &TargetTriple, sysroot: &PathBuf) -> Result<Target, String> {\n         use rustc_serialize::json;\n         use std::env;\n         use std::fs;\n@@ -1931,14 +1933,21 @@ impl Target {\n \n                 let target_path = env::var_os(\"RUST_TARGET_PATH\").unwrap_or_default();\n \n-                // FIXME 16351: add a sane default search path?\n-\n                 for dir in env::split_paths(&target_path) {\n                     let p = dir.join(&path);\n                     if p.is_file() {\n                         return load_file(&p);\n                     }\n                 }\n+\n+                // Additionally look in the sysroot under `lib/rustlib/<triple>/target.json`\n+                // as a fallback.\n+                let p =\n+                    sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"target.json\");\n+                if p.is_file() {\n+                    return load_file(&p);\n+                }\n+\n                 Err(format!(\"Could not find specification for target {:?}\", target_triple))\n             }\n             TargetTriple::TargetPath(ref target_path) => {"}]}