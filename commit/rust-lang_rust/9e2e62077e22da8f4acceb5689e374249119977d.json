{"sha": "9e2e62077e22da8f4acceb5689e374249119977d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMmU2MjA3N2UyMmRhOGY0YWNjZWI1Njg5ZTM3NDI0OTExOTk3N2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-11T13:35:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-11T13:35:34Z"}, "message": "Rollup merge of #24291 - xamgore:patch-1, r=steveklabnik\n\n From [here](http://doc.rust-lang.org/nightly/std/primitive.i8.html):\n\n> `fn rotate_right(self, n: u32) -> i8`\n> Shifts the bits to the right by a specified __amount amount__, n, wrapping the truncated bits to the beginning of the resulting integer.", "tree": {"sha": "a6ccbac164f870420ab345a3e50af954d4fe4836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6ccbac164f870420ab345a3e50af954d4fe4836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e2e62077e22da8f4acceb5689e374249119977d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2e62077e22da8f4acceb5689e374249119977d", "html_url": "https://github.com/rust-lang/rust/commit/9e2e62077e22da8f4acceb5689e374249119977d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e2e62077e22da8f4acceb5689e374249119977d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52682630e7eecfb46381bde2bab7a938ba0c8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52682630e7eecfb46381bde2bab7a938ba0c8c5", "html_url": "https://github.com/rust-lang/rust/commit/f52682630e7eecfb46381bde2bab7a938ba0c8c5"}, {"sha": "9e68d236a7eda2e0483e3e4b7ea6a6772f867c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e68d236a7eda2e0483e3e4b7ea6a6772f867c0b", "html_url": "https://github.com/rust-lang/rust/commit/9e68d236a7eda2e0483e3e4b7ea6a6772f867c0b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "6c6b3acd9369748f3309ad67d97e10e2262fc904", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e2e62077e22da8f4acceb5689e374249119977d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2e62077e22da8f4acceb5689e374249119977d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9e2e62077e22da8f4acceb5689e374249119977d", "patch": "@@ -217,7 +217,7 @@ pub trait Int\n                reason = \"pending integer conventions\")]\n     fn trailing_zeros(self) -> u32;\n \n-    /// Shifts the bits to the left by a specified amount amount, `n`, wrapping\n+    /// Shifts the bits to the left by a specified amount, `n`, wrapping\n     /// the truncated bits to the end of the resulting integer.\n     ///\n     /// # Examples\n@@ -235,7 +235,7 @@ pub trait Int\n                reason = \"pending integer conventions\")]\n     fn rotate_left(self, n: u32) -> Self;\n \n-    /// Shifts the bits to the right by a specified amount amount, `n`, wrapping\n+    /// Shifts the bits to the right by a specified amount, `n`, wrapping\n     /// the truncated bits to the beginning of the resulting integer.\n     ///\n     /// # Examples\n@@ -937,7 +937,7 @@ macro_rules! int_impl {\n             (self as $UnsignedT).trailing_zeros()\n         }\n \n-        /// Shifts the bits to the left by a specified amount amount, `n`,\n+        /// Shifts the bits to the left by a specified amount, `n`,\n         /// wrapping the truncated bits to the end of the resulting integer.\n         ///\n         /// # Examples\n@@ -957,7 +957,7 @@ macro_rules! int_impl {\n             (self as $UnsignedT).rotate_left(n) as $T\n         }\n \n-        /// Shifts the bits to the right by a specified amount amount, `n`,\n+        /// Shifts the bits to the right by a specified amount, `n`,\n         /// wrapping the truncated bits to the beginning of the resulting\n         /// integer.\n         ///\n@@ -1456,7 +1456,7 @@ macro_rules! uint_impl {\n             unsafe { $cttz(self as $ActualT) as u32 }\n         }\n \n-        /// Shifts the bits to the left by a specified amount amount, `n`,\n+        /// Shifts the bits to the left by a specified amount, `n`,\n         /// wrapping the truncated bits to the end of the resulting integer.\n         ///\n         /// # Examples\n@@ -1478,7 +1478,7 @@ macro_rules! uint_impl {\n             (self << n) | (self >> (($BITS - n) % $BITS))\n         }\n \n-        /// Shifts the bits to the right by a specified amount amount, `n`,\n+        /// Shifts the bits to the right by a specified amount, `n`,\n         /// wrapping the truncated bits to the beginning of the resulting\n         /// integer.\n         ///"}]}