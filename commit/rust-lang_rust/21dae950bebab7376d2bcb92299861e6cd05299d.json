{"sha": "21dae950bebab7376d2bcb92299861e6cd05299d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZGFlOTUwYmViYWI3Mzc2ZDJiY2I5MjI5OTg2MWU2Y2QwNTI5OWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-14T13:11:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-14T13:11:24Z"}, "message": "Auto merge of #49939 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\nSuccessful merges: #49908, #49876, #49916, #49951, #49465, #49922, #49866, #49915, #49886, #49913, #49852, #49958, #49871, #49864\n\nFailed merges:", "tree": {"sha": "321aff4a41151ac452434bec0483b2a15b5f58c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/321aff4a41151ac452434bec0483b2a15b5f58c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21dae950bebab7376d2bcb92299861e6cd05299d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21dae950bebab7376d2bcb92299861e6cd05299d", "html_url": "https://github.com/rust-lang/rust/commit/21dae950bebab7376d2bcb92299861e6cd05299d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21dae950bebab7376d2bcb92299861e6cd05299d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc3465b9d3eac25c0511fd5e99c9f342a494411", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc3465b9d3eac25c0511fd5e99c9f342a494411", "html_url": "https://github.com/rust-lang/rust/commit/cfc3465b9d3eac25c0511fd5e99c9f342a494411"}, {"sha": "0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a", "html_url": "https://github.com/rust-lang/rust/commit/0e9d6f9bb0ed675c82c30ca6a3227731f2facf6a"}], "stats": {"total": 458, "additions": 369, "deletions": 89}, "files": [{"sha": "63831cd5961222469929865caf8fdd6933b10668", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -176,6 +176,8 @@ matrix:\n       if: branch = auto\n     - env: IMAGE=x86_64-gnu-distcheck\n       if: branch = auto\n+    - env: IMAGE=mingw-check\n+      if: type = pull_request OR branch = auto\n \n     - stage: publish toolstate\n       if: branch = master AND type = push"}, {"sha": "b6ae824c376017e740d086bade325ed36847ba55", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -247,9 +247,6 @@ fn main() {\n         // When running miri tests, we need to generate MIR for all libraries\n         if env::var(\"TEST_MIRI\").ok().map_or(false, |val| val == \"true\") {\n             cmd.arg(\"-Zalways-encode-mir\");\n-            if stage != \"0\" {\n-                cmd.arg(\"-Zmiri\");\n-            }\n             cmd.arg(\"-Zmir-emit-validate=1\");\n         }\n "}, {"sha": "620e125a43da1977f1bb01e748d0525eae6ea078", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -514,7 +514,7 @@ impl Step for Test {\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         let builder = run.builder;\n-        run.krate(\"test\").default_condition(builder.config.compiler_docs)\n+        run.krate(\"test\").default_condition(builder.build.config.docs)\n     }\n \n     fn make_run(run: RunConfig) {\n@@ -557,6 +557,9 @@ impl Step for Test {\n \n         let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"doc\");\n         compile::test_cargo(build, &compiler, target, &mut cargo);\n+\n+        cargo.arg(\"--no-deps\").arg(\"-p\").arg(\"test\");\n+\n         build.run(&mut cargo);\n         build.cp_r(&my_out, &out);\n     }"}, {"sha": "29c8cd1568a39a0db6af388a44ffd24d4ecd7029", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -459,7 +459,7 @@ impl Step for RustdocTheme {\n     }\n \n     fn run(self, builder: &Builder) {\n-        let rustdoc = builder.rustdoc(self.compiler.host);\n+        let rustdoc = builder.out.join(\"bootstrap/debug/rustdoc\");\n         let mut cmd = builder.tool_cmd(Tool::RustdocTheme);\n         cmd.arg(rustdoc.to_str().unwrap())\n            .arg(builder.src.join(\"src/librustdoc/html/static/themes\").to_str().unwrap())\n@@ -875,7 +875,7 @@ impl Step for Compiletest {\n         if build.config.rust_debuginfo_tests {\n             flags.push(\"-g\".to_string());\n         }\n-        flags.push(\"-Zmiri -Zunstable-options\".to_string());\n+        flags.push(\"-Zunstable-options\".to_string());\n         flags.push(build.config.cmd.rustc_args().join(\" \"));\n \n         if let Some(linker) = build.linker(target) {"}, {"sha": "97507bc08698a737882a93a62491aeebe8bdfe8b", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -564,7 +564,8 @@ tool_extended!((self, builder),\n             target: self.target,\n             extra_features: Vec::new(),\n         });\n-        if clippy.is_some() {\n+        let channel = &builder.config.channel;\n+        if clippy.is_some() && channel != \"stable\" && channel != \"beta\" {\n             self.extra_features.push(\"clippy\".to_owned());\n         }\n         builder.ensure(native::Openssl {"}, {"sha": "ae4641009cf1dab0af2e28ab079d5223b255cafd", "filename": "src/ci/docker/mingw-check/Dockerfile", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -0,0 +1,22 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  libssl-dev \\\n+  pkg-config \\\n+  mingw-w64\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV SCRIPT python2.7 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu"}, {"sha": "8f1ba22de8cb1f0b4726fd05b660cd431608a8ab", "filename": "src/doc/unstable-book/src/language-features/global-allocator.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -55,7 +55,7 @@ fn main() {\n ```\n \n And that's it! The `#[global_allocator]` attribute is applied to a `static`\n-which implements the `Alloc` trait in the `std::heap` module. Note, though,\n+which implements the `Alloc` trait in the `std::alloc` module. Note, though,\n that the implementation is defined for `&MyAllocator`, not just `MyAllocator`.\n You may wish, however, to also provide `Alloc for MyAllocator` for other use\n cases."}, {"sha": "5b106275ac9d26873bde8ab6ef615ed0f786d992", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -18,7 +18,7 @@\n sample usage: src/etc/generate-deriving-span-tests.py\n \"\"\"\n \n-import sys, os, datetime, stat\n+import sys, os, datetime, stat, re\n \n TEST_DIR = os.path.abspath(\n     os.path.join(os.path.dirname(__file__), '../test/compile-fail'))\n@@ -87,16 +87,25 @@ def create_test_case(type, trait, super_traits, error_count):\n def write_file(name, string):\n     test_file = os.path.join(TEST_DIR, 'derives-span-%s.rs' % name)\n \n+    with open(test_file) as f:\n+        old_str = f.read()\n+        old_str_ignoring_date = re.sub(r'^// Copyright \\d+',\n+                                        '// Copyright {year}'.format(year = YEAR), old_str)\n+        if old_str_ignoring_date == string:\n+            # if all we're doing is updating the copyright year, ignore it\n+            return 0\n+\n     # set write permission if file exists, so it can be changed\n     if os.path.exists(test_file):\n         os.chmod(test_file, stat.S_IWUSR)\n \n-    with open(test_file, 'wt') as f:\n+    with open(test_file, 'w') as f:\n         f.write(string)\n \n     # mark file read-only\n     os.chmod(test_file, stat.S_IRUSR|stat.S_IRGRP|stat.S_IROTH)\n \n+    return 1\n \n \n ENUM = 1\n@@ -120,11 +129,15 @@ def write_file(name, string):\n                               ('Hash', [], 1)]:\n     traits[trait] = (ALL, supers, errs)\n \n+files = 0\n+\n for (trait, (types, super_traits, error_count)) in traits.items():\n     mk = lambda ty: create_test_case(ty, trait, super_traits, error_count)\n     if types & ENUM:\n-        write_file(trait + '-enum', mk(ENUM_TUPLE))\n-        write_file(trait + '-enum-struct-variant', mk(ENUM_STRUCT))\n+        files += write_file(trait + '-enum', mk(ENUM_TUPLE))\n+        files += write_file(trait + '-enum-struct-variant', mk(ENUM_STRUCT))\n     if types & STRUCT:\n-        write_file(trait + '-struct', mk(STRUCT_FIELDS))\n-        write_file(trait + '-tuple-struct', mk(STRUCT_TUPLE))\n+        files += write_file(trait + '-struct', mk(STRUCT_FIELDS))\n+        files += write_file(trait + '-tuple-struct', mk(STRUCT_TUPLE))\n+\n+print('Generated {files} deriving span test{}.'.format('s' if files != 1 else '', files = files))"}, {"sha": "aceb6ff8abe2a7a6d914f3d8d250cf2ca853c393", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -55,8 +55,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use raw_vec::RawVec;\n-\n use core::any::Any;\n use core::borrow;\n use core::cmp::Ordering;\n@@ -68,6 +66,8 @@ use core::mem::{self, Pin};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n use core::convert::From;\n+\n+use raw_vec::RawVec;\n use str::from_boxed_utf8_unchecked;\n \n /// A pointer type for heap allocation."}, {"sha": "405814c021afef423e4599e514c9e6d19683ba78", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -8,15 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use alloc::{Alloc, Layout, Global};\n use core::cmp;\n use core::mem;\n use core::ops::Drop;\n use core::ptr::{self, NonNull, Unique};\n use core::slice;\n-use super::boxed::Box;\n-use super::allocator::CollectionAllocErr;\n-use super::allocator::CollectionAllocErr::*;\n+\n+use alloc::{Alloc, Layout, Global};\n+use alloc::CollectionAllocErr;\n+use alloc::CollectionAllocErr::*;\n+use boxed::Box;\n \n /// A low-level utility for more ergonomically allocating, reallocating, and deallocating\n /// a buffer of memory on the heap without having to worry about all the corner cases"}, {"sha": "6c9f3dd7ec975d9d0368d31f864ab079d34bd021", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -46,12 +46,12 @@ use core::mem;\n use core::ptr;\n use core::iter::FusedIterator;\n \n-use vec_deque::VecDeque;\n use borrow::{Borrow, ToOwned};\n+use boxed::Box;\n+use slice::{SliceConcatExt, SliceIndex};\n use string::String;\n use vec::Vec;\n-use slice::{SliceConcatExt, SliceIndex};\n-use boxed::Box;\n+use vec_deque::VecDeque;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{FromStr, Utf8Error};"}, {"sha": "0924ca2479147f4f581f0f94eaa28a74b5237903", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -66,11 +66,11 @@ use core::ptr;\n use core::str::pattern::Pattern;\n use core::str::lossy;\n \n+use alloc::CollectionAllocErr;\n use borrow::{Cow, ToOwned};\n+use boxed::Box;\n use str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};\n use vec::Vec;\n-use boxed::Box;\n-use super::allocator::CollectionAllocErr;\n \n /// A UTF-8 encoded, growable string.\n ///"}, {"sha": "9ae415c328bd2cc12bdef7a8ad890900be7d6a38", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -82,11 +82,11 @@ use core::ptr;\n use core::ptr::NonNull;\n use core::slice;\n \n+use alloc::CollectionAllocErr;\n use borrow::ToOwned;\n use borrow::Cow;\n use boxed::Box;\n use raw_vec::RawVec;\n-use super::allocator::CollectionAllocErr;\n \n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///"}, {"sha": "603e38ca2ca33d16bffd674c50163910d2091718", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -30,10 +30,9 @@ use core::slice;\n use core::hash::{Hash, Hasher};\n use core::cmp;\n \n+use alloc::CollectionAllocErr;\n use raw_vec::RawVec;\n-\n-use super::allocator::CollectionAllocErr;\n-use super::vec::Vec;\n+use vec::Vec;\n \n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n const MINIMUM_CAPACITY: usize = 1; // 2 - 1"}, {"sha": "f2e8caaad1485ac00e78b0629da906ffd3df866c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -15,6 +15,7 @@\n use convert::TryFrom;\n use fmt;\n use intrinsics;\n+use mem;\n #[allow(deprecated)] use nonzero::NonZero;\n use ops;\n use str::FromStr;\n@@ -1868,6 +1869,50 @@ $EndFeature, \"\n             #[inline]\n             pub fn is_negative(self) -> bool { self < 0 }\n         }\n+\n+        /// Return the memory representation of this integer as a byte array.\n+        ///\n+        /// The target platform\u2019s native endianness is used.\n+        /// Portable code likely wants to use this after [`to_be`] or [`to_le`].\n+        ///\n+        /// [`to_be`]: #method.to_be\n+        /// [`to_le`]: #method.to_le\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let bytes = i32::min_value().to_be().to_bytes();\n+        /// assert_eq!(bytes, [0x80, 0, 0, 0]);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[inline]\n+        pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+            unsafe { mem::transmute(self) }\n+        }\n+\n+        /// Create an integer value from its memory representation as a byte array.\n+        ///\n+        /// The target platform\u2019s native endianness is used.\n+        /// Portable code likely wants to use [`from_be`] or [`from_le`] after this.\n+        ///\n+        /// [`from_be`]: #method.from_be\n+        /// [`from_le`]: #method.from_le\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let int = i32::from_be(i32::from_bytes([0x80, 0, 0, 0]));\n+        /// assert_eq!(int, i32::min_value());\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[inline]\n+        pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+            unsafe { mem::transmute(bytes) }\n+        }\n     }\n }\n \n@@ -3373,6 +3418,50 @@ $EndFeature, \"\n                 self.one_less_than_next_power_of_two().checked_add(1)\n             }\n         }\n+\n+        /// Return the memory representation of this integer as a byte array.\n+        ///\n+        /// The target platform\u2019s native endianness is used.\n+        /// Portable code likely wants to use this after [`to_be`] or [`to_le`].\n+        ///\n+        /// [`to_be`]: #method.to_be\n+        /// [`to_le`]: #method.to_le\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let bytes = 0x1234_5678_u32.to_be().to_bytes();\n+        /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[inline]\n+        pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+            unsafe { mem::transmute(self) }\n+        }\n+\n+        /// Create an integer value from its memory representation as a byte array.\n+        ///\n+        /// The target platform\u2019s native endianness is used.\n+        /// Portable code likely wants to use [`to_be`] or [`to_le`] after this.\n+        ///\n+        /// [`to_be`]: #method.to_be\n+        /// [`to_le`]: #method.to_le\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(int_to_from_bytes)]\n+        ///\n+        /// let int = u32::from_be(u32::from_bytes([0x12, 0x34, 0x56, 0x78]));\n+        /// assert_eq!(int, 0x1234_5678_u32);\n+        /// ```\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[inline]\n+        pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+            unsafe { mem::transmute(bytes) }\n+        }\n     }\n }\n "}, {"sha": "ec1e65be774fa707031cf211011c44c2844b2506", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -315,7 +315,12 @@ macro_rules! bitxor_impl {\n \n bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The left shift operator `<<`.\n+/// The left shift operator `<<`. Note that because this trait is implemented\n+/// for all integer types with multiple right-hand-side types, Rust's type\n+/// checker has special handling for `_ << _`, setting the result type for\n+/// integer operations to the type of the left-hand-side operand. This means\n+/// that though `a << b` and `a.shl(b)` are one and the same from an evaluation\n+/// standpoint, they are different when it comes to type inference.\n ///\n /// # Examples\n ///\n@@ -417,7 +422,12 @@ macro_rules! shl_impl_all {\n \n shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n \n-/// The right shift operator `>>`.\n+/// The right shift operator `>>`. Note that because this trait is implemented\n+/// for all integer types with multiple right-hand-side types, Rust's type\n+/// checker has special handling for `_ >> _`, setting the result type for\n+/// integer operations to the type of the left-hand-side operand. This means\n+/// that though `a >> b` and `a.shr(b)` are one and the same from an evaluation\n+/// standpoint, they are different when it comes to type inference.\n ///\n /// # Examples\n ///"}, {"sha": "62e0979c5fefc077f9171c0595136fc5a297d29c", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -1425,8 +1425,8 @@ assert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n \n             doc_comment! {\n                 concat!(\"Fetches the value, and applies a function to it that returns an optional\n-new value. Returns a `Result` (`Ok(_)` if the function returned `Some(_)`, else `Err(_)`) of the\n-previous value.\n+new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n+`Err(previous_value)`.\n \n Note: This may call the function multiple times if the value has been changed from other threads in\n the meantime, as long as the function returns `Some(_)`, but the function will have been applied"}, {"sha": "84bf9cc84e7373499419c79f7d4b9682840801aa", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -35,6 +35,7 @@ use std::fmt;\n use syntax::ast;\n use errors::DiagnosticBuilder;\n use syntax_pos::{self, Span};\n+use syntax_pos::symbol::InternedString;\n use util::nodemap::FxHashMap;\n use arena::DroplessArena;\n \n@@ -343,7 +344,7 @@ pub enum RegionVariableOrigin {\n     Coercion(Span),\n \n     // Region variables created as the values for early-bound regions\n-    EarlyBoundRegion(Span, ast::Name),\n+    EarlyBoundRegion(Span, InternedString),\n \n     // Region variables created for bound regions\n     // in a function or method that is called"}, {"sha": "d309026212bfa1f408667cfe5a6053064553adb1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -1227,8 +1227,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"print some statistics about MIR\"),\n     always_encode_mir: bool = (false, parse_bool, [TRACKED],\n           \"encode MIR of all functions into the crate metadata\"),\n-    miri: bool = (false, parse_bool, [TRACKED],\n-          \"check the miri const evaluator against the old ctfe\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n           \"pass `-install_name @rpath/...` to the macOS linker\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],"}, {"sha": "c3d2d5675de0544de65a577b3c0f62b4ed9b974c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -728,7 +728,7 @@ pub struct TypeParameterDef {\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n pub struct RegionParameterDef {\n-    pub name: Name,\n+    pub name: InternedString,\n     pub def_id: DefId,\n     pub index: u32,\n "}, {"sha": "d68393956efd1a51ece763e6e8e1314eb1cae533", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -58,7 +58,7 @@ pub enum BoundRegion {\n     ///\n     /// The def-id is needed to distinguish free regions in\n     /// the event of shadowing.\n-    BrNamed(DefId, Name),\n+    BrNamed(DefId, InternedString),\n \n     /// Fresh bound identifiers created during GLB computations.\n     BrFresh(u32),\n@@ -1058,7 +1058,7 @@ impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n pub struct EarlyBoundRegion {\n     pub def_id: DefId,\n     pub index: u32,\n-    pub name: Name,\n+    pub name: InternedString,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "dd478967b185a3539762868eb3f91beb6c979771", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -30,7 +30,7 @@ use std::usize;\n use rustc_data_structures::indexed_vec::Idx;\n use syntax::abi::Abi;\n use syntax::ast::CRATE_NODE_ID;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{Symbol, InternedString};\n use hir;\n \n macro_rules! gen_display_debug_body {\n@@ -130,7 +130,7 @@ macro_rules! print {\n }\n \n \n-struct LateBoundRegionNameCollector(FxHashSet<Symbol>);\n+struct LateBoundRegionNameCollector(FxHashSet<InternedString>);\n impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         match *r {\n@@ -148,7 +148,7 @@ pub struct PrintContext {\n     is_debug: bool,\n     is_verbose: bool,\n     identify_regions: bool,\n-    used_region_names: Option<FxHashSet<Symbol>>,\n+    used_region_names: Option<FxHashSet<InternedString>>,\n     region_index: usize,\n     binder_depth: usize,\n }\n@@ -440,12 +440,12 @@ impl PrintContext {\n                                           lifted: Option<ty::Binder<U>>) -> fmt::Result\n         where T: Print, U: Print + TypeFoldable<'tcx>, F: fmt::Write\n     {\n-        fn name_by_region_index(index: usize) -> Symbol {\n+        fn name_by_region_index(index: usize) -> InternedString {\n             match index {\n                 0 => Symbol::intern(\"'r\"),\n                 1 => Symbol::intern(\"'s\"),\n                 i => Symbol::intern(&format!(\"'t{}\", i-2)),\n-            }\n+            }.as_str()\n         }\n \n         // Replace any anonymous late-bound regions with named\n@@ -493,8 +493,7 @@ impl PrintContext {\n                         }\n                     };\n                     let _ = write!(f, \"{}\", name);\n-                    ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID),\n-                                name)\n+                    ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID), name)\n                 }\n             };\n             tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), br))\n@@ -510,7 +509,7 @@ impl PrintContext {\n         result\n     }\n \n-    fn is_name_used(&self, name: &Symbol) -> bool {\n+    fn is_name_used(&self, name: &InternedString) -> bool {\n         match self.used_region_names {\n             Some(ref names) => names.contains(name),\n             None => false,\n@@ -697,7 +696,7 @@ define_print! {\n                 BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n                 BrFresh(n) => write!(f, \"BrFresh({:?})\", n),\n                 BrNamed(did, name) => {\n-                    write!(f, \"BrNamed({:?}:{:?}, {:?})\",\n+                    write!(f, \"BrNamed({:?}:{:?}, {})\",\n                            did.krate, did.index, name)\n                 }\n                 BrEnv => write!(f, \"BrEnv\"),"}, {"sha": "5aae895ccc4d5e1bfe0b8c61459b1d12060293a3", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn re_early_bound(&self, index: u32, name: &'static str) -> ty::Region<'tcx> {\n-        let name = Symbol::intern(name);\n+        let name = Symbol::intern(name).as_str();\n         self.infcx.tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: self.infcx.tcx.hir.local_def_id(ast::CRATE_NODE_ID),\n             index,"}, {"sha": "36debf677da2b5873128fb4fc2223894843bb638", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -100,7 +100,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| {\n-            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap())\n+            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap()).as_str()\n         };\n \n         let hir_id = tcx.hir.node_to_hir_id(lifetime.id);"}, {"sha": "f386e1d8b825d4d355336e23bfdd6560bc64566e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -886,7 +886,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     let regions = early_lifetimes.enumerate().map(|(i, l)| {\n         ty::RegionParameterDef {\n-            name: l.lifetime.name.name(),\n+            name: l.lifetime.name.name().as_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(l.lifetime.id),\n             pure_wrt_drop: l.pure_wrt_drop,\n@@ -1427,7 +1427,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir.local_def_id(param.lifetime.id),\n             index,\n-            name: param.lifetime.name.name(),\n+            name: param.lifetime.name.name().as_str(),\n         }));\n         index += 1;\n "}, {"sha": "52d5dbe3f05891384af205b80851cb6dcb93f1ab", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     let name = if p.name == \"\" {\n                         hir::LifetimeName::Static\n                     } else {\n-                        hir::LifetimeName::Name(p.name)\n+                        hir::LifetimeName::Name(Symbol::intern(&p.name))\n                     };\n \n                     hir::Lifetime {\n@@ -407,7 +407,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             let names_map: FxHashMap<String, Lifetime> = generics\n                 .regions\n                 .iter()\n-                .map(|l| (l.name.as_str().to_string(), l.clean(self.cx)))\n+                .map(|l| (l.name.to_string(), l.clean(self.cx)))\n                 .collect();\n \n             let body_ids: FxHashSet<_> = infcx\n@@ -728,7 +728,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n \n     fn region_name(&self, region: Region) -> Option<String> {\n         match region {\n-            &ty::ReEarlyBound(r) => Some(r.name.as_str().to_string()),\n+            &ty::ReEarlyBound(r) => Some(r.name.to_string()),\n             _ => None,\n         }\n     }\n@@ -1005,7 +1005,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         // We only care about late bound regions, as we need to add them\n                         // to the 'for<>' section\n                         &ty::ReLateBound(_, ty::BoundRegion::BrNamed(_, name)) => {\n-                            Some(GenericParam::Lifetime(Lifetime(name.as_str().to_string())))\n+                            Some(GenericParam::Lifetime(Lifetime(name.to_string())))\n                         }\n                         &ty::ReVar(_) | &ty::ReEarlyBound(_) => None,\n                         _ => panic!(\"Unexpected region type {:?}\", r),"}, {"sha": "a166bca709edbc232b3b5fdf36d682adc5db0d43", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -28,7 +28,7 @@ use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use tempdir::TempDir;\n-use rustc_driver::{self, driver, Compilation};\n+use rustc_driver::{self, driver, target_features, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n@@ -96,8 +96,10 @@ pub fn run(input_path: &Path,\n     let trans = rustc_driver::get_trans(&sess);\n     let cstore = CStore::new(trans.metadata_loader());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n-    sess.parse_sess.config =\n-        config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+\n+    let mut cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+    target_features::add_configuration(&mut cfg, &sess, &*trans);\n+    sess.parse_sess.config = cfg;\n \n     let krate = panictry!(driver::phase_1_parse_input(&driver::CompileController::basic(),\n                                                       &sess,\n@@ -271,8 +273,11 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let outdir = Mutex::new(TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\"));\n     let libdir = sess.target_filesearch(PathKind::All).get_lib_path();\n     let mut control = driver::CompileController::basic();\n-    sess.parse_sess.config =\n-        config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+\n+    let mut cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+    target_features::add_configuration(&mut cfg, &sess, &*trans);\n+    sess.parse_sess.config = cfg;\n+\n     let out = Some(outdir.lock().unwrap().path().to_path_buf());\n \n     if no_run {"}, {"sha": "0913ed8614792b9ecc73c368bb8db6cccb934f77", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -527,8 +527,17 @@ impl Token {\n         // all span information.\n         //\n         // As a result, some AST nodes are annotated with the token\n-        // stream they came from. Attempt to extract these lossless\n-        // token streams before we fall back to the stringification.\n+        // stream they came from. Here we attempt to extract these\n+        // lossless token streams before we fall back to the\n+        // stringification.\n+        //\n+        // During early phases of the compiler, though, the AST could\n+        // get modified directly (e.g. attributes added or removed) and\n+        // the internal cache of tokens my not be invalidated or\n+        // updated. Consequently if the \"lossless\" token stream\n+        // disagrees with our actuall stringification (which has\n+        // historically been much more battle-tested) then we go with\n+        // the lossy stream anyway (losing span information).\n         let mut tokens = None;\n \n         match nt.0 {\n@@ -555,13 +564,17 @@ impl Token {\n             _ => {}\n         }\n \n-        tokens.unwrap_or_else(|| {\n-            nt.1.force(|| {\n-                // FIXME(jseyfried): Avoid this pretty-print + reparse hack\n-                let source = pprust::token_to_string(self);\n-                parse_stream_from_source_str(FileName::MacroExpansion, source, sess, Some(span))\n-            })\n-        })\n+        let tokens_for_real = nt.1.force(|| {\n+            // FIXME(#43081): Avoid this pretty-print + reparse hack\n+            let source = pprust::token_to_string(self);\n+            parse_stream_from_source_str(FileName::MacroExpansion, source, sess, Some(span))\n+        });\n+        if let Some(tokens) = tokens {\n+            if tokens.eq_unspanned(&tokens_for_real) {\n+                return tokens\n+            }\n+        }\n+        return tokens_for_real\n     }\n }\n "}, {"sha": "6ac04b3cdf6c437bd4dcd67b914ef7b91e7298c8", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -118,7 +118,7 @@ impl TokenTree {\n             (&TokenTree::Token(_, ref tk), &TokenTree::Token(_, ref tk2)) => tk == tk2,\n             (&TokenTree::Delimited(_, ref dl), &TokenTree::Delimited(_, ref dl2)) => {\n                 dl.delim == dl2.delim &&\n-                dl.stream().trees().zip(dl2.stream().trees()).all(|(tt, tt2)| tt.eq_unspanned(&tt2))\n+                dl.stream().eq_unspanned(&dl2.stream())\n             }\n             (_, _) => false,\n         }\n@@ -240,12 +240,14 @@ impl TokenStream {\n \n     /// Compares two TokenStreams, checking equality without regarding span information.\n     pub fn eq_unspanned(&self, other: &TokenStream) -> bool {\n-        for (t1, t2) in self.trees().zip(other.trees()) {\n+        let mut t1 = self.trees();\n+        let mut t2 = other.trees();\n+        for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n             if !t1.eq_unspanned(&t2) {\n                 return false;\n             }\n         }\n-        true\n+        t1.next().is_none() && t2.next().is_none()\n     }\n \n     /// Precondition: `self` consists of a single token tree."}, {"sha": "37e64ba7ea1e094610bf4254b62d47170555fa5a", "filename": "src/test/compile-fail/allocator/auxiliary/system-allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -13,7 +13,7 @@\n #![feature(global_allocator, allocator_api)]\n #![crate_type = \"rlib\"]\n \n-use std::heap::System;\n+use std::alloc::System;\n \n #[global_allocator]\n static A: System = System;"}, {"sha": "37e64ba7ea1e094610bf4254b62d47170555fa5a", "filename": "src/test/compile-fail/allocator/auxiliary/system-allocator2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Fauxiliary%2Fsystem-allocator2.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -13,7 +13,7 @@\n #![feature(global_allocator, allocator_api)]\n #![crate_type = \"rlib\"]\n \n-use std::heap::System;\n+use std::alloc::System;\n \n #[global_allocator]\n static A: System = System;"}, {"sha": "5aa6b5d67773f4eae277d18505e1cd1a41839a2b", "filename": "src/test/compile-fail/allocator/two-allocators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(global_allocator, allocator_api)]\n \n-use std::heap::System;\n+use std::alloc::System;\n \n #[global_allocator]\n static A: System = System;"}, {"sha": "ec5d985a94383cc4de3123fcc7cff1776725b7c3", "filename": "src/test/compile-fail/allocator/two-allocators2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Ftwo-allocators2.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -16,7 +16,7 @@\n \n extern crate system_allocator;\n \n-use std::heap::System;\n+use std::alloc::System;\n \n #[global_allocator]\n static A: System = System;"}, {"sha": "6f8c649c6b56cfe22a56ea6baef5434953b4c95b", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/modify-ast.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn assert1(_a: TokenStream, b: TokenStream) -> TokenStream {\n+    assert_eq(b.clone(), \"pub fn foo() {}\".parse().unwrap());\n+    b\n+}\n+\n+#[proc_macro_derive(Foo, attributes(foo))]\n+pub fn assert2(a: TokenStream) -> TokenStream {\n+    assert_eq(a, \"pub struct MyStructc { _a: i32, }\".parse().unwrap());\n+    TokenStream::empty()\n+}\n+\n+fn assert_eq(a: TokenStream, b: TokenStream) {\n+    let mut a = a.into_iter();\n+    let mut b = b.into_iter();\n+    for (a, b) in a.by_ref().zip(&mut b) {\n+        match (a, b) {\n+            (TokenTree::Group(a), TokenTree::Group(b)) => {\n+                assert_eq!(a.delimiter(), b.delimiter());\n+                assert_eq(a.stream(), b.stream());\n+            }\n+            (TokenTree::Op(a), TokenTree::Op(b)) => {\n+                assert_eq!(a.op(), b.op());\n+                assert_eq!(a.spacing(), b.spacing());\n+            }\n+            (TokenTree::Literal(a), TokenTree::Literal(b)) => {\n+                assert_eq!(a.to_string(), b.to_string());\n+            }\n+            (TokenTree::Term(a), TokenTree::Term(b)) => {\n+                assert_eq!(a.to_string(), b.to_string());\n+            }\n+            (a, b) => panic!(\"{:?} != {:?}\", a, b),\n+        }\n+    }\n+\n+    assert!(a.next().is_none());\n+    assert!(b.next().is_none());\n+}"}, {"sha": "13a6dbd2ae576613863e0d0a32f30f8173ab0094", "filename": "src/test/run-pass-fulldeps/proc-macro/modify-ast.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fmodify-ast.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:modify-ast.rs\n+\n+#![feature(proc_macro)]\n+\n+extern crate modify_ast;\n+\n+use modify_ast::*;\n+\n+#[derive(Foo)]\n+pub struct MyStructc {\n+    #[cfg_attr(my_cfg, foo)]\n+    _a: i32,\n+}\n+\n+macro_rules! a {\n+    ($i:item) => ($i)\n+}\n+\n+a! {\n+    #[assert1]\n+    pub fn foo() {}\n+}\n+\n+fn main() {\n+    let _a = MyStructc { _a: 0 };\n+    foo();\n+}"}, {"sha": "d4fcdcf743bc676d6f20fa25a9acbea5fda8daed", "filename": "src/test/run-pass/allocator-alloc-one.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -10,15 +10,15 @@\n \n #![feature(allocator_api, nonnull)]\n \n-use std::heap::{Heap, Alloc};\n+use std::alloc::{Alloc, Global};\n \n fn main() {\n     unsafe {\n-        let ptr = Heap.alloc_one::<i32>().unwrap_or_else(|_| {\n-            Heap.oom()\n+        let ptr = Global.alloc_one::<i32>().unwrap_or_else(|_| {\n+            Global.oom()\n         });\n         *ptr.as_ptr() = 4;\n         assert_eq!(*ptr.as_ptr(), 4);\n-        Heap.dealloc_one(ptr);\n+        Global.dealloc_one(ptr);\n     }\n }"}, {"sha": "91f70aa83e854328e19e53bf2f1a865f7210406a", "filename": "src/test/run-pass/allocator/auxiliary/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -13,7 +13,7 @@\n #![feature(heap_api, allocator_api)]\n #![crate_type = \"rlib\"]\n \n-use std::heap::{GlobalAlloc, System, Layout, Opaque};\n+use std::alloc::{GlobalAlloc, System, Layout, Opaque};\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n pub struct A(pub AtomicUsize);"}, {"sha": "44be59f5c5b1a9ea39d3d4bedb21179021e05c4c", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(allocator_api)]\n \n-use std::heap::{Alloc, Heap, Layout};\n+use std::alloc::{Alloc, Global, Layout};\n use std::ptr::NonNull;\n \n struct arena(());\n@@ -32,8 +32,8 @@ struct Ccx {\n \n fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n-        let ptr = Heap.alloc(Layout::new::<Bcx>())\n-            .unwrap_or_else(|_| Heap.oom());\n+        let ptr = Global.alloc(Layout::new::<Bcx>())\n+            .unwrap_or_else(|_| Global.oom());\n         &*(ptr.as_ptr() as *const _)\n     }\n }\n@@ -46,7 +46,7 @@ fn g(fcx : &Fcx) {\n     let bcx = Bcx { fcx: fcx };\n     let bcx2 = h(&bcx);\n     unsafe {\n-        Heap.dealloc(NonNull::new_unchecked(bcx2 as *const _ as *mut _), Layout::new::<Bcx>());\n+        Global.dealloc(NonNull::new_unchecked(bcx2 as *const _ as *mut _), Layout::new::<Bcx>());\n     }\n }\n "}, {"sha": "a0534ff6735a50a166889173b5d720ccef0fb897", "filename": "src/test/run-pass/thin-lto-global-allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -14,6 +14,6 @@\n #![feature(allocator_api, global_allocator)]\n \n #[global_allocator]\n-static A: std::heap::System = std::heap::System;\n+static A: std::alloc::System = std::alloc::System;\n \n fn main() {}"}, {"sha": "ddc5e5bb3f8ccb84eeeb97432ac52420b7fad886", "filename": "src/test/rustdoc/doc-cfg-target-feature.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frustdoc%2Fdoc-cfg-target-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dae950bebab7376d2bcb92299861e6cd05299d/src%2Ftest%2Frustdoc%2Fdoc-cfg-target-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-target-feature.rs?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+// compile-flags:--test\n+// should-fail\n+// no-system-llvm\n+\n+// #49723: rustdoc didn't add target features when extracting or running doctests\n+\n+#![feature(doc_cfg)]\n+\n+/// Foo\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cfg_target_feature)]\n+///\n+/// #[cfg(target_feature = \"sse\")]\n+/// assert!(false);\n+/// ```\n+#[doc(cfg(target_feature = \"sse\"))]\n+pub unsafe fn foo() {}"}, {"sha": "008c3690846798d678f4a0a45ee46cc9ff6dc90f", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -1 +1 @@\n-Subproject commit b70ab13b31628e91b05961d55c07abf20ad49de6\n+Subproject commit 008c3690846798d678f4a0a45ee46cc9ff6dc90f"}, {"sha": "7bda1161a37ff51f254ff0a7862abe6dc54fdb36", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=21dae950bebab7376d2bcb92299861e6cd05299d", "patch": "@@ -1 +1 @@\n-Subproject commit faccf0d07cad4c84da20c5c0102a450fca9d0b6b\n+Subproject commit 7bda1161a37ff51f254ff0a7862abe6dc54fdb36"}]}