{"sha": "9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNzU5N2Q1YWY0ZDg4MmRkYzkyYmY1NjhhMWM3YmE1ODJiYjRiNTU=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2017-02-12T15:01:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-12T15:01:15Z"}, "message": "Merge pull request #1528 from Manishearth/mut-from-ref\n\nNew `mut_from_ref` lint", "tree": {"sha": "f656955b550083ad14b111c3b9626b7910ff15eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f656955b550083ad14b111c3b9626b7910ff15eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "html_url": "https://github.com/rust-lang/rust/commit/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b29f9a36478575bd174f388ad3cfbef4a84d0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b29f9a36478575bd174f388ad3cfbef4a84d0cc", "html_url": "https://github.com/rust-lang/rust/commit/4b29f9a36478575bd174f388ad3cfbef4a84d0cc"}, {"sha": "21d226e7d22138cea44e35e58757bde5ed9df2f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d226e7d22138cea44e35e58757bde5ed9df2f7", "html_url": "https://github.com/rust-lang/rust/commit/21d226e7d22138cea44e35e58757bde5ed9df2f7"}], "stats": {"total": 180, "additions": 176, "deletions": 4}, "files": [{"sha": "671450a120d3e26cde88ca271529b8993d620c86", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "patch": "@@ -1,6 +1,8 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+* New [`mut_from_ref`] lint\n+\n ## 0.0.114 \u2014 2017-02-08\n * Rustup to rustc 1.17.0-nightly (c49d10207 2017-02-07)\n * Tests are now ui tests (testing the exact output of rustc)\n@@ -369,6 +371,7 @@ All notable changes to this project will be documented in this file.\n [`mixed_case_hex_literals`]: https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals\n [`module_inception`]: https://github.com/Manishearth/rust-clippy/wiki#module_inception\n [`modulo_one`]: https://github.com/Manishearth/rust-clippy/wiki#modulo_one\n+[`mut_from_ref`]: https://github.com/Manishearth/rust-clippy/wiki#mut_from_ref\n [`mut_mut`]: https://github.com/Manishearth/rust-clippy/wiki#mut_mut\n [`mutex_atomic`]: https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic\n [`mutex_integer`]: https://github.com/Manishearth/rust-clippy/wiki#mutex_integer"}, {"sha": "cfc9d06b49550ebde46ff17a769f24c3176afa84", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 186 lints included in this crate:\n+There are 187 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -278,6 +278,7 @@ name\n [mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                     | warn    | hex literals whose letter digits are not consistently upper- or lowercased\n [module_inception](https://github.com/Manishearth/rust-clippy/wiki#module_inception)                                   | warn    | modules that have the same name as their parent module\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                                               | warn    | taking a number modulo 1, which always returns 0\n+[mut_from_ref](https://github.com/Manishearth/rust-clippy/wiki#mut_from_ref)                                           | warn    | fns that create mutable refs from immutable ref args\n [mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                                     | allow   | usage of double-mut refs, e.g. `&mut &mut ...`\n [mutex_atomic](https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic)                                           | warn    | using a mutex where an atomic value could be used instead\n [mutex_integer](https://github.com/Manishearth/rust-clippy/wiki#mutex_integer)                                         | allow   | using a mutex for an integer type"}, {"sha": "4b7b72f0c797a3d8ee4e2a2b9748911e4dcbecbc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "patch": "@@ -15,6 +15,7 @@\n #![allow(needless_lifetimes)]\n \n extern crate syntax;\n+extern crate syntax_pos;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_data_structures;\n@@ -464,6 +465,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         precedence::PRECEDENCE,\n         print::PRINT_WITH_NEWLINE,\n         ptr::CMP_NULL,\n+        ptr::MUT_FROM_REF,\n         ptr::PTR_ARG,\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,"}, {"sha": "e9176372ebce97a217d123e9fe89867111e7e559", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "patch": "@@ -5,7 +5,9 @@ use rustc::hir::map::NodeItem;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::NodeId;\n-use utils::{match_path, match_type, paths, span_lint};\n+use syntax::codemap::Span;\n+use syntax_pos::MultiSpan;\n+use utils::{match_path, match_type, paths, span_lint, span_lint_and_then};\n \n /// **What it does:** This lint checks for function arguments of type `&String` or `&Vec` unless\n /// the references are mutable.\n@@ -44,13 +46,32 @@ declare_lint! {\n     \"comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\"\n }\n \n+/// **What it does:** This lint checks for functions that take immutable references and return\n+/// mutable ones.\n+///\n+/// **Why is this bad?** This is trivially unsound, as one can create two mutable references\n+/// from the same (immutable!) source. This [error](https://github.com/rust-lang/rust/issues/39465)\n+/// actually lead to an interim Rust release 1.15.1.\n+///\n+/// **Known problems:** To be on the conservative side, if there's at least one mutable reference\n+/// with the output lifetime, this lint will not trigger. In practice, this case is unlikely anyway.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(&Foo) -> &mut Bar { .. }\n+/// ```\n+declare_lint! {\n+    pub MUT_FROM_REF,\n+    Warn,\n+    \"fns that create mutable refs from immutable ref args\"\n+}\n \n #[derive(Copy,Clone)]\n pub struct PointerPass;\n \n impl LintPass for PointerPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PTR_ARG, CMP_NULL)\n+        lint_array!(PTR_ARG, CMP_NULL, MUT_FROM_REF)\n     }\n }\n \n@@ -111,6 +132,37 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n             }\n         }\n     }\n+\n+    if let FunctionRetTy::Return(ref ty) = decl.output {\n+        if let Some((out, MutMutable, _)) = get_rptr_lm(ty) {\n+            let mut immutables = vec![];\n+            for (_, ref mutbl, ref argspan) in\n+                decl.inputs\n+                    .iter()\n+                    .filter_map(|ty| get_rptr_lm(ty))\n+                    .filter(|&(lt, _, _)| lt.name == out.name) {\n+                if *mutbl == MutMutable {\n+                    return;\n+                }\n+                immutables.push(*argspan);\n+            }\n+            if immutables.is_empty() {\n+                return;\n+            }\n+            span_lint_and_then(cx, MUT_FROM_REF, ty.span, \"mutable borrow from immutable input(s)\", |db| {\n+                let ms = MultiSpan::from_spans(immutables);\n+                db.span_note(ms, \"immutable borrow here\");\n+            });\n+        }\n+    }\n+}\n+\n+fn get_rptr_lm(ty: &Ty) -> Option<(&Lifetime, Mutability, Span)> {\n+    if let Ty_::TyRptr(ref lt, ref m) = ty.node {\n+        Some((lt, m.mutbl, ty.span))\n+    } else {\n+        None\n+    }\n }\n \n fn is_null_path(expr: &Expr) -> bool {"}, {"sha": "ac90528c60639bc7f3702f7417fc49424a41e48c", "filename": "src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "patch": "@@ -1,7 +1,6 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-#![feature(static_in_const)]\n \n #![allow(unknown_lints, missing_docs_in_private_items)]\n "}, {"sha": "35bff9371d9e2fdb697184260ce0baee3f3abcbe", "filename": "tests/ui/mut_from_ref.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "patch": "@@ -0,0 +1,48 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused)]\n+#![deny(mut_from_ref)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n+        unimplemented!()\n+    }\n+}\n+\n+trait Ouch {\n+    fn ouch(x: &Foo) -> &mut Foo;\n+}\n+\n+impl Ouch for Foo {\n+    fn ouch(x: &Foo) -> &mut Foo {\n+        unimplemented!()\n+    }\n+}\n+\n+fn fail(x: &u32) -> &mut u16 {\n+    unimplemented!()\n+}\n+\n+fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+// this is OK, because the result borrows y\n+fn works<'a>(x: &u32, y: &'a mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+// this is also OK, because the result could borrow y\n+fn also_works<'a>(x: &'a u32, y: &'a mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    //TODO\n+}"}, {"sha": "5098d7d0ab562c573d11cf071cf6c09ed17c06c2", "filename": "tests/ui/mut_from_ref.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a7597d5af4d882ddc92bf568a1c7ba582bb4b55/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=9a7597d5af4d882ddc92bf568a1c7ba582bb4b55", "patch": "@@ -0,0 +1,67 @@\n+error: mutable borrow from immutable input(s)\n+ --> $DIR/mut_from_ref.rs:9:39\n+  |\n+9 |     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n+  |                                       ^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/mut_from_ref.rs:4:9\n+  |\n+4 | #![deny(mut_from_ref)]\n+  |         ^^^^^^^^^^^^\n+note: immutable borrow here\n+ --> $DIR/mut_from_ref.rs:9:29\n+  |\n+9 |     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n+  |                             ^^^^^\n+\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:15:25\n+   |\n+15 |     fn ouch(x: &Foo) -> &mut Foo;\n+   |                         ^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:15:16\n+   |\n+15 |     fn ouch(x: &Foo) -> &mut Foo;\n+   |                ^^^^\n+\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:24:21\n+   |\n+24 | fn fail(x: &u32) -> &mut u16 {\n+   |                     ^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:24:12\n+   |\n+24 | fn fail(x: &u32) -> &mut u16 {\n+   |            ^^^^\n+\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:28:50\n+   |\n+28 | fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n+   |                                                  ^^^^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:28:25\n+   |\n+28 | fn fail_lifetime<'a>(x: &'a u32, y: &mut u32) -> &'a mut u32 {\n+   |                         ^^^^^^^\n+\n+error: mutable borrow from immutable input(s)\n+  --> $DIR/mut_from_ref.rs:32:67\n+   |\n+32 | fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n+   |                                                                   ^^^^^^^^^^^\n+   |\n+note: immutable borrow here\n+  --> $DIR/mut_from_ref.rs:32:27\n+   |\n+32 | fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n+   |                           ^^^^^^^     ^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}