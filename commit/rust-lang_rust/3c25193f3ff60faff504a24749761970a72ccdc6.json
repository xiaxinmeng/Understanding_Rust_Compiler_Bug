{"sha": "3c25193f3ff60faff504a24749761970a72ccdc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMjUxOTNmM2ZmNjBmYWZmNTA0YTI0NzQ5NzYxOTcwYTcyY2NkYzY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-27T15:12:35Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-02T06:48:52Z"}, "message": "hir: remove NodeId from ForeignItem", "tree": {"sha": "439bd894f7077fb4722c94d1b48e3a80d4896fbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439bd894f7077fb4722c94d1b48e3a80d4896fbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c25193f3ff60faff504a24749761970a72ccdc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c25193f3ff60faff504a24749761970a72ccdc6", "html_url": "https://github.com/rust-lang/rust/commit/3c25193f3ff60faff504a24749761970a72ccdc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c25193f3ff60faff504a24749761970a72ccdc6/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "html_url": "https://github.com/rust-lang/rust/commit/ae45f170ee0ce7d068b51b14cb2d0685c16327bc"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "c99d1b7bd09d490ea695f98e298bf616124d3b9b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -3551,7 +3551,6 @@ impl<'a> LoweringContext<'a> {\n         let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n         let def_id = self.resolver.definitions().local_def_id(node_id);\n         hir::ForeignItem {\n-            id: node_id,\n             hir_id,\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),"}, {"sha": "2a664282d51cc1f7a4d2a78404e84de85790e717", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -341,7 +341,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::ForeignItem(item) => {\n-                let def_id = self.local_def_id(item.id);\n+                let def_id = self.local_def_id_from_hir_id(item.hir_id);\n                 match item.node {\n                     ForeignItemKind::Fn(..) => Some(Def::Fn(def_id)),\n                     ForeignItemKind::Static(_, m) => Some(Def::Static(def_id, m)),"}, {"sha": "dc15c2a04a81c1c6f4c9f83227ea001aaac43f44", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -2378,7 +2378,6 @@ pub struct ForeignItem {\n     pub ident: Ident,\n     pub attrs: HirVec<Attribute>,\n     pub node: ForeignItemKind,\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub span: Span,\n     pub vis: Visibility,"}, {"sha": "ecd3d16d20a578c2b5248603b4d72a2b0e20df7e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -931,7 +931,6 @@ impl_stable_hash_for!(struct hir::ForeignItem {\n     ident -> (ident.name),\n     attrs,\n     node,\n-    id,\n     hir_id,\n     span,\n     vis"}, {"sha": "da6c3b6dc1599f16d174634c369f7f0c55ccb0a1", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -762,8 +762,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_foreign_fn(&mut self, id: ast::NodeId, decl: &hir::FnDecl) {\n-        let def_id = self.cx.tcx.hir().local_def_id(id);\n+    fn check_foreign_fn(&mut self, id: hir::HirId, decl: &hir::FnDecl) {\n+        let def_id = self.cx.tcx.hir().local_def_id_from_hir_id(id);\n         let sig = self.cx.tcx.fn_sig(def_id);\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n         let inputs = if sig.c_variadic {\n@@ -786,8 +786,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_foreign_static(&mut self, id: ast::NodeId, span: Span) {\n-        let def_id = self.cx.tcx.hir().local_def_id(id);\n+    fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {\n+        let def_id = self.cx.tcx.hir().local_def_id_from_hir_id(id);\n         let ty = self.cx.tcx.type_of(def_id);\n         self.check_type_for_ffi_and_report_errors(span, ty);\n     }\n@@ -809,14 +809,14 @@ impl LintPass for ImproperCTypes {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n         let mut vis = ImproperCTypesVisitor { cx };\n-        let abi = cx.tcx.hir().get_foreign_abi(it.id);\n+        let abi = cx.tcx.hir().get_foreign_abi_by_hir_id(it.hir_id);\n         if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n             match it.node {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n-                    vis.check_foreign_fn(it.id, decl);\n+                    vis.check_foreign_fn(it.hir_id, decl);\n                 }\n                 hir::ForeignItemKind::Static(ref ty, _) => {\n-                    vis.check_foreign_static(it.id, ty.span);\n+                    vis.check_foreign_static(it.hir_id, ty.span);\n                 }\n                 hir::ForeignItemKind::Type => ()\n             }"}, {"sha": "9ea277984e7b8e5e64acd059eff1809f51f993ed", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -1161,7 +1161,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ItemKind::ForeignMod(ref fm) => {\n                     self.lazy_seq(fm.items\n                         .iter()\n-                        .map(|foreign_item| tcx.hir().local_def_id(foreign_item.id).index))\n+                        .map(|foreign_item| tcx.hir().local_def_id_from_hir_id(\n+                            foreign_item.hir_id).index))\n                 }\n                 hir::ItemKind::Enum(..) => {\n                     let def = self.tcx.adt_def(def_id);\n@@ -1607,9 +1608,11 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             hir::ForeignItemKind::Type => EntryKind::ForeignType,\n         };\n \n+        let node_id = self.tcx.hir().hir_to_node_id(nitem.hir_id);\n+\n         Entry {\n             kind,\n-            visibility: self.lazy(&ty::Visibility::from_hir(&nitem.vis, nitem.id, tcx)),\n+            visibility: self.lazy(&ty::Visibility::from_hir(&nitem.vis, node_id, tcx)),\n             span: self.lazy(&nitem.span),\n             attributes: self.encode_attributes(&nitem.attrs),\n             children: LazySeq::empty(),\n@@ -1655,7 +1658,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n     }\n     fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) {\n         intravisit::walk_foreign_item(self, ni);\n-        let def_id = self.index.tcx.hir().local_def_id(ni.id);\n+        let def_id = self.index.tcx.hir().local_def_id_from_hir_id(ni.hir_id);\n         self.index.record(def_id,\n                           IsolatedEncoder::encode_info_for_foreign_item,\n                           (def_id, ni));"}, {"sha": "e1487b6be0fed7cc6cebab5b13682ce406a664b6", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for Collector<'a, 'tcx> {\n         };\n \n         let foreign_items = fm.items.iter()\n-            .map(|it| self.tcx.hir().local_def_id(it.id))\n+            .map(|it| self.tcx.hir().local_def_id_from_hir_id(it.hir_id))\n             .collect();\n         self.modules.push(ForeignModule {\n             foreign_items,"}, {"sha": "40c60caffa42d8eb7dd81d67af010c49b924e428", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -22,7 +22,7 @@ fn equate_intrinsic_type<'a, 'tcx>(\n     inputs: Vec<Ty<'tcx>>,\n     output: Ty<'tcx>,\n ) {\n-    let def_id = tcx.hir().local_def_id(it.id);\n+    let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n \n     match it.node {\n         hir::ForeignItemKind::Fn(..) => {}"}, {"sha": "ace6469f46f1b329daa4c8065b6e1a50dedffa74", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -1407,7 +1407,7 @@ pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Ite\n                 }\n             } else {\n                 for item in &m.items {\n-                    let generics = tcx.generics_of(tcx.hir().local_def_id(item.id));\n+                    let generics = tcx.generics_of(tcx.hir().local_def_id_from_hir_id(item.hir_id));\n                     if generics.params.len() - generics.own_counts().lifetimes != 0 {\n                         let mut err = struct_span_err!(\n                             tcx.sess,"}, {"sha": "a66fc328547eb0773cea3b0e8b5f2406ef19505d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -409,7 +409,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n         | hir::ItemKind::GlobalAsm(_) => {}\n         hir::ItemKind::ForeignMod(ref foreign_mod) => {\n             for item in &foreign_mod.items {\n-                let def_id = tcx.hir().local_def_id(item.id);\n+                let def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                 tcx.generics_of(def_id);\n                 tcx.type_of(def_id);\n                 tcx.predicates_of(def_id);"}, {"sha": "15840da2f40ff7cdf1bc95952290e4ff18f8ce47", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -3821,14 +3821,16 @@ impl Clean<Item> for hir::ForeignItem {\n             }\n         };\n \n+        let local_did = cx.tcx.hir().local_def_id_from_hir_id(self.hir_id);\n+\n         Item {\n             name: Some(self.ident.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: local_did,\n             visibility: self.vis.clean(cx),\n-            stability: get_stability(cx, cx.tcx.hir().local_def_id(self.id)),\n-            deprecation: get_deprecation(cx, cx.tcx.hir().local_def_id(self.id)),\n+            stability: get_stability(cx, local_did),\n+            deprecation: get_deprecation(cx, local_did),\n             inner,\n         }\n     }"}, {"sha": "12c7488d47e0c52c2b2911454c84c15401777cc4", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c25193f3ff60faff504a24749761970a72ccdc6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=3c25193f3ff60faff504a24749761970a72ccdc6", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             Node::ForeignItem(it) if !glob => {\n                 // Generate a fresh `extern {}` block if we want to inline a foreign item.\n                 om.foreigns.push(hir::ForeignMod {\n-                    abi: tcx.hir().get_foreign_abi(it.id),\n+                    abi: tcx.hir().get_foreign_abi_by_hir_id(it.hir_id),\n                     items: vec![hir::ForeignItem {\n                         ident: renamed.unwrap_or(it.ident),\n                         .. it.clone()"}]}