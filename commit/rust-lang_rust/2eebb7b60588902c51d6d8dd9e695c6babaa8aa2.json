{"sha": "2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZWJiN2I2MDU4ODkwMmM1MWQ2ZDhkZDllNjk1YzZiYWJhYThhYTI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-02-26T21:25:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:18Z"}, "message": "Make the compiler emit an error if the crate graph contains two crates with the same crate-name and crate-salt but different SVHs.", "tree": {"sha": "560ad9f8aaef9fed7162961441e0ff7cdfe50197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/560ad9f8aaef9fed7162961441e0ff7cdfe50197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "html_url": "https://github.com/rust-lang/rust/commit/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fafdfa8bdc2cf762d84ca2e18215d3e11caf3af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fafdfa8bdc2cf762d84ca2e18215d3e11caf3af5", "html_url": "https://github.com/rust-lang/rust/commit/fafdfa8bdc2cf762d84ca2e18215d3e11caf3af5"}], "stats": {"total": 127, "additions": 103, "deletions": 24}, "files": [{"sha": "4c64923456d8431d5295759665f439102d6fcb24", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -526,11 +526,15 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     let macros = time(time_passes,\n                       \"macro loading\",\n-                      || macro_import::read_macro_defs(sess, &cstore, &krate));\n+                      || macro_import::read_macro_defs(sess, &cstore, &krate, crate_name));\n \n     let mut addl_plugins = Some(addl_plugins);\n     let registrars = time(time_passes, \"plugin loading\", || {\n-        plugin::load::load_plugins(sess, &cstore, &krate, addl_plugins.take().unwrap())\n+        plugin::load::load_plugins(sess,\n+                                   &cstore,\n+                                   &krate,\n+                                   crate_name,\n+                                   addl_plugins.take().unwrap())\n     });\n \n     let mut registry = Registry::new(sess, &krate);\n@@ -755,7 +759,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     time(time_passes,\n          \"external crate/lib resolution\",\n-         || LocalCrateReader::new(sess, cstore, &hir_map).read_crates());\n+         || LocalCrateReader::new(sess, cstore, &hir_map, name).read_crates());\n \n     let lang_items = time(time_passes, \"language item collection\", || {\n         sess.track_errors(|| {"}, {"sha": "11cb2b8a818f4b66eff2cd7b36d11cce116f4e23", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -55,6 +55,7 @@ pub struct CrateReader<'a> {\n     cstore: &'a CStore,\n     next_crate_num: ast::CrateNum,\n     foreign_item_map: FnvHashMap<String, Vec<ast::NodeId>>,\n+    local_crate_name: String,\n }\n \n impl<'a, 'b, 'hir> Visitor<'hir> for LocalCrateReader<'a, 'b> {\n@@ -146,12 +147,15 @@ impl PMDSource {\n }\n \n impl<'a> CrateReader<'a> {\n-    pub fn new(sess: &'a Session, cstore: &'a CStore) -> CrateReader<'a> {\n+    pub fn new(sess: &'a Session,\n+               cstore: &'a CStore,\n+               local_crate_name: &str) -> CrateReader<'a> {\n         CrateReader {\n             sess: sess,\n             cstore: cstore,\n             next_crate_num: cstore.next_crate_num(),\n             foreign_item_map: FnvHashMap(),\n+            local_crate_name: local_crate_name.to_owned(),\n         }\n     }\n \n@@ -272,6 +276,38 @@ impl<'a> CrateReader<'a> {\n         }\n     }\n \n+    fn verify_no_symbol_conflicts(&self,\n+                                  crate_name: &str,\n+                                  span: Span,\n+                                  metadata: &MetadataBlob) {\n+        let disambiguator = decoder::get_crate_disambiguator(metadata.as_slice());\n+\n+        // Check for (potential) conflicts with the local crate\n+        if self.local_crate_name == crate_name &&\n+           &self.sess.crate_disambiguator.borrow()[..] == disambiguator {\n+            span_fatal!(self.sess, span, E0519,\n+                        \"the current crate is indistinguishable from one of its \\\n+                         dependencies: it has the same crate-name `{}` and was \\\n+                         compiled with the same `-C metadata` arguments. This \\\n+                         will result in symbol conflicts between the two.\",\n+                        crate_name)\n+        }\n+\n+        let svh = decoder::get_crate_hash(metadata.as_slice());\n+        // Check for conflicts with any crate loaded so far\n+        self.cstore.iter_crate_data(|_, other| {\n+            if other.name() == crate_name && // same crate-name\n+               other.disambiguator() == disambiguator &&  // same crate-disambiguator\n+               other.hash() != svh { // but different SVH\n+                span_fatal!(self.sess, span, E0520,\n+                        \"found two different crates with name `{}` that are \\\n+                         not distinguished by differing `-C metadata`. This \\\n+                         will result in symbol conflicts between the two.\",\n+                        crate_name)\n+            }\n+        });\n+    }\n+\n     fn register_crate(&mut self,\n                       root: &Option<CratePaths>,\n                       ident: &str,\n@@ -282,6 +318,7 @@ impl<'a> CrateReader<'a> {\n                       -> (ast::CrateNum, Rc<cstore::crate_metadata>,\n                           cstore::CrateSource) {\n         self.verify_rustc_version(name, span, &lib.metadata);\n+        self.verify_no_symbol_conflicts(name, span, &lib.metadata);\n \n         // Claim this crate number and cache it\n         let cnum = self.next_crate_num;\n@@ -713,12 +750,15 @@ impl<'a> CrateReader<'a> {\n }\n \n impl<'a, 'b> LocalCrateReader<'a, 'b> {\n-    pub fn new(sess: &'a Session, cstore: &'a CStore,\n-               map: &'a hir_map::Map<'b>) -> LocalCrateReader<'a, 'b> {\n+    pub fn new(sess: &'a Session,\n+               cstore: &'a CStore,\n+               map: &'a hir_map::Map<'b>,\n+               local_crate_name: &str)\n+               -> LocalCrateReader<'a, 'b> {\n         LocalCrateReader {\n             sess: sess,\n             cstore: cstore,\n-            creader: CrateReader::new(sess, cstore),\n+            creader: CrateReader::new(sess, cstore, local_crate_name),\n             ast_map: map,\n         }\n     }"}, {"sha": "1e265c546c5c4ca3f3b38860d3ca4cb374c8d04b", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -250,6 +250,9 @@ impl crate_metadata {\n     pub fn data<'a>(&'a self) -> &'a [u8] { self.data.as_slice() }\n     pub fn name(&self) -> String { decoder::get_crate_name(self.data()) }\n     pub fn hash(&self) -> Svh { decoder::get_crate_hash(self.data()) }\n+    pub fn disambiguator(&self) -> &str {\n+        decoder::get_crate_disambiguator(self.data())\n+    }\n     pub fn imported_filemaps<'a>(&'a self, codemap: &codemap::CodeMap)\n                                  -> Ref<'a, Vec<ImportedFileMap>> {\n         let filemaps = self.codemap_import_info.borrow();"}, {"sha": "79209a7d26da26717d39ded110ccb941f55b6874", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -1297,8 +1297,8 @@ pub fn maybe_get_crate_name(data: &[u8]) -> Option<String> {\n \n pub fn get_crate_disambiguator<'a>(data: &'a [u8]) -> &'a str {\n     let crate_doc = rbml::Doc::new(data);\n-    let salt_doc = reader::get_doc(crate_doc, tag_crate_disambiguator);\n-    let slice: &'a str = salt_doc.as_str_slice();\n+    let disambiguator_doc = reader::get_doc(crate_doc, tag_crate_disambiguator);\n+    let slice: &'a str = disambiguator_doc.as_str_slice();\n     slice\n }\n "}, {"sha": "ebc7a4b461e682c35306f5b99bfff9bbe06e6eb7", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -87,4 +87,6 @@ register_diagnostics! {\n     E0468, // an `extern crate` loading macros must be at the crate root\n     E0469, // imported macro not found\n     E0470, // reexported macro not found\n+    E0519, // local crate and dependency have same (crate-name, disambiguator)\n+    E0520, // two dependencies have same (crate-name, disambiguator) but different SVH\n }"}, {"sha": "911ca7e315c1f0147cc21110409495793d5a1dd1", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -32,11 +32,11 @@ struct MacroLoader<'a> {\n }\n \n impl<'a> MacroLoader<'a> {\n-    fn new(sess: &'a Session, cstore: &'a CStore) -> MacroLoader<'a> {\n+    fn new(sess: &'a Session, cstore: &'a CStore, crate_name: &str) -> MacroLoader<'a> {\n         MacroLoader {\n             sess: sess,\n             span_whitelist: HashSet::new(),\n-            reader: CrateReader::new(sess, cstore),\n+            reader: CrateReader::new(sess, cstore, crate_name),\n             macros: vec![],\n         }\n     }\n@@ -47,10 +47,13 @@ pub fn call_bad_macro_reexport(a: &Session, b: Span) {\n }\n \n /// Read exported macros.\n-pub fn read_macro_defs(sess: &Session, cstore: &CStore, krate: &ast::Crate)\n+pub fn read_macro_defs(sess: &Session,\n+                       cstore: &CStore,\n+                       krate: &ast::Crate,\n+                       crate_name: &str)\n                        -> Vec<ast::MacroDef>\n {\n-    let mut loader = MacroLoader::new(sess, cstore);\n+    let mut loader = MacroLoader::new(sess, cstore, crate_name);\n \n     // We need to error on `#[macro_use] extern crate` when it isn't at the\n     // crate root, because `$crate` won't work properly. Identify these by"}, {"sha": "ac40215bbb1d0855ab60eaa855e634278f01a6c9", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -44,9 +44,12 @@ fn call_malformed_plugin_attribute(a: &Session, b: Span) {\n }\n \n /// Read plugin metadata and dynamically load registrar functions.\n-pub fn load_plugins(sess: &Session, cstore: &CStore, krate: &ast::Crate,\n+pub fn load_plugins(sess: &Session,\n+                    cstore: &CStore,\n+                    krate: &ast::Crate,\n+                    crate_name: &str,\n                     addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrar> {\n-    let mut loader = PluginLoader::new(sess, cstore);\n+    let mut loader = PluginLoader::new(sess, cstore, crate_name);\n \n     for attr in &krate.attrs {\n         if !attr.check_name(\"plugin\") {\n@@ -82,10 +85,10 @@ pub fn load_plugins(sess: &Session, cstore: &CStore, krate: &ast::Crate,\n }\n \n impl<'a> PluginLoader<'a> {\n-    fn new(sess: &'a Session, cstore: &'a CStore) -> PluginLoader<'a> {\n+    fn new(sess: &'a Session, cstore: &'a CStore, crate_name: &str) -> PluginLoader<'a> {\n         PluginLoader {\n             sess: sess,\n-            reader: CrateReader::new(sess, cstore),\n+            reader: CrateReader::new(sess, cstore, crate_name),\n             plugins: vec![],\n         }\n     }"}, {"sha": "6edf8db9bf7e67534c2b82c4d7febbdfbcb1170b", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -78,11 +78,12 @@\n //!\n //! - In order to be able to also use symbols from two versions of the same\n //!   crate (which naturally also have the same name), a stronger measure is\n-//!   required: The compiler accepts an arbitrary \"salt\" value via the\n-//!   `-C metadata` commandline argument. This salt is then fed into the symbol\n-//!   hash of every exported item. Consequently, the symbols in two identical\n-//!   crates but with different salts are not in conflict with each other. This\n-//!   facility is mainly intended to be used by build tools like Cargo.\n+//!   required: The compiler accepts an arbitrary \"disambiguator\" value via the\n+//!   `-C metadata` commandline argument. This disambiguator is then fed into\n+//!   the symbol hash of every exported item. Consequently, the symbols in two\n+//!   identical crates but with different disambiguators are not in conflict\n+//!   with each other. This facility is mainly intended to be used by build\n+//!   tools like Cargo.\n //!\n //! A note on symbol name stability\n //! -------------------------------"}, {"sha": "e21e6ad204384978da2a27dab911a7af65d58309", "filename": "src/test/auxiliary/inline-default-methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Finline-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Finline-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finline-default-methods.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n pub trait Foo {\n     fn bar(&self);\n     fn foo(&mut self) {}"}, {"sha": "ecddfe99b3be7cbe04eb2d097f7e66f7fd59be9d", "filename": "src/test/auxiliary/issue-13698.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-13698.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-13698.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-13698.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n pub trait Foo {\n     #[doc(hidden)]\n     fn foo(&self) {}"}, {"sha": "145b4df6299956fcc453e159df0cad4b086436e7", "filename": "src/test/auxiliary/issue-15318.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-15318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-15318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-15318.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n #![doc(html_root_url = \"http://example.com/\")]\n \n /// dox"}, {"sha": "644d1634e9d9c40c8cf7a1087c89d8221d3c468c", "filename": "src/test/auxiliary/issue-17476.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-17476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-17476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-17476.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n \n #![doc(html_root_url = \"http://example.com\")]\n "}, {"sha": "2c9271202a650bd20edf2571afa33a7cb49247b8", "filename": "src/test/auxiliary/issue-19190-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-19190-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-19190-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-19190-3.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n use std::ops::Deref;\n \n pub struct Foo;"}, {"sha": "815b78a91d9af7ef7e10582d5d5a602097c3c06f", "filename": "src/test/auxiliary/issue-20646.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-20646.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n pub trait Trait {\n     type Output;\n }"}, {"sha": "2ec761fad96b5cb8df95e579e7bc272f18c748aa", "filename": "src/test/auxiliary/issue-20727.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-20727.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n pub trait Deref {\n     type Target: ?Sized;\n "}, {"sha": "e906311e3aeb42a75d5bd515435651ee80197ab3", "filename": "src/test/auxiliary/issue-21092.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-21092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-21092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-21092.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n pub trait Foo {\n     type Bar;\n     fn foo(&self) {}"}, {"sha": "f618edec5985e594d31ea342a3063d91a4c23129", "filename": "src/test/auxiliary/issue-21801.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-21801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-21801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-21801.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n pub struct Foo;\n \n impl Foo {"}, {"sha": "35a37e27d912fb17022777e94966c74899f9872c", "filename": "src/test/auxiliary/issue-22025.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-22025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-22025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-22025.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n pub mod foo {\n \n     pub trait Foo {}"}, {"sha": "25de698cad10e2308f0b1a5c9f2678d48b35159f", "filename": "src/test/auxiliary/issue-27362.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-27362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-27362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-27362.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n #![feature(const_fn)]\n \n pub const fn foo() {}"}, {"sha": "63c79f875efb2c73fb462e18e5f63b0d1f1d03cb", "filename": "src/test/auxiliary/issue-29584.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-29584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Fauxiliary%2Fissue-29584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-29584.rs?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Cmetadata=aux\n+\n pub struct Foo;\n \n #[doc(hidden)]"}, {"sha": "7d063a4c83cba1cd929bfa4906570bd1f5f5cac9", "filename": "src/test/run-make/extern-overrides-distribution/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Frun-make%2Fextern-overrides-distribution%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Frun-make%2Fextern-overrides-distribution%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-overrides-distribution%2FMakefile?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -1,5 +1,5 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) libc.rs\n+\t$(RUSTC) libc.rs -Cmetadata=foo\n \t$(RUSTC) main.rs --extern libc=$(TMPDIR)/liblibc.rlib"}, {"sha": "66aa78d538637d0d9e8476b47557f2cf5fffa8af", "filename": "src/test/run-make/issue-26006/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Frun-make%2Fissue-26006%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2eebb7b60588902c51d6d8dd9e695c6babaa8aa2/src%2Ftest%2Frun-make%2Fissue-26006%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-26006%2FMakefile?ref=2eebb7b60588902c51d6d8dd9e695c6babaa8aa2", "patch": "@@ -12,7 +12,7 @@ time: libc\n \n libc:\n \tmkdir -p $(OUT)/libc\n-\t$(RUSTC) in/libc/lib.rs --crate-name=libc -o $(OUT)/libc/liblibc.rlib\n+\t$(RUSTC) in/libc/lib.rs --crate-name=libc -Cmetadata=foo -o $(OUT)/libc/liblibc.rlib\n else\n all:\n endif"}]}