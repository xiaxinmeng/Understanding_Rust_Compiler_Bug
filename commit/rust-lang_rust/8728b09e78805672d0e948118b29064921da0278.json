{"sha": "8728b09e78805672d0e948118b29064921da0278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MjhiMDllNzg4MDU2NzJkMGU5NDgxMThiMjkwNjQ5MjFkYTAyNzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T23:58:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:32Z"}, "message": "librustc: De-`@mut` `ScopeInfo::landing_pad`", "tree": {"sha": "f4d2df9693d03178aff7e8aeb6159eda638a39bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4d2df9693d03178aff7e8aeb6159eda638a39bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8728b09e78805672d0e948118b29064921da0278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8728b09e78805672d0e948118b29064921da0278", "html_url": "https://github.com/rust-lang/rust/commit/8728b09e78805672d0e948118b29064921da0278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8728b09e78805672d0e948118b29064921da0278/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7acaa73377e9ed8b337a66c968286e6581dc7b24", "url": "https://api.github.com/repos/rust-lang/rust/commits/7acaa73377e9ed8b337a66c968286e6581dc7b24", "html_url": "https://github.com/rust-lang/rust/commit/7acaa73377e9ed8b337a66c968286e6581dc7b24"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "4df8b2efdd50ab2d98932ee5398e4cddc11a7968", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8728b09e78805672d0e948118b29064921da0278/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728b09e78805672d0e948118b29064921da0278/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8728b09e78805672d0e948118b29064921da0278", "patch": "@@ -997,7 +997,7 @@ pub fn need_invoke(bcx: @Block) -> bool {\n pub fn have_cached_lpad(bcx: @Block) -> bool {\n     let mut res = false;\n     in_lpad_scope_cx(bcx, |inf| {\n-        match inf.landing_pad {\n+        match inf.landing_pad.get() {\n           Some(_) => res = true,\n           None => res = false\n         }\n@@ -1032,11 +1032,11 @@ pub fn get_landing_pad(bcx: @Block) -> BasicBlockRef {\n     let mut pad_bcx = bcx; // Guaranteed to be set below\n     in_lpad_scope_cx(bcx, |inf| {\n         // If there is a valid landing pad still around, use it\n-        match inf.landing_pad {\n+        match inf.landing_pad.get() {\n           Some(target) => cached = Some(target),\n           None => {\n             pad_bcx = lpad_block(bcx, \"unwind\");\n-            inf.landing_pad = Some(pad_bcx.llbb);\n+            inf.landing_pad.set(Some(pad_bcx.llbb));\n           }\n         }\n     });\n@@ -1224,7 +1224,7 @@ pub fn simple_block_scope(parent: Option<@mut ScopeInfo>,\n         loop_label: None,\n         cleanups: RefCell::new(~[]),\n         cleanup_paths: RefCell::new(~[]),\n-        landing_pad: None,\n+        landing_pad: Cell::new(None),\n         node_info: node_info,\n     }\n }\n@@ -1254,7 +1254,7 @@ pub fn loop_scope_block(bcx: @Block,\n         loop_label: loop_label,\n         cleanups: RefCell::new(~[]),\n         cleanup_paths: RefCell::new(~[]),\n-        landing_pad: None,\n+        landing_pad: Cell::new(None),\n         node_info: opt_node_info,\n     }), bcx.is_lpad, n, opt_node_info);\n }"}, {"sha": "26866ce3aef0b6968b25ed2855766f510fc38702", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8728b09e78805672d0e948118b29064921da0278/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8728b09e78805672d0e948118b29064921da0278/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=8728b09e78805672d0e948118b29064921da0278", "patch": "@@ -431,7 +431,7 @@ pub struct cleanup_path {\n }\n \n pub fn shrink_scope_clean(scope_info: &mut ScopeInfo, size: uint) {\n-    scope_info.landing_pad = None;\n+    scope_info.landing_pad.set(None);\n     let new_cleanup_paths = {\n         let cleanup_paths = scope_info.cleanup_paths.borrow();\n         cleanup_paths.get()\n@@ -444,7 +444,7 @@ pub fn shrink_scope_clean(scope_info: &mut ScopeInfo, size: uint) {\n }\n \n pub fn grow_scope_clean(scope_info: &mut ScopeInfo) {\n-    scope_info.landing_pad = None;\n+    scope_info.landing_pad.set(None);\n }\n \n pub fn cleanup_type(cx: ty::ctxt, ty: ty::t) -> cleantype {\n@@ -634,7 +634,7 @@ pub struct ScopeInfo {\n     // cleared when the set of cleanups changes.\n     cleanup_paths: RefCell<~[cleanup_path]>,\n     // Unwinding landing pad. Also cleared when cleanups change.\n-    landing_pad: Option<BasicBlockRef>,\n+    landing_pad: Cell<Option<BasicBlockRef>>,\n     // info about the AST node this scope originated from, if any\n     node_info: Option<NodeInfo>,\n }"}]}