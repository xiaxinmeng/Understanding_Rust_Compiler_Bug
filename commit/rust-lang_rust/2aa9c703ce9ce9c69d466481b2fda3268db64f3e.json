{"sha": "2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "node_id": "C_kwDOAAsO6NoAKDJhYTljNzAzY2U5Y2U5YzY5ZDQ2NjQ4MWIyZmRhMzI2OGRiNjRmM2U", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-02T18:46:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-03T06:26:10Z"}, "message": "Use the same message as type & const generics.", "tree": {"sha": "dca99af1936f6818fa07d6a2a36b805025684aee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca99af1936f6818fa07d6a2a36b805025684aee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "html_url": "https://github.com/rust-lang/rust/commit/2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86bd99060c5f2b60e27c6afa5ad9c904333cb746", "url": "https://api.github.com/repos/rust-lang/rust/commits/86bd99060c5f2b60e27c6afa5ad9c904333cb746", "html_url": "https://github.com/rust-lang/rust/commit/86bd99060c5f2b60e27c6afa5ad9c904333cb746"}], "stats": {"total": 121, "additions": 50, "deletions": 71}, "files": [{"sha": "2d1ac40264de19f4326d5a473ef99842e8920cf5", "filename": "compiler/rustc_error_codes/src/error_codes/E0263.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0263.md", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0263.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0263.md?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A lifetime was declared more than once in the same scope.\n \n Erroneous code example:\n \n-```compile_fail,E0263\n+```compile_fail,E0403\n fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str, z: &'a str) { // error!\n }\n ```"}, {"sha": "288c89b0189c440a486356e9470244c828f2d433", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -1885,9 +1885,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let mut function_value_rib = Rib::new(kind);\n         let mut function_lifetime_rib = LifetimeRib::new(lifetime_kind);\n         let mut seen_bindings = FxHashMap::default();\n-        // Store all seen lifetimes names, and whether they were created in the currently processed\n-        // parameter set.\n-        let mut seen_lifetimes = FxHashMap::default();\n+        // Store all seen lifetimes names from outer scopes.\n+        let mut seen_lifetimes = FxHashSet::default();\n \n         // We also can't shadow bindings from the parent item\n         if let AssocItemRibKind = kind {\n@@ -1905,7 +1904,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n         // Forbid shadowing lifetime bindings\n         for rib in self.lifetime_ribs.iter().rev() {\n-            seen_lifetimes.extend(rib.bindings.iter().map(|(ident, _)| (*ident, false)));\n+            seen_lifetimes.extend(rib.bindings.iter().map(|(ident, _)| *ident));\n             if let LifetimeRibKind::Item = rib.kind {\n                 break;\n             }\n@@ -1915,35 +1914,28 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             let ident = param.ident.normalize_to_macros_2_0();\n             debug!(\"with_generic_param_rib: {}\", param.id);\n \n-            if let GenericParamKind::Lifetime = param.kind {\n-                match seen_lifetimes.entry(ident) {\n-                    Entry::Occupied(entry) => {\n-                        let original = *entry.key();\n-                        let orig_is_param = *entry.get();\n-                        diagnostics::signal_lifetime_shadowing(\n-                            self.r.session,\n-                            original,\n-                            param.ident,\n-                            orig_is_param,\n-                        );\n+            if let GenericParamKind::Lifetime = param.kind\n+                && let Some(&original) = seen_lifetimes.get(&ident)\n+            {\n+                diagnostics::signal_lifetime_shadowing(self.r.session, original, param.ident);\n+                // Record lifetime res, so lowering knows there is something fishy.\n+                self.record_lifetime_res(param.id, LifetimeRes::Error);\n+                continue;\n+            }\n+\n+            match seen_bindings.entry(ident) {\n+                Entry::Occupied(entry) => {\n+                    let span = *entry.get();\n+                    let err = ResolutionError::NameAlreadyUsedInParameterList(ident.name, span);\n+                    self.report_error(param.ident.span, err);\n+                    if let GenericParamKind::Lifetime = param.kind {\n                         // Record lifetime res, so lowering knows there is something fishy.\n                         self.record_lifetime_res(param.id, LifetimeRes::Error);\n                         continue;\n                     }\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(true);\n-                    }\n                 }\n-            } else {\n-                match seen_bindings.entry(ident) {\n-                    Entry::Occupied(entry) => {\n-                        let span = *entry.get();\n-                        let err = ResolutionError::NameAlreadyUsedInParameterList(ident.name, span);\n-                        self.report_error(param.ident.span, err);\n-                    }\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(param.ident.span);\n-                    }\n+                Entry::Vacant(entry) => {\n+                    entry.insert(param.ident.span);\n                 }\n             }\n "}, {"sha": "9213652e35f8e0e98a38f38773cebe5cf4e3dffe", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -2038,29 +2038,14 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n }\n \n /// Report lifetime/lifetime shadowing as an error.\n-pub fn signal_lifetime_shadowing(\n-    sess: &Session,\n-    orig: Ident,\n-    shadower: Ident,\n-    orig_is_param: bool,\n-) {\n-    let mut err = if orig_is_param {\n-        struct_span_err!(\n-            sess,\n-            shadower.span,\n-            E0263,\n-            \"lifetime name `{}` declared twice in the same scope\",\n-            orig.name,\n-        )\n-    } else {\n-        struct_span_err!(\n-            sess,\n-            shadower.span,\n-            E0496,\n-            \"lifetime name `{}` shadows a lifetime name that is already in scope\",\n-            orig.name,\n-        )\n-    };\n+pub fn signal_lifetime_shadowing(sess: &Session, orig: Ident, shadower: Ident) {\n+    let mut err = struct_span_err!(\n+        sess,\n+        shadower.span,\n+        E0496,\n+        \"lifetime name `{}` shadows a lifetime name that is already in scope\",\n+        orig.name,\n+    );\n     err.span_label(orig.span, \"first declared here\");\n     err.span_label(shadower.span, format!(\"lifetime `{}` already in scope\", orig.name));\n     err.emit();"}, {"sha": "92917678e4c02697ac5990a9174838d28f0091b2", "filename": "src/test/ui/error-codes/E0263.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -1,5 +1,5 @@\n fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) {\n-    //~^ ERROR E0263\n+    //~^ ERROR E0403\n }\n \n fn main() {}"}, {"sha": "e3f9aea296a2c351664c8b824c03dd637fb242d8", "filename": "src/test/ui/error-codes/E0263.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -1,11 +1,11 @@\n-error[E0263]: lifetime name `'a` declared twice in the same scope\n+error[E0403]: the name `'a` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/E0263.rs:1:16\n    |\n LL | fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) {\n-   |        --      ^^ lifetime `'a` already in scope\n+   |        --      ^^ already used\n    |        |\n-   |        first declared here\n+   |        first use of `'a`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0263`.\n+For more information about this error, try `rustc --explain E0403`."}, {"sha": "8971fb62626cbfb99a4a635b4a9eb06c5d684724", "filename": "src/test/ui/hygiene/duplicate_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -5,12 +5,12 @@\n \n #[rustc_macro_transparency = \"semitransparent\"]\n macro m($a:lifetime) {\n-    fn g<$a, 'a>() {} //~ ERROR lifetime name `'a` declared twice\n+    fn g<$a, 'a>() {} //~ ERROR the name `'a` is already used for a generic parameter\n }\n \n #[rustc_macro_transparency = \"transparent\"]\n macro n($a:lifetime) {\n-    fn h<$a, 'a>() {} //~ ERROR lifetime name `'a` declared twice\n+    fn h<$a, 'a>() {} //~ ERROR the name `'a` is already used for a generic parameter\n }\n \n m!('a);"}, {"sha": "9f1a75147272dbb3a9c1c5625e7f015381422967", "filename": "src/test/ui/hygiene/duplicate_lifetimes.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -1,31 +1,31 @@\n-error[E0263]: lifetime name `'a` declared twice in the same scope\n+error[E0403]: the name `'a` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate_lifetimes.rs:8:14\n    |\n LL |     fn g<$a, 'a>() {}\n-   |              ^^ lifetime `'a` already in scope\n+   |              ^^ already used\n ...\n LL | m!('a);\n    | ------\n    | |  |\n-   | |  first declared here\n+   | |  first use of `'a`\n    | in this macro invocation\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0263]: lifetime name `'a` declared twice in the same scope\n+error[E0403]: the name `'a` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate_lifetimes.rs:13:14\n    |\n LL |     fn h<$a, 'a>() {}\n-   |              ^^ lifetime `'a` already in scope\n+   |              ^^ already used\n ...\n LL | n!('a);\n    | ------\n    | |  |\n-   | |  first declared here\n+   | |  first use of `'a`\n    | in this macro invocation\n    |\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0263`.\n+For more information about this error, try `rustc --explain E0403`."}, {"sha": "f6616591a3df223db8782e29ff56dffa662e6991", "filename": "src/test/ui/regions/regions-name-duplicated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.rs?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -1,5 +1,5 @@\n struct Foo<'a, 'a> {\n-    //~^ ERROR lifetime name `'a` declared twice\n+    //~^ ERROR the name `'a` is already used for a generic parameter\n     x: &'a isize,\n }\n "}, {"sha": "cef73c18d371e458001501012bd26f34fcab1360", "filename": "src/test/ui/regions/regions-name-duplicated.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aa9c703ce9ce9c69d466481b2fda3268db64f3e/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.stderr?ref=2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "patch": "@@ -1,11 +1,11 @@\n-error[E0263]: lifetime name `'a` declared twice in the same scope\n+error[E0403]: the name `'a` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/regions-name-duplicated.rs:1:16\n    |\n LL | struct Foo<'a, 'a> {\n-   |            --  ^^ lifetime `'a` already in scope\n+   |            --  ^^ already used\n    |            |\n-   |            first declared here\n+   |            first use of `'a`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0263`.\n+For more information about this error, try `rustc --explain E0403`."}]}