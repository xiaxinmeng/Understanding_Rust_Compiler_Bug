{"sha": "43206f41625b8ad670d65bcad37686b40a1c7c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMjA2ZjQxNjI1YjhhZDY3MGQ2NWJjYWQzNzY4NmI0MGExYzdjNDg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-11-30T00:15:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-30T00:15:31Z"}, "message": "Merge pull request #3223 from scampi/issue3213\n\nend expressions like return/continue/break with a semicolon", "tree": {"sha": "1797db6761ac757cafa0ad586812b44b8639088b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1797db6761ac757cafa0ad586812b44b8639088b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43206f41625b8ad670d65bcad37686b40a1c7c48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcAIEjCRBK7hj4Ov3rIwAAdHIIADnId4GlbsjIH4TlrHe+EK8H\nl8gIMP79cVtuR1OgyhmCB4uHrolIT6iZPl0vufRAIOqI2z9+jnSMIVXKBy5hJMEd\nsO/TbUcHdNDfHOrP/BqFk0rE7//Cpf/AHit3pG883NfxVhHI+nKnZLIRztStcp9t\nsV0CD4Sc/m4VogSyCDttM4EoejCxfrrt0n4mMlgU0R0X7otFgLLUuUrn5D6z/Nzz\nxUTwlO/Rvc+wL5WrEy3rQUf/L5hVZYhcCll76kInlpO0qNk/F9oldG/Sqv4U0OG3\nKxsXWPdTGAj5vWz0cFTfzOT2HjXRgBstXulC5GiSDW2V6PBZst/ILmQ+3V70d6Q=\n=Y858\n-----END PGP SIGNATURE-----\n", "payload": "tree 1797db6761ac757cafa0ad586812b44b8639088b\nparent 4f233a513e0f52bfea3c89f0660ea4f7f4c13fb6\nparent d03d9a45efd6995533e2cd79e458cbfeb8408e6e\nauthor Seiichi Uchida <seuchida@gmail.com> 1543536931 +0900\ncommitter GitHub <noreply@github.com> 1543536931 +0900\n\nMerge pull request #3223 from scampi/issue3213\n\nend expressions like return/continue/break with a semicolon"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43206f41625b8ad670d65bcad37686b40a1c7c48", "html_url": "https://github.com/rust-lang/rust/commit/43206f41625b8ad670d65bcad37686b40a1c7c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43206f41625b8ad670d65bcad37686b40a1c7c48/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f233a513e0f52bfea3c89f0660ea4f7f4c13fb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f233a513e0f52bfea3c89f0660ea4f7f4c13fb6", "html_url": "https://github.com/rust-lang/rust/commit/4f233a513e0f52bfea3c89f0660ea4f7f4c13fb6"}, {"sha": "d03d9a45efd6995533e2cd79e458cbfeb8408e6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03d9a45efd6995533e2cd79e458cbfeb8408e6e", "html_url": "https://github.com/rust-lang/rust/commit/d03d9a45efd6995533e2cd79e458cbfeb8408e6e"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "b7324829393645ab62291a1fc89e83638492bc35", "filename": "src/config/license.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43206f41625b8ad670d65bcad37686b40a1c7c48/src%2Fconfig%2Flicense.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43206f41625b8ad670d65bcad37686b40a1c7c48/src%2Fconfig%2Flicense.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flicense.rs?ref=43206f41625b8ad670d65bcad37686b40a1c7c48", "patch": "@@ -137,7 +137,7 @@ impl TemplateParser {\n                 return Err(LicenseError::Parse(format!(\n                     \"incomplete escape sequence on l. {}\",\n                     parser.linum\n-                )))\n+                )));\n             }\n             _ => (),\n         }"}, {"sha": "56d2cc5c59816a9dd82860c81df11f45b4d7b328", "filename": "src/matches.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43206f41625b8ad670d65bcad37686b40a1c7c48/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43206f41625b8ad670d65bcad37686b40a1c7c48/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=43206f41625b8ad670d65bcad37686b40a1c7c48", "patch": "@@ -29,7 +29,7 @@ use source_map::SpanUtils;\n use spanned::Spanned;\n use utils::{\n     contains_skip, extra_offset, first_line_width, inner_attributes, last_line_extendable, mk_sp,\n-    ptr_vec_to_ref_vec, trimmed_last_line_width,\n+    ptr_vec_to_ref_vec, semicolon_for_expr, trimmed_last_line_width,\n };\n \n /// A simple wrapper type against `ast::Arm`. Used inside `write_list()`.\n@@ -413,7 +413,12 @@ fn rewrite_match_body(\n             } else {\n                 \"\"\n             };\n-            (\"{\", format!(\"{}}}{}\", indent_str, comma))\n+            let semicolon = if semicolon_for_expr(context, body) {\n+                \";\"\n+            } else {\n+                \"\"\n+            };\n+            (\"{\", format!(\"{}{}}}{}\", semicolon, indent_str, comma))\n         } else {\n             (\"\", String::from(\",\"))\n         };"}, {"sha": "a00ec4d36619c9d9e11d26f2a03d8490adbc7f21", "filename": "tests/source/issue-3213.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43206f41625b8ad670d65bcad37686b40a1c7c48/tests%2Fsource%2Fissue-3213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43206f41625b8ad670d65bcad37686b40a1c7c48/tests%2Fsource%2Fissue-3213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3213.rs?ref=43206f41625b8ad670d65bcad37686b40a1c7c48", "patch": "@@ -0,0 +1,7 @@\n+fn foo() {\n+    match 0 {\n+        0 => return AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+        1 => AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+        _ => \"\",\n+    };\n+}"}, {"sha": "b226d60b7c688705bd41dbd480315b9e6cfd956e", "filename": "tests/source/match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43206f41625b8ad670d65bcad37686b40a1c7c48/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43206f41625b8ad670d65bcad37686b40a1c7c48/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=43206f41625b8ad670d65bcad37686b40a1c7c48", "patch": "@@ -545,7 +545,7 @@ fn issue_3005() {\n                  {\n                      return NoCalcLength::parse_dimension(context, value, unit)\n                          .map(LengthOrPercentage::Length)\n-                         .map_err(|()| location.new_unexpected_token_error(token.clone()))\n+                         .map_err(|()| location.new_unexpected_token_error(token.clone()));\n                  },\n              }\n }"}, {"sha": "bd2ee48138a64b12d5226bd6c76be40415421800", "filename": "tests/target/issue-3213.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43206f41625b8ad670d65bcad37686b40a1c7c48/tests%2Ftarget%2Fissue-3213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43206f41625b8ad670d65bcad37686b40a1c7c48/tests%2Ftarget%2Fissue-3213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3213.rs?ref=43206f41625b8ad670d65bcad37686b40a1c7c48", "patch": "@@ -0,0 +1,11 @@\n+fn foo() {\n+    match 0 {\n+        0 => {\n+            return AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n+        }\n+        1 => {\n+            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+        }\n+        _ => \"\",\n+    };\n+}"}, {"sha": "f45574ee46c94af1e1adcf5769d4fb00dccad2df", "filename": "tests/target/match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43206f41625b8ad670d65bcad37686b40a1c7c48/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43206f41625b8ad670d65bcad37686b40a1c7c48/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=43206f41625b8ad670d65bcad37686b40a1c7c48", "patch": "@@ -572,7 +572,7 @@ fn issue_3005() {\n         } if num_context.is_ok(context.parsing_mode, value) => {\n             return NoCalcLength::parse_dimension(context, value, unit)\n                 .map(LengthOrPercentage::Length)\n-                .map_err(|()| location.new_unexpected_token_error(token.clone()))\n+                .map_err(|()| location.new_unexpected_token_error(token.clone()));\n         }\n     }\n }"}]}