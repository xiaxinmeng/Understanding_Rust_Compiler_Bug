{"sha": "fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjU4M2JkZmMzMTkzMjNjYmI2YWM4ZTk4YzJhMTAyMGNiNGJhYTY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T13:09:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-13T13:09:29Z"}, "message": "Rollup merge of #66335 - Mark-Simulacrum:self-profile-to-data, r=michaelwoerister\n\nMove self-profile infrastructure to data structures\n\nThe single dependency on queries (QueryName) can be fairly easily\nabstracted via a trait and this further decouples Session from librustc\n(the primary goal).\n\nThis is intended as a precursor to moving Session out of librustc, but since that involves lots of smaller steps that move around code I'm splitting it up into separate PRs.", "tree": {"sha": "4dd6841cfb02206c6cf265542fa48a617c44292d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dd6841cfb02206c6cf265542fa48a617c44292d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzACJCRBK7hj4Ov3rIwAAdHIIAIxiNCyRODOIBI21mhbVUC8K\nwaZT/7T5uFWgRzIe1m6YlWb2R7We0Ez3wv6m2WAqUEmWXfo36gtnJbbLLMsADy8Q\nfBEvXwve7fAgBVRjJY5xeByERA2AOXL8FrfJRxb9ibju+9jSrxUb61jy0yrnbiBH\nFWHht1pJf4yN9o+kAvi8CIlesztgnm8OrnULyr+ZdXw45aiPdm62tn9rNK4E6V2o\n1Nn1BRcodPCtLyjYy03W2Z/7yeFlX6bBRsfs9vVFsIBsVlg1fGDwwXQBm4XOy5Ss\nivk2X3V9uRVVFkrp6oNylhnQJFJhOLx6Xn8d8EK1gWjpNwI1ZlsYQUGBGVn0t8w=\n=0ycF\n-----END PGP SIGNATURE-----\n", "payload": "tree 4dd6841cfb02206c6cf265542fa48a617c44292d\nparent f735cd2f897c5497c5d538c927ea892f74c02c62\nparent 2fd545485aea36d0dcb403375218fd801f4a2ca8\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573650569 +0900\ncommitter GitHub <noreply@github.com> 1573650569 +0900\n\nRollup merge of #66335 - Mark-Simulacrum:self-profile-to-data, r=michaelwoerister\n\nMove self-profile infrastructure to data structures\n\nThe single dependency on queries (QueryName) can be fairly easily\nabstracted via a trait and this further decouples Session from librustc\n(the primary goal).\n\nThis is intended as a precursor to moving Session out of librustc, but since that involves lots of smaller steps that move around code I'm splitting it up into separate PRs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "html_url": "https://github.com/rust-lang/rust/commit/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f735cd2f897c5497c5d538c927ea892f74c02c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/f735cd2f897c5497c5d538c927ea892f74c02c62", "html_url": "https://github.com/rust-lang/rust/commit/f735cd2f897c5497c5d538c927ea892f74c02c62"}, {"sha": "2fd545485aea36d0dcb403375218fd801f4a2ca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd545485aea36d0dcb403375218fd801f4a2ca8", "html_url": "https://github.com/rust-lang/rust/commit/2fd545485aea36d0dcb403375218fd801f4a2ca8"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "7c074fb18a6f16b62f584de5fcfcab6df0caf159", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -3120,7 +3120,6 @@ dependencies = [\n  \"graphviz\",\n  \"jobserver\",\n  \"log\",\n- \"measureme\",\n  \"num_cpus\",\n  \"parking_lot 0.9.0\",\n  \"polonius-engine\",\n@@ -3470,6 +3469,7 @@ dependencies = [\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n+ \"bitflags\",\n  \"cfg-if\",\n  \"crossbeam-utils 0.6.5\",\n  \"ena\",\n@@ -3478,6 +3478,7 @@ dependencies = [\n  \"jobserver\",\n  \"lazy_static 1.3.0\",\n  \"log\",\n+ \"measureme\",\n  \"parking_lot 0.9.0\",\n  \"rustc-hash\",\n  \"rustc-rayon 0.3.0\","}, {"sha": "bcbe765b85073cef280a035248e9939cc341a7dd", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -40,4 +40,3 @@ byteorder = { version = \"1.3\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-measureme = \"0.4\""}, {"sha": "7dbacfd133f3f3d7df2d2be2bccc50e4da3a6dd6", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -124,7 +124,6 @@ pub mod util {\n     pub mod captures;\n     pub mod common;\n     pub mod nodemap;\n-    pub mod profiling;\n     pub mod bug;\n }\n "}, {"sha": "a69584cb90ad1c5d5c408fee4c928052867555af", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -27,11 +27,11 @@ use syntax::source_map;\n use syntax::sess::{ParseSess, ProcessCfgMod};\n use syntax::symbol::Symbol;\n use syntax_pos::{MultiSpan, Span};\n-use crate::util::profiling::{SelfProfiler, SelfProfilerRef};\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n use rustc_data_structures::flock;\n use rustc_data_structures::jobserver;\n+use rustc_data_structures::profiling::{SelfProfiler, SelfProfilerRef};\n use ::jobserver::Client;\n \n use std;\n@@ -1091,7 +1091,6 @@ fn build_session_(\n             );\n             match profiler {\n                 Ok(profiler) => {\n-                    crate::ty::query::QueryName::register_with_profiler(&profiler);\n                     Some(Arc::new(profiler))\n                 },\n                 Err(e) => {"}, {"sha": "a15acb00c17fbcc49353d6caa2ca87404f02d7c1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -46,11 +46,11 @@ use crate::ty::CanonicalPolyFnSig;\n use crate::util::common::ErrorReported;\n use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap, ItemLocalSet, NodeMap};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n-use crate::util::profiling::SelfProfilerRef;\n \n use errors::DiagnosticBuilder;\n use arena::SyncDroplessArena;\n use smallvec::SmallVec;\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::stable_hasher::{\n     HashStable, StableHasher, StableVec, hash_stable_hashmap,\n };"}, {"sha": "7e126459dcc731aa8d8d690d6d30158edc68735b", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -6,7 +6,7 @@ use crate::ty::query::queries;\n use crate::ty::query::{Query, QueryName};\n use crate::ty::query::QueryCache;\n use crate::ty::query::plumbing::CycleError;\n-use crate::util::profiling::ProfileCategory;\n+use rustc_data_structures::profiling::ProfileCategory;\n \n use std::borrow::Cow;\n use std::hash::Hash;"}, {"sha": "a1eb1c43335b1caac4c3f31a4bde61f0ed77147d", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -39,7 +39,7 @@ use crate::ty::util::NeedsDrop;\n use crate::ty::subst::SubstsRef;\n use crate::util::nodemap::{DefIdSet, DefIdMap};\n use crate::util::common::ErrorReported;\n-use crate::util::profiling::ProfileCategory::*;\n+use rustc_data_structures::profiling::ProfileCategory::*;\n \n use rustc_data_structures::svh::Svh;\n use rustc_index::vec::IndexVec;"}, {"sha": "1c15b7d5f3559ec844ea2423567ac22299f1cd86", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -672,7 +672,7 @@ macro_rules! define_queries_inner {\n             rustc_data_structures::stable_hasher::StableHasher,\n             ich::StableHashingContext\n         };\n-        use crate::util::profiling::ProfileCategory;\n+        use rustc_data_structures::profiling::ProfileCategory;\n \n         define_queries_struct! {\n             tcx: $tcx,\n@@ -816,8 +816,20 @@ macro_rules! define_queries_inner {\n             $($name),*\n         }\n \n+        impl rustc_data_structures::profiling::QueryName for QueryName {\n+            fn discriminant(self) -> std::mem::Discriminant<QueryName> {\n+                std::mem::discriminant(&self)\n+            }\n+\n+            fn as_str(self) -> &'static str {\n+                QueryName::as_str(&self)\n+            }\n+        }\n+\n         impl QueryName {\n-            pub fn register_with_profiler(profiler: &crate::util::profiling::SelfProfiler) {\n+            pub fn register_with_profiler(\n+                profiler: &rustc_data_structures::profiling::SelfProfiler,\n+            ) {\n                 $(profiler.register_query_name(QueryName::$name);)*\n             }\n "}, {"sha": "ed901fa064a4e3e7064fabb5908cff5240afeb83", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -19,7 +19,7 @@ use rustc::util::nodemap::FxHashMap;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::ty::TyCtxt;\n use rustc::util::common::{time_depth, set_time_depth, print_time_passes_entry};\n-use rustc::util::profiling::SelfProfilerRef;\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "0fd47115022c2ce63d74f0cf6df7c1d076bdfdb4", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -25,6 +25,8 @@ rayon-core = { version = \"0.3.0\", package = \"rustc-rayon-core\" }\n rustc-hash = \"1.0.1\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_index = { path = \"../librustc_index\", package = \"rustc_index\" }\n+bitflags = \"1.2.1\"\n+measureme = \"0.4\"\n \n [dependencies.parking_lot]\n version = \"0.9\""}, {"sha": "fb541637e5f79da6c267ea39fc4b67493ee26e3c", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -94,6 +94,7 @@ pub use ena::unify;\n pub mod vec_linked_list;\n pub mod work_queue;\n pub mod fingerprint;\n+pub mod profiling;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "86f59bfabe627eb1480b9960b5fe9b05c257305f", "filename": "src/librustc_data_structures/profiling.rs", "status": "renamed", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -7,8 +7,6 @@ use std::sync::Arc;\n use std::thread::ThreadId;\n use std::u32;\n \n-use crate::ty::query::QueryName;\n-\n use measureme::{StringId, TimestampKind};\n \n /// MmapSerializatioSink is faster on macOS and Linux\n@@ -20,6 +18,10 @@ type SerializationSink = measureme::FileSerializationSink;\n \n type Profiler = measureme::Profiler<SerializationSink>;\n \n+pub trait QueryName: Sized + Copy {\n+    fn discriminant(self) -> Discriminant<Self>;\n+    fn as_str(self) -> &'static str;\n+}\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd)]\n pub enum ProfileCategory {\n@@ -32,7 +34,7 @@ pub enum ProfileCategory {\n     Other,\n }\n \n-bitflags! {\n+bitflags::bitflags! {\n     struct EventFilter: u32 {\n         const GENERIC_ACTIVITIES = 1 << 0;\n         const QUERY_PROVIDERS    = 1 << 1;\n@@ -137,7 +139,7 @@ impl SelfProfilerRef {\n     /// Start profiling a query provider. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]\n-    pub fn query_provider(&self, query_name: QueryName) -> TimingGuard<'_> {\n+    pub fn query_provider(&self, query_name: impl QueryName) -> TimingGuard<'_> {\n         self.exec(EventFilter::QUERY_PROVIDERS, |profiler| {\n             let event_id = SelfProfiler::get_query_name_string_id(query_name);\n             TimingGuard::start(profiler, profiler.query_event_kind, event_id)\n@@ -146,7 +148,7 @@ impl SelfProfilerRef {\n \n     /// Record a query in-memory cache hit.\n     #[inline(always)]\n-    pub fn query_cache_hit(&self, query_name: QueryName) {\n+    pub fn query_cache_hit(&self, query_name: impl QueryName) {\n         self.non_guard_query_event(\n             |profiler| profiler.query_cache_hit_event_kind,\n             query_name,\n@@ -159,7 +161,7 @@ impl SelfProfilerRef {\n     /// Profiling continues until the TimingGuard returned from this call is\n     /// dropped.\n     #[inline(always)]\n-    pub fn query_blocked(&self, query_name: QueryName) -> TimingGuard<'_> {\n+    pub fn query_blocked(&self, query_name: impl QueryName) -> TimingGuard<'_> {\n         self.exec(EventFilter::QUERY_BLOCKED, |profiler| {\n             let event_id = SelfProfiler::get_query_name_string_id(query_name);\n             TimingGuard::start(profiler, profiler.query_blocked_event_kind, event_id)\n@@ -170,7 +172,7 @@ impl SelfProfilerRef {\n     /// incremental compilation on-disk cache. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]\n-    pub fn incr_cache_loading(&self, query_name: QueryName) -> TimingGuard<'_> {\n+    pub fn incr_cache_loading(&self, query_name: impl QueryName) -> TimingGuard<'_> {\n         self.exec(EventFilter::INCR_CACHE_LOADS, |profiler| {\n             let event_id = SelfProfiler::get_query_name_string_id(query_name);\n             TimingGuard::start(\n@@ -185,7 +187,7 @@ impl SelfProfilerRef {\n     fn non_guard_query_event(\n         &self,\n         event_kind: fn(&SelfProfiler) -> StringId,\n-        query_name: QueryName,\n+        query_name: impl QueryName,\n         event_filter: EventFilter,\n         timestamp_kind: TimestampKind\n     ) {\n@@ -203,6 +205,12 @@ impl SelfProfilerRef {\n             TimingGuard::none()\n         }));\n     }\n+\n+    pub fn register_queries(&self, f: impl FnOnce(&SelfProfiler)) {\n+        if let Some(profiler) = &self.profiler {\n+            f(&profiler)\n+        }\n+    }\n }\n \n pub struct SelfProfiler {\n@@ -274,15 +282,15 @@ impl SelfProfiler {\n         })\n     }\n \n-    fn get_query_name_string_id(query_name: QueryName) -> StringId {\n+    fn get_query_name_string_id(query_name: impl QueryName) -> StringId {\n         let discriminant = unsafe {\n-            mem::transmute::<Discriminant<QueryName>, u64>(mem::discriminant(&query_name))\n+            mem::transmute::<Discriminant<_>, u64>(query_name.discriminant())\n         };\n \n         StringId::reserved(discriminant as u32)\n     }\n \n-    pub fn register_query_name(&self, query_name: QueryName) {\n+    pub fn register_query_name(&self, query_name: impl QueryName) {\n         let id = SelfProfiler::get_query_name_string_id(query_name);\n         self.profiler.alloc_string_with_reserved_id(id, query_name.as_str());\n     }", "previous_filename": "src/librustc/util/profiling.rs"}, {"sha": "6b9d708cefacab0399933e2c3aa4d06f3fa19879", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab583bdfc319323cbb6ac8e98c2a1020cb4baa6/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=fab583bdfc319323cbb6ac8e98c2a1020cb4baa6", "patch": "@@ -108,6 +108,10 @@ pub fn create_session(\n         process_configure_mod,\n     );\n \n+    sess.prof.register_queries(|profiler| {\n+        rustc::ty::query::QueryName::register_with_profiler(&profiler);\n+    });\n+\n     let codegen_backend = get_codegen_backend(&sess);\n \n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));"}]}