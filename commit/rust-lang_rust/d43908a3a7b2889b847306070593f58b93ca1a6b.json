{"sha": "d43908a3a7b2889b847306070593f58b93ca1a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MzkwOGEzYTdiMjg4OWI4NDczMDYwNzA1OTNmNThiOTNjYTFhNmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-13T08:32:35Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-13T10:04:03Z"}, "message": "doc: document the #[deriving] attribute.\n\nCloses #4916.", "tree": {"sha": "c326f1122a63e6a1b261d3e5fd5acab14091580f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c326f1122a63e6a1b261d3e5fd5acab14091580f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43908a3a7b2889b847306070593f58b93ca1a6b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43908a3a7b2889b847306070593f58b93ca1a6b", "html_url": "https://github.com/rust-lang/rust/commit/d43908a3a7b2889b847306070593f58b93ca1a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43908a3a7b2889b847306070593f58b93ca1a6b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5561bc18b45f3a8930a05c3523d4f341b2462f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5561bc18b45f3a8930a05c3523d4f341b2462f", "html_url": "https://github.com/rust-lang/rust/commit/8a5561bc18b45f3a8930a05c3523d4f341b2462f"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "8dbc503d32e2a3e1dbcd1820192df72649779aa6", "filename": "doc/rust.md", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d43908a3a7b2889b847306070593f58b93ca1a6b/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d43908a3a7b2889b847306070593f58b93ca1a6b/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=d43908a3a7b2889b847306070593f58b93ca1a6b", "patch": "@@ -1425,6 +1425,8 @@ names are effectively reserved. Some significant attributes include:\n * The `test` attribute, for marking functions as unit tests.\n * The `allow`, `warn`, `forbid`, and `deny` attributes, for controlling lint checks. Lint checks supported\n by the compiler can be found via `rustc -W help`.\n+* The `deriving` attribute, for automatically generating\n+  implementations of certain traits.\n \n Other attributes may be added or removed during development of the language.\n \n@@ -1526,6 +1528,47 @@ A complete list of the built-in language items follows:\n > **Note:** This list is likely to become out of date. We should auto-generate it\n > from `librustc/middle/lang_items.rs`.\n \n+### Deriving\n+\n+The `deriving` attribute allows certain traits to be automatically\n+implemented for data structures. For example, the following will\n+create an `impl` for the `Eq` and `Clone` traits for `Foo`, the type\n+parameter `T` will be given the `Eq` or `Clone` constraints for the\n+appropriate `impl`:\n+\n+~~~\n+#[deriving(Eq, Clone)]\n+struct Foo<T> {\n+    a: int,\n+    b: T\n+}\n+~~~\n+\n+The generated `impl` for `Eq` is equivalent to\n+\n+~~~\n+# struct Foo<T> { a: int, b: T }\n+impl<T: Eq> Eq for Foo<T> {\n+    fn eq(&self, other: &Foo<T>) -> bool {\n+        self.a == other.a && self.b == other.b\n+    }\n+\n+    fn ne(&self, other: &Foo<T>) -> bool {\n+        self.a != other.a || self.b != other.b\n+    }\n+}\n+~~~\n+\n+Supported traits for `deriving` are:\n+\n+* Comparison traits: `Eq`, `TotalEq`, `Ord`, `TotalOrd`.\n+* Serialization: `Encodable`, `Decodable`. These require `std`.\n+* `Clone`, to perform deep copies.\n+* `IterBytes`, to iterate over the bytes in a data type.\n+* `Rand`, to create a random instance of a data type.\n+* `ToStr`, to convert to a string. For a type with this instance,\n+  `obj.to_str()` has the same output as `fmt!(\"%?\", obj)`.\n+\n # Statements and expressions\n \n Rust is _primarily_ an expression language. This means that most forms of"}, {"sha": "4a680d0130325318a7e1fdd2b9238e422eec8b23", "filename": "doc/tutorial.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d43908a3a7b2889b847306070593f58b93ca1a6b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/d43908a3a7b2889b847306070593f58b93ca1a6b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=d43908a3a7b2889b847306070593f58b93ca1a6b", "patch": "@@ -2290,6 +2290,27 @@ let nonsense = mycircle.radius() * mycircle.area();\n \n > ***Note:*** Trait inheritance does not actually work with objects yet\n \n+## Deriving implementations for traits\n+\n+A small number of traits in `core` and `std` can have implementations\n+that can be automatically derived. These instances are specified by\n+placing the `deriving` attribute on a data type declaration. For\n+example, the following will mean that `Circle` has an implementation\n+for `Eq` and can be used with the equality operators, and that a value\n+of type `ABC` can be randomly generated and converted to a string:\n+\n+~~~\n+#[deriving(Eq)]\n+struct Circle { radius: float }\n+\n+#[deriving(Rand, ToStr)]\n+enum ABC { A, B, C }\n+~~~\n+\n+The full list of derivable traits is `Eq`, `TotalEq`, `Ord`,\n+`TotalOrd`, `Encodable` `Decodable`, `Clone`, `IterBytes`, `Rand` and\n+`ToStr`.\n+\n # Modules and crates\n \n The Rust namespace is arranged in a hierarchy of modules. Each source"}]}