{"sha": "f75b35046777c6a4aa9245edbbc5ca7a340687f5", "node_id": "C_kwDOAAsO6NoAKGY3NWIzNTA0Njc3N2M2YTRhYTkyNDVlZGJiYzVjYTdhMzQwNjg3ZjU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-01-31T18:27:09Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-01-31T18:27:09Z"}, "message": "rustdoc: stop making unstable items transparent\n\nFixes #93393", "tree": {"sha": "472d83975171b094e1f1b1023f8781c0eba8cf31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472d83975171b094e1f1b1023f8781c0eba8cf31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f75b35046777c6a4aa9245edbbc5ca7a340687f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f75b35046777c6a4aa9245edbbc5ca7a340687f5", "html_url": "https://github.com/rust-lang/rust/commit/f75b35046777c6a4aa9245edbbc5ca7a340687f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f75b35046777c6a4aa9245edbbc5ca7a340687f5/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64ef7d07d0411315be85a646586cb85eeb9c136", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64ef7d07d0411315be85a646586cb85eeb9c136", "html_url": "https://github.com/rust-lang/rust/commit/a64ef7d07d0411315be85a646586cb85eeb9c136"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "bd7548003ad3b0cb1cd25a26dd8895d6f49cf3b8", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f75b35046777c6a4aa9245edbbc5ca7a340687f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75b35046777c6a4aa9245edbbc5ca7a340687f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=f75b35046777c6a4aa9245edbbc5ca7a340687f5", "patch": "@@ -355,7 +355,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n             }\n \n             clean::ImportItem(ref import) => {\n-                let (stab, stab_tags) = if let Some(import_def_id) = import.source.did {\n+                let stab_tags = if let Some(import_def_id) = import.source.did {\n                     let ast_attrs = cx.tcx().get_attrs_unchecked(import_def_id);\n                     let import_attrs = Box::new(clean::Attributes::from_ast(ast_attrs));\n \n@@ -367,15 +367,12 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                         ..myitem.clone()\n                     };\n \n-                    let stab = import_item.stability_class(cx.tcx());\n                     let stab_tags = Some(extra_info_tags(&import_item, item, cx.tcx()));\n-                    (stab, stab_tags)\n+                    stab_tags\n                 } else {\n-                    (None, None)\n+                    None\n                 };\n \n-                let add = if stab.is_some() { \" \" } else { \"\" };\n-\n                 w.write_str(ITEM_TABLE_ROW_OPEN);\n                 let id = match import.kind {\n                     clean::ImportKind::Simple(s) => {\n@@ -391,11 +388,10 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 };\n                 write!(\n                     w,\n-                    \"<div class=\\\"item-left{add}{stab}\\\"{id}>\\\n+                    \"<div class=\\\"item-left\\\"{id}>\\\n                          <code>{vis}{imp}</code>\\\n                      </div>\\\n                      {stab_tags_before}{stab_tags}{stab_tags_after}\",\n-                    stab = stab.unwrap_or_default(),\n                     vis = visibility_print_with_space(myitem.visibility(tcx), myitem.item_id, cx),\n                     imp = import.print(cx),\n                 );\n@@ -417,9 +413,6 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                     _ => \"\",\n                 };\n \n-                let stab = myitem.stability_class(cx.tcx());\n-                let add = if stab.is_some() { \" \" } else { \"\" };\n-\n                 let visibility_emoji = match myitem.visibility(tcx) {\n                     Some(ty::Visibility::Restricted(_)) => {\n                         \"<span title=\\\"Restricted Visibility\\\">&nbsp;\ud83d\udd12</span> \"\n@@ -437,7 +430,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                 };\n                 write!(\n                     w,\n-                    \"<div class=\\\"item-left{add}{stab}\\\">\\\n+                    \"<div class=\\\"item-left\\\">\\\n                         <a class=\\\"{class}\\\" href=\\\"{href}\\\" title=\\\"{title}\\\">{name}</a>\\\n                         {visibility_emoji}\\\n                         {unsafety_flag}\\\n@@ -448,8 +441,6 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n                     visibility_emoji = visibility_emoji,\n                     stab_tags = extra_info_tags(myitem, item, cx.tcx()),\n                     class = myitem.type_(),\n-                    add = add,\n-                    stab = stab.unwrap_or_default(),\n                     unsafety_flag = unsafety_flag,\n                     href = item_path(myitem.type_(), myitem.name.unwrap().as_str()),\n                     title = [myitem.type_().to_string(), full_path(cx, myitem)]"}, {"sha": "ae7d65efa557516bdd33fa5c3ce538448bfbceaf", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f75b35046777c6a4aa9245edbbc5ca7a340687f5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/f75b35046777c6a4aa9245edbbc5ca7a340687f5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=f75b35046777c6a4aa9245edbbc5ca7a340687f5", "patch": "@@ -977,10 +977,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \t\t0 -1px 0 black;\n }\n \n-.item-left.unstable {\n-\topacity: 0.65;\n-}\n-\n .since {\n \tfont-weight: normal;\n \tfont-size: initial;"}, {"sha": "b11d5b6c4fa2e820235f074d0554fc8bac1425b8", "filename": "tests/rustdoc/inline_cross/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f75b35046777c6a4aa9245edbbc5ca7a340687f5/tests%2Frustdoc%2Finline_cross%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75b35046777c6a4aa9245edbbc5ca7a340687f5/tests%2Frustdoc%2Finline_cross%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fmacros.rs?ref=f75b35046777c6a4aa9245edbbc5ca7a340687f5", "patch": "@@ -6,9 +6,9 @@\n \n extern crate macros;\n \n-// @has foo/index.html '//*[@class=\"item-left unstable deprecated\"]/span[@class=\"stab deprecated\"]' \\\n+// @has foo/index.html '//*[@class=\"item-left\"]/span[@class=\"stab deprecated\"]' \\\n //         Deprecated\n-// @has - '//*[@class=\"item-left unstable deprecated\"]/span[@class=\"stab unstable\"]' \\\n+// @has - '//*[@class=\"item-left\"]/span[@class=\"stab unstable\"]' \\\n //         Experimental\n \n // @has foo/macro.my_macro.html"}, {"sha": "1153a745b0bfecfaf6c9667655346943d2711f5e", "filename": "tests/rustdoc/issue-32374.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f75b35046777c6a4aa9245edbbc5ca7a340687f5/tests%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75b35046777c6a4aa9245edbbc5ca7a340687f5/tests%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-32374.rs?ref=f75b35046777c6a4aa9245edbbc5ca7a340687f5", "patch": "@@ -2,9 +2,9 @@\n #![doc(issue_tracker_base_url = \"https://issue_url/\")]\n #![unstable(feature = \"test\", issue = \"32374\")]\n \n-// @matches issue_32374/index.html '//*[@class=\"item-left unstable deprecated\"]/span[@class=\"stab deprecated\"]' \\\n+// @matches issue_32374/index.html '//*[@class=\"item-left\"]/span[@class=\"stab deprecated\"]' \\\n //      'Deprecated'\n-// @matches issue_32374/index.html '//*[@class=\"item-left unstable deprecated\"]/span[@class=\"stab unstable\"]' \\\n+// @matches issue_32374/index.html '//*[@class=\"item-left\"]/span[@class=\"stab unstable\"]' \\\n //      'Experimental'\n // @matches issue_32374/index.html '//*[@class=\"item-right docblock-short\"]/text()' 'Docs'\n "}, {"sha": "94fa03385322adad68321606eb5eef43814cbd0a", "filename": "tests/rustdoc/reexport-check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f75b35046777c6a4aa9245edbbc5ca7a340687f5/tests%2Frustdoc%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75b35046777c6a4aa9245edbbc5ca7a340687f5/tests%2Frustdoc%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-check.rs?ref=f75b35046777c6a4aa9245edbbc5ca7a340687f5", "patch": "@@ -4,14 +4,16 @@\n extern crate reexport_check;\n \n // @!has 'foo/index.html' '//code' 'pub use self::i32;'\n-// @has 'foo/index.html' '//div[@class=\"item-left deprecated\"]' 'i32'\n // @has 'foo/i32/index.html'\n #[allow(deprecated, deprecated_in_future)]\n pub use std::i32;\n // @!has 'foo/index.html' '//code' 'pub use self::string::String;'\n // @has 'foo/index.html' '//div[@class=\"item-left\"]' 'String'\n pub use std::string::String;\n \n+// i32 is deprecated, String is not\n+// @count 'foo/index.html' '//span[@class=\"stab deprecated\"]' 1\n+\n // @has 'foo/index.html' '//div[@class=\"item-right docblock-short\"]' 'Docs in original'\n // this is a no-op, but shows what happens if there's an attribute that isn't a doc-comment\n #[doc(inline)]"}]}