{"sha": "bbd439ec9ea3ef20edefa319b479cb06739ba52d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZDQzOWVjOWVhM2VmMjBlZGVmYTMxOWI0NzljYjA2NzM5YmE1MmQ=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-29T00:56:58Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-29T00:56:58Z"}, "message": "Add FILTER_NEXT lint", "tree": {"sha": "53a84e3d91da263d272242ca2250f86a758432d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53a84e3d91da263d272242ca2250f86a758432d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbd439ec9ea3ef20edefa319b479cb06739ba52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd439ec9ea3ef20edefa319b479cb06739ba52d", "html_url": "https://github.com/rust-lang/rust/commit/bbd439ec9ea3ef20edefa319b479cb06739ba52d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbd439ec9ea3ef20edefa319b479cb06739ba52d/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee236dac468d9c474fbf0dfdbf4341559bad1e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee236dac468d9c474fbf0dfdbf4341559bad1e70", "html_url": "https://github.com/rust-lang/rust/commit/ee236dac468d9c474fbf0dfdbf4341559bad1e70"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "9840eda8d39f30bca929b94f55278e8d27dc7897", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbd439ec9ea3ef20edefa319b479cb06739ba52d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbd439ec9ea3ef20edefa319b479cb06739ba52d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bbd439ec9ea3ef20edefa319b479cb06739ba52d", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 86 lints included in this crate:\n+There are 87 lints included in this crate:\n \n name                                                                                                     | default | meaning\n ---------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -28,6 +28,7 @@ name\n [eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                           | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n [explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)           | warn    | for-looping with an explicit counter when `_.enumerate()` would do\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                 | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n+[filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                               | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                   | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                               | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)             | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n@@ -55,8 +56,8 @@ name\n [non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                   | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n [nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)     | warn    | nonsensical combination of options for opening a file\n [ok_expect](https://github.com/Manishearth/rust-clippy/wiki#ok_expect)                                   | warn    | using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\n-[option_map_unwrap_or](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or)             | warn    | using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`)\n-[option_map_unwrap_or_else](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or_else)   | warn    | using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`)\n+[option_map_unwrap_or](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or)             | warn    | using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`\n+[option_map_unwrap_or_else](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or_else)   | warn    | using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\n [option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)                 | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n [out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)         | deny    | out of bound constant indexing\n [panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                             | warn    | missing parameters in `panic!`"}, {"sha": "4caf008e3306394a0a2a02c5ac3677d1eabc6135", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbd439ec9ea3ef20edefa319b479cb06739ba52d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd439ec9ea3ef20edefa319b479cb06739ba52d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bbd439ec9ea3ef20edefa319b479cb06739ba52d", "patch": "@@ -176,6 +176,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         matches::MATCH_BOOL,\n         matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,\n+        methods::FILTER_NEXT,\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_UNWRAP_OR,\n         methods::OPTION_MAP_UNWRAP_OR_ELSE,"}, {"sha": "f2f7dbdea9c4abd3e80f9ef7db2e95bbdd6be76f", "filename": "src/methods.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bbd439ec9ea3ef20edefa319b479cb06739ba52d/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd439ec9ea3ef20edefa319b479cb06739ba52d/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=bbd439ec9ea3ef20edefa319b479cb06739ba52d", "patch": "@@ -6,7 +6,7 @@ use std::iter;\n use std::borrow::Cow;\n \n use utils::{snippet, span_lint, span_note_and_lint, match_path, match_type, method_chain_args,\n-            walk_ptrs_ty_depth, walk_ptrs_ty};\n+            match_trait_method, walk_ptrs_ty_depth, walk_ptrs_ty};\n use utils::{OPTION_PATH, RESULT_PATH, STRING_PATH};\n use utils::MethodArgs;\n \n@@ -135,7 +135,7 @@ declare_lint!(pub OK_EXPECT, Warn,\n /// **Example:** `x.map(|a| a + 1).unwrap_or(0)`\n declare_lint!(pub OPTION_MAP_UNWRAP_OR, Warn,\n               \"using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as \\\n-               `map_or(a, f)`)\");\n+               `map_or(a, f)`\");\n \n /// **What it does:** This lint `Warn`s on `_.map(_).unwrap_or_else(_)`.\n ///\n@@ -146,7 +146,17 @@ declare_lint!(pub OPTION_MAP_UNWRAP_OR, Warn,\n /// **Example:** `x.map(|a| a + 1).unwrap_or_else(some_function)`\n declare_lint!(pub OPTION_MAP_UNWRAP_OR_ELSE, Warn,\n               \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n-               `map_or_else(g, f)`)\");\n+               `map_or_else(g, f)`\");\n+\n+/// **What it does:** This lint `Warn`s on `_.filter(_).next()`.\n+///\n+/// **Why is this bad?** Readability, this can be written more concisely as `_.find(_)`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `iter.filter(|x| x == 0).next()`\n+declare_lint!(pub FILTER_NEXT, Warn,\n+              \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\");\n \n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n@@ -174,6 +184,9 @@ impl LateLintPass for MethodsPass {\n             else if let Some(arglists) = method_chain_args(expr, &[\"map\", \"unwrap_or_else\"]) {\n                 lint_map_unwrap_or_else(cx, expr, arglists[0], arglists[1]);\n             }\n+            else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"next\"]) {\n+                lint_filter_next(cx, expr, arglists[0]);\n+            }\n         }\n     }\n \n@@ -331,6 +344,24 @@ fn lint_map_unwrap_or_else(cx: &LateContext, expr: &Expr, unwrap_args: &MethodAr\n     }\n }\n \n+#[allow(ptr_arg)] // Type of MethodArgs is potentially a Vec\n+/// lint use of `filter().next() for Iterators`\n+fn lint_filter_next(cx: &LateContext, expr: &Expr, filter_args: &MethodArgs) {\n+    // lint if caller of `.filter().next()` is an Iterator\n+    if match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) {\n+        let msg = \"called `filter(p).next()` on an Iterator. This is more succinctly expressed by \\\n+                   calling `.find(p)` instead.\";\n+        let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n+        if filter_snippet.lines().count() <= 1 { // add note if not multi-line\n+            span_note_and_lint(cx, FILTER_NEXT, expr.span, msg, expr.span,\n+                               &format!(\"replace this with `find({})`)\", filter_snippet));\n+        }\n+        else {\n+            span_lint(cx, FILTER_NEXT, expr.span, msg);\n+        }\n+    }\n+}\n+\n // Given a `Result<T, E>` type, return its error type (`E`)\n fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n     if !match_type(cx, ty, &RESULT_PATH) {"}, {"sha": "d2fed0f907b26be51b5ba6ac82070560f54a2eef", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bbd439ec9ea3ef20edefa319b479cb06739ba52d/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd439ec9ea3ef20edefa319b479cb06739ba52d/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=bbd439ec9ea3ef20edefa319b479cb06739ba52d", "patch": "@@ -83,6 +83,39 @@ fn option_methods() {\n \n }\n \n+/// Struct to generate false positive for FILTER_NEXT lint\n+struct FilterNextTest {\n+    _foo: u32,\n+}\n+\n+impl FilterNextTest {\n+    fn filter(self) -> FilterNextTest {\n+        self\n+    }\n+    fn next(self) -> FilterNextTest {\n+        self\n+    }\n+}\n+\n+/// Checks implementation of FILTER_NEXT lint\n+fn filter_next() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // check single-line case\n+    let _ = v.iter().filter(|&x| *x < 0).next(); //~ERROR called `filter(p).next()` on an Iterator.\n+                                                 //~| NOTE replace this\n+\n+    // check multi-line case\n+    let _ = v.iter().filter(|&x| { //~ERROR called `filter(p).next()` on an Iterator.\n+                                *x < 0\n+                            }\n+                   ).next();\n+\n+    // check that we don't lint if the caller is not an Iterator\n+    let foo = FilterNextTest { _foo: 0 };\n+    let _ = foo.filter().next();\n+}\n+\n fn main() {\n     use std::io;\n "}]}