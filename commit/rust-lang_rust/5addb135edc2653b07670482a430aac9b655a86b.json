{"sha": "5addb135edc2653b07670482a430aac9b655a86b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZGRiMTM1ZWRjMjY1M2IwNzY3MDQ4MmE0MzBhYWM5YjY1NWE4NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-15T15:51:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-15T15:51:55Z"}, "message": "Auto merge of #75483 - mati865:mingw-lld-flags, r=petrochenkov\n\nAdd LLD flags for MinGW\n\nTested locally and this now works:\n- `RUSTFLAGS=\"-Zlink-self-contained=yes -Clinker=rust-lld\" cargo b`\n- `RUSTFLAGS=\"-Zlink-self-contained=no -Clinker=rust-lld -Zpre-link-arg=-Ld:/msys64/mingw64/x86_64-w64-mingw32/lib -Zpre-link-arg=-Ld:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/10.2.0 -Zpre-link-arg=crt2.o\" cargo b`\n\nThis is \"harmless\" part of the changes to make possible linking with bare LLD with windows-gnu target. More debatable changes should follow in next PRs soon.", "tree": {"sha": "d852c9a4f37f825783f52b45209599d761a2aa4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d852c9a4f37f825783f52b45209599d761a2aa4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5addb135edc2653b07670482a430aac9b655a86b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5addb135edc2653b07670482a430aac9b655a86b", "html_url": "https://github.com/rust-lang/rust/commit/5addb135edc2653b07670482a430aac9b655a86b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5addb135edc2653b07670482a430aac9b655a86b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9db927b68f4b2e9c3e648be35b412ac1839ec54", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9db927b68f4b2e9c3e648be35b412ac1839ec54", "html_url": "https://github.com/rust-lang/rust/commit/b9db927b68f4b2e9c3e648be35b412ac1839ec54"}, {"sha": "c75f7f90c89907edba2d9488c30dc550d3dad94a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75f7f90c89907edba2d9488c30dc550d3dad94a", "html_url": "https://github.com/rust-lang/rust/commit/c75f7f90c89907edba2d9488c30dc550d3dad94a"}], "stats": {"total": 138, "additions": 71, "deletions": 67}, "files": [{"sha": "33c9008bb14059361ca6a7571707042e41c8f896", "filename": "src/librustc_target/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs?ref=5addb135edc2653b07670482a430aac9b655a86b", "patch": "@@ -1,8 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n+    base.pre_link_args\n+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pe\".to_string()]);\n     base.max_atomic_width = Some(64);\n     base.eliminate_frame_pointer = false; // Required for backtraces\n     base.linker = Some(\"i686-w64-mingw32-gcc\".to_string());"}, {"sha": "1c6d2e061bc036a5486e37b3ce6f92d9770157c2", "filename": "src/librustc_target/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=5addb135edc2653b07670482a430aac9b655a86b", "patch": "@@ -1,8 +1,10 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n+    base.pre_link_args\n+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pe\".to_string()]);\n     base.max_atomic_width = Some(64);\n     base.eliminate_frame_pointer = false; // Required for backtraces\n "}, {"sha": "a864918655fb80c026bfd4fcbc432df2b6b5a51b", "filename": "src/librustc_target/spec/windows_gnu_base.rs", "status": "modified", "additions": 43, "deletions": 46, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs?ref=5addb135edc2653b07670482a430aac9b655a86b", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::crt_objects::{self, CrtObjectsFallback};\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -19,51 +19,48 @@ pub fn opts() -> TargetOptions {\n     let mut late_link_args_static = LinkArgs::new();\n     // Order of `late_link_args*` was found through trial and error to work with various\n     // mingw-w64 versions (not tested on the CI). It's expected to change from time to time.\n-    late_link_args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            \"-lmsvcrt\".to_string(),\n-            \"-lmingwex\".to_string(),\n-            \"-lmingw32\".to_string(),\n-            // mingw's msvcrt is a weird hybrid import library and static library.\n-            // And it seems that the linker fails to use import symbols from msvcrt\n-            // that are required from functions in msvcrt in certain cases. For example\n-            // `_fmode` that is used by an implementation of `__p__fmode` in x86_64.\n-            // The library is purposely listed twice to fix that.\n-            //\n-            // See https://github.com/rust-lang/rust/pull/47483 for some more details.\n-            \"-lmsvcrt\".to_string(),\n-            \"-luser32\".to_string(),\n-            \"-lkernel32\".to_string(),\n-        ],\n-    );\n-    late_link_args_dynamic.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // If any of our crates are dynamically linked then we need to use\n-            // the shared libgcc_s-dw2-1.dll. This is required to support\n-            // unwinding across DLL boundaries.\n-            \"-lgcc_s\".to_string(),\n-            \"-lgcc\".to_string(),\n-            \"-lkernel32\".to_string(),\n-        ],\n-    );\n-    late_link_args_static.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // If all of our crates are statically linked then we can get away\n-            // with statically linking the libgcc unwinding code. This allows\n-            // binaries to be redistributed without the libgcc_s-dw2-1.dll\n-            // dependency, but unfortunately break unwinding across DLL\n-            // boundaries when unwinding across FFI boundaries.\n-            \"-lgcc_eh\".to_string(),\n-            \"-l:libpthread.a\".to_string(),\n-            \"-lgcc\".to_string(),\n-            // libpthread depends on libmsvcrt, so we need to link it *again*.\n-            \"-lmsvcrt\".to_string(),\n-            \"-lkernel32\".to_string(),\n-        ],\n-    );\n+    let mingw_libs = vec![\n+        \"-lmsvcrt\".to_string(),\n+        \"-lmingwex\".to_string(),\n+        \"-lmingw32\".to_string(),\n+        // mingw's msvcrt is a weird hybrid import library and static library.\n+        // And it seems that the linker fails to use import symbols from msvcrt\n+        // that are required from functions in msvcrt in certain cases. For example\n+        // `_fmode` that is used by an implementation of `__p__fmode` in x86_64.\n+        // The library is purposely listed twice to fix that.\n+        //\n+        // See https://github.com/rust-lang/rust/pull/47483 for some more details.\n+        \"-lmsvcrt\".to_string(),\n+        \"-luser32\".to_string(),\n+        \"-lkernel32\".to_string(),\n+    ];\n+    late_link_args.insert(LinkerFlavor::Gcc, mingw_libs.clone());\n+    late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n+    let dynamic_unwind_libs = vec![\n+        // If any of our crates are dynamically linked then we need to use\n+        // the shared libgcc_s-dw2-1.dll. This is required to support\n+        // unwinding across DLL boundaries.\n+        \"-lgcc_s\".to_string(),\n+        \"-lgcc\".to_string(),\n+        \"-lkernel32\".to_string(),\n+    ];\n+    late_link_args_dynamic.insert(LinkerFlavor::Gcc, dynamic_unwind_libs.clone());\n+    late_link_args_dynamic.insert(LinkerFlavor::Lld(LldFlavor::Ld), dynamic_unwind_libs);\n+    let static_unwind_libs = vec![\n+        // If all of our crates are statically linked then we can get away\n+        // with statically linking the libgcc unwinding code. This allows\n+        // binaries to be redistributed without the libgcc_s-dw2-1.dll\n+        // dependency, but unfortunately break unwinding across DLL\n+        // boundaries when unwinding across FFI boundaries.\n+        \"-lgcc_eh\".to_string(),\n+        \"-l:libpthread.a\".to_string(),\n+        \"-lgcc\".to_string(),\n+        // libpthread depends on libmsvcrt, so we need to link it *again*.\n+        \"-lmsvcrt\".to_string(),\n+        \"-lkernel32\".to_string(),\n+    ];\n+    late_link_args_static.insert(LinkerFlavor::Gcc, static_unwind_libs.clone());\n+    late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);\n \n     TargetOptions {\n         // FIXME(#13846) this should be enabled for windows"}, {"sha": "fd55a0fc6a15e8ecf6bbb8cb5fa79bb7102e98cc", "filename": "src/librustc_target/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=5addb135edc2653b07670482a430aac9b655a86b", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let base = super::windows_gnu_base::opts();\n@@ -8,22 +8,21 @@ pub fn opts() -> TargetOptions {\n     let mut late_link_args = LinkArgs::new();\n     let late_link_args_dynamic = LinkArgs::new();\n     let late_link_args_static = LinkArgs::new();\n-    late_link_args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            //\"-lwinstorecompat\".to_string(),\n-            //\"-lmingwex\".to_string(),\n-            //\"-lwinstorecompat\".to_string(),\n-            \"-lwinstorecompat\".to_string(),\n-            \"-lruntimeobject\".to_string(),\n-            \"-lsynchronization\".to_string(),\n-            \"-lvcruntime140_app\".to_string(),\n-            \"-lucrt\".to_string(),\n-            \"-lwindowsapp\".to_string(),\n-            \"-lmingwex\".to_string(),\n-            \"-lmingw32\".to_string(),\n-        ],\n-    );\n+    let mingw_libs = vec![\n+        //\"-lwinstorecompat\".to_string(),\n+        //\"-lmingwex\".to_string(),\n+        //\"-lwinstorecompat\".to_string(),\n+        \"-lwinstorecompat\".to_string(),\n+        \"-lruntimeobject\".to_string(),\n+        \"-lsynchronization\".to_string(),\n+        \"-lvcruntime140_app\".to_string(),\n+        \"-lucrt\".to_string(),\n+        \"-lwindowsapp\".to_string(),\n+        \"-lmingwex\".to_string(),\n+        \"-lmingw32\".to_string(),\n+    ];\n+    late_link_args.insert(LinkerFlavor::Gcc, mingw_libs.clone());\n+    late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs.clone());\n \n     TargetOptions {\n         executables: false,"}, {"sha": "99af483f1d4152e5d7cc601acdc9289ffef3376d", "filename": "src/librustc_target/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=5addb135edc2653b07670482a430aac9b655a86b", "patch": "@@ -1,9 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args\n+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pep\".to_string()]);\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"x86_64-w64-mingw32-gcc\".to_string());\n "}, {"sha": "3bd18f23f6f88a78edd0fd19667f4ec55d0a2a46", "filename": "src/librustc_target/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addb135edc2653b07670482a430aac9b655a86b/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=5addb135edc2653b07670482a430aac9b655a86b", "patch": "@@ -1,9 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+    base.pre_link_args\n+        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".to_string(), \"i386pep\".to_string()]);\n     base.max_atomic_width = Some(64);\n \n     Ok(Target {"}]}