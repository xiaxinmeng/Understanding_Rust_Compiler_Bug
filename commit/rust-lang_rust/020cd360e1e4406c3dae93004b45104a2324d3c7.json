{"sha": "020cd360e1e4406c3dae93004b45104a2324d3c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMGNkMzYwZTFlNDQwNmMzZGFlOTMwMDRiNDUxMDRhMjMyNGQzYzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-13T00:40:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T21:13:22Z"}, "message": "modify x64 assembly and so forth", "tree": {"sha": "fa60bf0a8ef85c083020cda114c02fd32b1dc229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa60bf0a8ef85c083020cda114c02fd32b1dc229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020cd360e1e4406c3dae93004b45104a2324d3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020cd360e1e4406c3dae93004b45104a2324d3c7", "html_url": "https://github.com/rust-lang/rust/commit/020cd360e1e4406c3dae93004b45104a2324d3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020cd360e1e4406c3dae93004b45104a2324d3c7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e865438f65e215332311310c25f9019d26e130", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e865438f65e215332311310c25f9019d26e130", "html_url": "https://github.com/rust-lang/rust/commit/d3e865438f65e215332311310c25f9019d26e130"}], "stats": {"total": 205, "additions": 93, "deletions": 112}, "files": [{"sha": "7c689a88bf799b2be421a74d4aa730d119e0035f", "filename": "src/rt/arch/x64/_context.S", "status": "modified", "additions": 76, "deletions": 53, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/020cd360e1e4406c3dae93004b45104a2324d3c7/src%2Frt%2Farch%2Fx64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/020cd360e1e4406c3dae93004b45104a2324d3c7/src%2Frt%2Farch%2Fx64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx64%2F_context.S?ref=020cd360e1e4406c3dae93004b45104a2324d3c7", "patch": "@@ -1,11 +1,39 @@\n \t.text\n \n /*\n+According to ABI documentation found at\n+http://www.x86-64.org/documentation.html\n+and Microsoft discussion at\n+http://msdn.microsoft.com/en-US/library/9z1stfyw%28v=VS.80%29.aspx.\n+\n+BOTH CALLING CONVENTIONS\n+        \n Callee save registers:\n-\tebp, ebx, esi, edi\n+\tR12--R15, RDI, RSI, RBX, RBP, RSP\n+        XMM0--XMM5\n \n Caller save registers:\n-\teax, ecx, edx\n+\tRAX, RCX, RDX, R8--R11\n+        XMM6--XMM15\n+        Floating point stack\n+\n+MAC/AMD CALLING CONVENTIONS\n+\n+Integer arguments go in registers:\n+        rdi, rsi, rdx, rcx, r8, r9\n+\n+User flags have no specified role and are not preserved\n+        across calls, with the exception of DF in %rFLAGS,\n+        which must be clear (set to \"forward\" direction)\n+        on function entry and return.\n+        \n+MICROSOFT CALLING CONVENTIONS\n+\n+Return value: RAX\n+\n+First four arguments:\n+        RCX, RDX, R8, R9\n+        XMM0, XMM1, XMM2, XMM3\n */\n \t\n /*\n@@ -17,60 +45,55 @@ Caller save registers:\n // swap_registers(registers_t *oregs, registers_t *regs)\n .globl swap_registers\n swap_registers:\n-    // save the old context\n-    movl 4(%esp), %eax\n-\t//movl %eax, 0(%eax)\n-\tmovl %ebx, 4(%eax)\n-\tmovl %ecx, 8(%eax)\n-\tmovl %edx, 12(%eax)\n-\tmovl %ebp, 16(%eax)\n-\tmovl %esi, 20(%eax)\n-\tmovl %edi, 24(%eax)\n-\t//movl %cs, 32(%eax)\n-\t//movl %ds, 34(%eax)\n-\t//movl %ss, 36(%eax)\n-\t//movl %es, 38(%eax)\n-\t//movl %fs, 40(%eax)\n-\t//movl %gs, 42(%eax)\n-\n-\t// save the flags\n-\tpushf\n-\tpopl %ecx\n-\tmovl %ecx, 44(%eax)\n+        // n.b. when we enter, the return address is at the top of\n+        // the stack (i.e., 0(%RSP)).  We\n+        // simply save all NV registers into oregs.\n+        // We then restore all NV registers from regs.  This restores\n+        // the old stack pointer, which should include the proper\n+        // return address. We can therefore just return normally to\n+        // jump back into the old code.\n+        \n+        // Save instruction pointer:\n+        popl %rax\n+        movl %rax, 104(%rdi)\n \n-\t// save the return address as the instruction pointer\n-    // and save the stack pointer of the caller\n-    popl %ecx\n-    movl %esp, 28(%eax)\n-\tmovl %ecx, 48(%eax)\n+        // Save non-volatile integer registers:\n+        //   (including RSP)\n+        movl %rbx,   0(%rdi)\n+        movl %rsp,   8(%rdi)\n+        movl %rbp,  16(%rdi)\n+        movl %r12,  24(%rdi)\n+        movl %r13,  32(%rdi)\n+        movl %r14,  40(%rdi)\n+        movl %r15,  48(%rdi)\n \n-    // restore the new context\n-    movl 4(%esp), %eax\n+        // Save non-volatile XMM registers:\n+        movl %xmm0, 56(%rdi)\n+        movl %xmm1, 64(%rdi)\n+        movl %xmm2, 72(%rdi)\n+        movl %xmm3, 80(%rdi)\n+        movl %xmm4, 88(%rdi)\n+        movl %xmm5, 96(%rdi)\n \n-\tmovl 4(%eax), %ebx\n-\t// save ecx for later...\n-\tmovl 12(%eax), %edx\n-\tmovl 16(%eax), %ebp\n-\tmovl 20(%eax), %esi\n-\tmovl 24(%eax), %edi\n-\tmovl 28(%eax), %esp\n-\t// We can't actually change this...\n-\t//movl 32(%eax), %cs\n-\t//movl 34(%eax), %ds\n-\t//movl 36(%eax), %ss\n-\t//movl 38(%eax), %es\n-\t//movl 40(%eax), %fs\n-\t//movl 42(%eax), %gs\n+        // Restore non-volatile integer registers:\n+        //   (including RSP)\n+        movl  0(%rsi), %rbx\n+        movl  8(%rsi), %rsp\n+        movl 16(%rsi), %rbp\n+        movl 24(%rsi), %r12\n+        movl 32(%rsi), %r13\n+        movl 40(%rsi), %r14\n+        movl 48(%rsi), %r15\n \n-\t// restore the flags\n-\tmovl 44(%eax), %ecx\n-\tpush %ecx\n-\tpopf\n-\n-    // ok, now we can restore ecx\n-    movl 8(%eax), %ecx\n-\t\n-    // Return!\n-    jmp *48(%eax)\n+        // Restore non-volatile XMM registers:\n+        movl 56(%rsi), %xmm0\n+        movl 64(%rsi), %xmm1\n+        movl 72(%rsi), %xmm2\n+        movl 80(%rsi), %xmm3\n+        movl 88(%rsi), %xmm4\n+        movl 96(%rsi), %xmm5\n \n+        // Jump to the instruction pointer\n+        // found in regs:\n+        jmp *104(%rsi)\n "}, {"sha": "dd1efda289c8da25582336220cf2644f38971f54", "filename": "src/rt/arch/x64/ccall.S", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/020cd360e1e4406c3dae93004b45104a2324d3c7/src%2Frt%2Farch%2Fx64%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/020cd360e1e4406c3dae93004b45104a2324d3c7/src%2Frt%2Farch%2Fx64%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx64%2Fccall.S?ref=020cd360e1e4406c3dae93004b45104a2324d3c7", "patch": "@@ -11,12 +11,11 @@ _upcall_call_c_stack:\n .globl upcall_call_c_stack\n upcall_call_c_stack:\n #endif\n-    pushl %ebp\n-    movl %esp,%ebp          // save esp\n-    movl 8(%esp),%eax       // eax = callee\n-    movl 12(%esp),%esp      // switch stack\n-    calll *%eax\n-    movl %ebp,%esp          // would like to use \"leave\" but it's slower\n-    popl %ebp\n+    pushl %rbp\n+    movl %rsp,%rbp          // save rsp\n+    movl %rsi,%rsp          // switch stack\n+    calll *%rdi\n+    movl %rbp,%rsp          // would like to use \"leave\" but it's slower\n+    popl %rbp\n     ret\n "}, {"sha": "0d10854939602e38f901dab12bd35be5f1343acc", "filename": "src/rt/arch/x64/context.cpp", "status": "modified", "additions": 7, "deletions": 42, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/020cd360e1e4406c3dae93004b45104a2324d3c7/src%2Frt%2Farch%2Fx64%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/020cd360e1e4406c3dae93004b45104a2324d3c7/src%2Frt%2Farch%2Fx64%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx64%2Fcontext.cpp?ref=020cd360e1e4406c3dae93004b45104a2324d3c7", "patch": "@@ -6,9 +6,9 @@\n #include <stdlib.h>\n #include <assert.h>\n \n-extern \"C\" uint32_t CDECL swap_registers(registers_t *oregs,\n-                                         registers_t *regs)\n-  asm (\"swap_registers\");\n+extern \"C\" void CDECL swap_registers(registers_t *oregs,\n+                                     registers_t *regs)\n+asm (\"swap_registers\");\n \n context::context()\n {\n@@ -26,48 +26,13 @@ void context::call(void *f, void *arg, void *stack) {\n   swap(*this);\n \n   // set up the trampoline frame\n-  uint32_t *sp = (uint32_t *)stack;\n+  uint64_t *sp = (uint64_t *)stack;\n \n   // Shift the stack pointer so the alignment works out right.\n   sp = align_down(sp) - 3;\n-  *--sp = (uint32_t)arg;\n+  *--sp = (uint64_t)arg;\n   *--sp = 0xdeadbeef;\n \n-  regs.esp = (uint32_t)sp;\n-  regs.eip = (uint32_t)f;\n+  regs.regs[1] = (uint64_t)sp;\n+  regs.ip = (uint64_t)f;\n }\n-\n-#if 0\n-// This is some useful code to check how the registers struct got\n-// layed out in memory.\n-int main() {\n-  registers_t regs;\n-\n-  printf(\"Register offsets\\n\");\n-\n-#define REG(r) \\\n-  printf(\"  %6s: +%ld\\n\", #r, (intptr_t)&regs.r - (intptr_t)&regs);\n-\n-  REG(eax);\n-  REG(ebx);\n-  REG(ecx);\n-  REG(edx);\n-  REG(ebp);\n-  REG(esi);\n-  REG(edi);\n-  REG(esp);\n-\n-  REG(cs);\n-  REG(ds);\n-  REG(ss);\n-  REG(es);\n-  REG(fs);\n-  REG(gs);\n-\n-  REG(eflags);\n-\n-  REG(eip);\n-\n-  return 0;\n-}\n-#endif"}, {"sha": "8f0478d6b743326dc1ee31c0135552a36afd38b1", "filename": "src/rt/arch/x64/context.h", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/020cd360e1e4406c3dae93004b45104a2324d3c7/src%2Frt%2Farch%2Fx64%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/020cd360e1e4406c3dae93004b45104a2324d3c7/src%2Frt%2Farch%2Fx64%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx64%2Fcontext.h?ref=020cd360e1e4406c3dae93004b45104a2324d3c7", "patch": "@@ -16,19 +16,13 @@ T align_down(T sp)\n {\n     // There is no platform we care about that needs more than a\n     // 16-byte alignment.\n-    return (T)((uint32_t)sp & ~(16 - 1));\n+    return (T)((uint64_t)sp & ~(16 - 1));\n }\n \n struct registers_t {\n-  // general purpose registers\n-  uint32_t eax, ebx, ecx, edx, ebp, esi, edi, esp;\n-\n-  // segment registers\n-  uint16_t cs, ds, ss, es, fs, gs;\n-\n-  uint32_t eflags;\n-\n-  uint32_t eip;\n+    uint64_t regs[7]; // Space for the volatile regs: rbx, rsp, rbp, r12:r15\n+    uint64_t xmms[6]; // Space for the volatile regs: xmm0:xmm5\n+    uint64_t ip;\n };\n \n class context {"}]}