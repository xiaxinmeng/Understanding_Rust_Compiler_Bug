{"sha": "505d157814ba4e7d3ee0d036832008c3221b3df4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNWQxNTc4MTRiYTRlN2QzZWUwZDAzNjgzMjAwOGMzMjIxYjNkZjQ=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-08-07T22:34:44Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-08-07T22:41:07Z"}, "message": "Display elided lifetime for external paths", "tree": {"sha": "872c66d5825b8e82614da0c5a217162e98206b81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/872c66d5825b8e82614da0c5a217162e98206b81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/505d157814ba4e7d3ee0d036832008c3221b3df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/505d157814ba4e7d3ee0d036832008c3221b3df4", "html_url": "https://github.com/rust-lang/rust/commit/505d157814ba4e7d3ee0d036832008c3221b3df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/505d157814ba4e7d3ee0d036832008c3221b3df4/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c0d9ca51bb471189a0d5529c8ee5491fb4e102", "html_url": "https://github.com/rust-lang/rust/commit/63c0d9ca51bb471189a0d5529c8ee5491fb4e102"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "adef4c83224ba45480b1ed3df5141f9473db3c11", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/505d157814ba4e7d3ee0d036832008c3221b3df4/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505d157814ba4e7d3ee0d036832008c3221b3df4/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=505d157814ba4e7d3ee0d036832008c3221b3df4", "patch": "@@ -2,9 +2,9 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Deprecation, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n-    GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemEnum, MacroKind, Path,\n-    PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Stability, Type, TypeBinding,\n-    TypeKind, Visibility, WherePredicate,\n+    GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemEnum, Lifetime,\n+    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Stability, Type,\n+    TypeBinding, TypeKind, Visibility, WherePredicate,\n };\n use crate::core::DocContext;\n \n@@ -121,7 +121,10 @@ pub fn external_generic_args(\n     let args: Vec<_> = substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(lt) => lt.clean(cx).map(GenericArg::Lifetime),\n+            GenericArgKind::Lifetime(lt) => match lt {\n+                ty::ReLateBound(_, ty::BrAnon(_)) => Some(GenericArg::Lifetime(Lifetime::elided())),\n+                _ => lt.clean(cx).map(GenericArg::Lifetime),\n+            },\n             GenericArgKind::Type(_) if skip_self => {\n                 skip_self = false;\n                 None"}, {"sha": "6ba58380ed5936a197a03a1bff5fbb52dd07f062", "filename": "src/test/rustdoc/elided-lifetime.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/505d157814ba4e7d3ee0d036832008c3221b3df4/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505d157814ba4e7d3ee0d036832008c3221b3df4/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Felided-lifetime.rs?ref=505d157814ba4e7d3ee0d036832008c3221b3df4", "patch": "@@ -31,3 +31,16 @@ pub fn test3(a: &u32) -> ARef {\n pub fn test4(a: &u32) -> ARef<'_> {\n     Ref(a)\n }\n+\n+// Ensure external paths also display elided lifetime\n+// @has foo/fn.test5.html\n+// @matches - \"Iter</a>&lt;'_\"\n+pub fn test5(a: &Option<u32>) -> std::option::Iter<u32> {\n+    a.iter()\n+}\n+\n+// @has foo/fn.test6.html\n+// @matches - \"Iter</a>&lt;'_\"\n+pub fn test6(a: &Option<u32>) -> std::option::Iter<'_, u32> {\n+    a.iter()\n+}"}]}