{"sha": "ed1dd1eb746b241b2971c087f746ed806407d35a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMWRkMWViNzQ2YjI0MWIyOTcxYzA4N2Y3NDZlZDgwNjQwN2QzNWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-12T18:36:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-12T18:36:07Z"}, "message": "Rollup merge of #59820 - eddyb:proc-macro-rpc-opt, r=nnethercote\n\nproc_macro: stop using LEB128 for RPC.\n\nI'm not sure how much of an improvement this creates, it's pretty tricky to measure.", "tree": {"sha": "72597de7c3b170ff49aba44969dfb40edc5a3cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72597de7c3b170ff49aba44969dfb40edc5a3cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed1dd1eb746b241b2971c087f746ed806407d35a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsNqXCRBK7hj4Ov3rIwAAdHIIAG8SZCams9TqS8/FIJE+5OV2\nKZoOc3u4I7WW54rwUsy6KjdH7eKz51RzkrNE/Lcz3uYP4I8BJLzR+MlMI01VRtWj\nEPIew+tYhTKgaU8iLACvWAzMtTUwIgSfghcQ5ztKKU+KLHOEOtpeqfswrw8Ue1cP\n8J8NhEGkVr79RWtuzFyoAAEs9DM/XXIm2CPjP+NV2b2mr5Easre0L0vfP2ZauWZ4\n8K0BCw7xLM86J0ctizzDSSglrIC9KWgRlC+qR5aevf0cHGJ2H5wFdl/QWLLJ7wn2\nJsxf4A9h72qD0PVueeubz0tjzimLtD9+y0R1EOrJyVyyW/rFDIWL4EA5FnKfFIs=\n=kenb\n-----END PGP SIGNATURE-----\n", "payload": "tree 72597de7c3b170ff49aba44969dfb40edc5a3cf7\nparent 1fb4837bb6035ad6d482ee7c368e5bd17b5c5093\nparent 6688b03865ed727fb71c2f14bca02dfb403eba1f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555094167 +0200\ncommitter GitHub <noreply@github.com> 1555094167 +0200\n\nRollup merge of #59820 - eddyb:proc-macro-rpc-opt, r=nnethercote\n\nproc_macro: stop using LEB128 for RPC.\n\nI'm not sure how much of an improvement this creates, it's pretty tricky to measure.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1dd1eb746b241b2971c087f746ed806407d35a", "html_url": "https://github.com/rust-lang/rust/commit/ed1dd1eb746b241b2971c087f746ed806407d35a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed1dd1eb746b241b2971c087f746ed806407d35a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb4837bb6035ad6d482ee7c368e5bd17b5c5093", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb4837bb6035ad6d482ee7c368e5bd17b5c5093", "html_url": "https://github.com/rust-lang/rust/commit/1fb4837bb6035ad6d482ee7c368e5bd17b5c5093"}, {"sha": "6688b03865ed727fb71c2f14bca02dfb403eba1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6688b03865ed727fb71c2f14bca02dfb403eba1f", "html_url": "https://github.com/rust-lang/rust/commit/6688b03865ed727fb71c2f14bca02dfb403eba1f"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "5018be74f89973930906a0f9a768186e0c2b57e9", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed1dd1eb746b241b2971c087f746ed806407d35a/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1dd1eb746b241b2971c087f746ed806407d35a/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=ed1dd1eb746b241b2971c087f746ed806407d35a", "patch": "@@ -24,32 +24,22 @@ pub(super) trait DecodeMut<'a, 's, S>: Sized {\n }\n \n macro_rules! rpc_encode_decode {\n-    (uleb128 $ty:ty) => {\n+    (le $ty:ty) => {\n         impl<S> Encode<S> for $ty {\n-            fn encode(mut self, w: &mut Writer, s: &mut S) {\n-                let mut byte = 0x80;\n-                while byte & 0x80 != 0 {\n-                    byte = (self & 0x7f) as u8;\n-                    self >>= 7;\n-                    if self != 0 {\n-                        byte |= 0x80;\n-                    }\n-                    byte.encode(w, s);\n-                }\n+            fn encode(self, w: &mut Writer, _: &mut S) {\n+                w.write_all(&self.to_le_bytes()).unwrap();\n             }\n         }\n \n         impl<S> DecodeMut<'_, '_, S> for $ty {\n-            fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n-                let mut byte = 0x80;\n-                let mut v = 0;\n-                let mut shift = 0;\n-                while byte & 0x80 != 0 {\n-                    byte = u8::decode(r, s);\n-                    v |= ((byte & 0x7f) as Self) << shift;\n-                    shift += 7;\n-                }\n-                v\n+            fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {\n+                const N: usize = ::std::mem::size_of::<$ty>();\n+\n+                let mut bytes = [0; N];\n+                bytes.copy_from_slice(&r[..N]);\n+                *r = &r[N..];\n+\n+                Self::from_le_bytes(bytes)\n             }\n         }\n     };\n@@ -136,8 +126,8 @@ impl<S> DecodeMut<'_, '_, S> for u8 {\n     }\n }\n \n-rpc_encode_decode!(uleb128 u32);\n-rpc_encode_decode!(uleb128 usize);\n+rpc_encode_decode!(le u32);\n+rpc_encode_decode!(le usize);\n \n impl<S> Encode<S> for bool {\n     fn encode(self, w: &mut Writer, s: &mut S) {"}]}