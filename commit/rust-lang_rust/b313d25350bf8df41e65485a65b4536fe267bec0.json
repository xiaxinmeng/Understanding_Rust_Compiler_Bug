{"sha": "b313d25350bf8df41e65485a65b4536fe267bec0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMTNkMjUzNTBiZjhkZjQxZTY1NDg1YTY1YjQ1MzZmZTI2N2JlYzA=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-08-18T11:14:47Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-08-18T11:14:47Z"}, "message": "Fix breakage due to rust-lang/rust#61708", "tree": {"sha": "bd10dc3dbb27538ed4434491f320430f8e52af32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd10dc3dbb27538ed4434491f320430f8e52af32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b313d25350bf8df41e65485a65b4536fe267bec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b313d25350bf8df41e65485a65b4536fe267bec0", "html_url": "https://github.com/rust-lang/rust/commit/b313d25350bf8df41e65485a65b4536fe267bec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b313d25350bf8df41e65485a65b4536fe267bec0/comments", "author": null, "committer": null, "parents": [{"sha": "533bdfbdbc52c87d03959a4d58be6301f157da6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/533bdfbdbc52c87d03959a4d58be6301f157da6e", "html_url": "https://github.com/rust-lang/rust/commit/533bdfbdbc52c87d03959a4d58be6301f157da6e"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "01989625b45a9a15a0d4d57658faae09e11f9387", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b313d25350bf8df41e65485a65b4536fe267bec0/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b313d25350bf8df41e65485a65b4536fe267bec0/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=b313d25350bf8df41e65485a65b4536fe267bec0", "patch": "@@ -298,14 +298,14 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalI\n                     bindings_impl(cx, as_pat, map);\n                 }\n             },\n-            PatKind::Struct(_, ref fields, _) => {\n+            PatKind::Or(ref fields) | PatKind::Tuple(ref fields, _) => {\n                 for pat in fields {\n-                    bindings_impl(cx, &pat.pat, map);\n+                    bindings_impl(cx, pat, map);\n                 }\n             },\n-            PatKind::Tuple(ref fields, _) => {\n+            PatKind::Struct(_, ref fields, _) => {\n                 for pat in fields {\n-                    bindings_impl(cx, pat, map);\n+                    bindings_impl(cx, &pat.pat, map);\n                 }\n             },\n             PatKind::Slice(ref lhs, ref mid, ref rhs) => {"}, {"sha": "4cf52ddac92920cc72b454630cd4669873af343c", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b313d25350bf8df41e65485a65b4536fe267bec0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b313d25350bf8df41e65485a65b4536fe267bec0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=b313d25350bf8df41e65485a65b4536fe267bec0", "patch": "@@ -549,6 +549,12 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n                 println!(\"    // unimplemented: field checks\");\n             },\n+            PatKind::Or(ref fields) => {\n+                let fields_pat = self.next(\"fields\");\n+                println!(\"Or(ref {}) = {};\", fields_pat, current);\n+                println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n+                println!(\"    // unimplemented: field checks\");\n+            },\n             PatKind::TupleStruct(ref path, ref fields, skip_pos) => {\n                 let path_pat = self.next(\"path\");\n                 let fields_pat = self.next(\"fields\");"}, {"sha": "b48ef7d293b4d9be6285b874e33ff1f2966a3ed3", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b313d25350bf8df41e65485a65b4536fe267bec0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b313d25350bf8df41e65485a65b4536fe267bec0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=b313d25350bf8df41e65485a65b4536fe267bec0", "patch": "@@ -410,6 +410,12 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n                 print_pat(cx, inner, indent + 1);\n             }\n         },\n+        hir::PatKind::Or(ref fields) => {\n+            println!(\"{}Or\", ind);\n+            for field in fields {\n+                print_pat(cx, field, indent + 1);\n+            }\n+        },\n         hir::PatKind::Struct(ref path, ref fields, ignore) => {\n             println!(\"{}Struct\", ind);\n             println!("}, {"sha": "020068d4633a3878f3ea1c766a64d30e69b5d1c8", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b313d25350bf8df41e65485a65b4536fe267bec0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b313d25350bf8df41e65485a65b4536fe267bec0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b313d25350bf8df41e65485a65b4536fe267bec0", "patch": "@@ -791,7 +791,7 @@ pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat) -> bool {\n         PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => is_refutable(cx, pat),\n         PatKind::Lit(..) | PatKind::Range(..) => true,\n         PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n-        PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Or(ref pats) | PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n         PatKind::Struct(ref qpath, ref fields, _) => {\n             if is_enum_variant(cx, qpath, pat.hir_id) {\n                 true"}]}