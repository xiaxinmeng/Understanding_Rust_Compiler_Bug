{"sha": "e3918cf62138157ef4748c2193e0601aaa78f311", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOTE4Y2Y2MjEzODE1N2VmNDc0OGMyMTkzZTA2MDFhYWE3OGYzMTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-27T00:36:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-28T11:47:37Z"}, "message": "Recover from parse error in tuple syntax", "tree": {"sha": "aaf01606c7a4fe5322ae6f6eb32109c9373f912e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaf01606c7a4fe5322ae6f6eb32109c9373f912e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3918cf62138157ef4748c2193e0601aaa78f311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3918cf62138157ef4748c2193e0601aaa78f311", "html_url": "https://github.com/rust-lang/rust/commit/e3918cf62138157ef4748c2193e0601aaa78f311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3918cf62138157ef4748c2193e0601aaa78f311/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf", "html_url": "https://github.com/rust-lang/rust/commit/33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf"}], "stats": {"total": 213, "additions": 196, "deletions": 17}, "files": [{"sha": "ea0c7e0e366622a549c961d27b4560f277b422ad", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -2637,7 +2637,15 @@ impl<'a> Parser<'a> {\n                 let mut trailing_comma = false;\n                 let mut recovered = false;\n                 while self.token != token::CloseDelim(token::Paren) {\n-                    es.push(self.parse_expr()?);\n+                    es.push(match self.parse_expr() {\n+                        Ok(es) => es,\n+                        Err(mut err) => {  // recover from parse error in tuple list\n+                            err.emit();\n+                            self.consume_block(token::Paren);\n+                            hi = self.prev_span;\n+                            return Ok(self.mk_expr(lo.to(hi), ExprKind::Err, ThinVec::new()));\n+                        }\n+                    });\n                     recovered = self.expect_one_of(\n                         &[],\n                         &[token::Comma, token::CloseDelim(token::Paren)],\n@@ -3248,16 +3256,24 @@ impl<'a> Parser<'a> {\n             match self.token {\n               // expr(...)\n               token::OpenDelim(token::Paren) => {\n-                let es = self.parse_unspanned_seq(\n+                match self.parse_unspanned_seq(\n                     &token::OpenDelim(token::Paren),\n                     &token::CloseDelim(token::Paren),\n                     SeqSep::trailing_allowed(token::Comma),\n                     |p| Ok(p.parse_expr()?)\n-                )?;\n-                hi = self.prev_span;\n-\n-                let nd = self.mk_call(e, es);\n-                e = self.mk_expr(lo.to(hi), nd, ThinVec::new());\n+                ) {\n+                    Ok(es) => {\n+                        let nd = self.mk_call(e, es);\n+                        hi = self.prev_span;\n+                        e = self.mk_expr(lo.to(hi), nd, ThinVec::new());\n+                    }\n+                    Err(mut err) => { // recover from parse error in argument list\n+                        err.emit();\n+                        self.consume_block(token::Paren);\n+                        hi = self.prev_span;\n+                        e = self.mk_expr(lo.to(hi), ExprKind::Err, ThinVec::new());\n+                    }\n+                }\n               }\n \n               // expr[...]\n@@ -4262,7 +4278,14 @@ impl<'a> Parser<'a> {\n     // Trailing commas are significant because (p) and (p,) are different patterns.\n     fn parse_parenthesized_pat_list(&mut self) -> PResult<'a, (Vec<P<Pat>>, Option<usize>, bool)> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n-        let result = self.parse_pat_list()?;\n+        let result = match self.parse_pat_list() {\n+            Ok(result) => result,\n+            Err(mut err) => { // recover from parse error in tuple pattern list\n+                err.emit();\n+                self.consume_block(token::Paren);\n+                return Ok((vec![], Some(0), false));\n+            }\n+        };\n         self.expect(&token::CloseDelim(token::Paren))?;\n         Ok(result)\n     }"}, {"sha": "928d217441ef2f2685477c731520b9db497dd78b", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -1,4 +1,10 @@\n fn main () {\n-    let sr: Vec<(u32, _, _) = vec![]; //~ ERROR expected one of `,` or `>`, found `=`\n+    let sr: Vec<(u32, _, _) = vec![];\n+    //~^ ERROR expected one of `,` or `>`, found `=`\n+    //~| ERROR expected value, found struct `Vec`\n+    //~| ERROR mismatched types\n+    //~| ERROR invalid left-hand side expression\n+    //~| ERROR expected expression, found reserved identifier `_`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n+    //~^ ERROR no method named `iter` found for type `()` in the current scope\n }"}, {"sha": "51ea0c6a908947dd55ee08bdbde177c33d9c5af8", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -1,10 +1,47 @@\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/issue-34334.rs:2:23\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |                       ^ expected expression\n+\n error: expected one of `,` or `>`, found `=`\n   --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |         --                  ^ expected one of `,` or `>` here\n-   |         |\n+   |         ---                 ^ expected one of `,` or `>` here\n+   |         | |\n+   |         | help: use `=` if you meant to assign\n    |         while parsing the type for `sr`\n \n-error: aborting due to previous error\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-34334.rs:2:13\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |             ^^^ did you mean `Vec { /* fields */ }`?\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-34334.rs:2:31\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |                               ^^^^^^ expected bool, found struct `std::vec::Vec`\n+   |\n+   = note: expected type `bool`\n+              found type `std::vec::Vec<_>`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/issue-34334.rs:2:13\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ left-hand of expression not valid\n+\n+error[E0599]: no method named `iter` found for type `()` in the current scope\n+  --> $DIR/issue-34334.rs:8:36\n+   |\n+LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n+   |                                    ^^^^\n+\n+error: aborting due to 6 previous errors\n \n+Some errors occurred: E0070, E0308, E0423, E0599.\n+For more information about an error, try `rustc --explain E0070`."}, {"sha": "d76096c25988d6dde575231903d86d534a596b96", "filename": "src/test/ui/parser/pat-tuple-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-1.rs?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n-    match 0 {\n-        (, ..) => {} //~ ERROR expected pattern, found `,`\n+    match (0, 1) {\n+        (, ..) => {}\n+        //~^ ERROR expected pattern, found `,`\n     }\n }"}, {"sha": "d4f05a5eb523ee6053a2b4e3e7ff1d8b6bea8670", "filename": "src/test/ui/parser/pat-tuple-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    match 0 {\n+    match (0, 1) {\n         (pat ..) => {} //~ ERROR unexpected token: `)`\n     }\n }"}, {"sha": "35088fb3068824d10637e0bca92d49f4b2b2ad00", "filename": "src/test/ui/parser/recover-from-bad-variant.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -0,0 +1,14 @@\n+enum Enum {\n+    Foo { a: usize, b: usize },\n+    Bar(usize, usize),\n+}\n+\n+fn main() {\n+    let x = Enum::Foo(a: 3, b: 4);\n+    //~^ ERROR expected type, found `3`\n+    match x {\n+        Enum::Foo(a, b) => {}\n+        //~^ ERROR expected tuple struct/variant, found struct variant `Enum::Foo`\n+        Enum::Bar(a, b) => {}\n+    }\n+}"}, {"sha": "bd4a562d72d1948ae7600164185e5a673243c8c0", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -0,0 +1,15 @@\n+error: expected type, found `3`\n+  --> $DIR/recover-from-bad-variant.rs:7:26\n+   |\n+LL |     let x = Enum::Foo(a: 3, b: 4);\n+   |                          ^ expecting a type here because of type ascription\n+\n+error[E0532]: expected tuple struct/variant, found struct variant `Enum::Foo`\n+  --> $DIR/recover-from-bad-variant.rs:10:9\n+   |\n+LL |         Enum::Foo(a, b) => {}\n+   |         ^^^^^^^^^ did you mean `Enum::Foo { /* fields */ }`?\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0532`."}, {"sha": "488e8db6b878979e11f42b7c1866f4ae838875d8", "filename": "src/test/ui/parser/recover-tuple-pat.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.rs?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    let x = (1, 2, 3, 4);\n+    match x {\n+        (1, .., 4) => {}\n+        (1, .=., 4) => { let _: usize = \"\"; }\n+        //~^ ERROR expected pattern, found `.`\n+        //~| ERROR mismatched types\n+        (.=., 4) => {}\n+        //~^ ERROR expected pattern, found `.`\n+        (1, 2, 3, 4) => {}\n+    }\n+}"}, {"sha": "5919aa72355acd43ddea3cdcc5e90f10c1191d6c", "filename": "src/test/ui/parser/recover-tuple-pat.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple-pat.stderr?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -0,0 +1,24 @@\n+error: expected pattern, found `.`\n+  --> $DIR/recover-tuple-pat.rs:5:13\n+   |\n+LL |         (1, .=., 4) => { let _: usize = \"\"; }\n+   |             ^ expected pattern\n+\n+error: expected pattern, found `.`\n+  --> $DIR/recover-tuple-pat.rs:8:10\n+   |\n+LL |         (.=., 4) => {}\n+   |          ^ expected pattern\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-tuple-pat.rs:5:41\n+   |\n+LL |         (1, .=., 4) => { let _: usize = \"\"; }\n+   |                                         ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "59e2695dec6dcfcd406b78ee0b95795d0645ff1f", "filename": "src/test/ui/parser/recover-tuple.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.rs?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    // no complaints about the tuple not matching the expected type\n+    let x: (usize, usize, usize) = (3, .=.);\n+    //~^ ERROR expected expression, found `.`\n+    // verify that the parser recovers:\n+    let y: usize = \"\"; //~ ERROR mismatched types\n+    // no complaints about the type\n+    foo(x);\n+}\n+\n+fn foo(_: (usize, usize, usize)) {}"}, {"sha": "4252fc1fd1e1b6cd7c9229a9c2e4defb60619404", "filename": "src/test/ui/parser/recover-tuple.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-tuple.stderr?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -0,0 +1,18 @@\n+error: expected expression, found `.`\n+  --> $DIR/recover-tuple.rs:3:40\n+   |\n+LL |     let x: (usize, usize, usize) = (3, .=.);\n+   |                                        ^ expected expression\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-tuple.rs:6:20\n+   |\n+LL |     let y: usize = \"\";\n+   |                    ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "43f6497f7e71cfa2b7c59e8e81aacadd2431e31d", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -6,7 +6,10 @@ fn f<'a, T: Trait + ('a)>() {} //~ ERROR parenthesized lifetime bounds are not s\n \n fn check<'a>() {\n     let _: Box<Trait + ('a)>; //~ ERROR parenthesized lifetime bounds are not supported\n-    let _: Box<('a) + Trait>; //~ ERROR expected type, found `'a`\n+    let _: Box<('a) + Trait>;\n+    //~^ ERROR expected type, found `'a`\n+    //~| ERROR expected `:`, found `)`\n+    //~| ERROR chained comparison operators require parentheses\n }\n \n fn main() {}"}, {"sha": "a31b7aea8fee6f9d0117aece4e62e45dfa6e2462", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3918cf62138157ef4748c2193e0601aaa78f311/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=e3918cf62138157ef4748c2193e0601aaa78f311", "patch": "@@ -10,6 +10,21 @@ error: parenthesized lifetime bounds are not supported\n LL |     let _: Box<Trait + ('a)>;\n    |                        ^^^^ help: remove the parentheses\n \n+error: expected `:`, found `)`\n+  --> $DIR/trait-object-lifetime-parens.rs:9:19\n+   |\n+LL |     let _: Box<('a) + Trait>;\n+   |                   ^ expected `:`\n+\n+error: chained comparison operators require parentheses\n+  --> $DIR/trait-object-lifetime-parens.rs:9:15\n+   |\n+LL |     let _: Box<('a) + Trait>;\n+   |               ^^^^^^^^^^^^^^^\n+   |\n+   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n+   = help: or use `(...)` if you meant to specify fn arguments\n+\n error: expected type, found `'a`\n   --> $DIR/trait-object-lifetime-parens.rs:9:17\n    |\n@@ -18,5 +33,5 @@ LL |     let _: Box<('a) + Trait>;\n    |         |\n    |         while parsing the type for `_`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n "}]}