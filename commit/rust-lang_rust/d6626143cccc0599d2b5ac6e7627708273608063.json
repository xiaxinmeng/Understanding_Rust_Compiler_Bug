{"sha": "d6626143cccc0599d2b5ac6e7627708273608063", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NjI2MTQzY2NjYzA1OTlkMmI1YWM2ZTc2Mjc3MDgyNzM2MDgwNjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-11T22:57:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:26Z"}, "message": "Remove vecs from compiletest", "tree": {"sha": "9cc0594532962267316452f075719e78b542e6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc0594532962267316452f075719e78b542e6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6626143cccc0599d2b5ac6e7627708273608063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6626143cccc0599d2b5ac6e7627708273608063", "html_url": "https://github.com/rust-lang/rust/commit/d6626143cccc0599d2b5ac6e7627708273608063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6626143cccc0599d2b5ac6e7627708273608063/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4caeba917860e64bda52174cec3895b4430e7ca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4caeba917860e64bda52174cec3895b4430e7ca8", "html_url": "https://github.com/rust-lang/rust/commit/4caeba917860e64bda52174cec3895b4430e7ca8"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "fa60a58ba640125f79d46560d5251a1048a55f35", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6626143cccc0599d2b5ac6e7627708273608063/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6626143cccc0599d2b5ac6e7627708273608063/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=d6626143cccc0599d2b5ac6e7627708273608063", "patch": "@@ -54,13 +54,13 @@ fn close(handle: &handle) {\n }\n \n fn run(handle: &handle, lib_path: &str,\n-       prog: &str, args: &vec[str], input: &option::t[str]) ->\n+       prog: &str, args: &[str], input: &option::t[str]) ->\n {status: int, out: str, err: str} {\n     let p = port[response]();\n     let ch = chan(p);\n     task::send(handle.chan, exec(lib_path,\n                                  prog,\n-                                 clone_ivecstr(ivec::from_vec(args)),\n+                                 clone_ivecstr(args),\n                                  task::clone_chan(ch)));\n     let resp = task::recv(p);\n "}, {"sha": "764150e5961574181f6cb19b65b2aac753c3e4d5", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d6626143cccc0599d2b5ac6e7627708273608063/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6626143cccc0599d2b5ac6e7627708273608063/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=d6626143cccc0599d2b5ac6e7627708273608063", "patch": "@@ -150,7 +150,7 @@ fn run_pretty_test(cx: &cx, props: &test_props, testfile: &str) {\n \n     fn make_pp_args(config: &config, testfile: &str) -> procargs {\n         let prog = config.rustc_path;\n-        let args = [\"-\", \"--pretty\", \"normal\"];\n+        let args = ~[\"-\", \"--pretty\", \"normal\"];\n         ret {prog: prog, args: args};\n     }\n \n@@ -180,7 +180,7 @@ actual:\\n\\\n \n     fn make_typecheck_args(config: &config, testfile: &str) -> procargs {\n         let prog = config.rustc_path;\n-        let args = [\"-\", \"--no-trans\", \"--lib\"];\n+        let args = ~[\"-\", \"--no-trans\", \"--lib\"];\n         ret {prog: prog, args: args};\n     }\n }\n@@ -219,7 +219,7 @@ fn check_error_patterns(props: &test_props, testfile: &str,\n     }\n }\n \n-type procargs = {prog: str, args: vec[str]};\n+type procargs = {prog: str, args: [str]};\n \n type procres = {status: int, stdout: str, stderr: str, cmdline: str};\n \n@@ -248,7 +248,7 @@ fn make_compile_args(config: &config,\n                      props: &test_props, testfile: &str) ->\n     procargs {\n     let prog = config.rustc_path;\n-    let args = [testfile, \"-o\", make_exe_name(config, testfile)];\n+    let args = ~[testfile, \"-o\", make_exe_name(config, testfile)];\n     args += split_maybe_args(config.rustcflags);\n     args += split_maybe_args(props.compile_flags);\n     ret {prog: prog, args: args};\n@@ -265,15 +265,15 @@ fn make_run_args(config: &config,\n         // then split apart its command\n         split_maybe_args(config.runtool)\n     } else {\n-        []\n+        ~[]\n     };\n \n-    let args = toolargs + [make_exe_name(config, testfile)];\n-    ret {prog: args.(0), args: vec::slice(args, 1u, vec::len(args))};\n+    let args = toolargs + ~[make_exe_name(config, testfile)];\n+    ret {prog: args.(0), args: ivec::slice(args, 1u, ivec::len(args))};\n }\n \n-fn split_maybe_args(argstr: &option::t[str]) -> vec[str] {\n-    fn rm_whitespace(v: vec[str]) -> vec[str] {\n+fn split_maybe_args(argstr: &option::t[str]) -> [str] {\n+    fn rm_whitespace(v: &[str]) -> [str] {\n         fn flt(s: &str) -> option::t[str] {\n             if !is_whitespace(s) {\n                 option::some(s)\n@@ -289,17 +289,17 @@ fn split_maybe_args(argstr: &option::t[str]) -> vec[str] {\n             }\n             ret true;\n         }\n-        vec::filter_map(flt, v)\n+        ivec::filter_map(flt, v)\n     }\n \n     alt argstr {\n-      option::some(s) { rm_whitespace(str::split(s, ' ' as u8)) }\n-      option::none. { [] }\n+      option::some(s) { rm_whitespace(str::split_ivec(s, ' ' as u8)) }\n+      option::none. { ~[] }\n     }\n }\n \n fn program_output(cx: &cx, testfile: &str, lib_path: &str, prog: &str,\n-                  args: &vec[str], input: option::t[str]) -> procres {\n+                  args: &[str], input: option::t[str]) -> procres {\n     let cmdline =\n     {\n         let cmdline = make_cmdline(lib_path, prog, args);\n@@ -313,9 +313,9 @@ fn program_output(cx: &cx, testfile: &str, lib_path: &str, prog: &str,\n          stderr: res.err, cmdline: cmdline};\n }\n \n-fn make_cmdline(libpath: &str, prog: &str, args: &vec[str]) -> str {\n+fn make_cmdline(libpath: &str, prog: &str, args: &[str]) -> str {\n     #fmt(\"%s %s %s\", lib_path_cmd_prefix(libpath), prog,\n-         str::connect(args, \" \"))\n+         str::connect_ivec(args, \" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line"}]}