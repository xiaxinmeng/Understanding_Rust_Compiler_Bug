{"sha": "d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MWJiNDQxZGFlM2JkYjY3NjBkY2IwZGMwZmNhMmFjZWI1NjFkMjQ=", "commit": {"author": {"name": "HeroesGrave", "email": "heroesgrave@gmail.com", "date": "2014-02-03T05:56:49Z"}, "committer": {"name": "HeroesGrave", "email": "heroesgrave@gmail.com", "date": "2014-02-07T06:49:26Z"}, "message": "moved collections from libextra into libcollections", "tree": {"sha": "b719e6659bde57f21389527ca7f1531683b0245d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b719e6659bde57f21389527ca7f1531683b0245d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "html_url": "https://github.com/rust-lang/rust/commit/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/comments", "author": {"login": "HeroesGrave", "id": 1934172, "node_id": "MDQ6VXNlcjE5MzQxNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1934172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroesGrave", "html_url": "https://github.com/HeroesGrave", "followers_url": "https://api.github.com/users/HeroesGrave/followers", "following_url": "https://api.github.com/users/HeroesGrave/following{/other_user}", "gists_url": "https://api.github.com/users/HeroesGrave/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroesGrave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroesGrave/subscriptions", "organizations_url": "https://api.github.com/users/HeroesGrave/orgs", "repos_url": "https://api.github.com/users/HeroesGrave/repos", "events_url": "https://api.github.com/users/HeroesGrave/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroesGrave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroesGrave", "id": 1934172, "node_id": "MDQ6VXNlcjE5MzQxNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1934172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroesGrave", "html_url": "https://github.com/HeroesGrave", "followers_url": "https://api.github.com/users/HeroesGrave/followers", "following_url": "https://api.github.com/users/HeroesGrave/following{/other_user}", "gists_url": "https://api.github.com/users/HeroesGrave/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroesGrave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroesGrave/subscriptions", "organizations_url": "https://api.github.com/users/HeroesGrave/orgs", "repos_url": "https://api.github.com/users/HeroesGrave/repos", "events_url": "https://api.github.com/users/HeroesGrave/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroesGrave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87fe3ccf09fa16d662427ffdd7a846d72551a27f", "url": "https://api.github.com/repos/rust-lang/rust/commits/87fe3ccf09fa16d662427ffdd7a846d72551a27f", "html_url": "https://github.com/rust-lang/rust/commit/87fe3ccf09fa16d662427ffdd7a846d72551a27f"}], "stats": {"total": 189, "additions": 117, "deletions": 72}, "files": [{"sha": "05bc38193cd443d96f96f9bb677bd359da216846", "filename": "mk/crates.mk", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -50,28 +50,30 @@\n ################################################################################\n \n TARGET_CRATES := std extra green rustuv native flate arena glob term semver \\\n-                 uuid serialize sync getopts\n+                 uuid serialize sync getopts collections\n HOST_CRATES := syntax rustc rustdoc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_std := native:rustrt\n-DEPS_extra := std term sync serialize getopts\n+DEPS_extra := std term sync serialize getopts collections\n DEPS_green := std\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n-DEPS_syntax := std extra term serialize\n-DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts\n-DEPS_rustdoc := rustc native:sundown serialize sync getopts\n+DEPS_syntax := std extra term serialize collections\n+DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n+              collections\n+DEPS_rustdoc := rustc native:sundown serialize sync getopts collections\n DEPS_flate := std native:miniz\n-DEPS_arena := std extra\n+DEPS_arena := std collections\n DEPS_glob := std\n DEPS_serialize := std\n DEPS_term := std\n DEPS_semver := std\n DEPS_uuid := std serialize\n DEPS_sync := std\n DEPS_getopts := std\n+DEPS_collections := std serialize\n \n TOOL_DEPS_compiletest := extra green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc green rustuv"}, {"sha": "a552a48714beb8f97115507efc646d67a23c8b3e", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -38,6 +38,7 @@ li {list-style-type: none; }\n * [The Rust compiler, `librustc`](rustc/index.html)\n \n * [The `arena` allocation library](arena/index.html)\n+* [The `collections` library](collections/index.html)\n * [The `flate` compression library](flate/index.html)\n * [The `getopts` argument parsing library](getopts/index.html)\n * [The `glob` file path matching library](glob/index.html)"}, {"sha": "4a611fe7d53300da705a4048eae4b6a4ce8fe4dd", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -881,7 +881,7 @@ use foo::baz::foobaz;    // good: foo is at the root of the crate\n mod foo {\n     extern mod extra;\n \n-    use foo::extra::list;  // good: foo is at crate root\n+    use foo::extra::time;  // good: foo is at crate root\n //  use extra::*;          // bad:  extra is not at the crate root\n     use self::baz::foobaz; // good: self refers to module 'foo'\n     use foo::bar::foobar;  // good: foo is at crate root"}, {"sha": "cd9b638a5c225c915f68b8f400aee6c786edf6cc", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -22,10 +22,12 @@\n #[allow(missing_doc)];\n #[feature(managed_boxes)];\n \n-extern mod extra;\n+extern mod collections;\n \n-use extra::list::{List, Cons, Nil};\n-use extra::list;\n+#[cfg(test)] extern mod extra;\n+\n+use collections::list::{List, Cons, Nil};\n+use collections::list;\n \n use std::cast::{transmute, transmute_mut, transmute_mut_region};\n use std::cast;"}, {"sha": "7211907f483212578caaa14049ff69b10e7ffb48", "filename": "src/libcollections/bitv.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "previous_filename": "src/libextra/bitv.rs"}, {"sha": "791673d75bb37009a2838b2325788bfd856cb20b", "filename": "src/libcollections/btree.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "previous_filename": "src/libextra/btree.rs"}, {"sha": "325f0ee4edb631aa7af1a530602d14ba178cbe42", "filename": "src/libcollections/deque.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -44,7 +44,7 @@ pub mod bench {\n     use std::container::MutableMap;\n     use std::{vec, rand};\n     use std::rand::Rng;\n-    use test::BenchHarness;\n+    use extra::test::BenchHarness;\n \n     pub fn insert_rand_n<M:MutableMap<uint,uint>>(n: uint,\n                                                   map: &mut M,", "previous_filename": "src/libextra/container.rs"}, {"sha": "2b7c5d373362cfc77334c7ad807406b6a77dda7c", "filename": "src/libcollections/dlist.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -28,7 +28,7 @@ use std::util;\n use std::iter::Rev;\n use std::iter;\n \n-use container::Deque;\n+use deque::Deque;\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -657,7 +657,7 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for DList<T> {\n \n #[cfg(test)]\n mod tests {\n-    use container::Deque;\n+    use deque::Deque;\n     use extra::test;\n     use std::rand;\n     use super::{DList, Node, ListInsertion};", "previous_filename": "src/libextra/dlist.rs"}, {"sha": "417bf47803eaf4290309a883fb95ec82a3160a65", "filename": "src/libcollections/lib.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+ * Collection types.\n+ */\n+\n+#[crate_id = \"collections#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+\n+#[feature(macro_rules, managed_boxes)];\n+\n+#[cfg(test)] extern mod extra;\n+\n+extern mod serialize;\n+\n+pub use bitv::Bitv;\n+pub use btree::BTree;\n+pub use deque::Deque;\n+pub use dlist::DList;\n+pub use list::List;\n+pub use lru_cache::LruCache;\n+pub use priority_queue::PriorityQueue;\n+pub use ringbuf::RingBuf;\n+pub use smallintmap::SmallIntMap;\n+pub use treemap::{TreeMap, TreeSet};\n+\n+pub mod bitv;\n+pub mod btree;\n+pub mod deque;\n+pub mod dlist;\n+pub mod list;\n+pub mod lru_cache;\n+pub mod priority_queue;\n+pub mod ringbuf;\n+pub mod smallintmap;\n+pub mod treemap;\n\\ No newline at end of file"}, {"sha": "79d0f3f49a769ba92df059087b24cdd16411a300", "filename": "src/libcollections/list.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flist.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -153,7 +153,7 @@ pub fn each<T>(l: @List<T>, f: |&T| -> bool) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use list::*;\n+    use list::{List, Nil, from_vec, head, is_empty, tail};\n     use list;\n \n     use std::option;", "previous_filename": "src/libextra/list.rs"}, {"sha": "de7b511fd41f1901290fec14f17c69b0400bf7f9", "filename": "src/libcollections/lru_cache.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flru_cache.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -17,7 +17,7 @@\n //! # Example\n //!\n //! ```rust\n-//! use extra::lru_cache::LruCache;\n+//! use collections::LruCache;\n //!\n //! let mut cache: LruCache<int, int> = LruCache::new(2);\n //! cache.put(1, 10);", "previous_filename": "src/libextra/lru_cache.rs"}, {"sha": "3ae3dae9ea30703b250162f30cedbe06c05e70f9", "filename": "src/libcollections/priority_queue.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "previous_filename": "src/libextra/priority_queue.rs"}, {"sha": "933fe2048e44553e1221a4c4149785d442141d4b", "filename": "src/libcollections/ringbuf.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -17,7 +17,7 @@ use std::num;\n use std::vec;\n use std::iter::{Rev, RandomAccessIterator};\n \n-use container::Deque;\n+use deque::Deque;\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -431,7 +431,7 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for RingBuf<T> {\n \n #[cfg(test)]\n mod tests {\n-    use container::Deque;\n+    use deque::Deque;\n     use extra::test;\n     use std::clone::Clone;\n     use std::cmp::Eq;", "previous_filename": "src/libextra/ringbuf.rs"}, {"sha": "b996f0dea32349ee771ec9c9f81bd7f8954066ab", "filename": "src/libcollections/smallintmap.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -471,9 +471,9 @@ mod test_map {\n #[cfg(test)]\n mod bench {\n \n-    use super::*;\n-    use test::BenchHarness;\n-    use container::bench::*;\n+    use super::SmallIntMap;\n+    use extra::test::BenchHarness;\n+    use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n     // Find seq\n     #[bench]", "previous_filename": "src/libextra/smallintmap.rs"}, {"sha": "0fccc57b29e3dd370b7339b8f2042b39f795b219", "filename": "src/libcollections/treemap.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -1495,9 +1495,9 @@ mod test_treemap {\n #[cfg(test)]\n mod bench {\n \n-    use super::*;\n-    use test::BenchHarness;\n-    use container::bench::*;\n+    use super::TreeMap;\n+    use extra::test::BenchHarness;\n+    use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n     // Find seq\n     #[bench]\n@@ -1555,7 +1555,7 @@ mod bench {\n #[cfg(test)]\n mod test_set {\n \n-    use super::*;\n+    use super::{TreeMap, TreeSet};\n \n     #[test]\n     fn test_clear() {", "previous_filename": "src/libextra/treemap.rs"}, {"sha": "75bbd3d8a019d0a8b20c6a892923f12499d0c01a", "filename": "src/libextra/json.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -98,9 +98,11 @@ A basic `ToJson` example using a TreeMap of attribute name / attribute value:\n \n \n ```rust\n+extern mod collections;\n+\n use extra::json;\n use extra::json::ToJson;\n-use extra::treemap::TreeMap;\n+use collections::TreeMap;\n \n pub struct MyStruct  {\n     attr1: u8,\n@@ -185,10 +187,12 @@ Example of `ToJson` trait implementation for TestStruct1.\n \n ```rust\n extern mod serialize;\n+extern mod collections;\n+\n use extra::json;\n use extra::json::ToJson;\n use serialize::{Encodable, Decodable};\n-use extra::treemap::TreeMap;\n+use collections::TreeMap;\n \n #[deriving(Decodable, Encodable)] // generate Decodable, Encodable impl.\n pub struct TestStruct1  {\n@@ -236,7 +240,7 @@ use std::to_str;\n \n use serialize::Encodable;\n use serialize;\n-use treemap::TreeMap;\n+use collections::TreeMap;\n \n macro_rules! if_ok( ($e:expr) => (\n     match $e { Ok(e) => e, Err(e) => { self.error = Err(e); return } }\n@@ -1588,7 +1592,7 @@ mod tests {\n \n     use std::io;\n     use serialize::{Encodable, Decodable};\n-    use treemap::TreeMap;\n+    use collections::TreeMap;\n \n     #[deriving(Eq, Encodable, Decodable)]\n     enum Animal {"}, {"sha": "519192fd177668cf76f9293ba651e721dcb3ec7e", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -38,6 +38,8 @@ extern mod sync;\n #[cfg(not(stage0))]\n extern mod serialize;\n \n+extern mod collections;\n+\n #[cfg(stage0)]\n pub mod serialize {\n     #[allow(missing_doc)];\n@@ -47,29 +49,10 @@ pub mod serialize {\n                                    EncoderHelpers, DecoderHelpers};\n }\n \n-#[cfg(stage0)]\n-macro_rules! if_ok (\n-    ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n-)\n-\n // Utility modules\n \n pub mod c_vec;\n \n-// Collections\n-\n-pub mod container;\n-pub mod bitv;\n-pub mod list;\n-pub mod ringbuf;\n-pub mod priority_queue;\n-pub mod smallintmap;\n-\n-pub mod dlist;\n-pub mod treemap;\n-pub mod btree;\n-pub mod lru_cache;\n-\n // And ... other stuff\n \n pub mod url;"}, {"sha": "d1fffd9e515c18e164962e447198e622f2d5d7d1", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -24,7 +24,7 @@ use serialize::Decodable;\n use stats::Stats;\n use stats;\n use time::precise_time_ns;\n-use treemap::TreeMap;\n+use collections::TreeMap;\n \n use std::clone::Clone;\n use std::io;"}, {"sha": "007b54adbe51abf20ee01ae61c7e3b3a13a8dad3", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -14,7 +14,7 @@ use json;\n use json::ToJson;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n use sync::{Arc,RWArc};\n-use treemap::TreeMap;\n+use collections::TreeMap;\n use std::str;\n use std::io;\n use std::io::{File, MemWriter};"}, {"sha": "b6efd66dfbd10d46863ec7a5a6586e0d09a75ec2", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -38,6 +38,7 @@ extern mod syntax;\n extern mod serialize;\n extern mod sync;\n extern mod getopts;\n+extern mod collections;\n \n use back::link;\n use driver::session;"}, {"sha": "0ebfa8c393c2f21818bf353219ad862604450a03", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -56,7 +56,7 @@ use std::u16;\n use std::u32;\n use std::u64;\n use std::u8;\n-use extra::smallintmap::SmallIntMap;\n+use collections::SmallIntMap;\n use syntax::ast_map;\n use syntax::ast_util::IdVisitingOperation;\n use syntax::attr::{AttrMetaMethods, AttributeMethods};"}, {"sha": "496170c3e47e099b62b9a9fbc6576116398f7b1d", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -20,7 +20,7 @@ pub use middle::typeck::infer::resolve::{resolve_ivar, resolve_all};\n pub use middle::typeck::infer::resolve::{resolve_nested_tvar};\n pub use middle::typeck::infer::resolve::{resolve_rvar};\n \n-use extra::smallintmap::SmallIntMap;\n+use collections::SmallIntMap;\n use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, Vid};\n use middle::ty;\n use middle::ty_fold;"}, {"sha": "c55bdcd0bf99b3b43400e09102be611c95672904", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use extra::smallintmap::SmallIntMap;\n+use collections::SmallIntMap;\n \n use middle::ty::{Vid, expected_found, IntVarValue};\n use middle::ty;"}, {"sha": "b6ad8cc6c43b8451869541b531b4a1479b57022c", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -71,8 +71,8 @@ use util::ppaux;\n use std::cell::RefCell;\n use std::hashmap::HashMap;\n use std::rc::Rc;\n-use extra::list::List;\n-use extra::list;\n+use collections::List;\n+use collections::list;\n use syntax::codemap::Span;\n use syntax::print::pprust::*;\n use syntax::{ast, ast_map, abi};"}, {"sha": "3dbf4726ae4cb725e91ef774988285c58cecf6e3", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -21,6 +21,7 @@ extern mod extra;\n extern mod serialize;\n extern mod sync;\n extern mod getopts;\n+extern mod collections;\n \n use std::local_data;\n use std::io;\n@@ -326,7 +327,7 @@ fn json_output(crate: clean::Crate, res: ~[plugins::PluginJson],\n     //   \"crate\": { parsed crate ... },\n     //   \"plugins\": { output of plugins ... }\n     // }\n-    let mut json = ~extra::treemap::TreeMap::new();\n+    let mut json = ~collections::TreeMap::new();\n     json.insert(~\"schema\", json::String(SCHEMA_VERSION.to_owned()));\n     let plugins_json = ~res.move_iter().filter_map(|opt| opt).collect();\n "}, {"sha": "817668f2232514c49d51f1e080d565f630836bd8", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -22,7 +22,7 @@ use util::small_vector::SmallVector;\n \n use std::logging;\n use std::cell::RefCell;\n-use extra::smallintmap::SmallIntMap;\n+use collections::SmallIntMap;\n \n #[deriving(Clone, Eq)]\n pub enum PathElem {"}, {"sha": "613416bed1c1404473d8723223e74e9b4246b37f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -35,6 +35,7 @@ This API is completely unstable and subject to change.\n extern mod extra;\n extern mod serialize;\n extern mod term;\n+extern mod collections;\n \n pub mod util {\n     pub mod interner;"}, {"sha": "ed3874b1a6fcd69b658c1ad9ea56f640e6eb893c", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n extern mod extra;\n+extern mod collections;\n \n use extra::time;\n-use extra::treemap::TreeMap;\n+use collections::TreeMap;\n use std::hashmap::{HashMap, HashSet};\n use std::os;\n use std::rand::{Rng, IsaacRng, SeedableRng};"}, {"sha": "eb985f8f7eb4be12a72c786aee9fb365e02881f1", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -11,9 +11,10 @@\n // except according to those terms.\n \n extern mod extra;\n+extern mod collections;\n \n-use extra::bitv::BitvSet;\n-use extra::treemap::TreeSet;\n+use collections::bitv::BitvSet;\n+use collections::TreeSet;\n use std::hashmap::HashSet;\n use std::os;\n use std::rand;"}, {"sha": "58f667b929ff491a80cac88dbd2b228833b93535", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -11,8 +11,9 @@\n // Microbenchmark for the smallintmap library\n \n extern mod extra;\n+extern mod collections;\n \n-use extra::smallintmap::SmallIntMap;\n+use collections::SmallIntMap;\n use std::os;\n use std::uint;\n "}, {"sha": "42b564edbc521142517109e4e9e89c2df67cac72", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -11,8 +11,9 @@\n #[feature(managed_boxes)];\n \n extern mod extra;\n+extern mod collections;\n \n-use extra::list::{List, Cons, Nil};\n+use collections::list::{List, Cons, Nil};\n use extra::time::precise_time_s;\n use std::os;\n use std::task;"}, {"sha": "8839c53f14c2b636a7d331f29930a8853d043525", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-use extra::bitv::Bitv;\n+extern mod collections;\n+use collections::Bitv;\n \n fn bitv_test() {\n     let mut v1 = ~Bitv::new(31, false);"}, {"sha": "e7eea698ae73f14e07c6963921a25906cfb10fd1", "filename": "src/test/run-pass/issue-2383.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -10,9 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-use extra::ringbuf::RingBuf;\n-use extra::container::Deque;\n+extern mod collections;\n+use collections::RingBuf;\n+use collections::Deque;\n \n pub fn main() {\n     let mut q = RingBuf::new();"}, {"sha": "a96c01e56d91ef8d9a7d4fb4dd8b005f17a558a2", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-use extra::list;\n+extern mod collections;\n+use collections::list;\n \n #[deriving(Clone)]\n enum foo {"}, {"sha": "e6fe0873d624220533d1e239df6b5afbd82fc698", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -12,9 +12,9 @@\n \n #[feature(managed_boxes)];\n \n-extern mod extra;\n+extern mod collections;\n \n-use extra::list::{List, Cons, Nil, head, is_empty};\n+use collections::list::{List, Cons, Nil, head, is_empty};\n \n fn pure_length_go<T:Clone>(ls: @List<T>, acc: uint) -> uint {\n     match *ls { Nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }"}, {"sha": "6332d779e5e6d621cd1306ba0a85eff902c76b59", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81bb441dae3bdb6760dcb0dc0fca2aceb561d24/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=d81bb441dae3bdb6760dcb0dc0fca2aceb561d24", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern mod collections;\n \n use std::clone::{Clone, DeepClone};\n use std::cmp::{TotalEq, Ord, TotalOrd, Equiv};\n@@ -18,7 +18,7 @@ use std::default::Default;\n use std::send_str::{SendStr, SendStrOwned, SendStrStatic};\n use std::str::Str;\n use std::to_str::ToStr;\n-use self::extra::treemap::TreeMap;\n+use self::collections::TreeMap;\n use std::option::Some;\n \n pub fn main() {"}]}