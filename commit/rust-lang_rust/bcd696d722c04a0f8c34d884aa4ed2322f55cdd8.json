{"sha": "bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZDY5NmQ3MjJjMDRhMGY4YzM0ZDg4NGFhNGVkMjMyMmY1NWNkZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-30T06:59:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-30T06:59:37Z"}, "message": "Auto merge of #84401 - crlf0710:impl_main_by_path, r=petrochenkov\n\nImplement RFC 1260 with feature_name `imported_main`.\n\nThis is the second extraction part of #84062 plus additional adjustments.\nThis (mostly) implements RFC 1260.\n\nHowever there's still one test case failure in the extern crate case. Maybe `LocalDefId` doesn't work here? I'm not sure.\n\ncc https://github.com/rust-lang/rust/issues/28937\nr? `@petrochenkov`", "tree": {"sha": "82e40b44740bbb8be5e15042af512b455d66742d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e40b44740bbb8be5e15042af512b455d66742d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "html_url": "https://github.com/rust-lang/rust/commit/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45f0d724ed7116ed475fb0d628bc118418e7cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a45f0d724ed7116ed475fb0d628bc118418e7cbf", "html_url": "https://github.com/rust-lang/rust/commit/a45f0d724ed7116ed475fb0d628bc118418e7cbf"}, {"sha": "d261df4a72e60e8baa0f21b67eba8f7b91cc2135", "url": "https://api.github.com/repos/rust-lang/rust/commits/d261df4a72e60e8baa0f21b67eba8f7b91cc2135", "html_url": "https://github.com/rust-lang/rust/commit/d261df4a72e60e8baa0f21b67eba8f7b91cc2135"}], "stats": {"total": 648, "additions": 459, "deletions": 189}, "files": [{"sha": "f585ebca9dc4044b0b22e96e1d0bdb4f130d0fb8", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -103,7 +103,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     });\n \n     let (main_def_id, entry_ty) = tcx.entry_fn(LOCAL_CRATE).unwrap();\n-    let instance = Instance::mono(tcx, main_def_id.to_def_id()).polymorphize(tcx);\n+    let instance = Instance::mono(tcx, main_def_id).polymorphize(tcx);\n \n     match entry_ty {\n         EntryFnType::Main => {"}, {"sha": "dc86290b3fe936cb28d6a98de9afae71cd2bd351", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n ) {\n     let (main_def_id, use_start_lang_item) = match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, entry_ty)) => (\n-            def_id.to_def_id(),\n+            def_id,\n             match entry_ty {\n                 EntryFnType::Main => true,\n                 EntryFnType::Start => false,"}, {"sha": "b928e903730b6af9a355185629a462d1c190c511", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -344,7 +344,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             spflags |= DISPFlags::SPFlagOptimized;\n         }\n         if let Some((id, _)) = self.tcx.entry_fn(LOCAL_CRATE) {\n-            if id.to_def_id() == def_id {\n+            if id == def_id {\n                 spflags |= DISPFlags::SPFlagMainSubprogram;\n             }\n         }"}, {"sha": "e045a23eb0ce3bcb62d52f7f3e0906be1d9dc6e7", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_data_structures::sync::{par_iter, ParallelIterator};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -348,12 +348,29 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n ) -> Option<Bx::Function> {\n     let main_def_id = cx.tcx().entry_fn(LOCAL_CRATE).map(|(def_id, _)| def_id)?;\n-    let instance = Instance::mono(cx.tcx(), main_def_id.to_def_id());\n+    let main_is_local = main_def_id.is_local();\n+    let instance = Instance::mono(cx.tcx(), main_def_id);\n \n-    if !cx.codegen_unit().contains_item(&MonoItem::Fn(instance)) {\n+    if main_is_local {\n         // We want to create the wrapper in the same codegen unit as Rust's main\n         // function.\n-        return None;\n+        if !cx.codegen_unit().contains_item(&MonoItem::Fn(instance)) {\n+            return None;\n+        }\n+    } else {\n+        // FIXME: Add support for non-local main fn codegen\n+        let span = cx.tcx().main_def.unwrap().span;\n+        let n = 28937;\n+        cx.sess()\n+            .struct_span_err(span, \"entry symbol `main` from foreign crate is not yet supported.\")\n+            .note(&format!(\n+                \"see issue #{} <https://github.com/rust-lang/rust/issues/{}> \\\n+                 for more information\",\n+                n, n,\n+            ))\n+            .emit();\n+        cx.sess().abort_if_errors();\n+        bug!();\n     }\n \n     let main_llfn = cx.get_fn_addr(instance);\n@@ -366,7 +383,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     fn create_entry_fn<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx: &'a Bx::CodegenCx,\n         rust_main: Bx::Value,\n-        rust_main_def_id: LocalDefId,\n+        rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) -> Bx::Function {\n         // The entry function is either `int main(void)` or `int main(int argc, char **argv)`,"}, {"sha": "15cf09a18cbdeec42f8edf9d65cd38c3ea4f7701", "filename": "compiler/rustc_error_codes/src/error_codes/E0136.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0136.md", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0136.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0136.md?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n More than one `main` function was found.\n \n Erroneous code example:\n \n-```compile_fail,E0136\n+```compile_fail\n fn main() {\n     // ...\n }"}, {"sha": "3347c93948ccc0347f97def7e133e77dd1d91d53", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -20,7 +20,7 @@ use rustc_attr::{self as attr, is_builtin_attr};\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::Features;\n use rustc_parse::parser::{AttemptLocalParseRecovery, ForceCollect, Parser, RecoverComma};\n use rustc_parse::validate_attr;\n@@ -414,6 +414,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         kind.article(), kind.descr()\n                     ),\n                 );\n+                // FIXME: this workaround issue #84569\n+                FatalError.raise();\n             }\n         };\n         self.cx.trace_macros_diag();"}, {"sha": "4ad5f085ad05502cf9f30de44536ca6c6695ea7f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -653,6 +653,9 @@ declare_features! (\n     /// Allows unsizing coercions in `const fn`.\n     (active, const_fn_unsize, \"1.53.0\", Some(64992), None),\n \n+    /// Allows using imported `main` function\n+    (active, imported_main, \"1.53.0\", Some(28937), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "bc94fb67ac3dcc947b2ab01957340288db43ba9f", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -307,7 +307,7 @@ impl<'tcx> Queries<'tcx> {\n             _ => return,\n         };\n \n-        let attrs = &*tcx.get_attrs(def_id.to_def_id());\n+        let attrs = &*tcx.get_attrs(def_id);\n         let attrs = attrs.iter().filter(|attr| tcx.sess.check_name(attr, sym::rustc_error));\n         for attr in attrs {\n             match attr.meta_item_list() {"}, {"sha": "77f38e52ad2e415e22a6411ed55aa586c53f59a2", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::base_n;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::{HirId, ItemId};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n@@ -93,7 +93,7 @@ impl<'tcx> MonoItem<'tcx> {\n                 // indicator, then we'll be creating a globally shared version.\n                 if tcx.codegen_fn_attrs(instance.def_id()).contains_extern_indicator()\n                     || !instance.def.generates_cgu_internal_copy(tcx)\n-                    || Some(instance.def_id()) == entry_def_id.map(LocalDefId::to_def_id)\n+                    || Some(instance.def_id()) == entry_def_id\n                 {\n                     return InstantiationMode::GloballyShared { may_conflict: false };\n                 }"}, {"sha": "7e62e10821c9e1281dae45b2f9bc753f02d1c699", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -1194,7 +1194,7 @@ rustc_queries! {\n \n     /// Identifies the entry-point (e.g., the `main` function) for a given\n     /// crate, returning `None` if there is no entry point (such as for library crates).\n-    query entry_fn(_: CrateNum) -> Option<(LocalDefId, EntryFnType)> {\n+    query entry_fn(_: CrateNum) -> Option<(DefId, EntryFnType)> {\n         desc { \"looking up the entry function of a crate\" }\n     }\n     query plugin_registrar_fn(_: CrateNum) -> Option<DefId> {"}, {"sha": "b414618f7d5718ca0bdb0dd4a4368cc0e6b8b0eb", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -20,8 +20,8 @@ use crate::ty::TyKind::*;\n use crate::ty::{\n     self, AdtDef, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig, Const, ConstVid,\n     DefIdTree, ExistentialPredicate, FloatTy, FloatVar, FloatVid, GenericParamDefKind, InferConst,\n-    InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy, PolyFnSig, Predicate,\n-    PredicateInner, PredicateKind, ProjectionTy, Region, RegionKind, ReprOptions,\n+    InferTy, IntTy, IntVar, IntVid, List, MainDefinition, ParamConst, ParamTy, PolyFnSig,\n+    Predicate, PredicateInner, PredicateKind, ProjectionTy, Region, RegionKind, ReprOptions,\n     TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy, Visibility,\n };\n use rustc_ast as ast;\n@@ -1025,6 +1025,8 @@ pub struct GlobalCtxt<'tcx> {\n     layout_interner: ShardedHashMap<&'tcx Layout, ()>,\n \n     output_filenames: Arc<OutputFilenames>,\n+\n+    pub main_def: Option<MainDefinition>,\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -1185,6 +1187,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             const_stability_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             output_filenames: Arc::new(output_filenames.clone()),\n+            main_def: resolutions.main_def,\n         }\n     }\n "}, {"sha": "af49533753faeec1d4a1560648896d059d17a4b2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -124,6 +124,20 @@ pub struct ResolverOutputs {\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Symbol, bool>,\n+    pub main_def: Option<MainDefinition>,\n+}\n+\n+#[derive(Clone, Copy)]\n+pub struct MainDefinition {\n+    pub res: Res<ast::NodeId>,\n+    pub is_import: bool,\n+    pub span: Span,\n+}\n+\n+impl MainDefinition {\n+    pub fn opt_fn_def_id(self) -> Option<DefId> {\n+        if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }\n+    }\n }\n \n /// The \"header\" of an impl is everything outside the body: a Self type, a trait"}, {"sha": "fdefc890674774ad21dae37304e2e6557334323d", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -1066,7 +1066,7 @@ struct RootCollector<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     mode: MonoItemCollectionMode,\n     output: &'a mut Vec<Spanned<MonoItem<'tcx>>>,\n-    entry_fn: Option<(LocalDefId, EntryFnType)>,\n+    entry_fn: Option<(DefId, EntryFnType)>,\n }\n \n impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n@@ -1154,7 +1154,7 @@ impl RootCollector<'_, 'v> {\n             && match self.mode {\n                 MonoItemCollectionMode::Eager => true,\n                 MonoItemCollectionMode::Lazy => {\n-                    self.entry_fn.map(|(id, _)| id) == Some(def_id)\n+                    self.entry_fn.and_then(|(id, _)| id.as_local()) == Some(def_id)\n                         || self.tcx.is_reachable_non_generic(def_id)\n                         || self\n                             .tcx"}, {"sha": "d32180525bf700daefc895ed9770cc20c99b6a3b", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -472,7 +472,9 @@ fn create_and_seed_worklist<'tcx>(\n         )\n         .chain(\n             // Seed entry point\n-            tcx.entry_fn(LOCAL_CRATE).map(|(def_id, _)| tcx.hir().local_def_id_to_hir_id(def_id)),\n+            tcx.entry_fn(LOCAL_CRATE).and_then(|(def_id, _)| {\n+                def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n+            }),\n         )\n         .collect::<Vec<_>>();\n "}, {"sha": "65cfe986ad454051476ec6df519c106862a3c663", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -1,12 +1,13 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{CrateNum, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{ForeignItem, HirId, ImplItem, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{CrateType, EntryFnType};\n+use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n@@ -16,9 +17,6 @@ struct EntryContext<'a, 'tcx> {\n \n     map: Map<'tcx>,\n \n-    /// The top-level function called `main`.\n-    main_fn: Option<(HirId, Span)>,\n-\n     /// The function that has attribute named `main`.\n     attr_main_fn: Option<(HirId, Span)>,\n \n@@ -50,7 +48,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     }\n }\n \n-fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(LocalDefId, EntryFnType)> {\n+fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let any_exe = tcx.sess.crate_types().iter().any(|ty| *ty == CrateType::Executable);\n@@ -67,7 +65,6 @@ fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(LocalDefId, EntryFnType)\n     let mut ctxt = EntryContext {\n         session: tcx.sess,\n         map: tcx.hir(),\n-        main_fn: None,\n         attr_main_fn: None,\n         start_fn: None,\n         non_main_fns: Vec::new(),\n@@ -115,14 +112,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                 throw_attr_err(&ctxt.session, attr.span, \"rustc_main\");\n             }\n         }\n-        EntryPointType::MainNamed => {\n-            if ctxt.main_fn.is_none() {\n-                ctxt.main_fn = Some((item.hir_id(), item.span));\n-            } else {\n-                struct_span_err!(ctxt.session, item.span, E0136, \"multiple `main` functions\")\n-                    .emit();\n-            }\n-        }\n+        EntryPointType::MainNamed => (),\n         EntryPointType::OtherMain => {\n             ctxt.non_main_fns.push((item.hir_id(), item.span));\n         }\n@@ -154,16 +144,23 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n     }\n }\n \n-fn configure_main(\n-    tcx: TyCtxt<'_>,\n-    visitor: &EntryContext<'_, '_>,\n-) -> Option<(LocalDefId, EntryFnType)> {\n+fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(DefId, EntryFnType)> {\n     if let Some((hir_id, _)) = visitor.start_fn {\n-        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Start))\n+        Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Start))\n     } else if let Some((hir_id, _)) = visitor.attr_main_fn {\n-        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Main))\n-    } else if let Some((hir_id, _)) = visitor.main_fn {\n-        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Main))\n+        Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Main))\n+    } else if let Some(def_id) = tcx.main_def.and_then(|main_def| main_def.opt_fn_def_id()) {\n+        if tcx.main_def.unwrap().is_import && !tcx.features().imported_main {\n+            let span = tcx.main_def.unwrap().span;\n+            feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::imported_main,\n+                span,\n+                \"using an imported function as entry point `main` is experimental\",\n+            )\n+            .emit();\n+        }\n+        Some((def_id, EntryFnType::Main))\n     } else {\n         no_main_err(tcx, visitor);\n         None\n@@ -213,6 +210,14 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     } else {\n         err.note(&note);\n     }\n+\n+    if let Some(main_def) = tcx.main_def {\n+        if main_def.opt_fn_def_id().is_none() {\n+            // There is something at `crate::main`, but it is not a function definition.\n+            err.span_label(main_def.span, &format!(\"non-function item at `crate::main` is found\"));\n+        }\n+    }\n+\n     if tcx.sess.teach(&err.get_code().unwrap()) {\n         err.note(\n             \"If you don't know the basics of Rust, you can go look to the Rust Book \\\n@@ -222,7 +227,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     err.emit();\n }\n \n-pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(LocalDefId, EntryFnType)> {\n+pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(DefId, EntryFnType)> {\n     tcx.entry_fn(LOCAL_CRATE)\n }\n "}, {"sha": "9197f4059ca2e01387e885642ddbf7bf671455e1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -50,7 +50,7 @@ use rustc_middle::hir::exports::ExportMap;\n use rustc_middle::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, DefIdTree, ResolverOutputs};\n+use rustc_middle::ty::{self, DefIdTree, MainDefinition, ResolverOutputs};\n use rustc_session::lint;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n@@ -1021,6 +1021,8 @@ pub struct Resolver<'a> {\n     trait_impl_items: FxHashSet<LocalDefId>,\n \n     legacy_const_generic_args: FxHashMap<DefId, Option<Vec<usize>>>,\n+\n+    main_def: Option<MainDefinition>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1348,6 +1350,7 @@ impl<'a> Resolver<'a> {\n             next_disambiguator: Default::default(),\n             trait_impl_items: Default::default(),\n             legacy_const_generic_args: Default::default(),\n+            main_def: Default::default(),\n         };\n \n         let root_parent_scope = ParentScope::module(graph_root, &resolver);\n@@ -1382,6 +1385,7 @@ impl<'a> Resolver<'a> {\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n         let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n         let glob_map = self.glob_map;\n+        let main_def = self.main_def;\n         ResolverOutputs {\n             definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n@@ -1396,6 +1400,7 @@ impl<'a> Resolver<'a> {\n                 .iter()\n                 .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n                 .collect(),\n+            main_def,\n         }\n     }\n \n@@ -1414,6 +1419,7 @@ impl<'a> Resolver<'a> {\n                 .iter()\n                 .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n                 .collect(),\n+            main_def: self.main_def.clone(),\n         }\n     }\n \n@@ -1459,6 +1465,7 @@ impl<'a> Resolver<'a> {\n             self.session.time(\"finalize_imports\", || ImportResolver { r: self }.finalize_imports());\n             self.session.time(\"finalize_macro_resolutions\", || self.finalize_macro_resolutions());\n             self.session.time(\"late_resolve_crate\", || self.late_resolve_crate(krate));\n+            self.session.time(\"resolve_main\", || self.resolve_main());\n             self.session.time(\"resolve_check_unused\", || self.check_unused(krate));\n             self.session.time(\"resolve_report_errors\", || self.report_errors(krate));\n             self.session.time(\"resolve_postprocess\", || self.crate_loader.postprocess(krate));\n@@ -3350,6 +3357,32 @@ impl<'a> Resolver<'a> {\n         }\n         None\n     }\n+\n+    fn resolve_main(&mut self) {\n+        let module = self.graph_root;\n+        let ident = Ident::with_dummy_span(sym::main);\n+        let parent_scope = &ParentScope::module(module, self);\n+\n+        let name_binding = match self.resolve_ident_in_module(\n+            ModuleOrUniformRoot::Module(module),\n+            ident,\n+            ValueNS,\n+            parent_scope,\n+            false,\n+            DUMMY_SP,\n+        ) {\n+            Ok(name_binding) => name_binding,\n+            _ => return,\n+        };\n+\n+        let res = name_binding.res();\n+        let is_import = name_binding.is_import();\n+        let span = name_binding.span;\n+        if let Res::Def(DefKind::Fn, _) = res {\n+            self.record_use(ident, ValueNS, name_binding, false);\n+        }\n+        self.main_def = Some(MainDefinition { res, is_import, span });\n+    }\n }\n \n fn names_to_string(names: &[Symbol]) -> String {"}, {"sha": "b2dac10c83face662b8d66db8d8b1dd7570b6bba", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -634,6 +634,7 @@ symbols! {\n         impl_macros,\n         impl_trait_in_bindings,\n         import_shadowing,\n+        imported_main,\n         in_band_lifetimes,\n         include,\n         include_bytes,"}, {"sha": "92d7ea2600300e52bd1b97baba11121fcd55e62b", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -6,7 +6,7 @@ use super::*;\n use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorReported};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{def::Res, ItemKind, Node, PathSegment};\n@@ -16,15 +16,14 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::layout::MAX_SIMD_LANES;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, ParamEnv, RegionKind, ToPredicate, Ty, TyCtxt};\n-use rustc_session::config::EntryFnType;\n+use rustc_middle::ty::{self, ParamEnv, RegionKind, Ty, TyCtxt};\n use rustc_session::lint::builtin::UNINHABITED_STATIC;\n use rustc_span::symbol::sym;\n use rustc_span::{self, MultiSpan, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n+use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCauseCode};\n use rustc_ty_utils::representability::{self, Representability};\n \n use std::iter;\n@@ -326,29 +325,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n     }\n     fcx.demand_suptype(span, revealed_ret_ty, actual_return_ty);\n \n-    // Check that the main return type implements the termination trait.\n-    if let Some(term_id) = tcx.lang_items().termination() {\n-        if let Some((def_id, EntryFnType::Main)) = tcx.entry_fn(LOCAL_CRATE) {\n-            let main_id = hir.local_def_id_to_hir_id(def_id);\n-            if main_id == fn_id {\n-                let substs = tcx.mk_substs_trait(declared_ret_ty, &[]);\n-                let trait_ref = ty::TraitRef::new(term_id, substs);\n-                let return_ty_span = decl.output.span();\n-                let cause = traits::ObligationCause::new(\n-                    return_ty_span,\n-                    fn_id,\n-                    ObligationCauseCode::MainFunctionType,\n-                );\n-\n-                inherited.register_predicate(traits::Obligation::new(\n-                    cause,\n-                    param_env,\n-                    trait_ref.without_const().to_predicate(tcx),\n-                ));\n-            }\n-        }\n-    }\n-\n     // Check that a function marked as `#[panic_handler]` has signature `fn(&PanicInfo) -> !`\n     if let Some(panic_impl_did) = tcx.lang_items().panic_impl() {\n         if panic_impl_did == hir.local_def_id(fn_id).to_def_id() {"}, {"sha": "cb7589318d2a7ff892de68fd2145ce125fc524bf", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -116,7 +116,6 @@ use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::WithConstness;\n use rustc_middle::ty::{self, RegionKind, Ty, TyCtxt, UserType};\n use rustc_session::config;\n use rustc_session::parse::feature_err;"}, {"sha": "4e07e52347a19325b20a0ccb503cb5c5cf990682", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 190, "deletions": 93, "changes": 283, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -97,8 +97,8 @@ mod variance;\n \n use rustc_errors::{struct_span_err, ErrorReported};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n-use rustc_hir::Node;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::middle;\n@@ -110,7 +110,7 @@ use rustc_span::{symbol::sym, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n-    ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt as _,\n+    self, ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt as _,\n };\n \n use std::iter;\n@@ -164,106 +164,203 @@ fn require_same_types<'tcx>(\n     })\n }\n \n-fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: LocalDefId) {\n-    let main_id = tcx.hir().local_def_id_to_hir_id(main_def_id);\n+fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n+    let main_fnsig = tcx.fn_sig(main_def_id);\n     let main_span = tcx.def_span(main_def_id);\n-    let main_t = tcx.type_of(main_def_id);\n-    match main_t.kind() {\n-        ty::FnDef(..) => {\n-            if let Some(Node::Item(it)) = tcx.hir().find(main_id) {\n-                if let hir::ItemKind::Fn(ref sig, ref generics, _) = it.kind {\n-                    let mut error = false;\n-                    if !generics.params.is_empty() {\n-                        let msg = \"`main` function is not allowed to have generic \\\n-                                   parameters\"\n-                            .to_owned();\n-                        let label = \"`main` cannot have generic parameters\".to_string();\n-                        struct_span_err!(tcx.sess, generics.span, E0131, \"{}\", msg)\n-                            .span_label(generics.span, label)\n-                            .emit();\n-                        error = true;\n-                    }\n-                    if let Some(sp) = generics.where_clause.span() {\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            sp,\n-                            E0646,\n-                            \"`main` function is not allowed to have a `where` clause\"\n-                        )\n-                        .span_label(sp, \"`main` cannot have a `where` clause\")\n-                        .emit();\n-                        error = true;\n-                    }\n-                    if let hir::IsAsync::Async = sig.header.asyncness {\n-                        let span = tcx.sess.source_map().guess_head_span(it.span);\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            span,\n-                            E0752,\n-                            \"`main` function is not allowed to be `async`\"\n-                        )\n-                        .span_label(span, \"`main` function is not allowed to be `async`\")\n-                        .emit();\n-                        error = true;\n-                    }\n \n-                    let attrs = tcx.hir().attrs(main_id);\n-                    for attr in attrs {\n-                        if tcx.sess.check_name(attr, sym::track_caller) {\n-                            tcx.sess\n-                                .struct_span_err(\n-                                    attr.span,\n-                                    \"`main` function is not allowed to be `#[track_caller]`\",\n-                                )\n-                                .span_label(\n-                                    main_span,\n-                                    \"`main` function is not allowed to be `#[track_caller]`\",\n-                                )\n-                                .emit();\n-                            error = true;\n-                        }\n-                    }\n+    fn main_fn_diagnostics_hir_id(tcx: TyCtxt<'_>, def_id: DefId, sp: Span) -> hir::HirId {\n+        if let Some(local_def_id) = def_id.as_local() {\n+            let hir_id = tcx.hir().local_def_id_to_hir_id(local_def_id);\n+            let hir_type = tcx.type_of(local_def_id);\n+            if !matches!(hir_type.kind(), ty::FnDef(..)) {\n+                span_bug!(sp, \"main has a non-function type: found `{}`\", hir_type);\n+            }\n+            hir_id\n+        } else {\n+            CRATE_HIR_ID\n+        }\n+    }\n \n-                    if error {\n-                        return;\n-                    }\n-                }\n+    fn main_fn_generics_params_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n+        if !def_id.is_local() {\n+            return None;\n+        }\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+        match tcx.hir().find(hir_id) {\n+            Some(Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, ref generics, _), .. })) => {\n+                let generics_param_span =\n+                    if !generics.params.is_empty() { Some(generics.span) } else { None };\n+                generics_param_span\n+            }\n+            _ => {\n+                span_bug!(tcx.def_span(def_id), \"main has a non-function type\");\n             }\n+        }\n+    }\n \n-            let actual = tcx.fn_sig(main_def_id);\n-            let expected_return_type = if tcx.lang_items().termination().is_some() {\n-                // we take the return type of the given main function, the real check is done\n-                // in `check_fn`\n-                actual.output()\n-            } else {\n-                // standard () main return type\n-                ty::Binder::dummy(tcx.mk_unit())\n-            };\n-\n-            let se_ty = tcx.mk_fn_ptr(expected_return_type.map_bound(|expected_return_type| {\n-                tcx.mk_fn_sig(\n-                    iter::empty(),\n-                    expected_return_type,\n-                    false,\n-                    hir::Unsafety::Normal,\n-                    Abi::Rust,\n-                )\n-            }));\n+    fn main_fn_where_clauses_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n+        if !def_id.is_local() {\n+            return None;\n+        }\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+        match tcx.hir().find(hir_id) {\n+            Some(Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, ref generics, _), .. })) => {\n+                generics.where_clause.span()\n+            }\n+            _ => {\n+                span_bug!(tcx.def_span(def_id), \"main has a non-function type\");\n+            }\n+        }\n+    }\n \n-            require_same_types(\n-                tcx,\n-                &ObligationCause::new(main_span, main_id, ObligationCauseCode::MainFunctionType),\n-                se_ty,\n-                tcx.mk_fn_ptr(actual),\n-            );\n+    fn main_fn_asyncness_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n+        if !def_id.is_local() {\n+            return None;\n         }\n-        _ => {\n-            span_bug!(main_span, \"main has a non-function type: found `{}`\", main_t);\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+        match tcx.hir().find(hir_id) {\n+            Some(Node::Item(hir::Item { span: item_span, .. })) => {\n+                Some(tcx.sess.source_map().guess_head_span(*item_span))\n+            }\n+            _ => {\n+                span_bug!(tcx.def_span(def_id), \"main has a non-function type\");\n+            }\n         }\n     }\n-}\n \n-fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: LocalDefId) {\n+    fn main_fn_return_type_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n+        if !def_id.is_local() {\n+            return None;\n+        }\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+        match tcx.hir().find(hir_id) {\n+            Some(Node::Item(hir::Item { kind: hir::ItemKind::Fn(ref fn_sig, _, _), .. })) => {\n+                Some(fn_sig.decl.output.span())\n+            }\n+            _ => {\n+                span_bug!(tcx.def_span(def_id), \"main has a non-function type\");\n+            }\n+        }\n+    }\n+\n+    let mut error = false;\n+    let main_diagnostics_hir_id = main_fn_diagnostics_hir_id(tcx, main_def_id, main_span);\n+    let main_fn_generics = tcx.generics_of(main_def_id);\n+    let main_fn_predicates = tcx.predicates_of(main_def_id);\n+    if main_fn_generics.count() != 0 || !main_fnsig.bound_vars().is_empty() {\n+        let generics_param_span = main_fn_generics_params_span(tcx, main_def_id);\n+        let msg = \"`main` function is not allowed to have generic \\\n+            parameters\";\n+        let mut diag =\n+            struct_span_err!(tcx.sess, generics_param_span.unwrap_or(main_span), E0131, \"{}\", msg);\n+        if let Some(generics_param_span) = generics_param_span {\n+            let label = \"`main` cannot have generic parameters\".to_string();\n+            diag.span_label(generics_param_span, label);\n+        }\n+        diag.emit();\n+        error = true;\n+    } else if !main_fn_predicates.predicates.is_empty() {\n+        // generics may bring in implicit predicates, so we skip this check if generics is present.\n+        let generics_where_clauses_span = main_fn_where_clauses_span(tcx, main_def_id);\n+        let mut diag = struct_span_err!(\n+            tcx.sess,\n+            generics_where_clauses_span.unwrap_or(main_span),\n+            E0646,\n+            \"`main` function is not allowed to have a `where` clause\"\n+        );\n+        if let Some(generics_where_clauses_span) = generics_where_clauses_span {\n+            diag.span_label(generics_where_clauses_span, \"`main` cannot have a `where` clause\");\n+        }\n+        diag.emit();\n+        error = true;\n+    }\n+\n+    let main_asyncness = tcx.asyncness(main_def_id);\n+    if let hir::IsAsync::Async = main_asyncness {\n+        let mut diag = struct_span_err!(\n+            tcx.sess,\n+            main_span,\n+            E0752,\n+            \"`main` function is not allowed to be `async`\"\n+        );\n+        let asyncness_span = main_fn_asyncness_span(tcx, main_def_id);\n+        if let Some(asyncness_span) = asyncness_span {\n+            diag.span_label(asyncness_span, \"`main` function is not allowed to be `async`\");\n+        }\n+        diag.emit();\n+        error = true;\n+    }\n+\n+    for attr in tcx.get_attrs(main_def_id) {\n+        if tcx.sess.check_name(attr, sym::track_caller) {\n+            tcx.sess\n+                .struct_span_err(\n+                    attr.span,\n+                    \"`main` function is not allowed to be `#[track_caller]`\",\n+                )\n+                .span_label(main_span, \"`main` function is not allowed to be `#[track_caller]`\")\n+                .emit();\n+            error = true;\n+        }\n+    }\n+\n+    if error {\n+        return;\n+    }\n+\n+    let expected_return_type;\n+    if let Some(term_id) = tcx.lang_items().termination() {\n+        let return_ty = main_fnsig.output();\n+        let return_ty_span = main_fn_return_type_span(tcx, main_def_id).unwrap_or(main_span);\n+        if !return_ty.bound_vars().is_empty() {\n+            let msg = \"`main` function return type is not allowed to have generic \\\n+                    parameters\"\n+                .to_owned();\n+            struct_span_err!(tcx.sess, return_ty_span, E0131, \"{}\", msg).emit();\n+            error = true;\n+        }\n+        let return_ty = return_ty.skip_binder();\n+        tcx.infer_ctxt().enter(|infcx| {\n+            let cause = traits::ObligationCause::new(\n+                return_ty_span,\n+                main_diagnostics_hir_id,\n+                ObligationCauseCode::MainFunctionType,\n+            );\n+            let mut fulfillment_cx = traits::FulfillmentContext::new();\n+            fulfillment_cx.register_bound(&infcx, ty::ParamEnv::empty(), return_ty, term_id, cause);\n+            if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n+                infcx.report_fulfillment_errors(&err, None, false);\n+                error = true;\n+            }\n+        });\n+        // now we can take the return type of the given main function\n+        expected_return_type = main_fnsig.output();\n+    } else {\n+        // standard () main return type\n+        expected_return_type = ty::Binder::dummy(tcx.mk_unit());\n+    }\n+\n+    if error {\n+        return;\n+    }\n+\n+    let se_ty = tcx.mk_fn_ptr(expected_return_type.map_bound(|expected_return_type| {\n+        tcx.mk_fn_sig(iter::empty(), expected_return_type, false, hir::Unsafety::Normal, Abi::Rust)\n+    }));\n+\n+    require_same_types(\n+        tcx,\n+        &ObligationCause::new(\n+            main_span,\n+            main_diagnostics_hir_id,\n+            ObligationCauseCode::MainFunctionType,\n+        ),\n+        se_ty,\n+        tcx.mk_fn_ptr(main_fnsig),\n+    );\n+}\n+fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n+    let start_def_id = start_def_id.expect_local();\n     let start_id = tcx.hir().local_def_id_to_hir_id(start_def_id);\n     let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);"}, {"sha": "7a67661a0197be9d46d8342d7a07995ad8753acd", "filename": "src/test/ui/async-await/issue-68523.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -2,6 +2,5 @@\n \n async fn main() -> Result<i32, ()> {\n //~^ ERROR `main` function is not allowed to be `async`\n-//~^^ ERROR `main` has invalid return type `impl Future`\n     Ok(1)\n }"}, {"sha": "dfdf078e303519b56b49323243f76dc93f64ea89", "filename": "src/test/ui/async-await/issue-68523.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68523.stderr?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -1,18 +1,9 @@\n-error[E0277]: `main` has invalid return type `impl Future`\n-  --> $DIR/issue-68523.rs:3:20\n-   |\n-LL | async fn main() -> Result<i32, ()> {\n-   |                    ^^^^^^^^^^^^^^^ `main` can only return types that implement `Termination`\n-   |\n-   = help: consider using `()`, or a `Result`\n-\n error[E0752]: `main` function is not allowed to be `async`\n   --> $DIR/issue-68523.rs:3:1\n    |\n LL | async fn main() -> Result<i32, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `main` function is not allowed to be `async`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0752.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0752`."}, {"sha": "cc7992a42c1878a246ca16ba7cd248b734aff877", "filename": "src/test/ui/entry-point/auxiliary/main_functions.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fauxiliary%2Fmain_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fauxiliary%2Fmain_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fauxiliary%2Fmain_functions.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1 @@\n+pub fn boilerplate() {}"}, {"sha": "2839688f34240e05fa14f5d1f428b2ffd82c3b3c", "filename": "src/test/ui/entry-point/imported_main_conflict.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_conflict.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,7 @@\n+#![feature(imported_main)]\n+//~^ ERROR `main` is ambiguous (glob import vs glob import in the same module)\n+mod m1 { pub(crate) fn main() {} }\n+mod m2 { pub(crate) fn main() {} }\n+\n+use m1::*;\n+use m2::*;"}, {"sha": "36cb98d94e69a23c898c77aa50e4fb2c78b4c726", "filename": "src/test/ui/entry-point/imported_main_conflict.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_conflict.stderr?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,18 @@\n+error[E0659]: `main` is ambiguous (glob import vs glob import in the same module)\n+   |\n+note: `main` could refer to the function imported here\n+  --> $DIR/imported_main_conflict.rs:6:5\n+   |\n+LL | use m1::*;\n+   |     ^^^^^\n+   = help: consider adding an explicit import of `main` to disambiguate\n+note: `main` could also refer to the function imported here\n+  --> $DIR/imported_main_conflict.rs:7:5\n+   |\n+LL | use m2::*;\n+   |     ^^^^^\n+   = help: consider adding an explicit import of `main` to disambiguate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "559f10de109815b0492d7548d75b95dfb3fac98d", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,12 @@\n+#![feature(imported_main)]\n+#![feature(min_type_alias_impl_trait, impl_trait_in_bindings)]\n+#![allow(incomplete_features)]\n+//~^^^ ERROR `main` function not found in crate\n+pub mod foo {\n+    type MainFn = impl Fn();\n+\n+    fn bar() {}\n+    pub const BAR: MainFn = bar;\n+}\n+\n+use foo::BAR as main;"}, {"sha": "9b879fc09f7290c3e06d97f0bb32dc3587c19ead", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,17 @@\n+error[E0601]: `main` function not found in crate `imported_main_const_fn_item_type_forbidden`\n+  --> $DIR/imported_main_const_fn_item_type_forbidden.rs:1:1\n+   |\n+LL | / #![feature(imported_main)]\n+LL | | #![feature(min_type_alias_impl_trait, impl_trait_in_bindings)]\n+LL | | #![allow(incomplete_features)]\n+LL | |\n+...  |\n+LL | |\n+LL | | use foo::BAR as main;\n+   | |_____----------------^ consider adding a `main` function to `$DIR/imported_main_const_fn_item_type_forbidden.rs`\n+   |       |\n+   |       non-function item at `crate::main` is found\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "989a6c97a8004cd191eb9a9793cda5f78a6215e4", "filename": "src/test/ui/entry-point/imported_main_const_forbidden.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_forbidden.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,7 @@\n+#![feature(imported_main)]\n+//~^ ERROR `main` function not found in crate\n+pub mod foo {\n+    pub const BAR: usize = 42;\n+}\n+\n+use foo::BAR as main;"}, {"sha": "4640513c2bb5f599f27822c932dec30926e82d6a", "filename": "src/test/ui/entry-point/imported_main_const_forbidden.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_forbidden.stderr?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,17 @@\n+error[E0601]: `main` function not found in crate `imported_main_const_forbidden`\n+  --> $DIR/imported_main_const_forbidden.rs:1:1\n+   |\n+LL | / #![feature(imported_main)]\n+LL | |\n+LL | | pub mod foo {\n+LL | |     pub const BAR: usize = 42;\n+LL | | }\n+LL | |\n+LL | | use foo::BAR as main;\n+   | |_____----------------^ consider adding a `main` function to `$DIR/imported_main_const_forbidden.rs`\n+   |       |\n+   |       non-function item at `crate::main` is found\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "6bbf67fa5408dcdd42f7df108770c68368a0e129", "filename": "src/test/ui/entry-point/imported_main_from_extern_crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,9 @@\n+// build-fail\n+// aux-build:main_functions.rs\n+\n+#![feature(imported_main)]\n+\n+extern crate main_functions;\n+pub use main_functions::boilerplate as main; //~ ERROR entry symbol `main` from foreign crate\n+\n+// FIXME: Should be run-pass"}, {"sha": "8792e1e414244b93d36c0c6d11ac8858959265d6", "filename": "src/test/ui/entry-point/imported_main_from_extern_crate.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.stderr?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,10 @@\n+error: entry symbol `main` from foreign crate is not yet supported.\n+  --> $DIR/imported_main_from_extern_crate.rs:7:9\n+   |\n+LL | pub use main_functions::boilerplate as main;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #28937 <https://github.com/rust-lang/rust/issues/28937> for more information\n+\n+error: aborting due to previous error\n+"}, {"sha": "45750072a7f689177a613e26a13b1d69cb34c461", "filename": "src/test/ui/entry-point/imported_main_from_inner_mod.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_inner_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_inner_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_inner_mod.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+#![feature(imported_main)]\n+\n+pub mod foo {\n+    pub fn bar() {\n+        println!(\"Hello world!\");\n+    }\n+}\n+use foo::bar as main;"}, {"sha": "4762fbb7c59cea7a8a157963086d3bad766643c6", "filename": "src/test/ui/entry-point/imported_main_unused_not_trigger_feature_gate.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_unused_not_trigger_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_unused_not_trigger_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_unused_not_trigger_feature_gate.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![feature(rustc_attrs)]\n+\n+#[rustc_main]\n+fn actual_main() {}\n+\n+mod foo {\n+    pub(crate) fn something() {}\n+}\n+\n+use foo::something as main;"}, {"sha": "b351d0d0e9a50a63d62ef55790497cc9adab9a23", "filename": "src/test/ui/feature-gates/feature-gate-imported_main.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-imported_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-imported_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-imported_main.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,6 @@\n+pub mod foo {\n+    pub fn bar() {\n+        println!(\"Hello world!\");\n+    }\n+}\n+use foo::bar as main; //~ ERROR using an imported function as entry point"}, {"sha": "3b879fdfc6bbfc8a8101f8f6a3f2b33c9f895b1e", "filename": "src/test/ui/feature-gates/feature-gate-imported_main.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-imported_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-imported_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-imported_main.stderr?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: using an imported function as entry point `main` is experimental\n+  --> $DIR/feature-gate-imported_main.rs:6:5\n+   |\n+LL | use foo::bar as main;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #28937 <https://github.com/rust-lang/rust/issues/28937> for more information\n+   = help: add `#![feature(imported_main)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "039878af56eb651dfd3967bd4ffe8ae06d73b13f", "filename": "src/test/ui/proc-macro/issue-59191-replace-root-with-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -3,6 +3,5 @@\n // Test that using a macro to replace the entire crate tree with a non-'mod' item errors out nicely.\n // `issue_59191::no_main` replaces whatever's passed in with `fn main() {}`.\n #![feature(custom_inner_attributes)]\n-//~^ ERROR `main` function not found in crate `issue_59191_replace_root_with_fn` [E0601]\n #![issue_59191::no_main]\n //~^ ERROR expected crate top-level item to be a module after macro expansion, found a function"}, {"sha": "579041c52598f0d39d2f89541d71c50b505237d4", "filename": "src/test/ui/proc-macro/issue-59191-replace-root-with-fn.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -1,19 +1,10 @@\n error: expected crate top-level item to be a module after macro expansion, found a function\n-  --> $DIR/issue-59191-replace-root-with-fn.rs:7:1\n+  --> $DIR/issue-59191-replace-root-with-fn.rs:6:1\n    |\n LL | #![issue_59191::no_main]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0601]: `main` function not found in crate `issue_59191_replace_root_with_fn`\n-  --> $DIR/issue-59191-replace-root-with-fn.rs:5:1\n-   |\n-LL | / #![feature(custom_inner_attributes)]\n-LL | |\n-LL | | #![issue_59191::no_main]\n-   | |________________________^ consider adding a `main` function to `$DIR/issue-59191-replace-root-with-fn.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "e81a92eb74ca7c74afd2bb56aed669ec8a9cadb1", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd696d722c04a0f8c34d884aa4ed2322f55cdd8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=bcd696d722c04a0f8c34d884aa4ed2322f55cdd8", "patch": "@@ -678,7 +678,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     cx.tcx\n         .entry_fn(LOCAL_CRATE)\n-        .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id.to_def_id())\n+        .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id)\n }\n \n /// Returns `true` if the expression is in the program's `#[panic_handler]`."}]}