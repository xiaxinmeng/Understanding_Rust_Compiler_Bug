{"sha": "86a4d4cb9c526e095985cc26668c4ed653941fc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YTRkNGNiOWM1MjZlMDk1OTg1Y2MyNjY2OGM0ZWQ2NTM5NDFmYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T17:23:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T17:23:52Z"}, "message": "Simplify", "tree": {"sha": "8f1df365021178ccfdfe0d52c48852ee171c5a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f1df365021178ccfdfe0d52c48852ee171c5a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86a4d4cb9c526e095985cc26668c4ed653941fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86a4d4cb9c526e095985cc26668c4ed653941fc2", "html_url": "https://github.com/rust-lang/rust/commit/86a4d4cb9c526e095985cc26668c4ed653941fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86a4d4cb9c526e095985cc26668c4ed653941fc2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dba11cb060f3632a590a4f9c585d58218f17cced", "url": "https://api.github.com/repos/rust-lang/rust/commits/dba11cb060f3632a590a4f9c585d58218f17cced", "html_url": "https://github.com/rust-lang/rust/commit/dba11cb060f3632a590a4f9c585d58218f17cced"}], "stats": {"total": 100, "additions": 43, "deletions": 57}, "files": [{"sha": "03b373deeaac603e6a3490a81b0b20adef3c544c", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/86a4d4cb9c526e095985cc26668c4ed653941fc2/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a4d4cb9c526e095985cc26668c4ed653941fc2/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=86a4d4cb9c526e095985cc26668c4ed653941fc2", "patch": "@@ -1,5 +1,5 @@\n //! A visitor for downcasting arbitrary request (JSON) into a specific type.\n-use std::{panic, time::Instant};\n+use std::panic;\n \n use serde::{de::DeserializeOwned, Serialize};\n \n@@ -13,7 +13,6 @@ use crate::{\n pub(crate) struct RequestDispatcher<'a> {\n     pub(crate) req: Option<lsp_server::Request>,\n     pub(crate) global_state: &'a mut GlobalState,\n-    pub(crate) request_received: Instant,\n }\n \n impl<'a> RequestDispatcher<'a> {\n@@ -34,12 +33,12 @@ impl<'a> RequestDispatcher<'a> {\n             }\n         };\n         let world = panic::AssertUnwindSafe(&mut *self.global_state);\n-        let task = panic::catch_unwind(move || {\n+        let response = panic::catch_unwind(move || {\n             let result = f(world.0, params);\n-            result_to_task::<R>(id, result)\n+            result_to_response::<R>(id, result)\n         })\n         .map_err(|_| format!(\"sync task {:?} panicked\", R::METHOD))?;\n-        self.global_state.on_task(task);\n+        self.global_state.respond(response);\n         Ok(self)\n     }\n \n@@ -64,25 +63,22 @@ impl<'a> RequestDispatcher<'a> {\n             let world = self.global_state.snapshot();\n             move || {\n                 let result = f(world, params);\n-                result_to_task::<R>(id, result)\n+                Task::Response(result_to_response::<R>(id, result))\n             }\n         });\n \n         Ok(self)\n     }\n \n     pub(crate) fn finish(&mut self) {\n-        match self.req.take() {\n-            None => (),\n-            Some(req) => {\n-                log::error!(\"unknown request: {:?}\", req);\n-                let resp = lsp_server::Response::new_err(\n-                    req.id,\n-                    lsp_server::ErrorCode::MethodNotFound as i32,\n-                    \"unknown request\".to_string(),\n-                );\n-                self.global_state.send(resp.into());\n-            }\n+        if let Some(req) = self.req.take() {\n+            log::error!(\"unknown request: {:?}\", req);\n+            let response = lsp_server::Response::new_err(\n+                req.id,\n+                lsp_server::ErrorCode::MethodNotFound as i32,\n+                \"unknown request\".to_string(),\n+            );\n+            self.global_state.respond(response)\n         }\n     }\n \n@@ -99,21 +95,20 @@ impl<'a> RequestDispatcher<'a> {\n                 return None;\n             }\n         };\n-        self.global_state\n-            .req_queue\n-            .incoming\n-            .register(id.clone(), (R::METHOD, self.request_received));\n         Some((id, params))\n     }\n }\n \n-fn result_to_task<R>(id: lsp_server::RequestId, result: Result<R::Result>) -> Task\n+fn result_to_response<R>(\n+    id: lsp_server::RequestId,\n+    result: Result<R::Result>,\n+) -> lsp_server::Response\n where\n     R: lsp_types::request::Request + 'static,\n     R::Params: DeserializeOwned + 'static,\n     R::Result: Serialize + 'static,\n {\n-    let response = match result {\n+    match result {\n         Ok(resp) => lsp_server::Response::new_ok(id, &resp),\n         Err(e) => match e.downcast::<LspError>() {\n             Ok(lsp_error) => lsp_server::Response::new_err(id, lsp_error.code, lsp_error.message),\n@@ -133,8 +128,7 @@ where\n                 }\n             }\n         },\n-    };\n-    Task::Respond(response)\n+    }\n }\n \n pub(crate) struct NotificationDispatcher<'a> {"}, {"sha": "149b1b5f972e0f9b95721fb06430fb26b1b73778", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86a4d4cb9c526e095985cc26668c4ed653941fc2/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a4d4cb9c526e095985cc26668c4ed653941fc2/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=86a4d4cb9c526e095985cc26668c4ed653941fc2", "patch": "@@ -253,13 +253,19 @@ impl GlobalState {\n         self.analysis_host.collect_garbage()\n     }\n \n-    pub(crate) fn complete_request(&mut self, request: RequestMetrics) {\n-        self.latest_requests.write().record(request)\n-    }\n-\n     pub(crate) fn send(&mut self, message: lsp_server::Message) {\n         self.sender.send(message).unwrap()\n     }\n+    pub(crate) fn respond(&mut self, response: lsp_server::Response) {\n+        if let Some((method, start)) = self.req_queue.incoming.complete(response.id.clone()) {\n+            let duration = start.elapsed();\n+            log::info!(\"handled req#{} in {:?}\", response.id, duration);\n+            let metrics =\n+                RequestMetrics { id: response.id.clone(), method: method.to_string(), duration };\n+            self.latest_requests.write().record(metrics);\n+            self.send(response.into());\n+        }\n+    }\n     pub(crate) fn show_message(&mut self, typ: lsp_types::MessageType, message: String) {\n         show_message(typ, message, &self.sender)\n     }"}, {"sha": "76dea3e22114fd7d1eb2f25e8e7791a0b79b8ff8", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/86a4d4cb9c526e095985cc26668c4ed653941fc2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a4d4cb9c526e095985cc26668c4ed653941fc2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=86a4d4cb9c526e095985cc26668c4ed653941fc2", "patch": "@@ -23,7 +23,6 @@ use crate::{\n     lsp_utils::{\n         apply_document_changes, is_canceled, notification_is, notification_new, show_message,\n     },\n-    request_metrics::RequestMetrics,\n     Result,\n };\n \n@@ -147,7 +146,7 @@ impl fmt::Debug for Event {\n                     return debug_verbose_not(not, f);\n                 }\n             }\n-            Event::Task(Task::Respond(resp)) => {\n+            Event::Task(Task::Response(resp)) => {\n                 return f\n                     .debug_struct(\"Response\")\n                     .field(\"id\", &resp.id)\n@@ -218,7 +217,13 @@ impl GlobalState {\n                 }\n             },\n             Event::Task(task) => {\n-                self.on_task(task);\n+                match task {\n+                    Task::Response(response) => self.respond(response),\n+                    Task::Diagnostics(tasks) => {\n+                        tasks.into_iter().for_each(|task| on_diagnostic_task(task, self))\n+                    }\n+                    Task::Unit => (),\n+                }\n                 self.maybe_collect_garbage();\n             }\n             Event::Vfs(task) => match task {\n@@ -331,7 +336,9 @@ impl GlobalState {\n     }\n \n     fn on_request(&mut self, request_received: Instant, req: Request) -> Result<()> {\n-        RequestDispatcher { req: Some(req), global_state: self, request_received }\n+        self.req_queue.incoming.register(req.id.clone(), (req.method.clone(), request_received));\n+\n+        RequestDispatcher { req: Some(req), global_state: self }\n             .on_sync::<lsp_ext::CollectGarbage>(|s, ()| Ok(s.collect_garbage()))?\n             .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?\n             .on_sync::<lsp_ext::OnEnter>(|s, p| handlers::handle_on_enter(s.snapshot(), p))?\n@@ -492,27 +499,6 @@ impl GlobalState {\n             .finish();\n         Ok(())\n     }\n-    pub(crate) fn on_task(&mut self, task: Task) {\n-        match task {\n-            Task::Respond(response) => {\n-                if let Some((method, start)) = self.req_queue.incoming.complete(response.id.clone())\n-                {\n-                    let duration = start.elapsed();\n-                    log::info!(\"handled req#{} in {:?}\", response.id, duration);\n-                    self.complete_request(RequestMetrics {\n-                        id: response.id.clone(),\n-                        method: method.to_string(),\n-                        duration,\n-                    });\n-                    self.send(response.into());\n-                }\n-            }\n-            Task::Diagnostics(tasks) => {\n-                tasks.into_iter().for_each(|task| on_diagnostic_task(task, self))\n-            }\n-            Task::Unit => (),\n-        }\n-    }\n     fn update_file_notifications_on_threadpool(&mut self, subscriptions: Vec<FileId>) {\n         log::trace!(\"updating notifications for {:?}\", subscriptions);\n         if self.config.publish_diagnostics {\n@@ -548,13 +534,13 @@ impl GlobalState {\n \n #[derive(Debug)]\n pub(crate) enum Task {\n-    Respond(Response),\n-    Diagnostics(Vec<DiagnosticTask>),\n+    Response(Response),\n+    Diagnostics(()),\n     Unit,\n }\n \n pub(crate) type ReqHandler = fn(&mut GlobalState, Response);\n-pub(crate) type ReqQueue = lsp_server::ReqQueue<(&'static str, Instant), ReqHandler>;\n+pub(crate) type ReqQueue = lsp_server::ReqQueue<(String, Instant), ReqHandler>;\n const DO_NOTHING: ReqHandler = |_, _| ();\n \n fn on_diagnostic_task(task: DiagnosticTask, global_state: &mut GlobalState) {"}]}