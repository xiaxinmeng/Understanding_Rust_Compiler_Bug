{"sha": "25a58af0640807a27b15e45c1af3a246a473a196", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YTU4YWYwNjQwODA3YTI3YjE1ZTQ1YzFhZjNhMjQ2YTQ3M2ExOTY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-09T13:42:43Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-08-09T13:42:43Z"}, "message": "A few cleanups for rustc_target", "tree": {"sha": "78a8c52031ccaea6631e3f294b771e7e6f8c5f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78a8c52031ccaea6631e3f294b771e7e6f8c5f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25a58af0640807a27b15e45c1af3a246a473a196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25a58af0640807a27b15e45c1af3a246a473a196", "html_url": "https://github.com/rust-lang/rust/commit/25a58af0640807a27b15e45c1af3a246a473a196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25a58af0640807a27b15e45c1af3a246a473a196/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b69a604ee0d70be1edfa2828c769dc1b148d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b69a604ee0d70be1edfa2828c769dc1b148d13", "html_url": "https://github.com/rust-lang/rust/commit/76b69a604ee0d70be1edfa2828c769dc1b148d13"}], "stats": {"total": 96, "additions": 46, "deletions": 50}, "files": [{"sha": "8e2dd99696e176d3e78c1833cdce0ef1189a7bea", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=25a58af0640807a27b15e45c1af3a246a473a196", "patch": "@@ -145,7 +145,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n     // Extract first 8 chunks as the prefix\n     let rest_size = size - Size::from_bytes(8) * prefix_index as u64;\n     arg.cast_to(CastTarget {\n-        prefix: prefix,\n+        prefix,\n         prefix_chunk: Size::from_bytes(8),\n         rest: Uniform { unit: Reg::i64(), total: rest_size }\n     });"}, {"sha": "af874b1035b89a81cb2e265faf25bdcf65a27b45", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=25a58af0640807a27b15e45c1af3a246a473a196", "patch": "@@ -90,7 +90,7 @@ impl ArgAttributes {\n     }\n \n     pub fn set(&mut self, attr: ArgAttribute) -> &mut Self {\n-        self.regular = self.regular | attr;\n+        self.regular |= attr;\n         self\n     }\n \n@@ -229,7 +229,7 @@ impl CastTarget {\n \n     pub fn align<C: HasDataLayout>(&self, cx: C) -> Align {\n         self.prefix.iter()\n-            .filter_map(|x| x.map(|kind| Reg { kind: kind, size: self.prefix_chunk }.align(cx)))\n+            .filter_map(|x| x.map(|kind| Reg { kind, size: self.prefix_chunk }.align(cx)))\n             .fold(cx.data_layout().aggregate_align.max(self.rest.align(cx)),\n                 |acc, align| acc.max(align))\n     }"}, {"sha": "eade086ec48eca0bfba54a6fecd70f8fab072476", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=25a58af0640807a27b15e45c1af3a246a473a196", "patch": "@@ -199,10 +199,8 @@ pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n                         _ => {}\n                     }\n                 }\n-                if arg.layout.is_aggregate() {\n-                    if int_regs < needed_int || sse_regs < needed_sse {\n-                        cls_or_mem = Err(Memory);\n-                    }\n+                if arg.layout.is_aggregate() && (int_regs < needed_int || sse_regs < needed_sse) {\n+                    cls_or_mem = Err(Memory);\n                 }\n             }\n         }"}, {"sha": "4f25360d8eae226685c68817e472596c42019968", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=25a58af0640807a27b15e45c1af3a246a473a196", "patch": "@@ -93,17 +93,17 @@ impl TargetDataLayout {\n         let mut dl = TargetDataLayout::default();\n         let mut i128_align_src = 64;\n         for spec in target.data_layout.split('-') {\n-            match &spec.split(':').collect::<Vec<_>>()[..] {\n-                &[\"e\"] => dl.endian = Endian::Little,\n-                &[\"E\"] => dl.endian = Endian::Big,\n-                &[\"a\", ref a..] => dl.aggregate_align = align(a, \"a\")?,\n-                &[\"f32\", ref a..] => dl.f32_align = align(a, \"f32\")?,\n-                &[\"f64\", ref a..] => dl.f64_align = align(a, \"f64\")?,\n-                &[p @ \"p\", s, ref a..] | &[p @ \"p0\", s, ref a..] => {\n+            match spec.split(':').collect::<Vec<_>>()[..] {\n+                [\"e\"] => dl.endian = Endian::Little,\n+                [\"E\"] => dl.endian = Endian::Big,\n+                [\"a\", ref a..] => dl.aggregate_align = align(a, \"a\")?,\n+                [\"f32\", ref a..] => dl.f32_align = align(a, \"f32\")?,\n+                [\"f64\", ref a..] => dl.f64_align = align(a, \"f64\")?,\n+                [p @ \"p\", s, ref a..] | [p @ \"p0\", s, ref a..] => {\n                     dl.pointer_size = size(s, p)?;\n                     dl.pointer_align = align(a, p)?;\n                 }\n-                &[s, ref a..] if s.starts_with(\"i\") => {\n+                [s, ref a..] if s.starts_with(\"i\") => {\n                     let bits = match s[1..].parse::<u64>() {\n                         Ok(bits) => bits,\n                         Err(_) => {\n@@ -127,7 +127,7 @@ impl TargetDataLayout {\n                         dl.i128_align = a;\n                     }\n                 }\n-                &[s, ref a..] if s.starts_with(\"v\") => {\n+                [s, ref a..] if s.starts_with(\"v\") => {\n                     let v_size = size(&s[1..], \"v\")?;\n                     let a = align(a, s)?;\n                     if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {\n@@ -429,8 +429,8 @@ pub enum Integer {\n }\n \n impl Integer {\n-    pub fn size(&self) -> Size {\n-        match *self {\n+    pub fn size(self) -> Size {\n+        match self {\n             I8 => Size::from_bytes(1),\n             I16 => Size::from_bytes(2),\n             I32 => Size::from_bytes(4),\n@@ -439,10 +439,10 @@ impl Integer {\n         }\n     }\n \n-    pub fn align<C: HasDataLayout>(&self, cx: C) -> Align {\n+    pub fn align<C: HasDataLayout>(self, cx: C) -> Align {\n         let dl = cx.data_layout();\n \n-        match *self {\n+        match self {\n             I8 => dl.i8_align,\n             I16 => dl.i16_align,\n             I32 => dl.i32_align,\n@@ -522,15 +522,15 @@ impl fmt::Display for FloatTy {\n }\n \n impl FloatTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n+    pub fn ty_to_string(self) -> &'static str {\n+        match self {\n             FloatTy::F32 => \"f32\",\n             FloatTy::F64 => \"f64\",\n         }\n     }\n \n-    pub fn bit_width(&self) -> usize {\n-        match *self {\n+    pub fn bit_width(self) -> usize {\n+        match self {\n             FloatTy::F32 => 32,\n             FloatTy::F64 => 64,\n         }"}, {"sha": "6d8c8eb19f057c25a87815f7c17655446309f4a1", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=25a58af0640807a27b15e45c1af3a246a473a196", "patch": "@@ -51,7 +51,7 @@ pub struct AbiData {\n }\n \n #[allow(non_upper_case_globals)]\n-const AbiDatas: &'static [AbiData] = &[\n+const AbiDatas: &[AbiData] = &[\n     // Platform-specific ABIs\n     AbiData {abi: Abi::Cdecl, name: \"cdecl\", generic: false },\n     AbiData {abi: Abi::Stdcall, name: \"stdcall\", generic: false },\n@@ -87,20 +87,20 @@ pub fn all_names() -> Vec<&'static str> {\n \n impl Abi {\n     #[inline]\n-    pub fn index(&self) -> usize {\n-        *self as usize\n+    pub fn index(self) -> usize {\n+        self as usize\n     }\n \n     #[inline]\n-    pub fn data(&self) -> &'static AbiData {\n+    pub fn data(self) -> &'static AbiData {\n         &AbiDatas[self.index()]\n     }\n \n-    pub fn name(&self) -> &'static str {\n+    pub fn name(self) -> &'static str {\n         self.data().name\n     }\n \n-    pub fn generic(&self) -> bool {\n+    pub fn generic(self) -> bool {\n         self.data().generic\n     }\n }"}, {"sha": "38b3f2528fe8694bb922d8657760173a935444e7", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=25a58af0640807a27b15e45c1af3a246a473a196", "patch": "@@ -26,7 +26,7 @@ pub fn opts() -> TargetOptions {\n     // TLS is flagged as enabled if it looks to be supported.\n     let deployment_target = env::var(\"MACOSX_DEPLOYMENT_TARGET\").ok();\n     let version = deployment_target.as_ref().and_then(|s| {\n-        let mut i = s.splitn(2, \".\");\n+        let mut i = s.splitn(2, '.');\n         i.next().and_then(|a| i.next().map(|b| (a, b)))\n     }).and_then(|(a, b)| {\n         a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok()"}, {"sha": "296eaca7c7df013dac7c7cd23cf7cc6a74a2484a", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=25a58af0640807a27b15e45c1af3a246a473a196", "patch": "@@ -25,13 +25,13 @@ pub enum Arch {\n }\n \n impl Arch {\n-    pub fn to_string(&self) -> &'static str {\n+    pub fn to_string(self) -> &'static str {\n         match self {\n-            &Armv7 => \"armv7\",\n-            &Armv7s => \"armv7s\",\n-            &Arm64 => \"arm64\",\n-            &I386 => \"i386\",\n-            &X86_64 => \"x86_64\"\n+            Armv7 => \"armv7\",\n+            Armv7s => \"armv7s\",\n+            Arm64 => \"arm64\",\n+            I386 => \"i386\",\n+            X86_64 => \"x86_64\"\n         }\n     }\n }"}, {"sha": "4945784659517b63537ed5d85ac08b9cb9edf120", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a58af0640807a27b15e45c1af3a246a473a196/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=25a58af0640807a27b15e45c1af3a246a473a196", "patch": "@@ -747,7 +747,7 @@ impl Target {\n     /// Maximum integer size in bits that this target can perform atomic\n     /// operations on.\n     pub fn max_atomic_width(&self) -> u64 {\n-        self.options.max_atomic_width.unwrap_or(self.target_pointer_width.parse().unwrap())\n+        self.options.max_atomic_width.unwrap_or_else(|| self.target_pointer_width.parse().unwrap())\n     }\n \n     pub fn is_abi_supported(&self, abi: Abi) -> bool {\n@@ -777,7 +777,7 @@ impl Target {\n         let get_opt_field = |name: &str, default: &str| {\n             obj.find(name).and_then(|s| s.as_string())\n                .map(|s| s.to_string())\n-               .unwrap_or(default.to_string())\n+               .unwrap_or_else(|| default.to_string())\n         };\n \n         let mut base = Target {\n@@ -1007,7 +1007,6 @@ impl Target {\n     /// filesystem access and JSON decoding.\n     pub fn search(target_triple: &TargetTriple) -> Result<Target, String> {\n         use std::env;\n-        use std::ffi::OsString;\n         use std::fs;\n         use serialize::json;\n \n@@ -1018,8 +1017,8 @@ impl Target {\n             Target::from_json(obj)\n         }\n \n-        match target_triple {\n-            &TargetTriple::TargetTriple(ref target_triple) => {\n+        match *target_triple {\n+            TargetTriple::TargetTriple(ref target_triple) => {\n                 // check if triple is in list of supported targets\n                 if let Ok(t) = load_specific(target_triple) {\n                     return Ok(t)\n@@ -1032,8 +1031,7 @@ impl Target {\n                     PathBuf::from(target)\n                 };\n \n-                let target_path = env::var_os(\"RUST_TARGET_PATH\")\n-                                    .unwrap_or(OsString::new());\n+                let target_path = env::var_os(\"RUST_TARGET_PATH\").unwrap_or_default();\n \n                 // FIXME 16351: add a sane default search path?\n \n@@ -1045,7 +1043,7 @@ impl Target {\n                 }\n                 Err(format!(\"Could not find specification for target {:?}\", target_triple))\n             }\n-            &TargetTriple::TargetPath(ref target_path) => {\n+            TargetTriple::TargetPath(ref target_path) => {\n                 if target_path.is_file() {\n                     return load_file(&target_path);\n                 }\n@@ -1190,7 +1188,7 @@ impl ToJson for Target {\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()\n-                .map(Abi::name).map(|name| name.to_json())\n+                .map(|&name| Abi::name(name).to_json())\n                 .collect::<Vec<_>>().to_json());\n         }\n \n@@ -1229,9 +1227,9 @@ impl TargetTriple {\n     ///\n     /// If this target is a path, the file name (without extension) is returned.\n     pub fn triple(&self) -> &str {\n-        match self {\n-            &TargetTriple::TargetTriple(ref triple) => triple,\n-            &TargetTriple::TargetPath(ref path) => {\n+        match *self {\n+            TargetTriple::TargetTriple(ref triple) => triple,\n+            TargetTriple::TargetPath(ref path) => {\n                 path.file_stem().expect(\"target path must not be empty\").to_str()\n                     .expect(\"target path must be valid unicode\")\n             }\n@@ -1247,7 +1245,7 @@ impl TargetTriple {\n         use std::collections::hash_map::DefaultHasher;\n \n         let triple = self.triple();\n-        if let &TargetTriple::TargetPath(ref path) = self {\n+        if let TargetTriple::TargetPath(ref path) = *self {\n             let mut hasher = DefaultHasher::new();\n             path.hash(&mut hasher);\n             let hash = hasher.finish();"}]}