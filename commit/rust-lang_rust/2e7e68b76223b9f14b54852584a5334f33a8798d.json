{"sha": "2e7e68b76223b9f14b54852584a5334f33a8798d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlN2U2OGI3NjIyM2I5ZjE0YjU0ODUyNTg0YTUzMzRmMzNhODc5OGQ=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-03-05T18:58:54Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-03-05T18:58:54Z"}, "message": "while let all the things", "tree": {"sha": "6528892728b7d6aba50eb724542c09804fac5586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6528892728b7d6aba50eb724542c09804fac5586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e7e68b76223b9f14b54852584a5334f33a8798d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7e68b76223b9f14b54852584a5334f33a8798d", "html_url": "https://github.com/rust-lang/rust/commit/2e7e68b76223b9f14b54852584a5334f33a8798d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e7e68b76223b9f14b54852584a5334f33a8798d/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2746d870017c869b84fc56ecd63f5e4f9646c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2746d870017c869b84fc56ecd63f5e4f9646c96", "html_url": "https://github.com/rust-lang/rust/commit/e2746d870017c869b84fc56ecd63f5e4f9646c96"}], "stats": {"total": 70, "additions": 20, "deletions": 50}, "files": [{"sha": "d91aa3a385193b25924e54f18c7fae9037c212af", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=2e7e68b76223b9f14b54852584a5334f33a8798d", "patch": "@@ -2208,13 +2208,8 @@ impl<'a> State<'a> {\n         if self.next_comment().is_none() {\n             self.s.hardbreak()?;\n         }\n-        loop {\n-            match self.next_comment() {\n-                Some(ref cmnt) => {\n-                    self.print_comment(cmnt)?;\n-                }\n-                _ => break,\n-            }\n+        while let Some(ref cmnt) = self.next_comment() {\n+            self.print_comment(cmnt)?\n         }\n         Ok(())\n     }"}, {"sha": "5658b5b6832915ce29946bdb96fe9b85364c2122", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=2e7e68b76223b9f14b54852584a5334f33a8798d", "patch": "@@ -206,11 +206,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     // Step 2: Mark all symbols that the symbols on the worklist touch.\n     fn propagate(&mut self) {\n         let mut scanned = FxHashSet();\n-        loop {\n-            let search_item = match self.worklist.pop() {\n-                Some(item) => item,\n-                None => break,\n-            };\n+        while let Some(search_item) = self.worklist.pop() {\n             if !scanned.insert(search_item) {\n                 continue\n             }"}, {"sha": "42a17d33fa6f5c795562c783cd5bacd882e3f666", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=2e7e68b76223b9f14b54852584a5334f33a8798d", "patch": "@@ -415,13 +415,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n         }\n \n-        loop {\n-            // non-standard `while let` to bypass #6393\n-            let i = match error_stack.pop() {\n-                Some(i) => i,\n-                None => break\n-            };\n-\n+        while let Some(i) = error_stack.pop() {\n             let node = &self.nodes[i];\n \n             match node.state.get() {"}, {"sha": "9fff8b91f96f32f155f8f9378e515e785ee56b1e", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=2e7e68b76223b9f14b54852584a5334f33a8798d", "patch": "@@ -428,20 +428,15 @@ impl fmt::Debug for Wtf8 {\n \n         formatter.write_str(\"\\\"\")?;\n         let mut pos = 0;\n-        loop {\n-            match self.next_surrogate(pos) {\n-                None => break,\n-                Some((surrogate_pos, surrogate)) => {\n-                    write_str_escaped(\n-                        formatter,\n-                        unsafe { str::from_utf8_unchecked(\n-                            &self.bytes[pos .. surrogate_pos]\n-                        )},\n-                    )?;\n-                    write!(formatter, \"\\\\u{{{:x}}}\", surrogate)?;\n-                    pos = surrogate_pos + 3;\n-                }\n-            }\n+        while let Some((surrogate_pos, surrogate)) = self.next_surrogate(pos) {\n+            write_str_escaped(\n+                formatter,\n+                unsafe { str::from_utf8_unchecked(\n+                    &self.bytes[pos .. surrogate_pos]\n+                )},\n+            )?;\n+            write!(formatter, \"\\\\u{{{:x}}}\", surrogate)?;\n+            pos = surrogate_pos + 3;\n         }\n         write_str_escaped(\n             formatter,"}, {"sha": "8fd95aa1ca8612c40e47e63b7298050969c4c0e1", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=2e7e68b76223b9f14b54852584a5334f33a8798d", "patch": "@@ -732,18 +732,13 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     let mut parser = parse::Parser::new(fmt_str);\n     let mut pieces = vec![];\n \n-    loop {\n-        match parser.next() {\n-            Some(mut piece) => {\n-                if !parser.errors.is_empty() {\n-                    break;\n-                }\n-                cx.verify_piece(&piece);\n-                cx.resolve_name_inplace(&mut piece);\n-                pieces.push(piece);\n-            }\n-            None => break,\n+    while let Some(mut piece) = parser.next() {\n+        if !parser.errors.is_empty() {\n+            break;\n         }\n+        cx.verify_piece(&piece);\n+        cx.resolve_name_inplace(&mut piece);\n+        pieces.push(piece);\n     }\n \n     let numbered_position_args = pieces.iter().any(|arg: &parse::Piece| {"}, {"sha": "ed9eb5d5c9261fb6d0a313fc2c723e633b77a7f6", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e68b76223b9f14b54852584a5334f33a8798d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=2e7e68b76223b9f14b54852584a5334f33a8798d", "patch": "@@ -322,12 +322,7 @@ impl Span {\n     pub fn macro_backtrace(mut self) -> Vec<MacroBacktrace> {\n         let mut prev_span = DUMMY_SP;\n         let mut result = vec![];\n-        loop {\n-            let info = match self.ctxt().outer().expn_info() {\n-                Some(info) => info,\n-                None => break,\n-            };\n-\n+        while let Some(info) = self.ctxt().outer().expn_info() {\n             let (pre, post) = match info.callee.format {\n                 ExpnFormat::MacroAttribute(..) => (\"#[\", \"]\"),\n                 ExpnFormat::MacroBang(..) => (\"\", \"!\"),"}]}