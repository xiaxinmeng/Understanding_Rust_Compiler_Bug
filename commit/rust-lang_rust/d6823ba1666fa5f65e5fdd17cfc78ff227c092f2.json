{"sha": "d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ODIzYmExNjY2ZmE1ZjY1ZTVmZGQxN2NmYzc4ZmYyMjdjMDkyZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-04T06:32:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-04T06:32:49Z"}, "message": "Auto merge of #71108 - estebank:suggest-proj-type-mismatch-constraint, r=oli-obk\n\nOn type mismatch involving associated type, suggest constraint\n\nWhen an associated type is found when a specific type was expected, if\npossible provide a structured suggestion constraining the associated\ntype in a bound.\n\n```\nerror[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n  --> $DIR/associated-types-multiple-types-one-trait.rs:13:5\n   |\nLL |     want_y(t);\n   |     ^^^^^^ expected `i32`, found associated type\n...\nLL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n   |                 ----- required by this bound in `want_y`\n   |\n   = note:         expected type `i32`\n           found associated type `<T as Foo>::Y`\nhelp: consider constraining the associated type `<T as Foo>::Y` to `i32`\n   |\nLL | fn have_x_want_y<T:Foo<X=u32, Y = i32>>(t: &T)\n   |                             ^^^^^^^^^\n```\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/trait-with-missing-associated-type-restriction.rs:12:9\n   |\nLL |     qux(x.func())\n   |         ^^^^^^^^ expected `usize`, found associated type\n   |\n   = note:         expected type `usize`\n           found associated type `<impl Trait as Trait>::A`\nhelp: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n   |\nLL | fn foo(x: impl Trait<A = usize>) {\n   |                     ^^^^^^^^^^\n```\n\nFix #71035. Related to #70908.", "tree": {"sha": "ff83906186e0ccc897fc117fd332296249a83e65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff83906186e0ccc897fc117fd332296249a83e65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "html_url": "https://github.com/rust-lang/rust/commit/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4df04799c406c8149a041c3163321758aac924", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4df04799c406c8149a041c3163321758aac924", "html_url": "https://github.com/rust-lang/rust/commit/ff4df04799c406c8149a041c3163321758aac924"}, {"sha": "b368229d9bbaa840e777d33e36e649967e7ecb04", "url": "https://api.github.com/repos/rust-lang/rust/commits/b368229d9bbaa840e777d33e36e649967e7ecb04", "html_url": "https://github.com/rust-lang/rust/commit/b368229d9bbaa840e777d33e36e649967e7ecb04"}], "stats": {"total": 995, "additions": 859, "deletions": 136}, "files": [{"sha": "a8d6c01785ff9ae27540c45c394bf223f4221a34", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -1388,6 +1388,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         terr: &TypeError<'tcx>,\n     ) {\n         let span = cause.span(self.tcx);\n+        debug!(\"note_type_err cause={:?} values={:?}, terr={:?}\", cause, values, terr);\n \n         // For some types of errors, expected-found does not make\n         // sense, so just ignore the values we were given.\n@@ -1599,11 +1600,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n             });\n         self.check_and_note_conflicting_crates(diag, terr);\n-        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id.to_def_id());\n+        self.tcx.note_and_explain_type_err(diag, terr, cause, span, body_owner_def_id.to_def_id());\n \n         // It reads better to have the error origin as the final\n         // thing.\n-        self.note_error_origin(diag, &cause, exp_found);\n+        self.note_error_origin(diag, cause, exp_found);\n     }\n \n     /// When encountering a case where `.as_ref()` on a `Result` or `Option` would be appropriate,"}, {"sha": "3a05d577bfa7e9f792e83c6027d93cf9bb6e3f18", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -193,6 +193,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     DerivedObligation(DerivedObligationCause<'tcx>),\n \n+    /// Error derived when matching traits/impls; see ObligationCause for more details\n+    CompareImplConstObligation,\n+\n     /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n         item_name: ast::Name,"}, {"sha": "668c84ad5e6df09703ce467403d249f9a1e47e45", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -164,6 +164,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 tcx.lift(cause).map(super::ImplDerivedObligation)\n             }\n             super::DerivedObligation(ref cause) => tcx.lift(cause).map(super::DerivedObligation),\n+            super::CompareImplConstObligation => Some(super::CompareImplConstObligation),\n             super::CompareImplMethodObligation {\n                 item_name,\n                 impl_item_def_id,"}, {"sha": "4e1a8b0e92f13150b3ad585886496707633de077", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 391, "deletions": 38, "changes": 429, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -1,10 +1,12 @@\n+use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n use rustc_ast::ast;\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n+use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n+use rustc_errors::{pluralize, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{BytePos, MultiSpan, Span};\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n@@ -332,11 +334,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         db: &mut DiagnosticBuilder<'_>,\n         err: &TypeError<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n         sp: Span,\n         body_owner_def_id: DefId,\n     ) {\n         use self::TypeError::*;\n-\n+        debug!(\"note_and_explain_type_err err={:?} cause={:?}\", err, cause);\n         match err {\n             Sorts(values) => {\n                 let expected_str = values.expected.sort_string(self);\n@@ -370,7 +373,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                                     sp,\n                                     \"use a float literal\",\n                                     format!(\"{}.0\", snippet),\n-                                    Applicability::MachineApplicable,\n+                                    MachineApplicable,\n                                 );\n                             }\n                         }\n@@ -401,7 +404,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                     (ty::Param(_), ty::Projection(_)) | (ty::Projection(_), ty::Param(_)) => {\n                         db.note(\"you might be missing a type parameter or trait bound\");\n                     }\n-                    (ty::Param(p), _) | (_, ty::Param(p)) => {\n+                    (ty::Param(p), ty::Dynamic(..) | ty::Opaque(..))\n+                    | (ty::Dynamic(..) | ty::Opaque(..), ty::Param(p)) => {\n                         let generics = self.generics_of(body_owner_def_id);\n                         let p_span = self.def_span(generics.type_param(p, self).def_id);\n                         if !sp.contains(p_span) {\n@@ -441,44 +445,40 @@ impl<T> Trait<T> for X {\n                                  #traits-as-parameters\",\n                         );\n                     }\n-                    (ty::Projection(_), _) => {\n-                        db.note(&format!(\n-                            \"consider constraining the associated type `{}` to `{}` or calling a \\\n-                             method that returns `{}`\",\n-                            values.expected, values.found, values.expected,\n-                        ));\n-                        if self.sess.teach(&db.get_code().unwrap()) {\n-                            db.help(\n-                                \"given an associated type `T` and a method `foo`:\n-```\n-trait Trait {\n-    type T;\n-    fn foo(&self) -> Self::T;\n-}\n-```\n-the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n-```\n-impl Trait for X {\n-    type T = String;\n-    fn foo(&self) -> Self::T { String::new() }\n-}\n-```\",\n-                            );\n+                    (ty::Param(p), _) | (_, ty::Param(p)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        let p_span = self.def_span(generics.type_param(p, self).def_id);\n+                        if !sp.contains(p_span) {\n+                            db.span_label(p_span, \"this type parameter\");\n                         }\n-                        db.note(\n-                            \"for more information, visit \\\n-                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n+                    }\n+                    (ty::Projection(proj_ty), _) => {\n+                        self.expected_projection(\n+                            db,\n+                            proj_ty,\n+                            values,\n+                            body_owner_def_id,\n+                            &cause.code,\n                         );\n                     }\n-                    (_, ty::Projection(_)) => {\n-                        db.note(&format!(\n+                    (_, ty::Projection(proj_ty)) => {\n+                        let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,\n-                        ));\n-                        db.note(\n-                            \"for more information, visit \\\n-                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n                         );\n+                        if !self.suggest_constraint(\n+                            db,\n+                            &msg,\n+                            body_owner_def_id,\n+                            proj_ty,\n+                            values.expected,\n+                        ) {\n+                            db.help(&msg);\n+                            db.note(\n+                                \"for more information, visit \\\n+                                https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n+                            );\n+                        }\n                     }\n                     _ => {}\n                 }\n@@ -513,4 +513,357 @@ impl Trait for X {\n             _ => {}\n         }\n     }\n+\n+    fn suggest_constraint(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        msg: &str,\n+        body_owner_def_id: DefId,\n+        proj_ty: &ty::ProjectionTy<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> bool {\n+        let assoc = self.associated_item(proj_ty.item_def_id);\n+        let trait_ref = proj_ty.trait_ref(*self);\n+        if let Some(item) = self.hir().get_if_local(body_owner_def_id) {\n+            if let Some(hir_generics) = item.generics() {\n+                // Get the `DefId` for the type parameter corresponding to `A` in `<A as T>::Foo`.\n+                // This will also work for `impl Trait`.\n+                let def_id = if let ty::Param(param_ty) = proj_ty.self_ty().kind {\n+                    let generics = self.generics_of(body_owner_def_id);\n+                    generics.type_param(&param_ty, *self).def_id\n+                } else {\n+                    return false;\n+                };\n+\n+                // First look in the `where` clause, as this might be\n+                // `fn foo<T>(x: T) where T: Trait`.\n+                for predicate in hir_generics.where_clause.predicates {\n+                    if let hir::WherePredicate::BoundPredicate(pred) = predicate {\n+                        if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) =\n+                            pred.bounded_ty.kind\n+                        {\n+                            if path.res.opt_def_id() == Some(def_id) {\n+                                // This predicate is binding type param `A` in `<A as T>::Foo` to\n+                                // something, potentially `T`.\n+                            } else {\n+                                continue;\n+                            }\n+                        } else {\n+                            continue;\n+                        }\n+\n+                        if self.constrain_generic_bound_associated_type_structured_suggestion(\n+                            db,\n+                            &trait_ref,\n+                            pred.bounds,\n+                            &assoc,\n+                            ty,\n+                            msg,\n+                        ) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+                for param in hir_generics.params {\n+                    if self.hir().opt_local_def_id(param.hir_id).map(|id| id.to_def_id())\n+                        == Some(def_id)\n+                    {\n+                        // This is type param `A` in `<A as T>::Foo`.\n+                        return self.constrain_generic_bound_associated_type_structured_suggestion(\n+                            db,\n+                            &trait_ref,\n+                            param.bounds,\n+                            &assoc,\n+                            ty,\n+                            msg,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n+    /// An associated type was expected and a different type was found.\n+    ///\n+    /// We perform a few different checks to see what we can suggest:\n+    ///\n+    ///  - In the current item, look for associated functions that return the expected type and\n+    ///    suggest calling them. (Not a structured suggestion.)\n+    ///  - If any of the item's generic bounds can be constrained, we suggest constraining the\n+    ///    associated type to the found type.\n+    ///  - If the associated type has a default type and was expected inside of a `trait`, we\n+    ///    mention that this is disallowed.\n+    ///  - If all other things fail, and the error is not because of a mismatch between the `trait`\n+    ///    and the `impl`, we provide a generic `help` to constrain the assoc type or call an assoc\n+    ///    fn that returns the type.\n+    fn expected_projection(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        proj_ty: &ty::ProjectionTy<'tcx>,\n+        values: &ExpectedFound<Ty<'tcx>>,\n+        body_owner_def_id: DefId,\n+        cause_code: &ObligationCauseCode<'_>,\n+    ) {\n+        let msg = format!(\n+            \"consider constraining the associated type `{}` to `{}`\",\n+            values.expected, values.found\n+        );\n+        let body_owner = self.hir().get_if_local(body_owner_def_id);\n+        let current_method_ident = body_owner.and_then(|n| n.ident()).map(|i| i.name);\n+\n+        // We don't want to suggest calling an assoc fn in a scope where that isn't feasible.\n+        let callable_scope = match body_owner {\n+            Some(\n+                hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. })\n+                | hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n+                | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }),\n+            ) => true,\n+            _ => false,\n+        };\n+        let impl_comparison = matches!(\n+            cause_code,\n+            ObligationCauseCode::CompareImplMethodObligation { .. }\n+                | ObligationCauseCode::CompareImplTypeObligation { .. }\n+                | ObligationCauseCode::CompareImplConstObligation\n+        );\n+        let assoc = self.associated_item(proj_ty.item_def_id);\n+        if !callable_scope || impl_comparison {\n+            // We do not want to suggest calling functions when the reason of the\n+            // type error is a comparison of an `impl` with its `trait` or when the\n+            // scope is outside of a `Body`.\n+        } else {\n+            // If we find a suitable associated function that returns the expected type, we don't\n+            // want the more general suggestion later in this method about \"consider constraining\n+            // the associated type or calling a method that returns the associated type\".\n+            let point_at_assoc_fn = self.point_at_methods_that_satisfy_associated_type(\n+                db,\n+                assoc.container.id(),\n+                current_method_ident,\n+                proj_ty.item_def_id,\n+                values.expected,\n+            );\n+            // Possibly suggest constraining the associated type to conform to the\n+            // found type.\n+            if self.suggest_constraint(db, &msg, body_owner_def_id, proj_ty, values.found)\n+                || point_at_assoc_fn\n+            {\n+                return;\n+            }\n+        }\n+\n+        if let ty::Opaque(def_id, _) = proj_ty.self_ty().kind {\n+            // When the expected `impl Trait` is not defined in the current item, it will come from\n+            // a return type. This can occur when dealing with `TryStream` (#71035).\n+            if self.constrain_associated_type_structured_suggestion(\n+                db,\n+                self.def_span(def_id),\n+                &assoc,\n+                values.found,\n+                &msg,\n+            ) {\n+                return;\n+            }\n+        }\n+\n+        if self.point_at_associated_type(db, body_owner_def_id, values.found) {\n+            return;\n+        }\n+\n+        if !impl_comparison {\n+            // Generic suggestion when we can't be more specific.\n+            if callable_scope {\n+                db.help(&format!(\"{} or calling a method that returns `{}`\", msg, values.expected));\n+            } else {\n+                db.help(&msg);\n+            }\n+            db.note(\n+                \"for more information, visit \\\n+                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n+            );\n+        }\n+        if self.sess.teach(&db.get_code().unwrap()) {\n+            db.help(\n+                \"given an associated type `T` and a method `foo`:\n+```\n+trait Trait {\n+type T;\n+fn foo(&self) -> Self::T;\n+}\n+```\n+the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n+```\n+impl Trait for X {\n+type T = String;\n+fn foo(&self) -> Self::T { String::new() }\n+}\n+```\",\n+            );\n+        }\n+    }\n+\n+    fn point_at_methods_that_satisfy_associated_type(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        assoc_container_id: DefId,\n+        current_method_ident: Option<Symbol>,\n+        proj_ty_item_def_id: DefId,\n+        expected: Ty<'tcx>,\n+    ) -> bool {\n+        let items = self.associated_items(assoc_container_id);\n+        // Find all the methods in the trait that could be called to construct the\n+        // expected associated type.\n+        // FIXME: consider suggesting the use of associated `const`s.\n+        let methods: Vec<(Span, String)> = items\n+            .items\n+            .iter()\n+            .filter(|(name, item)| {\n+                ty::AssocKind::Fn == item.kind && Some(**name) != current_method_ident\n+            })\n+            .filter_map(|(_, item)| {\n+                let method = self.fn_sig(item.def_id);\n+                match method.output().skip_binder().kind {\n+                    ty::Projection(ty::ProjectionTy { item_def_id, .. })\n+                        if item_def_id == proj_ty_item_def_id =>\n+                    {\n+                        Some((\n+                            self.sess.source_map().guess_head_span(self.def_span(item.def_id)),\n+                            format!(\"consider calling `{}`\", self.def_path_str(item.def_id)),\n+                        ))\n+                    }\n+                    _ => None,\n+                }\n+            })\n+            .collect();\n+        if !methods.is_empty() {\n+            // Use a single `help:` to show all the methods in the trait that can\n+            // be used to construct the expected associated type.\n+            let mut span: MultiSpan =\n+                methods.iter().map(|(sp, _)| *sp).collect::<Vec<Span>>().into();\n+            let msg = format!(\n+                \"{some} method{s} {are} available that return{r} `{ty}`\",\n+                some = if methods.len() == 1 { \"a\" } else { \"some\" },\n+                s = pluralize!(methods.len()),\n+                are = if methods.len() == 1 { \"is\" } else { \"are\" },\n+                r = if methods.len() == 1 { \"s\" } else { \"\" },\n+                ty = expected\n+            );\n+            for (sp, label) in methods.into_iter() {\n+                span.push_span_label(sp, label);\n+            }\n+            db.span_help(span, &msg);\n+            return true;\n+        }\n+        false\n+    }\n+\n+    fn point_at_associated_type(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        body_owner_def_id: DefId,\n+        found: Ty<'tcx>,\n+    ) -> bool {\n+        let hir_id = match body_owner_def_id.as_local().map(|id| self.hir().as_local_hir_id(id)) {\n+            Some(hir_id) => hir_id,\n+            None => return false,\n+        };\n+        // When `body_owner` is an `impl` or `trait` item, look in its associated types for\n+        // `expected` and point at it.\n+        let parent_id = self.hir().get_parent_item(hir_id);\n+        let item = self.hir().find(parent_id);\n+        debug!(\"expected_projection parent item {:?}\", item);\n+        match item {\n+            Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Trait(.., items), .. })) => {\n+                // FIXME: account for `#![feature(specialization)]`\n+                for item in &items[..] {\n+                    match item.kind {\n+                        hir::AssocItemKind::Type | hir::AssocItemKind::OpaqueTy => {\n+                            if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n+                                if let hir::Defaultness::Default { has_value: true } =\n+                                    item.defaultness\n+                                {\n+                                    db.span_label(\n+                                        item.span,\n+                                        \"associated type defaults can't be assumed inside the \\\n+                                            trait defining them\",\n+                                    );\n+                                } else {\n+                                    db.span_label(item.span, \"expected this associated type\");\n+                                }\n+                                return true;\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+            Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Impl { items, .. }, ..\n+            })) => {\n+                for item in &items[..] {\n+                    match item.kind {\n+                        hir::AssocItemKind::Type | hir::AssocItemKind::OpaqueTy => {\n+                            if self.type_of(self.hir().local_def_id(item.id.hir_id)) == found {\n+                                db.span_label(item.span, \"expected this associated type\");\n+                                return true;\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        false\n+    }\n+\n+    /// Given a slice of `hir::GenericBound`s, if any of them corresponds to the `trait_ref`\n+    /// requirement, provide a strucuted suggestion to constrain it to a given type `ty`.\n+    fn constrain_generic_bound_associated_type_structured_suggestion(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        trait_ref: &ty::TraitRef<'tcx>,\n+        bounds: hir::GenericBounds<'_>,\n+        assoc: &ty::AssocItem,\n+        ty: Ty<'tcx>,\n+        msg: &str,\n+    ) -> bool {\n+        // FIXME: we would want to call `resolve_vars_if_possible` on `ty` before suggesting.\n+        bounds.iter().any(|bound| match bound {\n+            hir::GenericBound::Trait(ptr, hir::TraitBoundModifier::None) => {\n+                // Relate the type param against `T` in `<A as T>::Foo`.\n+                ptr.trait_ref.trait_def_id() == Some(trait_ref.def_id)\n+                    && self.constrain_associated_type_structured_suggestion(\n+                        db, ptr.span, assoc, ty, msg,\n+                    )\n+            }\n+            _ => false,\n+        })\n+    }\n+\n+    /// Given a span corresponding to a bound, provide a structured suggestion to set an\n+    /// associated type to a given type `ty`.\n+    fn constrain_associated_type_structured_suggestion(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        span: Span,\n+        assoc: &ty::AssocItem,\n+        ty: Ty<'tcx>,\n+        msg: &str,\n+    ) -> bool {\n+        if let Ok(has_params) =\n+            self.sess.source_map().span_to_snippet(span).map(|snippet| snippet.ends_with('>'))\n+        {\n+            let (span, sugg) = if has_params {\n+                let pos = span.hi() - BytePos(1);\n+                let span = Span::new(pos, pos, span.ctxt());\n+                (span, format!(\", {} = {}\", assoc.ident, ty))\n+            } else {\n+                (span.shrink_to_hi(), format!(\"<{} = {}>\", assoc.ident, ty))\n+            };\n+            db.span_suggestion_verbose(span, msg, sugg, MaybeIncorrect);\n+            return true;\n+        }\n+        false\n+    }\n }"}, {"sha": "ce7b1390d46b6dcb740e7cdcb6fbd8a8e97a2b8a", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -1738,6 +1738,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     predicate\n                 ));\n             }\n+            ObligationCauseCode::CompareImplConstObligation => {\n+                err.note(&format!(\n+                    \"the requirement `{}` appears on the associated impl constant \\\n+                     but not on the corresponding associated trait constant\",\n+                    predicate\n+                ));\n+            }\n             ObligationCauseCode::ReturnType\n             | ObligationCauseCode::ReturnValue(_)\n             | ObligationCauseCode::BlockTailExpression(_) => (),"}, {"sha": "29cd9681295be4246ce8824e8d52efd289375003", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -966,6 +966,7 @@ crate fn compare_const_impl<'tcx>(\n         let impl_ty = tcx.type_of(impl_c.def_id);\n         let trait_ty = tcx.type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n         let mut cause = ObligationCause::misc(impl_c_span, impl_c_hir_id);\n+        cause.code = ObligationCauseCode::CompareImplConstObligation;\n \n         // There is no \"body\" here, so just pass dummy id.\n         let impl_ty ="}, {"sha": "d8bac07e058da3278f528134c023b0949f0e4794", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -9,8 +9,6 @@ LL |     const FROM: &'static str = \"foo\";\n    |\n    = note: expected associated type `<T as Foo>::Out`\n                     found reference `&'static str`\n-   = note: consider constraining the associated type `<T as Foo>::Out` to `&'static str` or calling a method that returns `<T as Foo>::Out`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "dffa4780a09ff0c41441b39ff11fcbb6ba81514a", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -8,8 +8,10 @@ LL |     let _: Bar = x.boo();\n    |\n    = note:       expected struct `Bar`\n            found associated type `<I as Foo>::A`\n-   = note: consider constraining the associated type `<I as Foo>::A` to `Bar`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<I as Foo>::A` to `Bar`\n+   |\n+LL | fn foo2<I: Foo<A = Bar>>(x: I) {\n+   |               ^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5"}, {"sha": "db35c1af171471dcae59345f24764f19220c3f1b", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -12,8 +12,6 @@ LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |\n    = note: expected enum `std::option::Option<T>`\n               found type `T`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "b8f20d00ff8e45bee6d94ab34a55148a8541c0e1", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -9,8 +9,10 @@ LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n    |\n    = note:         expected type `i32`\n            found associated type `<T as Foo>::Y`\n-   = note: consider constraining the associated type `<T as Foo>::Y` to `i32`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<T as Foo>::Y` to `i32`\n+   |\n+LL | fn have_x_want_y<T:Foo<X=u32, Y = i32>>(t: &T)\n+   |                             ^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n@@ -23,8 +25,10 @@ LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n    |\n    = note:         expected type `u32`\n            found associated type `<T as Foo>::X`\n-   = note: consider constraining the associated type `<T as Foo>::X` to `u32`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<T as Foo>::X` to `u32`\n+   |\n+LL | fn have_y_want_x<T:Foo<Y=i32, X = u32>>(t: &T)\n+   |                             ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4014f46285d70aeaeebb1ea4430c10868e3926a0", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -3,15 +3,13 @@\n // Associated type defaults may not be assumed inside the trait defining them.\n // ie. they only resolve to `<Self as Tr>::A`, not the actual type `()`\n trait Tr {\n-    type A = ();\n+    type A = (); //~ NOTE associated type defaults can't be assumed inside the trait defining them\n \n     fn f(p: Self::A) {\n         let () = p;\n         //~^ ERROR mismatched types\n         //~| NOTE expected associated type, found `()`\n         //~| NOTE expected associated type `<Self as Tr>::A`\n-        //~| NOTE consider constraining the associated type\n-        //~| NOTE for more information, visit\n     }\n }\n \n@@ -31,15 +29,13 @@ impl Tr for u8 {\n }\n \n trait AssocConst {\n-    type Ty = u8;\n+    type Ty = u8; //~ NOTE associated type defaults can't be assumed inside the trait defining them\n \n     // Assoc. consts also cannot assume that default types hold\n     const C: Self::Ty = 0u8;\n     //~^ ERROR mismatched types\n     //~| NOTE expected associated type, found `u8`\n     //~| NOTE expected associated type `<Self as AssocConst>::Ty`\n-    //~| NOTE consider constraining the associated type\n-    //~| NOTE for more information, visit\n }\n \n // An impl can, however"}, {"sha": "493df30a64daf25f5a54076a8070ee6c5ddd311c", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -1,24 +1,26 @@\n error[E0308]: mismatched types\n   --> $DIR/defaults-in-other-trait-items.rs:9:13\n    |\n+LL |     type A = ();\n+   |     ------------ associated type defaults can't be assumed inside the trait defining them\n+...\n LL |         let () = p;\n    |             ^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<Self as Tr>::A`\n                     found unit type `()`\n-   = note: consider constraining the associated type `<Self as Tr>::A` to `()` or calling a method that returns `<Self as Tr>::A`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-in-other-trait-items.rs:37:25\n+  --> $DIR/defaults-in-other-trait-items.rs:35:25\n    |\n+LL |     type Ty = u8;\n+   |     ------------- associated type defaults can't be assumed inside the trait defining them\n+...\n LL |     const C: Self::Ty = 0u8;\n    |                         ^^^ expected associated type, found `u8`\n    |\n    = note: expected associated type `<Self as AssocConst>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<Self as AssocConst>::Ty` to `u8` or calling a method that returns `<Self as AssocConst>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "37a4d9b60fdfdc48beab55a685755c2494406f4a", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -9,35 +9,35 @@ LL |     fn make() -> u8 { 0 }\n    |\n    = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n               found fn pointer `fn() -> u8`\n-   = note: consider constraining the associated type `<A<T> as Tr>::Ty` to `u8` or calling a method that returns `<A<T> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:34:18\n    |\n LL |     fn make() -> Self::Ty {\n    |                  -------- type in trait\n ...\n+LL |     default type Ty = bool;\n+   |     ----------------------- expected this associated type\n+LL | \n LL |     fn make() -> bool { true }\n    |                  ^^^^ expected associated type, found `bool`\n    |\n    = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n               found fn pointer `fn() -> bool`\n-   = note: consider constraining the associated type `<B<T> as Tr>::Ty` to `bool` or calling a method that returns `<B<T> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:9:9\n    |\n+LL |     type Ty = u8;\n+   |     ------------- associated type defaults can't be assumed inside the trait defining them\n+LL | \n LL |     fn make() -> Self::Ty {\n    |                  -------- expected `<Self as Tr>::Ty` because of return type\n LL |         0u8\n    |         ^^^ expected associated type, found `u8`\n    |\n    = note: expected associated type `<Self as Tr>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<Self as Tr>::Ty` to `u8` or calling a method that returns `<Self as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:25:29\n@@ -49,21 +49,22 @@ LL |     fn make() -> Self::Ty { 0u8 }\n    |\n    = note: expected associated type `<A2<T> as Tr>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<A2<T> as Tr>::Ty` to `u8` or calling a method that returns `<A2<T> as Tr>::Ty`\n+   = help: consider constraining the associated type `<A2<T> as Tr>::Ty` to `u8` or calling a method that returns `<A2<T> as Tr>::Ty`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:43:29\n    |\n+LL |     default type Ty = bool;\n+   |     ----------------------- expected this associated type\n+LL | \n LL |     fn make() -> Self::Ty { true }\n    |                  --------   ^^^^ expected associated type, found `bool`\n    |                  |\n    |                  expected `<B2<T> as Tr>::Ty` because of return type\n    |\n    = note: expected associated type `<B2<T> as Tr>::Ty`\n                          found type `bool`\n-   = note: consider constraining the associated type `<B2<T> as Tr>::Ty` to `bool` or calling a method that returns `<B2<T> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:86:32\n@@ -75,8 +76,11 @@ LL |     let _: <B<()> as Tr>::Ty = 0u8;\n    |\n    = note: expected associated type `<B<()> as Tr>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<B<()> as Tr>::Ty` to `u8` or calling a method that returns `<B<()> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: a method is available that returns `<B<()> as Tr>::Ty`\n+  --> $DIR/defaults-specialization.rs:8:5\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:87:32\n@@ -88,8 +92,11 @@ LL |     let _: <B<()> as Tr>::Ty = true;\n    |\n    = note: expected associated type `<B<()> as Tr>::Ty`\n                          found type `bool`\n-   = note: consider constraining the associated type `<B<()> as Tr>::Ty` to `bool` or calling a method that returns `<B<()> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: a method is available that returns `<B<()> as Tr>::Ty`\n+  --> $DIR/defaults-specialization.rs:8:5\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:88:33\n@@ -101,8 +108,11 @@ LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n    |\n    = note: expected associated type `<B2<()> as Tr>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<B2<()> as Tr>::Ty` to `u8` or calling a method that returns `<B2<()> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: a method is available that returns `<B2<()> as Tr>::Ty`\n+  --> $DIR/defaults-specialization.rs:8:5\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:89:33\n@@ -114,8 +124,11 @@ LL |     let _: <B2<()> as Tr>::Ty = true;\n    |\n    = note: expected associated type `<B2<()> as Tr>::Ty`\n                          found type `bool`\n-   = note: consider constraining the associated type `<B2<()> as Tr>::Ty` to `bool` or calling a method that returns `<B2<()> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: a method is available that returns `<B2<()> as Tr>::Ty`\n+  --> $DIR/defaults-specialization.rs:8:5\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "5f994f26534bdeefb3a3a329cf547226d066b19d", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -0,0 +1,32 @@\n+trait Foo {\n+    type Item;\n+}\n+\n+trait Bar: Foo {}\n+\n+struct S;\n+\n+impl Foo for S {\n+    type Item = i32;\n+}\n+impl Bar for S {}\n+\n+struct T;\n+\n+impl Foo for T {\n+    type Item = u32;\n+}\n+impl Bar for T {}\n+\n+fn bar() -> impl Bar {\n+    T\n+}\n+\n+fn baz() -> impl Bar<Item = i32> {\n+//~^ ERROR type mismatch resolving `<impl Bar as Foo>::Item == i32`\n+    bar()\n+}\n+\n+fn main() {\n+    let _ = baz();\n+}"}, {"sha": "566e390a31e4820cd68b60192ba1d320f69cdad9", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -0,0 +1,20 @@\n+error[E0271]: type mismatch resolving `<impl Bar as Foo>::Item == i32`\n+  --> $DIR/impl-trait-return-missing-constraint.rs:25:13\n+   |\n+LL | fn bar() -> impl Bar {\n+   |             -------- the expected opaque type\n+...\n+LL | fn baz() -> impl Bar<Item = i32> {\n+   |             ^^^^^^^^^^^^^^^^^^^^ expected associated type, found `i32`\n+   |\n+   = note: expected associated type `<impl Bar as Foo>::Item`\n+                         found type `i32`\n+   = note: the return type of a function must have a statically known size\n+help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n+   |\n+LL | fn bar() -> impl Bar<Item = i32> {\n+   |                     ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "74411008c9dda6f74a2a64cb1dd13247d6dd4dc0", "filename": "src/test/ui/associated-types/issue-26681.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -6,7 +6,7 @@ LL |     const C: <Self::Fv as Foo>::Bar = 6665;\n    |\n    = note: expected associated type `<<Self as Baz>::Fv as Foo>::Bar`\n                          found type `{integer}`\n-   = note: consider constraining the associated type `<<Self as Baz>::Fv as Foo>::Bar` to `{integer}` or calling a method that returns `<<Self as Baz>::Fv as Foo>::Bar`\n+   = help: consider constraining the associated type `<<Self as Baz>::Fv as Foo>::Bar` to `{integer}`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error"}, {"sha": "6e75462122513fae82463f1fc6c527b28bafeb90", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -6,7 +6,7 @@ LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item\n    |\n    = note:    expected reference `&T`\n            found associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n-   = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n+   = help: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n@@ -17,7 +17,7 @@ LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item\n    |\n    = note:    expected reference `&T`\n            found associated type `<[T] as Iterable>::Item<'_>`\n-   = note: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_`\n+   = help: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n@@ -34,7 +34,7 @@ LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |\n    = note: expected associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n                     found reference `&T`\n-   = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n+   = help: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n@@ -51,7 +51,7 @@ LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |\n    = note: expected associated type `<[T] as Iterable>::Item<'_>`\n                     found reference `&T`\n-   = note: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_` or calling a method that returns `<[T] as Iterable>::Item<'_>`\n+   = help: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_` or calling a method that returns `<[T] as Iterable>::Item<'_>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 4 previous errors"}, {"sha": "1c7bfa65d7cfe5916c830b24dec19bb5bbeb0ed0", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -6,7 +6,7 @@ LL |     let v = Unit2.m(\n    |\n    = note:       expected struct `Unit4`\n            found associated type `<_ as Ty<'_>>::V`\n-   = note: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n+   = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as std::ops::FnOnce<((&u8,),)>>::Output == Unit3`"}, {"sha": "f5092044627f62631135f9ba062edef49eef387b", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -14,9 +14,11 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note:         expected type `()`\n            found associated type `<T as impl_trait::Trait>::Assoc`\n-   = note: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n+help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n+   |\n+LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n+   |                         ^^^^^^^^^^^^\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/bound-normalization-fail.rs:43:41\n@@ -32,9 +34,11 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note:         expected type `()`\n            found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n-   = note: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n+help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n+   |\n+LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n+   |                                 ^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors; 1 warning emitted\n "}, {"sha": "2454c218ffc8ba4e6805dbe60971998f655b97bc", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -25,7 +25,7 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |\n    = note:         expected type `i32`\n            found associated type `<impl Foo as Leak>::T`\n-   = note: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n+   = help: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types"}, {"sha": "a12b01b4d2b0d4e9c161fd3456aa1941ae30f1e3", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -10,8 +10,6 @@ LL |     x\n    |\n    = note:      expected struct `std::string::String`\n            found type parameter `impl Debug`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "3f1b955dddb2b2de74e2a297d0216be2cf0f3504", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -9,8 +9,6 @@ LL |         self.iter()\n    |\n    = note: expected type parameter `I`\n                       found struct `std::slice::Iter<'_, N>`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0599]: no method named `iter` found for reference `&G` in the current scope\n   --> $DIR/issue-13853.rs:27:23"}, {"sha": "3bcc50ded84256c3aab89ed97229ecb66b51e59b", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -8,8 +8,6 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:11:3\n@@ -21,8 +19,6 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:18:3\n@@ -35,8 +31,6 @@ LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(Foo, (T,))`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to 3 previous errors\n "}, {"sha": "369f56b9869a334755e72c442b6f67e11b63932a", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -8,8 +8,10 @@ LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |\n    = note: expected associated type `<T as Tr<'a>>::Out`\n                     found unit type `()`\n-   = note: consider constraining the associated type `<T as Tr<'a>>::Out` to `()` or calling a method that returns `<T as Tr<'a>>::Out`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<T as Tr<'a>>::Out` to `()`\n+   |\n+LL | pub fn f<'a, T: Tr<'a, Out = ()>>() -> <T as Tr<'a>>::Out {}\n+   |                      ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "58e85ec700d2df9ef2f93a20fe4846e456d885e5", "filename": "src/test/ui/issues/issue-69306.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69306.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -8,8 +8,6 @@ LL |     const C: S0<u8> = Self(0);\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:5:23\n@@ -21,8 +19,6 @@ LL |     const C: S0<u8> = Self(0);\n    |\n    = note: expected struct `S0<u8>`\n               found struct `S0<T>`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:10:14\n@@ -35,8 +31,6 @@ LL |         Self(0);\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:27:14\n@@ -49,8 +43,6 @@ LL |         Self(0);\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:33:32\n@@ -62,8 +54,6 @@ LL |     const C: S1<u8, u8> = Self(0, 1);\n    |\n    = note: expected type parameter `T`\n                         found type `{integer}`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:33:27\n@@ -75,8 +65,6 @@ LL |     const C: S1<u8, u8> = Self(0, 1);\n    |\n    = note: expected struct `S1<u8, _>`\n               found struct `S1<T, _>`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-69306.rs:41:14"}, {"sha": "9f4e4398984aed92cd5507aafdb11c567b9f0964", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -9,8 +9,6 @@ LL |         Some(true)\n    |\n    = note: expected type parameter `bool` (type parameter `bool`)\n                         found type `bool` (`bool`)\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "ac15ab0681a028c7ce328ca2ba041bf6e502137b", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -9,7 +9,7 @@ LL |     ()\n    |\n    = note: expected associated type `<T as Foo>::Assoc`\n                     found unit type `()`\n-   = note: consider constraining the associated type `<T as Foo>::Assoc` to `()` or calling a method that returns `<T as Foo>::Assoc`\n+   = help: consider constraining the associated type `<T as Foo>::Assoc` to `()` or calling a method that returns `<T as Foo>::Assoc`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n@@ -25,7 +25,7 @@ LL |     generic::<()>()\n    |\n    = note:    expected unit type `()`\n            found associated type `<() as Foo>::Assoc`\n-   = note: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n+   = help: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors"}, {"sha": "7233387eba1fabcdeba657c874762056c91af620", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -1,15 +1,15 @@\n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:15:9\n    |\n+LL |     default type Output = Box<T>;\n+   |     ----------------------------- expected this associated type\n LL |     default fn generate(self) -> Self::Output {\n    |                                  ------------ expected `<T as Example>::Output` because of return type\n LL |         Box::new(self)\n    |         ^^^^^^^^^^^^^^ expected associated type, found struct `std::boxed::Box`\n    |\n    = note: expected associated type `<T as Example>::Output`\n                        found struct `std::boxed::Box<T>`\n-   = note: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>` or calling a method that returns `<T as Example>::Output`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/specialization-default-types.rs:25:5\n@@ -21,7 +21,7 @@ LL |     Example::generate(t)\n    |\n    = note:       expected struct `std::boxed::Box<T>`\n            found associated type `<T as Example>::Output`\n-   = note: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>`\n+   = help: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors"}, {"sha": "52e13dbc2dd854d3a49810fb375a95494c738ab1", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -12,8 +12,6 @@ LL |     x\n    |\n    = note:      expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n            found type parameter `F`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0308]: mismatched types\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n@@ -40,8 +38,6 @@ LL |     Pin::new(x)\n    |\n    = note:      expected struct `std::boxed::Box<dyn std::future::Future<Output = i32> + std::marker::Send>`\n            found type parameter `F`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n    = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned"}, {"sha": "8ef7e34ab30501d57f556e278e41de7627f20781", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction-fixable.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.fixed?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+#![allow(unused)] // for the fixed file\n+\n+trait Trait<T = Self> {\n+    type A;\n+\n+    fn func(&self) -> Self::A;\n+}\n+\n+struct S<T>(T);\n+impl<K> S<K> {\n+    fn foo<'a, T: Trait + 'a>(&self, _: impl Trait, x: impl Trait<A = usize>, _: T) {\n+        qux(x.func()) //~ ERROR mismatched types\n+    }\n+\n+    fn ban<T>(x: T) where T: Trait<A = usize> {\n+        qux(x.func()) //~ ERROR mismatched types\n+    }\n+}\n+\n+fn foo<'a, T: Trait + 'a>(_: impl Trait, x: impl Trait<A = usize>, _: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar<T: Trait<A = usize>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn foo2(x: impl Trait<i32, A = usize>) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar2<T: Trait<i32, A = usize>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn ban<T>(x: T) where T: Trait<A = usize> {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn qux(_: usize) {}\n+\n+fn main() {}"}, {"sha": "7bd38d0d45d90c1314bb0aeea83487b6c6a908c2", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction-fixable.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+#![allow(unused)] // for the fixed file\n+\n+trait Trait<T = Self> {\n+    type A;\n+\n+    fn func(&self) -> Self::A;\n+}\n+\n+struct S<T>(T);\n+impl<K> S<K> {\n+    fn foo<'a, T: Trait + 'a>(&self, _: impl Trait, x: impl Trait, _: T) {\n+        qux(x.func()) //~ ERROR mismatched types\n+    }\n+\n+    fn ban<T>(x: T) where T: Trait {\n+        qux(x.func()) //~ ERROR mismatched types\n+    }\n+}\n+\n+fn foo<'a, T: Trait + 'a>(_: impl Trait, x: impl Trait, _: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar<T: Trait>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn foo2(x: impl Trait<i32>) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar2<T: Trait<i32>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn ban<T>(x: T) where T: Trait {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn qux(_: usize) {}\n+\n+fn main() {}"}, {"sha": "f785f7b84a76fae8bef31422b5d82344546c9e43", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction-fixable.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction-fixable.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -0,0 +1,94 @@\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:13:13\n+   |\n+LL |         qux(x.func())\n+   |             ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait as Trait>::A`\n+help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n+   |\n+LL |     fn foo<'a, T: Trait + 'a>(&self, _: impl Trait, x: impl Trait<A = usize>, _: T) {\n+   |                                                                  ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:17:13\n+   |\n+LL |         qux(x.func())\n+   |             ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL |     fn ban<T>(x: T) where T: Trait<A = usize> {\n+   |                                   ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:22:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait as Trait>::A`\n+help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n+   |\n+LL | fn foo<'a, T: Trait + 'a>(_: impl Trait, x: impl Trait<A = usize>, _: T) {\n+   |                                                       ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:26:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL | fn bar<T: Trait<A = usize>>(x: T) {\n+   |                ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:30:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait<i32> as Trait<i32>>::A`\n+help: consider constraining the associated type `<impl Trait<i32> as Trait<i32>>::A` to `usize`\n+   |\n+LL | fn foo2(x: impl Trait<i32, A = usize>) {\n+   |                          ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:34:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait<i32>>::A`\n+help: consider constraining the associated type `<T as Trait<i32>>::A` to `usize`\n+   |\n+LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {\n+   |                     ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:38:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL | fn ban<T>(x: T) where T: Trait<A = usize> {\n+   |                               ^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7465049787f59c931ebbfd7a19784db2a9c638f1", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -0,0 +1,43 @@\n+// These are all the possible variations of this error I could think of for.\n+// `trait-with-missing-associated-type-restriction-fixable.rs` contains the subset of these that\n+// can be fixed with `rustfix`.\n+\n+trait Trait<T = Self> {\n+    type A;\n+\n+    fn func(&self) -> Self::A;\n+    fn funk(&self, _: Self::A);\n+}\n+\n+fn foo(_: impl Trait, x: impl Trait) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar<T: Trait>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn foo2(x: impl Trait<i32>) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bar2<T: Trait<i32>>(x: T) {\n+    x.funk(3); //~ ERROR mismatched types\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn baz<D: std::fmt::Debug, T: Trait<A = D>>(x: T) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn bat(x: &mut dyn Trait<(), A = ()>) {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn ban<T>(x: T) where T: Trait {\n+    qux(x.func()) //~ ERROR mismatched types\n+}\n+\n+fn qux(_: usize) {}\n+\n+fn main() {}"}, {"sha": "5ae1d45c6b7037dd847f9dc1880e1d7c519b7556", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -0,0 +1,103 @@\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:13:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait as Trait>::A`\n+help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`\n+   |\n+LL | fn foo(_: impl Trait, x: impl Trait<A = usize>) {\n+   |                                    ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:17:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL | fn bar<T: Trait<A = usize>>(x: T) {\n+   |                ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:21:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<impl Trait<i32> as Trait<i32>>::A`\n+help: consider constraining the associated type `<impl Trait<i32> as Trait<i32>>::A` to `usize`\n+   |\n+LL | fn foo2(x: impl Trait<i32, A = usize>) {\n+   |                          ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:25:12\n+   |\n+LL |     x.funk(3);\n+   |            ^ expected associated type, found integer\n+   |\n+   = note: expected associated type `<T as Trait<i32>>::A`\n+                         found type `{integer}`\n+help: a method is available that returns `<T as Trait<i32>>::A`\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:8:5\n+   |\n+LL |     fn func(&self) -> Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ consider calling `Trait::func`\n+help: consider constraining the associated type `<T as Trait<i32>>::A` to `{integer}`\n+   |\n+LL | fn bar2<T: Trait<i32, A = {integer}>>(x: T) {\n+   |                     ^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:26:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait<i32>>::A`\n+help: consider constraining the associated type `<T as Trait<i32>>::A` to `usize`\n+   |\n+LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {\n+   |                     ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:30:9\n+   |\n+LL | fn baz<D: std::fmt::Debug, T: Trait<A = D>>(x: T) {\n+   |        - this type parameter\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found type parameter `D`\n+   |\n+   = note:        expected type `usize`\n+           found type parameter `D`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:34:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:38:9\n+   |\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found associated type\n+   |\n+   = note:         expected type `usize`\n+           found associated type `<T as Trait>::A`\n+help: consider constraining the associated type `<T as Trait>::A` to `usize`\n+   |\n+LL | fn ban<T>(x: T) where T: Trait<A = usize> {\n+   |                               ^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "caea791e6536b9eb6403f35c66f801a00111cbdb", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6823ba1666fa5f65e5fdd17cfc78ff227c092f2/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=d6823ba1666fa5f65e5fdd17cfc78ff227c092f2", "patch": "@@ -9,8 +9,6 @@ LL |         Self::TSVariant(());\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:15:27\n@@ -35,8 +33,6 @@ LL |         Self::<()>::TSVariant(());\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:20:16\n@@ -61,8 +57,6 @@ LL |         Self::SVariant { v: () };\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:28:26\n@@ -81,8 +75,6 @@ LL |         Self::SVariant::<()> { v: () };\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:31:16\n@@ -101,8 +93,6 @@ LL |         Self::<()>::SVariant { v: () };\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:34:16\n@@ -127,8 +117,6 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    |\n    = note: expected type parameter `T`\n                    found unit type `()`\n-   = help: type parameters must be constrained to match other types\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:41:26"}]}