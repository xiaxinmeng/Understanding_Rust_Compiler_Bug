{"sha": "5da19f2b69694312ec8733fcdb145923391a5af7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTE5ZjJiNjk2OTQzMTJlYzg3MzNmY2RiMTQ1OTIzMzkxYTVhZjc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-22T03:29:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-22T03:29:13Z"}, "message": "Rollup merge of #37658 - GuillaumeGomez:ref_suggestion, r=nikomatsakis,eddyb\n\nRef suggestion", "tree": {"sha": "a57e3349ee577aa3cc0aaa2554019583bde65dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a57e3349ee577aa3cc0aaa2554019583bde65dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da19f2b69694312ec8733fcdb145923391a5af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da19f2b69694312ec8733fcdb145923391a5af7", "html_url": "https://github.com/rust-lang/rust/commit/5da19f2b69694312ec8733fcdb145923391a5af7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da19f2b69694312ec8733fcdb145923391a5af7/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1785bca5137fad1f26e4d3c347cbb68408a28fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1785bca5137fad1f26e4d3c347cbb68408a28fa9", "html_url": "https://github.com/rust-lang/rust/commit/1785bca5137fad1f26e4d3c347cbb68408a28fa9"}, {"sha": "7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "html_url": "https://github.com/rust-lang/rust/commit/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0"}], "stats": {"total": 121, "additions": 94, "deletions": 27}, "files": [{"sha": "d21b5f739bd7b5510712cc7eac3c43c44cfdf034", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5da19f2b69694312ec8733fcdb145923391a5af7", "patch": "@@ -78,6 +78,7 @@ use errors::DiagnosticBuilder;\n use syntax::abi;\n use syntax::feature_gate;\n use syntax::ptr::P;\n+use syntax_pos;\n \n use std::collections::VecDeque;\n use std::ops::Deref;\n@@ -722,6 +723,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         Ok(target)\n     }\n \n+    /// Same as `try_coerce()`, but without side-effects.\n+    pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n+        let source = self.resolve_type_vars_with_obligations(expr_ty);\n+        debug!(\"coercion::can({:?} -> {:?})\", source, target);\n+\n+        let cause = self.cause(syntax_pos::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n+        let coerce = Coerce::new(self, cause);\n+        self.probe(|_| coerce.coerce::<hir::Expr>(&[], source, target)).is_ok()\n+    }\n+\n     /// Given some expressions, their known unified type and another expression,\n     /// tries to unify the types, potentially inserting coercions on any of the\n     /// provided expressions and returns their LUB (aka \"common supertype\")."}, {"sha": "4cc3f2dacdfe996a77e4fc4c641595ce49109871", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 75, "deletions": 14, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=5da19f2b69694312ec8733fcdb145923391a5af7", "patch": "@@ -10,15 +10,14 @@\n \n \n use check::FnCtxt;\n-use rustc::ty::Ty;\n-use rustc::infer::{InferOk};\n+use rustc::infer::InferOk;\n use rustc::traits::ObligationCause;\n \n use syntax::ast;\n use syntax_pos::{self, Span};\n use rustc::hir;\n use rustc::hir::def::Def;\n-use rustc::ty::{self, AssociatedItem};\n+use rustc::ty::{self, Ty, AssociatedItem};\n use errors::DiagnosticBuilder;\n \n use super::method::probe;\n@@ -80,18 +79,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Err(e) = self.try_coerce(expr, checked_ty, self.diverges.get(), expected) {\n             let cause = self.misc(expr.span);\n             let expr_ty = self.resolve_type_vars_with_obligations(checked_ty);\n-            let mode = probe::Mode::MethodCall;\n-            let suggestions = self.probe_for_return_type(syntax_pos::DUMMY_SP,\n-                                                         mode,\n-                                                         expected,\n-                                                         checked_ty,\n-                                                         ast::DUMMY_NODE_ID);\n             let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n-            if suggestions.len() > 0 {\n-                err.help(&format!(\"here are some functions which \\\n-                                   might fulfill your needs:\\n{}\",\n-                                  self.get_best_match(&suggestions).join(\"\\n\")));\n-            };\n+            if let Some(suggestion) = self.check_ref(expr,\n+                                                     checked_ty,\n+                                                     expected) {\n+                err.help(&suggestion);\n+            } else {\n+                let mode = probe::Mode::MethodCall;\n+                let suggestions = self.probe_for_return_type(syntax_pos::DUMMY_SP,\n+                                                             mode,\n+                                                             expected,\n+                                                             checked_ty,\n+                                                             ast::DUMMY_NODE_ID);\n+                if suggestions.len() > 0 {\n+                    err.help(&format!(\"here are some functions which \\\n+                                       might fulfill your needs:\\n{}\",\n+                                      self.get_best_match(&suggestions).join(\"\\n\")));\n+                }\n+            }\n             err.emit();\n         }\n     }\n@@ -140,4 +145,60 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ => false,\n         }\n     }\n+\n+    /// This function is used to determine potential \"simple\" improvements or users' errors and\n+    /// provide them useful help. For example:\n+    ///\n+    /// ```\n+    /// fn some_fn(s: &str) {}\n+    ///\n+    /// let x = \"hey!\".to_owned();\n+    /// some_fn(x); // error\n+    /// ```\n+    ///\n+    /// No need to find every potential function which could make a coercion to transform a\n+    /// `String` into a `&str` since a `&` would do the trick!\n+    ///\n+    /// In addition of this check, it also checks between references mutability state. If the\n+    /// expected is mutable but the provided isn't, maybe we could just say \"Hey, try with\n+    /// `&mut`!\".\n+    fn check_ref(&self,\n+                 expr: &hir::Expr,\n+                 checked_ty: Ty<'tcx>,\n+                 expected: Ty<'tcx>)\n+                 -> Option<String> {\n+        match (&expected.sty, &checked_ty.sty) {\n+            (&ty::TyRef(_, _), &ty::TyRef(_, _)) => None,\n+            (&ty::TyRef(_, mutability), _) => {\n+                // Check if it can work when put into a ref. For example:\n+                //\n+                // ```\n+                // fn bar(x: &mut i32) {}\n+                //\n+                // let x = 0u32;\n+                // bar(&x); // error, expected &mut\n+                // ```\n+                let ref_ty = match mutability.mutbl {\n+                    hir::Mutability::MutMutable => self.tcx.mk_mut_ref(\n+                                                       self.tcx.mk_region(ty::ReStatic),\n+                                                       checked_ty),\n+                    hir::Mutability::MutImmutable => self.tcx.mk_imm_ref(\n+                                                       self.tcx.mk_region(ty::ReStatic),\n+                                                       checked_ty),\n+                };\n+                if self.can_coerce(ref_ty, expected) {\n+                    if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n+                        return Some(format!(\"try with `{}{}`\",\n+                                            match mutability.mutbl {\n+                                                hir::Mutability::MutMutable => \"&mut \",\n+                                                hir::Mutability::MutImmutable => \"&\",\n+                                            },\n+                                            &src));\n+                    }\n+                }\n+                None\n+            }\n+            _ => None,\n+        }\n+    }\n }"}, {"sha": "7c5a4e0c3c6f644467c7117cbdc8da80dcfd1d61", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=5da19f2b69694312ec8733fcdb145923391a5af7", "patch": "@@ -14,6 +14,5 @@ fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n     //~| expected type `&[i32]`\n-    //~| found type `[{integer}; 1]`\n     //~| expected &[i32], found array of 1 elements\n }"}, {"sha": "847a82c082651f1a4550cc7bfc34aefa873f2fa3", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=5da19f2b69694312ec8733fcdb145923391a5af7", "patch": "@@ -17,7 +17,7 @@ impl Trait for Foo {}\n \n pub fn main() {\n     let x: Box<Trait> = Box::new(Foo);\n-    let _y: &Trait = x; //~  ERROR mismatched types\n+    let _y: &Trait = x; //~ ERROR E0308\n                         //~| expected type `&Trait`\n                         //~| found type `std::boxed::Box<Trait>`\n }"}, {"sha": "1e444a6bebf9b23b573465a7090f60b174d52fa3", "filename": "src/test/compile-fail/issue-11374.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs?ref=5da19f2b69694312ec8733fcdb145923391a5af7", "patch": "@@ -33,5 +33,5 @@ pub fn for_stdin<'a>() -> Container<'a> {\n fn main() {\n     let mut c = for_stdin();\n     let mut v = Vec::new();\n-    c.read_to(v); //~ ERROR mismatched types\n+    c.read_to(v); //~ ERROR E0308\n }"}, {"sha": "ed1634441498be40d5a05f98c51f2c5b8019a02c", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=5da19f2b69694312ec8733fcdb145923391a5af7", "patch": "@@ -35,4 +35,5 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n fn main() {\n     check((3, 5));\n //~^ ERROR mismatched types\n+//~| HELP try with `&(3, 5)`\n }"}, {"sha": "bc3122bf71c0e21056a40d31e75e4a41f6e032ed", "filename": "src/test/ui/span/coerce-suggestions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs?ref=5da19f2b69694312ec8733fcdb145923391a5af7", "patch": "@@ -32,7 +32,6 @@ fn main() {\n     //~| NOTE types differ in mutability\n     //~| NOTE expected type `&mut std::string::String`\n     //~| NOTE found type `&std::string::String`\n-    //~| HELP try with `&mut y`\n     test2(&y);\n     //~^ ERROR E0308\n     //~| NOTE types differ in mutability"}, {"sha": "220b2f471da9ad7aef33e4d22a67ab811adbb778", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da19f2b69694312ec8733fcdb145923391a5af7/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=5da19f2b69694312ec8733fcdb145923391a5af7", "patch": "@@ -18,11 +18,7 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `&str`\n               found type `std::string::String`\n-   = help: here are some functions which might fulfill your needs:\n-           - .as_str()\n-           - .trim()\n-           - .trim_left()\n-           - .trim_right()\n+   = help: try with `&String::new()`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:30:10\n@@ -34,18 +30,18 @@ error[E0308]: mismatched types\n               found type `&std::string::String`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-suggestions.rs:36:11\n+  --> $DIR/coerce-suggestions.rs:35:11\n    |\n-36 |     test2(&y);\n+35 |     test2(&y);\n    |           ^^ types differ in mutability\n    |\n    = note: expected type `&mut i32`\n               found type `&std::string::String`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-suggestions.rs:42:9\n+  --> $DIR/coerce-suggestions.rs:41:9\n    |\n-42 |     f = box f;\n+41 |     f = box f;\n    |         ^^^^^ cyclic type of infinite size\n    |\n    = note: expected type `_`"}]}