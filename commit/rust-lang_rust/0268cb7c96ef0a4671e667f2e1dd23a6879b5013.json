{"sha": "0268cb7c96ef0a4671e667f2e1dd23a6879b5013", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjhjYjdjOTZlZjBhNDY3MWU2NjdmMmUxZGQyM2E2ODc5YjUwMTM=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-07-28T07:29:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-28T17:28:50Z"}, "message": "Get expr-moving fuzzer working again", "tree": {"sha": "6773f958a41fdb99250895e9ed61ac6c7a514bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6773f958a41fdb99250895e9ed61ac6c7a514bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0268cb7c96ef0a4671e667f2e1dd23a6879b5013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0268cb7c96ef0a4671e667f2e1dd23a6879b5013", "html_url": "https://github.com/rust-lang/rust/commit/0268cb7c96ef0a4671e667f2e1dd23a6879b5013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0268cb7c96ef0a4671e667f2e1dd23a6879b5013/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acac6abc8512971f56be7c12940c8016ae6e94ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/acac6abc8512971f56be7c12940c8016ae6e94ff", "html_url": "https://github.com/rust-lang/rust/commit/acac6abc8512971f56be7c12940c8016ae6e94ff"}], "stats": {"total": 145, "additions": 81, "deletions": 64}, "files": [{"sha": "0ecd69e19978eff5f48e07cd9100fa4768728c36", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 81, "deletions": 64, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/0268cb7c96ef0a4671e667f2e1dd23a6879b5013/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0268cb7c96ef0a4671e667f2e1dd23a6879b5013/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=0268cb7c96ef0a4671e667f2e1dd23a6879b5013", "patch": "@@ -21,29 +21,6 @@ import rustc::syntax::codemap;\n import rustc::syntax::parse::parser;\n import rustc::syntax::print::pprust;\n \n-/*\n-// Imports for \"the rest of driver::compile_input\"\n-import driver = rustc::driver::rustc; // see https://github.com/graydon/rust/issues/624\n-import rustc::back::link;\n-import rustc::driver::rustc::time;\n-import rustc::driver::session;\n-\n-import rustc::metadata::creader;\n-import rustc::metadata::cstore;\n-import rustc::syntax::parse::parser;\n-import rustc::syntax::parse::token;\n-import rustc::front;\n-import rustc::front::attr;\n-import rustc::middle;\n-import rustc::middle::trans;\n-import rustc::middle::resolve;\n-import rustc::middle::ty;\n-import rustc::middle::typeck;\n-import rustc::middle::tstate::ck;\n-import rustc::syntax::print::pp;\n-import rustc::util::ppaux;\n-import rustc::lib::llvm;\n-*/\n \n fn read_whole_file(filename: &str) -> str {\n     str::unsafe_from_bytes_ivec(ioivec::file_reader(filename).read_whole_stream())\n@@ -53,6 +30,8 @@ fn write_file(filename: &str, content: &str) {\n     ioivec::file_writer(filename,\n                         ~[ioivec::create,\n                           ioivec::truncate]).write_str(content);\n+    // Work around https://github.com/graydon/rust/issues/726\n+    std::run::run_program(\"chmod\", [\"644\", filename]);\n }\n \n fn file_contains(filename: &str, needle: &str) -> bool {\n@@ -71,7 +50,7 @@ fn find_rust_files(files: &mutable str[], path: str) {\n         } else { files += ~[path]; }\n     } else if (fs::file_is_dir(path) && str::find(path, \"compile-fail\") == -1)\n      {\n-        for p: str  in fs::list_dir(path) { find_rust_files(files, p); }\n+        for p in fs::list_dir(path) { find_rust_files(files, p); }\n     }\n }\n \n@@ -102,15 +81,10 @@ fn safe_to_steal(e: ast::expr_) -> bool {\n       ast::expr_binary(_, _, _) { false }\n       ast::expr_assign(_, _) { false }\n       ast::expr_assign_op(_, _, _) { false }\n-\n-\n-      // https://github.com/graydon/rust/issues/676\n-      ast::expr_ret(option::none.) {\n-        false\n-      }\n+      ast::expr_fail(option::none.) { false /* https://github.com/graydon/rust/issues/764 */ }\n+      ast::expr_ret(option::none.) { false }\n       ast::expr_put(option::none.) { false }\n \n-\n       _ {\n         true\n       }\n@@ -175,33 +149,50 @@ fn as_str(f: fn(ioivec::writer) ) -> str {\n     ret w.get_str();\n }\n \n-/*\n-fn pp_variants(&ast::crate crate, &codemap::codemap cmap, &str filename) {\n-    auto exprs = steal_exprs(crate);\n-    auto exprsL = ivec::len(exprs);\n+fn pp_variants(crate: &ast::crate, codemap: &codemap::codemap, filename: &str) {\n+    let exprs = steal_exprs(crate);\n+    let exprsL = ivec::len(exprs);\n     if (exprsL < 100u) {\n-        for each (uint i in under(uint::min(exprsL, 20u))) {\n+        for each i: uint in under(uint::min(exprsL, 20u)) {\n             log_err \"Replacing... \" + pprust::expr_to_str(@exprs.(i));\n-            for each (uint j in under(uint::min(exprsL, 5u))) {\n+            for each j: uint in under(uint::min(exprsL, 5u)) {\n                 log_err \"With... \" + pprust::expr_to_str(@exprs.(j));\n-                auto crate2 = @replace_expr_in_crate(crate, i, exprs.(j).node);\n-                check_roundtrip(crate2, cmap, filename + \".4.rs\");\n+                let crate2 = @replace_expr_in_crate(crate, i, exprs.(j).node);\n+                // It would be best to test the *crate* for stability, but testing the\n+                // string for stability is easier and ok for now.\n+                let str3 = as_str(bind pprust::print_crate(codemap, crate2, filename,\n+                                  ioivec::string_reader(\"\"), _,\n+                                  pprust::no_ann()));\n+                // 1u would be sane here, but the pretty-printer currently has lots of whitespace and paren issues,\n+                // and https://github.com/graydon/rust/issues/766 is hilarious.\n+                check_roundtrip_convergence(str3, 7u);\n             }\n         }\n     }\n }\n-*/\n \n fn parse_and_print(code: &str) -> str {\n-    let filename = \"\";\n+    let filename = \"tmp.rs\";\n     let codemap = codemap::new_codemap();\n+    //write_file(filename, code);\n     let crate =\n         parser::parse_crate_from_source_str(filename, code, ~[], codemap);\n     ret as_str(bind pprust::print_crate(codemap, crate, filename,\n                                         ioivec::string_reader(code), _,\n                                         pprust::no_ann()));\n }\n \n+fn content_is_dangerous_to_modify(code: &str) -> bool {\n+    let dangerous_patterns = [\n+         \"obj\", // not safe to steal; https://github.com/graydon/rust/issues/761\n+         \"#macro\", // not safe to steal things inside of it, because they have a special syntax\n+         \" be \" // don't want to replace its child with a non-call: \"Non-call expression in tail call\"\n+    ];\n+\n+    for p: str in dangerous_patterns { if contains(code, p) { ret true; } }\n+    ret false;\n+}\n+\n fn content_is_confusing(code: &str) -> bool {\n     let  // https://github.com/graydon/rust/issues/671\n          // https://github.com/graydon/rust/issues/669\n@@ -212,14 +203,21 @@ fn content_is_confusing(code: &str) -> bool {\n          // more precedence issues?\n         confusing_patterns =\n         [\"#macro\", \"][]\", \"][mutable]\", \"][mutable ]\", \"self\", \"spawn\",\n-         \"bind\"];\n-\n-    for p: str  in confusing_patterns { if contains(code, p) { ret true; } }\n+         \"bind\",\n+         \"\\n\\n\\n\\n\\n\", // https://github.com/graydon/rust/issues/759\n+         \" : \", // https://github.com/graydon/rust/issues/760\n+         \"if ret\",\n+         \"alt ret\",\n+         \"if fail\",\n+         \"alt fail\"\n+         ];\n+\n+    for p: str in confusing_patterns { if contains(code, p) { ret true; } }\n     ret false;\n }\n \n fn file_is_confusing(filename: &str) -> bool {\n-    let \n+    let\n \n          // https://github.com/graydon/rust/issues/674\n \n@@ -231,49 +229,67 @@ fn file_is_confusing(filename: &str) -> bool {\n          // --pretty normal\"???\n          confusing_files =\n         [\"block-expr-precedence.rs\", \"nil-pattern.rs\",\n-         \"syntax-extension-fmt.rs\"];\n+         \"syntax-extension-fmt.rs\",\n+         \"newtype.rs\" // modifying it hits something like https://github.com/graydon/rust/issues/670\n+         ];\n \n-    for f: str  in confusing_files { if contains(filename, f) { ret true; } }\n+    for f in confusing_files { if contains(filename, f) { ret true; } }\n \n     ret false;\n }\n \n-fn check_roundtrip_convergence(code: &str) {\n+fn check_roundtrip_convergence(code: &str, maxIters: uint) {\n \n-    let i = 0;\n+    let i = 0u;\n     let new = code;\n     let old = code;\n \n-    while i < 10 {\n+    while i < maxIters {\n         old = new;\n+        if content_is_confusing(old) { ret; }\n         new = parse_and_print(old);\n-        if content_is_confusing(new) { ret; }\n-        i += 1;\n-        log #fmt(\"cycle %d\", i);\n+        if old == new { break; }\n+        i += 1u;\n     }\n \n-\n-    if old != new {\n+    if old == new {\n+        log_err #fmt(\"Converged after %u iterations\", i);\n+    } else {\n+        log_err #fmt(\"Did not converge after %u iterations!\", i);\n         write_file(\"round-trip-a.rs\", old);\n         write_file(\"round-trip-b.rs\", new);\n-        std::run::run_program(\"kdiff3\",\n-                              [\"round-trip-a.rs\", \"round-trip-b.rs\"]);\n+        std::run::run_program(\"diff\", [\"-w\", \"-u\", \"round-trip-a.rs\", \"round-trip-b.rs\"]);\n         fail \"Mismatch\";\n     }\n }\n+\n fn check_convergence(files: &str[]) {\n     log_err #fmt(\"pp convergence tests: %u files\", ivec::len(files));\n-    for file: str  in files {\n-\n-        log_err #fmt(\"pp converge: %s\", file);\n+    for file in files {\n         if !file_is_confusing(file) {\n             let s = read_whole_file(file);\n-            if !content_is_confusing(s) { check_roundtrip_convergence(s); }\n+            if !content_is_confusing(s) {\n+                log_err #fmt(\"pp converge: %s\", file);\n+                // Change from 7u to 2u when https://github.com/graydon/rust/issues/759 is fixed\n+                check_roundtrip_convergence(s, 7u);\n+            }\n         }\n+    }\n+}\n \n-        //pprust::print_crate(cm, crate, file, devnull(), pprust::no_ann());\n-        // Currently hits https://github.com/graydon/rust/issues/675\n-        //pp_variants(*crate, cm, file);\n+fn check_convergence_of_variants(files: &str[]) {\n+    for file in files {\n+        if !file_is_confusing(file) {\n+            let s = read_whole_file(file);\n+            if content_is_dangerous_to_modify(s) || content_is_confusing(s) { cont; }\n+            log_err \"check_convergence_of_variants: \" + file;\n+            let codemap = codemap::new_codemap();\n+            let crate = parser::parse_crate_from_source_str(file, s, ~[], codemap);\n+            log_err as_str(bind pprust::print_crate(codemap, crate, file,\n+                                        ioivec::string_reader(s), _,\n+                                        pprust::no_ann()));\n+            pp_variants(*crate, codemap, file);\n+        }\n     }\n }\n \n@@ -287,6 +303,7 @@ fn main(args: vec[str]) {\n \n     find_rust_files(files, root);\n     check_convergence(files);\n+    check_convergence_of_variants(files);\n }\n \n // Local Variables:"}]}