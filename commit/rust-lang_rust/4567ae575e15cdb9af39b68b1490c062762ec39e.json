{"sha": "4567ae575e15cdb9af39b68b1490c062762ec39e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NjdhZTU3NWUxNWNkYjlhZjM5YjY4YjE0OTBjMDYyNzYyZWMzOWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-29T21:59:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-29T21:59:03Z"}, "message": "Merge #5554\n\n5554: Fix remove_dbg r=matklad a=petr-tik\n\nCloses #5129 \r\n\r\nAddresses two issues:\r\n- keep the parens from dbg!() in case the call is chained or there is\r\nsemantic difference if parens are excluded\r\n- Exclude the semicolon after the dbg!(); by checking if it was\r\naccidentally included in the macro_call\r\n\r\ninvestigated, but decided against:\r\nfix ast::MacroCall extraction to never include semicolons at the end -\r\nthis logic lives in rowan.\r\n\r\nDefensively shorten the macro_range if there is a semicolon token.\r\nDeleted unneccessary temp variable macro_args\r\n\r\nRenamed macro_content to \"paste_instead_of_dbg\", because it isn't a\r\nsimple extraction of text inside dbg!() anymore\n\nCo-authored-by: petr-tik <petr-tik@users.noreply.github.com>", "tree": {"sha": "13f8ea0191c808b5ec961b9a6b1d0e3be45f21eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13f8ea0191c808b5ec961b9a6b1d0e3be45f21eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4567ae575e15cdb9af39b68b1490c062762ec39e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIfEnCRBK7hj4Ov3rIwAAdHIIADRZ18Vu+IvHhiHsIGOyXkuY\nJYhhPJHyQ1zW69Pg8C7/tM1Cmr2yhFCTLfbzl8l7kwCCyr0/gzdgs/T4MJK0Yi5u\nDLmd/CqTNyWgG1Ulyibeww+d68sMj262qvj64IuYKyHawhM0QAdhH6+hn3sq5tx1\nJViZ5aMGTgjE0DotGiL5SRnNUU2LgCHzniDVJpOb5fxJ9d6OF8N8+BhhSHKYrveC\n4QOGIpl68Ejjp8ctzf7pI/9iOpcjmGpOCvtk1UvZIGGNUAf6A8T101tMavgHOiio\nZ/d0trYvYyV8HK+yGkBYZfidpsh+vvPdSHLKa9zljCiUSj/NCBB1qFGseErL8AU=\n=twDo\n-----END PGP SIGNATURE-----\n", "payload": "tree 13f8ea0191c808b5ec961b9a6b1d0e3be45f21eb\nparent bd5d236724ff1418b3d3e70fd946374db67479d7\nparent 6ea393a8d181dfeebbab9cc1f8a08af7a675be14\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596059943 +0000\ncommitter GitHub <noreply@github.com> 1596059943 +0000\n\nMerge #5554\n\n5554: Fix remove_dbg r=matklad a=petr-tik\n\nCloses #5129 \r\n\r\nAddresses two issues:\r\n- keep the parens from dbg!() in case the call is chained or there is\r\nsemantic difference if parens are excluded\r\n- Exclude the semicolon after the dbg!(); by checking if it was\r\naccidentally included in the macro_call\r\n\r\ninvestigated, but decided against:\r\nfix ast::MacroCall extraction to never include semicolons at the end -\r\nthis logic lives in rowan.\r\n\r\nDefensively shorten the macro_range if there is a semicolon token.\r\nDeleted unneccessary temp variable macro_args\r\n\r\nRenamed macro_content to \"paste_instead_of_dbg\", because it isn't a\r\nsimple extraction of text inside dbg!() anymore\n\nCo-authored-by: petr-tik <petr-tik@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4567ae575e15cdb9af39b68b1490c062762ec39e", "html_url": "https://github.com/rust-lang/rust/commit/4567ae575e15cdb9af39b68b1490c062762ec39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4567ae575e15cdb9af39b68b1490c062762ec39e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd5d236724ff1418b3d3e70fd946374db67479d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5d236724ff1418b3d3e70fd946374db67479d7", "html_url": "https://github.com/rust-lang/rust/commit/bd5d236724ff1418b3d3e70fd946374db67479d7"}, {"sha": "6ea393a8d181dfeebbab9cc1f8a08af7a675be14", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea393a8d181dfeebbab9cc1f8a08af7a675be14", "html_url": "https://github.com/rust-lang/rust/commit/6ea393a8d181dfeebbab9cc1f8a08af7a675be14"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "9430ce1b5b85a3d6ef1b2027e811f7abc11cd2ce", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 85, "deletions": 9, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4567ae575e15cdb9af39b68b1490c062762ec39e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4567ae575e15cdb9af39b68b1490c062762ec39e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=4567ae575e15cdb9af39b68b1490c062762ec39e", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::{\n     ast::{self, AstNode},\n-    TextSize, T,\n+    TextRange, TextSize, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -27,19 +27,33 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     }\n \n-    let macro_range = macro_call.syntax().text_range();\n+    let is_leaf = macro_call.syntax().next_sibling().is_none();\n \n-    let macro_content = {\n-        let macro_args = macro_call.token_tree()?.syntax().clone();\n+    let macro_end = if macro_call.semicolon_token().is_some() {\n+        macro_call.syntax().text_range().end() - TextSize::of(';')\n+    } else {\n+        macro_call.syntax().text_range().end()\n+    };\n \n-        let text = macro_args.text();\n-        let without_parens = TextSize::of('(')..text.len() - TextSize::of(')');\n-        text.slice(without_parens).to_string()\n+    // macro_range determines what will be deleted and replaced with macro_content\n+    let macro_range = TextRange::new(macro_call.syntax().text_range().start(), macro_end);\n+    let paste_instead_of_dbg = {\n+        let text = macro_call.token_tree()?.syntax().text();\n+\n+        // leafiness determines if we should include the parenthesis or not\n+        let slice_index: TextRange = if is_leaf {\n+            // leaf means - we can extract the contents of the dbg! in text\n+            TextRange::new(TextSize::of('('), text.len() - TextSize::of(')'))\n+        } else {\n+            // not leaf - means we should keep the parens\n+            TextRange::up_to(text.len())\n+        };\n+        text.slice(slice_index).to_string()\n     };\n \n     let target = macro_call.syntax().text_range();\n     acc.add(AssistId(\"remove_dbg\", AssistKind::Refactor), \"Remove dbg!()\", target, |builder| {\n-        builder.replace(macro_range, macro_content);\n+        builder.replace(macro_range, paste_instead_of_dbg);\n     })\n }\n \n@@ -99,6 +113,7 @@ fn foo(n: usize) {\n \",\n         );\n     }\n+\n     #[test]\n     fn test_remove_dbg_with_brackets_and_braces() {\n         check_assist(remove_dbg, \"dbg![<|>1 + 1]\", \"1 + 1\");\n@@ -113,7 +128,7 @@ fn foo(n: usize) {\n     }\n \n     #[test]\n-    fn remove_dbg_target() {\n+    fn test_remove_dbg_target() {\n         check_assist_target(\n             remove_dbg,\n             \"\n@@ -126,4 +141,65 @@ fn foo(n: usize) {\n             \"dbg!(n.checked_sub(4))\",\n         );\n     }\n+\n+    #[test]\n+    fn test_remove_dbg_keep_semicolon() {\n+        // https://github.com/rust-analyzer/rust-analyzer/issues/5129#issuecomment-651399779\n+        // not quite though\n+        // adding a comment at the end of the line makes\n+        // the ast::MacroCall to include the semicolon at the end\n+        check_assist(\n+            remove_dbg,\n+            r#\"let res = <|>dbg!(1 * 20); // needless comment\"#,\n+            r#\"let res = 1 * 20; // needless comment\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_remove_dbg_keep_expression() {\n+        check_assist(\n+            remove_dbg,\n+            r#\"let res = <|>dbg!(a + b).foo();\"#,\n+            r#\"let res = (a + b).foo();\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_remove_dbg_from_inside_fn() {\n+        check_assist_target(\n+            remove_dbg,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+\n+fn main() {\n+    let x = square(dbg<|>!(5 + 10));\n+    println!(\"{}\", x);\n+}\"#,\n+            \"dbg!(5 + 10)\",\n+        );\n+\n+        check_assist(\n+            remove_dbg,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+\n+fn main() {\n+    let x = square(dbg<|>!(5 + 10));\n+    println!(\"{}\", x);\n+}\"#,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+\n+fn main() {\n+    let x = square(5 + 10);\n+    println!(\"{}\", x);\n+}\"#,\n+        );\n+    }\n }"}]}