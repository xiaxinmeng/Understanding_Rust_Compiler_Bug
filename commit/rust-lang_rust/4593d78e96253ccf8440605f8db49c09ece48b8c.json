{"sha": "4593d78e96253ccf8440605f8db49c09ece48b8c", "node_id": "C_kwDOAAsO6NoAKDQ1OTNkNzhlOTYyNTNjY2Y4NDQwNjA1ZjhkYjQ5YzA5ZWNlNDhiOGM", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-10-08T10:10:52Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-10-08T13:05:07Z"}, "message": "Default to disabling the new pass manager for the s390x targets.", "tree": {"sha": "c0b87227fe68f6f42a0a673b7dd2f6e74b294caf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b87227fe68f6f42a0a673b7dd2f6e74b294caf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4593d78e96253ccf8440605f8db49c09ece48b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4593d78e96253ccf8440605f8db49c09ece48b8c", "html_url": "https://github.com/rust-lang/rust/commit/4593d78e96253ccf8440605f8db49c09ece48b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4593d78e96253ccf8440605f8db49c09ece48b8c/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44995f7afb18775913618ae50601be31b9f9dead", "url": "https://api.github.com/repos/rust-lang/rust/commits/44995f7afb18775913618ae50601be31b9f9dead", "html_url": "https://github.com/rust-lang/rust/commit/44995f7afb18775913618ae50601be31b9f9dead"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "97780de9ba4af4d4e9ae0374f835d82cb11a0ffd", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4593d78e96253ccf8440605f8db49c09ece48b8c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4593d78e96253ccf8440605f8db49c09ece48b8c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=4593d78e96253ccf8440605f8db49c09ece48b8c", "patch": "@@ -596,7 +596,7 @@ pub(crate) fn run_pass_manager(\n     //      tools/lto/LTOCodeGenerator.cpp\n     debug!(\"running the pass manager\");\n     unsafe {\n-        if write::should_use_new_llvm_pass_manager(config) {\n+        if write::should_use_new_llvm_pass_manager(cgcx, config) {\n             let opt_stage = if thin { llvm::OptStage::ThinLTO } else { llvm::OptStage::FatLTO };\n             let opt_level = config.opt_level.unwrap_or(config::OptLevel::No);\n             write::optimize_with_new_llvm_pass_manager("}, {"sha": "380dfd387235d1b6037c193db8aefdf8a7d7aa22", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4593d78e96253ccf8440605f8db49c09ece48b8c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4593d78e96253ccf8440605f8db49c09ece48b8c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=4593d78e96253ccf8440605f8db49c09ece48b8c", "patch": "@@ -377,10 +377,19 @@ fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n         .map(|path_buf| CString::new(path_buf.to_string_lossy().as_bytes()).unwrap())\n }\n \n-pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n+pub(crate) fn should_use_new_llvm_pass_manager(\n+    cgcx: &CodegenContext<LlvmCodegenBackend>,\n+    config: &ModuleConfig,\n+) -> bool {\n     // The new pass manager is enabled by default for LLVM >= 13.\n     // This matches Clang, which also enables it since Clang 13.\n-    config.new_llvm_pass_manager.unwrap_or_else(|| llvm_util::get_version() >= (13, 0, 0))\n+\n+    // FIXME: There are some perf issues with the new pass manager\n+    // when targeting s390x, so it is temporarily disabled for that\n+    // arch, see https://github.com/rust-lang/rust/issues/89609\n+    config\n+        .new_llvm_pass_manager\n+        .unwrap_or_else(|| cgcx.target_arch != \"s390x\" && llvm_util::get_version() >= (13, 0, 0))\n }\n \n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n@@ -482,7 +491,7 @@ pub(crate) unsafe fn optimize(\n     }\n \n     if let Some(opt_level) = config.opt_level {\n-        if should_use_new_llvm_pass_manager(config) {\n+        if should_use_new_llvm_pass_manager(cgcx, config) {\n             let opt_stage = match cgcx.lto {\n                 Lto::Fat => llvm::OptStage::PreLinkFatLTO,\n                 Lto::Thin | Lto::ThinLocal => llvm::OptStage::PreLinkThinLTO,"}]}