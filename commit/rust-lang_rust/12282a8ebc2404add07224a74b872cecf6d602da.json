{"sha": "12282a8ebc2404add07224a74b872cecf6d602da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMjgyYThlYmMyNDA0YWRkMDcyMjRhNzRiODcyY2VjZjZkNjAyZGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-22T13:38:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-30T18:21:58Z"}, "message": "Implement unsize array -> slice and trait object -> trait object", "tree": {"sha": "1f3759d2bc6b766d0cb32e9db1b68f5685775242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f3759d2bc6b766d0cb32e9db1b68f5685775242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12282a8ebc2404add07224a74b872cecf6d602da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12282a8ebc2404add07224a74b872cecf6d602da", "html_url": "https://github.com/rust-lang/rust/commit/12282a8ebc2404add07224a74b872cecf6d602da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12282a8ebc2404add07224a74b872cecf6d602da/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5082f7da85303e5aee97949e98fd137fa77f845", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5082f7da85303e5aee97949e98fd137fa77f845", "html_url": "https://github.com/rust-lang/rust/commit/b5082f7da85303e5aee97949e98fd137fa77f845"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "dfca3142301dc190a21ac360dff2e19ba4d95436", "filename": "examples/example.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12282a8ebc2404add07224a74b872cecf6d602da/examples%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12282a8ebc2404add07224a74b872cecf6d602da/examples%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fexample.rs?ref=12282a8ebc2404add07224a74b872cecf6d602da", "patch": "@@ -153,6 +153,10 @@ fn repeat_array() -> [u8; 3] {\n     [0; 3]\n }\n \n+fn array_as_slice(arr: &[u8; 3]) -> &[u8] {\n+    arr\n+}\n+\n /*unsafe fn use_ctlz_nonzero(a: u16) -> u16 {\n     intrinsics::ctlz_nonzero(a)\n }*/"}, {"sha": "c775beef2f09ea5a9b6e90a57f11864af5ba3c59", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12282a8ebc2404add07224a74b872cecf6d602da/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12282a8ebc2404add07224a74b872cecf6d602da/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=12282a8ebc2404add07224a74b872cecf6d602da", "patch": "@@ -43,7 +43,8 @@ static NUM_REF: &'static u8 = unsafe { &NUM };\n \n fn main() {\n     unsafe {\n-        let (ptr, _): (*const u8, usize) = intrinsics::transmute(\"Hello!\\0\");\n+        let slice: &[u8] = b\"Hello!\\0\" as &[u8; 7];\n+        let ptr: *const u8 = slice as *const [u8] as *const u8;\n         puts(ptr);\n     }\n "}, {"sha": "9b44cd2e4b73db449d17619b6c418604aff86d4b", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12282a8ebc2404add07224a74b872cecf6d602da/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12282a8ebc2404add07224a74b872cecf6d602da/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=12282a8ebc2404add07224a74b872cecf6d602da", "patch": "@@ -458,7 +458,8 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     unimplemented!(\"rval closure_fn_ptr {:?} {:?}\", operand, ty)\n                 }\n                 Rvalue::Cast(CastKind::Unsize, operand, ty) => {\n-                    unimpl!(\"rval unsize {:?} {:?}\", operand, ty);\n+                    let operand = trans_operand(fx, operand);\n+                    operand.unsize_value(fx, lval);\n                 }\n                 Rvalue::Discriminant(place) => {\n                     let place = trans_place(fx, place).to_cvalue(fx);"}, {"sha": "b785177251fa4cb90783f5947c74be6c035a68c1", "filename": "src/common.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/12282a8ebc2404add07224a74b872cecf6d602da/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12282a8ebc2404add07224a74b872cecf6d602da/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=12282a8ebc2404add07224a74b872cecf6d602da", "patch": "@@ -216,6 +216,43 @@ impl<'tcx> CValue<'tcx> {\n         CValue::ByRef(field_ptr, field_layout)\n     }\n \n+    pub fn unsize_value<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n+        if self.layout().ty == dest.layout().ty {\n+            dest.write_cvalue(fx, self); // FIXME this shouldn't happen (rust-lang/rust#53602)\n+            return;\n+        }\n+        match &self.layout().ty.sty {\n+            ty::Ref(_, ty, _) | ty::RawPtr(TypeAndMut { ty, mutbl: _ }) => {\n+                let (ptr, extra) = match ptr_referee(dest.layout().ty).sty {\n+                    ty::Slice(slice_elem_ty) => match ty.sty {\n+                        ty::Array(array_elem_ty, size) => {\n+                            assert_eq!(slice_elem_ty, array_elem_ty);\n+                            let ptr = self.load_value(fx);\n+                            let extra = fx\n+                                .bcx\n+                                .ins()\n+                                .iconst(fx.module.pointer_type(), size.unwrap_usize(fx.tcx) as i64);\n+                            (ptr, extra)\n+                        }\n+                        _ => bug!(\"unsize non array {:?} to slice\", ty),\n+                    },\n+                    ty::Dynamic(_, _) => match ty.sty {\n+                        ty::Dynamic(_, _) => self.load_value_pair(fx),\n+                        _ => unimpl!(\"unsize of type ... to {:?}\", dest.layout().ty),\n+                    },\n+                    _ => bug!(\n+                        \"unsize of type {:?} to {:?}\",\n+                        self.layout().ty,\n+                        dest.layout().ty\n+                    ),\n+                };\n+                println!(\"ty {:?}\", self.layout().ty);\n+                dest.write_cvalue(fx, CValue::ByValPair(ptr, extra, dest.layout()));\n+            }\n+            ty => unimpl!(\"unsize of non ptr {:?}\", ty),\n+        }\n+    }\n+\n     pub fn const_val<'a>(\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         ty: Ty<'tcx>,"}]}