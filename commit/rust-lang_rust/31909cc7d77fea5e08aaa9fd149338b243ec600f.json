{"sha": "31909cc7d77fea5e08aaa9fd149338b243ec600f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOTA5Y2M3ZDc3ZmVhNWUwOGFhYTlmZDE0OTMzOGIyNDNlYzYwMGY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-03T15:23:21Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-03T15:23:21Z"}, "message": "By pass unbind $var while mbe expanding", "tree": {"sha": "56c826ab4dd6cc5f531af919f91184e3aa50d248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c826ab4dd6cc5f531af919f91184e3aa50d248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31909cc7d77fea5e08aaa9fd149338b243ec600f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31909cc7d77fea5e08aaa9fd149338b243ec600f", "html_url": "https://github.com/rust-lang/rust/commit/31909cc7d77fea5e08aaa9fd149338b243ec600f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31909cc7d77fea5e08aaa9fd149338b243ec600f/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8e46100d6c2ae617e1321bb01ce5a2f3cb37c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e46100d6c2ae617e1321bb01ce5a2f3cb37c6a", "html_url": "https://github.com/rust-lang/rust/commit/e8e46100d6c2ae617e1321bb01ce5a2f3cb37c6a"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "c146252a48ec32bf007f45f53936570f60f583d2", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31909cc7d77fea5e08aaa9fd149338b243ec600f/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31909cc7d77fea5e08aaa9fd149338b243ec600f/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=31909cc7d77fea5e08aaa9fd149338b243ec600f", "patch": "@@ -154,4 +154,4 @@ pub(crate) struct Var {\n }\n \n #[cfg(test)]\n-mod tests;\n\\ No newline at end of file\n+mod tests;"}, {"sha": "8f8a798551b20264ae41c3c18fdbd8b4a06c567f", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/31909cc7d77fea5e08aaa9fd149338b243ec600f/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31909cc7d77fea5e08aaa9fd149338b243ec600f/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=31909cc7d77fea5e08aaa9fd149338b243ec600f", "patch": "@@ -84,6 +84,10 @@ enum Binding {\n }\n \n impl Bindings {\n+    fn contains(&self, name: &SmolStr) -> bool {\n+        self.inner.contains_key(name)\n+    }\n+\n     fn get(&self, name: &SmolStr, nesting: &[usize]) -> Result<&tt::TokenTree, ExpandError> {\n         let mut b = self\n             .inner\n@@ -458,6 +462,33 @@ fn expand_tt(\n                     // FIXME: Properly handle $crate token\n                     tt::Leaf::from(tt::Ident { text: \"$crate\".into(), id: TokenId::unspecified() })\n                         .into()\n+                } else if !ctx.bindings.contains(&v.text) {\n+                    // Note that it is possible to have a `$var` inside a macro which is not bound.\n+                    // For example:\n+                    // ```\n+                    // macro_rules! foo {\n+                    //     ($a:ident, $b:ident, $c:tt) => {\n+                    //         macro_rules! bar {\n+                    //             ($bi:ident) => {\n+                    //                 fn $bi() -> u8 {$c}\n+                    //             }\n+                    //         }\n+                    //     }\n+                    // ```\n+                    // We just treat it a normal tokens\n+                    tt::Subtree {\n+                        delimiter: tt::Delimiter::None,\n+                        token_trees: vec![\n+                            tt::Leaf::from(tt::Punct { char: '$', spacing: tt::Spacing::Alone })\n+                                .into(),\n+                            tt::Leaf::from(tt::Ident {\n+                                text: v.text.clone(),\n+                                id: TokenId::unspecified(),\n+                            })\n+                            .into(),\n+                        ],\n+                    }\n+                    .into()\n                 } else {\n                     let tkn = ctx.bindings.get(&v.text, &ctx.nesting)?.clone();\n                     ctx.var_expanded = true;\n@@ -484,11 +515,12 @@ mod tests {\n \n     #[test]\n     fn test_expand_rule() {\n-        assert_err(\n-            \"($i:ident) => ($j)\",\n-            \"foo!{a}\",\n-            ExpandError::BindingError(String::from(\"could not find binding `j`\")),\n-        );\n+        // FIXME: The missing $var check should be in parsing phase\n+        // assert_err(\n+        //     \"($i:ident) => ($j)\",\n+        //     \"foo!{a}\",\n+        //     ExpandError::BindingError(String::from(\"could not find binding `j`\")),\n+        // );\n \n         assert_err(\n             \"($($i:ident);*) => ($i)\","}, {"sha": "cdbd4dd1c1371186662739452b9e037198cf11fd", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31909cc7d77fea5e08aaa9fd149338b243ec600f/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31909cc7d77fea5e08aaa9fd149338b243ec600f/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=31909cc7d77fea5e08aaa9fd149338b243ec600f", "patch": "@@ -952,7 +952,7 @@ macro_rules! foo {\n         MacroKind::Items,\n         &rules,\n         r#\"foo!(x,y, 1);\"#,\n-        r#\"macro_rules ! bar {(bi : ident) => {fn bi () -> u8 {1}}} bar ! (x) ; fn y () -> u8 {1}\"#,\n+        r#\"macro_rules ! bar {($ bi : ident) => {fn $ bi () -> u8 {1}}} bar ! (x) ; fn y () -> u8 {1}\"#,\n     );\n }\n "}]}