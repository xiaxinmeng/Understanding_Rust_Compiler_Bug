{"sha": "910bf840cce1da57b96f7ac15f8b803675bb8a3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMGJmODQwY2NlMWRhNTdiOTZmN2FjMTVmOGI4MDM2NzViYjhhM2I=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-15T09:09:20Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-16T10:25:37Z"}, "message": "Always print `aborting due to n previous error(s)` and only print it once for multi-threaded code", "tree": {"sha": "8585aa1f7dc9e0687702611e02a149d5b6b98f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8585aa1f7dc9e0687702611e02a149d5b6b98f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910bf840cce1da57b96f7ac15f8b803675bb8a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910bf840cce1da57b96f7ac15f8b803675bb8a3b", "html_url": "https://github.com/rust-lang/rust/commit/910bf840cce1da57b96f7ac15f8b803675bb8a3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910bf840cce1da57b96f7ac15f8b803675bb8a3b/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b43dcbb4c62a36b68afd7f9a1bf12aed1b53d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b43dcbb4c62a36b68afd7f9a1bf12aed1b53d7d", "html_url": "https://github.com/rust-lang/rust/commit/3b43dcbb4c62a36b68afd7f9a1bf12aed1b53d7d"}], "stats": {"total": 91, "additions": 50, "deletions": 41}, "files": [{"sha": "2a15d57a262e14719eaff6b2d257fd34a3eea30f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/910bf840cce1da57b96f7ac15f8b803675bb8a3b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910bf840cce1da57b96f7ac15f8b803675bb8a3b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=910bf840cce1da57b96f7ac15f8b803675bb8a3b", "patch": "@@ -63,6 +63,7 @@ use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::OnDrop;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::CompileIncomplete;\n use rustc::session::config::{Input, PrintRequest, ErrorOutputType};\n@@ -515,30 +516,35 @@ fn run_compiler_impl<'a>(args: &[String],\n     target_features::add_configuration(&mut cfg, &sess, &*trans);\n     sess.parse_sess.config = cfg;\n \n-    let plugins = sess.opts.debugging_opts.extra_plugins.clone();\n-\n-    let cstore = CStore::new(trans.metadata_loader());\n-\n-    do_or_return!(callbacks.late_callback(&*trans,\n-                                          &matches,\n-                                          &sess,\n-                                          &cstore,\n-                                          &input,\n-                                          &odir,\n-                                          &ofile), Some(sess));\n-\n-    let control = callbacks.build_controller(&sess, &matches);\n-\n-    (driver::compile_input(trans,\n-                           &sess,\n-                           &cstore,\n-                           &input_file_path,\n-                           &input,\n-                           &odir,\n-                           &ofile,\n-                           Some(plugins),\n-                           &control),\n-     Some(sess))\n+    let result = {\n+        let plugins = sess.opts.debugging_opts.extra_plugins.clone();\n+\n+        let cstore = CStore::new(trans.metadata_loader());\n+\n+        do_or_return!(callbacks.late_callback(&*trans,\n+                                              &matches,\n+                                              &sess,\n+                                              &cstore,\n+                                              &input,\n+                                              &odir,\n+                                              &ofile), Some(sess));\n+\n+        let _sess_abort_error = OnDrop(|| sess.diagnostic().print_error_count());\n+\n+        let control = callbacks.build_controller(&sess, &matches);\n+\n+        driver::compile_input(trans,\n+                              &sess,\n+                              &cstore,\n+                              &input_file_path,\n+                              &input,\n+                              &odir,\n+                              &ofile,\n+                              Some(plugins),\n+                              &control)\n+    };\n+\n+    (result, Some(sess))\n }\n \n // Extract output directory and file from matches."}, {"sha": "b3265c21884be8918c0567bbec62924d39c04d19", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/910bf840cce1da57b96f7ac15f8b803675bb8a3b/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910bf840cce1da57b96f7ac15f8b803675bb8a3b/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=910bf840cce1da57b96f7ac15f8b803675bb8a3b", "patch": "@@ -555,21 +555,15 @@ impl Handler {\n     pub fn has_errors(&self) -> bool {\n         self.err_count() > 0\n     }\n-    pub fn abort_if_errors(&self) {\n-        let s;\n-        match self.err_count() {\n-            0 => {\n-                if let Some(bug) = self.delayed_span_bug.borrow_mut().take() {\n-                    DiagnosticBuilder::new_diagnostic(self, bug).emit();\n-                }\n-                return;\n-            }\n-            1 => s = \"aborting due to previous error\".to_string(),\n-            _ => {\n-                s = format!(\"aborting due to {} previous errors\", self.err_count());\n-            }\n-        }\n-        let err = self.fatal(&s);\n+\n+    pub fn print_error_count(&self) {\n+        let s = match self.err_count() {\n+            0 => return,\n+            1 => \"aborting due to previous error\".to_string(),\n+            _ => format!(\"aborting due to {} previous errors\", self.err_count())\n+        };\n+\n+        let _ = self.fatal(&s);\n \n         let can_show_explain = self.emitter.borrow().should_show_explain();\n         let are_there_diagnostics = !self.tracked_diagnostic_codes.borrow().is_empty();\n@@ -600,8 +594,16 @@ impl Handler {\n                 }\n             }\n         }\n+    }\n \n-        err.raise();\n+    pub fn abort_if_errors(&self) {\n+        if self.err_count() == 0 {\n+            if let Some(bug) = self.delayed_span_bug.borrow_mut().take() {\n+                DiagnosticBuilder::new_diagnostic(self, bug).emit();\n+            }\n+            return;\n+        }\n+        FatalError.raise();\n     }\n     pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) {\n         if lvl == Warning && !self.flags.can_emit_warnings {"}, {"sha": "bc69fbdb7783733fddf68d983cfd5fe06682226b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/910bf840cce1da57b96f7ac15f8b803675bb8a3b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910bf840cce1da57b96f7ac15f8b803675bb8a3b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=910bf840cce1da57b96f7ac15f8b803675bb8a3b", "patch": "@@ -27,6 +27,7 @@ use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n use util::nodemap::FxHashSet;\n+use errors::FatalError;\n \n use std::iter;\n use syntax::{abi, ast};\n@@ -337,7 +338,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             Def::Trait(trait_def_id) => trait_def_id,\n             Def::TraitAlias(alias_def_id) => alias_def_id,\n             Def::Err => {\n-                self.tcx().sess.fatal(\"cannot continue compilation due to previous error\");\n+                FatalError.raise();\n             }\n             _ => unreachable!(),\n         }"}]}