{"sha": "95ef9dedb48061617dd41f8f70b00bf636d0ca99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZWY5ZGVkYjQ4MDYxNjE3ZGQ0MWY4ZjcwYjAwYmY2MzZkMGNhOTk=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-01T21:51:57Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-10T22:53:01Z"}, "message": "Escape quotes in string literals", "tree": {"sha": "bac6d2a89cb72b74f0c1e231292844251fc79f69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bac6d2a89cb72b74f0c1e231292844251fc79f69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95ef9dedb48061617dd41f8f70b00bf636d0ca99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95ef9dedb48061617dd41f8f70b00bf636d0ca99", "html_url": "https://github.com/rust-lang/rust/commit/95ef9dedb48061617dd41f8f70b00bf636d0ca99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95ef9dedb48061617dd41f8f70b00bf636d0ca99/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e471ece31abb7e329bffef977e1bd0c7d876b8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e471ece31abb7e329bffef977e1bd0c7d876b8c", "html_url": "https://github.com/rust-lang/rust/commit/8e471ece31abb7e329bffef977e1bd0c7d876b8c"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "ea98d94f41236de86de302f7d5afb044800c5cb8", "filename": "tests/system.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/95ef9dedb48061617dd41f8f70b00bf636d0ca99/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ef9dedb48061617dd41f8f70b00bf636d0ca99/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=95ef9dedb48061617dd41f8f70b00bf636d0ca99", "patch": "@@ -26,9 +26,9 @@ use rustfmt::rustfmt_diff::*;\n static DIFF_CONTEXT_SIZE: usize = 3;\n \n fn get_path_string(dir_entry: io::Result<fs::DirEntry>) -> String {\n-    let path = dir_entry.ok().expect(\"Couldn't get DirEntry.\").path();\n+    let path = dir_entry.ok().expect(\"Couldn\\'t get DirEntry.\").path();\n \n-    path.to_str().expect(\"Couldn't stringify path.\").to_owned()\n+    path.to_str().expect(\"Couldn\\'t stringify path.\").to_owned()\n }\n \n // Integration tests. The files in the tests/source are formatted and compared\n@@ -40,7 +40,7 @@ fn get_path_string(dir_entry: io::Result<fs::DirEntry>) -> String {\n #[test]\n fn system_tests() {\n     // Get all files in the tests/source directory\n-    let files = fs::read_dir(\"tests/source\").ok().expect(\"Couldn't read source dir.\");\n+    let files = fs::read_dir(\"tests/source\").ok().expect(\"Couldn\\'t read source dir.\");\n     // turn a DirEntry into a String that represents the relative path to the file\n     let files = files.map(get_path_string);\n \n@@ -56,9 +56,9 @@ fn system_tests() {\n #[test]\n fn idempotence_tests() {\n     // Get all files in the tests/target directory\n-    let files = fs::read_dir(\"tests/target\").ok().expect(\"Couldn't read target dir.\");\n-    let files = files.chain(fs::read_dir(\"tests\").ok().expect(\"Couldn't read tests dir.\"));\n-    let files = files.chain(fs::read_dir(\"src/bin\").ok().expect(\"Couldn't read src dir.\"));\n+    let files = fs::read_dir(\"tests/target\").ok().expect(\"Couldn\\'t read target dir.\");\n+    let files = files.chain(fs::read_dir(\"tests\").ok().expect(\"Couldn\\'t read tests dir.\"));\n+    let files = files.chain(fs::read_dir(\"src/bin\").ok().expect(\"Couldn\\'t read src dir.\"));\n     // turn a DirEntry into a String that represents the relative path to the file\n     let files = files.map(get_path_string);\n     // hack because there's no `IntoIterator` impl for `[T; N]`\n@@ -137,17 +137,21 @@ fn get_config(config_file: Option<&str>) -> Box<Config> {\n         }\n     };\n \n-    let mut def_config_file = fs::File::open(config_file_name).ok().expect(\"Couldn't open config.\");\n+    let mut def_config_file = fs::File::open(config_file_name)\n+                                  .ok()\n+                                  .expect(\"Couldn\\'t open config.\");\n     let mut def_config = String::new();\n-    def_config_file.read_to_string(&mut def_config).ok().expect(\"Couldn't read config.\");\n+    def_config_file.read_to_string(&mut def_config).ok().expect(\"Couldn\\'t read config.\");\n \n     Box::new(Config::from_toml(&def_config))\n }\n \n // Reads significant comments of the form: // rustfmt-key: value\n // into a hash map.\n fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n-    let file = fs::File::open(file_name).ok().expect(&format!(\"Couldn't read file {}.\", file_name));\n+    let file = fs::File::open(file_name)\n+                   .ok()\n+                   .expect(&format!(\"Couldn\\'t read file {}.\", file_name));\n     let reader = BufReader::new(file);\n     let pattern = r\"^\\s*//\\s*rustfmt-([^:]+):\\s*(\\S+)\";\n     let regex = regex::Regex::new(&pattern).ok().expect(\"Failed creating pattern 1.\");\n@@ -164,8 +168,8 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n             regex.captures_iter(&line)\n                 .next()\n                 .map(|capture| {\n-                    (capture.at(1).expect(\"Couldn't unwrap capture.\").to_owned(),\n-                     capture.at(2).expect(\"Couldn't unwrap capture.\").to_owned())\n+                    (capture.at(1).expect(\"Couldn\\'t unwrap capture.\").to_owned(),\n+                     capture.at(2).expect(\"Couldn\\'t unwrap capture.\").to_owned())\n                 })\n         })\n         .collect()\n@@ -183,7 +187,7 @@ fn handle_result(result: HashMap<String, String>) {\n \n         // If file is in tests/source, compare to file with same name in tests/target.\n         let target = get_target(&file_name, sig_comments.get(\"target\").map(|x| &(*x)[..]));\n-        let mut f = fs::File::open(&target).ok().expect(\"Couldn't open target.\");\n+        let mut f = fs::File::open(&target).ok().expect(\"Couldn\\'t open target.\");\n \n         let mut text = String::new();\n         // TODO: speedup by running through bytes iterator"}]}