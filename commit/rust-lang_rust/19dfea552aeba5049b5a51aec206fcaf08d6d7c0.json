{"sha": "19dfea552aeba5049b5a51aec206fcaf08d6d7c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZGZlYTU1MmFlYmE1MDQ5YjVhNTFhZWMyMDZmY2FmMDhkNmQ3YzA=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-06-26T18:27:37Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-15T07:11:03Z"}, "message": "Slight cleanup", "tree": {"sha": "aed0cbf193c61a32a8f64a67a4bf8a09d6b2fe05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aed0cbf193c61a32a8f64a67a4bf8a09d6b2fe05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19dfea552aeba5049b5a51aec206fcaf08d6d7c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19dfea552aeba5049b5a51aec206fcaf08d6d7c0", "html_url": "https://github.com/rust-lang/rust/commit/19dfea552aeba5049b5a51aec206fcaf08d6d7c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19dfea552aeba5049b5a51aec206fcaf08d6d7c0/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cf6edb4c539f93ea1409c0d31b2ccd2e99620a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf6edb4c539f93ea1409c0d31b2ccd2e99620a0", "html_url": "https://github.com/rust-lang/rust/commit/5cf6edb4c539f93ea1409c0d31b2ccd2e99620a0"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "103e3d9a9ad437b925d528e8897ee912b94d734c", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19dfea552aeba5049b5a51aec206fcaf08d6d7c0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dfea552aeba5049b5a51aec206fcaf08d6d7c0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fbound_region_errors.rs?ref=19dfea552aeba5049b5a51aec206fcaf08d6d7c0", "patch": "@@ -119,7 +119,7 @@ impl<'tcx, F, G> ToUniverseInfo<'tcx> for Canonical<'tcx, type_op::custom::Custo\n \n #[allow(unused_lifetimes)]\n trait TypeOpInfo<'tcx> {\n-    /// Returns an rrror to be reported if rerunning the type op fails to\n+    /// Returns an error to be reported if rerunning the type op fails to\n     /// recover the error's cause.\n     fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx>;\n \n@@ -283,9 +283,6 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n     // when we're going to emit an error here anyway.\n     let _errors = fulfill_cx.select_all_or_error(infcx).err().unwrap_or_else(Vec::new);\n \n-    let region_obligations = infcx.take_registered_region_obligations();\n-    debug!(?region_obligations);\n-\n     let (sub_region, cause) = infcx.with_region_constraints(|region_constraints| {\n         debug!(?region_constraints);\n         region_constraints.constraints.iter().find_map(|(constraint, cause)| {"}]}