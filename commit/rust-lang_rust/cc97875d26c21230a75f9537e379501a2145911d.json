{"sha": "cc97875d26c21230a75f9537e379501a2145911d", "node_id": "C_kwDOAAsO6NoAKGNjOTc4NzVkMjZjMjEyMzBhNzVmOTUzN2UzNzk1MDFhMjE0NTkxMWQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T17:42:16Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:26Z"}, "message": "Use revisions for NLL in nll", "tree": {"sha": "73f070aa260457a5a02b3d48cf3679b430b2e68f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f070aa260457a5a02b3d48cf3679b430b2e68f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc97875d26c21230a75f9537e379501a2145911d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc97875d26c21230a75f9537e379501a2145911d", "html_url": "https://github.com/rust-lang/rust/commit/cc97875d26c21230a75f9537e379501a2145911d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc97875d26c21230a75f9537e379501a2145911d/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9f241d4077c8d0a633aa6589ef18065db7a4372", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f241d4077c8d0a633aa6589ef18065db7a4372", "html_url": "https://github.com/rust-lang/rust/commit/b9f241d4077c8d0a633aa6589ef18065db7a4372"}], "stats": {"total": 89, "additions": 48, "deletions": 41}, "files": [{"sha": "9914783d9767d5d99ecd0790eae8597cc1714265", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr?ref=b9f241d4077c8d0a633aa6589ef18065db7a4372", "patch": "@@ -1,12 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/hrtb-exists-forall-fn.rs:17:34\n-   |\n-LL |     let _: for<'b> fn(&'b u32) = foo();\n-   |                                  ^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'b> fn(&'b u32)`\n-              found fn pointer `fn(&u32)`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "9d1fa66813d26635ed3f210a404dc5b3b8da07fc", "filename": "src/test/ui/nll/continue-after-missing-main.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.base.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,11 +1,11 @@\n error[E0601]: `main` function not found in crate `continue_after_missing_main`\n-  --> $DIR/continue-after-missing-main.rs:30:2\n+  --> $DIR/continue-after-missing-main.rs:34:2\n    |\n LL | }\n    |  ^ consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/continue-after-missing-main.rs:28:56\n+  --> $DIR/continue-after-missing-main.rs:32:56\n    |\n LL |     tableau: Tableau<'data_provider, AdaptedMatrixProvider<'original_data, MP>>,\n    |              ------------------------------------------------------------------ these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/nll/continue-after-missing-main.stderr"}, {"sha": "2bad3be8b4ebef3c94e0fe96eb7df9314ccc9fab", "filename": "src/test/ui/nll/continue-after-missing-main.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.nll.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,5 +1,5 @@\n error[E0601]: `main` function not found in crate `continue_after_missing_main`\n-  --> $DIR/continue-after-missing-main.rs:30:2\n+  --> $DIR/continue-after-missing-main.rs:34:2\n    |\n LL | }\n    |  ^ consider adding a `main` function to `$DIR/continue-after-missing-main.rs`"}, {"sha": "ddead7dc2330a2b691a08799e1082e8798fd216f", "filename": "src/test/ui/nll/continue-after-missing-main.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcontinue-after-missing-main.rs?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![allow(dead_code)]\n \n struct Tableau<'a, MP> {\n@@ -26,5 +30,5 @@ fn create_and_solve_subproblems<'data_provider, 'original_data, MP>(\n     tableau: Tableau<'data_provider, AdaptedMatrixProvider<'original_data, MP>>,\n ) {\n     let _: AdaptedMatrixProvider<'original_data, MP> = tableau.provider().clone_with_extra_bound();\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n } //~ ERROR `main` function not found in crate"}, {"sha": "fb758ca17a8efefc40909821ee86552479f7c175", "filename": "src/test/ui/nll/issue-52213.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52213.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52213.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52213.base.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,28 +1,28 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-52213.rs:2:11\n+  --> $DIR/issue-52213.rs:6:11\n    |\n LL |     match (&t,) {\n    |           ^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/issue-52213.rs:1:23\n+  --> $DIR/issue-52213.rs:5:23\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-52213.rs:2:11\n+  --> $DIR/issue-52213.rs:6:11\n    |\n LL |     match (&t,) {\n    |           ^^^^^\n    = note: expected `(&&(T,),)`\n               found `(&&'a (T,),)`\n note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n-  --> $DIR/issue-52213.rs:1:27\n+  --> $DIR/issue-52213.rs:5:27\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                           ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/issue-52213.rs:3:20\n+  --> $DIR/issue-52213.rs:8:20\n    |\n LL |         ((u,),) => u,\n    |                    ^", "previous_filename": "src/test/ui/nll/issue-52213.stderr"}, {"sha": "a7553de691093d4d727db5dd61d39444d25b3a41", "filename": "src/test/ui/nll/issue-52213.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52213.nll.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,11 +1,11 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52213.rs:3:20\n+  --> $DIR/issue-52213.rs:8:20\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       --  -- lifetime `'b` defined here\n    |                       |\n    |                       lifetime `'a` defined here\n-LL |     match (&t,) {\n+...\n LL |         ((u,),) => u,\n    |                    ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |"}, {"sha": "c5918b47f571077db47c581fbeda6c63f9d8198b", "filename": "src/test/ui/nll/issue-52213.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52213.rs?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,6 +1,12 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n-    match (&t,) { //~ ERROR cannot infer an appropriate lifetime\n+    match (&t,) {\n+        //[base]~^ ERROR cannot infer an appropriate lifetime\n         ((u,),) => u,\n+        //[nll]~^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "ddcb01b8f468d7768af9555a42036ed821628503", "filename": "src/test/ui/nll/issue-52533-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.base.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-52533-1.rs:9:18\n+  --> $DIR/issue-52533-1.rs:13:18\n    |\n LL |     gimme(|x, y| y)\n    |                  ^ lifetime mismatch\n    |\n    = note: expected reference `&Foo<'_, '_, u32>`\n               found reference `&Foo<'_, '_, u32>`\n note: the anonymous lifetime #3 defined here...\n-  --> $DIR/issue-52533-1.rs:9:11\n+  --> $DIR/issue-52533-1.rs:13:11\n    |\n LL |     gimme(|x, y| y)\n    |           ^^^^^^^^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined here\n-  --> $DIR/issue-52533-1.rs:9:11\n+  --> $DIR/issue-52533-1.rs:13:11\n    |\n LL |     gimme(|x, y| y)\n    |           ^^^^^^^^", "previous_filename": "src/test/ui/nll/issue-52533-1.stderr"}, {"sha": "5554339eb7c62b5f04413569c61d006d6e6b8b36", "filename": "src/test/ui/nll/issue-52533-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.nll.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52533-1.rs:9:18\n+  --> $DIR/issue-52533-1.rs:13:18\n    |\n LL |     gimme(|x, y| y)\n    |            -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`"}, {"sha": "3ee7dd556a58351ddace61b031527df0f26684a0", "filename": "src/test/ui/nll/issue-52533-1.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52533-1.rs?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![allow(warnings)]\n \n struct Foo<'a, 'b, T: 'a + 'b> { x: &'a T, y: &'b T }\n@@ -7,5 +11,6 @@ fn gimme(_: impl for<'a, 'b, 'c> FnOnce(&'a Foo<'a, 'b, u32>,\n \n fn main() {\n     gimme(|x, y| y)\n-    //~^ ERROR mismatched types [E0308]\n+    //[base]~^ ERROR mismatched types [E0308]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }"}, {"sha": "2d1d5cb26d32c7c1c91551d513767882ba06db56", "filename": "src/test/ui/nll/lint-no-err.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Flint-no-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Flint-no-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flint-no-err.rs?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -4,11 +4,6 @@\n // when buffering lints, which resulted in ICE later on,\n // see #94502.\n \n-// Errors with `nll` which is already tested in enough other tests,\n-// so we ignore it here.\n-//\n-// ignore-compare-mode-nll\n-\n struct Repro;\n impl Repro {\n     fn get(&self) -> &i32 {"}, {"sha": "c7710146ea40f5ab00ebffdc6b076a3c70ce5f9a", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.base.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,13 +1,13 @@\n error[E0309]: the associated type `<T as MyTrait<'a>>::Output` may not live long enough\n-  --> $DIR/projection-where-clause-env-wrong-bound.rs:15:5\n+  --> $DIR/projection-where-clause-env-wrong-bound.rs:19:5\n    |\n LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'a>>::Output: 'a`...\n    = note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds...\n note: ...that is required by this bound\n-  --> $DIR/projection-where-clause-env-wrong-bound.rs:29:8\n+  --> $DIR/projection-where-clause-env-wrong-bound.rs:33:8\n    |\n LL |     T: 'a,\n    |        ^^", "previous_filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.stderr"}, {"sha": "d235dee6444ff3d0f116105ab8ef20813dcd52de", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the associated type `<T as MyTrait<'_>>::Output` may not live long enough\n-  --> $DIR/projection-where-clause-env-wrong-bound.rs:15:5\n+  --> $DIR/projection-where-clause-env-wrong-bound.rs:19:5\n    |\n LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "22edb22a5363e9d0593721e824114166f1e03657", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.rs?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test that we are able to establish that `<T as\n // MyTrait<'a>>::Output` outlives `'b` here. We need to prove however\n // that `<T as MyTrait<'a>>::Output` outlives `'a`, so we also have to"}, {"sha": "c3e2301bd66fb80756f859c5440d5f27f82ac259", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.base.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,13 +1,13 @@\n error[E0309]: the associated type `<T as MyTrait<'a>>::Output` may not live long enough\n-  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:14:5\n+  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:18:5\n    |\n LL |     bar::<<T as MyTrait<'a>>::Output>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'a>>::Output: 'a`...\n    = note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds...\n note: ...that is required by this bound\n-  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:20:8\n+  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:25:8\n    |\n LL |     T: 'a,\n    |        ^^", "previous_filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.stderr"}, {"sha": "82fe2fad9f71ce8d31ffcac74dbe49322398b483", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the associated type `<T as MyTrait<'_>>::Output` may not live long enough\n-  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:14:5\n+  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:18:5\n    |\n LL |     bar::<<T as MyTrait<'a>>::Output>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d89b065673b5989e8e2630f5781dc9e388e3d2a6", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.rs?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Test that if we need to prove that `<T as MyTrait<'a>>::Output:\n // 'a`, but we only know that `<T as MyTrait<'b>>::Output: 'a`, that\n // doesn't suffice.\n@@ -12,7 +16,8 @@ where\n     <T as MyTrait<'b>>::Output: 'a,\n {\n     bar::<<T as MyTrait<'a>>::Output>()\n-    //~^ ERROR the associated type `<T as MyTrait<'a>>::Output` may not live long enough\n+    //[base]~^ ERROR the associated type `<T as MyTrait<'a>>::Output` may not live long enough\n+    //[nll]~^^ ERROR the associated type `<T as MyTrait<'_>>::Output` may not live long enough\n }\n \n fn bar<'a, T>() -> &'a ()"}]}