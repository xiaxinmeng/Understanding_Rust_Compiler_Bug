{"sha": "a7eeeb596a9aa0660e6e3f8cff92876ac1686007", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZWVlYjU5NmE5YWEwNjYwZTZlM2Y4Y2ZmOTI4NzZhYzE2ODYwMDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-08-26T21:45:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-08-26T21:47:18Z"}, "message": "Add automatic parameter instantiation. Closes #45.", "tree": {"sha": "5d8e1a5a1131a58b354536b6e0925ab4cd74825f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d8e1a5a1131a58b354536b6e0925ab4cd74825f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7eeeb596a9aa0660e6e3f8cff92876ac1686007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7eeeb596a9aa0660e6e3f8cff92876ac1686007", "html_url": "https://github.com/rust-lang/rust/commit/a7eeeb596a9aa0660e6e3f8cff92876ac1686007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7eeeb596a9aa0660e6e3f8cff92876ac1686007/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8559a85ccacf70c51d93759b47a3880ae818b247", "url": "https://api.github.com/repos/rust-lang/rust/commits/8559a85ccacf70c51d93759b47a3880ae818b247", "html_url": "https://github.com/rust-lang/rust/commit/8559a85ccacf70c51d93759b47a3880ae818b247"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "22dd0c56baf7d5b402e339a813c753d815a1d4b5", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7eeeb596a9aa0660e6e3f8cff92876ac1686007/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a7eeeb596a9aa0660e6e3f8cff92876ac1686007/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=a7eeeb596a9aa0660e6e3f8cff92876ac1686007", "patch": "@@ -431,6 +431,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       argv.rs \\\n                       autoderef-full-lval.rs \\\n                       autoderef-objfn.rs \\\n+                      auto-instantiate.rs \\\n                       basic.rs \\\n                       basic-1.rs \\\n                       basic-2.rs \\"}, {"sha": "93f43d3ecc4ec5d3588950ccc3e8b84efddea36e", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a7eeeb596a9aa0660e6e3f8cff92876ac1686007/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a7eeeb596a9aa0660e6e3f8cff92876ac1686007/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=a7eeeb596a9aa0660e6e3f8cff92876ac1686007", "patch": "@@ -154,7 +154,8 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       | ty -> type_error \"record\" ty\n   in\n   let demand_fn\n-      ?param_handler:(param_handler=demand)\n+      ?param_handler:(param_handler=\n+        fun a idx effect -> demand a (Ast.TY_param (idx, effect)))\n       (arg_tys:Ast.ty option array)\n       (actual:Ast.ty)\n       : Ast.ty =\n@@ -179,7 +180,8 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n           let maybe_demand a_opt b =\n             match a_opt, b with\n                 None, _ -> ()\n-              | Some a, Ast.TY_param _ -> param_handler a b\n+              | Some a, Ast.TY_param (idx, effect) ->\n+                  param_handler a idx effect\n               | Some a, _ -> demand a b\n           in\n           Common.arr_iter2 maybe_demand arg_tys in_slot_tys;\n@@ -504,12 +506,33 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       | TYPAT_fn arg_tys, LTYPE_mono actual ->\n           ignore (demand_fn (Array.map (fun ty -> Some ty) arg_tys) actual);\n           yield_ty actual\n-      | TYPAT_fn _, LTYPE_poly (_, _) ->\n-          (* FIXME: auto-instantiate *)\n-          Common.unimpl\n-            None\n-            \"instantiation of polymorphic function types; please supply type \\\n-            parameters explicitly, sorry\"\n+      | TYPAT_fn arg_tys, (LTYPE_poly (ty_params, ty) as lty) ->\n+          (* Perform automatic instantiation of polymorphic types. *)\n+          let ty = fundamental_ty ty in\n+          let substs = Array.make (Array.length ty_params) None in\n+          let param_handler substituted_ty idx _ =\n+            match substs.(idx) with\n+            | None -> substs.(idx) <- Some substituted_ty\n+            | Some substituted_ty' -> demand substituted_ty substituted_ty'\n+          in\n+          let arg_ty_opts = Array.map (fun ty -> Some ty) arg_tys in\n+          ignore (demand_fn ~param_handler:param_handler arg_ty_opts ty);\n+          let get_subst subst_opt =\n+            match subst_opt with\n+                Some subst -> subst\n+              | None ->\n+                  Common.bug ()\n+                    \"internal_check_outer_lval: subst not found\"\n+          in\n+          let substs = Array.map get_subst substs in\n+          begin\n+            match beta_reduce (Semant.lval_base_id lval) lty substs with\n+                LTYPE_mono ty -> yield_ty ty\n+              | _ ->\n+                  Common.bug ()\n+                    \"internal_check_outer_lval: beta reduction didn't yield \\\n+                      a monotype\"\n+          end\n       | TYPAT_wild, (LTYPE_poly _ as lty) ->\n           Common.err\n             None"}, {"sha": "58e20e1d2db7f1753e03239e653efa4a6619c6fe", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7eeeb596a9aa0660e6e3f8cff92876ac1686007/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7eeeb596a9aa0660e6e3f8cff92876ac1686007/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=a7eeeb596a9aa0660e6e3f8cff92876ac1686007", "patch": "@@ -0,0 +1,11 @@\n+// -*- rust -*-\n+\n+fn f[T,U](&T x, &U y) -> tup(T,U) {\n+  ret tup(x, y);\n+}\n+\n+fn main() -> () {\n+  log f(tup(3, 4, 5), 4)._0._0;\n+  log f(5, 6)._0;\n+}\n+"}]}