{"sha": "4606168dd508007fb1014b6ab12b27e320e07038", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDYxNjhkZDUwODAwN2ZiMTAxNGI2YWIxMmIyN2UzMjBlMDcwMzg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-13T18:12:29Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-13T18:12:29Z"}, "message": "Make new type param suggestion more targetted\n\nDo not suggest new type param when encountering a missing type in an ADT\nfield with generic parameters.\n\nFix #72640.", "tree": {"sha": "e84049ce85e97e7a7b08464a8858e87104bf6fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e84049ce85e97e7a7b08464a8858e87104bf6fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4606168dd508007fb1014b6ab12b27e320e07038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4606168dd508007fb1014b6ab12b27e320e07038", "html_url": "https://github.com/rust-lang/rust/commit/4606168dd508007fb1014b6ab12b27e320e07038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4606168dd508007fb1014b6ab12b27e320e07038/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8674837a9cc5225020e07fc3f164762bb4c11c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8674837a9cc5225020e07fc3f164762bb4c11c", "html_url": "https://github.com/rust-lang/rust/commit/bb8674837a9cc5225020e07fc3f164762bb4c11c"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "8661af6d7a1ded02d514afbd060399ee3e1f2276", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4606168dd508007fb1014b6ab12b27e320e07038/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4606168dd508007fb1014b6ab12b27e320e07038/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4606168dd508007fb1014b6ab12b27e320e07038", "patch": "@@ -485,6 +485,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             module_path.push(Segment {\n                                 ident: Ident { name: kw::PathRoot, span: source.ident.span },\n                                 id: Some(self.r.next_node_id()),\n+                                has_args: false,\n                             });\n                             source.ident.name = crate_name;\n                         }"}, {"sha": "28ff89f66925eed5fd6b79dc4c154e5276d11be9", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4606168dd508007fb1014b6ab12b27e320e07038/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4606168dd508007fb1014b6ab12b27e320e07038/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=4606168dd508007fb1014b6ab12b27e320e07038", "patch": "@@ -920,7 +920,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         path: &[Segment],\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n         let ident = match path {\n-            [segment] => segment.ident,\n+            [segment] if !segment.has_args => segment.ident,\n             _ => return None,\n         };\n         match ("}, {"sha": "f7ec919fa04e35fc6e152ab39181a5b9fdbe0805", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4606168dd508007fb1014b6ab12b27e320e07038/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4606168dd508007fb1014b6ab12b27e320e07038/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4606168dd508007fb1014b6ab12b27e320e07038", "patch": "@@ -225,13 +225,15 @@ enum VisResolutionError<'a> {\n     ModuleOnly(Span),\n }\n \n-// A minimal representation of a path segment. We use this in resolve because\n-// we synthesize 'path segments' which don't have the rest of an AST or HIR\n-// `PathSegment`.\n+/// A minimal representation of a path segment. We use this in resolve because we synthesize 'path\n+/// segments' which don't have the rest of an AST or HIR `PathSegment`.\n #[derive(Clone, Copy, Debug)]\n pub struct Segment {\n     ident: Ident,\n     id: Option<NodeId>,\n+    /// Signals whether this `PathSegment` has generic arguments. Used to avoid providing\n+    /// nonsensical suggestions.\n+    has_args: bool,\n }\n \n impl Segment {\n@@ -240,7 +242,7 @@ impl Segment {\n     }\n \n     fn from_ident(ident: Ident) -> Segment {\n-        Segment { ident, id: None }\n+        Segment { ident, id: None, has_args: false }\n     }\n \n     fn names_to_string(segments: &[Segment]) -> String {\n@@ -250,7 +252,7 @@ impl Segment {\n \n impl<'a> From<&'a ast::PathSegment> for Segment {\n     fn from(seg: &'a ast::PathSegment) -> Segment {\n-        Segment { ident: seg.ident, id: Some(seg.id) }\n+        Segment { ident: seg.ident, id: Some(seg.id), has_args: seg.args.is_some() }\n     }\n }\n \n@@ -2017,7 +2019,7 @@ impl<'a> Resolver<'a> {\n             path, opt_ns, record_used, path_span, crate_lint,\n         );\n \n-        for (i, &Segment { ident, id }) in path.iter().enumerate() {\n+        for (i, &Segment { ident, id, has_args: _ }) in path.iter().enumerate() {\n             debug!(\"resolve_path ident {} {:?} {:?}\", i, ident, id);\n             let record_segment_res = |this: &mut Self, res| {\n                 if record_used {"}, {"sha": "6bd42472f5a55492eeb79b011ed39c5444b69294", "filename": "src/test/ui/suggestions/type-not-found-in-adt-field.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4606168dd508007fb1014b6ab12b27e320e07038/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4606168dd508007fb1014b6ab12b27e320e07038/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.rs?ref=4606168dd508007fb1014b6ab12b27e320e07038", "patch": "@@ -0,0 +1,5 @@\n+struct S {\n+    m: Vec<Hashmap<String, ()>>, //~ ERROR cannot find type `Hashmap` in this scope\n+    //~^ NOTE not found in this scope\n+}\n+fn main() {}"}, {"sha": "cfad8c689d038cbab8a4ee4cac38afc082be718e", "filename": "src/test/ui/suggestions/type-not-found-in-adt-field.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4606168dd508007fb1014b6ab12b27e320e07038/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4606168dd508007fb1014b6ab12b27e320e07038/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr?ref=4606168dd508007fb1014b6ab12b27e320e07038", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `Hashmap` in this scope\n+  --> $DIR/type-not-found-in-adt-field.rs:2:12\n+   |\n+LL |     m: Vec<Hashmap<String, ()>>,\n+   |            ^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}