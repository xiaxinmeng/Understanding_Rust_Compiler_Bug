{"sha": "454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NGI1M2E3YzI4NzNmZTdmNzJjYzVjZTZjMDdjY2FkZWQ1YjIyZDg=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-22T06:08:32Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "(core::char) rename slice -> slice_chars", "tree": {"sha": "f15c3f1da33a2bb82e6e574cb8846140c229bebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f15c3f1da33a2bb82e6e574cb8846140c229bebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "html_url": "https://github.com/rust-lang/rust/commit/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd5a0945a6d712ac9c9a70d53c4ef5d3f139ed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd5a0945a6d712ac9c9a70d53c4ef5d3f139ed0", "html_url": "https://github.com/rust-lang/rust/commit/1cd5a0945a6d712ac9c9a70d53c4ef5d3f139ed0"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "879d4bf8a616d3be7915847d9d14acc069894cdf", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "patch": "@@ -177,7 +177,7 @@ fn rest(s: str, start: uint) -> str {\n     if (start >= str::len_chars(s)) {\n         \"\"\n     } else {\n-        str::slice(s, start, str::len_chars(s))\n+        str::slice_chars(s, start, str::len_chars(s))\n     }\n }\n \n@@ -688,8 +688,8 @@ fn cmd_install(c: cargo) unsafe {\n         let uuid = rest(target, 5u);\n         alt str::index_chars(uuid, '/') {\n             option::some(idx) {\n-               let source = str::slice(uuid, 0u, idx);\n-               uuid = str::slice(uuid, idx + 1u, str::len_chars(uuid));\n+               let source = str::slice_chars(uuid, 0u, idx);\n+               uuid = str::slice_chars(uuid, idx + 1u, str::len_chars(uuid));\n                install_uuid_specific(c, wd, source, uuid);\n             }\n             option::none {\n@@ -700,8 +700,8 @@ fn cmd_install(c: cargo) unsafe {\n         let name = target;\n         alt str::index_chars(name, '/') {\n             option::some(idx) {\n-               let source = str::slice(name, 0u, idx);\n-               name = str::slice(name, idx + 1u, str::len_chars(name));\n+               let source = str::slice_chars(name, 0u, idx);\n+               name = str::slice_chars(name, idx + 1u, str::len_chars(name));\n                install_named_specific(c, wd, source, name);\n             }\n             option::none {"}, {"sha": "e02aad48c5a84ea886b8e158ee8d21f13b235aed", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "patch": "@@ -111,7 +111,7 @@ mod write {\n     fn mk_intermediate_name(output_path: str, extension: str) -> str unsafe {\n         let stem = alt str::index_chars(output_path, '.') {\n                        option::some(dot_pos) {\n-                           str::slice(output_path, 0u, dot_pos)\n+                           str::slice_chars(output_path, 0u, dot_pos)\n                        }\n                        option::none { output_path }\n                    };"}, {"sha": "74dbade09c108f6b23cb6f8f0d63d1fdb7c18e3a", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "patch": "@@ -180,13 +180,13 @@ fn span_to_snippet(sp: span, cm: codemap::codemap) -> str {\n     let begin = lookup_byte_offset(cm,sp.lo);\n     let end   = lookup_byte_offset(cm,sp.hi);\n     assert begin.fm == end.fm;\n-    ret str::slice(*begin.fm.src, begin.pos, end.pos);\n+    ret str::slice_chars(*begin.fm.src, begin.pos, end.pos);\n }\n \n fn get_snippet(cm: codemap::codemap, fidx: uint, lo: uint, hi: uint) -> str\n {\n     let fm = cm.files[fidx];\n-    ret str::slice(*fm.src, lo, hi)\n+    ret str::slice_chars(*fm.src, lo, hi)\n }\n \n fn get_filemap(cm: codemap, filename: str) -> filemap {"}, {"sha": "3b443d68a3d0aef4e0cd4306da5905f2c2c116a3", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "patch": "@@ -287,7 +287,7 @@ fn check_variants_T<T: copy>(\n \n fn last_part(filename: str) -> str {\n   let ix = option::get(str::rindex_chars(filename, '/'));\n-  str::slice(filename, ix + 1u, str::len_chars(filename) - 3u)\n+  str::slice_chars(filename, ix + 1u, str::len_chars(filename) - 3u)\n }\n \n enum happiness { passed, cleanly_rejected(str), known_bug(str), failed(str), }"}, {"sha": "cbf6586139b7db766f90132c422b4c27cf6ed54f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "patch": "@@ -36,7 +36,7 @@ export\n    bytes,\n    chars,\n    substr,\n-   slice,\n+   slice_chars,\n    split,\n    split_str,\n    split_char,\n@@ -391,11 +391,11 @@ Failure:\n If `begin` + `len` is is greater than the char length of the string\n */\n fn substr(s: str, begin: uint, len: uint) -> str {\n-    ret slice(s, begin, begin + len);\n+    ret slice_chars(s, begin, begin + len);\n }\n \n /*\n-Function: slice\n+Function: slice_chars\n \n Unicode-safe slice. Returns a slice of the given string containing\n the characters in the range [`begin`..`end`). `begin` and `end` are\n@@ -408,7 +408,7 @@ Failure:\n \n FIXME: make faster by avoiding char conversion\n */\n-fn slice(s: str, begin: uint, end: uint) -> str {\n+fn slice_chars(s: str, begin: uint, end: uint) -> str {\n     from_chars(vec::slice(chars(s), begin, end))\n }\n \n@@ -617,7 +617,7 @@ fn windowed(nn: uint, ss: str) -> [str] {\n \n     let ii = 0u;\n     while ii+nn <= len {\n-        let w = slice( ss, ii, ii+nn );\n+        let w = slice_chars( ss, ii, ii+nn );\n         vec::push(ww,w);\n         ii += 1u;\n     }\n@@ -1969,17 +1969,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_slice() {\n-        assert (eq(\"ab\", slice(\"abc\", 0u, 2u)));\n-        assert (eq(\"bc\", slice(\"abc\", 1u, 3u)));\n-        assert (eq(\"\", slice(\"abc\", 1u, 1u)));\n-        assert (eq(\"\\u65e5\", slice(\"\\u65e5\\u672c\", 0u, 1u)));\n+    fn test_slice_chars() {\n+        assert (eq(\"ab\", slice_chars(\"abc\", 0u, 2u)));\n+        assert (eq(\"bc\", slice_chars(\"abc\", 1u, 3u)));\n+        assert (eq(\"\", slice_chars(\"abc\", 1u, 1u)));\n+        assert (eq(\"\\u65e5\", slice_chars(\"\\u65e5\\u672c\", 0u, 1u)));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n-        assert (eq(\"\u0e1b\", slice(data, 0u, 1u)));\n-        assert (eq(\"\u0e23\", slice(data, 1u, 2u)));\n-        assert (eq(\"\u534e\", slice(data, 10u, 11u)));\n-        assert (eq(\"\", slice(data, 1u, 1u)));\n+        assert (eq(\"\u0e1b\", slice_chars(data, 0u, 1u)));\n+        assert (eq(\"\u0e23\", slice_chars(data, 1u, 2u)));\n+        assert (eq(\"\u534e\", slice_chars(data, 10u, 11u)));\n+        assert (eq(\"\", slice_chars(data, 1u, 1u)));\n \n         fn a_million_letter_X() -> str {\n             let i = 0;\n@@ -1994,7 +1994,7 @@ mod tests {\n             ret rs;\n         }\n         assert (eq(half_a_million_letter_X(),\n-                        slice(a_million_letter_X(), 0u, 500000u)));\n+                        slice_chars(a_million_letter_X(), 0u, 500000u)));\n     }\n \n     #[test]"}, {"sha": "acc09fefb01ac10d17fbfd6b3384cea2a0ae9d67", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "patch": "@@ -44,8 +44,8 @@ fn splitDirnameBasename (pp: path) -> {dirname: str, basename: str} {\n         }\n     }\n \n-    ret {dirname: str::slice(pp, 0u, ii),\n-         basename: str::slice(pp, ii + 1u, str::len_chars(pp))};\n+    ret {dirname: str::slice_chars(pp, 0u, ii),\n+         basename: str::slice_chars(pp, ii + 1u, str::len_chars(pp))};\n }\n \n /*"}, {"sha": "70b16758e1d32ae76e2a3b063df429e5c958df6b", "filename": "src/libstd/json.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "patch": "@@ -71,7 +71,7 @@ fn to_str(j: json) -> str {\n \n fn rest(s: str) -> str {\n     assert(str::len_chars(s) >= 1u);\n-    str::slice(s, 1u, str::len_chars(s))\n+    str::slice_chars(s, 1u, str::len_chars(s))\n }\n \n fn from_str_str(s: str) -> (option<json>, str) {\n@@ -99,7 +99,7 @@ fn from_str_str(s: str) -> (option<json>, str) {\n             cont;\n         } else if (c == '\"') {\n             ret (some(string(res)),\n-                 str::slice(s, pos, str::len_chars(s)));\n+                 str::slice_chars(s, pos, str::len_chars(s)));\n         }\n         res = res + str::from_char(c);\n     }\n@@ -200,12 +200,13 @@ fn from_str_float(s: str) -> (option<json>, str) {\n             }\n             '.' { break; }\n             _ { ret (some(num(neg * res)),\n-                     str::slice(s, opos, str::len_chars(s))); }\n+                     str::slice_chars(s, opos, str::len_chars(s))); }\n         }\n     }\n \n     if pos == len {\n-        ret (some(num(neg * res)), str::slice(s, pos, str::len_chars(s)));\n+        ret (some(num(neg * res)),\n+             str::slice_chars(s, pos, str::len_chars(s)));\n     }\n \n     let dec = 1f;\n@@ -220,25 +221,25 @@ fn from_str_float(s: str) -> (option<json>, str) {\n                 res += (((c as int) - ('0' as int)) as float) * dec;\n             }\n             _ { ret (some(num(neg * res)),\n-                     str::slice(s, opos, str::len_chars(s))); }\n+                     str::slice_chars(s, opos, str::len_chars(s))); }\n         }\n     }\n-    ret (some(num(neg * res)), str::slice(s, pos, str::len_chars(s)));\n+    ret (some(num(neg * res)), str::slice_chars(s, pos, str::len_chars(s)));\n }\n \n fn from_str_bool(s: str) -> (option<json>, str) {\n     if (str::starts_with(s, \"true\")) {\n-        (some(boolean(true)), str::slice(s, 4u, str::len_chars(s)))\n+        (some(boolean(true)), str::slice_chars(s, 4u, str::len_chars(s)))\n     } else if (str::starts_with(s, \"false\")) {\n-        (some(boolean(false)), str::slice(s, 5u, str::len_chars(s)))\n+        (some(boolean(false)), str::slice_chars(s, 5u, str::len_chars(s)))\n     } else {\n         (none, s)\n     }\n }\n \n fn from_str_null(s: str) -> (option<json>, str) {\n     if (str::starts_with(s, \"null\")) {\n-        (some(null), str::slice(s, 4u, str::len_chars(s)))\n+        (some(null), str::slice_chars(s, 4u, str::len_chars(s)))\n     } else {\n         (none, s)\n     }"}, {"sha": "42a3f3fa57af812ff836193fcfcff1b392bff77f", "filename": "src/rustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Frustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8/src%2Frustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Funindent_pass.rs?ref=454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "patch": "@@ -68,7 +68,7 @@ fn unindent(s: str) -> str {\n                 line\n             } else {\n                 assert str::len_bytes(line) >= min_indent;\n-                str::slice(line, min_indent, str::len_chars(line))\n+                str::slice_chars(line, min_indent, str::len_chars(line))\n             }\n         };\n         str::connect(unindented, \"\\n\")"}]}