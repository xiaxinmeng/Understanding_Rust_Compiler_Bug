{"sha": "16b5dac4635dd919b8b56bdf1533a10e8423adb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YjVkYWM0NjM1ZGQ5MTliOGI1NmJkZjE1MzNhMTBlODQyM2FkYjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-12T19:15:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-12T19:15:13Z"}, "message": "Remove all non-tcx references from CodegenCx", "tree": {"sha": "f8b1966d02cc005cc143dc3cb9b0c92a02434855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8b1966d02cc005cc143dc3cb9b0c92a02434855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16b5dac4635dd919b8b56bdf1533a10e8423adb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16b5dac4635dd919b8b56bdf1533a10e8423adb6", "html_url": "https://github.com/rust-lang/rust/commit/16b5dac4635dd919b8b56bdf1533a10e8423adb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16b5dac4635dd919b8b56bdf1533a10e8423adb6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "html_url": "https://github.com/rust-lang/rust/commit/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6"}], "stats": {"total": 85, "additions": 39, "deletions": 46}, "files": [{"sha": "acdfba4323af3fe9e4162b9982cf9848a4e0f5d9", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=16b5dac4635dd919b8b56bdf1533a10e8423adb6", "patch": "@@ -3,8 +3,8 @@ use rustc_index::vec::IndexVec;\n \n use crate::prelude::*;\n \n-pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n-    cx: &mut crate::CodegenCx<'clif, 'tcx, B>,\n+pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n+    cx: &mut crate::CodegenCx<'tcx, B>,\n     instance: Instance<'tcx>,\n     linkage: Linkage,\n ) {\n@@ -39,7 +39,7 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n     let mut fx = FunctionCx {\n         tcx,\n-        module: cx.module,\n+        module: &mut cx.module,\n         pointer_type,\n \n         instance,"}, {"sha": "a8e52f99b67e7a8e59c4059df90b214307090c6a", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=16b5dac4635dd919b8b56bdf1533a10e8423adb6", "patch": "@@ -15,12 +15,12 @@ pub(crate) struct UnwindContext<'tcx> {\n impl<'tcx> UnwindContext<'tcx> {\n     pub(crate) fn new(\n         tcx: TyCtxt<'tcx>,\n-        module: &mut Module<impl Backend>,\n+        isa: &dyn TargetIsa,\n     ) -> Self {\n         let mut frame_table = FrameTable::default();\n \n \n-        let cie_id = if let Some(cie) = module.isa().create_systemv_cie() {\n+        let cie_id = if let Some(cie) = isa.create_systemv_cie() {\n             Some(frame_table.add_cie(cie))\n         } else {\n             None"}, {"sha": "303031c0c036c17dab2b6a6df54a6374a47e106a", "filename": "src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=16b5dac4635dd919b8b56bdf1533a10e8423adb6", "patch": "@@ -108,21 +108,11 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n     let cgu = tcx.codegen_unit(cgu_name);\n     let mono_items = cgu.items_in_deterministic_order(tcx);\n \n-    let mut module = new_module(tcx, cgu_name.as_str().to_string());\n+    let module = new_module(tcx, cgu_name.as_str().to_string());\n \n-    let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None {\n-        let debug = DebugContext::new(\n-            tcx,\n-            module.isa(),\n-        );\n-        Some(debug)\n-    } else {\n-        None\n-    };\n-\n-    let mut unwind_context = UnwindContext::new(tcx, &mut module);\n-\n-    super::codegen_mono_items(tcx, &mut module, debug.as_mut(), &mut unwind_context, mono_items);\n+    let mut cx = CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n+    super::codegen_mono_items(&mut cx, mono_items);\n+    let (mut module, debug, mut unwind_context) = tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context);\n \n     emit_module(\n@@ -185,7 +175,7 @@ pub(super) fn run_aot(\n     tcx.sess.abort_if_errors();\n \n     let mut allocator_module = new_module(tcx, \"allocator_shim\".to_string());\n-    let mut allocator_unwind_context = UnwindContext::new(tcx, &mut allocator_module);\n+    let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa());\n     let created_alloc_shim = crate::allocator::codegen(\n         tcx,\n         &mut allocator_module,"}, {"sha": "ab6c9da25addbe90b3937c4954bb93873fdfb190", "filename": "src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=16b5dac4635dd919b8b56bdf1533a10e8423adb6", "patch": "@@ -52,10 +52,11 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    let mut unwind_context = UnwindContext::new(tcx, &mut jit_module);\n+    let mut cx = CodegenCx::new(tcx, jit_module, false);\n \n-    super::time(tcx, \"codegen mono items\", || {\n-        super::codegen_mono_items(tcx, &mut jit_module, None, &mut unwind_context, mono_items);\n+    let (mut jit_module, _debug, mut unwind_context) = super::time(tcx, \"codegen mono items\", || {\n+        super::codegen_mono_items(&mut cx, mono_items);\n+        tcx.sess.time(\"finalize CodegenCx\", || cx.finalize())\n     });\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);"}, {"sha": "ded3bbe1e2cf8f9bbf80dabea5d2169b9418ce1f", "filename": "src/driver/mod.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=16b5dac4635dd919b8b56bdf1533a10e8423adb6", "patch": "@@ -30,20 +30,15 @@ pub(crate) fn codegen_crate(\n }\n \n fn codegen_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    module: &mut Module<impl Backend + 'static>,\n-    debug_context: Option<&mut DebugContext<'tcx>>,\n-    unwind_context: &mut UnwindContext<'tcx>,\n+    cx: &mut CodegenCx<'tcx, impl Backend + 'static>,\n     mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n ) {\n-    let mut cx = CodegenCx::new(tcx, module, debug_context, unwind_context);\n-\n-    tcx.sess.time(\"predefine functions\", || {\n+    cx.tcx.sess.time(\"predefine functions\", || {\n         for &(mono_item, (linkage, visibility)) in &mono_items {\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let (name, sig) =\n-                        get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n+                        get_function_name_and_sig(cx.tcx, cx.module.isa().triple(), instance, false);\n                     let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n                     cx.module.declare_function(&name, linkage, &sig).unwrap();\n                 }\n@@ -54,14 +49,12 @@ fn codegen_mono_items<'tcx>(\n \n     for (mono_item, (linkage, visibility)) in mono_items {\n         let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-        trans_mono_item(&mut cx, mono_item, linkage);\n+        trans_mono_item(cx, mono_item, linkage);\n     }\n-\n-    tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n }\n \n-fn trans_mono_item<'clif, 'tcx, B: Backend + 'static>(\n-    cx: &mut crate::CodegenCx<'clif, 'tcx, B>,\n+fn trans_mono_item<'tcx, B: Backend + 'static>(\n+    cx: &mut crate::CodegenCx<'tcx, B>,\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,\n ) {"}, {"sha": "afaeb6d1e25a3f2df0ee3d4c29a2ac7ad313958f", "filename": "src/lib.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b5dac4635dd919b8b56bdf1533a10e8423adb6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=16b5dac4635dd919b8b56bdf1533a10e8423adb6", "patch": "@@ -126,23 +126,31 @@ mod prelude {\n     }\n }\n \n-pub(crate) struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n+pub(crate) struct CodegenCx<'tcx, B: Backend + 'static> {\n     tcx: TyCtxt<'tcx>,\n-    module: &'clif mut Module<B>,\n+    module: Module<B>,\n     constants_cx: ConstantCx,\n     cached_context: Context,\n     vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n-    debug_context: Option<&'clif mut DebugContext<'tcx>>,\n-    unwind_context: &'clif mut UnwindContext<'tcx>,\n+    debug_context: Option<DebugContext<'tcx>>,\n+    unwind_context: UnwindContext<'tcx>,\n }\n \n-impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n+impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n-        module: &'clif mut Module<B>,\n-        debug_context: Option<&'clif mut DebugContext<'tcx>>,\n-        unwind_context: &'clif mut UnwindContext<'tcx>,\n+        module: Module<B>,\n+        debug_info: bool,\n     ) -> Self {\n+        let unwind_context = UnwindContext::new(tcx, module.isa());\n+        let debug_context = if debug_info {\n+            Some(DebugContext::new(\n+                tcx,\n+                module.isa(),\n+            ))\n+        } else {\n+            None\n+        };\n         CodegenCx {\n             tcx,\n             module,\n@@ -154,8 +162,9 @@ impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n         }\n     }\n \n-    fn finalize(self) {\n-        self.constants_cx.finalize(self.tcx, self.module);\n+    fn finalize(mut self) -> (Module<B>, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n+        self.constants_cx.finalize(self.tcx, &mut self.module);\n+        (self.module, self.debug_context, self.unwind_context)\n     }\n }\n "}]}