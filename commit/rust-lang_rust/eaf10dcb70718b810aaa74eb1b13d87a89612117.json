{"sha": "eaf10dcb70718b810aaa74eb1b13d87a89612117", "node_id": "C_kwDOAAsO6NoAKGVhZjEwZGNiNzA3MThiODEwYWFhNzRlYjFiMTNkODdhODk2MTIxMTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-11T19:37:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-22T21:18:20Z"}, "message": "Normalize types in writeback results with new solver", "tree": {"sha": "391b93105c0279f66faa5a031ceeeca45ec77045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391b93105c0279f66faa5a031ceeeca45ec77045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf10dcb70718b810aaa74eb1b13d87a89612117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf10dcb70718b810aaa74eb1b13d87a89612117", "html_url": "https://github.com/rust-lang/rust/commit/eaf10dcb70718b810aaa74eb1b13d87a89612117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf10dcb70718b810aaa74eb1b13d87a89612117/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfcde247cd9ff23c193f520b4930ccedffa584b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcde247cd9ff23c193f520b4930ccedffa584b2", "html_url": "https://github.com/rust-lang/rust/commit/cfcde247cd9ff23c193f520b4930ccedffa584b2"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "2daec205cfc281cc4d4949386011d01d66a1eec1", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eaf10dcb70718b810aaa74eb1b13d87a89612117/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf10dcb70718b810aaa74eb1b13d87a89612117/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=eaf10dcb70718b810aaa74eb1b13d87a89612117", "patch": "@@ -9,7 +9,6 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n-use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n@@ -737,8 +736,7 @@ impl Locatable for hir::HirId {\n /// The Resolver. This is the type folding engine that detects\n /// unresolved types and so forth.\n struct Resolver<'cx, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    infcx: &'cx InferCtxt<'tcx>,\n+    fcx: &'cx FnCtxt<'cx, 'tcx>,\n     span: &'cx dyn Locatable,\n     body: &'tcx hir::Body<'tcx>,\n \n@@ -752,18 +750,18 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         span: &'cx dyn Locatable,\n         body: &'tcx hir::Body<'tcx>,\n     ) -> Resolver<'cx, 'tcx> {\n-        Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: None }\n+        Resolver { fcx, span, body, replaced_with_error: None }\n     }\n \n     fn report_error(&self, p: impl Into<ty::GenericArg<'tcx>>) -> ErrorGuaranteed {\n-        match self.tcx.sess.has_errors() {\n+        match self.fcx.tcx.sess.has_errors() {\n             Some(e) => e,\n             None => self\n-                .infcx\n+                .fcx\n                 .err_ctxt()\n                 .emit_inference_failure_err(\n-                    self.tcx.hir().body_owner_def_id(self.body.id()),\n-                    self.span.to_span(self.tcx),\n+                    self.fcx.tcx.hir().body_owner_def_id(self.body.id()),\n+                    self.span.to_span(self.fcx.tcx),\n                     p.into(),\n                     E0282,\n                     false,\n@@ -795,40 +793,46 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseEarlyRegions<'tcx> {\n \n impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n     fn interner(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+        self.fcx.tcx\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        match self.infcx.fully_resolve(t) {\n+        match self.fcx.fully_resolve(t) {\n+            Ok(t) if self.fcx.tcx.trait_solver_next() => {\n+                // We must normalize erasing regions here, since later lints\n+                // expect that types that show up in the typeck are fully\n+                // normalized.\n+                self.fcx.tcx.try_normalize_erasing_regions(self.fcx.param_env, t).unwrap_or(t)\n+            }\n             Ok(t) => {\n                 // Do not anonymize late-bound regions\n                 // (e.g. keep `for<'a>` named `for<'a>`).\n                 // This allows NLL to generate error messages that\n                 // refer to the higher-ranked lifetime names written by the user.\n-                EraseEarlyRegions { tcx: self.tcx }.fold_ty(t)\n+                EraseEarlyRegions { tcx: self.fcx.tcx }.fold_ty(t)\n             }\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 let e = self.report_error(t);\n                 self.replaced_with_error = Some(e);\n-                self.interner().ty_error(e)\n+                self.fcx.tcx.ty_error(e)\n             }\n         }\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         debug_assert!(!r.is_late_bound(), \"Should not be resolving bound region.\");\n-        self.tcx.lifetimes.re_erased\n+        self.fcx.tcx.lifetimes.re_erased\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        match self.infcx.fully_resolve(ct) {\n-            Ok(ct) => self.tcx.erase_regions(ct),\n+        match self.fcx.fully_resolve(ct) {\n+            Ok(ct) => self.fcx.tcx.erase_regions(ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 let e = self.report_error(ct);\n                 self.replaced_with_error = Some(e);\n-                self.interner().const_error(ct.ty(), e)\n+                self.fcx.tcx.const_error(ct.ty(), e)\n             }\n         }\n     }"}]}