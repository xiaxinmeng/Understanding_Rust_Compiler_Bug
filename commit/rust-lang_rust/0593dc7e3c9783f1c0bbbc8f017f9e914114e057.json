{"sha": "0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OTNkYzdlM2M5NzgzZjFjMGJiYmM4ZjAxN2Y5ZTkxNDExNGUwNTc=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-09-02T16:03:24Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-09-05T05:33:23Z"}, "message": "Move #[test_case] to a syntax extension", "tree": {"sha": "851bd551452a99115a72773b871f0d0f1433fcc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/851bd551452a99115a72773b871f0d0f1433fcc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "html_url": "https://github.com/rust-lang/rust/commit/0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ed10571690b2ee4fc64319967973b2e50b517f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ed10571690b2ee4fc64319967973b2e50b517f", "html_url": "https://github.com/rust-lang/rust/commit/e5ed10571690b2ee4fc64319967973b2e50b517f"}], "stats": {"total": 190, "additions": 108, "deletions": 82}, "files": [{"sha": "d27b0856c1533358ba39d074ebc286d1b85a1239", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -828,7 +828,6 @@ where\n     let (mut krate, features) = syntax::config::features(\n         krate,\n         &sess.parse_sess,\n-        sess.opts.test,\n         sess.edition(),\n     );\n     // these need to be set \"early\" so that expansion sees `quote` if enabled."}, {"sha": "8ebb181247cfd369599a442887104db3e867db6c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -1872,7 +1872,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n             return;\n         }\n \n-        if let Some(attr) = attr::find_by_name(&it.attrs, \"test_case\") {\n+        if let Some(attr) = attr::find_by_name(&it.attrs, \"rustc_test_marker\") {\n             cx.struct_span_lint(\n                 UNNAMEABLE_TEST_ITEMS,\n                 attr.span,"}, {"sha": "f403e09b7f768c54d812fd1bccac338d5b9e4fb6", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -479,7 +479,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             return def;\n         }\n \n-        if kind == MacroKind::Attr && path.len() == 1 {\n+        if kind == MacroKind::Attr {\n             if let Some(ext) = self.unshadowable_attrs.get(&path[0].name) {\n                 return Ok(ext.def());\n             }"}, {"sha": "5233267e3a95af043a0fb1165b3b5e3762f5fac8", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -21,18 +21,16 @@ use ptr::P;\n \n /// A folder that strips out items that do not belong in the current configuration.\n pub struct StripUnconfigured<'a> {\n-    pub should_test: bool,\n     pub sess: &'a ParseSess,\n     pub features: Option<&'a Features>,\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, edition: Edition)\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, edition: Edition)\n                 -> (ast::Crate, Features) {\n     let features;\n     {\n         let mut strip_unconfigured = StripUnconfigured {\n-            should_test,\n             sess,\n             features: None,\n         };\n@@ -118,11 +116,6 @@ impl<'a> StripUnconfigured<'a> {\n     // Determine if a node with the given attributes should be included in this configuration.\n     pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n-            // When not compiling with --test we should not compile the #[test] functions\n-            if !self.should_test && is_test(attr) {\n-                return false;\n-            }\n-\n             let mis = if !is_cfg(attr) {\n                 return true;\n             } else if let Some(mis) = attr.meta_item_list() {\n@@ -249,7 +242,7 @@ impl<'a> StripUnconfigured<'a> {\n         //\n         // NB: This is intentionally not part of the fold_expr() function\n         //     in order for fold_opt_expr() to be able to avoid this check\n-        if let Some(attr) = expr.attrs().iter().find(|a| is_cfg(a) || is_test(a)) {\n+        if let Some(attr) = expr.attrs().iter().find(|a| is_cfg(a)) {\n             let msg = \"removing an expression is not supported in this position\";\n             self.sess.span_diagnostic.span_err(attr.span, msg);\n         }\n@@ -352,7 +345,3 @@ impl<'a> fold::Folder for StripUnconfigured<'a> {\n fn is_cfg(attr: &ast::Attribute) -> bool {\n     attr.check_name(\"cfg\")\n }\n-\n-pub fn is_test(att: &ast::Attribute) -> bool {\n-    att.check_name(\"test_case\")\n-}"}, {"sha": "3bb19121ee308ad337851cbf2c057e8e9b96a406", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 45, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -450,14 +450,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let (fragment_with_placeholders, invocations) = {\n             let mut collector = InvocationCollector {\n                 cfg: StripUnconfigured {\n-                    should_test: self.cx.ecfg.should_test,\n                     sess: self.cx.parse_sess,\n                     features: self.cx.ecfg.features,\n                 },\n                 cx: self.cx,\n                 invocations: Vec::new(),\n                 monotonic: self.monotonic,\n-                tests_nameable: true,\n             };\n             (fragment.fold_with(&mut collector), collector.invocations)\n         };\n@@ -475,7 +473,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn fully_configure(&mut self, item: Annotatable) -> Annotatable {\n         let mut cfg = StripUnconfigured {\n-            should_test: self.cx.ecfg.should_test,\n             sess: self.cx.parse_sess,\n             features: self.cx.ecfg.features,\n         };\n@@ -1047,11 +1044,6 @@ struct InvocationCollector<'a, 'b: 'a> {\n     cfg: StripUnconfigured<'a>,\n     invocations: Vec<Invocation>,\n     monotonic: bool,\n-\n-    /// Test functions need to be nameable. Tests inside functions or in other\n-    /// unnameable locations need to be ignored. `tests_nameable` tracks whether\n-    /// any test functions found in the current context would be nameable.\n-    tests_nameable: bool,\n }\n \n impl<'a, 'b> InvocationCollector<'a, 'b> {\n@@ -1069,20 +1061,6 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         placeholder(fragment_kind, NodeId::placeholder_from_mark(mark))\n     }\n \n-    /// Folds the item allowing tests to be expanded because they are still nameable.\n-    /// This should probably only be called with module items\n-    fn fold_nameable(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n-        fold::noop_fold_item(item, self)\n-    }\n-\n-    /// Folds the item but doesn't allow tests to occur within it\n-    fn fold_unnameable(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n-        let was_nameable = mem::replace(&mut self.tests_nameable, false);\n-        let items = fold::noop_fold_item(item, self);\n-        self.tests_nameable = was_nameable;\n-        items\n-    }\n-\n     fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: AstFragmentKind) -> AstFragment {\n         self.collect(kind, InvocationKind::Bang { mac: mac, ident: None, span: span })\n     }\n@@ -1297,7 +1275,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     fn fold_item(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n         let item = configure!(self, item);\n \n-        let (attr, traits, mut item) = self.classify_item(item);\n+        let (attr, traits, item) = self.classify_item(item);\n         if attr.is_some() || !traits.is_empty() {\n             let item = Annotatable::Item(item);\n             return self.collect_attr(attr, traits, item, AstFragmentKind::Items).make_items();\n@@ -1319,7 +1297,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n             }\n             ast::ItemKind::Mod(ast::Mod { inner, .. }) => {\n                 if item.ident == keywords::Invalid.ident() {\n-                    return self.fold_nameable(item);\n+                    return noop_fold_item(item, self);\n                 }\n \n                 let orig_directory_ownership = self.cx.current_expansion.directory_ownership;\n@@ -1359,32 +1337,13 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n \n                 let orig_module =\n                     mem::replace(&mut self.cx.current_expansion.module, Rc::new(module));\n-                let result = self.fold_nameable(item);\n+                let result = noop_fold_item(item, self);\n                 self.cx.current_expansion.module = orig_module;\n                 self.cx.current_expansion.directory_ownership = orig_directory_ownership;\n                 result\n             }\n \n-            // Ensure that test items can be exported by the harness generator.\n-            // #[test] fn foo() {}\n-            // becomes:\n-            // #[test] pub fn foo_gensym(){}\n-              ast::ItemKind::Const(..)\n-            | ast::ItemKind::Static(..)\n-            | ast::ItemKind::Fn(..) if self.cx.ecfg.should_test => {\n-                if self.tests_nameable && attr::contains_name(&item.attrs, \"test_case\") {\n-                    // Publicize the item under gensymed name to avoid pollution\n-                    // This means #[test_case] items can't be referenced by user code\n-                    item = item.map(|mut item| {\n-                        item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n-                        item.ident = item.ident.gensym();\n-                        item\n-                    });\n-                }\n-\n-                self.fold_unnameable(item)\n-            }\n-            _ => self.fold_unnameable(item),\n+            _ => noop_fold_item(item, self),\n         }\n     }\n \n@@ -1609,6 +1568,7 @@ impl<'feat> ExpansionConfig<'feat> {\n     feature_tests! {\n         fn enable_quotes = quote,\n         fn enable_asm = asm,\n+        fn enable_custom_test_frameworks = custom_test_frameworks,\n         fn enable_global_asm = global_asm,\n         fn enable_log_syntax = log_syntax,\n         fn enable_concat_idents = concat_idents,"}, {"sha": "e3ea3563d853bb6fc6e2b9bc85f1b56fdddaf852", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -777,10 +777,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"no_link\", Normal, Ungated),\n     (\"derive\", Normal, Ungated),\n     (\"should_panic\", Normal, Ungated),\n-    (\"test_case\", Normal, Gated(Stability::Unstable,\n-                                \"custom_test_frameworks\",\n-                                \"Custom test frameworks are experimental\",\n-                                cfg_fn!(custom_test_frameworks))),\n     (\"ignore\", Normal, Ungated),\n     (\"no_implicit_prelude\", Normal, Ungated),\n     (\"reexport_test_harness_main\", Normal, Ungated),\n@@ -965,6 +961,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                       attribute is just used for rustc unit \\\n                                                       tests and will never be stable\",\n                                                      cfg_fn!(rustc_attrs))),\n+    (\"rustc_test_marker\", Normal, Gated(Stability::Unstable,\n+                                     \"rustc_attrs\",\n+                                     \"the `#[rustc_test_marker]` attribute \\\n+                                      is used internally to track tests\",\n+                                     cfg_fn!(rustc_attrs))),\n \n     // RFC #2094\n     (\"nll\", Whitelisted, Gated(Stability::Unstable,\n@@ -1164,7 +1165,7 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"type_length_limit\", CrateLevel, Ungated),\n     (\"test_runner\", CrateLevel, Gated(Stability::Unstable,\n                     \"custom_test_frameworks\",\n-                    \"Custom Test Frameworks is an unstable feature\",\n+                    EXPLAIN_CUSTOM_TEST_FRAMEWORKS,\n                     cfg_fn!(custom_test_frameworks))),\n ];\n \n@@ -1382,6 +1383,9 @@ pub const EXPLAIN_ASM: &'static str =\n pub const EXPLAIN_GLOBAL_ASM: &'static str =\n     \"`global_asm!` is not stable enough for use and is subject to change\";\n \n+pub const EXPLAIN_CUSTOM_TEST_FRAMEWORKS: &'static str =\n+    \"custom test frameworks are an unstable feature\";\n+\n pub const EXPLAIN_LOG_SYNTAX: &'static str =\n     \"`log_syntax!` is not stable enough for use and is subject to change\";\n "}, {"sha": "5f80af77f494046f0353f2470f39d826edf2cf7d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -6272,7 +6272,6 @@ impl<'a> Parser<'a> {\n         let (in_cfg, outer_attrs) = {\n             let mut strip_unconfigured = ::config::StripUnconfigured {\n                 sess: self.sess,\n-                should_test: false, // irrelevant\n                 features: None, // don't perform gated feature checking\n             };\n             let outer_attrs = strip_unconfigured.process_cfg_attrs(outer_attrs.to_owned());"}, {"sha": "ab67736c389c0164f20c1093dac4a73995ffb9dc", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -433,7 +433,7 @@ fn visible_path(cx: &TestCtxt, path: &[Ident]) -> Vec<Ident>{\n }\n \n fn is_test_case(i: &ast::Item) -> bool {\n-    attr::contains_name(&i.attrs, \"test_case\")\n+    attr::contains_name(&i.attrs, \"rustc_test_marker\")\n }\n \n fn get_test_runner(sd: &errors::Handler, krate: &ast::Crate) -> Option<ast::Path> {"}, {"sha": "e16f3b1ccb3f3da4fe4b5b15bf1e4727b11af074", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -54,6 +54,7 @@ mod global_asm;\n mod log_syntax;\n mod trace_macros;\n mod test;\n+mod test_case;\n \n pub mod proc_macro_registrar;\n \n@@ -145,6 +146,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n         assert: assert::expand_assert,\n     }\n \n+    register(Symbol::intern(\"test_case\"), MultiModifier(Box::new(test_case::expand)));\n \n     // format_args uses `unstable` things internally.\n     register(Symbol::intern(\"format_args\"),"}, {"sha": "be3485cfa7cc23a5e2c8a40e3a22e42ac4822f39", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -135,8 +135,14 @@ pub fn expand_test_or_bench(\n     };\n \n     let mut test_const = cx.item(sp, item.ident.gensym(),\n-        // #[test_case]\n-        vec![cx.attribute(attr_sp, cx.meta_word(attr_sp, Symbol::intern(\"test_case\")))],\n+        vec![\n+            // #[cfg(test)]\n+            cx.attribute(attr_sp, cx.meta_list(attr_sp, Symbol::intern(\"cfg\"), vec![\n+                cx.meta_list_item_word(attr_sp, Symbol::intern(\"test\"))\n+            ])),\n+            // #[rustc_test_marker]\n+            cx.attribute(attr_sp, cx.meta_word(attr_sp, Symbol::intern(\"rustc_test_marker\")))\n+        ],\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n             // test::TestDescAndFn {"}, {"sha": "0128db7dd78d7cca4b7ba9f49feb5e8458618bb6", "filename": "src/libsyntax_ext/test_case.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -0,0 +1,75 @@\n+\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// #[test_case] is used by custom test authors to mark tests\n+// When building for test, it needs to make the item public and gensym the name\n+// Otherwise, we'll omit the item. This behavior means that any item annotated\n+// with #[test_case] is never addressable.\n+//\n+// We mark item with an inert attribute \"rustc_test_marker\" which the test generation\n+// logic will pick up on.\n+\n+use syntax::ext::base::*;\n+use syntax::ext::build::AstBuilder;\n+use syntax::ext::hygiene::{self, Mark, SyntaxContext};\n+use syntax::ast;\n+use syntax::source_map::respan;\n+use syntax::symbol::Symbol;\n+use syntax_pos::{DUMMY_SP, Span};\n+use syntax::source_map::{ExpnInfo, MacroAttribute};\n+use syntax::feature_gate;\n+\n+pub fn expand(\n+    ecx: &mut ExtCtxt,\n+    attr_sp: Span,\n+    _meta_item: &ast::MetaItem,\n+    anno_item: Annotatable\n+) -> Vec<Annotatable> {\n+    if !ecx.ecfg.enable_custom_test_frameworks() {\n+        feature_gate::emit_feature_err(&ecx.parse_sess,\n+                                       \"custom_test_frameworks\",\n+                                       attr_sp,\n+                                       feature_gate::GateIssue::Language,\n+                                       feature_gate::EXPLAIN_CUSTOM_TEST_FRAMEWORKS);\n+\n+        return vec![anno_item];\n+    }\n+\n+    if !ecx.ecfg.should_test { return vec![]; }\n+\n+    let sp = {\n+        let mark = Mark::fresh(Mark::root());\n+        mark.set_expn_info(ExpnInfo {\n+            call_site: DUMMY_SP,\n+            def_site: None,\n+            format: MacroAttribute(Symbol::intern(\"test_case\")),\n+            allow_internal_unstable: true,\n+            allow_internal_unsafe: false,\n+            local_inner_macros: false,\n+            edition: hygiene::default_edition(),\n+        });\n+        attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n+    };\n+\n+    let mut item = anno_item.expect_item();\n+\n+    item = item.map(|mut item| {\n+        item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n+        item.ident = item.ident.gensym();\n+        item.attrs.push(\n+            ecx.attribute(sp,\n+                ecx.meta_word(sp, Symbol::intern(\"rustc_test_marker\")))\n+        );\n+        item\n+    });\n+\n+    return vec![Annotatable::Item(item)]\n+}"}, {"sha": "55eca7f45a5aec0a7814892316c3a1ada6d08ca3", "filename": "src/test/ui/cfg-non-opt-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Ftest%2Fui%2Fcfg-non-opt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Ftest%2Fui%2Fcfg-non-opt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-non-opt-expr.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -18,6 +18,4 @@ fn main() {\n     //~^ ERROR removing an expression is not supported in this position\n     let _ = [1, 2, 3][#[cfg(unset)] 1];\n     //~^ ERROR removing an expression is not supported in this position\n-    let _ = #[test_case] ();\n-    //~^ ERROR removing an expression is not supported in this position\n }"}, {"sha": "1892cee113ecb93edcb646ccd7a08f68941eb1f5", "filename": "src/test/ui/cfg-non-opt-expr.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Ftest%2Fui%2Fcfg-non-opt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Ftest%2Fui%2Fcfg-non-opt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-non-opt-expr.stderr?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -16,11 +16,5 @@ error: removing an expression is not supported in this position\n LL |     let _ = [1, 2, 3][#[cfg(unset)] 1];\n    |                       ^^^^^^^^^^^^^\n \n-error: removing an expression is not supported in this position\n-  --> $DIR/cfg-non-opt-expr.rs:21:13\n-   |\n-LL |     let _ = #[test_case] ();\n-   |             ^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "7c9f7dd040207fd80f106eef2329923477b50875", "filename": "src/test/ui/feature-gate-custom_test_frameworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Ftest%2Fui%2Ffeature-gate-custom_test_frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Ftest%2Fui%2Ffeature-gate-custom_test_frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_test_frameworks.rs?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![test_runner(main)] //~ ERROR Custom Test Frameworks is an unstable feature\n+#![test_runner(main)] //~ ERROR custom test frameworks are an unstable feature\n \n fn main() {}"}, {"sha": "bfcbab500671f2b643943f5d6e827033d37afe84", "filename": "src/test/ui/feature-gate-custom_test_frameworks.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Ftest%2Fui%2Ffeature-gate-custom_test_frameworks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0593dc7e3c9783f1c0bbbc8f017f9e914114e057/src%2Ftest%2Fui%2Ffeature-gate-custom_test_frameworks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_test_frameworks.stderr?ref=0593dc7e3c9783f1c0bbbc8f017f9e914114e057", "patch": "@@ -1,7 +1,7 @@\n-error[E0658]: Custom Test Frameworks is an unstable feature (see issue #50297)\n+error[E0658]: custom test frameworks are an unstable feature (see issue #50297)\n   --> $DIR/feature-gate-custom_test_frameworks.rs:11:1\n    |\n-LL | #![test_runner(main)] //~ ERROR Custom Test Frameworks is an unstable feature\n+LL | #![test_runner(main)] //~ ERROR custom test frameworks are an unstable feature\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_test_frameworks)] to the crate attributes to enable"}]}