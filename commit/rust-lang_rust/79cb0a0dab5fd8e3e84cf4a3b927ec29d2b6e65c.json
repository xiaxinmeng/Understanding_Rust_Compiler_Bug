{"sha": "79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5Y2IwYTBkYWI1ZmQ4ZTNlODRjZjRhM2I5MjdlYzI5ZDJiNmU2NWM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-10-31T20:21:48Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-01T18:57:08Z"}, "message": "Complete trait assoc items", "tree": {"sha": "88f2ebdf338d230f6019d56acb96bea0878f7248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f2ebdf338d230f6019d56acb96bea0878f7248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "html_url": "https://github.com/rust-lang/rust/commit/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da941897d4ed092a219729d7980bd103907850a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da941897d4ed092a219729d7980bd103907850a", "html_url": "https://github.com/rust-lang/rust/commit/5da941897d4ed092a219729d7980bd103907850a"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "4cace432e32afc4f5032e442320a7669aab4937e", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "patch": "@@ -76,7 +76,8 @@ pub use crate::{\n     resolve::ScopeDef,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n-        display::HirDisplay, ApplicationTy, CallableDef, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n+        display::HirDisplay, method_resolution::LookupMode, ApplicationTy, CallableDef, Substs,\n+        TraitRef, Ty, TypeCtor, TypeWalk,\n     },\n };\n "}, {"sha": "82e6eb852cd7119d43fca7a8971b5996ef1840ac", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "patch": "@@ -27,7 +27,7 @@ use crate::{\n     },\n     ids::LocationCtx,\n     resolve::{ScopeDef, TypeNs, ValueNs},\n-    ty::method_resolution::implements_trait,\n+    ty::method_resolution::{self, implements_trait},\n     AssocItem, Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId,\n     MacroDef, Module, Name, Path, Resolver, Static, Struct, Ty,\n };\n@@ -327,17 +327,19 @@ impl SourceAnalyzer {\n         db: &impl HirDatabase,\n         ty: Ty,\n         name: Option<&Name>,\n+        mode: method_resolution::LookupMode,\n         callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n     ) -> Option<T> {\n         // There should be no inference vars in types passed here\n         // FIXME check that?\n+        // FIXME replace Unknown by bound vars here\n         let canonical = crate::ty::Canonical { value: ty, num_vars: 0 };\n-        crate::ty::method_resolution::iterate_method_candidates(\n+        method_resolution::iterate_method_candidates(\n             &canonical,\n             db,\n             &self.resolver,\n             name,\n-            crate::ty::method_resolution::LookupMode::MethodCall,\n+            mode,\n             callback,\n         )\n     }"}, {"sha": "9caff422fd43c487aa39289fc8670ae33e299d7f", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "patch": "@@ -176,7 +176,7 @@ pub(crate) fn lookup_method(\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub(crate) enum LookupMode {\n+pub enum LookupMode {\n     MethodCall,\n     Path,\n }"}, {"sha": "fe32e7366ff98015736c2bd60f45276cdaf5b14a", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "patch": "@@ -58,15 +58,21 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n \n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n     let mut seen_methods = FxHashSet::default();\n-    ctx.analyzer.iterate_method_candidates(ctx.db, receiver, None, |_ty, item| {\n-        if let hir::AssocItem::Function(func) = item {\n-            let data = func.data(ctx.db);\n-            if data.has_self_param() && seen_methods.insert(data.name().clone()) {\n-                acc.add_function(ctx, func);\n+    ctx.analyzer.iterate_method_candidates(\n+        ctx.db,\n+        receiver,\n+        None,\n+        hir::LookupMode::MethodCall,\n+        |_ty, item| {\n+            if let hir::AssocItem::Function(func) = item {\n+                let data = func.data(ctx.db);\n+                if data.has_self_param() && seen_methods.insert(data.name().clone()) {\n+                    acc.add_function(ctx, func);\n+                }\n             }\n-        }\n-        None::<()>\n-    });\n+            None::<()>\n+        },\n+    );\n }\n \n #[cfg(test)]"}, {"sha": "940858342a8e6befc1b64cea17e534824594e261", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=79cb0a0dab5fd8e3e84cf4a3b927ec29d2b6e65c", "patch": "@@ -50,9 +50,12 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                 _ => unreachable!(),\n             };\n-            let krate = ctx.module.map(|m| m.krate());\n-            if let Some(krate) = krate {\n-                ty.iterate_impl_items(ctx.db, krate, |item| {\n+            ctx.analyzer.iterate_method_candidates(\n+                ctx.db,\n+                ty.clone(),\n+                None,\n+                hir::LookupMode::Path,\n+                |_ty, item| {\n                     match item {\n                         hir::AssocItem::Function(func) => {\n                             let data = func.data(ctx.db);\n@@ -64,6 +67,18 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                         hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                     }\n                     None::<()>\n+                },\n+            );\n+            // Iterate assoc types separately\n+            // FIXME: complete T::AssocType\n+            let krate = ctx.module.map(|m| m.krate());\n+            if let Some(krate) = krate {\n+                ty.iterate_impl_items(ctx.db, krate, |item| {\n+                    match item {\n+                        hir::AssocItem::Function(_) | hir::AssocItem::Const(_) => {}\n+                        hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n+                    }\n+                    None::<()>\n                 });\n             }\n         }\n@@ -593,7 +608,22 @@ mod tests {\n                 fn foo() { let _ = S::<|> }\n                 \"\n             ),\n-            @\"[]\"\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"m()\",\n+                source_range: [99; 99),\n+                delete: [99; 99),\n+                insert: \"m()$0\",\n+                kind: Function,\n+                lookup: \"m\",\n+                detail: \"fn m()\",\n+                documentation: Documentation(\n+                    \"A trait method\",\n+                ),\n+            },\n+        ]\n+        \"###\n         );\n     }\n "}]}