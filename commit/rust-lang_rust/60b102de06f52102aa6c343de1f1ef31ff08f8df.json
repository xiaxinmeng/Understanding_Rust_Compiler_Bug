{"sha": "60b102de06f52102aa6c343de1f1ef31ff08f8df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYjEwMmRlMDZmNTIxMDJhYTZjMzQzZGUxZjFlZjMxZmYwOGY4ZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-31T10:32:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-21T12:00:04Z"}, "message": "Don't recommend ManuallyDrop to customize drop order\n\nSee\nhttps://internals.rust-lang.org/t/need-for-controlling-drop-order-of-fields/12914/21\nfor the discussion.\n\nTL;DR: ManuallyDrop is unsafe and footguny, but you can just ask the\ncompiler to do all the work for you by re-ordering declarations.", "tree": {"sha": "d7c2e638e683121bfb22b93cedfd25cef5e49f48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7c2e638e683121bfb22b93cedfd25cef5e49f48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60b102de06f52102aa6c343de1f1ef31ff08f8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60b102de06f52102aa6c343de1f1ef31ff08f8df", "html_url": "https://github.com/rust-lang/rust/commit/60b102de06f52102aa6c343de1f1ef31ff08f8df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60b102de06f52102aa6c343de1f1ef31ff08f8df/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44", "html_url": "https://github.com/rust-lang/rust/commit/6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "d86939454be5b0c4432dec7fe6c97a90da0c5e48", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/60b102de06f52102aa6c343de1f1ef31ff08f8df/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b102de06f52102aa6c343de1f1ef31ff08f8df/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=60b102de06f52102aa6c343de1f1ef31ff08f8df", "patch": "@@ -15,50 +15,33 @@ use crate::ptr;\n /// be exposed through a public safe API.\n /// Correspondingly, `ManuallyDrop::drop` is unsafe.\n ///\n-/// # Examples\n+/// # `ManuallyDrop` and drop order.\n ///\n-/// This wrapper can be used to enforce a particular drop order on fields, regardless\n-/// of how they are defined in the struct:\n+/// Rust has a well-defined [drop order] of values. To make sure that fields or\n+/// locals are dropped in a specific order, reorder the declarations such that\n+/// the implicit drop order is the correct one.\n ///\n-/// ```rust\n-/// use std::mem::ManuallyDrop;\n-/// struct Peach;\n-/// struct Banana;\n-/// struct Melon;\n-/// struct FruitBox {\n-///     // Immediately clear there\u2019s something non-trivial going on with these fields.\n-///     peach: ManuallyDrop<Peach>,\n-///     melon: Melon, // Field that\u2019s independent of the other two.\n-///     banana: ManuallyDrop<Banana>,\n-/// }\n+/// It is possible to use `ManuallyDrop` to control the drop order, but this\n+/// requires unsafe code and is hard to do correctly in the presence of\n+/// unwinding.\n ///\n-/// impl Drop for FruitBox {\n-///     fn drop(&mut self) {\n-///         unsafe {\n-///             // Explicit ordering in which field destructors are run specified in the intuitive\n-///             // location \u2013 the destructor of the structure containing the fields.\n-///             // Moreover, one can now reorder fields within the struct however much they want.\n-///             ManuallyDrop::drop(&mut self.peach);\n-///             ManuallyDrop::drop(&mut self.banana);\n-///         }\n-///         // After destructor for `FruitBox` runs (this function), the destructor for Melon gets\n-///         // invoked in the usual manner, as it is not wrapped in `ManuallyDrop`.\n-///     }\n-/// }\n-/// ```\n+/// For example, if you want to make sure that a specific field is dropped after\n+/// the others, make it the last field of a struct:\n ///\n-/// However, care should be taken when using this pattern as it can lead to *leak amplification*.\n-/// In this example, if the `Drop` implementation for `Peach` were to panic, the `banana` field\n-/// would also be leaked.\n+/// ```\n+/// struct Context;\n ///\n-/// In contrast, the automatically-generated compiler drop implementation would have ensured\n-/// that all fields are dropped even in the presence of panics. This is especially important when\n-/// working with [pinned] data, where reusing the memory without calling the destructor could lead\n-/// to Undefined Behaviour.\n+/// struct Widget {\n+///     children: Vec<Widget>,\n+///     // `context` will be dropped after `children`.\n+///     // Rust guarantees that fields are dropped in the order of declaration.\n+///     context: Context,\n+/// }\n+/// ```\n ///\n+/// [drop order]: https://doc.rust-lang.org/reference/destructors.html\n /// [`mem::zeroed`]: crate::mem::zeroed\n /// [`MaybeUninit<T>`]: crate::mem::MaybeUninit\n-/// [pinned]: crate::pin\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n #[lang = \"manually_drop\"]\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]"}]}