{"sha": "739f22f611869d82bc6b5525426ad721c9674040", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOWYyMmY2MTE4NjlkODJiYzZiNTUyNTQyNmFkNzIxYzk2NzQwNDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-21T04:11:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-21T04:11:47Z"}, "message": "auto merge of #13037 : alexcrichton/rust/attr-syntax, r=brson\n\nThis will require a snapshot to finish, but these commits update the parser to parse attributes of the form `#![...]`\r\n\r\nThanks to @TheHydroImpulse for all the initial work!\r\n\r\ncc #2569", "tree": {"sha": "1ef0a81e5d7d6c076ac9669a16fab8faa3c80b34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef0a81e5d7d6c076ac9669a16fab8faa3c80b34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/739f22f611869d82bc6b5525426ad721c9674040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/739f22f611869d82bc6b5525426ad721c9674040", "html_url": "https://github.com/rust-lang/rust/commit/739f22f611869d82bc6b5525426ad721c9674040", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/739f22f611869d82bc6b5525426ad721c9674040/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eae7df43cd21b76fe91eeaf6ef2af9bd2a8fafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eae7df43cd21b76fe91eeaf6ef2af9bd2a8fafc", "html_url": "https://github.com/rust-lang/rust/commit/6eae7df43cd21b76fe91eeaf6ef2af9bd2a8fafc"}, {"sha": "84a91b860330c2b83fd0546b33a949079d422166", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a91b860330c2b83fd0546b33a949079d422166", "html_url": "https://github.com/rust-lang/rust/commit/84a91b860330c2b83fd0546b33a949079d422166"}], "stats": {"total": 133, "additions": 111, "deletions": 22}, "files": [{"sha": "855bc1e5852d07fb3f9fae67b7b53c77b0eab480", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -12,6 +12,7 @@\n #[feature(phase)];\n \n #[allow(non_camel_case_types)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n #[deny(warnings)];\n \n extern crate test;"}, {"sha": "dbebb8fb2bc680edd1ec61b4ac64a7b69a8967c0", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -24,6 +24,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n #[allow(missing_doc)];\n #[feature(managed_boxes)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n extern crate collections;\n "}, {"sha": "b9846c9c3a2a8385bb443656235e4cd82faed6fa", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -174,6 +174,7 @@\n // NB this does *not* include globs, please keep it that way.\n #[feature(macro_rules, phase)];\n #[allow(visible_private_types)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n extern crate rand;"}, {"sha": "ee4f15e7954bd31b81717b29bd05c4bd84ffcedb", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -42,6 +42,7 @@ via `close` and `delete` methods.\n #[feature(macro_rules)];\n #[deny(unused_result, unused_must_use)];\n #[allow(visible_private_types)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n #[cfg(test)] extern crate green;\n "}, {"sha": "8f7fb5749a1ebfd3e7944ecb35d6733d81adda6c", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -38,9 +38,6 @@ impl<'a> ParserAttr for Parser<'a> {\n                 attrs.push(self.parse_attribute(false));\n               }\n               token::POUND => {\n-                if self.look_ahead(1, |t| *t != token::LBRACKET) {\n-                    break;\n-                }\n                 attrs.push(self.parse_attribute(false));\n               }\n               token::DOC_COMMENT(s) => {\n@@ -61,40 +58,55 @@ impl<'a> ParserAttr for Parser<'a> {\n         return attrs;\n     }\n \n-    // matches attribute = # [ meta_item ]\n+    // matches attribute = # ! [ meta_item ]\n     //\n-    // if permit_inner is true, then a trailing `;` indicates an inner\n+    // if permit_inner is true, then a leading `!` indicates an inner\n     // attribute\n     fn parse_attribute(&mut self, permit_inner: bool) -> ast::Attribute {\n         debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n                permit_inner, self.token);\n-        let (span, value) = match self.token {\n+        let (span, value, mut style) = match self.token {\n             INTERPOLATED(token::NtAttr(attr)) => {\n                 assert!(attr.node.style == ast::AttrOuter);\n                 self.bump();\n-                (attr.span, attr.node.value)\n+                (attr.span, attr.node.value, ast::AttrOuter)\n             }\n             token::POUND => {\n                 let lo = self.span.lo;\n                 self.bump();\n+\n+                let style = if self.eat(&token::NOT) {\n+                    if !permit_inner {\n+                        self.span_err(self.span,\n+                                      \"an inner attribute is not permitted in \\\n+                                       this context\");\n+                    }\n+                    ast::AttrInner\n+                } else {\n+                    ast::AttrOuter\n+                };\n+\n                 self.expect(&token::LBRACKET);\n                 let meta_item = self.parse_meta_item();\n                 self.expect(&token::RBRACKET);\n+\n                 let hi = self.span.hi;\n-                (mk_sp(lo, hi), meta_item)\n+                (mk_sp(lo, hi), meta_item, style)\n             }\n             _ => {\n                 let token_str = self.this_token_to_str();\n                 self.fatal(format!(\"expected `\\\\#` but found `{}`\",\n                                    token_str));\n             }\n         };\n-        let style = if permit_inner && self.token == token::SEMI {\n-            self.bump();\n-            ast::AttrInner\n-        } else {\n-            ast::AttrOuter\n-        };\n+\n+        if permit_inner && self.eat(&token::SEMI) {\n+            // NOTE: uncomment this after a stage0 snap\n+            //self.warn(\"This uses the old attribute syntax. Semicolons\n+            //  are not longer required.\");\n+            style = ast::AttrInner;\n+        }\n+\n         return Spanned {\n             span: span,\n             node: ast::Attribute_ {\n@@ -125,10 +137,6 @@ impl<'a> ParserAttr for Parser<'a> {\n                     self.parse_attribute(true)\n                 }\n                 token::POUND => {\n-                    if self.look_ahead(1, |t| *t != token::LBRACKET) {\n-                        // This is an extension\n-                        break;\n-                    }\n                     self.parse_attribute(true)\n                 }\n                 token::DOC_COMMENT(s) => {"}, {"sha": "43ae9b97350df4e6e2d2c444b4487dd826745bb4", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -319,7 +319,9 @@ fn read_block_comment(rdr: &StringReader,\n fn peeking_at_comment(rdr: &StringReader) -> bool {\n     return (rdr.curr_is('/') && nextch_is(rdr, '/')) ||\n          (rdr.curr_is('/') && nextch_is(rdr, '*')) ||\n-         (rdr.curr_is('#') && nextch_is(rdr, '!'));\n+         // consider shebangs comments, but not inner attributes\n+         (rdr.curr_is('#') && nextch_is(rdr, '!') &&\n+          !lexer::nextnextch_is(rdr, '['));\n }\n \n fn consume_comment(rdr: &StringReader,"}, {"sha": "ca2fbd245873f8ca146a557e01634a4e918ba0f8", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -18,9 +18,10 @@ use parse::token::{str_to_ident};\n \n use std::cell::{Cell, RefCell};\n use std::char;\n-use std::rc::Rc;\n use std::mem::replace;\n use std::num::from_str_radix;\n+use std::rc::Rc;\n+use std::str;\n \n pub use ext::tt::transcribe::{TtReader, new_tt_reader};\n \n@@ -271,9 +272,11 @@ pub fn bump(rdr: &StringReader) {\n         rdr.curr.set(None);\n     }\n }\n+\n pub fn is_eof(rdr: &StringReader) -> bool {\n     rdr.curr.get().is_none()\n }\n+\n pub fn nextch(rdr: &StringReader) -> Option<char> {\n     let offset = byte_offset(rdr, rdr.pos.get()).to_uint();\n     if offset < rdr.filemap.deref().src.len() {\n@@ -286,6 +289,21 @@ pub fn nextch_is(rdr: &StringReader, c: char) -> bool {\n     nextch(rdr) == Some(c)\n }\n \n+pub fn nextnextch(rdr: &StringReader) -> Option<char> {\n+    let offset = byte_offset(rdr, rdr.pos.get()).to_uint();\n+    let s = rdr.filemap.deref().src.as_slice();\n+    if offset >= s.len() { return None }\n+    let str::CharRange { next, .. } = s.char_range_at(offset);\n+    if next < s.len() {\n+        Some(s.char_at(next))\n+    } else {\n+        None\n+    }\n+}\n+pub fn nextnextch_is(rdr: &StringReader, c: char) -> bool {\n+    nextnextch(rdr) == Some(c)\n+}\n+\n fn hex_digit_val(c: Option<char>) -> int {\n     let d = c.unwrap_or('\\x00');\n \n@@ -370,6 +388,12 @@ fn consume_any_line_comment(rdr: &StringReader)\n         }\n     } else if rdr.curr_is('#') {\n         if nextch_is(rdr, '!') {\n+\n+            // Parse an inner attribute.\n+            if nextnextch_is(rdr, '[') {\n+                return None;\n+            }\n+\n             // I guess this is the only way to figure out if\n             // we're at the beginning of the file...\n             let cmap = CodeMap::new();"}, {"sha": "ec7d48cf12bda0368f5e448c3478c4fe34c3bbb1", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -33,6 +33,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n #[feature(asm, macro_rules)];\n+#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n \n extern crate collections;\n extern crate getopts;"}, {"sha": "b1f7a791f0958100416f3ecfa4e3a30429d90ff1", "filename": "src/test/compile-fail/attr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Fcompile-fail%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Fcompile-fail%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}\n+\n+#![lang(foo)] //~ ERROR an inner attribute is not permitted in this context\n+fn foo() {}"}, {"sha": "3a6594f64f36abc28213581bfa4ba4ca1b30bc69", "filename": "src/test/compile-fail/column-offset-1-based.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Fcompile-fail%2Fcolumn-offset-1-based.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Fcompile-fail%2Fcolumn-offset-1-based.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcolumn-offset-1-based.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-# //~ ERROR 11:1: 11:2 error: expected item\n+# //~ ERROR 11:1: 11:2 error: expected `[` but found `<eof>`"}, {"sha": "e2810b854f7959dfed8e9e811a4d8bd2932946fd", "filename": "src/test/compile-fail/issue-1655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected item\n+// error-pattern:expected `[` but found `~`\n mod blade_runner {\n     #~[doc(\n         brief = \"Blade Runner is probably the best movie ever\","}, {"sha": "af615912f2823e79d56b50ea826d1a4298107753", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[foo(bar)]\n+mod foo {\n+  #![feature(globs)]\n+}\n+\n+pub fn main() {}"}, {"sha": "f4919f768b9cddd21f56be3b9c024a9542c3196e", "filename": "src/test/run-pass/attr-shebang.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Frun-pass%2Fattr-shebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Frun-pass%2Fattr-shebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-shebang.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -0,0 +1,5 @@\n+#![allow(unknown_features)]\n+#![feature(bogus)]\n+pub fn main() { }\n+// ignore-license\n+// ignore-fast"}, {"sha": "6a19a44e07420db516dcf3874a9e4df9c28dd8e5", "filename": "src/test/run-pass/attr.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Frun-pass%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739f22f611869d82bc6b5525426ad721c9674040/src%2Ftest%2Frun-pass%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr.rs?ref=739f22f611869d82bc6b5525426ad721c9674040", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-fast\n+\n+#[main]\n+fn foo() {\n+}"}]}