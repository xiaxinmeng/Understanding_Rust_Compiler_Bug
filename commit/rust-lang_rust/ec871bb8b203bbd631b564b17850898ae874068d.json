{"sha": "ec871bb8b203bbd631b564b17850898ae874068d", "node_id": "C_kwDOAAsO6NoAKGVjODcxYmI4YjIwM2JiZDYzMWI1NjRiMTc4NTA4OThhZTg3NDA2OGQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-07T16:38:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-07T16:38:42Z"}, "message": "Merge #11930\n\n11930: internal: move function unsafety determination out of the ItemTree r=jonas-schievink a=jonas-schievink\n\nResolves some FIXMEs.\r\n\r\nI've also renamed some FnFlags to be more explicit about what they represent (presence of keywords, not necessarily presence of semantics)\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "a137e89dffff724f09f5cea300340a27f2af59d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a137e89dffff724f09f5cea300340a27f2af59d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec871bb8b203bbd631b564b17850898ae874068d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTxOSCRBK7hj4Ov3rIwAAtwMIAGXPo9kdI9jo3JPqpRKw5lC1\n0jHwr9lYg+T17a5gupR/Zi3Cw1HR1AWxMKxEEaJK5jVkiC4QltseCNw3q+uNW7H3\nq/ZYloZCtny4WVfyGJ9aMp2MrBkivVuWKoIIyfPThSwcBtrCGav0UGWnOQZZWOQ2\nkTXQaxtuilzxJuFgNqufaLpNbaPZlEQRI1eRwRyb/NMaqpRUhSbwRqZiBd2TxZ/9\nZ+8U23xwa4RTO6U2suf9gzaJgtlO61WnrYZ7fsW1Fn78Yo1mAlG82qsLAZ0gJA2r\nB5fnHqKVro9Mc8BuLr0DqP0x8SC0JHFhccTf3YdrFil3SSOxfBwRtzejgR2n0VI=\n=knVp\n-----END PGP SIGNATURE-----\n", "payload": "tree a137e89dffff724f09f5cea300340a27f2af59d8\nparent 12f803d1e3503364522345cd8557b18ddf497f6f\nparent 5d8b4c40eb46c44c3859cc00dc19f1b05de1176f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649349522 +0000\ncommitter GitHub <noreply@github.com> 1649349522 +0000\n\nMerge #11930\n\n11930: internal: move function unsafety determination out of the ItemTree r=jonas-schievink a=jonas-schievink\n\nResolves some FIXMEs.\r\n\r\nI've also renamed some FnFlags to be more explicit about what they represent (presence of keywords, not necessarily presence of semantics)\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec871bb8b203bbd631b564b17850898ae874068d", "html_url": "https://github.com/rust-lang/rust/commit/ec871bb8b203bbd631b564b17850898ae874068d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec871bb8b203bbd631b564b17850898ae874068d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12f803d1e3503364522345cd8557b18ddf497f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/12f803d1e3503364522345cd8557b18ddf497f6f", "html_url": "https://github.com/rust-lang/rust/commit/12f803d1e3503364522345cd8557b18ddf497f6f"}, {"sha": "5d8b4c40eb46c44c3859cc00dc19f1b05de1176f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8b4c40eb46c44c3859cc00dc19f1b05de1176f", "html_url": "https://github.com/rust-lang/rust/commit/5d8b4c40eb46c44c3859cc00dc19f1b05de1176f"}], "stats": {"total": 205, "additions": 107, "deletions": 98}, "files": [{"sha": "6d5ddad3569f983b405d1ef0dc757dc89cb5f236", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -26,16 +26,16 @@ impl HirDisplay for Function {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         let data = f.db.function_data(self.id);\n         write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n-        if data.is_default() {\n+        if data.has_default_kw() {\n             f.write_str(\"default \")?;\n         }\n-        if data.is_const() {\n+        if data.has_const_kw() {\n             f.write_str(\"const \")?;\n         }\n-        if data.is_async() {\n+        if data.has_async_kw() {\n             f.write_str(\"async \")?;\n         }\n-        if data.is_unsafe() {\n+        if self.is_unsafe_to_call(f.db) {\n             f.write_str(\"unsafe \")?;\n         }\n         if let Some(abi) = &data.abi {\n@@ -96,7 +96,7 @@ impl HirDisplay for Function {\n         // `FunctionData::ret_type` will be `::core::future::Future<Output = ...>` for async fns.\n         // Use ugly pattern match to strip the Future trait.\n         // Better way?\n-        let ret_type = if !data.is_async() {\n+        let ret_type = if !data.has_async_kw() {\n             &data.ret_type\n         } else {\n             match &*data.ret_type {"}, {"sha": "8bab7c1f3eaa80ebb59d005b3feeabf48320c568", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -1421,16 +1421,16 @@ impl Function {\n             .collect()\n     }\n \n-    pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).is_unsafe()\n-    }\n-\n     pub fn is_const(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).is_const()\n+        db.function_data(self.id).has_const_kw()\n     }\n \n     pub fn is_async(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).is_async()\n+        db.function_data(self.id).has_async_kw()\n+    }\n+\n+    pub fn is_unsafe_to_call(self, db: &dyn HirDatabase) -> bool {\n+        hir_ty::is_fn_unsafe_to_call(db, self.id)\n     }\n \n     /// Whether this function declaration has a definition."}, {"sha": "3ef1029724173bb74676a34ffb3fafc04b850e1d", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -110,20 +110,20 @@ impl FunctionData {\n         self.flags.contains(FnFlags::HAS_SELF_PARAM)\n     }\n \n-    pub fn is_default(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_DEFAULT)\n+    pub fn has_default_kw(&self) -> bool {\n+        self.flags.contains(FnFlags::HAS_DEFAULT_KW)\n     }\n \n-    pub fn is_const(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_CONST)\n+    pub fn has_const_kw(&self) -> bool {\n+        self.flags.contains(FnFlags::HAS_CONST_KW)\n     }\n \n-    pub fn is_async(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_ASYNC)\n+    pub fn has_async_kw(&self) -> bool {\n+        self.flags.contains(FnFlags::HAS_ASYNC_KW)\n     }\n \n-    pub fn is_unsafe(&self) -> bool {\n-        self.flags.contains(FnFlags::IS_UNSAFE)\n+    pub fn has_unsafe_kw(&self) -> bool {\n+        self.flags.contains(FnFlags::HAS_UNSAFE_KW)\n     }\n \n     pub fn is_varargs(&self) -> bool {"}, {"sha": "375587ee935bf65425fad8254ad12c60703c18a4", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -606,10 +606,10 @@ bitflags::bitflags! {\n     pub(crate) struct FnFlags: u8 {\n         const HAS_SELF_PARAM = 1 << 0;\n         const HAS_BODY = 1 << 1;\n-        const IS_DEFAULT = 1 << 2;\n-        const IS_CONST = 1 << 3;\n-        const IS_ASYNC = 1 << 4;\n-        const IS_UNSAFE = 1 << 5;\n+        const HAS_DEFAULT_KW = 1 << 2;\n+        const HAS_CONST_KW = 1 << 3;\n+        const HAS_ASYNC_KW = 1 << 4;\n+        const HAS_UNSAFE_KW = 1 << 5;\n         const IS_VARARGS = 1 << 6;\n     }\n }"}, {"sha": "cdae0d0803becd838d5cfaadc5f9a0421c8522de", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 7, "deletions": 62, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -2,7 +2,7 @@\n \n use std::{collections::hash_map::Entry, mem, sync::Arc};\n \n-use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, name::known, HirFileId};\n+use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, HirFileId};\n use syntax::ast::{self, HasModuleItem};\n \n use crate::{\n@@ -343,16 +343,16 @@ impl<'a> Ctx<'a> {\n             flags |= FnFlags::HAS_SELF_PARAM;\n         }\n         if func.default_token().is_some() {\n-            flags |= FnFlags::IS_DEFAULT;\n+            flags |= FnFlags::HAS_DEFAULT_KW;\n         }\n         if func.const_token().is_some() {\n-            flags |= FnFlags::IS_CONST;\n+            flags |= FnFlags::HAS_CONST_KW;\n         }\n         if func.async_token().is_some() {\n-            flags |= FnFlags::IS_ASYNC;\n+            flags |= FnFlags::HAS_ASYNC_KW;\n         }\n         if func.unsafe_token().is_some() {\n-            flags |= FnFlags::IS_UNSAFE;\n+            flags |= FnFlags::HAS_UNSAFE_KW;\n         }\n \n         let mut res = Function {\n@@ -554,22 +554,10 @@ impl<'a> Ctx<'a> {\n                     // should be considered to be in an extern block too.\n                     let attrs = RawAttrs::new(self.db, &item, self.hygiene());\n                     let id: ModItem = match item {\n-                        ast::ExternItem::Fn(ast) => {\n-                            let func_id = self.lower_function(&ast)?;\n-                            let func = &mut self.data().functions[func_id.index];\n-                            if is_intrinsic_fn_unsafe(&func.name) {\n-                                // FIXME: this breaks in macros\n-                                func.flags |= FnFlags::IS_UNSAFE;\n-                            }\n-                            func_id.into()\n-                        }\n+                        ast::ExternItem::Fn(ast) => self.lower_function(&ast)?.into(),\n                         ast::ExternItem::Static(ast) => self.lower_static(&ast)?.into(),\n                         ast::ExternItem::TypeAlias(ty) => self.lower_type_alias(&ty)?.into(),\n-                        ast::ExternItem::MacroCall(call) => {\n-                            // FIXME: we need some way of tracking that the macro call is in an\n-                            // extern block\n-                            self.lower_macro_call(&call)?.into()\n-                        }\n+                        ast::ExternItem::MacroCall(call) => self.lower_macro_call(&call)?.into(),\n                     };\n                     self.add_attrs(id.into(), attrs);\n                     Some(id)\n@@ -716,49 +704,6 @@ enum GenericsOwner<'a> {\n     Impl,\n }\n \n-/// Returns `true` if the given intrinsic is unsafe to call, or false otherwise.\n-fn is_intrinsic_fn_unsafe(name: &Name) -> bool {\n-    // Should be kept in sync with https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler/rustc_typeck/src/check/intrinsic.rs#L72-L106\n-    ![\n-        known::abort,\n-        known::add_with_overflow,\n-        known::bitreverse,\n-        known::black_box,\n-        known::bswap,\n-        known::caller_location,\n-        known::ctlz,\n-        known::ctpop,\n-        known::cttz,\n-        known::discriminant_value,\n-        known::forget,\n-        known::likely,\n-        known::maxnumf32,\n-        known::maxnumf64,\n-        known::min_align_of,\n-        known::minnumf32,\n-        known::minnumf64,\n-        known::mul_with_overflow,\n-        known::needs_drop,\n-        known::ptr_guaranteed_eq,\n-        known::ptr_guaranteed_ne,\n-        known::rotate_left,\n-        known::rotate_right,\n-        known::rustc_peek,\n-        known::saturating_add,\n-        known::saturating_sub,\n-        known::size_of,\n-        known::sub_with_overflow,\n-        known::type_id,\n-        known::type_name,\n-        known::unlikely,\n-        known::variant_count,\n-        known::wrapping_add,\n-        known::wrapping_mul,\n-        known::wrapping_sub,\n-    ]\n-    .contains(name)\n-}\n-\n fn lower_abi(abi: ast::Abi) -> Interned<str> {\n     // FIXME: Abi::abi() -> Option<SyntaxToken>?\n     match abi.syntax().last_token() {"}, {"sha": "65352e74440917f9b2e0021d6f602c1a1bfa7711", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -76,7 +76,6 @@ extern \"C\" {\n                 pub(self) static EX_STATIC: u8 = _;\n \n                 #[on_extern_fn]  // AttrId { ast_index: 0 }\n-                // flags = 0x20\n                 pub(self) fn ex_fn() -> ();\n             }\n         \"##]],"}, {"sha": "161b19a739ce4c6d2d35f8a7a2a0be0b233fc04b", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -8,14 +8,16 @@ use hir_def::{\n     DefWithBodyId,\n };\n \n-use crate::{db::HirDatabase, InferenceResult, Interner, TyExt, TyKind};\n+use crate::{\n+    db::HirDatabase, utils::is_fn_unsafe_to_call, InferenceResult, Interner, TyExt, TyKind,\n+};\n \n pub fn missing_unsafe(db: &dyn HirDatabase, def: DefWithBodyId) -> Vec<ExprId> {\n     let infer = db.infer(def);\n     let mut res = Vec::new();\n \n     let is_unsafe = match def {\n-        DefWithBodyId::FunctionId(it) => db.function_data(it).is_unsafe(),\n+        DefWithBodyId::FunctionId(it) => db.function_data(it).has_unsafe_kw(),\n         DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n     };\n     if is_unsafe {\n@@ -62,7 +64,7 @@ fn walk_unsafe(\n     match expr {\n         &Expr::Call { callee, .. } => {\n             if let Some(func) = infer[callee].as_fn_def(db) {\n-                if db.function_data(func).is_unsafe() {\n+                if is_fn_unsafe_to_call(db, func) {\n                     unsafe_expr_cb(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }\n             }\n@@ -79,7 +81,7 @@ fn walk_unsafe(\n         Expr::MethodCall { .. } => {\n             if infer\n                 .method_resolution(current)\n-                .map(|(func, _)| db.function_data(func).is_unsafe())\n+                .map(|(func, _)| is_fn_unsafe_to_call(db, func))\n                 .unwrap_or(false)\n             {\n                 unsafe_expr_cb(UnsafeExpr { expr: current, inside_unsafe_block });"}, {"sha": "eca6b3a0762b92285b8463e658b51ce3a3de93bf", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -748,7 +748,7 @@ impl<'a> InferenceContext<'a> {\n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n         let error_ty = &TypeRef::Error;\n-        let return_ty = if data.is_async() {\n+        let return_ty = if data.has_async_kw() {\n             data.async_ret_type.as_deref().unwrap_or(error_ty)\n         } else {\n             &*data.ret_type"}, {"sha": "225bcdd25e13296226fd6054425ea4a9a7dedd2b", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -64,7 +64,7 @@ pub use mapping::{\n     to_placeholder_idx,\n };\n pub use traits::TraitEnvironment;\n-pub use utils::all_super_traits;\n+pub use utils::{all_super_traits, is_fn_unsafe_to_call};\n pub use walk::TypeWalk;\n \n pub use chalk_ir::{"}, {"sha": "0ffd428cff108fe199742f0d438e456c00274f25", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 66, "deletions": 3, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -15,10 +15,10 @@ use hir_def::{\n     path::Path,\n     resolver::{HasResolver, TypeNs},\n     type_ref::{TraitBoundModifier, TypeRef},\n-    ConstParamId, GenericDefId, ItemContainerId, Lookup, TraitId, TypeAliasId, TypeOrConstParamId,\n-    TypeParamId,\n+    ConstParamId, FunctionId, GenericDefId, ItemContainerId, Lookup, TraitId, TypeAliasId,\n+    TypeOrConstParamId, TypeParamId,\n };\n-use hir_expand::name::{name, Name};\n+use hir_expand::name::{known, name, Name};\n use itertools::Either;\n use rustc_hash::FxHashSet;\n use smallvec::{smallvec, SmallVec};\n@@ -375,3 +375,66 @@ fn parent_generic_def(db: &dyn DefDatabase, def: GenericDefId) -> Option<Generic\n         ItemContainerId::ModuleId(_) | ItemContainerId::ExternBlockId(_) => None,\n     }\n }\n+\n+pub fn is_fn_unsafe_to_call(db: &dyn HirDatabase, func: FunctionId) -> bool {\n+    let data = db.function_data(func);\n+    if data.has_unsafe_kw() {\n+        return true;\n+    }\n+\n+    match func.lookup(db.upcast()).container {\n+        hir_def::ItemContainerId::ExternBlockId(block) => {\n+            // Function in an `extern` block are always unsafe to call, except when it has\n+            // `\"rust-intrinsic\"` ABI there are a few exceptions.\n+            let id = block.lookup(db.upcast()).id;\n+            match id.item_tree(db.upcast())[id.value].abi.as_deref() {\n+                Some(\"rust-intrinsic\") => is_intrinsic_fn_unsafe(&data.name),\n+                _ => true,\n+            }\n+        }\n+        _ => false,\n+    }\n+}\n+\n+/// Returns `true` if the given intrinsic is unsafe to call, or false otherwise.\n+fn is_intrinsic_fn_unsafe(name: &Name) -> bool {\n+    // Should be kept in sync with https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler/rustc_typeck/src/check/intrinsic.rs#L72-L106\n+    ![\n+        known::abort,\n+        known::add_with_overflow,\n+        known::bitreverse,\n+        known::black_box,\n+        known::bswap,\n+        known::caller_location,\n+        known::ctlz,\n+        known::ctpop,\n+        known::cttz,\n+        known::discriminant_value,\n+        known::forget,\n+        known::likely,\n+        known::maxnumf32,\n+        known::maxnumf64,\n+        known::min_align_of,\n+        known::minnumf32,\n+        known::minnumf64,\n+        known::mul_with_overflow,\n+        known::needs_drop,\n+        known::ptr_guaranteed_eq,\n+        known::ptr_guaranteed_ne,\n+        known::rotate_left,\n+        known::rotate_right,\n+        known::rustc_peek,\n+        known::saturating_add,\n+        known::saturating_sub,\n+        known::size_of,\n+        known::sub_with_overflow,\n+        known::type_id,\n+        known::type_name,\n+        known::unlikely,\n+        known::variant_count,\n+        known::wrapping_add,\n+        known::wrapping_mul,\n+        known::wrapping_sub,\n+    ]\n+    .contains(name)\n+}"}, {"sha": "866bba7d1b6489b62dbe29295cd1d994143cb229", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -362,7 +362,7 @@ fn highlight_def(sema: &Semantics<RootDatabase>, krate: hir::Crate, def: Definit\n                 }\n             }\n \n-            if func.is_unsafe(db) {\n+            if func.is_unsafe_to_call(db) {\n                 h |= HlMod::Unsafe;\n             }\n             if func.is_async(db) {\n@@ -508,7 +508,7 @@ fn highlight_method_call(\n     let mut h = SymbolKind::Function.into();\n     h |= HlMod::Associated;\n \n-    if func.is_unsafe(sema.db) || sema.is_unsafe_method_call(method_call) {\n+    if func.is_unsafe_to_call(sema.db) || sema.is_unsafe_method_call(method_call) {\n         h |= HlMod::Unsafe;\n     }\n     if func.is_async(sema.db) {"}, {"sha": "211aa432c76d524139efd732bb80df0aef032afb", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec871bb8b203bbd631b564b17850898ae874068d/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=ec871bb8b203bbd631b564b17850898ae874068d", "patch": "@@ -237,7 +237,7 @@ fn detail(db: &dyn HirDatabase, func: hir::Function) -> String {\n     if func.is_async(db) {\n         format_to!(detail, \"async \");\n     }\n-    if func.is_unsafe(db) {\n+    if func.is_unsafe_to_call(db) {\n         format_to!(detail, \"unsafe \");\n     }\n "}]}