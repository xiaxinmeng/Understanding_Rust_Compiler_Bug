{"sha": "375645abb89d1b98490c744dc980fb96aa076e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NTY0NWFiYjg5ZDFiOTg0OTBjNzQ0ZGM5ODBmYjk2YWEwNzZlNzM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-10T23:19:55Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-18T16:21:14Z"}, "message": "Add by-value captured variable note on second use.\n\nThis commit adds a note that was present in the AST borrow checker when\nclosures are invoked more than once and have captured variables\nby-value.", "tree": {"sha": "c4bbebf8ffea99965e5fdc39fb19123636e65703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4bbebf8ffea99965e5fdc39fb19123636e65703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375645abb89d1b98490c744dc980fb96aa076e73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlvIsvoACgkQAXYLT59T\n8VS95hAAm15z+x2GMXZXwseqSTqlfNO0TLZt8bDwgNayx1yAUkG3msr9fmPiFPFa\nLdG8KSeSP4B56u+uTiscd+etrtKEBGip/0vzra6bDZaYe3rmM5GltwjHGf18Saoj\nvtYW6YuUrip+NwulIaqwnyVeQ2IUNA1F6N8CucVwQ+3EqUoQ6LWZLONi/B0lQxfc\nLS/4MxV/rPyt6gf/bWdUd8R8+0Tk6V9ZQgAZm0fp5V6lRcEFpR/B7PcEB9R6iAf4\nQVyFlXx8Civao+TkurtOfJRh/W5Kt8Os38PE0D3UwPgVUA2iPW5XwM7kv4Y0jp5H\nUic25QYV7Q8fN+hncsXXAHZdkSCclw27bU1tcfn1GWwl+h+qcEMrNo79pOQpZRe2\nfDWwT4iSdkp8QpVjBUyRElrPT9J/aJyJ8nppqQoBIvMPL0kpGp1jY42TMBs40auI\nbhDw6N6J/4CeYNfl3zqC+/7Bukv/WUeDv6UkR88oYcLCl9gtCUteB67pVVjNxmUz\nrrswZxjuSZeSn22BqlioA5iLgKqBtsqedK1qaB5L8GUCT6iqHauOG63NcfowcNnW\nIPeb4GaiYKYPfRqbBTwc8my2xSna3C3q70b9eGCIcjLqEA66c6KMS9Ag5H5uiDUf\nkfzEzoH2sWU4d5ej7cTvJNFhvQQQitqyn6AjMCVIdbQpqWyLXM4=\n=bsGr\n-----END PGP SIGNATURE-----", "payload": "tree c4bbebf8ffea99965e5fdc39fb19123636e65703\nparent aa701154f0a54b6a594f45fa228c482d604ab357\nauthor David Wood <david@davidtw.co> 1539213595 +0200\ncommitter David Wood <david@davidtw.co> 1539879674 +0200\n\nAdd by-value captured variable note on second use.\n\nThis commit adds a note that was present in the AST borrow checker when\nclosures are invoked more than once and have captured variables\nby-value.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375645abb89d1b98490c744dc980fb96aa076e73", "html_url": "https://github.com/rust-lang/rust/commit/375645abb89d1b98490c744dc980fb96aa076e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375645abb89d1b98490c744dc980fb96aa076e73/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa701154f0a54b6a594f45fa228c482d604ab357", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa701154f0a54b6a594f45fa228c482d604ab357", "html_url": "https://github.com/rust-lang/rust/commit/aa701154f0a54b6a594f45fa228c482d604ab357"}], "stats": {"total": 187, "additions": 140, "deletions": 47}, "files": [{"sha": "3903506068ed702bbcf136ea1946d5341187e37d", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 122, "deletions": 14, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/375645abb89d1b98490c744dc980fb96aa076e73/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375645abb89d1b98490c744dc980fb96aa076e73/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=375645abb89d1b98490c744dc980fb96aa076e73", "patch": "@@ -15,11 +15,11 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::ScopeTree;\n use rustc::mir::{\n-    self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, Field, Local,\n+    self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, Constant, Field, Local,\n     LocalDecl, LocalKind, Location, Operand, Place, PlaceProjection, ProjectionElem,\n     Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n };\n-use rustc::ty;\n+use rustc::ty::{self, DefIdTree};\n use rustc::util::ppaux::with_highlight_region_for_bound_region;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -131,6 +131,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 Origin::Mir,\n             );\n \n+            self.add_closure_invoked_twice_with_moved_variable_suggestion(\n+                context.loc,\n+                used_place,\n+                &mut err,\n+            );\n+\n             let mut is_loop_move = false;\n             for move_site in &move_site_vec {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n@@ -1056,16 +1062,118 @@ enum StorageDeadOrDrop<'tcx> {\n }\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n-    // End-user visible description of `place` if one can be found. If the\n-    // place is a temporary for instance, None will be returned.\n+\n+    /// Adds a suggestion when a closure is invoked twice with a moved variable.\n+    ///\n+    /// ```text\n+    /// note: closure cannot be invoked more than once because it moves the variable `dict` out of\n+    ///       its environment\n+    ///   --> $DIR/issue-42065.rs:16:29\n+    ///    |\n+    /// LL |         for (key, value) in dict {\n+    ///    |                             ^^^^\n+    /// ```\n+    pub(super) fn add_closure_invoked_twice_with_moved_variable_suggestion(\n+        &self,\n+        location: Location,\n+        place: &Place<'tcx>,\n+        diag: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        let mut target = place.local();\n+        debug!(\n+            \"add_closure_invoked_twice_with_moved_variable_suggestion: location={:?} place={:?} \\\n+             target={:?}\",\n+             location, place, target,\n+        );\n+        for stmt in &self.mir[location.block].statements[location.statement_index..] {\n+            debug!(\n+                \"add_closure_invoked_twice_with_moved_variable_suggestion: stmt={:?} \\\n+                 target={:?}\",\n+                 stmt, target,\n+            );\n+            if let StatementKind::Assign(into, box Rvalue::Use(from)) = &stmt.kind {\n+                debug!(\n+                    \"add_closure_invoked_twice_with_moved_variable_suggestion: into={:?} \\\n+                     from={:?}\",\n+                     into, from,\n+                );\n+                match from {\n+                    Operand::Copy(ref place) |\n+                    Operand::Move(ref place) if target == place.local() =>\n+                        target = into.local(),\n+                    _ => {},\n+                }\n+            }\n+        }\n+\n+\n+        let terminator = self.mir[location.block].terminator();\n+        debug!(\n+            \"add_closure_invoked_twice_with_moved_variable_suggestion: terminator={:?}\",\n+            terminator,\n+        );\n+        if let TerminatorKind::Call {\n+            func: Operand::Constant(box Constant {\n+                literal: ty::Const { ty: &ty::TyS { sty: ty::TyKind::FnDef(id, _), ..  }, ..  },\n+                ..\n+            }),\n+            args,\n+            ..\n+        } = &terminator.kind {\n+            debug!(\"add_closure_invoked_twice_with_moved_variable_suggestion: id={:?}\", id);\n+            if self.infcx.tcx.parent(id) == self.infcx.tcx.lang_items().fn_once_trait() {\n+                let closure = match args.first() {\n+                    Some(Operand::Copy(ref place)) |\n+                    Some(Operand::Move(ref place)) if target == place.local() =>\n+                        place.local().unwrap(),\n+                    _ => return,\n+                };\n+                debug!(\n+                    \"add_closure_invoked_twice_with_moved_variable_suggestion: closure={:?}\",\n+                     closure,\n+                );\n+\n+                if let ty::TyKind::Closure(did, substs) = self.mir.local_decls[closure].ty.sty {\n+                    let upvar_tys = substs.upvar_tys(did, self.infcx.tcx);\n+                    let node_id = match self.infcx.tcx.hir.as_local_node_id(did) {\n+                        Some(node_id) => node_id,\n+                        _ => return,\n+                    };\n+\n+                    self.infcx.tcx.with_freevars(node_id, |freevars| {\n+                        for (freevar, upvar_ty) in freevars.iter().zip(upvar_tys) {\n+                            debug!(\n+                                \"add_closure_invoked_twice_with_moved_variable_suggestion: \\\n+                                 freevar={:?} upvar_ty={:?}\",\n+                                freevar, upvar_ty,\n+                            );\n+                            if !upvar_ty.is_region_ptr() {\n+                                diag.span_note(\n+                                    freevar.span,\n+                                    &format!(\n+                                        \"closure cannot be invoked more than once because it \\\n+                                         moves the variable `{}` out of its environment\",\n+                                         self.infcx.tcx.hir.name(freevar.var_id()),\n+                                    ),\n+                                );\n+                            }\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    /// End-user visible description of `place` if one can be found. If the\n+    /// place is a temporary for instance, None will be returned.\n     pub(super) fn describe_place(&self, place: &Place<'tcx>) -> Option<String> {\n         self.describe_place_with_options(place, IncludingDowncast(false))\n     }\n \n-    // End-user visible description of `place` if one can be found. If the\n-    // place is a temporary for instance, None will be returned.\n-    // `IncludingDowncast` parameter makes the function return `Err` if `ProjectionElem` is\n-    // `Downcast` and `IncludingDowncast` is true\n+    /// End-user visible description of `place` if one can be found. If the\n+    /// place is a temporary for instance, None will be returned.\n+    /// `IncludingDowncast` parameter makes the function return `Err` if `ProjectionElem` is\n+    /// `Downcast` and `IncludingDowncast` is true\n     pub(super) fn describe_place_with_options(\n         &self,\n         place: &Place<'tcx>,\n@@ -1078,7 +1186,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    // Appends end-user visible description of `place` to `buf`.\n+    /// Appends end-user visible description of `place` to `buf`.\n     fn append_place_to_string(\n         &self,\n         place: &Place<'tcx>,\n@@ -1213,8 +1321,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         Ok(())\n     }\n \n-    // Appends end-user visible description of the `local` place to `buf`. If `local` doesn't have\n-    // a name, then `Err` is returned\n+    /// Appends end-user visible description of the `local` place to `buf`. If `local` doesn't have\n+    /// a name, then `Err` is returned\n     fn append_local_to_string(&self, local_index: Local, buf: &mut String) -> Result<(), ()> {\n         let local = &self.mir.local_decls[local_index];\n         match local.name {\n@@ -1226,7 +1334,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    // End-user visible description of the `field`nth field of `base`\n+    /// End-user visible description of the `field`nth field of `base`\n     fn describe_field(&self, base: &Place, field: Field) -> String {\n         match *base {\n             Place::Local(local) => {\n@@ -1251,7 +1359,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    // End-user visible description of the `field_index`nth field of `ty`\n+    /// End-user visible description of the `field_index`nth field of `ty`\n     fn describe_field_from_ty(&self, ty: &ty::Ty, field: Field) -> String {\n         if ty.is_box() {\n             // If the type is a box, the field is described from the boxed type\n@@ -1294,7 +1402,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    // Retrieve type of a place for the current MIR representation\n+    /// Retrieve type of a place for the current MIR representation\n     fn retrieve_type_for_place(&self, place: &Place<'tcx>) -> Option<ty::Ty> {\n         match place {\n             Place::Local(local) => {"}, {"sha": "bda8a3b85f758dfe39a3efc6aaf9d50c0c1889d1", "filename": "src/test/ui/closure_context/issue-42065.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa701154f0a54b6a594f45fa228c482d604ab357/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa701154f0a54b6a594f45fa228c482d604ab357/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.nll.stderr?ref=aa701154f0a54b6a594f45fa228c482d604ab357", "patch": "@@ -1,11 +0,0 @@\n-error[E0382]: use of moved value: `debug_dump_dict`\n-  --> $DIR/issue-42065.rs:21:5\n-   |\n-LL |     debug_dump_dict();\n-   |     --------------- value moved here\n-LL |     debug_dump_dict();\n-   |     ^^^^^^^^^^^^^^^ value used here after move\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "51dd2e72832b6a48d05d988941c1b1d1238a0101", "filename": "src/test/ui/issues/issue-12127.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/375645abb89d1b98490c744dc980fb96aa076e73/src%2Ftest%2Fui%2Fissues%2Fissue-12127.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/375645abb89d1b98490c744dc980fb96aa076e73/src%2Ftest%2Fui%2Fissues%2Fissue-12127.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12127.nll.stderr?ref=375645abb89d1b98490c744dc980fb96aa076e73", "patch": "@@ -0,0 +1,18 @@\n+error[E0382]: use of moved value: `f`\n+  --> $DIR/issue-12127.rs:21:9\n+   |\n+LL |         f();\n+   |         - value moved here\n+LL |         f();\n+   |         ^ value used here after move\n+   |\n+note: closure cannot be invoked more than once because it moves the variable `x` out of its environment\n+  --> $DIR/issue-12127.rs:18:39\n+   |\n+LL |     let f = to_fn_once(move|| do_it(&*x));\n+   |                                       ^\n+   = note: move occurs because `f` has type `[closure@$DIR/issue-12127.rs:18:24: 18:41 x:std::boxed::Box<isize>]`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "f4756696b6b0667ce52cad5371e681c89e694c26", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnonce-call-twice.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa701154f0a54b6a594f45fa228c482d604ab357/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa701154f0a54b6a594f45fa228c482d604ab357/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.nll.stderr?ref=aa701154f0a54b6a594f45fa228c482d604ab357", "patch": "@@ -1,11 +0,0 @@\n-error[E0382]: use of moved value: `tick`\n-  --> $DIR/unboxed-closures-infer-fnonce-call-twice.rs:20:5\n-   |\n-LL |     tick();\n-   |     ---- value moved here\n-LL |     tick(); //~ ERROR use of moved value: `tick`\n-   |     ^^^^ value used here after move\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "95ed673627877cd6b97631b45647332d982c47da", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnonce-move-call-twice.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa701154f0a54b6a594f45fa228c482d604ab357/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa701154f0a54b6a594f45fa228c482d604ab357/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.nll.stderr?ref=aa701154f0a54b6a594f45fa228c482d604ab357", "patch": "@@ -1,11 +0,0 @@\n-error[E0382]: use of moved value: `tick`\n-  --> $DIR/unboxed-closures-infer-fnonce-move-call-twice.rs:20:5\n-   |\n-LL |     tick();\n-   |     ---- value moved here\n-LL |     tick(); //~ ERROR use of moved value: `tick`\n-   |     ^^^^ value used here after move\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}]}