{"sha": "804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "node_id": "C_kwDOAAsO6NoAKDgwNGMyYzFlZDkzODJiZDNhOWVhMDg1OTFiNDNmOWRiZThkOWQ0OTI", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2022-09-26T05:09:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-26T05:09:42Z"}, "message": "Rollup merge of #102197 - Nilstrieb:const-new-\ud83c\udf32, r=Mark-Simulacrum\n\nStabilize const `BTree{Map,Set}::new`\n\nThe FCP was completed in #71835.\n\nSince `len` and `is_empty` are not const stable yet, this also creates a new feature for them since they previously used the same `const_btree_new` feature.", "tree": {"sha": "212b6a63348bc84a6f19b95e8798bc378e57b803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212b6a63348bc84a6f19b95e8798bc378e57b803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMTQWCRBK7hj4Ov3rIwAAYrIIAFdwqiAcBtLb+79qUoxxnSqz\nYbMUqtZjSpWr3qBU4bJDoHDeCH6NK02ZMXGLc9R2GLfMmCfnmUVowg4q+xdu/95B\nxXkZymPhYTGkpM6is5xYOkr9BjdHlWicnLWCRVu6dKW0tor7JnG32thsfp16NhhY\nrKh6hT0vg/5W7f8GfKfiDgSSrPQg/juB0fjJ1a7d+KQSeRt6PMhOTx8uzzuHFxYa\nOIahxtKeZXQTvEMiFX8agLxDCjPFwy3MbrTq6lBk9TL62hFOeQhvgC54hTYjKrvw\n2S6NDO2O29lnGVaeg/KhL5DiMvWzMSN1i5hOgbmdlhPN1ui/gNjT3NcMyXIshs4=\n=6jUI\n-----END PGP SIGNATURE-----\n", "payload": "tree 212b6a63348bc84a6f19b95e8798bc378e57b803\nparent 0cee03dfffcfdc2709a41823f5ce726877205fbd\nparent 66484c0a21b840b30f865e92fdd5b3bad877816f\nauthor fee1-dead <ent3rm4n@gmail.com> 1664168982 +0800\ncommitter GitHub <noreply@github.com> 1664168982 +0800\n\nRollup merge of #102197 - Nilstrieb:const-new-\ud83c\udf32, r=Mark-Simulacrum\n\nStabilize const `BTree{Map,Set}::new`\n\nThe FCP was completed in #71835.\n\nSince `len` and `is_empty` are not const stable yet, this also creates a new feature for them since they previously used the same `const_btree_new` feature.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "html_url": "https://github.com/rust-lang/rust/commit/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cee03dfffcfdc2709a41823f5ce726877205fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cee03dfffcfdc2709a41823f5ce726877205fbd", "html_url": "https://github.com/rust-lang/rust/commit/0cee03dfffcfdc2709a41823f5ce726877205fbd"}, {"sha": "66484c0a21b840b30f865e92fdd5b3bad877816f", "url": "https://api.github.com/repos/rust-lang/rust/commits/66484c0a21b840b30f865e92fdd5b3bad877816f", "html_url": "https://github.com/rust-lang/rust/commit/66484c0a21b840b30f865e92fdd5b3bad877816f"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "556ff1cc48e4d3e29345a4429db9dc39e928815f", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(associated_type_defaults)]\n #![feature(closure_track_caller)]\n-#![feature(const_btree_new)]\n+#![feature(const_btree_len)]\n #![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(min_specialization)]"}, {"sha": "3018d1c9125bff747dc7c330c09c1cdbbcc2e7a8", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "patch": "@@ -580,7 +580,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// map.insert(1, \"a\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_stable(feature = \"const_btree_new\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0, alloc: ManuallyDrop::new(Global), _marker: PhantomData }\n@@ -2392,7 +2392,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n         self.length\n     }\n@@ -2413,7 +2413,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "3caaf521240d2102575902780112932852b4eee9", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "patch": "@@ -343,7 +343,7 @@ impl<T> BTreeSet<T> {\n     /// let mut set: BTreeSet<i32> = BTreeSet::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_stable(feature = \"const_btree_new\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n@@ -1174,7 +1174,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n         self.map.len()\n     }\n@@ -1193,7 +1193,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n+    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "de58f22daae781eecfd4fd6ea659200fa237308d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "patch": "@@ -99,7 +99,7 @@\n #![feature(coerce_unsized)]\n #![cfg_attr(not(no_global_oom_handling), feature(const_alloc_error))]\n #![feature(const_box)]\n-#![cfg_attr(not(no_global_oom_handling), feature(const_btree_new))]\n+#![cfg_attr(not(no_global_oom_handling), feature(const_btree_len))]\n #![feature(const_cow_is_borrowed)]\n #![feature(const_convert)]\n #![feature(const_size_of_val)]"}, {"sha": "55aced5106c94ae13e5dca717d711a0cbb24a196", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "patch": "@@ -32,7 +32,7 @@\n #![feature(slice_group_by)]\n #![feature(slice_partition_dedup)]\n #![feature(string_remove_matches)]\n-#![feature(const_btree_new)]\n+#![feature(const_btree_len)]\n #![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n #![feature(const_str_from_utf8)]"}, {"sha": "f58cdb5945e53e18ee3cb65894da7ba7954fb99b", "filename": "src/test/ui/consts/issue-88071.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs?ref=804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "patch": "@@ -2,8 +2,6 @@\n //\n // regression test for #88071\n \n-#![feature(const_btree_new)]\n-\n use std::collections::BTreeMap;\n \n pub struct CustomMap<K, V>(BTreeMap<K, V>);"}, {"sha": "f7ce7191772684399ec2badf558302c68c0d4493", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "patch": "@@ -367,10 +367,21 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bo\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire\n                 // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n+\n+                // HACK(nilstrieb): CURRENT_RUSTC_VERSION can return versions like 1.66.0-dev. `rustc-semver` doesn't accept\n+                //                  the `-dev` version number so we have to strip it off.\n+                let short_version = since\n+                    .as_str()\n+                    .split('-')\n+                    .next()\n+                    .expect(\"rustc_attr::StabilityLevel::Stable::since` is empty\");\n+\n+                let since = rustc_span::Symbol::intern(short_version);\n+\n                 crate::meets_msrv(\n                     msrv,\n                     RustcVersion::parse(since.as_str())\n-                        .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n+                        .unwrap_or_else(|err| panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")),\n                 )\n             } else {\n                 // Unstable const fn with the feature enabled."}, {"sha": "b2dc2248b55626c2c0cd5461f2519a987af396a3", "filename": "src/tools/clippy/tests/ui/crashes/ice-7126.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-7126.rs?ref=804c2c1ed9382bd3a9ea08591b43f9dbe8d9d492", "patch": "@@ -1,13 +1,13 @@\n // This test requires a feature gated const fn and will stop working in the future.\n \n-#![feature(const_btree_new)]\n+#![feature(const_btree_len)]\n \n use std::collections::BTreeMap;\n \n-struct Foo(BTreeMap<i32, i32>);\n+struct Foo(usize);\n impl Foo {\n     fn new() -> Self {\n-        Self(BTreeMap::new())\n+        Self(BTreeMap::len(&BTreeMap::<u8, u8>::new()))\n     }\n }\n "}]}