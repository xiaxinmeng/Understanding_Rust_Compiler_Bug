{"sha": "15582fcd143250ebe25e25ac1ba3a88e90cf5bfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NTgyZmNkMTQzMjUwZWJlMjVlMjVhYzFiYTNhODhlOTBjZjViZmQ=", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-04-29T23:27:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-29T23:27:23Z"}, "message": "Rollup merge of #84683 - Ben-Lichtman:grammar, r=jonas-schievink\n\nMinor grammar tweaks for readability to btree internals\n\nI was reading through the btree implementation and I noticed some grammar that could be improved in Node.rs so here is what I think would be a minor improvement.", "tree": {"sha": "e290c96761cb7f9d6095f0120c966b0cd315891c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e290c96761cb7f9d6095f0120c966b0cd315891c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15582fcd143250ebe25e25ac1ba3a88e90cf5bfd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgi0DbCRBK7hj4Ov3rIwAAFYwIAEA6eAQ6mC0BQpOTZ33GHVAx\nZdTiwB6UoZ1wpp6Gr6VbXWn51aTGUq7wH1BNQQ6R0Dm1p/aJP58jlV2EIO7FxADS\ngpG6j/uoW1rv32ZyhIAf7L2dYMLIJdHScxVq+ITCcqs/KPZ6oPKy1ThtJ7tKOx6H\nSKcZxFTwVTPy+EhivXf8tvEPRKAfzSo/aUJmBhihqouDJxKfSzEtWHdYQx7ev80j\nCa9M0F6zmO0nmD2MsN7wVmUAkP3reXMii3quFa+h7kFOrE5vvz2l3pGSkHagwd6I\nL64xeo1CzyoREi/byOspwW/mz+FzxeXrYEs5igXixGKJx12+G4D8Ucyfy2n58LU=\n=88CB\n-----END PGP SIGNATURE-----\n", "payload": "tree e290c96761cb7f9d6095f0120c966b0cd315891c\nparent 26a4f461d7ddc7cae4ec7f524e21fc712657159e\nparent 3e016a7682699ac23e48b4c6571c3d78503abf4d\nauthor Jack Huey <31162821+jackh726@users.noreply.github.com> 1619738843 -0400\ncommitter GitHub <noreply@github.com> 1619738843 -0400\n\nRollup merge of #84683 - Ben-Lichtman:grammar, r=jonas-schievink\n\nMinor grammar tweaks for readability to btree internals\n\nI was reading through the btree implementation and I noticed some grammar that could be improved in Node.rs so here is what I think would be a minor improvement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15582fcd143250ebe25e25ac1ba3a88e90cf5bfd", "html_url": "https://github.com/rust-lang/rust/commit/15582fcd143250ebe25e25ac1ba3a88e90cf5bfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15582fcd143250ebe25e25ac1ba3a88e90cf5bfd/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26a4f461d7ddc7cae4ec7f524e21fc712657159e", "url": "https://api.github.com/repos/rust-lang/rust/commits/26a4f461d7ddc7cae4ec7f524e21fc712657159e", "html_url": "https://github.com/rust-lang/rust/commit/26a4f461d7ddc7cae4ec7f524e21fc712657159e"}, {"sha": "3e016a7682699ac23e48b4c6571c3d78503abf4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e016a7682699ac23e48b4c6571c3d78503abf4d", "html_url": "https://github.com/rust-lang/rust/commit/3e016a7682699ac23e48b4c6571c3d78503abf4d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "af403496e38e937dd3e995a0203c4fe6b0f0253f", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15582fcd143250ebe25e25ac1ba3a88e90cf5bfd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15582fcd143250ebe25e25ac1ba3a88e90cf5bfd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=15582fcd143250ebe25e25ac1ba3a88e90cf5bfd", "patch": "@@ -89,7 +89,7 @@ impl<K, V> LeafNode<K, V> {\n \n /// The underlying representation of internal nodes. As with `LeafNode`s, these should be hidden\n /// behind `BoxedNode`s to prevent dropping uninitialized keys and values. Any pointer to an\n-/// `InternalNode` can be directly casted to a pointer to the underlying `LeafNode` portion of the\n+/// `InternalNode` can be directly cast to a pointer to the underlying `LeafNode` portion of the\n /// node, allowing code to act on leaf and internal nodes generically without having to even check\n /// which of the two a pointer is pointing at. This property is enabled by the use of `repr(C)`.\n #[repr(C)]\n@@ -408,7 +408,7 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n }\n \n impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n-    /// Temporarily takes out another, mutable reference to the same node. Beware, as\n+    /// Temporarily takes out another mutable reference to the same node. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n     /// dangerous.\n     ///\n@@ -759,15 +759,15 @@ impl<BorrowType, K, V, NodeType, HandleType> PartialEq\n impl<BorrowType, K, V, NodeType, HandleType>\n     Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>\n {\n-    /// Temporarily takes out another, immutable handle on the same location.\n+    /// Temporarily takes out another immutable handle on the same location.\n     pub fn reborrow(&self) -> Handle<NodeRef<marker::Immut<'_>, K, V, NodeType>, HandleType> {\n         // We can't use Handle::new_kv or Handle::new_edge because we don't know our type\n         Handle { node: self.node.reborrow(), idx: self.idx, _marker: PhantomData }\n     }\n }\n \n impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n-    /// Temporarily takes out another, mutable handle on the same location. Beware, as\n+    /// Temporarily takes out another mutable handle on the same location. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n     /// dangerous.\n     ///"}]}