{"sha": "838b2ea760282c716f4354b40fafe3cd55ae5ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOGIyZWE3NjAyODJjNzE2ZjQzNTRiNDBmYWZlM2NkNTVhZTVlYzc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-26T08:55:22Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-21T14:27:26Z"}, "message": "docs: fix fallout of merging ast::ViewItem into ast::Item.", "tree": {"sha": "c16625a087ba4c803be0894fbaea1ed6f449b89b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16625a087ba4c803be0894fbaea1ed6f449b89b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/838b2ea760282c716f4354b40fafe3cd55ae5ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/838b2ea760282c716f4354b40fafe3cd55ae5ec7", "html_url": "https://github.com/rust-lang/rust/commit/838b2ea760282c716f4354b40fafe3cd55ae5ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/838b2ea760282c716f4354b40fafe3cd55ae5ec7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3102b9e19e7af6f133777e4281d7d4e4d82fe4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3102b9e19e7af6f133777e4281d7d4e4d82fe4b0", "html_url": "https://github.com/rust-lang/rust/commit/3102b9e19e7af6f133777e4281d7d4e4d82fe4b0"}], "stats": {"total": 32, "additions": 9, "deletions": 23}, "files": [{"sha": "8f76e2a1f3d5e217468aa90856ea9ee8bd45793b", "filename": "src/doc/reference.md", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/838b2ea760282c716f4354b40fafe3cd55ae5ec7/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/838b2ea760282c716f4354b40fafe3cd55ae5ec7/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=838b2ea760282c716f4354b40fafe3cd55ae5ec7", "patch": "@@ -803,8 +803,9 @@ Crates contain [items](#items), each of which may have some number of\n ## Items\n \n ```{.ebnf .gram}\n-item : mod_item | fn_item | type_item | struct_item | enum_item\n-     | static_item | trait_item | impl_item | extern_block ;\n+item : extern_crate_decl | use_decl | mod_item | fn_item | type_item\n+     | struct_item | enum_item | static_item | trait_item | impl_item\n+     | extern_block ;\n ```\n \n An _item_ is a component of a crate; some module items can be defined in crate\n@@ -818,6 +819,8 @@ execution, and may reside in read-only memory.\n \n There are several kinds of item:\n \n+* [`extern crate` declarations](#extern-crate-declarations)\n+* [`use` declarations](#use-declarations)\n * [modules](#modules)\n * [functions](#functions)\n * [type definitions](#type-definitions)\n@@ -854,13 +857,10 @@ no notion of type abstraction: there are no first-class \"forall\" types.\n \n ```{.ebnf .gram}\n mod_item : \"mod\" ident ( ';' | '{' mod '}' );\n-mod : [ view_item | item ] * ;\n+mod : item * ;\n ```\n \n-A module is a container for zero or more [view items](#view-items) and zero or\n-more [items](#items). The view items manage the visibility of the items defined\n-within the module, as well as the visibility of names from outside the module\n-when referenced from inside the module.\n+A module is a container for zero or more [items](#items).\n \n A _module item_ is a module, surrounded in braces, named, and prefixed with the\n keyword `mod`. A module item introduces a new, named module into the tree of\n@@ -918,19 +918,6 @@ mod thread {\n }\n ```\n \n-#### View items\n-\n-```{.ebnf .gram}\n-view_item : extern_crate_decl | use_decl ;\n-```\n-\n-A view item manages the namespace of a module. View items do not define new\n-items, but rather, simply change other items' visibility. There are two\n-kinds of view items:\n-\n-* [`extern crate` declarations](#extern-crate-declarations)\n-* [`use` declarations](#use-declarations)\n-\n ##### Extern crate declarations\n \n ```{.ebnf .gram}\n@@ -2891,13 +2878,12 @@ Point3d {y: 0, z: 10, .. base};\n ### Block expressions\n \n ```{.ebnf .gram}\n-block_expr : '{' [ view_item ] *\n-                 [ stmt ';' | item ] *\n+block_expr : '{' [ stmt ';' | item ] *\n                  [ expr ] '}' ;\n ```\n \n A _block expression_ is similar to a module in terms of the declarations that\n-are possible. Each block conceptually introduces a new namespace scope. View\n+are possible. Each block conceptually introduces a new namespace scope. Use\n items can bring new names into scopes and declared items are in scope for only\n the block itself.\n "}]}