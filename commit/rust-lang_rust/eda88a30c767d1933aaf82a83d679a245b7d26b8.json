{"sha": "eda88a30c767d1933aaf82a83d679a245b7d26b8", "node_id": "C_kwDOAAsO6NoAKGVkYTg4YTMwYzc2N2QxOTMzYWFmODJhODNkNjc5YTI0NWI3ZDI2Yjg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-22T18:30:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T18:30:35Z"}, "message": "Rollup merge of #109435 - oli-obk:\ud83c\udde8\ud83c\udded\ud83e\udd5a_copy_op, r=RalfJung\n\nDetect uninhabited types early in const eval\n\nr? `@RalfJung`\n\nimplements https://github.com/rust-lang/rust/pull/108442#discussion_r1143003840\n\nthis is a breaking change, as some UB during const eval is now detected instead of silently being ignored. Users can see this and other UB that may cause future breakage with `-Zextra-const-ub-checks` or just by running miri on their code, which sets that flag by default.", "tree": {"sha": "8047ee2a1679b107542e980b2ffb2f1f9daf91b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8047ee2a1679b107542e980b2ffb2f1f9daf91b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eda88a30c767d1933aaf82a83d679a245b7d26b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkG0lLCRBK7hj4Ov3rIwAApT4IACy2iMZaEdStNWjYMCQ2j0jz\nA9DmK072kX3yITLNeXqmJk/wrvdc+mJsRo1EBKQcJWBPJtYwE+oOKMxt5P8dgbeW\nWyPtMsYcRFdJsSPcJYmFTKawuBtaved9jq6G0Nv7ECrfDnei7E85b24R+34r2Czc\ngby9CCBcz9LixCoWVKingK+z1TnU+H+yTGxyTD/FaxSSqqWRDHgOcQuT6iJQroFn\ntCzB8pfzrv9taFaAAP4JlSA875z6YBo1GNe7555MbqlTD2lacY5ZkQrZF4W+R8wE\nEUGCqbLJjPmuPTKx49rgkkWTtMa5HN9ZWXB5ZYAyNaripsdhQEh6GmR7eeEVzLQ=\n=xMTR\n-----END PGP SIGNATURE-----\n", "payload": "tree 8047ee2a1679b107542e980b2ffb2f1f9daf91b5\nparent 031640ccd2773dfbbf996af90349536f405591ed\nparent f066d6785dc37445e06230b7704faef75489a80f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1679509835 +0530\ncommitter GitHub <noreply@github.com> 1679509835 +0530\n\nRollup merge of #109435 - oli-obk:\ud83c\udde8\ud83c\udded\ud83e\udd5a_copy_op, r=RalfJung\n\nDetect uninhabited types early in const eval\n\nr? `@RalfJung`\n\nimplements https://github.com/rust-lang/rust/pull/108442#discussion_r1143003840\n\nthis is a breaking change, as some UB during const eval is now detected instead of silently being ignored. Users can see this and other UB that may cause future breakage with `-Zextra-const-ub-checks` or just by running miri on their code, which sets that flag by default.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eda88a30c767d1933aaf82a83d679a245b7d26b8", "html_url": "https://github.com/rust-lang/rust/commit/eda88a30c767d1933aaf82a83d679a245b7d26b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eda88a30c767d1933aaf82a83d679a245b7d26b8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "031640ccd2773dfbbf996af90349536f405591ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/031640ccd2773dfbbf996af90349536f405591ed", "html_url": "https://github.com/rust-lang/rust/commit/031640ccd2773dfbbf996af90349536f405591ed"}, {"sha": "f066d6785dc37445e06230b7704faef75489a80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f066d6785dc37445e06230b7704faef75489a80f", "html_url": "https://github.com/rust-lang/rust/commit/f066d6785dc37445e06230b7704faef75489a80f"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "350ce529ef538855dd996453804a6935b932214c", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -2,7 +2,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::{LangItem, CRATE_HIR_ID};\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::PointerArithmetic;\n-use rustc_middle::ty::layout::FnAbiOf;\n+use rustc_middle::ty::layout::{FnAbiOf, TyAndLayout};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::builtin::INVALID_ALIGNMENT;\n use std::borrow::Borrow;\n@@ -335,8 +335,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n-        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>, layout: TyAndLayout<'tcx>) -> bool {\n+        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks || layout.abi.is_uninhabited()\n     }\n \n     fn alignment_check_failed("}, {"sha": "aca68dc454beeeb6c32e1790c2a9a4e724863b6c", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -8,6 +8,7 @@ use std::hash::Hash;\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_middle::mir;\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{Align, Size};\n@@ -145,8 +146,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         check: CheckAlignment,\n     ) -> InterpResult<'tcx, ()>;\n \n-    /// Whether to enforce the validity invariant\n-    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+    /// Whether to enforce the validity invariant for a specific layout.\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>, layout: TyAndLayout<'tcx>) -> bool;\n \n     /// Whether function calls should be [ABI](CallAbi)-checked.\n     fn enforce_abi(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {"}, {"sha": "ff6db143ddfd974979fb1efac580cebf064e13c5", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -461,7 +461,7 @@ where\n     ) -> InterpResult<'tcx> {\n         self.write_immediate_no_validate(src, dest)?;\n \n-        if M::enforce_validity(self) {\n+        if M::enforce_validity(self, dest.layout) {\n             // Data got changed, better make sure it matches the type!\n             self.validate_operand(&self.place_to_op(dest)?)?;\n         }\n@@ -616,7 +616,7 @@ where\n     ) -> InterpResult<'tcx> {\n         self.copy_op_no_validate(src, dest, allow_transmute)?;\n \n-        if M::enforce_validity(self) {\n+        if M::enforce_validity(self, dest.layout) {\n             // Data got changed, better make sure it matches the type!\n             self.validate_operand(&self.place_to_op(dest)?)?;\n         }"}, {"sha": "8b81abb23b0aa87c143b77a36e11dac6ade6bb09", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -180,7 +180,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     }\n \n     #[inline(always)]\n-    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>, _layout: TyAndLayout<'tcx>) -> bool {\n         false // for now, we don't enforce validity\n     }\n     fn alignment_check_failed("}, {"sha": "a7218a4f2500d97b91792b6a19facbc446943257", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::*;\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{Map, State, TrackElem, ValueAnalysis, ValueOrPlace};\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n@@ -548,7 +549,7 @@ impl<'mir, 'tcx> rustc_const_eval::interpret::Machine<'mir, 'tcx> for DummyMachi\n         unimplemented!()\n     }\n \n-    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>, _layout: TyAndLayout<'tcx>) -> bool {\n         unimplemented!()\n     }\n     fn alignment_check_failed("}, {"sha": "cc1964de332c2183daeed04465116d58f5a5e164", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -812,7 +812,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     }\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n+    fn enforce_validity(ecx: &MiriInterpCx<'mir, 'tcx>, _layout: TyAndLayout<'tcx>) -> bool {\n         ecx.machine.validate\n     }\n "}, {"sha": "10edae437ee74283ab235c68f54142f1c24da29c", "filename": "tests/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -14,12 +14,12 @@ union MaybeUninit<T: Copy> {\n }\n \n const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ ERROR evaluation of constant value failed\n \n const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "733975fc0e9ce5e3011048f7e66f6a5860f54948", "filename": "tests/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -1,11 +1,8 @@\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:16:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-uninhabit.rs:16:35\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {}\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:19:1\n@@ -18,14 +15,11 @@ LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n                HEX_DUMP\n            }\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:22:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-uninhabit.rs:22:42\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar\n \n error: aborting due to 3 previous errors\n "}, {"sha": "231005d7e3975dc8bfe47d3a9f34abc7869efcf3", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -24,14 +24,11 @@ note: inside `FOO`\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n    |                                 ^^^^^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:21:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 0, align: 1) {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered a value of uninhabited type empty::Void\n \n warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:21:42"}, {"sha": "231005d7e3975dc8bfe47d3a9f34abc7869efcf3", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -24,14 +24,11 @@ note: inside `FOO`\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n    |                                 ^^^^^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:21:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 0, align: 1) {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered a value of uninhabited type empty::Void\n \n warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:21:42"}, {"sha": "b6783175dd3795bfc0b0eebb20e453bee4c5977d", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -19,7 +19,7 @@ pub mod empty {\n const FOO: [empty::Empty; 3] = [foo(); 3];\n \n const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ ERROR evaluation of constant value failed\n //~| WARN the type `empty::Empty` does not permit zero-initialization\n \n fn main() {"}, {"sha": "9275a8a072ddecb68274ef93346854ee23296d6b", "filename": "tests/ui/consts/issue-64506.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fissue-64506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fissue-64506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-64506.rs?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// check-fail\n \n #[derive(Copy, Clone)]\n pub struct ChildStdin {\n@@ -14,6 +14,7 @@ const FOO: () = {\n         b: (),\n     }\n     let x = unsafe { Foo { b: () }.a };\n+    //~^ ERROR: evaluation of constant value failed\n     let x = &x.inner;\n };\n "}, {"sha": "31a5b1df837c5b186927af14c0593d7ef428f433", "filename": "tests/ui/consts/issue-64506.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fissue-64506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eda88a30c767d1933aaf82a83d679a245b7d26b8/tests%2Fui%2Fconsts%2Fissue-64506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-64506.stderr?ref=eda88a30c767d1933aaf82a83d679a245b7d26b8", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-64506.rs:16:22\n+   |\n+LL |     let x = unsafe { Foo { b: () }.a };\n+   |                      ^^^^^^^^^^^^^^^ constructing invalid value at .inner: encountered a value of uninhabited type AnonPipe\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}