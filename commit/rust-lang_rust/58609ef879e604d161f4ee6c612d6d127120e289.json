{"sha": "58609ef879e604d161f4ee6c612d6d127120e289", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NjA5ZWY4NzllNjA0ZDE2MWY0ZWU2YzYxMmQ2ZDEyNzEyMGUyODk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-10T02:47:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-12T00:32:46Z"}, "message": "add Subtype predicate", "tree": {"sha": "4e0a7775d847ba02166d3beaa4cc5b11f2436832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e0a7775d847ba02166d3beaa4cc5b11f2436832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58609ef879e604d161f4ee6c612d6d127120e289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58609ef879e604d161f4ee6c612d6d127120e289", "html_url": "https://github.com/rust-lang/rust/commit/58609ef879e604d161f4ee6c612d6d127120e289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58609ef879e604d161f4ee6c612d6d127120e289/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ea55fe1636001c4d030911e2c4c165af1cabfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ea55fe1636001c4d030911e2c4c165af1cabfc", "html_url": "https://github.com/rust-lang/rust/commit/18ea55fe1636001c4d030911e2c4c165af1cabfc"}], "stats": {"total": 197, "additions": 193, "deletions": 4}, "files": [{"sha": "b8888eee9c6efb4218ac9a1379eeb97817957fcb", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -170,6 +170,7 @@ impl_stable_hash_for!(enum ty::Visibility {\n impl_stable_hash_for!(struct ty::TraitRef<'tcx> { def_id, substs });\n impl_stable_hash_for!(struct ty::TraitPredicate<'tcx> { trait_ref });\n impl_stable_hash_for!(tuple_struct ty::EquatePredicate<'tcx> { t1, t2 });\n+impl_stable_hash_for!(struct ty::SubtypePredicate<'tcx> { a_is_expected, a, b });\n \n impl<'a, 'tcx, A, B> HashStable<StableHashingContext<'a, 'tcx>> for ty::OutlivesPredicate<A, B>\n     where A: HashStable<StableHashingContext<'a, 'tcx>>,\n@@ -200,6 +201,9 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::Predicate<'tcx\n             ty::Predicate::Equate(ref pred) => {\n                 pred.hash_stable(hcx, hasher);\n             }\n+            ty::Predicate::Subtype(ref pred) => {\n+                pred.hash_stable(hcx, hasher);\n+            }\n             ty::Predicate::RegionOutlives(ref pred) => {\n                 pred.hash_stable(hcx, hasher);\n             }"}, {"sha": "999ebbfa20fbf8f62a540bd0687696da73594032", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -551,7 +551,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n }\n \n impl<T> ExpectedFound<T> {\n-    fn new(a_is_expected: bool, a: T, b: T) -> Self {\n+    pub fn new(a_is_expected: bool, a: T, b: T) -> Self {\n         if a_is_expected {\n             ExpectedFound {expected: a, found: b}\n         } else {\n@@ -1129,6 +1129,43 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n+    pub fn subtype_predicate(&self,\n+                             cause: &ObligationCause<'tcx>,\n+                             predicate: &ty::PolySubtypePredicate<'tcx>)\n+        -> Option<InferResult<'tcx, ()>>\n+    {\n+        // Subtle: it's ok to skip the binder here and resolve because\n+        // `shallow_resolve` just ignores anything that is not a type\n+        // variable, and because type variable's can't (at present, at\n+        // least) capture any of the things bound by this binder.\n+        //\n+        // Really, there is no *particular* reason to do this\n+        // `shallow_resolve` here except as a\n+        // micro-optimization. Naturally I could not\n+        // resist. -nmatsakis\n+        let two_unbound_type_vars = {\n+            let a = self.shallow_resolve(predicate.skip_binder().a);\n+            let b = self.shallow_resolve(predicate.skip_binder().b);\n+            a.is_ty_var() && b.is_ty_var()\n+        };\n+\n+        if two_unbound_type_vars {\n+            // Two unbound type variables? Can't make progress.\n+            return None;\n+        }\n+\n+        Some(self.commit_if_ok(|snapshot| {\n+            let (ty::SubtypePredicate { a_is_expected, a, b}, skol_map) =\n+                self.skolemize_late_bound_regions(predicate, snapshot);\n+\n+            let cause_span = cause.span;\n+            let ok = self.sub_types(a_is_expected, cause, a, b)?;\n+            self.leak_check(false, cause_span, &skol_map, snapshot)?;\n+            self.pop_skolemized(skol_map, snapshot);\n+            Ok(ok.unit())\n+        }))\n+    }\n+\n     pub fn region_outlives_predicate(&self,\n                                      cause: &traits::ObligationCause<'tcx>,\n                                      predicate: &ty::PolyRegionOutlivesPredicate<'tcx>)"}, {"sha": "963cc4314eda544789399753325b038102d7d7bc", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -60,6 +60,7 @@ impl FreeRegionMap {\n                 ty::Predicate::Projection(..) |\n                 ty::Predicate::Trait(..) |\n                 ty::Predicate::Equate(..) |\n+                ty::Predicate::Subtype(..) |\n                 ty::Predicate::WellFormed(..) |\n                 ty::Predicate::ObjectSafe(..) |\n                 ty::Predicate::ClosureKind(..) |"}, {"sha": "8a303a5da1184263b4ea847df1b8795d83b95d6d", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -39,6 +39,7 @@ use ty::error::ExpectedFound;\n use ty::fast_reject;\n use ty::fold::TypeFolder;\n use ty::subst::Subst;\n+use ty::SubtypePredicate;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n use syntax_pos::{DUMMY_SP, Span};\n@@ -112,6 +113,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             FulfillmentErrorCode::CodeAmbiguity => {\n                 self.maybe_report_ambiguity(&error.obligation);\n             }\n+            FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n+                self.report_mismatched_types(&error.obligation.cause,\n+                                             expected_found.expected,\n+                                             expected_found.found,\n+                                             err.clone())\n+                    .emit();\n+            }\n         }\n     }\n \n@@ -555,6 +563,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         err\n                     }\n \n+                    ty::Predicate::Subtype(ref predicate) => {\n+                        // TODO\n+                        panic!(\"subtype requirement not satisfied {:?}\", predicate)\n+                    }\n+\n                     ty::Predicate::Equate(ref predicate) => {\n                         let predicate = self.resolve_type_vars_if_possible(predicate);\n                         let err = self.equality_predicate(&obligation.cause,\n@@ -761,6 +774,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            ty::Predicate::Subtype(ref data) => {\n+                if data.references_error() || self.tcx.sess.has_errors() {\n+                    // no need to overload user in such cases\n+                } else {\n+                    let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n+                    assert!(a.is_ty_var() && b.is_ty_var()); // else other would've been instantiated\n+                    self.need_type_info(obligation, a);\n+                }\n+            }\n+\n             _ => {\n                 if !self.tcx.sess.has_errors() {\n                     let mut err = struct_span_err!(self.tcx.sess,"}, {"sha": "64453f2983b92f03b6a86ae8444f2474630a052c", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -11,6 +11,7 @@\n use dep_graph::DepGraph;\n use infer::{InferCtxt, InferOk};\n use ty::{self, Ty, TypeFoldable, ToPolyTraitRef, TyCtxt, ToPredicate};\n+use ty::error::ExpectedFound;\n use rustc_data_structures::obligation_forest::{ObligationForest, Error};\n use rustc_data_structures::obligation_forest::{ForestObligation, ObligationProcessor};\n use std::marker::PhantomData;\n@@ -496,6 +497,26 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                 s => Ok(s)\n             }\n         }\n+\n+        ty::Predicate::Subtype(ref subtype) => {\n+            match selcx.infcx().subtype_predicate(&obligation.cause, subtype) {\n+                None => {\n+                    // none means that both are unresolved\n+                    pending_obligation.stalled_on = vec![subtype.skip_binder().a,\n+                                                         subtype.skip_binder().b];\n+                    Ok(None)\n+                }\n+                Some(Ok(ok)) => {\n+                    Ok(Some(ok.obligations))\n+                }\n+                Some(Err(err)) => {\n+                    let expected_found = ExpectedFound::new(subtype.skip_binder().a_is_expected,\n+                                                            subtype.skip_binder().a,\n+                                                            subtype.skip_binder().b);\n+                    Err(FulfillmentErrorCode::CodeSubtypeError(expected_found, err))\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "d190635bec3063ce3c0e8193fba6cde6942e0800", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -178,6 +178,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::TypeOutlives(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::ClosureKind(..) |\n+                    ty::Predicate::Subtype(..) |\n                     ty::Predicate::Equate(..) => {\n                         false\n                     }\n@@ -209,6 +210,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::Trait(..) |\n                     ty::Predicate::Equate(..) |\n+                    ty::Predicate::Subtype(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |"}, {"sha": "67d50210ba39adb94a909c475424607ba445f5d4", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -568,6 +568,18 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n+            ty::Predicate::Subtype(ref p) => {\n+                // does this code ever run?\n+                match self.infcx.subtype_predicate(&obligation.cause, p) {\n+                    Some(Ok(InferOk { obligations, .. })) => {\n+                        self.inferred_obligations.extend(obligations);\n+                        EvaluatedToOk\n+                    },\n+                    Some(Err(_)) => EvaluatedToErr,\n+                    None => EvaluatedToAmbig,\n+                }\n+            }\n+\n             ty::Predicate::WellFormed(ty) => {\n                 match ty::wf::obligations(self.infcx, obligation.cause.body_id,\n                                           ty, obligation.cause.span) {"}, {"sha": "fcaa29be9632c21d1f56e78c8630a95edc2fba77", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -130,6 +130,7 @@ impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n         match *self {\n             super::CodeSelectionError(ref e) => write!(f, \"{:?}\", e),\n             super::CodeProjectionError(ref e) => write!(f, \"{:?}\", e),\n+            super::CodeSubtypeError(ref a, ref b) => write!(f, \"CodeSubtypeError({:?}, {:?})\", a, b),\n             super::CodeAmbiguity => write!(f, \"Ambiguity\")\n         }\n     }"}, {"sha": "d4245ec9b2475aa79fa033e16a1de9d874bd5ff8", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -42,7 +42,10 @@ fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             ty::Predicate::ObjectSafe(data),\n \n         ty::Predicate::ClosureKind(closure_def_id, kind) =>\n-            ty::Predicate::ClosureKind(closure_def_id, kind)\n+            ty::Predicate::ClosureKind(closure_def_id, kind),\n+\n+        ty::Predicate::Subtype(ref data) =>\n+            ty::Predicate::Subtype(tcx.anonymize_late_bound_regions(data)),\n     }\n }\n \n@@ -160,6 +163,10 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                 // `X == Y`, though conceivably we might. For example,\n                 // `&X == &Y` implies that `X == Y`.\n             }\n+            ty::Predicate::Subtype(..) => {\n+                // Currently, we do not \"elaborate\" predicates like `X\n+                // <: Y`, though conceivably we might.\n+            }\n             ty::Predicate::Projection(..) => {\n                 // Nothing to elaborate in a projection predicate.\n             }"}, {"sha": "d720911db39fbb4196739d16e462aa931aad28d7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -755,6 +755,9 @@ pub enum Predicate<'tcx> {\n     /// for some substitutions `...` and T being a closure type.\n     /// Satisfied (or refuted) once we know the closure's kind.\n     ClosureKind(DefId, ClosureKind),\n+\n+    /// `T1 <: T2`\n+    Subtype(PolySubtypePredicate<'tcx>),\n }\n \n impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n@@ -833,6 +836,8 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n                 Predicate::Trait(ty::Binder(data.subst(tcx, substs))),\n             Predicate::Equate(ty::Binder(ref data)) =>\n                 Predicate::Equate(ty::Binder(data.subst(tcx, substs))),\n+            Predicate::Subtype(ty::Binder(ref data)) =>\n+                Predicate::Subtype(ty::Binder(data.subst(tcx, substs))),\n             Predicate::RegionOutlives(ty::Binder(ref data)) =>\n                 Predicate::RegionOutlives(ty::Binder(data.subst(tcx, substs))),\n             Predicate::TypeOutlives(ty::Binder(ref data)) =>\n@@ -912,6 +917,14 @@ pub type PolyRegionOutlivesPredicate<'tcx> = PolyOutlivesPredicate<&'tcx ty::Reg\n                                                                    &'tcx ty::Region>;\n pub type PolyTypeOutlivesPredicate<'tcx> = PolyOutlivesPredicate<Ty<'tcx>, &'tcx ty::Region>;\n \n+#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub struct SubtypePredicate<'tcx> {\n+    pub a_is_expected: bool,\n+    pub a: Ty<'tcx>,\n+    pub b: Ty<'tcx>\n+}\n+pub type PolySubtypePredicate<'tcx> = ty::Binder<SubtypePredicate<'tcx>>;\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///\n@@ -1025,6 +1038,9 @@ impl<'tcx> Predicate<'tcx> {\n             ty::Predicate::Equate(ty::Binder(ref data)) => {\n                 vec![data.0, data.1]\n             }\n+            ty::Predicate::Subtype(ty::Binder(SubtypePredicate { a, b, a_is_expected: _ })) => {\n+                vec![a, b]\n+            }\n             ty::Predicate::TypeOutlives(ty::Binder(ref data)) => {\n                 vec![data.0]\n             }\n@@ -1061,6 +1077,7 @@ impl<'tcx> Predicate<'tcx> {\n             }\n             Predicate::Projection(..) |\n             Predicate::Equate(..) |\n+            Predicate::Subtype(..) |\n             Predicate::RegionOutlives(..) |\n             Predicate::WellFormed(..) |\n             Predicate::ObjectSafe(..) |"}, {"sha": "a4466d7d840110f450a7b4e8e959164da13402c3", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -111,6 +111,18 @@ impl<'a, 'tcx> Lift<'tcx> for ty::EquatePredicate<'a> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for ty::SubtypePredicate<'a> {\n+    type Lifted = ty::SubtypePredicate<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n+                             -> Option<ty::SubtypePredicate<'tcx>> {\n+        tcx.lift(&(self.a, self.b)).map(|(a, b)| ty::SubtypePredicate {\n+            a_is_expected: self.a_is_expected,\n+            a: a,\n+            b: b,\n+        })\n+    }\n+}\n+\n impl<'tcx, A: Copy+Lift<'tcx>, B: Copy+Lift<'tcx>> Lift<'tcx> for ty::OutlivesPredicate<A, B> {\n     type Lifted = ty::OutlivesPredicate<A::Lifted, B::Lifted>;\n     fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n@@ -167,6 +179,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n             ty::Predicate::Equate(ref binder) => {\n                 tcx.lift(binder).map(ty::Predicate::Equate)\n             }\n+            ty::Predicate::Subtype(ref binder) => {\n+                tcx.lift(binder).map(ty::Predicate::Subtype)\n+            }\n             ty::Predicate::RegionOutlives(ref binder) => {\n                 tcx.lift(binder).map(ty::Predicate::RegionOutlives)\n             }\n@@ -693,6 +708,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n                 ty::Predicate::Trait(a.fold_with(folder)),\n             ty::Predicate::Equate(ref binder) =>\n                 ty::Predicate::Equate(binder.fold_with(folder)),\n+            ty::Predicate::Subtype(ref binder) =>\n+                ty::Predicate::Subtype(binder.fold_with(folder)),\n             ty::Predicate::RegionOutlives(ref binder) =>\n                 ty::Predicate::RegionOutlives(binder.fold_with(folder)),\n             ty::Predicate::TypeOutlives(ref binder) =>\n@@ -712,6 +729,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         match *self {\n             ty::Predicate::Trait(ref a) => a.visit_with(visitor),\n             ty::Predicate::Equate(ref binder) => binder.visit_with(visitor),\n+            ty::Predicate::Subtype(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::RegionOutlives(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::TypeOutlives(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::Projection(ref binder) => binder.visit_with(visitor),\n@@ -776,15 +794,28 @@ impl<'tcx> TypeFoldable<'tcx> for ty::InstantiatedPredicates<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::EquatePredicate<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::EquatePredicate(self.0.fold_with(folder),\n-                            self.1.fold_with(folder))\n+        ty::EquatePredicate(self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.0.visit_with(visitor) || self.1.visit_with(visitor)\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for ty::SubtypePredicate<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::SubtypePredicate {\n+            a_is_expected: self.a_is_expected,\n+            a: self.a.fold_with(folder),\n+            b: self.b.fold_with(folder)\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.a.visit_with(visitor) || self.b.visit_with(visitor)\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::TraitPredicate {"}, {"sha": "2efefd750ae8a7ffd72ded7c8cd2deacf927aeac", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -312,6 +312,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::Trait(..) |\n                     ty::Predicate::Equate(..) |\n+                    ty::Predicate::Subtype(..) |\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::ClosureKind(..) |"}, {"sha": "0b0e8a180cc36800c103ed87ead051ed584c8d0b", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -94,6 +94,10 @@ pub fn predicate_obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n         }\n         ty::Predicate::ClosureKind(..) => {\n         }\n+        ty::Predicate::Subtype(ref data) => {\n+            wf.compute(data.skip_binder().a); // (*)\n+            wf.compute(data.skip_binder().b); // (*)\n+        }\n     }\n \n     wf.normalize()\n@@ -156,6 +160,7 @@ pub fn implied_bounds<'a, 'gcx, 'tcx>(\n                 match obligation.predicate {\n                     ty::Predicate::Trait(..) |\n                     ty::Predicate::Equate(..) |\n+                    ty::Predicate::Subtype(..) |\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::ClosureKind(..) |\n                     ty::Predicate::ObjectSafe(..) =>"}, {"sha": "2daf71d95addf67c547871de9fb3e99a56475aea", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -416,6 +416,7 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n         match *self {\n             ty::Predicate::Trait(ref a) => write!(f, \"{:?}\", a),\n             ty::Predicate::Equate(ref pair) => write!(f, \"{:?}\", pair),\n+            ty::Predicate::Subtype(ref pair) => write!(f, \"{:?}\", pair),\n             ty::Predicate::RegionOutlives(ref pair) => write!(f, \"{:?}\", pair),\n             ty::Predicate::TypeOutlives(ref pair) => write!(f, \"{:?}\", pair),\n             ty::Predicate::Projection(ref pair) => write!(f, \"{:?}\", pair),\n@@ -676,6 +677,12 @@ impl<'tcx> fmt::Display for ty::Binder<ty::EquatePredicate<'tcx>> {\n     }\n }\n \n+impl<'tcx> fmt::Display for ty::Binder<ty::SubtypePredicate<'tcx>> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        ty::tls::with(|tcx| in_binder(f, tcx, self, tcx.lift(self)))\n+    }\n+}\n+\n impl<'tcx> fmt::Display for ty::Binder<ty::ProjectionPredicate<'tcx>> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         ty::tls::with(|tcx| in_binder(f, tcx, self, tcx.lift(self)))\n@@ -897,6 +904,12 @@ impl<'tcx> fmt::Display for ty::EquatePredicate<'tcx> {\n     }\n }\n \n+impl<'tcx> fmt::Display for ty::SubtypePredicate<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{} <: {}\", self.a, self.b)\n+    }\n+}\n+\n impl<'tcx> fmt::Debug for ty::TraitPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"TraitPredicate({:?})\",\n@@ -949,6 +962,7 @@ impl<'tcx> fmt::Display for ty::Predicate<'tcx> {\n         match *self {\n             ty::Predicate::Trait(ref data) => write!(f, \"{}\", data),\n             ty::Predicate::Equate(ref predicate) => write!(f, \"{}\", predicate),\n+            ty::Predicate::Subtype(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::RegionOutlives(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::TypeOutlives(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::Projection(ref predicate) => write!(f, \"{}\", predicate),"}, {"sha": "78176b155691cef23cbc783376890d8837101c99", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -169,6 +169,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::Projection(ref data) => Some(data.to_poly_trait_ref()),\n                     ty::Predicate::Trait(ref data) => Some(data.to_poly_trait_ref()),\n                     ty::Predicate::Equate(..) => None,\n+                    ty::Predicate::Subtype(..) => None,\n                     ty::Predicate::RegionOutlives(..) => None,\n                     ty::Predicate::TypeOutlives(..) => None,\n                     ty::Predicate::WellFormed(..) => None,"}, {"sha": "8071fe3cc2806a834f40ad273a059ad7f4b9d74d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -576,6 +576,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                     ty::Predicate::Equate(..) |\n+                    ty::Predicate::Subtype(..) |\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::WellFormed(..) |"}, {"sha": "1a194cd12546262e433d553ee15fd5229790b07b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58609ef879e604d161f4ee6c612d6d127120e289/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=58609ef879e604d161f4ee6c612d6d127120e289", "patch": "@@ -875,6 +875,7 @@ impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n         match *self {\n             Predicate::Trait(ref pred) => pred.clean(cx),\n             Predicate::Equate(ref pred) => pred.clean(cx),\n+            Predicate::Subtype(ref pred) => pred.clean(cx),\n             Predicate::RegionOutlives(ref pred) => pred.clean(cx),\n             Predicate::TypeOutlives(ref pred) => pred.clean(cx),\n             Predicate::Projection(ref pred) => pred.clean(cx),\n@@ -904,6 +905,16 @@ impl<'tcx> Clean<WherePredicate> for ty::EquatePredicate<'tcx> {\n     }\n }\n \n+impl<'tcx> Clean<WherePredicate> for ty::SubtypePredicate<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> WherePredicate {\n+        let ty::SubtypePredicate { a_is_expected: _, a, b } = *self;\n+        WherePredicate::EqPredicate { // TODO This is obviously wrong :P\n+            lhs: a.clean(cx),\n+            rhs: b.clean(cx)\n+        }\n+    }\n+}\n+\n impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<&'tcx ty::Region, &'tcx ty::Region> {\n     fn clean(&self, cx: &DocContext) -> WherePredicate {\n         let ty::OutlivesPredicate(ref a, ref b) = *self;"}]}