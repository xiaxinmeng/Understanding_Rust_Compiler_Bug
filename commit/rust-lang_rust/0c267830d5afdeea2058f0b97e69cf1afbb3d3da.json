{"sha": "0c267830d5afdeea2058f0b97e69cf1afbb3d3da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjY3ODMwZDVhZmRlZWEyMDU4ZjBiOTdlNjljZjFhZmJiM2QzZGE=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-30T16:27:07Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-30T16:27:07Z"}, "message": "Match on `hir::TraitFn::Provided` instead of using `maybe_body_owned_by`", "tree": {"sha": "27ebb81dc2c407ed0da3f4065e4e8e10e0b4367f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27ebb81dc2c407ed0da3f4065e4e8e10e0b4367f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c267830d5afdeea2058f0b97e69cf1afbb3d3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c267830d5afdeea2058f0b97e69cf1afbb3d3da", "html_url": "https://github.com/rust-lang/rust/commit/0c267830d5afdeea2058f0b97e69cf1afbb3d3da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c267830d5afdeea2058f0b97e69cf1afbb3d3da/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11fd8579e44950c0cca82bb389d255962854b9ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/11fd8579e44950c0cca82bb389d255962854b9ce", "html_url": "https://github.com/rust-lang/rust/commit/11fd8579e44950c0cca82bb389d255962854b9ce"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "cfe1d1c6871f092ab4a048c829b758f859f034b4", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0c267830d5afdeea2058f0b97e69cf1afbb3d3da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c267830d5afdeea2058f0b97e69cf1afbb3d3da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=0c267830d5afdeea2058f0b97e69cf1afbb3d3da", "patch": "@@ -683,38 +683,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let encl_item_id = self.tcx.hir().get_parent_item(expr.hir_id);\n \n-            if self.tcx.hir().maybe_body_owned_by(encl_item_id).is_some() {\n-                if let Some(hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Fn(..),\n-                    span: encl_fn_span,\n-                    ..\n-                }))\n-                | Some(hir::Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(..),\n-                    span: encl_fn_span,\n-                    ..\n-                }))\n-                | Some(hir::Node::ImplItem(hir::ImplItem {\n-                    kind: hir::ImplItemKind::Fn(..),\n-                    span: encl_fn_span,\n-                    ..\n-                })) = self.tcx.hir().find(encl_item_id)\n-                {\n-                    // We are inside a function body, so reporting \"return statement\n-                    // outside of function body\" needs an explanation.\n-\n-                    let encl_body_owner_id = self.tcx.hir().enclosing_body_owner(expr.hir_id);\n-\n-                    // If this didn't hold, we would not have to report an error in\n-                    // the first place.\n-                    assert_ne!(encl_item_id, encl_body_owner_id);\n-\n-                    let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n-                    let encl_body = self.tcx.hir().body(encl_body_id);\n-\n-                    err.encl_body_span = Some(encl_body.value.span);\n-                    err.encl_fn_span = Some(*encl_fn_span);\n-                }\n+            if let Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Fn(..),\n+                span: encl_fn_span,\n+                ..\n+            }))\n+            | Some(hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)),\n+                span: encl_fn_span,\n+                ..\n+            }))\n+            | Some(hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Fn(..),\n+                span: encl_fn_span,\n+                ..\n+            })) = self.tcx.hir().find(encl_item_id)\n+            {\n+                // We are inside a function body, so reporting \"return statement\n+                // outside of function body\" needs an explanation.\n+\n+                let encl_body_owner_id = self.tcx.hir().enclosing_body_owner(expr.hir_id);\n+\n+                // If this didn't hold, we would not have to report an error in\n+                // the first place.\n+                assert_ne!(encl_item_id, encl_body_owner_id);\n+\n+                let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n+                let encl_body = self.tcx.hir().body(encl_body_id);\n+\n+                err.encl_body_span = Some(encl_body.value.span);\n+                err.encl_fn_span = Some(*encl_fn_span);\n             }\n \n             self.tcx.sess.emit_err(err);"}]}