{"sha": "fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhM2M0NDlkOGY1YTY3ODY1Y2FiOGQ0NzE3YjNlMzJkY2E1YjY3MmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T14:15:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T15:37:36Z"}, "message": "Clarify NameClass names a bit", "tree": {"sha": "8143b3ee53bbd2b36768fbe085b4ddc6b7b70514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8143b3ee53bbd2b36768fbe085b4ddc6b7b70514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "html_url": "https://github.com/rust-lang/rust/commit/fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fadc78ebb43b0eb9b6ccf314e29bdd23717542f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f", "html_url": "https://github.com/rust-lang/rust/commit/7fadc78ebb43b0eb9b6ccf314e29bdd23717542f"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "71382f13e10c10727f89be7d5a0f48c5e7deafb8", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "patch": "@@ -233,7 +233,7 @@ pub(crate) fn external_docs(\n     let definition = match_ast! {\n         match node {\n             ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition(sema.db)),\n-            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition(sema.db)),\n+            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition_or_reference(sema.db)),\n             _ => None,\n         }\n     };"}, {"sha": "79fdb75eda0e03492c1f605e80a50c1faa5d5dbf", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                let def = classify_name(&sema, &name)?.definition(sema.db);\n+                let def = classify_name(&sema, &name)?.definition_or_reference(sema.db);\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },"}, {"sha": "51f03c718cdf728341f447e292aad56c763e8680", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "patch": "@@ -108,7 +108,7 @@ pub(crate) fn hover(\n     let definition = match_ast! {\n         match node {\n             ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition(sema.db)),\n-            ast::Name(name) => classify_name(&sema, &name).and_then(|d| d.into_definition(sema.db)),\n+            ast::Name(name) => classify_name(&sema, &name).and_then(|d| d.definition(sema.db)),\n             _ => None,\n         }\n     };"}, {"sha": "ec64207d23e9fab2aec1d512131a817d87695964", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "patch": "@@ -132,7 +132,7 @@ fn find_name(\n     opt_name: Option<ast::Name>,\n ) -> Option<RangeInfo<Definition>> {\n     if let Some(name) = opt_name {\n-        let def = classify_name(sema, &name)?.definition(sema.db);\n+        let def = classify_name(sema, &name)?.definition_or_reference(sema.db);\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, def));\n     }"}, {"sha": "a243dcd15fb8d3504e6e08261930b8db29f4ec32", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "patch": "@@ -90,7 +90,7 @@ pub enum NameClass {\n }\n \n impl NameClass {\n-    pub fn into_definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n+    pub fn definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n         Some(match self {\n             NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) => it,\n@@ -99,7 +99,7 @@ impl NameClass {\n         })\n     }\n \n-    pub fn definition(self, db: &dyn HirDatabase) -> Definition {\n+    pub fn definition_or_reference(self, db: &dyn HirDatabase) -> Definition {\n         match self {\n             NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,"}, {"sha": "e0d3e7293a15ec69b9ba9d04044da214404e2a91", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa3c449d8f5a67865cab8d4717b3e32dca5b672a/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=fa3c449d8f5a67865cab8d4717b3e32dca5b672a", "patch": "@@ -60,5 +60,5 @@ fn get_name_definition<'a>(\n         candidate_node\n     };\n     let name = ast::Name::cast(candidate_name_node)?;\n-    classify_name(sema, &name)?.into_definition(sema.db)\n+    classify_name(sema, &name)?.definition(sema.db)\n }"}]}