{"sha": "29df2179b7b390d196c4db39db77a445ff73a05d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZGYyMTc5YjdiMzkwZDE5NmM0ZGIzOWRiNzdhNDQ1ZmY3M2EwNWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-09T21:50:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-09T21:50:49Z"}, "message": "Merge pull request #3007 from alexcrichton/wasm\n\nSupport platforms without a timer", "tree": {"sha": "fa56c01aae2cf7615376095666b2a6e43df1f1d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa56c01aae2cf7615376095666b2a6e43df1f1d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29df2179b7b390d196c4db39db77a445ff73a05d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJblZW5CRBK7hj4Ov3rIwAAdHIIAJX9NIABhGOSZOJmUnp4e/to\nfy/TAWYXuurghiSrMxem0cb4HWwBd/HgrrZyNmJmm3F2ClX84v3XFYdqFUZoHMsY\nyJkMCGWldf8BnZk70Mx14LWhRHW74yXl5J6M91IlXbAHe9yq1DfUJxTj4xuAxjWP\n136fnIDN3ydPe4ZAE3fr/Gzx4CqGSCZrNvdeyCJAlVLb8jz+IYJYN4uQEI8r6LeV\nPngA8MqyyCrFh1DMTc3yghfbH0A59JCvEMAoVtLUssZm8bc1FY7M471msTKiFVeJ\nGIwMEhlQnmiIV/8rFTBMeklRDxDzOI89hSloElQCmCujCFUeocFGJmg491eeOTY=\n=SWET\n-----END PGP SIGNATURE-----\n", "payload": "tree fa56c01aae2cf7615376095666b2a6e43df1f1d7\nparent 6ada5b51ccfd99a91055dfc3b411e83f2e0514d5\nparent 46e2a2e7c76dbc6ada09ee815a440701d6aeaba9\nauthor Nick Cameron <nrc@ncameron.org> 1536529849 +1200\ncommitter GitHub <noreply@github.com> 1536529849 +1200\n\nMerge pull request #3007 from alexcrichton/wasm\n\nSupport platforms without a timer"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29df2179b7b390d196c4db39db77a445ff73a05d", "html_url": "https://github.com/rust-lang/rust/commit/29df2179b7b390d196c4db39db77a445ff73a05d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29df2179b7b390d196c4db39db77a445ff73a05d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ada5b51ccfd99a91055dfc3b411e83f2e0514d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ada5b51ccfd99a91055dfc3b411e83f2e0514d5", "html_url": "https://github.com/rust-lang/rust/commit/6ada5b51ccfd99a91055dfc3b411e83f2e0514d5"}, {"sha": "46e2a2e7c76dbc6ada09ee815a440701d6aeaba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e2a2e7c76dbc6ada09ee815a440701d6aeaba9", "html_url": "https://github.com/rust-lang/rust/commit/46e2a2e7c76dbc6ada09ee815a440701d6aeaba9"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "a07cdcc8a14972bda37f4cffdcac1c8ad1ec9396", "filename": "src/formatting.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29df2179b7b390d196c4db39db77a445ff73a05d/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29df2179b7b390d196c4db39db77a445ff73a05d/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=29df2179b7b390d196c4db39db77a445ff73a05d", "patch": "@@ -64,7 +64,7 @@ fn format_project<T: FormatHandler>(\n     config: &Config,\n     handler: &mut T,\n ) -> Result<FormatReport, ErrorKind> {\n-    let mut timer = Timer::Initialized(Instant::now());\n+    let mut timer = Timer::start();\n \n     let main_file = input.file_name();\n     let input_is_stdin = main_file == FileName::Stdin;\n@@ -344,21 +344,31 @@ pub(crate) struct ModifiedLines {\n \n #[derive(Clone, Copy, Debug)]\n enum Timer {\n+    Disabled,\n     Initialized(Instant),\n     DoneParsing(Instant, Instant),\n     DoneFormatting(Instant, Instant, Instant),\n }\n \n impl Timer {\n+    fn start() -> Timer {\n+        if cfg!(target_arch = \"wasm32\") {\n+            Timer::Disabled\n+        } else {\n+            Timer::Initialized(Instant::now())\n+        }\n+    }\n     fn done_parsing(self) -> Self {\n         match self {\n+            Timer::Disabled => Timer::Disabled,\n             Timer::Initialized(init_time) => Timer::DoneParsing(init_time, Instant::now()),\n             _ => panic!(\"Timer can only transition to DoneParsing from Initialized state\"),\n         }\n     }\n \n     fn done_formatting(self) -> Self {\n         match self {\n+            Timer::Disabled => Timer::Disabled,\n             Timer::DoneParsing(init_time, parse_time) => {\n                 Timer::DoneFormatting(init_time, parse_time, Instant::now())\n             }\n@@ -369,6 +379,7 @@ impl Timer {\n     /// Returns the time it took to parse the source files in seconds.\n     fn get_parse_time(&self) -> f32 {\n         match *self {\n+            Timer::Disabled => panic!(\"this platform cannot time execution\"),\n             Timer::DoneParsing(init, parse_time) | Timer::DoneFormatting(init, parse_time, _) => {\n                 // This should never underflow since `Instant::now()` guarantees monotonicity.\n                 Self::duration_to_f32(parse_time.duration_since(init))\n@@ -381,6 +392,7 @@ impl Timer {\n     /// not included.\n     fn get_format_time(&self) -> f32 {\n         match *self {\n+            Timer::Disabled => panic!(\"this platform cannot time execution\"),\n             Timer::DoneFormatting(_init, parse_time, format_time) => {\n                 Self::duration_to_f32(format_time.duration_since(parse_time))\n             }"}]}