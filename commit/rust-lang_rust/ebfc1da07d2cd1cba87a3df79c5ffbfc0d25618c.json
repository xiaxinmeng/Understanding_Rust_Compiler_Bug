{"sha": "ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZmMxZGEwN2QyY2QxY2JhODdhM2RmNzljNWZmYmZjMGQyNTYxOGM=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-07T18:38:28Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-07T19:03:08Z"}, "message": "reversed_empty_ranges: don't lint N..N except in for loop arg", "tree": {"sha": "ed3dbae94d74c30aa114dda0a46135d47f6dbadd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3dbae94d74c30aa114dda0a46135d47f6dbadd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "html_url": "https://github.com/rust-lang/rust/commit/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ec96c8f97ae810f72ccc08c8bf0c371ff11305", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ec96c8f97ae810f72ccc08c8bf0c371ff11305", "html_url": "https://github.com/rust-lang/rust/commit/67ec96c8f97ae810f72ccc08c8bf0c371ff11305"}], "stats": {"total": 117, "additions": 51, "deletions": 66}, "files": [{"sha": "45de4d29375c7a6b5498fa7dc7fcdafe62f97d29", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "patch": "@@ -241,14 +241,26 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n }\n \n fn check_reversed_empty_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n-    fn inside_indexing_expr<'a>(cx: &'a LateContext<'_, '_>, expr: &Expr<'_>) -> Option<&'a Expr<'a>> {\n-        match get_parent_expr(cx, expr) {\n-            parent_expr @ Some(Expr {\n+    fn inside_indexing_expr<'a>(cx: &'a LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+        matches!(\n+            get_parent_expr(cx, expr),\n+            Some(Expr {\n                 kind: ExprKind::Index(..),\n                 ..\n-            }) => parent_expr,\n-            _ => None,\n+            })\n+        )\n+    }\n+\n+    fn is_for_loop_arg(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+        let mut cur_expr = expr;\n+        while let Some(parent_expr) = get_parent_expr(cx, cur_expr) {\n+            match higher::for_loop(parent_expr) {\n+                Some((_, args, _)) if args.hir_id == expr.hir_id => return true,\n+                _ => cur_expr = parent_expr,\n+            }\n         }\n+\n+        false\n     }\n \n     fn is_empty_range(limits: RangeLimits, ordering: Ordering) -> bool {\n@@ -267,34 +279,18 @@ fn check_reversed_empty_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         if let Some(ordering) = Constant::partial_cmp(cx.tcx, ty, &start_idx, &end_idx);\n         if is_empty_range(limits, ordering);\n         then {\n-            if let Some(parent_expr) = inside_indexing_expr(cx, expr) {\n-                let (reason, outcome) = if ordering == Ordering::Equal {\n-                    (\"empty\", \"always yield an empty slice\")\n-                } else {\n-                    (\"reversed\", \"panic at run-time\")\n-                };\n-\n-                span_lint_and_then(\n-                    cx,\n-                    REVERSED_EMPTY_RANGES,\n-                    expr.span,\n-                    &format!(\"this range is {} and using it to index a slice will {}\", reason, outcome),\n-                    |diag| {\n-                        if_chain! {\n-                            if ordering == Ordering::Equal;\n-                            if let ty::Slice(slice_ty) = cx.tables.expr_ty(parent_expr).kind;\n-                            then {\n-                                diag.span_suggestion(\n-                                    parent_expr.span,\n-                                    \"if you want an empty slice, use\",\n-                                    format!(\"[] as &[{}]\", slice_ty),\n-                                    Applicability::MaybeIncorrect\n-                                );\n-                            }\n-                        }\n-                    }\n-                );\n-            } else {\n+            if inside_indexing_expr(cx, expr) {\n+                // Avoid linting `N..N` as it has proven to be useful, see #5689 and #5628 ...\n+                if ordering != Ordering::Equal {\n+                    span_lint(\n+                        cx,\n+                        REVERSED_EMPTY_RANGES,\n+                        expr.span,\n+                        \"this range is reversed and using it to index a slice will panic at run-time\",\n+                    );\n+                }\n+            // ... except in for loop arguments for backwards compatibility with `reverse_range_loop`\n+            } else if ordering != Ordering::Equal || is_for_loop_arg(cx, expr) {\n                 span_lint_and_then(\n                     cx,\n                     REVERSED_EMPTY_RANGES,"}, {"sha": "79e482eec3037d416ded2082f509c28c4097cf8c", "filename": "tests/ui/reversed_empty_ranges_fixable.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.fixed?ref=ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "patch": "@@ -4,8 +4,6 @@\n const ANSWER: i32 = 42;\n \n fn main() {\n-    let arr = [1, 2, 3, 4, 5];\n-\n     // These should be linted:\n \n     (21..=42).rev().for_each(|x| println!(\"{}\", x));\n@@ -14,16 +12,18 @@ fn main() {\n     for _ in (-42..=-21).rev() {}\n     for _ in (21u32..42u32).rev() {}\n \n-    let _ = &[] as &[i32];\n-\n     // These should be ignored as they are not empty ranges:\n \n     (21..=42).for_each(|x| println!(\"{}\", x));\n     (21..42).for_each(|x| println!(\"{}\", x));\n \n+    let arr = [1, 2, 3, 4, 5];\n     let _ = &arr[1..=3];\n     let _ = &arr[1..3];\n \n     for _ in 21..=42 {}\n     for _ in 21..42 {}\n+\n+    // This range is empty but should be ignored, see issue #5689\n+    let _ = &arr[0..0];\n }"}, {"sha": "b2e8bf33771acac68610d046227101c281dccaa5", "filename": "tests/ui/reversed_empty_ranges_fixable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.rs?ref=ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "patch": "@@ -4,8 +4,6 @@\n const ANSWER: i32 = 42;\n \n fn main() {\n-    let arr = [1, 2, 3, 4, 5];\n-\n     // These should be linted:\n \n     (42..=21).for_each(|x| println!(\"{}\", x));\n@@ -14,16 +12,18 @@ fn main() {\n     for _ in -21..=-42 {}\n     for _ in 42u32..21u32 {}\n \n-    let _ = &arr[3..3];\n-\n     // These should be ignored as they are not empty ranges:\n \n     (21..=42).for_each(|x| println!(\"{}\", x));\n     (21..42).for_each(|x| println!(\"{}\", x));\n \n+    let arr = [1, 2, 3, 4, 5];\n     let _ = &arr[1..=3];\n     let _ = &arr[1..3];\n \n     for _ in 21..=42 {}\n     for _ in 21..42 {}\n+\n+    // This range is empty but should be ignored, see issue #5689\n+    let _ = &arr[0..0];\n }"}, {"sha": "de83c4f3d633c141e502bf1cadbcab2eae61f6cc", "filename": "tests/ui/reversed_empty_ranges_fixable.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.stderr?ref=ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "patch": "@@ -1,5 +1,5 @@\n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_fixable.rs:11:5\n+  --> $DIR/reversed_empty_ranges_fixable.rs:9:5\n    |\n LL |     (42..=21).for_each(|x| println!(\"{}\", x));\n    |     ^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     (21..=42).rev().for_each(|x| println!(\"{}\", x));\n    |     ^^^^^^^^^^^^^^^\n \n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_fixable.rs:12:13\n+  --> $DIR/reversed_empty_ranges_fixable.rs:10:13\n    |\n LL |     let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     let _ = (21..ANSWER).rev().filter(|x| x % 2 == 0).take(10).collect::<Ve\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_fixable.rs:14:14\n+  --> $DIR/reversed_empty_ranges_fixable.rs:12:14\n    |\n LL |     for _ in -21..=-42 {}\n    |              ^^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     for _ in (-42..=-21).rev() {}\n    |              ^^^^^^^^^^^^^^^^^\n \n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_fixable.rs:15:14\n+  --> $DIR/reversed_empty_ranges_fixable.rs:13:14\n    |\n LL |     for _ in 42u32..21u32 {}\n    |              ^^^^^^^^^^^^\n@@ -43,11 +43,5 @@ help: consider using the following if you are attempting to iterate over this ra\n LL |     for _ in (21u32..42u32).rev() {}\n    |              ^^^^^^^^^^^^^^^^^^^^\n \n-error: this range is empty and using it to index a slice will always yield an empty slice\n-  --> $DIR/reversed_empty_ranges_fixable.rs:17:18\n-   |\n-LL |     let _ = &arr[3..3];\n-   |              ----^^^^- help: if you want an empty slice, use: `[] as &[i32]`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "264d3d1e95af4d5062d396523c76bd1611b60c89", "filename": "tests/ui/reversed_empty_ranges_unfixable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_unfixable.rs?ref=ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "patch": "@@ -4,11 +4,12 @@ const ANSWER: i32 = 42;\n const SOME_NUM: usize = 3;\n \n fn main() {\n-    let _ = (42 + 10..42 + 10).map(|x| x / 2).find(|&x| x == 21);\n-\n     let arr = [1, 2, 3, 4, 5];\n     let _ = &arr[3usize..=1usize];\n     let _ = &arr[SOME_NUM..1];\n \n     for _ in ANSWER..ANSWER {}\n+\n+    // Should not be linted, see issue #5689\n+    let _ = (42 + 10..42 + 10).map(|x| x / 2).find(|&x| x == 21);\n }"}, {"sha": "f23d4eb0f9ca4e12e68f31bb26f424be8c9b8859", "filename": "tests/ui/reversed_empty_ranges_unfixable.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr?ref=ebfc1da07d2cd1cba87a3df79c5ffbfc0d25618c", "patch": "@@ -1,28 +1,22 @@\n-error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_unfixable.rs:7:13\n-   |\n-LL |     let _ = (42 + 10..42 + 10).map(|x| x / 2).find(|&x| x == 21);\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n-\n error: this range is reversed and using it to index a slice will panic at run-time\n-  --> $DIR/reversed_empty_ranges_unfixable.rs:10:18\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:8:18\n    |\n LL |     let _ = &arr[3usize..=1usize];\n    |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n \n error: this range is reversed and using it to index a slice will panic at run-time\n-  --> $DIR/reversed_empty_ranges_unfixable.rs:11:18\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:9:18\n    |\n LL |     let _ = &arr[SOME_NUM..1];\n    |                  ^^^^^^^^^^^\n \n error: this range is empty so it will yield no values\n-  --> $DIR/reversed_empty_ranges_unfixable.rs:13:14\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:11:14\n    |\n LL |     for _ in ANSWER..ANSWER {}\n    |              ^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}]}