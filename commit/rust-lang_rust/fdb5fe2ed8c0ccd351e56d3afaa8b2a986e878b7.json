{"sha": "fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7", "node_id": "C_kwDOAAsO6NoAKGZkYjVmZTJlZDhjMGNjZDM1MWU1NmQzYWZhYThiMmE5ODZlODc4Yjc", "commit": {"author": {"name": "CastilloDel", "email": "delcastillodelarosadaniel@gmail.com", "date": "2022-11-12T18:07:33Z"}, "committer": {"name": "CastilloDel", "email": "delcastillodelarosadaniel@gmail.com", "date": "2022-11-15T12:57:24Z"}, "message": "Change LoweringContext.children to Vec", "tree": {"sha": "9e7e641a2e3d111b16781fb6ecb887ff40247999", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7e641a2e3d111b16781fb6ecb887ff40247999"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7", "html_url": "https://github.com/rust-lang/rust/commit/fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7/comments", "author": {"login": "CastilloDel", "id": 52696601, "node_id": "MDQ6VXNlcjUyNjk2NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/52696601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CastilloDel", "html_url": "https://github.com/CastilloDel", "followers_url": "https://api.github.com/users/CastilloDel/followers", "following_url": "https://api.github.com/users/CastilloDel/following{/other_user}", "gists_url": "https://api.github.com/users/CastilloDel/gists{/gist_id}", "starred_url": "https://api.github.com/users/CastilloDel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CastilloDel/subscriptions", "organizations_url": "https://api.github.com/users/CastilloDel/orgs", "repos_url": "https://api.github.com/users/CastilloDel/repos", "events_url": "https://api.github.com/users/CastilloDel/events{/privacy}", "received_events_url": "https://api.github.com/users/CastilloDel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CastilloDel", "id": 52696601, "node_id": "MDQ6VXNlcjUyNjk2NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/52696601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CastilloDel", "html_url": "https://github.com/CastilloDel", "followers_url": "https://api.github.com/users/CastilloDel/followers", "following_url": "https://api.github.com/users/CastilloDel/following{/other_user}", "gists_url": "https://api.github.com/users/CastilloDel/gists{/gist_id}", "starred_url": "https://api.github.com/users/CastilloDel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CastilloDel/subscriptions", "organizations_url": "https://api.github.com/users/CastilloDel/orgs", "repos_url": "https://api.github.com/users/CastilloDel/repos", "events_url": "https://api.github.com/users/CastilloDel/events{/privacy}", "received_events_url": "https://api.github.com/users/CastilloDel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1eab51f476554406c1b500f3fc619455209bd02", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1eab51f476554406c1b500f3fc619455209bd02", "html_url": "https://github.com/rust-lang/rust/commit/d1eab51f476554406c1b500f3fc619455209bd02"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "e43bec300bda95a470e985540171bb82100e89bc", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7", "patch": "@@ -6,7 +6,6 @@ use super::{FnDeclKind, LoweringContext, ParamMode};\n use rustc_ast::ptr::P;\n use rustc_ast::visit::AssocCtxt;\n use rustc_ast::*;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -67,7 +66,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             // HirId handling.\n             bodies: Vec::new(),\n             attrs: SortedMap::default(),\n-            children: FxHashMap::default(),\n+            children: Vec::default(),\n             current_hir_id_owner: hir::CRATE_OWNER_ID,\n             item_local_id_counter: hir::ItemLocalId::new(0),\n             node_id_to_local_id: Default::default(),\n@@ -95,7 +94,13 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         for (def_id, info) in lctx.children {\n             self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n             debug_assert!(matches!(self.owners[def_id], hir::MaybeOwner::Phantom));\n-            self.owners[def_id] = info;\n+            match (self.owners[def_id], info) {\n+                (hir::MaybeOwner::Phantom, _)\n+                | (hir::MaybeOwner::NonOwner(_), hir::MaybeOwner::Owner(_)) => {\n+                    self.owners[def_id] = info;\n+                }\n+                _ => unreachable!(),\n+            }\n         }\n     }\n \n@@ -534,12 +539,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 for new_node_id in [id1, id2] {\n                     let new_id = self.local_def_id(new_node_id);\n                     let Some(res) = resolutions.next() else {\n+                        debug_assert!(self.children.iter().find(|(id, _)| id == &new_id).is_none());\n                         // Associate an HirId to both ids even if there is no resolution.\n-                        let _old = self.children.insert(\n+                        self.children.push((\n                             new_id,\n-                            hir::MaybeOwner::NonOwner(hir::HirId::make_owner(new_id)),\n+                            hir::MaybeOwner::NonOwner(hir::HirId::make_owner(new_id))),\n                         );\n-                        debug_assert!(_old.is_none());\n                         continue;\n                     };\n                     let ident = *ident;"}, {"sha": "cac9096780b2bc3fbbb034cd6ed9aaf1ed36fb56", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fdb5fe2ed8c0ccd351e56d3afaa8b2a986e878b7", "patch": "@@ -106,7 +106,7 @@ struct LoweringContext<'a, 'hir> {\n     /// Attributes inside the owner being lowered.\n     attrs: SortedMap<hir::ItemLocalId, &'hir [Attribute]>,\n     /// Collect items that were created by lowering the current owner.\n-    children: FxHashMap<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n+    children: Vec<(LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>)>,\n \n     generator_kind: Option<hir::GeneratorKind>,\n \n@@ -610,8 +610,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.impl_trait_defs = current_impl_trait_defs;\n         self.impl_trait_bounds = current_impl_trait_bounds;\n \n-        let _old = self.children.insert(def_id, hir::MaybeOwner::Owner(info));\n-        debug_assert!(_old.is_none())\n+        debug_assert!(self.children.iter().find(|(id, _)| id == &def_id).is_none());\n+        self.children.push((def_id, hir::MaybeOwner::Owner(info)));\n     }\n \n     /// Installs the remapping `remap` in scope while `f` is being executed.\n@@ -718,8 +718,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 assert_ne!(local_id, hir::ItemLocalId::new(0));\n                 if let Some(def_id) = self.opt_local_def_id(ast_node_id) {\n-                    // Do not override a `MaybeOwner::Owner` that may already here.\n-                    self.children.entry(def_id).or_insert(hir::MaybeOwner::NonOwner(hir_id));\n+                    self.children.push((def_id, hir::MaybeOwner::NonOwner(hir_id)));\n                     self.local_id_to_def_id.insert(local_id, def_id);\n                 }\n "}]}