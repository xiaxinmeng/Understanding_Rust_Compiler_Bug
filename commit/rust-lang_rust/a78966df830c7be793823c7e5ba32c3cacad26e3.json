{"sha": "a78966df830c7be793823c7e5ba32c3cacad26e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ODk2NmRmODMwYzdiZTc5MzgyM2M3ZTViYTMyYzNjYWNhZDI2ZTM=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-11-16T03:39:51Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-11-16T23:05:45Z"}, "message": "clarify `span_label` documentation", "tree": {"sha": "2174dcf6017ca135e431b995836967436b23090f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2174dcf6017ca135e431b995836967436b23090f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a78966df830c7be793823c7e5ba32c3cacad26e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl+zBcsWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdFuIB/9l54zDaolt2C69c76Wr9gyP8Oo\nweFFc4AQFDQxXmF4dT8wNlQECZtQgn35qXZQY9IpgGIMZ6OZhoYImHxfmXO4OYcb\nDjT2qyzhXW+iFAa7JZYS0OIpeqqayYld8rxLqpdA4aR+iYrgQSFJXTJHlf1zju8X\ncgPW+giIQxHj2ecNKdnrX9eryRMzTletGouSjdQgLOZgmePp1jG+5aAHjudlDQgz\nAOYdz7SJr+iOj7KnnlngdMxjNh6fiWaEKSLw5ofljX+enqPYb6baGcWFk5e7m/IK\n3lJFhIUFL+Xtzm9+qYGgVMeTYeMtGcA7t2UEmWkHjqXkCxhb0ZR3dKQI9dQj\n=XPpZ\n-----END PGP SIGNATURE-----", "payload": "tree 2174dcf6017ca135e431b995836967436b23090f\nparent 603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0\nauthor Andy Russell <arussell123@gmail.com> 1605497991 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1605567945 -0500\n\nclarify `span_label` documentation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a78966df830c7be793823c7e5ba32c3cacad26e3", "html_url": "https://github.com/rust-lang/rust/commit/a78966df830c7be793823c7e5ba32c3cacad26e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a78966df830c7be793823c7e5ba32c3cacad26e3/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0", "html_url": "https://github.com/rust-lang/rust/commit/603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "c9259a1502c8d8c518eb586ba91e1702669d1ddb", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a78966df830c7be793823c7e5ba32c3cacad26e3/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78966df830c7be793823c7e5ba32c3cacad26e3/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=a78966df830c7be793823c7e5ba32c3cacad26e3", "patch": "@@ -184,16 +184,18 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.cancel();\n     }\n \n-    /// Adds a span/label to be included in the resulting snippet.\n+    /// Appends a labeled span to the diagnostic.\n     ///\n-    /// This is pushed onto the [`MultiSpan`] that was created when the diagnostic\n-    /// was first built. That means it will be shown together with the original\n-    /// span/label, *not* a span added by one of the `span_{note,warn,help,suggestions}` methods.\n+    /// Labels are used to convey additional context for the diagnostic's primary span. They will\n+    /// be shown together with the original diagnostic's span, *not* with spans added by\n+    /// `span_note`, `span_help`, etc. Therefore, if the primary span is not displayable (because\n+    /// the span is `DUMMY_SP` or the source code isn't found), labels will not be displayed\n+    /// either.\n     ///\n-    /// This span is *not* considered a [\"primary span\"][`MultiSpan`]; only\n-    /// the `Span` supplied when creating the diagnostic is primary.\n-    ///\n-    /// [`MultiSpan`]: ../rustc_span/struct.MultiSpan.html\n+    /// Implementation-wise, the label span is pushed onto the [`MultiSpan`] that was created when\n+    /// the diagnostic was constructed. However, the label span is *not* considered a\n+    /// [\"primary span\"][`MultiSpan`]; only the `Span` supplied when creating the diagnostic is\n+    /// primary.\n     pub fn span_label(&mut self, span: Span, label: impl Into<String>) -> &mut Self {\n         self.0.diagnostic.span_label(span, label);\n         self"}]}