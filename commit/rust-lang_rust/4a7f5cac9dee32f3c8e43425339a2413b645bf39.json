{"sha": "4a7f5cac9dee32f3c8e43425339a2413b645bf39", "node_id": "C_kwDOAAsO6NoAKDRhN2Y1Y2FjOWRlZTMyZjNjOGU0MzQyNTMzOWEyNDEzYjY0NWJmMzk", "commit": {"author": {"name": "koka", "email": "koka.code@gmail.com", "date": "2022-10-28T16:14:44Z"}, "committer": {"name": "koka", "email": "koka.code@gmail.com", "date": "2022-10-28T16:14:44Z"}, "message": "fix: async trait method for `unnecessary_async`", "tree": {"sha": "7e33960a7e2e172d9b75a7e911a613aa958abbac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e33960a7e2e172d9b75a7e911a613aa958abbac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a7f5cac9dee32f3c8e43425339a2413b645bf39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTeiB5r8ReBHCJcHiKlkXpAaXd0zQUCY1wAPAAKCRClkXpAaXd0\nzcCfAQC5mpRJV1Ug4U5/yn73blpljfWkc/+vjMOGWTTPynzCHAD/Z7nBpKUxeXnc\nvBwIUlSANY8nczlwohv496+syX4rMg0=\n=2S/w\n-----END PGP SIGNATURE-----", "payload": "tree 7e33960a7e2e172d9b75a7e911a613aa958abbac\nparent d022e0ec536948ced38ac67dec0d64c312264f7c\nauthor koka <koka.code@gmail.com> 1666973684 +0900\ncommitter koka <koka.code@gmail.com> 1666973684 +0900\n\nfix: async trait method for `unnecessary_async`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7f5cac9dee32f3c8e43425339a2413b645bf39", "html_url": "https://github.com/rust-lang/rust/commit/4a7f5cac9dee32f3c8e43425339a2413b645bf39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a7f5cac9dee32f3c8e43425339a2413b645bf39/comments", "author": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "committer": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d022e0ec536948ced38ac67dec0d64c312264f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d022e0ec536948ced38ac67dec0d64c312264f7c", "html_url": "https://github.com/rust-lang/rust/commit/d022e0ec536948ced38ac67dec0d64c312264f7c"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "44f8dbdef35c137d69bdfc531e1713c7dc8f054a", "filename": "crates/ide-assists/src/handlers/unnecessary_async.rs", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4a7f5cac9dee32f3c8e43425339a2413b645bf39/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7f5cac9dee32f3c8e43425339a2413b645bf39/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs?ref=4a7f5cac9dee32f3c8e43425339a2413b645bf39", "patch": "@@ -1,12 +1,14 @@\n+use hir::AssocItem;\n use ide_db::{\n     assists::{AssistId, AssistKind},\n     base_db::FileId,\n     defs::Definition,\n     search::FileReference,\n     syntax_helpers::node_ext::full_path_of_name_ref,\n+    traits::resolve_target_trait,\n };\n use syntax::{\n-    ast::{self, NameLike, NameRef},\n+    ast::{self, HasName, NameLike, NameRef},\n     AstNode, SyntaxKind, TextRange,\n };\n \n@@ -44,7 +46,16 @@ pub(crate) fn unnecessary_async(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n     if function.body()?.syntax().descendants().find_map(ast::AwaitExpr::cast).is_some() {\n         return None;\n     }\n-\n+    // Do nothing if the method is an async member of trait.\n+    if let Some(fname) = function.name() {\n+        if let Some(trait_item) = find_corresponding_trait_member(ctx, fname.to_string()) {\n+            if let AssocItem::Function(method) = trait_item {\n+                if method.is_async(ctx.db()) {\n+                    return None;\n+                }\n+            }\n+        }\n+    }\n     // Remove the `async` keyword plus whitespace after it, if any.\n     let async_range = {\n         let async_token = function.async_token()?;\n@@ -88,6 +99,23 @@ pub(crate) fn unnecessary_async(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n     )\n }\n \n+fn find_corresponding_trait_member(\n+    ctx: &AssistContext<'_>,\n+    function_name: String,\n+) -> Option<AssocItem> {\n+    let impl_ = ctx.find_node_at_offset::<ast::Impl>()?;\n+    let trait_ = resolve_target_trait(&ctx.sema, &impl_)?;\n+\n+    trait_\n+        .items(ctx.db())\n+        .iter()\n+        .find(|item| match item.name(ctx.db()) {\n+            Some(method_name) => method_name.to_string() == function_name,\n+            _ => false,\n+        })\n+        .cloned()\n+}\n+\n fn find_all_references(\n     ctx: &AssistContext<'_>,\n     def: &Definition,\n@@ -254,4 +282,39 @@ pub async fn f(s: &S) { s.f2() }\"#,\n     fn does_not_apply_when_not_on_prototype() {\n         check_assist_not_applicable(unnecessary_async, \"pub async fn f() { $0f2() }\")\n     }\n+\n+    #[test]\n+    fn applies_on_unnecessary_async_on_trait_method() {\n+        check_assist(\n+            unnecessary_async,\n+            r#\"\n+trait Trait {\n+    fn foo();\n+}\n+impl Trait for () {\n+    $0async fn foo() {}\n+}\"#,\n+            r#\"\n+trait Trait {\n+    fn foo();\n+}\n+impl Trait for () {\n+    fn foo() {}\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_apply_on_async_trait_method() {\n+        check_assist_not_applicable(\n+            unnecessary_async,\n+            r#\"\n+trait Trait {\n+    async fn foo();\n+}\n+impl Trait for () {\n+    $0async fn foo() {}\n+}\"#,\n+        );\n+    }\n }"}]}