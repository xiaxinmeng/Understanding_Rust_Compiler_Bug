{"sha": "0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OTlkNGFjMjliMzZlZDhjNWJhM2MxZmY0ZTRiYzkyOGU2NzkyYTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-27T00:00:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-27T00:00:19Z"}, "message": "Update various README files in the tree.", "tree": {"sha": "1d59ac2bd6502b90e968ce950c5b285e308d5c9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d59ac2bd6502b90e968ce950c5b285e308d5c9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8", "html_url": "https://github.com/rust-lang/rust/commit/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b857da15fc7bbbc4866d95bd8cc16397f9c3001", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b857da15fc7bbbc4866d95bd8cc16397f9c3001", "html_url": "https://github.com/rust-lang/rust/commit/5b857da15fc7bbbc4866d95bd8cc16397f9c3001"}], "stats": {"total": 142, "additions": 130, "deletions": 12}, "files": [{"sha": "3618ee18fa5597573feb3dc65880d99aca954a00", "filename": "src/README", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8/src%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8/src%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME?ref=0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8", "patch": "@@ -1,4 +1,4 @@\n-This is preliminary version of the Rust compiler.\n+This is preliminary version of the Rust compiler(s).\n \n Source layout:\n \n@@ -11,8 +11,8 @@ boot/util          - Ubiquitous helpers\n boot/llvm          - LLVM-based alternative back end\n boot/driver        - Compiler driver\n \n-comp/              The self-hosted compiler (doesn't exist yet)\n-comp/*             - Same structure as in boot/\n+comp/              The self-hosted compiler (\"rustc\": incomplete)\n+comp/*             - Similar structure as in boot/\n \n rt/                The runtime system\n rt/rust_*.cpp      - The majority of the runtime services"}, {"sha": "e17bfd791accbf4e588c3526d78effe659248d0b", "filename": "src/boot/README", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8/src%2Fboot%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8/src%2Fboot%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2FREADME?ref=0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8", "patch": "@@ -1,15 +1,15 @@\n An informal guide to reading and working on the rustboot compiler.\n ==================================================================\n \n-First off, my sincerest apologies for the lightly-commented nature of the\n-compiler, as well as the general immaturity of the codebase; rustboot is\n-intended to be discarded in the near future as we transition off it, to a\n-rust-based, LLVM-backed compiler. It has taken longer than expected for \"the\n-near future\" to arrive, and here we are published and attracting contributors\n-without a good place for them to start. It will be a priority for the next\n-little while to make new contributors feel welcome and oriented within the\n-project; best I can do at this point. We were in a tremendous rush even to get\n-everything organized to this minimal point.\n+First off, know that our current state of development is \"bootstrapping\";\n+this means we've got two compilers on the go and one of them is being used\n+to develop the other. Rustboot is written in ocaml and rustc in rust. The\n+one you *probably* ought to be working on at present is rustc. Rustboot is\n+more for historical comparison and bug-fixing whenever necessary to un-block\n+development of rustc.\n+\n+There's a document similar to this next door, then, in comp/README. The\n+comp directory is where we do work on rustc.\n \n If you wish to expand on this document, or have one of the\n slightly-more-familiar authors add anything else to it, please get in touch or"}, {"sha": "fad13ba6f358bf13a7d3eafcd677d85854f65a66", "filename": "src/comp/README", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8/src%2Fcomp%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8/src%2Fcomp%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2FREADME?ref=0499d4ac29b36ed8c5ba3c1ff4e4bc928e6792a8", "patch": "@@ -0,0 +1,118 @@\n+An informal guide to reading and working on the rustc compiler.\n+==================================================================\n+\n+First off, know that our current state of development is \"bootstrapping\";\n+this means we've got two compilers on the go and one of them is being used\n+to develop the other. Rustboot is written in ocaml and rustc in rust. The\n+one you *probably* ought to be working on at present is rustc. Rustboot is\n+more for historical comparison and bug-fixing whenever necessary to un-block\n+development of rustc.\n+\n+There's a document similar to this next door, then, in boot/README. The boot\n+directory is where we do work on rustboot.\n+\n+If you wish to expand on this document, or have one of the\n+slightly-more-familiar authors add anything else to it, please get in touch or\n+file a bug. Your concerns are probably the same as someone else's.\n+\n+\n+High-level concepts\n+===================\n+\n+Rustc consists of the following subdirectories:\n+\n+front/    - front-end: lexer, parser, AST.\n+middle/   - middle-end: resolving, typechecking, translating\n+driver/   - command-line processing, main() entrypoint\n+util/     - ubiquitous types and helper functions\n+lib/      - bindings to LLVM\n+\n+The entry-point for the compiler is main() in driver/rustc.rs, and this file\n+sequences the various parts together.\n+\n+\n+The 3 central data structures:\n+------------------------------\n+\n+#1: front/ast.rs defines the AST. The AST is treated as immutable after\n+    parsing despite containing some mutable types (hashtables and such).\n+    There are three interesting details to know about this structure:\n+\n+      - Many -- though not all -- nodes within this data structure are wrapped\n+        in the type spanned[T], meaning that the front-end has marked the\n+        input coordinates of that node. The member .node is the data itself,\n+        the member .span is the input location (file, line, column; both low\n+        and high).\n+\n+      - Many other nodes within this data structure carry a def_id. These\n+        nodes represent the 'target' of some name reference elsewhere in the\n+        tree. When the AST is resolved, by middle/resolve.rs, all names wind\n+        up acquiring a def that they point to. So anything that can be\n+        pointed-to by a name winds up with a def_id.\n+\n+      - Many nodes carry an additional type 'ann', for annotations. These\n+        nodes are those that later stages of the middle-end add information\n+        to, augmenting the basic structure of the tree. Currently that\n+        includes the calculated type of any node that has a type; it will also\n+        likely include typestates, layers and effects, when such things are\n+        calculated.\n+\n+#2: middle/ty.rs defines the datatype ty.t, with its central member ty.struct.\n+    This is the type that represents types after they have been resolved and\n+    normalized by the middle-end. The typeck phase converts every ast type to\n+    a ty.t, and the latter is used to drive later phases of compilation.  Most\n+    variants in the ast.ty tag have a corresponding variant in the ty.struct\n+    tag.\n+\n+#3: lib/llvm.rs defines the exported types ValueRef, TypeRef, BasicBlockRef,\n+    and several others. Each of these is an opaque pointer to an LLVM type,\n+    manipulated through the lib.llvm interface.\n+\n+\n+Control and information flow within the compiler:\n+-------------------------------------------------\n+\n+- main() in driver/rustc.rs assumes control on startup. Options are parsed,\n+  platform is detected, etc.\n+\n+- front/parser.rs is driven over the input files.\n+\n+- Multiple middle-end passes (middle/resolve.rs, middle/typeck.rs) are run\n+  over the resulting AST. Each pass produces a new AST with some number of\n+  annotations or modifications.\n+\n+- Finally middle/trans.rs is applied to the AST, which performs a\n+  type-directed translation to LLVM-ese. When it's finished synthesizing LLVM\n+  values, rustc asks LLVM to write them out as a bitcode file, on which you\n+  can run the normal LLVM pipeline (opt, llc, as) to get an executable.\n+\n+\n+Comparison with rustboot\n+========================\n+\n+Rustc is written in a more \"functional\" style than rustboot; each rustc pass\n+tends to depend only on the AST it's given as input, which it does not mutate.\n+Calculations flow from one pase to another by repeatedly rebuilding the AST\n+with additional annotations.\n+\n+Rustboot normalizes to a statement-centric AST. Rustc uses an\n+expression-centric AST.\n+\n+Rustboot generates 3-address IL into imperative buffers of coded IL quads.\n+Rustc generates LLVM, an SSA-based expression IL.\n+\n+Rustc, being attached to LLVM, generates much better code. Factor of 5\n+smaller, usually. Sometimes much more.\n+\n+Rustc preserves more of the parsed input structure. Rustboot \"desugars\" most\n+of the input, rendering round-trip pretty-printing impossible. Error reporting\n+is also better in rustc, as type names (as denoted by the user) are preserved\n+throughout typechecking.\n+\n+Rustc is not concerned with the PIC-ness of the resulting code, nor anything\n+to do with encoding DWARF or x86 instructions. All this superfluous\n+machine-level logic that seeped up to the translation layer in rustboot is\n+pushed past LLVM into later stages of the toolchain in rustc.\n+\n+Numerous \"bad idea\" idiosyncracies of the rustboot AST have been eliminated in\n+rustc. In general the code is much more obvious, minimal and straightforward."}]}