{"sha": "12785dd89c24e1a011b8f386ca1883d786db6f95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNzg1ZGQ4OWMyNGUxYTAxMWI4ZjM4NmNhMTg4M2Q3ODZkYjZmOTU=", "commit": {"author": {"name": "Alex Aktsipetrov", "email": "alex.akts@gmail.com", "date": "2020-04-02T17:55:56Z"}, "committer": {"name": "Alex Aktsipetrov", "email": "alex.akts@gmail.com", "date": "2020-04-02T17:55:56Z"}, "message": "Expand and remove try_something macro.\n\nSince https://github.com/rust-lang/rust/commit/2f6226518bd5085896a0f27cfd3ea396367ecd50\nthere has been only one invocation.", "tree": {"sha": "e6e7d1d2e1ce47a438d4a90e410f7a5dc5bc86c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6e7d1d2e1ce47a438d4a90e410f7a5dc5bc86c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12785dd89c24e1a011b8f386ca1883d786db6f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12785dd89c24e1a011b8f386ca1883d786db6f95", "html_url": "https://github.com/rust-lang/rust/commit/12785dd89c24e1a011b8f386ca1883d786db6f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12785dd89c24e1a011b8f386ca1883d786db6f95/comments", "author": {"login": "gizmondo", "id": 3333919, "node_id": "MDQ6VXNlcjMzMzM5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3333919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gizmondo", "html_url": "https://github.com/gizmondo", "followers_url": "https://api.github.com/users/gizmondo/followers", "following_url": "https://api.github.com/users/gizmondo/following{/other_user}", "gists_url": "https://api.github.com/users/gizmondo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gizmondo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gizmondo/subscriptions", "organizations_url": "https://api.github.com/users/gizmondo/orgs", "repos_url": "https://api.github.com/users/gizmondo/repos", "events_url": "https://api.github.com/users/gizmondo/events{/privacy}", "received_events_url": "https://api.github.com/users/gizmondo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gizmondo", "id": 3333919, "node_id": "MDQ6VXNlcjMzMzM5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3333919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gizmondo", "html_url": "https://github.com/gizmondo", "followers_url": "https://api.github.com/users/gizmondo/followers", "following_url": "https://api.github.com/users/gizmondo/following{/other_user}", "gists_url": "https://api.github.com/users/gizmondo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gizmondo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gizmondo/subscriptions", "organizations_url": "https://api.github.com/users/gizmondo/orgs", "repos_url": "https://api.github.com/users/gizmondo/repos", "events_url": "https://api.github.com/users/gizmondo/events{/privacy}", "received_events_url": "https://api.github.com/users/gizmondo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2113659479a82ea69633b23ef710b58ab127755e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2113659479a82ea69633b23ef710b58ab127755e", "html_url": "https://github.com/rust-lang/rust/commit/2113659479a82ea69633b23ef710b58ab127755e"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "c8eb271c807d62f032d92c9f335e00fa6b19cab5", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12785dd89c24e1a011b8f386ca1883d786db6f95/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12785dd89c24e1a011b8f386ca1883d786db6f95/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=12785dd89c24e1a011b8f386ca1883d786db6f95", "patch": "@@ -8,18 +8,6 @@ use rustc_errors::Handler;\n #[cfg(test)]\n mod tests;\n \n-macro_rules! try_something {\n-    ($e:expr, $diag:expr, $out:expr) => {{\n-        match $e {\n-            Ok(c) => c,\n-            Err(e) => {\n-                $diag.struct_err(&e.to_string()).emit();\n-                return $out;\n-            }\n-        }\n-    }};\n-}\n-\n #[derive(Debug, Clone, Eq)]\n pub struct CssPath {\n     pub name: String,\n@@ -265,7 +253,13 @@ pub fn test_theme_against<P: AsRef<Path>>(\n     against: &CssPath,\n     diag: &Handler,\n ) -> (bool, Vec<String>) {\n-    let data = try_something!(fs::read(f), diag, (false, vec![]));\n+    let data = match fs::read(f) {\n+        Ok(c) => c,\n+        Err(e) => {\n+            diag.struct_err(&e.to_string()).emit();\n+            return (false, vec![]);\n+        }\n+    };\n \n     let paths = load_css_paths(&data);\n     let mut ret = vec![];"}]}