{"sha": "31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxY2RkOGNkZDJhMjBkYmRlYWUzZDNmNzlkNWY5MDgwZDQzMWE4N2Q=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-09-16T21:53:40Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-09-16T21:53:40Z"}, "message": "Propagate coercion cause into `try_coerce`\n\nCurrently, `coerce_inner` discards its `ObligationCause`\nwhen calling `try_coerce`. This interfers with other\ndiagnostc improvements I'm working on, since we will lose\nthe original span by the time the actual coercion occurs.\n\nAdditionally, we now use the span of the trailing expression\n(rather than the span of the entire function) when performing\na coercion in `check_return_expr`. This currently has no visible\neffect on any of the unit tests, but will unblock future\ndiagnostic improvements.", "tree": {"sha": "9260a4e81a536bd0a81f0c0e156c3e3aa660b2af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9260a4e81a536bd0a81f0c0e156c3e3aa660b2af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmFDvdQACgkQtAh+UQ6Y\nsWQKIg/+L19MTZxVoBGGAmjiyfKr4U3+13eTFaLM4nWYUdByHFxk4GJyJjWYV+Ky\nM9jK0uyN/auh0JHc74aYp7ZLbPb5znoPp+RbQN49iQ7mPKGcXhfEvarrR93PKXHx\nmrxmtZ1Cdoo9R1IzKK7onoEa0AppoGNvKzNZIt1B9QN3dtrYeHp+LbQwMNf88dic\nmI8/JCwORZ+Wq9JnyklUxN4YqtA4q0YH7dR9WKDOmHH9e4UHXe2k1UqTZ5wYNXCh\nUKZKJBJo7C9VRNMfQ61TToZVqiSeNKq7qA5kSz7fnUvUuyXG4LKvs/RhHwSM7aK6\n7ZKXzYXsZVCMASglYfCtgDMekYcpB23r67/5iddhuZMz4pKEkyhAkIjUa1WUDXFB\nO1/kkv05EL+bDi/iHUnG7Me94Nk+Fin19XEsGpoIzOrfI2zLHQTl6D3LEg0Kehsp\n+tNM+CDUiihVRmgfV+2GrVEnrDyz1pPdtyq/lSj8o/5H8dG68fsA68TFmQveptDP\nyzyPVKnGnmp2fpBDLPAeUix61oT9iLJvdym6YPw7YmhazHFl+xfsSmK2i1Il/qBY\n3BRQb4P0EteIBggxmkimEC3uTKA8Rt3YW+hAeaQYzHMWqflYgNd5aDrTxUiCpZRr\nuruMOSnRX0+Rdd9J0dhzI0Zwex2kLmKZAln4HmTVKK3rtSzJC0E=\n=u+oU\n-----END PGP SIGNATURE-----", "payload": "tree 9260a4e81a536bd0a81f0c0e156c3e3aa660b2af\nparent 237bb5e0088782945d2c3146e4907e3a5e9c7c2c\nauthor Aaron Hill <aa1ronham@gmail.com> 1631829220 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1631829220 -0500\n\nPropagate coercion cause into `try_coerce`\n\nCurrently, `coerce_inner` discards its `ObligationCause`\nwhen calling `try_coerce`. This interfers with other\ndiagnostc improvements I'm working on, since we will lose\nthe original span by the time the actual coercion occurs.\n\nAdditionally, we now use the span of the trailing expression\n(rather than the span of the entire function) when performing\na coercion in `check_return_expr`. This currently has no visible\neffect on any of the unit tests, but will unblock future\ndiagnostic improvements.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "html_url": "https://github.com/rust-lang/rust/commit/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237bb5e0088782945d2c3146e4907e3a5e9c7c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/237bb5e0088782945d2c3146e4907e3a5e9c7c2c", "html_url": "https://github.com/rust-lang/rust/commit/237bb5e0088782945d2c3146e4907e3a5e9c7c2c"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "4ea7a8694c075c7d52ea7955270bb9617cc06c87", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -362,6 +362,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                                 ),\n                                 self.cast_ty,\n                                 AllowTwoPhase::No,\n+                                None,\n                             )\n                             .is_ok()\n                         {\n@@ -379,6 +380,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                                     ),\n                                     self.cast_ty,\n                                     AllowTwoPhase::No,\n+                                    None,\n                                 )\n                                 .is_ok()\n                         {\n@@ -394,6 +396,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                                 fcx.tcx.mk_ref(reg, TypeAndMut { ty: self.expr_ty, mutbl }),\n                                 self.cast_ty,\n                                 AllowTwoPhase::No,\n+                                None,\n                             )\n                             .is_ok()\n                     {\n@@ -409,6 +412,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             ),\n                             self.cast_ty,\n                             AllowTwoPhase::No,\n+                            None,\n                         )\n                         .is_ok()\n                     {\n@@ -666,6 +670,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             self.expr_ty,\n                             fcx.tcx.mk_fn_ptr(f),\n                             AllowTwoPhase::No,\n+                            None,\n                         );\n                         if let Err(TypeError::IntrinsicCast) = res {\n                             return Err(CastError::IllegalCast);\n@@ -829,7 +834,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n                 // Coerce to a raw pointer so that we generate AddressOf in MIR.\n                 let array_ptr_type = fcx.tcx.mk_ptr(m_expr);\n-                fcx.try_coerce(self.expr, self.expr_ty, array_ptr_type, AllowTwoPhase::No)\n+                fcx.try_coerce(self.expr, self.expr_ty, array_ptr_type, AllowTwoPhase::No, None)\n                     .unwrap_or_else(|_| {\n                         bug!(\n                         \"could not cast from reference to array to pointer to array ({:?} to {:?})\",\n@@ -861,7 +866,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn try_coercion_cast(&self, fcx: &FnCtxt<'a, 'tcx>) -> Result<(), ty::error::TypeError<'_>> {\n-        match fcx.try_coerce(self.expr, self.expr_ty, self.cast_ty, AllowTwoPhase::No) {\n+        match fcx.try_coerce(self.expr, self.expr_ty, self.cast_ty, AllowTwoPhase::No, None) {\n             Ok(_) => Ok(()),\n             Err(err) => Err(err),\n         }"}, {"sha": "54e4eb4768813525816aa21ea9957e433201bf98", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -214,7 +214,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n     } else {\n         fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n-        fcx.check_return_expr(&body.value);\n+        fcx.check_return_expr(&body.value, false);\n     }\n     fcx.in_tail_expr = false;\n "}, {"sha": "e47c7e64ab5524e2971134d17db3fd84545dfd3f", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -941,11 +941,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr_ty: Ty<'tcx>,\n         target: Ty<'tcx>,\n         allow_two_phase: AllowTwoPhase,\n+        cause: Option<ObligationCause<'tcx>>,\n     ) -> RelateResult<'tcx, Ty<'tcx>> {\n         let source = self.resolve_vars_with_obligations(expr_ty);\n         debug!(\"coercion::try({:?}: {:?} -> {:?})\", expr, source, target);\n \n-        let cause = self.cause(expr.span, ObligationCauseCode::ExprAssignable);\n+        let cause =\n+            cause.unwrap_or_else(|| self.cause(expr.span, ObligationCauseCode::ExprAssignable));\n         let coerce = Coerce::new(self, cause, allow_two_phase);\n         let ok = self.commit_if_ok(|_| coerce.coerce(source, target))?;\n \n@@ -1369,7 +1371,13 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 // Special-case the first expression we are coercing.\n                 // To be honest, I'm not entirely sure why we do this.\n                 // We don't allow two-phase borrows, see comment in try_find_coercion_lub for why\n-                fcx.try_coerce(expression, expression_ty, self.expected_ty, AllowTwoPhase::No)\n+                fcx.try_coerce(\n+                    expression,\n+                    expression_ty,\n+                    self.expected_ty,\n+                    AllowTwoPhase::No,\n+                    Some(cause.clone()),\n+                )\n             } else {\n                 match self.expressions {\n                     Expressions::Dynamic(ref exprs) => fcx.try_find_coercion_lub("}, {"sha": "722b110ed61084f5b0454bba56be11566a59d719", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -134,7 +134,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n         let expected = self.resolve_vars_with_obligations(expected);\n \n-        let e = match self.try_coerce(expr, checked_ty, expected, allow_two_phase) {\n+        let e = match self.try_coerce(expr, checked_ty, expected, allow_two_phase, None) {\n             Ok(ty) => return (ty, None),\n             Err(e) => e,\n         };"}, {"sha": "0c011b85b0685ae92b06c5d742c7380b8e7dd0b1", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -747,7 +747,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if self.ret_coercion_span.get().is_none() {\n                 self.ret_coercion_span.set(Some(e.span));\n             }\n-            self.check_return_expr(e);\n+            self.check_return_expr(e, true);\n         } else {\n             let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n             if self.ret_coercion_span.get().is_none() {\n@@ -776,16 +776,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.types.never\n     }\n \n-    pub(super) fn check_return_expr(&self, return_expr: &'tcx hir::Expr<'tcx>) {\n+    /// `explicit_return` is `true` if we're checkng an explicit `return expr`,\n+    /// and `false` if we're checking a trailing expression.\n+    pub(super) fn check_return_expr(\n+        &self,\n+        return_expr: &'tcx hir::Expr<'tcx>,\n+        explicit_return: bool,\n+    ) {\n         let ret_coercion = self.ret_coercion.as_ref().unwrap_or_else(|| {\n             span_bug!(return_expr.span, \"check_return_expr called outside fn body\")\n         });\n \n         let ret_ty = ret_coercion.borrow().expected_ty();\n         let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty);\n+        let mut span = return_expr.span;\n+        // Use the span of the trailing expression for our cause,\n+        // not the span of the entire function\n+        if !explicit_return {\n+            if let ExprKind::Block(body, _) = return_expr.kind {\n+                if let Some(last_expr) = body.expr {\n+                    span = last_expr.span;\n+                }\n+            }\n+        }\n         ret_coercion.borrow_mut().coerce(\n             self,\n-            &self.cause(return_expr.span, ObligationCauseCode::ReturnValue(return_expr.hir_id)),\n+            &self.cause(span, ObligationCauseCode::ReturnValue(return_expr.hir_id)),\n             return_expr,\n             return_expr_ty,\n         );"}, {"sha": "952159ffc3bfe6f762c142210555ae4379ad82b9", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -15,7 +15,7 @@ note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/iss\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/issue-55796.rs:18:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n@@ -40,7 +40,7 @@ note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/iss\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/issue-55796.rs:23:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))"}, {"sha": "25562f6347e672438189c2795b24241cb3e84c7c", "filename": "src/test/ui/issues/issue-75777.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75777.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -17,7 +17,7 @@ LL |     Box::new(move |_| fut)\n    = note: expected `(Pin<Box<dyn Future<Output = A> + Send>>,)`\n               found `(Pin<Box<(dyn Future<Output = A> + Send + 'a)>>,)`\n    = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/issue-75777.rs:13:5\n    |\n LL |     Box::new(move |_| fut)"}, {"sha": "dbc478e5b4c87e180a90ef84bb07b860e6d9c047", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -19,7 +19,7 @@ note: but, the lifetime must be valid for the lifetime `'_` as defined on the im\n    |\n LL | impl Foo<'_> {\n    |          ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/issue-55394.rs:9:9\n    |\n LL |         Foo { bar }"}, {"sha": "dbb63b71af8a2799f8eb2177382e34da341cc649", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -21,7 +21,7 @@ note: but, the lifetime must be valid for the lifetime `'a` as defined on the im\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/type-alias-free-regions.rs:17:9\n    |\n LL |         C { f: b }\n@@ -52,7 +52,7 @@ note: but, the lifetime must be valid for the lifetime `'a` as defined on the im\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/type-alias-free-regions.rs:27:9\n    |\n LL |         C { f: Box::new(b.0) }"}, {"sha": "ee1a4612572281fd11c2f57717a534350167c5a9", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -19,7 +19,7 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n    |             ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/object-lifetime-default-elision.rs:71:5\n    |\n LL |     ss\n@@ -48,7 +48,7 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n    |             ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/object-lifetime-default-elision.rs:71:5\n    |\n LL |     ss"}, {"sha": "852ca0f21b166190260c4fb9096f4ec475c28ee0", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -69,7 +69,7 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |         ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/region-object-lifetime-in-coercion.rs:23:5\n    |\n LL |     Box::new(v)"}, {"sha": "bf29c76a0f0a8bcee9ea263faeb1c70a23224ec0", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -19,7 +19,7 @@ note: but, the lifetime must be valid for the lifetime `'c` as defined on the fu\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n    |                          ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n    |\n LL |     box v as Box<dyn SomeTrait + 'a>"}, {"sha": "44bd88e01a267a0654a765fb4c4981a64dc78b28", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -21,7 +21,7 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                   ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/regions-creating-enums4.rs:7:5\n    |\n LL |     Ast::Add(x, y)"}, {"sha": "b5b54bc3c8b735ebc97ab00f1a686961df752ea1", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -9,7 +9,7 @@ note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on th\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/regions-ret-borrowed-1.rs:10:14\n    |\n LL |     with(|o| o)"}, {"sha": "debae47d16d0be13c52e83133dc592a4ad8d4edf", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -9,7 +9,7 @@ note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on th\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/regions-ret-borrowed.rs:13:14\n    |\n LL |     with(|o| o)"}, {"sha": "f16dfdd6e8c77e17cb05b3c16839ffb9971d91ed", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=31cdd8cdd2a20dbdeae3d3f79d5f9080d431a87d", "patch": "@@ -36,7 +36,7 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |            ^^\n-note: ...so that the expression is assignable\n+note: ...so that the types are compatible\n   --> $DIR/regions-trait-object-subtyping.rs:15:5\n    |\n LL |     x"}]}