{"sha": "19b81f61142fe69edb48d08e9bbfa96d389e8ffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YjgxZjYxMTQyZmU2OWVkYjQ4ZDA4ZTliYmZhOTZkMzg5ZThmZmQ=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-03-15T15:51:58Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-03-15T15:51:58Z"}, "message": "error via bug! instead of stderr+terminate", "tree": {"sha": "862de19824b46827d2fe7d1a9cb11ba8b320f371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/862de19824b46827d2fe7d1a9cb11ba8b320f371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19b81f61142fe69edb48d08e9bbfa96d389e8ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19b81f61142fe69edb48d08e9bbfa96d389e8ffd", "html_url": "https://github.com/rust-lang/rust/commit/19b81f61142fe69edb48d08e9bbfa96d389e8ffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19b81f61142fe69edb48d08e9bbfa96d389e8ffd/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe6acf9721b520ddf3c5ee1bc7d300d13545649", "html_url": "https://github.com/rust-lang/rust/commit/4fe6acf9721b520ddf3c5ee1bc7d300d13545649"}], "stats": {"total": 127, "additions": 79, "deletions": 48}, "files": [{"sha": "3f5a9a54ff1eacfab2bd485672b2091e50d4635a", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/19b81f61142fe69edb48d08e9bbfa96d389e8ffd/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b81f61142fe69edb48d08e9bbfa96d389e8ffd/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=19b81f61142fe69edb48d08e9bbfa96d389e8ffd", "patch": "@@ -962,6 +962,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // https://bugs.llvm.org/show_bug.cgi?id=36732\n             // is fixed.\n             let instr = llvm::LLVMRustBuildVectorReduceFAdd(self.llbuilder, acc, src);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceFAdd is not available in LLVM version < 5.0\");\n+            }\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }\n@@ -973,56 +976,90 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // https://bugs.llvm.org/show_bug.cgi?id=36732\n             // is fixed.\n             let instr = llvm::LLVMRustBuildVectorReduceFMul(self.llbuilder, acc, src);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceFMul is not available in LLVM version < 5.0\");\n+            }\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }\n     }\n     pub fn vector_reduce_add(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.add\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceAdd(self.llbuilder, src)\n+            let instr = llvm::LLVMRustBuildVectorReduceAdd(self.llbuilder, src);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceAdd is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n     pub fn vector_reduce_mul(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.mul\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceMul(self.llbuilder, src)\n+            let instr = llvm::LLVMRustBuildVectorReduceMul(self.llbuilder, src);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceMul is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n     pub fn vector_reduce_and(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.and\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceAnd(self.llbuilder, src)\n+            let instr = llvm::LLVMRustBuildVectorReduceAnd(self.llbuilder, src);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceAnd is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n     pub fn vector_reduce_or(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.or\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceOr(self.llbuilder, src)\n+            let instr = llvm::LLVMRustBuildVectorReduceOr(self.llbuilder, src);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceOr is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n     pub fn vector_reduce_xor(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.xor\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceXor(self.llbuilder, src)\n+            let instr = llvm::LLVMRustBuildVectorReduceXor(self.llbuilder, src);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceXor is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n     pub fn vector_reduce_fmin(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.fmin\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, true)\n+            let instr = llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, true);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceFMin is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n     pub fn vector_reduce_fmax(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.fmax\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, true)\n+            let instr = llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, true);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceFMax is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n     pub fn vector_reduce_fmin_fast(&self, src: ValueRef) -> ValueRef {\n         self.count_insn(\"vector.reduce.fmin_fast\");\n         unsafe {\n             let instr = llvm::LLVMRustBuildVectorReduceFMin(self.llbuilder, src, false);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceFMin is not available in LLVM version < 5.0\");\n+            }\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }\n@@ -1031,20 +1068,31 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.count_insn(\"vector.reduce.fmax_fast\");\n         unsafe {\n             let instr = llvm::LLVMRustBuildVectorReduceFMax(self.llbuilder, src, false);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceFMax is not available in LLVM version < 5.0\");\n+            }\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n             instr\n         }\n     }\n     pub fn vector_reduce_min(&self, src: ValueRef, is_signed: bool) -> ValueRef {\n         self.count_insn(\"vector.reduce.min\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceMin(self.llbuilder, src, is_signed)\n+            let instr = llvm::LLVMRustBuildVectorReduceMin(self.llbuilder, src, is_signed);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceMin is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n     pub fn vector_reduce_max(&self, src: ValueRef, is_signed: bool) -> ValueRef {\n         self.count_insn(\"vector.reduce.max\");\n         unsafe {\n-            llvm::LLVMRustBuildVectorReduceMax(self.llbuilder, src, is_signed)\n+            let instr = llvm::LLVMRustBuildVectorReduceMax(self.llbuilder, src, is_signed);\n+            if instr.is_null() {\n+                bug!(\"LLVMRustBuildVectorReduceMax is not available in LLVM version < 5.0\");\n+            }\n+            instr\n         }\n     }\n "}, {"sha": "a5644d6f9e2e1fab9edd6278eb8110ef8dae8d15", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 22, "deletions": 39, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/19b81f61142fe69edb48d08e9bbfa96d389e8ffd/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/19b81f61142fe69edb48d08e9bbfa96d389e8ffd/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=19b81f61142fe69edb48d08e9bbfa96d389e8ffd", "patch": "@@ -1447,65 +1447,48 @@ LLVMRustBuildVectorReduceFMax(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n \n #else\n \n-void error_and_exit(const char* msg) {\n-  raw_fd_ostream OS(2, false);\n-  OS << ::std::string(msg);\n-  std::exit(EXIT_FAILURE);\n-}\n-\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceFAdd(LLVMBuilderRef, LLVMValueRef, LLVMValueRef Src) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceFAdd requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceFAdd(LLVMBuilderRef, LLVMValueRef, LLVMValueRef) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceFMul(LLVMBuilderRef, LLVMValueRef, LLVMValueRef Src) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceFMul requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceFMul(LLVMBuilderRef, LLVMValueRef, LLVMValueRef) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceAdd(LLVMBuilderRef, LLVMValueRef Src) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceAdd requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceAdd(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceMul(LLVMBuilderRef, LLVMValueRef Src) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceMul requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceMul(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceAnd(LLVMBuilderRef, LLVMValueRef Src) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceAnd requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceAnd(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceOr(LLVMBuilderRef, LLVMValueRef Src) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceOr requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceOr(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceXor(LLVMBuilderRef, LLVMValueRef Src) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceXor requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceXor(LLVMBuilderRef, LLVMValueRef) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceMin(LLVMBuilderRef, LLVMValueRef Src, bool) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceMin requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceMin(LLVMBuilderRef, LLVMValueRef, bool) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceMax(LLVMBuilderRef, LLVMValueRef Src, bool) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceMax requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceMax(LLVMBuilderRef, LLVMValueRef, bool) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceFMin(LLVMBuilderRef, LLVMValueRef Src, bool) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceFMin requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceFMin(LLVMBuilderRef, LLVMValueRef, bool) {\n+  return nullptr;\n }\n extern \"C\" LLVMValueRef\n-LLVMRustBuildVectorReduceFMax(LLVMBuilderRef, LLVMValueRef Src, bool) {\n-  error_and_exit(\"LLVMRustBuildVectorReduceFMax requires LLVM >= 5.0\");\n-  return Src;\n+LLVMRustBuildVectorReduceFMax(LLVMBuilderRef, LLVMValueRef, bool) {\n+  return nullptr;\n }\n #endif"}]}