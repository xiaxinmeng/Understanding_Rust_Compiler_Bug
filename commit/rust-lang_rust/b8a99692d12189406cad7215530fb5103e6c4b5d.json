{"sha": "b8a99692d12189406cad7215530fb5103e6c4b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YTk5NjkyZDEyMTg5NDA2Y2FkNzIxNTUzMGZiNTEwM2U2YzRiNWQ=", "commit": {"author": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-18T18:10:39Z"}, "committer": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-18T18:10:39Z"}, "message": "Implement import-granularity guessing", "tree": {"sha": "140a957cdf1661ba5b99ece3f9f81ad2f8d695bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140a957cdf1661ba5b99ece3f9f81ad2f8d695bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a99692d12189406cad7215530fb5103e6c4b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a99692d12189406cad7215530fb5103e6c4b5d", "html_url": "https://github.com/rust-lang/rust/commit/b8a99692d12189406cad7215530fb5103e6c4b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a99692d12189406cad7215530fb5103e6c4b5d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f7072c255bd97a58b8344d0beeae281b8f7e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f7072c255bd97a58b8344d0beeae281b8f7e13", "html_url": "https://github.com/rust-lang/rust/commit/64f7072c255bd97a58b8344d0beeae281b8f7e13"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "4852121a1d34e0bc533729eabe168805a970c037", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b8a99692d12189406cad7215530fb5103e6c4b5d/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a99692d12189406cad7215530fb5103e6c4b5d/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=b8a99692d12189406cad7215530fb5103e6c4b5d", "patch": "@@ -4,7 +4,7 @@ use std::cmp::Ordering;\n use hir::Semantics;\n use syntax::{\n     algo,\n-    ast::{self, make, AstNode, PathSegmentKind},\n+    ast::{self, make, AstNode, ModuleItemOwner, PathSegmentKind},\n     ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n };\n \n@@ -88,15 +88,46 @@ impl ImportScope {\n             ImportScope::Module(item_list) => ImportScope::Module(item_list.clone_for_update()),\n         }\n     }\n+\n+    fn guess_merge_behavior_from_scope(&self) -> Option<MergeBehavior> {\n+        let use_stmt = |item| match item {\n+            ast::Item::Use(use_) => use_.use_tree(),\n+            _ => None,\n+        };\n+        let use_stmts = match self {\n+            ImportScope::File(f) => f.items(),\n+            ImportScope::Module(m) => m.items(),\n+        }\n+        .filter_map(use_stmt);\n+        let mut res = None;\n+        for tree in use_stmts {\n+            if let Some(list) = tree.use_tree_list() {\n+                if list.use_trees().any(|tree| tree.use_tree_list().is_some()) {\n+                    // double nested tree list, can only be a crate style import at this point\n+                    return Some(MergeBehavior::Crate);\n+                }\n+                // has to be at least a module style based import, might be crate style tho so look further\n+                res = Some(MergeBehavior::Module);\n+            }\n+        }\n+        res\n+    }\n }\n \n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: InsertUseConfig) {\n     let _p = profile::span(\"insert_use\");\n+    let mb = match cfg.granularity {\n+        ImportGranularity::Preserve => scope.guess_merge_behavior_from_scope(),\n+        ImportGranularity::Crate => Some(MergeBehavior::Crate),\n+        ImportGranularity::Module => Some(MergeBehavior::Module),\n+        ImportGranularity::Item => None,\n+    };\n+\n     let use_item =\n         make::use_(None, make::use_tree(path.clone(), None, None, false)).clone_for_update();\n     // merge into existing imports if possible\n-    if let Some(mb) = cfg.granularity.merge_behavior() {\n+    if let Some(mb) = mb {\n         for existing_use in scope.as_syntax_node().children().filter_map(ast::Use::cast) {\n             if let Some(merged) = try_merge_imports(&existing_use, &use_item, mb) {\n                 ted::replace(existing_use.syntax(), merged.syntax());"}]}