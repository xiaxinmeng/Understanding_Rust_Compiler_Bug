{"sha": "006ca9b14da1e0145844598b3d6a554c042c702a", "node_id": "C_kwDOAAsO6NoAKDAwNmNhOWIxNGRhMWUwMTQ1ODQ0NTk4YjNkNmE1NTRjMDQyYzcwMmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-30T13:56:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-30T13:56:40Z"}, "message": "Auto merge of #107080 - Urgau:cleanup-bootstrap-extra-check-cfgs, r=Mark-Simulacrum\n\nbootstrap: cleanup the list of extra check cfgs\n\nThis PR performs some cleanups on the `EXTRA_CHECK_CFGS` list in bootstrap.\n\n- `target_os=watchos`: no longer relevant because there are now proper targets `*-apple-watchos`\n - `target_arch=nvptx64`: target `nvptx64-nvidia-cuda` makes it useless\n - `target_arch=le32`: target was removed (https://github.com/rust-lang/rust/pull/45041)\n - `release`: was removed from rustfmt (https://github.com/rust-lang/rustfmt/pull/5375 and https://github.com/rust-lang/rustfmt/pull/5449)\n - `dont_compile_me`: was removed from stdarch (https://github.com/rust-lang/stdarch/pull/1308)\n\nAlso made some external cfg exception mode clear and only activated for rustc and rustc tools (as to not have the Standard Library unintentionally depend on them).", "tree": {"sha": "5d1df9362a753908a41dc283c18ed8318e4fcb3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1df9362a753908a41dc283c18ed8318e4fcb3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/006ca9b14da1e0145844598b3d6a554c042c702a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/006ca9b14da1e0145844598b3d6a554c042c702a", "html_url": "https://github.com/rust-lang/rust/commit/006ca9b14da1e0145844598b3d6a554c042c702a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/006ca9b14da1e0145844598b3d6a554c042c702a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fba9f33c7c9b6b439aabba2625102c818e1b24ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/fba9f33c7c9b6b439aabba2625102c818e1b24ed", "html_url": "https://github.com/rust-lang/rust/commit/fba9f33c7c9b6b439aabba2625102c818e1b24ed"}, {"sha": "a01a54021434f19b7dfd000579dc23551935a855", "url": "https://api.github.com/repos/rust-lang/rust/commits/a01a54021434f19b7dfd000579dc23551935a855", "html_url": "https://github.com/rust-lang/rust/commit/a01a54021434f19b7dfd000579dc23551935a855"}], "stats": {"total": 31, "additions": 9, "deletions": 22}, "files": [{"sha": "ea6b94f2f13c4e89253e743bc2c72795d421b6c9", "filename": "library/std/src/os/fuchsia/raw.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/006ca9b14da1e0145844598b3d6a554c042c702a/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006ca9b14da1e0145844598b3d6a554c042c702a/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffuchsia%2Fraw.rs?ref=006ca9b14da1e0145844598b3d6a554c042c702a", "patch": "@@ -24,12 +24,7 @@ pub type pthread_t = c_ulong;\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub use self::arch::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n \n-#[cfg(any(\n-    target_arch = \"x86\",\n-    target_arch = \"le32\",\n-    target_arch = \"powerpc\",\n-    target_arch = \"arm\"\n-))]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"powerpc\", target_arch = \"arm\"))]\n mod arch {\n     use crate::os::raw::{c_long, c_short, c_uint};\n "}, {"sha": "b3f7439f8cdc045e7b52ff3e1866cd7942092962", "filename": "library/std/src/os/l4re/raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/006ca9b14da1e0145844598b3d6a554c042c702a/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006ca9b14da1e0145844598b3d6a554c042c702a/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs?ref=006ca9b14da1e0145844598b3d6a554c042c702a", "patch": "@@ -26,7 +26,6 @@ pub use self::arch::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n \n #[cfg(any(\n     target_arch = \"x86\",\n-    target_arch = \"le32\",\n     target_arch = \"m68k\",\n     target_arch = \"powerpc\",\n     target_arch = \"sparc\","}, {"sha": "f46028c3a96c9d62a03151902aea14cbfa48c821", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/006ca9b14da1e0145844598b3d6a554c042c702a/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006ca9b14da1e0145844598b3d6a554c042c702a/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=006ca9b14da1e0145844598b3d6a554c042c702a", "patch": "@@ -26,7 +26,6 @@ pub use self::arch::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n \n #[cfg(any(\n     target_arch = \"x86\",\n-    target_arch = \"le32\",\n     target_arch = \"m68k\",\n     target_arch = \"powerpc\",\n     target_arch = \"sparc\","}, {"sha": "267aa3278d8ffcb0e6e4b17c276eca7bf6760afe", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/006ca9b14da1e0145844598b3d6a554c042c702a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006ca9b14da1e0145844598b3d6a554c042c702a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=006ca9b14da1e0145844598b3d6a554c042c702a", "patch": "@@ -203,7 +203,6 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     (None, \"bootstrap\", None),\n     (Some(Mode::Rustc), \"parallel_compiler\", None),\n     (Some(Mode::ToolRustc), \"parallel_compiler\", None),\n-    (Some(Mode::ToolRustc), \"emulate_second_only_system\", None),\n     (Some(Mode::Codegen), \"parallel_compiler\", None),\n     (Some(Mode::Std), \"stdarch_intel_sde\", None),\n     (Some(Mode::Std), \"no_fp_fmt_parse\", None),\n@@ -214,18 +213,9 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     (Some(Mode::Std), \"backtrace_in_libstd\", None),\n     /* Extra values not defined in the built-in targets yet, but used in std */\n     (Some(Mode::Std), \"target_env\", Some(&[\"libnx\"])),\n-    (Some(Mode::Std), \"target_os\", Some(&[\"watchos\"])),\n-    (\n-        Some(Mode::Std),\n-        \"target_arch\",\n-        Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"nvptx64\", \"le32\", \"xtensa\"]),\n-    ),\n+    // (Some(Mode::Std), \"target_os\", Some(&[])),\n+    (Some(Mode::Std), \"target_arch\", Some(&[\"asmjs\", \"spirv\", \"nvptx\", \"xtensa\"])),\n     /* Extra names used by dependencies */\n-    // FIXME: Used by rustfmt is their test but is invalid (neither cargo nor bootstrap ever set\n-    // this config) should probably by removed or use a allow attribute.\n-    (Some(Mode::ToolRustc), \"release\", None),\n-    // FIXME: Used by stdarch in their test, should use a allow attribute instead.\n-    (Some(Mode::Std), \"dont_compile_me\", None),\n     // FIXME: Used by serde_json, but we should not be triggering on external dependencies.\n     (Some(Mode::Rustc), \"no_btreemap_remove_entry\", None),\n     (Some(Mode::ToolRustc), \"no_btreemap_remove_entry\", None),\n@@ -235,8 +225,12 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     // FIXME: Used by proc-macro2, but we should not be triggering on external dependencies.\n     (Some(Mode::Rustc), \"span_locations\", None),\n     (Some(Mode::ToolRustc), \"span_locations\", None),\n-    // Can be passed in RUSTFLAGS to prevent direct syscalls in rustix.\n-    (None, \"rustix_use_libc\", None),\n+    // FIXME: Used by rustix, but we should not be triggering on external dependencies.\n+    (Some(Mode::Rustc), \"rustix_use_libc\", None),\n+    (Some(Mode::ToolRustc), \"rustix_use_libc\", None),\n+    // FIXME: Used by filetime, but we should not be triggering on external dependencies.\n+    (Some(Mode::Rustc), \"emulate_second_only_system\", None),\n+    (Some(Mode::ToolRustc), \"emulate_second_only_system\", None),\n ];\n \n /// A structure representing a Rust compiler."}]}