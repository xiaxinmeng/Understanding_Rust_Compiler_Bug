{"sha": "5728c165fa55bafdf0204143d30568a80a4d05bb", "node_id": "C_kwDOAAsO6NoAKDU3MjhjMTY1ZmE1NWJhZmRmMDIwNDE0M2QzMDU2OGE4MGE0ZDA1YmI", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-09-04T17:25:09Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-12-03T22:51:49Z"}, "message": "LLVM codgen support for unwinding inline assembly", "tree": {"sha": "1088d23f71eb5761da34e46fadda119cefa1a819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1088d23f71eb5761da34e46fadda119cefa1a819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5728c165fa55bafdf0204143d30568a80a4d05bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5728c165fa55bafdf0204143d30568a80a4d05bb", "html_url": "https://github.com/rust-lang/rust/commit/5728c165fa55bafdf0204143d30568a80a4d05bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5728c165fa55bafdf0204143d30568a80a4d05bb/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "948d0243de5105038d520a565df93c4272148d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/948d0243de5105038d520a565df93c4272148d5a", "html_url": "https://github.com/rust-lang/rust/commit/948d0243de5105038d520a565df93c4272148d5a"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "5cf6d95412bbe1b3b0beab9d1bad5b9120bd45a4", "filename": "src/base.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5728c165fa55bafdf0204143d30568a80a4d05bb/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5728c165fa55bafdf0204143d30568a80a4d05bb/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5728c165fa55bafdf0204143d30568a80a4d05bb", "patch": "@@ -239,7 +239,8 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             fx.add_comment(inst, terminator_head);\n         }\n \n-        fx.set_debug_loc(bb_data.terminator().source_info);\n+        let source_info = bb_data.terminator().source_info;\n+        fx.set_debug_loc(source_info);\n \n         match &bb_data.terminator().kind {\n             TerminatorKind::Goto { target } => {\n@@ -295,19 +296,19 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                         let len = codegen_operand(fx, len).load_scalar(fx);\n                         let index = codegen_operand(fx, index).load_scalar(fx);\n                         let location = fx\n-                            .get_caller_location(bb_data.terminator().source_info.span)\n+                            .get_caller_location(source_info.span)\n                             .load_scalar(fx);\n \n                         codegen_panic_inner(\n                             fx,\n                             rustc_hir::LangItem::PanicBoundsCheck,\n                             &[index, len, location],\n-                            bb_data.terminator().source_info.span,\n+                            source_info.span,\n                         );\n                     }\n                     _ => {\n                         let msg_str = msg.description();\n-                        codegen_panic(fx, msg_str, bb_data.terminator().source_info.span);\n+                        codegen_panic(fx, msg_str, source_info.span);\n                     }\n                 }\n             }\n@@ -378,10 +379,18 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                 options,\n                 destination,\n                 line_spans: _,\n+                cleanup,\n             } => {\n+                if cleanup.is_some() {\n+                    fx.tcx.sess.span_fatal(\n+                        source_info.span,\n+                        \"cranelift doesn't support unwinding from inline assembly.\",\n+                    );\n+                }\n+\n                 crate::inline_asm::codegen_inline_asm(\n                     fx,\n-                    bb_data.terminator().source_info.span,\n+                    source_info.span,\n                     template,\n                     operands,\n                     *options,\n@@ -415,7 +424,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             }\n             TerminatorKind::Drop { place, target, unwind: _ } => {\n                 let drop_place = codegen_place(fx, *place);\n-                crate::abi::codegen_drop(fx, bb_data.terminator().source_info.span, drop_place);\n+                crate::abi::codegen_drop(fx, source_info.span, drop_place);\n \n                 let target_block = fx.get_block(*target);\n                 fx.bcx.ins().jump(target_block, &[]);"}]}