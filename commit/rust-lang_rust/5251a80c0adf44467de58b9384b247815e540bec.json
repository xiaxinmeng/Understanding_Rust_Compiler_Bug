{"sha": "5251a80c0adf44467de58b9384b247815e540bec", "node_id": "C_kwDOAAsO6NoAKDUyNTFhODBjMGFkZjQ0NDY3ZGU1OGI5Mzg0YjI0NzgxNWU1NDBiZWM", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-05-09T12:35:58Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-05-09T12:35:58Z"}, "message": "use hir::Let in hir::Guard", "tree": {"sha": "191fb29249a0d99bd71e52a497d83a9c173201bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191fb29249a0d99bd71e52a497d83a9c173201bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5251a80c0adf44467de58b9384b247815e540bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5251a80c0adf44467de58b9384b247815e540bec", "html_url": "https://github.com/rust-lang/rust/commit/5251a80c0adf44467de58b9384b247815e540bec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5251a80c0adf44467de58b9384b247815e540bec/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4799baa70d0ff1780ee6dffb743d62c79235ace9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4799baa70d0ff1780ee6dffb743d62c79235ace9", "html_url": "https://github.com/rust-lang/rust/commit/4799baa70d0ff1780ee6dffb743d62c79235ace9"}], "stats": {"total": 86, "additions": 41, "deletions": 45}, "files": [{"sha": "cbaa16d037f3cadb5fbf11c30dd5aab92b46c243", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -505,8 +505,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm<'hir> {\n         let pat = self.lower_pat(&arm.pat);\n         let guard = arm.guard.as_ref().map(|cond| {\n-            if let ExprKind::Let(ref pat, ref scrutinee, _) = cond.kind {\n-                hir::Guard::IfLet(self.lower_pat(pat), self.lower_expr(scrutinee))\n+            if let ExprKind::Let(ref pat, ref scrutinee, span) = cond.kind {\n+                hir::Guard::IfLet(self.arena.alloc(hir::Let {\n+                    hir_id: self.next_id(),\n+                    span: self.lower_span(span),\n+                    pat: self.lower_pat(pat),\n+                    ty: None,\n+                    init: self.lower_expr(scrutinee),\n+                }))\n             } else {\n                 hir::Guard::If(self.lower_expr(cond))\n             }"}, {"sha": "df56ea6eac56292453f513485be447899412ef45", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -1312,8 +1312,7 @@ pub struct Let<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub enum Guard<'hir> {\n     If(&'hir Expr<'hir>),\n-    // FIXME use hir::Let for this.\n-    IfLet(&'hir Pat<'hir>, &'hir Expr<'hir>),\n+    IfLet(&'hir Let<'hir>),\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "01bcdf216d2592690472cb3719ded23842b34b35", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -1233,9 +1233,8 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n     if let Some(ref g) = arm.guard {\n         match g {\n             Guard::If(ref e) => visitor.visit_expr(e),\n-            Guard::IfLet(ref pat, ref e) => {\n-                visitor.visit_pat(pat);\n-                visitor.visit_expr(e);\n+            Guard::IfLet(ref l) => {\n+                visitor.visit_let_expr(l);\n             }\n         }\n     }"}, {"sha": "4558a3d10c4fbf2b2d8663ff17fc6d24ae244e01", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -1915,14 +1915,9 @@ impl<'a> State<'a> {\n                     self.print_expr(&e);\n                     self.space();\n                 }\n-                hir::Guard::IfLet(pat, e) => {\n+                hir::Guard::IfLet(hir::Let { pat, ty, init, .. }) => {\n                     self.word_nbsp(\"if\");\n-                    self.word_nbsp(\"let\");\n-                    self.print_pat(&pat);\n-                    self.space();\n-                    self.word_space(\"=\");\n-                    self.print_expr(&e);\n-                    self.space();\n+                    self.print_let(pat, *ty, init);\n                 }\n             }\n         }"}, {"sha": "8f5ad6b1a07a0e44f41111614e873e7c1be19049", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -798,8 +798,8 @@ impl<'tcx> Cx<'tcx> {\n             pattern: self.pattern_from_hir(&arm.pat),\n             guard: arm.guard.as_ref().map(|g| match g {\n                 hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),\n-                hir::Guard::IfLet(ref pat, ref e) => {\n-                    Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))\n+                hir::Guard::IfLet(ref l) => {\n+                    Guard::IfLet(self.pattern_from_hir(l.pat), self.mirror_expr(l.init))\n                 }\n             }),\n             body: self.mirror_expr(arm.body),"}, {"sha": "f86899021e38808fc3878900c660a7820c04e977", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -173,10 +173,10 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         for arm in hir_arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n             self.check_patterns(&arm.pat, Refutable);\n-            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n-                self.check_patterns(pat, Refutable);\n-                let tpat = self.lower_pattern(&mut cx, pat, &mut false);\n-                self.check_let_reachability(&mut cx, pat.hir_id, tpat, tpat.span());\n+            if let Some(hir::Guard::IfLet(ref let_expr)) = arm.guard {\n+                self.check_patterns(let_expr.pat, Refutable);\n+                let tpat = self.lower_pattern(&mut cx, let_expr.pat, &mut false);\n+                self.check_let_reachability(&mut cx, let_expr.pat.hir_id, tpat, tpat.span());\n             }\n         }\n \n@@ -1108,9 +1108,9 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n \n     match parent_node {\n         hir::Node::Arm(hir::Arm {\n-            guard: Some(hir::Guard::IfLet(&hir::Pat { hir_id, .. }, _)),\n+            guard: Some(hir::Guard::IfLet(&hir::Let { pat: hir::Pat { hir_id, .. }, .. })),\n             ..\n-        }) if Some(hir_id) == pat_id => {\n+        }) if Some(*hir_id) == pat_id => {\n             return LetSource::IfLetGuard;\n         }\n         hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Let(..), span, .. }) => {"}, {"sha": "67914eb045ae8f09676df463270589439bd7b312", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -373,8 +373,8 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n         self.add_from_pat(&arm.pat);\n-        if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n-            self.add_from_pat(pat);\n+        if let Some(hir::Guard::IfLet(ref let_expr)) = arm.guard {\n+            self.add_from_pat(let_expr.pat);\n         }\n         intravisit::walk_arm(self, arm);\n     }\n@@ -914,9 +914,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n                     let guard_succ = arm.guard.as_ref().map_or(body_succ, |g| match g {\n                         hir::Guard::If(e) => self.propagate_through_expr(e, body_succ),\n-                        hir::Guard::IfLet(pat, e) => {\n-                            let let_bind = self.define_bindings_in_pat(pat, body_succ);\n-                            self.propagate_through_expr(e, let_bind)\n+                        hir::Guard::IfLet(let_expr) => {\n+                            let let_bind = self.define_bindings_in_pat(let_expr.pat, body_succ);\n+                            self.propagate_through_expr(let_expr.init, let_bind)\n                         }\n                     });\n                     let arm_succ = self.define_bindings_in_pat(&arm.pat, guard_succ);"}, {"sha": "9aff854c8030591125c44406a76868a7e0771619", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -82,13 +82,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     hir::Guard::If(e) => {\n                         self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {});\n                     }\n-                    hir::Guard::IfLet(pat, e) => {\n-                        let scrutinee_ty = self.demand_scrutinee_type(\n-                            e,\n-                            pat.contains_explicit_ref_binding(),\n-                            false,\n-                        );\n-                        self.check_pat_top(&pat, scrutinee_ty, None, true);\n+                    hir::Guard::IfLet(l) => {\n+                        self.check_expr_let(l);\n                     }\n                 };\n             }"}, {"sha": "b6059f97fc414bacb00b33e27e760bebec224d23", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -1064,7 +1064,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_expr_let(&self, let_expr: &'tcx hir::Let<'tcx>) -> Ty<'tcx> {\n+    pub(super) fn check_expr_let(&self, let_expr: &'tcx hir::Let<'tcx>) -> Ty<'tcx> {\n         // for let statements, this is done in check_stmt\n         let init = let_expr.init;\n         self.warn_if_unreachable(init.hir_id, init.span, \"block in `let` expression\");"}, {"sha": "d68dd2c831b38c42e70bf9559ae1f253a3bd0bfc", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -298,9 +298,8 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 Guard::If(ref e) => {\n                     self.visit_expr(e);\n                 }\n-                Guard::IfLet(ref pat, ref e) => {\n-                    self.visit_pat(pat);\n-                    self.visit_expr(e);\n+                Guard::IfLet(ref l) => {\n+                    self.visit_let_expr(l);\n                 }\n             }\n "}, {"sha": "8c959181914eea99642bf5f262a294be0b2f304a", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -344,9 +344,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n                         // B -> C and E -> F are added implicitly due to the traversal order.\n                         match guard {\n                             Some(Guard::If(expr)) => self.visit_expr(expr),\n-                            Some(Guard::IfLet(pat, expr)) => {\n-                                self.visit_pat(pat);\n-                                self.visit_expr(expr);\n+                            Some(Guard::IfLet(let_expr)) => {\n+                                self.visit_let_expr(let_expr);\n                             }\n                             None => (),\n                         }"}, {"sha": "67716ed4778ec926c3369cf7967e367c1b4fe9a0", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -625,8 +625,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n         if let Some(hir::Guard::If(e)) = arm.guard {\n             self.consume_expr(e)\n-        } else if let Some(hir::Guard::IfLet(_, ref e)) = arm.guard {\n-            self.consume_expr(e)\n+        } else if let Some(hir::Guard::IfLet(ref l)) = arm.guard {\n+            self.consume_expr(l.init)\n         }\n \n         self.consume_expr(arm.body);"}, {"sha": "dd1f4826fe0516599ad798b9372422ce62d44137", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5251a80c0adf44467de58b9384b247815e540bec/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5251a80c0adf44467de58b9384b247815e540bec/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr?ref=5251a80c0adf44467de58b9384b247815e540bec", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/typeck.rs:9:22\n    |\n LL |         Ok(x) if let Err(_) = x => {},\n-   |                      ^^^^^^ expected enum `Option`, found enum `Result`\n+   |                      ^^^^^^   - this expression has type `Option<bool>`\n+   |                      |\n+   |                      expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<bool>`\n               found enum `Result<_, _>`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/typeck.rs:11:22\n    |\n LL |         Ok(x) if let 0 = x => {},\n-   |                      ^ expected enum `Option`, found integer\n+   |                      ^   - this expression has type `Option<bool>`\n+   |                      |\n+   |                      expected enum `Option`, found integer\n    |\n    = note: expected enum `Option<bool>`\n               found type `{integer}`"}]}