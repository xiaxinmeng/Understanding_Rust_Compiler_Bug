{"sha": "55389f9171d3e8e05230ae5ea3d07b9c7e54705d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1Mzg5ZjkxNzFkM2U4ZTA1MjMwYWU1ZWEzZDA3YjljN2U1NDcwNWQ=", "commit": {"author": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-01-25T18:02:38Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-27T09:52:42Z"}, "message": "Try to reword placeholder error messages to make them clearer", "tree": {"sha": "14fddf76c844f4dbe2ca97cd81046b2e2d6b9ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14fddf76c844f4dbe2ca97cd81046b2e2d6b9ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55389f9171d3e8e05230ae5ea3d07b9c7e54705d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55389f9171d3e8e05230ae5ea3d07b9c7e54705d", "html_url": "https://github.com/rust-lang/rust/commit/55389f9171d3e8e05230ae5ea3d07b9c7e54705d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55389f9171d3e8e05230ae5ea3d07b9c7e54705d/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823c888be297230389a25c9e79e39811a6f61537", "url": "https://api.github.com/repos/rust-lang/rust/commits/823c888be297230389a25c9e79e39811a6f61537", "html_url": "https://github.com/rust-lang/rust/commit/823c888be297230389a25c9e79e39811a6f61537"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "b5187d2dbb6cef7527641bfe06986684b0d940a6", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 45, "deletions": 31, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/55389f9171d3e8e05230ae5ea3d07b9c7e54705d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55389f9171d3e8e05230ae5ea3d07b9c7e54705d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=55389f9171d3e8e05230ae5ea3d07b9c7e54705d", "patch": "@@ -246,7 +246,9 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         let mut counter = 0;\n         let mut has_sub = None;\n         let mut has_sup = None;\n-        let mut has_vid = None;\n+\n+        let mut actual_has_vid = None;\n+        let mut expected_has_vid = None;\n \n         self.tcx().for_each_free_region(&expected_trait_ref, |r| {\n             if Some(r) == sub_placeholder && has_sub.is_none() {\n@@ -256,11 +258,16 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 has_sup = Some(counter);\n                 counter += 1;\n             }\n+\n+            if Some(r) == vid && expected_has_vid.is_none() {\n+                expected_has_vid = Some(counter);\n+                counter += 1;\n+            }\n         });\n \n         self.tcx().for_each_free_region(&actual_trait_ref, |r| {\n-            if Some(r) == vid && has_vid.is_none() {\n-                has_vid = Some(counter);\n+            if Some(r) == vid && actual_has_vid.is_none() {\n+                actual_has_vid = Some(counter);\n                 counter += 1;\n             }\n         });\n@@ -274,60 +281,67 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 match (has_sub, has_sup) {\n                     (Some(n1), Some(n2)) => {\n                         err.note(&format!(\n-                            \"`{}` must implement `{}` \\\n-                             for any two lifetimes `'{}` and `'{}`\",\n-                            expected_trait_ref.self_ty(),\n+                            \"`{}` would have to be implemented for the type `{}`, \\\n+                            for any two lifetimes `'{}` and `'{}`\",\n                             expected_trait_ref,\n+                            expected_trait_ref.self_ty(),\n                             std::cmp::min(n1, n2),\n                             std::cmp::max(n1, n2),\n                         ));\n                     }\n                     (Some(n), _) | (_, Some(n)) => {\n                         err.note(&format!(\n-                            \"`{}` must implement `{}` \\\n-                             for any lifetime `'{}`\",\n-                            expected_trait_ref.self_ty(),\n+                            \"`{}` would have to be implemented for the type `{}`, \\\n+                            for any lifetime `'{}`\",\n                             expected_trait_ref,\n+                            expected_trait_ref.self_ty(),\n                             n,\n                         ));\n                     }\n                     (None, None) => {\n                         err.note(&format!(\n-                            \"`{}` must implement `{}`\",\n-                            expected_trait_ref.self_ty(),\n+                            \"`{}` would have to be implemented for the type `{}`\",\n                             expected_trait_ref,\n+                            expected_trait_ref.self_ty(),\n                         ));\n                     }\n                 }\n             })\n         });\n \n-        RegionHighlightMode::maybe_highlighting_region(vid, has_vid, || match has_vid {\n-            Some(n) => {\n-                if self_ty_has_vid {\n+        RegionHighlightMode::maybe_highlighting_region(\n+            vid,\n+            actual_has_vid.or(expected_has_vid),\n+            || match actual_has_vid {\n+                Some(n) => {\n+                    if self_ty_has_vid {\n+                        err.note(&format!(\n+                            \"but `{}` is actually implemented for the type `{}`, \\\n+                            for the specific lifetime `'{}`\",\n+                            actual_trait_ref,\n+                            actual_trait_ref.self_ty(),\n+                            n\n+                        ));\n+                    } else {\n+                        err.note(&format!(\n+                            \"but `{}` is actually implemented for the type `{}`, \\\n+                            for some lifetime `'{}`\",\n+                            actual_trait_ref,\n+                            actual_trait_ref.self_ty(),\n+                            n\n+                        ));\n+                    }\n+                }\n+\n+                _ => {\n                     err.note(&format!(\n-                        \"but `{}` only implements `{}` for the lifetime `'{}`\",\n-                        actual_trait_ref.self_ty(),\n+                        \"but `{}` is actually implemented for the type `{}`\",\n                         actual_trait_ref,\n-                        n\n-                    ));\n-                } else {\n-                    err.note(&format!(\n-                        \"but `{}` only implements `{}` for some lifetime `'{}`\",\n                         actual_trait_ref.self_ty(),\n-                        actual_trait_ref,\n-                        n\n                     ));\n                 }\n             }\n-            None => {\n-                err.note(&format!(\n-                    \"but `{}` only implements `{}`\",\n-                    actual_trait_ref.self_ty(),\n-                    actual_trait_ref,\n-                ));\n-            }\n-        });\n+        );\n \n         err.emit();\n         ErrorReported"}]}