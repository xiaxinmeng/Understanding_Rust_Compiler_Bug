{"sha": "ff5762b78a739eb7f1d6f938ca98ca32262de19f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNTc2MmI3OGE3MzllYjdmMWQ2ZjkzOGNhOThjYTMyMjYyZGUxOWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T23:34:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:44:38Z"}, "message": "extract recover_field_access_by_float_lit", "tree": {"sha": "ccc916a86f98f2beef5099d63dc67b9931a3a837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccc916a86f98f2beef5099d63dc67b9931a3a837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5762b78a739eb7f1d6f938ca98ca32262de19f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5762b78a739eb7f1d6f938ca98ca32262de19f", "html_url": "https://github.com/rust-lang/rust/commit/ff5762b78a739eb7f1d6f938ca98ca32262de19f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5762b78a739eb7f1d6f938ca98ca32262de19f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15d0cde57c339775639e7cb4d6f7535b418b371", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15d0cde57c339775639e7cb4d6f7535b418b371", "html_url": "https://github.com/rust-lang/rust/commit/a15d0cde57c339775639e7cb4d6f7535b418b371"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "64154aa90740a4d07a783b2df46dbda3d8a85a6a", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ff5762b78a739eb7f1d6f938ca98ca32262de19f/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5762b78a739eb7f1d6f938ca98ca32262de19f/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=ff5762b78a739eb7f1d6f938ca98ca32262de19f", "patch": "@@ -711,33 +711,9 @@ impl<'a> Parser<'a> {\n                         e = self.parse_tuple_field_access_expr(lo, e, symbol, suffix);\n                     }\n                     token::Literal(token::Lit { kind: token::Float, symbol, .. }) => {\n-                        self.bump();\n-                        let fstr = symbol.as_str();\n-                        let msg = format!(\"unexpected token: `{}`\", symbol);\n-                        let mut err = self.diagnostic().struct_span_err(self.prev_span, &msg);\n-                        err.span_label(self.prev_span, \"unexpected token\");\n-                        if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n-                            let float = match fstr.parse::<f64>().ok() {\n-                                Some(f) => f,\n-                                None => continue,\n-                            };\n-                            let sugg = pprust::to_string(|s| {\n-                                s.popen();\n-                                s.print_expr(&e);\n-                                s.s.word(\".\");\n-                                s.print_usize(float.trunc() as usize);\n-                                s.pclose();\n-                                s.s.word(\".\");\n-                                s.s.word(fstr.splitn(2, \".\").last().unwrap().to_string())\n-                            });\n-                            err.span_suggestion(\n-                                lo.to(self.prev_span),\n-                                \"try parenthesizing the first index\",\n-                                sugg,\n-                                Applicability::MachineApplicable,\n-                            );\n+                        if let Some(err) = self.recover_field_access_by_float_lit(lo, &e, symbol) {\n+                            err?\n                         }\n-                        return Err(err);\n                     }\n                     _ => {\n                         // FIXME Could factor this out into non_fatal_unexpected or something.\n@@ -759,6 +735,41 @@ impl<'a> Parser<'a> {\n         return Ok(e);\n     }\n \n+    fn recover_field_access_by_float_lit(\n+        &mut self,\n+        lo: Span,\n+        base: &P<Expr>,\n+        sym: Symbol,\n+    ) -> Option<PResult<'a, ()>> {\n+        self.bump();\n+\n+        let fstr = sym.as_str();\n+        let msg = format!(\"unexpected token: `{}`\", sym);\n+\n+        let mut err = self.struct_span_err(self.prev_span, &msg);\n+        err.span_label(self.prev_span, \"unexpected token\");\n+\n+        if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n+            let float = fstr.parse::<f64>().ok()?;\n+            let sugg = pprust::to_string(|s| {\n+                s.popen();\n+                s.print_expr(&base);\n+                s.s.word(\".\");\n+                s.print_usize(float.trunc() as usize);\n+                s.pclose();\n+                s.s.word(\".\");\n+                s.s.word(fstr.splitn(2, \".\").last().unwrap().to_string())\n+            });\n+            err.span_suggestion(\n+                lo.to(self.prev_span),\n+                \"try parenthesizing the first index\",\n+                sugg,\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        Some(Err(err))\n+    }\n+\n     fn parse_tuple_field_access_expr(\n         &mut self,\n         lo: Span,"}]}