{"sha": "bb4dd06307ecb29621416076963d3853e17e55bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNGRkMDYzMDdlY2IyOTYyMTQxNjA3Njk2M2QzODUzZTE3ZTU1YmM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-12T03:03:24Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-12T03:03:24Z"}, "message": "manual: Lightly copyedit the macros section", "tree": {"sha": "3d12988acfa5cd72074ed3bc93d9efa3da951971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d12988acfa5cd72074ed3bc93d9efa3da951971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb4dd06307ecb29621416076963d3853e17e55bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4dd06307ecb29621416076963d3853e17e55bc", "html_url": "https://github.com/rust-lang/rust/commit/bb4dd06307ecb29621416076963d3853e17e55bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb4dd06307ecb29621416076963d3853e17e55bc/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "140d16ac5803a0e7b61d0f901a82549c09e4411f", "url": "https://api.github.com/repos/rust-lang/rust/commits/140d16ac5803a0e7b61d0f901a82549c09e4411f", "html_url": "https://github.com/rust-lang/rust/commit/140d16ac5803a0e7b61d0f901a82549c09e4411f"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "9956f9b05f35ec9e0d51719e6198c6412d249ff7", "filename": "doc/rust.md", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb4dd06307ecb29621416076963d3853e17e55bc/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb4dd06307ecb29621416076963d3853e17e55bc/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=bb4dd06307ecb29621416076963d3853e17e55bc", "patch": "@@ -501,14 +501,13 @@ only be invoked in expression position.\n any token other than a delimiter or `$`.)\n \n Macro invocations are looked up by name, and each macro rule is tried in turn;\n-the first successful match is transcribed. The matching and transcribing\n+the first successful match is transcribed. The matching and transcription\n processes are closely related, and will be described together:\n \n ### Macro By Example\n \n-Everything that does not begin with a `$` is matched and transcirbed\n-literally, including delimiters. For parsing reasons, they must be matched,\n-but they are otherwise not special.\n+The macro expander matches and transcribes every token that does not begin with a `$` literally, including delimiters.\n+For parsing reasons, delimiters must be balanced, but they are otherwise not special.\n \n In the matcher, `$` _name_ `:` _designator_ matches the nonterminal in the\n Rust syntax named by _designator_. Valid designators are `item`, `block`,\n@@ -517,11 +516,11 @@ are the right-hand side and the left-hand side respectively of the `=>` in\n macro rules. In the transcriber, the designator is already known, and so only\n the name of a matched nonterminal comes after the dollar sign.\n \n-In bothe the matcher and transcriber, the Kleene star-like operator,\n-consisting of `$` and parens, optionally followed by a separator token,\n-followed by `*` or `+`, indicates repetition. (`*` means zero or more\n-repetitions, `+` means at least one repetition. The parens are not matched or\n-transcribed). On the matcher side, a name is bound to _all_ of the names it\n+In both the matcher and transcriber, the Kleene star-like operator indicates repetition.\n+The Kleene star operator consists of `$` and parens, optionally followed by a separator token, followed by `*` or `+`.\n+`*` means zero or more repetitions, `+` means at least one repetition.\n+The parens are not matched or transcribed.\n+On the matcher side, a name is bound to _all_ of the names it\n matches, in a structure that mimics the structure of the repetition\n encountered on a successful match. The job of the transcriber is to sort that\n structure out.\n@@ -550,19 +549,16 @@ Rust syntax is restricted in two ways:\n 1. The parser will always parse as much as possible. If it attempts to match\n `$i:expr [ , ]` against `8 [ , ]`, it will attempt to parse `i` as an array\n index operation and fail. Adding a separator can solve this problem.\n-2. The parser must have eliminated all ambiguity by the time it reaches a\n-`$` _name_ `:` _designator_. This most often affects them when they occur in\n-the beginning of, or immediately after, a `$(...)*`; requiring a distinctive\n-token in front can solve the problem.\n+2. The parser must have eliminated all ambiguity by the time it reaches a `$` _name_ `:` _designator_.\n+This requirement most often affects name-designator pairs when they occur at the beginning of, or immediately after, a `$(...)*`; requiring a distinctive token in front can solve the problem.\n \n \n ## Syntax extensions useful for the macro author\n \n * `log_syntax!` : print out the arguments at compile time\n-* `trace_macros!` : supply `true` or `false` to enable or disable printing\n-of the macro expansion process.\n-* `ident_to_str!` : turns the identifier argument into a string literal\n-* `concat_idents!` : creates a new identifier by concatenating its arguments\n+* `trace_macros!` : supply `true` or `false` to enable or disable printing of the macro expansion process.\n+* `ident_to_str!` : turn the identifier argument into a string literal\n+* `concat_idents!` : create a new identifier by concatenating the arguments\n \n \n "}]}