{"sha": "cc5fe6d520683e847d1d5fd2a4544e2a5dba9ab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNWZlNmQ1MjA2ODNlODQ3ZDFkNWZkMmE0NTQ0ZTJhNWRiYTlhYjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-15T01:55:34Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-16T01:11:08Z"}, "message": "or-patterns: liveness/`visit_arm`: remove `top_pats_hack`.", "tree": {"sha": "4b1210cf2ef8da78e94fbfc5e8e9bc501708ea4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b1210cf2ef8da78e94fbfc5e8e9bc501708ea4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc5fe6d520683e847d1d5fd2a4544e2a5dba9ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5fe6d520683e847d1d5fd2a4544e2a5dba9ab4", "html_url": "https://github.com/rust-lang/rust/commit/cc5fe6d520683e847d1d5fd2a4544e2a5dba9ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc5fe6d520683e847d1d5fd2a4544e2a5dba9ab4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1c3c96e7866d6f82b92fffa00fac59f418b601", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1c3c96e7866d6f82b92fffa00fac59f418b601", "html_url": "https://github.com/rust-lang/rust/commit/9d1c3c96e7866d6f82b92fffa00fac59f418b601"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "3c264f9ac6e6c6212d2bee7f16ae29128648cd57", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cc5fe6d520683e847d1d5fd2a4544e2a5dba9ab4/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5fe6d520683e847d1d5fd2a4544e2a5dba9ab4/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=cc5fe6d520683e847d1d5fd2a4544e2a5dba9ab4", "patch": "@@ -404,34 +404,29 @@ fn visit_fn<'tcx>(\n     lsets.warn_about_unused_args(body, entry_ln);\n }\n \n-fn add_from_pat<'tcx>(ir: &mut IrMaps<'tcx>, pat: &P<hir::Pat>) {\n+fn add_from_pat(ir: &mut IrMaps<'_>, pat: &P<hir::Pat>) {\n     // For struct patterns, take note of which fields used shorthand\n     // (`x` rather than `x: x`).\n     let mut shorthand_field_ids = HirIdSet::default();\n     let mut pats = VecDeque::new();\n     pats.push_back(pat);\n     while let Some(pat) = pats.pop_front() {\n         use crate::hir::PatKind::*;\n-        match pat.node {\n-            Binding(_, _, _, ref inner_pat) => {\n+        match &pat.node {\n+            Binding(.., inner_pat) => {\n                 pats.extend(inner_pat.iter());\n             }\n-            Struct(_, ref fields, _) => {\n-                for field in fields {\n-                    if field.is_shorthand {\n-                        shorthand_field_ids.insert(field.pat.hir_id);\n-                    }\n-                }\n+            Struct(_, fields, _) => {\n+                let ids = fields.iter().filter(|f| f.is_shorthand).map(|f| f.pat.hir_id);\n+                shorthand_field_ids.extend(ids);\n             }\n-            Ref(ref inner_pat, _) |\n-            Box(ref inner_pat) => {\n+            Ref(inner_pat, _) | Box(inner_pat) => {\n                 pats.push_back(inner_pat);\n             }\n-            TupleStruct(_, ref inner_pats, _) |\n-            Tuple(ref inner_pats, _) => {\n+            TupleStruct(_, inner_pats, _) | Tuple(inner_pats, _) | Or(inner_pats) => {\n                 pats.extend(inner_pats.iter());\n             }\n-            Slice(ref pre_pats, ref inner_pat, ref post_pats) => {\n+            Slice(pre_pats, inner_pat, post_pats) => {\n                 pats.extend(pre_pats.iter());\n                 pats.extend(inner_pat.iter());\n                 pats.extend(post_pats.iter());\n@@ -440,7 +435,7 @@ fn add_from_pat<'tcx>(ir: &mut IrMaps<'tcx>, pat: &P<hir::Pat>) {\n         }\n     }\n \n-    pat.each_binding(|_bm, hir_id, _sp, ident| {\n+    pat.each_binding(|_, hir_id, _, ident| {\n         ir.add_live_node_for_node(hir_id, VarDefNode(ident.span));\n         ir.add_variable(Local(LocalInfo {\n             id: hir_id,\n@@ -456,9 +451,7 @@ fn visit_local<'tcx>(ir: &mut IrMaps<'tcx>, local: &'tcx hir::Local) {\n }\n \n fn visit_arm<'tcx>(ir: &mut IrMaps<'tcx>, arm: &'tcx hir::Arm) {\n-    for pat in arm.top_pats_hack() {\n-        add_from_pat(ir, pat);\n-    }\n+    add_from_pat(ir, &arm.pat);\n     intravisit::walk_arm(ir, arm);\n }\n "}]}