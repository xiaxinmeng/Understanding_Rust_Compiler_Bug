{"sha": "12fee7b00424a79755d178d21298adbd8985e784", "node_id": "C_kwDOAAsO6NoAKDEyZmVlN2IwMDQyNGE3OTc1NWQxNzhkMjEyOThhZGJkODk4NWU3ODQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-26T19:02:56Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-26T19:02:56Z"}, "message": "Update tests.", "tree": {"sha": "336d145c528029616f64a17f52b6989e95d25b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336d145c528029616f64a17f52b6989e95d25b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12fee7b00424a79755d178d21298adbd8985e784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12fee7b00424a79755d178d21298adbd8985e784", "html_url": "https://github.com/rust-lang/rust/commit/12fee7b00424a79755d178d21298adbd8985e784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12fee7b00424a79755d178d21298adbd8985e784/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a62ebb0b146252cafd0496a897a9cbd247187ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a62ebb0b146252cafd0496a897a9cbd247187ec", "html_url": "https://github.com/rust-lang/rust/commit/5a62ebb0b146252cafd0496a897a9cbd247187ec"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "0f412bc86fb31982cbf05b83be58d740a399046c", "filename": "tests/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=12fee7b00424a79755d178d21298adbd8985e784", "patch": "@@ -9,7 +9,7 @@ note: the constant `baz` is defined here\n    |\n LL |     thread_local!(static baz: f64 = 0.0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::__thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::thread::local_impl::thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e9653dbe5c2225a52df28aeaab2c6a0246a126c4", "filename": "tests/ui/threads-sendsync/issue-43733-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs?ref=12fee7b00424a79755d178d21298adbd8985e784", "patch": "@@ -21,7 +21,7 @@ impl<T> Key<T> {\n }\n \n #[cfg(target_thread_local)]\n-use std::thread::__LocalKeyInner as Key;\n+use std::thread::local_impl::Key;\n \n static __KEY: Key<()> = Key::new();\n //~^ ERROR `UnsafeCell<Option<()>>` cannot be shared between threads"}, {"sha": "ff83e16add9ef53f7f1465bc1b7bcee6f0c5e8a4", "filename": "tests/ui/threads-sendsync/issue-43733.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr?ref=12fee7b00424a79755d178d21298adbd8985e784", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:21:5\n+  --> $DIR/issue-43733.rs:19:5\n    |\n LL |     __KEY.get(Default::default)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:26:42\n+  --> $DIR/issue-43733.rs:24:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function"}, {"sha": "cac745f1e12f30c8fcd9e4a6cbd48a1d937d986d", "filename": "tests/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=12fee7b00424a79755d178d21298adbd8985e784", "patch": "@@ -1,8 +1,6 @@\n // ignore-wasm32\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n-// normalize-stderr-test: \"__LocalKeyInner::<T>::get\" -> \"$$LOCALKEYINNER::<T>::get\"\n-// normalize-stderr-test: \"__LocalKeyInner::<T>::get\" -> \"$$LOCALKEYINNER::<T>::get\"\n #![feature(thread_local)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n@@ -12,15 +10,15 @@ type Foo = std::cell::RefCell<String>;\n \n #[cfg(target_thread_local)]\n #[thread_local]\n-static __KEY: std::thread::__LocalKeyInner<Foo> = std::thread::__LocalKeyInner::new();\n+static __KEY: std::thread::local_impl::Key<Foo> = std::thread::local_impl::Key::new();\n \n #[cfg(not(target_thread_local))]\n-static __KEY: std::thread::__LocalKeyInner<Foo> = std::thread::__LocalKeyInner::new();\n+static __KEY: std::thread::local_impl::Key<Foo> = std::thread::local_impl::Key::new();\n \n fn __getit(_: Option<&mut Option<RefCell<String>>>) -> std::option::Option<&'static Foo> {\n     __KEY.get(Default::default)\n     //[mir]~^ ERROR call to unsafe function is unsafe\n-    //[thir]~^^ ERROR call to unsafe function `__\n+    //[thir]~^^ ERROR call to unsafe function `Key::<T>::get`\n }\n \n static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);"}, {"sha": "94ec724044c7a94eab3b6e4d69e531b71d0f226d", "filename": "tests/ui/threads-sendsync/issue-43733.thir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12fee7b00424a79755d178d21298adbd8985e784/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr?ref=12fee7b00424a79755d178d21298adbd8985e784", "patch": "@@ -1,13 +1,13 @@\n-error[E0133]: call to unsafe function `$LOCALKEYINNER::<T>::get` is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:21:5\n+error[E0133]: call to unsafe function `Key::<T>::get` is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:19:5\n    |\n LL |     __KEY.get(Default::default)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `LocalKey::<T>::new` is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:26:42\n+  --> $DIR/issue-43733.rs:24:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function"}]}