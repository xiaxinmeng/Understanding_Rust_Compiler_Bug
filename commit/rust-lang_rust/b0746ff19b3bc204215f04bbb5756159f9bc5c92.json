{"sha": "b0746ff19b3bc204215f04bbb5756159f9bc5c92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNzQ2ZmYxOWIzYmMyMDQyMTVmMDRiYmI1NzU2MTU5ZjliYzVjOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-05T21:03:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-05T21:03:10Z"}, "message": "Auto merge of #23031 - Manishearth:rollup, r=Manishearth", "tree": {"sha": "2116c5865229d3d238832e50c99ad9baebe63087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2116c5865229d3d238832e50c99ad9baebe63087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0746ff19b3bc204215f04bbb5756159f9bc5c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0746ff19b3bc204215f04bbb5756159f9bc5c92", "html_url": "https://github.com/rust-lang/rust/commit/b0746ff19b3bc204215f04bbb5756159f9bc5c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0746ff19b3bc204215f04bbb5756159f9bc5c92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c74f85f363a8081b31f9ab696463717ce312d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c74f85f363a8081b31f9ab696463717ce312d5", "html_url": "https://github.com/rust-lang/rust/commit/f0c74f85f363a8081b31f9ab696463717ce312d5"}, {"sha": "340d1cc7d701bf1c5bae6c2ad5b097462c5d1a7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/340d1cc7d701bf1c5bae6c2ad5b097462c5d1a7c", "html_url": "https://github.com/rust-lang/rust/commit/340d1cc7d701bf1c5bae6c2ad5b097462c5d1a7c"}], "stats": {"total": 3238, "additions": 1690, "deletions": 1548}, "files": [{"sha": "bb86de64e7af3bd3ef098c16d0f1d43bc748edcd", "filename": "src/doc/intro.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -428,7 +428,8 @@ fn main() {\n \n     let guards: Vec<_> = (0..3).map(|i| {\n         Thread::scoped(move || {\n-            for j in 0..3 { numbers[j] += 1 }\n+            numbers[i] += 1;\n+            println!(\"numbers[{}] is {}\", i, numbers[i]);\n         });\n     }).collect();\n }\n@@ -437,10 +438,12 @@ fn main() {\n It gives us this error:\n \n ```text\n-7:29: 9:10 error: cannot move out of captured outer variable in an `FnMut` closure\n-7         Thread::scoped(move || {\n-8             for j in 0..3 { numbers[j] += 1 }\n-9         });\n+7:25: 10:6 error: cannot move out of captured outer variable in an `FnMut` closure\n+7     Thread::scoped(move || {\n+8       numbers[i] += 1;\n+9       println!(\"numbers[{}] is {}\", i, numbers[i]);\n+10     });\n+error: aborting due to previous error\n ```\n \n It mentions that \"captured outer variable in an `FnMut` closure\"."}, {"sha": "e09922fd390a9b037cedaab162908449a42d2eb2", "filename": "src/doc/trpl/compound-data-types.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -6,8 +6,8 @@ strings, but next, let's talk about some more complicated ways of storing data.\n \n ## Tuples\n \n-The first compound data type we're going to talk about are called *tuples*.\n-Tuples are an ordered list of a fixed size. Like this:\n+The first compound data type we're going to talk about is called the *tuple*.\n+A tuple is an ordered list of fixed size. Like this:\n \n ```rust\n let x = (1, \"hello\");\n@@ -229,7 +229,7 @@ enum Character {\n ```\n \n An `enum` variant can be defined as most normal types. Below are some example\n-types have been listed which also would be allowed in an `enum`.\n+types which also would be allowed in an `enum`.\n \n ```rust\n struct Empty;"}, {"sha": "c524fae7f0a42e6272ce736cd5d54517702baa11", "filename": "src/etc/tidy.py", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,7 +13,7 @@\n import subprocess\n import re\n import os\n-from licenseck import *\n+from licenseck import check_license\n import snapshot\n \n err = 0\n@@ -22,13 +22,8 @@\n tab_flag = \"ignore-tidy-tab\"\n linelength_flag = \"ignore-tidy-linelength\"\n \n-# Be careful to support Python 2.4, 2.6, and 3.x here!\n-config_proc = subprocess.Popen([\"git\", \"config\", \"core.autocrlf\"],\n-                               stdout=subprocess.PIPE)\n-result = config_proc.communicate()[0]\n-\n-true = \"true\".encode('utf8')\n-autocrlf = result.strip() == true if result is not None else False\n+interesting_files = ['.rs', '.py', '.js', '.sh', '.c', '.h']\n+uninteresting_files = ['miniz.c', 'jquery', 'rust_android_dummy']\n \n \n def report_error_name_no(name, no, s):\n@@ -51,6 +46,34 @@ def do_license_check(name, contents):\n     if not check_license(name, contents):\n         report_error_name_no(name, 1, \"incorrect license\")\n \n+\n+def update_counts(current_name):\n+    global file_counts\n+    global count_other_linted_files\n+\n+    _, ext = os.path.splitext(current_name)\n+\n+    if ext in interesting_files:\n+        file_counts[ext] += 1\n+    else:\n+        count_other_linted_files += 1\n+\n+\n+def interesting_file(f):\n+    if any(x in f for x in uninteresting_files):\n+        return False\n+\n+    return any(os.path.splitext(f)[1] == ext for ext in interesting_files)\n+\n+\n+# Be careful to support Python 2.4, 2.6, and 3.x here!\n+config_proc = subprocess.Popen([\"git\", \"config\", \"core.autocrlf\"],\n+                               stdout=subprocess.PIPE)\n+result = config_proc.communicate()[0]\n+\n+true = \"true\".encode('utf8')\n+autocrlf = result.strip() == true if result is not None else False\n+\n current_name = \"\"\n current_contents = \"\"\n check_tab = True\n@@ -63,28 +86,16 @@ def do_license_check(name, contents):\n \n src_dir = sys.argv[1]\n \n-try:\n-    count_lines = 0\n-    count_non_blank_lines = 0\n+count_lines = 0\n+count_non_blank_lines = 0\n+count_other_linted_files = 0\n \n-    interesting_files = ['.rs', '.py', '.js', '.sh', '.c', '.h']\n+file_counts = {ext: 0 for ext in interesting_files}\n \n-    file_counts = {ext: 0 for ext in interesting_files}\n-    file_counts['other'] = 0\n-\n-    def update_counts(current_name):\n-        global file_counts\n-        _, ext = os.path.splitext(current_name)\n-\n-        if ext in file_counts:\n-            file_counts[ext] += 1\n-        else:\n-            file_counts['other'] += 1\n-\n-    all_paths = set()\n+all_paths = set()\n \n+try:\n     for (dirpath, dirnames, filenames) in os.walk(src_dir):\n-\n         # Skip some third-party directories\n         skippable_dirs = {\n             'src/jemalloc',\n@@ -103,14 +114,6 @@ def update_counts(current_name):\n         if any(d in dirpath for d in skippable_dirs):\n             continue\n \n-        def interesting_file(f):\n-            if \"miniz.c\" in f \\\n-            or \"jquery\" in f \\\n-            or \"rust_android_dummy\" in f:\n-                return False\n-\n-            return any(os.path.splitext(f)[1] == ext for ext in interesting_files)\n-\n         file_names = [os.path.join(dirpath, f) for f in filenames\n                       if interesting_file(f)\n                       and not f.endswith(\"_gen.rs\")\n@@ -196,10 +199,11 @@ def interesting_file(f):\n     report_err(\"UTF-8 decoding error \" + str(e))\n \n print\n-for ext in file_counts:\n-    print \"* linted \" + str(file_counts[ext]) + \" \" + ext + \" files\"\n-print \"* total lines of code: \" + str(count_lines)\n-print \"* total non-blank lines of code: \" + str(count_non_blank_lines)\n+for ext in sorted(file_counts, key=file_counts.get, reverse=True):\n+    print \"* linted {} {} files\".format(file_counts[ext], ext)\n+print \"* linted {} other files\".format(count_other_linted_files)\n+print \"* total lines of code: {}\".format(count_lines)\n+print \"* total non-blank lines of code: {}\".format(count_non_blank_lines)\n print\n \n sys.exit(err)"}, {"sha": "312076b1b13b2818d43480b32ffea2c96a097ef4", "filename": "src/etc/unicode.py", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -84,8 +84,8 @@ def fetch(f):\n         sys.stderr.write(\"cannot load %s\" % f)\n         exit(1)\n \n-def is_valid_unicode(n):\n-    return 0 <= n <= 0xD7FF or 0xE000 <= n <= 0x10FFFF\n+def is_surrogate(n):\n+    return 0xD800 <= n <= 0xDFFF\n \n def load_unicode_data(f):\n     fetch(f)\n@@ -96,19 +96,28 @@ def load_unicode_data(f):\n     canon_decomp = {}\n     compat_decomp = {}\n \n+    udict = {};\n+    range_start = -1;\n     for line in fileinput.input(f):\n-        fields = line.split(\";\")\n-        if len(fields) != 15:\n+        data = line.split(';');\n+        if len(data) != 15:\n             continue\n-        [code, name, gencat, combine, bidi,\n-         decomp, deci, digit, num, mirror,\n-         old, iso, upcase, lowcase, titlecase ] = fields\n-\n-        code_org = code\n-        code     = int(code, 16)\n-\n-        if not is_valid_unicode(code):\n+        cp = int(data[0], 16);\n+        if is_surrogate(cp):\n             continue\n+        if range_start >= 0:\n+            for i in xrange(range_start, cp):\n+                udict[i] = data;\n+            range_start = -1;\n+        if data[1].endswith(\", First>\"):\n+            range_start = cp;\n+            continue;\n+        udict[cp] = data;\n+\n+    for code in udict:\n+        [code_org, name, gencat, combine, bidi,\n+         decomp, deci, digit, num, mirror,\n+         old, iso, upcase, lowcase, titlecase ] = udict[code];\n \n         # generate char to char direct common and simple conversions\n         # uppercase to lowercase"}, {"sha": "6c3fd186cd423bdea36260cc459fe361602eb0e2", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -152,6 +152,12 @@ extern char *yytext;\n %precedence MOD_SEP\n %precedence RARROW ':'\n \n+// In where clauses, \"for\" should have greater precedence when used as\n+// a higher ranked constraint than when used as the beginning of a\n+// for_in_type (which is a ty)\n+%precedence FORTYPE\n+%precedence FOR\n+\n // Binops & unops, and their precedences\n %precedence BOX\n %precedence BOXPLACE\n@@ -582,6 +588,14 @@ item_impl\n {\n   $$ = mk_node(\"ItemImplNeg\", 7, $1, $3, $5, $7, $8, $10, $11);\n }\n+| maybe_unsafe IMPL generic_params trait_ref FOR DOTDOT '{' '}'\n+{\n+  $$ = mk_node(\"ItemImplDefault\", 3, $1, $3, $4);\n+}\n+| maybe_unsafe IMPL generic_params '!' trait_ref FOR DOTDOT '{' '}'\n+{\n+  $$ = mk_node(\"ItemImplDefaultNeg\", 3, $1, $3, $4);\n+}\n ;\n \n maybe_impl_items\n@@ -769,10 +783,14 @@ where_predicates\n ;\n \n where_predicate\n-: lifetime ':' bounds    { $$ = mk_node(\"WherePredicate\", 2, $1, $3); }\n-| ty ':' ty_param_bounds { $$ = mk_node(\"WherePredicate\", 2, $1, $3); }\n+: maybe_for_lifetimes lifetime ':' bounds    { $$ = mk_node(\"WherePredicate\", 3, $1, $2, $4); }\n+| maybe_for_lifetimes ty ':' ty_param_bounds { $$ = mk_node(\"WherePredicate\", 3, $1, $2, $4); }\n ;\n \n+maybe_for_lifetimes\n+: FOR '<' lifetimes '>' { $$ = mk_none(); }\n+| %prec FORTYPE %empty  { $$ = mk_none(); }\n+\n ty_params\n : ty_param               { $$ = mk_node(\"TyParams\", 1, $1); }\n | ty_params ',' ty_param { $$ = ext_node($1, 1, $3); }\n@@ -1024,7 +1042,8 @@ ty_qualified_path_and_generic_values\n }\n | ty_qualified_path ',' ty_sums maybe_bindings\n {\n-  $$ = mk_node(\"GenericValues\", 3, mk_none(), ext_node(mk_node(\"TySums\", 1, $1), 1, $3), $4); }\n+  $$ = mk_node(\"GenericValues\", 3, mk_none(), mk_node(\"TySums\", 2, $1, $3), $4);\n+}\n ;\n \n ty_qualified_path\n@@ -1513,31 +1532,35 @@ nonblock_prefix_expr\n ;\n \n expr_qualified_path\n-: '<' ty_sum AS trait_ref '>' MOD_SEP ident\n+: '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 3, $2, $4, $7);\n+  $$ = mk_node(\"ExprQualifiedPath\", 3, $2, $3, $6);\n }\n-| '<' ty_sum AS trait_ref '>' MOD_SEP ident generic_args\n+| '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 4, $2, $4, $7, $8);\n+  $$ = mk_node(\"ExprQualifiedPath\", 4, $2, $3, $6, $7);\n }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident AS trait_ref '>' MOD_SEP ident\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 3, mk_node(\"ExprQualifiedPath\", 3, $2, $4, $7), $9, $12);\n+  $$ = mk_node(\"ExprQualifiedPath\", 3, mk_node(\"ExprQualifiedPath\", 3, $2, $3, $6), $7, $10);\n }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident generic_args AS trait_ref '>' MOD_SEP ident\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args maybe_as_trait_ref '>' MOD_SEP ident\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 3, mk_node(\"ExprQualifiedPath\", 4, $2, $4, $7, $8), $10, $13);\n+  $$ = mk_node(\"ExprQualifiedPath\", 3, mk_node(\"ExprQualifiedPath\", 4, $2, $3, $6, $7), $8, $11);\n }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident AS trait_ref '>' MOD_SEP ident generic_args\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident generic_args\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 3, $2, $4, $7), $9, $12, $13);\n+  $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 3, $2, $3, $6), $7, $10, $11);\n }\n-| SHL ty_sum AS trait_ref '>' MOD_SEP ident generic_args AS trait_ref '>' MOD_SEP ident generic_args\n+| SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args maybe_as_trait_ref '>' MOD_SEP ident generic_args\n {\n-  $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 4, $2, $4, $7, $8), $10, $13, $14);\n+  $$ = mk_node(\"ExprQualifiedPath\", 4, mk_node(\"ExprQualifiedPath\", 4, $2, $3, $6, $7), $8, $11, $12);\n }\n \n+maybe_as_trait_ref\n+: AS trait_ref { $$ = $2; }\n+| %empty       { $$ = mk_none(); }\n+;\n \n lambda_expr\n : %prec LAMBDA"}, {"sha": "e24a1a025a1f214e40eedafe3b9c7b1d69937922", "filename": "src/jemalloc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fjemalloc?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1 +1 @@\n-Subproject commit b001609960ca33047e5cbc5a231c1e24b6041d4b\n+Subproject commit e24a1a025a1f214e40eedafe3b9c7b1d69937922"}, {"sha": "9351b11010030baed4f8e31a9097fc3b0107ca75", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -42,7 +42,7 @@\n //! }\n //! ```\n //!\n-//! This will print `Cons(1i32, Box(Cons(2i32, Box(Nil))))`.\n+//! This will print `Cons(1, Box(Cons(2, Box(Nil))))`.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "bb1ff9428a7c01889b89797073a43df8189529bf", "filename": "src/liballoc/boxed_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -72,13 +72,13 @@ fn test_show() {\n #[test]\n fn deref() {\n     fn homura<T: Deref<Target=i32>>(_: T) { }\n-    homura(Box::new(765i32));\n+    homura(Box::new(765));\n }\n \n #[test]\n fn raw_sized() {\n     unsafe {\n-        let x = Box::new(17i32);\n+        let x = Box::new(17);\n         let p = boxed::into_raw(x);\n         assert_eq!(17, *p);\n         *p = 19;"}, {"sha": "7524fb6cf18a65b4effbc2f0585afbab13ab7ecc", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -118,11 +118,11 @@ fn match_words <'a,'b>(a: &'a BitVec, b: &'b BitVec) -> (MatchWords<'a>, MatchWo\n \n     // have to uselessly pretend to pad the longer one for type matching\n     if a_len < b_len {\n-        (a.blocks().enumerate().chain(iter::repeat(0u32).enumerate().take(b_len).skip(a_len)),\n-         b.blocks().enumerate().chain(iter::repeat(0u32).enumerate().take(0).skip(0)))\n+        (a.blocks().enumerate().chain(iter::repeat(0).enumerate().take(b_len).skip(a_len)),\n+         b.blocks().enumerate().chain(iter::repeat(0).enumerate().take(0).skip(0)))\n     } else {\n-        (a.blocks().enumerate().chain(iter::repeat(0u32).enumerate().take(0).skip(0)),\n-         b.blocks().enumerate().chain(iter::repeat(0u32).enumerate().take(a_len).skip(b_len)))\n+        (a.blocks().enumerate().chain(iter::repeat(0).enumerate().take(0).skip(0)),\n+         b.blocks().enumerate().chain(iter::repeat(0).enumerate().take(a_len).skip(b_len)))\n     }\n }\n \n@@ -199,7 +199,7 @@ fn blocks_for_bits(bits: usize) -> usize {\n /// Computes the bitmask for the final word of the vector\n fn mask_for_bits(bits: usize) -> u32 {\n     // Note especially that a perfect multiple of u32::BITS should mask all 1s.\n-    !0u32 >> (u32::BITS as usize - bits % u32::BITS as usize) % u32::BITS as usize\n+    !0 >> (u32::BITS as usize - bits % u32::BITS as usize) % u32::BITS as usize\n }\n \n impl BitVec {\n@@ -275,7 +275,7 @@ impl BitVec {\n     pub fn from_elem(nbits: usize, bit: bool) -> BitVec {\n         let nblocks = blocks_for_bits(nbits);\n         let mut bit_vec = BitVec {\n-            storage: repeat(if bit { !0u32 } else { 0u32 }).take(nblocks).collect(),\n+            storage: repeat(if bit { !0 } else { 0 }).take(nblocks).collect(),\n             nbits: nbits\n         };\n         bit_vec.fix_last_block();\n@@ -330,7 +330,7 @@ impl BitVec {\n         }\n \n         if extra_bytes > 0 {\n-            let mut last_word = 0u32;\n+            let mut last_word = 0;\n             for (i, &byte) in bytes[complete_words*4..].iter().enumerate() {\n                 last_word |= (reverse_bits(byte) as u32) << (i * 8);\n             }\n@@ -431,7 +431,7 @@ impl BitVec {\n     /// ```\n     #[inline]\n     pub fn set_all(&mut self) {\n-        for w in &mut self.storage { *w = !0u32; }\n+        for w in &mut self.storage { *w = !0; }\n         self.fix_last_block();\n     }\n \n@@ -566,12 +566,12 @@ impl BitVec {\n     /// assert_eq!(bv.all(), false);\n     /// ```\n     pub fn all(&self) -> bool {\n-        let mut last_word = !0u32;\n+        let mut last_word = !0;\n         // Check that every block but the last is all-ones...\n         self.blocks().all(|elem| {\n             let tmp = last_word;\n             last_word = elem;\n-            tmp == !0u32\n+            tmp == !0\n         // and then check the last one has enough ones\n         }) && (last_word == mask_for_bits(self.nbits))\n     }\n@@ -912,7 +912,7 @@ impl BitVec {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n-        for w in &mut self.storage { *w = 0u32; }\n+        for w in &mut self.storage { *w = 0; }\n     }\n }\n \n@@ -2313,7 +2313,7 @@ mod tests {\n \n         assert_eq!(bit_vec.iter().collect::<Vec<bool>>(), bools);\n \n-        let long: Vec<_> = (0i32..10000).map(|i| i % 2 == 0).collect();\n+        let long: Vec<_> = (0..10000).map(|i| i % 2 == 0).collect();\n         let bit_vec: BitVec = long.iter().map(|n| *n).collect();\n         assert_eq!(bit_vec.iter().collect::<Vec<bool>>(), long)\n     }"}, {"sha": "c88be80679da45f888da4215f7b72757ea680b15", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -226,7 +226,7 @@\n //! Some examples of the output from both traits:\n //!\n //! ```\n-//! assert_eq!(format!(\"{} {:?}\", 3i32, 4i32), \"3 4\");\n+//! assert_eq!(format!(\"{} {:?}\", 3, 4), \"3 4\");\n //! assert_eq!(format!(\"{} {:?}\", 'a', 'b'), \"a 'b'\");\n //! assert_eq!(format!(\"{} {:?}\", \"foo\\n\", \"bar\\n\"), \"foo\\n \\\"bar\\\\n\\\"\");\n //! ```"}, {"sha": "abcb996e3ede1478ee7498d9917d8b29216b549b", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -2639,7 +2639,7 @@ mod tests {\n     #[test]\n     fn test_bytes_set_memory() {\n         use slice::bytes::MutableByteVector;\n-        let mut values = [1u8,2,3,4,5];\n+        let mut values = [1,2,3,4,5];\n         values[0..5].set_memory(0xAB);\n         assert!(values == [0xAB, 0xAB, 0xAB, 0xAB, 0xAB]);\n         values[2..4].set_memory(0xFF);\n@@ -2809,26 +2809,26 @@ mod tests {\n     fn test_mut_chunks() {\n         use core::iter::ExactSizeIterator;\n \n-        let mut v = [0u8, 1, 2, 3, 4, 5, 6];\n+        let mut v = [0, 1, 2, 3, 4, 5, 6];\n         assert_eq!(v.chunks_mut(2).len(), 4);\n         for (i, chunk) in v.chunks_mut(3).enumerate() {\n             for x in chunk {\n                 *x = i as u8;\n             }\n         }\n-        let result = [0u8, 0, 0, 1, 1, 1, 2];\n+        let result = [0, 0, 0, 1, 1, 1, 2];\n         assert!(v == result);\n     }\n \n     #[test]\n     fn test_mut_chunks_rev() {\n-        let mut v = [0u8, 1, 2, 3, 4, 5, 6];\n+        let mut v = [0, 1, 2, 3, 4, 5, 6];\n         for (i, chunk) in v.chunks_mut(3).rev().enumerate() {\n             for x in chunk {\n                 *x = i as u8;\n             }\n         }\n-        let result = [2u8, 2, 2, 1, 1, 1, 0];\n+        let result = [2, 2, 2, 1, 1, 1, 0];\n         assert!(v == result);\n     }\n "}, {"sha": "19c085df2c43d8f5f2bae6a08c09b91742f8bc0c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -10,12 +10,15 @@\n //\n // ignore-lexer-test FIXME #15679\n \n-//! Unicode string manipulation (the `str` type).\n+//! Unicode string manipulation (the [`str`](../primitive.str.html) type).\n //!\n-//! Rust's `str` type is one of the core primitive types of the language. `&str` is the borrowed\n-//! string type. This type of string can only be created from other strings, unless it is a static\n-//! string (see below). As the word \"borrowed\" implies, this type of string is owned elsewhere, and\n-//! this string cannot be moved out of.\n+//! Rust's [`str`](../primitive.str.html) type is one of the core primitive types of the\n+//! language. `&str` is the borrowed string type. This type of string can only be created\n+//! from other strings, unless it is a `&'static str` (see below). It is not possible to\n+//! move out of borrowed strings because they are owned elsewhere.\n+//!\n+//! Basic operations are implemented directly by the compiler, but more advanced operations are\n+//! defined on the [`StrExt`](trait.StrExt.html) trait.\n //!\n //! # Examples\n //!\n@@ -383,7 +386,7 @@ macro_rules! utf8_first_byte {\n \n // return the value of $ch updated with continuation byte $byte\n macro_rules! utf8_acc_cont_byte {\n-    ($ch:expr, $byte:expr) => (($ch << 6) | ($byte & 63u8) as u32)\n+    ($ch:expr, $byte:expr) => (($ch << 6) | ($byte & 63) as u32)\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2300,8 +2303,8 @@ mod tests {\n \n     #[test]\n     fn test_chars_decoding() {\n-        let mut bytes = [0u8; 4];\n-        for c in (0u32..0x110000).filter_map(|c| ::core::char::from_u32(c)) {\n+        let mut bytes = [0; 4];\n+        for c in (0..0x110000).filter_map(|c| ::core::char::from_u32(c)) {\n             let len = c.encode_utf8(&mut bytes).unwrap_or(0);\n             let s = ::core::str::from_utf8(&bytes[..len]).unwrap();\n             if Some(c) != s.chars().next() {\n@@ -2312,8 +2315,8 @@ mod tests {\n \n     #[test]\n     fn test_chars_rev_decoding() {\n-        let mut bytes = [0u8; 4];\n-        for c in (0u32..0x110000).filter_map(|c| ::core::char::from_u32(c)) {\n+        let mut bytes = [0; 4];\n+        for c in (0..0x110000).filter_map(|c| ::core::char::from_u32(c)) {\n             let len = c.encode_utf8(&mut bytes).unwrap_or(0);\n             let s = ::core::str::from_utf8(&bytes[..len]).unwrap();\n             if Some(c) != s.chars().rev().next() {"}, {"sha": "d6ec8f0d979e0cde74402f03afdcc9dfa10cdb3f", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -153,7 +153,7 @@ impl String {\n             }\n         }\n \n-        const TAG_CONT_U8: u8 = 128u8;\n+        const TAG_CONT_U8: u8 = 128;\n         const REPLACEMENT: &'static [u8] = b\"\\xEF\\xBF\\xBD\"; // U+FFFD in UTF-8\n         let total = v.len();\n         fn unsafe_get(xs: &[u8], i: usize) -> u8 {\n@@ -195,14 +195,14 @@ impl String {\n                 }\n             })}\n \n-            if byte < 128u8 {\n+            if byte < 128 {\n                 // subseqidx handles this\n             } else {\n                 let w = unicode_str::utf8_char_width(byte);\n \n                 match w {\n                     2 => {\n-                        if safe_get(v, i, total) & 192u8 != TAG_CONT_U8 {\n+                        if safe_get(v, i, total) & 192 != TAG_CONT_U8 {\n                             error!();\n                             continue;\n                         }\n@@ -220,7 +220,7 @@ impl String {\n                             }\n                         }\n                         i += 1;\n-                        if safe_get(v, i, total) & 192u8 != TAG_CONT_U8 {\n+                        if safe_get(v, i, total) & 192 != TAG_CONT_U8 {\n                             error!();\n                             continue;\n                         }\n@@ -237,12 +237,12 @@ impl String {\n                             }\n                         }\n                         i += 1;\n-                        if safe_get(v, i, total) & 192u8 != TAG_CONT_U8 {\n+                        if safe_get(v, i, total) & 192 != TAG_CONT_U8 {\n                             error!();\n                             continue;\n                         }\n                         i += 1;\n-                        if safe_get(v, i, total) & 192u8 != TAG_CONT_U8 {\n+                        if safe_get(v, i, total) & 192 != TAG_CONT_U8 {\n                             error!();\n                             continue;\n                         }\n@@ -1084,40 +1084,40 @@ mod tests {\n     fn test_from_utf16() {\n         let pairs =\n             [(String::from_str(\"\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\\n\"),\n-              vec![0xd800_u16, 0xdf45_u16, 0xd800_u16, 0xdf3f_u16,\n-                0xd800_u16, 0xdf3b_u16, 0xd800_u16, 0xdf46_u16,\n-                0xd800_u16, 0xdf39_u16, 0xd800_u16, 0xdf3b_u16,\n-                0xd800_u16, 0xdf30_u16, 0x000a_u16]),\n+              vec![0xd800, 0xdf45, 0xd800, 0xdf3f,\n+                0xd800, 0xdf3b, 0xd800, 0xdf46,\n+                0xd800, 0xdf39, 0xd800, 0xdf3b,\n+                0xd800, 0xdf30, 0x000a]),\n \n              (String::from_str(\"\ud801\udc12\ud801\udc49\ud801\udc2e\ud801\udc40\ud801\udc32\ud801\udc4b \ud801\udc0f\ud801\udc32\ud801\udc4d\\n\"),\n-              vec![0xd801_u16, 0xdc12_u16, 0xd801_u16,\n-                0xdc49_u16, 0xd801_u16, 0xdc2e_u16, 0xd801_u16,\n-                0xdc40_u16, 0xd801_u16, 0xdc32_u16, 0xd801_u16,\n-                0xdc4b_u16, 0x0020_u16, 0xd801_u16, 0xdc0f_u16,\n-                0xd801_u16, 0xdc32_u16, 0xd801_u16, 0xdc4d_u16,\n-                0x000a_u16]),\n+              vec![0xd801, 0xdc12, 0xd801,\n+                0xdc49, 0xd801, 0xdc2e, 0xd801,\n+                0xdc40, 0xd801, 0xdc32, 0xd801,\n+                0xdc4b, 0x0020, 0xd801, 0xdc0f,\n+                0xd801, 0xdc32, 0xd801, 0xdc4d,\n+                0x000a]),\n \n              (String::from_str(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u00b7\ud800\udf0c\ud800\udf04\ud800\udf15\ud800\udf04\ud800\udf0b\ud800\udf09\ud800\udf11\\n\"),\n-              vec![0xd800_u16, 0xdf00_u16, 0xd800_u16, 0xdf16_u16,\n-                0xd800_u16, 0xdf0b_u16, 0xd800_u16, 0xdf04_u16,\n-                0xd800_u16, 0xdf11_u16, 0xd800_u16, 0xdf09_u16,\n-                0x00b7_u16, 0xd800_u16, 0xdf0c_u16, 0xd800_u16,\n-                0xdf04_u16, 0xd800_u16, 0xdf15_u16, 0xd800_u16,\n-                0xdf04_u16, 0xd800_u16, 0xdf0b_u16, 0xd800_u16,\n-                0xdf09_u16, 0xd800_u16, 0xdf11_u16, 0x000a_u16 ]),\n+              vec![0xd800, 0xdf00, 0xd800, 0xdf16,\n+                0xd800, 0xdf0b, 0xd800, 0xdf04,\n+                0xd800, 0xdf11, 0xd800, 0xdf09,\n+                0x00b7, 0xd800, 0xdf0c, 0xd800,\n+                0xdf04, 0xd800, 0xdf15, 0xd800,\n+                0xdf04, 0xd800, 0xdf0b, 0xd800,\n+                0xdf09, 0xd800, 0xdf11, 0x000a ]),\n \n              (String::from_str(\"\ud801\udc8b\ud801\udc98\ud801\udc88\ud801\udc91\ud801\udc9b\ud801\udc92 \ud801\udc95\ud801\udc93 \ud801\udc88\ud801\udc9a\ud801\udc8d \ud801\udc8f\ud801\udc9c\ud801\udc92\ud801\udc96\ud801\udc86 \ud801\udc95\ud801\udc86\\n\"),\n-              vec![0xd801_u16, 0xdc8b_u16, 0xd801_u16, 0xdc98_u16,\n-                0xd801_u16, 0xdc88_u16, 0xd801_u16, 0xdc91_u16,\n-                0xd801_u16, 0xdc9b_u16, 0xd801_u16, 0xdc92_u16,\n-                0x0020_u16, 0xd801_u16, 0xdc95_u16, 0xd801_u16,\n-                0xdc93_u16, 0x0020_u16, 0xd801_u16, 0xdc88_u16,\n-                0xd801_u16, 0xdc9a_u16, 0xd801_u16, 0xdc8d_u16,\n-                0x0020_u16, 0xd801_u16, 0xdc8f_u16, 0xd801_u16,\n-                0xdc9c_u16, 0xd801_u16, 0xdc92_u16, 0xd801_u16,\n-                0xdc96_u16, 0xd801_u16, 0xdc86_u16, 0x0020_u16,\n-                0xd801_u16, 0xdc95_u16, 0xd801_u16, 0xdc86_u16,\n-                0x000a_u16 ]),\n+              vec![0xd801, 0xdc8b, 0xd801, 0xdc98,\n+                0xd801, 0xdc88, 0xd801, 0xdc91,\n+                0xd801, 0xdc9b, 0xd801, 0xdc92,\n+                0x0020, 0xd801, 0xdc95, 0xd801,\n+                0xdc93, 0x0020, 0xd801, 0xdc88,\n+                0xd801, 0xdc9a, 0xd801, 0xdc8d,\n+                0x0020, 0xd801, 0xdc8f, 0xd801,\n+                0xdc9c, 0xd801, 0xdc92, 0xd801,\n+                0xdc96, 0xd801, 0xdc86, 0x0020,\n+                0xd801, 0xdc95, 0xd801, 0xdc86,\n+                0x000a ]),\n              // Issue #12318, even-numbered non-BMP planes\n              (String::from_str(\"\\u{20000}\"),\n               vec![0xD840, 0xDC00])];\n@@ -1303,7 +1303,7 @@ mod tests {\n         assert_eq!(1.to_string(), \"1\");\n         assert_eq!((-1).to_string(), \"-1\");\n         assert_eq!(200.to_string(), \"200\");\n-        assert_eq!(2u8.to_string(), \"2\");\n+        assert_eq!(2.to_string(), \"2\");\n         assert_eq!(true.to_string(), \"true\");\n         assert_eq!(false.to_string(), \"false\");\n         assert_eq!((\"hi\".to_string()).to_string(), \"hi\");\n@@ -1421,7 +1421,7 @@ mod tests {\n \n     #[bench]\n     fn from_utf8_lossy_100_invalid(b: &mut Bencher) {\n-        let s = repeat(0xf5u8).take(100).collect::<Vec<_>>();\n+        let s = repeat(0xf5).take(100).collect::<Vec<_>>();\n         b.iter(|| {\n             let _ = String::from_utf8_lossy(&s);\n         });"}, {"sha": "973070677d8ee9e9e2fb8e636fa608b6a9764e7d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -22,13 +22,13 @@ use option::Option;\n use slice::SliceExt;\n \n // UTF-8 ranges and tags for encoding characters\n-const TAG_CONT: u8    = 0b1000_0000u8;\n-const TAG_TWO_B: u8   = 0b1100_0000u8;\n-const TAG_THREE_B: u8 = 0b1110_0000u8;\n-const TAG_FOUR_B: u8  = 0b1111_0000u8;\n-const MAX_ONE_B: u32   =     0x80u32;\n-const MAX_TWO_B: u32   =    0x800u32;\n-const MAX_THREE_B: u32 =  0x10000u32;\n+const TAG_CONT: u8    = 0b1000_0000;\n+const TAG_TWO_B: u8   = 0b1100_0000;\n+const TAG_THREE_B: u8 = 0b1110_0000;\n+const TAG_FOUR_B: u8  = 0b1111_0000;\n+const MAX_ONE_B: u32   =     0x80;\n+const MAX_TWO_B: u32   =    0x800;\n+const MAX_THREE_B: u32 =  0x10000;\n \n /*\n     Lu  Uppercase_Letter        an uppercase letter\n@@ -413,7 +413,7 @@ impl CharExt for char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn len_utf16(self) -> usize {\n         let ch = self as u32;\n-        if (ch & 0xFFFF_u32) == ch { 1 } else { 2 }\n+        if (ch & 0xFFFF) == ch { 1 } else { 2 }\n     }\n \n     #[inline]\n@@ -444,19 +444,19 @@ pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> Option<usize> {\n         dst[0] = code as u8;\n         Some(1)\n     } else if code < MAX_TWO_B && dst.len() >= 2 {\n-        dst[0] = (code >> 6 & 0x1F_u32) as u8 | TAG_TWO_B;\n-        dst[1] = (code & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[0] = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n+        dst[1] = (code & 0x3F) as u8 | TAG_CONT;\n         Some(2)\n     } else if code < MAX_THREE_B && dst.len() >= 3  {\n-        dst[0] = (code >> 12 & 0x0F_u32) as u8 | TAG_THREE_B;\n-        dst[1] = (code >>  6 & 0x3F_u32) as u8 | TAG_CONT;\n-        dst[2] = (code & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[0] = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n+        dst[1] = (code >>  6 & 0x3F) as u8 | TAG_CONT;\n+        dst[2] = (code & 0x3F) as u8 | TAG_CONT;\n         Some(3)\n     } else if dst.len() >= 4 {\n-        dst[0] = (code >> 18 & 0x07_u32) as u8 | TAG_FOUR_B;\n-        dst[1] = (code >> 12 & 0x3F_u32) as u8 | TAG_CONT;\n-        dst[2] = (code >>  6 & 0x3F_u32) as u8 | TAG_CONT;\n-        dst[3] = (code & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[0] = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n+        dst[1] = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n+        dst[2] = (code >>  6 & 0x3F) as u8 | TAG_CONT;\n+        dst[3] = (code & 0x3F) as u8 | TAG_CONT;\n         Some(4)\n     } else {\n         None\n@@ -472,15 +472,15 @@ pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> Option<usize> {\n #[unstable(feature = \"core\")]\n pub fn encode_utf16_raw(mut ch: u32, dst: &mut [u16]) -> Option<usize> {\n     // Marked #[inline] to allow llvm optimizing it away\n-    if (ch & 0xFFFF_u32) == ch  && dst.len() >= 1 {\n+    if (ch & 0xFFFF) == ch  && dst.len() >= 1 {\n         // The BMP falls through (assuming non-surrogate, as it should)\n         dst[0] = ch as u16;\n         Some(1)\n     } else if dst.len() >= 2 {\n         // Supplementary planes break into surrogates.\n-        ch -= 0x1_0000_u32;\n-        dst[0] = 0xD800_u16 | ((ch >> 10) as u16);\n-        dst[1] = 0xDC00_u16 | ((ch as u16) & 0x3FF_u16);\n+        ch -= 0x1_0000;\n+        dst[0] = 0xD800 | ((ch >> 10) as u16);\n+        dst[1] = 0xDC00 | ((ch as u16) & 0x3FF);\n         Some(2)\n     } else {\n         None"}, {"sha": "0df04c296c8aee771002f1438487a21355aef03e", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -123,13 +123,13 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n     // For an f64 the exponent is in the range of [-1022, 1023] for base 2, so\n     // we may have up to that many digits. Give ourselves some extra wiggle room\n     // otherwise as well.\n-    let mut buf = [0u8; 1536];\n+    let mut buf = [0; 1536];\n     let mut end = 0;\n     let radix_gen: T = cast(radix as int).unwrap();\n \n     let (num, exp) = match exp_format {\n-        ExpNone => (num, 0i32),\n-        ExpDec if num == _0 => (num, 0i32),\n+        ExpNone => (num, 0),\n+        ExpDec if num == _0 => (num, 0),\n         ExpDec => {\n             let (exp, exp_base) = match exp_format {\n                 ExpDec => (num.abs().log10().floor(), cast::<f64, T>(10.0f64).unwrap()),"}, {"sha": "e640bf02f5a32adfd11fe3b53d13fab0271a470e", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -565,7 +565,7 @@ impl<'a> Formatter<'a> {\n             Alignment::Center => (padding / 2, (padding + 1) / 2),\n         };\n \n-        let mut fill = [0u8; 4];\n+        let mut fill = [0; 4];\n         let len = self.fill.encode_utf8(&mut fill).unwrap_or(0);\n         let fill = unsafe { str::from_utf8_unchecked(&fill[..len]) };\n \n@@ -689,7 +689,7 @@ impl Debug for char {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        let mut utf8 = [0u8; 4];\n+        let mut utf8 = [0; 4];\n         let amt = self.encode_utf8(&mut utf8).unwrap_or(0);\n         let s: &str = unsafe { mem::transmute(&utf8[..amt]) };\n         Display::fmt(s, f)"}, {"sha": "b3f2302bb3e0741418ed6ef5be380603b855f9b8", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -38,7 +38,7 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = Int::zero();\n         let is_positive = x >= zero;\n-        let mut buf = [0u8; 64];\n+        let mut buf = [0; 64];\n         let mut curr = buf.len();\n         let base = cast(self.base()).unwrap();\n         if is_positive {"}, {"sha": "bd1516e0cfcc8b49e57334af9a99036b14a5cc4f", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -60,7 +60,7 @@ macro_rules! u8to64_le {\n     ($buf:expr, $i:expr, $len:expr) =>\n     ({\n         let mut t = 0;\n-        let mut out = 0u64;\n+        let mut out = 0;\n         while t < $len {\n             out |= ($buf[t+$i] as u64) << t*8;\n             t += 1;"}, {"sha": "c6fc8ba5867abd7612a11caff90adbdf662fc158", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -230,7 +230,7 @@ extern \"rust-intrinsic\" {\n     /// use std::mem;\n     ///\n     /// let v: &[u8] = unsafe { mem::transmute(\"L\") };\n-    /// assert!(v == [76u8]);\n+    /// assert!(v == [76]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn transmute<T,U>(e: T) -> U;"}, {"sha": "16e652fcc9a8aa433227c9fb122f8093c386fa69", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1149,7 +1149,7 @@ pub trait AdditiveIterator<A> {\n     /// ```\n     /// use std::iter::AdditiveIterator;\n     ///\n-    /// let a = [1i32, 2, 3, 4, 5];\n+    /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter().cloned();\n     /// assert!(it.sum() == 15);\n     /// ```"}, {"sha": "f56206e8782d2e739075500fbc25e717f62d879e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -227,7 +227,7 @@ macro_rules! writeln {\n ///\n /// ```rust\n /// fn divide_by_three(x: u32) -> u32 { // one of the poorest implementations of x/3\n-///     for i in std::iter::count(0_u32, 1) {\n+///     for i in std::iter::count(0, 1) {\n ///         if 3*i < i { panic!(\"u32 overflow\"); }\n ///         if x < 3*i { return i-1; }\n ///     }"}, {"sha": "4116d8be9fb5c034dddf16bf96a088c7745870ca", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -913,6 +913,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Index<Idx: ?Sized> {\n     /// The returned type after indexing\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output: ?Sized;\n \n     /// The method for the indexing (`Foo[Bar]`) operation"}, {"sha": "5343cdaaf088c52aa1631b1b3804c166544b4af1", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -385,7 +385,7 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let k = 10i32;\n+    /// let k = 10;\n     /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);\n     /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);\n     /// ```"}, {"sha": "1d4b81512dda8e24213ef74ebf56d8bb965ac6cb", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1119,9 +1119,9 @@ pub struct CharRange {\n }\n \n /// Mask of the value bits of a continuation byte\n-const CONT_MASK: u8 = 0b0011_1111u8;\n+const CONT_MASK: u8 = 0b0011_1111;\n /// Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte\n-const TAG_CONT_U8: u8 = 0b1000_0000u8;\n+const TAG_CONT_U8: u8 = 0b1000_0000;\n \n /*\n Section: Trait implementations\n@@ -1568,7 +1568,7 @@ impl StrExt for str {\n         if index == self.len() { return true; }\n         match self.as_bytes().get(index) {\n             None => false,\n-            Some(&b) => b < 128u8 || b >= 192u8,\n+            Some(&b) => b < 128 || b >= 192,\n         }\n     }\n \n@@ -1680,7 +1680,7 @@ impl StrExt for str {\n #[inline]\n #[unstable(feature = \"core\")]\n pub fn char_range_at_raw(bytes: &[u8], i: usize) -> (u32, usize) {\n-    if bytes[i] < 128u8 {\n+    if bytes[i] < 128 {\n         return (bytes[i] as u32, i + 1);\n     }\n "}, {"sha": "46d1f7ff3ae095772c7ef0d561224af10afb7ab1", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -165,7 +165,7 @@ fn test_escape_unicode() {\n #[test]\n fn test_encode_utf8() {\n     fn check(input: char, expect: &[u8]) {\n-        let mut buf = [0u8; 4];\n+        let mut buf = [0; 4];\n         let n = input.encode_utf8(&mut buf).unwrap_or(0);\n         assert_eq!(&buf[..n], expect);\n     }\n@@ -179,7 +179,7 @@ fn test_encode_utf8() {\n #[test]\n fn test_encode_utf16() {\n     fn check(input: char, expect: &[u16]) {\n-        let mut buf = [0u16; 2];\n+        let mut buf = [0; 2];\n         let n = input.encode_utf16(&mut buf).unwrap_or(0);\n         assert_eq!(&buf[..n], expect);\n     }"}, {"sha": "5c11f0196aeb8d7cdf377fe5d44fb573ac5f642d", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -62,10 +62,10 @@ fn test_writer_hasher() {\n     // FIXME (#18283) Enable test\n     //let s: Box<str> = box \"a\";\n     //assert_eq!(hasher.hash(& s), 97 + 0xFF);\n-    let cs: &[u8] = &[1u8, 2u8, 3u8];\n+    let cs: &[u8] = &[1, 2, 3];\n     assert_eq!(hash(& cs), 9);\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-    let cs: Box<[u8]> = Box::new([1u8, 2u8, 3u8]);\n+    let cs: Box<[u8]> = Box::new([1, 2, 3]);\n     assert_eq!(hash(& cs), 9);\n \n     // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>"}, {"sha": "8289d06d04c61b2541ac73b79e6063e8d50881c7", "filename": "src/libcoretest/hash/sip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fsip.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -100,8 +100,8 @@ fn test_siphash() {\n         [ 0x72, 0x45, 0x06, 0xeb, 0x4c, 0x32, 0x8a, 0x95, ]\n     ];\n \n-    let k0 = 0x_07_06_05_04_03_02_01_00_u64;\n-    let k1 = 0x_0f_0e_0d_0c_0b_0a_09_08_u64;\n+    let k0 = 0x_07_06_05_04_03_02_01_00;\n+    let k1 = 0x_0f_0e_0d_0c_0b_0a_09_08;\n     let mut buf = Vec::new();\n     let mut t = 0;\n     let mut state_inc = SipState::new_with_keys(k0, k1);\n@@ -230,8 +230,8 @@ fn test_hash_no_concat_alias() {\n     assert!(s != t && t != u);\n     assert!(hash(&s) != hash(&t) && hash(&s) != hash(&u));\n \n-    let v: (&[u8], &[u8], &[u8]) = (&[1u8], &[0u8, 0], &[0u8]);\n-    let w: (&[u8], &[u8], &[u8]) = (&[1u8, 0, 0, 0], &[], &[]);\n+    let v: (&[u8], &[u8], &[u8]) = (&[1], &[0, 0], &[0]);\n+    let w: (&[u8], &[u8], &[u8]) = (&[1, 0, 0, 0], &[], &[]);\n \n     assert!(v != w);\n     assert!(hash(&v) != hash(&w));"}, {"sha": "91d1ea2747657efb1d8ae45ee370981354a7f79b", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -778,17 +778,17 @@ fn test_range_step() {\n     assert_eq!(range_step(0, 20, 5).collect::<Vec<int>>(), [0, 5, 10, 15]);\n     assert_eq!(range_step(20, 0, -5).collect::<Vec<int>>(), [20, 15, 10, 5]);\n     assert_eq!(range_step(20, 0, -6).collect::<Vec<int>>(), [20, 14, 8, 2]);\n-    assert_eq!(range_step(200u8, 255, 50).collect::<Vec<u8>>(), [200u8, 250]);\n-    assert_eq!(range_step(200i, -5, 1).collect::<Vec<int>>(), []);\n-    assert_eq!(range_step(200i, 200, 1).collect::<Vec<int>>(), []);\n+    assert_eq!(range_step(200, 255, 50).collect::<Vec<u8>>(), [200, 250]);\n+    assert_eq!(range_step(200, -5, 1).collect::<Vec<int>>(), []);\n+    assert_eq!(range_step(200, 200, 1).collect::<Vec<int>>(), []);\n }\n \n #[test]\n fn test_range_step_inclusive() {\n     assert_eq!(range_step_inclusive(0, 20, 5).collect::<Vec<int>>(), [0, 5, 10, 15, 20]);\n     assert_eq!(range_step_inclusive(20, 0, -5).collect::<Vec<int>>(), [20, 15, 10, 5, 0]);\n     assert_eq!(range_step_inclusive(20, 0, -6).collect::<Vec<int>>(), [20, 14, 8, 2]);\n-    assert_eq!(range_step_inclusive(200u8, 255, 50).collect::<Vec<u8>>(), [200u8, 250]);\n+    assert_eq!(range_step_inclusive(200, 255, 50).collect::<Vec<u8>>(), [200, 250]);\n     assert_eq!(range_step_inclusive(200, -5, 1).collect::<Vec<int>>(), []);\n     assert_eq!(range_step_inclusive(200, 200, 1).collect::<Vec<int>>(), [200]);\n }"}, {"sha": "bf3e1cf03cbddfb516fe2137b43d44e63d9b89a6", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -103,7 +103,7 @@ fn test_transmute() {\n     }\n \n     unsafe {\n-        assert_eq!([76u8], transmute::<_, Vec<u8>>(\"L\".to_string()));\n+        assert_eq!([76], transmute::<_, Vec<u8>>(\"L\".to_string()));\n     }\n }\n "}, {"sha": "9087b87f640cb77519b19df956e97e8f0cc285ea", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -88,31 +88,31 @@ mod test {\n \n     #[test]\n     fn test_int_from_str_overflow() {\n-        let mut i8_val: i8 = 127_i8;\n+        let mut i8_val: i8 = 127;\n         assert_eq!(\"127\".parse::<i8>().ok(), Some(i8_val));\n         assert_eq!(\"128\".parse::<i8>().ok(), None);\n \n         i8_val = i8_val.wrapping_add(1);\n         assert_eq!(\"-128\".parse::<i8>().ok(), Some(i8_val));\n         assert_eq!(\"-129\".parse::<i8>().ok(), None);\n \n-        let mut i16_val: i16 = 32_767_i16;\n+        let mut i16_val: i16 = 32_767;\n         assert_eq!(\"32767\".parse::<i16>().ok(), Some(i16_val));\n         assert_eq!(\"32768\".parse::<i16>().ok(), None);\n \n         i16_val = i16_val.wrapping_add(1);\n         assert_eq!(\"-32768\".parse::<i16>().ok(), Some(i16_val));\n         assert_eq!(\"-32769\".parse::<i16>().ok(), None);\n \n-        let mut i32_val: i32 = 2_147_483_647_i32;\n+        let mut i32_val: i32 = 2_147_483_647;\n         assert_eq!(\"2147483647\".parse::<i32>().ok(), Some(i32_val));\n         assert_eq!(\"2147483648\".parse::<i32>().ok(), None);\n \n         i32_val = i32_val.wrapping_add(1);\n         assert_eq!(\"-2147483648\".parse::<i32>().ok(), Some(i32_val));\n         assert_eq!(\"-2147483649\".parse::<i32>().ok(), None);\n \n-        let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n+        let mut i64_val: i64 = 9_223_372_036_854_775_807;\n         assert_eq!(\"9223372036854775807\".parse::<i64>().ok(), Some(i64_val));\n         assert_eq!(\"9223372036854775808\".parse::<i64>().ok(), None);\n "}, {"sha": "6a25c8be14e5a97e8fde1cc2719180260a405fc6", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -139,12 +139,12 @@ fn test_ptr_addition() {\n fn test_ptr_subtraction() {\n     unsafe {\n         let xs = vec![0,1,2,3,4,5,6,7,8,9];\n-        let mut idx = 9i8;\n+        let mut idx = 9;\n         let ptr = xs.as_ptr();\n \n-        while idx >= 0i8 {\n+        while idx >= 0 {\n             assert_eq!(*(ptr.offset(idx as int)), idx as int);\n-            idx = idx - 1i8;\n+            idx = idx - 1;\n         }\n \n         let mut xs_mut = xs;"}, {"sha": "f59108607a01f2993db4257865aad161947e934c", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -10,13 +10,10 @@\n \n #![crate_name = \"libc\"]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(not(feature = \"cargo-build\"),\n-            unstable(feature = \"libc\"))]\n-#![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api))]\n+#![cfg_attr(not(feature = \"cargo-build\"), unstable(feature = \"libc\"))]\n+#![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api, core, no_std))]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n-#![cfg_attr(not(feature = \"cargo-build\"), feature(core))]\n-#![feature(no_std)]\n-#![no_std]\n+#![cfg_attr(not(feature = \"cargo-build\"), no_std)]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n@@ -2203,11 +2200,11 @@ pub mod consts {\n             pub const _IOFBF : c_int = 0;\n             pub const _IONBF : c_int = 4;\n             pub const _IOLBF : c_int = 64;\n-            pub const BUFSIZ : c_uint = 512_u32;\n-            pub const FOPEN_MAX : c_uint = 20_u32;\n-            pub const FILENAME_MAX : c_uint = 260_u32;\n-            pub const L_tmpnam : c_uint = 16_u32;\n-            pub const TMP_MAX : c_uint = 32767_u32;\n+            pub const BUFSIZ : c_uint = 512;\n+            pub const FOPEN_MAX : c_uint = 20;\n+            pub const FILENAME_MAX : c_uint = 260;\n+            pub const L_tmpnam : c_uint = 16;\n+            pub const TMP_MAX : c_uint = 32767;\n \n             pub const WSAEINTR: c_int = 10004;\n             pub const WSAEBADF: c_int = 10009;\n@@ -2584,11 +2581,11 @@ pub mod consts {\n             pub const _IOFBF : c_int = 0;\n             pub const _IONBF : c_int = 2;\n             pub const _IOLBF : c_int = 1;\n-            pub const BUFSIZ : c_uint = 8192_u32;\n-            pub const FOPEN_MAX : c_uint = 16_u32;\n-            pub const FILENAME_MAX : c_uint = 4096_u32;\n-            pub const L_tmpnam : c_uint = 20_u32;\n-            pub const TMP_MAX : c_uint = 238328_u32;\n+            pub const BUFSIZ : c_uint = 8192;\n+            pub const FOPEN_MAX : c_uint = 16;\n+            pub const FILENAME_MAX : c_uint = 4096;\n+            pub const L_tmpnam : c_uint = 20;\n+            pub const TMP_MAX : c_uint = 238328;\n         }\n         pub mod c99 {\n         }\n@@ -3450,11 +3447,11 @@ pub mod consts {\n             pub const _IOFBF : c_int = 0;\n             pub const _IONBF : c_int = 2;\n             pub const _IOLBF : c_int = 1;\n-            pub const BUFSIZ : c_uint = 1024_u32;\n-            pub const FOPEN_MAX : c_uint = 20_u32;\n-            pub const FILENAME_MAX : c_uint = 1024_u32;\n-            pub const L_tmpnam : c_uint = 1024_u32;\n-            pub const TMP_MAX : c_uint = 308915776_u32;\n+            pub const BUFSIZ : c_uint = 1024;\n+            pub const FOPEN_MAX : c_uint = 20;\n+            pub const FILENAME_MAX : c_uint = 1024;\n+            pub const L_tmpnam : c_uint = 1024;\n+            pub const TMP_MAX : c_uint = 308915776;\n         }\n         pub mod c99 {\n         }\n@@ -3858,11 +3855,11 @@ pub mod consts {\n             pub const _IOFBF : c_int = 0;\n             pub const _IONBF : c_int = 2;\n             pub const _IOLBF : c_int = 1;\n-            pub const BUFSIZ : c_uint = 1024_u32;\n-            pub const FOPEN_MAX : c_uint = 20_u32;\n-            pub const FILENAME_MAX : c_uint = 1024_u32;\n-            pub const L_tmpnam : c_uint = 1024_u32;\n-            pub const TMP_MAX : c_uint = 308915776_u32;\n+            pub const BUFSIZ : c_uint = 1024;\n+            pub const FOPEN_MAX : c_uint = 20;\n+            pub const FILENAME_MAX : c_uint = 1024;\n+            pub const L_tmpnam : c_uint = 1024;\n+            pub const TMP_MAX : c_uint = 308915776;\n         }\n         pub mod c99 {\n         }\n@@ -4236,11 +4233,11 @@ pub mod consts {\n             pub const _IOFBF : c_int = 0;\n             pub const _IONBF : c_int = 2;\n             pub const _IOLBF : c_int = 1;\n-            pub const BUFSIZ : c_uint = 1024_u32;\n-            pub const FOPEN_MAX : c_uint = 20_u32;\n-            pub const FILENAME_MAX : c_uint = 1024_u32;\n-            pub const L_tmpnam : c_uint = 1024_u32;\n-            pub const TMP_MAX : c_uint = 308915776_u32;\n+            pub const BUFSIZ : c_uint = 1024;\n+            pub const FOPEN_MAX : c_uint = 20;\n+            pub const FILENAME_MAX : c_uint = 1024;\n+            pub const L_tmpnam : c_uint = 1024;\n+            pub const TMP_MAX : c_uint = 308915776;\n         }\n         pub mod c99 {\n         }"}, {"sha": "d54f183707475632089a14cd933c6ed2fa69a563", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -173,7 +173,7 @@ impl<'a> SeedableRng<&'a [u32]> for ChaChaRng {\n \n     fn reseed(&mut self, seed: &'a [u32]) {\n         // reset state\n-        self.init(&[0u32; KEY_WORDS]);\n+        self.init(&[0; KEY_WORDS]);\n         // set key in place\n         let key = &mut self.state[4 .. 4+KEY_WORDS];\n         for (k, s) in key.iter_mut().zip(seed.iter()) {\n@@ -245,7 +245,7 @@ mod test {\n     fn test_rng_true_values() {\n         // Test vectors 1 and 2 from\n         // http://tools.ietf.org/html/draft-nir-cfrg-chacha20-poly1305-04\n-        let seed : &[_] = &[0u32; 8];\n+        let seed : &[_] = &[0; 8];\n         let mut ra: ChaChaRng = SeedableRng::from_seed(seed);\n \n         let v = (0..16).map(|_| ra.next_u32()).collect::<Vec<_>>();\n@@ -285,7 +285,7 @@ mod test {\n \n     #[test]\n     fn test_rng_clone() {\n-        let seed : &[_] = &[0u32; 8];\n+        let seed : &[_] = &[0; 8];\n         let mut rng: ChaChaRng = SeedableRng::from_seed(seed);\n         let mut clone = rng.clone();\n         for _ in 0..16 {"}, {"sha": "4afc67d63c8f952c4ef4405016cb23a19874d56e", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -23,8 +23,8 @@ use distributions::{Sample, IndependentSample};\n ///\n /// This gives a uniform distribution (assuming the RNG used to sample\n /// it is itself uniform & the `SampleRange` implementation for the\n-/// given type is correct), even for edge cases like `low = 0u8`,\n-/// `high = 170u8`, for which a naive modulo operation would return\n+/// given type is correct), even for edge cases like `low = 0`,\n+/// `high = 170`, for which a naive modulo operation would return\n /// numbers less than 85 with double the probability to those greater\n /// than 85.\n ///"}, {"sha": "5532e41028ad2aa6804e788d77465d1c41673d46", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -217,7 +217,7 @@ impl<'a> SeedableRng<&'a [u32]> for IsaacRng {\n     fn reseed(&mut self, seed: &'a [u32]) {\n         // make the seed into [seed[0], seed[1], ..., seed[seed.len()\n         // - 1], 0, 0, ...], to fill rng.rsl.\n-        let seed_iter = seed.iter().cloned().chain(repeat(0u32));\n+        let seed_iter = seed.iter().cloned().chain(repeat(0));\n \n         for (rsl_elem, seed_elem) in self.rsl.iter_mut().zip(seed_iter) {\n             *rsl_elem = seed_elem;\n@@ -460,7 +460,7 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n     fn reseed(&mut self, seed: &'a [u64]) {\n         // make the seed into [seed[0], seed[1], ..., seed[seed.len()\n         // - 1], 0, 0, ...], to fill rng.rsl.\n-        let seed_iter = seed.iter().cloned().chain(repeat(0u64));\n+        let seed_iter = seed.iter().cloned().chain(repeat(0));\n \n         for (rsl_elem, seed_elem) in self.rsl.iter_mut().zip(seed_iter) {\n             *rsl_elem = seed_elem;"}, {"sha": "c92f6c5e52db7424d8e122e8a8fe9ea56017d8c8", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -149,7 +149,7 @@ pub trait Rng : Sized {\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n     ///\n-    /// let mut v = [0u8; 13579];\n+    /// let mut v = [0; 13579];\n     /// thread_rng().fill_bytes(&mut v);\n     /// println!(\"{:?}\", v.as_slice());\n     /// ```"}, {"sha": "22b77a759319b8818421ed561e3ab67c41305172", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -215,7 +215,7 @@ mod test {\n     const FILL_BYTES_V_LEN: uint = 13579;\n     #[test]\n     fn test_rng_fill_bytes() {\n-        let mut v = repeat(0u8).take(FILL_BYTES_V_LEN).collect::<Vec<_>>();\n+        let mut v = repeat(0).take(FILL_BYTES_V_LEN).collect::<Vec<_>>();\n         ::test::rng().fill_bytes(&mut v);\n \n         // Sanity test: if we've gotten here, `fill_bytes` has not infinitely"}, {"sha": "f0b79640f7d449c3fdbd98f9e9817a86377c8153", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -290,22 +290,22 @@ pub mod reader {\n     #[inline(never)]\n     fn vuint_at_slow(data: &[u8], start: uint) -> DecodeResult<Res> {\n         let a = data[start];\n-        if a & 0x80u8 != 0u8 {\n-            return Ok(Res {val: (a & 0x7fu8) as uint, next: start + 1});\n+        if a & 0x80 != 0 {\n+            return Ok(Res {val: (a & 0x7f) as uint, next: start + 1});\n         }\n-        if a & 0x40u8 != 0u8 {\n-            return Ok(Res {val: ((a & 0x3fu8) as uint) << 8 |\n+        if a & 0x40 != 0 {\n+            return Ok(Res {val: ((a & 0x3f) as uint) << 8 |\n                         (data[start + 1] as uint),\n                     next: start + 2});\n         }\n-        if a & 0x20u8 != 0u8 {\n-            return Ok(Res {val: ((a & 0x1fu8) as uint) << 16 |\n+        if a & 0x20 != 0 {\n+            return Ok(Res {val: ((a & 0x1f) as uint) << 16 |\n                         (data[start + 1] as uint) << 8 |\n                         (data[start + 2] as uint),\n                     next: start + 3});\n         }\n-        if a & 0x10u8 != 0u8 {\n-            return Ok(Res {val: ((a & 0x0fu8) as uint) << 24 |\n+        if a & 0x10 != 0 {\n+            return Ok(Res {val: ((a & 0x0f) as uint) << 24 |\n                         (data[start + 1] as uint) << 16 |\n                         (data[start + 2] as uint) << 8 |\n                         (data[start + 3] as uint),\n@@ -877,11 +877,11 @@ pub mod writer {\n \n     fn write_sized_vuint<W: Writer>(w: &mut W, n: uint, size: uint) -> EncodeResult {\n         match size {\n-            1 => w.write_all(&[0x80u8 | (n as u8)]),\n-            2 => w.write_all(&[0x40u8 | ((n >> 8) as u8), n as u8]),\n-            3 => w.write_all(&[0x20u8 | ((n >> 16) as u8), (n >> 8) as u8,\n+            1 => w.write_all(&[0x80 | (n as u8)]),\n+            2 => w.write_all(&[0x40 | ((n >> 8) as u8), n as u8]),\n+            3 => w.write_all(&[0x20 | ((n >> 16) as u8), (n >> 8) as u8,\n                             n as u8]),\n-            4 => w.write_all(&[0x10u8 | ((n >> 24) as u8), (n >> 16) as u8,\n+            4 => w.write_all(&[0x10 | ((n >> 24) as u8), (n >> 16) as u8,\n                             (n >> 8) as u8, n as u8]),\n             _ => Err(old_io::IoError {\n                 kind: old_io::OtherIoError,\n@@ -930,7 +930,7 @@ pub mod writer {\n \n             // Write a placeholder four-byte size.\n             self.size_positions.push(try!(self.writer.tell()) as uint);\n-            let zeroes: &[u8] = &[0u8, 0u8, 0u8, 0u8];\n+            let zeroes: &[u8] = &[0, 0, 0, 0];\n             self.writer.write_all(zeroes)\n         }\n \n@@ -1422,9 +1422,9 @@ mod bench {\n \n     #[bench]\n     pub fn vuint_at_A_aligned(b: &mut Bencher) {\n-        let data = (0i32..4*100).map(|i| {\n+        let data = (0..4*100).map(|i| {\n             match i % 2 {\n-              0 => 0x80u8,\n+              0 => 0x80,\n               _ => i as u8,\n             }\n         }).collect::<Vec<_>>();\n@@ -1440,9 +1440,9 @@ mod bench {\n \n     #[bench]\n     pub fn vuint_at_A_unaligned(b: &mut Bencher) {\n-        let data = (0i32..4*100+1).map(|i| {\n+        let data = (0..4*100+1).map(|i| {\n             match i % 2 {\n-              1 => 0x80u8,\n+              1 => 0x80,\n               _ => i as u8\n             }\n         }).collect::<Vec<_>>();\n@@ -1458,11 +1458,11 @@ mod bench {\n \n     #[bench]\n     pub fn vuint_at_D_aligned(b: &mut Bencher) {\n-        let data = (0i32..4*100).map(|i| {\n+        let data = (0..4*100).map(|i| {\n             match i % 4 {\n-              0 => 0x10u8,\n+              0 => 0x10,\n               3 => i as u8,\n-              _ => 0u8\n+              _ => 0\n             }\n         }).collect::<Vec<_>>();\n         let mut sum = 0;\n@@ -1477,11 +1477,11 @@ mod bench {\n \n     #[bench]\n     pub fn vuint_at_D_unaligned(b: &mut Bencher) {\n-        let data = (0i32..4*100+1).map(|i| {\n+        let data = (0..4*100+1).map(|i| {\n             match i % 4 {\n-              1 => 0x10u8,\n+              1 => 0x10,\n               0 => i as u8,\n-              _ => 0u8\n+              _ => 0\n             }\n         }).collect::<Vec<_>>();\n         let mut sum = 0;"}, {"sha": "8486bf782b00bc1048a34ad6b0020de7be49c3f9", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -354,7 +354,7 @@ impl<'a> Context<'a> {\n             }\n         }\n         if self.rejected_via_kind.len() > 0 {\n-            self.sess.span_help(self.span, \"please recompile this crate using \\\n+            self.sess.fileline_help(self.span, \"please recompile this crate using \\\n                                             --crate-type lib\");\n             let mismatches = self.rejected_via_kind.iter();\n             for (i, &CrateMismatch { ref path, .. }) in mismatches.enumerate() {"}, {"sha": "19a29b8eb1b334d6972b7e32faf06b67aa5f2cfe", "filename": "src/librustc/metadata/macro_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'v> Visitor<'v> for MacroLoader<'a> {\n                 }\n                 \"plugin\" => {\n                     self.sess.span_err(attr.span, \"#[plugin] on `extern crate` is deprecated\");\n-                    self.sess.span_help(attr.span, &format!(\"use a crate attribute instead, \\\n+                    self.sess.fileline_help(attr.span, &format!(\"use a crate attribute instead, \\\n                                                             i.e. #![plugin({})]\",\n                                                             item.ident.as_str()));\n                 }"}, {"sha": "10885359985069eabaed3869240966c63f3e049c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -246,7 +246,7 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n                                 \"pattern binding `{}` is named the same as one \\\n                                  of the variants of the type `{}`\",\n                                 &token::get_ident(ident.node), ty_to_string(cx.tcx, pat_ty));\n-                            span_help!(cx.tcx.sess, p.span,\n+                            fileline_help!(cx.tcx.sess, p.span,\n                                 \"if you meant to match on a variant, \\\n                                  consider making the path in the pattern qualified: `{}::{}`\",\n                                 ty_to_string(cx.tcx, pat_ty), &token::get_ident(ident.node));"}, {"sha": "896a0010e7e7f93e5fd789ec571673f34f003b1b", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -537,7 +537,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       ast::ExprBlock(ref block) => {\n         match block.expr {\n             Some(ref expr) => try!(eval_const_expr_partial(tcx, &**expr, ety)),\n-            None => const_int(0i64)\n+            None => const_int(0)\n         }\n       }\n       ast::ExprTupField(ref base, index) => {"}, {"sha": "a7f5c2c843711b6aec3a2d2a6fec0ae25156ab56", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -444,7 +444,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                 // Does the required lifetime have a nice name we can print?\n                 span_err!(self.tcx.sess, origin.span(), E0309,\n                     \"{} may not live long enough\", labeled_user_string);\n-                self.tcx.sess.span_help(\n+                self.tcx.sess.fileline_help(\n                     origin.span(),\n                     &format!(\n                         \"consider adding an explicit lifetime bound `{}: {}`...\",\n@@ -456,7 +456,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                 // Does the required lifetime have a nice name we can print?\n                 span_err!(self.tcx.sess, origin.span(), E0310,\n                     \"{} may not live long enough\", labeled_user_string);\n-                self.tcx.sess.span_help(\n+                self.tcx.sess.fileline_help(\n                     origin.span(),\n                     &format!(\n                         \"consider adding an explicit lifetime bound `{}: 'static`...\",\n@@ -468,7 +468,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                 span_err!(self.tcx.sess, origin.span(), E0311,\n                         \"{} may not live long enough\",\n                         labeled_user_string);\n-                self.tcx.sess.span_help(\n+                self.tcx.sess.fileline_help(\n                     origin.span(),\n                     &format!(\n                         \"consider adding an explicit lifetime bound for `{}`\","}, {"sha": "d3b9b07ea416970daecfaab42dec9f9cf22de738", "filename": "src/librustc/util/lev_distance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Flev_distance.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -45,7 +45,7 @@ pub fn lev_distance(me: &str, t: &str) -> uint {\n fn test_lev_distance() {\n     use std::char::{ from_u32, MAX };\n     // Test bytelength agnosticity\n-    for c in (0u32..MAX as u32)\n+    for c in (0..MAX as u32)\n              .filter_map(|i| from_u32(i))\n              .map(|i| i.to_string()) {\n         assert_eq!(lev_distance(&c[..], &c[..]), 0);"}, {"sha": "482c710149c0920a3d5ce7103ff955dbf8504cfd", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -119,7 +119,7 @@ impl FixedBuffer64 {\n     /// Create a new FixedBuffer64\n     fn new() -> FixedBuffer64 {\n         return FixedBuffer64 {\n-            buffer: [0u8; 64],\n+            buffer: [0; 64],\n             buffer_idx: 0\n         };\n     }\n@@ -258,7 +258,7 @@ pub trait Digest {\n     /// Convenience function that retrieves the result of a digest as a\n     /// newly allocated vec of bytes.\n     fn result_bytes(&mut self) -> Vec<u8> {\n-        let mut buf: Vec<u8> = repeat(0u8).take((self.output_bits()+7)/8).collect();\n+        let mut buf: Vec<u8> = repeat(0).take((self.output_bits()+7)/8).collect();\n         self.result(&mut buf);\n         buf\n     }\n@@ -342,7 +342,7 @@ impl Engine256State {\n         let mut g = self.h6;\n         let mut h = self.h7;\n \n-        let mut w = [0u32; 64];\n+        let mut w = [0; 64];\n \n         // Sha-512 and Sha-256 use basically the same calculations which are implemented\n         // by these macros. Inlining the calculations seems to result in better generated code.\n@@ -660,7 +660,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_10(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8; 10];\n+        let bytes = [1; 10];\n         b.iter(|| {\n             sh.input(&bytes);\n         });\n@@ -670,7 +670,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_1k(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8; 1024];\n+        let bytes = [1; 1024];\n         b.iter(|| {\n             sh.input(&bytes);\n         });\n@@ -680,7 +680,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_64k(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8; 65536];\n+        let bytes = [1; 65536];\n         b.iter(|| {\n             sh.input(&bytes);\n         });"}, {"sha": "2199beb7a20126fdc0fb5e341dd44d0c9ae3cbe7", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -316,7 +316,7 @@ mod tests {\n \n     bitflags! {\n         flags AnotherSetOfFlags: i8 {\n-            const AnotherFlag = -1_i8,\n+            const AnotherFlag = -1,\n         }\n     }\n \n@@ -327,7 +327,7 @@ mod tests {\n         assert_eq!(FlagABC.bits(), 0b00000111);\n \n         assert_eq!(AnotherSetOfFlags::empty().bits(), 0b00);\n-        assert_eq!(AnotherFlag.bits(), !0_i8);\n+        assert_eq!(AnotherFlag.bits(), !0);\n     }\n \n     #[test]\n@@ -338,7 +338,7 @@ mod tests {\n         assert!(Flags::from_bits(0b11) == Some(FlagA | FlagB));\n         assert!(Flags::from_bits(0b1000) == None);\n \n-        assert!(AnotherSetOfFlags::from_bits(!0_i8) == Some(AnotherFlag));\n+        assert!(AnotherSetOfFlags::from_bits(!0) == Some(AnotherFlag));\n     }\n \n     #[test]\n@@ -350,7 +350,7 @@ mod tests {\n         assert!(Flags::from_bits_truncate(0b1000) == Flags::empty());\n         assert!(Flags::from_bits_truncate(0b1001) == FlagA);\n \n-        assert!(AnotherSetOfFlags::from_bits_truncate(0_i8) == AnotherSetOfFlags::empty());\n+        assert!(AnotherSetOfFlags::from_bits_truncate(0) == AnotherSetOfFlags::empty());\n     }\n \n     #[test]"}, {"sha": "84636ebaae42b608d7ce09f161bfbb5574d7e075", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -165,7 +165,7 @@ fn note_move_destination(bccx: &BorrowckCtxt,\n         bccx.span_note(\n             move_to_span,\n             \"attempting to move value to here\");\n-        bccx.span_help(\n+        bccx.fileline_help(\n             move_to_span,\n             &format!(\"to prevent the move, \\\n                      use `ref {0}` or `ref mut {0}` to capture value by \\"}, {"sha": "42b3555b54edef926dc7d2aadddd436630c4aa9a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -643,7 +643,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             ol,\n                             moved_lp_msg,\n                             pat_ty.user_string(self.tcx)));\n-                self.tcx.sess.span_help(span,\n+                self.tcx.sess.fileline_help(span,\n                     \"use `ref` to override\");\n             }\n \n@@ -675,7 +675,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             moved_lp_msg,\n                             expr_ty.user_string(self.tcx),\n                             suggestion));\n-                self.tcx.sess.span_help(expr_span, help);\n+                self.tcx.sess.fileline_help(expr_span, help);\n             }\n         }\n \n@@ -741,6 +741,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.tcx.sess.span_help(s, m);\n     }\n \n+    pub fn fileline_help(&self, s: Span, m: &str) {\n+        self.tcx.sess.fileline_help(s, m);\n+    }\n+\n     pub fn bckerr_to_string(&self, err: &BckError<'tcx>) -> String {\n         match err.code {\n             err_mutbl => {\n@@ -870,7 +874,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n \n         if is_closure {\n-            self.tcx.sess.span_help(\n+            self.tcx.sess.fileline_help(\n                 span,\n                 \"closures behind references must be called via `&mut`\");\n         }"}, {"sha": "1eea52fe1bb205ce05c6b433fd82baecd90bfee4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1921,7 +1921,8 @@ impl LintPass for UnconditionalRecursion {\n                 for call in &self_call_spans {\n                     sess.span_note(*call, \"recursive call site\")\n                 }\n-                sess.span_help(sp, \"a `loop` may express intention better if this is on purpose\")\n+                sess.fileline_help(sp, \"a `loop` may express intention \\\n+                                        better if this is on purpose\")\n             }\n         }\n "}, {"sha": "0ddfd707f0089391eb1c0b93a9672a7500e17100", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -4115,10 +4115,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                           uses it like a function name\",\n                                          path_name));\n \n-                        self.session.span_help(expr.span,\n-                            &format!(\"Did you mean to write: \\\n-                                     `{} {{ /* fields */ }}`?\",\n-                                     path_name));\n+                        let msg = format!(\"Did you mean to write: \\\n+                                           `{} {{ /* fields */ }}`?\",\n+                                          path_name);\n+                        if self.emit_errors {\n+                            self.session.fileline_help(expr.span, &msg);\n+                        } else {\n+                            self.session.span_help(expr.span, &msg);\n+                        }\n                     } else {\n                         // Write the result into the def map.\n                         debug!(\"(resolving expr) resolved `{}`\",\n@@ -4146,18 +4150,21 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     match type_res.map(|r| r.base_def) {\n                         Some(DefTy(struct_id, _))\n                             if self.structs.contains_key(&struct_id) => {\n-                            self.resolve_error(expr.span,\n+                                self.resolve_error(expr.span,\n                                     &format!(\"`{}` is a structure name, but \\\n                                                 this expression \\\n                                                 uses it like a function name\",\n                                                 path_name));\n \n-                            self.session.span_help(expr.span,\n-                                &format!(\"Did you mean to write: \\\n-                                            `{} {{ /* fields */ }}`?\",\n-                                            path_name));\n-\n-                        }\n+                                let msg = format!(\"Did you mean to write: \\\n+                                                     `{} {{ /* fields */ }}`?\",\n+                                                    path_name);\n+                                if self.emit_errors {\n+                                    self.session.fileline_help(expr.span, &msg);\n+                                } else {\n+                                    self.session.span_help(expr.span, &msg);\n+                                }\n+                            }\n                         _ => {\n                             // Keep reporting some errors even if they're ignored above.\n                             self.resolve_path(expr.id, path, 0, ValueNS, true);"}, {"sha": "8302d0abe214e7cb5ddfc6a0a02ce7fa49aedbb9", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -833,11 +833,11 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n \n     let (is_zero, is_signed) = match rhs_t.sty {\n         ty::ty_int(t) => {\n-            let zero = C_integral(Type::int_from_ty(cx.ccx(), t), 0u64, false);\n+            let zero = C_integral(Type::int_from_ty(cx.ccx(), t), 0, false);\n             (ICmp(cx, llvm::IntEQ, rhs, zero, debug_loc), true)\n         }\n         ty::ty_uint(t) => {\n-            let zero = C_integral(Type::uint_from_ty(cx.ccx(), t), 0u64, false);\n+            let zero = C_integral(Type::uint_from_ty(cx.ccx(), t), 0, false);\n             (ICmp(cx, llvm::IntEQ, rhs, zero, debug_loc), false)\n         }\n         _ => {"}, {"sha": "03496a966bf30e8d617652b6746b176a186f5162", "filename": "src/librustc_trans/trans/cabi_aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -117,7 +117,7 @@ fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n     let size = ty_size(ty);\n     if size <= 16 {\n         let llty = if size == 0 {\n-            Type::array(&Type::i64(ccx), 0u64)\n+            Type::array(&Type::i64(ccx), 0)\n         } else if size == 1 {\n             Type::i8(ccx)\n         } else if size == 2 {"}, {"sha": "b0383e355e489477f2ac37c2612f0d35b1cf701c", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -440,7 +440,7 @@ fn gate_simd_ffi(tcx: &ty::ctxt, decl: &ast::FnDecl, ty: &ty::BareFnTy) {\n                               &format!(\"use of SIMD type `{}` in FFI is highly experimental and \\\n                                         may result in invalid code\",\n                                        pprust::ty_to_string(ast_ty)));\n-                tcx.sess.span_help(ast_ty.span,\n+                tcx.sess.fileline_help(ast_ty.span,\n                                    \"add #![feature(simd_ffi)] to the crate attributes to enable\");\n             }\n         };"}, {"sha": "00e9e76d81903eb7810c7e389479da0492e61331", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -229,18 +229,18 @@ pub fn opt_ast_region_to_region<'tcx>(\n                                 }\n                             }\n                             if len == 1 {\n-                                span_help!(this.tcx().sess, default_span,\n+                                fileline_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      the signature does not say which {} it is borrowed from\",\n                                     m);\n                             } else if len == 0 {\n-                                span_help!(this.tcx().sess, default_span,\n+                                fileline_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      there is no value for it to be borrowed from\");\n-                                span_help!(this.tcx().sess, default_span,\n+                                fileline_help!(this.tcx().sess, default_span,\n                                     \"consider giving it a 'static lifetime\");\n                             } else {\n-                                span_help!(this.tcx().sess, default_span,\n+                                fileline_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      the signature does not say whether it is borrowed from {}\",\n                                     m);\n@@ -722,7 +722,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n                 span_err!(this.tcx().sess, span, E0215,\n                                          \"angle-bracket notation is not stable when \\\n                                          used with the `Fn` family of traits, use parentheses\");\n-                span_help!(this.tcx().sess, span,\n+                fileline_help!(this.tcx().sess, span,\n                            \"add `#![feature(unboxed_closures)]` to \\\n                             the crate attributes to enable\");\n             }\n@@ -736,7 +736,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n                 span_err!(this.tcx().sess, span, E0216,\n                                          \"parenthetical notation is only stable when \\\n                                          used with the `Fn` family of traits\");\n-                span_help!(this.tcx().sess, span,\n+                fileline_help!(this.tcx().sess, span,\n                            \"add `#![feature(unboxed_closures)]` to \\\n                             the crate attributes to enable\");\n             }\n@@ -963,14 +963,14 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n                       pprust::ty_to_string(ty));\n             match ty.node {\n                 ast::TyRptr(None, ref mut_ty) => {\n-                    span_help!(this.tcx().sess, ty.span,\n+                    fileline_help!(this.tcx().sess, ty.span,\n                                \"perhaps you meant `&{}({} +{})`? (per RFC 438)\",\n                                ppaux::mutability_to_string(mut_ty.mutbl),\n                                pprust::ty_to_string(&*mut_ty.ty),\n                                pprust::bounds_to_string(bounds));\n                 }\n                ast::TyRptr(Some(ref lt), ref mut_ty) => {\n-                    span_help!(this.tcx().sess, ty.span,\n+                    fileline_help!(this.tcx().sess, ty.span,\n                                \"perhaps you meant `&{} {}({} +{})`? (per RFC 438)\",\n                                pprust::lifetime_to_string(lt),\n                                ppaux::mutability_to_string(mut_ty.mutbl),\n@@ -979,7 +979,7 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n                 }\n \n                 _ => {\n-                    span_help!(this.tcx().sess, ty.span,\n+                    fileline_help!(this.tcx().sess, ty.span,\n                                \"perhaps you forgot parentheses? (per RFC 438)\");\n                 }\n             }"}, {"sha": "6ba21e25e1fe5c62d48f4ca1c1f65465893005a5", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -63,7 +63,7 @@ pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id:\n         span_err!(tcx.sess, span, E0174,\n                   \"explicit use of unboxed closure method `{}` is experimental\",\n                   method);\n-        span_help!(tcx.sess, span,\n+        fileline_help!(tcx.sess, span,\n                    \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n     }\n }"}, {"sha": "6b4a7761d0a9b836bf913d611d03aea86f7b3bac", "filename": "src/librustc_typeck/check/implicator.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -22,6 +22,7 @@ use syntax::ast;\n use syntax::codemap::Span;\n \n use util::common::ErrorReported;\n+use util::nodemap::FnvHashSet;\n use util::ppaux::Repr;\n \n // Helper functions related to manipulating region types.\n@@ -40,6 +41,7 @@ struct Implicator<'a, 'tcx: 'a> {\n     stack: Vec<(ty::Region, Option<Ty<'tcx>>)>,\n     span: Span,\n     out: Vec<Implication<'tcx>>,\n+    visited: FnvHashSet<Ty<'tcx>>,\n }\n \n /// This routine computes the well-formedness constraints that must hold for the type `ty` to\n@@ -65,7 +67,8 @@ pub fn implications<'a,'tcx>(\n                               body_id: body_id,\n                               span: span,\n                               stack: stack,\n-                              out: Vec::new() };\n+                              out: Vec::new(),\n+                              visited: FnvHashSet() };\n     wf.accumulate_from_ty(ty);\n     debug!(\"implications: out={}\", wf.out.repr(closure_typer.tcx()));\n     wf.out\n@@ -80,6 +83,12 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n         debug!(\"accumulate_from_ty(ty={})\",\n                ty.repr(self.tcx()));\n \n+        // When expanding out associated types, we can visit a cyclic\n+        // set of types. Issue #23003.\n+        if !self.visited.insert(ty) {\n+            return;\n+        }\n+\n         match ty.sty {\n             ty::ty_bool |\n             ty::ty_char |"}, {"sha": "595a2295674a12d54f80998d07133e5bfb3349e1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -3112,7 +3112,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 },\n                 expr_t, None);\n \n-            tcx.sess.span_help(field.span,\n+            tcx.sess.fileline_help(field.span,\n                                \"maybe a `()` to call it is missing? \\\n                                If not, try an anonymous function\");\n         } else {\n@@ -4494,7 +4494,7 @@ pub fn check_instantiable(tcx: &ty::ctxt,\n         span_err!(tcx.sess, sp, E0073,\n             \"this type cannot be instantiated without an \\\n              instance of itself\");\n-        span_help!(tcx.sess, sp, \"consider using `Option<{}>`\",\n+        fileline_help!(tcx.sess, sp, \"consider using `Option<{}>`\",\n             ppaux::ty_to_string(tcx, item_ty));\n         false\n     } else {"}, {"sha": "aa7e2b6dcce896763419195facb2daba171c4a79", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -401,7 +401,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n \n         match suggested_marker_id {\n             Some(def_id) => {\n-                self.tcx().sess.span_help(\n+                self.tcx().sess.fileline_help(\n                     span,\n                     format!(\"consider removing `{}` or using a marker such as `{}`\",\n                             param_name.user_string(self.tcx()),"}, {"sha": "9a8545f3dd5159c87a33d06a9bbabf9bdad64afe", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -524,7 +524,7 @@ fn enforce_trait_manually_implementable(tcx: &ty::ctxt, sp: Span, trait_def_id:\n         return // everything OK\n     };\n     span_err!(tcx.sess, sp, E0183, \"manual implementations of `{}` are experimental\", trait_name);\n-    span_help!(tcx.sess, sp,\n+    fileline_help!(tcx.sess, sp,\n                \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n }\n "}, {"sha": "77e3b6ee64bb8f7d834d0861a4c48c3f041d8937", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1342,7 +1342,7 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             it.span,\n             \"the `#[rustc_paren_sugar]` attribute is a temporary means of controlling \\\n              which traits can use parenthetical notation\");\n-        span_help!(ccx.tcx.sess, it.span,\n+        fileline_help!(ccx.tcx.sess, it.span,\n                    \"add `#![feature(unboxed_closures)]` to \\\n                     the crate attributes to use it\");\n     }"}, {"sha": "6f3d90d45b08721a10583ecd14d8e89d5f32fd74", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -117,7 +117,7 @@ impl FromHex for str {\n         // This may be an overestimate if there is any whitespace\n         let mut b = Vec::with_capacity(self.len() / 2);\n         let mut modulus = 0;\n-        let mut buf = 0u8;\n+        let mut buf = 0;\n \n         for (idx, byte) in self.bytes().enumerate() {\n             buf <<= 4;"}, {"sha": "0d445739b397f7d72872d0e65d2f46382eef63ee", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1653,7 +1653,7 @@ impl<T: Iterator<Item=char>> Parser<T> {\n \n     fn decode_hex_escape(&mut self) -> Result<u16, ParserError> {\n         let mut i = 0;\n-        let mut n = 0u16;\n+        let mut n = 0;\n         while i < 4 && !self.eof() {\n             self.bump();\n             n = match self.ch_or_null() {"}, {"sha": "8b275d1bc4ab772b867569cf6bb77ea6d178547a", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -186,7 +186,7 @@ impl OwnedAsciiExt for Vec<u8> {\n impl AsciiExt for u8 {\n     type Owned = u8;\n     #[inline]\n-    fn is_ascii(&self) -> bool { *self & 128 == 0u8 }\n+    fn is_ascii(&self) -> bool { *self & 128 == 0 }\n     #[inline]\n     fn to_ascii_uppercase(&self) -> u8 { ASCII_UPPERCASE_MAP[*self as usize] }\n     #[inline]\n@@ -398,7 +398,7 @@ mod tests {\n         assert_eq!(\"url()URL()uRl()\u00fcrl\".to_ascii_uppercase(), \"URL()URL()URL()\u00fcRL\");\n         assert_eq!(\"h\u0131\u212a\u00df\".to_ascii_uppercase(), \"H\u0131\u212a\u00df\");\n \n-        for i in 0u32..501 {\n+        for i in 0..501 {\n             let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n                         else { i };\n             assert_eq!((from_u32(i).unwrap()).to_string().to_ascii_uppercase(),\n@@ -412,7 +412,7 @@ mod tests {\n         // Dotted capital I, Kelvin sign, Sharp S.\n         assert_eq!(\"H\u0130\u212a\u00df\".to_ascii_lowercase(), \"h\u0130\u212a\u00df\");\n \n-        for i in 0u32..501 {\n+        for i in 0..501 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n             assert_eq!((from_u32(i).unwrap()).to_string().to_ascii_lowercase(),\n@@ -426,7 +426,7 @@ mod tests {\n                    \"URL()URL()URL()\u00fcRL\".to_string());\n         assert_eq!((\"h\u0131\u212a\u00df\".to_string()).into_ascii_uppercase(), \"H\u0131\u212a\u00df\");\n \n-        for i in 0u32..501 {\n+        for i in 0..501 {\n             let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n                         else { i };\n             assert_eq!((from_u32(i).unwrap()).to_string().into_ascii_uppercase(),\n@@ -441,7 +441,7 @@ mod tests {\n         // Dotted capital I, Kelvin sign, Sharp S.\n         assert_eq!((\"H\u0130\u212a\u00df\".to_string()).into_ascii_lowercase(), \"h\u0130\u212a\u00df\");\n \n-        for i in 0u32..501 {\n+        for i in 0..501 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n             assert_eq!((from_u32(i).unwrap()).to_string().into_ascii_lowercase(),\n@@ -459,7 +459,7 @@ mod tests {\n         assert!(!\"\u212a\".eq_ignore_ascii_case(\"k\"));\n         assert!(!\"\u00df\".eq_ignore_ascii_case(\"s\"));\n \n-        for i in 0u32..501 {\n+        for i in 0..501 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n             assert!((from_u32(i).unwrap()).to_string().eq_ignore_ascii_case("}, {"sha": "69fd0a57d5f38c3eb4176b8d15db486cab819c8d", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -28,7 +28,7 @@ use ptr::{self, PtrExt, Unique};\n use rt::heap::{allocate, deallocate, EMPTY};\n use collections::hash_state::HashState;\n \n-const EMPTY_BUCKET: u64 = 0u64;\n+const EMPTY_BUCKET: u64 = 0;\n \n /// The raw hashtable, providing safe-ish access to the unzipped and highly\n /// optimized arrays of hashes, keys, and values.\n@@ -149,7 +149,7 @@ pub fn make_hash<T: ?Sized, S>(hash_state: &S, t: &T) -> SafeHash\n {\n     let mut state = hash_state.hasher();\n     t.hash(&mut state);\n-    // We need to avoid 0u64 in order to prevent collisions with\n+    // We need to avoid 0 in order to prevent collisions with\n     // EMPTY_HASH. We can maintain our precious uniform distribution\n     // of initial indexes by unconditionally setting the MSB,\n     // effectively reducing 64-bits hashes to 63 bits."}, {"sha": "caada8ae50f74aa30a4f0c7373674ddbb5ad191b", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -78,7 +78,7 @@\n //! * You want a bit vector.\n //!\n //! ### Use a `BitSet` when:\n-//! * You want a `VecSet`.\n+//! * You want a `BitVec`, but want `Set` properties\n //!\n //! ### Use a `BinaryHeap` when:\n //! * You want to store a bunch of elements, but only ever want to process the \"biggest\"\n@@ -89,7 +89,8 @@\n //!\n //! Choosing the right collection for the job requires an understanding of what each collection\n //! is good at. Here we briefly summarize the performance of different collections for certain\n-//! important operations. For further details, see each type's documentation.\n+//! important operations. For further details, see each type's documentation, and note that the\n+//! names of actual methods may differ from the tables below on certain collections.\n //!\n //! Throughout the documentation, we will follow a few conventions. For all operations,\n //! the collection's size is denoted by n. If another collection is involved in the operation, it\n@@ -280,16 +281,16 @@\n //! a variant of the `Entry` enum.\n //!\n //! If a `Vacant(entry)` is yielded, then the key *was not* found. In this case the\n-//! only valid operation is to `set` the value of the entry. When this is done,\n+//! only valid operation is to `insert` a value into the entry. When this is done,\n //! the vacant entry is consumed and converted into a mutable reference to the\n //! the value that was inserted. This allows for further manipulation of the value\n //! beyond the lifetime of the search itself. This is useful if complex logic needs to\n //! be performed on the value regardless of whether the value was just inserted.\n //!\n //! If an `Occupied(entry)` is yielded, then the key *was* found. In this case, the user\n-//! has several options: they can `get`, `set`, or `take` the value of the occupied\n+//! has several options: they can `get`, `insert`, or `remove` the value of the occupied\n //! entry. Additionally, they can convert the occupied entry into a mutable reference\n-//! to its value, providing symmetry to the vacant `set` case.\n+//! to its value, providing symmetry to the vacant `insert` case.\n //!\n //! ### Examples\n //!\n@@ -329,7 +330,7 @@\n //! use std::collections::btree_map::{BTreeMap, Entry};\n //!\n //! // A client of the bar. They have an id and a blood alcohol level.\n-//! struct Person { id: u32, blood_alcohol: f32 };\n+//! struct Person { id: u32, blood_alcohol: f32 }\n //!\n //! // All the orders made to the bar, by client id.\n //! let orders = vec![1,2,1,2,3,4,1,2,2,3,4,1,1,1];"}, {"sha": "c052a69bc343a42d0484dfef3934a0004085fd1c", "filename": "src/libstd/env.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -616,6 +616,9 @@ mod os {\n mod os {\n     pub const FAMILY: &'static str = \"unix\";\n     pub const OS: &'static str = \"ios\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".dylib\";\n+    pub const DLL_EXTENSION: &'static str = \"dylib\";\n     pub const EXE_SUFFIX: &'static str = \"\";\n     pub const EXE_EXTENSION: &'static str = \"\";\n }"}, {"sha": "565c0b13efeada2c3da4a8145e834ba1624c0897", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1053,7 +1053,7 @@ mod tests {\n             check!(w.write(msg));\n         }\n         let files = check!(fs::read_dir(dir));\n-        let mut mem = [0u8; 4];\n+        let mut mem = [0; 4];\n         for f in files {\n             let f = f.unwrap().path();\n             {\n@@ -1083,7 +1083,7 @@ mod tests {\n         check!(File::create(&dir2.join(\"14\")));\n \n         let files = check!(fs::walk_dir(dir));\n-        let mut cur = [0u8; 2];\n+        let mut cur = [0; 2];\n         for f in files {\n             let f = f.unwrap().path();\n             let stem = f.file_stem().unwrap().to_str().unwrap();"}, {"sha": "3603f1275048d9fda1fe4210f1ad32f0ba7b9db7", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -616,14 +616,14 @@ mod tests {\n \n     #[test]\n     fn read_char_buffered() {\n-        let buf = [195u8, 159u8];\n+        let buf = [195, 159];\n         let reader = BufReader::with_capacity(1, &buf[..]);\n         assert_eq!(reader.chars().next(), Some(Ok('\u00df')));\n     }\n \n     #[test]\n     fn test_chars() {\n-        let buf = [195u8, 159u8, b'a'];\n+        let buf = [195, 159, b'a'];\n         let reader = BufReader::with_capacity(1, &buf[..]);\n         let mut it = reader.chars();\n         assert_eq!(it.next(), Some(Ok('\u00df')));"}, {"sha": "8a841742de4ecceeb9803c5b0d576555067c5ff4", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -237,7 +237,7 @@ mod tests {\n \n     #[test]\n     fn test_mem_reader() {\n-        let mut reader = Cursor::new(vec!(0u8, 1, 2, 3, 4, 5, 6, 7));\n+        let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7));\n         let mut buf = [];\n         assert_eq!(reader.read(&mut buf), Ok(0));\n         assert_eq!(reader.position(), 0);\n@@ -259,15 +259,15 @@ mod tests {\n \n     #[test]\n     fn read_to_end() {\n-        let mut reader = Cursor::new(vec!(0u8, 1, 2, 3, 4, 5, 6, 7));\n+        let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7));\n         let mut v = Vec::new();\n         reader.read_to_end(&mut v).ok().unwrap();\n         assert_eq!(v, [0, 1, 2, 3, 4, 5, 6, 7]);\n     }\n \n     #[test]\n     fn test_slice_reader() {\n-        let in_buf = vec![0u8, 1, 2, 3, 4, 5, 6, 7];\n+        let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n         let mut reader = &mut in_buf.as_slice();\n         let mut buf = [];\n         assert_eq!(reader.read(&mut buf), Ok(0));\n@@ -289,7 +289,7 @@ mod tests {\n \n     #[test]\n     fn test_buf_reader() {\n-        let in_buf = vec![0u8, 1, 2, 3, 4, 5, 6, 7];\n+        let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n         let mut reader = Cursor::new(in_buf.as_slice());\n         let mut buf = [];\n         assert_eq!(reader.read(&mut buf), Ok(0));\n@@ -335,7 +335,7 @@ mod tests {\n         assert_eq!(r.seek(SeekFrom::Start(10)), Ok(10));\n         assert_eq!(r.read(&mut [0]), Ok(0));\n \n-        let mut r = Cursor::new(vec!(10u8));\n+        let mut r = Cursor::new(vec!(10));\n         assert_eq!(r.seek(SeekFrom::Start(10)), Ok(10));\n         assert_eq!(r.read(&mut [0]), Ok(0));\n \n@@ -347,11 +347,11 @@ mod tests {\n \n     #[test]\n     fn seek_before_0() {\n-        let buf = [0xff_u8];\n+        let buf = [0xff];\n         let mut r = Cursor::new(&buf[..]);\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n \n-        let mut r = Cursor::new(vec!(10u8));\n+        let mut r = Cursor::new(vec!(10));\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n \n         let mut buf = [0];"}, {"sha": "916abe78eb3b3aeaf66c0c8cf166a9f7e84ebe1c", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -562,21 +562,21 @@ mod tests {\n     #[test]\n     fn to_socket_addr_ipaddr_u16() {\n         let a = IpAddr::new_v4(77, 88, 21, 11);\n-        let p = 12345u16;\n+        let p = 12345;\n         let e = SocketAddr::new(a, p);\n         assert_eq!(Ok(vec![e]), tsa((a, p)));\n     }\n \n     #[test]\n     fn to_socket_addr_str_u16() {\n         let a = SocketAddr::new(IpAddr::new_v4(77, 88, 21, 11), 24352);\n-        assert_eq!(Ok(vec![a]), tsa((\"77.88.21.11\", 24352u16)));\n+        assert_eq!(Ok(vec![a]), tsa((\"77.88.21.11\", 24352)));\n \n         let a = SocketAddr::new(IpAddr::new_v6(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), 53);\n         assert_eq!(Ok(vec![a]), tsa((\"2a02:6b8:0:1::1\", 53)));\n \n         let a = SocketAddr::new(IpAddr::new_v4(127, 0, 0, 1), 23924);\n-        assert!(tsa((\"localhost\", 23924u16)).unwrap().contains(&a));\n+        assert!(tsa((\"localhost\", 23924)).unwrap().contains(&a));\n     }\n \n     #[test]"}, {"sha": "aa54a432d625ba803a2dfec2a3e8110ef25182e7", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -136,7 +136,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_number_impl(&mut self, radix: u8, max_digits: u32, upto: u32) -> Option<u32> {\n-        let mut r = 0u32;\n+        let mut r = 0;\n         let mut digit_count = 0;\n         loop {\n             match self.read_digit(radix) {\n@@ -164,7 +164,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ipv4_addr_impl(&mut self) -> Option<Ipv4Addr> {\n-        let mut bs = [0u8; 4];\n+        let mut bs = [0; 4];\n         let mut i = 0;\n         while i < 4 {\n             if i != 0 && self.read_given_char('.').is_none() {\n@@ -189,7 +189,7 @@ impl<'a> Parser<'a> {\n     fn read_ipv6_addr_impl(&mut self) -> Option<Ipv6Addr> {\n         fn ipv6_addr_from_head_tail(head: &[u16], tail: &[u16]) -> Ipv6Addr {\n             assert!(head.len() + tail.len() <= 8);\n-            let mut gs = [0u16; 8];\n+            let mut gs = [0; 8];\n             gs.clone_from_slice(head);\n             gs[(8 - tail.len()) .. 8].clone_from_slice(tail);\n             Ipv6Addr::new(gs[0], gs[1], gs[2], gs[3], gs[4], gs[5], gs[6], gs[7])\n@@ -231,7 +231,7 @@ impl<'a> Parser<'a> {\n             (i, false)\n         }\n \n-        let mut head = [0u16; 8];\n+        let mut head = [0; 8];\n         let (head_size, head_ipv4) = read_groups(self, &mut head, 8);\n \n         if head_size == 8 {\n@@ -250,7 +250,7 @@ impl<'a> Parser<'a> {\n             return None;\n         }\n \n-        let mut tail = [0u16; 8];\n+        let mut tail = [0; 8];\n         let (tail_size, _) = read_groups(self, &mut tail, 8 - head_size);\n         Some(ipv6_addr_from_head_tail(&head[..head_size], &tail[..tail_size]))\n     }"}, {"sha": "093cde55bbb5fe7c2fd3c4b588998a616fe9318b", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -824,14 +824,14 @@ mod tests {\n \n     #[test]\n     fn test_integer_decode() {\n-        assert_eq!(3.14159265359f32.integer_decode(), (13176795u64, -22i16, 1i8));\n-        assert_eq!((-8573.5918555f32).integer_decode(), (8779358u64, -10i16, -1i8));\n-        assert_eq!(2f32.powf(100.0).integer_decode(), (8388608u64, 77i16, 1i8));\n-        assert_eq!(0f32.integer_decode(), (0u64, -150i16, 1i8));\n-        assert_eq!((-0f32).integer_decode(), (0u64, -150i16, -1i8));\n-        assert_eq!(INFINITY.integer_decode(), (8388608u64, 105i16, 1i8));\n-        assert_eq!(NEG_INFINITY.integer_decode(), (8388608u64, 105i16, -1i8));\n-        assert_eq!(NAN.integer_decode(), (12582912u64, 105i16, 1i8));\n+        assert_eq!(3.14159265359f32.integer_decode(), (13176795, -22, 1));\n+        assert_eq!((-8573.5918555f32).integer_decode(), (8779358, -10, -1));\n+        assert_eq!(2f32.powf(100.0).integer_decode(), (8388608, 77, 1));\n+        assert_eq!(0f32.integer_decode(), (0, -150, 1));\n+        assert_eq!((-0f32).integer_decode(), (0, -150, -1));\n+        assert_eq!(INFINITY.integer_decode(), (8388608, 105, 1));\n+        assert_eq!(NEG_INFINITY.integer_decode(), (8388608, 105, -1));\n+        assert_eq!(NAN.integer_decode(), (12582912, 105, 1));\n     }\n \n     #[test]"}, {"sha": "a7bdad70a362b8cf16ddddd95cec057a18c586c4", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -826,14 +826,14 @@ mod tests {\n \n     #[test]\n     fn test_integer_decode() {\n-        assert_eq!(3.14159265359f64.integer_decode(), (7074237752028906u64, -51i16, 1i8));\n-        assert_eq!((-8573.5918555f64).integer_decode(), (4713381968463931u64, -39i16, -1i8));\n-        assert_eq!(2f64.powf(100.0).integer_decode(), (4503599627370496u64, 48i16, 1i8));\n-        assert_eq!(0f64.integer_decode(), (0u64, -1075i16, 1i8));\n-        assert_eq!((-0f64).integer_decode(), (0u64, -1075i16, -1i8));\n-        assert_eq!(INFINITY.integer_decode(), (4503599627370496u64, 972i16, 1i8));\n+        assert_eq!(3.14159265359f64.integer_decode(), (7074237752028906, -51, 1));\n+        assert_eq!((-8573.5918555f64).integer_decode(), (4713381968463931, -39, -1));\n+        assert_eq!(2f64.powf(100.0).integer_decode(), (4503599627370496, 48, 1));\n+        assert_eq!(0f64.integer_decode(), (0, -1075, 1));\n+        assert_eq!((-0f64).integer_decode(), (0, -1075, -1));\n+        assert_eq!(INFINITY.integer_decode(), (4503599627370496, 972, 1));\n         assert_eq!(NEG_INFINITY.integer_decode(), (4503599627370496, 972, -1));\n-        assert_eq!(NAN.integer_decode(), (6755399441055744u64, 972i16, 1i8));\n+        assert_eq!(NAN.integer_decode(), (6755399441055744, 972, 1));\n     }\n \n     #[test]"}, {"sha": "9458ed1d3535ec35af26924a22d83f5753203179", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -312,7 +312,7 @@ pub trait Float\n     ///\n     /// let num = 2.0f32;\n     ///\n-    /// // (8388608u64, -22i16, 1i8)\n+    /// // (8388608, -22, 1)\n     /// let (mantissa, exponent, sign) = num.integer_decode();\n     /// let sign_f = sign as f32;\n     /// let mantissa_f = mantissa as f32;\n@@ -1755,25 +1755,25 @@ mod tests {\n \n     #[test]\n     fn test_uint_to_str_overflow() {\n-        let mut u8_val: u8 = 255_u8;\n+        let mut u8_val: u8 = 255;\n         assert_eq!(u8_val.to_string(), \"255\");\n \n         u8_val = u8_val.wrapping_add(1);\n         assert_eq!(u8_val.to_string(), \"0\");\n \n-        let mut u16_val: u16 = 65_535_u16;\n+        let mut u16_val: u16 = 65_535;\n         assert_eq!(u16_val.to_string(), \"65535\");\n \n         u16_val = u16_val.wrapping_add(1);\n         assert_eq!(u16_val.to_string(), \"0\");\n \n-        let mut u32_val: u32 = 4_294_967_295_u32;\n+        let mut u32_val: u32 = 4_294_967_295;\n         assert_eq!(u32_val.to_string(), \"4294967295\");\n \n         u32_val = u32_val.wrapping_add(1);\n         assert_eq!(u32_val.to_string(), \"0\");\n \n-        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n+        let mut u64_val: u64 = 18_446_744_073_709_551_615;\n         assert_eq!(u64_val.to_string(), \"18446744073709551615\");\n \n         u64_val = u64_val.wrapping_add(1);\n@@ -1786,31 +1786,31 @@ mod tests {\n \n     #[test]\n     fn test_uint_from_str_overflow() {\n-        let mut u8_val: u8 = 255_u8;\n+        let mut u8_val: u8 = 255;\n         assert_eq!(from_str::<u8>(\"255\"), Some(u8_val));\n         assert_eq!(from_str::<u8>(\"256\"), None);\n \n         u8_val = u8_val.wrapping_add(1);\n         assert_eq!(from_str::<u8>(\"0\"), Some(u8_val));\n         assert_eq!(from_str::<u8>(\"-1\"), None);\n \n-        let mut u16_val: u16 = 65_535_u16;\n+        let mut u16_val: u16 = 65_535;\n         assert_eq!(from_str::<u16>(\"65535\"), Some(u16_val));\n         assert_eq!(from_str::<u16>(\"65536\"), None);\n \n         u16_val = u16_val.wrapping_add(1);\n         assert_eq!(from_str::<u16>(\"0\"), Some(u16_val));\n         assert_eq!(from_str::<u16>(\"-1\"), None);\n \n-        let mut u32_val: u32 = 4_294_967_295_u32;\n+        let mut u32_val: u32 = 4_294_967_295;\n         assert_eq!(from_str::<u32>(\"4294967295\"), Some(u32_val));\n         assert_eq!(from_str::<u32>(\"4294967296\"), None);\n \n         u32_val = u32_val.wrapping_add(1);\n         assert_eq!(from_str::<u32>(\"0\"), Some(u32_val));\n         assert_eq!(from_str::<u32>(\"-1\"), None);\n \n-        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n+        let mut u64_val: u64 = 18_446_744_073_709_551_615;\n         assert_eq!(from_str::<u64>(\"18446744073709551615\"), Some(u64_val));\n         assert_eq!(from_str::<u64>(\"18446744073709551616\"), None);\n "}, {"sha": "5fdd42dbc7a838bd9d4a6243231c8f6e963fe803", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -104,7 +104,7 @@ fn int_to_str_bytes_common<T, F>(num: T, radix: uint, sign: SignFormat, mut f: F\n     // This is just for integral types, the largest of which is a u64. The\n     // smallest base that we can have is 2, so the most number of digits we're\n     // ever going to have is 64\n-    let mut buf = [0u8; 64];\n+    let mut buf = [0; 64];\n     let mut cur = 0;\n \n     // Loop at least once to make sure at least a `0` gets emitted.\n@@ -221,10 +221,10 @@ pub fn float_to_str_bytes_common<T: Float>(\n     let radix_gen: T = num::cast(radix as int).unwrap();\n \n     let (num, exp) = match exp_format {\n-        ExpNone => (num, 0i32),\n+        ExpNone => (num, 0),\n         ExpDec | ExpBin => {\n             if num == _0 {\n-                (num, 0i32)\n+                (num, 0)\n             } else {\n                 let (exp, exp_base) = match exp_format {\n                     ExpDec => (num.abs().log10().floor(), num::cast::<f64, T>(10.0f64).unwrap()),\n@@ -432,25 +432,25 @@ mod tests {\n \n     #[test]\n     fn test_int_to_str_overflow() {\n-        let mut i8_val: i8 = 127_i8;\n+        let mut i8_val: i8 = 127;\n         assert_eq!(i8_val.to_string(), \"127\");\n \n         i8_val = i8_val.wrapping_add(1);\n         assert_eq!(i8_val.to_string(), \"-128\");\n \n-        let mut i16_val: i16 = 32_767_i16;\n+        let mut i16_val: i16 = 32_767;\n         assert_eq!(i16_val.to_string(), \"32767\");\n \n         i16_val = i16_val.wrapping_add(1);\n         assert_eq!(i16_val.to_string(), \"-32768\");\n \n-        let mut i32_val: i32 = 2_147_483_647_i32;\n+        let mut i32_val: i32 = 2_147_483_647;\n         assert_eq!(i32_val.to_string(), \"2147483647\");\n \n         i32_val = i32_val.wrapping_add(1);\n         assert_eq!(i32_val.to_string(), \"-2147483648\");\n \n-        let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n+        let mut i64_val: i64 = 9_223_372_036_854_775_807;\n         assert_eq!(i64_val.to_string(), \"9223372036854775807\");\n \n         i64_val = i64_val.wrapping_add(1);"}, {"sha": "fe2510b668f9278e6376734a13804e90ab082b68", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -642,14 +642,14 @@ mod test {\n \n     #[test]\n     fn read_char_buffered() {\n-        let buf = [195u8, 159u8];\n+        let buf = [195, 159];\n         let mut reader = BufferedReader::with_capacity(1, &buf[..]);\n         assert_eq!(reader.read_char(), Ok('\u00df'));\n     }\n \n     #[test]\n     fn test_chars() {\n-        let buf = [195u8, 159u8, b'a'];\n+        let buf = [195, 159, b'a'];\n         let mut reader = BufferedReader::with_capacity(1, &buf[..]);\n         let mut it = reader.chars();\n         assert_eq!(it.next(), Some(Ok('\u00df')));"}, {"sha": "dec1ae98ba0be10fc8065de87eaacdfe2994fce5", "filename": "src/libstd/old_io/comm_adapters.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -30,7 +30,7 @@ use vec::Vec;\n /// # drop(tx);\n /// let mut reader = ChanReader::new(rx);\n ///\n-/// let mut buf = [0u8; 100];\n+/// let mut buf = [0; 100];\n /// match reader.read(&mut buf) {\n ///     Ok(nread) => println!(\"Read {} bytes\", nread),\n ///     Err(e) => println!(\"read error: {}\", e),\n@@ -167,15 +167,15 @@ mod test {\n     fn test_rx_reader() {\n         let (tx, rx) = channel();\n         thread::spawn(move|| {\n-          tx.send(vec![1u8, 2u8]).unwrap();\n+          tx.send(vec![1, 2]).unwrap();\n           tx.send(vec![]).unwrap();\n-          tx.send(vec![3u8, 4u8]).unwrap();\n-          tx.send(vec![5u8, 6u8]).unwrap();\n-          tx.send(vec![7u8, 8u8]).unwrap();\n+          tx.send(vec![3, 4]).unwrap();\n+          tx.send(vec![5, 6]).unwrap();\n+          tx.send(vec![7, 8]).unwrap();\n         });\n \n         let mut reader = ChanReader::new(rx);\n-        let mut buf = [0u8; 3];\n+        let mut buf = [0; 3];\n \n         assert_eq!(Ok(0), reader.read(&mut []));\n \n@@ -233,7 +233,7 @@ mod test {\n         let mut writer = ChanWriter::new(tx);\n         writer.write_be_u32(42).unwrap();\n \n-        let wanted = vec![0u8, 0u8, 0u8, 42u8];\n+        let wanted = vec![0, 0, 0, 42];\n         let got = thread::scoped(move|| { rx.recv().unwrap() }).join();\n         assert_eq!(wanted, got);\n "}, {"sha": "a2bc28962c39a9ad6b7c38619940c8b49c4445d9", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -101,7 +101,7 @@ pub fn u64_to_le_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n         let mut i = size;\n         let mut n = n;\n         while i > 0 {\n-            bytes.push((n & 255_u64) as u8);\n+            bytes.push((n & 255) as u8);\n             n >>= 8;\n             i -= 1;\n         }\n@@ -170,7 +170,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n         panic!(\"index out of bounds\");\n     }\n \n-    let mut buf = [0u8; 8];\n+    let mut buf = [0; 8];\n     unsafe {\n         let ptr = data.as_ptr().offset(start as int);\n         let out = buf.as_mut_ptr();\n@@ -522,8 +522,8 @@ mod bench {\n         ({\n             use super::u64_from_be_bytes;\n \n-            let data = (0u8..$stride*100+$start_index).collect::<Vec<_>>();\n-            let mut sum = 0u64;\n+            let data = (0..$stride*100+$start_index).collect::<Vec<_>>();\n+            let mut sum = 0;\n             $b.iter(|| {\n                 let mut i = $start_index;\n                 while i < data.len() {"}, {"sha": "afffed2278b8d8f0a41651cb41c6d97ca1e4f23b", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1166,7 +1166,7 @@ mod test {\n             check!(w.write(msg));\n         }\n         let files = check!(readdir(dir));\n-        let mut mem = [0u8; 4];\n+        let mut mem = [0; 4];\n         for f in &files {\n             {\n                 let n = f.filestem_str();\n@@ -1198,7 +1198,7 @@ mod test {\n         check!(File::create(&dir2.join(\"14\")));\n \n         let mut files = check!(walk_dir(dir));\n-        let mut cur = [0u8; 2];\n+        let mut cur = [0; 2];\n         for f in files {\n             let stem = f.filestem_str().unwrap();\n             let root = stem.as_bytes()[0] - b'0';"}, {"sha": "9ce888efcebed3baef9c0ae75f199b67a1b220aa", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -670,7 +670,7 @@ pub trait Reader {\n     fn read_le_uint_n(&mut self, nbytes: uint) -> IoResult<u64> {\n         assert!(nbytes > 0 && nbytes <= 8);\n \n-        let mut val = 0u64;\n+        let mut val = 0;\n         let mut pos = 0;\n         let mut i = nbytes;\n         while i > 0 {\n@@ -694,7 +694,7 @@ pub trait Reader {\n     fn read_be_uint_n(&mut self, nbytes: uint) -> IoResult<u64> {\n         assert!(nbytes > 0 && nbytes <= 8);\n \n-        let mut val = 0u64;\n+        let mut val = 0;\n         let mut i = nbytes;\n         while i > 0 {\n             i -= 1;\n@@ -1078,7 +1078,7 @@ pub trait Writer {\n     /// Write a single char, encoded as UTF-8.\n     #[inline]\n     fn write_char(&mut self, c: char) -> IoResult<()> {\n-        let mut buf = [0u8; 4];\n+        let mut buf = [0; 4];\n         let n = c.encode_utf8(&mut buf).unwrap_or(0);\n         self.write_all(&buf[..n])\n     }\n@@ -1896,7 +1896,7 @@ mod tests {\n     fn test_read_at_least() {\n         let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n                                    vec![GoodBehavior(usize::MAX)]);\n-        let buf = &mut [0u8; 5];\n+        let buf = &mut [0; 5];\n         assert!(r.read_at_least(1, buf).unwrap() >= 1);\n         assert!(r.read_exact(5).unwrap().len() == 5); // read_exact uses read_at_least\n         assert!(r.read_at_least(0, buf).is_ok());"}, {"sha": "6e2f491262dea7f077f6f9653ea63328e65772a6", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -198,7 +198,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_number_impl(&mut self, radix: u8, max_digits: u32, upto: u32) -> Option<u32> {\n-        let mut r = 0u32;\n+        let mut r = 0;\n         let mut digit_count = 0;\n         loop {\n             match self.read_digit(radix) {\n@@ -226,7 +226,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ipv4_addr_impl(&mut self) -> Option<IpAddr> {\n-        let mut bs = [0u8; 4];\n+        let mut bs = [0; 4];\n         let mut i = 0;\n         while i < 4 {\n             if i != 0 && self.read_given_char('.').is_none() {\n@@ -251,7 +251,7 @@ impl<'a> Parser<'a> {\n     fn read_ipv6_addr_impl(&mut self) -> Option<IpAddr> {\n         fn ipv6_addr_from_head_tail(head: &[u16], tail: &[u16]) -> IpAddr {\n             assert!(head.len() + tail.len() <= 8);\n-            let mut gs = [0u16; 8];\n+            let mut gs = [0; 8];\n             gs.clone_from_slice(head);\n             gs[(8 - tail.len()) .. 8].clone_from_slice(tail);\n             Ipv6Addr(gs[0], gs[1], gs[2], gs[3], gs[4], gs[5], gs[6], gs[7])\n@@ -294,7 +294,7 @@ impl<'a> Parser<'a> {\n             (i, false)\n         }\n \n-        let mut head = [0u16; 8];\n+        let mut head = [0; 8];\n         let (head_size, head_ipv4) = read_groups(self, &mut head, 8);\n \n         if head_size == 8 {\n@@ -313,7 +313,7 @@ impl<'a> Parser<'a> {\n             return None;\n         }\n \n-        let mut tail = [0u16; 8];\n+        let mut tail = [0; 8];\n         let (tail_size, _) = read_groups(self, &mut tail, 8 - head_size);\n         Some(ipv6_addr_from_head_tail(&head[..head_size], &tail[..tail_size]))\n     }\n@@ -425,17 +425,17 @@ pub struct ParseError;\n ///     // The following lines are equivalent modulo possible \"localhost\" name resolution\n ///     // differences\n ///     let tcp_s = TcpStream::connect(SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: 12345 });\n-///     let tcp_s = TcpStream::connect((Ipv4Addr(127, 0, 0, 1), 12345u16));\n-///     let tcp_s = TcpStream::connect((\"127.0.0.1\", 12345u16));\n-///     let tcp_s = TcpStream::connect((\"localhost\", 12345u16));\n+///     let tcp_s = TcpStream::connect((Ipv4Addr(127, 0, 0, 1), 12345));\n+///     let tcp_s = TcpStream::connect((\"127.0.0.1\", 12345));\n+///     let tcp_s = TcpStream::connect((\"localhost\", 12345));\n ///     let tcp_s = TcpStream::connect(\"127.0.0.1:12345\");\n ///     let tcp_s = TcpStream::connect(\"localhost:12345\");\n ///\n ///     // TcpListener::bind(), UdpSocket::bind() and UdpSocket::send_to() behave similarly\n ///     let tcp_l = TcpListener::bind(\"localhost:12345\");\n ///\n-///     let mut udp_s = UdpSocket::bind((\"127.0.0.1\", 23451u16)).unwrap();\n-///     udp_s.send_to([7u8, 7u8, 7u8].as_slice(), (Ipv4Addr(127, 0, 0, 1), 23451u16));\n+///     let mut udp_s = UdpSocket::bind((\"127.0.0.1\", 23451)).unwrap();\n+///     udp_s.send_to([7, 7, 7].as_slice(), (Ipv4Addr(127, 0, 0, 1), 23451));\n /// }\n /// ```\n pub trait ToSocketAddr {\n@@ -674,7 +674,7 @@ mod test {\n     #[test]\n     fn to_socket_addr_ipaddr_u16() {\n         let a = Ipv4Addr(77, 88, 21, 11);\n-        let p = 12345u16;\n+        let p = 12345;\n         let e = SocketAddr { ip: a, port: p };\n         assert_eq!(Ok(e), (a, p).to_socket_addr());\n         assert_eq!(Ok(vec![e]), (a, p).to_socket_addr_all());\n@@ -683,15 +683,15 @@ mod test {\n     #[test]\n     fn to_socket_addr_str_u16() {\n         let a = SocketAddr { ip: Ipv4Addr(77, 88, 21, 11), port: 24352 };\n-        assert_eq!(Ok(a), (\"77.88.21.11\", 24352u16).to_socket_addr());\n-        assert_eq!(Ok(vec![a]), (\"77.88.21.11\", 24352u16).to_socket_addr_all());\n+        assert_eq!(Ok(a), (\"77.88.21.11\", 24352).to_socket_addr());\n+        assert_eq!(Ok(vec![a]), (\"77.88.21.11\", 24352).to_socket_addr_all());\n \n         let a = SocketAddr { ip: Ipv6Addr(0x2a02, 0x6b8, 0, 1, 0, 0, 0, 1), port: 53 };\n         assert_eq!(Ok(a), (\"2a02:6b8:0:1::1\", 53).to_socket_addr());\n         assert_eq!(Ok(vec![a]), (\"2a02:6b8:0:1::1\", 53).to_socket_addr_all());\n \n         let a = SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: 23924 };\n-        assert!((\"localhost\", 23924u16).to_socket_addr_all().unwrap().contains(&a));\n+        assert!((\"localhost\", 23924).to_socket_addr_all().unwrap().contains(&a));\n     }\n \n     #[test]"}, {"sha": "73ef21fa3aa9609703011a3078862eb588a3bfe4", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1162,7 +1162,7 @@ mod test {\n                 tx.send(TcpStream::connect(addr).unwrap()).unwrap();\n             });\n             let _l = rx.recv().unwrap();\n-            for i in 0i32..1001 {\n+            for i in 0..1001 {\n                 match a.accept() {\n                     Ok(..) => break,\n                     Err(ref e) if e.kind == TimedOut => {}\n@@ -1262,7 +1262,7 @@ mod test {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         s.set_timeout(Some(20));\n-        for i in 0i32..1001 {\n+        for i in 0..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -1320,7 +1320,7 @@ mod test {\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n-        for i in 0i32..1001 {\n+        for i in 0..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "9fbdac84a80dbc79e5fad48372ec75072a92df14", "filename": "src/libstd/old_io/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftest.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -73,8 +73,8 @@ it is running in and assigns a port range based on it.\n */\n fn base_port() -> u16 {\n \n-    let base = 9600u16;\n-    let range = 1000u16;\n+    let base = 9600;\n+    let range = 1000;\n \n     let bases = [\n         (\"32-opt\", base + range * 1),"}, {"sha": "5283b28e20db784575b6cbf4a4f3714fe0f10a40", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -418,7 +418,7 @@ mod test {\n \n     #[test]\n     fn test_iter_reader() {\n-        let mut r = IterReader::new(0u8..8);\n+        let mut r = IterReader::new(0..8);\n         let mut buf = [0, 0, 0];\n         let len = r.read(&mut buf).unwrap();\n         assert_eq!(len, 3);\n@@ -437,7 +437,7 @@ mod test {\n \n     #[test]\n     fn iter_reader_zero_length() {\n-        let mut r = IterReader::new(0u8..8);\n+        let mut r = IterReader::new(0..8);\n         let mut buf = [];\n         assert_eq!(Ok(0), r.read(&mut buf));\n     }"}, {"sha": "4ed1520ed03f60181a2651d83287e4a3baf46ebe", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -468,7 +468,7 @@ mod test {\n         let lengths = [0, 1, 2, 3, 4, 5, 6, 7,\n                        80, 81, 82, 83, 84, 85, 86, 87];\n         for &n in &lengths {\n-            let mut v = repeat(0u8).take(n).collect::<Vec<_>>();\n+            let mut v = repeat(0).take(n).collect::<Vec<_>>();\n             r.fill_bytes(&mut v);\n \n             // use this to get nicer error messages."}, {"sha": "6cb3eb4d16e613a4102bbe5fadcdd28d927521fb", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -80,13 +80,13 @@ mod imp {\n     }\n \n     fn getrandom_next_u32() -> u32 {\n-        let mut buf: [u8; 4] = [0u8; 4];\n+        let mut buf: [u8; 4] = [0; 4];\n         getrandom_fill_bytes(&mut buf);\n         unsafe { mem::transmute::<[u8; 4], u32>(buf) }\n     }\n \n     fn getrandom_next_u64() -> u64 {\n-        let mut buf: [u8; 8] = [0u8; 8];\n+        let mut buf: [u8; 8] = [0; 8];\n         getrandom_fill_bytes(&mut buf);\n         unsafe { mem::transmute::<[u8; 8], u64>(buf) }\n     }\n@@ -231,12 +231,12 @@ mod imp {\n \n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n-            let mut v = [0u8; 4];\n+            let mut v = [0; 4];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn next_u64(&mut self) -> u64 {\n-            let mut v = [0u8; 8];\n+            let mut v = [0; 8];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n@@ -318,12 +318,12 @@ mod imp {\n \n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n-            let mut v = [0u8; 4];\n+            let mut v = [0; 4];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn next_u64(&mut self) -> u64 {\n-            let mut v = [0u8; 8];\n+            let mut v = [0; 8];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n@@ -366,7 +366,7 @@ mod test {\n         r.next_u32();\n         r.next_u64();\n \n-        let mut v = [0u8; 1000];\n+        let mut v = [0; 1000];\n         r.fill_bytes(&mut v);\n     }\n \n@@ -386,7 +386,7 @@ mod test {\n                 // as possible (XXX: is this a good test?)\n                 let mut r = OsRng::new().unwrap();\n                 thread::yield_now();\n-                let mut v = [0u8; 1000];\n+                let mut v = [0; 1000];\n \n                 for _ in 0..100 {\n                     r.next_u32();"}, {"sha": "ba1ebc2ab227556ce7eb023ae972c85aff5b93ee", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -84,28 +84,28 @@ mod test {\n     #[test]\n     fn test_reader_rng_u64() {\n         // transmute from the target to avoid endianness concerns.\n-        let v = vec![0u8, 0, 0, 0, 0, 0, 0, 1,\n+        let v = vec![0, 0, 0, 0, 0, 0, 0, 1,\n                      0  , 0, 0, 0, 0, 0, 0, 2,\n                      0,   0, 0, 0, 0, 0, 0, 3];\n         let mut rng = ReaderRng::new(MemReader::new(v));\n \n-        assert_eq!(rng.next_u64(), 1_u64.to_be());\n-        assert_eq!(rng.next_u64(), 2_u64.to_be());\n-        assert_eq!(rng.next_u64(), 3_u64.to_be());\n+        assert_eq!(rng.next_u64(), 1.to_be());\n+        assert_eq!(rng.next_u64(), 2.to_be());\n+        assert_eq!(rng.next_u64(), 3.to_be());\n     }\n     #[test]\n     fn test_reader_rng_u32() {\n-        let v = vec![0u8, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3];\n+        let v = vec![0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3];\n         let mut rng = ReaderRng::new(MemReader::new(v));\n \n-        assert_eq!(rng.next_u32(), 1_u32.to_be());\n-        assert_eq!(rng.next_u32(), 2_u32.to_be());\n-        assert_eq!(rng.next_u32(), 3_u32.to_be());\n+        assert_eq!(rng.next_u32(), 1.to_be());\n+        assert_eq!(rng.next_u32(), 2.to_be());\n+        assert_eq!(rng.next_u32(), 3.to_be());\n     }\n     #[test]\n     fn test_reader_rng_fill_bytes() {\n-        let v = [1u8, 2, 3, 4, 5, 6, 7, 8];\n-        let mut w = [0u8; 8];\n+        let v = [1, 2, 3, 4, 5, 6, 7, 8];\n+        let mut w = [0; 8];\n \n         let mut rng = ReaderRng::new(MemReader::new(v.to_vec()));\n         rng.fill_bytes(&mut w);\n@@ -117,7 +117,7 @@ mod test {\n     #[should_fail]\n     fn test_reader_rng_insufficient_bytes() {\n         let mut rng = ReaderRng::new(MemReader::new(vec!()));\n-        let mut v = [0u8; 3];\n+        let mut v = [0; 3];\n         rng.fill_bytes(&mut v);\n     }\n }"}, {"sha": "dc55740315349b56c87d4042f3e209e81050c34b", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -139,7 +139,7 @@ pub fn abort(args: fmt::Arguments) -> ! {\n     }\n \n     // Convert the arguments into a stack-allocated string\n-    let mut msg = [0u8; 512];\n+    let mut msg = [0; 512];\n     let mut w = BufWriter { buf: &mut msg, pos: 0 };\n     let _ = write!(&mut w, \"{}\", args);\n     let msg = str::from_utf8(&w.buf[..w.pos]).unwrap_or(\"aborted\");"}, {"sha": "719c74179ac23690bc360f5bf59e4a7e6c7784c0", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -714,7 +714,7 @@ pub fn is_code_point_boundary(slice: &Wtf8, index: uint) -> bool {\n     if index == slice.len() { return true; }\n     match slice.bytes.get(index) {\n         None => false,\n-        Some(&b) => b < 128u8 || b >= 192u8,\n+        Some(&b) => b < 128 || b >= 192,\n     }\n }\n \n@@ -776,7 +776,7 @@ impl<'a> Iterator for EncodeWide<'a> {\n             return Some(tmp);\n         }\n \n-        let mut buf = [0u16; 2];\n+        let mut buf = [0; 2];\n         self.code_points.next().map(|code_point| {\n             let n = encode_utf16_raw(code_point.value, &mut buf)\n                 .unwrap_or(0);"}, {"sha": "3d490380bfd61bdce3a33673c7f257887ba0e374", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -389,7 +389,7 @@ mod tests {\n         let mut writer = FileDesc::new(writer, true);\n \n         writer.write(b\"test\").ok().unwrap();\n-        let mut buf = [0u8; 4];\n+        let mut buf = [0; 4];\n         match reader.read(&mut buf) {\n             Ok(4) => {\n                 assert_eq!(buf[0], 't' as u8);"}, {"sha": "0ce3ca1f97ac8896abf350a06c1eef61ce972e6d", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -901,7 +901,7 @@ mod test {\n                 assert!(e.is::<T>());\n                 let any = e.downcast::<T>().ok().unwrap();\n                 assert!(any.is::<u16>());\n-                assert_eq!(*any.downcast::<u16>().ok().unwrap(), 413u16);\n+                assert_eq!(*any.downcast::<u16>().ok().unwrap(), 413);\n             }\n             Ok(()) => panic!()\n         }"}, {"sha": "958417d864c1fa7b477975d0f287d9ba2bb0b088", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -68,7 +68,7 @@ pub const MAX: Duration = Duration {\n \n impl Duration {\n     /// Makes a new `Duration` with given number of weeks.\n-    /// Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks.\n+    /// Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\n     /// Panics when the duration is out of bounds.\n     #[inline]\n     #[unstable(feature = \"std_misc\")]"}, {"sha": "41b70889c9f276f96735a7d473b56960bb8f64dd", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -53,7 +53,7 @@\n //! assert!(b == c);\n //!\n //! let d : (u32, f32) = Default::default();\n-//! assert_eq!(d, (0u32, 0.0f32));\n+//! assert_eq!(d, (0, 0.0f32));\n //! ```\n \n #![doc(primitive = \"tuple\")]"}, {"sha": "26d7562cdb2d4c4c408fc71d12ee5021a8c38a7a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -159,10 +159,10 @@ pub fn int_ty_to_string(t: IntTy, val: Option<i64>) -> String {\n \n pub fn int_ty_max(t: IntTy) -> u64 {\n     match t {\n-        TyI8 => 0x80u64,\n-        TyI16 => 0x8000u64,\n-        TyIs(_) | TyI32 => 0x80000000u64, // actually ni about TyIs\n-        TyI64 => 0x8000000000000000u64\n+        TyI8 => 0x80,\n+        TyI16 => 0x8000,\n+        TyIs(_) | TyI32 => 0x80000000, // actually ni about TyIs\n+        TyI64 => 0x8000000000000000\n     }\n }\n \n@@ -185,10 +185,10 @@ pub fn uint_ty_to_string(t: UintTy, val: Option<u64>) -> String {\n \n pub fn uint_ty_max(t: UintTy) -> u64 {\n     match t {\n-        TyU8 => 0xffu64,\n-        TyU16 => 0xffffu64,\n-        TyUs(_) | TyU32 => 0xffffffffu64, // actually ni about TyUs\n-        TyU64 => 0xffffffffffffffffu64\n+        TyU8 => 0xff,\n+        TyU16 => 0xffff,\n+        TyUs(_) | TyU32 => 0xffffffff, // actually ni about TyUs\n+        TyU64 => 0xffffffffffffffff\n     }\n }\n "}, {"sha": "055ade46a3f01ab482ce08674ca5cb0eb9462f1b", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -52,6 +52,13 @@ macro_rules! span_help {\n     })\n }\n \n+#[macro_export]\n+macro_rules! fileline_help {\n+    ($session:expr, $span:expr, $($message:tt)*) => ({\n+        ($session).fileline_help($span, &format!($($message)*))\n+    })\n+}\n+\n #[macro_export]\n macro_rules! register_diagnostics {\n     ($($code:tt),*) => ("}, {"sha": "a8c35c1fdb14b782b273c1bec2bc685449386dfe", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -753,6 +753,10 @@ impl<'a> ExtCtxt<'a> {\n         self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_help(sp, msg);\n     }\n+    pub fn fileline_help(&self, sp: Span, msg: &str) {\n+        self.print_backtrace();\n+        self.parse_sess.span_diagnostic.fileline_help(sp, msg);\n+    }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.print_backtrace();\n         self.parse_sess.span_diagnostic.handler().bug(msg);"}, {"sha": "8896a8e0c4fd9a0af941a38b5cfa891a868379d4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -571,7 +571,7 @@ fn contains_macro_use(fld: &mut MacroExpander, attrs: &[ast::Attribute]) -> bool\n             fld.cx.span_warn(attr.span, \"macro_escape is a deprecated synonym for macro_use\");\n             is_use = true;\n             if let ast::AttrInner = attr.node.style {\n-                fld.cx.span_help(attr.span, \"consider an outer attribute, \\\n+                fld.cx.fileline_help(attr.span, \"consider an outer attribute, \\\n                                              #[macro_use] mod ...\");\n             }\n         };"}, {"sha": "737648cd90c37bc56cf3a4715157bd8bea08ed78", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -676,9 +676,10 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n         token::FatArrow     => \"FatArrow\",\n         token::Pound        => \"Pound\",\n         token::Dollar       => \"Dollar\",\n+        token::Question     => \"Question\",\n         token::Underscore   => \"Underscore\",\n         token::Eof          => \"Eof\",\n-        _                   => panic!(),\n+        _                   => panic!(\"unhandled token in quote!\"),\n     };\n     mk_token_path(cx, sp, name)\n }"}, {"sha": "c2ad8554674c0f951e5dab72124b3a909bb0935e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -362,15 +362,15 @@ impl<'a> Context<'a> {\n \n pub fn emit_feature_err(diag: &SpanHandler, feature: &str, span: Span, explain: &str) {\n     diag.span_err(span, explain);\n-    diag.span_help(span, &format!(\"add #![feature({})] to the \\\n+    diag.fileline_help(span, &format!(\"add #![feature({})] to the \\\n                                    crate attributes to enable\",\n                                   feature));\n }\n \n pub fn emit_feature_warn(diag: &SpanHandler, feature: &str, span: Span, explain: &str) {\n     diag.span_warn(span, explain);\n     if diag.handler.can_emit_warnings {\n-        diag.span_help(span, &format!(\"add #![feature({})] to the \\\n+        diag.fileline_help(span, &format!(\"add #![feature({})] to the \\\n                                        crate attributes to silence this warning\",\n                                       feature));\n     }"}, {"sha": "db5583cf13ac193e119436b1c9ca512f798272c6", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -77,7 +77,7 @@ impl<'a> ParserAttr for Parser<'a> {\n                         self.span_err(span,\n                                       \"an inner attribute is not permitted in \\\n                                        this context\");\n-                        self.span_help(span,\n+                        self.fileline_help(span,\n                                        \"place inner attribute at the top of the module or block\");\n                     }\n                     ast::AttrInner"}, {"sha": "72ff501c6481eb2c2627dcca68e26c97d59dd227", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -781,7 +781,7 @@ impl<'a> StringReader<'a> {\n         self.span_diagnostic\n             .span_warn(sp, \"\\\\U00ABCD12 and \\\\uABCD escapes are deprecated\");\n         self.span_diagnostic\n-            .span_help(sp, \"use \\\\u{ABCD12} escapes instead\");\n+            .fileline_help(sp, \"use \\\\u{ABCD12} escapes instead\");\n     }\n \n     /// Scan for a single (possibly escaped) byte or char"}, {"sha": "58d58551df363715365f717735e0770acbe13284", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -724,7 +724,7 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n                                               &suf[1..]));\n                 } else {\n                     sd.span_err(sp, &*format!(\"illegal suffix `{}` for numeric literal\", suf));\n-                    sd.span_help(sp, \"the suffix must be one of the integral types \\\n+                    sd.fileline_help(sp, \"the suffix must be one of the integral types \\\n                                       (`u32`, `isize`, etc)\");\n                 }\n "}, {"sha": "28d757e9be96397b2cd7d85771dc941fd0dd1e58", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -974,7 +974,7 @@ impl<'a> Parser<'a> {\n     }\n     pub fn span_fatal_help(&self, sp: Span, m: &str, help: &str) -> ! {\n         self.span_err(sp, m);\n-        self.span_help(sp, help);\n+        self.fileline_help(sp, help);\n         panic!(diagnostic::FatalError);\n     }\n     pub fn span_note(&self, sp: Span, m: &str) {\n@@ -983,6 +983,9 @@ impl<'a> Parser<'a> {\n     pub fn span_help(&self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_help(sp, m)\n     }\n+    pub fn fileline_help(&self, sp: Span, m: &str) {\n+        self.sess.span_diagnostic.fileline_help(sp, m)\n+    }\n     pub fn bug(&self, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(self.span, m)\n     }\n@@ -2532,7 +2535,7 @@ impl<'a> Parser<'a> {\n                             Some(f) => f,\n                             None => continue,\n                         };\n-                        self.span_help(last_span,\n+                        self.fileline_help(last_span,\n                             &format!(\"try parenthesizing the first index; e.g., `(foo.{}){}`\",\n                                     float.trunc() as usize,\n                                     &float.fract().to_string()[1..]));\n@@ -2943,7 +2946,7 @@ impl<'a> Parser<'a> {\n                 self.span_err(op_span,\n                     \"chained comparison operators require parentheses\");\n                 if op.node == BiLt && outer_op == BiGt {\n-                    self.span_help(op_span,\n+                    self.fileline_help(op_span,\n                         \"use `::<...>` instead of `<...>` if you meant to specify type arguments\");\n                 }\n             }\n@@ -4699,7 +4702,7 @@ impl<'a> Parser<'a> {\n         match visa {\n             Public => {\n                 self.span_err(span, \"can't qualify macro invocation with `pub`\");\n-                self.span_help(span, \"try adjusting the macro to put `pub` inside \\\n+                self.fileline_help(span, \"try adjusting the macro to put `pub` inside \\\n                                       the invocation\");\n             }\n             Inherited => (),\n@@ -5445,7 +5448,7 @@ impl<'a> Parser<'a> {\n                     if self.token.is_ident() { self.bump(); }\n \n                     self.span_err(span, \"expected `;`, found `as`\");\n-                    self.span_help(span,\n+                    self.fileline_help(span,\n                                    &format!(\"perhaps you meant to enclose the crate name `{}` in \\\n                                            a string?\",\n                                           the_ident.as_str()));\n@@ -5756,7 +5759,7 @@ impl<'a> Parser<'a> {\n             if self.eat_keyword(keywords::Mut) {\n                 let last_span = self.last_span;\n                 self.span_err(last_span, \"const globals cannot be mutable\");\n-                self.span_help(last_span, \"did you mean to declare a static?\");\n+                self.fileline_help(last_span, \"did you mean to declare a static?\");\n             }\n             let (ident, item_, extra_attrs) = self.parse_item_const(None);\n             let last_span = self.last_span;"}, {"sha": "d3f2319681741895ec0dc1c41cc2a95e093ccbc0", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -154,23 +154,23 @@ pub mod color {\n     /// Number for a terminal color\n     pub type Color = u16;\n \n-    pub const BLACK:   Color = 0u16;\n-    pub const RED:     Color = 1u16;\n-    pub const GREEN:   Color = 2u16;\n-    pub const YELLOW:  Color = 3u16;\n-    pub const BLUE:    Color = 4u16;\n-    pub const MAGENTA: Color = 5u16;\n-    pub const CYAN:    Color = 6u16;\n-    pub const WHITE:   Color = 7u16;\n-\n-    pub const BRIGHT_BLACK:   Color = 8u16;\n-    pub const BRIGHT_RED:     Color = 9u16;\n-    pub const BRIGHT_GREEN:   Color = 10u16;\n-    pub const BRIGHT_YELLOW:  Color = 11u16;\n-    pub const BRIGHT_BLUE:    Color = 12u16;\n-    pub const BRIGHT_MAGENTA: Color = 13u16;\n-    pub const BRIGHT_CYAN:    Color = 14u16;\n-    pub const BRIGHT_WHITE:   Color = 15u16;\n+    pub const BLACK:   Color = 0;\n+    pub const RED:     Color = 1;\n+    pub const GREEN:   Color = 2;\n+    pub const YELLOW:  Color = 3;\n+    pub const BLUE:    Color = 4;\n+    pub const MAGENTA: Color = 5;\n+    pub const CYAN:    Color = 6;\n+    pub const WHITE:   Color = 7;\n+\n+    pub const BRIGHT_BLACK:   Color = 8;\n+    pub const BRIGHT_RED:     Color = 9;\n+    pub const BRIGHT_GREEN:   Color = 10;\n+    pub const BRIGHT_YELLOW:  Color = 11;\n+    pub const BRIGHT_BLUE:    Color = 12;\n+    pub const BRIGHT_MAGENTA: Color = 13;\n+    pub const BRIGHT_CYAN:    Color = 14;\n+    pub const BRIGHT_WHITE:   Color = 15;\n }\n \n /// Terminal attributes"}, {"sha": "30b732781db1cdead56be19d692d607036eaf62b", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -128,7 +128,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                             // if c is 0, use 0200 (128) for ncurses compatibility\n                             Number(c) => {\n                                 output.push(if c == 0 {\n-                                    128u8\n+                                    128\n                                 } else {\n                                     c as u8\n                                 })\n@@ -647,7 +647,7 @@ mod test {\n \n     #[test]\n     fn test_comparison_ops() {\n-        let v = [('<', [1u8, 0u8, 0u8]), ('=', [0u8, 1u8, 0u8]), ('>', [0u8, 0u8, 1u8])];\n+        let v = [('<', [1, 0, 0]), ('=', [0, 1, 0]), ('>', [0, 0, 1])];\n         for &(op, bs) in &v {\n             let s = format!(\"%{{1}}%{{2}}%{}%d\", op);\n             let res = expand(s.as_bytes(), &[], &mut Variables::new());"}, {"sha": "a855d80f42a4092951af950b7e9eb2d4da8d3b9c", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1024,7 +1024,7 @@ impl Bencher {\n     pub fn iter<T, F>(&mut self, mut inner: F) where F: FnMut() -> T {\n         self.dur = Duration::span(|| {\n             let k = self.iterations;\n-            for _ in 0u64..k {\n+            for _ in 0..k {\n                 black_box(inner());\n             }\n         });\n@@ -1050,7 +1050,7 @@ impl Bencher {\n     // This is a more statistics-driven benchmark algorithm\n     pub fn auto_bench<F>(&mut self, mut f: F) -> stats::Summary<f64> where F: FnMut(&mut Bencher) {\n         // Initial bench run to get ballpark figure.\n-        let mut n = 1_u64;\n+        let mut n = 1;\n         self.bench_n(n, |x| f(x));\n \n         // Try to estimate iter count for 1ms falling back to 1m"}, {"sha": "1fb6ee7bc7ce1952c59d0f0dd579b6b6e86413e3", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 264, "deletions": 273, "changes": 537, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -115,27 +115,26 @@ pub mod general_category {\n         '\\u{2eff}'), ('\\u{2fd6}', '\\u{2fef}'), ('\\u{2ffc}', '\\u{2fff}'), ('\\u{3040}', '\\u{3040}'),\n         ('\\u{3097}', '\\u{3098}'), ('\\u{3100}', '\\u{3104}'), ('\\u{312e}', '\\u{3130}'), ('\\u{318f}',\n         '\\u{318f}'), ('\\u{31bb}', '\\u{31bf}'), ('\\u{31e4}', '\\u{31ef}'), ('\\u{321f}', '\\u{321f}'),\n-        ('\\u{32ff}', '\\u{32ff}'), ('\\u{3401}', '\\u{4db4}'), ('\\u{4db6}', '\\u{4dbf}'), ('\\u{4e01}',\n-        '\\u{9fcb}'), ('\\u{9fcd}', '\\u{9fff}'), ('\\u{a48d}', '\\u{a48f}'), ('\\u{a4c7}', '\\u{a4cf}'),\n-        ('\\u{a62c}', '\\u{a63f}'), ('\\u{a69e}', '\\u{a69e}'), ('\\u{a6f8}', '\\u{a6ff}'), ('\\u{a78f}',\n-        '\\u{a78f}'), ('\\u{a7ae}', '\\u{a7af}'), ('\\u{a7b2}', '\\u{a7f6}'), ('\\u{a82c}', '\\u{a82f}'),\n-        ('\\u{a83a}', '\\u{a83f}'), ('\\u{a878}', '\\u{a87f}'), ('\\u{a8c5}', '\\u{a8cd}'), ('\\u{a8da}',\n-        '\\u{a8df}'), ('\\u{a8fc}', '\\u{a8ff}'), ('\\u{a954}', '\\u{a95e}'), ('\\u{a97d}', '\\u{a97f}'),\n-        ('\\u{a9ce}', '\\u{a9ce}'), ('\\u{a9da}', '\\u{a9dd}'), ('\\u{a9ff}', '\\u{a9ff}'), ('\\u{aa37}',\n-        '\\u{aa3f}'), ('\\u{aa4e}', '\\u{aa4f}'), ('\\u{aa5a}', '\\u{aa5b}'), ('\\u{aac3}', '\\u{aada}'),\n-        ('\\u{aaf7}', '\\u{ab00}'), ('\\u{ab07}', '\\u{ab08}'), ('\\u{ab0f}', '\\u{ab10}'), ('\\u{ab17}',\n-        '\\u{ab1f}'), ('\\u{ab27}', '\\u{ab27}'), ('\\u{ab2f}', '\\u{ab2f}'), ('\\u{ab60}', '\\u{ab63}'),\n-        ('\\u{ab66}', '\\u{abbf}'), ('\\u{abee}', '\\u{abef}'), ('\\u{abfa}', '\\u{abff}'), ('\\u{ac01}',\n-        '\\u{d7a2}'), ('\\u{d7a4}', '\\u{d7af}'), ('\\u{d7c7}', '\\u{d7ca}'), ('\\u{d7fc}', '\\u{d7ff}'),\n-        ('\\u{e000}', '\\u{f8ff}'), ('\\u{fa6e}', '\\u{fa6f}'), ('\\u{fada}', '\\u{faff}'), ('\\u{fb07}',\n-        '\\u{fb12}'), ('\\u{fb18}', '\\u{fb1c}'), ('\\u{fb37}', '\\u{fb37}'), ('\\u{fb3d}', '\\u{fb3d}'),\n-        ('\\u{fb3f}', '\\u{fb3f}'), ('\\u{fb42}', '\\u{fb42}'), ('\\u{fb45}', '\\u{fb45}'), ('\\u{fbc2}',\n-        '\\u{fbd2}'), ('\\u{fd40}', '\\u{fd4f}'), ('\\u{fd90}', '\\u{fd91}'), ('\\u{fdc8}', '\\u{fdef}'),\n-        ('\\u{fdfe}', '\\u{fdff}'), ('\\u{fe1a}', '\\u{fe1f}'), ('\\u{fe2e}', '\\u{fe2f}'), ('\\u{fe53}',\n-        '\\u{fe53}'), ('\\u{fe67}', '\\u{fe67}'), ('\\u{fe6c}', '\\u{fe6f}'), ('\\u{fe75}', '\\u{fe75}'),\n-        ('\\u{fefd}', '\\u{ff00}'), ('\\u{ffbf}', '\\u{ffc1}'), ('\\u{ffc8}', '\\u{ffc9}'), ('\\u{ffd0}',\n-        '\\u{ffd1}'), ('\\u{ffd8}', '\\u{ffd9}'), ('\\u{ffdd}', '\\u{ffdf}'), ('\\u{ffe7}', '\\u{ffe7}'),\n-        ('\\u{ffef}', '\\u{fffb}'), ('\\u{fffe}', '\\u{ffff}'), ('\\u{1000c}', '\\u{1000c}'),\n+        ('\\u{32ff}', '\\u{32ff}'), ('\\u{4db6}', '\\u{4dbf}'), ('\\u{9fcd}', '\\u{9fff}'), ('\\u{a48d}',\n+        '\\u{a48f}'), ('\\u{a4c7}', '\\u{a4cf}'), ('\\u{a62c}', '\\u{a63f}'), ('\\u{a69e}', '\\u{a69e}'),\n+        ('\\u{a6f8}', '\\u{a6ff}'), ('\\u{a78f}', '\\u{a78f}'), ('\\u{a7ae}', '\\u{a7af}'), ('\\u{a7b2}',\n+        '\\u{a7f6}'), ('\\u{a82c}', '\\u{a82f}'), ('\\u{a83a}', '\\u{a83f}'), ('\\u{a878}', '\\u{a87f}'),\n+        ('\\u{a8c5}', '\\u{a8cd}'), ('\\u{a8da}', '\\u{a8df}'), ('\\u{a8fc}', '\\u{a8ff}'), ('\\u{a954}',\n+        '\\u{a95e}'), ('\\u{a97d}', '\\u{a97f}'), ('\\u{a9ce}', '\\u{a9ce}'), ('\\u{a9da}', '\\u{a9dd}'),\n+        ('\\u{a9ff}', '\\u{a9ff}'), ('\\u{aa37}', '\\u{aa3f}'), ('\\u{aa4e}', '\\u{aa4f}'), ('\\u{aa5a}',\n+        '\\u{aa5b}'), ('\\u{aac3}', '\\u{aada}'), ('\\u{aaf7}', '\\u{ab00}'), ('\\u{ab07}', '\\u{ab08}'),\n+        ('\\u{ab0f}', '\\u{ab10}'), ('\\u{ab17}', '\\u{ab1f}'), ('\\u{ab27}', '\\u{ab27}'), ('\\u{ab2f}',\n+        '\\u{ab2f}'), ('\\u{ab60}', '\\u{ab63}'), ('\\u{ab66}', '\\u{abbf}'), ('\\u{abee}', '\\u{abef}'),\n+        ('\\u{abfa}', '\\u{abff}'), ('\\u{d7a4}', '\\u{d7af}'), ('\\u{d7c7}', '\\u{d7ca}'), ('\\u{d7fc}',\n+        '\\u{d7ff}'), ('\\u{e000}', '\\u{f8ff}'), ('\\u{fa6e}', '\\u{fa6f}'), ('\\u{fada}', '\\u{faff}'),\n+        ('\\u{fb07}', '\\u{fb12}'), ('\\u{fb18}', '\\u{fb1c}'), ('\\u{fb37}', '\\u{fb37}'), ('\\u{fb3d}',\n+        '\\u{fb3d}'), ('\\u{fb3f}', '\\u{fb3f}'), ('\\u{fb42}', '\\u{fb42}'), ('\\u{fb45}', '\\u{fb45}'),\n+        ('\\u{fbc2}', '\\u{fbd2}'), ('\\u{fd40}', '\\u{fd4f}'), ('\\u{fd90}', '\\u{fd91}'), ('\\u{fdc8}',\n+        '\\u{fdef}'), ('\\u{fdfe}', '\\u{fdff}'), ('\\u{fe1a}', '\\u{fe1f}'), ('\\u{fe2e}', '\\u{fe2f}'),\n+        ('\\u{fe53}', '\\u{fe53}'), ('\\u{fe67}', '\\u{fe67}'), ('\\u{fe6c}', '\\u{fe6f}'), ('\\u{fe75}',\n+        '\\u{fe75}'), ('\\u{fefd}', '\\u{ff00}'), ('\\u{ffbf}', '\\u{ffc1}'), ('\\u{ffc8}', '\\u{ffc9}'),\n+        ('\\u{ffd0}', '\\u{ffd1}'), ('\\u{ffd8}', '\\u{ffd9}'), ('\\u{ffdd}', '\\u{ffdf}'), ('\\u{ffe7}',\n+        '\\u{ffe7}'), ('\\u{ffef}', '\\u{fffb}'), ('\\u{fffe}', '\\u{ffff}'), ('\\u{1000c}', '\\u{1000c}'),\n         ('\\u{10027}', '\\u{10027}'), ('\\u{1003b}', '\\u{1003b}'), ('\\u{1003e}', '\\u{1003e}'),\n         ('\\u{1004e}', '\\u{1004f}'), ('\\u{1005e}', '\\u{1007f}'), ('\\u{100fb}', '\\u{100ff}'),\n         ('\\u{10103}', '\\u{10106}'), ('\\u{10134}', '\\u{10136}'), ('\\u{1018d}', '\\u{1018f}'),\n@@ -210,9 +209,8 @@ pub mod general_category {\n         ('\\u{1f643}', '\\u{1f644}'), ('\\u{1f6d0}', '\\u{1f6df}'), ('\\u{1f6ed}', '\\u{1f6ef}'),\n         ('\\u{1f6f4}', '\\u{1f6ff}'), ('\\u{1f774}', '\\u{1f77f}'), ('\\u{1f7d5}', '\\u{1f7ff}'),\n         ('\\u{1f80c}', '\\u{1f80f}'), ('\\u{1f848}', '\\u{1f84f}'), ('\\u{1f85a}', '\\u{1f85f}'),\n-        ('\\u{1f888}', '\\u{1f88f}'), ('\\u{1f8ae}', '\\u{1ffff}'), ('\\u{20001}', '\\u{2a6d5}'),\n-        ('\\u{2a6d7}', '\\u{2a6ff}'), ('\\u{2a701}', '\\u{2b733}'), ('\\u{2b735}', '\\u{2b73f}'),\n-        ('\\u{2b741}', '\\u{2b81c}'), ('\\u{2b81e}', '\\u{2f7ff}'), ('\\u{2fa1e}', '\\u{e00ff}'),\n+        ('\\u{1f888}', '\\u{1f88f}'), ('\\u{1f8ae}', '\\u{1ffff}'), ('\\u{2a6d7}', '\\u{2a6ff}'),\n+        ('\\u{2b735}', '\\u{2b73f}'), ('\\u{2b81e}', '\\u{2f7ff}'), ('\\u{2fa1e}', '\\u{e00ff}'),\n         ('\\u{e01f0}', '\\u{10ffff}')\n     ];\n \n@@ -319,112 +317,108 @@ pub mod general_category {\n         ('\\u{2e9a}', '\\u{2e9a}'), ('\\u{2ef4}', '\\u{2eff}'), ('\\u{2fd6}', '\\u{2fef}'), ('\\u{2ffc}',\n         '\\u{2fff}'), ('\\u{3040}', '\\u{3040}'), ('\\u{3097}', '\\u{3098}'), ('\\u{3100}', '\\u{3104}'),\n         ('\\u{312e}', '\\u{3130}'), ('\\u{318f}', '\\u{318f}'), ('\\u{31bb}', '\\u{31bf}'), ('\\u{31e4}',\n-        '\\u{31ef}'), ('\\u{321f}', '\\u{321f}'), ('\\u{32ff}', '\\u{32ff}'), ('\\u{3401}', '\\u{4db4}'),\n-        ('\\u{4db6}', '\\u{4dbf}'), ('\\u{4e01}', '\\u{9fcb}'), ('\\u{9fcd}', '\\u{9fff}'), ('\\u{a48d}',\n-        '\\u{a48f}'), ('\\u{a4c7}', '\\u{a4cf}'), ('\\u{a62c}', '\\u{a63f}'), ('\\u{a69e}', '\\u{a69e}'),\n-        ('\\u{a6f8}', '\\u{a6ff}'), ('\\u{a78f}', '\\u{a78f}'), ('\\u{a7ae}', '\\u{a7af}'), ('\\u{a7b2}',\n-        '\\u{a7f6}'), ('\\u{a82c}', '\\u{a82f}'), ('\\u{a83a}', '\\u{a83f}'), ('\\u{a878}', '\\u{a87f}'),\n-        ('\\u{a8c5}', '\\u{a8cd}'), ('\\u{a8da}', '\\u{a8df}'), ('\\u{a8fc}', '\\u{a8ff}'), ('\\u{a954}',\n-        '\\u{a95e}'), ('\\u{a97d}', '\\u{a97f}'), ('\\u{a9ce}', '\\u{a9ce}'), ('\\u{a9da}', '\\u{a9dd}'),\n-        ('\\u{a9ff}', '\\u{a9ff}'), ('\\u{aa37}', '\\u{aa3f}'), ('\\u{aa4e}', '\\u{aa4f}'), ('\\u{aa5a}',\n-        '\\u{aa5b}'), ('\\u{aac3}', '\\u{aada}'), ('\\u{aaf7}', '\\u{ab00}'), ('\\u{ab07}', '\\u{ab08}'),\n-        ('\\u{ab0f}', '\\u{ab10}'), ('\\u{ab17}', '\\u{ab1f}'), ('\\u{ab27}', '\\u{ab27}'), ('\\u{ab2f}',\n-        '\\u{ab2f}'), ('\\u{ab60}', '\\u{ab63}'), ('\\u{ab66}', '\\u{abbf}'), ('\\u{abee}', '\\u{abef}'),\n-        ('\\u{abfa}', '\\u{abff}'), ('\\u{ac01}', '\\u{d7a2}'), ('\\u{d7a4}', '\\u{d7af}'), ('\\u{d7c7}',\n-        '\\u{d7ca}'), ('\\u{d7fc}', '\\u{d7ff}'), ('\\u{e001}', '\\u{f8fe}'), ('\\u{fa6e}', '\\u{fa6f}'),\n-        ('\\u{fada}', '\\u{faff}'), ('\\u{fb07}', '\\u{fb12}'), ('\\u{fb18}', '\\u{fb1c}'), ('\\u{fb37}',\n-        '\\u{fb37}'), ('\\u{fb3d}', '\\u{fb3d}'), ('\\u{fb3f}', '\\u{fb3f}'), ('\\u{fb42}', '\\u{fb42}'),\n-        ('\\u{fb45}', '\\u{fb45}'), ('\\u{fbc2}', '\\u{fbd2}'), ('\\u{fd40}', '\\u{fd4f}'), ('\\u{fd90}',\n-        '\\u{fd91}'), ('\\u{fdc8}', '\\u{fdef}'), ('\\u{fdfe}', '\\u{fdff}'), ('\\u{fe1a}', '\\u{fe1f}'),\n-        ('\\u{fe2e}', '\\u{fe2f}'), ('\\u{fe53}', '\\u{fe53}'), ('\\u{fe67}', '\\u{fe67}'), ('\\u{fe6c}',\n-        '\\u{fe6f}'), ('\\u{fe75}', '\\u{fe75}'), ('\\u{fefd}', '\\u{fefe}'), ('\\u{ff00}', '\\u{ff00}'),\n-        ('\\u{ffbf}', '\\u{ffc1}'), ('\\u{ffc8}', '\\u{ffc9}'), ('\\u{ffd0}', '\\u{ffd1}'), ('\\u{ffd8}',\n-        '\\u{ffd9}'), ('\\u{ffdd}', '\\u{ffdf}'), ('\\u{ffe7}', '\\u{ffe7}'), ('\\u{ffef}', '\\u{fff8}'),\n-        ('\\u{fffe}', '\\u{ffff}'), ('\\u{1000c}', '\\u{1000c}'), ('\\u{10027}', '\\u{10027}'),\n-        ('\\u{1003b}', '\\u{1003b}'), ('\\u{1003e}', '\\u{1003e}'), ('\\u{1004e}', '\\u{1004f}'),\n-        ('\\u{1005e}', '\\u{1007f}'), ('\\u{100fb}', '\\u{100ff}'), ('\\u{10103}', '\\u{10106}'),\n-        ('\\u{10134}', '\\u{10136}'), ('\\u{1018d}', '\\u{1018f}'), ('\\u{1019c}', '\\u{1019f}'),\n-        ('\\u{101a1}', '\\u{101cf}'), ('\\u{101fe}', '\\u{1027f}'), ('\\u{1029d}', '\\u{1029f}'),\n-        ('\\u{102d1}', '\\u{102df}'), ('\\u{102fc}', '\\u{102ff}'), ('\\u{10324}', '\\u{1032f}'),\n-        ('\\u{1034b}', '\\u{1034f}'), ('\\u{1037b}', '\\u{1037f}'), ('\\u{1039e}', '\\u{1039e}'),\n-        ('\\u{103c4}', '\\u{103c7}'), ('\\u{103d6}', '\\u{103ff}'), ('\\u{1049e}', '\\u{1049f}'),\n-        ('\\u{104aa}', '\\u{104ff}'), ('\\u{10528}', '\\u{1052f}'), ('\\u{10564}', '\\u{1056e}'),\n-        ('\\u{10570}', '\\u{105ff}'), ('\\u{10737}', '\\u{1073f}'), ('\\u{10756}', '\\u{1075f}'),\n-        ('\\u{10768}', '\\u{107ff}'), ('\\u{10806}', '\\u{10807}'), ('\\u{10809}', '\\u{10809}'),\n-        ('\\u{10836}', '\\u{10836}'), ('\\u{10839}', '\\u{1083b}'), ('\\u{1083d}', '\\u{1083e}'),\n-        ('\\u{10856}', '\\u{10856}'), ('\\u{1089f}', '\\u{108a6}'), ('\\u{108b0}', '\\u{108ff}'),\n-        ('\\u{1091c}', '\\u{1091e}'), ('\\u{1093a}', '\\u{1093e}'), ('\\u{10940}', '\\u{1097f}'),\n-        ('\\u{109b8}', '\\u{109bd}'), ('\\u{109c0}', '\\u{109ff}'), ('\\u{10a04}', '\\u{10a04}'),\n-        ('\\u{10a07}', '\\u{10a0b}'), ('\\u{10a14}', '\\u{10a14}'), ('\\u{10a18}', '\\u{10a18}'),\n-        ('\\u{10a34}', '\\u{10a37}'), ('\\u{10a3b}', '\\u{10a3e}'), ('\\u{10a48}', '\\u{10a4f}'),\n-        ('\\u{10a59}', '\\u{10a5f}'), ('\\u{10aa0}', '\\u{10abf}'), ('\\u{10ae7}', '\\u{10aea}'),\n-        ('\\u{10af7}', '\\u{10aff}'), ('\\u{10b36}', '\\u{10b38}'), ('\\u{10b56}', '\\u{10b57}'),\n-        ('\\u{10b73}', '\\u{10b77}'), ('\\u{10b92}', '\\u{10b98}'), ('\\u{10b9d}', '\\u{10ba8}'),\n-        ('\\u{10bb0}', '\\u{10bff}'), ('\\u{10c49}', '\\u{10e5f}'), ('\\u{10e7f}', '\\u{10fff}'),\n-        ('\\u{1104e}', '\\u{11051}'), ('\\u{11070}', '\\u{1107e}'), ('\\u{110c2}', '\\u{110cf}'),\n-        ('\\u{110e9}', '\\u{110ef}'), ('\\u{110fa}', '\\u{110ff}'), ('\\u{11135}', '\\u{11135}'),\n-        ('\\u{11144}', '\\u{1114f}'), ('\\u{11177}', '\\u{1117f}'), ('\\u{111c9}', '\\u{111cc}'),\n-        ('\\u{111ce}', '\\u{111cf}'), ('\\u{111db}', '\\u{111e0}'), ('\\u{111f5}', '\\u{111ff}'),\n-        ('\\u{11212}', '\\u{11212}'), ('\\u{1123e}', '\\u{112af}'), ('\\u{112eb}', '\\u{112ef}'),\n-        ('\\u{112fa}', '\\u{11300}'), ('\\u{11304}', '\\u{11304}'), ('\\u{1130d}', '\\u{1130e}'),\n-        ('\\u{11311}', '\\u{11312}'), ('\\u{11329}', '\\u{11329}'), ('\\u{11331}', '\\u{11331}'),\n-        ('\\u{11334}', '\\u{11334}'), ('\\u{1133a}', '\\u{1133b}'), ('\\u{11345}', '\\u{11346}'),\n-        ('\\u{11349}', '\\u{1134a}'), ('\\u{1134e}', '\\u{11356}'), ('\\u{11358}', '\\u{1135c}'),\n-        ('\\u{11364}', '\\u{11365}'), ('\\u{1136d}', '\\u{1136f}'), ('\\u{11375}', '\\u{1147f}'),\n-        ('\\u{114c8}', '\\u{114cf}'), ('\\u{114da}', '\\u{1157f}'), ('\\u{115b6}', '\\u{115b7}'),\n-        ('\\u{115ca}', '\\u{115ff}'), ('\\u{11645}', '\\u{1164f}'), ('\\u{1165a}', '\\u{1167f}'),\n-        ('\\u{116b8}', '\\u{116bf}'), ('\\u{116ca}', '\\u{1189f}'), ('\\u{118f3}', '\\u{118fe}'),\n-        ('\\u{11900}', '\\u{11abf}'), ('\\u{11af9}', '\\u{11fff}'), ('\\u{12399}', '\\u{123ff}'),\n-        ('\\u{1246f}', '\\u{1246f}'), ('\\u{12475}', '\\u{12fff}'), ('\\u{1342f}', '\\u{167ff}'),\n-        ('\\u{16a39}', '\\u{16a3f}'), ('\\u{16a5f}', '\\u{16a5f}'), ('\\u{16a6a}', '\\u{16a6d}'),\n-        ('\\u{16a70}', '\\u{16acf}'), ('\\u{16aee}', '\\u{16aef}'), ('\\u{16af6}', '\\u{16aff}'),\n-        ('\\u{16b46}', '\\u{16b4f}'), ('\\u{16b5a}', '\\u{16b5a}'), ('\\u{16b62}', '\\u{16b62}'),\n-        ('\\u{16b78}', '\\u{16b7c}'), ('\\u{16b90}', '\\u{16eff}'), ('\\u{16f45}', '\\u{16f4f}'),\n-        ('\\u{16f7f}', '\\u{16f8e}'), ('\\u{16fa0}', '\\u{1afff}'), ('\\u{1b002}', '\\u{1bbff}'),\n-        ('\\u{1bc6b}', '\\u{1bc6f}'), ('\\u{1bc7d}', '\\u{1bc7f}'), ('\\u{1bc89}', '\\u{1bc8f}'),\n-        ('\\u{1bc9a}', '\\u{1bc9b}'), ('\\u{1bca4}', '\\u{1cfff}'), ('\\u{1d0f6}', '\\u{1d0ff}'),\n-        ('\\u{1d127}', '\\u{1d128}'), ('\\u{1d1de}', '\\u{1d1ff}'), ('\\u{1d246}', '\\u{1d2ff}'),\n-        ('\\u{1d357}', '\\u{1d35f}'), ('\\u{1d372}', '\\u{1d3ff}'), ('\\u{1d455}', '\\u{1d455}'),\n-        ('\\u{1d49d}', '\\u{1d49d}'), ('\\u{1d4a0}', '\\u{1d4a1}'), ('\\u{1d4a3}', '\\u{1d4a4}'),\n-        ('\\u{1d4a7}', '\\u{1d4a8}'), ('\\u{1d4ad}', '\\u{1d4ad}'), ('\\u{1d4ba}', '\\u{1d4ba}'),\n-        ('\\u{1d4bc}', '\\u{1d4bc}'), ('\\u{1d4c4}', '\\u{1d4c4}'), ('\\u{1d506}', '\\u{1d506}'),\n-        ('\\u{1d50b}', '\\u{1d50c}'), ('\\u{1d515}', '\\u{1d515}'), ('\\u{1d51d}', '\\u{1d51d}'),\n-        ('\\u{1d53a}', '\\u{1d53a}'), ('\\u{1d53f}', '\\u{1d53f}'), ('\\u{1d545}', '\\u{1d545}'),\n-        ('\\u{1d547}', '\\u{1d549}'), ('\\u{1d551}', '\\u{1d551}'), ('\\u{1d6a6}', '\\u{1d6a7}'),\n-        ('\\u{1d7cc}', '\\u{1d7cd}'), ('\\u{1d800}', '\\u{1e7ff}'), ('\\u{1e8c5}', '\\u{1e8c6}'),\n-        ('\\u{1e8d7}', '\\u{1edff}'), ('\\u{1ee04}', '\\u{1ee04}'), ('\\u{1ee20}', '\\u{1ee20}'),\n-        ('\\u{1ee23}', '\\u{1ee23}'), ('\\u{1ee25}', '\\u{1ee26}'), ('\\u{1ee28}', '\\u{1ee28}'),\n-        ('\\u{1ee33}', '\\u{1ee33}'), ('\\u{1ee38}', '\\u{1ee38}'), ('\\u{1ee3a}', '\\u{1ee3a}'),\n-        ('\\u{1ee3c}', '\\u{1ee41}'), ('\\u{1ee43}', '\\u{1ee46}'), ('\\u{1ee48}', '\\u{1ee48}'),\n-        ('\\u{1ee4a}', '\\u{1ee4a}'), ('\\u{1ee4c}', '\\u{1ee4c}'), ('\\u{1ee50}', '\\u{1ee50}'),\n-        ('\\u{1ee53}', '\\u{1ee53}'), ('\\u{1ee55}', '\\u{1ee56}'), ('\\u{1ee58}', '\\u{1ee58}'),\n-        ('\\u{1ee5a}', '\\u{1ee5a}'), ('\\u{1ee5c}', '\\u{1ee5c}'), ('\\u{1ee5e}', '\\u{1ee5e}'),\n-        ('\\u{1ee60}', '\\u{1ee60}'), ('\\u{1ee63}', '\\u{1ee63}'), ('\\u{1ee65}', '\\u{1ee66}'),\n-        ('\\u{1ee6b}', '\\u{1ee6b}'), ('\\u{1ee73}', '\\u{1ee73}'), ('\\u{1ee78}', '\\u{1ee78}'),\n-        ('\\u{1ee7d}', '\\u{1ee7d}'), ('\\u{1ee7f}', '\\u{1ee7f}'), ('\\u{1ee8a}', '\\u{1ee8a}'),\n-        ('\\u{1ee9c}', '\\u{1eea0}'), ('\\u{1eea4}', '\\u{1eea4}'), ('\\u{1eeaa}', '\\u{1eeaa}'),\n-        ('\\u{1eebc}', '\\u{1eeef}'), ('\\u{1eef2}', '\\u{1efff}'), ('\\u{1f02c}', '\\u{1f02f}'),\n-        ('\\u{1f094}', '\\u{1f09f}'), ('\\u{1f0af}', '\\u{1f0b0}'), ('\\u{1f0c0}', '\\u{1f0c0}'),\n-        ('\\u{1f0d0}', '\\u{1f0d0}'), ('\\u{1f0f6}', '\\u{1f0ff}'), ('\\u{1f10d}', '\\u{1f10f}'),\n-        ('\\u{1f12f}', '\\u{1f12f}'), ('\\u{1f16c}', '\\u{1f16f}'), ('\\u{1f19b}', '\\u{1f1e5}'),\n-        ('\\u{1f203}', '\\u{1f20f}'), ('\\u{1f23b}', '\\u{1f23f}'), ('\\u{1f249}', '\\u{1f24f}'),\n-        ('\\u{1f252}', '\\u{1f2ff}'), ('\\u{1f32d}', '\\u{1f32f}'), ('\\u{1f37e}', '\\u{1f37f}'),\n-        ('\\u{1f3cf}', '\\u{1f3d3}'), ('\\u{1f3f8}', '\\u{1f3ff}'), ('\\u{1f4ff}', '\\u{1f4ff}'),\n-        ('\\u{1f54b}', '\\u{1f54f}'), ('\\u{1f57a}', '\\u{1f57a}'), ('\\u{1f5a4}', '\\u{1f5a4}'),\n-        ('\\u{1f643}', '\\u{1f644}'), ('\\u{1f6d0}', '\\u{1f6df}'), ('\\u{1f6ed}', '\\u{1f6ef}'),\n-        ('\\u{1f6f4}', '\\u{1f6ff}'), ('\\u{1f774}', '\\u{1f77f}'), ('\\u{1f7d5}', '\\u{1f7ff}'),\n-        ('\\u{1f80c}', '\\u{1f80f}'), ('\\u{1f848}', '\\u{1f84f}'), ('\\u{1f85a}', '\\u{1f85f}'),\n-        ('\\u{1f888}', '\\u{1f88f}'), ('\\u{1f8ae}', '\\u{1ffff}'), ('\\u{20001}', '\\u{2a6d5}'),\n-        ('\\u{2a6d7}', '\\u{2a6ff}'), ('\\u{2a701}', '\\u{2b733}'), ('\\u{2b735}', '\\u{2b73f}'),\n-        ('\\u{2b741}', '\\u{2b81c}'), ('\\u{2b81e}', '\\u{2f7ff}'), ('\\u{2fa1e}', '\\u{e0000}'),\n-        ('\\u{e0002}', '\\u{e001f}'), ('\\u{e0080}', '\\u{e00ff}'), ('\\u{e01f0}', '\\u{effff}'),\n-        ('\\u{f0001}', '\\u{ffffc}'), ('\\u{ffffe}', '\\u{fffff}'), ('\\u{100001}', '\\u{10fffc}'),\n-        ('\\u{10fffe}', '\\u{10ffff}')\n+        '\\u{31ef}'), ('\\u{321f}', '\\u{321f}'), ('\\u{32ff}', '\\u{32ff}'), ('\\u{4db6}', '\\u{4dbf}'),\n+        ('\\u{9fcd}', '\\u{9fff}'), ('\\u{a48d}', '\\u{a48f}'), ('\\u{a4c7}', '\\u{a4cf}'), ('\\u{a62c}',\n+        '\\u{a63f}'), ('\\u{a69e}', '\\u{a69e}'), ('\\u{a6f8}', '\\u{a6ff}'), ('\\u{a78f}', '\\u{a78f}'),\n+        ('\\u{a7ae}', '\\u{a7af}'), ('\\u{a7b2}', '\\u{a7f6}'), ('\\u{a82c}', '\\u{a82f}'), ('\\u{a83a}',\n+        '\\u{a83f}'), ('\\u{a878}', '\\u{a87f}'), ('\\u{a8c5}', '\\u{a8cd}'), ('\\u{a8da}', '\\u{a8df}'),\n+        ('\\u{a8fc}', '\\u{a8ff}'), ('\\u{a954}', '\\u{a95e}'), ('\\u{a97d}', '\\u{a97f}'), ('\\u{a9ce}',\n+        '\\u{a9ce}'), ('\\u{a9da}', '\\u{a9dd}'), ('\\u{a9ff}', '\\u{a9ff}'), ('\\u{aa37}', '\\u{aa3f}'),\n+        ('\\u{aa4e}', '\\u{aa4f}'), ('\\u{aa5a}', '\\u{aa5b}'), ('\\u{aac3}', '\\u{aada}'), ('\\u{aaf7}',\n+        '\\u{ab00}'), ('\\u{ab07}', '\\u{ab08}'), ('\\u{ab0f}', '\\u{ab10}'), ('\\u{ab17}', '\\u{ab1f}'),\n+        ('\\u{ab27}', '\\u{ab27}'), ('\\u{ab2f}', '\\u{ab2f}'), ('\\u{ab60}', '\\u{ab63}'), ('\\u{ab66}',\n+        '\\u{abbf}'), ('\\u{abee}', '\\u{abef}'), ('\\u{abfa}', '\\u{abff}'), ('\\u{d7a4}', '\\u{d7af}'),\n+        ('\\u{d7c7}', '\\u{d7ca}'), ('\\u{d7fc}', '\\u{d7ff}'), ('\\u{fa6e}', '\\u{fa6f}'), ('\\u{fada}',\n+        '\\u{faff}'), ('\\u{fb07}', '\\u{fb12}'), ('\\u{fb18}', '\\u{fb1c}'), ('\\u{fb37}', '\\u{fb37}'),\n+        ('\\u{fb3d}', '\\u{fb3d}'), ('\\u{fb3f}', '\\u{fb3f}'), ('\\u{fb42}', '\\u{fb42}'), ('\\u{fb45}',\n+        '\\u{fb45}'), ('\\u{fbc2}', '\\u{fbd2}'), ('\\u{fd40}', '\\u{fd4f}'), ('\\u{fd90}', '\\u{fd91}'),\n+        ('\\u{fdc8}', '\\u{fdef}'), ('\\u{fdfe}', '\\u{fdff}'), ('\\u{fe1a}', '\\u{fe1f}'), ('\\u{fe2e}',\n+        '\\u{fe2f}'), ('\\u{fe53}', '\\u{fe53}'), ('\\u{fe67}', '\\u{fe67}'), ('\\u{fe6c}', '\\u{fe6f}'),\n+        ('\\u{fe75}', '\\u{fe75}'), ('\\u{fefd}', '\\u{fefe}'), ('\\u{ff00}', '\\u{ff00}'), ('\\u{ffbf}',\n+        '\\u{ffc1}'), ('\\u{ffc8}', '\\u{ffc9}'), ('\\u{ffd0}', '\\u{ffd1}'), ('\\u{ffd8}', '\\u{ffd9}'),\n+        ('\\u{ffdd}', '\\u{ffdf}'), ('\\u{ffe7}', '\\u{ffe7}'), ('\\u{ffef}', '\\u{fff8}'), ('\\u{fffe}',\n+        '\\u{ffff}'), ('\\u{1000c}', '\\u{1000c}'), ('\\u{10027}', '\\u{10027}'), ('\\u{1003b}',\n+        '\\u{1003b}'), ('\\u{1003e}', '\\u{1003e}'), ('\\u{1004e}', '\\u{1004f}'), ('\\u{1005e}',\n+        '\\u{1007f}'), ('\\u{100fb}', '\\u{100ff}'), ('\\u{10103}', '\\u{10106}'), ('\\u{10134}',\n+        '\\u{10136}'), ('\\u{1018d}', '\\u{1018f}'), ('\\u{1019c}', '\\u{1019f}'), ('\\u{101a1}',\n+        '\\u{101cf}'), ('\\u{101fe}', '\\u{1027f}'), ('\\u{1029d}', '\\u{1029f}'), ('\\u{102d1}',\n+        '\\u{102df}'), ('\\u{102fc}', '\\u{102ff}'), ('\\u{10324}', '\\u{1032f}'), ('\\u{1034b}',\n+        '\\u{1034f}'), ('\\u{1037b}', '\\u{1037f}'), ('\\u{1039e}', '\\u{1039e}'), ('\\u{103c4}',\n+        '\\u{103c7}'), ('\\u{103d6}', '\\u{103ff}'), ('\\u{1049e}', '\\u{1049f}'), ('\\u{104aa}',\n+        '\\u{104ff}'), ('\\u{10528}', '\\u{1052f}'), ('\\u{10564}', '\\u{1056e}'), ('\\u{10570}',\n+        '\\u{105ff}'), ('\\u{10737}', '\\u{1073f}'), ('\\u{10756}', '\\u{1075f}'), ('\\u{10768}',\n+        '\\u{107ff}'), ('\\u{10806}', '\\u{10807}'), ('\\u{10809}', '\\u{10809}'), ('\\u{10836}',\n+        '\\u{10836}'), ('\\u{10839}', '\\u{1083b}'), ('\\u{1083d}', '\\u{1083e}'), ('\\u{10856}',\n+        '\\u{10856}'), ('\\u{1089f}', '\\u{108a6}'), ('\\u{108b0}', '\\u{108ff}'), ('\\u{1091c}',\n+        '\\u{1091e}'), ('\\u{1093a}', '\\u{1093e}'), ('\\u{10940}', '\\u{1097f}'), ('\\u{109b8}',\n+        '\\u{109bd}'), ('\\u{109c0}', '\\u{109ff}'), ('\\u{10a04}', '\\u{10a04}'), ('\\u{10a07}',\n+        '\\u{10a0b}'), ('\\u{10a14}', '\\u{10a14}'), ('\\u{10a18}', '\\u{10a18}'), ('\\u{10a34}',\n+        '\\u{10a37}'), ('\\u{10a3b}', '\\u{10a3e}'), ('\\u{10a48}', '\\u{10a4f}'), ('\\u{10a59}',\n+        '\\u{10a5f}'), ('\\u{10aa0}', '\\u{10abf}'), ('\\u{10ae7}', '\\u{10aea}'), ('\\u{10af7}',\n+        '\\u{10aff}'), ('\\u{10b36}', '\\u{10b38}'), ('\\u{10b56}', '\\u{10b57}'), ('\\u{10b73}',\n+        '\\u{10b77}'), ('\\u{10b92}', '\\u{10b98}'), ('\\u{10b9d}', '\\u{10ba8}'), ('\\u{10bb0}',\n+        '\\u{10bff}'), ('\\u{10c49}', '\\u{10e5f}'), ('\\u{10e7f}', '\\u{10fff}'), ('\\u{1104e}',\n+        '\\u{11051}'), ('\\u{11070}', '\\u{1107e}'), ('\\u{110c2}', '\\u{110cf}'), ('\\u{110e9}',\n+        '\\u{110ef}'), ('\\u{110fa}', '\\u{110ff}'), ('\\u{11135}', '\\u{11135}'), ('\\u{11144}',\n+        '\\u{1114f}'), ('\\u{11177}', '\\u{1117f}'), ('\\u{111c9}', '\\u{111cc}'), ('\\u{111ce}',\n+        '\\u{111cf}'), ('\\u{111db}', '\\u{111e0}'), ('\\u{111f5}', '\\u{111ff}'), ('\\u{11212}',\n+        '\\u{11212}'), ('\\u{1123e}', '\\u{112af}'), ('\\u{112eb}', '\\u{112ef}'), ('\\u{112fa}',\n+        '\\u{11300}'), ('\\u{11304}', '\\u{11304}'), ('\\u{1130d}', '\\u{1130e}'), ('\\u{11311}',\n+        '\\u{11312}'), ('\\u{11329}', '\\u{11329}'), ('\\u{11331}', '\\u{11331}'), ('\\u{11334}',\n+        '\\u{11334}'), ('\\u{1133a}', '\\u{1133b}'), ('\\u{11345}', '\\u{11346}'), ('\\u{11349}',\n+        '\\u{1134a}'), ('\\u{1134e}', '\\u{11356}'), ('\\u{11358}', '\\u{1135c}'), ('\\u{11364}',\n+        '\\u{11365}'), ('\\u{1136d}', '\\u{1136f}'), ('\\u{11375}', '\\u{1147f}'), ('\\u{114c8}',\n+        '\\u{114cf}'), ('\\u{114da}', '\\u{1157f}'), ('\\u{115b6}', '\\u{115b7}'), ('\\u{115ca}',\n+        '\\u{115ff}'), ('\\u{11645}', '\\u{1164f}'), ('\\u{1165a}', '\\u{1167f}'), ('\\u{116b8}',\n+        '\\u{116bf}'), ('\\u{116ca}', '\\u{1189f}'), ('\\u{118f3}', '\\u{118fe}'), ('\\u{11900}',\n+        '\\u{11abf}'), ('\\u{11af9}', '\\u{11fff}'), ('\\u{12399}', '\\u{123ff}'), ('\\u{1246f}',\n+        '\\u{1246f}'), ('\\u{12475}', '\\u{12fff}'), ('\\u{1342f}', '\\u{167ff}'), ('\\u{16a39}',\n+        '\\u{16a3f}'), ('\\u{16a5f}', '\\u{16a5f}'), ('\\u{16a6a}', '\\u{16a6d}'), ('\\u{16a70}',\n+        '\\u{16acf}'), ('\\u{16aee}', '\\u{16aef}'), ('\\u{16af6}', '\\u{16aff}'), ('\\u{16b46}',\n+        '\\u{16b4f}'), ('\\u{16b5a}', '\\u{16b5a}'), ('\\u{16b62}', '\\u{16b62}'), ('\\u{16b78}',\n+        '\\u{16b7c}'), ('\\u{16b90}', '\\u{16eff}'), ('\\u{16f45}', '\\u{16f4f}'), ('\\u{16f7f}',\n+        '\\u{16f8e}'), ('\\u{16fa0}', '\\u{1afff}'), ('\\u{1b002}', '\\u{1bbff}'), ('\\u{1bc6b}',\n+        '\\u{1bc6f}'), ('\\u{1bc7d}', '\\u{1bc7f}'), ('\\u{1bc89}', '\\u{1bc8f}'), ('\\u{1bc9a}',\n+        '\\u{1bc9b}'), ('\\u{1bca4}', '\\u{1cfff}'), ('\\u{1d0f6}', '\\u{1d0ff}'), ('\\u{1d127}',\n+        '\\u{1d128}'), ('\\u{1d1de}', '\\u{1d1ff}'), ('\\u{1d246}', '\\u{1d2ff}'), ('\\u{1d357}',\n+        '\\u{1d35f}'), ('\\u{1d372}', '\\u{1d3ff}'), ('\\u{1d455}', '\\u{1d455}'), ('\\u{1d49d}',\n+        '\\u{1d49d}'), ('\\u{1d4a0}', '\\u{1d4a1}'), ('\\u{1d4a3}', '\\u{1d4a4}'), ('\\u{1d4a7}',\n+        '\\u{1d4a8}'), ('\\u{1d4ad}', '\\u{1d4ad}'), ('\\u{1d4ba}', '\\u{1d4ba}'), ('\\u{1d4bc}',\n+        '\\u{1d4bc}'), ('\\u{1d4c4}', '\\u{1d4c4}'), ('\\u{1d506}', '\\u{1d506}'), ('\\u{1d50b}',\n+        '\\u{1d50c}'), ('\\u{1d515}', '\\u{1d515}'), ('\\u{1d51d}', '\\u{1d51d}'), ('\\u{1d53a}',\n+        '\\u{1d53a}'), ('\\u{1d53f}', '\\u{1d53f}'), ('\\u{1d545}', '\\u{1d545}'), ('\\u{1d547}',\n+        '\\u{1d549}'), ('\\u{1d551}', '\\u{1d551}'), ('\\u{1d6a6}', '\\u{1d6a7}'), ('\\u{1d7cc}',\n+        '\\u{1d7cd}'), ('\\u{1d800}', '\\u{1e7ff}'), ('\\u{1e8c5}', '\\u{1e8c6}'), ('\\u{1e8d7}',\n+        '\\u{1edff}'), ('\\u{1ee04}', '\\u{1ee04}'), ('\\u{1ee20}', '\\u{1ee20}'), ('\\u{1ee23}',\n+        '\\u{1ee23}'), ('\\u{1ee25}', '\\u{1ee26}'), ('\\u{1ee28}', '\\u{1ee28}'), ('\\u{1ee33}',\n+        '\\u{1ee33}'), ('\\u{1ee38}', '\\u{1ee38}'), ('\\u{1ee3a}', '\\u{1ee3a}'), ('\\u{1ee3c}',\n+        '\\u{1ee41}'), ('\\u{1ee43}', '\\u{1ee46}'), ('\\u{1ee48}', '\\u{1ee48}'), ('\\u{1ee4a}',\n+        '\\u{1ee4a}'), ('\\u{1ee4c}', '\\u{1ee4c}'), ('\\u{1ee50}', '\\u{1ee50}'), ('\\u{1ee53}',\n+        '\\u{1ee53}'), ('\\u{1ee55}', '\\u{1ee56}'), ('\\u{1ee58}', '\\u{1ee58}'), ('\\u{1ee5a}',\n+        '\\u{1ee5a}'), ('\\u{1ee5c}', '\\u{1ee5c}'), ('\\u{1ee5e}', '\\u{1ee5e}'), ('\\u{1ee60}',\n+        '\\u{1ee60}'), ('\\u{1ee63}', '\\u{1ee63}'), ('\\u{1ee65}', '\\u{1ee66}'), ('\\u{1ee6b}',\n+        '\\u{1ee6b}'), ('\\u{1ee73}', '\\u{1ee73}'), ('\\u{1ee78}', '\\u{1ee78}'), ('\\u{1ee7d}',\n+        '\\u{1ee7d}'), ('\\u{1ee7f}', '\\u{1ee7f}'), ('\\u{1ee8a}', '\\u{1ee8a}'), ('\\u{1ee9c}',\n+        '\\u{1eea0}'), ('\\u{1eea4}', '\\u{1eea4}'), ('\\u{1eeaa}', '\\u{1eeaa}'), ('\\u{1eebc}',\n+        '\\u{1eeef}'), ('\\u{1eef2}', '\\u{1efff}'), ('\\u{1f02c}', '\\u{1f02f}'), ('\\u{1f094}',\n+        '\\u{1f09f}'), ('\\u{1f0af}', '\\u{1f0b0}'), ('\\u{1f0c0}', '\\u{1f0c0}'), ('\\u{1f0d0}',\n+        '\\u{1f0d0}'), ('\\u{1f0f6}', '\\u{1f0ff}'), ('\\u{1f10d}', '\\u{1f10f}'), ('\\u{1f12f}',\n+        '\\u{1f12f}'), ('\\u{1f16c}', '\\u{1f16f}'), ('\\u{1f19b}', '\\u{1f1e5}'), ('\\u{1f203}',\n+        '\\u{1f20f}'), ('\\u{1f23b}', '\\u{1f23f}'), ('\\u{1f249}', '\\u{1f24f}'), ('\\u{1f252}',\n+        '\\u{1f2ff}'), ('\\u{1f32d}', '\\u{1f32f}'), ('\\u{1f37e}', '\\u{1f37f}'), ('\\u{1f3cf}',\n+        '\\u{1f3d3}'), ('\\u{1f3f8}', '\\u{1f3ff}'), ('\\u{1f4ff}', '\\u{1f4ff}'), ('\\u{1f54b}',\n+        '\\u{1f54f}'), ('\\u{1f57a}', '\\u{1f57a}'), ('\\u{1f5a4}', '\\u{1f5a4}'), ('\\u{1f643}',\n+        '\\u{1f644}'), ('\\u{1f6d0}', '\\u{1f6df}'), ('\\u{1f6ed}', '\\u{1f6ef}'), ('\\u{1f6f4}',\n+        '\\u{1f6ff}'), ('\\u{1f774}', '\\u{1f77f}'), ('\\u{1f7d5}', '\\u{1f7ff}'), ('\\u{1f80c}',\n+        '\\u{1f80f}'), ('\\u{1f848}', '\\u{1f84f}'), ('\\u{1f85a}', '\\u{1f85f}'), ('\\u{1f888}',\n+        '\\u{1f88f}'), ('\\u{1f8ae}', '\\u{1ffff}'), ('\\u{2a6d7}', '\\u{2a6ff}'), ('\\u{2b735}',\n+        '\\u{2b73f}'), ('\\u{2b81e}', '\\u{2f7ff}'), ('\\u{2fa1e}', '\\u{e0000}'), ('\\u{e0002}',\n+        '\\u{e001f}'), ('\\u{e0080}', '\\u{e00ff}'), ('\\u{e01f0}', '\\u{effff}'), ('\\u{ffffe}',\n+        '\\u{fffff}'), ('\\u{10fffe}', '\\u{10ffff}')\n     ];\n \n     pub const Co_table: &'static [(char, char)] = &[\n-        ('\\u{e000}', '\\u{e000}'), ('\\u{f8ff}', '\\u{f8ff}'), ('\\u{f0000}', '\\u{f0000}'),\n-        ('\\u{ffffd}', '\\u{ffffd}'), ('\\u{100000}', '\\u{100000}'), ('\\u{10fffd}', '\\u{10fffd}')\n+        ('\\u{e000}', '\\u{f8ff}'), ('\\u{f0000}', '\\u{ffffd}'), ('\\u{100000}', '\\u{10fffd}')\n     ];\n \n     pub const L_table: &'static [(char, char)] = &[\n@@ -511,86 +505,84 @@ pub mod general_category {\n         ('\\u{2e2f}', '\\u{2e2f}'), ('\\u{3005}', '\\u{3006}'), ('\\u{3031}', '\\u{3035}'), ('\\u{303b}',\n         '\\u{303c}'), ('\\u{3041}', '\\u{3096}'), ('\\u{309d}', '\\u{309f}'), ('\\u{30a1}', '\\u{30fa}'),\n         ('\\u{30fc}', '\\u{30ff}'), ('\\u{3105}', '\\u{312d}'), ('\\u{3131}', '\\u{318e}'), ('\\u{31a0}',\n-        '\\u{31ba}'), ('\\u{31f0}', '\\u{31ff}'), ('\\u{3400}', '\\u{3400}'), ('\\u{4db5}', '\\u{4db5}'),\n-        ('\\u{4e00}', '\\u{4e00}'), ('\\u{9fcc}', '\\u{9fcc}'), ('\\u{a000}', '\\u{a48c}'), ('\\u{a4d0}',\n-        '\\u{a4fd}'), ('\\u{a500}', '\\u{a60c}'), ('\\u{a610}', '\\u{a61f}'), ('\\u{a62a}', '\\u{a62b}'),\n-        ('\\u{a640}', '\\u{a66e}'), ('\\u{a67f}', '\\u{a69d}'), ('\\u{a6a0}', '\\u{a6e5}'), ('\\u{a717}',\n-        '\\u{a71f}'), ('\\u{a722}', '\\u{a788}'), ('\\u{a78b}', '\\u{a78e}'), ('\\u{a790}', '\\u{a7ad}'),\n-        ('\\u{a7b0}', '\\u{a7b1}'), ('\\u{a7f7}', '\\u{a801}'), ('\\u{a803}', '\\u{a805}'), ('\\u{a807}',\n-        '\\u{a80a}'), ('\\u{a80c}', '\\u{a822}'), ('\\u{a840}', '\\u{a873}'), ('\\u{a882}', '\\u{a8b3}'),\n-        ('\\u{a8f2}', '\\u{a8f7}'), ('\\u{a8fb}', '\\u{a8fb}'), ('\\u{a90a}', '\\u{a925}'), ('\\u{a930}',\n-        '\\u{a946}'), ('\\u{a960}', '\\u{a97c}'), ('\\u{a984}', '\\u{a9b2}'), ('\\u{a9cf}', '\\u{a9cf}'),\n-        ('\\u{a9e0}', '\\u{a9e4}'), ('\\u{a9e6}', '\\u{a9ef}'), ('\\u{a9fa}', '\\u{a9fe}'), ('\\u{aa00}',\n-        '\\u{aa28}'), ('\\u{aa40}', '\\u{aa42}'), ('\\u{aa44}', '\\u{aa4b}'), ('\\u{aa60}', '\\u{aa76}'),\n-        ('\\u{aa7a}', '\\u{aa7a}'), ('\\u{aa7e}', '\\u{aaaf}'), ('\\u{aab1}', '\\u{aab1}'), ('\\u{aab5}',\n-        '\\u{aab6}'), ('\\u{aab9}', '\\u{aabd}'), ('\\u{aac0}', '\\u{aac0}'), ('\\u{aac2}', '\\u{aac2}'),\n-        ('\\u{aadb}', '\\u{aadd}'), ('\\u{aae0}', '\\u{aaea}'), ('\\u{aaf2}', '\\u{aaf4}'), ('\\u{ab01}',\n-        '\\u{ab06}'), ('\\u{ab09}', '\\u{ab0e}'), ('\\u{ab11}', '\\u{ab16}'), ('\\u{ab20}', '\\u{ab26}'),\n-        ('\\u{ab28}', '\\u{ab2e}'), ('\\u{ab30}', '\\u{ab5a}'), ('\\u{ab5c}', '\\u{ab5f}'), ('\\u{ab64}',\n-        '\\u{ab65}'), ('\\u{abc0}', '\\u{abe2}'), ('\\u{ac00}', '\\u{ac00}'), ('\\u{d7a3}', '\\u{d7a3}'),\n-        ('\\u{d7b0}', '\\u{d7c6}'), ('\\u{d7cb}', '\\u{d7fb}'), ('\\u{f900}', '\\u{fa6d}'), ('\\u{fa70}',\n-        '\\u{fad9}'), ('\\u{fb00}', '\\u{fb06}'), ('\\u{fb13}', '\\u{fb17}'), ('\\u{fb1d}', '\\u{fb1d}'),\n-        ('\\u{fb1f}', '\\u{fb28}'), ('\\u{fb2a}', '\\u{fb36}'), ('\\u{fb38}', '\\u{fb3c}'), ('\\u{fb3e}',\n-        '\\u{fb3e}'), ('\\u{fb40}', '\\u{fb41}'), ('\\u{fb43}', '\\u{fb44}'), ('\\u{fb46}', '\\u{fbb1}'),\n-        ('\\u{fbd3}', '\\u{fd3d}'), ('\\u{fd50}', '\\u{fd8f}'), ('\\u{fd92}', '\\u{fdc7}'), ('\\u{fdf0}',\n-        '\\u{fdfb}'), ('\\u{fe70}', '\\u{fe74}'), ('\\u{fe76}', '\\u{fefc}'), ('\\u{ff21}', '\\u{ff3a}'),\n-        ('\\u{ff41}', '\\u{ff5a}'), ('\\u{ff66}', '\\u{ffbe}'), ('\\u{ffc2}', '\\u{ffc7}'), ('\\u{ffca}',\n-        '\\u{ffcf}'), ('\\u{ffd2}', '\\u{ffd7}'), ('\\u{ffda}', '\\u{ffdc}'), ('\\u{10000}', '\\u{1000b}'),\n-        ('\\u{1000d}', '\\u{10026}'), ('\\u{10028}', '\\u{1003a}'), ('\\u{1003c}', '\\u{1003d}'),\n-        ('\\u{1003f}', '\\u{1004d}'), ('\\u{10050}', '\\u{1005d}'), ('\\u{10080}', '\\u{100fa}'),\n-        ('\\u{10280}', '\\u{1029c}'), ('\\u{102a0}', '\\u{102d0}'), ('\\u{10300}', '\\u{1031f}'),\n-        ('\\u{10330}', '\\u{10340}'), ('\\u{10342}', '\\u{10349}'), ('\\u{10350}', '\\u{10375}'),\n-        ('\\u{10380}', '\\u{1039d}'), ('\\u{103a0}', '\\u{103c3}'), ('\\u{103c8}', '\\u{103cf}'),\n-        ('\\u{10400}', '\\u{1049d}'), ('\\u{10500}', '\\u{10527}'), ('\\u{10530}', '\\u{10563}'),\n-        ('\\u{10600}', '\\u{10736}'), ('\\u{10740}', '\\u{10755}'), ('\\u{10760}', '\\u{10767}'),\n-        ('\\u{10800}', '\\u{10805}'), ('\\u{10808}', '\\u{10808}'), ('\\u{1080a}', '\\u{10835}'),\n-        ('\\u{10837}', '\\u{10838}'), ('\\u{1083c}', '\\u{1083c}'), ('\\u{1083f}', '\\u{10855}'),\n-        ('\\u{10860}', '\\u{10876}'), ('\\u{10880}', '\\u{1089e}'), ('\\u{10900}', '\\u{10915}'),\n-        ('\\u{10920}', '\\u{10939}'), ('\\u{10980}', '\\u{109b7}'), ('\\u{109be}', '\\u{109bf}'),\n-        ('\\u{10a00}', '\\u{10a00}'), ('\\u{10a10}', '\\u{10a13}'), ('\\u{10a15}', '\\u{10a17}'),\n-        ('\\u{10a19}', '\\u{10a33}'), ('\\u{10a60}', '\\u{10a7c}'), ('\\u{10a80}', '\\u{10a9c}'),\n-        ('\\u{10ac0}', '\\u{10ac7}'), ('\\u{10ac9}', '\\u{10ae4}'), ('\\u{10b00}', '\\u{10b35}'),\n-        ('\\u{10b40}', '\\u{10b55}'), ('\\u{10b60}', '\\u{10b72}'), ('\\u{10b80}', '\\u{10b91}'),\n-        ('\\u{10c00}', '\\u{10c48}'), ('\\u{11003}', '\\u{11037}'), ('\\u{11083}', '\\u{110af}'),\n-        ('\\u{110d0}', '\\u{110e8}'), ('\\u{11103}', '\\u{11126}'), ('\\u{11150}', '\\u{11172}'),\n-        ('\\u{11176}', '\\u{11176}'), ('\\u{11183}', '\\u{111b2}'), ('\\u{111c1}', '\\u{111c4}'),\n-        ('\\u{111da}', '\\u{111da}'), ('\\u{11200}', '\\u{11211}'), ('\\u{11213}', '\\u{1122b}'),\n-        ('\\u{112b0}', '\\u{112de}'), ('\\u{11305}', '\\u{1130c}'), ('\\u{1130f}', '\\u{11310}'),\n-        ('\\u{11313}', '\\u{11328}'), ('\\u{1132a}', '\\u{11330}'), ('\\u{11332}', '\\u{11333}'),\n-        ('\\u{11335}', '\\u{11339}'), ('\\u{1133d}', '\\u{1133d}'), ('\\u{1135d}', '\\u{11361}'),\n-        ('\\u{11480}', '\\u{114af}'), ('\\u{114c4}', '\\u{114c5}'), ('\\u{114c7}', '\\u{114c7}'),\n-        ('\\u{11580}', '\\u{115ae}'), ('\\u{11600}', '\\u{1162f}'), ('\\u{11644}', '\\u{11644}'),\n-        ('\\u{11680}', '\\u{116aa}'), ('\\u{118a0}', '\\u{118df}'), ('\\u{118ff}', '\\u{118ff}'),\n-        ('\\u{11ac0}', '\\u{11af8}'), ('\\u{12000}', '\\u{12398}'), ('\\u{13000}', '\\u{1342e}'),\n-        ('\\u{16800}', '\\u{16a38}'), ('\\u{16a40}', '\\u{16a5e}'), ('\\u{16ad0}', '\\u{16aed}'),\n-        ('\\u{16b00}', '\\u{16b2f}'), ('\\u{16b40}', '\\u{16b43}'), ('\\u{16b63}', '\\u{16b77}'),\n-        ('\\u{16b7d}', '\\u{16b8f}'), ('\\u{16f00}', '\\u{16f44}'), ('\\u{16f50}', '\\u{16f50}'),\n-        ('\\u{16f93}', '\\u{16f9f}'), ('\\u{1b000}', '\\u{1b001}'), ('\\u{1bc00}', '\\u{1bc6a}'),\n-        ('\\u{1bc70}', '\\u{1bc7c}'), ('\\u{1bc80}', '\\u{1bc88}'), ('\\u{1bc90}', '\\u{1bc99}'),\n-        ('\\u{1d400}', '\\u{1d454}'), ('\\u{1d456}', '\\u{1d49c}'), ('\\u{1d49e}', '\\u{1d49f}'),\n-        ('\\u{1d4a2}', '\\u{1d4a2}'), ('\\u{1d4a5}', '\\u{1d4a6}'), ('\\u{1d4a9}', '\\u{1d4ac}'),\n-        ('\\u{1d4ae}', '\\u{1d4b9}'), ('\\u{1d4bb}', '\\u{1d4bb}'), ('\\u{1d4bd}', '\\u{1d4c3}'),\n-        ('\\u{1d4c5}', '\\u{1d505}'), ('\\u{1d507}', '\\u{1d50a}'), ('\\u{1d50d}', '\\u{1d514}'),\n-        ('\\u{1d516}', '\\u{1d51c}'), ('\\u{1d51e}', '\\u{1d539}'), ('\\u{1d53b}', '\\u{1d53e}'),\n-        ('\\u{1d540}', '\\u{1d544}'), ('\\u{1d546}', '\\u{1d546}'), ('\\u{1d54a}', '\\u{1d550}'),\n-        ('\\u{1d552}', '\\u{1d6a5}'), ('\\u{1d6a8}', '\\u{1d6c0}'), ('\\u{1d6c2}', '\\u{1d6da}'),\n-        ('\\u{1d6dc}', '\\u{1d6fa}'), ('\\u{1d6fc}', '\\u{1d714}'), ('\\u{1d716}', '\\u{1d734}'),\n-        ('\\u{1d736}', '\\u{1d74e}'), ('\\u{1d750}', '\\u{1d76e}'), ('\\u{1d770}', '\\u{1d788}'),\n-        ('\\u{1d78a}', '\\u{1d7a8}'), ('\\u{1d7aa}', '\\u{1d7c2}'), ('\\u{1d7c4}', '\\u{1d7cb}'),\n-        ('\\u{1e800}', '\\u{1e8c4}'), ('\\u{1ee00}', '\\u{1ee03}'), ('\\u{1ee05}', '\\u{1ee1f}'),\n-        ('\\u{1ee21}', '\\u{1ee22}'), ('\\u{1ee24}', '\\u{1ee24}'), ('\\u{1ee27}', '\\u{1ee27}'),\n-        ('\\u{1ee29}', '\\u{1ee32}'), ('\\u{1ee34}', '\\u{1ee37}'), ('\\u{1ee39}', '\\u{1ee39}'),\n-        ('\\u{1ee3b}', '\\u{1ee3b}'), ('\\u{1ee42}', '\\u{1ee42}'), ('\\u{1ee47}', '\\u{1ee47}'),\n-        ('\\u{1ee49}', '\\u{1ee49}'), ('\\u{1ee4b}', '\\u{1ee4b}'), ('\\u{1ee4d}', '\\u{1ee4f}'),\n-        ('\\u{1ee51}', '\\u{1ee52}'), ('\\u{1ee54}', '\\u{1ee54}'), ('\\u{1ee57}', '\\u{1ee57}'),\n-        ('\\u{1ee59}', '\\u{1ee59}'), ('\\u{1ee5b}', '\\u{1ee5b}'), ('\\u{1ee5d}', '\\u{1ee5d}'),\n-        ('\\u{1ee5f}', '\\u{1ee5f}'), ('\\u{1ee61}', '\\u{1ee62}'), ('\\u{1ee64}', '\\u{1ee64}'),\n-        ('\\u{1ee67}', '\\u{1ee6a}'), ('\\u{1ee6c}', '\\u{1ee72}'), ('\\u{1ee74}', '\\u{1ee77}'),\n-        ('\\u{1ee79}', '\\u{1ee7c}'), ('\\u{1ee7e}', '\\u{1ee7e}'), ('\\u{1ee80}', '\\u{1ee89}'),\n-        ('\\u{1ee8b}', '\\u{1ee9b}'), ('\\u{1eea1}', '\\u{1eea3}'), ('\\u{1eea5}', '\\u{1eea9}'),\n-        ('\\u{1eeab}', '\\u{1eebb}'), ('\\u{20000}', '\\u{20000}'), ('\\u{2a6d6}', '\\u{2a6d6}'),\n-        ('\\u{2a700}', '\\u{2a700}'), ('\\u{2b734}', '\\u{2b734}'), ('\\u{2b740}', '\\u{2b740}'),\n-        ('\\u{2b81d}', '\\u{2b81d}'), ('\\u{2f800}', '\\u{2fa1d}')\n+        '\\u{31ba}'), ('\\u{31f0}', '\\u{31ff}'), ('\\u{3400}', '\\u{4db5}'), ('\\u{4e00}', '\\u{9fcc}'),\n+        ('\\u{a000}', '\\u{a48c}'), ('\\u{a4d0}', '\\u{a4fd}'), ('\\u{a500}', '\\u{a60c}'), ('\\u{a610}',\n+        '\\u{a61f}'), ('\\u{a62a}', '\\u{a62b}'), ('\\u{a640}', '\\u{a66e}'), ('\\u{a67f}', '\\u{a69d}'),\n+        ('\\u{a6a0}', '\\u{a6e5}'), ('\\u{a717}', '\\u{a71f}'), ('\\u{a722}', '\\u{a788}'), ('\\u{a78b}',\n+        '\\u{a78e}'), ('\\u{a790}', '\\u{a7ad}'), ('\\u{a7b0}', '\\u{a7b1}'), ('\\u{a7f7}', '\\u{a801}'),\n+        ('\\u{a803}', '\\u{a805}'), ('\\u{a807}', '\\u{a80a}'), ('\\u{a80c}', '\\u{a822}'), ('\\u{a840}',\n+        '\\u{a873}'), ('\\u{a882}', '\\u{a8b3}'), ('\\u{a8f2}', '\\u{a8f7}'), ('\\u{a8fb}', '\\u{a8fb}'),\n+        ('\\u{a90a}', '\\u{a925}'), ('\\u{a930}', '\\u{a946}'), ('\\u{a960}', '\\u{a97c}'), ('\\u{a984}',\n+        '\\u{a9b2}'), ('\\u{a9cf}', '\\u{a9cf}'), ('\\u{a9e0}', '\\u{a9e4}'), ('\\u{a9e6}', '\\u{a9ef}'),\n+        ('\\u{a9fa}', '\\u{a9fe}'), ('\\u{aa00}', '\\u{aa28}'), ('\\u{aa40}', '\\u{aa42}'), ('\\u{aa44}',\n+        '\\u{aa4b}'), ('\\u{aa60}', '\\u{aa76}'), ('\\u{aa7a}', '\\u{aa7a}'), ('\\u{aa7e}', '\\u{aaaf}'),\n+        ('\\u{aab1}', '\\u{aab1}'), ('\\u{aab5}', '\\u{aab6}'), ('\\u{aab9}', '\\u{aabd}'), ('\\u{aac0}',\n+        '\\u{aac0}'), ('\\u{aac2}', '\\u{aac2}'), ('\\u{aadb}', '\\u{aadd}'), ('\\u{aae0}', '\\u{aaea}'),\n+        ('\\u{aaf2}', '\\u{aaf4}'), ('\\u{ab01}', '\\u{ab06}'), ('\\u{ab09}', '\\u{ab0e}'), ('\\u{ab11}',\n+        '\\u{ab16}'), ('\\u{ab20}', '\\u{ab26}'), ('\\u{ab28}', '\\u{ab2e}'), ('\\u{ab30}', '\\u{ab5a}'),\n+        ('\\u{ab5c}', '\\u{ab5f}'), ('\\u{ab64}', '\\u{ab65}'), ('\\u{abc0}', '\\u{abe2}'), ('\\u{ac00}',\n+        '\\u{d7a3}'), ('\\u{d7b0}', '\\u{d7c6}'), ('\\u{d7cb}', '\\u{d7fb}'), ('\\u{f900}', '\\u{fa6d}'),\n+        ('\\u{fa70}', '\\u{fad9}'), ('\\u{fb00}', '\\u{fb06}'), ('\\u{fb13}', '\\u{fb17}'), ('\\u{fb1d}',\n+        '\\u{fb1d}'), ('\\u{fb1f}', '\\u{fb28}'), ('\\u{fb2a}', '\\u{fb36}'), ('\\u{fb38}', '\\u{fb3c}'),\n+        ('\\u{fb3e}', '\\u{fb3e}'), ('\\u{fb40}', '\\u{fb41}'), ('\\u{fb43}', '\\u{fb44}'), ('\\u{fb46}',\n+        '\\u{fbb1}'), ('\\u{fbd3}', '\\u{fd3d}'), ('\\u{fd50}', '\\u{fd8f}'), ('\\u{fd92}', '\\u{fdc7}'),\n+        ('\\u{fdf0}', '\\u{fdfb}'), ('\\u{fe70}', '\\u{fe74}'), ('\\u{fe76}', '\\u{fefc}'), ('\\u{ff21}',\n+        '\\u{ff3a}'), ('\\u{ff41}', '\\u{ff5a}'), ('\\u{ff66}', '\\u{ffbe}'), ('\\u{ffc2}', '\\u{ffc7}'),\n+        ('\\u{ffca}', '\\u{ffcf}'), ('\\u{ffd2}', '\\u{ffd7}'), ('\\u{ffda}', '\\u{ffdc}'), ('\\u{10000}',\n+        '\\u{1000b}'), ('\\u{1000d}', '\\u{10026}'), ('\\u{10028}', '\\u{1003a}'), ('\\u{1003c}',\n+        '\\u{1003d}'), ('\\u{1003f}', '\\u{1004d}'), ('\\u{10050}', '\\u{1005d}'), ('\\u{10080}',\n+        '\\u{100fa}'), ('\\u{10280}', '\\u{1029c}'), ('\\u{102a0}', '\\u{102d0}'), ('\\u{10300}',\n+        '\\u{1031f}'), ('\\u{10330}', '\\u{10340}'), ('\\u{10342}', '\\u{10349}'), ('\\u{10350}',\n+        '\\u{10375}'), ('\\u{10380}', '\\u{1039d}'), ('\\u{103a0}', '\\u{103c3}'), ('\\u{103c8}',\n+        '\\u{103cf}'), ('\\u{10400}', '\\u{1049d}'), ('\\u{10500}', '\\u{10527}'), ('\\u{10530}',\n+        '\\u{10563}'), ('\\u{10600}', '\\u{10736}'), ('\\u{10740}', '\\u{10755}'), ('\\u{10760}',\n+        '\\u{10767}'), ('\\u{10800}', '\\u{10805}'), ('\\u{10808}', '\\u{10808}'), ('\\u{1080a}',\n+        '\\u{10835}'), ('\\u{10837}', '\\u{10838}'), ('\\u{1083c}', '\\u{1083c}'), ('\\u{1083f}',\n+        '\\u{10855}'), ('\\u{10860}', '\\u{10876}'), ('\\u{10880}', '\\u{1089e}'), ('\\u{10900}',\n+        '\\u{10915}'), ('\\u{10920}', '\\u{10939}'), ('\\u{10980}', '\\u{109b7}'), ('\\u{109be}',\n+        '\\u{109bf}'), ('\\u{10a00}', '\\u{10a00}'), ('\\u{10a10}', '\\u{10a13}'), ('\\u{10a15}',\n+        '\\u{10a17}'), ('\\u{10a19}', '\\u{10a33}'), ('\\u{10a60}', '\\u{10a7c}'), ('\\u{10a80}',\n+        '\\u{10a9c}'), ('\\u{10ac0}', '\\u{10ac7}'), ('\\u{10ac9}', '\\u{10ae4}'), ('\\u{10b00}',\n+        '\\u{10b35}'), ('\\u{10b40}', '\\u{10b55}'), ('\\u{10b60}', '\\u{10b72}'), ('\\u{10b80}',\n+        '\\u{10b91}'), ('\\u{10c00}', '\\u{10c48}'), ('\\u{11003}', '\\u{11037}'), ('\\u{11083}',\n+        '\\u{110af}'), ('\\u{110d0}', '\\u{110e8}'), ('\\u{11103}', '\\u{11126}'), ('\\u{11150}',\n+        '\\u{11172}'), ('\\u{11176}', '\\u{11176}'), ('\\u{11183}', '\\u{111b2}'), ('\\u{111c1}',\n+        '\\u{111c4}'), ('\\u{111da}', '\\u{111da}'), ('\\u{11200}', '\\u{11211}'), ('\\u{11213}',\n+        '\\u{1122b}'), ('\\u{112b0}', '\\u{112de}'), ('\\u{11305}', '\\u{1130c}'), ('\\u{1130f}',\n+        '\\u{11310}'), ('\\u{11313}', '\\u{11328}'), ('\\u{1132a}', '\\u{11330}'), ('\\u{11332}',\n+        '\\u{11333}'), ('\\u{11335}', '\\u{11339}'), ('\\u{1133d}', '\\u{1133d}'), ('\\u{1135d}',\n+        '\\u{11361}'), ('\\u{11480}', '\\u{114af}'), ('\\u{114c4}', '\\u{114c5}'), ('\\u{114c7}',\n+        '\\u{114c7}'), ('\\u{11580}', '\\u{115ae}'), ('\\u{11600}', '\\u{1162f}'), ('\\u{11644}',\n+        '\\u{11644}'), ('\\u{11680}', '\\u{116aa}'), ('\\u{118a0}', '\\u{118df}'), ('\\u{118ff}',\n+        '\\u{118ff}'), ('\\u{11ac0}', '\\u{11af8}'), ('\\u{12000}', '\\u{12398}'), ('\\u{13000}',\n+        '\\u{1342e}'), ('\\u{16800}', '\\u{16a38}'), ('\\u{16a40}', '\\u{16a5e}'), ('\\u{16ad0}',\n+        '\\u{16aed}'), ('\\u{16b00}', '\\u{16b2f}'), ('\\u{16b40}', '\\u{16b43}'), ('\\u{16b63}',\n+        '\\u{16b77}'), ('\\u{16b7d}', '\\u{16b8f}'), ('\\u{16f00}', '\\u{16f44}'), ('\\u{16f50}',\n+        '\\u{16f50}'), ('\\u{16f93}', '\\u{16f9f}'), ('\\u{1b000}', '\\u{1b001}'), ('\\u{1bc00}',\n+        '\\u{1bc6a}'), ('\\u{1bc70}', '\\u{1bc7c}'), ('\\u{1bc80}', '\\u{1bc88}'), ('\\u{1bc90}',\n+        '\\u{1bc99}'), ('\\u{1d400}', '\\u{1d454}'), ('\\u{1d456}', '\\u{1d49c}'), ('\\u{1d49e}',\n+        '\\u{1d49f}'), ('\\u{1d4a2}', '\\u{1d4a2}'), ('\\u{1d4a5}', '\\u{1d4a6}'), ('\\u{1d4a9}',\n+        '\\u{1d4ac}'), ('\\u{1d4ae}', '\\u{1d4b9}'), ('\\u{1d4bb}', '\\u{1d4bb}'), ('\\u{1d4bd}',\n+        '\\u{1d4c3}'), ('\\u{1d4c5}', '\\u{1d505}'), ('\\u{1d507}', '\\u{1d50a}'), ('\\u{1d50d}',\n+        '\\u{1d514}'), ('\\u{1d516}', '\\u{1d51c}'), ('\\u{1d51e}', '\\u{1d539}'), ('\\u{1d53b}',\n+        '\\u{1d53e}'), ('\\u{1d540}', '\\u{1d544}'), ('\\u{1d546}', '\\u{1d546}'), ('\\u{1d54a}',\n+        '\\u{1d550}'), ('\\u{1d552}', '\\u{1d6a5}'), ('\\u{1d6a8}', '\\u{1d6c0}'), ('\\u{1d6c2}',\n+        '\\u{1d6da}'), ('\\u{1d6dc}', '\\u{1d6fa}'), ('\\u{1d6fc}', '\\u{1d714}'), ('\\u{1d716}',\n+        '\\u{1d734}'), ('\\u{1d736}', '\\u{1d74e}'), ('\\u{1d750}', '\\u{1d76e}'), ('\\u{1d770}',\n+        '\\u{1d788}'), ('\\u{1d78a}', '\\u{1d7a8}'), ('\\u{1d7aa}', '\\u{1d7c2}'), ('\\u{1d7c4}',\n+        '\\u{1d7cb}'), ('\\u{1e800}', '\\u{1e8c4}'), ('\\u{1ee00}', '\\u{1ee03}'), ('\\u{1ee05}',\n+        '\\u{1ee1f}'), ('\\u{1ee21}', '\\u{1ee22}'), ('\\u{1ee24}', '\\u{1ee24}'), ('\\u{1ee27}',\n+        '\\u{1ee27}'), ('\\u{1ee29}', '\\u{1ee32}'), ('\\u{1ee34}', '\\u{1ee37}'), ('\\u{1ee39}',\n+        '\\u{1ee39}'), ('\\u{1ee3b}', '\\u{1ee3b}'), ('\\u{1ee42}', '\\u{1ee42}'), ('\\u{1ee47}',\n+        '\\u{1ee47}'), ('\\u{1ee49}', '\\u{1ee49}'), ('\\u{1ee4b}', '\\u{1ee4b}'), ('\\u{1ee4d}',\n+        '\\u{1ee4f}'), ('\\u{1ee51}', '\\u{1ee52}'), ('\\u{1ee54}', '\\u{1ee54}'), ('\\u{1ee57}',\n+        '\\u{1ee57}'), ('\\u{1ee59}', '\\u{1ee59}'), ('\\u{1ee5b}', '\\u{1ee5b}'), ('\\u{1ee5d}',\n+        '\\u{1ee5d}'), ('\\u{1ee5f}', '\\u{1ee5f}'), ('\\u{1ee61}', '\\u{1ee62}'), ('\\u{1ee64}',\n+        '\\u{1ee64}'), ('\\u{1ee67}', '\\u{1ee6a}'), ('\\u{1ee6c}', '\\u{1ee72}'), ('\\u{1ee74}',\n+        '\\u{1ee77}'), ('\\u{1ee79}', '\\u{1ee7c}'), ('\\u{1ee7e}', '\\u{1ee7e}'), ('\\u{1ee80}',\n+        '\\u{1ee89}'), ('\\u{1ee8b}', '\\u{1ee9b}'), ('\\u{1eea1}', '\\u{1eea3}'), ('\\u{1eea5}',\n+        '\\u{1eea9}'), ('\\u{1eeab}', '\\u{1eebb}'), ('\\u{20000}', '\\u{2a6d6}'), ('\\u{2a700}',\n+        '\\u{2b734}'), ('\\u{2b740}', '\\u{2b81d}'), ('\\u{2f800}', '\\u{2fa1d}')\n     ];\n \n     pub const LC_table: &'static [(char, char)] = &[\n@@ -896,72 +888,71 @@ pub mod general_category {\n         '\\u{2dd6}'), ('\\u{2dd8}', '\\u{2dde}'), ('\\u{3006}', '\\u{3006}'), ('\\u{303c}', '\\u{303c}'),\n         ('\\u{3041}', '\\u{3096}'), ('\\u{309f}', '\\u{309f}'), ('\\u{30a1}', '\\u{30fa}'), ('\\u{30ff}',\n         '\\u{30ff}'), ('\\u{3105}', '\\u{312d}'), ('\\u{3131}', '\\u{318e}'), ('\\u{31a0}', '\\u{31ba}'),\n-        ('\\u{31f0}', '\\u{31ff}'), ('\\u{3400}', '\\u{3400}'), ('\\u{4db5}', '\\u{4db5}'), ('\\u{4e00}',\n-        '\\u{4e00}'), ('\\u{9fcc}', '\\u{9fcc}'), ('\\u{a000}', '\\u{a014}'), ('\\u{a016}', '\\u{a48c}'),\n-        ('\\u{a4d0}', '\\u{a4f7}'), ('\\u{a500}', '\\u{a60b}'), ('\\u{a610}', '\\u{a61f}'), ('\\u{a62a}',\n-        '\\u{a62b}'), ('\\u{a66e}', '\\u{a66e}'), ('\\u{a6a0}', '\\u{a6e5}'), ('\\u{a7f7}', '\\u{a7f7}'),\n-        ('\\u{a7fb}', '\\u{a801}'), ('\\u{a803}', '\\u{a805}'), ('\\u{a807}', '\\u{a80a}'), ('\\u{a80c}',\n-        '\\u{a822}'), ('\\u{a840}', '\\u{a873}'), ('\\u{a882}', '\\u{a8b3}'), ('\\u{a8f2}', '\\u{a8f7}'),\n-        ('\\u{a8fb}', '\\u{a8fb}'), ('\\u{a90a}', '\\u{a925}'), ('\\u{a930}', '\\u{a946}'), ('\\u{a960}',\n-        '\\u{a97c}'), ('\\u{a984}', '\\u{a9b2}'), ('\\u{a9e0}', '\\u{a9e4}'), ('\\u{a9e7}', '\\u{a9ef}'),\n-        ('\\u{a9fa}', '\\u{a9fe}'), ('\\u{aa00}', '\\u{aa28}'), ('\\u{aa40}', '\\u{aa42}'), ('\\u{aa44}',\n-        '\\u{aa4b}'), ('\\u{aa60}', '\\u{aa6f}'), ('\\u{aa71}', '\\u{aa76}'), ('\\u{aa7a}', '\\u{aa7a}'),\n-        ('\\u{aa7e}', '\\u{aaaf}'), ('\\u{aab1}', '\\u{aab1}'), ('\\u{aab5}', '\\u{aab6}'), ('\\u{aab9}',\n-        '\\u{aabd}'), ('\\u{aac0}', '\\u{aac0}'), ('\\u{aac2}', '\\u{aac2}'), ('\\u{aadb}', '\\u{aadc}'),\n-        ('\\u{aae0}', '\\u{aaea}'), ('\\u{aaf2}', '\\u{aaf2}'), ('\\u{ab01}', '\\u{ab06}'), ('\\u{ab09}',\n-        '\\u{ab0e}'), ('\\u{ab11}', '\\u{ab16}'), ('\\u{ab20}', '\\u{ab26}'), ('\\u{ab28}', '\\u{ab2e}'),\n-        ('\\u{abc0}', '\\u{abe2}'), ('\\u{ac00}', '\\u{ac00}'), ('\\u{d7a3}', '\\u{d7a3}'), ('\\u{d7b0}',\n-        '\\u{d7c6}'), ('\\u{d7cb}', '\\u{d7fb}'), ('\\u{f900}', '\\u{fa6d}'), ('\\u{fa70}', '\\u{fad9}'),\n-        ('\\u{fb1d}', '\\u{fb1d}'), ('\\u{fb1f}', '\\u{fb28}'), ('\\u{fb2a}', '\\u{fb36}'), ('\\u{fb38}',\n-        '\\u{fb3c}'), ('\\u{fb3e}', '\\u{fb3e}'), ('\\u{fb40}', '\\u{fb41}'), ('\\u{fb43}', '\\u{fb44}'),\n-        ('\\u{fb46}', '\\u{fbb1}'), ('\\u{fbd3}', '\\u{fd3d}'), ('\\u{fd50}', '\\u{fd8f}'), ('\\u{fd92}',\n-        '\\u{fdc7}'), ('\\u{fdf0}', '\\u{fdfb}'), ('\\u{fe70}', '\\u{fe74}'), ('\\u{fe76}', '\\u{fefc}'),\n-        ('\\u{ff66}', '\\u{ff6f}'), ('\\u{ff71}', '\\u{ff9d}'), ('\\u{ffa0}', '\\u{ffbe}'), ('\\u{ffc2}',\n-        '\\u{ffc7}'), ('\\u{ffca}', '\\u{ffcf}'), ('\\u{ffd2}', '\\u{ffd7}'), ('\\u{ffda}', '\\u{ffdc}'),\n-        ('\\u{10000}', '\\u{1000b}'), ('\\u{1000d}', '\\u{10026}'), ('\\u{10028}', '\\u{1003a}'),\n-        ('\\u{1003c}', '\\u{1003d}'), ('\\u{1003f}', '\\u{1004d}'), ('\\u{10050}', '\\u{1005d}'),\n-        ('\\u{10080}', '\\u{100fa}'), ('\\u{10280}', '\\u{1029c}'), ('\\u{102a0}', '\\u{102d0}'),\n-        ('\\u{10300}', '\\u{1031f}'), ('\\u{10330}', '\\u{10340}'), ('\\u{10342}', '\\u{10349}'),\n-        ('\\u{10350}', '\\u{10375}'), ('\\u{10380}', '\\u{1039d}'), ('\\u{103a0}', '\\u{103c3}'),\n-        ('\\u{103c8}', '\\u{103cf}'), ('\\u{10450}', '\\u{1049d}'), ('\\u{10500}', '\\u{10527}'),\n-        ('\\u{10530}', '\\u{10563}'), ('\\u{10600}', '\\u{10736}'), ('\\u{10740}', '\\u{10755}'),\n-        ('\\u{10760}', '\\u{10767}'), ('\\u{10800}', '\\u{10805}'), ('\\u{10808}', '\\u{10808}'),\n-        ('\\u{1080a}', '\\u{10835}'), ('\\u{10837}', '\\u{10838}'), ('\\u{1083c}', '\\u{1083c}'),\n-        ('\\u{1083f}', '\\u{10855}'), ('\\u{10860}', '\\u{10876}'), ('\\u{10880}', '\\u{1089e}'),\n-        ('\\u{10900}', '\\u{10915}'), ('\\u{10920}', '\\u{10939}'), ('\\u{10980}', '\\u{109b7}'),\n-        ('\\u{109be}', '\\u{109bf}'), ('\\u{10a00}', '\\u{10a00}'), ('\\u{10a10}', '\\u{10a13}'),\n-        ('\\u{10a15}', '\\u{10a17}'), ('\\u{10a19}', '\\u{10a33}'), ('\\u{10a60}', '\\u{10a7c}'),\n-        ('\\u{10a80}', '\\u{10a9c}'), ('\\u{10ac0}', '\\u{10ac7}'), ('\\u{10ac9}', '\\u{10ae4}'),\n-        ('\\u{10b00}', '\\u{10b35}'), ('\\u{10b40}', '\\u{10b55}'), ('\\u{10b60}', '\\u{10b72}'),\n-        ('\\u{10b80}', '\\u{10b91}'), ('\\u{10c00}', '\\u{10c48}'), ('\\u{11003}', '\\u{11037}'),\n-        ('\\u{11083}', '\\u{110af}'), ('\\u{110d0}', '\\u{110e8}'), ('\\u{11103}', '\\u{11126}'),\n-        ('\\u{11150}', '\\u{11172}'), ('\\u{11176}', '\\u{11176}'), ('\\u{11183}', '\\u{111b2}'),\n-        ('\\u{111c1}', '\\u{111c4}'), ('\\u{111da}', '\\u{111da}'), ('\\u{11200}', '\\u{11211}'),\n-        ('\\u{11213}', '\\u{1122b}'), ('\\u{112b0}', '\\u{112de}'), ('\\u{11305}', '\\u{1130c}'),\n-        ('\\u{1130f}', '\\u{11310}'), ('\\u{11313}', '\\u{11328}'), ('\\u{1132a}', '\\u{11330}'),\n-        ('\\u{11332}', '\\u{11333}'), ('\\u{11335}', '\\u{11339}'), ('\\u{1133d}', '\\u{1133d}'),\n-        ('\\u{1135d}', '\\u{11361}'), ('\\u{11480}', '\\u{114af}'), ('\\u{114c4}', '\\u{114c5}'),\n-        ('\\u{114c7}', '\\u{114c7}'), ('\\u{11580}', '\\u{115ae}'), ('\\u{11600}', '\\u{1162f}'),\n-        ('\\u{11644}', '\\u{11644}'), ('\\u{11680}', '\\u{116aa}'), ('\\u{118ff}', '\\u{118ff}'),\n-        ('\\u{11ac0}', '\\u{11af8}'), ('\\u{12000}', '\\u{12398}'), ('\\u{13000}', '\\u{1342e}'),\n-        ('\\u{16800}', '\\u{16a38}'), ('\\u{16a40}', '\\u{16a5e}'), ('\\u{16ad0}', '\\u{16aed}'),\n-        ('\\u{16b00}', '\\u{16b2f}'), ('\\u{16b63}', '\\u{16b77}'), ('\\u{16b7d}', '\\u{16b8f}'),\n-        ('\\u{16f00}', '\\u{16f44}'), ('\\u{16f50}', '\\u{16f50}'), ('\\u{1b000}', '\\u{1b001}'),\n-        ('\\u{1bc00}', '\\u{1bc6a}'), ('\\u{1bc70}', '\\u{1bc7c}'), ('\\u{1bc80}', '\\u{1bc88}'),\n-        ('\\u{1bc90}', '\\u{1bc99}'), ('\\u{1e800}', '\\u{1e8c4}'), ('\\u{1ee00}', '\\u{1ee03}'),\n-        ('\\u{1ee05}', '\\u{1ee1f}'), ('\\u{1ee21}', '\\u{1ee22}'), ('\\u{1ee24}', '\\u{1ee24}'),\n-        ('\\u{1ee27}', '\\u{1ee27}'), ('\\u{1ee29}', '\\u{1ee32}'), ('\\u{1ee34}', '\\u{1ee37}'),\n-        ('\\u{1ee39}', '\\u{1ee39}'), ('\\u{1ee3b}', '\\u{1ee3b}'), ('\\u{1ee42}', '\\u{1ee42}'),\n-        ('\\u{1ee47}', '\\u{1ee47}'), ('\\u{1ee49}', '\\u{1ee49}'), ('\\u{1ee4b}', '\\u{1ee4b}'),\n-        ('\\u{1ee4d}', '\\u{1ee4f}'), ('\\u{1ee51}', '\\u{1ee52}'), ('\\u{1ee54}', '\\u{1ee54}'),\n-        ('\\u{1ee57}', '\\u{1ee57}'), ('\\u{1ee59}', '\\u{1ee59}'), ('\\u{1ee5b}', '\\u{1ee5b}'),\n-        ('\\u{1ee5d}', '\\u{1ee5d}'), ('\\u{1ee5f}', '\\u{1ee5f}'), ('\\u{1ee61}', '\\u{1ee62}'),\n-        ('\\u{1ee64}', '\\u{1ee64}'), ('\\u{1ee67}', '\\u{1ee6a}'), ('\\u{1ee6c}', '\\u{1ee72}'),\n-        ('\\u{1ee74}', '\\u{1ee77}'), ('\\u{1ee79}', '\\u{1ee7c}'), ('\\u{1ee7e}', '\\u{1ee7e}'),\n-        ('\\u{1ee80}', '\\u{1ee89}'), ('\\u{1ee8b}', '\\u{1ee9b}'), ('\\u{1eea1}', '\\u{1eea3}'),\n-        ('\\u{1eea5}', '\\u{1eea9}'), ('\\u{1eeab}', '\\u{1eebb}'), ('\\u{20000}', '\\u{20000}'),\n-        ('\\u{2a6d6}', '\\u{2a6d6}'), ('\\u{2a700}', '\\u{2a700}'), ('\\u{2b734}', '\\u{2b734}'),\n-        ('\\u{2b740}', '\\u{2b740}'), ('\\u{2b81d}', '\\u{2b81d}'), ('\\u{2f800}', '\\u{2fa1d}')\n+        ('\\u{31f0}', '\\u{31ff}'), ('\\u{3400}', '\\u{4db5}'), ('\\u{4e00}', '\\u{9fcc}'), ('\\u{a000}',\n+        '\\u{a014}'), ('\\u{a016}', '\\u{a48c}'), ('\\u{a4d0}', '\\u{a4f7}'), ('\\u{a500}', '\\u{a60b}'),\n+        ('\\u{a610}', '\\u{a61f}'), ('\\u{a62a}', '\\u{a62b}'), ('\\u{a66e}', '\\u{a66e}'), ('\\u{a6a0}',\n+        '\\u{a6e5}'), ('\\u{a7f7}', '\\u{a7f7}'), ('\\u{a7fb}', '\\u{a801}'), ('\\u{a803}', '\\u{a805}'),\n+        ('\\u{a807}', '\\u{a80a}'), ('\\u{a80c}', '\\u{a822}'), ('\\u{a840}', '\\u{a873}'), ('\\u{a882}',\n+        '\\u{a8b3}'), ('\\u{a8f2}', '\\u{a8f7}'), ('\\u{a8fb}', '\\u{a8fb}'), ('\\u{a90a}', '\\u{a925}'),\n+        ('\\u{a930}', '\\u{a946}'), ('\\u{a960}', '\\u{a97c}'), ('\\u{a984}', '\\u{a9b2}'), ('\\u{a9e0}',\n+        '\\u{a9e4}'), ('\\u{a9e7}', '\\u{a9ef}'), ('\\u{a9fa}', '\\u{a9fe}'), ('\\u{aa00}', '\\u{aa28}'),\n+        ('\\u{aa40}', '\\u{aa42}'), ('\\u{aa44}', '\\u{aa4b}'), ('\\u{aa60}', '\\u{aa6f}'), ('\\u{aa71}',\n+        '\\u{aa76}'), ('\\u{aa7a}', '\\u{aa7a}'), ('\\u{aa7e}', '\\u{aaaf}'), ('\\u{aab1}', '\\u{aab1}'),\n+        ('\\u{aab5}', '\\u{aab6}'), ('\\u{aab9}', '\\u{aabd}'), ('\\u{aac0}', '\\u{aac0}'), ('\\u{aac2}',\n+        '\\u{aac2}'), ('\\u{aadb}', '\\u{aadc}'), ('\\u{aae0}', '\\u{aaea}'), ('\\u{aaf2}', '\\u{aaf2}'),\n+        ('\\u{ab01}', '\\u{ab06}'), ('\\u{ab09}', '\\u{ab0e}'), ('\\u{ab11}', '\\u{ab16}'), ('\\u{ab20}',\n+        '\\u{ab26}'), ('\\u{ab28}', '\\u{ab2e}'), ('\\u{abc0}', '\\u{abe2}'), ('\\u{ac00}', '\\u{d7a3}'),\n+        ('\\u{d7b0}', '\\u{d7c6}'), ('\\u{d7cb}', '\\u{d7fb}'), ('\\u{f900}', '\\u{fa6d}'), ('\\u{fa70}',\n+        '\\u{fad9}'), ('\\u{fb1d}', '\\u{fb1d}'), ('\\u{fb1f}', '\\u{fb28}'), ('\\u{fb2a}', '\\u{fb36}'),\n+        ('\\u{fb38}', '\\u{fb3c}'), ('\\u{fb3e}', '\\u{fb3e}'), ('\\u{fb40}', '\\u{fb41}'), ('\\u{fb43}',\n+        '\\u{fb44}'), ('\\u{fb46}', '\\u{fbb1}'), ('\\u{fbd3}', '\\u{fd3d}'), ('\\u{fd50}', '\\u{fd8f}'),\n+        ('\\u{fd92}', '\\u{fdc7}'), ('\\u{fdf0}', '\\u{fdfb}'), ('\\u{fe70}', '\\u{fe74}'), ('\\u{fe76}',\n+        '\\u{fefc}'), ('\\u{ff66}', '\\u{ff6f}'), ('\\u{ff71}', '\\u{ff9d}'), ('\\u{ffa0}', '\\u{ffbe}'),\n+        ('\\u{ffc2}', '\\u{ffc7}'), ('\\u{ffca}', '\\u{ffcf}'), ('\\u{ffd2}', '\\u{ffd7}'), ('\\u{ffda}',\n+        '\\u{ffdc}'), ('\\u{10000}', '\\u{1000b}'), ('\\u{1000d}', '\\u{10026}'), ('\\u{10028}',\n+        '\\u{1003a}'), ('\\u{1003c}', '\\u{1003d}'), ('\\u{1003f}', '\\u{1004d}'), ('\\u{10050}',\n+        '\\u{1005d}'), ('\\u{10080}', '\\u{100fa}'), ('\\u{10280}', '\\u{1029c}'), ('\\u{102a0}',\n+        '\\u{102d0}'), ('\\u{10300}', '\\u{1031f}'), ('\\u{10330}', '\\u{10340}'), ('\\u{10342}',\n+        '\\u{10349}'), ('\\u{10350}', '\\u{10375}'), ('\\u{10380}', '\\u{1039d}'), ('\\u{103a0}',\n+        '\\u{103c3}'), ('\\u{103c8}', '\\u{103cf}'), ('\\u{10450}', '\\u{1049d}'), ('\\u{10500}',\n+        '\\u{10527}'), ('\\u{10530}', '\\u{10563}'), ('\\u{10600}', '\\u{10736}'), ('\\u{10740}',\n+        '\\u{10755}'), ('\\u{10760}', '\\u{10767}'), ('\\u{10800}', '\\u{10805}'), ('\\u{10808}',\n+        '\\u{10808}'), ('\\u{1080a}', '\\u{10835}'), ('\\u{10837}', '\\u{10838}'), ('\\u{1083c}',\n+        '\\u{1083c}'), ('\\u{1083f}', '\\u{10855}'), ('\\u{10860}', '\\u{10876}'), ('\\u{10880}',\n+        '\\u{1089e}'), ('\\u{10900}', '\\u{10915}'), ('\\u{10920}', '\\u{10939}'), ('\\u{10980}',\n+        '\\u{109b7}'), ('\\u{109be}', '\\u{109bf}'), ('\\u{10a00}', '\\u{10a00}'), ('\\u{10a10}',\n+        '\\u{10a13}'), ('\\u{10a15}', '\\u{10a17}'), ('\\u{10a19}', '\\u{10a33}'), ('\\u{10a60}',\n+        '\\u{10a7c}'), ('\\u{10a80}', '\\u{10a9c}'), ('\\u{10ac0}', '\\u{10ac7}'), ('\\u{10ac9}',\n+        '\\u{10ae4}'), ('\\u{10b00}', '\\u{10b35}'), ('\\u{10b40}', '\\u{10b55}'), ('\\u{10b60}',\n+        '\\u{10b72}'), ('\\u{10b80}', '\\u{10b91}'), ('\\u{10c00}', '\\u{10c48}'), ('\\u{11003}',\n+        '\\u{11037}'), ('\\u{11083}', '\\u{110af}'), ('\\u{110d0}', '\\u{110e8}'), ('\\u{11103}',\n+        '\\u{11126}'), ('\\u{11150}', '\\u{11172}'), ('\\u{11176}', '\\u{11176}'), ('\\u{11183}',\n+        '\\u{111b2}'), ('\\u{111c1}', '\\u{111c4}'), ('\\u{111da}', '\\u{111da}'), ('\\u{11200}',\n+        '\\u{11211}'), ('\\u{11213}', '\\u{1122b}'), ('\\u{112b0}', '\\u{112de}'), ('\\u{11305}',\n+        '\\u{1130c}'), ('\\u{1130f}', '\\u{11310}'), ('\\u{11313}', '\\u{11328}'), ('\\u{1132a}',\n+        '\\u{11330}'), ('\\u{11332}', '\\u{11333}'), ('\\u{11335}', '\\u{11339}'), ('\\u{1133d}',\n+        '\\u{1133d}'), ('\\u{1135d}', '\\u{11361}'), ('\\u{11480}', '\\u{114af}'), ('\\u{114c4}',\n+        '\\u{114c5}'), ('\\u{114c7}', '\\u{114c7}'), ('\\u{11580}', '\\u{115ae}'), ('\\u{11600}',\n+        '\\u{1162f}'), ('\\u{11644}', '\\u{11644}'), ('\\u{11680}', '\\u{116aa}'), ('\\u{118ff}',\n+        '\\u{118ff}'), ('\\u{11ac0}', '\\u{11af8}'), ('\\u{12000}', '\\u{12398}'), ('\\u{13000}',\n+        '\\u{1342e}'), ('\\u{16800}', '\\u{16a38}'), ('\\u{16a40}', '\\u{16a5e}'), ('\\u{16ad0}',\n+        '\\u{16aed}'), ('\\u{16b00}', '\\u{16b2f}'), ('\\u{16b63}', '\\u{16b77}'), ('\\u{16b7d}',\n+        '\\u{16b8f}'), ('\\u{16f00}', '\\u{16f44}'), ('\\u{16f50}', '\\u{16f50}'), ('\\u{1b000}',\n+        '\\u{1b001}'), ('\\u{1bc00}', '\\u{1bc6a}'), ('\\u{1bc70}', '\\u{1bc7c}'), ('\\u{1bc80}',\n+        '\\u{1bc88}'), ('\\u{1bc90}', '\\u{1bc99}'), ('\\u{1e800}', '\\u{1e8c4}'), ('\\u{1ee00}',\n+        '\\u{1ee03}'), ('\\u{1ee05}', '\\u{1ee1f}'), ('\\u{1ee21}', '\\u{1ee22}'), ('\\u{1ee24}',\n+        '\\u{1ee24}'), ('\\u{1ee27}', '\\u{1ee27}'), ('\\u{1ee29}', '\\u{1ee32}'), ('\\u{1ee34}',\n+        '\\u{1ee37}'), ('\\u{1ee39}', '\\u{1ee39}'), ('\\u{1ee3b}', '\\u{1ee3b}'), ('\\u{1ee42}',\n+        '\\u{1ee42}'), ('\\u{1ee47}', '\\u{1ee47}'), ('\\u{1ee49}', '\\u{1ee49}'), ('\\u{1ee4b}',\n+        '\\u{1ee4b}'), ('\\u{1ee4d}', '\\u{1ee4f}'), ('\\u{1ee51}', '\\u{1ee52}'), ('\\u{1ee54}',\n+        '\\u{1ee54}'), ('\\u{1ee57}', '\\u{1ee57}'), ('\\u{1ee59}', '\\u{1ee59}'), ('\\u{1ee5b}',\n+        '\\u{1ee5b}'), ('\\u{1ee5d}', '\\u{1ee5d}'), ('\\u{1ee5f}', '\\u{1ee5f}'), ('\\u{1ee61}',\n+        '\\u{1ee62}'), ('\\u{1ee64}', '\\u{1ee64}'), ('\\u{1ee67}', '\\u{1ee6a}'), ('\\u{1ee6c}',\n+        '\\u{1ee72}'), ('\\u{1ee74}', '\\u{1ee77}'), ('\\u{1ee79}', '\\u{1ee7c}'), ('\\u{1ee7e}',\n+        '\\u{1ee7e}'), ('\\u{1ee80}', '\\u{1ee89}'), ('\\u{1ee8b}', '\\u{1ee9b}'), ('\\u{1eea1}',\n+        '\\u{1eea3}'), ('\\u{1eea5}', '\\u{1eea9}'), ('\\u{1eeab}', '\\u{1eebb}'), ('\\u{20000}',\n+        '\\u{2a6d6}'), ('\\u{2a700}', '\\u{2b734}'), ('\\u{2b740}', '\\u{2b81d}'), ('\\u{2f800}',\n+        '\\u{2fa1d}')\n     ];\n \n     pub const Lt_table: &'static [(char, char)] = &["}, {"sha": "57439addeaa1a85b1acb596fd36ca3d6cad76045", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -525,7 +525,7 @@ impl<I> Iterator for Utf16Encoder<I> where I: Iterator<Item=char> {\n             return Some(tmp);\n         }\n \n-        let mut buf = [0u16; 2];\n+        let mut buf = [0; 2];\n         self.chars.next().map(|ch| {\n             let n = CharExt::encode_utf16(ch, &mut buf).unwrap_or(0);\n             if n == 2 { self.extra = buf[1]; }"}, {"sha": "bff69076975642c64e76dbeaa53476bfa7212086", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1 +1 @@\n-Subproject commit b89c3f039b61edbb077771eda2ee8a718dbec7e0\n+Subproject commit bff69076975642c64e76dbeaa53476bfa7212086"}, {"sha": "1ea40fc46a52196764be269294605440a042f794", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2015-02-19\n+2015-03-04"}, {"sha": "5e85e3dff6afacfd51d8b3b5f055d718be3f21b9", "filename": "src/snapshots.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1,4 +1,5 @@\n S 2015-02-25 880fb89\n+  bitrig-x86_64 8cdc4ca0a80103100f46cbf8caa9fe497df048c5\n   freebsd-x86_64 f4cbe4227739de986444211f8ee8d74745ab8f7f\n   linux-i386 3278ebbce8cb269acc0614dac5ddac07eab6a99c\n   linux-x86_64 72287d0d88de3e5a53bae78ac0d958e1a7637d73"}, {"sha": "44d3a69fde48ffea2eb6d1a9e2bb1982ebd20af4", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,7 +16,7 @@ pub mod kitties {\n     }\n \n     impl cat {\n-        pub fn speak(&mut self) { self.meows += 1_usize; }\n+        pub fn speak(&mut self) { self.meows += 1; }\n         pub fn meow_count(&mut self) -> uint { self.meows }\n     }\n "}, {"sha": "c10ef805a65de941aafdf7029ca799a496c01dd6", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -34,8 +34,8 @@ pub mod kitties {\n     impl cat {\n         pub fn meow(&mut self) {\n             println!(\"Meow\");\n-            self.meows += 1_usize;\n-            if self.meows % 5_usize == 0_usize {\n+            self.meows += 1;\n+            if self.meows % 5 == 0 {\n                 self.how_hungry += 1;\n             }\n         }"}, {"sha": "28fa354fef34ceda4b8a0a66998aa6f35b8e80b0", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -26,8 +26,8 @@ pub mod kitty {\n     impl cat {\n         fn meow(&mut self) {\n             println!(\"Meow\");\n-            self.meows += 1_usize;\n-            if self.meows % 5_usize == 0_usize {\n+            self.meows += 1;\n+            if self.meows % 5 == 0 {\n                 self.how_hungry += 1;\n             }\n         }"}, {"sha": "a650b30e593f9d9f4c7c6c76acd9518c16fc4745", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -20,7 +20,7 @@ impl uint_helpers for uint {\n         let mut i = *self;\n         while i < v {\n             f(i);\n-            i += 1_usize;\n+            i += 1;\n         }\n     }\n }"}, {"sha": "07d03b4c7590ff9d66d6e9d2fd8beff8245759dc", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -12,10 +12,10 @@\n \n #[inline]\n pub fn iter<T, F>(v: &[T], mut f: F) where F: FnMut(&T) {\n-    let mut i = 0_usize;\n+    let mut i = 0;\n     let n = v.len();\n     while i < n {\n         f(&v[i]);\n-        i += 1_usize;\n+        i += 1;\n     }\n }"}, {"sha": "f3ad2a3aeb963c2208924e41d0a360c88e40d258", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,10 +13,10 @@\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n pub fn iter<F>(v: Vec<uint> , mut f: F) where F: FnMut(uint) {\n-    let mut i = 0_usize;\n+    let mut i = 0;\n     let n = v.len();\n     while i < n {\n         f(v[i]);\n-        i += 1_usize;\n+        i += 1;\n     }\n }"}, {"sha": "aaeccc6e89883865bdbdb5607523f9d6ce369f0c", "filename": "src/test/auxiliary/macro_reexport_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,5 +11,5 @@\n #![crate_type = \"dylib\"]\n #[macro_export]\n macro_rules! reexported {\n-    () => ( 3_usize )\n+    () => ( 3 )\n }"}, {"sha": "0ea7c0005707defad9aa5a93cbb278a2f64d7c80", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -47,7 +47,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n     };\n \n     let mut text = &*text;\n-    let mut total = 0_usize;\n+    let mut total = 0;\n     while !text.is_empty() {\n         match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n             Some(&(rn, val)) => {"}, {"sha": "26925a350676491d09bb2ceb64dbd0c8658bc064", "filename": "src/test/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -14,9 +14,9 @@ use std::ops::Add;\n \n #[inline]\n pub fn has_closures() -> uint {\n-    let x = 1_usize;\n+    let x = 1;\n     let mut f = move || x;\n-    let y = 1_usize;\n+    let y = 1;\n     let g = || y;\n     f() + g()\n }"}, {"sha": "de88c7733b379b87e7edf7996e4a434d26b41b95", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -49,7 +49,7 @@ impl Noise2DContext {\n             *x = random_gradient(&mut rng);\n         }\n \n-        let mut permutations = [0i32; 256];\n+        let mut permutations = [0; 256];\n         for (i, x) in permutations.iter_mut().enumerate() {\n             *x = i as i32;\n         }"}, {"sha": "4a8bb24270d7fe7b79d7de42234ef56b274f084c", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -145,7 +145,7 @@ fn creature(\n     to_rendezvous: Sender<CreatureInfo>,\n     to_rendezvous_log: Sender<String>\n ) {\n-    let mut creatures_met = 0i32;\n+    let mut creatures_met = 0;\n     let mut evil_clones_met = 0;\n     let mut rendezvous = from_rendezvous.iter();\n "}, {"sha": "3688c224a7df4b5aacd9cd5b6018270ff92af224", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -91,7 +91,7 @@ impl Perm {\n     }\n \n     fn get(&mut self, mut idx: i32) -> P {\n-        let mut pp = [0u8; 16];\n+        let mut pp = [0; 16];\n         self.permcount = idx as u32;\n         for (i, place) in self.perm.p.iter_mut().enumerate() {\n             *place = i as i32 + 1;\n@@ -183,7 +183,7 @@ fn main() {\n     let n = std::env::args()\n         .nth(1)\n         .and_then(|arg| arg.parse().ok())\n-        .unwrap_or(2i32);\n+        .unwrap_or(2);\n \n     let (checksum, maxflips) = fannkuch(n);\n     println!(\"{}\\nPfannkuchen({}) = {}\", checksum, n, maxflips);"}, {"sha": "9cee75757aa1c13a6805e00424a950173ccfa6d2", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -121,7 +121,7 @@ impl<'a, W: Writer> RepeatFasta<'a, W> {\n \n     fn make(&mut self, n: usize) -> IoResult<()> {\n         let alu_len = self.alu.len();\n-        let mut buf = repeat(0u8).take(alu_len + LINE_LEN).collect::<Vec<_>>();\n+        let mut buf = repeat(0).take(alu_len + LINE_LEN).collect::<Vec<_>>();\n         let alu: &[u8] = self.alu.as_bytes();\n \n         copy_memory(&mut buf, alu);"}, {"sha": "e15f9d99ff691fa4f3f92d49633e7d0cba306541", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -89,7 +89,7 @@ fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n     -> std::old_io::IoResult<()>\n {\n     try!(wr.write(header.as_bytes()));\n-    let mut line = [0u8; LINE_LENGTH + 1];\n+    let mut line = [0; LINE_LENGTH + 1];\n     while n > 0 {\n         let nb = min(LINE_LENGTH, n);\n         for i in 0..nb {"}, {"sha": "9e5885041b66b98875006e13b6b4238322c1c8d1", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -78,11 +78,11 @@ impl Code {\n     }\n \n     fn rotate(&self, c: u8, frame: usize) -> Code {\n-        Code(self.push_char(c).hash() & ((1u64 << (2 * frame)) - 1))\n+        Code(self.push_char(c).hash() & ((1 << (2 * frame)) - 1))\n     }\n \n     fn pack(string: &str) -> Code {\n-        string.bytes().fold(Code(0u64), |a, b| a.push_char(b))\n+        string.bytes().fold(Code(0), |a, b| a.push_char(b))\n     }\n \n     fn unpack(&self, frame: usize) -> String {"}, {"sha": "79a5245a40849bc8842324917e8ed84b7c1ae110", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -169,7 +169,7 @@ fn make_masks() -> Vec<Vec<Vec<u64> > > {\n         .map(|(id, p)| transform(p, id != 3))\n         .collect();\n \n-    (0i32..50).map(|yx| {\n+    (0..50).map(|yx| {\n         transforms.iter().enumerate().map(|(id, t)| {\n             t.iter().filter_map(|p| mask(yx / 5, yx % 5, id, p)).collect()\n         }).collect()\n@@ -211,7 +211,7 @@ fn filter_masks(masks: &mut Vec<Vec<Vec<u64>>>) {\n \n // Gets the identifier of a mask.\n fn get_id(m: u64) -> u8 {\n-    for id in 0u8..10 {\n+    for id in 0..10 {\n         if m & (1 << (id + 50) as usize) != 0 {return id;}\n     }\n     panic!(\"{:016x} does not have a valid identifier\", m);"}, {"sha": "9a82614510eb265431596d82b1d34ec472e7a203", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -60,7 +60,7 @@ impl Sudoku {\n         reader.read_line(&mut s).unwrap();\n         assert_eq!(s, \"9,9\\n\");\n \n-        let mut g = repeat(vec![0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8])\n+        let mut g = repeat(vec![0, 0, 0, 0, 0, 0, 0, 0, 0])\n                           .take(10).collect::<Vec<_>>();\n         for line in reader.lines() {\n             let line = line.unwrap();\n@@ -94,10 +94,10 @@ impl Sudoku {\n     // solve sudoku grid\n     pub fn solve(&mut self) {\n         let mut work: Vec<(u8, u8)> = Vec::new(); /* queue of uncolored fields */\n-        for row in 0u8..9u8 {\n-            for col in 0u8..9u8 {\n+        for row in 0..9 {\n+            for col in 0..9 {\n                 let color = self.grid[row as usize][col as usize];\n-                if color == 0u8 {\n+                if color == 0 {\n                     work.push((row, col));\n                 }\n             }\n@@ -122,7 +122,7 @@ impl Sudoku {\n     }\n \n     fn next_color(&mut self, row: u8, col: u8, start_color: u8) -> bool {\n-        if start_color < 10u8 {\n+        if start_color < 10 {\n             // colors not yet used\n             let mut avail: Box<_> = box Colors::new(start_color);\n \n@@ -132,26 +132,26 @@ impl Sudoku {\n             // find first remaining color that is available\n             let next = avail.next();\n             self.grid[row as usize][col as usize] = next;\n-            return 0u8 != next;\n+            return 0 != next;\n         }\n-        self.grid[row as usize][col as usize] = 0u8;\n+        self.grid[row as usize][col as usize] = 0;\n         return false;\n     }\n \n     // find colors available in neighbourhood of (row, col)\n     fn drop_colors(&mut self, avail: &mut Colors, row: u8, col: u8) {\n-        for idx in 0u8..9u8 {\n+        for idx in 0..9 {\n             /* check same column fields */\n             avail.remove(self.grid[idx as usize][col as usize]);\n             /* check same row fields */\n             avail.remove(self.grid[row as usize][idx as usize]);\n         }\n \n         // check same block fields\n-        let row0 = (row / 3u8) * 3u8;\n-        let col0 = (col / 3u8) * 3u8;\n-        for alt_row in row0..row0 + 3u8 {\n-            for alt_col in col0..col0 + 3u8 {\n+        let row0 = (row / 3) * 3;\n+        let col0 = (col / 3) * 3;\n+        for alt_row in row0..row0 + 3 {\n+            for alt_col in col0..col0 + 3 {\n                 avail.remove(self.grid[alt_row as usize][alt_col as usize]);\n             }\n         }\n@@ -161,87 +161,87 @@ impl Sudoku {\n // Stores available colors as simple bitfield, bit 0 is always unset\n struct Colors(u16);\n \n-static HEADS: u16 = (1u16 << 10) - 1; /* bits 9..0 */\n+static HEADS: u16 = (1 << 10) - 1; /* bits 9..0 */\n \n impl Colors {\n     fn new(start_color: u8) -> Colors {\n         // Sets bits 9..start_color\n-        let tails = !0u16 << start_color as usize;\n+        let tails = !0 << start_color as usize;\n         return Colors(HEADS & tails);\n     }\n \n     fn next(&self) -> u8 {\n         let Colors(c) = *self;\n         let val = c & HEADS;\n-        if 0u16 == val {\n-            return 0u8;\n+        if 0 == val {\n+            return 0;\n         } else {\n             return val.trailing_zeros() as u8\n         }\n     }\n \n     fn remove(&mut self, color: u8) {\n-        if color != 0u8 {\n+        if color != 0 {\n             let Colors(val) = *self;\n-            let mask = !(1u16 << color as usize);\n+            let mask = !(1 << color as usize);\n             *self    = Colors(val & mask);\n         }\n     }\n }\n \n static DEFAULT_SUDOKU: [[u8;9];9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n-  /* 0 */  [0u8, 4u8, 0u8, 6u8, 0u8, 0u8, 0u8, 3u8, 2u8],\n-  /* 1 */  [0u8, 0u8, 8u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8],\n-  /* 2 */  [7u8, 0u8, 0u8, 8u8, 0u8, 0u8, 0u8, 0u8, 0u8],\n-  /* 3 */  [0u8, 0u8, 0u8, 5u8, 0u8, 0u8, 0u8, 0u8, 0u8],\n-  /* 4 */  [0u8, 5u8, 0u8, 0u8, 0u8, 3u8, 6u8, 0u8, 0u8],\n-  /* 5 */  [6u8, 8u8, 0u8, 0u8, 0u8, 0u8, 0u8, 9u8, 0u8],\n-  /* 6 */  [0u8, 9u8, 5u8, 0u8, 0u8, 6u8, 0u8, 7u8, 0u8],\n-  /* 7 */  [0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 6u8, 0u8],\n-  /* 8 */  [4u8, 0u8, 0u8, 0u8, 0u8, 7u8, 2u8, 0u8, 3u8]\n+  /* 0 */  [0, 4, 0, 6, 0, 0, 0, 3, 2],\n+  /* 1 */  [0, 0, 8, 0, 2, 0, 0, 0, 0],\n+  /* 2 */  [7, 0, 0, 8, 0, 0, 0, 0, 0],\n+  /* 3 */  [0, 0, 0, 5, 0, 0, 0, 0, 0],\n+  /* 4 */  [0, 5, 0, 0, 0, 3, 6, 0, 0],\n+  /* 5 */  [6, 8, 0, 0, 0, 0, 0, 9, 0],\n+  /* 6 */  [0, 9, 5, 0, 0, 6, 0, 7, 0],\n+  /* 7 */  [0, 0, 0, 0, 4, 0, 0, 6, 0],\n+  /* 8 */  [4, 0, 0, 0, 0, 7, 2, 0, 3]\n ];\n \n #[cfg(test)]\n static DEFAULT_SOLUTION: [[u8;9];9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n-  /* 0 */  [1u8, 4u8, 9u8, 6u8, 7u8, 5u8, 8u8, 3u8, 2u8],\n-  /* 1 */  [5u8, 3u8, 8u8, 1u8, 2u8, 9u8, 7u8, 4u8, 6u8],\n-  /* 2 */  [7u8, 2u8, 6u8, 8u8, 3u8, 4u8, 1u8, 5u8, 9u8],\n-  /* 3 */  [9u8, 1u8, 4u8, 5u8, 6u8, 8u8, 3u8, 2u8, 7u8],\n-  /* 4 */  [2u8, 5u8, 7u8, 4u8, 9u8, 3u8, 6u8, 1u8, 8u8],\n-  /* 5 */  [6u8, 8u8, 3u8, 7u8, 1u8, 2u8, 5u8, 9u8, 4u8],\n-  /* 6 */  [3u8, 9u8, 5u8, 2u8, 8u8, 6u8, 4u8, 7u8, 1u8],\n-  /* 7 */  [8u8, 7u8, 2u8, 3u8, 4u8, 1u8, 9u8, 6u8, 5u8],\n-  /* 8 */  [4u8, 6u8, 1u8, 9u8, 5u8, 7u8, 2u8, 8u8, 3u8]\n+  /* 0 */  [1, 4, 9, 6, 7, 5, 8, 3, 2],\n+  /* 1 */  [5, 3, 8, 1, 2, 9, 7, 4, 6],\n+  /* 2 */  [7, 2, 6, 8, 3, 4, 1, 5, 9],\n+  /* 3 */  [9, 1, 4, 5, 6, 8, 3, 2, 7],\n+  /* 4 */  [2, 5, 7, 4, 9, 3, 6, 1, 8],\n+  /* 5 */  [6, 8, 3, 7, 1, 2, 5, 9, 4],\n+  /* 6 */  [3, 9, 5, 2, 8, 6, 4, 7, 1],\n+  /* 7 */  [8, 7, 2, 3, 4, 1, 9, 6, 5],\n+  /* 8 */  [4, 6, 1, 9, 5, 7, 2, 8, 3]\n ];\n \n #[test]\n fn colors_new_works() {\n-    assert_eq!(*Colors::new(1), 1022u16);\n-    assert_eq!(*Colors::new(2), 1020u16);\n-    assert_eq!(*Colors::new(3), 1016u16);\n-    assert_eq!(*Colors::new(4), 1008u16);\n-    assert_eq!(*Colors::new(5), 992u16);\n-    assert_eq!(*Colors::new(6), 960u16);\n-    assert_eq!(*Colors::new(7), 896u16);\n-    assert_eq!(*Colors::new(8), 768u16);\n-    assert_eq!(*Colors::new(9), 512u16);\n+    assert_eq!(*Colors::new(1), 1022);\n+    assert_eq!(*Colors::new(2), 1020);\n+    assert_eq!(*Colors::new(3), 1016);\n+    assert_eq!(*Colors::new(4), 1008);\n+    assert_eq!(*Colors::new(5), 992);\n+    assert_eq!(*Colors::new(6), 960);\n+    assert_eq!(*Colors::new(7), 896);\n+    assert_eq!(*Colors::new(8), 768);\n+    assert_eq!(*Colors::new(9), 512);\n }\n \n #[test]\n fn colors_next_works() {\n-    assert_eq!(Colors(0).next(), 0u8);\n-    assert_eq!(Colors(2).next(), 1u8);\n-    assert_eq!(Colors(4).next(), 2u8);\n-    assert_eq!(Colors(8).next(), 3u8);\n-    assert_eq!(Colors(16).next(), 4u8);\n-    assert_eq!(Colors(32).next(), 5u8);\n-    assert_eq!(Colors(64).next(), 6u8);\n-    assert_eq!(Colors(128).next(), 7u8);\n-    assert_eq!(Colors(256).next(), 8u8);\n-    assert_eq!(Colors(512).next(), 9u8);\n-    assert_eq!(Colors(1024).next(), 0u8);\n+    assert_eq!(Colors(0).next(), 0);\n+    assert_eq!(Colors(2).next(), 1);\n+    assert_eq!(Colors(4).next(), 2);\n+    assert_eq!(Colors(8).next(), 3);\n+    assert_eq!(Colors(16).next(), 4);\n+    assert_eq!(Colors(32).next(), 5);\n+    assert_eq!(Colors(64).next(), 6);\n+    assert_eq!(Colors(128).next(), 7);\n+    assert_eq!(Colors(256).next(), 8);\n+    assert_eq!(Colors(512).next(), 9);\n+    assert_eq!(Colors(1024).next(), 0);\n }\n \n #[test]\n@@ -253,7 +253,7 @@ fn colors_remove_works() {\n     colors.remove(1);\n \n     // THEN\n-    assert_eq!(colors.next(), 2u8);\n+    assert_eq!(colors.next(), 2);\n }\n \n #[test]"}, {"sha": "06fc3db58c1598db6836e14ca4286eb5ac48691e", "filename": "src/test/compile-fail-fulldeps/issue-18986.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,6 +15,6 @@ pub use use_from_trait_xc::Trait;\n \n fn main() {\n     match () {\n-        Trait { x: 42_usize } => () //~ ERROR use of trait `Trait` in a struct pattern\n+        Trait { x: 42 } => () //~ ERROR use of trait `Trait` in a struct pattern\n     }\n }"}, {"sha": "6c9b8f81b2faf6779cb23a297d3f778d59db929a", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n fn main() {\n-    let _x: i32 = [1i32, 2, 3];\n+    let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n     //~| expected `i32`\n-    //~| found `[i32; 3]`\n+    //~| found `[_; 3]`\n     //~| expected i32\n     //~| found array of 3 elements\n \n-    let x: &[i32] = &[1i32, 2, 3];\n+    let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;\n     //~^ ERROR mismatched types\n     //~| expected `&i32`"}, {"sha": "3cb608a9c5ed29e4ba11be0a4a9d2929c59677c4", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -20,8 +20,8 @@ pub fn main() {\n     let x: isize;\n     let y: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5_usize)); //~ ERROR operand constraint contains '='\n-        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5_usize)); //~ ERROR operand constraint contains '+'\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n+        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n     }\n     foo(x);\n     foo(y);"}, {"sha": "8c8451623d511ee2384a54982d873c064893ae7f", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     x = 1; //~ NOTE prior assignment occurs here\n     foo(x);\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n         //~^ ERROR re-assignment of immutable variable `x`\n     }\n     foo(x);"}, {"sha": "9cf43bebe65ab858393f57817450ed8c28f29b1d", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -19,7 +19,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5_usize)); //~ ERROR output operand constraint lacks '='\n+        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n     }\n     foo(x);\n }"}, {"sha": "4518ce36b6da13140019cfdc9a7d5cac12fc25f4", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,7 +15,7 @@ struct cat {\n }\n \n impl cat {\n-    pub fn speak(&self) { self.meows += 1_usize; }\n+    pub fn speak(&self) { self.meows += 1; }\n }\n \n fn cat(in_x : usize, in_y : isize) -> cat {\n@@ -26,6 +26,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52_usize, 99);\n+  let nyan : cat = cat(52, 99);\n   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "de315a41361a7900667705cb9eb7882a7c871548", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! {\n-    return 7_usize; //~ ERROR `return` in a function declared as diverging [E0166]\n+    return 7; //~ ERROR `return` in a function declared as diverging [E0166]\n }\n \n fn main() { bad_bang(5); }"}, {"sha": "f0ecf31fd10a2532f93c470f1a5ca4aff4bfabd4", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    if i < 0_usize { } else { panic!(); }\n+    if i < 0 { } else { panic!(); }\n }\n \n fn main() { bad_bang(5); }"}, {"sha": "a9e5c957b89d4735827153a24af639f83f7c058f", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static i: String = 10i32;\n+static i: String = 10;\n //~^ ERROR mismatched types\n //~| expected `collections::string::String`\n-//~| found `i32`\n+//~| found `_`\n //~| expected struct `collections::string::String`\n-//~| found i32\n+//~| found integral variable\n fn main() { println!(\"{}\", i); }"}, {"sha": "2129d4fbd505578ff2242fc7685c04eaa7e0704c", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1_usize.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n+    1.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n }\n \n trait bar {"}, {"sha": "d5dd9e00902f9d40b53fc5cfe1776f254d1c93bf", "filename": "src/test/compile-fail/binop-logic-int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:`&&` cannot be applied to type `i32`\n+// error-pattern:`&&` cannot be applied to type `_`\n \n-fn main() { let x = 1i32 && 2i32; }\n+fn main() { let x = 1 && 2; }"}, {"sha": "00f51973a41ad407b6a228b0ea63138a500abc60", "filename": "src/test/compile-fail/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -21,25 +21,25 @@ fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn main() {\n     // By-ref captures\n     {\n-        let mut x = 0_usize;\n+        let mut x = 0;\n         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n \n-        let mut y = 0_usize;\n+        let mut y = 0;\n         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n \n-        let mut z = 0_usize;\n+        let mut z = 0;\n         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n     }\n \n     // By-value captures\n     {\n-        let mut x = 0_usize;\n+        let mut x = 0;\n         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n \n-        let mut y = 0_usize;\n+        let mut y = 0;\n         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n \n-        let mut z = 0_usize;\n+        let mut z = 0;\n         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n     }\n }"}, {"sha": "e4b9fb2671124d64e3dc20d8fd98840b6c0957a8", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,7 +17,7 @@ enum Foo {\n }\n \n fn blah() {\n-    let f = &Foo::Foo1(box 1u32, box 2u32);\n+    let f = &Foo::Foo1(box 1, box 2);\n     match *f {             //~ ERROR cannot move out of\n         Foo::Foo1(num1,         //~ NOTE attempting to move value to here\n                   num2) => (),  //~ NOTE and here"}, {"sha": "61bf2c11a1f72d1b96d371f762d352e61947ae1d", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)]\n fn main() {\n     // Original borrow ends at end of function\n-    let mut x = 1_usize;\n+    let mut x = 1;\n     let y = &mut x;\n     let z = &x; //~ ERROR cannot borrow\n }\n@@ -21,7 +21,7 @@ fn foo() {\n     match true {\n         true => {\n             // Original borrow ends at end of match arm\n-            let mut x = 1_usize;\n+            let mut x = 1;\n             let y = &x;\n             let z = &mut x; //~ ERROR cannot borrow\n         }\n@@ -33,7 +33,7 @@ fn foo() {\n fn bar() {\n     // Original borrow ends at end of closure\n     || {\n-        let mut x = 1_usize;\n+        let mut x = 1;\n         let y = &mut x;\n         let z = &mut x; //~ ERROR cannot borrow\n     };"}, {"sha": "46b100a4d399e35593ef3cda5b34899e5796dbcd", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : usize) -> cat {\n }\n \n fn main() {\n-  let nyan = cat(0_usize);\n+  let nyan = cat(0);\n }"}, {"sha": "ab76af1cbe600d91168633f3b66f3b5db04d6ee7", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,7 +16,7 @@ impl cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n       println!(\"Meow\");\n-      meows += 1_usize; //~ ERROR unresolved name\n+      meows += 1; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name\n     }\n "}, {"sha": "bb4d1693af7e35902839a9d920b85b4b7f5af701", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,10 +11,10 @@\n // Tests that we forbid coercion from `[T; n]` to `&[T]`\n \n fn main() {\n-    let _: &[i32] = [0i32];\n+    let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n     //~| expected `&[i32]`\n-    //~| found `[i32; 1]`\n+    //~| found `[_; 1]`\n     //~| expected &-ptr\n     //~| found array of 1 elements\n }"}, {"sha": "5ccfb1ddec78adb5d3403a409a001a766942856e", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const A: usize = { 1_usize; 2 };\n+const A: usize = { 1; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n const B: usize = { { } 2 };\n@@ -19,7 +19,7 @@ macro_rules! foo {\n }\n const C: usize = { foo!(); 2 };\n \n-const D: usize = { let x = 4_usize; 2 };\n+const D: usize = { let x = 4; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n pub fn main() {"}, {"sha": "5b215f3ccd9618f1b76ea1f0b51b59622294564f", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -22,10 +22,10 @@ impl S { }\n impl T for S { }\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-static s: usize = 0_usize;\n+static s: usize = 0;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-const c: usize = 0_usize;\n+const c: usize = 0;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n mod m { }"}, {"sha": "22f615cafd71eec06ce67f396d45542e0e1eb466", "filename": "src/test/compile-fail/destructor-restrictions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fdestructor-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fdestructor-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructor-restrictions.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -14,8 +14,8 @@ use std::cell::RefCell;\n \n fn main() {\n     let b = {\n-        let a = Box::new(RefCell::new(4i8));\n-        *a.borrow() + 1i8    //~ ERROR `*a` does not live long enough\n+        let a = Box::new(RefCell::new(4));\n+        *a.borrow() + 1    //~ ERROR `*a` does not live long enough\n     };\n     println!(\"{}\", b);\n }"}, {"sha": "54bdaf011c875c63de26a56c6ec368cb0ecfca7d", "filename": "src/test/compile-fail/feature-gated-feature-in-macro-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -21,7 +21,7 @@\n // test. Not ideal, but oh well :(\n \n fn main() {\n-    let a = &[1i32, 2, 3];\n+    let a = &[1, 2, 3];\n     println!(\"{}\", {\n         extern \"rust-intrinsic\" { //~ ERROR intrinsics are subject to change\n             fn atomic_fence();"}, {"sha": "67834a9996948f5ca756b67d4b019d0d0ec7e340", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,13 +13,13 @@\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { println!(\"f1\"); }\n-    pub fn common() -> usize { return 0_usize; }\n+    pub fn common() -> usize { return 0; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n     pub fn f2() { println!(\"f2\"); }\n-    pub fn common() -> usize { return 1_usize; }\n+    pub fn common() -> usize { return 1; }\n }\n \n mod test {"}, {"sha": "70c362303ae30cba82ac7837aa7f326f32cabf0b", "filename": "src/test/compile-fail/index-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex-bot.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    (return)[0_usize]; //~ ERROR the type of this value must be known in this context\n+    (return)[0]; //~ ERROR the type of this value must be known in this context\n }"}, {"sha": "559e0e9a292a6dda32676241228923421dcede21", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -32,13 +32,13 @@ impl<T:Clone> ToOpt for Option<T> {\n }\n \n fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n-    if counter > 0_usize {\n-        function(counter - 1_usize, t.to_option());\n+    if counter > 0 {\n+        function(counter - 1, t.to_option());\n         // FIXME(#4287) Error message should be here. It should be\n         // a type error to instantiate `test` at a type other than T.\n     }\n }\n \n fn main() {\n-    function(22_usize, 22_usize);\n+    function(22, 22);\n }"}, {"sha": "998576097a0a06887275de88b1d82149f2fcae6e", "filename": "src/test/compile-fail/issue-11714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn blah() -> i32 { //~ ERROR not all control paths return a value\n-    1i32\n+    1\n \n     ; //~ HELP consider removing this semicolon:\n }"}, {"sha": "50c4ac94d903267b8d07b2c90f9a878bf5293ae0", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -24,7 +24,7 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n {\n     let cont_iter = cont.iter();\n //~^ ERROR cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-    let result = cont_iter.fold(Some(0u16), |state, val| {\n+    let result = cont_iter.fold(Some(0), |state, val| {\n         state.map_or(None, |mask| {\n             let bit = 1 << val;\n             if mask & bit == 0 {Some(mask|bit)} else {None}\n@@ -34,10 +34,10 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n }\n \n fn main() {\n-    check((3_usize, 5_usize));\n+    check((3, 5));\n //~^ ERROR mismatched types\n //~| expected `&_`\n-//~| found `(usize, usize)`\n+//~| found `(_, _)`\n //~| expected &-ptr\n //~| found tuple\n }"}, {"sha": "a29a83c43063214f6bb0c2ebae731c2b7327f575", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -14,17 +14,17 @@ pub fn main() {\n     // The expected arm type `Option<T>` has one type parameter, while\n     // the actual arm `Result<T, E>` has two. typeck should not be\n     // tricked into looking up a non-existing second type parameter.\n-    let _x: usize = match Some(1_usize) {\n+    let _x: usize = match Some(1) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n-        //~| expected `core::option::Option<usize>`\n+        //~| expected `core::option::Option<_>`\n         //~| found `core::result::Result<_, _>`\n         //~| expected enum `core::option::Option`\n         //~| found enum `core::result::Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n-        //~| expected `core::option::Option<usize>`\n+        //~| expected `core::option::Option<_>`\n         //~| found `core::result::Result<_, _>`\n         //~| expected enum `core::option::Option`\n         //~| found enum `core::result::Result`"}, {"sha": "d7bb806999c74abe7291eac8f090a492a53ac417", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -22,11 +22,11 @@ fn main() {\n     //~| expected u8\n     //~| found array of 1 elements\n \n-    let local = [0u8];\n+    let local = [0];\n     let _v = &local as *mut u8;\n     //~^ ERROR mismatched types\n     //~| expected `*mut u8`\n-    //~| found `&[u8; 1]`\n+    //~| found `&[_; 1]`\n     //~| expected u8,\n     //~| found array of 1 elements\n }"}, {"sha": "64334fe4392f8774962a9c301aa109bc50bb0c1e", "filename": "src/test/compile-fail/issue-16747.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -18,11 +18,10 @@ trait Collection { fn len(&self) -> usize; }\n \n struct List<'a, T: ListItem<'a>> {\n //~^ ERROR the parameter type `T` may not live long enough\n-//~^^ HELP consider adding an explicit lifetime bound\n-//~^^^ NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n+//~^^ NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n     slice: &'a [T]\n }\n-\n+//~^ HELP consider adding an explicit lifetime bound\n impl<'a, T: ListItem<'a>> Collection for List<'a, T> {\n     fn len(&self) -> usize {\n         0"}, {"sha": "a481fec6bf96839cb011e0dcc6f50ab1657ecee1", "filename": "src/test/compile-fail/issue-17283.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n }\n \n fn main() {\n-    let x = 1_usize;\n+    let x = 1;\n     let y: Foo;\n \n     // `x { ... }` should not be interpreted as a struct literal here"}, {"sha": "8ebf80a8db0dc5be49c5d6fc655d30a5dbaefce0", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,6 +13,6 @@\n \n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-    (|| Box::new(*[0_usize].as_slice()))();\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[usize]`\n+    (|| Box::new(*[0].as_slice()))();\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[_]`\n }"}, {"sha": "4e63f667d26fa413e83cc5d3c8ba988093c856a3", "filename": "src/test/compile-fail/issue-17718-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,7 +13,7 @@ static mut A2: usize = 1;\n const A3: usize = 1;\n \n fn main() {\n-    match 1_usize {\n+    match 1 {\n         A1 => {} //~ ERROR: static variables cannot be referenced in a pattern\n         A2 => {} //~ ERROR: static variables cannot be referenced in a pattern\n         A3 => {}"}, {"sha": "657b31fa83c7f829419e5bf2aa88d9062c217e43", "filename": "src/test/compile-fail/issue-17933.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub static X: usize = 1_usize;\n+pub static X: usize = 1;\n \n fn main() {\n-    match 1_usize {\n+    match 1 {\n         self::X => { },\n         //~^ ERROR static variables cannot be referenced in a pattern, use a `const` instead\n         _       => { },"}, {"sha": "60ab616d5983bf25a4dcad218fa39f5a321caf18", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,7 +16,7 @@ fn _create_render(_: &()) ->\n     AbstractRenderer\n //~^ ERROR: the trait `core::marker::Sized` is not implemented\n {\n-    match 0_usize {\n+    match 0 {\n         _ => unimplemented!()\n     }\n }"}, {"sha": "e3e56c7f97ad5ba400b76d5c622f5c694873b6db", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,5 +13,5 @@ enum Foo {\n }\n \n fn main() {\n-    let f = Foo::Variant(42_usize); //~ ERROR uses it like a function\n+    let f = Foo::Variant(42); //~ ERROR uses it like a function\n }"}, {"sha": "41e82d0cd8912f1085856e03ce07fb66298d6a99", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -28,7 +28,7 @@ impl Tr for usize {\n }\n \n fn main() {\n-    let s = &mut 1_usize;\n+    let s = &mut 1;\n \n     MyPtr(s).poke(s);\n     //~^ ERROR cannot borrow `*s` as mutable more than once at a time"}, {"sha": "5eb3c439df2f3170d5a2cafb8bb01f5f308777c7", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,15 +13,15 @@ use std::cell::RefCell;\n // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n fn main() {\n-    let mut y = 1_usize;\n+    let mut y = 1;\n     let c = RefCell::new(vec![]);\n     c.push(Box::new(|| y = 0));\n     c.push(Box::new(|| y = 0));\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n fn ufcs() {\n-    let mut y = 1_usize;\n+    let mut y = 1;\n     let c = RefCell::new(vec![]);\n \n     Push::push(&c, Box::new(|| y = 0));"}, {"sha": "ebda2481803a7cef57f87661218d5831fa63fdef", "filename": "src/test/compile-fail/issue-18959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -19,7 +19,7 @@ impl Foo for Thing {\n \n #[inline(never)]\n fn foo(b: &Bar) {\n-    b.foo(&0usize)\n+    b.foo(&0)\n     //~^ ERROR the trait `Foo` is not implemented for the type `Bar`\n }\n "}, {"sha": "6c9b0004f7754874e0f143038a15f8f8dd33b018", "filename": "src/test/compile-fail/issue-19991.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -14,9 +14,9 @@\n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n                                            //~| expected `()`\n-                                           //~| found `i32`\n+                                           //~| found `_`\n                                            //~| expected ()\n-                                           //~| found i32\n-        765i32\n+                                           //~| found integral variable\n+        765\n     };\n }"}, {"sha": "fe7807042e55b706c3b8e2177a02d5b135012cb1", "filename": "src/test/compile-fail/issue-20801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -25,11 +25,11 @@ fn mut_ref() -> &'static mut T {\n }\n \n fn mut_ptr() -> *mut T {\n-    unsafe { 0u8 as *mut T }\n+    unsafe { 0 as *mut T }\n }\n \n fn const_ptr() -> *const T {\n-    unsafe { 0u8 as *const T }\n+    unsafe { 0 as *const T }\n }\n \n pub fn main() {"}, {"sha": "8b109b0a5c04d9b7eae68158ee5e16e0ccbbb1d3", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,7 +15,7 @@\n fn fail_len(v: Vec<isize> ) -> usize {\n     let mut i = 3;\n     panic!();\n-    for x in &v { i += 1_usize; }\n+    for x in &v { i += 1; }\n     //~^ ERROR: unreachable statement\n     return i;\n }"}, {"sha": "a1804b5a2689d92978d5a406bf73a3e3c26657fa", "filename": "src/test/compile-fail/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,7 +11,7 @@\n fn bar(int_param: usize) {}\n \n fn main() {\n-    let foo: [u8; 4] = [1u8; 4_usize];\n+    let foo: [u8; 4] = [1; 4];\n     bar(foo);\n     //~^ ERROR mismatched types\n     //~| expected `usize`"}, {"sha": "9c019f6ec47fb91a1d17733f737fd44083f7cc58", "filename": "src/test/compile-fail/issue-7575.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -32,17 +32,17 @@ trait UnusedTrait : MarkerTrait {\n \n impl CtxtFn for usize {\n     fn f8(self, i: usize) -> usize {\n-        i * 4_usize\n+        i * 4\n     }\n \n     fn f9(i: usize) -> usize {\n-        i * 4_usize\n+        i * 4\n     }\n }\n \n impl OtherTrait for usize {\n     fn f9(i: usize) -> usize {\n-        i * 8_usize\n+        i * 8\n     }\n }\n "}, {"sha": "400806c3a5fa6cbfe7110e1b887212ac5be62181", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -23,16 +23,16 @@ fn main() {\n         _ => ()\n     }\n \n-    match &Some(42i32) {\n+    match &Some(42) {\n         Some(x) => (),\n         //~^ ERROR mismatched types\n-        //~| expected `&core::option::Option<i32>`\n+        //~| expected `&core::option::Option<_>`\n         //~| found `core::option::Option<_>`\n         //~| expected &-ptr\n         //~| found enum `core::option::Option`\n         None => ()\n         //~^ ERROR mismatched types\n-        //~| expected `&core::option::Option<i32>`\n+        //~| expected `&core::option::Option<_>`\n         //~| found `core::option::Option<_>`\n         //~| expected &-ptr\n         //~| found enum `core::option::Option`"}, {"sha": "c370aa4b8fb1aa6b6d7a6643c2dc8da19f9db319", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,7 +16,7 @@ fn foo(_x: Rc<usize>) {}\n fn bar<F:FnOnce() + Send>(_: F) { }\n \n fn main() {\n-    let x = Rc::new(3_usize);\n+    let x = Rc::new(3);\n     bar(move|| foo(x));\n     //~^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "0a8e4514b4334294289cafd117bfa309e3ae7a28", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -24,7 +24,7 @@ impl<'r> Itble<'r, usize, Range<usize>> for (usize, usize) {\n fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool {\n //~^ HELP: consider using an explicit lifetime parameter as shown: fn check<'r, I: Iterator<Item = usize>, T: Itble<'r, usize, I>>(cont: &'r T)\n     let cont_iter = cont.iter(); //~ ERROR: cannot infer\n-    let result = cont_iter.fold(Some(0u16), |state, val| {\n+    let result = cont_iter.fold(Some(0), |state, val| {\n         state.map_or(None, |mask| {\n             let bit = 1 << val;\n             if mask & bit == 0 {Some(mask|bit)} else {None}"}, {"sha": "8441fb3ade9a8ea9cc002d3e309338c0386b9803", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -63,6 +63,6 @@ fn field_match_in_let(f: Bar) -> bool {\n fn main() {\n     field_read(Foo { x: 1, b: false, marker: std::marker::NoCopy });\n     field_match_in_patterns(XYZ::Z);\n-    field_match_in_let(Bar { x: 42_usize, b: true, _guard: () });\n+    field_match_in_let(Bar { x: 42, b: true, _guard: () });\n     let _ = Baz { x: 0 };\n }"}, {"sha": "a4eb1630afe19c00f993df2f6aa67a1ea1270e85", "filename": "src/test/compile-fail/liveness-return-last-stmt-semi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -10,7 +10,7 @@\n //\n // regression test for #8005\n \n-macro_rules! test { () => { fn foo() -> i32 { 1i32; } } }\n+macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n                                            //~^ ERROR not all control paths return a value\n                                            //~^^ HELP consider removing this semicolon\n "}, {"sha": "e8d9f444cefc6d687dee1f6ba169d3d08c7533f4", "filename": "src/test/compile-fail/macro-no-implicit-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_non_reexport_2;\n \n fn main() {\n-    assert_eq!(reexported!(), 3_usize);  //~ ERROR macro undefined\n+    assert_eq!(reexported!(), 3);  //~ ERROR macro undefined\n }"}, {"sha": "26de51a7cf8c321e4273f19b75527acb1b4f27f7", "filename": "src/test/compile-fail/macro-reexport-not-locally-visible.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -18,5 +18,5 @@\n extern crate macro_reexport_1;\n \n fn main() {\n-    assert_eq!(reexported!(), 3_usize);  //~ ERROR macro undefined\n+    assert_eq!(reexported!(), 3);  //~ ERROR macro undefined\n }"}, {"sha": "57a96bb9a26ea4febfddf3fd54dc250e5b414194", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -23,9 +23,9 @@ fn main() {\n                  //~| found `Foo`\n                  //~| expected &-ptr\n                  //~| found struct `Foo`\n-    Foo::bar(&42i32); //~  ERROR mismatched types\n+    Foo::bar(&42); //~  ERROR mismatched types\n                       //~| expected `&Foo`\n-                      //~| found `&i32`\n+                      //~| found `&_`\n                       //~| expected struct `Foo`\n-                      //~| found i32\n+                      //~| found integral variable\n }"}, {"sha": "9eb24c81960cacc29e81d41f3101a56ef298b8b6", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,21 +9,21 @@\n // except according to those terms.\n \n fn main() {\n-    let foo = &mut 1i32;\n+    let foo = &mut 1;\n \n     // (separate lines to ensure the spans are accurate)\n \n      let &_ //~  ERROR mismatched types\n-            //~| expected `&mut i32`\n+            //~| expected `&mut _`\n             //~| found `&_`\n             //~| values differ in mutability\n         = foo;\n     let &mut _ = foo;\n \n-    let bar = &1i32;\n+    let bar = &1;\n     let &_ = bar;\n     let &mut _ //~  ERROR mismatched types\n-               //~| expected `&i32`\n+               //~| expected `&_`\n                //~| found `&mut _`\n                //~| values differ in mutability\n          = bar;"}, {"sha": "46af3a862c28f623c9801e974f7675e46275b134", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -29,6 +29,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52_usize, 99);\n+  let nyan : cat = cat(52, 99);\n   nyan.eat();\n }"}, {"sha": "c163dc2b4d228d770398740842ca6ba649e2e7c0", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -21,6 +21,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52_usize, 99);\n+  let nyan : cat = cat(52, 99);\n   nyan.how_hungry = 0; //~ ERROR cannot assign\n }"}, {"sha": "3ed91459ae94c70ae7e24b9da9a94a9e1706daee", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -27,7 +27,7 @@ fn struct_with_a_nested_enum_and_vector() {\n         Foo { first: true, second: None } => (),\n         Foo { first: true, second: Some(_) } => (),\n         Foo { first: false, second: None } => (),\n-        Foo { first: false, second: Some([1_usize, 2_usize, 3_usize, 4_usize]) } => ()\n+        Foo { first: false, second: Some([1, 2, 3, 4]) } => ()\n     }\n }\n "}, {"sha": "59508d6ac95f9645d2c3a67af396e0eaf29d1e98", "filename": "src/test/compile-fail/or-patter-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -12,4 +12,4 @@\n \n enum blah { a(isize, isize, usize), b(isize, isize), }\n \n-fn main() { match blah::a(1, 1, 2_usize) { blah::a(_, x, y) | blah::b(x, y) => { } } }\n+fn main() { match blah::a(1, 1, 2) { blah::a(_, x, y) | blah::b(x, y) => { } } }"}, {"sha": "16510c2c8c99cb01f07743f86cbd0c1508a5ca3f", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -30,6 +30,6 @@ mod kitties {\n }\n \n fn main() {\n-  let nyan : kitties::cat = kitties::cat(52_usize, 99);\n+  let nyan : kitties::cat = kitties::cat(52, 99);\n   nyan.nap();\n }"}, {"sha": "fb4491a63757b4e27b93f6d24db04fd3dfc113db", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,7 +13,7 @@ extern crate cci_class;\n use cci_class::kitties::cat;\n \n fn main() {\n-  let nyan : cat = cat(52_usize, 99);\n-  assert!((nyan.meows == 52_usize));\n+  let nyan : cat = cat(52, 99);\n+  assert!((nyan.meows == 52));\n   //~^ ERROR field `meows` of struct `cci_class::kitties::cat` is private\n }"}, {"sha": "e7b34d6d1bc38609bbb11d562d6409046d19b5e7", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n     //~^ ERROR the trait `core::num::Int` is not implemented for the type `f32`\n \n     // Unsized type.\n-    let arr: &[_] = &[1u32, 2, 3];\n+    let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "04ee0526403fbe9dfedf2c8ca39205e2e2a8f9fb", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,18 +15,18 @@ struct dog {\n impl dog {\n     pub fn chase_cat(&mut self) {\n         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-        *p += 1_usize;\n+        *p += 1;\n     }\n \n     pub fn chase_cat_2(&mut self) {\n         let p: &mut usize = &mut self.cats_chased;\n-        *p += 1_usize;\n+        *p += 1;\n     }\n }\n \n fn dog() -> dog {\n     dog {\n-        cats_chased: 0_usize\n+        cats_chased: 0\n     }\n }\n "}, {"sha": "28491f1155c367b204ae52d128c2d4ca1698c3cf", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -18,7 +18,7 @@ impl dog {\n     pub fn chase_cat(&mut self) {\n         let _f = || {\n             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-            *p = 3_usize;\n+            *p = 3;\n         };\n     }\n }"}, {"sha": "ad2dc28afef02f3be21e4ca19cf918fa33fba6c9", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -14,8 +14,8 @@ enum ast<'a> {\n }\n \n fn build() {\n-    let x = ast::num(3_usize);\n-    let y = ast::num(4_usize);\n+    let x = ast::num(3);\n+    let y = ast::num(4);\n     let z = ast::add(&x, &y);\n     compute(&z);\n }"}, {"sha": "ae9ceb600d45c1bb5be47b430b21453dd0746229", "filename": "src/test/compile-fail/regions-pattern-typing-issue-19997.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let a0 = 0u8;\n-    let f = 1u8;\n+    let a0 = 0;\n+    let f = 1;\n     let mut a1 = &a0;\n     match (&a1,) {\n         (&ref b0,) => {"}, {"sha": "1e2224eafaeb057567115767d28744583d64cb76", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,7 +15,7 @@\n fn main() {\n     // Unboxed closure case\n     {\n-        let mut x = 0_usize;\n+        let mut x = 0;\n         let mut f = || &mut x; //~ ERROR cannot infer\n         let x = f();\n         let y = f();"}, {"sha": "01439ce5e68775f83454622d295e33ac0aa92ac2", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -34,7 +34,7 @@ fn get_v(gc: Box<get_ctxt>) -> usize {\n }\n \n fn main() {\n-    let ctxt = ctxt { v: 22_usize };\n+    let ctxt = ctxt { v: 22 };\n     let hc = has_ctxt { c: &ctxt };\n-    assert_eq!(get_v(box hc as Box<get_ctxt>), 22_usize);\n+    assert_eq!(get_v(box hc as Box<get_ctxt>), 22);\n }"}, {"sha": "ea6d63ca540ef8a422a2edd344790a770b5f811e", "filename": "src/test/compile-fail/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -26,40 +26,40 @@ fn main() {\n     let pt = PointF {\n         //~^ ERROR structure constructor specifies a structure of type\n         //~| expected f32\n-        //~| found i32\n-        x: 1i32,\n-        y: 2i32,\n+        //~| found integral variable\n+        x: 1,\n+        y: 2,\n     };\n \n     let pt2 = Point::<f32> {\n         //~^ ERROR structure constructor specifies a structure of type\n         //~| expected f32\n-        //~| found i32\n-        x: 3i32,\n-        y: 4i32,\n+        //~| found integral variable\n+        x: 3,\n+        y: 4,\n     };\n \n     let pair = PairF {\n         //~^ ERROR structure constructor specifies a structure of type\n         //~| expected f32\n-        //~| found i32\n-        x: 5i32,\n-        y: 6i32,\n+        //~| found integral variable\n+        x: 5,\n+        y: 6,\n     };\n \n     let pair2 = PairF::<i32> {\n         //~^ ERROR structure constructor specifies a structure of type\n         //~| expected f32\n-        //~| found i32\n-        x: 7i32,\n-        y: 8i32,\n+        //~| found integral variable\n+        x: 7,\n+        y: 8,\n     };\n \n     let pt3 = PointF::<i32> {\n         //~^ ERROR wrong number of type arguments\n         //~| ERROR structure constructor specifies a structure of type\n-        x: 9i32,\n-        y: 10i32,\n+        x: 9,\n+        y: 10,\n     };\n }\n "}, {"sha": "5c1270aa0e43d8f25adb1d42969871318dfc4c97", "filename": "src/test/compile-fail/tail-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -12,6 +12,6 @@\n \n fn f() -> isize { return g(); }\n \n-fn g() -> usize { return 0_usize; }\n+fn g() -> usize { return 0; }\n \n fn main() { let y = f(); }"}, {"sha": "ea41775f310d3ef74c4b3438028c07e222c6553f", "filename": "src/test/compile-fail/traits-issue-23003-overflow.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A variant of traits-issue-23003 in which an infinite series of\n+// types are required. This currently creates an overflow. This test\n+// is included to ensure that some controlled failure, at least,\n+// results -- but it might be that we should adjust the rules somewhat\n+// to make this legal. -nmatsakis\n+\n+use std::marker::PhantomData;\n+\n+trait Async {\n+    type Cancel;\n+}\n+\n+struct Receipt<A:Async> {\n+    marker: PhantomData<A>,\n+}\n+\n+struct Complete<B> {\n+    core: Option<B>,\n+}\n+\n+impl<B> Async for Complete<B> {\n+    type Cancel = Receipt<Complete<Option<B>>>;\n+}\n+\n+fn foo(r: Receipt<Complete<()>>) { }\n+//~^ ERROR overflow\n+\n+fn main() { }"}, {"sha": "8fe1f4d2371c42120120c57cf985d960692c75a6", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -33,7 +33,7 @@ where T : Convert<U>\n }\n \n fn a() {\n-    test(22_i32, std::default::Default::default()); //~ ERROR type annotations required\n+    test(22, std::default::Default::default()); //~ ERROR type annotations required\n }\n \n fn main() {}"}, {"sha": "c2c41fbbb2aaf16857a721a4a2dd90ec859dfafe", "filename": "src/test/compile-fail/tuple-index-out-of-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,14 +11,14 @@\n struct Point(i32, i32);\n \n fn main() {\n-    let origin = Point(0i32, 0i32);\n+    let origin = Point(0, 0);\n     origin.0;\n     origin.1;\n     origin.2;\n     //~^ ERROR attempted out-of-bounds tuple index `2` on type `Point`\n-    let tuple = (0i32, 0i32);\n+    let tuple = (0, 0);\n     tuple.0;\n     tuple.1;\n     tuple.2;\n-    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(i32, i32)`\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(_, _)`\n }"}, {"sha": "627300a037720b92ba9a45e7981b1f9a985638ee", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -10,12 +10,12 @@\n \n // Checking that the compiler reports multiple type errors at once\n \n-fn main() { let a: bool = 1i32; let b: i32 = true; }\n+fn main() { let a: bool = 1; let b: i32 = true; }\n //~^ ERROR mismatched types\n //~| expected `bool`\n-//~| found `i32`\n+//~| found `_`\n //~| expected bool\n-//~| found i32\n+//~| found integral variable\n //~| ERROR mismatched types\n //~| expected `i32`\n //~| found `bool`"}, {"sha": "88d8788d63a3de54bdcdc0f8dc3b1313558f709a", "filename": "src/test/compile-fail/type-params-in-different-spaces-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -23,7 +23,7 @@ trait BrokenAdd: Int {\n impl<T: Int> BrokenAdd for T {}\n \n pub fn main() {\n-    let foo: u8 = 0u8;\n+    let foo: u8 = 0;\n     let x: u8 = foo.broken_add(\"hello darkness my old friend\".to_string());\n     println!(\"{}\", x);\n }"}, {"sha": "d4f3cdfd8b7e248eefedc4d3896d13a0101ff235", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -21,7 +21,7 @@ fn test2() -> (_, _) { (5, 5) }\n static TEST3: _ = \"test\";\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-static TEST4: _ = 145u16;\n+static TEST4: _ = 145;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n static TEST5: (_, _) = (1, 2);\n@@ -74,7 +74,7 @@ pub fn main() {\n     static FN_TEST3: _ = \"test\";\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-    static FN_TEST4: _ = 145u16;\n+    static FN_TEST4: _ = 145;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     static FN_TEST5: (_, _) = (1, 2);"}, {"sha": "564b1b4669f7d0235ea2ed45c1a124b6577485cc", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -23,28 +23,28 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n fn main() {\n     // By-ref cases\n     {\n-        let x = Box::new(0_usize);\n+        let x = Box::new(0);\n         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = Box::new(0_usize);\n+        let x = Box::new(0);\n         let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = Box::new(0_usize);\n+        let x = Box::new(0);\n         let f = to_fn_once(|| drop(x)); // OK -- FnOnce\n     }\n     // By-value cases\n     {\n-        let x = Box::new(0_usize);\n+        let x = Box::new(0);\n         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = Box::new(0_usize);\n+        let x = Box::new(0);\n         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = Box::new(0_usize);\n+        let x = Box::new(0);\n         let f = to_fn_once(move || drop(x)); // this one is ok\n     }\n }"}, {"sha": "5be2738b47eff1c1296ea1829755ded3fab1d51a", "filename": "src/test/compile-fail/unboxed-closure-immutable-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,7 +17,7 @@\n fn set(x: &mut usize) { *x = 0; }\n \n fn main() {\n-    let x = 0_usize;\n+    let x = 0;\n     move || x = 1; //~ ERROR cannot assign\n     move || set(&mut x); //~ ERROR cannot borrow\n     move || x = 1; //~ ERROR cannot assign"}, {"sha": "eee1b6ce30b5e7467aa53ef15c5700b248f71b08", "filename": "src/test/compile-fail/unboxed-closure-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -14,7 +14,7 @@\n // reference cannot escape the region of that variable.\n fn main() {\n     let _f = {\n-        let x = 0_usize;\n+        let x = 0;\n         || x //~ ERROR `x` does not live long enough\n     };\n }"}, {"sha": "372f3277931e1ff7eab1deaa6cce0605a78f6b29", "filename": "src/test/compile-fail/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -14,7 +14,7 @@\n // cause borrow conflicts.\n \n fn main() {\n-    let mut x = 0_usize;\n+    let mut x = 0;\n     let f = || x += 1;\n     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n }"}, {"sha": "35052ec0bd507b2334336590723c349eb6680fd5", "filename": "src/test/compile-fail/unboxed-closures-mutate-upvar.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutate-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutate-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutate-upvar.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -20,21 +20,21 @@ fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n \n fn a() {\n-    let n = 0u8;\n+    let n = 0;\n     let mut f = to_fn_mut(|| { //~ ERROR closure cannot assign\n         n += 1;\n     });\n }\n \n fn b() {\n-    let mut n = 0u8;\n+    let mut n = 0;\n     let mut f = to_fn_mut(|| {\n         n += 1; // OK\n     });\n }\n \n fn c() {\n-    let n = 0u8;\n+    let n = 0;\n     let mut f = to_fn_mut(move || {\n         // If we just did a straight-forward desugaring, this would\n         // compile, but we do something a bit more subtle, and hence\n@@ -44,21 +44,21 @@ fn c() {\n }\n \n fn d() {\n-    let mut n = 0u8;\n+    let mut n = 0;\n     let mut f = to_fn_mut(move || {\n         n += 1; // OK\n     });\n }\n \n fn e() {\n-    let n = 0u8;\n+    let n = 0;\n     let mut f = to_fn(move || {\n         n += 1; //~ ERROR cannot assign\n     });\n }\n \n fn f() {\n-    let mut n = 0u8;\n+    let mut n = 0;\n     let mut f = to_fn(move || {\n         n += 1; //~ ERROR cannot assign\n     });"}, {"sha": "432c7fa5d1b2025c9d8d2605e7bb31052ac80fd2", "filename": "src/test/compile-fail/unboxed-closures-mutated-upvar-from-fn-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,7 +16,7 @@ fn call<F>(f: F) where F : Fn() {\n }\n \n fn main() {\n-    let mut counter = 0_u32;\n+    let mut counter = 0;\n     call(|| {\n         counter += 1;\n         //~^ ERROR cannot assign to data in a captured outer variable in an `Fn` closure"}, {"sha": "bc93b86a391191229ae64e45f89aaf94eb469799", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,4 +15,4 @@\n \n enum foo { a(Box<foo>, isize), b(usize), }\n \n-fn main() { match foo::b(1_usize) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }\n+fn main() { match foo::b(1) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }"}, {"sha": "4ea7051775e132edf7e53eae6d1081adcfda8a40", "filename": "src/test/compile-fail/unsafe-fn-assign-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -10,7 +10,7 @@\n \n \n fn f(p: *const u8) {\n-    *p = 0u8; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    *p = 0; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n     return;\n }\n "}, {"sha": "e5473f12bf2d6f52ab97270a5399b410bd9c406a", "filename": "src/test/compile-fail/variance-issue-20533.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fvariance-issue-20533.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fvariance-issue-20533.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-issue-20533.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -33,19 +33,19 @@ struct AffineU32(u32);\n \n fn main() {\n     {\n-        let a = AffineU32(1_u32);\n+        let a = AffineU32(1);\n         let x = foo(&a);\n         drop(a); //~ ERROR cannot move out of `a`\n         drop(x);\n     }\n     {\n-        let a = AffineU32(1_u32);\n+        let a = AffineU32(1);\n         let x = bar(&a);\n         drop(a); //~ ERROR cannot move out of `a`\n         drop(x);\n     }\n     {\n-        let a = AffineU32(1_u32);\n+        let a = AffineU32(1);\n         let x = baz(&a);\n         drop(a); //~ ERROR cannot move out of `a`\n         drop(x);"}, {"sha": "654272f5bc6eba34b09220e9eff6adbd080ebcad", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -23,7 +23,7 @@ impl TraitB for isize {\n }\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n-    let y = 4_usize;\n+    let y = 4;\n     b.gimme_an_a(y) //~ ERROR the trait `TraitA` is not implemented\n }\n "}, {"sha": "63132d91327ca5f4bf74cbc87566239c2c1375e3", "filename": "src/test/debuginfo/associated-types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -139,13 +139,13 @@ fn assoc_enum<T: TraitWithAssocType>(arg: Enum<T>) {\n }\n \n fn main() {\n-    assoc_struct(Struct { b: -1i32, b1: 0i64 });\n-    assoc_local(1i32);\n-    assoc_arg::<i32>(2i64);\n-    assoc_return_value(3i32);\n-    assoc_tuple((4i32, 5i64));\n-    assoc_enum(Enum::Variant1(6i32, 7i64));\n-    assoc_enum(Enum::Variant2(8i64, 9i32));\n+    assoc_struct(Struct { b: -1, b1: 0 });\n+    assoc_local(1);\n+    assoc_arg::<i32>(2);\n+    assoc_return_value(3);\n+    assoc_tuple((4, 5));\n+    assoc_enum(Enum::Variant1(6, 7));\n+    assoc_enum(Enum::Variant2(8, 9));\n }\n \n fn zzz() { () }"}, {"sha": "25afd3514b0161bf160f169da040a08232491386", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -128,10 +128,10 @@ fn main() {\n         next: Val {\n             val: box UniqueNode {\n                 next: Empty,\n-                value: 1_u16,\n+                value: 1,\n             }\n         },\n-        value: 0_u16,\n+        value: 0,\n     };\n \n     let unique_unique: Box<UniqueNode<u32>> = box UniqueNode {"}, {"sha": "12c7b146342ffed60f82ab6ddfb25bdb645b419b", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -47,18 +47,18 @@ use std::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n \n fn main() {\n \n-    let vi8x16 = i8x16(0i8, 1i8, 2i8, 3i8, 4i8, 5i8, 6i8, 7i8,\n-                      8i8, 9i8, 10i8, 11i8, 12i8, 13i8, 14i8, 15i8);\n-\n-    let vi16x8 = i16x8(16i16, 17i16, 18i16, 19i16, 20i16, 21i16, 22i16, 23i16);\n-    let vi32x4 = i32x4(24i32, 25i32, 26i32, 27i32);\n-    let vi64x2 = i64x2(28i64, 29i64);\n-\n-    let vu8x16 = u8x16(30u8, 31u8, 32u8, 33u8, 34u8, 35u8, 36u8, 37u8,\n-                      38u8, 39u8, 40u8, 41u8, 42u8, 43u8, 44u8, 45u8);\n-    let vu16x8 = u16x8(46u16, 47u16, 48u16, 49u16, 50u16, 51u16, 52u16, 53u16);\n-    let vu32x4 = u32x4(54u32, 55u32, 56u32, 57u32);\n-    let vu64x2 = u64x2(58u64, 59u64);\n+    let vi8x16 = i8x16(0, 1, 2, 3, 4, 5, 6, 7,\n+                      8, 9, 10, 11, 12, 13, 14, 15);\n+\n+    let vi16x8 = i16x8(16, 17, 18, 19, 20, 21, 22, 23);\n+    let vi32x4 = i32x4(24, 25, 26, 27);\n+    let vi64x2 = i64x2(28, 29);\n+\n+    let vu8x16 = u8x16(30, 31, 32, 33, 34, 35, 36, 37,\n+                      38, 39, 40, 41, 42, 43, 44, 45);\n+    let vu16x8 = u16x8(46, 47, 48, 49, 50, 51, 52, 53);\n+    let vu32x4 = u32x4(54, 55, 56, 57);\n+    let vu64x2 = u64x2(58, 59);\n \n     let vf32x4 = f32x4(60.5f32, 61.5f32, 62.5f32, 63.5f32);\n     let vf64x2 = f64x2(64.5f64, 65.5f64);"}, {"sha": "7de51c1ea75cab90166e8fed825be1560fa38f65", "filename": "src/test/parse-fail/class-implements-bad-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fparse-fail%2Fclass-implements-bad-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fparse-fail%2Fclass-implements-bad-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fclass-implements-bad-trait.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,5 +15,5 @@ class cat : nonexistent {\n }\n \n fn main() {\n-  let nyan = cat(0us);\n+  let nyan = cat(0);\n }"}, {"sha": "9c35d77baf015398f60141bdc76be0adc9a4e506", "filename": "src/test/parse-fail/issue-5544-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fparse-fail%2Fissue-5544-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fparse-fail%2Fissue-5544-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-5544-b.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let __isize = 0xff_ffff_ffff_ffff_ffff__isize;\n+    let __isize = 0xff_ffff_ffff_ffff_ffff;\n     //~^ ERROR int literal is too large\n }"}, {"sha": "62b87e3f480adcf2eea6a3ad8d2f759a0407b86d", "filename": "src/test/parse-fail/lex-bad-numeric-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fparse-fail%2Flex-bad-numeric-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fparse-fail%2Flex-bad-numeric-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-numeric-literals.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     1e+; //~ ERROR: expected at least one digit in exponent\n     0x539.0; //~ ERROR: hexadecimal float literal is not supported\n     99999999999999999999999999999999; //~ ERROR: int literal is too large\n-    99999999999999999999999999999999u32; //~ ERROR: int literal is too large\n+    99999999999999999999999999999999; //~ ERROR: int literal is too large\n     0x; //~ ERROR: no valid digits\n     0xu32; //~ ERROR: no valid digits\n     0ou32; //~ ERROR: no valid digits"}, {"sha": "7a7113cd594b5629fed3cf550f3a80dfca258e77", "filename": "src/test/parse-fail/regions-trait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fparse-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fparse-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fregions-trait-2.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -26,7 +26,7 @@ impl<'a> get_ctxt for has_ctxt<'a> {\n }\n \n fn make_gc() -> @get_ctxt  {\n-    let ctxt = ctxt { v: 22us };\n+    let ctxt = ctxt { v: 22 };\n     let hc = has_ctxt { c: &ctxt };\n     return @hc as @get_ctxt;\n     //~^ ERROR source contains reference"}, {"sha": "6a9cbef1015424231d94b3a61ec1056e18ee6a93", "filename": "src/test/pretty/empty-lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fpretty%2Fempty-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fpretty%2Fempty-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fempty-lines.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,5 +13,5 @@\n \n fn a() -> uint {\n \n-    1usize\n+    1\n }"}, {"sha": "58cd19059c0d7ce63abea716c306fe555e48e323", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -26,12 +26,12 @@\n     const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n     let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n \n-    let _: [(); (1usize as usize)] = ([(() as ())] as [(); 1]);\n+    let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n \n     let _ =\n         (((&((([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])) as [i32; 3])\n               as &[i32; 3]) as *const _ as *const [i32; 3]) as\n-            *const [i32; (3usize as usize)] as *const [i32; 3]);\n+            *const [i32; (3 as usize)] as *const [i32; 3]);\n \n \n "}, {"sha": "90757c92c4c998fec6a3fb5f50909ccc84750c22", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -20,9 +20,9 @@ pub fn bar() {\n     const FOO: usize = 5 - 4;\n     let _: [(); FOO] = [()];\n \n-    let _ : [(); 1usize] = [()];\n+    let _ : [(); 1] = [()];\n \n-    let _ = &([1,2,3]) as *const _ as *const [i32; 3usize];\n+    let _ = &([1,2,3]) as *const _ as *const [i32; 3];\n \n     format!(\"test\");\n }"}, {"sha": "127700e963abd5a661680bb7175734bea154d7c1", "filename": "src/test/run-fail/extern-panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-panic.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -26,10 +26,10 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1_usize {\n+    if data == 1 {\n         data\n     } else {\n-        count(data - 1_usize) + count(data - 1_usize)\n+        count(data - 1) + count(data - 1)\n     }\n }\n \n@@ -41,9 +41,9 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for _ in 0..10_usize {\n+    for _ in 0..10 {\n         task::spawn(move|| {\n-            let result = count(5_usize);\n+            let result = count(5);\n             println!(\"result = %?\", result);\n             panic!();\n         });"}, {"sha": "e3af5b2bbf57bc5889728b2b3ac9caeb9f6361ef", "filename": "src/test/run-fail/if-check-panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-fail%2Fif-check-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-fail%2Fif-check-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-panic.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -10,9 +10,9 @@\n \n // error-pattern:Number is odd\n fn even(x: uint) -> bool {\n-    if x < 2_usize {\n+    if x < 2 {\n         return false;\n-    } else if x == 2_usize { return true; } else { return even(x - 2_usize); }\n+    } else if x == 2 { return true; } else { return even(x - 2); }\n }\n \n fn foo(x: uint) {\n@@ -23,4 +23,4 @@ fn foo(x: uint) {\n     }\n }\n \n-fn main() { foo(3_usize); }\n+fn main() { foo(3); }"}, {"sha": "21e84fb858bcfef907b6023f58fdf3c89e75f66e", "filename": "src/test/run-make/graphviz-flowgraph/f20.dot-expected.dot", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1,17 +1,17 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 2usize\"];\n-    N3[label=\"expr 0usize\"];\n-    N4[label=\"expr 20usize\"];\n-    N5[label=\"expr [2usize, 0usize, 20usize]\"];\n+    N2[label=\"expr 2\"];\n+    N3[label=\"expr 0\"];\n+    N4[label=\"expr 20\"];\n+    N5[label=\"expr [2, 0, 20]\"];\n     N6[label=\"local v\"];\n-    N7[label=\"stmt let v = [2usize, 0usize, 20usize];\"];\n+    N7[label=\"stmt let v = [2, 0, 20];\"];\n     N8[label=\"expr v\"];\n-    N9[label=\"expr 20usize\"];\n-    N10[label=\"expr v[20usize]\"];\n-    N11[label=\"stmt v[20usize];\"];\n-    N12[label=\"block { let v = [2usize, 0usize, 20usize]; v[20usize]; }\"];\n+    N9[label=\"expr 20\"];\n+    N10[label=\"expr v[20]\"];\n+    N11[label=\"stmt v[20];\"];\n+    N12[label=\"block { let v = [2, 0, 20]; v[20]; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "d7349932355b10c92a06c3a1d93af996a6b7e7cb", "filename": "src/test/run-make/graphviz-flowgraph/f20.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn expr_index_20() {\n-    let v = [2_usize, 0_usize, 20_usize];\n-    v[20_usize];\n+    let v = [2, 0, 20];\n+    v[20];\n }"}, {"sha": "2e2b8d2578eaf88384f98bb786cc93769aaf572a", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -39,17 +39,17 @@ static bob: Option<&'static [isize]> = None;\n // buglink test - see issue #1337.\n \n fn test_alias<I: Iterator>(i: Option<<I as Iterator>::Item>) {\n-    let s = sub_struct{ field2: 45u32, };\n+    let s = sub_struct{ field2: 45, };\n \n     // import tests\n     fn foo(x: &Float) {}\n     let _: Option<u8> = from_i32(45);\n \n-    let x = 42_usize;\n+    let x = 42;\n \n     myflate::deflate_bytes(&[]);\n \n-    let x = (3, 4_usize);\n+    let x = (3, 4);\n     let y = x.1;\n }\n "}, {"sha": "f81d4803f8fa491f686137f91f428b85dc5e507a", "filename": "src/test/run-make/symbols-are-reasonable/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,5 +16,5 @@ impl Foo for uint {}\n \n pub fn dummy() {\n     // force the vtable to be created\n-    let _x = &1_usize as &Foo;\n+    let _x = &1 as &Foo;\n }"}, {"sha": "a9b77419b9a37ad7a59ec5c54608b06ab4d5e87a", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -43,6 +43,8 @@ fn syntax_extension(cx: &ExtCtxt) {\n \n     let _m: Vec<syntax::ast::TokenTree> = quote_matcher!(cx, $($foo:tt,)* bar);\n     let _n: syntax::ast::Attribute = quote_attr!(cx, #![cfg(foo, bar = \"baz\")]);\n+\n+    let _o: Option<P<syntax::ast::Item>> = quote_item!(cx, fn foo<T: ?Sized>() {});\n }\n \n fn main() {"}, {"sha": "45dd213d71fefffee006e2e04bdf9b06176c2297", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,7 +17,7 @@ enum sty { ty_nil, }\n struct RawT {struct_: sty, cname: Option<String>, hash: uint}\n \n fn mk_raw_ty(st: sty, cname: Option<String>) -> RawT {\n-    return RawT {struct_: st, cname: cname, hash: 0_usize};\n+    return RawT {struct_: st, cname: cname, hash: 0};\n }\n \n pub fn main() { mk_raw_ty(sty::ty_nil, None::<String>); }"}, {"sha": "299225e3a47b97ea527dc0a1e2c0d1c8d01c0311", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -35,5 +35,5 @@ fn get(x: int) -> <int as SignedUnsigned>::Opposite {\n \n fn main() {\n     let x = get(22);\n-    assert_eq!(22_usize, x);\n+    assert_eq!(22, x);\n }"}, {"sha": "e7ab910bc95088e8427ba9d56adb204bac81c020", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -43,7 +43,7 @@ fn foo2<I: Foo>(x: I) -> <I as Foo>::A {\n \n pub fn main() {\n     let a = 42;\n-    assert!(foo2(a) == 42_usize);\n+    assert!(foo2(a) == 42);\n \n     let a = Bar;\n     assert!(foo2(a) == 43);"}, {"sha": "a63274beb0ebb32a6b2edd7887a535dca66d766d", "filename": "src/test/run-pass/associated-types-struct-field-named.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -36,8 +36,8 @@ impl UnifyKey for u32 {\n \n pub fn main() {\n     let node: Node<i32> = Node { key: 1, value: Some(22) };\n-    assert_eq!(foo(&node), Some(22_u32));\n+    assert_eq!(foo(&node), Some(22));\n \n     let node: Node<u32> = Node { key: 1, value: Some(22) };\n-    assert_eq!(foo(&node), Some(22_i32));\n+    assert_eq!(foo(&node), Some(22));\n }"}, {"sha": "3be2623185bcdadd43c2579933a51d9c17571065", "filename": "src/test/run-pass/associated-types-struct-field-numbered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -33,8 +33,8 @@ impl UnifyKey for u32 {\n \n pub fn main() {\n     let node: Node<i32> = Node(1, Some(22));\n-    assert_eq!(foo(&node), Some(22_u32));\n+    assert_eq!(foo(&node), Some(22));\n \n     let node: Node<u32> = Node(1, Some(22));\n-    assert_eq!(foo(&node), Some(22_i32));\n+    assert_eq!(foo(&node), Some(22));\n }"}, {"sha": "7e7299961d8a889659676ad6be2df1f30fd6c04a", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -41,5 +41,5 @@ impl<T: Foo> C for B<T> {\n }\n \n pub fn main() {\n-    let z: uint = bar(2, 4_usize);\n+    let z: uint = bar(2, 4);\n }"}, {"sha": "2b84adcb15ccbdaa111627fd12ff6bc304393776", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -131,19 +131,19 @@ enum Quark<T> {\n enum CLike { A, B, C }\n \n pub fn main() {\n-    let a = &Plus(@Minus(@Val(3_usize), @Val(10_usize)), @Plus(@Val(22_usize), @Val(5_usize)));\n+    let a = &Plus(@Minus(@Val(3), @Val(10)), @Plus(@Val(22), @Val(5)));\n     test_rbml(a);\n \n-    let a = &Spanned {lo: 0_usize, hi: 5_usize, node: 22_usize};\n+    let a = &Spanned {lo: 0, hi: 5, node: 22};\n     test_rbml(a);\n \n-    let a = &Point {x: 3_usize, y: 5_usize};\n+    let a = &Point {x: 3, y: 5};\n     test_rbml(a);\n \n-    let a = &Top(22_usize);\n+    let a = &Top(22);\n     test_rbml(a);\n \n-    let a = &Bottom(222_usize);\n+    let a = &Bottom(222);\n     test_rbml(a);\n \n     let a = &A;"}, {"sha": "6a90fa47e58ff84733d521ef50e7319535b37d78", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n+    fn double(self: Box<uint>) -> uint { *self * 2 }\n }\n \n pub fn main() {\n-    let x: Box<_> = box() (box 3_usize as Box<double>);\n-    assert_eq!(x.double(), 6_usize);\n+    let x: Box<_> = box() (box 3 as Box<double>);\n+    assert_eq!(x.double(), 6);\n }"}, {"sha": "cadce45b18d026041d76e45462e12f4ae6afb6bb", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -20,10 +20,10 @@ impl double for uint {\n }\n \n impl double for Box<uint> {\n-    fn double(self) -> uint { *self * 2_usize }\n+    fn double(self) -> uint { *self * 2 }\n }\n \n pub fn main() {\n-    let x: Box<_> = box 3_usize;\n-    assert_eq!(x.double(), 6_usize);\n+    let x: Box<_> = box 3;\n+    assert_eq!(x.double(), 6);\n }"}, {"sha": "746107803c90d0dc1dddede22ee9151509205a97", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for Box<uint> {\n-    fn double(self: Box<Box<uint>>) -> uint { **self * 2_usize }\n+    fn double(self: Box<Box<uint>>) -> uint { **self * 2 }\n }\n \n pub fn main() {\n-    let x: Box<Box<Box<Box<Box<_>>>>> = box box box box box 3_usize;\n-    assert_eq!(x.double(), 6_usize);\n+    let x: Box<Box<Box<Box<Box<_>>>>> = box box box box box 3;\n+    assert_eq!(x.double(), 6);\n }"}, {"sha": "51b5c98816a2c447c7157ea3ba89936cd35e6421", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n+    fn double(self: Box<uint>) -> uint { *self * 2 }\n }\n \n pub fn main() {\n-    let x: Box<Box<_>> = box box 3_usize;\n-    assert_eq!(x.double(), 6_usize);\n+    let x: Box<Box<_>> = box box 3;\n+    assert_eq!(x.double(), 6);\n }"}, {"sha": "61e704276af31c984084716b9ce0b4e9ee6184c3", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n+    fn double(self: Box<uint>) -> uint { *self * 2 }\n }\n \n pub fn main() {\n-    let x: Box<_> = box 3_usize;\n-    assert_eq!(x.double(), 6_usize);\n+    let x: Box<_> = box 3;\n+    assert_eq!(x.double(), 6);\n }"}, {"sha": "86d6a91e75b7613273ac58b6e982153efad7bb04", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -29,6 +29,6 @@ impl Foo for uint {\n }\n \n pub fn main() {\n-    let x: Box<_> = box 3_usize;\n+    let x: Box<_> = box 3;\n     assert_eq!(x.foo(), \"box 3\".to_string());\n }"}, {"sha": "01ac2fc20bffe1ebb3f918dad124e60f5cf98c4d", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn main() {\n-    assert_eq!(0xffffffffu32, (-1 as u32));\n-    assert_eq!(4294967295u32, (-1 as u32));\n-    assert_eq!(0xffffffffffffffffu64, (-1 as u64));\n-    assert_eq!(18446744073709551615u64, (-1 as u64));\n+    assert_eq!(0xffffffff, (-1 as u32));\n+    assert_eq!(4294967295, (-1 as u32));\n+    assert_eq!(0xffffffffffffffff, (-1 as u64));\n+    assert_eq!(18446744073709551615, (-1 as u64));\n \n-    assert_eq!(-2147483648i32 - 1i32, 2147483647i32);\n+    assert_eq!(-2147483648 - 1, 2147483647);\n }"}, {"sha": "8be6d1bd35ae81f48ac80690dac90d02472ccaa6", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,6 +13,6 @@ fn asBlock<F>(f: F) -> uint where F: FnOnce() -> uint {\n }\n \n pub fn main() {\n-   let x = asBlock(|| 22_usize);\n-   assert_eq!(x, 22_usize);\n+   let x = asBlock(|| 22);\n+   assert_eq!(x, 22);\n }"}, {"sha": "7cbe8104deb5d939176929e563cd773983149072", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,8 +11,8 @@\n fn iter_vec<T, F>(v: Vec<T> , mut f: F) where F: FnMut(&T) { for x in &v { f(x); } }\n \n pub fn main() {\n-    let v = vec![1i32, 2, 3, 4, 5, 6, 7];\n-    let mut odds = 0i32;\n+    let v = vec![1, 2, 3, 4, 5, 6, 7];\n+    let mut odds = 0;\n     iter_vec(v, |i| {\n         if *i % 2 == 1 {\n             odds += 1;"}, {"sha": "7701f6114ca6233a29b077919fd3c7b3247ae3ef", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,7 +11,7 @@\n fn iter_vec<T, F>(v: Vec<T>, mut f: F) where F: FnMut(&T) { for x in &v { f(x); } }\n \n pub fn main() {\n-    let v = vec![1i32, 2, 3, 4, 5];\n+    let v = vec![1, 2, 3, 4, 5];\n     let mut sum = 0;\n     iter_vec(v.clone(), |i| {\n         iter_vec(v.clone(), |j| {"}, {"sha": "75161d16bc064c5d3954f2a36d1519bdbba64755", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,7 +15,7 @@\n // the closures are in scope. Issue #6801.\n \n fn a() -> i32 {\n-    let mut x = 3i32;\n+    let mut x = 3;\n     x += 1;\n     let c1 = || x * 4;\n     let c2 = || x * 5;\n@@ -27,15 +27,15 @@ fn get(x: &i32) -> i32 {\n }\n \n fn b() -> i32 {\n-    let mut x = 3i32;\n+    let mut x = 3;\n     x += 1;\n     let c1 = || get(&x);\n     let c2 = || get(&x);\n     c1() * c2() * x\n }\n \n fn c() -> i32 {\n-    let mut x = 3i32;\n+    let mut x = 3;\n     x += 1;\n     let c1 = || x * 5;\n     let c2 = || get(&x);"}, {"sha": "d35600ef22efd5d327bda94cf5dbc1407cd05baa", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -26,7 +26,7 @@ fn add_int(x: &mut Ints, v: int) {\n \n fn iter_ints<F>(x: &Ints, mut f: F) -> bool where F: FnMut(&int) -> bool {\n     let l = x.values.len();\n-    (0_usize..l).all(|i| f(&x.values[i]))\n+    (0..l).all(|i| f(&x.values[i]))\n }\n \n pub fn main() {"}, {"sha": "19316590c262d6967bbd20f75b183fbdc56e8756", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,8 +17,8 @@ fn each<'a,T,F:FnMut(&'a T)>(x: &'a [T], mut f: F) {\n }\n \n fn main() {\n-    let mut sum = 0_usize;\n-    let elems = [ 1_usize, 2, 3, 4, 5 ];\n+    let mut sum = 0;\n+    let elems = [ 1, 2, 3, 4, 5 ];\n     each(&elems, |val: &uint| sum += *val);\n     assert_eq!(sum, 15);\n }"}, {"sha": "fc71e6c59fcafe6f197492cf9b478d5b6742fb6c", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -16,6 +16,6 @@ pub fn main() {\n     assert_eq!(u, 'Q' as u32);\n     assert_eq!(i as u8, 'Q' as u8);\n     assert_eq!(i as u8 as i8, 'Q' as u8 as i8);\n-    assert_eq!(0x51u8 as char, 'Q');\n+    assert_eq!(0x51 as char, 'Q');\n     assert_eq!(0 as u32, false as u32);\n }"}, {"sha": "cd8f783a2e523ab2756e1414791ed09c11fa0c4b", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,8 +17,8 @@ extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n \n pub fn main() {\n-    let p: Box<_> = box 22_usize;\n+    let p: Box<_> = box 22;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n-    assert_eq!(r, 22_usize);\n+    assert_eq!(r, 22);\n }"}, {"sha": "bda3b73e29c4927a3e7908253771e45732c40eb7", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     //let bt0 = sys::frame_address();\n     //println!(\"%?\", bt0);\n \n-    3_usize.to(10_usize, |i| {\n+    3.to(10, |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();"}, {"sha": "5b91af7a19431b2e364c48bf0e6bbc739aefdb18", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,10 +13,10 @@\n extern crate cci_iter_lib;\n \n pub fn main() {\n-    //let bt0 = sys::rusti::frame_address(1u32);\n+    //let bt0 = sys::rusti::frame_address(1);\n     //println!(\"%?\", bt0);\n     cci_iter_lib::iter(&[1, 2, 3], |i| {\n         println!(\"{}\", *i);\n-        //assert!(bt0 == sys::rusti::frame_address(2u32));\n+        //assert!(bt0 == sys::rusti::frame_address(2));\n     })\n }"}, {"sha": "cc76ed530c4b5e7fa491f5fba62cbcfed3a13ed3", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     // actually working.\n     //let bt0 = sys::frame_address();\n     //println!(\"%?\", bt0);\n-    iter(vec!(1_usize, 2_usize, 3_usize), |i| {\n+    iter(vec!(1, 2, 3), |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();"}, {"sha": "da51ad761c70a15db384c8ae3e606d94dffdd420", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -25,6 +25,6 @@ fn print_out(thing: Box<ToString>, expected: String) {\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0_usize, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "01513ab6f47e6deba3d6c837ded4361310cdf740", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -42,8 +42,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) {\n       println!(\"Meow\");\n-      self.meows += 1_usize;\n-      if self.meows % 5_usize == 0_usize {\n+      self.meows += 1;\n+      if self.meows % 5 == 0 {\n           self.how_hungry += 1;\n       }\n     }\n@@ -59,7 +59,7 @@ fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n \n \n pub fn main() {\n-    let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n+    let mut nyan = cat(0, 2, \"nyan\".to_string());\n     let mut nyan: &mut noisy = &mut nyan;\n     nyan.speak();\n }"}, {"sha": "c98e53c8a95a9c198bc6a008222d98979e7f3c58", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -21,7 +21,7 @@ impl Drop for cat {\n \n fn cat(done: extern fn(uint)) -> cat {\n     cat {\n-        meows: 0_usize,\n+        meows: 0,\n         done: done\n     }\n }"}, {"sha": "1cf4c35ee96e0fe860544e9c73985b0e02117bc2", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -27,7 +27,7 @@ mod kitty {\n     pub fn cat(in_name: String) -> cat {\n         cat {\n             name: in_name,\n-            meows: 0_usize\n+            meows: 0\n         }\n     }\n }"}, {"sha": "55acd2e040d9e51e8b1e60fd7b2010e40fa346d1", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,8 +13,8 @@ extern crate cci_class_2;\n use cci_class_2::kitties::cat;\n \n pub fn main() {\n-  let nyan : cat = cat(52_usize, 99);\n-  let kitty = cat(1000_usize, 2);\n+  let nyan : cat = cat(52, 99);\n+  let kitty = cat(1000, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();"}, {"sha": "34c309780b1bc12b4b903d0ba2f0c88ca6938c15", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,10 +13,10 @@ extern crate cci_class_3;\n use cci_class_3::kitties::cat;\n \n pub fn main() {\n-    let mut nyan : cat = cat(52_usize, 99);\n-    let kitty = cat(1000_usize, 2);\n+    let mut nyan : cat = cat(52, 99);\n+    let kitty = cat(1000, 2);\n     assert_eq!(nyan.how_hungry, 99);\n     assert_eq!(kitty.how_hungry, 2);\n     nyan.speak();\n-    assert_eq!(nyan.meow_count(), 53_usize);\n+    assert_eq!(nyan.meow_count(), 53);\n }"}, {"sha": "8fa76342286153a1cf78df51b9c26e1520a6f4d0", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,7 +15,7 @@ struct cat {\n }\n \n impl cat {\n-    pub fn speak(&mut self) { self.meows += 1_usize; }\n+    pub fn speak(&mut self) { self.meows += 1; }\n     pub fn meow_count(&mut self) -> uint { self.meows }\n }\n \n@@ -27,10 +27,10 @@ fn cat(in_x: uint, in_y: int) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan: cat = cat(52_usize, 99);\n-  let kitty = cat(1000_usize, 2);\n+  let mut nyan: cat = cat(52, 99);\n+  let kitty = cat(1000, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();\n-  assert_eq!(nyan.meow_count(), 53_usize);\n+  assert_eq!(nyan.meow_count(), 53);\n }"}, {"sha": "557f9986238c7432a5798487df7ad05dca7fb930", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -32,12 +32,12 @@ fn cat<U>(in_x : uint, in_y : int, in_info: Vec<U> ) -> cat<U> {\n }\n \n pub fn main() {\n-  let mut nyan : cat<int> = cat::<int>(52_usize, 99, vec!(9));\n-  let mut kitty = cat(1000_usize, 2, vec!(\"tabby\".to_string()));\n+  let mut nyan : cat<int> = cat::<int>(52, 99, vec!(9));\n+  let mut kitty = cat(1000, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak(vec!(1,2,3));\n-  assert_eq!(nyan.meow_count(), 55_usize);\n+  assert_eq!(nyan.meow_count(), 55);\n   kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n-  assert_eq!(kitty.meow_count(), 1004_usize);\n+  assert_eq!(kitty.meow_count(), 1004);\n }"}, {"sha": "2bdc053675fbef16b43064d36ffedaa9e1385b7f", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -39,8 +39,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1_usize;\n-        if self.meows % 5_usize == 0_usize {\n+        self.meows += 1;\n+        if self.meows % 5 == 0 {\n             self.how_hungry += 1;\n         }\n     }\n@@ -67,6 +67,6 @@ fn print_out(thing: Box<ToString>, expected: String) {\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0_usize, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "c50a8cc83a503ee8b8358180f17add7f82cdedb6", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,7 +17,7 @@ struct cat<U> {\n }\n \n impl<U> cat<U> {\n-    pub fn speak(&mut self) { self.meows += 1_usize; }\n+    pub fn speak(&mut self) { self.meows += 1; }\n     pub fn meow_count(&mut self) -> uint { self.meows }\n }\n \n@@ -31,6 +31,6 @@ fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n \n \n pub fn main() {\n-  let _nyan : cat<int> = cat::<int>(52_usize, 99);\n-  //  let mut kitty = cat(1000_usize, 2);\n+  let _nyan : cat<int> = cat::<int>(52, 99);\n+  //  let mut kitty = cat(1000, 2);\n }"}, {"sha": "0966045464878f364ed99be06d85e94dc5268d5c", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -13,8 +13,8 @@ extern crate cci_class;\n use cci_class::kitties::cat;\n \n pub fn main() {\n-  let nyan : cat = cat(52_usize, 99);\n-  let kitty = cat(1000_usize, 2);\n+  let nyan : cat = cat(52, 99);\n+  let kitty = cat(1000, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n }"}, {"sha": "502fa73ed93e53a58cacd7e8317271505d2375f1", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -26,8 +26,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan : cat = cat(52_usize, 99);\n-  let kitty = cat(1000_usize, 2);\n+  let mut nyan : cat = cat(52, 99);\n+  let kitty = cat(1000, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();"}, {"sha": "3cf529f2958bdfcaf4c52dc202db0d8490ff3b73", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -22,8 +22,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let nyan : cat = cat(52_usize, 99);\n-  let kitty = cat(1000_usize, 2);\n+  let nyan : cat = cat(52, 99);\n+  let kitty = cat(1000, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n }"}, {"sha": "32230c82a7253a9b604f8cfb3780620933ba1f02", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -18,7 +18,7 @@ fn bip(v: &[uint]) -> Vec<uint> {\n }\n \n pub fn main() {\n-    let mut the_vec = vec!(1_usize, 2, 3, 100);\n+    let mut the_vec = vec!(1, 2, 3, 100);\n     assert_eq!(the_vec.clone(), bar(&mut the_vec));\n     assert_eq!(the_vec.clone(), bip(&the_vec));\n }"}, {"sha": "2de881993f156f07f62b833319b25f5bb90eb79a", "filename": "src/test/run-pass/concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,12 +15,12 @@ pub fn main() {\n     assert_eq!(concat!(\"qux\", \"quux\",).to_string(), \"quxquux\".to_string());\n \n     assert_eq!(\n-        concat!(1, 2, 3_usize, 4f32, 4.0, 'a', true),\n+        concat!(1, 2, 3, 4f32, 4.0, 'a', true),\n         \"12344.0atrue\"\n     );\n \n     assert!(match \"12344.0atrue\" {\n-        concat!(1, 2, 3_usize, 4f32, 4.0, 'a', true) => true,\n+        concat!(1, 2, 3, 4f32, 4.0, 'a', true) => true,\n         _ => false\n     })\n }"}, {"sha": "bdde0cf02c95895b244084d70c0ca3112906ecd9", "filename": "src/test/run-pass/const-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -58,6 +58,6 @@ pub fn main() {\n     assert_eq!(BLOCK_FN(300), 300);\n     assert_eq!(BLOCK_ENUM_CONSTRUCTOR(200), Some(200));\n     // FIXME #13972\n-    // assert_eq!(BLOCK_UNSAFE_SAFE_PTR as *const isize as usize, 0xdeadbeef_us);\n-    // assert_eq!(BLOCK_UNSAFE_SAFE_PTR_2 as *const isize as usize, 0xdeadbeef_us);\n+    // assert_eq!(BLOCK_UNSAFE_SAFE_PTR as *const isize as usize, 0xdeadbeef);\n+    // assert_eq!(BLOCK_UNSAFE_SAFE_PTR_2 as *const isize as usize, 0xdeadbeef);\n }"}, {"sha": "9b0e7e4e75ebfa0700b202cec905dfb360297141", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n     foo(\"hi\".to_string());\n     foo(~[1, 2, 3]);\n     foo(F{field: 42});\n-    foo((1, 2_usize));\n+    foo((1, 2));\n     foo(@1);*/\n     foo(Box::new(1));\n }"}, {"sha": "0cb48670f23da3043e6659fcaaf09e0028fa5003", "filename": "src/test/run-pass/double-ref.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-ref.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,23 +9,23 @@\n // except according to those terms.\n \n fn check_expr() {\n-    let _:         & uint =     &1_usize;\n-    let _:       & & uint =    &&1_usize;\n-    let _:     & & & uint =   &&&1_usize;\n-    let _:     & & & uint =  & &&1_usize;\n-    let _:   & & & & uint =  &&&&1_usize;\n-    let _:   & & & & uint = & &&&1_usize;\n-    let _: & & & & & uint = &&&&&1_usize;\n+    let _:         & uint =     &1;\n+    let _:       & & uint =    &&1;\n+    let _:     & & & uint =   &&&1;\n+    let _:     & & & uint =  & &&1;\n+    let _:   & & & & uint =  &&&&1;\n+    let _:   & & & & uint = & &&&1;\n+    let _: & & & & & uint = &&&&&1;\n }\n \n fn check_ty() {\n-    let _:     &uint =         & 1_usize;\n-    let _:    &&uint =       & & 1_usize;\n-    let _:   &&&uint =     & & & 1_usize;\n-    let _:  & &&uint =     & & & 1_usize;\n-    let _:  &&&&uint =   & & & & 1_usize;\n-    let _: & &&&uint =   & & & & 1_usize;\n-    let _: &&&&&uint = & & & & & 1_usize;\n+    let _:     &uint =         & 1;\n+    let _:    &&uint =       & & 1;\n+    let _:   &&&uint =     & & & 1;\n+    let _:  & &&uint =     & & & 1;\n+    let _:  &&&&uint =   & & & & 1;\n+    let _: & &&&uint =   & & & & 1;\n+    let _: &&&&&uint = & & & & & 1;\n }\n \n fn check_pat() {"}, {"sha": "353bd7a9ce06222c06df4c7c83881f965eed7266", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -62,7 +62,7 @@ pub fn main() {\n \n     let (sender, receiver) = channel();\n     {\n-        let v = Foo::NestedVariant(box 42_usize, SendOnDrop { sender: sender.clone() }, sender);\n+        let v = Foo::NestedVariant(box 42, SendOnDrop { sender: sender.clone() }, sender);\n     }\n     assert_eq!(receiver.recv().unwrap(), Message::DestructorRan);\n     assert_eq!(receiver.recv().unwrap(), Message::Dropped);\n@@ -79,10 +79,10 @@ pub fn main() {\n     let (sender, receiver) = channel();\n     let t = {\n         thread::spawn(move|| {\n-            let mut v = Foo::NestedVariant(box 42usize, SendOnDrop {\n+            let mut v = Foo::NestedVariant(box 42, SendOnDrop {\n                 sender: sender.clone()\n             }, sender.clone());\n-            v = Foo::NestedVariant(box 42_usize,\n+            v = Foo::NestedVariant(box 42,\n                                    SendOnDrop { sender: sender.clone() },\n                                    sender.clone());\n             v = Foo::SimpleVariant(sender.clone());"}, {"sha": "2e86b3774c8dd64722fc5e493606aa5002056a9a", "filename": "src/test/run-pass/extern-pass-char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,6 +17,6 @@ extern {\n \n pub fn main() {\n     unsafe {\n-        assert_eq!(22_u8, rust_dbg_extern_identity_u8(22_u8));\n+        assert_eq!(22, rust_dbg_extern_identity_u8(22));\n     }\n }"}, {"sha": "2c01808440762e30b7038e4f10f3a2d60a2be4f5", "filename": "src/test/run-pass/extern-pass-u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,6 +17,6 @@ extern {\n \n pub fn main() {\n     unsafe {\n-        assert_eq!(22_u32, rust_dbg_extern_identity_u32(22_u32));\n+        assert_eq!(22, rust_dbg_extern_identity_u32(22));\n     }\n }"}, {"sha": "e72e87d3d93635ebc142082fbfd0fd16cbb60593", "filename": "src/test/run-pass/extern-pass-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,6 +17,6 @@ extern {\n \n pub fn main() {\n     unsafe {\n-        assert_eq!(22_u64, rust_dbg_extern_identity_u64(22_u64));\n+        assert_eq!(22, rust_dbg_extern_identity_u64(22));\n     }\n }"}, {"sha": "1c36ad73238c8f05f74b82b1e3eaaeb52bb8d8e7", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -32,5 +32,5 @@ fn strlen(str: String) -> uint {\n \n pub fn main() {\n     let len = strlen(\"Rust\".to_string());\n-    assert_eq!(len, 4_usize);\n+    assert_eq!(len, 4);\n }"}, {"sha": "cebfd89d8aae696295669b13aaaeb0380fd01a82", "filename": "src/test/run-pass/i32-sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi32-sub.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,4 +11,4 @@\n \n \n \n-pub fn main() { let mut x: i32 = -400_i32; x = 0_i32 - x; assert!((x == 400_i32)); }\n+pub fn main() { let mut x: i32 = -400; x = 0 - x; assert!((x == 400)); }"}, {"sha": "c91e738b822dcd58f32155e180a055991fe3e1ed", "filename": "src/test/run-pass/i8-incr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fi8-incr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fi8-incr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi8-incr.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -12,9 +12,9 @@\n \n \n pub fn main() {\n-    let mut x: i8 = -12i8;\n-    let y: i8 = -12i8;\n-    x = x + 1i8;\n-    x = x - 1i8;\n+    let mut x: i8 = -12;\n+    let y: i8 = -12;\n+    x = x + 1;\n+    x = x - 1;\n     assert_eq!(x, y);\n }"}, {"sha": "766cced4c2673ba11dffcff136480054cb129a8a", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn even(x: uint) -> bool {\n-    if x < 2_usize {\n+    if x < 2 {\n         return false;\n-    } else if x == 2_usize { return true; } else { return even(x - 2_usize); }\n+    } else if x == 2 { return true; } else { return even(x - 2); }\n }\n \n fn foo(x: uint) {\n@@ -22,4 +22,4 @@ fn foo(x: uint) {\n     }\n }\n \n-pub fn main() { foo(2_usize); }\n+pub fn main() { foo(2); }"}, {"sha": "d111462ed5a318510692c55a2f179e507fad0d16", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -27,17 +27,17 @@ mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 4_usize);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 4);\n         }\n     }\n \n     #[main]\n     #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8);\n         }\n     }\n }\n@@ -48,8 +48,8 @@ mod m {\n     #[cfg(target_arch = \"x86_64\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8);\n         }\n     }\n }\n@@ -60,17 +60,17 @@ mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8);\n         }\n     }\n \n     #[main]\n     #[cfg(target_arch = \"x86_64\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8);\n         }\n     }\n }\n@@ -81,8 +81,8 @@ mod m {\n     #[cfg(any(target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8);\n         }\n     }\n }"}, {"sha": "e5724c1e0dc16ce81e211089b6097bf5ae0a94e7", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -37,83 +37,83 @@ pub fn main() {\n     unsafe {\n         use rusti::*;\n \n-        assert_eq!(ctpop8(0u8), 0u8);\n-        assert_eq!(ctpop16(0u16), 0u16);\n-        assert_eq!(ctpop32(0u32), 0u32);\n-        assert_eq!(ctpop64(0u64), 0u64);\n-\n-        assert_eq!(ctpop8(1u8), 1u8);\n-        assert_eq!(ctpop16(1u16), 1u16);\n-        assert_eq!(ctpop32(1u32), 1u32);\n-        assert_eq!(ctpop64(1u64), 1u64);\n-\n-        assert_eq!(ctpop8(10u8), 2u8);\n-        assert_eq!(ctpop16(10u16), 2u16);\n-        assert_eq!(ctpop32(10u32), 2u32);\n-        assert_eq!(ctpop64(10u64), 2u64);\n-\n-        assert_eq!(ctpop8(100u8), 3u8);\n-        assert_eq!(ctpop16(100u16), 3u16);\n-        assert_eq!(ctpop32(100u32), 3u32);\n-        assert_eq!(ctpop64(100u64), 3u64);\n-\n-        assert_eq!(ctpop8(-1u8), 8u8);\n-        assert_eq!(ctpop16(-1u16), 16u16);\n-        assert_eq!(ctpop32(-1u32), 32u32);\n-        assert_eq!(ctpop64(-1u64), 64u64);\n-\n-        assert_eq!(ctlz8(0u8), 8u8);\n-        assert_eq!(ctlz16(0u16), 16u16);\n-        assert_eq!(ctlz32(0u32), 32u32);\n-        assert_eq!(ctlz64(0u64), 64u64);\n-\n-        assert_eq!(ctlz8(1u8), 7u8);\n-        assert_eq!(ctlz16(1u16), 15u16);\n-        assert_eq!(ctlz32(1u32), 31u32);\n-        assert_eq!(ctlz64(1u64), 63u64);\n-\n-        assert_eq!(ctlz8(10u8), 4u8);\n-        assert_eq!(ctlz16(10u16), 12u16);\n-        assert_eq!(ctlz32(10u32), 28u32);\n-        assert_eq!(ctlz64(10u64), 60u64);\n-\n-        assert_eq!(ctlz8(100u8), 1u8);\n-        assert_eq!(ctlz16(100u16), 9u16);\n-        assert_eq!(ctlz32(100u32), 25u32);\n-        assert_eq!(ctlz64(100u64), 57u64);\n-\n-        assert_eq!(cttz8(-1u8), 0u8);\n-        assert_eq!(cttz16(-1u16), 0u16);\n-        assert_eq!(cttz32(-1u32), 0u32);\n-        assert_eq!(cttz64(-1u64), 0u64);\n-\n-        assert_eq!(cttz8(0u8), 8u8);\n-        assert_eq!(cttz16(0u16), 16u16);\n-        assert_eq!(cttz32(0u32), 32u32);\n-        assert_eq!(cttz64(0u64), 64u64);\n-\n-        assert_eq!(cttz8(1u8), 0u8);\n-        assert_eq!(cttz16(1u16), 0u16);\n-        assert_eq!(cttz32(1u32), 0u32);\n-        assert_eq!(cttz64(1u64), 0u64);\n-\n-        assert_eq!(cttz8(10u8), 1u8);\n-        assert_eq!(cttz16(10u16), 1u16);\n-        assert_eq!(cttz32(10u32), 1u32);\n-        assert_eq!(cttz64(10u64), 1u64);\n-\n-        assert_eq!(cttz8(100u8), 2u8);\n-        assert_eq!(cttz16(100u16), 2u16);\n-        assert_eq!(cttz32(100u32), 2u32);\n-        assert_eq!(cttz64(100u64), 2u64);\n-\n-        assert_eq!(cttz8(-1u8), 0u8);\n-        assert_eq!(cttz16(-1u16), 0u16);\n-        assert_eq!(cttz32(-1u32), 0u32);\n-        assert_eq!(cttz64(-1u64), 0u64);\n-\n-        assert_eq!(bswap16(0x0A0Bu16), 0x0B0Au16);\n-        assert_eq!(bswap32(0x0ABBCC0Du32), 0x0DCCBB0Au32);\n-        assert_eq!(bswap64(0x0122334455667708u64), 0x0877665544332201u64);\n+        assert_eq!(ctpop8(0), 0);\n+        assert_eq!(ctpop16(0), 0);\n+        assert_eq!(ctpop32(0), 0);\n+        assert_eq!(ctpop64(0), 0);\n+\n+        assert_eq!(ctpop8(1), 1);\n+        assert_eq!(ctpop16(1), 1);\n+        assert_eq!(ctpop32(1), 1);\n+        assert_eq!(ctpop64(1), 1);\n+\n+        assert_eq!(ctpop8(10), 2);\n+        assert_eq!(ctpop16(10), 2);\n+        assert_eq!(ctpop32(10), 2);\n+        assert_eq!(ctpop64(10), 2);\n+\n+        assert_eq!(ctpop8(100), 3);\n+        assert_eq!(ctpop16(100), 3);\n+        assert_eq!(ctpop32(100), 3);\n+        assert_eq!(ctpop64(100), 3);\n+\n+        assert_eq!(ctpop8(-1), 8);\n+        assert_eq!(ctpop16(-1), 16);\n+        assert_eq!(ctpop32(-1), 32);\n+        assert_eq!(ctpop64(-1), 64);\n+\n+        assert_eq!(ctlz8(0), 8);\n+        assert_eq!(ctlz16(0), 16);\n+        assert_eq!(ctlz32(0), 32);\n+        assert_eq!(ctlz64(0), 64);\n+\n+        assert_eq!(ctlz8(1), 7);\n+        assert_eq!(ctlz16(1), 15);\n+        assert_eq!(ctlz32(1), 31);\n+        assert_eq!(ctlz64(1), 63);\n+\n+        assert_eq!(ctlz8(10), 4);\n+        assert_eq!(ctlz16(10), 12);\n+        assert_eq!(ctlz32(10), 28);\n+        assert_eq!(ctlz64(10), 60);\n+\n+        assert_eq!(ctlz8(100), 1);\n+        assert_eq!(ctlz16(100), 9);\n+        assert_eq!(ctlz32(100), 25);\n+        assert_eq!(ctlz64(100), 57);\n+\n+        assert_eq!(cttz8(-1), 0);\n+        assert_eq!(cttz16(-1), 0);\n+        assert_eq!(cttz32(-1), 0);\n+        assert_eq!(cttz64(-1), 0);\n+\n+        assert_eq!(cttz8(0), 8);\n+        assert_eq!(cttz16(0), 16);\n+        assert_eq!(cttz32(0), 32);\n+        assert_eq!(cttz64(0), 64);\n+\n+        assert_eq!(cttz8(1), 0);\n+        assert_eq!(cttz16(1), 0);\n+        assert_eq!(cttz32(1), 0);\n+        assert_eq!(cttz64(1), 0);\n+\n+        assert_eq!(cttz8(10), 1);\n+        assert_eq!(cttz16(10), 1);\n+        assert_eq!(cttz32(10), 1);\n+        assert_eq!(cttz64(10), 1);\n+\n+        assert_eq!(cttz8(100), 2);\n+        assert_eq!(cttz16(100), 2);\n+        assert_eq!(cttz32(100), 2);\n+        assert_eq!(cttz64(100), 2);\n+\n+        assert_eq!(cttz8(-1), 0);\n+        assert_eq!(cttz16(-1), 0);\n+        assert_eq!(cttz32(-1), 0);\n+        assert_eq!(cttz64(-1), 0);\n+\n+        assert_eq!(bswap16(0x0A0B), 0x0B0A);\n+        assert_eq!(bswap32(0x0ABBCC0D), 0x0DCCBB0A);\n+        assert_eq!(bswap64(0x0122334455667708), 0x0877665544332201);\n     }\n }"}, {"sha": "ab65f35dd34d86d6e9ddae3a545d618946d4ccb7", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -65,8 +65,8 @@ pub fn main() {\n         assert_approx_eq!(sqrtf32(64f32), 8f32);\n         assert_approx_eq!(sqrtf64(64f64), 8f64);\n \n-        assert_approx_eq!(powif32(25f32, -2i32), 0.0016f32);\n-        assert_approx_eq!(powif64(23.2f64, 2i32), 538.24f64);\n+        assert_approx_eq!(powif32(25f32, -2), 0.0016f32);\n+        assert_approx_eq!(powif64(23.2f64, 2), 538.24f64);\n \n         assert_approx_eq!(sinf32(0f32), 0f32);\n         assert_approx_eq!(sinf64(f64::consts::PI / 2f64), 1f64);"}, {"sha": "2ade0df7f6b68811ad371c9359237826bd0cdb1a", "filename": "src/test/run-pass/issue-1112.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-1112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-1112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1112.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -24,21 +24,21 @@ struct X<T> {\n pub fn main() {\n     let x: X<int> = X {\n         a: 12345678,\n-        b: 9u8,\n+        b: 9,\n         c: true,\n-        d: 10u8,\n-        e: 11u16,\n-        f: 12u8,\n-        g: 13u8\n+        d: 10,\n+        e: 11,\n+        f: 12,\n+        g: 13\n     };\n     bar(x);\n }\n \n fn bar<T>(x: X<T>) {\n-    assert_eq!(x.b, 9u8);\n+    assert_eq!(x.b, 9);\n     assert_eq!(x.c, true);\n-    assert_eq!(x.d, 10u8);\n-    assert_eq!(x.e, 11u16);\n-    assert_eq!(x.f, 12u8);\n-    assert_eq!(x.g, 13u8);\n+    assert_eq!(x.d, 10);\n+    assert_eq!(x.e, 11);\n+    assert_eq!(x.f, 12);\n+    assert_eq!(x.g, 13);\n }"}, {"sha": "b09d516dd35922957b512502966d922e82935d2c", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,7 +15,7 @@ use std::num::Float;\n \n fn main() {\n     // Generate sieve of Eratosthenes for n up to 1e6\n-    let n = 1000000_usize;\n+    let n = 1000000;\n     let mut sieve = BitVec::from_elem(n+1, true);\n     let limit: uint = (n as f32).sqrt() as uint;\n     for i in 2..limit+1 {"}, {"sha": "bb34dae77b344874fcf5123da8660bef9b22b61e", "filename": "src/test/run-pass/issue-11958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -19,6 +19,6 @@\n use std::thunk::Thunk;\n \n pub fn main() {\n-    let mut x = 1i32;\n+    let mut x = 1;\n     let _thunk = Thunk::new(move|| { x = 2; });\n }"}, {"sha": "11a2e52cf9767a7da97f3cbaaa194721389c25fe", "filename": "src/test/run-pass/issue-12909.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-12909.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-12909.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12909.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,7 +15,7 @@ fn copy<T: Copy>(&x: &T) -> T {\n }\n \n fn main() {\n-    let arr = [(1, 1_usize), (2, 2), (3, 3)];\n+    let arr = [(1, 1), (2, 2), (3, 3)];\n \n     let v1: Vec<&_> = arr.iter().collect();\n     let v2: Vec<_> = arr.iter().map(copy).collect();"}, {"sha": "3dc76f4a089d9a50114b79b3be8ebcc38ce3f58d", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -47,7 +47,7 @@ fn match_on_binding() {\n }\n \n fn match_on_upvar() {\n-    let mut foo: Option<Box<_>> = Some(box 8i32);\n+    let mut foo: Option<Box<_>> = Some(box 8);\n     let f = move|| {\n         match foo {\n             None => {},"}, {"sha": "227d8f7b8c82ab970409f07a228386646f1f0590", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,5 +11,5 @@\n use std::iter::AdditiveIterator;\n fn main() {\n     let x: [u64; 3] = [1, 2, 3];\n-    assert_eq!(6, (0_usize..3).map(|i| x[i]).sum());\n+    assert_eq!(6, (0..3).map(|i| x[i]).sum());\n }"}, {"sha": "18e4190ee459f6b24acccb8d36a18733a6ca28d8", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -53,12 +53,12 @@ impl<T, M: Index<(uint, uint), Output=T>> Index<uint> for Row<M> {\n }\n \n fn main() {\n-    let m = Mat::new(vec!(1_usize, 2, 3, 4, 5, 6), 3);\n+    let m = Mat::new(vec!(1, 2, 3, 4, 5, 6), 3);\n     let r = m.row(1);\n \n     assert!(r.index(&2) == &6);\n     assert!(r[2] == 6);\n-    assert!(r[2_usize] == 6_usize);\n+    assert!(r[2] == 6);\n     assert!(6 == r[2]);\n \n     let e = r[2];"}, {"sha": "dbfa91553e60cdc88446cd2ee399571e47e93b90", "filename": "src/test/run-pass/issue-17662.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-17662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-17662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17662.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -17,7 +17,7 @@ use std::marker;\n struct Bar<'a> { m: marker::PhantomData<&'a ()> }\n \n impl<'a> i::Foo<'a, uint> for Bar<'a> {\n-    fn foo(&self) -> uint { 5_usize }\n+    fn foo(&self) -> uint { 5 }\n }\n \n pub fn main() {"}, {"sha": "b92cfa1f29b52a026034c2b1391637a252b8ea6b", "filename": "src/test/run-pass/issue-18539.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-18539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-18539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18539.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -19,5 +19,5 @@ fn uint_to_foo(_: uint) -> Foo {\n \n #[allow(unused_must_use)]\n fn main() {\n-    (0_usize..10).map(uint_to_foo);\n+    (0..10).map(uint_to_foo);\n }"}, {"sha": "7e89cfe24e16aeaef2ed23204a2852845b9664ad", "filename": "src/test/run-pass/issue-20055-box-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-20055-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-20055-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20055-box-trait.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -41,10 +41,10 @@ pub fn foo(box_1: fn () -> Box<[i8; 1]>,\n }\n \n pub fn main() {\n-    fn box_1() -> Box<[i8; 1]> { Box::new( [1i8; 1] ) }\n-    fn box_2() -> Box<[i8; 2]> { Box::new( [1i8; 2] ) }\n-    fn box_3() -> Box<[i8; 3]> { Box::new( [1i8; 3] ) }\n-    fn box_4() -> Box<[i8; 4]> { Box::new( [1i8; 4] ) }\n+    fn box_1() -> Box<[i8; 1]> { Box::new( [1; 1] ) }\n+    fn box_2() -> Box<[i8; 2]> { Box::new( [1; 2] ) }\n+    fn box_3() -> Box<[i8; 3]> { Box::new( [1; 3] ) }\n+    fn box_4() -> Box<[i8; 4]> { Box::new( [1; 4] ) }\n \n     foo(box_1, box_2, box_3, box_4);\n }"}, {"sha": "5af5186e94f3748137dd8ebf8fe4bd90ba7afb74", "filename": "src/test/run-pass/issue-20055-box-unsized-array.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-20055-box-unsized-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-20055-box-unsized-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20055-box-unsized-array.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -29,10 +29,10 @@ pub fn foo(box_1: fn () -> Box<[i8; 1]>,\n }\n \n pub fn main() {\n-    fn box_1() -> Box<[i8; 1]> { Box::new( [1i8] ) }\n-    fn box_2() -> Box<[i8; 20]> { Box::new( [1i8; 20] ) }\n-    fn box_3() -> Box<[i8; 300]> { Box::new( [1i8; 300] ) }\n-    fn box_4() -> Box<[i8; 4000]> { Box::new( [1i8; 4000] ) }\n+    fn box_1() -> Box<[i8; 1]> { Box::new( [1] ) }\n+    fn box_2() -> Box<[i8; 20]> { Box::new( [1; 20] ) }\n+    fn box_3() -> Box<[i8; 300]> { Box::new( [1; 300] ) }\n+    fn box_4() -> Box<[i8; 4000]> { Box::new( [1; 4000] ) }\n \n     foo(box_1, box_2, box_3, box_4);\n }"}, {"sha": "640774f9d24ce70de9111b2b0c1a483ce15ca4ac", "filename": "src/test/run-pass/issue-20676.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-20676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-20676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20676.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -15,6 +15,6 @@\n use std::fmt;\n \n fn main() {\n-    let a: &fmt::Debug = &1_i32;\n+    let a: &fmt::Debug = &1;\n     format!(\"{:?}\", a);\n }"}, {"sha": "29701bd668aafc977b772460662a741bbfb65778", "filename": "src/test/run-pass/issue-21475.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-21475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-21475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21475.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -11,10 +11,10 @@\n use m::{START, END};\n \n fn main() {\n-    match 42u32 {\n+    match 42 {\n         m::START...m::END => {},\n-        0u32...m::END => {},\n-        m::START...59u32 => {},\n+        0...m::END => {},\n+        m::START...59 => {},\n         _  => {},\n     }\n }"}, {"sha": "3da0a67ea8ef0a7ec5e589a297c5842a235cdf5e", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -72,17 +72,17 @@ fn range(lo: uint, hi: uint, it: |uint|) {\n     let mut i = lo;\n     while i < hi {\n         it(i);\n-        i += 1_usize;\n+        i += 1;\n     }\n }\n \n pub fn main() {\n-    let range: 'static ||uint|| = |a| range(0_usize, 1000_usize, a);\n+    let range: 'static ||uint|| = |a| range(0, 1000, a);\n     let filt: 'static ||v: uint|| = |a| filter(\n         range,\n-        |&&n: uint| n % 3_usize != 0_usize && n % 5_usize != 0_usize,\n+        |&&n: uint| n % 3 != 0 && n % 5 != 0,\n         a);\n-    let sum = foldl(filt, 0_usize, |accum, &&n: uint| accum + n );\n+    let sum = foldl(filt, 0, |accum, &&n: uint| accum + n );\n \n     println!(\"{}\", sum);\n }"}, {"sha": "7bc6393ef8915b679dc0793af22d460463cfb40b", "filename": "src/test/run-pass/issue-22036.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-22036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-22036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22036.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -28,6 +28,6 @@ impl<I> DigitCollection for I where I: Iterator<Item=u8> {\n }\n \n fn main() {\n-    let xs = vec![1u8, 2, 3, 4, 5];\n+    let xs = vec![1, 2, 3, 4, 5];\n     assert_eq!(xs.into_iter().digit_sum(), 15);\n }"}, {"sha": "c55de959a9464aee56073d392bf016de074f4a5d", "filename": "src/test/run-pass/issue-2550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2550.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -22,5 +22,5 @@ fn f<T>(_x: T) {\n }\n \n pub fn main() {\n-    f(C(1_usize));\n+    f(C(1));\n }"}, {"sha": "8b6eb12f102ee24c5b7c7cc220e55ffcf926cdef", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -21,11 +21,11 @@ impl methods for () {\n // the position of this function is significant! - if it comes before methods\n // then it works, if it comes after it then it doesn't!\n fn to_bools(bitv: Storage) -> Vec<bool> {\n-    (0_usize..8).map(|i| {\n+    (0..8).map(|i| {\n         let w = i / 64;\n         let b = i % 64;\n-        let x = 1u64 & (bitv.storage[w] >> b);\n-        x == 1u64\n+        let x = 1 & (bitv.storage[w] >> b);\n+        x == 1\n     }).collect()\n }\n \n@@ -35,7 +35,7 @@ pub fn main() {\n     let bools = vec!(false, false, true, false, false, true, true, false);\n     let bools2 = to_bools(Storage{storage: vec!(0b01100100)});\n \n-    for i in 0_usize..8 {\n+    for i in 0..8 {\n         println!(\"{} => {} vs {}\", i, bools[i], bools2[i]);\n     }\n "}, {"sha": "b51edcf8bec4d60adad737e151b5e1d6efcc1c73", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0746ff19b3bc204215f04bbb5756159f9bc5c92/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=b0746ff19b3bc204215f04bbb5756159f9bc5c92", "patch": "@@ -28,7 +28,7 @@ fn foo(name: String, samples_chan: Sender<Msg>) {\n \n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let callback: SamplesFn = Box::new(move |buffer| {\n-            for i in 0_usize..buffer.len() {\n+            for i in 0..buffer.len() {\n                 println!(\"{}: {}\", i, buffer[i])\n             }\n         });"}]}