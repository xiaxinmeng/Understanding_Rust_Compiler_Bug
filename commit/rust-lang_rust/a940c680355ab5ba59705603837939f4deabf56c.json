{"sha": "a940c680355ab5ba59705603837939f4deabf56c", "node_id": "C_kwDOAAsO6NoAKGE5NDBjNjgwMzU1YWI1YmE1OTcwNTYwMzgzNzkzOWY0ZGVhYmY1NmM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-30T08:29:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-30T08:29:09Z"}, "message": "Rollup merge of #91323 - RalfJung:assert-type, r=oli-obk\n\nCTFE: support assert_zero_valid and assert_uninit_valid\n\nThis ensures the implementation of all three type-based assert_ intrinsics remains consistent in Miri.\n\n`assert_inhabited` recently got stabilized in https://github.com/rust-lang/rust/pull/90896 (meaning stable `const fn` can call it), so do the same with these other intrinsics.\n\nCc ```@rust-lang/wg-const-eval```", "tree": {"sha": "4e9f72b0e7ac77f647d4494920d4b4fa6f6c9e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e9f72b0e7ac77f647d4494920d4b4fa6f6c9e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a940c680355ab5ba59705603837939f4deabf56c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhpeDVCRBK7hj4Ov3rIwAAflwIACK+vdrKYeWVCLm+owVHZRva\n0batODyxk/2ghjf8vB1zjQdcFKnqr+x7pXZyygM5pUsmes2p44wFhAlOTnKWXjft\no/e/Zmx0ZE5ok+WUVyvmD8VPxIR7tR0nQaNQcGmZrQQw5XJL5tDyhetN/ewlG3B6\n/cB3wTs0rslekO0niTg5PsuGnpnXWO7UaYAlqOjAfmEETSE/KJWJAxumwJk/8XwK\nVP8SrfQyhTwyULlA+/7UVKjcGwD8pGm89M13QGH+B6qWG/iuiiR3MeMqvgOM4IwH\ndyzTH3Y9wI4qbObZL0w/FNlwjMUVgYBOmJB1WDAbaIOIdCoCkyvnz3Y95Mwm4hM=\n=2hmZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e9f72b0e7ac77f647d4494920d4b4fa6f6c9e5e\nparent ae1badb0474f593a4b8b21f21736b24fb85c9d6f\nparent 6c3c3e0952b63cfae51392863e94d79c2d76deb9\nauthor Yuki Okushi <jtitor@2k36.org> 1638260949 +0900\ncommitter GitHub <noreply@github.com> 1638260949 +0900\n\nRollup merge of #91323 - RalfJung:assert-type, r=oli-obk\n\nCTFE: support assert_zero_valid and assert_uninit_valid\n\nThis ensures the implementation of all three type-based assert_ intrinsics remains consistent in Miri.\n\n`assert_inhabited` recently got stabilized in https://github.com/rust-lang/rust/pull/90896 (meaning stable `const fn` can call it), so do the same with these other intrinsics.\n\nCc ```@rust-lang/wg-const-eval```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a940c680355ab5ba59705603837939f4deabf56c", "html_url": "https://github.com/rust-lang/rust/commit/a940c680355ab5ba59705603837939f4deabf56c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a940c680355ab5ba59705603837939f4deabf56c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae1badb0474f593a4b8b21f21736b24fb85c9d6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1badb0474f593a4b8b21f21736b24fb85c9d6f", "html_url": "https://github.com/rust-lang/rust/commit/ae1badb0474f593a4b8b21f21736b24fb85c9d6f"}, {"sha": "6c3c3e0952b63cfae51392863e94d79c2d76deb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3c3e0952b63cfae51392863e94d79c2d76deb9", "html_url": "https://github.com/rust-lang/rust/commit/6c3c3e0952b63cfae51392863e94d79c2d76deb9"}], "stats": {"total": 117, "additions": 88, "deletions": 29}, "files": [{"sha": "025d2998b00525e4ee1a1e99ea8143ee365393d7", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a940c680355ab5ba59705603837939f4deabf56c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a940c680355ab5ba59705603837939f4deabf56c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=a940c680355ab5ba59705603837939f4deabf56c", "patch": "@@ -394,10 +394,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::transmute => {\n                 self.copy_op_transmute(&args[0], dest)?;\n             }\n-            sym::assert_inhabited => {\n+            sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n                 let ty = instance.substs.type_at(0);\n                 let layout = self.layout_of(ty)?;\n \n+                // For *all* intrinsics we first check `is_uninhabited` to give a more specific\n+                // error message.\n                 if layout.abi.is_uninhabited() {\n                     // The run-time intrinsic panics just to get a good backtrace; here we abort\n                     // since there is no problem showing a backtrace even for aborts.\n@@ -409,6 +411,28 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         ),\n                     )?;\n                 }\n+                if intrinsic_name == sym::assert_zero_valid\n+                    && !layout.might_permit_raw_init(self, /*zero:*/ true)\n+                {\n+                    M::abort(\n+                        self,\n+                        format!(\n+                            \"aborted execution: attempted to zero-initialize type `{}`, which is invalid\",\n+                            ty\n+                        ),\n+                    )?;\n+                }\n+                if intrinsic_name == sym::assert_uninit_valid\n+                    && !layout.might_permit_raw_init(self, /*zero:*/ false)\n+                {\n+                    M::abort(\n+                        self,\n+                        format!(\n+                            \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n+                            ty\n+                        ),\n+                    )?;\n+                }\n             }\n             sym::simd_insert => {\n                 let index = u64::from(self.read_scalar(&args[1])?.to_u32()?);"}, {"sha": "edbc250eb0d0c2a243da0244046d1cfad5c82c48", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a940c680355ab5ba59705603837939f4deabf56c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a940c680355ab5ba59705603837939f4deabf56c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=a940c680355ab5ba59705603837939f4deabf56c", "patch": "@@ -860,12 +860,14 @@ extern \"rust-intrinsic\" {\n     /// zero-initialization: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n     pub fn assert_zero_valid<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n     /// bit patterns: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n     pub fn assert_uninit_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called."}, {"sha": "31ff6aed03b2fd733b682adf59747d3fb12eb076", "filename": "src/test/ui/consts/assert-type-intrinsics.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a940c680355ab5ba59705603837939f4deabf56c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a940c680355ab5ba59705603837939f4deabf56c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs?ref=a940c680355ab5ba59705603837939f4deabf56c", "patch": "@@ -0,0 +1,22 @@\n+// error-pattern: any use of this value will cause an error\n+\n+#![feature(never_type)]\n+#![feature(const_maybe_uninit_assume_init, const_assert_type2)]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics;\n+\n+#[allow(invalid_value)]\n+fn main() {\n+    use std::mem::MaybeUninit;\n+\n+    const _BAD1: () = unsafe {\n+        MaybeUninit::<!>::uninit().assume_init();\n+    };\n+    const _BAD2: () = unsafe {\n+        intrinsics::assert_uninit_valid::<bool>();\n+    };\n+    const _BAD3: () = unsafe {\n+        intrinsics::assert_zero_valid::<&'static i32>();\n+    };\n+}"}, {"sha": "bb57ee82cc16f973dfb448490a2992d87cafbad5", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a940c680355ab5ba59705603837939f4deabf56c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a940c680355ab5ba59705603837939f4deabf56c/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=a940c680355ab5ba59705603837939f4deabf56c", "patch": "@@ -0,0 +1,39 @@\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:14:9\n+   |\n+LL | /     const _BAD1: () = unsafe {\n+LL | |         MaybeUninit::<!>::uninit().assume_init();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:17:9\n+   |\n+LL | /     const _BAD2: () = unsafe {\n+LL | |         intrinsics::assert_uninit_valid::<bool>();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n+LL | |     };\n+   | |______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/assert-type-intrinsics.rs:20:9\n+   |\n+LL | /     const _BAD3: () = unsafe {\n+LL | |         intrinsics::assert_zero_valid::<&'static i32>();\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n+LL | |     };\n+   | |______-\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "77370e1ccc59e2e74d8d27ed7b6a59765264b4d1", "filename": "src/test/ui/consts/assume-type-intrinsics.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae1badb0474f593a4b8b21f21736b24fb85c9d6f/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1badb0474f593a4b8b21f21736b24fb85c9d6f/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.rs?ref=ae1badb0474f593a4b8b21f21736b24fb85c9d6f", "patch": "@@ -1,13 +0,0 @@\n-// error-pattern: any use of this value will cause an error\n-\n-#![feature(never_type)]\n-#![feature(const_maybe_uninit_assume_init)]\n-\n-#[allow(invalid_value)]\n-fn main() {\n-    use std::mem::MaybeUninit;\n-\n-    const _BAD: () = unsafe {\n-        MaybeUninit::<!>::uninit().assume_init();\n-    };\n-}"}, {"sha": "e660730396fa1c97e8e0ca197a9a04f13585ad34", "filename": "src/test/ui/consts/assume-type-intrinsics.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae1badb0474f593a4b8b21f21736b24fb85c9d6f/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae1badb0474f593a4b8b21f21736b24fb85c9d6f/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassume-type-intrinsics.stderr?ref=ae1badb0474f593a4b8b21f21736b24fb85c9d6f", "patch": "@@ -1,15 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/assume-type-intrinsics.rs:11:9\n-   |\n-LL | /     const _BAD: () = unsafe {\n-LL | |         MaybeUninit::<!>::uninit().assume_init();\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n-LL | |     };\n-   | |______-\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to previous error\n-"}]}