{"sha": "60ad63640f61c457e94fefa72f0ece65c6a6edd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWQ2MzY0MGY2MWM0NTdlOTRmZWZhNzJmMGVjZTY1YzZhNmVkZDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-02T16:31:54Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-05T14:54:49Z"}, "message": "Add an error when declaring features that are stable in the current Rust edition", "tree": {"sha": "c38007268ecbc3ff83d0fa264d3986488a815a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38007268ecbc3ff83d0fa264d3986488a815a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ad63640f61c457e94fefa72f0ece65c6a6edd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ad63640f61c457e94fefa72f0ece65c6a6edd5", "html_url": "https://github.com/rust-lang/rust/commit/60ad63640f61c457e94fefa72f0ece65c6a6edd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ad63640f61c457e94fefa72f0ece65c6a6edd5/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19832105e60195d82326a2468956f4d6a79f460", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19832105e60195d82326a2468956f4d6a79f460", "html_url": "https://github.com/rust-lang/rust/commit/d19832105e60195d82326a2468956f4d6a79f460"}], "stats": {"total": 101, "additions": 79, "deletions": 22}, "files": [{"sha": "bfbe9ef1fee46256ad562a30d28e972f7ef56102", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60ad63640f61c457e94fefa72f0ece65c6a6edd5/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ad63640f61c457e94fefa72f0ece65c6a6edd5/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=60ad63640f61c457e94fefa72f0ece65c6a6edd5", "patch": "@@ -374,6 +374,20 @@ and likely to change in the future.\n \n \"##,\n \n+E0705: r##\"\n+A `#![feature]` attribute was declared for a feature that is stable in\n+the current edition.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0705\n+#![allow(rust_2018_preview)]\n+#![feature(raw_identifiers)] // error: the feature `raw_identifiers` is\n+                             // included in the Rust 2018 edition\n+```\n+\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "0014fd5ae48b304db39f6d3502102746d469ec04", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/60ad63640f61c457e94fefa72f0ece65c6a6edd5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ad63640f61c457e94fefa72f0ece65c6a6edd5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=60ad63640f61c457e94fefa72f0ece65c6a6edd5", "patch": "@@ -25,6 +25,7 @@\n use self::AttributeType::*;\n use self::AttributeGate::*;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n@@ -1900,10 +1901,13 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n \n     let mut feature_checker = FeatureChecker::default();\n \n-    for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+    let mut edition_enabled_features = FxHashMap();\n+\n+    for &(name, .., f_edition, set) in ACTIVE_FEATURES.iter() {\n         if let Some(f_edition) = f_edition {\n             if f_edition <= crate_edition {\n                 set(&mut features, DUMMY_SP);\n+                edition_enabled_features.insert(Symbol::intern(name), crate_edition);\n             }\n         }\n     }\n@@ -1931,10 +1935,40 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 continue\n             };\n \n+            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n+                if *edition <= crate_edition {\n+                    continue\n+                }\n+\n+                for &(name, .., f_edition, set) in ACTIVE_FEATURES.iter() {\n+                    if let Some(f_edition) = f_edition {\n+                        if f_edition <= *edition {\n+                            // FIXME(Manishearth) there is currently no way to set\n+                            // lib features by edition\n+                            set(&mut features, DUMMY_SP);\n+                            edition_enabled_features.insert(Symbol::intern(name), *edition);\n+                        }\n+                    }\n+                }\n+\n+                continue\n+            }\n+\n             if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n-                set(&mut features, mi.span);\n-                feature_checker.collect(&features, mi.span);\n-                features.declared_lang_features.push((name, mi.span, None));\n+                if let Some(edition) = edition_enabled_features.get(&name) {\n+                    struct_span_err!(\n+                        span_handler,\n+                        mi.span,\n+                        E0705,\n+                        \"the feature `{}` is included in the Rust {} edition\",\n+                        name,\n+                        edition,\n+                    ).emit();\n+                } else {\n+                    set(&mut features, mi.span);\n+                    feature_checker.collect(&features, mi.span);\n+                    features.declared_lang_features.push((name, mi.span, None));\n+                }\n                 continue\n             }\n \n@@ -1951,24 +1985,6 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 continue\n             }\n \n-            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n-                if *edition <= crate_edition {\n-                    continue\n-                }\n-\n-                for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n-                    if let Some(f_edition) = f_edition {\n-                        if *edition >= f_edition {\n-                            // FIXME(Manishearth) there is currently no way to set\n-                            // lib features by edition\n-                            set(&mut features, DUMMY_SP);\n-                        }\n-                    }\n-                }\n-\n-                continue\n-            }\n-\n             features.declared_lib_features.push((name, mi.span));\n         }\n     }"}, {"sha": "743c108bb685497e18d08ed062037c8c0e1cdd85", "filename": "src/test/ui/E0705.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/60ad63640f61c457e94fefa72f0ece65c6a6edd5/src%2Ftest%2Fui%2FE0705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ad63640f61c457e94fefa72f0ece65c6a6edd5/src%2Ftest%2Fui%2FE0705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0705.rs?ref=60ad63640f61c457e94fefa72f0ece65c6a6edd5", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rust_2018_preview)]\n+#![feature(raw_identifiers)]\n+//~^ ERROR the feature `raw_identifiers` is included in the Rust 2018 edition\n+\n+fn main() {\n+    let foo = 0;\n+    let bar = r#foo;\n+}"}, {"sha": "cab443a21372586d711f33cca59929c035ef0050", "filename": "src/test/ui/E0705.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60ad63640f61c457e94fefa72f0ece65c6a6edd5/src%2Ftest%2Fui%2FE0705.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60ad63640f61c457e94fefa72f0ece65c6a6edd5/src%2Ftest%2Fui%2FE0705.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0705.stderr?ref=60ad63640f61c457e94fefa72f0ece65c6a6edd5", "patch": "@@ -0,0 +1,9 @@\n+error[E0705]: the feature `raw_identifiers` is included in the Rust 2018 edition\n+  --> $DIR/E0705.rs:12:12\n+   |\n+LL | #![feature(raw_identifiers)]\n+   |            ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0705`."}]}