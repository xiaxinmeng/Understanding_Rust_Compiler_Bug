{"sha": "3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MzdjNTM3YzNiYjFhYTk2ZGRmZDkzNGZkNGM0ODgzOTI0OWY1ZWI=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-01T20:22:48Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-01T20:51:26Z"}, "message": "collections: Implement Ord for DList, RingBuf, TreeMap, TreeSet", "tree": {"sha": "162a0fe0aa2357ac83d6c25bcd29bdabae70c59d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162a0fe0aa2357ac83d6c25bcd29bdabae70c59d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "html_url": "https://github.com/rust-lang/rust/commit/3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3737c537c3bb1aa96ddfd934fd4c48839249f5eb/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25acfde39864304c902293328f3492871ad0cbc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/25acfde39864304c902293328f3492871ad0cbc8", "html_url": "https://github.com/rust-lang/rust/commit/25acfde39864304c902293328f3492871ad0cbc8"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "3d322729aab43c415250dd5f459436d35b6be8b0", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3737c537c3bb1aa96ddfd934fd4c48839249f5eb/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3737c537c3bb1aa96ddfd934fd4c48839249f5eb/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "patch": "@@ -691,6 +691,13 @@ impl<A: PartialOrd> PartialOrd for DList<A> {\n     }\n }\n \n+impl<A: Ord> Ord for DList<A> {\n+    #[inline]\n+    fn cmp(&self, other: &DList<A>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<A: Clone> Clone for DList<A> {\n     fn clone(&self) -> DList<A> {\n         self.iter().map(|x| x.clone()).collect()"}, {"sha": "0cde7a90e9c89a546ae38bbe12d0902be2e5bb44", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3737c537c3bb1aa96ddfd934fd4c48839249f5eb/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3737c537c3bb1aa96ddfd934fd4c48839249f5eb/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "patch": "@@ -460,6 +460,13 @@ impl<A: PartialOrd> PartialOrd for RingBuf<A> {\n     }\n }\n \n+impl<A: Ord> Ord for RingBuf<A> {\n+    #[inline]\n+    fn cmp(&self, other: &RingBuf<A>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<S: Writer, A: Hash<S>> Hash<S> for RingBuf<A> {\n     fn hash(&self, state: &mut S) {\n         self.len().hash(state);"}, {"sha": "afb838333f3518e12621f70bbbb170e140c6491b", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3737c537c3bb1aa96ddfd934fd4c48839249f5eb/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3737c537c3bb1aa96ddfd934fd4c48839249f5eb/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=3737c537c3bb1aa96ddfd934fd4c48839249f5eb", "patch": "@@ -182,6 +182,13 @@ impl<K: Ord, V: PartialOrd> PartialOrd for TreeMap<K, V> {\n     }\n }\n \n+impl<K: Ord, V: Ord> Ord for TreeMap<K, V> {\n+    #[inline]\n+    fn cmp(&self, other: &TreeMap<K, V>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<K: Ord + Show, V: Show> Show for TreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n@@ -1021,6 +1028,13 @@ impl<T: Ord> PartialOrd for TreeSet<T> {\n     }\n }\n \n+impl<T: Ord> Ord for TreeSet<T> {\n+    #[inline]\n+    fn cmp(&self, other: &TreeSet<T>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<T: Ord + Show> Show for TreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));"}]}