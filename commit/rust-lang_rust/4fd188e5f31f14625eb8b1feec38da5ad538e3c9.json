{"sha": "4fd188e5f31f14625eb8b1feec38da5ad538e3c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZDE4OGU1ZjMxZjE0NjI1ZWI4YjFmZWVjMzhkYTVhZDUzOGUzYzk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-20T22:41:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-06T14:23:31Z"}, "message": "Print query stack on ICEs", "tree": {"sha": "c626d62df27e4b9f516645978947f4ece44c1c1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c626d62df27e4b9f516645978947f4ece44c1c1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fd188e5f31f14625eb8b1feec38da5ad538e3c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd188e5f31f14625eb8b1feec38da5ad538e3c9", "html_url": "https://github.com/rust-lang/rust/commit/4fd188e5f31f14625eb8b1feec38da5ad538e3c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fd188e5f31f14625eb8b1feec38da5ad538e3c9/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a143462783cec88b7b733e8aa09990bfeb59f754", "url": "https://api.github.com/repos/rust-lang/rust/commits/a143462783cec88b7b733e8aa09990bfeb59f754", "html_url": "https://github.com/rust-lang/rust/commit/a143462783cec88b7b733e8aa09990bfeb59f754"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "1493c7e8310ed11a38b60651d5b12b85c4bb214f", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4fd188e5f31f14625eb8b1feec38da5ad538e3c9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd188e5f31f14625eb8b1feec38da5ad538e3c9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=4fd188e5f31f14625eb8b1feec38da5ad538e3c9", "patch": "@@ -14,6 +14,8 @@\n \n use dep_graph::{DepNodeIndex, DepNode, DepKind, DepNodeColor};\n use errors::DiagnosticBuilder;\n+use errors::Level;\n+use ty::tls;\n use ty::{TyCtxt};\n use ty::maps::config::QueryDescription;\n use ty::maps::job::{QueryResult, QueryInfo};\n@@ -108,6 +110,33 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n+    pub fn try_print_query_stack() {\n+        eprintln!(\"query stack during panic:\");\n+\n+        tls::with_context_opt(|icx| {\n+            if let Some(icx) = icx {\n+                let mut current_query = icx.query.clone();\n+                let mut i = 0;\n+\n+                while let Some(query) = current_query {\n+                    let mut db = DiagnosticBuilder::new(icx.tcx.sess.diagnostic(),\n+                        Level::FailureNote,\n+                        &format!(\"#{} [{}] {}\",\n+                                 i,\n+                                 query.info.query.name(),\n+                                 query.info.query.describe(icx.tcx)));\n+                    db.set_span(icx.tcx.sess.codemap().def_span(query.info.span));\n+                    icx.tcx.sess.diagnostic().force_print_db(db);\n+\n+                    current_query = query.parent.clone();\n+                    i += 1;\n+                }\n+            }\n+        });\n+\n+        eprintln!(\"end of query stack\");\n+    }\n+\n     /// Try to read a node index for the node dep_node.\n     /// A node will have an index, when it's already been marked green, or when we can mark it\n     /// green. This function will mark the current task as a reader of the specified node, when\n@@ -219,6 +248,12 @@ macro_rules! define_maps {\n         }\n \n         impl<$tcx> Query<$tcx> {\n+            pub fn name(&self) -> &'static str {\n+                match *self {\n+                    $(Query::$name(_) => stringify!($name),)*\n+                }\n+            }\n+\n             pub fn describe(&self, tcx: TyCtxt) -> String {\n                 let (r, name) = match *self {\n                     $(Query::$name(key) => {"}, {"sha": "32ec837f031bfad02368fdd26831aead7377c46a", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fd188e5f31f14625eb8b1feec38da5ad538e3c9/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd188e5f31f14625eb8b1feec38da5ad538e3c9/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=4fd188e5f31f14625eb8b1feec38da5ad538e3c9", "patch": "@@ -17,12 +17,14 @@ use std::fmt::Debug;\n use std::hash::{Hash, BuildHasher};\n use std::iter::repeat;\n use std::panic;\n+use std::env;\n use std::path::Path;\n use std::time::{Duration, Instant};\n \n use std::sync::mpsc::{Sender};\n use syntax_pos::{SpanData};\n use ty::maps::{QueryMsg};\n+use ty::TyCtxt;\n use dep_graph::{DepNode};\n use proc_macro;\n use lazy_static;\n@@ -48,7 +50,13 @@ lazy_static! {\n \n fn panic_hook(info: &panic::PanicInfo) {\n     if !proc_macro::__internal::in_sess() {\n-        (*DEFAULT_HOOK)(info)\n+        (*DEFAULT_HOOK)(info);\n+\n+        let backtrace = env::var_os(\"RUST_BACKTRACE\").map(|x| &x != \"0\").unwrap_or(false);\n+\n+        if backtrace {\n+            TyCtxt::try_print_query_stack();\n+        }\n     }\n }\n "}, {"sha": "43fe812a6ce80a9522a83bcc5c82113908c9d86a", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fd188e5f31f14625eb8b1feec38da5ad538e3c9/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd188e5f31f14625eb8b1feec38da5ad538e3c9/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=4fd188e5f31f14625eb8b1feec38da5ad538e3c9", "patch": "@@ -641,6 +641,11 @@ impl Handler {\n         self.tracked_diagnostic_codes.borrow().contains(code)\n     }\n \n+    pub fn force_print_db(&self, mut db: DiagnosticBuilder) {\n+        self.emitter.borrow_mut().emit(&db);\n+        db.cancel();\n+    }\n+\n     fn emit_db(&self, db: &DiagnosticBuilder) {\n         let diagnostic = &**db;\n "}]}