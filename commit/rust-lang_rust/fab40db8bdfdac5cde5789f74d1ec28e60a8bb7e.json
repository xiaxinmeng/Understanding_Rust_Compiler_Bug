{"sha": "fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjQwZGI4YmRmZGFjNWNkZTU3ODlmNzRkMWVjMjhlNjBhOGJiN2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-12T17:11:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-12T17:11:25Z"}, "message": "Merge #3566\n\n3566: Fix docs r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5ec90c43aa979d20a21aabd54c801d4bc39b69fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ec90c43aa979d20a21aabd54c801d4bc39b69fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeam09CRBK7hj4Ov3rIwAAdHIIAD7gL7OoPjrfo/ex91mqeHzC\nxqyPCYoAZzi2HOBsWnHngA5HPrYSUqZ75UvsDezAAicyK9aWzqs7qBJIo2EeFD3U\n3XcuXJxnuw2azyyh0b94O5yzTiuNrTm6M54+2jFFGUuwLAh2tuZ2fI85R4wvR75x\nm6d/DJE10ZGCr5m3Rm7BGaSgeBrjgnZ+WanxL+0UiW7sOF2v0gBJO10+9uDYVdLH\nUUm3xDBkjx5M7DN+Gtcsd3XwA/0fL9zS1aORXVEtIUQlxfBl9MWrxPyXOaK9EfvQ\nKv5jsLashyOePSAqIsOui88Z/VIfuKnO+NUB4niMP8i3Y5x3+UHQ26tAoF+BCjc=\n=tbCG\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ec90c43aa979d20a21aabd54c801d4bc39b69fd\nparent d98a5fab46c5850a484349c50dda7cb823cc179a\nparent ddfac09363fa778e3830cdb7a9ce6de3d779072e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584033085 +0000\ncommitter GitHub <noreply@github.com> 1584033085 +0000\n\nMerge #3566\n\n3566: Fix docs r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "html_url": "https://github.com/rust-lang/rust/commit/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98a5fab46c5850a484349c50dda7cb823cc179a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98a5fab46c5850a484349c50dda7cb823cc179a", "html_url": "https://github.com/rust-lang/rust/commit/d98a5fab46c5850a484349c50dda7cb823cc179a"}, {"sha": "ddfac09363fa778e3830cdb7a9ce6de3d779072e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfac09363fa778e3830cdb7a9ce6de3d779072e", "html_url": "https://github.com/rust-lang/rust/commit/ddfac09363fa778e3830cdb7a9ce6de3d779072e"}], "stats": {"total": 135, "additions": 73, "deletions": 62}, "files": [{"sha": "cd0757be5f1f5637d29366b46bc2b87fab84cb07", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -75,9 +75,9 @@ impl Default for CompletionOptions {\n pub(crate) fn completions(\n     db: &RootDatabase,\n     position: FilePosition,\n-    opts: &CompletionOptions,\n+    options: &CompletionOptions,\n ) -> Option<Completions> {\n-    let ctx = CompletionContext::new(db, position, opts)?;\n+    let ctx = CompletionContext::new(db, position, options)?;\n \n     let mut acc = Completions::default();\n "}, {"sha": "ecd615cf4c00d9889f769f0b3d22f1e774653f1b", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -11,13 +11,13 @@ use ra_syntax::{\n use crate::{FileId, FunctionSignature};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct InlayConfig {\n+pub struct InlayHintsOptions {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n     pub max_length: Option<usize>,\n }\n \n-impl Default for InlayConfig {\n+impl Default for InlayHintsOptions {\n     fn default() -> Self {\n         Self { type_hints: true, parameter_hints: true, max_length: None }\n     }\n@@ -39,7 +39,7 @@ pub struct InlayHint {\n pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n-    inlay_hint_opts: &InlayConfig,\n+    options: &InlayHintsOptions,\n ) -> Vec<InlayHint> {\n     let _p = profile(\"inlay_hints\");\n     let sema = Semantics::new(db);\n@@ -49,9 +49,9 @@ pub(crate) fn inlay_hints(\n     for node in file.syntax().descendants() {\n         match_ast! {\n             match node {\n-                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, inlay_hint_opts, ast::Expr::from(it)); },\n-                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, inlay_hint_opts, ast::Expr::from(it)); },\n-                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, inlay_hint_opts, it); },\n+                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, options, ast::Expr::from(it)); },\n+                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, options, ast::Expr::from(it)); },\n+                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, options, it); },\n                 _ => (),\n             }\n         }\n@@ -62,10 +62,10 @@ pub(crate) fn inlay_hints(\n fn get_param_name_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    inlay_hint_opts: &InlayConfig,\n+    options: &InlayHintsOptions,\n     expr: ast::Expr,\n ) -> Option<()> {\n-    if !inlay_hint_opts.parameter_hints {\n+    if !options.parameter_hints {\n         return None;\n     }\n \n@@ -102,10 +102,10 @@ fn get_param_name_hints(\n fn get_bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    inlay_hint_opts: &InlayConfig,\n+    options: &InlayHintsOptions,\n     pat: ast::BindPat,\n ) -> Option<()> {\n-    if !inlay_hint_opts.type_hints {\n+    if !options.type_hints {\n         return None;\n     }\n \n@@ -118,7 +118,7 @@ fn get_bind_pat_hints(\n     acc.push(InlayHint {\n         range: pat.syntax().text_range(),\n         kind: InlayKind::TypeHint,\n-        label: ty.display_truncated(sema.db, inlay_hint_opts.max_length).to_string().into(),\n+        label: ty.display_truncated(sema.db, options.max_length).to_string().into(),\n     });\n     Some(())\n }\n@@ -224,7 +224,7 @@ fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n \n #[cfg(test)]\n mod tests {\n-    use crate::inlay_hints::InlayConfig;\n+    use crate::inlay_hints::InlayHintsOptions;\n     use insta::assert_debug_snapshot;\n \n     use crate::mock_analysis::single_file;\n@@ -238,7 +238,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ parameter_hints: true, type_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: true, type_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [106; 107),\n@@ -262,7 +262,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ type_hints: false, parameter_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: false, parameter_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n     }\n \n     #[test]\n@@ -274,7 +274,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ type_hints: true, parameter_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: true, parameter_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [97; 99),\n@@ -298,7 +298,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [69; 71),\n@@ -355,7 +355,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [193; 197),\n@@ -435,7 +435,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -499,7 +499,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -549,7 +549,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -644,7 +644,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -739,7 +739,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [252; 256),\n@@ -811,7 +811,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [74; 75),\n@@ -899,7 +899,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [798; 809),\n@@ -1021,7 +1021,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );\n@@ -1047,7 +1047,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );"}, {"sha": "e9af80b6c4d33ebf2c692f155bf04dd040d5bf3d", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -68,7 +68,7 @@ pub use crate::{\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n-    inlay_hints::{InlayConfig, InlayHint, InlayKind},\n+    inlay_hints::{InlayHint, InlayHintsOptions, InlayKind},\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n@@ -319,7 +319,7 @@ impl Analysis {\n     pub fn inlay_hints(\n         &self,\n         file_id: FileId,\n-        inlay_hint_opts: &InlayConfig,\n+        inlay_hint_opts: &InlayHintsOptions,\n     ) -> Cancelable<Vec<InlayHint>> {\n         self.with_db(|db| inlay_hints::inlay_hints(db, file_id, inlay_hint_opts))\n     }"}, {"sha": "084e17b040c90a6e249870aee22387aa50a68359", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -7,8 +7,6 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n-use crate::req::InlayConfigDef;\n-use ra_ide::InlayConfig;\n use rustc_hash::FxHashMap;\n \n use ra_project_model::CargoFeatures;\n@@ -32,8 +30,11 @@ pub struct ServerConfig {\n \n     pub lru_capacity: Option<usize>,\n \n-    #[serde(with = \"InlayConfigDef\")]\n-    pub inlay_hints: InlayConfig,\n+    #[serde(deserialize_with = \"nullable_bool_true\")]\n+    pub inlay_hints_type: bool,\n+    #[serde(deserialize_with = \"nullable_bool_true\")]\n+    pub inlay_hints_parameter: bool,\n+    pub inlay_hints_max_length: Option<usize>,\n \n     pub cargo_watch_enable: bool,\n     pub cargo_watch_args: Vec<String>,\n@@ -63,7 +64,9 @@ impl Default for ServerConfig {\n             exclude_globs: Vec::new(),\n             use_client_watching: false,\n             lru_capacity: None,\n-            inlay_hints: Default::default(),\n+            inlay_hints_type: true,\n+            inlay_hints_parameter: true,\n+            inlay_hints_max_length: None,\n             cargo_watch_enable: true,\n             cargo_watch_args: Vec::new(),\n             cargo_watch_command: \"check\".to_string(),"}, {"sha": "fd4657d7e507ceb66b58794c74ade680bc4cf944", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -11,8 +11,8 @@ use lsp_types::{\n use ra_ide::{\n     translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n     FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag,\n-    InsertTextFormat, LineCol, LineIndex, NavigationTarget, RangeInfo, ReferenceAccess, Severity,\n-    SourceChange, SourceFileEdit,\n+    InlayHint, InlayKind, InsertTextFormat, LineCol, LineIndex, NavigationTarget, RangeInfo,\n+    ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n@@ -323,6 +323,20 @@ impl ConvWith<&FoldConvCtx<'_>> for Fold {\n     }\n }\n \n+impl ConvWith<&LineIndex> for InlayHint {\n+    type Output = req::InlayHint;\n+    fn conv_with(self, line_index: &LineIndex) -> Self::Output {\n+        req::InlayHint {\n+            label: self.label.to_string(),\n+            range: self.range.conv_with(line_index),\n+            kind: match self.kind {\n+                InlayKind::ParameterHint => req::InlayKind::ParameterHint,\n+                InlayKind::TypeHint => req::InlayKind::TypeHint,\n+            },\n+        }\n+    }\n+}\n+\n impl Conv for Highlight {\n     type Output = (u32, u32);\n "}, {"sha": "2b3b16d356be6cd3b03bd8d882b1d49b37a33daa", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -18,7 +18,7 @@ use crossbeam_channel::{select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{ClientCapabilities, NumberOrString};\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckTask};\n-use ra_ide::{Canceled, FileId, LibraryData, SourceRootId};\n+use ra_ide::{Canceled, FileId, InlayHintsOptions, LibraryData, SourceRootId};\n use ra_prof::profile;\n use ra_vfs::{VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n@@ -177,7 +177,11 @@ pub fn main_loop(\n                     .and_then(|it| it.folding_range.as_ref())\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n-                inlay_hints: config.inlay_hints,\n+                inlay_hints: InlayHintsOptions {\n+                    type_hints: config.inlay_hints_type,\n+                    parameter_hints: config.inlay_hints_parameter,\n+                    max_length: config.inlay_hints_max_length,\n+                },\n                 cargo_watch: CheckOptions {\n                     enable: config.cargo_watch_enable,\n                     args: config.cargo_watch_args,"}, {"sha": "6482f3b771acd1980d67148fbf5f1b035356ef2a", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -999,11 +999,7 @@ pub fn handle_inlay_hints(\n     Ok(analysis\n         .inlay_hints(file_id, &world.options.inlay_hints)?\n         .into_iter()\n-        .map(|api_type| InlayHint {\n-            label: api_type.label.to_string(),\n-            range: api_type.range.conv_with(&line_index),\n-            kind: api_type.kind,\n-        })\n+        .map_conv_with(&line_index)\n         .collect())\n }\n "}, {"sha": "a3efe3b9feb5fbfa2bfa3c83b52558f1e1a6205c", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -4,8 +4,6 @@ use lsp_types::{Location, Position, Range, TextDocumentIdentifier, Url};\n use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n \n-use ra_ide::{InlayConfig, InlayKind};\n-\n pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n     CodeLensParams, CompletionParams, CompletionResponse, DiagnosticTag,\n@@ -198,24 +196,14 @@ pub struct InlayHintsParams {\n }\n \n #[derive(Debug, PartialEq, Eq, Deserialize, Serialize)]\n-#[serde(remote = \"InlayKind\")]\n-pub enum InlayKindDef {\n+pub enum InlayKind {\n     TypeHint,\n     ParameterHint,\n }\n \n-#[derive(Deserialize)]\n-#[serde(remote = \"InlayConfig\", rename_all = \"camelCase\")]\n-pub struct InlayConfigDef {\n-    pub type_hints: bool,\n-    pub parameter_hints: bool,\n-    pub max_length: Option<usize>,\n-}\n-\n #[derive(Debug, Deserialize, Serialize)]\n pub struct InlayHint {\n     pub range: Range,\n-    #[serde(with = \"InlayKindDef\")]\n     pub kind: InlayKind,\n     pub label: String,\n }"}, {"sha": "058ce2af8a8a06c26aa71c031bbccae980440bcf", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -13,7 +13,7 @@ use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckWatcher};\n use ra_ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayConfig, LibraryData,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayHintsOptions, LibraryData,\n     SourceRootId,\n };\n use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n@@ -35,7 +35,7 @@ pub struct Options {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n-    pub inlay_hints: InlayConfig,\n+    pub inlay_hints: InlayHintsOptions,\n     pub rustfmt_args: Vec<String>,\n     pub cargo_watch: CheckOptions,\n }"}, {"sha": "45360c63398de56a2e5967fdb111ed03a2ee866e", "filename": "docs/user/features.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -191,8 +191,9 @@ Two types of inlay hints are displayed currently:\n \n In VS Code, the following settings can be used to configure the inlay hints:\n \n-* `rust-analyzer.inlayHintOpts.displayType` configure which types of inlay hints are shown.\n-* `rust-analyzer.inlayHintOpts.maxLength` \u2014\u00a0shortens the hints if their length exceeds the value specified. If no value is specified (`null`), no shortening is applied.\n+* `rust-analyzer.inlayHints.typeHints` - enable hints for inferred types.\n+* `rust-analyzer.inlayHints.parameterHints` - enable hints for function parameters.\n+* `rust-analyzer.inlayHints.maxLength` \u2014\u00a0shortens the hints if their length exceeds the value specified. If no value is specified (`null`), no shortening is applied.\n \n **Note:** VS Code does not have native support for inlay hints [yet](https://github.com/microsoft/vscode/issues/16221) and the hints are implemented using decorations.\n This approach has limitations, the caret movement and bracket highlighting near the edges of the hint may be weird:"}, {"sha": "b2c830b309af72d8d8c86a7a41c3006fd3f8d0a2", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=fab40db8bdfdac5cde5789f74d1ec28e60a8bb7e", "patch": "@@ -29,11 +29,16 @@ export async function createClient(config: Config, serverPath: string): Promise<\n         initializationOptions: {\n             publishDecorations: !config.highlightingSemanticTokens,\n             lruCapacity: config.lruCapacity,\n-            inlayHints: config.inlayHints,\n+\n+            inlayHintsType: config.inlayHints.typeHints,\n+            inlayHintsParameter: config.inlayHints.parameterHints,\n+            inlayHintsMaxLength: config.inlayHints.maxLength,\n+\n             cargoWatchEnable: cargoWatchOpts.enable,\n             cargoWatchArgs: cargoWatchOpts.arguments,\n             cargoWatchCommand: cargoWatchOpts.command,\n             cargoWatchAllTargets: cargoWatchOpts.allTargets,\n+\n             excludeGlobs: config.excludeGlobs,\n             useClientWatching: config.useClientWatching,\n             featureFlags: config.featureFlags,"}]}