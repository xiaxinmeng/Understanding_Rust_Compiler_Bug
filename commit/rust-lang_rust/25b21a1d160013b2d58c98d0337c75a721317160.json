{"sha": "25b21a1d160013b2d58c98d0337c75a721317160", "node_id": "C_kwDOAAsO6NoAKDI1YjIxYTFkMTYwMDEzYjJkNThjOThkMDMzN2M3NWE3MjEzMTcxNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-07T00:26:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-07T00:26:52Z"}, "message": "Auto merge of #93179 - Urgau:unreachable-2021, r=m-ou-se,oli-obk\n\nFix invalid special casing of the unreachable! macro\n\nThis pull-request fix an invalid special casing of the `unreachable!` macro in the same way the `panic!` macro was solved, by adding two new internal only macros `unreachable_2015` and `unreachable_2021` edition dependent and turn `unreachable!` into a built-in macro that do dispatching. This logic is stolen from the `panic!` macro.\n\n~~This pull-request also adds an internal feature `format_args_capture_non_literal` that allows capturing arguments from formatted string that expanded from macros. The original RFC #2795 mentioned this as a future possibility. This feature is [required](https://github.com/rust-lang/rust/issues/92137#issuecomment-1018630522) because of concatenation that needs to be done inside the macro:~~\n```rust\n$crate::concat!(\"internal error: entered unreachable code: \", $fmt)\n```\n\n**In summary** the new behavior for the `unreachable!` macro with this pr is:\n\nEdition 2021:\n```rust\nlet x = 5;\nunreachable!(\"x is {x}\");\n```\n```\ninternal error: entered unreachable code: x is 5\n```\n\nEdition <= 2018:\n```rust\nlet x = 5;\nunreachable!(\"x is {x}\");\n```\n```\ninternal error: entered unreachable code: x is {x}\n```\n\nAlso note that the change in this PR are **insta-stable** and **breaking changes** but this a considered as being a [bug](https://github.com/rust-lang/rust/issues/92137#issuecomment-998441613).\nIf someone could start a perf run and then a crater run this would be appreciated.\n\nFixes https://github.com/rust-lang/rust/issues/92137", "tree": {"sha": "623c21da62c05576a090654f254429c722bbeb06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/623c21da62c05576a090654f254429c722bbeb06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b21a1d160013b2d58c98d0337c75a721317160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b21a1d160013b2d58c98d0337c75a721317160", "html_url": "https://github.com/rust-lang/rust/commit/25b21a1d160013b2d58c98d0337c75a721317160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b21a1d160013b2d58c98d0337c75a721317160/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b43cfc9b25ac4a906bd56d32d3111085dd9e6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b43cfc9b25ac4a906bd56d32d3111085dd9e6a1", "html_url": "https://github.com/rust-lang/rust/commit/7b43cfc9b25ac4a906bd56d32d3111085dd9e6a1"}, {"sha": "a4b93eb1883d795f335df71d251d37d17b1311fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b93eb1883d795f335df71d251d37d17b1311fd", "html_url": "https://github.com/rust-lang/rust/commit/a4b93eb1883d795f335df71d251d37d17b1311fd"}], "stats": {"total": 354, "additions": 300, "deletions": 54}, "files": [{"sha": "9a45dec55f30b0d7e41e8b213013537d6cc7d5a0", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -1,4 +1,4 @@\n-use crate::panic::use_panic_2021;\n+use crate::edition_panic::use_panic_2021;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};"}, {"sha": "518b88dec6a75190d7e6479ceb6209ee03c75fcd", "filename": "compiler/rustc_builtin_macros/src/edition_panic.rs", "status": "renamed", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -20,8 +20,29 @@ pub fn expand_panic<'cx>(\n     sp: Span,\n     tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n-    let panic = if use_panic_2021(sp) { sym::panic_2021 } else { sym::panic_2015 };\n+    let mac = if use_panic_2021(sp) { sym::panic_2021 } else { sym::panic_2015 };\n+    expand(mac, cx, sp, tts)\n+}\n \n+// This expands to either\n+// - `$crate::panic::unreachable_2015!(...)` or\n+// - `$crate::panic::unreachable_2021!(...)`\n+// depending on the edition.\n+pub fn expand_unreachable<'cx>(\n+    cx: &'cx mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: TokenStream,\n+) -> Box<dyn MacResult + 'cx> {\n+    let mac = if use_panic_2021(sp) { sym::unreachable_2021 } else { sym::unreachable_2015 };\n+    expand(mac, cx, sp, tts)\n+}\n+\n+fn expand<'cx>(\n+    mac: rustc_span::Symbol,\n+    cx: &'cx mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: TokenStream,\n+) -> Box<dyn MacResult + 'cx> {\n     let sp = cx.with_call_site_ctxt(sp);\n \n     MacEager::expr(\n@@ -31,7 +52,7 @@ pub fn expand_panic<'cx>(\n                 path: Path {\n                     span: sp,\n                     segments: cx\n-                        .std_path(&[sym::panic, panic])\n+                        .std_path(&[sym::panic, mac])\n                         .into_iter()\n                         .map(|ident| PathSegment::from_ident(ident))\n                         .collect(),", "previous_filename": "compiler/rustc_builtin_macros/src/panic.rs"}, {"sha": "0289acac606385fa6d7115276f37b6e07b06ec07", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -32,12 +32,12 @@ mod concat_bytes;\n mod concat_idents;\n mod derive;\n mod deriving;\n+mod edition_panic;\n mod env;\n mod format;\n mod format_foreign;\n mod global_allocator;\n mod log_syntax;\n-mod panic;\n mod source_util;\n mod test;\n mod trace_macros;\n@@ -83,8 +83,9 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n         option_env: env::expand_option_env,\n-        core_panic: panic::expand_panic,\n-        std_panic: panic::expand_panic,\n+        core_panic: edition_panic::expand_panic,\n+        std_panic: edition_panic::expand_panic,\n+        unreachable: edition_panic::expand_unreachable,\n         stringify: source_util::expand_stringify,\n         trace_macros: trace_macros::expand_trace_macros,\n     }"}, {"sha": "603971a6a916121b1c24cb06131ac8a6bbe9cb58", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -277,7 +277,6 @@ language_item_table! {\n     Panic,                   sym::panic,               panic_fn,                   Target::Fn,             GenericRequirement::Exact(0);\n     PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n     PanicDisplay,            sym::panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n-    PanicStr,                sym::panic_str,           panic_str,                  Target::Fn,             GenericRequirement::None;\n     ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::Exact(0);\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;"}, {"sha": "3130d57c2a9716233247f52df79fbd07dab29961", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -49,9 +49,11 @@ impl<'tcx> LateLintPass<'tcx> for NonPanicFmt {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n         if let hir::ExprKind::Call(f, [arg]) = &expr.kind {\n             if let &ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(f).kind() {\n+                let f_diagnostic_name = cx.tcx.get_diagnostic_name(def_id);\n+\n                 if Some(def_id) == cx.tcx.lang_items().begin_panic_fn()\n                     || Some(def_id) == cx.tcx.lang_items().panic_fn()\n-                    || Some(def_id) == cx.tcx.lang_items().panic_str()\n+                    || f_diagnostic_name == Some(sym::panic_str)\n                 {\n                     if let Some(id) = f.span.ctxt().outer_expn_data().macro_def_id {\n                         if matches!(\n@@ -61,6 +63,22 @@ impl<'tcx> LateLintPass<'tcx> for NonPanicFmt {\n                             check_panic(cx, f, arg);\n                         }\n                     }\n+                } else if f_diagnostic_name == Some(sym::unreachable_display) {\n+                    if let Some(id) = f.span.ctxt().outer_expn_data().macro_def_id {\n+                        if cx.tcx.is_diagnostic_item(sym::unreachable_2015_macro, id) {\n+                            check_panic(\n+                                cx,\n+                                f,\n+                                // This is safe because we checked above that the callee is indeed\n+                                // unreachable_display\n+                                match &arg.kind {\n+                                    // Get the borrowed arg not the borrow\n+                                    hir::ExprKind::AddrOf(ast::BorrowKind::Ref, _, arg) => arg,\n+                                    _ => bug!(\"call to unreachable_display without borrow\"),\n+                                },\n+                            );\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -85,8 +103,8 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         return;\n     }\n \n-    // Find the span of the argument to `panic!()`, before expansion in the\n-    // case of `panic!(some_macro!())`.\n+    // Find the span of the argument to `panic!()` or `unreachable!`, before expansion in the\n+    // case of `panic!(some_macro!())` or `unreachable!(some_macro!())`.\n     // We don't use source_callsite(), because this `panic!(..)` might itself\n     // be expanded from another macro, in which case we want to stop at that\n     // expansion.\n@@ -319,6 +337,7 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n                 | sym::std_panic_macro\n                 | sym::assert_macro\n                 | sym::debug_assert_macro\n+                | sym::unreachable_macro\n         ) {\n             break;\n         }"}, {"sha": "70fad4911f9c760e7ae46e027062bd8c874dcfde", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -1437,7 +1437,12 @@ symbols! {\n         unmarked_api,\n         unpin,\n         unreachable,\n+        unreachable_2015,\n+        unreachable_2015_macro,\n+        unreachable_2021,\n+        unreachable_2021_macro,\n         unreachable_code,\n+        unreachable_display,\n         unreachable_macro,\n         unrestricted_attribute_tokens,\n         unsafe_block_in_unsafe_fn,"}, {"sha": "a9e90556f6c2631a6b5d548dd8c3435d8c9e53c6", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -594,6 +594,22 @@ macro_rules! writeln {\n ///     unreachable!(\"The loop should always return\");\n /// }\n /// ```\n+#[cfg(not(bootstrap))]\n+#[macro_export]\n+#[rustc_builtin_macro(unreachable)]\n+#[allow_internal_unstable(edition_panic)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]\n+macro_rules! unreachable {\n+    // Expands to either `$crate::panic::unreachable_2015` or `$crate::panic::unreachable_2021`\n+    // depending on the edition of the caller.\n+    ($($arg:tt)*) => {\n+        /* compiler built-in */\n+    };\n+}\n+\n+/// unreachable!() macro\n+#[cfg(bootstrap)]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]"}, {"sha": "0be3f06ff6c2a56720ff41ad14631722091ca6bc", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -58,6 +58,39 @@ pub macro panic_2021 {\n     ),\n }\n \n+#[doc(hidden)]\n+#[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use unreachable!() instead\")]\n+#[allow_internal_unstable(core_panic)]\n+#[rustc_diagnostic_item = \"unreachable_2015_macro\"]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro unreachable_2015 {\n+    () => (\n+        $crate::panicking::panic(\"internal error: entered unreachable code\")\n+    ),\n+    // Use of `unreachable_display` for non_fmt_panic lint.\n+    // NOTE: the message (\"internal error ...\") is embeded directly in unreachable_display\n+    ($msg:expr $(,)?) => (\n+        $crate::panicking::unreachable_display(&$msg)\n+    ),\n+    ($fmt:expr, $($arg:tt)*) => (\n+        $crate::panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n+    ),\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use unreachable!() instead\")]\n+#[allow_internal_unstable(core_panic)]\n+#[rustc_diagnostic_item = \"unreachable_2021_macro\"]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro unreachable_2021 {\n+    () => (\n+        $crate::panicking::panic(\"internal error: entered unreachable code\")\n+    ),\n+    ($($t:tt)+) => (\n+        $crate::panic!(\"internal error: entered unreachable code: {}\", $crate::format_args!($($t)+))\n+    ),\n+}\n+\n /// An internal trait used by libstd to pass data from libstd to `panic_unwind`\n /// and other panic runtimes. Not intended to be stabilized any time soon, do\n /// not use."}, {"sha": "0798076411ac4bff1d157112732fea1ced9b0d07", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -50,12 +50,20 @@ pub const fn panic(expr: &'static str) -> ! {\n \n #[inline]\n #[track_caller]\n-#[lang = \"panic_str\"] // needed for `non-fmt-panics` lint\n+#[rustc_diagnostic_item = \"panic_str\"]\n #[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]\n pub const fn panic_str(expr: &str) -> ! {\n     panic_display(&expr);\n }\n \n+#[cfg(not(bootstrap))]\n+#[inline]\n+#[track_caller]\n+#[rustc_diagnostic_item = \"unreachable_display\"] // needed for `non-fmt-panics` lint\n+pub fn unreachable_display<T: fmt::Display>(x: &T) -> ! {\n+    panic_fmt(format_args!(\"internal error: entered unreachable code: {}\", *x));\n+}\n+\n #[inline]\n #[track_caller]\n #[lang = \"panic_display\"] // needed for const-evaluated panics"}, {"sha": "1a454bab4d0d961949255630072705d054f48274", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -21,7 +21,7 @@\n       let mut _19: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:54: 9:68\n       let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n       let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n-      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _23: &[T; 3];                // in scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:7:9: 7:10\n@@ -66,16 +66,16 @@\n       }\n   \n       bb1: {\n-          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 })\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }\n       }\n   "}, {"sha": "2955f11716c418d8f1e8b8de2d5e2243fc068041", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -20,7 +20,7 @@ error[E0080]: evaluation of constant value failed\n LL | const Y: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n    |\n-   = note: this error originates in the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:15:15\n@@ -68,7 +68,7 @@ error[E0080]: evaluation of constant value failed\n LL | const Y_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:30:20\n    |\n-   = note: this error originates in the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:33:20"}, {"sha": "cb3b08e0e09991c44bdf92ee5d9d37b3cb50daf4", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -20,7 +20,7 @@ error[E0080]: evaluation of constant value failed\n LL | const C: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:12:15\n    |\n-   = note: this error originates in the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:15:15\n@@ -60,7 +60,7 @@ error[E0080]: evaluation of constant value failed\n LL | const C_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:27:20\n    |\n-   = note: this error originates in the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:30:20"}, {"sha": "417120c453e927427247b3e2c4b96c2ec87a169c", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -12,7 +12,7 @@ error[E0080]: evaluation of constant value failed\n LL | const Y: () = unreachable!();\n    |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:11:15\n    |\n-   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:14:15"}, {"sha": "d70ef31eed65c2965616233c391f05d7687509a4", "filename": "src/test/ui/macros/unreachable-arg.edition_2021.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.edition_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.edition_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.edition_2021.stderr?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -0,0 +1,13 @@\n+error: format argument must be a string literal\n+  --> $DIR/unreachable-arg.rs:15:18\n+   |\n+LL |     unreachable!(a);\n+   |                  ^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     unreachable!(\"{}\", a);\n+   |                  +++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "4024bd20b7914f66b8df3ea485c668a28525ce9b", "filename": "src/test/ui/macros/unreachable-arg.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-arg.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -0,0 +1,16 @@\n+// ignore-emscripten no processes\n+\n+// revisions: edition_2015 edition_2021\n+// [edition_2015]edition:2015\n+// [edition_2021]edition:2021\n+// [edition_2015]run-fail\n+// [edition_2021]check-fail\n+// [edition_2015]error-pattern:internal error: entered unreachable code: hello\n+// [edition_2021]error-pattern:format argument must be a string literal\n+\n+#![allow(non_fmt_panics)]\n+\n+fn main() {\n+    let a = \"hello\";\n+    unreachable!(a);\n+}"}, {"sha": "ff059ad9e15ad53e94de73d53fcd8eac81cd4c5b", "filename": "src/test/ui/macros/unreachable-format-arg.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-arg.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -0,0 +1,15 @@\n+// run-fail\n+// ignore-emscripten no processes\n+\n+// revisions: edition_2015 edition_2021\n+// [edition_2015]edition:2015\n+// [edition_2021]edition:2021\n+// [edition_2015]error-pattern:internal error: entered unreachable code: x is {x}\n+// [edition_2021]error-pattern:internal error: entered unreachable code: x is 5\n+\n+#![allow(non_fmt_panics)]\n+\n+fn main() {\n+    let x = 5;\n+    unreachable!(\"x is {x}\");\n+}"}, {"sha": "dda45d14a3f1b5dd4f887988b0607fa5c85f553b", "filename": "src/test/ui/macros/unreachable-format-args.edition_2015.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -0,0 +1,12 @@\n+error: there is no argument named `x`\n+  --> $DIR/unreachable-format-args.rs:13:5\n+   |\n+LL |     unreachable!(\"x is {x} and y is {y}\", y = 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `x` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in the macro `$crate::concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "04a31fc1ba370fa8a3d4ed9b87e218b362c2196e", "filename": "src/test/ui/macros/unreachable-format-args.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -0,0 +1,14 @@\n+// ignore-emscripten no processes\n+\n+// revisions: edition_2015 edition_2021\n+// [edition_2015]edition:2015\n+// [edition_2021]edition:2021\n+// [edition_2015]check-fail\n+// [edition_2021]run-fail\n+// [edition_2015]error-pattern:there is no argument named `x`\n+// [edition_2021]error-pattern:internal error: entered unreachable code: x is 5 and y is 0\n+\n+fn main() {\n+    let x = 5;\n+    unreachable!(\"x is {x} and y is {y}\", y = 0);\n+}"}, {"sha": "5191f1877a9eee221ad850e24fe7be65d3306ac9", "filename": "src/test/ui/non-fmt-panic.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.fixed?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -11,6 +11,7 @@ static S: &str = \"{bla}\";\n #[allow(unreachable_code)]\n fn main() {\n     panic!(\"{}\", \"here's a brace: {\"); //~ WARN panic message contains a brace\n+    unreachable!(\"{}\", \"here's a brace: {\"); //~ WARN panic message contains a brace\n     std::panic!(\"{}\", \"another one: }\"); //~ WARN panic message contains a brace\n     core::panic!(\"{}\", \"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n     assert!(false, \"{}\", \"{:03x} {test} bla\");\n@@ -24,6 +25,8 @@ fn main() {\n     debug_assert!(false, \"{}\", \"{{}} bla\"); //~ WARN panic message contains braces\n     panic!(\"{}\", C); //~ WARN panic message is not a string literal\n     panic!(\"{}\", S); //~ WARN panic message is not a string literal\n+    unreachable!(\"{}\", S); //~ WARN panic message is not a string literal\n+    unreachable!(\"{}\", S); //~ WARN panic message is not a string literal\n     std::panic::panic_any(123); //~ WARN panic message is not a string literal\n     core::panic!(\"{}\", &*\"abc\"); //~ WARN panic message is not a string literal\n     std::panic::panic_any(Some(123)); //~ WARN panic message is not a string literal\n@@ -41,8 +44,10 @@ fn main() {\n     }\n \n     std::panic::panic_any(a!()); //~ WARN panic message is not a string literal\n+    unreachable!(\"{}\", a!()); //~ WARN panic message is not a string literal\n \n     panic!(\"{}\", 1); //~ WARN panic message is not a string literal\n+    unreachable!(\"{}\", 1); //~ WARN panic message is not a string literal\n     assert!(false, \"{}\", 1); //~ WARN panic message is not a string literal\n     debug_assert!(false, \"{}\", 1); //~ WARN panic message is not a string literal\n "}, {"sha": "d0d06b79775949647b66c6150975e74573982b86", "filename": "src/test/ui/non-fmt-panic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -11,6 +11,7 @@ static S: &str = \"{bla}\";\n #[allow(unreachable_code)]\n fn main() {\n     panic!(\"here's a brace: {\"); //~ WARN panic message contains a brace\n+    unreachable!(\"here's a brace: {\"); //~ WARN panic message contains a brace\n     std::panic!(\"another one: }\"); //~ WARN panic message contains a brace\n     core::panic!(\"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n     assert!(false, \"{:03x} {test} bla\");\n@@ -24,6 +25,8 @@ fn main() {\n     debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains braces\n     panic!(C); //~ WARN panic message is not a string literal\n     panic!(S); //~ WARN panic message is not a string literal\n+    unreachable!(S); //~ WARN panic message is not a string literal\n+    unreachable!(S); //~ WARN panic message is not a string literal\n     std::panic!(123); //~ WARN panic message is not a string literal\n     core::panic!(&*\"abc\"); //~ WARN panic message is not a string literal\n     panic!(Some(123)); //~ WARN panic message is not a string literal\n@@ -41,8 +44,10 @@ fn main() {\n     }\n \n     panic!(a!()); //~ WARN panic message is not a string literal\n+    unreachable!(a!()); //~ WARN panic message is not a string literal\n \n     panic!(format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n+    unreachable!(format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n     assert!(false, format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n     debug_assert!(false, format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n "}, {"sha": "3305e5cc9068d81d726ce34a59b6fb2561a6f5bb", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 96, "deletions": 30, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -12,7 +12,19 @@ LL |     panic!(\"{}\", \"here's a brace: {\");\n    |            +++++\n \n warning: panic message contains a brace\n-  --> $DIR/non-fmt-panic.rs:14:31\n+  --> $DIR/non-fmt-panic.rs:14:35\n+   |\n+LL |     unreachable!(\"here's a brace: {\");\n+   |                                   ^\n+   |\n+   = note: this message is not used as a format string, but will be in Rust 2021\n+help: add a \"{}\" format string to use the message literally\n+   |\n+LL |     unreachable!(\"{}\", \"here's a brace: {\");\n+   |                  +++++\n+\n+warning: panic message contains a brace\n+  --> $DIR/non-fmt-panic.rs:15:31\n    |\n LL |     std::panic!(\"another one: }\");\n    |                               ^\n@@ -24,7 +36,7 @@ LL |     std::panic!(\"{}\", \"another one: }\");\n    |                 +++++\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/non-fmt-panic.rs:15:25\n+  --> $DIR/non-fmt-panic.rs:16:25\n    |\n LL |     core::panic!(\"Hello {}\");\n    |                         ^^\n@@ -40,7 +52,7 @@ LL |     core::panic!(\"{}\", \"Hello {}\");\n    |                  +++++\n \n warning: panic message contains unused formatting placeholders\n-  --> $DIR/non-fmt-panic.rs:16:21\n+  --> $DIR/non-fmt-panic.rs:17:21\n    |\n LL |     assert!(false, \"{:03x} {test} bla\");\n    |                     ^^^^^^ ^^^^^^\n@@ -56,7 +68,7 @@ LL |     assert!(false, \"{}\", \"{:03x} {test} bla\");\n    |                    +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:18:20\n+  --> $DIR/non-fmt-panic.rs:19:20\n    |\n LL |     assert!(false, S);\n    |                    ^\n@@ -69,7 +81,7 @@ LL |     assert!(false, \"{}\", S);\n    |                    +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:20:20\n+  --> $DIR/non-fmt-panic.rs:21:20\n    |\n LL |     assert!(false, 123);\n    |                    ^^^\n@@ -82,7 +94,7 @@ LL |     assert!(false, \"{}\", 123);\n    |                    +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:22:20\n+  --> $DIR/non-fmt-panic.rs:23:20\n    |\n LL |     assert!(false, Some(123));\n    |                    ^^^^^^^^^\n@@ -95,7 +107,7 @@ LL |     assert!(false, \"{:?}\", Some(123));\n    |                    +++++++\n \n warning: panic message contains braces\n-  --> $DIR/non-fmt-panic.rs:24:27\n+  --> $DIR/non-fmt-panic.rs:25:27\n    |\n LL |     debug_assert!(false, \"{{}} bla\");\n    |                           ^^^^\n@@ -107,7 +119,7 @@ LL |     debug_assert!(false, \"{}\", \"{{}} bla\");\n    |                          +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:25:12\n+  --> $DIR/non-fmt-panic.rs:26:12\n    |\n LL |     panic!(C);\n    |            ^\n@@ -120,7 +132,7 @@ LL |     panic!(\"{}\", C);\n    |            +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:26:12\n+  --> $DIR/non-fmt-panic.rs:27:12\n    |\n LL |     panic!(S);\n    |            ^\n@@ -133,7 +145,33 @@ LL |     panic!(\"{}\", S);\n    |            +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:27:17\n+  --> $DIR/non-fmt-panic.rs:28:18\n+   |\n+LL |     unreachable!(S);\n+   |                  ^\n+   |\n+   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     unreachable!(\"{}\", S);\n+   |                  +++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:29:18\n+   |\n+LL |     unreachable!(S);\n+   |                  ^\n+   |\n+   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     unreachable!(\"{}\", S);\n+   |                  +++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:30:17\n    |\n LL |     std::panic!(123);\n    |                 ^^^\n@@ -150,7 +188,7 @@ LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:28:18\n+  --> $DIR/non-fmt-panic.rs:31:18\n    |\n LL |     core::panic!(&*\"abc\");\n    |                  ^^^^^^^\n@@ -163,7 +201,7 @@ LL |     core::panic!(\"{}\", &*\"abc\");\n    |                  +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:29:12\n+  --> $DIR/non-fmt-panic.rs:32:12\n    |\n LL |     panic!(Some(123));\n    |            ^^^^^^^^^\n@@ -180,7 +218,7 @@ LL |     std::panic::panic_any(Some(123));\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/non-fmt-panic.rs:30:12\n+  --> $DIR/non-fmt-panic.rs:33:12\n    |\n LL |     panic!(concat!(\"{\", \"}\"));\n    |            ^^^^^^^^^^^^^^^^^\n@@ -196,7 +234,7 @@ LL |     panic!(\"{}\", concat!(\"{\", \"}\"));\n    |            +++++\n \n warning: panic message contains braces\n-  --> $DIR/non-fmt-panic.rs:31:5\n+  --> $DIR/non-fmt-panic.rs:34:5\n    |\n LL |     panic!(concat!(\"{\", \"{\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -208,15 +246,15 @@ LL |     panic!(\"{}\", concat!(\"{\", \"{\"));\n    |            +++++\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/non-fmt-panic.rs:33:37\n+  --> $DIR/non-fmt-panic.rs:36:37\n    |\n LL |     fancy_panic::fancy_panic!(\"test {} 123\");\n    |                                     ^^\n    |\n    = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:43:12\n+  --> $DIR/non-fmt-panic.rs:46:12\n    |\n LL |     panic!(a!());\n    |            ^^^^\n@@ -233,7 +271,20 @@ LL |     std::panic::panic_any(a!());\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:45:12\n+  --> $DIR/non-fmt-panic.rs:47:18\n+   |\n+LL |     unreachable!(a!());\n+   |                  ^^^^\n+   |\n+   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+help: add a \"{}\" format string to Display the message\n+   |\n+LL |     unreachable!(\"{}\", a!());\n+   |                  +++++\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:49:12\n    |\n LL |     panic!(format!(\"{}\", 1));\n    |            ^^^^^^^^^^^^^^^^\n@@ -248,7 +299,22 @@ LL +     panic!(\"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:46:20\n+  --> $DIR/non-fmt-panic.rs:50:18\n+   |\n+LL |     unreachable!(format!(\"{}\", 1));\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this usage of unreachable!() is deprecated; it will be a hard error in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+   = note: the unreachable!() macro supports formatting, so there's no need for the format!() macro here\n+help: remove the `format!(..)` macro call\n+   |\n+LL -     unreachable!(format!(\"{}\", 1));\n+LL +     unreachable!(\"{}\", 1);\n+   | \n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:51:20\n    |\n LL |     assert!(false, format!(\"{}\", 1));\n    |                    ^^^^^^^^^^^^^^^^\n@@ -263,7 +329,7 @@ LL +     assert!(false, \"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:47:26\n+  --> $DIR/non-fmt-panic.rs:52:26\n    |\n LL |     debug_assert!(false, format!(\"{}\", 1));\n    |                          ^^^^^^^^^^^^^^^^\n@@ -278,7 +344,7 @@ LL +     debug_assert!(false, \"{}\", 1);\n    | \n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:49:12\n+  --> $DIR/non-fmt-panic.rs:54:12\n    |\n LL |     panic![123];\n    |            ^^^\n@@ -295,7 +361,7 @@ LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~~   ~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:50:12\n+  --> $DIR/non-fmt-panic.rs:55:12\n    |\n LL |     panic!{123};\n    |            ^^^\n@@ -312,7 +378,7 @@ LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~~   ~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:67:12\n+  --> $DIR/non-fmt-panic.rs:72:12\n    |\n LL |     panic!(v);\n    |     ------ ^\n@@ -323,7 +389,7 @@ LL |     panic!(v);\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:68:20\n+  --> $DIR/non-fmt-panic.rs:73:20\n    |\n LL |     assert!(false, v);\n    |                    ^\n@@ -332,7 +398,7 @@ LL |     assert!(false, v);\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:72:12\n+  --> $DIR/non-fmt-panic.rs:77:12\n    |\n LL |     panic!(v);\n    |            ^\n@@ -349,7 +415,7 @@ LL |     std::panic::panic_any(v);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:73:20\n+  --> $DIR/non-fmt-panic.rs:78:20\n    |\n LL |     assert!(false, v);\n    |                    ^\n@@ -362,7 +428,7 @@ LL |     assert!(false, \"{:?}\", v);\n    |                    +++++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:77:12\n+  --> $DIR/non-fmt-panic.rs:82:12\n    |\n LL |     panic!(v);\n    |            ^\n@@ -379,7 +445,7 @@ LL |     std::panic::panic_any(v);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:78:20\n+  --> $DIR/non-fmt-panic.rs:83:20\n    |\n LL |     assert!(false, v);\n    |                    ^\n@@ -392,7 +458,7 @@ LL |     assert!(false, \"{}\", v);\n    |                    +++++\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:82:12\n+  --> $DIR/non-fmt-panic.rs:87:12\n    |\n LL |     panic!(v);\n    |            ^\n@@ -409,7 +475,7 @@ LL |     std::panic::panic_any(v);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:83:20\n+  --> $DIR/non-fmt-panic.rs:88:20\n    |\n LL |     assert!(false, v);\n    |                    ^\n@@ -421,5 +487,5 @@ help: add a \"{}\" format string to Display the message\n LL |     assert!(false, \"{}\", v);\n    |                    +++++\n \n-warning: 30 warnings emitted\n+warning: 35 warnings emitted\n "}, {"sha": "ec54851fcf9d7c4dae3ad885c867d1bc06070478", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/25b21a1d160013b2d58c98d0337c75a721317160/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=25b21a1d160013b2d58c98d0337c75a721317160", "patch": "@@ -32,9 +32,7 @@ fn main() {\n                                             lit.set_span(crate::Span::recover_proc_macro_span(2));\n                                             lit\n                                         } else {\n-                                           {\n-                                               ::core::panicking::panic(\"internal error: entered unreachable code\")\n-                                           }\n+                                           ::core::panicking::panic(\"internal error: entered unreachable code\")\n                                        }\n                                 })),\n                         crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',"}]}