{"sha": "e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYzBiZGFmNzVmOGQ4OGE1YzI4YjNlNDRkZWYxN2Q5MWQ0ZjQ2YjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T13:55:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T14:50:49Z"}, "message": "Introduce dedicated AST node for union\n\nAlthough structs and unions have the same syntax and differ only in\nthe keyword, re-using the single syntax node for both of them leads to\nconfusion in practice, and propagates further down the hir in an\nupleasent way.\n\nMoreover, static and consts also share syntax, but we use different\nnodes for them.", "tree": {"sha": "15cb5466dd2fab58d1591afc50bd28aeab65359d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15cb5466dd2fab58d1591afc50bd28aeab65359d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "html_url": "https://github.com/rust-lang/rust/commit/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be00d74c7b61fb82bdade482e95035a21f9dd736", "url": "https://api.github.com/repos/rust-lang/rust/commits/be00d74c7b61fb82bdade482e95035a21f9dd736", "html_url": "https://github.com/rust-lang/rust/commit/be00d74c7b61fb82bdade482e95035a21f9dd736"}], "stats": {"total": 78, "additions": 63, "deletions": 15}, "files": [{"sha": "630e6ce64fbc166b1ae7234cfcf2f5233690a117", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "patch": "@@ -1,13 +1,13 @@\n //! FIXME: write short doc here\n \n mod consts;\n-mod nominal;\n+mod adt;\n mod traits;\n mod use_item;\n \n pub(crate) use self::{\n     expressions::{match_arm_list, record_field_list},\n-    nominal::{enum_variant_list, record_field_def_list},\n+    adt::{enum_variant_list, record_field_def_list},\n     traits::{impl_item_list, trait_item_list},\n     use_item::use_tree_list,\n };\n@@ -247,7 +247,7 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             //     a: i32,\n             //     b: f32,\n             // }\n-            nominal::struct_def(p, m, T![struct]);\n+            adt::struct_def(p, m);\n         }\n         IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n             // test union_items\n@@ -256,9 +256,9 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             //     a: i32,\n             //     b: f32,\n             // }\n-            nominal::struct_def(p, m, T![union]);\n+            adt::union_def(p, m);\n         }\n-        T![enum] => nominal::enum_def(p, m),\n+        T![enum] => adt::enum_def(p, m),\n         T![use] => use_item::use_item(p, m),\n         T![const] if (la == IDENT || la == T![_] || la == T![mut]) => consts::const_def(p, m),\n         T![static] => consts::static_def(p, m),"}, {"sha": "c777bc9d0042ae790283001abc6518a2172ed353", "filename": "crates/ra_parser/src/grammar/items/adt.rs", "status": "renamed", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "patch": "@@ -2,10 +2,19 @@\n \n use super::*;\n \n-pub(super) fn struct_def(p: &mut Parser, m: Marker, kind: SyntaxKind) {\n-    assert!(p.at(T![struct]) || p.at_contextual_kw(\"union\"));\n-    p.bump_remap(kind);\n+pub(super) fn struct_def(p: &mut Parser, m: Marker) {\n+    assert!(p.at(T![struct]));\n+    p.bump(T![struct]);\n+    struct_or_union(p, m, T![struct], STRUCT_DEF);\n+}\n+\n+pub(super) fn union_def(p: &mut Parser, m: Marker) {\n+    assert!(p.at_contextual_kw(\"union\"));\n+    p.bump_remap(T![union]);\n+    struct_or_union(p, m, T![union], UNION_DEF);\n+}\n \n+fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n     name_r(p, ITEM_RECOVERY_SET);\n     type_params::opt_type_param_list(p);\n     match p.current() {\n@@ -22,26 +31,26 @@ pub(super) fn struct_def(p: &mut Parser, m: Marker, kind: SyntaxKind) {\n                 }\n             }\n         }\n-        T![;] if kind == T![struct] => {\n+        T![;] if kw == T![struct] => {\n             p.bump(T![;]);\n         }\n         T!['{'] => record_field_def_list(p),\n-        T!['('] if kind == T![struct] => {\n+        T!['('] if kw == T![struct] => {\n             tuple_field_def_list(p);\n             // test tuple_struct_where\n             // struct Test<T>(T) where T: Clone;\n             // struct Test<T>(T);\n             type_params::opt_where_clause(p);\n             p.expect(T![;]);\n         }\n-        _ if kind == T![struct] => {\n+        _ if kw == T![struct] => {\n             p.error(\"expected `;`, `{`, or `(`\");\n         }\n         _ => {\n             p.error(\"expected `{`\");\n         }\n     }\n-    m.complete(p, STRUCT_DEF);\n+    m.complete(p, def);\n }\n \n pub(super) fn enum_def(p: &mut Parser, m: Marker) {", "previous_filename": "crates/ra_parser/src/grammar/items/nominal.rs"}, {"sha": "fe0fcdb33f269cd75e8cc2430385adb562b2dbce", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "patch": "@@ -122,6 +122,7 @@ pub enum SyntaxKind {\n     R_DOLLAR,\n     SOURCE_FILE,\n     STRUCT_DEF,\n+    UNION_DEF,\n     ENUM_DEF,\n     FN_DEF,\n     RET_TYPE,"}, {"sha": "1a03ae56c4baf87531ec52dc17cc7941f84031ab", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "patch": "@@ -3789,6 +3789,34 @@ impl AstNode for TypeRef {\n }\n impl TypeRef {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct UnionDef {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for UnionDef {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            UNION_DEF => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl ast::VisibilityOwner for UnionDef {}\n+impl ast::NameOwner for UnionDef {}\n+impl ast::TypeParamsOwner for UnionDef {}\n+impl ast::AttrsOwner for UnionDef {}\n+impl ast::DocCommentsOwner for UnionDef {}\n+impl UnionDef {}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UseItem {\n     pub(crate) syntax: SyntaxNode,\n }"}, {"sha": "c16bed891564257d6bc410025752386dc1794274", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "patch": "@@ -126,6 +126,7 @@ Grammar(\n         \"SOURCE_FILE\",\n \n         \"STRUCT_DEF\",\n+        \"UNION_DEF\",\n         \"ENUM_DEF\",\n         \"FN_DEF\",\n         \"RET_TYPE\",\n@@ -285,6 +286,15 @@ Grammar(\n                 \"DocCommentsOwner\"\n             ]\n         ),\n+        \"UnionDef\": (\n+            traits: [\n+                \"VisibilityOwner\",\n+                \"NameOwner\",\n+                \"TypeParamsOwner\",\n+                \"AttrsOwner\",\n+                \"DocCommentsOwner\"\n+            ]\n+        ),\n         \"RecordFieldDefList\": (collections: [(\"fields\", \"RecordFieldDef\")]),\n         \"RecordFieldDef\": (\n             traits: ["}, {"sha": "9d798268463d1d959cb93f520225865380b5e917", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0068_union_items.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt?ref=e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 51)\n-  STRUCT_DEF@[0; 12)\n+  UNION_DEF@[0; 12)\n     UNION_KW@[0; 5) \"union\"\n     WHITESPACE@[5; 6) \" \"\n     NAME@[6; 9)\n@@ -9,7 +9,7 @@ SOURCE_FILE@[0; 51)\n       L_CURLY@[10; 11) \"{\"\n       R_CURLY@[11; 12) \"}\"\n   WHITESPACE@[12; 13) \"\\n\"\n-  STRUCT_DEF@[13; 50)\n+  UNION_DEF@[13; 50)\n     UNION_KW@[13; 18) \"union\"\n     WHITESPACE@[18; 19) \" \"\n     NAME@[19; 22)"}, {"sha": "90538b90daa858ae86308759ea677f57308553fe", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt?ref=e1c0bdaf75f8d88a5c28b3e44def17d91d4f46b3", "patch": "@@ -1592,7 +1592,7 @@ SOURCE_FILE@[0; 3813)\n       BLOCK@[2845; 2906)\n         L_CURLY@[2845; 2846) \"{\"\n         WHITESPACE@[2846; 2851) \"\\n    \"\n-        STRUCT_DEF@[2851; 2904)\n+        UNION_DEF@[2851; 2904)\n           UNION_KW@[2851; 2856) \"union\"\n           WHITESPACE@[2856; 2857) \" \"\n           NAME@[2857; 2862)"}]}