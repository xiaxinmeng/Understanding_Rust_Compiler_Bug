{"sha": "199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OWIwYmFkM2MyMzNiYTViZWM4ODk1ZWZlNmM4ODg4YzljZTViZWU=", "commit": {"author": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-04-11T15:00:27Z"}, "committer": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-04-11T15:27:46Z"}, "message": "improve error messages", "tree": {"sha": "538cc363d9a34b52bb9872f98ab0fe19ffced524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/538cc363d9a34b52bb9872f98ab0fe19ffced524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "html_url": "https://github.com/rust-lang/rust/commit/199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbcbd2c3bb52cd6c53c45a6a2476d510c892d2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbcbd2c3bb52cd6c53c45a6a2476d510c892d2cc", "html_url": "https://github.com/rust-lang/rust/commit/cbcbd2c3bb52cd6c53c45a6a2476d510c892d2cc"}], "stats": {"total": 100, "additions": 83, "deletions": 17}, "files": [{"sha": "2daa4fd27ce5634c71160760dceb4541e3d0215b", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "patch": "@@ -333,8 +333,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 lhs_ty);\n \n                             if !lhs_expr.span.eq(&rhs_expr.span) {\n-                                self.add_type_neq_err_label(&mut err, lhs_expr.span, lhs_ty);\n-                                self.add_type_neq_err_label(&mut err, rhs_expr.span, rhs_ty);\n+                                self.add_type_neq_err_label(&mut err,\n+                                                            lhs_expr.span,\n+                                                            lhs_ty,\n+                                                            rhs_ty,\n+                                                            op,\n+                                                            is_assign);\n+                                self.add_type_neq_err_label(&mut err,\n+                                                            rhs_expr.span,\n+                                                            rhs_ty,\n+                                                            lhs_ty,\n+                                                            op,\n+                                                            is_assign);\n                             }\n \n                             let mut suggested_deref = false;\n@@ -420,10 +430,40 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         err: &mut errors::DiagnosticBuilder<'_>,\n         span: Span,\n         ty: Ty<'tcx>,\n+        other_ty: Ty<'tcx>,\n+        op: hir::BinOp,\n+        is_assign: IsAssign,\n     ) {\n         err.span_label(span, ty.to_string());\n-        if let FnDef(..) = ty.sty {\n-            err.span_label(span, \"did you forget `()`?\");\n+        if let FnDef(def_id, _) = ty.sty {\n+            let source_map = self.tcx.sess.source_map();\n+            let hir_id = &self.tcx.hir().as_local_hir_id(def_id).unwrap();\n+            let fn_sig = {\n+                match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(*hir_id) {\n+                    Some(f) => f.clone(),\n+                    None => {\n+                        bug!(\"No fn-sig entry for def_id={:?}\", def_id);\n+                    }\n+                }\n+            };\n+\n+            if self.lookup_op_method(fn_sig.output(),\n+                                    &[other_ty],\n+                                    Op::Binary(op, is_assign))\n+                    .is_ok() {\n+                let variable_snippet = if fn_sig.inputs().len() > 0 {\n+                    format!(\"{}( /* arguments */ )\", source_map.span_to_snippet(span).unwrap())\n+                } else {\n+                    format!(\"{}()\", source_map.span_to_snippet(span).unwrap())\n+                };\n+\n+                err.span_suggestion(\n+                    span,\n+                    \"did you forget\",\n+                    variable_snippet,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         }\n     }\n "}, {"sha": "07b93d9aae7ed6302a16e1a000fc369a03ca8881", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "patch": "@@ -2,12 +2,9 @@ error[E0369]: binary operation `==` cannot be applied to type `fn() {main::f}`\n   --> $DIR/fn-compare-mismatch.rs:4:15\n    |\n LL |     let x = f == g;\n-   |             - ^^ -\n-   |             |    |\n-   |             |    fn() {main::g}\n-   |             |    did you forget `()`?\n+   |             - ^^ - fn() {main::g}\n+   |             |\n    |             fn() {main::f}\n-   |             did you forget `()`?\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `fn() {main::f}`\n "}, {"sha": "ab501a2c8ec7cde4fb0bb54807721ecf15eaaa18", "filename": "src/test/ui/issues/issue-59488.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs?ref=199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "patch": "@@ -1,9 +1,19 @@\n+// ignore-tidy-linelength\n+\n fn foo() -> i32 {\n     42\n }\n \n+fn bar(a: i64) -> i64 {\n+    43\n+}\n+\n fn main() {\n     foo > 12;\n-    //~^ ERROR 6:9: 6:10: binary operation `>` cannot be applied to type `fn() -> i32 {foo}` [E0369]\n-    //~| ERROR 6:11: 6:13: mismatched types [E0308]\n+    //~^ ERROR 12:9: 12:10: binary operation `>` cannot be applied to type `fn() -> i32 {foo}` [E0369]\n+    //~| ERROR 12:11: 12:13: mismatched types [E0308]\n+\n+    bar > 13;\n+    //~^ ERROR 16:9: 16:10: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}` [E0369]\n+    //~| ERROR 16:11: 16:13: mismatched types [E0308]\n }"}, {"sha": "2eaf4220a42c5b5fc251301f061da5f1c1a35cce", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "patch": "@@ -1,24 +1,44 @@\n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:6:9\n+  --> $DIR/issue-59488.rs:12:9\n    |\n LL |     foo > 12;\n    |     --- ^ -- {integer}\n    |     |\n    |     fn() -> i32 {foo}\n-   |     did you forget `()`?\n+   |     help: did you forget: `foo()`\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:6:11\n+  --> $DIR/issue-59488.rs:12:11\n    |\n LL |     foo > 12;\n    |           ^^ expected fn item, found integer\n    |\n    = note: expected type `fn() -> i32 {foo}`\n-              found type `{integer}`\n+              found type `i32`\n \n-error: aborting due to 2 previous errors\n+error[E0369]: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}`\n+  --> $DIR/issue-59488.rs:16:9\n+   |\n+LL |     bar > 13;\n+   |     --- ^ -- {integer}\n+   |     |\n+   |     fn(i64) -> i64 {bar}\n+   |     help: did you forget: `bar( /* arguments */ )`\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn(i64) -> i64 {bar}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-59488.rs:16:11\n+   |\n+LL |     bar > 13;\n+   |           ^^ expected fn item, found integer\n+   |\n+   = note: expected type `fn(i64) -> i64 {bar}`\n+              found type `i64`\n+\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0308, E0369.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "8899b0d43cd8bb31e3d646622556e783fb15461a", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/199b0bad3c233ba5bec8895efe6c8888c9ce5bee/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=199b0bad3c233ba5bec8895efe6c8888c9ce5bee", "patch": "@@ -44,7 +44,6 @@ LL |     f<X>();\n    |     -^- X\n    |     |\n    |     fn() {f::<_>}\n-   |     did you forget `()`?\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() {f::<_>}`\n "}]}