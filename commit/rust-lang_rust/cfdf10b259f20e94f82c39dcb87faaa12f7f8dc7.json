{"sha": "cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7", "node_id": "C_kwDOAAsO6NoAKGNmZGYxMGIyNTlmMjBlOTRmODJjMzlkY2I4N2ZhYWExMmY3ZjhkYzc", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T02:58:53Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-22T16:28:14Z"}, "message": "x86 inline asm support", "tree": {"sha": "bd25a1b13c94ce8f4f81fd7642554de47be7fde7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd25a1b13c94ce8f4f81fd7642554de47be7fde7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7", "html_url": "https://github.com/rust-lang/rust/commit/cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf88c5b5299dfe721cb777b1632a18f8fff3cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf88c5b5299dfe721cb777b1632a18f8fff3cd0", "html_url": "https://github.com/rust-lang/rust/commit/eaf88c5b5299dfe721cb777b1632a18f8fff3cd0"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "35876e57f3579d80814eb38def9926cd6fb27d7a", "filename": "src/inline_asm.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=cfdf10b259f20e94f82c39dcb87faaa12f7f8dc7", "patch": "@@ -493,6 +493,10 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n \n     fn prologue(generated_asm: &mut String, arch: InlineAsmArch) {\n         match arch {\n+            InlineAsmArch::X86 => {\n+                generated_asm.push_str(\"    push ebp\\n\");\n+                generated_asm.push_str(\"    mov ebp,[esp+8]\\n\");\n+            }\n             InlineAsmArch::X86_64 => {\n                 generated_asm.push_str(\"    push rbp\\n\");\n                 generated_asm.push_str(\"    mov rbp,rdi\\n\");\n@@ -503,6 +507,10 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n \n     fn epilogue(generated_asm: &mut String, arch: InlineAsmArch) {\n         match arch {\n+            InlineAsmArch::X86 => {\n+                generated_asm.push_str(\"    pop ebp\\n\");\n+                generated_asm.push_str(\"    ret\\n\");\n+            }\n             InlineAsmArch::X86_64 => {\n                 generated_asm.push_str(\"    pop rbp\\n\");\n                 generated_asm.push_str(\"    ret\\n\");\n@@ -513,7 +521,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n \n     fn epilogue_noreturn(generated_asm: &mut String, arch: InlineAsmArch) {\n         match arch {\n-            InlineAsmArch::X86_64 => {\n+            InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n                 generated_asm.push_str(\"    ud2\\n\");\n             }\n             _ => unimplemented!(\"epilogue_noreturn for {:?}\", arch),\n@@ -527,6 +535,11 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         offset: Size,\n     ) {\n         match arch {\n+            InlineAsmArch::X86 => {\n+                write!(generated_asm, \"    mov [ebp+0x{:x}], \", offset.bytes()).unwrap();\n+                reg.emit(generated_asm, InlineAsmArch::X86, None).unwrap();\n+                generated_asm.push('\\n');\n+            }\n             InlineAsmArch::X86_64 => {\n                 write!(generated_asm, \"    mov [rbp+0x{:x}], \", offset.bytes()).unwrap();\n                 reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();\n@@ -543,6 +556,11 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         offset: Size,\n     ) {\n         match arch {\n+            InlineAsmArch::X86 => {\n+                generated_asm.push_str(\"    mov \");\n+                reg.emit(generated_asm, InlineAsmArch::X86, None).unwrap();\n+                writeln!(generated_asm, \", [ebp+0x{:x}]\", offset.bytes()).unwrap();\n+            }\n             InlineAsmArch::X86_64 => {\n                 generated_asm.push_str(\"    mov \");\n                 reg.emit(generated_asm, InlineAsmArch::X86_64, None).unwrap();"}]}