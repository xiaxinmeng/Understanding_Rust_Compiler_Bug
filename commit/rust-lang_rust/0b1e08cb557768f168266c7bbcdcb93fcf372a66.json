{"sha": "0b1e08cb557768f168266c7bbcdcb93fcf372a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMWUwOGNiNTU3NzY4ZjE2ODI2NmM3YmJjZGNiOTNmY2YzNzJhNjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-17T15:03:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-17T15:08:13Z"}, "message": "parse: recover `mut (x @ y)` as `(mut x @ mut y)`.", "tree": {"sha": "6e1f2aa851a0c8531e1562899b25aae4e097120c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e1f2aa851a0c8531e1562899b25aae4e097120c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b1e08cb557768f168266c7bbcdcb93fcf372a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1e08cb557768f168266c7bbcdcb93fcf372a66", "html_url": "https://github.com/rust-lang/rust/commit/0b1e08cb557768f168266c7bbcdcb93fcf372a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b1e08cb557768f168266c7bbcdcb93fcf372a66/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b98fbe77d472d85d1691bae5b25e7eefb3609c", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b98fbe77d472d85d1691bae5b25e7eefb3609c", "html_url": "https://github.com/rust-lang/rust/commit/75b98fbe77d472d85d1691bae5b25e7eefb3609c"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "520d325f16b61fbc6b5dc0f2d5e71fa966409290", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0b1e08cb557768f168266c7bbcdcb93fcf372a66/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1e08cb557768f168266c7bbcdcb93fcf372a66/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=0b1e08cb557768f168266c7bbcdcb93fcf372a66", "patch": "@@ -503,17 +503,18 @@ impl<'a> Parser<'a> {\n         // Parse the pattern we hope to be an identifier.\n         let mut pat = self.parse_pat(Some(\"identifier\"))?;\n \n-        // Add `mut` to any binding in the parsed pattern.\n-        let changed_any_binding = Self::make_all_value_bindings_mutable(&mut pat);\n-\n-        // Unwrap; If we don't have `mut $ident`, error.\n-        let pat = pat.into_inner();\n-        match &pat.kind {\n-            PatKind::Ident(..) => {}\n-            _ => self.ban_mut_general_pat(mut_span, &pat, changed_any_binding),\n+        // If we don't have `mut $ident (@ pat)?`, error.\n+        if let PatKind::Ident(BindingMode::ByValue(m @ Mutability::Not), ..) = &mut pat.kind {\n+            // Don't recurse into the subpattern.\n+            // `mut` on the outer binding doesn't affect the inner bindings.\n+            *m = Mutability::Mut;\n+        } else {\n+            // Add `mut` to any binding in the parsed pattern.\n+            let changed_any_binding = Self::make_all_value_bindings_mutable(&mut pat);\n+            self.ban_mut_general_pat(mut_span, &pat, changed_any_binding);\n         }\n \n-        Ok(pat.kind)\n+        Ok(pat.into_inner().kind)\n     }\n \n     /// Recover on `mut ref? ident @ pat` and suggest\n@@ -542,14 +543,10 @@ impl<'a> Parser<'a> {\n             }\n \n             fn visit_pat(&mut self, pat: &mut P<Pat>) {\n-                if let PatKind::Ident(ref mut bm, ..) = pat.kind {\n-                    if let BindingMode::ByValue(ref mut m @ Mutability::Not) = bm {\n-                        *m = Mutability::Mut;\n-                    }\n+                if let PatKind::Ident(BindingMode::ByValue(m @ Mutability::Not), ..) = &mut pat.kind\n+                {\n                     self.0 = true;\n-                    // Don't recurse into the subpattern, mut on the outer\n-                    // binding doesn't affect the inner bindings.\n-                    return;\n+                    *m = Mutability::Mut;\n                 }\n                 noop_visit_pat(pat, self);\n             }"}, {"sha": "8b83d6ab2f8c841f1615629e94bd0a151905b3d5", "filename": "src/test/ui/parser/mut-patterns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b1e08cb557768f168266c7bbcdcb93fcf372a66/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1e08cb557768f168266c7bbcdcb93fcf372a66/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs?ref=0b1e08cb557768f168266c7bbcdcb93fcf372a66", "patch": "@@ -9,6 +9,8 @@ pub fn main() {\n     let mut _ = 0; //~ ERROR `mut` must be followed by a named binding\n     let mut (_, _) = (0, 0); //~ ERROR `mut` must be followed by a named binding\n \n+    let mut (x @ y) = 0; //~ ERROR `mut` must be attached to each individual binding\n+\n     let mut mut x = 0;\n     //~^ ERROR `mut` on a binding may not be repeated\n     //~| remove the additional `mut`s"}, {"sha": "9a6af7394bf4a41a71e5ba2ca400ca81ddcf0702", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b1e08cb557768f168266c7bbcdcb93fcf372a66/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b1e08cb557768f168266c7bbcdcb93fcf372a66/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=0b1e08cb557768f168266c7bbcdcb93fcf372a66", "patch": "@@ -14,36 +14,44 @@ LL |     let mut (_, _) = (0, 0);\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n+error: `mut` must be attached to each individual binding\n+  --> $DIR/mut-patterns.rs:12:9\n+   |\n+LL |     let mut (x @ y) = 0;\n+   |         ^^^^^^^^^^^ help: add `mut` to each binding: `(mut x @ mut y)`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n+\n error: `mut` on a binding may not be repeated\n-  --> $DIR/mut-patterns.rs:12:13\n+  --> $DIR/mut-patterns.rs:14:13\n    |\n LL |     let mut mut x = 0;\n    |             ^^^ help: remove the additional `mut`s\n \n error: `mut` must be attached to each individual binding\n-  --> $DIR/mut-patterns.rs:17:9\n+  --> $DIR/mut-patterns.rs:19:9\n    |\n LL |     let mut Foo { x: x } = Foo { x: 3 };\n    |         ^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `Foo { x: mut x }`\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: `mut` must be attached to each individual binding\n-  --> $DIR/mut-patterns.rs:21:9\n+  --> $DIR/mut-patterns.rs:23:9\n    |\n LL |     let mut Foo { x } = Foo { x: 3 };\n    |         ^^^^^^^^^^^^^ help: add `mut` to each binding: `Foo { mut x }`\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: `mut` on a binding may not be repeated\n-  --> $DIR/mut-patterns.rs:26:13\n+  --> $DIR/mut-patterns.rs:28:13\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |             ^^^ help: remove the additional `mut`s\n \n error: expected identifier, found reserved keyword `yield`\n-  --> $DIR/mut-patterns.rs:26:17\n+  --> $DIR/mut-patterns.rs:28:17\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                 ^^^^^ expected identifier, found reserved keyword\n@@ -54,7 +62,7 @@ LL |     let mut mut r#yield(become, await) = r#yield(0, 0);\n    |                 ^^^^^^^\n \n error: expected identifier, found reserved keyword `become`\n-  --> $DIR/mut-patterns.rs:26:23\n+  --> $DIR/mut-patterns.rs:28:23\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                       ^^^^^^ expected identifier, found reserved keyword\n@@ -65,7 +73,7 @@ LL |     let mut mut yield(r#become, await) = r#yield(0, 0);\n    |                       ^^^^^^^^\n \n error: expected identifier, found keyword `await`\n-  --> $DIR/mut-patterns.rs:26:31\n+  --> $DIR/mut-patterns.rs:28:31\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                               ^^^^^ expected identifier, found keyword\n@@ -76,23 +84,23 @@ LL |     let mut mut yield(become, r#await) = r#yield(0, 0);\n    |                               ^^^^^^^\n \n error: `mut` must be attached to each individual binding\n-  --> $DIR/mut-patterns.rs:26:9\n+  --> $DIR/mut-patterns.rs:28:9\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `r#yield(mut r#become, mut r#await)`\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: `mut` must be attached to each individual binding\n-  --> $DIR/mut-patterns.rs:35:9\n+  --> $DIR/mut-patterns.rs:37:9\n    |\n LL |     let mut W(mut a, W(b, W(ref c, W(d, B { box f }))))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `W(mut a, W(mut b, W(ref c, W(mut d, B { box mut f }))))`\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n \n error: expected identifier, found `x`\n-  --> $DIR/mut-patterns.rs:42:21\n+  --> $DIR/mut-patterns.rs:44:21\n    |\n LL |             let mut $p = 0;\n    |                     ^^ expected identifier\n@@ -102,5 +110,5 @@ LL |     foo!(x);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}