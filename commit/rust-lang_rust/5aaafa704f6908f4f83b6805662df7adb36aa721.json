{"sha": "5aaafa704f6908f4f83b6805662df7adb36aa721", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYWFmYTcwNGY2OTA4ZjRmODNiNjgwNTY2MmRmN2FkYjM2YWE3MjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-14T22:19:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:16:43Z"}, "message": "adjust alignment, size of tag variant id and make it easy to\nadjust in the future", "tree": {"sha": "bb7cdb7845b01b49b774d027fbb72eca458db0da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb7cdb7845b01b49b774d027fbb72eca458db0da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aaafa704f6908f4f83b6805662df7adb36aa721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aaafa704f6908f4f83b6805662df7adb36aa721", "html_url": "https://github.com/rust-lang/rust/commit/5aaafa704f6908f4f83b6805662df7adb36aa721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aaafa704f6908f4f83b6805662df7adb36aa721/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb9675259fd5b807d63a3986154031d38276c2dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9675259fd5b807d63a3986154031d38276c2dd", "html_url": "https://github.com/rust-lang/rust/commit/cb9675259fd5b807d63a3986154031d38276c2dd"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "6f1082d4aa8e137fb29717bc696e365df7a33e5a", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5aaafa704f6908f4f83b6805662df7adb36aa721/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5aaafa704f6908f4f83b6805662df7adb36aa721/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=5aaafa704f6908f4f83b6805662df7adb36aa721", "patch": "@@ -223,7 +223,7 @@ size_of::compute_tag_size(tag_info &tinfo) {\n             tinfo.tag_sa.set(1, 1);\n     } else {\n         // Add in space for the tag.\n-        tinfo.tag_sa.add(sizeof(uint32_t), alignof<uint32_t>());\n+        tinfo.tag_sa.add(sizeof(tag_variant_t), alignof<tag_align_t>());\n     }\n }\n \n@@ -357,12 +357,12 @@ class cmp : public data<cmp,ptr_pair> {\n     void walk_fn()  { return cmp_two_pointers(); }\n     void walk_obj() { return cmp_two_pointers(); }\n \n-    void walk_tag(tag_info &tinfo, const data_pair<uint32_t> &tag_variants);\n+    void walk_tag(tag_info &tinfo, const data_pair<tag_variant_t> &tag_variants);\n     void walk_struct(const uint8_t *end_sp);\n     void walk_res(const rust_fn *dtor, uint16_t n_ty_params,\n                   const type_param *ty_params_sp, const uint8_t *end_sp,\n                   const data_pair<uintptr_t> &live);\n-    void walk_variant(tag_info &tinfo, uint32_t variant_id,\n+    void walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n \n@@ -394,7 +394,7 @@ cmp::walk_vec(bool is_pod, const std::pair<ptr_pair,ptr_pair> &data_range) {\n }\n \n void\n-cmp::walk_tag(tag_info &tinfo, const data_pair<uint32_t> &tag_variants) {\n+cmp::walk_tag(tag_info &tinfo, const data_pair<tag_variant_t> &tag_variants) {\n     cmp_number(tag_variants);\n     if (result != 0)\n         return;\n@@ -417,7 +417,7 @@ cmp::walk_res(const rust_fn *dtor, uint16_t n_ty_params,\n }\n \n void\n-cmp::walk_variant(tag_info &tinfo, uint32_t variant_id,\n+cmp::walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n                   const std::pair<const uint8_t *,const uint8_t *>\n                   variant_ptr_and_end) {\n     cmp sub(*this, variant_ptr_and_end.first, tinfo.params);\n@@ -489,7 +489,7 @@ log::walk_vec(bool is_pod, const std::pair<ptr,ptr> &data) {\n }\n \n void\n-log::walk_variant(tag_info &tinfo, uint32_t variant_id,\n+log::walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n                   const std::pair<const uint8_t *,const uint8_t *>\n                   variant_ptr_and_end) {\n     log sub(*this, variant_ptr_and_end.first, tinfo.params);"}, {"sha": "fffd19efbe8f54496d473c581b6febc8ff9f446a", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aaafa704f6908f4f83b6805662df7adb36aa721/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/5aaafa704f6908f4f83b6805662df7adb36aa721/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=5aaafa704f6908f4f83b6805662df7adb36aa721", "patch": "@@ -25,6 +25,8 @@\n \n namespace shape {\n \n+typedef unsigned long tag_variant_t;\n+typedef unsigned long tag_align_t;\n \n // Constants\n \n@@ -234,7 +236,7 @@ class ctxt {\n     void walk_reset();\n \n     std::pair<const uint8_t *,const uint8_t *>\n-    get_variant_sp(tag_info &info, uint32_t variant_id);\n+    get_variant_sp(tag_info &info, tag_variant_t variant_id);\n \n protected:\n     inline uint8_t peek() { return *sp; }\n@@ -406,7 +408,7 @@ ctxt<T>::get_size_align(const uint8_t *&addr) {\n // the tag variant with the given ID.\n template<typename T>\n std::pair<const uint8_t *,const uint8_t *>\n-ctxt<T>::get_variant_sp(tag_info &tinfo, uint32_t variant_id) {\n+ctxt<T>::get_variant_sp(tag_info &tinfo, tag_variant_t variant_id) {\n     uint16_t variant_offset = get_u16(tinfo.info_ptr +\n                                       variant_id * sizeof(uint16_t));\n     const uint8_t *variant_ptr = tables->tags + variant_offset;\n@@ -816,7 +818,7 @@ class data : public ctxt< data<T,U> > {\n     void walk_uniq_contents();\n     void walk_fn_contents(ptr &dp);\n     void walk_obj_contents(ptr &dp);\n-    void walk_variant(tag_info &tinfo, uint32_t variant);\n+    void walk_variant(tag_info &tinfo, tag_variant_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_vec_data_range(ptr dp);\n     static std::pair<ptr_pair,ptr_pair> get_vec_data_range(ptr_pair &dp);\n@@ -901,7 +903,7 @@ data<T,U>::walk_uniq_contents() {\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_variant(tag_info &tinfo, uint32_t variant_id) {\n+data<T,U>::walk_variant(tag_info &tinfo, tag_variant_t variant_id) {\n     std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n         this->get_variant_sp(tinfo, variant_id);\n     static_cast<T *>(this)->walk_variant(tinfo, variant_id,\n@@ -932,13 +934,13 @@ data<T,U>::walk_tag(tag_info &tinfo) {\n     size_of::compute_tag_size(*this, tinfo);\n \n     if (tinfo.variant_count > 1)\n-        ALIGN_TO(alignof<uint32_t>());\n+        ALIGN_TO(alignof<tag_align_t>());\n \n     U end_dp = dp + tinfo.tag_sa.size;\n \n-    typename U::template data<uint32_t>::t tag_variant;\n+    typename U::template data<tag_variant_t>::t tag_variant;\n     if (tinfo.variant_count > 1)\n-        tag_variant = bump_dp<uint32_t>(dp);\n+        tag_variant = bump_dp<tag_variant_t>(dp);\n     else\n         tag_variant = 0;\n \n@@ -1047,7 +1049,7 @@ class log : public data<log,ptr> {\n             walk_vec(is_pod, get_vec_data_range(dp));\n     }\n \n-    void walk_tag(tag_info &tinfo, uint32_t tag_variant) {\n+    void walk_tag(tag_info &tinfo, tag_variant_t tag_variant) {\n         out << prefix << \"tag\" << tag_variant;\n         data<log,ptr>::walk_variant(tinfo, tag_variant);\n     }\n@@ -1096,7 +1098,7 @@ class log : public data<log,ptr> {\n \n     void walk_struct(const uint8_t *end_sp);\n     void walk_vec(bool is_pod, const std::pair<ptr,ptr> &data);\n-    void walk_variant(tag_info &tinfo, uint32_t variant_id,\n+    void walk_variant(tag_info &tinfo, tag_variant_t variant_id,\n                       const std::pair<const uint8_t *,const uint8_t *>\n                       variant_ptr_and_end);\n     void walk_string(const std::pair<ptr,ptr> &data);"}]}