{"sha": "5f2d35ed0853f0fb7bb72f633794b8b8da5cd713", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMmQzNWVkMDg1M2YwZmI3YmI3MmY2MzM3OTRiOGI4ZGE1Y2Q3MTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-06T22:41:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-06T22:41:14Z"}, "message": "Make ast node box uses more uniform in rustc.", "tree": {"sha": "1379e836f14d8698bb5b93df3e99ad77dc3d4d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1379e836f14d8698bb5b93df3e99ad77dc3d4d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713", "html_url": "https://github.com/rust-lang/rust/commit/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6", "html_url": "https://github.com/rust-lang/rust/commit/8ecbe49a8fa8b4bb17c2d798d5de6fc0303c5bc6"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "74126b967f96dd509e65ade01029a1351098dc37", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5f2d35ed0853f0fb7bb72f633794b8b8da5cd713", "patch": "@@ -9,7 +9,7 @@ import util.common.none;\n \n type ident = str;\n \n-type name_ = rec(ident ident, vec[ty] types);\n+type name_ = rec(ident ident, vec[@ty] types);\n type name = spanned[name_];\n type path = vec[name];\n \n@@ -76,7 +76,7 @@ tag stmt_ {\n \n type decl = spanned[decl_];\n tag decl_ {\n-    decl_local(ident, option[ty], ty);\n+    decl_local(ident, option[@ty], ty);\n     decl_item(name, @item);\n }\n \n@@ -92,7 +92,7 @@ tag expr_ {\n     expr_name(name, option[referent]);\n     expr_field(@expr, ident);\n     expr_index(@expr, @expr);\n-    expr_cast(@expr, ty);\n+    expr_cast(@expr, @ty);\n     expr_if(@expr, block, option[block]);\n     expr_block(block);\n }\n@@ -125,18 +125,18 @@ tag mode {\n     alias;\n }\n \n-type slot = rec(ty ty, mode mode, option[slot_id] id);\n+type slot = rec(@ty ty, mode mode, option[slot_id] id);\n \n type _fn = rec(vec[rec(slot slot, ident ident)] inputs,\n                slot output,\n                block body);\n \n-type _mod = hashmap[ident,item];\n+type _mod = hashmap[ident,@item];\n \n type item = spanned[item_];\n tag item_ {\n-    item_fn(@_fn, item_id);\n-    item_mod(@_mod);\n+    item_fn(_fn, item_id);\n+    item_mod(_mod);\n     item_ty(@ty, item_id);\n }\n "}, {"sha": "ef0cc6c308373abb53b71e6de30c4caca9ab5ca2", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5f2d35ed0853f0fb7bb72f633794b8b8da5cd713", "patch": "@@ -83,7 +83,7 @@ io fn parse_ident(parser p) -> ast.ident {\n     }\n }\n \n-io fn parse_ty(parser p) -> ast.ty {\n+io fn parse_ty(parser p) -> @ast.ty {\n     auto lo = p.get_span();\n     let ast.ty_ t;\n     alt (p.peek()) {\n@@ -98,7 +98,7 @@ io fn parse_ty(parser p) -> ast.ty {\n             fail;\n         }\n     }\n-    ret spanned(lo, lo, t);\n+    ret @spanned(lo, lo, t);\n }\n \n io fn parse_slot(parser p) -> ast.slot {\n@@ -107,7 +107,7 @@ io fn parse_slot(parser p) -> ast.slot {\n         m = ast.alias;\n         p.bump();\n     }\n-    let ast.ty t = parse_ty(p);\n+    let @ast.ty t = parse_ty(p);\n     ret rec(ty=t, mode=m, id=none[ast.slot_id]);\n }\n \n@@ -180,16 +180,16 @@ io fn parse_name(parser p, ast.ident id) -> ast.name {\n \n     p.bump();\n \n-    let vec[ast.ty] v = vec();\n-    let util.common.spanned[vec[ast.ty]] tys = rec(node=v, span=lo);\n+    let vec[@ast.ty] v = vec();\n+    let util.common.spanned[vec[@ast.ty]] tys = rec(node=v, span=lo);\n \n     alt (p.peek()) {\n         case (token.LBRACKET) {\n             auto pf = parse_ty;\n-            tys = parse_seq[ast.ty](token.LBRACKET,\n-                                    token.RBRACKET,\n-                                    some(token.COMMA),\n-                                    pf, p);\n+            tys = parse_seq[@ast.ty](token.LBRACKET,\n+                                     token.RBRACKET,\n+                                     some(token.COMMA),\n+                                     pf, p);\n         }\n         case (_) {\n         }\n@@ -589,7 +589,7 @@ io fn parse_slot_ident_pair(parser p) ->\n     ret rec(slot=s, ident=i);\n }\n \n-io fn parse_fn(parser p) -> tup(ast.ident, ast.item) {\n+io fn parse_fn(parser p) -> tup(ast.ident, @ast.item) {\n     auto lo = p.get_span();\n     expect(p, token.FN);\n     auto id = parse_ident(p);\n@@ -608,7 +608,7 @@ io fn parse_fn(parser p) -> tup(ast.ident, ast.item) {\n         p.bump();\n         output = rec(ty=parse_ty(p), mode=ast.val, id=none[ast.slot_id]);\n     } else {\n-        output = rec(ty=spanned(lo, inputs.span, ast.ty_nil),\n+        output = rec(ty=@spanned(lo, inputs.span, ast.ty_nil),\n                      mode=ast.val, id=none[ast.slot_id]);\n     }\n \n@@ -618,27 +618,27 @@ io fn parse_fn(parser p) -> tup(ast.ident, ast.item) {\n                         output = output,\n                         body = body);\n \n-    let ast.item i = spanned(lo, body.span,\n-                             ast.item_fn(@f, ast.id_item(0,0)));\n+    let @ast.item i = @spanned(lo, body.span,\n+                               ast.item_fn(f, ast.id_item(0,0)));\n     ret tup(id, i);\n }\n \n-io fn parse_mod(parser p) -> tup(ast.ident, ast.item) {\n+io fn parse_mod(parser p) -> tup(ast.ident, @ast.item) {\n     auto lo = p.get_span();\n     expect(p, token.MOD);\n     auto id = parse_ident(p);\n     expect(p, token.LBRACE);\n-    let ast._mod m = new_str_hash[ast.item]();\n+    let ast._mod m = new_str_hash[@ast.item]();\n     while (p.peek() != token.RBRACE) {\n         auto i = parse_item(p);\n         m.insert(i._0, i._1);\n     }\n     auto hi = p.get_span();\n     expect(p, token.RBRACE);\n-    ret tup(id, spanned(lo, hi, ast.item_mod(@m)));\n+    ret tup(id, @spanned(lo, hi, ast.item_mod(m)));\n }\n \n-io fn parse_item(parser p) -> tup(ast.ident, ast.item) {\n+io fn parse_item(parser p) -> tup(ast.ident, @ast.item) {\n     alt (p.peek()) {\n         case (token.FN) {\n             ret parse_fn(p);\n@@ -654,7 +654,7 @@ io fn parse_item(parser p) -> tup(ast.ident, ast.item) {\n io fn parse_crate(parser p) -> ast.crate {\n     auto lo = p.get_span();\n     auto hi = lo;\n-    let ast._mod m = new_str_hash[ast.item]();\n+    let ast._mod m = new_str_hash[@ast.item]();\n     while (p.peek() != token.EOF) {\n         auto i = parse_item(p);\n         m.insert(i._0, i._1);"}, {"sha": "7d1ad40d1b82315b96a00a861ec06c1aa9ac1e86", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2d35ed0853f0fb7bb72f633794b8b8da5cd713/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5f2d35ed0853f0fb7bb72f633794b8b8da5cd713", "patch": "@@ -728,17 +728,17 @@ fn trans_item(@trans_ctxt cx, &str name, &ast.item item) {\n     auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n     alt (item.node) {\n         case (ast.item_fn(?f, _)) {\n-            trans_fn(sub_cx, *f);\n+            trans_fn(sub_cx, f);\n         }\n         case (ast.item_mod(?m)) {\n-            trans_mod(sub_cx, *m);\n+            trans_mod(sub_cx, m);\n         }\n     }\n }\n \n fn trans_mod(@trans_ctxt cx, &ast._mod m) {\n-    for each (tup(str, ast.item) pair in m.items()) {\n-        trans_item(cx, pair._0, pair._1);\n+    for each (tup(str, @ast.item) pair in m.items()) {\n+        trans_item(cx, pair._0, *pair._1);\n     }\n }\n "}]}