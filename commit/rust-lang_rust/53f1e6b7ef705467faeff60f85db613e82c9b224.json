{"sha": "53f1e6b7ef705467faeff60f85db613e82c9b224", "node_id": "C_kwDOAAsO6NoAKDUzZjFlNmI3ZWY3MDU0NjdmYWVmZjYwZjg1ZGI2MTNlODJjOWIyMjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-04T00:55:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-28T23:23:43Z"}, "message": "Use `Cow` in `{D,Subd}iagnosticMessage`.\n\nEach of `{D,Subd}iagnosticMessage::{Str,Eager}` has a comment:\n```\n// FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n```\nThis commit answers that question in the affirmative. It's not the most\ncompelling change ever, but it might be worth merging.\n\nThis requires changing the `impl<'a> From<&'a str>` impls to `impl\nFrom<&'static str>`, which involves a bunch of knock-on changes that\nrequire/result in call sites being a little more precise about exactly\nwhat kind of string they use to create errors, and not just `&str`. This\nwill result in fewer unnecessary allocations, though this will not have\nany notable perf effects given that these are error paths.\n\nNote that I was lazy within Clippy, using `to_string` in a few places to\npreserve the existing string imprecision. I could have used `impl\nInto<{D,Subd}iagnosticMessage>` in various places as is done in the\ncompiler, but that would have required changes to *many* call sites\n(mostly changing `&format(\"...\")` to `format!(\"...\")`) which didn't seem\nworthwhile.", "tree": {"sha": "6906d638c0011604253aac5ce96c4ede2df834a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6906d638c0011604253aac5ce96c4ede2df834a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f1e6b7ef705467faeff60f85db613e82c9b224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f1e6b7ef705467faeff60f85db613e82c9b224", "html_url": "https://github.com/rust-lang/rust/commit/53f1e6b7ef705467faeff60f85db613e82c9b224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f1e6b7ef705467faeff60f85db613e82c9b224/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37852e54b5617ef72fcfd425664d9e8b19aa9af", "url": "https://api.github.com/repos/rust-lang/rust/commits/a37852e54b5617ef72fcfd425664d9e8b19aa9af", "html_url": "https://github.com/rust-lang/rust/commit/a37852e54b5617ef72fcfd425664d9e8b19aa9af"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "3b7eccad79df8c710ad0f1f5b89ab18c0a117adb", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=53f1e6b7ef705467faeff60f85db613e82c9b224", "patch": "@@ -154,7 +154,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, &self.msrv) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n-                cx.tcx.sess.span_err(span, err.as_ref());\n+                cx.tcx.sess.span_err(span, err);\n             }\n         } else {\n             span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const fn`\");"}, {"sha": "7d53fe65658a258ba9cbc7b34863c9eed5b27a72", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=53f1e6b7ef705467faeff60f85db613e82c9b224", "patch": "@@ -26,7 +26,6 @@ use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::misc::type_allowed_to_implement_copy;\n-use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -240,9 +239,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{x}` to\")),\n-                                            )\n-                                            .as_ref(),\n+                                                |x| format!(\"change `{x}` to\"),\n+                                            ),\n                                         suggestion,\n                                         Applicability::Unspecified,\n                                     );\n@@ -270,9 +268,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{x}` to\"))\n-                                            )\n-                                            .as_ref(),\n+                                                |x| format!(\"change `{x}` to\")\n+                                            ),\n                                         suggestion,\n                                         Applicability::Unspecified,\n                                     );"}, {"sha": "5073eb02bd84a049ef2a851af54f1f7e22056e8a", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=53f1e6b7ef705467faeff60f85db613e82c9b224", "patch": "@@ -163,7 +163,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             span_lint_and_then(cx, UNNECESSARY_WRAPS, span, lint_msg.as_str(), |diag| {\n                 diag.span_suggestion(\n                     fn_decl.output.span(),\n-                    return_type_sugg_msg.as_str(),\n+                    return_type_sugg_msg,\n                     return_type_sugg,\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "edd87546a5f880349f1251fc7c36be01bd3ae683", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=53f1e6b7ef705467faeff60f85db613e82c9b224", "patch": "@@ -46,7 +46,7 @@ fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    cx.struct_span_lint(lint, sp, msg, |diag| {\n+    cx.struct_span_lint(lint, sp, msg.to_string(), |diag| {\n         docs_link(diag, lint);\n         diag\n     });\n@@ -80,11 +80,12 @@ pub fn span_lint_and_help<T: LintContext>(\n     help_span: Option<Span>,\n     help: &str,\n ) {\n-    cx.struct_span_lint(lint, span, msg, |diag| {\n+    cx.struct_span_lint(lint, span, msg.to_string(), |diag| {\n+        let help = help.to_string();\n         if let Some(help_span) = help_span {\n-            diag.span_help(help_span, help);\n+            diag.span_help(help_span, help.to_string());\n         } else {\n-            diag.help(help);\n+            diag.help(help.to_string());\n         }\n         docs_link(diag, lint);\n         diag\n@@ -122,7 +123,8 @@ pub fn span_lint_and_note<T: LintContext>(\n     note_span: Option<Span>,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, msg, |diag| {\n+    cx.struct_span_lint(lint, span, msg.to_string(), |diag| {\n+        let note = note.to_string();\n         if let Some(note_span) = note_span {\n             diag.span_note(note_span, note);\n         } else {\n@@ -143,15 +145,15 @@ where\n     S: Into<MultiSpan>,\n     F: FnOnce(&mut Diagnostic),\n {\n-    cx.struct_span_lint(lint, sp, msg, |diag| {\n+    cx.struct_span_lint(lint, sp, msg.to_string(), |diag| {\n         f(diag);\n         docs_link(diag, lint);\n         diag\n     });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg.to_string(), |diag| {\n         docs_link(diag, lint);\n         diag\n     });\n@@ -165,7 +167,7 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut Diagnostic),\n ) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg.to_string(), |diag| {\n         f(diag);\n         docs_link(diag, lint);\n         diag\n@@ -202,7 +204,7 @@ pub fn span_lint_and_sugg<T: LintContext>(\n     applicability: Applicability,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |diag| {\n-        diag.span_suggestion(sp, help, sugg, applicability);\n+        diag.span_suggestion(sp, help.to_string(), sugg, applicability);\n     });\n }\n \n@@ -232,5 +234,5 @@ pub fn multispan_sugg_with_applicability<I>(\n ) where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    diag.multipart_suggestion(help_msg, sugg.into_iter().collect(), applicability);\n+    diag.multipart_suggestion(help_msg.to_string(), sugg.into_iter().collect(), applicability);\n }"}, {"sha": "f477524eec5cc26890c33ef14554c564cf2900de", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f1e6b7ef705467faeff60f85db613e82c9b224/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=53f1e6b7ef705467faeff60f85db613e82c9b224", "patch": "@@ -741,7 +741,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion(span, msg, format!(\"{attr}\\n{indent}\"), applicability);\n+            self.span_suggestion(span, msg.to_string(), format!(\"{attr}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -762,7 +762,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion(span, msg, format!(\"{new_item}\\n{indent}\"), applicability);\n+            self.span_suggestion(span, msg.to_string(), format!(\"{new_item}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -779,7 +779,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n             }\n         }\n \n-        self.span_suggestion(remove_span, msg, \"\", applicability);\n+        self.span_suggestion(remove_span, msg.to_string(), \"\", applicability);\n     }\n }\n "}]}