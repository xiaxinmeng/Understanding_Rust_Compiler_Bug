{"sha": "c020367b820b982a3c0ac86cedc5be6ed732b2fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjAzNjdiODIwYjk4MmEzYzBhYzg2Y2VkYzViZTZlZDczMmIyZmU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-04-14T19:05:56Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-04-16T18:12:01Z"}, "message": "Document the edition behavior for array.into_iter()", "tree": {"sha": "b611c1d022ec3300802d6f9c6ec845e960f4e78c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b611c1d022ec3300802d6f9c6ec845e960f4e78c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c020367b820b982a3c0ac86cedc5be6ed732b2fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c020367b820b982a3c0ac86cedc5be6ed732b2fe", "html_url": "https://github.com/rust-lang/rust/commit/c020367b820b982a3c0ac86cedc5be6ed732b2fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c020367b820b982a3c0ac86cedc5be6ed732b2fe/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "html_url": "https://github.com/rust-lang/rust/commit/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "d4e71f4ef75ee92b6879778970eef668ee331cb1", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c020367b820b982a3c0ac86cedc5be6ed732b2fe/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c020367b820b982a3c0ac86cedc5be6ed732b2fe/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=c020367b820b982a3c0ac86cedc5be6ed732b2fe", "patch": "@@ -164,6 +164,14 @@ impl<T, const N: usize> IntoIterator for [T; N] {\n     type Item = T;\n     type IntoIter = IntoIter<T, N>;\n \n+    /// Creates a consuming iterator, that is, one that moves each value out of\n+    /// the array (from start to end). The array cannot be used after calling\n+    /// this unless `T` implements `Copy`, so the whole array is copied.\n+    ///\n+    /// Arrays have special behavior when calling `.into_iter()` prior to the\n+    /// 2021 edition -- see the [array] Editions section for more information.\n+    ///\n+    /// [array]: prim@array\n     fn into_iter(self) -> Self::IntoIter {\n         IntoIter::new(self)\n     }"}, {"sha": "65113bd71d96e196456aefc7e1cfbf70971fc487", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c020367b820b982a3c0ac86cedc5be6ed732b2fe/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c020367b820b982a3c0ac86cedc5be6ed732b2fe/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=c020367b820b982a3c0ac86cedc5be6ed732b2fe", "patch": "@@ -549,6 +549,56 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// # Editions\n+///\n+/// Prior to Rust 1.53, arrays did not implement `IntoIterator` by value, so the method call\n+/// `array.into_iter()` auto-referenced into a slice iterator. That behavior is preserved in the\n+/// 2015 and 2018 editions of Rust for compatability, ignoring `IntoIterator` by value.\n+///\n+/// ```rust,edition2018\n+/// # #![allow(array_into_iter)] // override our `deny(warnings)`\n+/// let array: [i32; 3] = [0; 3];\n+///\n+/// // This creates a slice iterator, producing references to each value.\n+/// for item in array.into_iter().enumerate() {\n+///     let (i, x): (usize, &i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+///\n+/// // The `array_into_iter` lint suggests this change for future compatibility:\n+/// for item in array.iter().enumerate() {\n+///     let (i, x): (usize, &i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+///\n+/// // You can explicitly iterate an array by value using\n+/// // `IntoIterator::into_iter` or `std::array::IntoIter::new`:\n+/// for item in IntoIterator::into_iter(array).enumerate() {\n+///     let (i, x): (usize, i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+/// ```\n+///\n+/// Starting in the 2021 edition, `array.into_iter()` will use `IntoIterator` normally to iterate\n+/// by value, and `iter()` should be used to iterate by reference like previous editions.\n+///\n+/// ```rust,edition2021,ignore\n+/// # // FIXME: ignored because 2021 testing is still unstable\n+/// let array: [i32; 3] = [0; 3];\n+///\n+/// // This iterates by reference:\n+/// for item in array.iter().enumerate() {\n+///     let (i, x): (usize, &i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+///\n+/// // This iterates by value:\n+/// for item in array.into_iter().enumerate() {\n+///     let (i, x): (usize, i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+/// ```\n+///\n /// [slice]: prim@slice\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash"}]}