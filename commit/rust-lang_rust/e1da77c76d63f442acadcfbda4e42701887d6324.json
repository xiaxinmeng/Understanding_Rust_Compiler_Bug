{"sha": "e1da77c76d63f442acadcfbda4e42701887d6324", "node_id": "C_kwDOAAsO6NoAKGUxZGE3N2M3NmQ2M2Y0NDJhY2FkY2ZiZGE0ZTQyNzAxODg3ZDYzMjQ", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-26T05:41:34Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-28T05:44:42Z"}, "message": "Also use `mir::Offset` for pointer `add`", "tree": {"sha": "6ea4d5c183b07a5c9f08cb891cb2f83bfdb4b797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea4d5c183b07a5c9f08cb891cb2f83bfdb4b797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1da77c76d63f442acadcfbda4e42701887d6324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1da77c76d63f442acadcfbda4e42701887d6324", "html_url": "https://github.com/rust-lang/rust/commit/e1da77c76d63f442acadcfbda4e42701887d6324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1da77c76d63f442acadcfbda4e42701887d6324/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bcfc0e597294f48549ed446f89415150516d030", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcfc0e597294f48549ed446f89415150516d030", "html_url": "https://github.com/rust-lang/rust/commit/8bcfc0e597294f48549ed446f89415150516d030"}], "stats": {"total": 194, "additions": 117, "deletions": 77}, "files": [{"sha": "64452472eeca45f82c6c2bf5a6f4b28db2f2577e", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -819,8 +819,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .builtin_deref(true)\n                     .unwrap_or_else(|| bug!(\"deref of non-pointer {:?}\", input_ty))\n                     .ty;\n-                let llty = bx.cx().backend_type(bx.cx().layout_of(pointee_type));\n-                bx.inbounds_gep(llty, lhs, &[rhs])\n+                let pointee_layout = bx.cx().layout_of(pointee_type);\n+                if pointee_layout.is_zst() {\n+                    // `Offset` works in terms of the size of pointee,\n+                    // so offsetting a pointer to ZST is a noop.\n+                    lhs\n+                } else {\n+                    let llty = bx.cx().backend_type(pointee_layout);\n+                    bx.inbounds_gep(llty, lhs, &[rhs])\n+                }\n             }\n             mir::BinOp::Shl => common::build_unchecked_lshift(bx, lhs, rhs),\n             mir::BinOp::Shr => common::build_unchecked_rshift(bx, input_ty, lhs, rhs),"}, {"sha": "d505d8b8e0b30ba0b7dd92f8faed485878268003", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -215,7 +215,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n \n             sym::type_name => (1, Vec::new(), tcx.mk_static_str()),\n             sym::type_id => (1, Vec::new(), tcx.types.u64),\n-            sym::offset | sym::arith_offset => (\n+            sym::offset => (2, vec![param(0), param(1)], param(0)),\n+            sym::arith_offset => (\n                 1,\n                 vec![\n                     tcx.mk_ptr(ty::TypeAndMut { ty: param(0), mutbl: hir::Mutability::Not }),"}, {"sha": "b14c801f2fb72aea1c834ed1ae88f7daa5123996", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -1413,6 +1413,10 @@ extern \"rust-intrinsic\" {\n     /// This is implemented as an intrinsic to avoid converting to and from an\n     /// integer, since the conversion would throw away aliasing information.\n     ///\n+    /// This can only be used with `Ptr` as a raw pointer type (`*mut` or `*const`)\n+    /// to a `Sized` pointee and with `Delta` as `usize` or `isize`.  Any other\n+    /// instantiations may arbitrarily misbehave, and that's *not* a compiler bug.\n+    ///\n     /// # Safety\n     ///\n     /// Both the starting and resulting pointer must be either in bounds or one\n@@ -1421,6 +1425,14 @@ extern \"rust-intrinsic\" {\n     /// returned value will result in undefined behavior.\n     ///\n     /// The stabilized version of this intrinsic is [`pointer::offset`].\n+    #[cfg(not(bootstrap))]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    #[rustc_nounwind]\n+    pub fn offset<Ptr, Delta>(dst: Ptr, offset: Delta) -> Ptr;\n+\n+    /// The bootstrap version of this is more restricted.\n+    #[cfg(bootstrap)]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[rustc_nounwind]"}, {"sha": "585b648873a60130dc951fba3c15b809ad23daa2", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -916,8 +916,16 @@ impl<T: ?Sized> *const T {\n     where\n         T: Sized,\n     {\n+        #[cfg(bootstrap)]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe { self.offset(count as isize) }\n+        unsafe {\n+            self.offset(count as isize)\n+        }\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: the caller must uphold the safety contract for `offset`.\n+        unsafe {\n+            intrinsics::offset(self, count)\n+        }\n     }\n \n     /// Calculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`)."}, {"sha": "c339ccb1b4dd0e2de79bbc00464782bee8cf44a1", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -473,10 +473,20 @@ impl<T: ?Sized> *mut T {\n     where\n         T: Sized,\n     {\n+        #[cfg(bootstrap)]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n         // The obtained pointer is valid for writes since the caller must\n         // guarantee that it points to the same allocated object as `self`.\n-        unsafe { intrinsics::offset(self, count) as *mut T }\n+        unsafe {\n+            intrinsics::offset(self, count) as *mut T\n+        }\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: the caller must uphold the safety contract for `offset`.\n+        // The obtained pointer is valid for writes since the caller must\n+        // guarantee that it points to the same allocated object as `self`.\n+        unsafe {\n+            intrinsics::offset(self, count)\n+        }\n     }\n \n     /// Calculates the offset from a pointer in bytes.\n@@ -1016,8 +1026,16 @@ impl<T: ?Sized> *mut T {\n     where\n         T: Sized,\n     {\n+        #[cfg(bootstrap)]\n+        // SAFETY: the caller must uphold the safety contract for `offset`.\n+        unsafe {\n+            self.offset(count as isize)\n+        }\n+        #[cfg(not(bootstrap))]\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        unsafe { self.offset(count as isize) }\n+        unsafe {\n+            intrinsics::offset(self, count)\n+        }\n     }\n \n     /// Calculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`)."}, {"sha": "ea9bace6dd47fbafbf1c37b7dc042423e83cfada", "filename": "src/doc/unstable-book/src/language-features/intrinsics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -22,7 +22,7 @@ via a declaration like\n extern \"rust-intrinsic\" {\n     fn transmute<T, U>(x: T) -> U;\n \n-    fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+    fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n }\n ```\n "}, {"sha": "7fc4f4498d6df1d913e1263de7eea493e89780e3", "filename": "tests/codegen/intrinsics/offset.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fcodegen%2Fintrinsics%2Foffset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fcodegen%2Fintrinsics%2Foffset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Foffset.rs?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: -O -C no-prepopulate-passes\n+// min-llvm-version: 15.0 (because we're using opaque pointers)\n+\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::offset;\n+\n+// CHECK-LABEL: ptr @offset_zst\n+// CHECK-SAME: (ptr noundef %p, [[SIZE:i[0-9]+]] noundef %d)\n+#[no_mangle]\n+pub unsafe fn offset_zst(p: *const (), d: usize) -> *const () {\n+    // CHECK-NOT: getelementptr\n+    // CHECK: ret ptr %p\n+    offset(p, d)\n+}\n+\n+// CHECK-LABEL: ptr @offset_isize\n+// CHECK-SAME: (ptr noundef %p, [[SIZE]] noundef %d)\n+#[no_mangle]\n+pub unsafe fn offset_isize(p: *const u32, d: isize) -> *const u32 {\n+    // CHECK: %[[R:.*]] = getelementptr inbounds i32, ptr %p, [[SIZE]] %d\n+    // CHECK-NEXT: ret ptr %[[R]]\n+    offset(p, d)\n+}\n+\n+// CHECK-LABEL: ptr @offset_usize\n+// CHECK-SAME: (ptr noundef %p, [[SIZE]] noundef %d)\n+#[no_mangle]\n+pub unsafe fn offset_usize(p: *const u64, d: usize) -> *const u64 {\n+    // CHECK: %[[R:.*]] = getelementptr inbounds i64, ptr %p, [[SIZE]] %d\n+    // CHECK-NEXT: ret ptr %[[R]]\n+    offset(p, d)\n+}"}, {"sha": "e4e228371e606ab5189cb490a5fa5cdb15760a8b", "filename": "tests/mir-opt/lower_intrinsics.ptr_offset.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -13,10 +13,10 @@\n           _3 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n           StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n           _4 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n--         _0 = offset::<i32>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n+-         _0 = offset::<*const i32, isize>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:140:5: 140:29\n--                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, isize) -> *const i32 {offset::<i32>}, val: Value(<ZST>) }\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, isize) -> *const i32 {offset::<*const i32, isize>}, val: Value(<ZST>) }\n +         _0 = Offset(move _3, move _4);   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n       }"}, {"sha": "715a1e3fcd4796b33916037ecce4cd383bff0647", "filename": "tests/mir-opt/pre-codegen/slice_index.slice_get_mut_usize.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_mut_usize.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_mut_usize.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_mut_usize.PreCodegen.after.mir?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -45,16 +45,7 @@ fn slice_get_mut_usize(_1: &mut [u32], _2: usize) -> Option<&mut u32> {\n                             scope 12 (inlined ptr::mut_ptr::<impl *mut u32>::add) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                 debug self => _9; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 debug count => _2; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                let mut _13: isize; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 scope 13 {\n-                                    scope 14 (inlined ptr::mut_ptr::<impl *mut u32>::offset) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        debug self => _9; // in scope 14 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        debug count => _13; // in scope 14 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        let mut _14: *const u32; // in scope 14 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        let mut _15: *const u32; // in scope 14 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        scope 15 {\n-                                        }\n-                                    }\n                                 }\n                             }\n                         }\n@@ -86,16 +77,7 @@ fn slice_get_mut_usize(_1: &mut [u32], _2: usize) -> Option<&mut u32> {\n         StorageLive(_12);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         _9 = _8 as *mut u32 (PtrToPtr);  // scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_13);                // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _13 = _2 as isize (IntToInt);    // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_14);                // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_15);                // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _15 = _9 as *const u32 (Pointer(MutToConstPointer)); // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _14 = Offset(move _15, _13);     // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_15);                // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _7 = move _14 as *mut u32 (PtrToPtr); // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_14);                // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_13);                // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        _7 = Offset(_9, _2);             // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n         StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_12);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL"}, {"sha": "ea0a44cf3bf79ff60b8961440cb2f8941a1d49a2", "filename": "tests/mir-opt/pre-codegen/slice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "status": "modified", "additions": 27, "deletions": 45, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -34,32 +34,23 @@ fn slice_get_unchecked_mut_range(_1: &mut [u32], _2: std::ops::Range<usize>) ->\n                             scope 12 (inlined ptr::mut_ptr::<impl *mut u32>::add) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                 debug self => _10; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 debug count => _11; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                let mut _16: isize; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 scope 13 {\n-                                    scope 14 (inlined ptr::mut_ptr::<impl *mut u32>::offset) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        debug self => _10; // in scope 14 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        debug count => _16; // in scope 14 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        let mut _17: *const u32; // in scope 14 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        let mut _18: *const u32; // in scope 14 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        scope 15 {\n-                                        }\n-                                    }\n                                 }\n                             }\n-                            scope 16 (inlined slice_from_raw_parts_mut::<u32>) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug data => _9; // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                debug len => _12; // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                let mut _19: *mut (); // in scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                scope 17 (inlined ptr::mut_ptr::<impl *mut u32>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                    debug self => _9; // in scope 17 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                            scope 14 (inlined slice_from_raw_parts_mut::<u32>) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                                debug data => _9; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                debug len => _12; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                let mut _16: *mut (); // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                scope 15 (inlined ptr::mut_ptr::<impl *mut u32>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                    debug self => _9; // in scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 }\n-                                scope 18 (inlined std::ptr::from_raw_parts_mut::<[u32]>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                    debug data_address => _19; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    debug metadata => _12; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _20: std::ptr::metadata::PtrRepr<[u32]>; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _21: std::ptr::metadata::PtrComponents<[u32]>; // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _22: *const (); // in scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    scope 19 {\n+                                scope 16 (inlined std::ptr::from_raw_parts_mut::<[u32]>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                    debug data_address => _16; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    debug metadata => _12; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _17: std::ptr::metadata::PtrRepr<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _18: std::ptr::metadata::PtrComponents<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _19: *const (); // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    scope 17 {\n                                     }\n                                 }\n                             }\n@@ -110,33 +101,24 @@ fn slice_get_unchecked_mut_range(_1: &mut [u32], _2: std::ops::Range<usize>) ->\n         _10 = _4 as *mut u32 (PtrToPtr); // scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n         StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         _11 = (_2.0: usize);             // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_16);                // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _16 = _11 as isize (IntToInt);   // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_17);                // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_18);                // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _18 = _10 as *const u32 (Pointer(MutToConstPointer)); // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _17 = Offset(move _18, _16);     // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_18);                // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _9 = move _17 as *mut u32 (PtrToPtr); // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_17);                // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_16);                // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        _9 = Offset(_10, _11);           // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n         StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         _12 = _6;                        // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_19);                // scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _19 = _9 as *mut () (PtrToPtr);  // scope 17 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_20);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageLive(_21);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageLive(_22);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _22 = _19 as *const () (Pointer(MutToConstPointer)); // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _21 = ptr::metadata::PtrComponents::<[u32]> { data_address: move _22, metadata: _12 }; // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_22);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _20 = ptr::metadata::PtrRepr::<[u32]> { const_ptr: move _21 }; // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_21);                // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _3 = (_20.1: *mut [u32]);        // scope 19 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_20);                // scope 18 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_19);                // scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageLive(_16);                // scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _16 = _9 as *mut () (PtrToPtr);  // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageLive(_17);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_18);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_19);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _19 = _16 as *const () (Pointer(MutToConstPointer)); // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _18 = ptr::metadata::PtrComponents::<[u32]> { data_address: move _19, metadata: _12 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_19);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _17 = ptr::metadata::PtrRepr::<[u32]> { const_ptr: move _18 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_18);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _3 = (_17.1: *mut [u32]);        // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_17);                // scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_16);                // scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL"}, {"sha": "817cfb0acf90eb69303b23170fed66a8bb11b9fb", "filename": "tests/ui/const-ptr/forbidden_slices.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fui%2Fconst-ptr%2Fforbidden_slices.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1da77c76d63f442acadcfbda4e42701887d6324/tests%2Fui%2Fconst-ptr%2Fforbidden_slices.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-ptr%2Fforbidden_slices.stderr?ref=e1da77c76d63f442acadcfbda4e42701887d6324", "patch": "@@ -131,8 +131,6 @@ error[E0080]: could not evaluate static initializer\n    |\n    = note: out-of-bounds pointer arithmetic: allocN has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |\n-note: inside `ptr::const_ptr::<impl *const u32>::offset`\n-  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `ptr::const_ptr::<impl *const u32>::add`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `R2`\n@@ -195,8 +193,6 @@ error[E0080]: could not evaluate static initializer\n    |\n    = note: out-of-bounds pointer arithmetic: allocN has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |\n-note: inside `ptr::const_ptr::<impl *const u64>::offset`\n-  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `ptr::const_ptr::<impl *const u64>::add`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `R8`"}]}