{"sha": "0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZmUwZWQ4ZTFiMmI4NTk2YThjYWJlZTBhZmRhZTIzZTM0M2VlNjk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-10-30T10:13:00Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-11-05T13:59:29Z"}, "message": "Review feedback: Remove more stuff! Simplify simplify simplify!", "tree": {"sha": "a5694a1e9e0eacc626722ce5f4dea75fd7dfcc60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5694a1e9e0eacc626722ce5f4dea75fd7dfcc60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "html_url": "https://github.com/rust-lang/rust/commit/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7fbcb3015521412ab17a814680cd1d9bb6cde9", "html_url": "https://github.com/rust-lang/rust/commit/7d7fbcb3015521412ab17a814680cd1d9bb6cde9"}], "stats": {"total": 54, "additions": 13, "deletions": 41}, "files": [{"sha": "c6acdf53de30b0ebe24c02cfda14e7693a2f52a9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "patch": "@@ -65,7 +65,6 @@ use syntax::ast;\n use syntax::ptr::P as AstP;\n use syntax::ast::*;\n use syntax::errors;\n-use syntax::expand::SpecialDerives;\n use syntax::print::pprust;\n use syntax::parse::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};\n@@ -184,8 +183,6 @@ pub trait Resolver {\n         ns: Namespace,\n     ) -> (ast::Path, Res<NodeId>);\n \n-    fn has_derives(&self, node_id: NodeId, derives: SpecialDerives) -> bool;\n-\n     fn lint_buffer(&mut self) -> &mut lint::LintBuffer;\n }\n "}, {"sha": "17b62b3bda298e54e986a3884711a897f34b8f11", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "patch": "@@ -36,7 +36,6 @@ use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n \n use syntax::{struct_span_err, unwrap_or};\n-use syntax::expand::SpecialDerives;\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ast::{CRATE_NODE_ID, Crate};\n use syntax::ast::{ItemKind, Path};\n@@ -934,10 +933,10 @@ pub struct Resolver<'a> {\n     multi_segment_macro_resolutions: Vec<(Vec<Segment>, Span, MacroKind, ParentScope<'a>,\n                                           Option<Res>)>,\n     builtin_attrs: Vec<(Ident, ParentScope<'a>)>,\n-    /// Some built-in derives mark items they are applied to so they are treated specially later.\n+    /// `derive(Copy)` marks items they are applied to so they are treated specially later.\n     /// Derive macros cannot modify the item themselves and have to store the markers in the global\n     /// context, so they attach the markers to derive container IDs using this resolver table.\n-    special_derives: FxHashMap<ExpnId, SpecialDerives>,\n+    copy_derives: FxHashSet<ExpnId>,\n     /// Parent scopes in which the macros were invoked.\n     /// FIXME: `derives` are missing in these parent scopes and need to be taken from elsewhere.\n     invocation_parent_scopes: FxHashMap<ExpnId, ParentScope<'a>>,\n@@ -1076,12 +1075,6 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         &mut self.definitions\n     }\n \n-    fn has_derives(&self, node_id: NodeId, derives: SpecialDerives) -> bool {\n-        let def_id = self.definitions.local_def_id(node_id);\n-        let expn_id = self.definitions.expansion_that_defined(def_id.index);\n-        self.has_derives(expn_id, derives)\n-    }\n-\n     fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n         &mut self.lint_buffer\n     }\n@@ -1226,7 +1219,7 @@ impl<'a> Resolver<'a> {\n             single_segment_macro_resolutions: Default::default(),\n             multi_segment_macro_resolutions: Default::default(),\n             builtin_attrs: Default::default(),\n-            special_derives: Default::default(),\n+            copy_derives: Default::default(),\n             active_features:\n                 features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n                     .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n@@ -1312,10 +1305,6 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn has_derives(&self, expn_id: ExpnId, markers: SpecialDerives) -> bool {\n-        self.special_derives.get(&expn_id).map_or(false, |m| m.contains(markers))\n-    }\n-\n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n         let _prof_timer ="}, {"sha": "9997d0f946a2ef89e27df87a12065d1a04ca96d8", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "patch": "@@ -14,7 +14,6 @@ use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, NodeId, Ident};\n use syntax::attr::StabilityLevel;\n use syntax::edition::Edition;\n-use syntax::expand::SpecialDerives;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n use syntax::print::pprust;\n@@ -255,12 +254,12 @@ impl<'a> base::Resolver for Resolver<'a> {\n         }\n     }\n \n-    fn has_derives(&self, expn_id: ExpnId, derives: SpecialDerives) -> bool {\n-        self.has_derives(expn_id, derives)\n+    fn has_derive_copy(&self, expn_id: ExpnId) -> bool {\n+        self.copy_derives.contains(&expn_id)\n     }\n \n-    fn add_derives(&mut self, expn_id: ExpnId, derives: SpecialDerives) {\n-        *self.special_derives.entry(expn_id).or_default() |= derives;\n+    fn add_derive_copy(&mut self, expn_id: ExpnId) {\n+        self.copy_derives.insert(expn_id);\n     }\n }\n "}, {"sha": "03b30fda745f9bbee5c043d3c31f1c7431818f6c", "filename": "src/libsyntax/expand/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax%2Fexpand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax%2Fexpand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fexpand%2Fmod.rs?ref=0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "patch": "@@ -5,14 +5,6 @@ use syntax_pos::symbol::sym;\n \n pub mod allocator;\n \n-bitflags::bitflags! {\n-    /// Built-in derives that need some extra tracking beyond the usual macro functionality.\n-    #[derive(Default)]\n-    pub struct SpecialDerives: u8 {\n-        const COPY       = 1 << 2;\n-    }\n-}\n-\n pub fn is_proc_macro_attr(attr: &Attribute) -> bool {\n     [sym::proc_macro, sym::proc_macro_attribute, sym::proc_macro_derive]\n         .iter().any(|kind| attr.check_name(*kind))"}, {"sha": "6cc7b7da53b266f3cbd031bd1323bc1519d7625c", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "patch": "@@ -13,7 +13,6 @@ use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax::{ThinVec, MACRO_ARGUMENTS};\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n-crate use syntax::expand::SpecialDerives;\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n@@ -860,8 +859,8 @@ pub trait Resolver {\n \n     fn check_unused_macros(&mut self);\n \n-    fn has_derives(&self, expn_id: ExpnId, derives: SpecialDerives) -> bool;\n-    fn add_derives(&mut self, expn_id: ExpnId, derives: SpecialDerives);\n+    fn has_derive_copy(&self, expn_id: ExpnId) -> bool;\n+    fn add_derive_copy(&mut self, expn_id: ExpnId);\n }\n \n #[derive(Clone)]"}, {"sha": "da70fdbb0f308789cad3f5c3eeac9e7af2eb032c", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "patch": "@@ -432,7 +432,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     // can be in scope for all code produced by that container's expansion.\n                     item.visit_with(&mut MarkAttrs(&helper_attrs));\n                     if has_copy {\n-                        self.cx.resolver.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n+                        self.cx.resolver.add_derive_copy(invoc.expansion_data.id);\n                     }\n \n                     let mut derive_placeholders = Vec::with_capacity(derives.len());"}, {"sha": "c056d03614d00525683ebe2b035e97fb9055255d", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::expand::SpecialDerives;\n use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n@@ -37,7 +36,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n                 ItemKind::Struct(_, Generics { ref params, .. }) |\n                 ItemKind::Enum(_, Generics { ref params, .. }) => {\n                     let container_id = cx.current_expansion.id.expn_data().parent;\n-                    if cx.resolver.has_derives(container_id, SpecialDerives::COPY) &&\n+                    if cx.resolver.has_derive_copy(container_id) &&\n                         !params.iter().any(|param| match param.kind {\n                             ast::GenericParamKind::Type { .. } => true,\n                             _ => false,"}, {"sha": "2e5ae235893cb4dc37e9dd3e1a44efee50f56ca2", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=0dfe0ed8e1b2b8596a8cabee0afdae23e343ee69", "patch": "@@ -186,7 +186,6 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n-use syntax::expand::SpecialDerives;\n use syntax::source_map::respan;\n use syntax::util::map_in_place::MapInPlace;\n use syntax::ptr::P;\n@@ -427,10 +426,8 @@ impl<'a> TraitDef<'a> {\n                     }\n                 };\n                 let container_id = cx.current_expansion.id.expn_data().parent;\n-                let is_always_copy =\n-                    cx.resolver.has_derives(container_id, SpecialDerives::COPY) &&\n-                    has_no_type_params;\n-                let use_temporaries = is_packed && is_always_copy;\n+                let always_copy = has_no_type_params && cx.resolver.has_derive_copy(container_id);\n+                let use_temporaries = is_packed && always_copy;\n \n                 let newitem = match item.kind {\n                     ast::ItemKind::Struct(ref struct_def, ref generics) => {"}]}