{"sha": "df769e5bb4e26a2f150ce2c37b9b9364ee10bab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNzY5ZTViYjRlMjZhMmYxNTBjZTJjMzdiOWI5MzY0ZWUxMGJhYjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T20:45:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T20:45:35Z"}, "message": "Simplify diagnostics handling", "tree": {"sha": "77c2232aa7286e2880a28678e343286b853bfebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77c2232aa7286e2880a28678e343286b853bfebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8", "html_url": "https://github.com/rust-lang/rust/commit/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86a4d4cb9c526e095985cc26668c4ed653941fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/86a4d4cb9c526e095985cc26668c4ed653941fc2", "html_url": "https://github.com/rust-lang/rust/commit/86a4d4cb9c526e095985cc26668c4ed653941fc2"}], "stats": {"total": 120, "additions": 50, "deletions": 70}, "files": [{"sha": "f3cdb842bd6215c4731503474cd2d01557a56c2d", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 32, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=df769e5bb4e26a2f150ce2c37b9b9364ee10bab8", "patch": "@@ -1,14 +1,15 @@\n //! Book keeping for keeping diagnostics easily in sync with the client.\n pub(crate) mod to_proto;\n \n-use std::{collections::HashMap, sync::Arc};\n+use std::{collections::HashMap, mem, sync::Arc};\n \n use lsp_types::{Diagnostic, Range};\n use ra_ide::FileId;\n+use rustc_hash::FxHashSet;\n \n use crate::lsp_ext;\n \n-pub type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n+pub(crate) type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n \n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticsConfig {\n@@ -17,32 +18,26 @@ pub struct DiagnosticsConfig {\n }\n \n #[derive(Debug, Default, Clone)]\n-pub struct DiagnosticCollection {\n-    pub native: HashMap<FileId, Vec<Diagnostic>>,\n-    pub check: HashMap<FileId, Vec<Diagnostic>>,\n-    pub check_fixes: CheckFixes,\n+pub(crate) struct DiagnosticCollection {\n+    pub(crate) native: HashMap<FileId, Vec<Diagnostic>>,\n+    pub(crate) check: HashMap<FileId, Vec<Diagnostic>>,\n+    pub(crate) check_fixes: CheckFixes,\n+    changes: FxHashSet<FileId>,\n }\n \n #[derive(Debug, Clone)]\n-pub struct Fix {\n-    pub range: Range,\n-    pub action: lsp_ext::CodeAction,\n-}\n-\n-#[derive(Debug)]\n-pub enum DiagnosticTask {\n-    ClearCheck,\n-    AddCheck(FileId, Diagnostic, Vec<lsp_ext::CodeAction>),\n-    SetNative(FileId, Vec<Diagnostic>),\n+pub(crate) struct Fix {\n+    pub(crate) range: Range,\n+    pub(crate) action: lsp_ext::CodeAction,\n }\n \n impl DiagnosticCollection {\n-    pub fn clear_check(&mut self) -> Vec<FileId> {\n+    pub(crate) fn clear_check(&mut self) {\n         Arc::make_mut(&mut self.check_fixes).clear();\n-        self.check.drain().map(|(key, _value)| key).collect()\n+        self.changes.extend(self.check.drain().map(|(key, _value)| key))\n     }\n \n-    pub fn add_check_diagnostic(\n+    pub(crate) fn add_check_diagnostic(\n         &mut self,\n         file_id: FileId,\n         diagnostic: Diagnostic,\n@@ -61,30 +56,25 @@ impl DiagnosticCollection {\n             .or_default()\n             .extend(fixes.into_iter().map(|action| Fix { range: diagnostic.range, action }));\n         diagnostics.push(diagnostic);\n+        self.changes.insert(file_id);\n     }\n \n-    pub fn set_native_diagnostics(&mut self, file_id: FileId, diagnostics: Vec<Diagnostic>) {\n+    pub(crate) fn set_native_diagnostics(&mut self, file_id: FileId, diagnostics: Vec<Diagnostic>) {\n         self.native.insert(file_id, diagnostics);\n+        self.changes.insert(file_id);\n     }\n \n-    pub fn diagnostics_for(&self, file_id: FileId) -> impl Iterator<Item = &Diagnostic> {\n+    pub(crate) fn diagnostics_for(&self, file_id: FileId) -> impl Iterator<Item = &Diagnostic> {\n         let native = self.native.get(&file_id).into_iter().flatten();\n         let check = self.check.get(&file_id).into_iter().flatten();\n         native.chain(check)\n     }\n \n-    pub fn handle_task(&mut self, task: DiagnosticTask) -> Vec<FileId> {\n-        match task {\n-            DiagnosticTask::ClearCheck => self.clear_check(),\n-            DiagnosticTask::AddCheck(file_id, diagnostic, fixes) => {\n-                self.add_check_diagnostic(file_id, diagnostic, fixes);\n-                vec![file_id]\n-            }\n-            DiagnosticTask::SetNative(file_id, diagnostics) => {\n-                self.set_native_diagnostics(file_id, diagnostics);\n-                vec![file_id]\n-            }\n+    pub(crate) fn take_changes(&mut self) -> Option<FxHashSet<FileId>> {\n+        if self.changes.is_empty() {\n+            return None;\n         }\n+        Some(mem::take(&mut self.changes))\n     }\n }\n "}, {"sha": "12b494496fcfb66923e671dae549dd65be352ca2", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=df769e5bb4e26a2f150ce2c37b9b9364ee10bab8", "patch": "@@ -31,7 +31,6 @@ use stdx::{format_to, split_delim};\n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n     config::RustfmtConfig,\n-    diagnostics::DiagnosticTask,\n     from_json, from_proto,\n     global_state::GlobalStateSnapshot,\n     lsp_ext::{self, InlayHint, InlayHintsParams},\n@@ -950,7 +949,7 @@ pub(crate) fn handle_ssr(\n pub(crate) fn publish_diagnostics(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n-) -> Result<DiagnosticTask> {\n+) -> Result<Vec<Diagnostic>> {\n     let _p = profile(\"publish_diagnostics\");\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let diagnostics: Vec<Diagnostic> = snap\n@@ -967,7 +966,7 @@ pub(crate) fn publish_diagnostics(\n             tags: None,\n         })\n         .collect();\n-    Ok(DiagnosticTask::SetNative(file_id, diagnostics))\n+    Ok(diagnostics)\n }\n \n pub(crate) fn handle_inlay_hints("}, {"sha": "1bd9d638941fc8ae55e90470998cd981e482d431", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df769e5bb4e26a2f150ce2c37b9b9364ee10bab8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=df769e5bb4e26a2f150ce2c37b9b9364ee10bab8", "patch": "@@ -15,7 +15,6 @@ use ra_project_model::{PackageRoot, ProjectWorkspace};\n \n use crate::{\n     config::{Config, FilesWatcher, LinkedProject},\n-    diagnostics::DiagnosticTask,\n     dispatch::{NotificationDispatcher, RequestDispatcher},\n     from_proto,\n     global_state::{file_id_to_url, GlobalState, Status},\n@@ -132,6 +131,13 @@ enum Event {\n     Flycheck(flycheck::Message),\n }\n \n+#[derive(Debug)]\n+pub(crate) enum Task {\n+    Response(Response),\n+    Diagnostics(Vec<(FileId, Vec<lsp_types::Diagnostic>)>),\n+    Unit,\n+}\n+\n impl fmt::Debug for Event {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let debug_verbose_not = |not: &Notification, f: &mut fmt::Formatter| {\n@@ -219,8 +225,10 @@ impl GlobalState {\n             Event::Task(task) => {\n                 match task {\n                     Task::Response(response) => self.respond(response),\n-                    Task::Diagnostics(tasks) => {\n-                        tasks.into_iter().for_each(|task| on_diagnostic_task(task, self))\n+                    Task::Diagnostics(diagnostics_per_file) => {\n+                        for (file_id, diagnostics) in diagnostics_per_file {\n+                            self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n+                        }\n                     }\n                     Task::Unit => (),\n                 }\n@@ -257,9 +265,7 @@ impl GlobalState {\n                 }\n             },\n             Event::Flycheck(task) => match task {\n-                flycheck::Message::ClearDiagnostics => {\n-                    on_diagnostic_task(DiagnosticTask::ClearCheck, self)\n-                }\n+                flycheck::Message::ClearDiagnostics => self.diagnostics.clear_check(),\n \n                 flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n                     let diagnostics = crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n@@ -279,15 +285,7 @@ impl GlobalState {\n                                 return Ok(());\n                             }\n                         };\n-\n-                        on_diagnostic_task(\n-                            DiagnosticTask::AddCheck(\n-                                file_id,\n-                                diag.diagnostic,\n-                                diag.fixes.into_iter().map(|it| it.into()).collect(),\n-                            ),\n-                            self,\n-                        )\n+                        self.diagnostics.add_check_diagnostic(file_id, diag.diagnostic, diag.fixes)\n                     }\n                 }\n \n@@ -322,9 +320,20 @@ impl GlobalState {\n             self.update_file_notifications_on_threadpool(subscriptions);\n         }\n \n+        if let Some(diagnostic_changes) = self.diagnostics.take_changes() {\n+            for file_id in diagnostic_changes {\n+                let url = file_id_to_url(&self.vfs.read().0, file_id);\n+                let diagnostics = self.diagnostics.diagnostics_for(file_id).cloned().collect();\n+                let params =\n+                    lsp_types::PublishDiagnosticsParams { uri: url, diagnostics, version: None };\n+                let not = notification_new::<lsp_types::notification::PublishDiagnostics>(params);\n+                self.send(not.into());\n+            }\n+        }\n+\n         let loop_duration = loop_start.elapsed();\n         if loop_duration > Duration::from_millis(100) {\n-            log::error!(\"overly long loop turn: {:?}\", loop_duration);\n+            log::warn!(\"overly long loop turn: {:?}\", loop_duration);\n             if env::var(\"RA_PROFILE\").is_ok() {\n                 self.show_message(\n                     lsp_types::MessageType::Error,\n@@ -516,6 +525,7 @@ impl GlobalState {\n                                 ()\n                             })\n                             .ok()\n+                            .map(|diags| (file_id, diags))\n                     })\n                     .collect::<Vec<_>>();\n                 Task::Diagnostics(diagnostics)\n@@ -532,29 +542,10 @@ impl GlobalState {\n     }\n }\n \n-#[derive(Debug)]\n-pub(crate) enum Task {\n-    Response(Response),\n-    Diagnostics(()),\n-    Unit,\n-}\n-\n pub(crate) type ReqHandler = fn(&mut GlobalState, Response);\n pub(crate) type ReqQueue = lsp_server::ReqQueue<(String, Instant), ReqHandler>;\n const DO_NOTHING: ReqHandler = |_, _| ();\n \n-fn on_diagnostic_task(task: DiagnosticTask, global_state: &mut GlobalState) {\n-    let subscriptions = global_state.diagnostics.handle_task(task);\n-\n-    for file_id in subscriptions {\n-        let url = file_id_to_url(&global_state.vfs.read().0, file_id);\n-        let diagnostics = global_state.diagnostics.diagnostics_for(file_id).cloned().collect();\n-        let params = lsp_types::PublishDiagnosticsParams { uri: url, diagnostics, version: None };\n-        let not = notification_new::<lsp_types::notification::PublishDiagnostics>(params);\n-        global_state.send(not.into());\n-    }\n-}\n-\n #[derive(Eq, PartialEq)]\n enum Progress {\n     Begin,"}]}