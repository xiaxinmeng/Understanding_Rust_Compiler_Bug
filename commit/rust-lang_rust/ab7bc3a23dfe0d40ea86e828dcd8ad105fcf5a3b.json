{"sha": "ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiN2JjM2EyM2RmZTBkNDBlYTg2ZTgyOGRjZDhhZDEwNWZjZjVhM2I=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-06T16:01:45Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-19T15:15:07Z"}, "message": "Rename UserTypeAnnotation -> UserType", "tree": {"sha": "d63b98f66b5240d83bf326f937c1c143697edfe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63b98f66b5240d83bf326f937c1c143697edfe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "html_url": "https://github.com/rust-lang/rust/commit/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87144f3caf9a1580e8734d4d1604e723a5bd6e6", "html_url": "https://github.com/rust-lang/rust/commit/c87144f3caf9a1580e8734d4d1604e723a5bd6e6"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "7a6852ddc55ed0cf3e282f283b190414298fed7d", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -1240,16 +1240,16 @@ impl_stable_hash_for!(\n     }\n );\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::UserTypeAnnotation<'gcx> {\n+impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::UserType<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            ty::UserTypeAnnotation::Ty(ref ty) => {\n+            ty::UserType::Ty(ref ty) => {\n                 ty.hash_stable(hcx, hasher);\n             }\n-            ty::UserTypeAnnotation::TypeOf(ref def_id, ref substs) => {\n+            ty::UserType::TypeOf(ref def_id, ref substs) => {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }"}, {"sha": "9bd0efcbbb4b1924dbd8cbdc524a29459b42c786", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -31,7 +31,7 @@ use ty::subst::{Subst, Substs};\n use ty::layout::VariantIdx;\n use ty::{\n     self, AdtDef, CanonicalUserTypeAnnotations, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt,\n-    UserTypeAnnotationIndex, UserTypeAnnotation,\n+    UserTypeAnnotationIndex, UserType,\n };\n use util::ppaux;\n "}, {"sha": "7ae77b221da75b1f648f431535da645c5def209c", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -221,7 +221,7 @@ macro_rules! make_mir_visitor {\n             fn visit_user_type_annotation(\n                 &mut self,\n                 index: UserTypeAnnotationIndex,\n-                ty: & $($mutability)* Canonical<'tcx, UserTypeAnnotation<'tcx>>,\n+                ty: & $($mutability)* Canonical<'tcx, UserType<'tcx>>,\n             ) {\n                 self.super_user_type_annotation(index, ty);\n             }\n@@ -882,7 +882,7 @@ macro_rules! make_mir_visitor {\n             fn super_user_type_annotation(\n                 &mut self,\n                 _index: UserTypeAnnotationIndex,\n-                _ty: & $($mutability)* Canonical<'tcx, UserTypeAnnotation<'tcx>>,\n+                _ty: & $($mutability)* Canonical<'tcx, UserType<'tcx>>,\n             ) {\n             }\n "}, {"sha": "32d2314bef190d93a7cada6e7c06f8a036c59f73", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -800,7 +800,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n \n newtype_index! {\n     pub struct UserTypeAnnotationIndex {\n-        DEBUG_FORMAT = \"UserTypeAnnotation({})\",\n+        DEBUG_FORMAT = \"UserType({})\",\n         const START_INDEX = 0,\n     }\n }\n@@ -810,15 +810,15 @@ pub type CanonicalUserTypeAnnotations<'tcx> =\n     IndexVec<UserTypeAnnotationIndex, (Span, CanonicalUserTypeAnnotation<'tcx>)>;\n \n /// Canonicalized user type annotation.\n-pub type CanonicalUserTypeAnnotation<'gcx> = Canonical<'gcx, UserTypeAnnotation<'gcx>>;\n+pub type CanonicalUserTypeAnnotation<'gcx> = Canonical<'gcx, UserType<'gcx>>;\n \n impl CanonicalUserTypeAnnotation<'gcx> {\n     /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,\n     /// i.e. each thing is mapped to a canonical variable with the same index.\n     pub fn is_identity(&self) -> bool {\n         match self.value {\n-            UserTypeAnnotation::Ty(_) => false,\n-            UserTypeAnnotation::TypeOf(_, user_substs) => {\n+            UserType::Ty(_) => false,\n+            UserType::TypeOf(_, user_substs) => {\n                 if user_substs.user_self_ty.is_some() {\n                     return false;\n                 }\n@@ -853,7 +853,7 @@ impl CanonicalUserTypeAnnotation<'gcx> {\n /// from constants that are named via paths, like `Foo::<A>::new` and\n /// so forth.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum UserTypeAnnotation<'tcx> {\n+pub enum UserType<'tcx> {\n     Ty(Ty<'tcx>),\n \n     /// The canonical type is the result of `type_of(def_id)` with the\n@@ -862,17 +862,17 @@ pub enum UserTypeAnnotation<'tcx> {\n }\n \n EnumTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for UserTypeAnnotation<'tcx> {\n-        (UserTypeAnnotation::Ty)(ty),\n-        (UserTypeAnnotation::TypeOf)(def, substs),\n+    impl<'tcx> TypeFoldable<'tcx> for UserType<'tcx> {\n+        (UserType::Ty)(ty),\n+        (UserType::TypeOf)(def, substs),\n     }\n }\n \n EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for UserTypeAnnotation<'a> {\n-        type Lifted = UserTypeAnnotation<'tcx>;\n-        (UserTypeAnnotation::Ty)(ty),\n-        (UserTypeAnnotation::TypeOf)(def, substs),\n+    impl<'a, 'tcx> Lift<'tcx> for UserType<'a> {\n+        type Lifted = UserType<'tcx>;\n+        (UserType::Ty)(ty),\n+        (UserType::TypeOf)(def, substs),\n     }\n }\n "}, {"sha": "ff7220deb768e31b0a1551dff4055c8d06ee8a26", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -73,7 +73,7 @@ pub use self::binding::BindingMode::*;\n pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, keep_local};\n pub use self::context::{Lift, TypeckTables, CtxtInterners};\n pub use self::context::{\n-    UserTypeAnnotationIndex, UserTypeAnnotation, CanonicalUserTypeAnnotation,\n+    UserTypeAnnotationIndex, UserType, CanonicalUserTypeAnnotation,\n     CanonicalUserTypeAnnotations,\n };\n "}, {"sha": "f6275230eebfb912dab59dcf61502726eb364f5f", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -1,7 +1,7 @@\n use rustc::infer::canonical::Canonical;\n use rustc::ty::subst::Substs;\n use rustc::ty::{\n-    self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable, UserTypeAnnotation,\n+    self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable, UserType,\n     UserTypeAnnotationIndex,\n };\n use rustc::mir::{Location, Mir};\n@@ -62,7 +62,7 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n     fn visit_user_type_annotation(\n         &mut self,\n         _index: UserTypeAnnotationIndex,\n-        _ty: &mut Canonical<'tcx, UserTypeAnnotation<'tcx>>,\n+        _ty: &mut Canonical<'tcx, UserType<'tcx>>,\n     ) {\n         // User type annotations represent the types that the user\n         // wrote in the progarm. We don't want to erase the regions"}, {"sha": "7c3507e06cb1cb130cc99cae3dfc8fd007ef61be", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -37,7 +37,7 @@ use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n use rustc::ty::{\n-    self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind, UserTypeAnnotation,\n+    self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind, UserType,\n     UserTypeAnnotationIndex,\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -748,7 +748,7 @@ struct TypeChecker<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     /// annotations. Part of the reason for this setup is that it allows us to enforce basic\n     /// WF criteria on the types even if the code that referenced them is dead\n     /// code (see #54943).\n-    instantiated_type_annotations: FxHashMap<UserTypeAnnotationIndex, UserTypeAnnotation<'tcx>>,\n+    instantiated_type_annotations: FxHashMap<UserTypeAnnotationIndex, UserType<'tcx>>,\n }\n \n struct BorrowCheckContext<'a, 'tcx: 'a> {\n@@ -925,7 +925,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 *span, &canonical_annotation\n             );\n             match annotation {\n-                UserTypeAnnotation::Ty(ref mut ty) =>\n+                UserType::Ty(ref mut ty) =>\n                     *ty = self.normalize(ty, Locations::All(*span)),\n                 _ => {},\n             }\n@@ -1068,7 +1068,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n         let type_annotation = self.instantiated_type_annotations[&user_ty.base];\n         match type_annotation {\n-            UserTypeAnnotation::Ty(ty) => {\n+            UserType::Ty(ty) => {\n                 // The `TypeRelating` code assumes that \"unresolved inference\n                 // variables\" appear in the \"a\" side, so flip `Contravariant`\n                 // ambient variance to get the right relationship.\n@@ -1107,7 +1107,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     self.relate_types(ty, v1, a, locations, category)?;\n                 }\n             }\n-            UserTypeAnnotation::TypeOf(def_id, user_substs) => {\n+            UserType::TypeOf(def_id, user_substs) => {\n                 let projs = self.infcx.tcx.intern_projs(&user_ty.projs);\n                 self.fully_perform_op(\n                     locations,"}, {"sha": "e86e5f342597bb800da2ab4d2d3bfb9470351fed", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -278,7 +278,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     let user_ty = user_provided_types.get(fun.hir_id)\n                         .map(|u_ty| *u_ty)\n                         .map(|mut u_ty| {\n-                            if let UserTypeAnnotation::TypeOf(ref mut did, _) = &mut u_ty.value {\n+                            if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {\n                                 *did = adt_def.did;\n                             }\n                             u_ty"}, {"sha": "f0f8acb31df4208eaedcd6a0423f9f550e6ea879", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::Canonical;\n use rustc::middle::region;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{AdtDef, UpvarSubsts, Ty, Const, LazyConst, UserTypeAnnotation};\n+use rustc::ty::{AdtDef, UpvarSubsts, Ty, Const, LazyConst, UserType};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir;\n use syntax::ast;\n@@ -265,20 +265,20 @@ pub enum ExprKind<'tcx> {\n \n         /// Optional user-given substs: for something like `let x =\n         /// Bar::<T> { ... }`.\n-        user_ty: Option<Canonical<'tcx, UserTypeAnnotation<'tcx>>>,\n+        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n \n         fields: Vec<FieldExprRef<'tcx>>,\n         base: Option<FruInfo<'tcx>>\n     },\n     PlaceTypeAscription {\n         source: ExprRef<'tcx>,\n         /// Type that the user gave to this expression\n-        user_ty: Option<Canonical<'tcx, UserTypeAnnotation<'tcx>>>,\n+        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n     ValueTypeAscription {\n         source: ExprRef<'tcx>,\n         /// Type that the user gave to this expression\n-        user_ty: Option<Canonical<'tcx, UserTypeAnnotation<'tcx>>>,\n+        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n     Closure {\n         closure_id: DefId,\n@@ -288,7 +288,7 @@ pub enum ExprKind<'tcx> {\n     },\n     Literal {\n         literal: &'tcx LazyConst<'tcx>,\n-        user_ty: Option<Canonical<'tcx, UserTypeAnnotation<'tcx>>>,\n+        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n     InlineAsm {\n         asm: &'tcx hir::InlineAsm,"}, {"sha": "cabc854510fa9f6095dd6d9cc5a16e450634d760", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -15,7 +15,7 @@ use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::{ProjectionElem, UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, Lift};\n-use rustc::ty::{CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, UserTypeAnnotation};\n+use rustc::ty::{CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, UserType};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir::{self, PatKind, RangeEnd};\n@@ -1040,7 +1040,7 @@ macro_rules! CloneImpls {\n CloneImpls!{ <'tcx>\n     Span, Field, Mutability, ast::Name, ast::NodeId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, &'tcx AdtDef,\n-    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserTypeAnnotation<'tcx>,\n+    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserType<'tcx>,\n     UserTypeProjection<'tcx>, PatternTypeProjection<'tcx>\n }\n "}, {"sha": "2fd3a089a998f9b1c8236c5c714febe79ad53004", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -1,5 +1,5 @@\n use rustc::hir;\n-use rustc::ty::{self, CanonicalUserTypeAnnotation, TyCtxt, UserTypeAnnotation};\n+use rustc::ty::{self, CanonicalUserTypeAnnotation, TyCtxt, UserType};\n \n crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'_, 'gcx, 'tcx>;\n@@ -18,7 +18,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n         debug!(\"user_subts_applied_to_ty_of_hir_id: user_ty={:?}\", user_ty);\n         match &self.tables().node_id_to_type(hir_id).sty {\n             ty::Adt(adt_def, ..) => {\n-                if let UserTypeAnnotation::TypeOf(ref mut did, _) = &mut user_ty.value {\n+                if let UserType::TypeOf(ref mut did, _) = &mut user_ty.value {\n                     *did = adt_def.did;\n                 }\n                 Some(user_ty)"}, {"sha": "e4e4f1bc4d4d1ba1915fe15a8475bdc1e75e6efa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -104,7 +104,7 @@ use rustc::mir::interpret::{ConstValue, GlobalId};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{\n     self, AdtKind, CanonicalUserTypeAnnotation, Ty, TyCtxt, GenericParamDefKind, Visibility,\n-    ToPolyTraitRef, ToPredicate, RegionKind, UserTypeAnnotation\n+    ToPolyTraitRef, ToPredicate, RegionKind, UserType\n };\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n@@ -985,7 +985,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n                 };\n \n                 let c_ty = self.fcx.inh.infcx.canonicalize_user_type_annotation(\n-                    &UserTypeAnnotation::Ty(revealed_ty)\n+                    &UserType::Ty(revealed_ty)\n                 );\n                 debug!(\"visit_local: ty.hir_id={:?} o_ty={:?} revealed_ty={:?} c_ty={:?}\",\n                        ty.hir_id, o_ty, revealed_ty, c_ty);\n@@ -2194,7 +2194,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         user_self_ty: None, // not relevant here\n                     };\n \n-                    self.infcx.canonicalize_user_type_annotation(&UserTypeAnnotation::TypeOf(\n+                    self.infcx.canonicalize_user_type_annotation(&UserType::TypeOf(\n                         method.def_id,\n                         user_substs,\n                     ))\n@@ -2239,7 +2239,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if !substs.is_noop() {\n             let canonicalized = self.infcx.canonicalize_user_type_annotation(\n-                &UserTypeAnnotation::TypeOf(def_id, UserSubsts {\n+                &UserType::TypeOf(def_id, UserSubsts {\n                     substs,\n                     user_self_ty,\n                 })\n@@ -2440,7 +2440,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // although I have my doubts). Other sorts of things are\n         // already sufficiently enforced with erased regions. =)\n         if ty.has_free_regions() || ty.has_projections() {\n-            let c_ty = self.infcx.canonicalize_response(&UserTypeAnnotation::Ty(ty));\n+            let c_ty = self.infcx.canonicalize_response(&UserType::Ty(ty));\n             debug!(\"to_ty_saving_user_provided_ty: c_ty={:?}\", c_ty);\n             self.tables.borrow_mut().user_provided_types_mut().insert(ast_ty.hir_id, c_ty);\n         }"}, {"sha": "238b087fe32f86b3dc431672d4396aeaba2775cb", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -404,7 +404,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 .user_provided_types_mut()\n                 .insert(hir_id, c_ty.clone());\n \n-            if let ty::UserTypeAnnotation::TypeOf(_, user_substs) = c_ty.value {\n+            if let ty::UserType::TypeOf(_, user_substs) = c_ty.value {\n                 if self.rustc_dump_user_substs {\n                     // This is a unit-testing mechanism.\n                     let node_id = self.tcx().hir().hir_to_node_id(hir_id);"}, {"sha": "1bbbe67a12cb8f990274ed7818be22877fba0f56", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=ab7bc3a23dfe0d40ea86e828dcd8ad105fcf5a3b", "patch": "@@ -37,7 +37,7 @@ fn main() {\n //        StorageLive(_4);\n //        _4 = std::option::Option<std::boxed::Box<u32>>::None;\n //        FakeRead(ForLet, _4);\n-//        AscribeUserType(_4, o, UserTypeProjection { base: UserTypeAnnotation(1), projs: [] });\n+//        AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] });\n //        StorageLive(_5);\n //        StorageLive(_6);\n //        _6 = move _4;"}]}