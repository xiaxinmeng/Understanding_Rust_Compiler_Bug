{"sha": "9af125d248659d16246279b03a521b8c53a183d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjEyNWQyNDg2NTlkMTYyNDYyNzliMDNhNTIxYjhjNTNhMTgzZDY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-13T02:02:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-13T02:02:14Z"}, "message": "Rollup merge of #53371 - estebank:tuple, r=nikomatsakis\n\nDo not emit E0277 on incorrect tuple destructured binding\n\nFix #50333.", "tree": {"sha": "5f125c207b132adc9d80412ad0cb24d376539706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f125c207b132adc9d80412ad0cb24d376539706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af125d248659d16246279b03a521b8c53a183d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbmcUmCRBK7hj4Ov3rIwAAdHIIAB4hjhQfk/ijbztHZ6By2Mmp\n8yHUsvhpo27Nf0+P8je2uTNGe6zAvNPPdxygoUh/gX8kp3Q0/6xOcnRwE+Fhrt1g\nNiTsk3MB95ZFO8PpdtweWFYtTLjenFO5ZzuVWqzHtra9lLIXPz/FrER79ClSEMk2\nFnhnTNAamBXLipDyoZdz2svObN8ml6YeQT8kgLCmEPHSPw7KeD41JZMjE2yPEOIX\nRLnUfiQDDjespwbaPZsJCu8Sjeo6OncFHb8fyn2UIhQLc79JgMmsPPSJTPm/zXbq\nrjujaojWvqqmxwpw55n03Qxp3ko/4d7JO8wmtLJMiNsaiA3HQBkCB4Of+/QBPMs=\n=vAkk\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f125c207b132adc9d80412ad0cb24d376539706\nparent f2302daef3608c09e2b50193a64611b18ced86f3\nparent 63cd81c7d6eecc580b72fe1b5028a35ca9e19ae1\nauthor kennytm <kennytm@gmail.com> 1536804134 +0800\ncommitter GitHub <noreply@github.com> 1536804134 +0800\n\nRollup merge of #53371 - estebank:tuple, r=nikomatsakis\n\nDo not emit E0277 on incorrect tuple destructured binding\n\nFix #50333.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af125d248659d16246279b03a521b8c53a183d6", "html_url": "https://github.com/rust-lang/rust/commit/9af125d248659d16246279b03a521b8c53a183d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af125d248659d16246279b03a521b8c53a183d6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2302daef3608c09e2b50193a64611b18ced86f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2302daef3608c09e2b50193a64611b18ced86f3", "html_url": "https://github.com/rust-lang/rust/commit/f2302daef3608c09e2b50193a64611b18ced86f3"}, {"sha": "63cd81c7d6eecc580b72fe1b5028a35ca9e19ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cd81c7d6eecc580b72fe1b5028a35ca9e19ae1", "html_url": "https://github.com/rust-lang/rust/commit/63cd81c7d6eecc580b72fe1b5028a35ca9e19ae1"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "7f65a5f0b5a6303205aa6c86cc1aad9a6d50250a", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9af125d248659d16246279b03a521b8c53a183d6/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af125d248659d16246279b03a521b8c53a183d6/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9af125d248659d16246279b03a521b8c53a183d6", "patch": "@@ -298,11 +298,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     TypeVariableOrigin::TypeInference(pat.span)));\n                 let element_tys = tcx.mk_type_list(element_tys_iter);\n                 let pat_ty = tcx.mk_ty(ty::Tuple(element_tys));\n-                self.demand_eqtype(pat.span, expected, pat_ty);\n-                for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n-                    self.check_pat_walk(elem, &element_tys[i], def_bm, true);\n+                if let Some(mut err) = self.demand_eqtype_diag(pat.span, expected, pat_ty) {\n+                    err.emit();\n+                    // Walk subpatterns with an expected type of `err` in this case to silence\n+                    // further errors being emitted when using the bindings. #50333\n+                    let element_tys_iter = (0..max_len).map(|_| tcx.types.err);\n+                    for (_, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n+                        self.check_pat_walk(elem, &tcx.types.err, def_bm, true);\n+                    }\n+                    tcx.mk_tup(element_tys_iter)\n+                } else {\n+                    for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n+                        self.check_pat_walk(elem, &element_tys[i], def_bm, true);\n+                    }\n+                    pat_ty\n                 }\n-                pat_ty\n             }\n             PatKind::Box(ref inner) => {\n                 let inner_ty = self.next_ty_var(TypeVariableOrigin::TypeInference(inner.span));"}, {"sha": "68e579788bca1e063e7c2e69d053b483a3ddc4a7", "filename": "src/test/ui/elide-errors-on-mismatched-tuple.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9af125d248659d16246279b03a521b8c53a183d6/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af125d248659d16246279b03a521b8c53a183d6/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.rs?ref=9af125d248659d16246279b03a521b8c53a183d6", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Hide irrelevant E0277 errors (#50333)\n+\n+trait T {}\n+\n+struct A;\n+impl T for A {}\n+impl A {\n+    fn new() -> Self {\n+        Self {}\n+    }\n+}\n+\n+fn main() {\n+    let (a, b, c) = (A::new(), A::new()); // This tuple is 2 elements, should be three\n+    //~^ ERROR mismatched types\n+    let ts: Vec<&T> = vec![&a, &b, &c];\n+    // There is no E0277 error above, as `a`, `b` and `c` are `TyErr`\n+}"}, {"sha": "b901175d53450b0bccf81719aabdb6931f49bdee", "filename": "src/test/ui/elide-errors-on-mismatched-tuple.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9af125d248659d16246279b03a521b8c53a183d6/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9af125d248659d16246279b03a521b8c53a183d6/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr?ref=9af125d248659d16246279b03a521b8c53a183d6", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/elide-errors-on-mismatched-tuple.rs:24:9\n+   |\n+LL |     let (a, b, c) = (A::new(), A::new()); // This tuple is 2 elements, should be three\n+   |         ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n+   |\n+   = note: expected type `(A, A)`\n+              found type `(_, _, _)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}