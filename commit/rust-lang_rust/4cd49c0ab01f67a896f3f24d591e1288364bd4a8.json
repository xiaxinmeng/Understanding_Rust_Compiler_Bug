{"sha": "4cd49c0ab01f67a896f3f24d591e1288364bd4a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDQ5YzBhYjAxZjY3YTg5NmYzZjI0ZDU5MWUxMjg4MzY0YmQ0YTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T22:13:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T22:13:29Z"}, "message": "Improve logging in type.ml, give it indentation and per-statement context.", "tree": {"sha": "9c6b70b65913b0874587d007d48c9a2b336ebcfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6b70b65913b0874587d007d48c9a2b336ebcfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd49c0ab01f67a896f3f24d591e1288364bd4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd49c0ab01f67a896f3f24d591e1288364bd4a8", "html_url": "https://github.com/rust-lang/rust/commit/4cd49c0ab01f67a896f3f24d591e1288364bd4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd49c0ab01f67a896f3f24d591e1288364bd4a8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b450838c46150ac381719fd0093a71b6efe2b21e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b450838c46150ac381719fd0093a71b6efe2b21e", "html_url": "https://github.com/rust-lang/rust/commit/b450838c46150ac381719fd0093a71b6efe2b21e"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "2172623491b0e271988735a5747b001bc87e64b6", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cd49c0ab01f67a896f3f24d591e1288364bd4a8/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4cd49c0ab01f67a896f3f24d591e1288364bd4a8/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=4cd49c0ab01f67a896f3f24d591e1288364bd4a8", "patch": "@@ -1346,11 +1346,13 @@ let sprintf_effect = sprintf_fmt fmt_effect;;\n let sprintf_tag = sprintf_fmt fmt_tag;;\n let sprintf_carg = sprintf_fmt fmt_carg;;\n let sprintf_constr = sprintf_fmt fmt_constr;;\n-let sprintf_stmt = sprintf_fmt fmt_stmt;;\n let sprintf_mod_items = sprintf_fmt fmt_mod_items;;\n let sprintf_decl_params = sprintf_fmt fmt_decl_params;;\n let sprintf_app_args = sprintf_fmt fmt_app_args;;\n \n+(* You probably want this one; stmt has a leading \\n *)\n+let sprintf_stmt = sprintf_fmt fmt_stmt_body;;\n+\n (*\n  * Local Variables:\n  * fill-column: 78;"}, {"sha": "6a3ca920cdd3c0178638b47f0578a9a706e29a1a", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4cd49c0ab01f67a896f3f24d591e1288364bd4a8/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4cd49c0ab01f67a896f3f24d591e1288364bd4a8/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=4cd49c0ab01f67a896f3f24d591e1288364bd4a8", "patch": "@@ -167,6 +167,9 @@ let rec resolve_tyvar (tv:tyvar) : tyvar =\n ;;\n \n let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n+\n+  let depth = ref 0 in\n+\n   let log cx = Session.log \"type\"\n     cx.ctxt_sess.Session.sess_log_type\n     cx.ctxt_sess.Session.sess_log_out\n@@ -221,20 +224,27 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         | _ -> ()\n \n     and unify_tyvars (auto_deref:bool) (av:tyvar) (bv:tyvar) : unit =\n-      let dstr = if auto_deref then \" w/ auto-deref\" else \"\" in\n-        iflog cx (fun _ ->\n-                    log cx \"unifying types%s:\" dstr;\n-                    log cx \"input tyvar A: %s\" (tyspec_to_str !av);\n-                    log cx \"input tyvar B: %s\" (tyspec_to_str !bv));\n+      let indent = String.make (4 * (!depth)) ' ' in\n+        iflog cx\n+          (fun _ ->\n+             log cx \"%s> unifying types:\" indent;\n+             if auto_deref\n+             then\n+               log cx \"%s> (w/ auto-deref)\" indent;\n+             log cx \"%s> input tyvar A:     %s\" indent (tyspec_to_str !av);\n+             log cx \"%s> input tyvar B:     %s\" indent (tyspec_to_str !bv));\n         check_sane_tyvar av;\n         check_sane_tyvar bv;\n \n+        incr depth;\n         unify_tyvars' auto_deref av bv;\n+        decr depth;\n \n-        iflog cx (fun _ ->\n-                    log cx \"unified types%s:\" dstr;\n-                    log cx \"output tyvar A: %s\" (tyspec_to_str !av);\n-                    log cx \"output tyvar B: %s\" (tyspec_to_str !bv));\n+        iflog cx\n+          (fun _ ->\n+             log cx \"%s< unified types:\" indent;\n+             log cx \"%s< output tyvar A:     %s\" indent (tyspec_to_str !av);\n+             log cx \"%s< output tyvar B:     %s\" indent (tyspec_to_str !bv));\n         check_sane_tyvar av;\n         check_sane_tyvar bv;\n \n@@ -1207,6 +1217,9 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n     let visit_stmt_pre (stmt:Ast.stmt) : unit =\n       try\n+        log cx \"\";\n+        log cx \"typechecking stmt: %a\" Ast.sprintf_stmt stmt;\n+        log cx \"\";\n         visit_stmt_pre_full stmt;\n         (* \n          * Reset any item-parameters that were resolved to types"}]}