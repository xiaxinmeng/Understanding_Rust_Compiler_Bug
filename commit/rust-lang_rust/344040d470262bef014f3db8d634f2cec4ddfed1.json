{"sha": "344040d470262bef014f3db8d634f2cec4ddfed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NDA0MGQ0NzAyNjJiZWYwMTRmM2RiOGQ2MzRmMmNlYzRkZGZlZDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-31T21:48:49Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "librustc: Get rid of `ident_to_str` calls in resolve", "tree": {"sha": "2c25452fb97afecfe86429ab93b2865e7776893e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c25452fb97afecfe86429ab93b2865e7776893e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/344040d470262bef014f3db8d634f2cec4ddfed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/344040d470262bef014f3db8d634f2cec4ddfed1", "html_url": "https://github.com/rust-lang/rust/commit/344040d470262bef014f3db8d634f2cec4ddfed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/344040d470262bef014f3db8d634f2cec4ddfed1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a3a4169c08dd8f9687605f256e7e1eeaa07ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a3a4169c08dd8f9687605f256e7e1eeaa07ce0", "html_url": "https://github.com/rust-lang/rust/commit/64a3a4169c08dd8f9687605f256e7e1eeaa07ce0"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "6ee44c03a8041cf15293e4d8ff486f2bd6de9a79", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/344040d470262bef014f3db8d634f2cec4ddfed1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/344040d470262bef014f3db8d634f2cec4ddfed1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=344040d470262bef014f3db8d634f2cec4ddfed1", "patch": "@@ -1893,8 +1893,9 @@ impl Resolver {\n         csearch::each_child_of_item(self.session.cstore,\n                                     def_id,\n                                     |def_like, child_ident, visibility| {\n+            let child_ident_string = token::get_ident(child_ident.name);\n             debug!(\"(populating external module) ... found ident: {}\",\n-                   token::ident_to_str(&child_ident));\n+                   child_ident_string.get());\n             self.build_reduced_graph_for_external_crate_def(module,\n                                                             def_like,\n                                                             child_ident,\n@@ -3102,11 +3103,12 @@ impl Resolver {\n         // top of the crate otherwise.\n         let mut containing_module;\n         let mut i;\n-        if \"self\" == token::ident_to_str(&module_path[0]) {\n+        let first_module_path_string = token::get_ident(module_path[0].name);\n+        if \"self\" == first_module_path_string.get() {\n             containing_module =\n                 self.get_nearest_normal_module_parent_or_self(module_);\n             i = 1;\n-        } else if \"super\" == token::ident_to_str(&module_path[0]) {\n+        } else if \"super\" == first_module_path_string.get() {\n             containing_module =\n                 self.get_nearest_normal_module_parent_or_self(module_);\n             i = 0;  // We'll handle `super` below.\n@@ -3115,8 +3117,11 @@ impl Resolver {\n         }\n \n         // Now loop through all the `super`s we find.\n-        while i < module_path.len() &&\n-                \"super\" == token::ident_to_str(&module_path[i]) {\n+        while i < module_path.len() {\n+            let string = token::get_ident(module_path[i].name);\n+            if \"super\" != string.get() {\n+                break\n+            }\n             debug!(\"(resolving module prefix) resolving `super` at {}\",\n                    self.module_to_str(containing_module));\n             match self.get_nearest_normal_module_parent(containing_module) {"}]}