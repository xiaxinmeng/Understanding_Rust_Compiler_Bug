{"sha": "6fbaa72642dacf92746c695046c8dfe6834ef18f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYmFhNzI2NDJkYWNmOTI3NDZjNjk1MDQ2YzhkZmU2ODM0ZWYxOGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-27T11:10:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-27T21:32:15Z"}, "message": "fix diagnostics printing when triggered during TLS dtor scheduling", "tree": {"sha": "ec1b739f3e7c82c6f6604267275b0b9fe3cd90bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec1b739f3e7c82c6f6604267275b0b9fe3cd90bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fbaa72642dacf92746c695046c8dfe6834ef18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fbaa72642dacf92746c695046c8dfe6834ef18f", "html_url": "https://github.com/rust-lang/rust/commit/6fbaa72642dacf92746c695046c8dfe6834ef18f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fbaa72642dacf92746c695046c8dfe6834ef18f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c77540ce13890ba5f16f276967e86f8d7fb8f78e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c77540ce13890ba5f16f276967e86f8d7fb8f78e", "html_url": "https://github.com/rust-lang/rust/commit/c77540ce13890ba5f16f276967e86f8d7fb8f78e"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "2e8809cd73611b1ff3dd77a7f84a5d7e15f5a721", "filename": "src/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6fbaa72642dacf92746c695046c8dfe6834ef18f/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fbaa72642dacf92746c695046c8dfe6834ef18f/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=6fbaa72642dacf92746c695046c8dfe6834ef18f", "patch": "@@ -162,7 +162,15 @@ fn report_msg<'tcx>(\n     } else {\n         tcx.sess.diagnostic().span_note_diag(span, title)\n     };\n-    err.span_label(span, span_msg);\n+    // Show main message.\n+    if span != DUMMY_SP {\n+        err.span_label(span, span_msg);\n+    } else {\n+        // Make sure we show the message even when it is a dummy span.\n+        err.note(&span_msg);\n+        err.note(\"(no span available)\");\n+    }\n+    // Show help messages.\n     if !helps.is_empty() {\n         // Add visual separator before backtrace.\n         helps.last_mut().unwrap().push_str(\"\\n\");\n@@ -198,7 +206,7 @@ pub fn register_diagnostic(e: NonHaltingDiagnostic) {\n /// after a step was taken.\n pub struct TopFrameInfo<'tcx> {\n     stack_size: usize,\n-    instance: ty::Instance<'tcx>,\n+    instance: Option<ty::Instance<'tcx>>,\n     span: Span,\n }\n \n@@ -209,11 +217,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         DIAGNOSTICS.with(|diagnostics| assert!(diagnostics.borrow().is_empty()));\n \n         let this = self.eval_context_ref();\n+        if this.active_thread_stack().is_empty() {\n+            // Diagnostics can happen even with the emoty stack (e.g. deallocation thread-local statics).\n+            return TopFrameInfo { stack_size: 0, instance: None, span: DUMMY_SP };\n+        }\n         let frame = this.frame();\n \n         TopFrameInfo {\n             stack_size: this.active_thread_stack().len(),\n-            instance: frame.instance,\n+            instance: Some(frame.instance),\n             span: frame.current_source_info().map_or(DUMMY_SP, |si| si.span),\n         }\n     }\n@@ -237,15 +249,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             if stacktrace.len() < info.stack_size {\n                 assert!(stacktrace.len() == info.stack_size-1, \"we should never pop more than one frame at once\");\n                 let frame_info = FrameInfo {\n-                    instance: info.instance,\n+                    instance: info.instance.unwrap(),\n                     span: info.span,\n                     lint_root: None,\n                 };\n                 stacktrace.insert(0, frame_info);\n-            } else {\n+            } else if let Some(instance) = info.instance {\n                 // Adjust topmost frame.\n                 stacktrace[0].span = info.span;\n-                assert_eq!(stacktrace[0].instance, info.instance, \"we should not pop and push a frame in one step\");\n+                assert_eq!(stacktrace[0].instance, instance, \"we should not pop and push a frame in one step\");\n             }\n \n             // Show diagnostics."}, {"sha": "cc5a6eb21fabac1083490440533eda642d9683f7", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fbaa72642dacf92746c695046c8dfe6834ef18f/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fbaa72642dacf92746c695046c8dfe6834ef18f/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=6fbaa72642dacf92746c695046c8dfe6834ef18f", "patch": "@@ -211,11 +211,10 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n     let res: InterpResult<'_, i64> = (|| {\n         // Main loop.\n         loop {\n+            let info = ecx.preprocess_diagnostics();\n             match ecx.schedule()? {\n                 SchedulingAction::ExecuteStep => {\n-                    let info = ecx.preprocess_diagnostics();\n                     assert!(ecx.step()?, \"a terminated thread was scheduled for execution\");\n-                    ecx.process_diagnostics(info);\n                 }\n                 SchedulingAction::ExecuteTimeoutCallback => {\n                     assert!(ecx.machine.communicate,\n@@ -233,6 +232,7 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n                     break;\n                 }\n             }\n+            ecx.process_diagnostics(info);\n         }\n         let return_code = ecx.read_scalar(ret_place.into())?.check_init()?.to_machine_isize(&ecx)?;\n         Ok(return_code)"}, {"sha": "2ba0782f7054f74030259af1741a0c04dcfdc082", "filename": "src/shims/tls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fbaa72642dacf92746c695046c8dfe6834ef18f/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fbaa72642dacf92746c695046c8dfe6834ef18f/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=6fbaa72642dacf92746c695046c8dfe6834ef18f", "patch": "@@ -348,6 +348,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 return Ok(())\n             }\n         }\n+        // The remaining dtors make some progress each time around the scheduler loop,\n+        // until they return `false` to indicate that they are done.\n+\n         // The macOS thread wide destructor runs \"before any TLS slots get\n         // freed\", so do that first.\n         if this.schedule_macos_tls_dtor()? {"}]}