{"sha": "9ef2c30a1ae8dc6379e6c3a2e95815be5b192755", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZjJjMzBhMWFlOGRjNjM3OWU2YzNhMmU5NTgxNWJlNWIxOTI3NTU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-18T21:43:44Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-25T17:28:09Z"}, "message": "Preserve visibility scopes in stored generator locals\n\nUnfortunately, this didn't have quite the effect I was hoping for.\nLocals still appear visible at every point in the function, regardless\nof scopes. I suspect all the rewriting of the MIR we do for the\ngenerator transform makes these scopes less useful.\n\nI didn't observe any regressions in behavior, but it's possible that\nthis change is wrong without additional changes to the MIR.", "tree": {"sha": "a400224554c60bdf00e9beb80aee2acd7e3d60cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a400224554c60bdf00e9beb80aee2acd7e3d60cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ef2c30a1ae8dc6379e6c3a2e95815be5b192755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef2c30a1ae8dc6379e6c3a2e95815be5b192755", "html_url": "https://github.com/rust-lang/rust/commit/9ef2c30a1ae8dc6379e6c3a2e95815be5b192755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ef2c30a1ae8dc6379e6c3a2e95815be5b192755/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f6de4aca47ddd1daa5217813848155a2a825fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f6de4aca47ddd1daa5217813848155a2a825fa", "html_url": "https://github.com/rust-lang/rust/commit/b8f6de4aca47ddd1daa5217813848155a2a825fa"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "d524ec05462974b32409b5bd9c544020e7e86b39", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ef2c30a1ae8dc6379e6c3a2e95815be5b192755/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef2c30a1ae8dc6379e6c3a2e95815be5b192755/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=9ef2c30a1ae8dc6379e6c3a2e95815be5b192755", "patch": "@@ -649,14 +649,15 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                     .iter()\n                     .zip(upvar_tys)\n                     .enumerate()\n-                    .map(|(i, (upvar, ty))| (None, i, upvar.debug_name, upvar.by_ref, ty));\n+                    .map(|(i, (upvar, ty))| {\n+                        (None, i, upvar.debug_name, upvar.by_ref, ty, scope, DUMMY_SP)\n+                    });\n \n                 let generator_fields = mir.generator_layout.as_ref().map(|generator_layout| {\n                     let (def_id, gen_substs) = match closure_layout.ty.sty {\n                         ty::Generator(def_id, substs, _) => (def_id, substs),\n                         _ => bug!(\"generator layout without generator substs\"),\n                     };\n-                    // TODO handle variant scopes here\n                     let state_tys = gen_substs.state_tys(def_id, tcx);\n \n                     generator_layout.variant_fields.iter()\n@@ -668,18 +669,25 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                                 .zip(tys)\n                                 .enumerate()\n                                 .filter_map(move |(i, (decl, ty))| {\n-                                    let ty = fx.monomorphize(&ty);\n-                                    decl.name.map(|name| {\n-                                        (variant_idx, i, name, false, ty)\n-                                })\n+                                    if let Some(name) = decl.name {\n+                                        let ty = fx.monomorphize(&ty);\n+                                        let (var_scope, var_span) = fx.debug_loc(mir::SourceInfo {\n+                                            span: decl.source_info.span,\n+                                            scope: decl.visibility_scope,\n+                                        });\n+                                        let var_scope = var_scope.unwrap_or(scope);\n+                                        Some((variant_idx, i, name, false, ty, var_scope, var_span))\n+                                    } else {\n+                                        None\n+                                    }\n                             })\n                         })\n                 }).into_iter().flatten();\n \n                 upvars.chain(generator_fields)\n             };\n \n-            for (variant_idx, field, name, by_ref, ty) in extra_locals {\n+            for (variant_idx, field, name, by_ref, ty, var_scope, var_span) in extra_locals {\n                 let fields = match variant_idx {\n                     Some(variant_idx) => {\n                         match &closure_layout.variants {\n@@ -713,10 +721,10 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                     &fx.debug_context,\n                     name,\n                     ty,\n-                    scope,\n+                    var_scope,\n                     variable_access,\n                     VariableKind::LocalVariable,\n-                    DUMMY_SP\n+                    var_span\n                 );\n             }\n         });"}]}