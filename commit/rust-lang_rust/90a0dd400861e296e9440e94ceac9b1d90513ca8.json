{"sha": "90a0dd400861e296e9440e94ceac9b1d90513ca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYTBkZDQwMDg2MWUyOTZlOTQ0MGU5NGNlYWM5YjFkOTA1MTNjYTg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-10T23:16:15Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-10T23:35:41Z"}, "message": "core: Change XXXs into proper FIXMEs with issue numbers", "tree": {"sha": "86c5d85f1ddc8ccca96ca33c9426349eb9e8ae93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c5d85f1ddc8ccca96ca33c9426349eb9e8ae93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a0dd400861e296e9440e94ceac9b1d90513ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a0dd400861e296e9440e94ceac9b1d90513ca8", "html_url": "https://github.com/rust-lang/rust/commit/90a0dd400861e296e9440e94ceac9b1d90513ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a0dd400861e296e9440e94ceac9b1d90513ca8/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603e13cc02cd262f8612676f124edc986bf9caa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/603e13cc02cd262f8612676f124edc986bf9caa9", "html_url": "https://github.com/rust-lang/rust/commit/603e13cc02cd262f8612676f124edc986bf9caa9"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "aed8ebd756fa5b5fb67528564da40d29d21fc5e8", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=90a0dd400861e296e9440e94ceac9b1d90513ca8", "patch": "@@ -344,7 +344,7 @@ pub fn cleanup_stack_for_failure() {\n             roots.insert(*root, ());\n \n             if ptr::is_null(tydesc) {\n-                // XXX: Destroy this box\n+                // FIXME #4420: Destroy this box\n             } else {\n                 rustrt::rust_call_tydesc_glue(*root, tydesc, 3 as size_t);\n             }"}, {"sha": "1df34b271bf1de406f32c1ec25f8dfa198d29920", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=90a0dd400861e296e9440e94ceac9b1d90513ca8", "patch": "@@ -202,7 +202,7 @@ pub type Packet<T: Owned> = {\n \n #[doc(hidden)]\n pub trait HasBuffer {\n-    // XXX This should not have a trailing underscore\n+    // FIXME #4421: This should not have a trailing underscore\n     fn set_buffer_(b: *libc::c_void);\n }\n "}, {"sha": "00087347c88cf39b9e279e7e1720052c2f0c5ef2", "filename": "src/libcore/private.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=90a0dd400861e296e9440e94ceac9b1d90513ca8", "patch": "@@ -83,8 +83,7 @@ pub unsafe fn chan_from_global_ptr<T: Owned>(\n         let (setup1_po, setup1_ch) = pipes::stream();\n         let (setup2_po, setup2_ch) = pipes::stream();\n \n-        // XXX: Ugly type inference hints\n-        let setup1_po: pipes::Port<oldcomm::Chan<T>> = setup1_po;\n+        // FIXME #4422: Ugly type inference hint\n         let setup2_po: pipes::Port<Msg> = setup2_po;\n \n         do task_fn().spawn |move f, move setup1_ch, move setup2_po| {"}, {"sha": "1e6aa6324aa5d36e2e2b525d79d8d7ba02af97a0", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=90a0dd400861e296e9440e94ceac9b1d90513ca8", "patch": "@@ -60,7 +60,8 @@ impl Writer : EscapedCharWriter {\n             '\"' => self.write_str(\"\\\\\\\"\"),\n             '\\x20'..'\\x7e' => self.write_char(ch),\n             _ => {\n-                // XXX: This is inefficient because it requires a malloc.\n+                // FIXME #4423: This is inefficient because it requires a\n+                // malloc.\n                 self.write_str(char::escape_unicode(ch))\n             }\n         }\n@@ -96,7 +97,7 @@ impl i32 : Repr {\n     fn write_repr(writer: @Writer) { writer.write_int(self as int); }\n }\n impl i64 : Repr {\n-    // XXX: This can lose precision.\n+    // FIXME #4424: This can lose precision.\n     fn write_repr(writer: @Writer) { writer.write_int(self as int); }\n }\n \n@@ -113,20 +114,20 @@ impl u32 : Repr {\n     fn write_repr(writer: @Writer) { writer.write_uint(self as uint); }\n }\n impl u64 : Repr {\n-    // XXX: This can lose precision.\n+    // FIXME #4424: This can lose precision.\n     fn write_repr(writer: @Writer) { writer.write_uint(self as uint); }\n }\n \n impl float : Repr {\n-    // XXX: This mallocs.\n+    // FIXME #4423: This mallocs.\n     fn write_repr(writer: @Writer) { writer.write_str(self.to_str()); }\n }\n impl f32 : Repr {\n-    // XXX: This mallocs.\n+    // FIXME #4423 This mallocs.\n     fn write_repr(writer: @Writer) { writer.write_str(self.to_str()); }\n }\n impl f64 : Repr {\n-    // XXX: This mallocs.\n+    // FIXME #4423: This mallocs.\n     fn write_repr(writer: @Writer) { writer.write_str(self.to_str()); }\n }\n "}, {"sha": "0ff85e57a65b221f703f78542e04baebc3dcb3ec", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=90a0dd400861e296e9440e94ceac9b1d90513ca8", "patch": "@@ -13,7 +13,8 @@\n #[legacy_modes]; // tjc: remove after snapshot\n \n // NB: transitionary, de-mode-ing.\n-// XXX: Can't forbid this because frame_address needs a deprecated mode.\n+// FIXME #4425: Can't forbid this because frame_address needs a deprecated\n+// mode.\n #[allow(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n "}, {"sha": "9ddbbb70b0a09db5b7ab8d40053e2bfc6514f8d7", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=90a0dd400861e296e9440e94ceac9b1d90513ca8", "patch": "@@ -134,7 +134,7 @@ pub pure fn begin_unwind(msg: ~str, file: ~str, line: uint) -> ! {\n     }\n }\n \n-// XXX: Temorary until rt::rt_fail_ goes away\n+// FIXME #4427: Temporary until rt::rt_fail_ goes away\n pub pure fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n     unsafe {\n         gc::cleanup_stack_for_failure();"}, {"sha": "5152c3c049c0d9cc7835c1ed0da21186053017f9", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=90a0dd400861e296e9440e94ceac9b1d90513ca8", "patch": "@@ -592,7 +592,7 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n             }\n \n             // Run the box annihilator.\n-            // XXX: Crashy.\n+            // FIXME #4428: Crashy.\n             // unsafe { cleanup::annihilate(); }\n         };\n "}, {"sha": "cba0ba5d71c54c37ec7d3e0c8c40e0e52d9fde9a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a0dd400861e296e9440e94ceac9b1d90513ca8/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=90a0dd400861e296e9440e94ceac9b1d90513ca8", "patch": "@@ -563,7 +563,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n-        // XXX: Should be rusti::uninit() - we don't need this zeroed\n+        // FIXME #4204: Should be rusti::uninit() - we don't need this zeroed\n         let mut val = rusti::init();\n         val <-> *valptr;\n         raw::set_len(v, ln - 1u);\n@@ -636,7 +636,7 @@ pub fn push_all_move<T>(v: &mut ~[T], rhs: ~[T]) {\n     unsafe {\n         do as_mut_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n-                // XXX Should be rusti::uninit() - don't need to zero\n+                // FIXME #4204 Should be rusti::uninit() - don't need to zero\n                 let mut x = rusti::init();\n                 x <-> *ptr::mut_offset(p, i);\n                 push(v, x);\n@@ -653,7 +653,7 @@ pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n         unsafe {\n             // This loop is optimized out for non-drop types.\n             for uint::range(newlen, oldlen) |i| {\n-                // XXX Should be rusti::uninit() - don't need to zero\n+                // FIXME #4204 Should be rusti::uninit() - don't need to zero\n                 let mut dropped = rusti::init();\n                 dropped <-> *ptr::mut_offset(p, i);\n             }\n@@ -678,7 +678,7 @@ pub fn dedup<T: Eq>(v: &mut ~[T]) unsafe {\n             // last_written < next_to_read < ln\n             if *ptr::mut_offset(p, next_to_read) ==\n                 *ptr::mut_offset(p, last_written) {\n-                // XXX Should be rusti::uninit() - don't need to zero\n+                // FIXME #4204 Should be rusti::uninit() - don't need to zero\n                 let mut dropped = rusti::init();\n                 dropped <-> *ptr::mut_offset(p, next_to_read);\n             } else {"}]}