{"sha": "1f21ab114ee441d89a1a1f02f63bba638c0af01d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMjFhYjExNGVlNDQxZDg5YTFhMWYwMmY2M2JiYTYzOGMwYWYwMWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-14T07:57:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-14T16:17:49Z"}, "message": "bless mir-opt, codegen, and remaining ui tests", "tree": {"sha": "2575cedf6581f23046cf080e4bd419b8b982e7e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2575cedf6581f23046cf080e4bd419b8b982e7e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f21ab114ee441d89a1a1f02f63bba638c0af01d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f21ab114ee441d89a1a1f02f63bba638c0af01d", "html_url": "https://github.com/rust-lang/rust/commit/1f21ab114ee441d89a1a1f02f63bba638c0af01d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f21ab114ee441d89a1a1f02f63bba638c0af01d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae950a2dc78e51493034f543184b1664647dd8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae950a2dc78e51493034f543184b1664647dd8e6", "html_url": "https://github.com/rust-lang/rust/commit/ae950a2dc78e51493034f543184b1664647dd8e6"}], "stats": {"total": 286, "additions": 140, "deletions": 146}, "files": [{"sha": "7f945299c22a6c9bb77fb8b39f9c797071da59d4", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -10,7 +10,7 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @alloc8 = {{.*}}, align 2\n+// CHECK: @alloc9 = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used"}, {"sha": "698dfe6b4f3419e76f7770b06136dfe13e53294d", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -12,7 +12,7 @@ mod aux_mod;\n include!(\"aux_mod.rs\");\n \n // Here we check that the expansion of the file!() macro is mapped.\n-// CHECK: @alloc1 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>, align 1\n+// CHECK: @alloc2 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>, align 1\n pub static FILE_PATH: &'static str = file!();\n \n fn main() {"}, {"sha": "e22adae815c020816e7c9a1d740b4d45d6ae23ed", "filename": "src/test/mir-opt/byte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -16,10 +16,10 @@ fn main() -> () {\n         _1 = const b\"foo\";               // scope 0 at $DIR/byte_slice.rs:5:13: 5:19\n                                          // ty::Const\n                                          // + ty: &[u8; 3]\n-                                         // + val: Value(Scalar(alloc0))\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:5:13: 5:19\n-                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0)) }\n+                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc1)) }\n         StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n         _2 = [const 5_u8, const 120_u8]; // scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n         _0 = const ();                   // scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n@@ -29,6 +29,6 @@ fn main() -> () {\n     }\n }\n \n-alloc0 (size: 3, align: 1) {\n+alloc1 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }"}, {"sha": "8e02dca4fb8b6541694c546117efd7479b41ed99", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc0))\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n@@ -23,43 +23,43 @@ fn main() -> () {\n     }\n }\n \n-alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500alloc17\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+alloc1 (static: FOO, size: 8, align: 4) {\n+    \u257e\u2500alloc18\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc17 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc4\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc8\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc13\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc18 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc5\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc9\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc14\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc4 (size: 0, align: 4) {}\n+alloc5 (size: 0, align: 4) {}\n \n-alloc8 (size: 16, align: 4) {\n-    \u257e\u2500alloc7\u2500\u2500\u257c 03 00 00 00 \u257e\u2500alloc9\u2500\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+alloc9 (size: 16, align: 4) {\n+    \u257e\u2500alloc8\u2500\u2500\u257c 03 00 00 00 \u257e\u2500alloc10\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n }\n \n-alloc7 (size: 3, align: 1) {\n+alloc8 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n-alloc9 (size: 3, align: 1) {\n+alloc10 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc13 (size: 24, align: 4) {\n-    0x00 \u2502 \u257e\u2500alloc12\u2500\u257c 03 00 00 00 \u257e\u2500alloc14\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 \u257e\u2500alloc15\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+alloc14 (size: 24, align: 4) {\n+    0x00 \u2502 \u257e\u2500alloc13\u2500\u257c 03 00 00 00 \u257e\u2500alloc15\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 \u257e\u2500alloc16\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc12 (size: 3, align: 1) {\n+alloc13 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n \n-alloc14 (size: 3, align: 1) {\n+alloc15 (size: 3, align: 1) {\n     6d 6f 70                                        \u2502 mop\n }\n \n-alloc15 (size: 4, align: 1) {\n+alloc16 (size: 4, align: 1) {\n     6d c3 b6 70                                     \u2502 m..p\n }"}, {"sha": "88cdbda2fae36cbd28ccfa25c9cb86dc2914a5c4", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc0))\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n@@ -23,47 +23,47 @@ fn main() -> () {\n     }\n }\n \n-alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc1 (static: FOO, size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc17 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc18 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc4 (size: 0, align: 8) {}\n+alloc5 (size: 0, align: 8) {}\n \n-alloc8 (size: 32, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc9 (size: 32, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc7 (size: 3, align: 1) {\n+alloc8 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n-alloc9 (size: 3, align: 1) {\n+alloc10 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc13 (size: 48, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc14 (size: 48, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc12 (size: 3, align: 1) {\n+alloc13 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n \n-alloc14 (size: 3, align: 1) {\n+alloc15 (size: 3, align: 1) {\n     6d 6f 70                                        \u2502 mop\n }\n \n-alloc15 (size: 4, align: 1) {\n+alloc16 (size: 4, align: 1) {\n     6d c3 b6 70                                     \u2502 m..p\n }"}, {"sha": "059b721f5bb6332d0d8ac8e70e609ae0e68e9fa5", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc0))\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n@@ -23,42 +23,42 @@ fn main() -> () {\n     }\n }\n \n-alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500alloc27\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+alloc1 (static: FOO, size: 8, align: 4) {\n+    \u257e\u2500alloc28\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc27 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc12\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc17\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc25\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc28 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc13\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc18\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc26\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc12 (size: 0, align: 4) {}\n+alloc13 (size: 0, align: 4) {}\n \n-alloc17 (size: 8, align: 4) {\n-    \u257e\u2500alloc15\u2500\u257c \u257e\u2500alloc16\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc18 (size: 8, align: 4) {\n+    \u257e\u2500alloc16\u2500\u257c \u257e\u2500alloc17\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc15 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc16 (size: 1, align: 1) {\n+alloc17 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc25 (size: 12, align: 4) {\n-    \u257e\u2500a21+0x3\u2500\u257c \u257e\u2500alloc22\u2500\u257c \u257e\u2500a24+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc26 (size: 12, align: 4) {\n+    \u257e\u2500a22+0x3\u2500\u257c \u257e\u2500alloc23\u2500\u257c \u257e\u2500a25+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc21 (size: 4, align: 1) {\n+alloc22 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc22 (size: 1, align: 1) {\n+alloc23 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc24 (size: 4, align: 1) {\n+alloc25 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "d6a97917d6226c7f5aece75f866cbe85a12ca581", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc0))\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n@@ -23,45 +23,45 @@ fn main() -> () {\n     }\n }\n \n-alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc27\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc1 (static: FOO, size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc28\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc27 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc28 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc25\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc26\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc12 (size: 0, align: 8) {}\n+alloc13 (size: 0, align: 8) {}\n \n-alloc17 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc18 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc15 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc16 (size: 1, align: 1) {\n+alloc17 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc25 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc21+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc22\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc24+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc26 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc22+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc23\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc25+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc21 (size: 4, align: 1) {\n+alloc22 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc22 (size: 1, align: 1) {\n+alloc23 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc24 (size: 4, align: 1) {\n+alloc25 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "32000340dcebfc35a4bd434ea0fe3a2c7cb393e6", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc0: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc0))\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0)) }\n+                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n@@ -23,31 +23,31 @@ fn main() -> () {\n     }\n }\n \n-alloc0 (static: FOO, size: 4, align: 4) {\n-    \u257e\u2500alloc10\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+alloc1 (static: FOO, size: 4, align: 4) {\n+    \u257e\u2500alloc11\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n-alloc10 (size: 168, align: 1) {\n+alloc11 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc5\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc6\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc7\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n-    0x90 \u2502 \u257e\u2500a8+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc8\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x90 \u2502 \u257e\u2500a9+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc5 (size: 4, align: 4) {\n+alloc6 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc7 (fn: main)\n+alloc8 (fn: main)\n \n-alloc8 (size: 100, align: 1) {\n+alloc9 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "cac882333aeb94debb5ea1a446f5bb613d8b7643", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc0: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc0))\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0)) }\n+                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n@@ -23,32 +23,32 @@ fn main() -> () {\n     }\n }\n \n-alloc0 (static: FOO, size: 8, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc1 (static: FOO, size: 8, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc11\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc10 (size: 180, align: 1) {\n+alloc11 (size: 180, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc5\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc6\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n     0x20 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 ef cd ab 00 00 00 00 00 00 00 00 \u2502 \u2500\u2500\u2500\u257c............\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x80 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500 \u2502 ..............\u257e\u2500\n-    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc8+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc9+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0xa0 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0xb0 \u2502 00 00 00 00                                     \u2502 ....\n }\n \n-alloc5 (size: 4, align: 4) {\n+alloc6 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc7 (fn: main)\n+alloc8 (fn: main)\n \n-alloc8 (size: 100, align: 1) {\n+alloc9 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "a64c960b9f716bf27f739eb6b3937c82f20fe164", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -7,20 +7,20 @@ promoted[0] in BAR: &[&i32; 1] = {\n     let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n \n     bb0: {\n-        _3 = const {alloc0: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+        _3 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Value(Scalar(alloc0))\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n+                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n         _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n         _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n         return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n     }\n }\n \n-alloc0 (static: Y, size: 4, align: 4) {\n+alloc1 (static: Y, size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }"}, {"sha": "6f4bd65b85d4d784f210dd403aa89eeeb11e6ffa", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -16,16 +16,16 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n--         _5 = const {alloc0: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+-         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n +         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n                                            // ty::Const\n -                                          // + ty: &i32\n--                                          // + val: Value(Scalar(alloc0))\n+-                                          // + val: Value(Scalar(alloc1))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(BAR, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n+-                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n -         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n@@ -53,7 +53,7 @@\n       }\n - }\n - \n-- alloc0 (static: Y, size: 4, align: 4) {\n+- alloc1 (static: Y, size: 4, align: 4) {\n -     2a 00 00 00                                     \u2502 *...\n   }\n   "}, {"sha": "8b3c5d332f2514ebfed3247cb93f5d2a22f7fbcb", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -7,18 +7,18 @@ promoted[0] in FOO: &[&i32; 1] = {\n     let mut _3: *const i32;              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n \n     bb0: {\n-        _3 = const {alloc2: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+        _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // ty::Const\n                                          // + ty: *const i32\n-                                         // + val: Value(Scalar(alloc2))\n+                                         // + val: Value(Scalar(alloc3))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n         _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     }\n }\n \n-alloc2 (extern static: X)\n+alloc3 (extern static: X)"}, {"sha": "8c9a37bce854ba8c2db12d7066e2c8ed4054f128", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -18,16 +18,16 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--         _5 = const {alloc2: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+-         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n                                            // ty::Const\n -                                          // + ty: *const i32\n--                                          // + val: Value(Scalar(alloc2))\n+-                                          // + val: Value(Scalar(alloc3))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(FOO, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+-                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n@@ -55,5 +55,5 @@\n       }\n   }\n - \n-- alloc2 (extern static: X)\n+- alloc3 (extern static: X)\n   "}, {"sha": "afc621784633e5cf7f8670c59d386d30ce985a52", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -23,13 +23,13 @@\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-          _4 = const {alloc0: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // ty::Const\n                                            // + ty: *mut u32\n-                                           // + val: Value(Scalar(alloc0))\n+                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-                                           // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc0)) }\n+                                           // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n           _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:9:9: 9:19\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:18: 9:19\n@@ -45,7 +45,7 @@\n       }\n   }\n   \n-  alloc0 (static: STATIC, size: 4, align: 4) {\n+  alloc1 (static: STATIC, size: 4, align: 4) {\n       2a 00 00 00                                     \u2502 *...\n   }\n   "}, {"sha": "13ef30d89a076e89ef73b07a0f594f6a9028285f", "filename": "src/test/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -16,24 +16,24 @@\n           StorageLive(_1);                 // scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n           StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-          _3 = const {alloc0: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &u8\n-                                           // + val: Value(Scalar(alloc0))\n+                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0)) }\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n -         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n +         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-          _5 = const {alloc0: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+          _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // ty::Const\n                                            // + ty: &u8\n-                                           // + val: Value(Scalar(alloc0))\n+                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0)) }\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n -         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n -         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n +         _4 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n@@ -48,7 +48,7 @@\n       }\n   }\n   \n-  alloc0 (static: FOO, size: 1, align: 1) {\n+  alloc1 (static: FOO, size: 1, align: 1) {\n       02                                              \u2502 .\n   }\n   "}, {"sha": "654b21f05b6fe58e315fa586b73f59969c9e8b20", "filename": "src/test/ui/error-codes/E0396-fixed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -3,8 +3,7 @@\n const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR };\n-//~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n }"}, {"sha": "91997fcf0f901c66fe733d8a7246832cf3182b65", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f21ab114ee441d89a1a1f02f63bba638c0af01d/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=1f21ab114ee441d89a1a1f02f63bba638c0af01d", "patch": "@@ -1,14 +1,9 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/E0396-fixed.rs:5:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n-   | ---------------------------^^^^^^^^^---\n-   |                            |\n-   |                            unable to turn bytes into a pointer\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   |                            ^^^^^^^^^ 0x5f3759df is not a valid pointer\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}]}