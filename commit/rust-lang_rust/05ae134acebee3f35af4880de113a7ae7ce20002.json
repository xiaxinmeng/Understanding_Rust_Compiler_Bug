{"sha": "05ae134acebee3f35af4880de113a7ae7ce20002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YWUxMzRhY2ViZWUzZjM1YWY0ODgwZGUxMTNhN2FlN2NlMjAwMDI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-23T16:45:01Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-01-21T23:48:48Z"}, "message": "[std::str] Rename from_utf8_owned_opt() to from_utf8_owned(), drop the old from_utf8_owned() behavior", "tree": {"sha": "096daf1c7c42bd04ac3d1f11f710fd9786d9937a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/096daf1c7c42bd04ac3d1f11f710fd9786d9937a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05ae134acebee3f35af4880de113a7ae7ce20002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05ae134acebee3f35af4880de113a7ae7ce20002", "html_url": "https://github.com/rust-lang/rust/commit/05ae134acebee3f35af4880de113a7ae7ce20002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05ae134acebee3f35af4880de113a7ae7ce20002/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c41492939c77b7139e46ee67375b47041f6692", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c41492939c77b7139e46ee67375b47041f6692", "html_url": "https://github.com/rust-lang/rust/commit/b8c41492939c77b7139e46ee67375b47041f6692"}], "stats": {"total": 156, "additions": 65, "deletions": 91}, "files": [{"sha": "83fb267b0e720528a99a1ecce148f3b0a9de9746", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -66,8 +66,8 @@ pub fn run(lib_path: &str,\n \n             Some(Result {\n                 status: status,\n-                out: str::from_utf8_owned(output),\n-                err: str::from_utf8_owned(error)\n+                out: str::from_utf8_owned(output).unwrap(),\n+                err: str::from_utf8_owned(error).unwrap()\n             })\n         },\n         None => None"}, {"sha": "1d8e5a707edebbc7e6f57dc575565551bf291a88", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -154,7 +154,7 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n         match props.pp_exact { Some(_) => 1, None => 2 };\n \n     let src = File::open(testfile).read_to_end();\n-    let src = str::from_utf8_owned(src);\n+    let src = str::from_utf8_owned(src).unwrap();\n     let mut srcs = ~[src];\n \n     let mut round = 0;\n@@ -176,7 +176,7 @@ fn run_pretty_test(config: &config, props: &TestProps, testfile: &Path) {\n         Some(ref file) => {\n             let filepath = testfile.dir_path().join(file);\n             let s = File::open(&filepath).read_to_end();\n-            str::from_utf8_owned(s)\n+            str::from_utf8_owned(s).unwrap()\n           }\n           None => { srcs[srcs.len() - 2u].clone() }\n         };\n@@ -1100,7 +1100,7 @@ fn disassemble_extract(config: &config, _props: &TestProps,\n \n fn count_extracted_lines(p: &Path) -> uint {\n     let x = File::open(&p.with_extension(\"ll\")).read_to_end();\n-    let x = str::from_utf8_owned(x);\n+    let x = str::from_utf8_owned(x).unwrap();\n     x.lines().len()\n }\n "}, {"sha": "1fcce6d01eea1d1eb78d356e190d32927ffc8edf", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -198,7 +198,7 @@ impl<'a> FromBase64 for &'a str {\n      *     println!(\"base64 output: {}\", hello_str);\n      *     let res = hello_str.from_base64();\n      *     if res.is_ok() {\n-     *       let optBytes = str::from_utf8_owned_opt(res.unwrap());\n+     *       let optBytes = str::from_utf8_owned(res.unwrap());\n      *       if optBytes.is_some() {\n      *         println!(\"decoded from base64: {}\", optBytes.unwrap());\n      *       }"}, {"sha": "343d6aac437a048952e10c71946bea193b4530c8", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -96,7 +96,7 @@ impl<'a> FromHex for &'a str {\n      *     println!(\"{}\", hello_str);\n      *     let bytes = hello_str.from_hex().unwrap();\n      *     println!(\"{:?}\", bytes);\n-     *     let result_str = str::from_utf8_owned(bytes);\n+     *     let result_str = str::from_utf8_owned(bytes).unwrap();\n      *     println!(\"{}\", result_str);\n      * }\n      * ```"}, {"sha": "a35c474337d61ec2106c067d5df4d0db54f4135a", "filename": "src/libextra/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -312,7 +312,7 @@ impl<'a> Encoder<'a> {\n     /// Encode the specified struct into a json str\n     pub fn str_encode<T:Encodable<Encoder<'a>>>(to_encode_object: &T) -> ~str  {\n         let buff:~[u8] = Encoder::buffer_encode(to_encode_object);\n-        str::from_utf8_owned(buff)\n+        str::from_utf8_owned(buff).unwrap()\n     }\n }\n \n@@ -684,7 +684,7 @@ impl Json{\n     pub fn to_pretty_str(&self) -> ~str {\n         let mut s = MemWriter::new();\n         self.to_pretty_writer(&mut s as &mut io::Writer);\n-        str::from_utf8_owned(s.unwrap())\n+        str::from_utf8_owned(s.unwrap()).unwrap()\n     }\n }\n \n@@ -1067,7 +1067,7 @@ impl<T : Iterator<char>> Parser<T> {\n \n /// Decodes a json value from an `&mut io::Reader`\n pub fn from_reader(rdr: &mut io::Reader) -> Result<Json, Error> {\n-    let s = str::from_utf8_owned(rdr.read_to_end());\n+    let s = str::from_utf8_owned(rdr.read_to_end()).unwrap();\n     let mut parser = Parser::new(s.chars());\n     parser.parse()\n }\n@@ -1541,7 +1541,7 @@ impl to_str::ToStr for Json {\n     fn to_str(&self) -> ~str {\n         let mut s = MemWriter::new();\n         self.to_writer(&mut s as &mut io::Writer);\n-        str::from_utf8_owned(s.unwrap())\n+        str::from_utf8_owned(s.unwrap()).unwrap()\n     }\n }\n \n@@ -1732,7 +1732,7 @@ mod tests {\n \n         let mut m = MemWriter::new();\n         f(&mut m as &mut io::Writer);\n-        str::from_utf8_owned(m.unwrap())\n+        str::from_utf8_owned(m.unwrap()).unwrap()\n     }\n \n     #[test]"}, {"sha": "096e588277468d78473d285efdef21340f1594d0", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -1001,7 +1001,7 @@ mod tests {\n             use std::io::MemWriter;\n             let mut m = MemWriter::new();\n             write_boxplot(&mut m as &mut io::Writer, s, 30);\n-            let out = str::from_utf8_owned(m.unwrap());\n+            let out = str::from_utf8_owned(m.unwrap()).unwrap();\n             assert_eq!(out, expected);\n         }\n "}, {"sha": "23478728330ebc69557e217a8dc9d7f7942d9ed2", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -216,7 +216,7 @@ pub fn parse(file: &mut io::Reader,\n     }\n \n     // don't read NUL\n-    let names_str = str::from_utf8_owned(file.read_bytes(names_bytes as uint - 1));\n+    let names_str = str::from_utf8_owned(file.read_bytes(names_bytes as uint - 1)).unwrap();\n \n     let term_names: ~[~str] = names_str.split('|').map(|s| s.to_owned()).collect();\n "}, {"sha": "3e5b9b797d31b6a3e3b38f1a2cb6d19bb4ba08a9", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -1030,7 +1030,7 @@ pub fn strftime(format: &str, tm: &Tm) -> ~str {\n         }\n     }\n \n-    str::from_utf8_owned(buf)\n+    str::from_utf8_owned(buf).unwrap()\n }\n \n #[cfg(test)]"}, {"sha": "9163a892039139199dd390f717c5eab4a7edff34", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -313,7 +313,7 @@ impl Uuid {\n             s[i*2+0] = digit[0];\n             s[i*2+1] = digit[1];\n         }\n-        str::from_utf8_owned(s)\n+        str::from_utf8_owned(s).unwrap()\n     }\n \n     /// Returns a string of hexadecimal digits, separated into groups with a hyphen."}, {"sha": "cccca1309f4c3918581f6fc755b2dd32fad05385", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -243,7 +243,7 @@ fn json_encode<'a, T:Encodable<json::Encoder<'a>>>(t: &T) -> ~str {\n     let mut writer = MemWriter::new();\n     let mut encoder = json::Encoder::new(&mut writer as &mut io::Writer);\n     t.encode(&mut encoder);\n-    str::from_utf8_owned(writer.unwrap())\n+    str::from_utf8_owned(writer.unwrap()).unwrap()\n }\n \n // FIXME(#5121)\n@@ -491,7 +491,7 @@ fn test() {\n         let subcx = cx.clone();\n         let pth = pth.clone();\n \n-        let file_content = from_utf8_owned(File::open(&pth).read_to_end());\n+        let file_content = from_utf8_owned(File::open(&pth).read_to_end()).unwrap();\n \n         // FIXME (#9639): This needs to handle non-utf8 paths\n         prep.declare_input(\"file\", pth.as_str().unwrap(), file_content);"}, {"sha": "63c4d9f4a2976ee270e7cdcdd50934fb41bb9d3e", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -298,7 +298,7 @@ pub mod write {\n                 if !prog.status.success() {\n                     sess.err(format!(\"linking with `{}` failed: {}\", cc, prog.status));\n                     sess.note(format!(\"{} arguments: '{}'\", cc, args.connect(\"' '\")));\n-                    sess.note(str::from_utf8_owned(prog.error + prog.output));\n+                    sess.note(str::from_utf8_owned(prog.error + prog.output).unwrap());\n                     sess.abort_if_errors();\n                 }\n             },\n@@ -1007,7 +1007,7 @@ fn link_natively(sess: Session, dylib: bool, obj_filename: &Path,\n             if !prog.status.success() {\n                 sess.err(format!(\"linking with `{}` failed: {}\", cc_prog, prog.status));\n                 sess.note(format!(\"{} arguments: '{}'\", cc_prog, cc_args.connect(\"' '\")));\n-                sess.note(str::from_utf8_owned(prog.error + prog.output));\n+                sess.note(str::from_utf8_owned(prog.error + prog.output).unwrap());\n                 sess.abort_if_errors();\n             }\n         },"}, {"sha": "f7ee736f144de60bc042287af91252e6421ae6c1", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -234,7 +234,7 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n       1u => {\n         let ifile = matches.free[0].as_slice();\n         if \"-\" == ifile {\n-            let src = str::from_utf8_owned(io::stdin().read_to_end());\n+            let src = str::from_utf8_owned(io::stdin().read_to_end()).unwrap();\n             d::StrInput(src.to_managed())\n         } else {\n             d::FileInput(Path::new(ifile))"}, {"sha": "a7c82ba4317782bf7fc833617f51d927a4469935", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -1989,5 +1989,5 @@ pub fn encoded_ty(tcx: ty::ctxt, t: ty::t) -> ~str {\n         abbrevs: tyencode::ac_no_abbrevs};\n     let mut wr = MemWriter::new();\n     tyencode::enc_ty(&mut wr, cx, t);\n-    str::from_utf8_owned(wr.get_ref().to_owned())\n+    str::from_utf8_owned(wr.get_ref().to_owned()).unwrap()\n }"}, {"sha": "d8bf115eb42b298f0c7b0166ba702fae29e86201", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -825,7 +825,7 @@ impl Liveness {\n                 }\n             }\n         }\n-        str::from_utf8_owned(wr.unwrap())\n+        str::from_utf8_owned(wr.unwrap()).unwrap()\n     }\n \n     pub fn init_empty(&self, ln: LiveNode, succ_ln: LiveNode) {"}, {"sha": "b0a56cb402b5ffe57a100c22333148f6c9217fae", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -427,7 +427,7 @@ impl<'a> SourceCollector<'a> {\n                 }\n             }\n         }\n-        let contents = str::from_utf8_owned(contents);\n+        let contents = str::from_utf8_owned(contents).unwrap();\n \n         // Create the intermediate directories\n         let mut cur = self.dst.clone();"}, {"sha": "393be290506e127582f5ca899f6c33019f9dd1f2", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -330,7 +330,7 @@ fn json_output(crate: clean::Crate, res: ~[plugins::PluginJson], dst: Path) {\n             let mut encoder = json::Encoder::new(&mut w as &mut io::Writer);\n             crate.encode(&mut encoder);\n         }\n-        str::from_utf8_owned(w.unwrap())\n+        str::from_utf8_owned(w.unwrap()).unwrap()\n     };\n     let crate_json = match json::from_str(crate_json_str) {\n         Ok(j) => j,"}, {"sha": "4b7aaf7e340d94af8593dac8dfc07102d3c5b70a", "filename": "src/librustpkg/source_control.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustpkg%2Fsource_control.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustpkg%2Fsource_control.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsource_control.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -38,8 +38,8 @@ pub fn safe_git_clone(source: &Path, v: &Version, target: &Path) -> CloneResult\n                                                        target.as_str().unwrap().to_owned()]);\n             let outp = opt_outp.expect(\"Failed to exec `git`\");\n             if !outp.status.success() {\n-                println!(\"{}\", str::from_utf8_owned(outp.output.clone()));\n-                println!(\"{}\", str::from_utf8_owned(outp.error));\n+                println!(\"{}\", str::from_utf8_owned(outp.output.clone()).unwrap());\n+                println!(\"{}\", str::from_utf8_owned(outp.error).unwrap());\n                 return DirToUse(target.clone());\n             }\n             else {\n@@ -54,8 +54,8 @@ pub fn safe_git_clone(source: &Path, v: &Version, target: &Path) -> CloneResult\n                              format!(\"--git-dir={}\", git_dir.as_str().unwrap().to_owned()),\n                              ~\"checkout\", format!(\"{}\", *s)]).expect(\"Failed to exec `git`\");\n                         if !outp.status.success() {\n-                            println!(\"{}\", str::from_utf8_owned(outp.output.clone()));\n-                            println!(\"{}\", str::from_utf8_owned(outp.error));\n+                            println!(\"{}\", str::from_utf8_owned(outp.output.clone()).unwrap());\n+                            println!(\"{}\", str::from_utf8_owned(outp.error).unwrap());\n                             return DirToUse(target.clone());\n                         }\n                     }\n@@ -114,8 +114,8 @@ pub fn git_clone_url(source: &str, target: &Path, v: &Version) {\n                                                target.as_str().unwrap().to_owned()]);\n     let outp = opt_outp.expect(\"Failed to exec `git`\");\n     if !outp.status.success() {\n-         debug!(\"{}\", str::from_utf8_owned(outp.output.clone()));\n-         debug!(\"{}\", str::from_utf8_owned(outp.error));\n+         debug!(\"{}\", str::from_utf8_owned(outp.output.clone()).unwrap());\n+         debug!(\"{}\", str::from_utf8_owned(outp.error).unwrap());\n          cond.raise((source.to_owned(), target.clone()))\n     }\n     else {\n@@ -125,8 +125,8 @@ pub fn git_clone_url(source: &str, target: &Path, v: &Version) {\n                                                          target);\n                     let outp = opt_outp.expect(\"Failed to exec `git`\");\n                     if !outp.status.success() {\n-                        debug!(\"{}\", str::from_utf8_owned(outp.output.clone()));\n-                        debug!(\"{}\", str::from_utf8_owned(outp.error));\n+                        debug!(\"{}\", str::from_utf8_owned(outp.output.clone()).unwrap());\n+                        debug!(\"{}\", str::from_utf8_owned(outp.error).unwrap());\n                         cond.raise((source.to_owned(), target.clone()))\n                     }\n             }"}, {"sha": "c0b4a246d35d76216c10780a4249373af24d1809", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -1191,7 +1191,7 @@ fn test_info() {\n     let expected_info = ~\"package foo\"; // fill in\n     let workspace = create_local_package(&CrateId::new(\"foo\"));\n     let output = command_line_test([~\"info\", ~\"foo\"], workspace.path());\n-    assert_eq!(str::from_utf8_owned(output.output), expected_info);\n+    assert_eq!(str::from_utf8_owned(output.output).unwrap(), expected_info);\n }\n \n #[test]"}, {"sha": "411f9f254593fc50484f05c4972e223f1d09fa3d", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -691,7 +691,7 @@ pub fn format(args: &Arguments) -> ~str {\n pub unsafe fn format_unsafe(fmt: &[rt::Piece], args: &[Argument]) -> ~str {\n     let mut output = MemWriter::new();\n     write_unsafe(&mut output as &mut io::Writer, fmt, args);\n-    return str::from_utf8_owned(output.unwrap());\n+    return str::from_utf8_owned(output.unwrap()).unwrap();\n }\n \n impl<'a> Formatter<'a> {"}, {"sha": "cb98ff21105bba7eb386c7413bf255f482cd3044", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -754,7 +754,7 @@ mod test {\n             let mut read_buf = [0, .. 1028];\n             let read_str = match read_stream.read(read_buf).unwrap() {\n                 -1|0 => fail!(\"shouldn't happen\"),\n-                n => str::from_utf8_owned(read_buf.slice_to(n).to_owned())\n+                n => str::from_utf8_owned(read_buf.slice_to(n).to_owned()).unwrap()\n             };\n             assert_eq!(read_str, message.to_owned());\n         }"}, {"sha": "30827983360692f3029be5f6ddcbc55c8f5b26bd", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -607,7 +607,7 @@ pub trait Reader {\n     /// This function will raise all the same conditions as the `read` method,\n     /// along with raising a condition if the input is not valid UTF-8.\n     fn read_to_str(&mut self) -> ~str {\n-        match str::from_utf8_owned_opt(self.read_to_end()) {\n+        match str::from_utf8_owned(self.read_to_end()) {\n             Some(s) => s,\n             None => {\n                 io_error::cond.raise(standard_error(InvalidInput));\n@@ -1117,7 +1117,7 @@ pub trait Buffer: Reader {\n     /// The task will also fail if sequence of bytes leading up to\n     /// the newline character are not valid UTF-8.\n     fn read_line(&mut self) -> Option<~str> {\n-        self.read_until('\\n' as u8).map(str::from_utf8_owned)\n+        self.read_until('\\n' as u8).map(|line| str::from_utf8_owned(line).unwrap())\n     }\n \n     /// Create an iterator that reads a line on each iteration until EOF."}, {"sha": "bf9e6b739f2a4a4c9ceb6c195a2ca628f62dcdc7", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -427,7 +427,7 @@ pub fn float_to_str_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Float+Round+\n         sign: SignFormat, digits: SignificantDigits) -> (~str, bool) {\n     let (bytes, special) = float_to_str_bytes_common(num, radix,\n                                negative_zero, sign, digits);\n-    (str::from_utf8_owned(bytes), special)\n+    (str::from_utf8_owned(bytes).unwrap(), special)\n }\n \n // Some constants for from_str_bytes_common's input validation,"}, {"sha": "8919f9f890311cc04d6610d3c2722d6d7c2c967a", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -608,7 +608,7 @@ pub fn repr_to_str<T>(t: &T) -> ~str {\n \n     let mut result = io::MemWriter::new();\n     write_repr(&mut result as &mut io::Writer, t);\n-    str::from_utf8_owned(result.unwrap())\n+    str::from_utf8_owned(result.unwrap()).unwrap()\n }\n \n #[cfg(test)]\n@@ -626,7 +626,7 @@ fn test_repr() {\n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::MemWriter::new();\n         write_repr(&mut m as &mut io::Writer, t);\n-        let s = str::from_utf8_owned(m.unwrap());\n+        let s = str::from_utf8_owned(m.unwrap()).unwrap();\n         assert_eq!(s.as_slice(), e);\n     }\n "}, {"sha": "f460d3f494408d5ef9b4dbef0682f263e44143ee", "filename": "src/libstd/run.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -372,7 +372,7 @@ mod tests {\n \n         let run::ProcessOutput {status, output, error}\n              = run::process_output(\"echo\", [~\"hello\"]).expect(\"failed to exec `echo`\");\n-        let output_str = str::from_utf8_owned(output);\n+        let output_str = str::from_utf8_owned(output).unwrap();\n \n         assert!(status.success());\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -439,7 +439,7 @@ mod tests {\n                 None => break\n             }\n         }\n-        str::from_utf8_owned(res)\n+        str::from_utf8_owned(res).unwrap()\n     }\n \n     #[test]\n@@ -467,7 +467,7 @@ mod tests {\n             .expect(\"failed to exec `echo`\");\n         let run::ProcessOutput {status, output, error}\n             = prog.finish_with_output();\n-        let output_str = str::from_utf8_owned(output);\n+        let output_str = str::from_utf8_owned(output).unwrap();\n \n         assert!(status.success());\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -486,7 +486,7 @@ mod tests {\n         let run::ProcessOutput {status, output, error}\n             = prog.finish_with_output();\n \n-        let output_str = str::from_utf8_owned(output);\n+        let output_str = str::from_utf8_owned(output).unwrap();\n \n         assert!(status.success());\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -533,7 +533,7 @@ mod tests {\n     fn test_keep_current_working_dir() {\n         let mut prog = run_pwd(None);\n \n-        let output = str::from_utf8_owned(prog.finish_with_output().output);\n+        let output = str::from_utf8_owned(prog.finish_with_output().output).unwrap();\n         let parent_dir = os::getcwd();\n         let child_dir = Path::new(output.trim());\n \n@@ -551,7 +551,7 @@ mod tests {\n         let parent_dir = os::getcwd().dir_path();\n         let mut prog = run_pwd(Some(&parent_dir));\n \n-        let output = str::from_utf8_owned(prog.finish_with_output().output);\n+        let output = str::from_utf8_owned(prog.finish_with_output().output).unwrap();\n         let child_dir = Path::new(output.trim());\n \n         let parent_stat = parent_dir.stat();\n@@ -590,7 +590,7 @@ mod tests {\n         if running_on_valgrind() { return; }\n \n         let mut prog = run_env(None);\n-        let output = str::from_utf8_owned(prog.finish_with_output().output);\n+        let output = str::from_utf8_owned(prog.finish_with_output().output).unwrap();\n \n         let r = os::env();\n         for &(ref k, ref v) in r.iter() {\n@@ -604,7 +604,7 @@ mod tests {\n         if running_on_valgrind() { return; }\n \n         let mut prog = run_env(None);\n-        let output = str::from_utf8_owned(prog.finish_with_output().output);\n+        let output = str::from_utf8_owned(prog.finish_with_output().output).unwrap();\n \n         let r = os::env();\n         for &(ref k, ref v) in r.iter() {\n@@ -623,7 +623,7 @@ mod tests {\n         new_env.push((~\"RUN_TEST_NEW_ENV\", ~\"123\"));\n \n         let mut prog = run_env(Some(new_env));\n-        let output = str::from_utf8_owned(prog.finish_with_output().output);\n+        let output = str::from_utf8_owned(prog.finish_with_output().output).unwrap();\n \n         assert!(output.contains(\"RUN_TEST_NEW_ENV=123\"));\n     }"}, {"sha": "6d52e94064c094b945d9b5d249f4fd455ecc04c5", "filename": "src/libstd/str.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -129,26 +129,9 @@ condition! {\n Section: Creating a string\n */\n \n-/// Consumes a vector of bytes to create a new utf-8 string\n-///\n-/// # Failure\n-///\n-/// Raises the `not_utf8` condition if invalid UTF-8\n-pub fn from_utf8_owned(vv: ~[u8]) -> ~str {\n-    use str::not_utf8::cond;\n-\n-    if !is_utf8(vv) {\n-        let first_bad_byte = *vv.iter().find(|&b| !is_utf8([*b])).unwrap();\n-        cond.raise(format!(\"from_utf8: input is not UTF-8; first bad byte is {}\",\n-                           first_bad_byte))\n-    } else {\n-        unsafe { raw::from_utf8_owned(vv) }\n-    }\n-}\n-\n /// Consumes a vector of bytes to create a new utf-8 string.\n /// Returns None if the vector contains invalid UTF-8.\n-pub fn from_utf8_owned_opt(vv: ~[u8]) -> Option<~str> {\n+pub fn from_utf8_owned(vv: ~[u8]) -> Option<~str> {\n     if is_utf8(vv) {\n         Some(unsafe { raw::from_utf8_owned(vv) })\n     } else {\n@@ -3964,22 +3947,13 @@ mod tests {\n     #[test]\n     fn test_str_from_utf8_owned() {\n         let xs = bytes!(\"hello\").to_owned();\n-        assert_eq!(from_utf8_owned(xs), ~\"hello\");\n-\n-        let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\").to_owned();\n-        assert_eq!(from_utf8_owned(xs), ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-    }\n-\n-    #[test]\n-    fn test_str_from_utf8_owned_opt() {\n-        let xs = bytes!(\"hello\").to_owned();\n-        assert_eq!(from_utf8_owned_opt(xs), Some(~\"hello\"));\n+        assert_eq!(from_utf8_owned(xs), Some(~\"hello\"));\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\").to_owned();\n-        assert_eq!(from_utf8_owned_opt(xs), Some(~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n+        assert_eq!(from_utf8_owned(xs), Some(~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n         let xs = bytes!(\"hello\", 0xff).to_owned();\n-        assert_eq!(from_utf8_owned_opt(xs), None);\n+        assert_eq!(from_utf8_owned(xs), None);\n     }\n \n     #[test]"}, {"sha": "a9f94da7a98cbea0a1680b7edd0746b59600c21a", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -109,7 +109,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         }\n         Ok(bytes) => bytes,\n     };\n-    match str::from_utf8_owned_opt(bytes) {\n+    match str::from_utf8_owned(bytes) {\n         Some(src) => {\n             // Add this input file to the code map to make it available as\n             // dependency information"}, {"sha": "22ece367b8028962c23072669696b330952b3c00", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -351,7 +351,7 @@ pub fn gather_comments_and_literals(span_diagnostic:\n                                     path: @str,\n                                     srdr: &mut io::Reader)\n                                  -> (~[Comment], ~[Literal]) {\n-    let src = str::from_utf8_owned(srdr.read_to_end()).to_managed();\n+    let src = str::from_utf8_owned(srdr.read_to_end()).unwrap().to_managed();\n     let cm = CodeMap::new();\n     let filemap = cm.new_filemap(path, src);\n     let rdr = lexer::new_low_level_string_reader(span_diagnostic, filemap);"}, {"sha": "9713f331147c01b931a438abbad04545a6c48461", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -246,7 +246,7 @@ pub fn file_to_filemap(sess: @ParseSess, path: &Path, spanopt: Option<Span>)\n             unreachable!()\n         }\n     };\n-    match str::from_utf8_owned_opt(bytes) {\n+    match str::from_utf8_owned(bytes) {\n         Some(s) => {\n             return string_to_filemap(sess, s.to_managed(),\n                                      path.as_str().unwrap().to_managed());\n@@ -315,7 +315,7 @@ mod test {\n         let mut writer = MemWriter::new();\n         let mut encoder = extra::json::Encoder::new(&mut writer as &mut io::Writer);\n         val.encode(&mut encoder);\n-        str::from_utf8_owned(writer.unwrap())\n+        str::from_utf8_owned(writer.unwrap()).unwrap()\n     }\n \n     // produce a codemap::span"}, {"sha": "54e9a8bd62937f378677e4f6d9f72b551d95ff2d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -2316,7 +2316,7 @@ pub fn print_string(s: &mut State, st: &str, style: ast::StrStyle) {\n // downcasts.\n unsafe fn get_mem_writer(writer: &mut ~io::Writer) -> ~str {\n     let (_, wr): (uint, ~MemWriter) = cast::transmute_copy(writer);\n-    let result = str::from_utf8_owned(wr.get_ref().to_owned());\n+    let result = str::from_utf8_owned(wr.get_ref().to_owned()).unwrap();\n     cast::forget(wr);\n     result\n }"}, {"sha": "61e76b992830086668bac89431142a9aa19b1d88", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -59,7 +59,7 @@ impl Code {\n         }\n \n         reverse(result);\n-        str::from_utf8_owned(result)\n+        str::from_utf8_owned(result).unwrap()\n     }\n }\n "}, {"sha": "c5b01e68fc4e8f1824093eb7dc7c9487dffb72ff", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -187,7 +187,7 @@ fn to_utf8(raw_sol: &List<u64>) -> ~str {\n             if m & 1 << i != 0 {sol[i] = '0' as u8 + id;}\n         }\n     }\n-    std::str::from_utf8_owned(sol)\n+    std::str::from_utf8_owned(sol).unwrap()\n }\n \n // Prints a solution in ~str form."}, {"sha": "3442e971f4fe5d9b6b34554956274f5a8df5354c", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -62,14 +62,14 @@ fn test_destroy_actually_kills(force: bool) {\n     fn process_exists(pid: libc::pid_t) -> bool {\n         let run::ProcessOutput {output, ..} = run::process_output(\"ps\", [~\"-p\", pid.to_str()])\n             .expect(\"failed to exec `ps`\");\n-        str::from_utf8_owned(output).contains(pid.to_str())\n+        str::from_utf8_owned(output).unwrap().contains(pid.to_str())\n     }\n \n     #[cfg(unix,target_os=\"android\")]\n     fn process_exists(pid: libc::pid_t) -> bool {\n         let run::ProcessOutput {output, ..} = run::process_output(\"/system/bin/ps\", [pid.to_str()])\n             .expect(\"failed to exec `/system/bin/ps`\");\n-        str::from_utf8_owned(output).contains(~\"root\")\n+        str::from_utf8_owned(output).unwrap().contains(~\"root\")\n     }\n \n     #[cfg(windows)]"}, {"sha": "76759d04ab4ae34959adb3fd322d14af526a80b7", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ae134acebee3f35af4880de113a7ae7ce20002/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=05ae134acebee3f35af4880de113a7ae7ce20002", "patch": "@@ -260,7 +260,7 @@ fn test_write() {\n         writeln!(w, \"{foo}\", foo=\"bar\");\n     }\n \n-    let s = str::from_utf8_owned(buf.unwrap());\n+    let s = str::from_utf8_owned(buf.unwrap()).unwrap();\n     t!(s, \"34helloline\\nbar\\n\");\n }\n \n@@ -284,7 +284,7 @@ fn test_format_args() {\n         format_args!(|args| { fmt::write(w, args) }, \"test\");\n         format_args!(|args| { fmt::write(w, args) }, \"{test}\", test=3);\n     }\n-    let s = str::from_utf8_owned(buf.unwrap());\n+    let s = str::from_utf8_owned(buf.unwrap()).unwrap();\n     t!(s, \"1test3\");\n \n     let s = format_args!(fmt::format, \"hello {}\", \"world\");"}]}