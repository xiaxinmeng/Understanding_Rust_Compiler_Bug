{"sha": "5c690555f226909786a43b4bf0dc58f8bffa7a6b", "node_id": "C_kwDOAAsO6NoAKDVjNjkwNTU1ZjIyNjkwOTc4NmE0M2I0YmYwZGM1OGY4YmZmYTdhNmI", "commit": {"author": {"name": "Stovent", "email": "elian.hamon@viacesi.fr", "date": "2022-02-11T20:25:51Z"}, "committer": {"name": "Stovent", "email": "elian.hamon@viacesi.fr", "date": "2022-05-30T22:32:37Z"}, "message": "Correct signed bit int documentation", "tree": {"sha": "98aad1212918da9402bcc49bf43bf914c35565f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98aad1212918da9402bcc49bf43bf914c35565f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c690555f226909786a43b4bf0dc58f8bffa7a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c690555f226909786a43b4bf0dc58f8bffa7a6b", "html_url": "https://github.com/rust-lang/rust/commit/5c690555f226909786a43b4bf0dc58f8bffa7a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c690555f226909786a43b4bf0dc58f8bffa7a6b/comments", "author": {"login": "Stovent", "id": 23307724, "node_id": "MDQ6VXNlcjIzMzA3NzI0", "avatar_url": "https://avatars.githubusercontent.com/u/23307724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stovent", "html_url": "https://github.com/Stovent", "followers_url": "https://api.github.com/users/Stovent/followers", "following_url": "https://api.github.com/users/Stovent/following{/other_user}", "gists_url": "https://api.github.com/users/Stovent/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stovent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stovent/subscriptions", "organizations_url": "https://api.github.com/users/Stovent/orgs", "repos_url": "https://api.github.com/users/Stovent/repos", "events_url": "https://api.github.com/users/Stovent/events{/privacy}", "received_events_url": "https://api.github.com/users/Stovent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stovent", "id": 23307724, "node_id": "MDQ6VXNlcjIzMzA3NzI0", "avatar_url": "https://avatars.githubusercontent.com/u/23307724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stovent", "html_url": "https://github.com/Stovent", "followers_url": "https://api.github.com/users/Stovent/followers", "following_url": "https://api.github.com/users/Stovent/following{/other_user}", "gists_url": "https://api.github.com/users/Stovent/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stovent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stovent/subscriptions", "organizations_url": "https://api.github.com/users/Stovent/orgs", "repos_url": "https://api.github.com/users/Stovent/repos", "events_url": "https://api.github.com/users/Stovent/events{/privacy}", "received_events_url": "https://api.github.com/users/Stovent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12660997425e3d2c9ace188531eff02e52ad7262", "url": "https://api.github.com/repos/rust-lang/rust/commits/12660997425e3d2c9ace188531eff02e52ad7262", "html_url": "https://github.com/rust-lang/rust/commit/12660997425e3d2c9ace188531eff02e52ad7262"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "0cd64753f9b2e27031909c4d5bbc8b38bb029b90", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 64, "deletions": 10, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5c690555f226909786a43b4bf0dc58f8bffa7a6b/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c690555f226909786a43b4bf0dc58f8bffa7a6b/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=5c690555f226909786a43b4bf0dc58f8bffa7a6b", "patch": "@@ -1514,15 +1514,41 @@ macro_rules! int_impl {\n \n         /// Calculates `self + rhs + carry` without the ability to overflow.\n         ///\n-        /// Performs \"ternary addition\" which takes in an extra bit to add, and may return an\n-        /// additional bit of overflow. This allows for chaining together multiple additions\n-        /// to create \"big integers\" which represent larger values.\n-        ///\n-        #[doc = concat!(\"This can be thought of as a \", stringify!($BITS), \"-bit \\\"full adder\\\", in the electronics sense.\")]\n+        /// Performs \"signed ternary addition\" which takes in an extra bit to add, and may return an\n+        /// additional bit of overflow. This signed function is used only on the highest-ordered data,\n+        /// for which the signed overflow result indicates whether the big integer overflowed or not.\n         ///\n         /// # Examples\n         ///\n-        /// Basic usage\n+        /// Standard signed bit integer implementation\n+        ///\n+        /// ```rs\n+        /// #![feature(bigint_helper_methods)]\n+        /// struct I16 {\n+        ///     pub low: u8, // Low-order bytes has to be unsigned.\n+        ///     /// Most Significant Data has to be of the same signedness as the desired type.\n+        ///     /// So u8 to implement U16, i8 to implement I16.\n+        ///     pub high: i8,\n+        /// }\n+        ///\n+        /// impl I16 {\n+        ///     /// Adds `rhs` to `self` and returns true if signed overflow occurs, false otherwise.\n+        ///     pub fn overflowing_add(&mut self, rhs: Self) -> bool {\n+        ///         let (low_res, low_carry) = self.low.carrying_add(rhs.low, false);\n+        ///\n+        ///         // The signed `carrying_add` method is used to detect signed overflow.\n+        ///         let (high_res, high_carry) = self.high.carrying_add(rhs.high, low_carry);\n+        ///\n+        ///         self.low = low_res;\n+        ///         self.high = high_res;\n+        ///         high_carry\n+        ///     }\n+        /// }\n+        ///\n+        /// fn main() {}\n+        /// ```\n+        ///\n+        /// General behavior\n         ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n@@ -1612,13 +1638,41 @@ macro_rules! int_impl {\n \n         /// Calculates `self - rhs - borrow` without the ability to overflow.\n         ///\n-        /// Performs \"ternary subtraction\" which takes in an extra bit to subtract, and may return\n-        /// an additional bit of overflow. This allows for chaining together multiple subtractions\n-        /// to create \"big integers\" which represent larger values.\n+        /// Performs \"signed ternary subtraction\" which takes in an extra bit to subtract, and may return an\n+        /// additional bit of overflow. This signed function is used only on the highest-ordered data,\n+        /// for which the signed overflow result indicates whether the big integer overflowed or not.\n         ///\n         /// # Examples\n         ///\n-        /// Basic usage\n+        /// Standard signed bit integer implementation\n+        ///\n+        /// ```rs\n+        /// #![feature(bigint_helper_methods)]\n+        /// struct I16 {\n+        ///     pub low: u8, // Low-order bytes has to be unsigned.\n+        ///     /// Most Significant Data has to be of the same signedness as the desired type.\n+        ///     /// So u8 to implement U16, i8 to implement I16.\n+        ///     pub high: i8,\n+        /// }\n+        ///\n+        /// impl I16 {\n+        ///     /// Subtracts `rhs` from `self` and returns true if signed overflow occurs, false otherwise.\n+        ///     pub fn overflowing_sub(&mut self, rhs: Self) -> bool {\n+        ///         let (low_res, low_carry) = self.low.borrowing_sub(rhs.low, false);\n+        ///\n+        ///         // The signed `borrowing_sub` method is used to detect signed overflow.\n+        ///         let (high_res, high_carry) = self.high.borrowing_sub(rhs.high, low_carry);\n+        ///\n+        ///         self.low = low_res;\n+        ///         self.high = high_res;\n+        ///         high_carry\n+        ///     }\n+        /// }\n+        ///\n+        /// fn main() {}\n+        /// ```\n+        ///\n+        /// General behavior\n         ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]"}]}