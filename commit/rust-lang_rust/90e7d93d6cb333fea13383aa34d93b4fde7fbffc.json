{"sha": "90e7d93d6cb333fea13383aa34d93b4fde7fbffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZTdkOTNkNmNiMzMzZmVhMTMzODNhYTM0ZDkzYjRmZGU3ZmJmZmM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-07T10:52:18Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-07T10:52:59Z"}, "message": "Fix nonminimal_bool false positive\n\nIt was checking any is_ok, is_err, is_some, is_none method for negation\nbut it should only perform the check for the built-in types, not custom\ntypes.", "tree": {"sha": "408ff7a129dd2cc09557da9e32690b85bc001122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408ff7a129dd2cc09557da9e32690b85bc001122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e7d93d6cb333fea13383aa34d93b4fde7fbffc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJayKM+AAoJELb6Bqbg4mZbqS0QAIoUquuXjyQM0U3PwZlJGZnX\na4JoUdx64J7wOmyRSRXcnCBDoTIfqBGjqPRRFCcTY9btLBomEOWfRc97xoS7261S\nIDZI9ZSaBwYQOkTzDNnmWUZWVZHyv3UO5s7ZGCt3NhuJqMse8XraC+0Laar8wimL\n9F+hcykKBf7eJijuibyedNHLgIiDqNVeao5LrpfJ0hnrVcxET737RG3HjxS73ZJM\nvjWWlsm8HCb6pFoic/X5eor7wOHatRPtCyOxsJOV0lONVz9RQA+P1GhPbD7eivcs\n/XGipld0hcdAL3IkTmIzaWZIsvYB4mQFnTJDsL321l/hNMrB/B7HsN8Z+B+d0dVf\nTBDwji2GBpOpulXyFG94lxRSslzoWJDmv8GaZZgudfSL+D6FT5blsJO5pEmDXqwF\nVL/8JVool4esP0593cBr1hM8tFI8IFSZIMyvj7wGu3WMDuWdbetbPAPOR1QExAVR\no1J0CBkMgGOqoYbzDrePjh2CKffDFulyY+jeJBuS16f3j6uYYvgXAA6flhyt7C0d\nVy43aoS5JlWzSumhkYibXrPoCrL3SOZ97wxMYs4USs7QNiBrOSGIzpEDPP+oLqV2\nkd7hr/rwZrPy5bfeFZXh8w0+DuSFNAlAmT8iMahig0RX5hkh+7cu/TBkF75hely3\nBJzEmE8nujs09Kg0JdgH\n=3c5x\n-----END PGP SIGNATURE-----", "payload": "tree 408ff7a129dd2cc09557da9e32690b85bc001122\nparent fbb5050d820e2f8109e0d15bc27d5069374e356b\nauthor Philipp Hansch <dev@phansch.net> 1523098338 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1523098379 +0200\n\nFix nonminimal_bool false positive\n\nIt was checking any is_ok, is_err, is_some, is_none method for negation\nbut it should only perform the check for the built-in types, not custom\ntypes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e7d93d6cb333fea13383aa34d93b4fde7fbffc", "html_url": "https://github.com/rust-lang/rust/commit/90e7d93d6cb333fea13383aa34d93b4fde7fbffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e7d93d6cb333fea13383aa34d93b4fde7fbffc/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb5050d820e2f8109e0d15bc27d5069374e356b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb5050d820e2f8109e0d15bc27d5069374e356b", "html_url": "https://github.com/rust-lang/rust/commit/fbb5050d820e2f8109e0d15bc27d5069374e356b"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "c8478c47a3548585cfc1c226b83394f3dee0506f", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90e7d93d6cb333fea13383aa34d93b4fde7fbffc/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e7d93d6cb333fea13383aa34d93b4fde7fbffc/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=90e7d93d6cb333fea13383aa34d93b4fde7fbffc", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::*;\n use syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n use syntax::codemap::{dummy_spanned, Span, DUMMY_SP};\n use syntax::util::ThinVec;\n-use utils::{in_macro, snippet_opt, span_lint_and_then, SpanlessEq};\n+use utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq};\n \n /// **What it does:** Checks for boolean expressions that can be written more\n /// concisely.\n@@ -185,6 +185,11 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                 }.and_then(|op| Some(format!(\"{}{}{}\", self.snip(lhs)?, op, self.snip(rhs)?)))\n             },\n             ExprMethodCall(ref path, _, ref args) if args.len() == 1 => {\n+                let type_of_receiver = self.cx.tables.expr_ty(&args[0]);\n+                if !match_type(self.cx, type_of_receiver, &paths::OPTION) &&\n+                    !match_type(self.cx, type_of_receiver, &paths::RESULT) {\n+                        return None;\n+                }\n                 METHODS_WITH_NEGATION\n                     .iter().cloned()\n                     .flat_map(|(a, b)| vec![(a, b), (b, a)])"}, {"sha": "78e876e518226814ea9b6595cee16e6a9baa2085", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/90e7d93d6cb333fea13383aa34d93b4fde7fbffc/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e7d93d6cb333fea13383aa34d93b4fde7fbffc/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=90e7d93d6cb333fea13383aa34d93b4fde7fbffc", "patch": "@@ -57,3 +57,60 @@ fn methods_with_negation() {\n     let _ = (!c ^ c) || !a.is_some();\n     let _ = !c ^ c || !a.is_some();\n }\n+\n+// Simplified versions of https://github.com/rust-lang-nursery/rust-clippy/issues/2638\n+// nonminimal_bool should only check the built-in Result and Some type, not\n+// any other types like the following.\n+enum CustomResultOk<E> { Ok, Err(E) }\n+enum CustomResultErr<E> { Ok, Err(E) }\n+enum CustomSomeSome<T> { Some(T), None }\n+enum CustomSomeNone<T> { Some(T), None }\n+\n+impl<E> CustomResultOk<E> {\n+    pub fn is_ok(&self) -> bool { true }\n+}\n+\n+impl<E> CustomResultErr<E> {\n+    pub fn is_err(&self) -> bool { true }\n+}\n+\n+impl<T> CustomSomeSome<T> {\n+    pub fn is_some(&self) -> bool { true }\n+}\n+\n+impl<T> CustomSomeNone<T> {\n+    pub fn is_none(&self) -> bool { true }\n+}\n+\n+fn dont_warn_for_custom_methods_with_negation() {\n+    let res = CustomResultOk::Err(\"Error\");\n+    // Should not warn and suggest 'is_err()' because the type does not\n+    // implement is_err().\n+    if !res.is_ok() { }\n+\n+    let res = CustomResultErr::Err(\"Error\");\n+    // Should not warn and suggest 'is_ok()' because the type does not\n+    // implement is_ok().\n+    if !res.is_err() { }\n+\n+    let res = CustomSomeSome::Some(\"thing\");\n+    // Should not warn and suggest 'is_none()' because the type does not\n+    // implement is_none().\n+    if !res.is_some() { }\n+\n+    let res = CustomSomeNone::Some(\"thing\");\n+    // Should not warn and suggest 'is_some()' because the type does not\n+    // implement is_some().\n+    if !res.is_none() { }\n+}\n+\n+// Only Built-in Result and Some types should suggest the negated alternative\n+fn warn_for_built_in_methods_with_negation() {\n+    let res: Result<usize, usize> = Ok(1);\n+    if !res.is_ok() { }\n+    if !res.is_err() { }\n+\n+    let res = Some(1);\n+    if !res.is_some() { }\n+    if !res.is_none() { }\n+}"}, {"sha": "f1996e8a26e462e6220d6f70f53a883d64ef3fc9", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/90e7d93d6cb333fea13383aa34d93b4fde7fbffc/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90e7d93d6cb333fea13383aa34d93b4fde7fbffc/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=90e7d93d6cb333fea13383aa34d93b4fde7fbffc", "patch": "@@ -175,5 +175,29 @@ error: this boolean expression can be simplified\n 58 |     let _ = !c ^ c || !a.is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `!c ^ c || a.is_none()`\n \n-error: aborting due to 21 previous errors\n+error: this boolean expression can be simplified\n+   --> $DIR/booleans.rs:110:8\n+    |\n+110 |     if !res.is_ok() { }\n+    |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n+\n+error: this boolean expression can be simplified\n+   --> $DIR/booleans.rs:111:8\n+    |\n+111 |     if !res.is_err() { }\n+    |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n+\n+error: this boolean expression can be simplified\n+   --> $DIR/booleans.rs:114:8\n+    |\n+114 |     if !res.is_some() { }\n+    |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n+\n+error: this boolean expression can be simplified\n+   --> $DIR/booleans.rs:115:8\n+    |\n+115 |     if !res.is_none() { }\n+    |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`\n+\n+error: aborting due to 25 previous errors\n "}]}