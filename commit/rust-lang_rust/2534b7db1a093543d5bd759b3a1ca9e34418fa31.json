{"sha": "2534b7db1a093543d5bd759b3a1ca9e34418fa31", "node_id": "C_kwDOAAsO6NoAKDI1MzRiN2RiMWEwOTM1NDNkNWJkNzU5YjNhMWNhOWUzNDQxOGZhMzE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-09T17:41:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-09T17:41:01Z"}, "message": "Merge #10975\n\n10975: internal: Shrink TraitImpls and InherentImpls HashMaps r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b440054f7400882978889fdaf4222bae995fa16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b440054f7400882978889fdaf4222bae995fa16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2534b7db1a093543d5bd759b3a1ca9e34418fa31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsj+tCRBK7hj4Ov3rIwAA5A8IAIR5NBxj6/o5JZ2foePr/hdl\nLYCjQ1rBjxM3cbp42U6Tnnu7rV5O97Y82avZNh83KljA5TkUcGpzFfmp2a5tLl+r\nRUz1SVXt1N+tUNLZPs05/aQeYzfQWxrRjLMhCU11/b9qqcU9ZjefGOBSc22POCvg\nKz+qg1Fc1t8dXXWB0FggzLELY0rYwL0zZ7nJY/balQKQmgeGVpeMvwxRCI+qDeEw\nJcoDVcyNI8RCoSo/iGMyjuyWpwqlcpX7JqJsQrm+pln4r7DDZMCJyJX/m783iIOZ\nVGmM2gDeL7B/vfbK79QVDA4BIiHG+627Hhgy1ydx3akr2QYuFVdz9ErSyols5Qc=\n=KPDO\n-----END PGP SIGNATURE-----\n", "payload": "tree b440054f7400882978889fdaf4222bae995fa16c\nparent 9eb5a96387c8a737732591c4a0076cafa7ad0869\nparent c469f8abcbefb33198a9ae25589205fd020232c2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639071661 +0000\ncommitter GitHub <noreply@github.com> 1639071661 +0000\n\nMerge #10975\n\n10975: internal: Shrink TraitImpls and InherentImpls HashMaps r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2534b7db1a093543d5bd759b3a1ca9e34418fa31", "html_url": "https://github.com/rust-lang/rust/commit/2534b7db1a093543d5bd759b3a1ca9e34418fa31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2534b7db1a093543d5bd759b3a1ca9e34418fa31/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb5a96387c8a737732591c4a0076cafa7ad0869", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb5a96387c8a737732591c4a0076cafa7ad0869", "html_url": "https://github.com/rust-lang/rust/commit/9eb5a96387c8a737732591c4a0076cafa7ad0869"}, {"sha": "c469f8abcbefb33198a9ae25589205fd020232c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c469f8abcbefb33198a9ae25589205fd020232c2", "html_url": "https://github.com/rust-lang/rust/commit/c469f8abcbefb33198a9ae25589205fd020232c2"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "3fbb6fea197740a8911646314428ebdab9856af3", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2534b7db1a093543d5bd759b3a1ca9e34418fa31/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2534b7db1a093543d5bd759b3a1ca9e34418fa31/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=2534b7db1a093543d5bd759b3a1ca9e34418fa31", "patch": "@@ -142,6 +142,7 @@ impl TraitImpls {\n \n         let crate_def_map = db.crate_def_map(krate);\n         impls.collect_def_map(db, &crate_def_map);\n+        impls.shrink_to_fit();\n \n         Arc::new(impls)\n     }\n@@ -155,10 +156,32 @@ impl TraitImpls {\n \n         let block_def_map = db.block_def_map(block)?;\n         impls.collect_def_map(db, &block_def_map);\n+        impls.shrink_to_fit();\n \n         Some(Arc::new(impls))\n     }\n \n+    pub(crate) fn trait_impls_in_deps_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n+        let _p = profile::span(\"trait_impls_in_deps_query\");\n+        let crate_graph = db.crate_graph();\n+        let mut res = Self { map: FxHashMap::default() };\n+\n+        for krate in crate_graph.transitive_deps(krate) {\n+            res.merge(&db.trait_impls_in_crate(krate));\n+        }\n+        res.shrink_to_fit();\n+\n+        Arc::new(res)\n+    }\n+\n+    fn shrink_to_fit(&mut self) {\n+        self.map.shrink_to_fit();\n+        self.map.values_mut().for_each(|map| {\n+            map.shrink_to_fit();\n+            map.values_mut().for_each(Vec::shrink_to_fit);\n+        });\n+    }\n+\n     fn collect_def_map(&mut self, db: &dyn HirDatabase, def_map: &DefMap) {\n         for (_module_id, module_data) in def_map.modules() {\n             for impl_id in module_data.scope.impls() {\n@@ -187,18 +210,6 @@ impl TraitImpls {\n         }\n     }\n \n-    pub(crate) fn trait_impls_in_deps_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n-        let _p = profile::span(\"trait_impls_in_deps_query\");\n-        let crate_graph = db.crate_graph();\n-        let mut res = Self { map: FxHashMap::default() };\n-\n-        for krate in crate_graph.transitive_deps(krate) {\n-            res.merge(&db.trait_impls_in_crate(krate));\n-        }\n-\n-        Arc::new(res)\n-    }\n-\n     fn merge(&mut self, other: &Self) {\n         for (trait_, other_map) in &other.map {\n             let map = self.map.entry(*trait_).or_default();\n@@ -264,6 +275,7 @@ impl InherentImpls {\n \n         let crate_def_map = db.crate_def_map(krate);\n         impls.collect_def_map(db, &crate_def_map);\n+        impls.shrink_to_fit();\n \n         return Arc::new(impls);\n     }\n@@ -275,11 +287,17 @@ impl InherentImpls {\n         let mut impls = Self { map: FxHashMap::default() };\n         if let Some(block_def_map) = db.block_def_map(block) {\n             impls.collect_def_map(db, &block_def_map);\n+            impls.shrink_to_fit();\n             return Some(Arc::new(impls));\n         }\n         return None;\n     }\n \n+    fn shrink_to_fit(&mut self) {\n+        self.map.values_mut().for_each(Vec::shrink_to_fit);\n+        self.map.shrink_to_fit();\n+    }\n+\n     fn collect_def_map(&mut self, db: &dyn HirDatabase, def_map: &DefMap) {\n         for (_module_id, module_data) in def_map.modules() {\n             for impl_id in module_data.scope.impls() {"}]}