{"sha": "7fafa4d0cae0d74dcb42016e51945866a1bd9f6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYWZhNGQwY2FlMGQ3NGRjYjQyMDE2ZTUxOTQ1ODY2YTFiZDlmNmY=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-02-12T20:24:35Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-02-12T21:02:23Z"}, "message": "Add docs for shared_from_slice From impls\n\nThe advantage of making these docs is mostly in pointing out that these\nfunctions all make new allocations and copy/clone/move the source into them.\n\nThese docs are on the function, and not the `impl` block, to avoid showing\nthe \"[+] show undocumented items\" button.\n\nCC #51430", "tree": {"sha": "b27644225f22c061aeff289c1b7195c5d02c5ee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b27644225f22c061aeff289c1b7195c5d02c5ee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f", "html_url": "https://github.com/rust-lang/rust/commit/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a118ee2c13cc96ceb27bd5030c1cca1052377604", "url": "https://api.github.com/repos/rust-lang/rust/commits/a118ee2c13cc96ceb27bd5030c1cca1052377604", "html_url": "https://github.com/rust-lang/rust/commit/a118ee2c13cc96ceb27bd5030c1cca1052377604"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "dac4acc4692a2de3070ba4545de1f657e53f93ba", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=7fafa4d0cae0d74dcb42016e51945866a1bd9f6f", "patch": "@@ -1652,6 +1652,16 @@ impl<T> From<T> for Rc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: Clone> From<&[T]> for Rc<[T]> {\n+    /// Allocate a reference-counted slice and fill it by cloning `v`'s items.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: &[i32] = &[1, 2, 3];\n+    /// let shared: Rc<[i32]> = Rc::from(original);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &[T]) -> Rc<[T]> {\n         <Self as RcFromSlice<T>>::from_slice(v)\n@@ -1660,6 +1670,15 @@ impl<T: Clone> From<&[T]> for Rc<[T]> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<&str> for Rc<str> {\n+    /// Allocate a reference-counted string slice and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let shared: Rc<str> = Rc::from(\"statue\");\n+    /// assert_eq!(\"statue\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &str) -> Rc<str> {\n         let rc = Rc::<[u8]>::from(v.as_bytes());\n@@ -1669,6 +1688,16 @@ impl From<&str> for Rc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<String> for Rc<str> {\n+    /// Allocate a reference-counted string slice and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: String = \"statue\".to_owned();\n+    /// let shared: Rc<str> = Rc::from(original);\n+    /// assert_eq!(\"statue\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: String) -> Rc<str> {\n         Rc::from(&v[..])\n@@ -1677,6 +1706,16 @@ impl From<String> for Rc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: ?Sized> From<Box<T>> for Rc<T> {\n+    /// Move a boxed object to a new, reference counted, allocation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: Box<i32> = Box::new(1);\n+    /// let shared: Rc<i32> = Rc::from(original);\n+    /// assert_eq!(1, *shared);\n+    /// ```\n     #[inline]\n     fn from(v: Box<T>) -> Rc<T> {\n         Rc::from_box(v)\n@@ -1685,6 +1724,16 @@ impl<T: ?Sized> From<Box<T>> for Rc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T> From<Vec<T>> for Rc<[T]> {\n+    /// Allocate a reference-counted slice and move `v`'s items into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);\n+    /// let shared: Rc<Vec<i32>> = Rc::from(original);\n+    /// assert_eq!(vec![1, 2, 3], *shared);\n+    /// ```\n     #[inline]\n     fn from(mut v: Vec<T>) -> Rc<[T]> {\n         unsafe {"}, {"sha": "aeae888dddc036faa4b4eeb232f8f2c85832297a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fafa4d0cae0d74dcb42016e51945866a1bd9f6f/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=7fafa4d0cae0d74dcb42016e51945866a1bd9f6f", "patch": "@@ -2285,6 +2285,16 @@ impl<T> From<T> for Arc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: Clone> From<&[T]> for Arc<[T]> {\n+    /// Allocate a reference-counted slice and fill it by cloning `v`'s items.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let original: &[i32] = &[1, 2, 3];\n+    /// let shared: Arc<[i32]> = Arc::from(original);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &[T]) -> Arc<[T]> {\n         <Self as ArcFromSlice<T>>::from_slice(v)\n@@ -2293,6 +2303,15 @@ impl<T: Clone> From<&[T]> for Arc<[T]> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<&str> for Arc<str> {\n+    /// Allocate a reference-counted `str` and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let shared: Arc<str> = Arc::from(\"eggplant\");\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: &str) -> Arc<str> {\n         let arc = Arc::<[u8]>::from(v.as_bytes());\n@@ -2302,6 +2321,16 @@ impl From<&str> for Arc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl From<String> for Arc<str> {\n+    /// Allocate a reference-counted `str` and copy `v` into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: String = \"eggplant\".to_owned();\n+    /// let shared: Arc<str> = Arc::from(unique);\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: String) -> Arc<str> {\n         Arc::from(&v[..])\n@@ -2310,6 +2339,16 @@ impl From<String> for Arc<str> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T: ?Sized> From<Box<T>> for Arc<T> {\n+    /// Move a boxed object to a new, reference-counted allocation.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: Box<str> = Box::from(\"eggplant\");\n+    /// let shared: Arc<str> = Arc::from(unique);\n+    /// assert_eq!(\"eggplant\", &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(v: Box<T>) -> Arc<T> {\n         Arc::from_box(v)\n@@ -2318,6 +2357,16 @@ impl<T: ?Sized> From<Box<T>> for Arc<T> {\n \n #[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]\n impl<T> From<Vec<T>> for Arc<[T]> {\n+    /// Allocate a reference-counted slice and move `v`'s items into it.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let unique: Vec<i32> = vec![1, 2, 3];\n+    /// let shared: Arc<[i32]> = Arc::from(unique);\n+    /// assert_eq!(&[1, 2, 3], &shared[..]);\n+    /// ```\n     #[inline]\n     fn from(mut v: Vec<T>) -> Arc<[T]> {\n         unsafe {"}]}