{"sha": "25ba057fad54da946bb3d72925c9a93b0abe61ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YmEwNTdmYWQ1NGRhOTQ2YmIzZDcyOTI1YzlhOTNiMGFiZTYxYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-20T09:51:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-20T09:51:56Z"}, "message": "auto merge of #12343 : liigo/rust/move-extra-test-to-libtest, r=alexcrichton\n\nI don't think `extra` is a good/meaningful name for a library. `libextra` should disappear, and we move all of its sub modules out of it. This PR is just one of that steps: move `extra::test` to `libtest`.\r\n\r\nI didn't add `libtest` to doc index, because it's an internal library currently.\r\n\r\n**Update:**\r\n\r\nAll comments addressed. All tests passed. Rebased and squashed.", "tree": {"sha": "141f807a6abb9d11c60a234524d259d943868be0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141f807a6abb9d11c60a234524d259d943868be0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25ba057fad54da946bb3d72925c9a93b0abe61ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25ba057fad54da946bb3d72925c9a93b0abe61ac", "html_url": "https://github.com/rust-lang/rust/commit/25ba057fad54da946bb3d72925c9a93b0abe61ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25ba057fad54da946bb3d72925c9a93b0abe61ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f76628d3904454241e41acb033f6ececfdd08b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76628d3904454241e41acb033f6ececfdd08b4c", "html_url": "https://github.com/rust-lang/rust/commit/f76628d3904454241e41acb033f6ececfdd08b4c"}, {"sha": "53b9d1a3248143aafe421566ba31742579da9722", "url": "https://api.github.com/repos/rust-lang/rust/commits/53b9d1a3248143aafe421566ba31742579da9722", "html_url": "https://github.com/rust-lang/rust/commit/53b9d1a3248143aafe421566ba31742579da9722"}], "stats": {"total": 313, "additions": 176, "deletions": 137}, "files": [{"sha": "f8bb9fbb4085b92c96de28f9b4c15a30ba55d335", "filename": "mk/crates.mk", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -50,7 +50,7 @@\n ################################################################################\n \n TARGET_CRATES := std extra green rustuv native flate arena glob term semver \\\n-                 uuid serialize sync getopts collections num\n+                 uuid serialize sync getopts collections num test\n HOST_CRATES := syntax rustc rustdoc fourcc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n@@ -63,7 +63,8 @@ DEPS_native := std\n DEPS_syntax := std term serialize collections\n DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n               collections extra\n-DEPS_rustdoc := rustc native:sundown serialize sync getopts collections\n+DEPS_rustdoc := rustc native:sundown serialize sync getopts collections \\\n+                test\n DEPS_flate := std native:miniz\n DEPS_arena := std collections\n DEPS_glob := std\n@@ -76,8 +77,9 @@ DEPS_getopts := std\n DEPS_collections := std serialize\n DEPS_fourcc := syntax std\n DEPS_num := std extra\n+DEPS_test := std extra collections getopts serialize term\n \n-TOOL_DEPS_compiletest := extra green rustuv getopts\n+TOOL_DEPS_compiletest := test green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc green rustuv\n TOOL_DEPS_rustc := rustc green rustuv\n TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs"}, {"sha": "c5ec19813065c9d1e2b5a615bae7cbd27817f5b2", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -13,16 +13,13 @@\n #[allow(non_camel_case_types)];\n #[deny(warnings)];\n \n-extern crate extra;\n+extern crate test;\n extern crate getopts;\n \n use std::os;\n use std::io;\n use std::io::fs;\n-\n use getopts::{optopt, optflag, reqopt};\n-use extra::test;\n-\n use common::config;\n use common::mode_run_pass;\n use common::mode_run_fail;"}, {"sha": "83d6bf742c44f2301c032d43b2f33b0c0be1cf8e", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -34,7 +34,7 @@ use std::str;\n use std::task;\n use std::vec;\n \n-use extra::test::MetricMap;\n+use test::MetricMap;\n \n pub fn run(config: config, testfile: ~str) {\n "}, {"sha": "f129f7db729943e44949e41acfc8c0c3ed3beebc", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -170,7 +170,7 @@ runner.\n \n The type signature of a benchmark function differs from a unit test:\n it takes a mutable reference to type\n-`extra::test::BenchHarness`. Inside the benchmark function, any\n+`test::BenchHarness`. Inside the benchmark function, any\n time-variable or \"setup\" code should execute first, followed by a call\n to `iter` on the benchmark harness, passing a closure that contains\n the portion of the benchmark you wish to actually measure the\n@@ -185,9 +185,10 @@ amount.\n For example:\n \n ~~~\n-extern crate extra;\n+extern crate test;\n+\n use std::vec;\n-use extra::test::BenchHarness;\n+use test::BenchHarness;\n \n #[bench]\n fn bench_sum_1024_ints(b: &mut BenchHarness) {\n@@ -243,8 +244,8 @@ recognize that some calculation has no external effects and remove\n it entirely.\n \n ~~~\n-extern crate extra;\n-use extra::test::BenchHarness;\n+extern crate test;\n+use test::BenchHarness;\n \n #[bench]\n fn bench_xor_1000_ints(bh: &mut BenchHarness) {\n@@ -273,15 +274,15 @@ example above by adjusting the `bh.iter` call to\n bh.iter(|| range(0, 1000).fold(0, |old, new| old ^ new))\n ~~~\n \n-Or, the other option is to call the generic `extra::test::black_box`\n+Or, the other option is to call the generic `test::black_box`\n function, which is an opaque \"black box\" to the optimizer and so\n forces it to consider any argument as used.\n \n ~~~\n-use extra::test::black_box\n+extern crate test;\n \n bh.iter(|| {\n-        black_box(range(0, 1000).fold(0, |old, new| old ^ new));\n+        test::black_box(range(0, 1000).fold(0, |old, new| old ^ new));\n     });\n ~~~\n "}, {"sha": "77aa9273734c3a2f0de43bb30be65af2f787f899", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -154,7 +154,7 @@ testing this code, the `fib` function will be included (so it can compile).\n \n Running tests often requires some special configuration to filter tests, find\n libraries, or try running ignored examples. The testing framework that rustdoc\n-uses is build on `extra::test`, which is also used when you compile crates with\n+uses is build on crate `test`, which is also used when you compile crates with\n rustc's `--test` flag. Extra arguments can be passed to rustdoc's test harness\n with the `--test-args` flag.\n "}, {"sha": "0f291a56a7099102764fbc2c5dd506b3643de4d3", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -503,10 +503,10 @@ impl<T> Drop for TypedArena<T> {\n }\n \n #[cfg(test)]\n-mod test {\n-    extern crate extra;\n+mod tests {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use super::{Arena, TypedArena};\n-    use self::extra::test::BenchHarness;\n \n     struct Point {\n         x: int,"}, {"sha": "0e14b28eda3266a1f2bacc2a0bda3941af15d65e", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -938,7 +938,8 @@ impl<'a> Iterator<uint> for BitPositions<'a> {\n \n #[cfg(test)]\n mod tests {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n \n     use bitv::{Bitv, SmallBitv, BigBitv, BitvSet, from_bools, from_fn,\n                from_bytes};"}, {"sha": "ac3861f4e3668ac8b7c44916efc0d764b7d334aa", "filename": "src/libcollections/deque.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -41,10 +41,11 @@ pub trait Deque<T> : Mutable {\n \n #[cfg(test)]\n pub mod bench {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use std::container::MutableMap;\n     use std::{vec, rand};\n     use std::rand::Rng;\n-    use extra::test::BenchHarness;\n \n     pub fn insert_rand_n<M:MutableMap<uint,uint>>(n: uint,\n                                                   map: &mut M,"}, {"sha": "591561d775eb234544d923a4f2fc737edbd225ae", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -657,8 +657,9 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for DList<T> {\n \n #[cfg(test)]\n mod tests {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use deque::Deque;\n-    use extra::test;\n     use std::rand;\n     use super::{DList, Node, ListInsertion};\n "}, {"sha": "5b9ded3d1c7db2e29aef817abdabb5f63ce065eb", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -20,7 +20,7 @@\n #[feature(macro_rules, managed_boxes)];\n \n extern crate serialize;\n-#[cfg(test)] extern crate extra; // benchmark tests need this\n+#[cfg(test)] extern crate test;\n \n pub use bitv::Bitv;\n pub use btree::BTree;"}, {"sha": "8abc5a3ca115bab3ac59d7f9672381cc94793c8d", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -431,8 +431,9 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for RingBuf<T> {\n \n #[cfg(test)]\n mod tests {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use deque::Deque;\n-    use extra::test;\n     use std::clone::Clone;\n     use std::cmp::Eq;\n     use super::RingBuf;"}, {"sha": "d7b0e66aad7e3e43112cd35bbed345ecb9fc289a", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -470,9 +470,9 @@ mod test_map {\n \n #[cfg(test)]\n mod bench {\n-\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use super::SmallIntMap;\n-    use extra::test::BenchHarness;\n     use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n     // Find seq"}, {"sha": "a4b2357960656ef012c407051e9f0715b591d665", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -1494,9 +1494,9 @@ mod test_treemap {\n \n #[cfg(test)]\n mod bench {\n-\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use super::TreeMap;\n-    use extra::test::BenchHarness;\n     use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n     // Find seq"}, {"sha": "dc5624f9de9470432ec8b50c250279a07d7aa125", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -36,15 +36,10 @@ Rust extras are part of the standard Rust distribution.\n \n extern crate sync;\n extern crate serialize;\n-\n extern crate collections;\n \n // Utility modules\n-\n pub mod c_vec;\n-\n-// And ... other stuff\n-\n pub mod url;\n pub mod json;\n pub mod tempfile;\n@@ -56,15 +51,11 @@ pub mod stats;\n #[cfg(unicode)]\n mod unicode;\n \n-// Compiler support modules\n-\n-pub mod test;\n-\n // A curious inner-module that's not exported that contains the binding\n // 'extra' so that macro-expanded references to extra::serialize and such\n // can be resolved within libextra.\n #[doc(hidden)]\n pub mod extra {\n     pub use serialize;\n-    pub use test;\n }\n+"}, {"sha": "1687f5550b45d59c1cd857e4ad4dcc3adce2daa6", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -1025,7 +1025,8 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use std::vec;\n     use stats::Stats;\n "}, {"sha": "21726d28e0ca2921f9a7e1dc6d413c6fd9cee978", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -2546,11 +2546,12 @@ mod bigint_tests {\n \n #[cfg(test)]\n mod bench {\n-    use super::{BigInt, BigUint};\n+    extern crate test;\n+    use self::test::BenchHarness;\n+    use super::BigUint;\n     use std::iter;\n     use std::mem::replace;\n     use std::num::{FromPrimitive, Zero, One};\n-    use extra::test::BenchHarness;\n \n     fn factorial(n: uint) -> BigUint {\n         let mut f: BigUint = One::one();"}, {"sha": "a483946322f804a89104aff53a356c249cd8dc5a", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -430,8 +430,7 @@ mod test {\n \n     mod arith {\n         use super::{_0, _1, _2, _1_2, _3_2, _neg1_2, to_big};\n-        use super::super::{Ratio, Rational, BigRational};\n-\n+        use super::super::{Ratio, Rational};\n \n         #[test]\n         fn test_add() {"}, {"sha": "45b1a42898c2a77d1b36919aa89332a35a579233", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -46,7 +46,7 @@ struct TestCtxt<'a> {\n     path: RefCell<~[ast::Ident]>,\n     ext_cx: ExtCtxt<'a>,\n     testfns: RefCell<~[Test]>,\n-    is_extra: bool,\n+    is_test_crate: bool,\n     config: ast::CrateConfig,\n }\n \n@@ -164,7 +164,7 @@ fn generate_test_harness(sess: session::Session, krate: ast::Crate)\n         ext_cx: ExtCtxt::new(sess.parse_sess, sess.opts.cfg.clone(), loader),\n         path: RefCell::new(~[]),\n         testfns: RefCell::new(~[]),\n-        is_extra: is_extra(&krate),\n+        is_test_crate: is_test_crate(&krate),\n         config: krate.config.clone(),\n     };\n \n@@ -275,29 +275,28 @@ We're going to be building a module that looks more or less like:\n \n mod __test {\n   #[!resolve_unexported]\n-  extern crate extra (name = \"extra\", vers = \"...\");\n+  extern crate test (name = \"test\", vers = \"...\");\n   fn main() {\n-    #[main];\n-    extra::test::test_main_static(::os::args(), tests)\n+    test::test_main_static(::os::args(), tests)\n   }\n \n-  static tests : &'static [extra::test::TestDescAndFn] = &[\n+  static tests : &'static [test::TestDescAndFn] = &[\n     ... the list of tests in the crate ...\n   ];\n }\n \n */\n \n fn mk_std(cx: &TestCtxt) -> ast::ViewItem {\n-    let id_extra = token::str_to_ident(\"extra\");\n-    let vi = if cx.is_extra {\n+    let id_test = token::str_to_ident(\"test\");\n+    let vi = if cx.is_test_crate {\n         ast::ViewItemUse(\n-            ~[@nospan(ast::ViewPathSimple(id_extra,\n-                                          path_node(~[id_extra]),\n+            ~[@nospan(ast::ViewPathSimple(id_test,\n+                                          path_node(~[id_test]),\n                                           ast::DUMMY_NODE_ID))])\n     } else {\n-        ast::ViewItemExternMod(id_extra,\n-                               with_version(\"extra\"),\n+        ast::ViewItemExternMod(id_test,\n+                               with_version(\"test\"),\n                                ast::DUMMY_NODE_ID)\n     };\n     ast::ViewItem {\n@@ -310,7 +309,7 @@ fn mk_std(cx: &TestCtxt) -> ast::ViewItem {\n \n fn mk_test_module(cx: &TestCtxt) -> @ast::Item {\n \n-    // Link to extra\n+    // Link to test crate\n     let view_items = ~[mk_std(cx)];\n \n     // A constant vector of test descriptors.\n@@ -321,7 +320,7 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::Item {\n     let mainfn = (quote_item!(&cx.ext_cx,\n         pub fn main() {\n             #[main];\n-            extra::test::test_main_static(::std::os::args(), TESTS);\n+            test::test_main_static(::std::os::args(), TESTS);\n         }\n     )).unwrap();\n \n@@ -383,15 +382,15 @@ fn mk_tests(cx: &TestCtxt) -> @ast::Item {\n     let test_descs = mk_test_descs(cx);\n \n     (quote_item!(&cx.ext_cx,\n-        pub static TESTS : &'static [self::extra::test::TestDescAndFn] =\n+        pub static TESTS : &'static [self::test::TestDescAndFn] =\n             $test_descs\n         ;\n     )).unwrap()\n }\n \n-fn is_extra(krate: &ast::Crate) -> bool {\n+fn is_test_crate(krate: &ast::Crate) -> bool {\n     match attr::find_crateid(krate.attrs) {\n-        Some(ref s) if \"extra\" == s.name => true,\n+        Some(ref s) if \"test\" == s.name => true,\n         _ => false\n     }\n }\n@@ -444,9 +443,9 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> @ast::Expr {\n     };\n \n     let t_expr = if test.bench {\n-        quote_expr!(&cx.ext_cx, self::extra::test::StaticBenchFn($fn_expr) )\n+        quote_expr!(&cx.ext_cx, self::test::StaticBenchFn($fn_expr) )\n     } else {\n-        quote_expr!(&cx.ext_cx, self::extra::test::StaticTestFn($fn_expr) )\n+        quote_expr!(&cx.ext_cx, self::test::StaticTestFn($fn_expr) )\n     };\n \n     let ignore_expr = if test.ignore {\n@@ -462,9 +461,9 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> @ast::Expr {\n     };\n \n     let e = quote_expr!(&cx.ext_cx,\n-        self::extra::test::TestDescAndFn {\n-            desc: self::extra::test::TestDesc {\n-                name: self::extra::test::StaticTestName($name_expr),\n+        self::test::TestDescAndFn {\n+            desc: self::test::TestDesc {\n+                name: self::test::StaticTestName($name_expr),\n                 ignore: $ignore_expr,\n                 should_fail: $fail_expr\n             },"}, {"sha": "bd17f6b581483c74eb5213b92f797e12ccdea4ff", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -635,7 +635,8 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use super::{Sha256, FixedBuffer, Digest};\n \n     #[bench]"}, {"sha": "de992e68fe0ba064146c84ebd4ae5bcd0f775551", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -23,6 +23,7 @@ extern crate serialize;\n extern crate sync;\n extern crate getopts;\n extern crate collections;\n+extern crate testing = \"test\";\n \n use std::local_data;\n use std::io;"}, {"sha": "104cec9c814f44e70d6141b9e078ad2dfe37f17f", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -10,10 +10,10 @@\n \n use clean;\n \n-use extra;\n+use extra::json;\n use dl = std::unstable::dynamic_lib;\n \n-pub type PluginJson = Option<(~str, extra::json::Json)>;\n+pub type PluginJson = Option<(~str, json::Json)>;\n pub type PluginResult = (clean::Crate, PluginJson);\n pub type plugin_callback = extern fn (clean::Crate) -> PluginResult;\n "}, {"sha": "c0f8d2696caf07984aee13fdff694230b5f4659c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -15,8 +15,8 @@ use std::os;\n use std::run;\n use std::str;\n \n+use testing;\n use extra::tempfile::TempDir;\n-use extra::test;\n use rustc::back::link;\n use rustc::driver::driver;\n use rustc::driver::session;\n@@ -89,7 +89,7 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n     let mut args = args.to_owned_vec();\n     args.unshift(~\"rustdoctest\");\n \n-    test::test_main(args, collector.tests);\n+    testing::test_main(args, collector.tests);\n \n     0\n }\n@@ -164,7 +164,7 @@ fn maketest(s: &str, cratename: &str) -> ~str {\n }\n \n pub struct Collector {\n-    priv tests: ~[test::TestDescAndFn],\n+    priv tests: ~[testing::TestDescAndFn],\n     priv names: ~[~str],\n     priv libs: @RefCell<HashSet<Path>>,\n     priv cnt: uint,\n@@ -180,13 +180,13 @@ impl Collector {\n         let libs = (*libs.get()).clone();\n         let cratename = self.cratename.to_owned();\n         debug!(\"Creating test {}: {}\", name, test);\n-        self.tests.push(test::TestDescAndFn {\n-            desc: test::TestDesc {\n-                name: test::DynTestName(name),\n+        self.tests.push(testing::TestDescAndFn {\n+            desc: testing::TestDesc {\n+                name: testing::DynTestName(name),\n                 ignore: false,\n                 should_fail: false, // compiler failures are test failures\n             },\n-            testfn: test::DynTestFn(proc() {\n+            testfn: testing::DynTestFn(proc() {\n                 runtest(test, cratename, libs, should_fail);\n             }),\n         });"}, {"sha": "839450ce57cc32e3792c34e72f543b9693037918", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -260,8 +260,9 @@ impl<'a> FromBase64 for &'a str {\n }\n \n #[cfg(test)]\n-mod test {\n-    use extra::test::BenchHarness;\n+mod tests {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use base64::{Config, FromBase64, ToBase64, STANDARD, URL_SAFE};\n \n     #[test]"}, {"sha": "6dc23f586dbea2ff64ddd5be3b0aad13ed408601", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -1037,8 +1037,9 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use ebml::reader;\n-    use extra::test::BenchHarness;\n \n     #[bench]\n     pub fn vuint_at_A_aligned(bh: &mut BenchHarness) {"}, {"sha": "223a586a5a0dd8d38d907e3401ef0033cc447ec7", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -139,7 +139,8 @@ impl<'a> FromHex for &'a str {\n \n #[cfg(test)]\n mod tests {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use hex::{FromHex, ToHex};\n \n     #[test]"}, {"sha": "f89f56c0f344e2afcd475852654720784b6d2ea5", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -24,7 +24,7 @@ Core encoding and decoding interfaces.\n \n // test harness access\n #[cfg(test)]\n-extern crate extra;\n+extern crate test;\n \n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable,\n     DecoderHelpers, EncoderHelpers};"}, {"sha": "e6b0958617e38d6b0db4584ae3fffdbb24fa302a", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -664,7 +664,8 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use libc;\n     use prelude::*;\n "}, {"sha": "227f3a0a083627fc216febe4c561ad293f6020cb", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -346,11 +346,12 @@ impl<S: Stream> Writer for BufferedStream<S> {\n \n #[cfg(test)]\n mod test {\n+    extern crate test;\n     use io;\n     use prelude::*;\n     use super::*;\n     use super::super::mem::{MemReader, MemWriter, BufReader};\n-    use Harness = extra::test::BenchHarness;\n+    use Harness = self::test::BenchHarness;\n \n     /// A type, free to create, primarily intended for benchmarking creation of\n     /// wrappers that, just for construction, don't need a Reader/Writer that"}, {"sha": "ee366e96f23c596b2e3ba68f93367e94f0523995", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -456,7 +456,8 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use container::Container;\n \n     macro_rules! u64_from_be_bytes_bench_impl("}, {"sha": "11053f01ded09222d8653d9bb173a40b425832b3", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -267,8 +267,8 @@ mod tests {\n /// Completely miscellaneous language-construct benchmarks.\n #[cfg(test)]\n mod bench {\n-\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use option::{Some,None};\n \n     // Static/dynamic method dispatch"}, {"sha": "da3f2c1636fe010e8aff00e039cc2746710645b6", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -865,7 +865,6 @@ impl num::FromStrRadix for f32 {\n #[cfg(test)]\n mod tests {\n     use f32::*;\n-\n     use num::*;\n     use num;\n "}, {"sha": "24165cbef50b9a76b68c9b3bbd494e901208a9bd", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -867,7 +867,6 @@ impl num::FromStrRadix for f64 {\n #[cfg(test)]\n mod tests {\n     use f64::*;\n-\n     use num::*;\n     use num;\n "}, {"sha": "8a417096c3ea7522aaf98ccafe7e55cfdfde8117", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -1734,10 +1734,11 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use num;\n     use vec;\n     use prelude::*;\n-    use extra::test::BenchHarness;\n \n     #[bench]\n     fn bench_pow_function(b: &mut BenchHarness) {"}, {"sha": "6be829f51d73c858d164a207859aa8866f9005f7", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -803,7 +803,8 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use rand::{XorShiftRng, Rng};\n     use to_str::ToStr;\n     use f64;"}, {"sha": "ac329e6fe839510466e533cefed0428961d7fbfd", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -466,8 +466,8 @@ pub trait Index<Index,Result> {\n \n #[cfg(test)]\n mod bench {\n-\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use ops::Drop;\n \n     // Overhead of dtors"}, {"sha": "9aaa86c4cfe217f60cf0e6bf4a0676583b1cdd28", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -1250,7 +1250,8 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use super::*;\n     use prelude::*;\n "}, {"sha": "2fa9cf8bd48b2882e56f887ee16364e2744cb6c9", "filename": "src/libstd/rand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -119,7 +119,8 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use mem::size_of;\n     use prelude::*;\n     use rand::{XorShiftRng, RAND_BENCH_N};"}, {"sha": "b9702ccd48da2bcb93bb145f1698ec3ecfeb8d54", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -371,7 +371,8 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use mem::size_of;\n     use prelude::*;\n     use rand::distributions::IndependentSample;"}, {"sha": "b2f952e2a4c98b1f26dee486029f8fde1500d65f", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -187,7 +187,8 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use mem::size_of;\n     use prelude::*;\n     use rand::{XorShiftRng, RAND_BENCH_N};"}, {"sha": "7218f83d66203031fe0cbc9ee54637c74fc06261", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -845,8 +845,9 @@ static RAND_BENCH_N: u64 = 100;\n \n #[cfg(test)]\n mod bench {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use prelude::*;\n-    use extra::test::BenchHarness;\n     use rand::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n     use mem::size_of;\n "}, {"sha": "8128bb021487d50a1c577b0bc281b8f6b67d6841", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -107,7 +107,8 @@ pub unsafe fn exchange_free(ptr: *u8) {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n \n     #[bench]\n     fn alloc_owned_small(bh: &mut BenchHarness) {"}, {"sha": "8a42cd73565446f5c1700d948014af638b3c7cea", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -308,7 +308,8 @@ pub fn live_allocs() -> *mut Box {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n \n     #[bench]\n     fn alloc_managed_small(bh: &mut BenchHarness) {"}, {"sha": "c3f79ff7139a6de652708802341cacdbedc7a51d", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -4498,7 +4498,8 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use super::*;\n     use prelude::*;\n "}, {"sha": "d17d59f8665e90e30cf5284e42a092fb9d2f7de1", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -902,10 +902,11 @@ mod test_map {\n \n #[cfg(test)]\n mod bench_map {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use super::*;\n     use prelude::*;\n     use rand::{weak_rng, Rng};\n-    use extra::test::BenchHarness;\n \n     #[bench]\n     fn bench_iter_small(bh: &mut BenchHarness) {"}, {"sha": "d16ad54a25d2aac770d7fcbfa5fbedd3a89d4ad6", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -4360,7 +4360,8 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use extra::test::BenchHarness;\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use mem;\n     use prelude::*;\n     use ptr;"}, {"sha": "e8edc1a0dfc0e4ac53d2c87c6d6950bf8e96c19e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -1196,8 +1196,9 @@ pub enum InlinedItem {\n \n #[cfg(test)]\n mod test {\n+    extern crate extra;\n+    use self::extra::json;\n     use serialize;\n-    use extra;\n     use codemap::*;\n     use super::*;\n \n@@ -1223,6 +1224,6 @@ mod test {\n             },\n         };\n         // doesn't matter which encoder we use....\n-        let _f = (&e as &serialize::Encodable<extra::json::Encoder>);\n+        let _f = (&e as &serialize::Encodable<json::Encoder>);\n     }\n }"}, {"sha": "42c9ab461aa009be8ee037a1059e9c34165a3e89", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -32,7 +32,6 @@ This API is completely unstable and subject to change.\n \n #[deny(non_camel_case_types)];\n \n-#[cfg(test)] extern crate extra;\n extern crate serialize;\n extern crate term;\n extern crate collections;"}, {"sha": "08aec07577098561e4bac74978d21ed4dc7e23ee", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -283,9 +283,10 @@ pub fn maybe_aborted<T>(result: T, mut p: Parser) -> T {\n \n #[cfg(test)]\n mod test {\n+    extern crate extra;\n+    use self::extra::json;\n     use super::*;\n     use serialize::Encodable;\n-    use extra;\n     use std::io;\n     use std::io::MemWriter;\n     use std::str;\n@@ -300,9 +301,9 @@ mod test {\n     use util::parser_testing::string_to_stmt;\n \n     #[cfg(test)]\n-    fn to_json_str<'a, E: Encodable<extra::json::Encoder<'a>>>(val: &E) -> ~str {\n+    fn to_json_str<'a, E: Encodable<json::Encoder<'a>>>(val: &E) -> ~str {\n         let mut writer = MemWriter::new();\n-        let mut encoder = extra::json::Encoder::new(&mut writer as &mut io::Writer);\n+        let mut encoder = json::Encoder::new(&mut writer as &mut io::Writer);\n         val.encode(&mut encoder);\n         str::from_utf8_owned(writer.unwrap()).unwrap()\n     }"}, {"sha": "226dd75d740cdaa0342347c4736b88bd19128c76", "filename": "src/libtest/lib.rs", "status": "renamed", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,23 +8,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[doc(hidden)];\n-\n // Support code for rustc's built in test runner generator. Currently,\n // none of this is meant for users. It is intended to support the\n // simplest interface possible for representing and running tests\n // while providing a base that other test frameworks may build off of.\n \n+#[crate_id = \"test#0.10-pre\"];\n+#[comment = \"Rust internal test library only used by rustc\"];\n+#[license = \"MIT/ASL2\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+\n+#[feature(asm)];\n+\n+extern crate collections;\n+extern crate extra;\n extern crate getopts;\n+extern crate serialize;\n extern crate term;\n \n-use json::ToJson;\n-use json;\n-use serialize::Decodable;\n-use stats::Stats;\n-use stats;\n-use time::precise_time_ns;\n use collections::TreeMap;\n+use extra::json::ToJson;\n+use extra::json;\n+use extra::stats::Stats;\n+use extra::stats;\n+use extra::time::precise_time_ns;\n+use getopts::{OptGroup, optflag, optopt};\n+use serialize::Decodable;\n+use term::Terminal;\n+use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n \n use std::cmp;\n use std::io;\n@@ -36,6 +48,17 @@ use std::to_str::ToStr;\n use std::f64;\n use std::os;\n \n+// to be used by rustc to compile tests in libtest\n+pub mod test {\n+    pub use {BenchHarness, TestName, TestResult, TestDesc,\n+             TestDescAndFn, TestOpts, TrFailed, TrIgnored, TrOk,\n+             Metric, MetricMap, MetricAdded, MetricRemoved,\n+             MetricChange, Improvement, Regression, LikelyNoise,\n+             StaticTestFn, StaticTestName, DynTestName, DynTestFn,\n+             run_test, test_main, test_main_static, filter_tests,\n+             parse_opts};\n+}\n+\n // The name of a test. By convention this follows the rules for rust\n // paths; i.e. it should be a series of identifiers separated by double\n // colons. This way if some test runner wants to arrange the tests\n@@ -131,6 +154,12 @@ pub struct Metric {\n     priv noise: f64\n }\n \n+impl Metric {\n+    pub fn new(value: f64, noise: f64) -> Metric {\n+        Metric {value: value, noise: noise}\n+    }\n+}\n+\n #[deriving(Eq)]\n pub struct MetricMap(TreeMap<~str,Metric>);\n \n@@ -245,7 +274,7 @@ Test Attributes:\n     #[test]        - Indicates a function is a test to be run. This function\n                      takes no arguments.\n     #[bench]       - Indicates a function is a benchmark to be run. This\n-                     function takes one argument (extra::test::BenchHarness).\n+                     function takes one argument (test::BenchHarness).\n     #[should_fail] - This function (also labeled with #[test]) will only pass if\n                      the code causes a failure (an assertion failure or fail!)\n     #[ignore]      - When applied to a function which is already attributed as a\n@@ -783,7 +812,7 @@ fn run_tests(opts: &TestOpts,\n     remaining.reverse();\n     let mut pending = 0;\n \n-    let (p, ch) = Chan::new();\n+    let (p, ch) = Chan::<MonitorMsg>::new();\n \n     while pending > 0 || !remaining.is_empty() {\n         while pending < concurrency && !remaining.is_empty() {\n@@ -929,12 +958,12 @@ pub fn run_test(force_ignore: bool,\n \n     match testfn {\n         DynBenchFn(bencher) => {\n-            let bs = ::test::bench::benchmark(|harness| bencher.run(harness));\n+            let bs = ::bench::benchmark(|harness| bencher.run(harness));\n             monitor_ch.send((desc, TrBench(bs), ~[]));\n             return;\n         }\n         StaticBenchFn(benchfn) => {\n-            let bs = ::test::bench::benchmark(|harness| benchfn(harness));\n+            let bs = ::bench::benchmark(|harness| benchfn(harness));\n             monitor_ch.send((desc, TrBench(bs), ~[]));\n             return;\n         }\n@@ -1230,15 +1259,11 @@ impl BenchHarness {\n             n *= 2;\n         }\n     }\n-\n-\n-\n-\n }\n \n pub mod bench {\n     use std::cmp;\n-    use test::{BenchHarness, BenchSamples};\n+    use super::{BenchHarness, BenchSamples};\n \n     pub fn benchmark(f: |&mut BenchHarness|) -> BenchSamples {\n         let mut bs = BenchHarness {\n@@ -1264,13 +1289,11 @@ pub mod bench {\n #[cfg(test)]\n mod tests {\n     use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts,\n-               TestDesc, TestDescAndFn,\n+               TestDesc, TestDescAndFn, TestOpts, run_test,\n                Metric, MetricMap, MetricAdded, MetricRemoved,\n                Improvement, Regression, LikelyNoise,\n                StaticTestName, DynTestName, DynTestFn};\n-    use test::{TestOpts, run_test};\n-\n-    use tempfile::TempDir;\n+    use extra::tempfile::TempDir;\n \n     #[test]\n     pub fn do_not_run_ignored_tests() {\n@@ -1532,8 +1555,8 @@ mod tests {\n         let m3 = MetricMap::load(&pth);\n         let MetricMap(m3) = m3;\n         assert_eq!(m3.len(), 2);\n-        assert_eq!(*(m3.find(&~\"runtime\").unwrap()), Metric { value: 1000.0, noise: 2.0 });\n-        assert_eq!(*(m3.find(&~\"throughput\").unwrap()), Metric { value: 50.0, noise: 2.0 });\n+        assert_eq!(*(m3.find(&~\"runtime\").unwrap()), Metric::new(1000.0, 2.0));\n+        assert_eq!(*(m3.find(&~\"throughput\").unwrap()), Metric::new(50.0, 2.0));\n \n         // Ask for a ratchet with an explicit noise-percentage override,\n         // that should advance.\n@@ -1547,7 +1570,8 @@ mod tests {\n         let m4 = MetricMap::load(&pth);\n         let MetricMap(m4) = m4;\n         assert_eq!(m4.len(), 2);\n-        assert_eq!(*(m4.find(&~\"runtime\").unwrap()), Metric { value: 1100.0, noise: 2.0 });\n-        assert_eq!(*(m4.find(&~\"throughput\").unwrap()), Metric { value: 50.0, noise: 2.0 });\n+        assert_eq!(*(m4.find(&~\"runtime\").unwrap()), Metric::new(1100.0, 2.0));\n+        assert_eq!(*(m4.find(&~\"throughput\").unwrap()), Metric::new(50.0, 2.0));\n     }\n }\n+", "previous_filename": "src/libextra/test.rs"}, {"sha": "5941afb7d7573845d8ade0c2aec39bc355fa8114", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ba057fad54da946bb3d72925c9a93b0abe61ac/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=25ba057fad54da946bb3d72925c9a93b0abe61ac", "patch": "@@ -61,7 +61,7 @@ Examples of string representations:\n \n // test harness access\n #[cfg(test)]\n-extern crate extra;\n+extern crate test;\n extern crate serialize;\n \n use std::str;\n@@ -812,8 +812,9 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n+    extern crate test;\n+    use self::test::BenchHarness;\n     use super::Uuid;\n-    use extra::test::BenchHarness;\n \n     #[bench]\n     pub fn create_uuids(bh: &mut BenchHarness) {"}]}