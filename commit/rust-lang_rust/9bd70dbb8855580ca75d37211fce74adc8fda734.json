{"sha": "9bd70dbb8855580ca75d37211fce74adc8fda734", "node_id": "C_kwDOAAsO6NoAKDliZDcwZGJiODg1NTU4MGNhNzVkMzcyMTFmY2U3NGFkYzhmZGE3MzQ", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-08T00:50:30Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-24T20:05:39Z"}, "message": "Make the match checking configurable", "tree": {"sha": "308f91ad4ac3cba0bcc4128d676c093ea32ba154", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/308f91ad4ac3cba0bcc4128d676c093ea32ba154"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bd70dbb8855580ca75d37211fce74adc8fda734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd70dbb8855580ca75d37211fce74adc8fda734", "html_url": "https://github.com/rust-lang/rust/commit/9bd70dbb8855580ca75d37211fce74adc8fda734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bd70dbb8855580ca75d37211fce74adc8fda734/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "173a8e04807dbdcc714d7dec0da331ee86538131", "url": "https://api.github.com/repos/rust-lang/rust/commits/173a8e04807dbdcc714d7dec0da331ee86538131", "html_url": "https://github.com/rust-lang/rust/commit/173a8e04807dbdcc714d7dec0da331ee86538131"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "5716ef71641cc588af1df05bf17cf6e35d80c79f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bd70dbb8855580ca75d37211fce74adc8fda734/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd70dbb8855580ca75d37211fce74adc8fda734/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9bd70dbb8855580ca75d37211fce74adc8fda734", "patch": "@@ -604,7 +604,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move |_| Box::new(matches::Matches::new(msrv)));\n-    store.register_late_pass(move |_| Box::new(manual_let_else::ManualLetElse::new(msrv)));\n+    let matches_for_let_else = conf.matches_for_let_else;\n+    store.register_late_pass(move |_| Box::new(manual_let_else::ManualLetElse::new(msrv, matches_for_let_else)));\n     store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveStruct::new(msrv)));\n     store.register_late_pass(move |_| Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv)));\n     store.register_late_pass(move |_| Box::new(manual_strip::ManualStrip::new(msrv)));"}, {"sha": "13a734818a7ef06bd44e734ff39a6a1ab8a44a23", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9bd70dbb8855580ca75d37211fce74adc8fda734/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd70dbb8855580ca75d37211fce74adc8fda734/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=9bd70dbb8855580ca75d37211fce74adc8fda734", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n+use serde::Deserialize;\n use std::ops::ControlFlow;\n \n declare_clippy_lint! {\n@@ -47,12 +48,16 @@ declare_clippy_lint! {\n \n pub struct ManualLetElse {\n     msrv: Option<RustcVersion>,\n+    matches_behaviour: MatchLintBehaviour,\n }\n \n impl ManualLetElse {\n     #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n-        Self { msrv }\n+    pub fn new(msrv: Option<RustcVersion>, matches_behaviour: MatchLintBehaviour) -> Self {\n+        Self {\n+            msrv,\n+            matches_behaviour,\n+        }\n     }\n }\n \n@@ -89,6 +94,9 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                 }\n             },\n             IfLetOrMatch::Match(_match_expr, arms, source) => {\n+                if self.matches_behaviour == MatchLintBehaviour::Never {\n+                    return;\n+                }\n                 if source != MatchSource::Normal {\n                     return;\n                 }\n@@ -97,6 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                 if arms.len() != 2 {\n                     return;\n                 }\n+                let check_types = self.matches_behaviour == MatchLintBehaviour::WellKnownTypes;\n                 // We iterate over both arms, trying to find one that is an identity,\n                 // one that diverges. Our check needs to work regardless of the order\n                 // of both arms.\n@@ -109,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                     }\n                     if expr_is_simple_identity(arm.pat, arm.body) {\n                         found_identity_arm = true;\n-                    } else if expr_diverges(cx, arm.body) && pat_allowed_for_else(cx, arm.pat) {\n+                    } else if expr_diverges(cx, arm.body) && pat_allowed_for_else(cx, arm.pat, check_types) {\n                         found_diverging_arm = true;\n                     }\n                 }\n@@ -178,7 +187,7 @@ fn expr_diverges(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     .is_some()\n }\n \n-fn pat_allowed_for_else(cx: &LateContext<'_>, pat: &'_ Pat<'_>) -> bool {\n+fn pat_allowed_for_else(cx: &LateContext<'_>, pat: &'_ Pat<'_>, check_types: bool) -> bool {\n     // Check whether the pattern contains any bindings, as the\n     // binding might potentially be used in the body.\n     // TODO: only look for *used* bindings.\n@@ -188,6 +197,11 @@ fn pat_allowed_for_else(cx: &LateContext<'_>, pat: &'_ Pat<'_>) -> bool {\n         return false;\n     }\n \n+    // If we shouldn't check the types, exit early.\n+    if !check_types {\n+        return true;\n+    }\n+\n     // Check whether any possibly \"unknown\" patterns are included,\n     // because users might not know which values some enum has.\n     // Well-known enums are excepted, as we assume people know them.\n@@ -245,3 +259,10 @@ fn expr_is_simple_identity(pat: &'_ Pat<'_>, expr: &'_ Expr<'_>) -> bool {\n     }\n     true\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, Deserialize)]\n+pub enum MatchLintBehaviour {\n+    AllTypes,\n+    WellKnownTypes,\n+    Never,\n+}"}, {"sha": "ef6de7d333d340402a2dbca676e37670a11fb61a", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bd70dbb8855580ca75d37211fce74adc8fda734/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd70dbb8855580ca75d37211fce74adc8fda734/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=9bd70dbb8855580ca75d37211fce74adc8fda734", "patch": "@@ -335,6 +335,12 @@ define_Conf! {\n     ///\n     /// Enables verbose mode. Triggers if there is more than one uppercase char next to each other\n     (upper_case_acronyms_aggressive: bool = false),\n+    /// Lint: MANUAL_LET_ELSE.\n+    ///\n+    /// Whether the matches should be considered by the lint, and whether there should\n+    /// be filtering for common types.\n+    (matches_for_let_else: crate::manual_let_else::MatchLintBehaviour =\n+        crate::manual_let_else::MatchLintBehaviour::WellKnownTypes),\n     /// Lint: _CARGO_COMMON_METADATA.\n     ///\n     /// For internal testing only, ignores the current `publish` settings in the Cargo manifest."}, {"sha": "7db2e11225bd8e1eb788b8b688799fc25c2fcbf5", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bd70dbb8855580ca75d37211fce74adc8fda734/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bd70dbb8855580ca75d37211fce74adc8fda734/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=9bd70dbb8855580ca75d37211fce74adc8fda734", "patch": "@@ -22,6 +22,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            enum-variant-size-threshold\n            large-error-threshold\n            literal-representation-threshold\n+           matches-for-let-else\n            max-fn-params-bools\n            max-include-file-size\n            max-struct-bools"}]}