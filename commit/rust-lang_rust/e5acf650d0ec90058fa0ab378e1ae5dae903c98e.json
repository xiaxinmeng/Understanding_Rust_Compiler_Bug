{"sha": "e5acf650d0ec90058fa0ab378e1ae5dae903c98e", "node_id": "C_kwDOAAsO6NoAKGU1YWNmNjUwZDBlYzkwMDU4ZmEwYWIzNzhlMWFlNWRhZTkwM2M5OGU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T12:30:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T12:30:54Z"}, "message": "move tests", "tree": {"sha": "1e12a9218e653666f9c3618087d041649542450f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e12a9218e653666f9c3618087d041649542450f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5acf650d0ec90058fa0ab378e1ae5dae903c98e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5acf650d0ec90058fa0ab378e1ae5dae903c98e", "html_url": "https://github.com/rust-lang/rust/commit/e5acf650d0ec90058fa0ab378e1ae5dae903c98e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5acf650d0ec90058fa0ab378e1ae5dae903c98e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f8b708aca74cb7316d2f8dfd81feae087473907", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8b708aca74cb7316d2f8dfd81feae087473907", "html_url": "https://github.com/rust-lang/rust/commit/5f8b708aca74cb7316d2f8dfd81feae087473907"}], "stats": {"total": 203, "additions": 60, "deletions": 143}, "files": [{"sha": "6982116522c6ce6fddfc6b7355ed73b391e49a7f", "filename": "crates/hir_def/src/macro_expansion_tests/builtin.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e5acf650d0ec90058fa0ab378e1ae5dae903c98e/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5acf650d0ec90058fa0ab378e1ae5dae903c98e/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin.rs?ref=e5acf650d0ec90058fa0ab378e1ae5dae903c98e", "patch": "@@ -270,3 +270,63 @@ unsafe {\n \"##]],\n     );\n }\n+\n+#[test]\n+fn test_include_bytes_expand() {\n+    check(\n+        r#\"\n+#[rustc_builtin_macro]\n+macro_rules! include_bytes {\n+    ($file:expr) => {{ /* compiler built-in */ }};\n+    ($file:expr,) => {{ /* compiler built-in */ }};\n+}\n+\n+fn main() { include_bytes(\"foo\"); }\n+\"#,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! include_bytes {\n+    ($file:expr) => {{ /* compiler built-in */ }};\n+    ($file:expr,) => {{ /* compiler built-in */ }};\n+}\n+\n+fn main() { include_bytes(\"foo\"); }\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_concat_expand() {\n+    check(\n+        r##\"\n+#[rustc_builtin_macro]\n+macro_rules! concat {}\n+\n+fn main() { concat!(\"foo\", \"r\", 0, r#\"bar\"#, \"\\n\", false); }\n+\"##,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! concat {}\n+\n+fn main() { \"foor0bar\\nfalse\"; }\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_concat_idents_expand() {\n+    check(\n+        r##\"\n+#[rustc_builtin_macro]\n+macro_rules! concat_idents {}\n+\n+fn main() { concat_idents!(foo, bar); }\n+\"##,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! concat_idents {}\n+\n+fn main() { foobar; }\n+\"##]],\n+    );\n+}"}, {"sha": "4b801eb2a154ce5e55e2a8ddc2f0a8150a327175", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 0, "deletions": 143, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/e5acf650d0ec90058fa0ab378e1ae5dae903c98e/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5acf650d0ec90058fa0ab378e1ae5dae903c98e/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=e5acf650d0ec90058fa0ab378e1ae5dae903c98e", "patch": "@@ -565,146 +565,3 @@ fn option_env_expand(\n \n     ExpandResult::ok(Some(ExpandedEager::new(expanded)))\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use std::sync::Arc;\n-\n-    use base_db::{fixture::WithFixture, SourceDatabase};\n-    use expect_test::{expect, Expect};\n-    use syntax::ast::HasName;\n-\n-    use crate::{\n-        name::AsName, test_db::TestDB, AstNode, EagerCallInfo, ExpandTo, MacroCallId,\n-        MacroCallKind, MacroCallLoc,\n-    };\n-\n-    use super::*;\n-\n-    fn expand_builtin_macro(ra_fixture: &str) -> String {\n-        let (db, file_id) = TestDB::with_single_file(ra_fixture);\n-        let parsed = db.parse(file_id);\n-        let mut macro_rules: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(ast::MacroRules::cast).collect();\n-        let mut macro_calls: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(ast::MacroCall::cast).collect();\n-\n-        let ast_id_map = db.ast_id_map(file_id.into());\n-\n-        assert_eq!(macro_rules.len(), 1, \"test must contain exactly 1 `macro_rules!`\");\n-        assert_eq!(macro_calls.len(), 1, \"test must contain exactly 1 macro call\");\n-        let macro_rules = ast::Macro::from(macro_rules.pop().unwrap());\n-        let macro_call = macro_calls.pop().unwrap();\n-\n-        let expander = find_by_name(&macro_rules.name().unwrap().as_name()).unwrap();\n-        let ast_id = AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules));\n-\n-        let krate = CrateId(0);\n-        let file_id = match expander {\n-            Either::Left(expander) => {\n-                // the first one should be a macro_rules\n-                let def = MacroDefId {\n-                    krate: CrateId(0),\n-                    kind: MacroDefKind::BuiltIn(expander, ast_id),\n-                    local_inner: false,\n-                };\n-\n-                let loc = MacroCallLoc {\n-                    def,\n-                    krate,\n-                    eager: None,\n-                    kind: MacroCallKind::FnLike {\n-                        ast_id: AstId::new(file_id.into(), ast_id_map.ast_id(&macro_call)),\n-                        expand_to: ExpandTo::Expr,\n-                    },\n-                };\n-\n-                let id: MacroCallId = db.intern_macro(loc);\n-                id.as_file()\n-            }\n-            Either::Right(expander) => {\n-                // the first one should be a macro_rules\n-                let def = MacroDefId {\n-                    krate,\n-                    kind: MacroDefKind::BuiltInEager(expander, ast_id),\n-                    local_inner: false,\n-                };\n-\n-                let args = macro_call.token_tree().unwrap();\n-                let parsed_args = mbe::syntax_node_to_token_tree(args.syntax()).0;\n-                let call_id = AstId::new(file_id.into(), ast_id_map.ast_id(&macro_call));\n-\n-                let arg_id = db.intern_macro(MacroCallLoc {\n-                    def,\n-                    krate,\n-                    eager: Some(EagerCallInfo {\n-                        arg_or_expansion: Arc::new(parsed_args.clone()),\n-                        included_file: None,\n-                    }),\n-                    kind: MacroCallKind::FnLike { ast_id: call_id, expand_to: ExpandTo::Expr },\n-                });\n-\n-                let expanded = expander.expand(&db, arg_id, &parsed_args).value.unwrap();\n-                let expand_to = crate::ExpandTo::from_call_site(&macro_call);\n-                let loc = MacroCallLoc {\n-                    def,\n-                    krate,\n-                    eager: Some(EagerCallInfo {\n-                        arg_or_expansion: Arc::new(expanded.subtree),\n-                        included_file: expanded.included_file,\n-                    }),\n-                    kind: MacroCallKind::FnLike { ast_id: call_id, expand_to },\n-                };\n-\n-                let id: MacroCallId = db.intern_macro(loc);\n-                id.as_file()\n-            }\n-        };\n-\n-        db.parse_or_expand(file_id).unwrap().to_string()\n-    }\n-\n-    fn check_expansion(ra_fixture: &str, expect: Expect) {\n-        let expansion = expand_builtin_macro(ra_fixture);\n-        expect.assert_eq(&expansion);\n-    }\n-\n-    #[test]\n-    fn test_include_bytes_expand() {\n-        check_expansion(\n-            r#\"\n-            #[rustc_builtin_macro]\n-            macro_rules! include_bytes {\n-                ($file:expr) => {{ /* compiler built-in */ }};\n-                ($file:expr,) => {{ /* compiler built-in */ }};\n-            }\n-            include_bytes(\"foo\");\n-            \"#,\n-            expect![[r#\"b\"\"\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_concat_expand() {\n-        check_expansion(\n-            r##\"\n-            #[rustc_builtin_macro]\n-            macro_rules! concat {}\n-            concat!(\"foo\", \"r\", 0, r#\"bar\"#, \"\\n\", false);\n-            \"##,\n-            expect![[r#\"\"foor0bar\\nfalse\"\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_concat_idents_expand() {\n-        check_expansion(\n-            r##\"\n-            #[rustc_builtin_macro]\n-            macro_rules! concat_idents {}\n-            concat_idents!(foo, bar);\n-            \"##,\n-            expect![[r#\"foobar\"#]],\n-        );\n-    }\n-}"}]}