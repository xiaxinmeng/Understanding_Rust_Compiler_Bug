{"sha": "76b50f14f74dac4d26969517709b5837505bc1d7", "node_id": "C_kwDOAAsO6NoAKDc2YjUwZjE0Zjc0ZGFjNGQyNjk2OTUxNzcwOWI1ODM3NTA1YmMxZDc", "commit": {"author": {"name": "patrick-gu", "email": "55641350+patrick-gu@users.noreply.github.com", "date": "2021-12-20T01:27:24Z"}, "committer": {"name": "patrick-gu", "email": "55641350+patrick-gu@users.noreply.github.com", "date": "2021-12-20T01:28:31Z"}, "message": "Don't say \"a reference to\" for Copy types\n\nThis changes the generate getter assist to not say \"a reference to\" in the documentation stub if the type is Copy, as the getter does not return a reference.", "tree": {"sha": "40f6cdb9542b845590889538f984c283c02b0f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f6cdb9542b845590889538f984c283c02b0f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b50f14f74dac4d26969517709b5837505bc1d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b50f14f74dac4d26969517709b5837505bc1d7", "html_url": "https://github.com/rust-lang/rust/commit/76b50f14f74dac4d26969517709b5837505bc1d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b50f14f74dac4d26969517709b5837505bc1d7/comments", "author": {"login": "patrick-gu", "id": 55641350, "node_id": "MDQ6VXNlcjU1NjQxMzUw", "avatar_url": "https://avatars.githubusercontent.com/u/55641350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick-gu", "html_url": "https://github.com/patrick-gu", "followers_url": "https://api.github.com/users/patrick-gu/followers", "following_url": "https://api.github.com/users/patrick-gu/following{/other_user}", "gists_url": "https://api.github.com/users/patrick-gu/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick-gu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick-gu/subscriptions", "organizations_url": "https://api.github.com/users/patrick-gu/orgs", "repos_url": "https://api.github.com/users/patrick-gu/repos", "events_url": "https://api.github.com/users/patrick-gu/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick-gu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "patrick-gu", "id": 55641350, "node_id": "MDQ6VXNlcjU1NjQxMzUw", "avatar_url": "https://avatars.githubusercontent.com/u/55641350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick-gu", "html_url": "https://github.com/patrick-gu", "followers_url": "https://api.github.com/users/patrick-gu/followers", "following_url": "https://api.github.com/users/patrick-gu/following{/other_user}", "gists_url": "https://api.github.com/users/patrick-gu/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick-gu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick-gu/subscriptions", "organizations_url": "https://api.github.com/users/patrick-gu/orgs", "repos_url": "https://api.github.com/users/patrick-gu/repos", "events_url": "https://api.github.com/users/patrick-gu/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick-gu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b2291f546abc77d24499339a72a89127464b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b2291f546abc77d24499339a72a89127464b95", "html_url": "https://github.com/rust-lang/rust/commit/d9b2291f546abc77d24499339a72a89127464b95"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "653e448cbb0fed0042eee06524551786de0613ba", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76b50f14f74dac4d26969517709b5837505bc1d7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b50f14f74dac4d26969517709b5837505bc1d7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=76b50f14f74dac4d26969517709b5837505bc1d7", "patch": "@@ -112,8 +112,12 @@ pub(crate) fn generate_getter_impl(\n             }\n \n             let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-            let (ty, body) = if mutable {\n-                (format!(\"&mut {}\", field_ty), format!(\"&mut self.{}\", field_name))\n+            let (ty, body, description) = if mutable {\n+                (\n+                    format!(\"&mut {}\", field_ty),\n+                    format!(\"&mut self.{}\", field_name),\n+                    \"a mutable reference to \",\n+                )\n             } else {\n                 let famous_defs = &FamousDefs(&ctx.sema, ctx.sema.scope(field_ty.syntax()).krate());\n                 ctx.sema\n@@ -124,18 +128,25 @@ pub(crate) fn generate_getter_impl(\n                         (\n                             conversion.convert_type(ctx.db()),\n                             conversion.getter(field_name.to_string()),\n+                            if conversion.is_copy() { \"\" } else { \"a reference to \" },\n+                        )\n+                    })\n+                    .unwrap_or_else(|| {\n+                        (\n+                            format!(\"&{}\", field_ty),\n+                            format!(\"&self.{}\", field_name),\n+                            \"a reference to \",\n                         )\n                     })\n-                    .unwrap_or_else(|| (format!(\"&{}\", field_ty), format!(\"&self.{}\", field_name)))\n             };\n \n             format_to!(\n                 buf,\n-                \"    /// Get a {}reference to the {}'s {}.\n+                \"    /// Get {}the {}'s {}.\n     {}fn {}(&{}self) -> {} {{\n         {}\n     }}\",\n-                mutable.then(|| \"mutable \").unwrap_or_default(),\n+                description,\n                 to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \"),\n                 fn_name.trim_end_matches(\"_mut\").replace('_', \" \"),\n                 vis,\n@@ -349,7 +360,7 @@ struct S { foo: $0bool }\n struct S { foo: bool }\n \n impl S {\n-    /// Get a reference to the s's foo.\n+    /// Get the s's foo.\n     fn $0foo(&self) -> bool {\n         self.foo\n     }"}, {"sha": "fd248ad02171f8ed14064c31a710982408085c8f", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76b50f14f74dac4d26969517709b5837505bc1d7/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b50f14f74dac4d26969517709b5837505bc1d7/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=76b50f14f74dac4d26969517709b5837505bc1d7", "patch": "@@ -572,6 +572,10 @@ impl ReferenceConversion {\n             | ReferenceConversionType::Result => format!(\"self.{}.as_ref()\", field_name),\n         }\n     }\n+\n+    pub(crate) fn is_copy(&self) -> bool {\n+        matches!(self.conversion, ReferenceConversionType::Copy)\n+    }\n }\n \n // FIXME: It should return a new hir::Type, but currently constructing new types is too cumbersome"}]}