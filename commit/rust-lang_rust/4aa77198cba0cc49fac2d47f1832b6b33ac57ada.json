{"sha": "4aa77198cba0cc49fac2d47f1832b6b33ac57ada", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYTc3MTk4Y2JhMGNjNDlmYWMyZDQ3ZjE4MzJiNmIzM2FjNTdhZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-08T19:40:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-08T19:40:15Z"}, "message": "auto merge of #6992 : Blei/rust/fix-autoderef-ice, r=catamorphism\n\nRelated to #5062, but doesn't fix that one.", "tree": {"sha": "0bf25960023b1b1d537d278398ad5a7237d0b49c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bf25960023b1b1d537d278398ad5a7237d0b49c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa77198cba0cc49fac2d47f1832b6b33ac57ada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa77198cba0cc49fac2d47f1832b6b33ac57ada", "html_url": "https://github.com/rust-lang/rust/commit/4aa77198cba0cc49fac2d47f1832b6b33ac57ada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59bbbe43350f3fc13ade4e414a5e9bca3907ddb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/59bbbe43350f3fc13ade4e414a5e9bca3907ddb7", "html_url": "https://github.com/rust-lang/rust/commit/59bbbe43350f3fc13ade4e414a5e9bca3907ddb7"}, {"sha": "a99ba1180d16394427fcd0fa74ce6dfff96d5566", "url": "https://api.github.com/repos/rust-lang/rust/commits/a99ba1180d16394427fcd0fa74ce6dfff96d5566", "html_url": "https://github.com/rust-lang/rust/commit/a99ba1180d16394427fcd0fa74ce6dfff96d5566"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "962198e38d5a83db995be2e003a327e2b73f2a99", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4aa77198cba0cc49fac2d47f1832b6b33ac57ada", "patch": "@@ -3044,15 +3044,17 @@ pub fn adjust_ty(cx: ctxt,\n         Some(@AutoDerefRef(ref adj)) => {\n             let mut adjusted_ty = unadjusted_ty;\n \n-            for uint::range(0, adj.autoderefs) |i| {\n-                match ty::deref(cx, adjusted_ty, true) {\n-                    Some(mt) => { adjusted_ty = mt.ty; }\n-                    None => {\n-                        cx.sess.span_bug(\n-                            span,\n-                            fmt!(\"The %uth autoderef failed: %s\",\n-                                 i, ty_to_str(cx,\n-                                              adjusted_ty)));\n+            if (!ty::type_is_error(adjusted_ty)) {\n+                for uint::range(0, adj.autoderefs) |i| {\n+                    match ty::deref(cx, adjusted_ty, true) {\n+                        Some(mt) => { adjusted_ty = mt.ty; }\n+                        None => {\n+                            cx.sess.span_bug(\n+                                span,\n+                                fmt!(\"The %uth autoderef failed: %s\",\n+                                     i, ty_to_str(cx,\n+                                                  adjusted_ty)));\n+                        }\n                     }\n                 }\n             }"}, {"sha": "9cfa0187ab658b1790234d882b6161099bc39bf4", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=4aa77198cba0cc49fac2d47f1832b6b33ac57ada", "patch": "@@ -460,6 +460,10 @@ fn constrain_call(rcx: @mut Rcx,\n     debug!(\"constrain_call(call_expr=%s, implicitly_ref_args=%?)\",\n            call_expr.repr(tcx), implicitly_ref_args);\n     let callee_ty = rcx.resolve_node_type(callee_id);\n+    if ty::type_is_error(callee_ty) {\n+        // Bail, as function type is unknown\n+        return;\n+    }\n     let fn_sig = ty::ty_fn_sig(callee_ty);\n \n     // `callee_region` is the scope representing the time in which the\n@@ -1108,6 +1112,12 @@ pub mod guarantor {\n      -> ExprCategorizationType {\n         let mut ct = ct;\n         let tcx = rcx.fcx.ccx.tcx;\n+\n+        if (ty::type_is_error(ct.ty)) {\n+            ct.cat.pointer = NotPointer;\n+            return ct;\n+        }\n+\n         for uint::range(0, autoderefs) |_| {\n             ct.cat.guarantor = guarantor_of_deref(&ct.cat);\n "}, {"sha": "7993df80b8d1b6a3b4d317cf7be984822d65de39", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=4aa77198cba0cc49fac2d47f1832b6b33ac57ada", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #5062\n+\n+fn main() {\n+    fmt!(\"%?\", None); //~ ERROR cannot determine a type for this expression: unconstrained type\n+}"}, {"sha": "80bd83caf3250ca6e5be06ad8eb0526885da6768", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa77198cba0cc49fac2d47f1832b6b33ac57ada/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=4aa77198cba0cc49fac2d47f1832b6b33ac57ada", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S<'self, T> {\n+    o: &'self Option<T>\n+}\n+\n+fn main() {\n+    S { o: &None }; //~ ERROR cannot determine a type for this expression: unconstrained type\n+}"}]}