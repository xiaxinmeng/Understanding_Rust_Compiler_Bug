{"sha": "1d93b358553f1942214e6800bb3fc68a521abe90", "node_id": "C_kwDOAAsO6NoAKDFkOTNiMzU4NTUzZjE5NDIyMTRlNjgwMGJiM2ZjNjhhNTIxYWJlOTA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-08T15:49:29Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-08T15:49:29Z"}, "message": "Remove overloaded_span argument from `new`, where it is usually redundant with the main span", "tree": {"sha": "b7f1e1eea1e4750f7c4a0d61b302b57dd5bd295f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7f1e1eea1e4750f7c4a0d61b302b57dd5bd295f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d93b358553f1942214e6800bb3fc68a521abe90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d93b358553f1942214e6800bb3fc68a521abe90", "html_url": "https://github.com/rust-lang/rust/commit/1d93b358553f1942214e6800bb3fc68a521abe90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d93b358553f1942214e6800bb3fc68a521abe90/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7a40ddc795a61091b6da4b22b935d82e3c94342", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a40ddc795a61091b6da4b22b935d82e3c94342", "html_url": "https://github.com/rust-lang/rust/commit/a7a40ddc795a61091b6da4b22b935d82e3c94342"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "6f901cf709a2c60c220def4b9a96fc0f014a1112", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=1d93b358553f1942214e6800bb3fc68a521abe90", "patch": "@@ -1708,8 +1708,7 @@ fn receiver_is_valid<'tcx>(\n         return true;\n     }\n \n-    let mut autoderef =\n-        Autoderef::new(infcx, wfcx.param_env, wfcx.body_id, span, receiver_ty, span);\n+    let mut autoderef = Autoderef::new(infcx, wfcx.param_env, wfcx.body_id, span, receiver_ty);\n \n     // The `arbitrary_self_types` feature allows raw pointer receivers like `self: *const Self`.\n     if arbitrary_self_types_enabled {"}, {"sha": "748237a7593a52f5dc7447542fdcedc1c36f0a02", "filename": "compiler/rustc_hir_typeck/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fautoderef.rs?ref=1d93b358553f1942214e6800bb3fc68a521abe90", "patch": "@@ -12,18 +12,7 @@ use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn autoderef(&'a self, span: Span, base_ty: Ty<'tcx>) -> Autoderef<'a, 'tcx> {\n-        self.autoderef_overloaded_span(span, base_ty, span)\n-    }\n-\n-    /// Like `autoderef`, but provides a custom `Span` to use for calls to\n-    /// an overloaded `Deref` operator\n-    pub fn autoderef_overloaded_span(\n-        &'a self,\n-        span: Span,\n-        base_ty: Ty<'tcx>,\n-        overloaded_span: Span,\n-    ) -> Autoderef<'a, 'tcx> {\n-        Autoderef::new(self, self.param_env, self.body_id, span, base_ty, overloaded_span)\n+        Autoderef::new(self, self.param_env, self.body_id, span, base_ty)\n     }\n \n     pub fn try_overloaded_deref("}, {"sha": "a0de38ef856e4c14a768ede48a7e1a2c5c10649b", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=1d93b358553f1942214e6800bb3fc68a521abe90", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // Commit the autoderefs by calling `autoderef` again, but this\n         // time writing the results into the various typeck results.\n         let mut autoderef =\n-            self.autoderef_overloaded_span(self.span, unadjusted_self_ty, self.call_expr.span);\n+            self.autoderef(self.span, unadjusted_self_ty).with_overloaded_span(self.call_expr.span);\n         let Some((ty, n)) = autoderef.nth(pick.autoderefs) else {\n             return self.tcx.ty_error_with_message(\n                 rustc_span::DUMMY_SP,"}, {"sha": "3fcd073f5979300fd1d50713b2f196c4c5c797ad", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=1d93b358553f1942214e6800bb3fc68a521abe90", "patch": "@@ -475,10 +475,9 @@ fn method_autoderef_steps<'tcx>(\n     let (ref infcx, goal, inference_vars) = tcx.infer_ctxt().build_with_canonical(DUMMY_SP, &goal);\n     let ParamEnvAnd { param_env, value: self_ty } = goal;\n \n-    let mut autoderef =\n-        Autoderef::new(infcx, param_env, hir::CRATE_HIR_ID, DUMMY_SP, self_ty, DUMMY_SP)\n-            .include_raw_pointers()\n-            .silence_errors();\n+    let mut autoderef = Autoderef::new(infcx, param_env, hir::CRATE_HIR_ID, DUMMY_SP, self_ty)\n+        .include_raw_pointers()\n+        .silence_errors();\n     let mut reached_raw_pointer = false;\n     let mut steps: Vec<_> = autoderef\n         .by_ref()"}, {"sha": "1a478f02df212b9727166b5d3865b2920c1f72b7", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=1d93b358553f1942214e6800bb3fc68a521abe90", "patch": "@@ -99,12 +99,11 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         body_id: hir::HirId,\n         span: Span,\n         base_ty: Ty<'tcx>,\n-        overloaded_span: Span,\n     ) -> Autoderef<'a, 'tcx> {\n         Autoderef {\n             infcx,\n             span,\n-            overloaded_span,\n+            overloaded_span: span,\n             body_id,\n             param_env,\n             state: AutoderefSnapshot {\n@@ -119,6 +118,10 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         }\n     }\n \n+    pub fn with_overloaded_span(self, overloaded_span: Span) -> Self {\n+        Self { overloaded_span, ..self }\n+    }\n+\n     fn overloaded_deref_ty(&mut self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         debug!(\"overloaded_deref_ty({:?})\", ty);\n "}, {"sha": "aece4ab7922851adfab1fec2fe7f40fb61374421", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d93b358553f1942214e6800bb3fc68a521abe90/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1d93b358553f1942214e6800bb3fc68a521abe90", "patch": "@@ -714,7 +714,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     obligation.cause.body_id,\n                     span,\n                     base_ty,\n-                    span,\n                 );\n                 if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n                     // Re-add the `&`"}]}