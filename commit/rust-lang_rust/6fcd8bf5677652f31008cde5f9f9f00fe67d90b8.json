{"sha": "6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2Q4YmY1Njc3NjUyZjMxMDA4Y2RlNWY5ZjlmMDBmZTY3ZDkwYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-30T08:19:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-30T08:19:38Z"}, "message": "auto merge of #7468 : cmr/rust/great_renaming, r=pcwalton", "tree": {"sha": "c36180ee282c056b99913c12d639cdbb3c4f16fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c36180ee282c056b99913c12d639cdbb3c4f16fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "html_url": "https://github.com/rust-lang/rust/commit/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bb36490d10a9d2613448215f2436f258e7fd28", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bb36490d10a9d2613448215f2436f258e7fd28", "html_url": "https://github.com/rust-lang/rust/commit/b4bb36490d10a9d2613448215f2436f258e7fd28"}, {"sha": "71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b1c6ab60b1279c81024f591ae571c75e4c6d3e", "html_url": "https://github.com/rust-lang/rust/commit/71b1c6ab60b1279c81024f591ae571c75e4c6d3e"}], "stats": {"total": 1946, "additions": 825, "deletions": 1121}, "files": [{"sha": "be9ab863942b1292b02dbd4e401eb66ae55999c8", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -39,15 +39,14 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n use sync;\n use sync::{Mutex, mutex_with_condvars, RWlock, rwlock_with_condvars};\n \n-use core::cast;\n-use core::unstable::sync::UnsafeAtomicRcBox;\n-use core::task;\n-use core::borrow;\n+use std::cast;\n+use std::unstable::sync::UnsafeAtomicRcBox;\n+use std::task;\n+use std::borrow;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signaling.\n pub struct Condvar<'self> {\n@@ -514,14 +513,13 @@ impl<'self, T:Freeze + Send> RWReadMode<'self, T> {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use arc::*;\n \n-    use core::cell::Cell;\n-    use core::comm;\n-    use core::task;\n-    use core::uint;\n+    use std::cell::Cell;\n+    use std::comm;\n+    use std::task;\n+    use std::uint;\n \n     #[test]\n     fn manually_share_arc() {"}, {"sha": "f378384c5645cc39284e606a55ec3b48220f3918", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -34,22 +34,21 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n use list::{MutList, MutCons, MutNil};\n \n-use core::at_vec;\n-use core::cast::{transmute, transmute_mut, transmute_mut_region};\n-use core::cast;\n-use core::ptr;\n-use core::sys;\n-use core::uint;\n-use core::vec;\n-use core::unstable::intrinsics;\n-use core::unstable::intrinsics::{TyDesc};\n+use std::at_vec;\n+use std::cast::{transmute, transmute_mut, transmute_mut_region};\n+use std::cast;\n+use std::ptr;\n+use std::sys;\n+use std::uint;\n+use std::vec;\n+use std::unstable::intrinsics;\n+use std::unstable::intrinsics::{TyDesc};\n \n #[cfg(not(stage0))]\n-use core::unstable::intrinsics::{get_tydesc};\n+use std::unstable::intrinsics::{get_tydesc};\n \n #[cfg(stage0)]\n unsafe fn get_tydesc<T>() -> *TyDesc {"}, {"sha": "a53a22ee831d43cacd5f054160d076ec59bad285", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,9 +10,8 @@\n \n //! Base64 binary-to-text encoding\n \n-use core::prelude::*;\n \n-use core::vec;\n+use std::vec;\n \n /// A trait for converting a value to base64 encoding.\n pub trait ToBase64 {\n@@ -199,7 +198,7 @@ impl<'self> FromBase64 for &'self str {\n      * Convert any base64 encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes.\n      *\n-     * You can use the `from_bytes` function in `core::str`\n+     * You can use the `from_bytes` function in `std::str`\n      * to turn a `[u8]` into a string with characters corresponding to those values.\n      *\n      * # Example\n@@ -210,7 +209,7 @@ impl<'self> FromBase64 for &'self str {\n      * extern mod extra;\n      * use extra::base64::ToBase64;\n      * use extra::base64::FromBase64;\n-     * use core::str;\n+     * use std::str;\n      *\n      * fn main () {\n      *     let hello_str = \"Hello, World\".to_base64();"}, {"sha": "30541f832389a72881d38cb00848464d6add2052", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,12 +10,11 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::cmp;\n-use core::ops;\n-use core::uint;\n-use core::vec;\n+use std::cmp;\n+use std::ops;\n+use std::uint;\n+use std::vec;\n \n struct SmallBitv {\n     /// only the lowest nbits of this value are used. the rest is undefined.\n@@ -863,15 +862,15 @@ impl BitvSet {\n \n #[cfg(test)]\n mod tests {\n-    use std::test::BenchHarness;\n+    use extra::test::BenchHarness;\n \n     use bitv::*;\n     use bitv;\n \n-    use core::uint;\n-    use core::vec;\n-    use core::rand;\n-    use core::rand::Rng;\n+    use std::uint;\n+    use std::vec;\n+    use std::rand;\n+    use std::rand::Rng;\n \n     static bench_bits : uint = 1 << 14;\n "}, {"sha": "c6e7b5b0aa7cef18265e53e8a5689ac6d45d0d3f", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -36,10 +36,9 @@\n  * still held if needed.\n  */\n \n-use core::prelude::*;\n \n-use core::option;\n-use core::ptr;\n+use std::option;\n+use std::ptr;\n \n /**\n  * The type representing a foreign chunk of memory\n@@ -150,8 +149,8 @@ mod tests {\n \n     use c_vec::*;\n \n-    use core::libc::*;\n-    use core::libc;\n+    use std::libc::*;\n+    use std::libc;\n \n     fn malloc(n: size_t) -> CVec<u8> {\n         unsafe {"}, {"sha": "44581efc6f07b2e107594dc719c00db5203d34ba", "filename": "src/libextra/comm.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -16,12 +16,11 @@ Higher level communication abstractions.\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::comm::{GenericChan, GenericSmartChan, GenericPort};\n-use core::comm::{Chan, Port, Selectable, Peekable};\n-use core::comm;\n-use core::pipes;\n+use std::comm::{GenericChan, GenericSmartChan, GenericPort};\n+use std::comm::{Chan, Port, Selectable, Peekable};\n+use std::comm;\n+use std::pipes;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n pub struct DuplexStream<T, U> {"}, {"sha": "26e8b80d8e3c2fb112399847e10929912acf4c0c", "filename": "src/libextra/crypto/digest.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fcrypto%2Fdigest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fcrypto%2Fdigest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fdigest.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::uint;\n-use core::vec;\n+use std::uint;\n+use std::vec;\n \n /**\n  * The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2"}, {"sha": "238e4a4d238d426ffa40520faf901c1ed06667cf", "filename": "src/libextra/crypto/sha1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fcrypto%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fcrypto%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha1.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -22,7 +22,6 @@\n  * the `reset` method.\n  */\n \n-use core::prelude::*;\n \n use digest::Digest;\n \n@@ -241,7 +240,7 @@ impl Digest for Sha1 {\n \n #[cfg(test)]\n mod tests {\n-    use core::vec;\n+    use std::vec;\n \n     use digest::{Digest, DigestUtil};\n     use sha1::Sha1;"}, {"sha": "4b120c7b1184a9fbf2dabc47bbd6438ad89677b7", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::uint;\n+use std::uint;\n \n use digest::Digest;\n "}, {"sha": "1f424b23430c3b1fb0e028f4a3d96bdf4640d3c9", "filename": "src/libextra/dbg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdbg.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,17 +12,17 @@\n \n #[allow(missing_doc)];\n \n-use core::cast::transmute;\n+use std::cast::transmute;\n #[cfg(stage0)]\n use intrinsic::{get_tydesc};\n #[cfg(not(stage0))]\n-use core::unstable::intrinsics::{get_tydesc};\n+use std::unstable::intrinsics::{get_tydesc};\n \n pub mod rustrt {\n     #[cfg(stage0)]\n     use intrinsic::{TyDesc};\n     #[cfg(not(stage0))]\n-    use core::unstable::intrinsics::{TyDesc};\n+    use std::unstable::intrinsics::{TyDesc};\n \n     #[abi = \"cdecl\"]\n     pub extern {"}, {"sha": "f834860a4f7085cb64838900ce670b6abc5f0f51", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n //! A double-ended queue implemented as a circular buffer\n-use core::prelude::*;\n \n-use core::uint;\n-use core::util::replace;\n-use core::vec;\n-use core::cast::transmute;\n+use std::uint;\n+use std::util::replace;\n+use std::vec;\n+use std::cast::transmute;\n \n static initial_capacity: uint = 32u; // 2^5\n \n@@ -254,9 +253,9 @@ fn get<'r, T>(elts: &'r [Option<T>], i: uint) -> &'r T {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use core::cmp::Eq;\n-    use core::kinds::Copy;\n-    use core;\n+    use std::cmp::Eq;\n+    use std::kinds::Copy;\n+    use std::int;\n \n     #[test]\n     fn test_simple() {\n@@ -463,12 +462,12 @@ mod tests {\n     #[test]\n     fn test_iter() {\n         let mut d = Deque::new();\n-        for core::int::range(0,5) |i| {\n+        for int::range(0,5) |i| {\n             d.add_back(i);\n         }\n         assert_eq!(d.iter().collect::<~[&int]>(), ~[&0,&1,&2,&3,&4]);\n \n-        for core::int::range(6,9) |i| {\n+        for int::range(6,9) |i| {\n             d.add_front(i);\n         }\n         assert_eq!(d.iter().collect::<~[&int]>(), ~[&8,&7,&6,&0,&1,&2,&3,&4]);\n@@ -477,12 +476,12 @@ mod tests {\n     #[test]\n     fn test_rev_iter() {\n         let mut d = Deque::new();\n-        for core::int::range(0,5) |i| {\n+        for int::range(0,5) |i| {\n             d.add_back(i);\n         }\n         assert_eq!(d.rev_iter().collect::<~[&int]>(), ~[&4,&3,&2,&1,&0]);\n \n-        for core::int::range(6,9) |i| {\n+        for int::range(6,9) |i| {\n             d.add_front(i);\n         }\n         assert_eq!(d.rev_iter().collect::<~[&int]>(), ~[&4,&3,&2,&1,&0,&6,&7,&8]);"}, {"sha": "e7dcb0fd7cee4cafa5e357eb16145152d82ae18c", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -18,9 +18,8 @@ Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n \n */\n \n-use core::prelude::*;\n \n-use core::managed;\n+use std::managed;\n \n pub type DListLink<T> = Option<@mut DListNode<T>>;\n \n@@ -522,7 +521,6 @@ impl<T:Copy> DList<T> {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use super::*;\n "}, {"sha": "c79b012cfc5b566212b2cd9144cfcfa96ce6e953", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,9 +10,8 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::str;\n+use std::str;\n \n // Simple Extensible Binary Markup Language (ebml) reader and writer on a\n // cursor model. See the specification here:\n@@ -94,18 +93,18 @@ pub mod reader {\n \n     use serialize;\n \n-    use core::cast::transmute;\n-    use core::int;\n-    use core::io;\n-    use core::option::{None, Option, Some};\n+    use std::cast::transmute;\n+    use std::int;\n+    use std::io;\n+    use std::option::{None, Option, Some};\n \n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"x86_64\")]\n-    use core::ptr::offset;\n+    use std::ptr::offset;\n \n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"x86_64\")]\n-    use core::unstable::intrinsics::bswap32;\n+    use std::unstable::intrinsics::bswap32;\n \n     // ebml reading\n \n@@ -378,7 +377,7 @@ pub mod reader {\n         fn read_u8 (&mut self) -> u8  { doc_as_u8 (self.next_doc(EsU8 )) }\n         fn read_uint(&mut self) -> uint {\n             let v = doc_as_u64(self.next_doc(EsUint));\n-            if v > (::core::uint::max_value as u64) {\n+            if v > (::std::uint::max_value as u64) {\n                 fail!(\"uint %? too large for this architecture\", v);\n             }\n             v as uint\n@@ -611,8 +610,8 @@ pub mod reader {\n pub mod writer {\n     use super::*;\n \n-    use core::cast;\n-    use core::io;\n+    use std::cast;\n+    use std::io;\n \n     // ebml writing\n     pub struct Encoder {\n@@ -957,8 +956,8 @@ mod tests {\n     use serialize::Encodable;\n     use serialize;\n \n-    use core::io;\n-    use core::option::{None, Option, Some};\n+    use std::io;\n+    use std::option::{None, Option, Some};\n \n     #[test]\n     fn test_option_int() {"}, {"sha": "dae1487092ba01151ce7ee69c73bc0c093512514", "filename": "src/libextra/extra.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fextra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fextra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fextra.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -32,13 +32,9 @@ Rust extras are part of the standard Rust distribution.\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-#[no_std];\n+use std::str::{StrSlice, OwnedStr};\n \n-extern mod core(name = \"std\", vers = \"0.7-pre\");\n-\n-use core::str::{StrSlice, OwnedStr};\n-\n-pub use core::os;\n+pub use std::os;\n \n pub mod uv_ll;\n \n@@ -135,21 +131,16 @@ pub mod serialize;\n // 'extra' so that macro-expanded references to extra::serialize and such\n // can be resolved within libextra.\n #[doc(hidden)]\n-pub mod std {\n+pub mod extra {\n     pub use serialize;\n     pub use test;\n \n     // For bootstrapping.\n-    pub use core::clone;\n-    pub use core::condition;\n-    pub use core::cmp;\n-    pub use core::sys;\n-    pub use core::unstable;\n-    pub use core::str;\n-    pub use core::os;\n-}\n-#[doc(hidden)]\n-pub mod extra {\n-    pub use serialize;\n-    pub use test;\n+    pub use std::clone;\n+    pub use std::condition;\n+    pub use std::cmp;\n+    pub use std::sys;\n+    pub use std::unstable;\n+    pub use std::str;\n+    pub use std::os;\n }"}, {"sha": "5367da2fa8d4feb93a0f14be563bbfef0d423c8e", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -57,14 +57,14 @@ For more complicated uses (e.g. if one needs to pause iteration and\n resume it later), a `FileInput` instance can be constructed via the\n `from_vec`, `from_vec_raw` and `from_args` functions.\n \n-Once created, the `each_line` (from the `core::io::ReaderUtil` trait)\n+Once created, the `each_line` (from the `std::io::ReaderUtil` trait)\n and `each_line_state` methods allow one to iterate on the lines; the\n latter provides more information about the position within the\n iteration to the caller.\n \n It is possible (and safe) to skip lines and files using the\n `read_line` and `next_file` methods. Also, `FileInput` implements\n-`core::io::Reader`, and the state will be updated correctly while\n+`std::io::Reader`, and the state will be updated correctly while\n using any of those methods.\n \n E.g. the following program reads until an empty line, pauses for user\n@@ -96,12 +96,11 @@ total line count).\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::io::ReaderUtil;\n-use core::io;\n-use core::os;\n-use core::vec;\n+use std::io::ReaderUtil;\n+use std::io;\n+use std::os;\n+use std::vec;\n \n /**\n A summary of the internal state of a `FileInput` object. `line_num`\n@@ -410,13 +409,12 @@ pub fn input_vec_state(files: ~[Option<Path>],\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use super::{FileInput, pathify, input_vec, input_vec_state};\n \n-    use core::io;\n-    use core::uint;\n-    use core::vec;\n+    use std::io;\n+    use std::uint;\n+    use std::vec;\n \n     fn make_file(path : &Path, contents: &[~str]) {\n         let file = io::file_writer(path, [io::Create, io::Truncate]).get();"}, {"sha": "92f9f834f52dada5f844bdc21053d8147c7d047a", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -16,12 +16,12 @@ Simple compression\n \n #[allow(missing_doc)];\n \n-use core::libc::{c_void, size_t, c_int};\n-use core::libc;\n-use core::vec;\n+use std::libc::{c_void, size_t, c_int};\n+use std::libc;\n+use std::vec;\n \n pub mod rustrt {\n-    use core::libc::{c_int, c_void, size_t};\n+    use std::libc::{c_int, c_void, size_t};\n \n     #[link_name = \"rustrt\"]\n     pub extern {\n@@ -83,9 +83,8 @@ pub fn inflate_bytes(bytes: &[u8]) -> ~[u8] {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use core::rand;\n-    use core::rand::RngUtil;\n-    use core::prelude::*;\n+    use std::rand;\n+    use std::rand::RngUtil;\n \n     #[test]\n     #[allow(non_implicitly_copyable_typarams)]"}, {"sha": "e8bdc951ca4e789f24ad23b4b1b92e31c791bdef", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -49,14 +49,13 @@ block the scheduler thread, so will their pipes.\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n // The basic send/recv interface FlatChan and PortChan will implement\n-use core::io;\n-use core::comm::GenericChan;\n-use core::comm::GenericPort;\n-use core::sys::size_of;\n-use core::vec;\n+use std::io;\n+use std::comm::GenericChan;\n+use std::comm::GenericPort;\n+use std::sys::size_of;\n+use std::vec;\n \n /**\n A FlatPort, consisting of a `BytePort` that receives byte vectors,\n@@ -95,9 +94,9 @@ pub mod serial {\n     use flatpipes::bytepipes::{PipeBytePort, PipeByteChan};\n     use flatpipes::{FlatPort, FlatChan};\n \n-    use core::io::{Reader, Writer};\n-    use core::comm::{Port, Chan};\n-    use core::comm;\n+    use std::io::{Reader, Writer};\n+    use std::comm::{Port, Chan};\n+    use std::comm;\n \n     pub type ReaderPort<T, R> = FlatPort<\n         T, DeserializingUnflattener<DefaultDecoder, T>,\n@@ -172,16 +171,15 @@ POD are not equivelant.\n \n */\n pub mod pod {\n-    use core::prelude::*;\n \n     use flatpipes::flatteners::{PodUnflattener, PodFlattener};\n     use flatpipes::bytepipes::{ReaderBytePort, WriterByteChan};\n     use flatpipes::bytepipes::{PipeBytePort, PipeByteChan};\n     use flatpipes::{FlatPort, FlatChan};\n \n-    use core::io::{Reader, Writer};\n-    use core::comm::{Port, Chan};\n-    use core::comm;\n+    use std::io::{Reader, Writer};\n+    use std::comm::{Port, Chan};\n+    use std::comm;\n \n     pub type ReaderPort<T, R> =\n         FlatPort<T, PodUnflattener<T>, ReaderBytePort<R>>;\n@@ -337,20 +335,19 @@ impl<T,F:Flattener<T>,C:ByteChan> FlatChan<T, F, C> {\n \n \n pub mod flatteners {\n-    use core::prelude::*;\n \n     use ebml;\n     use flatpipes::{Flattener, Unflattener};\n     use io_util::BufReader;\n     use json;\n     use serialize::{Encoder, Decoder, Encodable, Decodable};\n \n-    use core::cast;\n-    use core::io::{Writer, Reader, ReaderUtil};\n-    use core::io;\n-    use core::ptr;\n-    use core::sys::size_of;\n-    use core::vec;\n+    use std::cast;\n+    use std::io::{Writer, Reader, ReaderUtil};\n+    use std::io;\n+    use std::ptr;\n+    use std::sys::size_of;\n+    use std::vec;\n \n     // FIXME #4074: Copy + Send != POD\n     pub struct PodUnflattener<T> {\n@@ -509,13 +506,12 @@ pub mod flatteners {\n }\n \n pub mod bytepipes {\n-    use core::prelude::*;\n \n     use flatpipes::{ByteChan, BytePort};\n \n-    use core::comm::{Port, Chan};\n-    use core::comm;\n-    use core::io::{Writer, Reader, ReaderUtil};\n+    use std::comm::{Port, Chan};\n+    use std::comm;\n+    use std::io::{Writer, Reader, ReaderUtil};\n \n     pub struct ReaderBytePort<R> {\n         reader: R\n@@ -583,12 +579,12 @@ pub mod bytepipes {\n     impl BytePort for PipeBytePort {\n         fn try_recv(&self, count: uint) -> Option<~[u8]> {\n             if self.buf.len() >= count {\n-                let mut bytes = ::core::util::replace(&mut *self.buf, ~[]);\n+                let mut bytes = ::std::util::replace(&mut *self.buf, ~[]);\n                 *self.buf = bytes.slice(count, bytes.len()).to_owned();\n                 bytes.truncate(count);\n                 return Some(bytes);\n             } else if !self.buf.is_empty() {\n-                let mut bytes = ::core::util::replace(&mut *self.buf, ~[]);\n+                let mut bytes = ::std::util::replace(&mut *self.buf, ~[]);\n                 assert!(count > bytes.len());\n                 match self.try_recv(count - bytes.len()) {\n                     Some(rest) => {\n@@ -637,7 +633,6 @@ pub mod bytepipes {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use flatpipes::{Flattener, Unflattener};\n     use flatpipes::bytepipes::*;\n@@ -647,11 +642,11 @@ mod test {\n     use flatpipes::{BytePort, FlatChan, FlatPort};\n     use net::tcp::TcpSocketBuf;\n \n-    use core::comm;\n-    use core::int;\n-    use core::io::BytesWriter;\n-    use core::result;\n-    use core::task;\n+    use std::comm;\n+    use std::int;\n+    use std::io::BytesWriter;\n+    use std::result;\n+    use std::task;\n \n     #[test]\n     #[ignore(reason = \"ebml failure\")]\n@@ -772,7 +767,7 @@ mod test {\n         writer_chan: WriterChanFactory<F>,\n         port: uint) {\n \n-        use core::cell::Cell;\n+        use std::cell::Cell;\n         use net::ip;\n         use net::tcp;\n         use uv;\n@@ -871,17 +866,16 @@ mod test {\n     // Tests that the different backends behave the same when the\n     // binary streaming protocol is broken\n     mod broken_protocol {\n-        use core::prelude::*;\n \n         use flatpipes::{BytePort, FlatPort};\n         use flatpipes::flatteners::PodUnflattener;\n         use flatpipes::pod;\n         use io_util::BufReader;\n \n-        use core::comm;\n-        use core::io;\n-        use core::sys;\n-        use core::task;\n+        use std::comm;\n+        use std::io;\n+        use std::sys;\n+        use std::task;\n \n         type PortLoader<P> =\n             ~fn(~[u8]) -> FlatPort<int, PodUnflattener<int>, P>;"}, {"sha": "4461a4dba5fd4d78291181a7fc7bd6b07d1375bb", "filename": "src/libextra/fun_treemap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffun_treemap.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -19,10 +19,9 @@\n  * of features.\n  */\n \n-use core::prelude::*;\n \n-use core::cmp::{Eq, Ord};\n-use core::option::{Some, None};\n+use std::cmp::{Eq, Ord};\n+use std::option::{Some, None};\n \n pub type Treemap<K, V> = @TreeNode<K, V>;\n "}, {"sha": "3ef71e1731b2eb363646f9bc8d2f8539daad44fe", "filename": "src/libextra/future.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -25,13 +25,12 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::cast;\n-use core::cell::Cell;\n-use core::comm::{PortOne, oneshot, send_one, recv_one};\n-use core::task;\n-use core::util::replace;\n+use std::cast;\n+use std::cell::Cell;\n+use std::comm::{PortOne, oneshot, send_one, recv_one};\n+use std::task;\n+use std::util::replace;\n \n #[doc = \"The future type\"]\n pub struct Future<A> {\n@@ -151,9 +150,9 @@ pub fn spawn<A:Send>(blk: ~fn() -> A) -> Future<A> {\n mod test {\n     use future::*;\n \n-    use core::cell::Cell;\n-    use core::comm::{oneshot, send_one};\n-    use core::task;\n+    use std::cell::Cell;\n+    use std::comm::{oneshot, send_one};\n+    use std::task;\n \n     #[test]\n     fn test_from_value() {"}, {"sha": "21fe676ef7929c00e64ad722c3183e8b45facaef", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -81,14 +81,13 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::cmp::Eq;\n-use core::result::{Err, Ok};\n-use core::result;\n-use core::option::{Some, None};\n-use core::str;\n-use core::vec;\n+use std::cmp::Eq;\n+use std::result::{Err, Ok};\n+use std::result;\n+use std::option::{Some, None};\n+use std::str;\n+use std::vec;\n \n #[deriving(Eq)]\n pub enum Name {\n@@ -466,8 +465,8 @@ pub mod groups {\n     use getopts::{HasArg, Long, Maybe, Multi, No, Occur, Opt, Optional, Req};\n     use getopts::{Short, Yes};\n \n-    use core::str;\n-    use core::vec;\n+    use std::str;\n+    use std::vec;\n \n     /** one group of options, e.g., both -h and --help, along with\n      * their shared description and properties\n@@ -681,8 +680,8 @@ mod tests {\n     use getopts::groups::OptGroup;\n     use getopts::*;\n \n-    use core::result::{Err, Ok};\n-    use core::result;\n+    use std::result::{Err, Ok};\n+    use std::result;\n \n     fn check_fail_type(f: Fail_, ft: FailType) {\n         match f {"}, {"sha": "afefca8ae65bd4d16cb007b645c414d769da9031", "filename": "src/libextra/io_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fio_util.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::io::{Reader, BytesReader};\n-use core::io;\n-use core::cast;\n+use std::io::{Reader, BytesReader};\n+use std::io;\n+use std::cast;\n \n /// An implementation of the io::Reader interface which reads a buffer of bytes\n pub struct BufReader {\n@@ -31,7 +31,7 @@ impl BufReader {\n \n     fn as_bytes_reader<A>(&self, f: &fn(&BytesReader) -> A) -> A {\n         // XXX FIXME(#5723)\n-        let bytes = ::core::util::id::<&[u8]>(self.buf);\n+        let bytes = ::std::util::id::<&[u8]>(self.buf);\n         let bytes: &'static [u8] = unsafe { cast::transmute(bytes) };\n         // Recreating the BytesReader state every call since\n         // I can't get the borrowing to work correctly"}, {"sha": "210921aa3d7624211b228ff3d03e3916e8c7b6cb", "filename": "src/libextra/json.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -16,16 +16,15 @@\n \n //! json serialization\n \n-use core::prelude::*;\n \n-use core::char;\n-use core::float;\n-use core::hashmap::HashMap;\n-use core::io::{WriterUtil, ReaderUtil};\n-use core::io;\n-use core::str;\n-use core::to_str;\n-use core::vec;\n+use std::char;\n+use std::float;\n+use std::hashmap::HashMap;\n+use std::io::{WriterUtil, ReaderUtil};\n+use std::io;\n+use std::str;\n+use std::to_str;\n+use std::vec;\n \n use serialize::Encodable;\n use serialize;\n@@ -1356,15 +1355,14 @@ impl to_str::ToStr for Error {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use super::*;\n \n-    use core::hashmap::HashMap;\n-    use core::io;\n-    use core::result;\n+    use std::hashmap::HashMap;\n+    use std::io;\n+    use std::result;\n \n-    use std::serialize::Decodable;\n+    use extra::serialize::Decodable;\n \n     #[deriving(Eq, Encodable, Decodable)]\n     enum Animal {"}, {"sha": "86b01cf157d89783a01867523ada89ab7f92062f", "filename": "src/libextra/list.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flist.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! A standard, garbage-collected linked list.\n \n-use core::prelude::*;\n \n \n #[deriving(Eq)]\n@@ -181,7 +180,7 @@ mod tests {\n     use list::*;\n     use list;\n \n-    use core::option;\n+    use std::option;\n \n     #[test]\n     fn test_is_empty() {"}, {"sha": "6b08fea580f92e32078faba33445c7db741438e9", "filename": "src/libextra/md4.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::uint;\n-use core::vec;\n+use std::uint;\n+use std::vec;\n \n struct Quad {\n     a: u32,"}, {"sha": "d18aac684813b0a5242c78c1fcae6f55f512ac26", "filename": "src/libextra/net_ip.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_ip.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,13 +12,12 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::libc;\n-use core::comm::{stream, SharedChan};\n-use core::ptr;\n-use core::result;\n-use core::str;\n+use std::libc;\n+use std::comm::{stream, SharedChan};\n+use std::ptr;\n+use std::result;\n+use std::str;\n \n use iotask = uv::iotask::IoTask;\n use interact = uv::iotask::interact;\n@@ -149,16 +148,15 @@ pub fn get_addr(node: &str, iotask: &iotask)\n }\n \n pub mod v4 {\n-    use core::prelude::*;\n \n     use net::ip::{IpAddr, Ipv4, ParseAddrErr};\n     use uv::ll;\n     use uv_ip4_addr = uv::ll::ip4_addr;\n     use uv_ip4_name = uv::ll::ip4_name;\n \n-    use core::cast::transmute;\n-    use core::result;\n-    use core::uint;\n+    use std::cast::transmute;\n+    use std::result;\n+    use std::uint;\n \n     /**\n      * Convert a str to `ip_addr`\n@@ -248,13 +246,12 @@ pub mod v4 {\n     }\n }\n pub mod v6 {\n-    use core::prelude::*;\n \n     use net::ip::{IpAddr, Ipv6, ParseAddrErr};\n     use uv_ip6_addr = uv::ll::ip6_addr;\n     use uv_ip6_name = uv::ll::ip6_name;\n \n-    use core::result;\n+    use std::result;\n \n     /**\n      * Convert a str to `ip_addr`\n@@ -371,7 +368,7 @@ mod test {\n     use net_ip::v6;\n     use uv;\n \n-    use core::result;\n+    use std::result;\n \n     #[test]\n     fn test_ip_ipv4_parse_and_format_ip() {"}, {"sha": "6a22950ec04b0ec9acbdfeaf1ce0aed8d94be17e", "filename": "src/libextra/net_tcp.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_tcp.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -13,7 +13,6 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n use future;\n use future_spawn = future::spawn;\n@@ -22,18 +21,18 @@ use uv;\n use uv::iotask;\n use uv::iotask::IoTask;\n \n-use core::io;\n-use core::libc::size_t;\n-use core::libc;\n-use core::comm::{stream, Port, SharedChan};\n-use core::ptr;\n-use core::result::{Result};\n-use core::result;\n-use core::uint;\n-use core::vec;\n+use std::io;\n+use std::libc::size_t;\n+use std::libc;\n+use std::comm::{stream, Port, SharedChan};\n+use std::ptr;\n+use std::result::{Result};\n+use std::result;\n+use std::uint;\n+use std::vec;\n \n pub mod rustrt {\n-    use core::libc;\n+    use std::libc;\n \n     #[nolink]\n     pub extern {\n@@ -360,7 +359,7 @@ pub fn write_future(sock: &TcpSocket, raw_write_data: ~[u8])\n  * # Returns\n  *\n  * * A `Result` instance that will either contain a\n- * `core::comm::Port<Result<~[u8], TcpErrData>>` that the user can read\n+ * `std::comm::Port<Result<~[u8], TcpErrData>>` that the user can read\n  * (and * optionally, loop on) from until `read_stop` is called, or a\n  * `TcpErrData` record\n  */\n@@ -619,7 +618,7 @@ pub fn accept(new_conn: TcpNewConnection)\n  * callback's arguments are:\n  *     * `new_conn` - an opaque type that can be passed to\n  *     `net::tcp::accept` in order to be converted to a `TcpSocket`.\n- *     * `kill_ch` - channel of type `core::comm::Chan<Option<tcp_err_data>>`.\n+ *     * `kill_ch` - channel of type `std::comm::Chan<Option<tcp_err_data>>`.\n  *     this channel can be used to send a message to cause `listen` to begin\n  *     closing the underlying libuv data structures.\n  *\n@@ -683,7 +682,7 @@ fn listen_common(host_ip: ip::IpAddr,\n     // will defeat a move sigil, as is done to the host_ip\n     // arg above.. this same pattern works w/o complaint in\n     // tcp::connect (because the iotask::interact cb isn't\n-    // nested within a core::comm::listen block)\n+    // nested within a std::comm::listen block)\n     let loc_ip = copy(host_ip);\n     do iotask::interact(iotask) |loop_ptr| {\n         unsafe {\n@@ -1429,7 +1428,6 @@ struct TcpBufferedSocketData {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use net::ip;\n     use net::tcp::{GenericListenErr, TcpConnectErrData, TcpListenErrData};\n@@ -1438,12 +1436,12 @@ mod test {\n     use uv::iotask::IoTask;\n     use uv;\n \n-    use core::cell::Cell;\n-    use core::comm::{stream, SharedChan};\n-    use core::io;\n-    use core::result;\n-    use core::str;\n-    use core::task;\n+    use std::cell::Cell;\n+    use std::comm::{stream, SharedChan};\n+    use std::io;\n+    use std::result;\n+    use std::str;\n+    use std::task;\n \n     // FIXME don't run on fbsd or linux 32 bit (#2064)\n     #[cfg(target_os=\"win32\")]\n@@ -1745,7 +1743,7 @@ mod test {\n     }\n \n     pub fn impl_tcp_socket_impl_reader_handles_eof() {\n-        use core::io::{Reader,ReaderUtil};\n+        use std::io::{Reader,ReaderUtil};\n \n         let hl_loop = &uv::global_loop::get();\n         let server_ip = \"127.0.0.1\";"}, {"sha": "9ac58efe79300020994b12bcefc74862432e76fc", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,14 +12,13 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::cmp::Eq;\n-use core::io::{Reader, ReaderUtil};\n-use core::io;\n-use core::hashmap::HashMap;\n-use core::to_bytes;\n-use core::uint;\n+use std::cmp::Eq;\n+use std::io::{Reader, ReaderUtil};\n+use std::io;\n+use std::hashmap::HashMap;\n+use std::to_bytes;\n+use std::uint;\n \n #[deriving(Clone, Eq)]\n struct Url {\n@@ -803,7 +802,7 @@ mod tests {\n \n     use net_url::*;\n \n-    use core::hashmap::HashMap;\n+    use std::hashmap::HashMap;\n \n     #[test]\n     fn test_url_parse() {"}, {"sha": "fd61c4f6bfc6c8e8829fec91d46f773e1efcbed4", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -18,13 +18,12 @@ A BigInt is a combination of BigUint and Sign.\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n-use core::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n-use core::int;\n-use core::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix, Orderable};\n-use core::str;\n-use core::uint;\n-use core::vec;\n+use std::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n+use std::int;\n+use std::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix, Orderable};\n+use std::str;\n+use std::uint;\n+use std::vec;\n \n /**\n A BigDigit is a BigUint's composing element.\n@@ -1148,16 +1147,15 @@ impl BigInt {\n \n #[cfg(test)]\n mod biguint_tests {\n-    use core::prelude::*;\n \n     use super::*;\n \n-    use core::cmp::{Less, Equal, Greater};\n-    use core::int;\n-    use core::num::{IntConvertible, Zero, One, FromStrRadix};\n-    use core::str;\n-    use core::uint;\n-    use core::vec;\n+    use std::cmp::{Less, Equal, Greater};\n+    use std::int;\n+    use std::num::{IntConvertible, Zero, One, FromStrRadix};\n+    use std::str;\n+    use std::uint;\n+    use std::vec;\n \n     #[test]\n     fn test_from_slice() {\n@@ -1623,15 +1621,14 @@ mod biguint_tests {\n \n #[cfg(test)]\n mod bigint_tests {\n-    use core::prelude::*;\n \n     use super::*;\n \n-    use core::cmp::{Less, Equal, Greater};\n-    use core::int;\n-    use core::num::{IntConvertible, Zero, One, FromStrRadix};\n-    use core::uint;\n-    use core::vec;\n+    use std::cmp::{Less, Equal, Greater};\n+    use std::int;\n+    use std::num::{IntConvertible, Zero, One, FromStrRadix};\n+    use std::uint;\n+    use std::vec;\n \n     #[test]\n     fn test_from_biguint() {"}, {"sha": "915523443fbc3dc6f59c0f6a169675c51c95dd3d", "filename": "src/libextra/num/complex.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fcomplex.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -11,9 +11,8 @@\n \n //! Complex numbers.\n \n-use core::prelude::*;\n \n-use core::num::{Zero,One,ToStrRadix};\n+use std::num::{Zero,One,ToStrRadix};\n \n // FIXME #1284: handle complex NaN & infinity etc. This\n // probably doesn't map to C's _Complex correctly.\n@@ -193,7 +192,7 @@ impl<T: ToStrRadix + Num + Ord> ToStrRadix for Cmplx<T> {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use core::num::{Zero,One,Real};\n+    use std::num::{Zero,One,Real};\n \n     pub static _0_0i : Complex = Cmplx { re: 0f, im: 0f };\n     pub static _1_0i : Complex = Cmplx { re: 1f, im: 0f };\n@@ -287,7 +286,7 @@ mod test {\n \n     mod arith {\n         use super::*;\n-        use core::num::Zero;\n+        use std::num::Zero;\n \n         #[test]\n         fn test_add() {"}, {"sha": "6733599d1ea27811b21a421c0702c007a58fa3d4", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,11 +10,10 @@\n \n //! Rational numbers\n \n-use core::prelude::*;\n \n-use core::cmp;\n-use core::from_str::FromStr;\n-use core::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n+use std::cmp;\n+use std::from_str::FromStr;\n+use std::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n use super::bigint::BigInt;\n \n /// Represents the ratio between 2 numbers.\n@@ -277,11 +276,10 @@ impl<T: FromStrRadix + Clone + Integer + Ord>\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use super::*;\n-    use core::num::{Zero,One,FromStrRadix,IntConvertible};\n-    use core::from_str::FromStr;\n+    use std::num::{Zero,One,FromStrRadix,IntConvertible};\n+    use std::from_str::FromStr;\n \n     pub static _0 : Rational = Ratio { numer: 0, denom: 1};\n     pub static _1 : Rational = Ratio { numer: 1, denom: 1};"}, {"sha": "665633eedf856cc3997f7283f36a6b10714ab6ad", "filename": "src/libextra/par.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::cast;\n-use core::ptr;\n-use core::sys;\n-use core::uint;\n-use core::vec;\n+use std::cast;\n+use std::ptr;\n+use std::sys;\n+use std::uint;\n+use std::vec;\n use future_spawn = future::spawn;\n \n /**"}, {"sha": "4c1163f3d50c77e0dbaa1807b269218ac757585f", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,11 +12,10 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::unstable::intrinsics::{move_val_init, init};\n-use core::util::{replace, swap};\n-use core::vec;\n+use std::unstable::intrinsics::{move_val_init, init};\n+use std::util::{replace, swap};\n+use std::vec;\n \n /// A priority queue implemented with a binary heap\n pub struct PriorityQueue<T> {"}, {"sha": "86080b343c78b4c1b3deb5431abcf32bfcb3ccd8", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -21,13 +21,12 @@ cycle cannot be created with `Rc<T>` because there is no way to modify it after\n \n */\n \n-use core::prelude::*;\n \n-use core::cast;\n-use core::libc::{c_void, size_t, malloc, free};\n-use core::ptr;\n-use core::sys;\n-use core::unstable::intrinsics;\n+use std::cast;\n+use std::libc::{c_void, size_t, malloc, free};\n+use std::ptr;\n+use std::sys;\n+use std::unstable::intrinsics;\n \n struct RcBox<T> {\n     value: T,\n@@ -104,7 +103,7 @@ impl<T: DeepClone> DeepClone for Rc<T> {\n #[cfg(test)]\n mod test_rc {\n     use super::*;\n-    use core::cell::Cell;\n+    use std::cell::Cell;\n \n     #[test]\n     fn test_clone() {"}, {"sha": "693e3ecb53fb67fb07902eb42f0fedbb1b3b6cba", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -11,14 +11,13 @@\n // FIXME #3921. This is unsafe because linenoise uses global mutable\n // state without mutexes.\n \n-use core::prelude::*;\n \n-use core::libc::{c_char, c_int};\n-use core::local_data;\n-use core::str;\n+use std::libc::{c_char, c_int};\n+use std::local_data;\n+use std::str;\n \n pub mod rustrt {\n-    use core::libc::{c_char, c_int};\n+    use std::libc::{c_char, c_int};\n \n     pub extern {\n         pub unsafe fn linenoise(prompt: *c_char) -> *c_char;"}, {"sha": "8374c1a86e31da4d4b4463b5aee346a672b5b9ec", "filename": "src/libextra/rope.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -35,11 +35,10 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::uint;\n-use core::vec;\n-use core::str;\n+use std::uint;\n+use std::vec;\n+use std::str;\n \n /// The type of ropes.\n pub type Rope = node::Root;\n@@ -447,7 +446,6 @@ pub fn loop_leaves(rope: Rope, it: &fn(node::Leaf) -> bool) -> bool{\n \n pub mod iterator {\n     pub mod leaf {\n-        use core::prelude::*;\n \n         use rope::{Rope, node};\n \n@@ -462,7 +460,6 @@ pub mod iterator {\n         }\n     }\n     pub mod char {\n-        use core::prelude::*;\n \n         use rope::{Rope, node};\n \n@@ -558,13 +555,12 @@ pub fn char_at(rope: Rope, pos: uint) -> char {\n  Section: Implementation\n */\n pub mod node {\n-    use core::prelude::*;\n \n     use rope::node;\n \n-    use core::cast;\n-    use core::uint;\n-    use core::vec;\n+    use std::cast;\n+    use std::uint;\n+    use std::vec;\n \n     /// Implementation of type `rope`\n     pub enum Root {\n@@ -1141,11 +1137,10 @@ pub mod node {\n     }\n \n     pub mod leaf_iterator {\n-        use core::prelude::*;\n \n         use rope::node::{Concat, Leaf, Node, height};\n \n-        use core::vec;\n+        use std::vec;\n \n         pub struct T {\n             stack: ~[@Node],\n@@ -1184,7 +1179,6 @@ pub mod node {\n     }\n \n     pub mod char_iterator {\n-        use core::prelude::*;\n \n         use rope::node::{Leaf, Node};\n         use rope::node::leaf_iterator;\n@@ -1267,12 +1261,11 @@ pub mod node {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use rope::*;\n \n-    use core::uint;\n-    use core::vec;\n+    use std::uint;\n+    use std::vec;\n \n     //Utility function, used for sanity check\n     fn rope_to_string(r: Rope) -> ~str {"}, {"sha": "6361de1271934e240e1942e63cd3eaa69f4b8eb6", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,15 +12,14 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n-\n-use core::char;\n-use core::cmp;\n-use core::io::{ReaderUtil};\n-use core::io;\n-use core::option::{Option, Some, None};\n-use core::to_str::ToStr;\n-use core::uint;\n+\n+use std::char;\n+use std::cmp;\n+use std::io::{ReaderUtil};\n+use std::io;\n+use std::option::{Option, Some, None};\n+use std::to_str::ToStr;\n+use std::uint;\n \n #[deriving(Eq)]\n pub enum Identifier {"}, {"sha": "66b178f49f7f74060ac33b3f0bc3093ca75ba09e", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -17,13 +17,12 @@ Core encoding and decoding interfaces.\n #[allow(missing_doc)];\n #[forbid(non_camel_case_types)];\n \n-use core::prelude::*;\n \n-use core::at_vec;\n-use core::hashmap::{HashMap, HashSet};\n-use core::trie::{TrieMap, TrieSet};\n-use core::uint;\n-use core::vec;\n+use std::at_vec;\n+use std::hashmap::{HashMap, HashSet};\n+use std::trie::{TrieMap, TrieSet};\n+use std::uint;\n+use std::vec;\n use deque::Deque;\n use dlist::DList;\n use treemap::{TreeMap, TreeSet};"}, {"sha": "e32c688da379a035b44261604e6ea3117f72e444", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,13 +15,12 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::cmp;\n-use core::container::{Container, Mutable, Map, Set};\n-use core::uint;\n-use core::util::replace;\n-use core::vec;\n+use std::cmp;\n+use std::container::{Container, Mutable, Map, Set};\n+use std::uint;\n+use std::util::replace;\n+use std::vec;\n \n #[allow(missing_doc)]\n pub struct SmallIntMap<T> {\n@@ -287,7 +286,6 @@ impl SmallIntSet {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use super::SmallIntMap;\n \n@@ -382,11 +380,10 @@ mod tests {\n \n #[cfg(test)]\n mod test_set {\n-    use core::prelude::*;\n \n     use super::SmallIntSet;\n \n-    use core::vec;\n+    use std::vec;\n \n     #[test]\n     fn test_disjoint() {"}, {"sha": "36c12f314b70bb4639163f870cbe7d68abe99d2f", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,12 +10,11 @@\n \n //! Sorting methods\n \n-use core::prelude::*;\n \n-use core::cmp::{Eq, Ord};\n-use core::uint;\n-use core::util::swap;\n-use core::vec;\n+use std::cmp::{Eq, Ord};\n+use std::uint;\n+use std::util::swap;\n+use std::vec;\n \n type Le<'self, T> = &'self fn(v1: &T, v2: &T) -> bool;\n \n@@ -791,12 +790,11 @@ mod test_qsort3 {\n \n #[cfg(test)]\n mod test_qsort {\n-    use core::prelude::*;\n \n     use sort::*;\n \n-    use core::int;\n-    use core::vec;\n+    use std::int;\n+    use std::vec;\n \n     fn check_sort(v1: &mut [int], v2: &mut [int]) {\n         let len = v1.len();\n@@ -857,7 +855,6 @@ mod test_qsort {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use sort::*;\n \n@@ -924,12 +921,11 @@ mod tests {\n \n #[cfg(test)]\n mod test_tim_sort {\n-    use core::prelude::*;\n \n     use sort::tim_sort;\n-    use core::rand::RngUtil;\n-    use core::rand;\n-    use core::vec;\n+    use std::rand::RngUtil;\n+    use std::rand;\n+    use std::vec;\n \n     struct CVal {\n         val: float,\n@@ -1019,15 +1015,14 @@ mod test_tim_sort {\n \n #[cfg(test)]\n mod big_tests {\n-    use core::prelude::*;\n \n     use sort::*;\n \n-    use core::local_data;\n-    use core::rand::RngUtil;\n-    use core::rand;\n-    use core::uint;\n-    use core::vec;\n+    use std::local_data;\n+    use std::rand::RngUtil;\n+    use std::rand;\n+    use std::uint;\n+    use std::vec;\n \n     #[test]\n     fn test_unique() {"}, {"sha": "8351e4db6b8cc00db8409a3f2be4972c44a470e7", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,12 +10,11 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::f64;\n-use core::cmp;\n-use core::num;\n-use core::vec;\n+use std::f64;\n+use std::cmp;\n+use std::num;\n+use std::vec;\n use sort;\n \n // NB: this can probably be rewritten in terms of num::Num"}, {"sha": "b9d25451a8a9566825189d2c190990c309317c01", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,14 +15,13 @@\n  * in std.\n  */\n \n-use core::prelude::*;\n \n-use core::borrow;\n-use core::comm;\n-use core::task;\n-use core::unstable::sync::{Exclusive, exclusive, UnsafeAtomicRcBox};\n-use core::unstable::atomics;\n-use core::util;\n+use std::borrow;\n+use std::comm;\n+use std::task;\n+use std::unstable::sync::{Exclusive, exclusive, UnsafeAtomicRcBox};\n+use std::unstable::atomics;\n+use std::util;\n \n /****************************************************************************\n  * Internals\n@@ -803,15 +802,14 @@ impl<'self> RWlockReadMode<'self> {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use sync::*;\n \n-    use core::cast;\n-    use core::cell::Cell;\n-    use core::comm;\n-    use core::result;\n-    use core::task;\n+    use std::cast;\n+    use std::cell::Cell;\n+    use std::comm;\n+    use std::result;\n+    use std::task;\n \n     /************************************************************************\n      * Semaphore tests"}, {"sha": "49d5dd93869535506e0b24a75343ade58e38a14d", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -13,15 +13,14 @@\n /// A task pool abstraction. Useful for achieving predictable CPU\n /// parallelism.\n \n-use core::prelude::*;\n \n-use core::comm::Chan;\n-use core::comm;\n-use core::task::SchedMode;\n-use core::task;\n-use core::vec;\n+use std::comm::Chan;\n+use std::comm;\n+use std::task::SchedMode;\n+use std::task;\n+use std::vec;\n \n-#[cfg(test)] use core::task::SingleThreaded;\n+#[cfg(test)] use std::task::SingleThreaded;\n \n enum Msg<T> {\n     Execute(~fn(&T)),"}, {"sha": "f8948f41101e8a7c08d7b89088f760fc53925de4", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,11 +10,10 @@\n \n //! Temporary files and directories\n \n-use core::prelude::*;\n \n-use core::os;\n-use core::rand::RngUtil;\n-use core::rand;\n+use std::os;\n+use std::rand::RngUtil;\n+use std::rand;\n \n /// Attempts to make a temporary directory inside of `tmpdir` whose name will\n /// have the suffix `suffix`. If no directory can be created, None is returned.\n@@ -31,11 +30,10 @@ pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use tempfile::mkdtemp;\n \n-    use core::os;\n+    use std::os;\n \n     #[test]\n     fn test_mkdtemp() {\n@@ -44,12 +42,12 @@ mod tests {\n         assert!(p.to_str().ends_with(\"foobar\"));\n     }\n \n-    // Ideally these would be in core::os but then core would need\n+    // Ideally these would be in std::os but then core would need\n     // to depend on std\n     #[test]\n     fn recursive_mkdir_rel() {\n-        use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n-        use core::os;\n+        use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+        use std::os;\n \n         let root = mkdtemp(&os::tmpdir(), \"recursive_mkdir_rel\").\n             expect(\"recursive_mkdir_rel\");\n@@ -67,8 +65,8 @@ mod tests {\n \n     #[test]\n     fn recursive_mkdir_dot() {\n-        use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n-        use core::os;\n+        use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+        use std::os;\n \n         let dot = Path(\".\");\n         assert!(os::mkdir_recursive(&dot,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n@@ -78,8 +76,8 @@ mod tests {\n \n     #[test]\n     fn recursive_mkdir_rel_2() {\n-        use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n-        use core::os;\n+        use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+        use std::os;\n \n         let root = mkdtemp(&os::tmpdir(), \"recursive_mkdir_rel_2\").\n             expect(\"recursive_mkdir_rel_2\");\n@@ -102,8 +100,8 @@ mod tests {\n     // Ideally this would be in core, but needs mkdtemp\n     #[test]\n     pub fn test_rmdir_recursive_ok() {\n-        use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n-        use core::os;\n+        use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+        use std::os;\n \n         let rwx = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n "}, {"sha": "e21e5c5fb5853dd791ab32db6c42f0ca88ceab71", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,11 +12,10 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::io;\n+use std::io;\n \n-#[cfg(not(target_os = \"win32\"))] use core::os;\n+#[cfg(not(target_os = \"win32\"))] use std::os;\n #[cfg(not(target_os = \"win32\"))] use terminfo::*;\n #[cfg(not(target_os = \"win32\"))] use terminfo::searcher::open;\n #[cfg(not(target_os = \"win32\"))] use terminfo::parser::compiled::parse;"}, {"sha": "f3edd81f9acd83d1ff62445cf90b76be70c66128", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,10 +10,9 @@\n \n //! Parameterized string expansion\n \n-use core::prelude::*;\n-use core::{char, vec, util};\n-use core::num::strconv::{SignNone,SignNeg,SignAll,DigAll,to_str_bytes_common};\n-use core::iterator::IteratorUtil;\n+use std::{char, vec, util};\n+use std::num::strconv::{SignNone,SignNeg,SignAll,DigAll,to_str_bytes_common};\n+use std::iterator::IteratorUtil;\n \n #[deriving(Eq)]\n enum States {\n@@ -549,7 +548,7 @@ priv fn format(val: Param, op: FormatOp, flags: Flags) -> Result<~[u8],~str> {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use core::result::Ok;\n+    use std::result::Ok;\n \n     #[test]\n     fn test_basic_setabf() {"}, {"sha": "2f36845d79b758967ae9e3cb82d49222374bb60f", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,11 +10,10 @@\n \n /// ncurses-compatible compiled terminfo format parsing (term(5))\n \n-use core::prelude::*;\n \n-use core::{vec, int, str};\n-use core::io::Reader;\n-use core::hashmap::HashMap;\n+use std::{vec, int, str};\n+use std::io::Reader;\n+use std::hashmap::HashMap;\n use super::super::TermInfo;\n \n // These are the orders ncurses uses in its compiled format (as of 5.9). Not sure if portable."}, {"sha": "15aeeb3e65442422889afddec9e5d7b752c4ad5f", "filename": "src/libextra/terminfo/searcher.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fsearcher.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -11,11 +11,10 @@\n /// Implement ncurses-compatible database discovery\n /// Does not support hashed database, only filesystem!\n \n-use core::prelude::*;\n-use core::{os, str};\n-use core::os::getenv;\n-use core::io::{file_reader, Reader};\n-use path = core::path::Path;\n+use std::{os, str};\n+use std::os::getenv;\n+use std::io::{file_reader, Reader};\n+use path = std::path::Path;\n \n /// Return path to database entry for `term`\n pub fn get_dbpath_for_term(term: &str) -> Option<~path> {"}, {"sha": "0e0231ad3f44af9502e4bb1692fdae2b206eca63", "filename": "src/libextra/terminfo/terminfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterminfo%2Fterminfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fterminfo%2Fterminfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fterminfo.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n /// A parsed terminfo entry.\n pub struct TermInfo {"}, {"sha": "886bb9293bba470fa8a27d78fe5400644d8368cb", "filename": "src/libextra/test.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,30 +15,29 @@\n // simplest interface possible for representing and running tests\n // while providing a base that other test frameworks may build off of.\n \n-use core::prelude::*;\n \n use getopts;\n use sort;\n use stats::Stats;\n use term;\n use time::precise_time_ns;\n \n-use core::comm::{stream, SharedChan};\n-use core::either;\n-use core::io;\n-use core::num;\n-use core::option;\n-use core::rand::RngUtil;\n-use core::rand;\n-use core::result;\n-use core::task;\n-use core::to_str::ToStr;\n-use core::u64;\n-use core::uint;\n-use core::vec;\n+use std::comm::{stream, SharedChan};\n+use std::either;\n+use std::io;\n+use std::num;\n+use std::option;\n+use std::rand::RngUtil;\n+use std::rand;\n+use std::result;\n+use std::task;\n+use std::to_str::ToStr;\n+use std::u64;\n+use std::uint;\n+use std::vec;\n \n pub mod rustrt {\n-    use core::libc::size_t;\n+    use std::libc::size_t;\n \n     #[abi = \"cdecl\"]\n     pub extern {\n@@ -573,7 +572,7 @@ pub fn run_test(force_ignore: bool,\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: SharedChan<MonitorMsg>,\n                       testfn: ~fn()) {\n-        let testfn_cell = ::core::cell::Cell::new(testfn);\n+        let testfn_cell = ::std::cell::Cell::new(testfn);\n         do task::spawn {\n             let mut result_future = None; // task::future_result(builder);\n \n@@ -781,10 +780,10 @@ mod tests {\n                StaticTestName, DynTestName, DynTestFn};\n     use test::{TestOpts, run_test};\n \n-    use core::either;\n-    use core::comm::{stream, SharedChan};\n-    use core::option;\n-    use core::vec;\n+    use std::either;\n+    use std::comm::{stream, SharedChan};\n+    use std::option;\n+    use std::vec;\n \n     #[test]\n     pub fn do_not_run_ignored_tests() {"}, {"sha": "e1f42934b39067a8685b82beda7fcf6804c2c999", "filename": "src/libextra/time.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,12 +10,11 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::i32;\n-use core::int;\n-use core::io;\n-use core::str;\n+use std::i32;\n+use std::int;\n+use std::io;\n+use std::str;\n \n static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n \n@@ -862,11 +861,11 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n mod tests {\n     use time::*;\n \n-    use core::float;\n-    use core::os;\n-    use core::result;\n-    use core::result::{Err, Ok};\n-    use core::str;\n+    use std::float;\n+    use std::os;\n+    use std::result;\n+    use std::result::{Err, Ok};\n+    use std::str;\n \n     fn test_get_time() {\n         static some_recent_date: i64 = 1325376000i64; // 2012-01-01T00:00:00Z"}, {"sha": "d957ac43801e576bbcf99632640eba42bc477623", "filename": "src/libextra/timer.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,18 +10,17 @@\n \n //! Utilities that leverage libuv's `uv_timer_*` API\n \n-use core::prelude::*;\n \n use uv;\n use uv::iotask;\n use uv::iotask::IoTask;\n \n-use core::cast::transmute;\n-use core::cast;\n-use core::comm::{stream, Chan, SharedChan, Port, select2i};\n-use core::either;\n-use core::libc::c_void;\n-use core::libc;\n+use std::cast::transmute;\n+use std::cast;\n+use std::comm::{stream, Chan, SharedChan, Port, select2i};\n+use std::either;\n+use std::libc::c_void;\n+use std::libc;\n \n /**\n  * Wait for timeout period then send provided value over a channel\n@@ -111,7 +110,7 @@ pub fn sleep(iotask: &IoTask, msecs: uint) {\n  *\n  * * `iotask' - `uv::iotask` that the tcp request will run on\n  * * msecs - an mount of time, in milliseconds, to wait to receive\n- * * wait_port - a `core::comm::port<T>` to receive on\n+ * * wait_port - a `std::comm::port<T>` to receive on\n  *\n  * # Returns\n  *\n@@ -176,16 +175,15 @@ extern fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use timer::*;\n     use uv;\n \n-    use core::cell::Cell;\n-    use core::pipes::{stream, SharedChan};\n-    use core::rand::RngUtil;\n-    use core::rand;\n-    use core::task;\n+    use std::cell::Cell;\n+    use std::pipes::{stream, SharedChan};\n+    use std::rand::RngUtil;\n+    use std::rand;\n+    use std::task;\n \n     #[test]\n     fn test_gl_timer_simple_sleep_test() {\n@@ -223,7 +221,7 @@ mod test {\n                 let ch = ch.clone();\n                 let hl_loop_clone = hl_loop.clone();\n                 do task::spawn {\n-                    use core::rand::*;\n+                    use std::rand::*;\n                     let mut rng = rng();\n                     for times.times {\n                         sleep(&hl_loop_clone, rng.next() as uint % maxms);"}, {"sha": "5e898f8e59d9d450973b5b205f98fed5ea6d16a3", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,10 +12,9 @@\n //! trees. The only requirement for the types is that the key implements\n //! `TotalOrd`.\n \n-use core::prelude::*;\n \n-use core::uint;\n-use core::util::{swap, replace};\n+use std::uint;\n+use std::util::{swap, replace};\n \n // This is implemented as an AA tree, which is a simplified variation of\n // a red-black tree where red (horizontal) nodes can only be added\n@@ -689,12 +688,11 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n \n #[cfg(test)]\n mod test_treemap {\n-    use core::prelude::*;\n \n     use super::*;\n \n-    use core::rand::RngUtil;\n-    use core::rand;\n+    use std::rand::RngUtil;\n+    use std::rand;\n \n     #[test]\n     fn find_empty() {\n@@ -1010,7 +1008,6 @@ mod test_treemap {\n \n #[cfg(test)]\n mod test_set {\n-    use core::prelude::*;\n \n     use super::*;\n "}, {"sha": "5501d73ac86802d9cfb07488d66de7599614df68", "filename": "src/libextra/uv_global_loop.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_global_loop.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,16 +10,15 @@\n \n //! A process-wide libuv event loop for library use.\n \n-use core::prelude::*;\n \n use iotask = uv_iotask;\n use uv_iotask::{IoTask, spawn_iotask};\n \n-use core::comm::Chan;\n-use core::option::{Some, None};\n-use core::task::task;\n-use core::unstable::global::{global_data_clone_create, global_data_clone};\n-use core::unstable::weak_task::weaken_task;\n+use std::comm::Chan;\n+use std::option::{Some, None};\n+use std::task::task;\n+use std::unstable::global::{global_data_clone_create, global_data_clone};\n+use std::unstable::weak_task::weaken_task;\n \n /**\n  * Race-free helper to get access to a global task where a libuv\n@@ -126,11 +125,11 @@ mod test {\n     use uv::ll;\n     use uv_iotask::IoTask;\n \n-    use core::libc;\n-    use core::task;\n-    use core::cast::transmute;\n-    use core::libc::c_void;\n-    use core::comm::{stream, SharedChan, Chan};\n+    use std::libc;\n+    use std::task;\n+    use std::cast::transmute;\n+    use std::libc::c_void;\n+    use std::comm::{stream, SharedChan, Chan};\n \n     extern fn simple_timer_close_cb(timer_ptr: *ll::uv_timer_t) {\n         unsafe {"}, {"sha": "0a564045d32f06176ab045fa842b77387dcd69d4", "filename": "src/libextra/uv_iotask.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_iotask.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -17,14 +17,13 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n use ll = uv_ll;\n \n-use core::comm::{stream, Port, Chan, SharedChan};\n-use core::libc::c_void;\n-use core::libc;\n-use core::task;\n+use std::comm::{stream, Port, Chan, SharedChan};\n+use std::libc::c_void;\n+use std::libc;\n+use std::task;\n \n /// Used to abstract-away direct interaction with a libuv loop.\n pub struct IoTask {\n@@ -226,7 +225,7 @@ struct AhData {\n \n #[cfg(test)]\n fn impl_uv_iotask_async(iotask: &IoTask) {\n-    use core::ptr;\n+    use std::ptr;\n \n     let async_handle = ll::async_t();\n     let ah_ptr: *ll::uv_async_t = &async_handle;"}, {"sha": "db960f334fdc9cfde270d16c7cc64e7afd407634", "filename": "src/libextra/uv_ll.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_ll.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -33,14 +33,13 @@\n #[allow(non_camel_case_types)]; // C types\n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n-use core::libc::{c_void, size_t};\n-use core::libc;\n-use core::ptr::to_unsafe_ptr;\n-use core::ptr;\n-use core::str;\n-use core::vec;\n+use std::libc::{c_void, size_t};\n+use std::libc;\n+use std::ptr::to_unsafe_ptr;\n+use std::ptr;\n+use std::str;\n+use std::vec;\n \n pub type uv_handle_t = c_void;\n pub type uv_loop_t = c_void;\n@@ -362,7 +361,7 @@ pub struct uv_getaddrinfo_t {\n \n pub mod uv_ll_struct_stubgen {\n \n-    use core::ptr;\n+    use std::ptr;\n \n     use super::{\n         uv_async_t,\n@@ -1228,16 +1227,15 @@ pub unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use super::*;\n \n-    use core::comm::{SharedChan, stream, GenericChan, GenericPort};\n-    use core::libc;\n-    use core::str;\n-    use core::sys;\n-    use core::task;\n-    use core::vec;\n+    use std::comm::{SharedChan, stream, GenericChan, GenericPort};\n+    use std::libc;\n+    use std::str;\n+    use std::sys;\n+    use std::task;\n+    use std::vec;\n \n     enum tcp_read_data {\n         tcp_read_eof,"}, {"sha": "503bd05b7337de5543093faceed0dcf986b2eda3", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,25 +10,24 @@\n \n #[allow(missing_doc)];\n \n-use core::prelude::*;\n \n use digest::DigestUtil;\n use json;\n use sha1::Sha1;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n use sort;\n \n-use core::cell::Cell;\n-use core::cmp;\n-use core::comm::{PortOne, oneshot, send_one, recv_one};\n-use core::either::{Either, Left, Right};\n-use core::hashmap::HashMap;\n-use core::io;\n-use core::result;\n-use core::run;\n-use core::task;\n-use core::to_bytes;\n-use core::util::replace;\n+use std::cell::Cell;\n+use std::cmp;\n+use std::comm::{PortOne, oneshot, send_one, recv_one};\n+use std::either::{Either, Left, Right};\n+use std::hashmap::HashMap;\n+use std::io;\n+use std::result;\n+use std::run;\n+use std::task;\n+use std::to_bytes;\n+use std::util::replace;\n \n /**\n *\n@@ -403,7 +402,7 @@ fn unwrap<T:Send +\n \n //#[test]\n fn test() {\n-    use core::io::WriterUtil;\n+    use std::io::WriterUtil;\n \n     let db = @mut Database { db_filename: Path(\"db.json\"),\n                              db_cache: HashMap::new(),"}, {"sha": "2380e748e30820d278186779255f763fdc4ad02d", "filename": "src/librust/rust.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -20,28 +20,15 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n-#[no_std];\n-\n-extern mod core(name = \"std\");\n-\n extern mod rustpkg;\n extern mod rustdoc;\n extern mod rusti;\n extern mod rustc;\n \n-use core::prelude::*;\n-\n-use core::io;\n-use core::os;\n-use core::run;\n-use core::libc::exit;\n-\n-// For bootstrapping.\n-mod std {\n-    pub use core::os;\n-    pub use core::str;\n-    pub use core::unstable;\n-}\n+use std::io;\n+use std::os;\n+use std::run;\n+use std::libc::exit;\n \n enum ValidUsage {\n     Valid(int), Invalid"}, {"sha": "cc062db4cb2c9365a7df0eca1472ab12c4b63a03", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::rpath;\n use driver::session::Session;\n@@ -23,17 +22,17 @@ use middle::trans::common::gensym_name;\n use middle::ty;\n use util::ppaux;\n \n-use core::char;\n-use core::hash::Streaming;\n-use core::hash;\n-use core::libc::{c_int, c_uint};\n-use core::os::consts::{macos, freebsd, linux, android, win32};\n-use core::os;\n-use core::ptr;\n-use core::rt::io::Writer;\n-use core::run;\n-use core::str;\n-use core::vec;\n+use std::char;\n+use std::hash::Streaming;\n+use std::hash;\n+use std::libc::{c_int, c_uint};\n+use std::os::consts::{macos, freebsd, linux, android, win32};\n+use std::os;\n+use std::ptr;\n+use std::rt::io::Writer;\n+use std::run;\n+use std::str;\n+use std::vec;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n@@ -98,19 +97,18 @@ pub fn WriteOutputFile(sess: Session,\n }\n \n pub mod jit {\n-    use core::prelude::*;\n \n     use back::link::llvm_err;\n     use driver::session::Session;\n     use lib::llvm::llvm;\n     use lib::llvm::{ModuleRef, ContextRef};\n     use metadata::cstore;\n \n-    use core::cast;\n-    use core::ptr;\n-    use core::str;\n-    use core::sys;\n-    use core::unstable::intrinsics;\n+    use std::cast;\n+    use std::ptr;\n+    use std::str;\n+    use std::sys;\n+    use std::unstable::intrinsics;\n \n     pub fn exec(sess: Session,\n                 c: ContextRef,\n@@ -182,7 +180,6 @@ pub mod jit {\n }\n \n pub mod write {\n-    use core::prelude::*;\n \n     use back::link::jit;\n     use back::link::{WriteOutputFile, output_type};\n@@ -198,10 +195,10 @@ pub mod write {\n \n     use back::passes;\n \n-    use core::libc::{c_int, c_uint};\n-    use core::path::Path;\n-    use core::run;\n-    use core::str;\n+    use std::libc::{c_int, c_uint};\n+    use std::path::Path;\n+    use std::run;\n+    use std::str;\n \n     pub fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         match ot {\n@@ -537,7 +534,7 @@ pub fn build_link_meta(sess: Session,\n             write_string(symbol_hasher, len_and_str(*dh));\n         }\n \n-    // tjc: allocation is unfortunate; need to change core::hash\n+    // tjc: allocation is unfortunate; need to change std::hash\n         return truncated_hash_result(symbol_hasher).to_managed();\n     }\n \n@@ -618,7 +615,7 @@ pub fn symbol_hash(tcx: ty::ctxt,\n     let mut hash = truncated_hash_result(symbol_hasher);\n     // Prefix with _ so that it never blends into adjacent digits\n     hash.unshift_char('_');\n-    // tjc: allocation is unfortunate; need to change core::hash\n+    // tjc: allocation is unfortunate; need to change std::hash\n     hash.to_managed()\n }\n "}, {"sha": "c1192707c1c157d14cc43cfb7b473355cf2a26be", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-use core::str;\n-use core::io;\n+use std::str;\n+use std::io;\n \n use driver::session::{OptLevel, No, Less, Aggressive};\n use driver::session::{Session};"}, {"sha": "ab107a8bf2509c79a2262f9afdacbd955e7f5930", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,17 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session;\n use metadata::cstore;\n use metadata::filesearch;\n \n-use core::hashmap::HashSet;\n-use core::os;\n-use core::uint;\n-use core::util;\n-use core::vec;\n+use std::hashmap::HashSet;\n+use std::os;\n+use std::uint;\n+use std::util;\n+use std::vec;\n \n fn not_win32(os: session::os) -> bool {\n   os != session::os_win32\n@@ -113,7 +112,7 @@ pub fn get_rpath_relative_to_output(os: session::os,\n                                     output: &Path,\n                                     lib: &Path)\n                                  -> Path {\n-    use core::os;\n+    use std::os;\n \n     assert!(not_win32(os));\n \n@@ -195,8 +194,7 @@ pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n \n #[cfg(unix, test)]\n mod test {\n-    use core::prelude::*;\n-    use core::os;\n+    use std::os;\n \n     // FIXME(#2119): the outer attribute should be #[cfg(unix, test)], then\n     // these redundant #[cfg(test)] blocks can be removed"}, {"sha": "a32f54fe7bba46bce5b800896bd5a847f9b63dc9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::link;\n use back::{arm, x86, x86_64, mips};\n@@ -24,11 +23,11 @@ use middle;\n use util::common::time;\n use util::ppaux;\n \n-use core::hashmap::HashMap;\n-use core::int;\n-use core::io;\n-use core::os;\n-use core::vec;\n+use std::hashmap::HashMap;\n+use std::int;\n+use std::io;\n+use std::os;\n+use std::vec;\n use extra::getopts::groups::{optopt, optmulti, optflag, optflagopt};\n use extra::getopts::{opt_present};\n use extra::getopts;\n@@ -951,7 +950,6 @@ pub fn list_metadata(sess: Session, path: &Path, out: @io::Writer) {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use driver::driver::{build_configuration, build_session};\n     use driver::driver::{build_session_options, optgroups, str_input};"}, {"sha": "ef0b6d6465132cf9c081c8a7f763fcd3cd5c3e11", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::link;\n use back::target_strs;\n@@ -29,7 +28,7 @@ use syntax::abi;\n use syntax::parse::token;\n use syntax;\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n #[deriving(Eq)]\n pub enum os { os_win32, os_macos, os_linux, os_android, os_freebsd, }"}, {"sha": "7d9fac5c6ae018605b0a0026efdf873d72740ed2", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::option;\n-use core::vec;\n+use std::option;\n+use std::vec;\n use syntax::{ast, fold, attr};\n \n type in_cfg_pred = @fn(attrs: ~[ast::attribute]) -> bool;"}, {"sha": "88ed39aae543e0cbe91eb0d8072ee6aaa82e5726", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n \n-use core::vec;\n+use std::vec;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::dummy_sp;"}, {"sha": "cfd4df7403f69e928cbe82816e2120a8def05430", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,12 +10,11 @@\n \n // Code that generates a test runner to run all the tests in a crate\n \n-use core::prelude::*;\n \n use driver::session;\n use front::config;\n \n-use core::vec;\n+use std::vec;\n use syntax::ast_util::*;\n use syntax::attr;\n use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};"}, {"sha": "8ca8c12f412211b0129231b96d6a7c2f5f787a53", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::hashmap::HashMap;\n-use core::libc::{c_uint, c_ushort};\n-use core::option;\n-use core::str;\n+use std::hashmap::HashMap;\n+use std::libc::{c_uint, c_ushort};\n+use std::option;\n+use std::str;\n \n use middle::trans::type_::Type;\n \n@@ -268,7 +267,7 @@ pub mod llvm {\n     use super::{SectionIteratorRef, TargetDataRef, TypeKind, TypeRef, UseRef};\n     use super::{ValueRef, PassRef};\n     use super::debuginfo::*;\n-    use core::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong};\n+    use std::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong};\n \n     #[link_args = \"-Lrustllvm -lrustllvm\"]\n     #[link_name = \"rustllvm\"]"}, {"sha": "ddd07c2cb27234092f088a616c3b49d3680f803e", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -7,8 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use core::prelude::*;\n-use core::cast;\n+use std::cast;\n \n // EBML enum definitions and utils shared by the encoder and decoder\n "}, {"sha": "2a712b07564771bfb6a7e442be1e09082db0f0fe", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,14 +10,13 @@\n \n //! Validates all used crates and extern libraries and loads their metadata\n \n-use core::prelude::*;\n \n use metadata::cstore;\n use metadata::decoder;\n use metadata::filesearch::FileSearch;\n use metadata::loader;\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n use syntax::attr;\n use syntax::codemap::{span, dummy_sp};\n use syntax::diagnostic::span_handler;\n@@ -75,7 +74,7 @@ fn dump_crates(crate_cache: &[cache_entry]) {\n fn warn_if_multiple_versions(e: @mut Env,\n                              diag: @span_handler,\n                              crate_cache: &[cache_entry]) {\n-    use core::either::*;\n+    use std::either::*;\n \n     if crate_cache.len() != 0u {\n         let name = loader::crate_name_from_metas("}, {"sha": "f336b0f4e4c5e85e242b9dc7db3ac08726637fc6", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,15 +10,14 @@\n \n // Searching for information from the cstore\n \n-use core::prelude::*;\n \n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;\n use metadata;\n use middle::{ty, resolve};\n \n-use core::vec;\n+use std::vec;\n use reader = extra::ebml::reader;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "af5cc9136bdf7cb8fdd4948316b914b2dba7e384", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,13 +12,12 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use core::prelude::*;\n \n use metadata::cstore;\n use metadata::decoder;\n \n-use core::hashmap::HashMap;\n-use core::vec;\n+use std::hashmap::HashMap;\n+use std::vec;\n use extra;\n use syntax::ast;\n use syntax::parse::token::ident_interner;"}, {"sha": "2c7a991f6146a124c81f0cb481844c9b2764ceaa", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n // Decoding metadata from a single crate's metadata\n \n-use core::prelude::*;\n \n use metadata::cstore::crate_metadata;\n use metadata::common::*;\n@@ -23,13 +22,13 @@ use metadata::tydecode::{parse_ty_data, parse_def_id,\n                          parse_bare_fn_ty_data, parse_trait_ref_data};\n use middle::{ty, resolve};\n \n-use core::hash::HashUtil;\n-use core::int;\n-use core::io::WriterUtil;\n-use core::io;\n-use core::option;\n-use core::str;\n-use core::vec;\n+use std::hash::HashUtil;\n+use std::int;\n+use std::io::WriterUtil;\n+use std::io;\n+use std::option;\n+use std::str;\n+use std::vec;\n use extra::ebml::reader;\n use extra::ebml;\n use extra::serialize::Decodable;\n@@ -539,7 +538,7 @@ impl<'self> EachItemContext<'self> {\n \n     fn each_item_of_module(&mut self, def_id: ast::def_id) -> bool {\n         // This item might not be in this crate. If it's not, look it up.\n-        let (cdata, items) = if def_id.crate == self.cdata.cnum {\n+        let (_cdata, items) = if def_id.crate == self.cdata.cnum {\n             let items = reader::get_doc(reader::Doc(self.cdata.data),\n                                         tag_items);\n             (self.cdata, items)"}, {"sha": "71d7bea0af7bc3327ba9314dc26780228a3c01f1", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n // Metadata encoding\n \n-use core::prelude::*;\n \n use metadata::common::*;\n use metadata::cstore;\n@@ -21,13 +20,13 @@ use middle::ty;\n use middle;\n use util::ppaux::ty_to_str;\n \n-use core::hash::HashUtil;\n-use core::hashmap::{HashMap, HashSet};\n-use core::int;\n-use core::io;\n-use core::str;\n-use core::uint;\n-use core::vec;\n+use std::hash::HashUtil;\n+use std::hashmap::{HashMap, HashSet};\n+use std::int;\n+use std::io;\n+use std::str;\n+use std::uint;\n+use std::vec;\n use extra::flate;\n use extra::serialize::Encodable;\n use extra;\n@@ -46,7 +45,7 @@ use syntax::parse::token;\n use syntax;\n use writer = extra::ebml::writer;\n \n-use core::cast;\n+use std::cast;\n \n // used by astencode:\n type abbrev_map = @mut HashMap<ty::t, tyencode::ty_abbrev>;\n@@ -152,7 +151,6 @@ fn encode_trait_ref(ebml_w: &mut writer::Encoder,\n                     ecx: &EncodeContext,\n                     trait_ref: &ty::TraitRef,\n                     tag: uint) {\n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n@@ -180,7 +178,6 @@ fn encode_ty_type_param_defs(ebml_w: &mut writer::Encoder,\n                              ecx: &EncodeContext,\n                              params: @~[ty::TypeParameterDef],\n                              tag: uint) {\n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n@@ -213,7 +210,6 @@ fn encode_variant_id(ebml_w: &mut writer::Encoder, vid: def_id) {\n pub fn write_type(ecx: &EncodeContext,\n                   ebml_w: &mut writer::Encoder,\n                   typ: ty::t) {\n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n@@ -226,7 +222,6 @@ pub fn write_type(ecx: &EncodeContext,\n pub fn write_vstore(ecx: &EncodeContext,\n                     ebml_w: &mut writer::Encoder,\n                     vstore: ty::vstore) {\n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,\n@@ -259,7 +254,6 @@ fn encode_method_fty(ecx: &EncodeContext,\n                      typ: &ty::BareFnTy) {\n     ebml_w.start_tag(tag_item_method_fty);\n \n-    let r = ecx.reachable;\n     let ty_str_ctxt = @tyencode::ctxt {\n         diag: ecx.diag,\n         ds: def_to_str,"}, {"sha": "28866fd568a7829bc0d10566c84f9c89f0938552", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::option;\n-use core::os;\n-use core::result;\n-use core::str;\n+use std::option;\n+use std::os;\n+use std::result;\n+use std::str;\n \n // A module for searching for libraries\n // FIXME (#2658): I'm not happy how this module turned out. Should"}, {"sha": "31577e472678e0c8e4ec7b9b5fa2c0dde1d52f84", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Finds crate binaries and loads their metadata\n \n-use core::prelude::*;\n \n use lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n use metadata::decoder;\n@@ -24,14 +23,14 @@ use syntax::parse::token::ident_interner;\n use syntax::print::pprust;\n use syntax::{ast, attr};\n \n-use core::cast;\n-use core::io;\n-use core::option;\n-use core::os::consts::{macos, freebsd, linux, android, win32};\n-use core::ptr;\n-use core::str;\n-use core::uint;\n-use core::vec;\n+use std::cast;\n+use std::io;\n+use std::option;\n+use std::os::consts::{macos, freebsd, linux, android, win32};\n+use std::ptr;\n+use std::str;\n+use std::uint;\n+use std::vec;\n use extra::flate;\n \n pub enum os {"}, {"sha": "c1fbde524c04722f13c0fb6a6d5a3b3edd4ec999", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -14,12 +14,11 @@\n // tjc note: Would be great to have a `match check` macro equivalent\n // for some of these\n \n-use core::prelude::*;\n \n use middle::ty;\n \n-use core::str;\n-use core::uint;\n+use std::str;\n+use std::uint;\n use syntax::abi::AbiSet;\n use syntax::abi;\n use syntax::ast;"}, {"sha": "1295653f806c66e8f71283f0294109c7a0a3b5f3", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,15 +10,14 @@\n \n // Type encoding\n \n-use core::prelude::*;\n \n use middle::ty::param_ty;\n use middle::ty;\n \n-use core::hashmap::HashMap;\n-use core::io::WriterUtil;\n-use core::io;\n-use core::uint;\n+use std::hashmap::HashMap;\n+use std::io::WriterUtil;\n+use std::io;\n+use std::uint;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast::*;"}, {"sha": "c6d7314f1cd9fd2cc1f4acf58b84c09a452b74ad", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use c = metadata::common;\n use cstore = metadata::cstore;\n@@ -24,8 +23,8 @@ use middle::{ty, typeck, moves};\n use middle;\n use util::ppaux::ty_to_str;\n \n-use core::at_vec;\n-use core::uint;\n+use std::at_vec;\n+use std::uint;\n use extra::ebml::reader;\n use extra::ebml;\n use extra::serialize;\n@@ -43,7 +42,7 @@ use syntax::parse::token;\n use syntax;\n use writer = extra::ebml::writer;\n \n-use core::cast;\n+use std::cast;\n \n #[cfg(test)] use syntax::parse;\n #[cfg(test)] use syntax::print::pprust;\n@@ -1243,7 +1242,7 @@ fn mk_ctxt() -> @fake_ext_ctxt {\n \n #[cfg(test)]\n fn roundtrip(in_item: Option<@ast::item>) {\n-    use core::io;\n+    use std::io;\n \n     let in_item = in_item.get();\n     let bytes = do io::with_bytes_writer |wr| {"}, {"sha": "b2e303d40eecf4add0d2e8318285eb4d9cd10188", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -17,10 +17,9 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n \n-use core::prelude::*;\n \n-use core::hashmap::HashSet;\n-use core::uint;\n+use std::hashmap::HashSet;\n+use std::uint;\n use mc = middle::mem_categorization;\n use middle::borrowck::*;\n use middle::moves;"}, {"sha": "c9ea9e2be66ee27efb8bd9d65e9df34516cec13f", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,7 +12,6 @@\n  * Computes moves.\n  */\n \n-use core::prelude::*;\n use mc = middle::mem_categorization;\n use middle::borrowck::*;\n use middle::borrowck::move_data::*;"}, {"sha": "05fc139305c4a96e53e21f71a83151c0e502a259", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -11,7 +11,6 @@\n //! This module implements the check that the lifetime of a borrow\n //! does not exceed the lifetime of the value being borrowed.\n \n-use core::prelude::*;\n \n use middle::borrowck::*;\n use mc = middle::mem_categorization;"}, {"sha": "26fa4924ccb523ae6b8989f1eeb7059f410e2015", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -16,7 +16,6 @@\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-use core::prelude::*;\n \n use middle::borrowck::*;\n use middle::borrowck::move_data::MoveData;"}, {"sha": "d5377aeb6183997c482c520ec742902566d39dd5", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,9 +10,8 @@\n \n //! Computes the restrictions that result from a borrow.\n \n-use core::prelude::*;\n \n-use core::vec;\n+use std::vec;\n use middle::borrowck::*;\n use mc = middle::mem_categorization;\n use middle::ty;"}, {"sha": "7d667c2043c12bf892fdd23b37fef9a35a7580c5", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n /*! See doc.rs for a thorough explanation of the borrow checker */\n \n-use core::prelude::*;\n \n use mc = middle::mem_categorization;\n use middle::ty;\n@@ -21,10 +20,10 @@ use middle::dataflow::DataFlowOperator;\n use util::common::stmt_set;\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n-use core::hashmap::{HashSet, HashMap};\n-use core::io;\n-use core::ops::{BitOr, BitAnd};\n-use core::result::{Result};\n+use std::hashmap::{HashSet, HashMap};\n+use std::io;\n+use std::ops::{BitOr, BitAnd};\n+use std::result::{Result};\n use syntax::ast;\n use syntax::ast_map;\n use syntax::visit;"}, {"sha": "97fd6ca5cc439fa8b187d622ca7276f9d5549be1", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,10 +15,9 @@ comments in the section \"Moves and initialization\" and in `doc.rs`.\n \n */\n \n-use core::prelude::*;\n \n-use core::hashmap::{HashMap, HashSet};\n-use core::uint;\n+use std::hashmap::{HashMap, HashSet};\n+use std::uint;\n use middle::borrowck::*;\n use middle::dataflow::DataFlowContext;\n use middle::dataflow::DataFlowOperator;"}, {"sha": "59918137467aa14a5b4081f5f516d53d570c3d8a", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use middle::resolve;"}, {"sha": "ec5f5205760fcff5daca45532314aa7c9a73cb99", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n use middle::const_eval::{eval_const_expr, const_val, const_bool};\n@@ -19,8 +18,8 @@ use middle::typeck::method_map;\n use middle::moves;\n use util::ppaux::ty_to_str;\n \n-use core::uint;\n-use core::vec;\n+use std::uint;\n+use std::vec;\n use extra::sort;\n use syntax::ast::*;\n use syntax::ast_util::{unguarded_pat, walk_pat};"}, {"sha": "9d94a2de69334f40a95bb3b3c3513487514b15bf", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use metadata::csearch;\n use middle::astencode;\n@@ -18,9 +17,9 @@ use middle;\n use syntax::{ast, ast_map, ast_util, visit};\n use syntax::ast::*;\n \n-use core::float;\n-use core::hashmap::{HashMap, HashSet};\n-use core::vec;\n+use std::float;\n+use std::hashmap::{HashMap, HashSet};\n+use std::vec;\n \n //\n // This pass classifies expressions by their constant-ness."}, {"sha": "ac18a9b76cf9a5a71172d6e07088d223e3ecb593", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -16,13 +16,12 @@\n  * GEN and KILL bits for each expression.\n  */\n \n-use core::prelude::*;\n \n-use core::cast;\n-use core::io;\n-use core::uint;\n-use core::vec;\n-use core::hashmap::HashMap;\n+use std::cast;\n+use std::io;\n+use std::uint;\n+use std::vec;\n+use std::hashmap::HashMap;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::ast_util::id_range;"}, {"sha": "9bcfab0773fff83bc2c20a6841f8e38829f69105", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session;\n use driver::session::Session;\n@@ -18,7 +17,7 @@ use syntax::codemap::span;\n use syntax::visit::{default_visitor, mk_vt, vt, Visitor, visit_crate, visit_item};\n use syntax::attr::{attrs_contains_name};\n use syntax::ast_map;\n-use core::util;\n+use std::util;\n \n struct EntryContext {\n     session: Session,"}, {"sha": "ee7c35fb3d553a92e7b8eff19fe139adff553d7d", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -11,12 +11,11 @@\n // A pass that annotates for each loops and functions with the free\n // variables that they contain.\n \n-use core::prelude::*;\n \n use middle::resolve;\n use middle::ty;\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n use syntax::codemap::span;\n use syntax::{ast, ast_util, visit};\n "}, {"sha": "a207985e64c83d462be9cb2202ec63c6ceb000e1", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::freevars::freevar_entry;\n use middle::freevars;"}, {"sha": "f2c80fd430398567ef1d50e4d408f86b466a6537", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -19,7 +19,6 @@\n //\n // * Functions called by the compiler itself.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use metadata::csearch::each_lang_item;\n@@ -30,7 +29,7 @@ use syntax::ast_util::local_def;\n use syntax::visit::{default_simple_visitor, mk_simple_visitor, SimpleVisitor};\n use syntax::visit::visit_crate;\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n pub enum LangItem {\n     FreezeTraitLangItem,        // 0"}, {"sha": "d0fd516778bb61fdc99908636bcd217b7b6b8247", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,25 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session;\n use middle::ty;\n use middle::pat_util;\n use util::ppaux::{ty_to_str};\n \n-use core::char;\n-use core::cmp;\n-use core::hashmap::HashMap;\n-use core::i16;\n-use core::i32;\n-use core::i64;\n-use core::i8;\n-use core::u16;\n-use core::u32;\n-use core::u64;\n-use core::u8;\n-use core::vec;\n+use std::char;\n+use std::cmp;\n+use std::hashmap::HashMap;\n+use std::i16;\n+use std::i32;\n+use std::i64;\n+use std::i8;\n+use std::u16;\n+use std::u32;\n+use std::u64;\n+use std::u8;\n+use std::vec;\n use extra::smallintmap::SmallIntMap;\n use syntax::attr;\n use syntax::codemap::span;\n@@ -139,7 +138,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n     (\"ctypes\",\n      LintSpec {\n         lint: ctypes,\n-        desc: \"proper use of core::libc types in foreign modules\",\n+        desc: \"proper use of std::libc types in foreign modules\",\n         default: warn\n      }),\n "}, {"sha": "83f8b161b7522be7c85dd5669b4824d5695533c7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -102,20 +102,19 @@\n  *   to return explicitly.\n  */\n \n-use core::prelude::*;\n \n use middle::lint::{unused_variable, dead_assignment};\n use middle::pat_util;\n use middle::ty;\n use middle::typeck;\n use middle::moves;\n \n-use core::cast::transmute;\n-use core::hashmap::HashMap;\n-use core::io;\n-use core::to_str;\n-use core::uint;\n-use core::vec;\n+use std::cast::transmute;\n+use std::hashmap::HashMap;\n+use std::io;\n+use std::to_str;\n+use std::uint;\n+use std::vec;\n use syntax::ast::*;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;"}, {"sha": "fd36858ba68801ead844d4e67d3f1a4cee7e6167", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -46,14 +46,13 @@\n  * then an index to jump forward to the relevant item.\n  */\n \n-use core::prelude::*;\n \n use middle::ty;\n use middle::typeck;\n use util::ppaux::{ty_to_str, region_ptr_to_str, Repr};\n use util::common::indenter;\n \n-use core::uint;\n+use std::uint;\n use syntax::ast::{m_imm, m_const, m_mutbl};\n use syntax::ast;\n use syntax::codemap::span;"}, {"sha": "c7d338b1976ad94baafc7c57e669e4f5cff55448", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -126,7 +126,6 @@ and so on.\n \n */\n \n-use core::prelude::*;\n \n use middle::pat_util::{pat_bindings};\n use middle::freevars;\n@@ -136,8 +135,8 @@ use util::ppaux;\n use util::ppaux::Repr;\n use util::common::indenter;\n \n-use core::at_vec;\n-use core::hashmap::{HashSet, HashMap};\n+use std::at_vec;\n+use std::hashmap::{HashSet, HashMap};\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::visit;"}, {"sha": "f6da8f392cc1d7e9c8f616dd35c1ba525a91e68a", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::resolve;\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n use syntax::ast::*;\n use syntax::ast_util::{path_to_ident, walk_pat};\n use syntax::codemap::span;"}, {"sha": "5e544dc06e3dc5c77e44d2a3ad27ca4072074839", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -11,7 +11,6 @@\n // A pass that checks to make sure private fields and methods aren't used\n // outside their scopes.\n \n-use core::prelude::*;\n \n use metadata::csearch;\n use middle::ty::{ty_struct, ty_enum};\n@@ -20,7 +19,7 @@ use middle::typeck::{method_map, method_origin, method_param, method_self};\n use middle::typeck::{method_super};\n use middle::typeck::{method_static, method_trait};\n \n-use core::util::ignore;\n+use std::util::ignore;\n use syntax::ast::{decl_item, def, def_fn, def_id, def_static_method};\n use syntax::ast::{def_variant, expr_field, expr_method_call, expr_path};\n use syntax::ast::{expr_struct, expr_unary, ident, inherited, item_enum};"}, {"sha": "97bad93dc358a639abdbf24479cf50bcff2ce886", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,20 +15,16 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use core::prelude::*;\n-use core::iterator::IteratorUtil;\n+use std::iterator::IteratorUtil;\n \n-use middle::resolve;\n use middle::ty;\n use middle::typeck;\n \n-use core::hashmap::HashSet;\n+use std::hashmap::HashSet;\n use syntax::ast::*;\n-use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::def_id_of_def;\n use syntax::attr;\n-use syntax::codemap;\n use syntax::parse::token;\n use syntax::visit::Visitor;\n use syntax::visit;"}, {"sha": "e4e554b65bf37fa4adb85a6be40c83d2d9538998", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -17,7 +17,6 @@ region parameterized.\n \n */\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use metadata::csearch;\n@@ -26,7 +25,7 @@ use middle::ty::{region_variance, rv_covariant, rv_invariant};\n use middle::ty::{rv_contravariant, FreeRegion};\n use middle::ty;\n \n-use core::hashmap::{HashMap, HashSet};\n+use std::hashmap::{HashMap, HashSet};\n use syntax::ast_map;\n use syntax::codemap::span;\n use syntax::print::pprust;"}, {"sha": "06147894d44624b43e5656198d5369ab4fa6d667", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::Session;\n use metadata::csearch::{each_path, get_trait_method_def_ids};\n@@ -40,11 +39,11 @@ use syntax::visit::{visit_foreign_item, visit_item};\n use syntax::visit::{visit_mod, visit_ty, vt};\n use syntax::opt_vec::OptVec;\n \n-use core::str;\n-use core::uint;\n-use core::vec;\n-use core::hashmap::{HashMap, HashSet};\n-use core::util;\n+use std::str;\n+use std::uint;\n+use std::vec;\n+use std::hashmap::{HashMap, HashSet};\n+use std::util;\n \n // Definition mapping\n pub type DefMap = @mut HashMap<node_id,def>;\n@@ -1308,7 +1307,7 @@ impl Resolver {\n                 visit_item(item, (parent, visitor));\n             }\n \n-            item_impl(_, Some(_), ty, ref methods) => {\n+            item_impl(_, Some(_), _ty, ref _methods) => {\n                 visit_item(item, (parent, visitor));\n             }\n "}, {"sha": "e5f5315a19c2c9dc38eb752b9991ae529b168e44", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n // Type substitutions.\n \n-use core::prelude::*;\n \n use middle::ty;\n use util::ppaux::Repr;"}, {"sha": "1d69b20f5c446c5882387077f1023dbe3094592a", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -147,7 +147,6 @@\n  *\n  */\n \n-use core::prelude::*;\n \n use back::abi;\n use lib::llvm::{llvm, ValueRef, BasicBlockRef};\n@@ -172,8 +171,8 @@ use middle::trans::type_of;\n use middle::ty;\n use util::common::indenter;\n \n-use core::hashmap::HashMap;\n-use core::vec;\n+use std::hashmap::HashMap;\n+use std::vec;\n use syntax::ast;\n use syntax::ast::ident;\n use syntax::ast_util::path_to_ident;\n@@ -304,7 +303,7 @@ pub fn variant_opt(bcx: block, pat_id: ast::node_id)\n                                adt::represent_node(bcx, pat_id))\n                 }\n             }\n-            ::core::util::unreachable();\n+            ::std::util::unreachable();\n         }\n         ast::def_fn(*) |\n         ast::def_struct(_) => {"}, {"sha": "5417d6f6cc6617e9f01bf6a18ea89d8ea0bfdf46", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -44,10 +44,10 @@\n  *   taken to it, implementing them for Rust seems difficult.\n  */\n \n-use core::container::Map;\n-use core::libc::c_ulonglong;\n-use core::option::{Option, Some, None};\n-use core::vec;\n+use std::container::Map;\n+use std::libc::c_ulonglong;\n+use std::option::{Option, Some, None};\n+use std::vec;\n \n use lib::llvm::{ValueRef, True, IntEQ, IntNE};\n use middle::trans::_match;\n@@ -86,7 +86,7 @@ pub enum Repr {\n      * it represents the other case, which is inhabited by at most one value\n      * (and all other fields are undefined/unused).\n      *\n-     * For example, `core::option::Option` instantiated at a safe pointer type\n+     * For example, `std::option::Option` instantiated at a safe pointer type\n      * is represented such that `None` is a null pointer and `Some` is the\n      * identity function.\n      */"}, {"sha": "fadeab0f1f7708bdac1bd52a70889d07c414c0c7", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,7 +12,6 @@\n # Translation of inline assembly.\n */\n \n-use core::prelude::*;\n \n use lib;\n use middle::trans::build::*;\n@@ -22,7 +21,7 @@ use middle::ty;\n \n use middle::trans::type_::Type;\n \n-use core::str;\n+use std::str;\n use syntax::ast;\n \n // Take an inline assembly expression and splat it out via LLVM"}, {"sha": "f210a9eb3b726a70936c0850cbcde4cc6a6d59a0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -23,7 +23,6 @@\n //     but many TypeRefs correspond to one ty::t; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-use core::prelude::*;\n \n use back::link::{mangle_exported_name};\n use back::{link, abi};\n@@ -63,15 +62,15 @@ use util::ppaux::{Repr, ty_to_str};\n \n use middle::trans::type_::Type;\n \n-use core::hash;\n-use core::hashmap::{HashMap, HashSet};\n-use core::int;\n-use core::io;\n-use core::libc::c_uint;\n-use core::str;\n-use core::uint;\n-use core::vec;\n-use core::local_data;\n+use std::hash;\n+use std::hashmap::{HashMap, HashSet};\n+use std::int;\n+use std::io;\n+use std::libc::c_uint;\n+use std::str;\n+use std::uint;\n+use std::vec;\n+use std::local_data;\n use extra::time;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_name};\n@@ -800,10 +799,10 @@ pub fn invoke(bcx: block, llfn: ValueRef, llargs: ~[ValueRef])\n     if need_invoke(bcx) {\n         unsafe {\n             debug!(\"invoking %x at %x\",\n-                   ::core::cast::transmute(llfn),\n-                   ::core::cast::transmute(bcx.llbb));\n+                   ::std::cast::transmute(llfn),\n+                   ::std::cast::transmute(bcx.llbb));\n             for llargs.iter().advance |&llarg| {\n-                debug!(\"arg: %x\", ::core::cast::transmute(llarg));\n+                debug!(\"arg: %x\", ::std::cast::transmute(llarg));\n             }\n         }\n         let normal_bcx = sub_block(bcx, \"normal return\");\n@@ -816,10 +815,10 @@ pub fn invoke(bcx: block, llfn: ValueRef, llargs: ~[ValueRef])\n     } else {\n         unsafe {\n             debug!(\"calling %x at %x\",\n-                   ::core::cast::transmute(llfn),\n-                   ::core::cast::transmute(bcx.llbb));\n+                   ::std::cast::transmute(llfn),\n+                   ::std::cast::transmute(bcx.llbb));\n             for llargs.iter().advance |&llarg| {\n-                debug!(\"arg: %x\", ::core::cast::transmute(llarg));\n+                debug!(\"arg: %x\", ::std::cast::transmute(llarg));\n             }\n         }\n         let llresult = Call(bcx, llfn, llargs);"}, {"sha": "46a8cb306f8b17beef7bbb53e239175d6edc6c39", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use lib::llvm::llvm;\n use lib::llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect};\n@@ -22,11 +21,11 @@ use syntax::codemap::span;\n use middle::trans::base;\n use middle::trans::type_::Type;\n \n-use core::cast;\n-use core::libc::{c_uint, c_ulonglong, c_char};\n-use core::hashmap::HashMap;\n-use core::str;\n-use core::vec;\n+use std::cast;\n+use std::libc::{c_uint, c_ulonglong, c_char};\n+use std::hashmap::HashMap;\n+use std::str;\n+use std::vec;\n \n pub fn terminate(cx: block, _: &str) {\n     cx.terminated = true;"}, {"sha": "4cbc9cd417f271d4321e428d367b1293ce837be9", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,9 +15,9 @@ use middle::trans::common::*;\n \n use middle::trans::type_::Type;\n \n-use core::libc::c_uint;\n-use core::option;\n-use core::vec;\n+use std::libc::c_uint;\n+use std::option;\n+use std::vec;\n \n pub trait ABIInfo {\n     fn compute_info(&self, atys: &[Type], rty: Type, ret_def: bool) -> FnType;"}, {"sha": "7eac2df10b6c78656df2deaad45f9d9f07344b5e", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -14,8 +14,8 @@ use middle::trans::cabi::{ABIInfo, FnType, LLVMType};\n \n use middle::trans::type_::Type;\n \n-use core::option::{Option, None, Some};\n-use core::uint;\n+use std::option::{Option, None, Some};\n+use std::uint;\n \n fn align_up_to(off: uint, a: uint) -> uint {\n     return (off + a - 1u) / a * a;"}, {"sha": "c95ae994cebea3675dbc15d0a8628e7c56b21839", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::libc::c_uint;\n-use core::uint;\n-use core::vec;\n+use std::libc::c_uint;\n+use std::uint;\n+use std::vec;\n use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n use lib::llvm::{Attribute, StructRetAttribute};\n use middle::trans::context::task_llcx;"}, {"sha": "8c5a2e70484bcd73ce8f5ce094427578de6989ac", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session::{os_win32, os_macos};\n use lib::llvm::*;"}, {"sha": "8fa86ea77aba90fbd6c720c2ea738a78c1143291", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -18,10 +18,10 @@ use middle::trans::cabi::*;\n \n use middle::trans::type_::Type;\n \n-use core::option;\n-use core::option::Option;\n-use core::uint;\n-use core::vec;\n+use std::option;\n+use std::option::Option;\n+use std::uint;\n+use std::vec;\n \n #[deriving(Eq)]\n enum RegClass {"}, {"sha": "41f1d0e61e53da6b5d07a17f2ef31ddb4e45c302", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,16 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//!\n-//\n-// Handles translation of callees as well as other call-related\n-// things.  Callees are a superset of normal rust values and sometimes\n-// have different representations.  In particular, top-level fn items\n-// and methods are represented as just a fn ptr and not a full\n-// closure.\n-\n-use core::prelude::*;\n-use core::vec;\n+/*!\n+ * Handles translation of callees as well as other call-related\n+ * things.  Callees are a superset of normal rust values and sometimes\n+ * have different representations.  In particular, top-level fn items\n+ * and methods are represented as just a fn ptr and not a full\n+ * closure.\n+ */\n+\n+use std::vec;\n \n use back::abi;\n use driver::session;"}, {"sha": "09b515f1918da01ec4e81519f7c0869b24fd428f", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::abi;\n use back::link::{mangle_internal_name_by_path_and_seq};\n@@ -28,8 +27,8 @@ use util::ppaux::ty_to_str;\n \n use middle::trans::type_::Type;\n \n-use core::str;\n-use core::vec;\n+use std::str;\n+use std::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n use syntax::ast_util;"}, {"sha": "539397c8b1a4d4927ac23cc5619e236b33cb7b71", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Code that is useful in various trans modules.\n \n-use core::prelude::*;\n \n use driver::session;\n use driver::session::Session;\n@@ -31,14 +30,14 @@ use util::ppaux::{Repr};\n \n use middle::trans::type_::Type;\n \n-use core::cast::transmute;\n-use core::cast;\n-use core::hashmap::{HashMap};\n-use core::libc::{c_uint, c_longlong, c_ulonglong};\n-use core::to_bytes;\n-use core::str;\n-use core::vec::raw::to_ptr;\n-use core::vec;\n+use std::cast::transmute;\n+use std::cast;\n+use std::hashmap::{HashMap};\n+use std::libc::{c_uint, c_longlong, c_ulonglong};\n+use std::to_bytes;\n+use std::str;\n+use std::vec::raw::to_ptr;\n+use std::vec;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt};\n use syntax::codemap::span;"}, {"sha": "9566f41a45fd7bd868f7d8ccf4c587f7f1c45f4a", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::abi;\n use lib::llvm::{llvm, ConstFCmp, ConstICmp, SetLinkage, PrivateLinkage, ValueRef, Bool, True};\n@@ -31,8 +30,8 @@ use util::ppaux::{Repr, ty_to_str};\n \n use middle::trans::type_::Type;\n \n-use core::libc::c_uint;\n-use core::str;\n+use std::libc::c_uint;\n+use std::str;\n use syntax::{ast, ast_util, ast_map};\n \n pub fn const_lit(cx: &mut CrateContext, e: &ast::expr, lit: ast::lit)"}, {"sha": "c2a32ae041e4db443c38fc2e474c310a98b25479", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::{upcall};\n use driver::session;\n@@ -26,10 +25,10 @@ use middle::ty;\n \n use middle::trans::type_::Type;\n \n-use core::hash;\n-use core::hashmap::{HashMap, HashSet};\n-use core::str;\n-use core::local_data;\n+use std::hash;\n+use std::hashmap::{HashMap, HashSet};\n+use std::str;\n+use std::local_data;\n use extra::time;\n use syntax::ast;\n "}, {"sha": "dc88ecbe936b09f230b91bc2d15557d964241b95", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::link;\n use lib;\n@@ -26,8 +25,8 @@ use util::ppaux;\n \n use middle::trans::type_::Type;\n \n-use core::str;\n-use core::vec;\n+use std::str;\n+use std::vec;\n use syntax::ast;\n use syntax::ast::ident;\n use syntax::ast_map::path_mod;"}, {"sha": "0fe3dfe80c8c9ebe0c89b64d5ed3732821b74b54", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -87,7 +87,6 @@\n  * methods themselves.  Most are only suitable for some types of\n  * values. */\n \n-use core::prelude::*;\n \n use lib;\n use lib::llvm::ValueRef;\n@@ -105,7 +104,7 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n-use core::uint;\n+use std::uint;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;"}, {"sha": "ac5eb6b067c9ae57d294868eb7a9a3716013eda5", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -41,7 +41,6 @@ This file consists of three conceptual sections:\n \n */\n \n-use core::prelude::*;\n \n use driver::session;\n use lib::llvm::llvm;\n@@ -54,14 +53,14 @@ use middle::trans;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n-use core::hashmap::HashMap;\n-use core::libc;\n-use core::libc::{c_uint, c_ulonglong};\n-use core::cmp;\n-use core::ptr;\n-use core::str::as_c_str;\n-use core::sys;\n-use core::vec;\n+use std::hashmap::HashMap;\n+use std::libc;\n+use std::libc::{c_uint, c_ulonglong};\n+use std::cmp;\n+use std::ptr;\n+use std::str::as_c_str;\n+use std::sys;\n+use std::vec;\n use syntax::codemap::span;\n use syntax::{ast, codemap, ast_util, ast_map};\n use syntax::parse::token;"}, {"sha": "1511f25414071e2c052c162a234b33d31363efc3", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -119,7 +119,6 @@ lvalues are *never* stored by value.\n \n */\n \n-use core::prelude::*;\n \n use back::abi;\n use lib::llvm::{ValueRef, llvm};\n@@ -154,9 +153,9 @@ use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n-use core::cast::transmute;\n-use core::hashmap::HashMap;\n-use core::vec;\n+use std::cast::transmute;\n+use std::hashmap::HashMap;\n+use std::vec;\n use syntax::print::pprust::{expr_to_str};\n use syntax::ast;\n use syntax::codemap;\n@@ -910,8 +909,6 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         let (bcx, base, len) =\n             base_datum.get_vec_base_and_len(bcx, index_expr.span,\n                                             index_expr.id, 0);\n-        let mut bcx = bcx;\n-        let mut base = base;\n         let mut len = len;\n \n         if ty::type_is_str(base_ty) {"}, {"sha": "bea702f938d9457dbc01293e35c1b5ea63cb563a", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::{link, abi};\n use lib::llvm::{ValueRef};\n@@ -33,8 +32,8 @@ use middle::ty;\n use middle::ty::FnSig;\n use util::ppaux::ty_to_str;\n \n-use core::uint;\n-use core::vec;\n+use std::uint;\n+use std::vec;\n use syntax::codemap::span;\n use syntax::{ast, ast_util};\n use syntax::{attr, ast_map};"}, {"sha": "68cf66789bfde2e4d7448717dfc934b1f213ed14", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,7 +12,6 @@\n //\n // Code relating to taking, dropping, etc as well as type descriptors.\n \n-use core::prelude::*;\n \n use back::abi;\n use back::link::*;\n@@ -37,9 +36,9 @@ use util::ppaux::ty_to_short_str;\n \n use middle::trans::type_::Type;\n \n-use core::io;\n-use core::libc::c_uint;\n-use core::str;\n+use std::io;\n+use std::libc::c_uint;\n+use std::str;\n use extra::time;\n use syntax::ast;\n "}, {"sha": "893ef3feb5656d637344c3fa2fa6347b5fb4e519", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use metadata::csearch;\n use middle::astencode;\n@@ -18,7 +17,7 @@ use middle::trans::common::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n-use core::vec;\n+use std::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;"}, {"sha": "9792e623388d234b8e5f94a0449fac36afe2713e", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::abi;\n use lib::llvm::llvm;\n@@ -33,7 +32,7 @@ use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n-use core::vec;\n+use std::vec;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n use syntax::{ast, ast_map};"}, {"sha": "4ae8554d7143ca2c8bbce254b1fd99e34c697377", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use back::link::mangle_exported_name;\n use driver::session;\n@@ -31,7 +30,7 @@ use middle::ty::{FnSig};\n use middle::typeck;\n use util::ppaux::{Repr,ty_to_str};\n \n-use core::vec;\n+use std::vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_map::path_name;"}, {"sha": "9e227da49f8372f7afbbe37e91f4baa59cb5993e", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -25,9 +25,9 @@ use middle::trans::type_of::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n-use core::libc::c_uint;\n-use core::option::None;\n-use core::vec;\n+use std::libc::c_uint;\n+use std::option::None;\n+use std::vec;\n use syntax::ast::def_id;\n use syntax::ast;\n use syntax::ast_map::path_name;"}, {"sha": "4a9869ca0072ae2594a595900b2c7e612ea03cf1", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -29,7 +29,7 @@ use util::ppaux::ty_to_str;\n \n use middle::trans::type_::Type;\n \n-use core::option::None;\n+use std::option::None;\n use syntax::ast;\n use syntax::codemap;\n "}, {"sha": "e52d33fc6e9ae3b437edd474dcb1f9e6c016d42c", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use lib::llvm::{llvm, TypeRef, Bool, False, True, TypeKind};\n use lib::llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};\n@@ -21,10 +20,10 @@ use middle::trans::base;\n use syntax::ast;\n use syntax::abi::{Architecture, X86, X86_64, Arm, Mips};\n \n-use core::vec;\n-use core::cast;\n+use std::vec;\n+use std::cast;\n \n-use core::libc::{c_uint};\n+use std::libc::{c_uint};\n \n #[deriving(Eq)]\n pub struct Type {"}, {"sha": "481f08ee192dd56638f8bfc3549491d9abf6ca30", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::trans::adt;\n use middle::trans::common::*;"}, {"sha": "6f8c272797343336021c2726f3e8a294f2f0846a", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -33,9 +33,9 @@ use middle::trans::inline;\n use middle::ty;\n use middle::typeck;\n \n-use core::option::{Some, None};\n-use core::uint;\n-use core::vec;\n+use std::option::{Some, None};\n+use std::uint;\n+use std::vec;\n use extra::list::{List, Cons, Nil};\n use extra::list;\n use syntax::ast;"}, {"sha": "068ce4e2b33bca3b6b29dc27b9a2a0b7bfc76c6c", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -14,7 +14,6 @@\n //! and for each in debugging (e.g., so you can use\n //! `RUST_LOG=rustc::middle::trans::write_guard`).\n \n-use core::prelude::*;\n \n use lib::llvm::ValueRef;\n use middle::borrowck::{RootInfo, root_map_key, DynaImm, DynaMut};"}, {"sha": "4ed21d73f3e7853e5c4f236481e36e9182cb71c2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session;\n use metadata::csearch;\n@@ -27,16 +26,16 @@ use util::ppaux::{Repr, UserString};\n use util::common::{indenter};\n use util::enum_set::{EnumSet, CLike};\n \n-use core::cast;\n-use core::cmp;\n-use core::hashmap::{HashMap, HashSet};\n-use core::iter;\n-use core::ops;\n-use core::ptr::to_unsafe_ptr;\n-use core::to_bytes;\n-use core::u32;\n-use core::uint;\n-use core::vec;\n+use std::cast;\n+use std::cmp;\n+use std::hashmap::{HashMap, HashSet};\n+use std::iter;\n+use std::ops;\n+use std::ptr::to_unsafe_ptr;\n+use std::to_bytes;\n+use std::u32;\n+use std::uint;\n+use std::vec;\n use syntax::ast::*;\n use syntax::ast_util::is_local;\n use syntax::ast_util;"}, {"sha": "1d9895d29503843c737a6c8d35b19ac5b3206ee6", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -52,7 +52,6 @@\n  * an rptr (`&r.T`) use the region `r` that appears in the rptr.\n  */\n \n-use core::prelude::*;\n \n use middle::const_eval;\n use middle::ty::{substs};\n@@ -63,8 +62,8 @@ use middle::typeck::rscope::{region_scope, RegionError};\n use middle::typeck::rscope::RegionParamNames;\n use middle::typeck::lookup_def_tcx;\n \n-use core::result;\n-use core::vec;\n+use std::result;\n+use std::vec;\n use syntax::abi::AbiSet;\n use syntax::{ast, ast_util};\n use syntax::codemap::span;"}, {"sha": "c2bf4594d30e1ae8b6ba97925f2d41132c7fecb5", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n use middle::ty;\n@@ -18,7 +17,7 @@ use middle::typeck::check::{instantiate_path, lookup_def};\n use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::require_same_types;\n \n-use core::hashmap::{HashMap, HashSet};\n+use std::hashmap::{HashMap, HashSet};\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;"}, {"sha": "7ca78068f07022a49e2cee7a97006b97a60a0779", "filename": "src/librustc/middle/typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -13,8 +13,8 @@ use middle::ty;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::infer;\n \n-use core::result::{Err, Ok};\n-use core::result;\n+use std::result::{Err, Ok};\n+use std::result;\n use syntax::ast;\n use syntax::codemap::span;\n "}, {"sha": "95584889218ab031c800e0e8cdb5c25f82a8d7c2", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -79,7 +79,6 @@ obtained the type `Foo`, we would never match this method.\n \n */\n \n-use core::prelude::*;\n \n use middle::resolve;\n use middle::ty::*;\n@@ -95,10 +94,10 @@ use middle::typeck::{method_self, method_static, method_trait, method_super};\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use util::common::indenter;\n \n-use core::hashmap::HashSet;\n-use core::result;\n-use core::uint;\n-use core::vec;\n+use std::hashmap::HashSet;\n+use std::result;\n+use std::uint;\n+use std::vec;\n use extra::list::Nil;\n use syntax::ast::{def_id, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id};"}, {"sha": "f50b38e6f6cf92f2693bf3a595dcc95d886093b3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -76,7 +76,6 @@ type parameter).\n \n */\n \n-use core::prelude::*;\n \n use middle::const_eval;\n use middle::pat_util::pat_id_map;\n@@ -111,11 +110,11 @@ use util::ppaux::{bound_region_ptr_to_str};\n use util::ppaux;\n \n \n-use core::cast::transmute;\n-use core::hashmap::HashMap;\n-use core::result;\n-use core::util::replace;\n-use core::vec;\n+use std::cast::transmute;\n+use std::hashmap::HashMap;\n+use std::result;\n+use std::util::replace;\n+use std::vec;\n use extra::list::Nil;\n use syntax::abi::AbiSet;\n use syntax::ast::{provided, required};"}, {"sha": "80faad15695c35a131c3b02a4013a67f54f11c9d", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -27,7 +27,6 @@ this point a bit better.\n \n */\n \n-use core::prelude::*;\n \n use middle::freevars::get_freevars;\n use middle::ty::{re_scope};\n@@ -39,8 +38,8 @@ use middle::typeck::infer::resolve_type;\n use util::ppaux::{note_and_explain_region, ty_to_str, region_to_str};\n use middle::pat_util;\n \n-use core::result;\n-use core::uint;\n+use std::result;\n+use std::uint;\n use syntax::ast::{ManagedSigil, OwnedSigil, BorrowedSigil};\n use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n use syntax::ast;\n@@ -788,7 +787,6 @@ pub mod guarantor {\n      * but more special purpose.\n      */\n \n-    use core::prelude::*;\n \n     use middle::typeck::check::regionck::{Rcx, infallibly_mk_subr};\n     use middle::typeck::check::regionck::mk_subregion_due_to_derefence;\n@@ -797,7 +795,7 @@ pub mod guarantor {\n     use syntax::codemap::span;\n     use util::ppaux::{ty_to_str};\n \n-    use core::uint;\n+    use std::uint;\n \n     pub fn for_addr_of(rcx: @mut Rcx, expr: @ast::expr, base: @ast::expr) {\n         /*!"}, {"sha": "02c003b7525ef40477b8a9c59508d93f8e1df085", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n // #[warn(deprecated_mode)];\n \n-use core::prelude::*;\n \n use middle::ty;\n "}, {"sha": "7a3c02efebec12e53a4c7d8f8fbbe338a553cd00", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty::param_ty;\n use middle::ty;\n@@ -24,8 +23,8 @@ use util::common::indenter;\n use util::ppaux::tys_to_str;\n use util::ppaux;\n \n-use core::hashmap::HashSet;\n-use core::result;\n+use std::hashmap::HashSet;\n+use std::result;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;"}, {"sha": "e5248e01ed79677148ae663cb8a94135ff8b12a4", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,7 +12,6 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-use core::prelude::*;\n \n use middle::pat_util;\n use middle::ty;"}, {"sha": "8748d3dcd23be76cefbf11375c408814bf32e0ae", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -14,7 +14,6 @@\n // has at most one implementation for each type. Then we build a mapping from\n // each trait in the system to its implementations.\n \n-use core::prelude::*;\n \n use metadata::csearch::{each_path, get_impl_trait};\n use metadata::csearch;\n@@ -37,7 +36,7 @@ use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar};\n use middle::typeck::infer::{resolve_nested_tvar, resolve_type};\n-use syntax::ast::{crate, def_id, def_mod, def_struct, def_ty};\n+use syntax::ast::{crate, def_id, def_struct, def_ty};\n use syntax::ast::{item, item_enum, item_impl, item_mod, item_struct};\n use syntax::ast::{local_crate, method, trait_ref, ty_path};\n use syntax::ast;\n@@ -52,10 +51,10 @@ use syntax::visit::{Visitor, SimpleVisitor};\n use syntax::visit::{visit_mod};\n use util::ppaux::ty_to_str;\n \n-use core::hashmap::{HashMap, HashSet};\n-use core::result::Ok;\n-use core::uint;\n-use core::vec;\n+use std::hashmap::{HashMap, HashSet};\n+use std::result::Ok;\n+use std::uint;\n+use std::vec;\n \n pub struct UniversalQuantificationResult {\n     monotype: t,"}, {"sha": "3a4fa82906d1668f8da371ec1ea7eccf50e8e601", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -30,7 +30,6 @@ are represented as `ty_param()` instances.\n \n */\n \n-use core::prelude::*;\n \n use metadata::csearch;\n use middle::ty::{substs, ty_param_bounds_and_ty};\n@@ -47,8 +46,8 @@ use util::common::pluralize;\n use util::ppaux;\n use util::ppaux::UserString;\n \n-use core::result;\n-use core::vec;\n+use std::result;\n+use std::vec;\n use syntax::abi::AbiSet;\n use syntax::ast::{RegionTyParamBound, TraitTyParamBound};\n use syntax::ast;"}, {"sha": "63f882f5e541e8ca7d3fde5d2618302aab68325a", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -64,7 +64,6 @@ we may want to adjust precisely when coercions occur.\n \n */\n \n-use core::prelude::*;\n \n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowFn};\n use middle::ty::{AutoDerefRef};"}, {"sha": "adc263cbc4d8b248cd155539eb2eec6c681ed2d4", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -54,7 +54,6 @@\n // terms of error reporting, although we do not do that properly right\n // now.\n \n-use core::prelude::*;\n \n use middle::ty::{FloatVar, FnSig, IntVar, TyVar};\n use middle::ty::{IntType, UintType, substs};\n@@ -64,12 +63,12 @@ use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n-use middle::typeck::infer::unify::{InferCtxtMethods, UnifyInferCtxtMethods};\n+use middle::typeck::infer::unify::{InferCtxtMethods};\n use middle::typeck::infer::{InferCtxt, cres, ures};\n use util::common::indent;\n \n-use core::result::{iter_vec2, map_vec2};\n-use core::vec;\n+use std::result::{iter_vec2, map_vec2};\n+use std::vec;\n use syntax::ast::{Onceness, purity};\n use syntax::ast;\n use syntax::opt_vec;"}, {"sha": "0dd45919be14c2e8e979320cca751286f94d1922", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty::{BuiltinBounds};\n use middle::ty::RegionVid;"}, {"sha": "73e43c6c07629baa612ffb3760629e6a35b431fc", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -32,7 +32,6 @@\n  * a lattice.\n  */\n \n-use core::prelude::*;\n \n use middle::ty::{RegionVid, TyVar, Vid};\n use middle::ty;"}, {"sha": "ad063be86146a7f7a50717df6677cf4275e5bff5", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty::{BuiltinBounds};\n use middle::ty::RegionVid;"}, {"sha": "28d943b5807971ed73af2530750ba16bcd9bd656", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -242,7 +242,6 @@ section on \"Type Combining\" below for details.\n \n */\n \n-use core::prelude::*;\n \n pub use middle::ty::IntVarValue;\n pub use middle::typeck::infer::resolve::resolve_and_force_all_but_regions;\n@@ -267,8 +266,8 @@ use middle::typeck::isr_alist;\n use util::common::indent;\n use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str};\n \n-use core::result;\n-use core::vec;\n+use std::result;\n+use std::vec;\n use extra::list::Nil;\n use extra::smallintmap::SmallIntMap;\n use syntax::ast::{m_imm, m_mutbl};"}, {"sha": "bad4cb2fe8772a25597a47ecf03745512d9590ec", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -536,7 +536,6 @@ more convincing in the future.\n \n */\n \n-use core::prelude::*;\n \n use middle::ty;\n use middle::ty::{FreeRegion, Region, RegionVid};\n@@ -546,10 +545,10 @@ use middle::typeck::infer::cres;\n use util::common::indenter;\n use util::ppaux::note_and_explain_region;\n \n-use core::cell::Cell;\n-use core::hashmap::{HashMap, HashSet};\n-use core::uint;\n-use core::vec;\n+use std::cell::Cell;\n+use std::hashmap::{HashMap, HashSet};\n+use std::uint;\n+use std::vec;\n use syntax::codemap::span;\n use syntax::ast;\n "}, {"sha": "2326e2e10efe51ba5e2e898abca647e82640e162", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -46,7 +46,6 @@\n // future).  If you want to resolve everything but one type, you are\n // probably better off writing `resolve_all - resolve_ivar`.\n \n-use core::prelude::*;\n \n use middle::ty::{FloatVar, FloatVid, IntVar, IntVid, RegionVid, TyVar, TyVid};\n use middle::ty::{type_is_bot, IntType, UintType};\n@@ -58,7 +57,7 @@ use middle::typeck::infer::unify::{Root, UnifyInferCtxtMethods};\n use util::common::{indent, indenter};\n use util::ppaux::ty_to_str;\n \n-use core::vec;\n+use std::vec;\n use syntax::ast;\n \n pub static resolve_nested_tvar: uint = 0b0000000001;"}, {"sha": "905e86a73f0646389415e7439002c45a607e808b", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty::{BuiltinBounds};\n use middle::ty;"}, {"sha": "18594f35295a6ee4f5e488af9bbb092872c814c8", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty::{FnSig, Vid};\n use middle::ty::IntVarValue;\n@@ -18,7 +17,7 @@ use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::unify::{Redirect, Root, VarValue};\n use util::ppaux::{mt_to_str, ty_to_str, trait_ref_to_str};\n \n-use core::uint;\n+use std::uint;\n use syntax::ast;\n \n pub trait InferStr {"}, {"sha": "a7c3350d1d1787cad89aceac3cb4f6c205ad4087", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use extra::smallintmap::SmallIntMap;\n "}, {"sha": "4eaa0b69d9ccd3b09515f44046a9014f629be229", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -48,7 +48,6 @@ independently:\n \n */\n \n-use core::prelude::*;\n \n use driver::session;\n \n@@ -58,8 +57,8 @@ use util::common::time;\n use util::ppaux::Repr;\n use util::ppaux;\n \n-use core::hashmap::HashMap;\n-use core::result;\n+use std::hashmap::HashMap;\n+use std::result;\n use extra::list::List;\n use extra::list;\n use syntax::codemap::span;"}, {"sha": "91c875559fec8ef18d6da73134f4fa059e417259", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use middle::ty;\n \n-use core::result;\n+use std::result;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::opt_vec::OptVec;"}, {"sha": "9c0dfb465306d290d2f782d7438ee615dc0ce6e6", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -21,17 +21,9 @@\n #[allow(non_camel_case_types)];\n #[deny(deprecated_pattern)];\n \n-#[no_core];\n-#[no_std];\n-\n-extern mod core(name = \"std\");\n-extern mod extra(name = \"extra\");\n+extern mod extra;\n extern mod syntax;\n \n-extern mod std(name = \"std\", vers = \"0.7-pre\");\n-\n-use core::prelude::*;\n-\n use driver::driver::{host_triple, optgroups, early_error};\n use driver::driver::{str_input, file_input, build_session_options};\n use driver::driver::{build_session, build_configuration, parse_pretty};\n@@ -40,13 +32,13 @@ use driver::driver::{compile_input};\n use driver::session;\n use middle::lint;\n \n-use core::io;\n-use core::os;\n-use core::result;\n-use core::str;\n-use core::task;\n-use core::uint;\n-use core::vec;\n+use std::io;\n+use std::os;\n+use std::result;\n+use std::str;\n+use std::task;\n+use std::uint;\n+use std::vec;\n use extra::getopts::{groups, opt_present};\n use extra::getopts;\n use syntax::codemap;\n@@ -120,15 +112,17 @@ pub mod lib {\n \n // A curious inner module that allows ::std::foo to be available in here for\n // macros.\n+/*\n mod std {\n-    pub use core::cmp;\n-    pub use core::os;\n-    pub use core::str;\n-    pub use core::sys;\n-    pub use core::to_bytes;\n-    pub use core::unstable;\n+    pub use std::cmp;\n+    pub use std::os;\n+    pub use std::str;\n+    pub use std::sys;\n+    pub use std::to_bytes;\n+    pub use std::unstable;\n     pub use extra::serialize;\n }\n+*/\n \n pub fn version(argv0: &str) {\n     let mut vers = ~\"unknown version\";\n@@ -193,7 +187,7 @@ pub fn describe_debug_flags() {\n \n pub fn run_compiler(args: &~[~str], demitter: diagnostic::Emitter) {\n     // Don't display log spew by default. Can override with RUST_LOG.\n-    ::core::logging::console_off();\n+    ::std::logging::console_off();\n \n     let mut args = /*bad*/copy *args;\n     let binary = args.shift().to_managed();\n@@ -305,7 +299,7 @@ fails without recording a fatal error then we've encountered a compiler\n bug and need to present an error.\n */\n pub fn monitor(f: ~fn(diagnostic::Emitter)) {\n-    use core::comm::*;\n+    use std::comm::*;\n     let (p, ch) = stream();\n     let ch = SharedChan::new(ch);\n     let ch_capture = ch.clone();"}, {"sha": "1e2e30548ee986d4af28efe56e3730e6ff87e379", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use syntax::ast;\n use syntax::codemap::{span};\n use syntax::visit;\n \n-use core::hashmap::HashSet;\n-use core::io;\n+use std::hashmap::HashSet;\n+use std::io;\n use extra;\n \n pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {"}, {"sha": "2bdb6583b2304a962cc2f7f3255eb8a694e58fba", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n #[deriving(Eq, IterBytes)]\n pub struct EnumSet<E> {\n@@ -96,10 +95,9 @@ impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n-    use core::cast;\n-    use core::iter;\n+    use std::cast;\n+    use std::iter;\n \n     use util::enum_set::*;\n "}, {"sha": "80344a9894fb144a5a614faf57df0a47cbbfdb63", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use metadata::encoder;\n use middle::ty::{ReSkolemized, ReVar};\n@@ -32,8 +31,6 @@ use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n \n-use core::vec;\n-\n /// Produces a string suitable for debugging output.\n pub trait Repr {\n     fn repr(&self, tcx: ctxt) -> ~str;"}, {"sha": "9c586ae95d154ce5048103e8c8c2f16a1ea4c847", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -17,13 +17,12 @@ query AST-related information, shielding the rest of Rustdoc from its\n non-sendableness.\n */\n \n-use core::prelude::*;\n \n use parse;\n \n-use core::cell::Cell;\n-use core::comm::{stream, SharedChan, Port};\n-use core::task;\n+use std::cell::Cell;\n+use std::comm::{stream, SharedChan, Port};\n+use std::task;\n use rustc::driver::driver;\n use rustc::driver::session::Session;\n use rustc::driver::session::{basic_options, options};"}, {"sha": "7655e173e4e2607c3165f6452ca38190c589022c", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,7 +15,6 @@ The attribute parser provides methods for pulling documentation out of\n an AST's attributes.\n */\n \n-use core::prelude::*;\n \n use syntax::ast;\n use syntax::attr;\n@@ -71,7 +70,6 @@ pub fn parse_hidden(attrs: ~[ast::attribute]) -> bool {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n     use syntax::ast;\n     use syntax;\n     use super::{parse_hidden, parse_crate, parse_desc};"}, {"sha": "3efebe854e48a6be8e0d0d9355647b00675f502f", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -16,7 +16,6 @@ corresponding AST nodes. The information gathered here is the basis\n of the natural-language documentation for a crate.\n */\n \n-use core::prelude::*;\n \n use astsrv;\n use attr_parser;\n@@ -27,7 +26,7 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::vec;\n+use std::vec;\n use syntax::ast;\n use syntax::ast_map;\n \n@@ -235,7 +234,6 @@ fn fold_impl(\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use astsrv;\n     use attr_pass::run;"}, {"sha": "dd929fb143b7caf0086fe8e960875b804db60ff1", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::cell::Cell;\n-use core::os;\n-use core::result::Result;\n-use core::result;\n-use core::run::ProcessOutput;\n-use core::run;\n-use core::vec;\n+\n+use std::cell::Cell;\n+use std::os;\n+use std::result::Result;\n+use std::result;\n+use std::run::ProcessOutput;\n+use std::run;\n+use std::vec;\n use extra::getopts;\n \n /// The type of document to output\n@@ -72,7 +71,7 @@ fn opts() -> ~[(getopts::Opt, ~str)] {\n }\n \n pub fn usage() {\n-    use core::io::println;\n+    use std::io::println;\n \n     println(\"Usage: rustdoc [options] <cratefile>\\n\");\n     println(\"Options:\\n\");\n@@ -245,11 +244,10 @@ pub fn maybe_find_pandoc(\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use config::*;\n-    use core::result;\n-    use core::run::ProcessOutput;\n+    use std::result;\n+    use std::run::ProcessOutput;\n \n     fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n         parse_config_(args, mock_process_output)"}, {"sha": "b6728e00fe41ebf771a839a9af2bb52d80951a6a", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -21,7 +21,6 @@\n  * tests on this file\n  */\n \n-use core::prelude::*;\n \n /// The base price of a muffin on a non-holiday\n static price_of_a_muffin: float = 70f;"}, {"sha": "74d5d467413738b0cab7c811ac0381edd852d0e5", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,7 +15,6 @@ If the first paragraph of a long description is short enough then it\n is interpreted as the brief description.\n */\n \n-use core::prelude::*;\n \n use astsrv;\n use doc::ItemUtils;\n@@ -24,7 +23,7 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::util;\n+use std::util;\n \n pub fn mk_pass() -> Pass {\n     Pass {\n@@ -176,7 +175,6 @@ pub fn paragraphs(s: &str) -> ~[~str] {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use astsrv;\n     use attr_pass;"}, {"sha": "b45550c06e44ab40385cf877acd5092bc74f795e", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,11 +10,10 @@\n \n //! The document model\n \n-use core::prelude::*;\n \n use doc;\n \n-use core::vec;\n+use std::vec;\n \n pub type AstId = int;\n "}, {"sha": "c2127eae6253588e7cfb0d79e1cfab14cabba420", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,13 +10,12 @@\n \n //! Converts the Rust AST to the rustdoc document model\n \n-use core::prelude::*;\n \n use astsrv;\n use doc::ItemUtils;\n use doc;\n \n-use core::vec;\n+use std::vec;\n use syntax::ast;\n use syntax::parse::token::{ident_interner, ident_to_str};\n use syntax::parse::token;"}, {"sha": "efb3e61e807fa6a5e2fc98fcea3d4dd768376ec5", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use doc;\n #[cfg(test)] use extract;\n #[cfg(test)] use parse;\n \n-use core::vec;\n+use std::vec;\n \n pub struct Fold<T> {\n     ctxt: T,"}, {"sha": "1e67f900822cd876547cd96a8cd8546997568be3", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Build indexes as appropriate for the markdown pass\n \n-use core::prelude::*;\n \n use astsrv;\n use config;\n@@ -164,7 +163,6 @@ pub fn pandoc_header_id(header: &str) -> ~str {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use astsrv;\n     use attr_pass;"}, {"sha": "0705a5c17233ef6a4dc84d5622d588fc6a902f1d", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Generate markdown from a document tree\n \n-use core::prelude::*;\n \n use astsrv;\n use doc::ItemUtils;\n@@ -22,9 +21,9 @@ use markdown_writer::WriterFactory;\n use pass::Pass;\n use sort_pass;\n \n-use core::cell::Cell;\n-use core::str;\n-use core::vec;\n+use std::cell::Cell;\n+use std::str;\n+use std::vec;\n use syntax;\n \n pub fn mk_pass(writer_factory: WriterFactory) -> Pass {\n@@ -518,7 +517,6 @@ fn put_struct(\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use astsrv;\n     use attr_pass;"}, {"sha": "9621ea0892b944130f668ccb6edd1936f17fa79e", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,19 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use config;\n use doc::ItemUtils;\n use doc;\n \n-use core::comm::*;\n-use core::comm;\n-use core::io;\n-use core::result;\n-use core::run;\n-use core::str;\n-use core::task;\n+use std::comm::*;\n+use std::comm;\n+use std::io;\n+use std::result;\n+use std::run;\n+use std::str;\n+use std::task;\n use extra::future;\n \n pub enum WriteInstr {\n@@ -104,7 +103,7 @@ fn pandoc_writer(\n     ];\n \n     do generic_writer |markdown| {\n-        use core::io::WriterUtil;\n+        use std::io::WriterUtil;\n \n         debug!(\"pandoc cmd: %s\", pandoc_cmd);\n         debug!(\"pandoc args: %s\", pandoc_args.connect(\" \"));\n@@ -177,7 +176,7 @@ pub fn make_filename(\n }\n \n fn write_file(path: &Path, s: ~str) {\n-    use core::io::WriterUtil;\n+    use std::io::WriterUtil;\n \n     match io::file_writer(path, [io::Create, io::Truncate]) {\n       result::Ok(writer) => {\n@@ -225,7 +224,6 @@ fn future_writer() -> (Writer, future::Future<~str>) {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use astsrv;\n     use doc;"}, {"sha": "508cf302ede56c0817bb7913c1a0e99878509a70", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,7 +15,6 @@ Each page corresponds is a logical section. There may be pages for\n individual modules, pages for the crate, indexes, etc.\n */\n \n-use core::prelude::*;\n \n use astsrv;\n use config;\n@@ -26,8 +25,8 @@ use fold;\n use pass::Pass;\n use util::NominalOp;\n \n-use core::comm::*;\n-use core::task;\n+use std::comm::*;\n+use std::task;\n use syntax::ast;\n \n #[cfg(test)] use doc::PageUtils;"}, {"sha": "bf782c9d5f321ae846182727dd9a908d216a0575", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! AST-parsing helpers\n \n-use core::prelude::*;\n \n use rustc::driver::driver::{file_input, str_input};\n use rustc::driver::driver;"}, {"sha": "3497e9515c64dd91d613f4d7345beb4dd361ffff", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n \n use astsrv;"}, {"sha": "55ce135f2777a9cbfaf630ad6136dbed85fa351d", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Records the full path to items\n \n-use core::prelude::*;\n \n use astsrv;\n use doc::ItemUtils;"}, {"sha": "cb7da801e96ec01bc81d59cdad75a140c9b29ceb", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Prune things that are private\n \n-use core::prelude::*;\n \n use extract;\n use syntax::ast;\n@@ -21,7 +20,7 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::util;\n+use std::util;\n \n pub fn mk_pass() -> Pass {\n     Pass {"}, {"sha": "6d16b9759cc13fbbb8663192307585a215b74286", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -21,22 +21,17 @@\n \n #[allow(non_implicitly_copyable_typarams)];\n \n-#[no_std];\n-\n-extern mod core(name = \"std\");\n-extern mod extra(name = \"extra\");\n-\n+extern mod extra;\n extern mod rustc;\n extern mod syntax;\n \n-use core::prelude::*;\n+use std::io;\n+use std::os;\n \n use config::Config;\n use doc::Item;\n use doc::ItemUtils;\n \n-use core::*;\n-\n pub mod pass;\n pub mod config;\n pub mod parse;\n@@ -66,15 +61,6 @@ pub mod escape_pass;\n pub mod prune_private_pass;\n pub mod util;\n \n-mod std {\n-    pub use core::clone;\n-    pub use core::cmp;\n-    pub use core::os;\n-    pub use core::str;\n-    pub use core::sys;\n-    pub use core::unstable;\n-}\n-\n pub fn main() {\n     let args = os::args();\n "}, {"sha": "4e297c36dd46d4d3a71adaee8e4f62801e50698d", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Breaks rustdocs into sections according to their headers\n \n-use core::prelude::*;\n \n use astsrv;\n use doc::ItemUtils;\n@@ -19,7 +18,7 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::iterator::IteratorUtil;\n+use std::iterator::IteratorUtil;\n \n pub fn mk_pass() -> Pass {\n     Pass {\n@@ -162,7 +161,6 @@ fn parse_header<'a>(line: &'a str) -> Option<&'a str> {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use astsrv;\n     use attr_pass;"}, {"sha": "58b7571305d224e66409f0edd6f8fa2dfecb7de6", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Generic pass for performing an operation on all descriptions\n \n-use core::prelude::*;\n \n use astsrv;\n use doc::ItemUtils;\n@@ -20,7 +19,7 @@ use fold;\n use pass::Pass;\n use util::NominalOp;\n \n-use core::cell::Cell;\n+use std::cell::Cell;\n \n pub fn mk_pass(name: ~str, op: @fn(&str) -> ~str) -> Pass {\n     let op = Cell::new(op);\n@@ -139,7 +138,6 @@ fn fold_impl(\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use astsrv;\n     use attr_pass;"}, {"sha": "281a59c8cb7af8e132f8e62bda0007a77e1f6d78", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -40,7 +40,7 @@ mod test {\n \n     #[test]\n     fn should_trim_text() {\n-        use core::option::Some;\n+        use std::option::Some;\n \n         let doc = mk_doc(~\"#[doc = \\\" desc \\\"] \\\n                                  mod m {"}, {"sha": "c3b02c91e749476d7a1c630b1f86a7ca2fe36ac7", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,6 @@\n \n //! Pulls type information out of the AST and attaches it to the document\n \n-use core::prelude::*;\n \n use astsrv;\n use doc::ItemUtils;\n@@ -21,7 +20,7 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::vec;\n+use std::vec;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::parse::token;\n@@ -349,7 +348,6 @@ fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use astsrv;\n     use doc;"}, {"sha": "7df6b3207802746c02a8afed8be38449f145f2a7", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -19,9 +19,8 @@ instances where the string containing the doc comment is opened in the\n middle of a line, and each of the following lines is indented.\n */\n \n-use core::prelude::*;\n \n-use core::uint;\n+use std::uint;\n use pass::Pass;\n use text_pass;\n "}, {"sha": "20e64087442219c463dddc86b946168fafb5a1a0", "filename": "src/librustdoc/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n // Just a named container for our op, so it can have impls\n pub struct NominalOp<T> {"}, {"sha": "c36c6390a759fe69010cfa2d06946b259e220344", "filename": "src/librustpkg/api.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fapi.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -14,10 +14,10 @@ use package_id::*;\n use package_source::*;\n use version::Version;\n \n-use core::option::*;\n-use core::os;\n-use core::hashmap::*;\n-use core::path::*;\n+use std::option::*;\n+use std::os;\n+use std::hashmap::*;\n+use std::path::*;\n \n /// Convenience functions intended for calling from pkg.rs\n \n@@ -89,4 +89,4 @@ pub fn install_exe(sysroot: @Path, workspace: Path, name: ~str, version: Version\n \n fn mk_crate(p: Path) -> Crate {\n     Crate { file: p, flags: ~[], cfgs: ~[] }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c44563d870358eadbbe7c10b56d61fa29ff3ffeb", "filename": "src/librustpkg/conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,7 +10,7 @@\n \n // Useful conditions\n \n-pub use core::path::Path;\n+pub use std::path::Path;\n pub use package_id::PkgId;\n \n condition! {"}, {"sha": "230a0f915ac31bc6854d300f36f1953ce286a82d", "filename": "src/librustpkg/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcontext.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,9 +10,8 @@\n \n // Context data structure used by rustpkg\n \n-use core::prelude::*;\n \n-use core::hashmap::HashMap;\n+use std::hashmap::HashMap;\n \n pub struct Ctx {\n     // Sysroot -- if this is None, uses rustc filesearch's"}, {"sha": "5fe4512603211b6caea05ae1a0afafdc8ee2d63a", "filename": "src/librustpkg/crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcrate.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::path::Path;\n-use core::vec;\n+use std::path::Path;\n+use std::vec;\n \n /// A crate is a unit of Rust code to be compiled into a binary or library\n pub struct Crate {"}, {"sha": "43d727c2989a9bfe6a0dd0491f3d19b65049b50a", "filename": "src/librustpkg/messages.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fmessages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fmessages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fmessages.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use extra::term;\n-use core::io;\n-use core::result::*;\n+use std::io;\n+use std::result::*;\n \n pub fn note(msg: &str) {\n     pretty_message(msg, \"note: \", term::color::green, io::stdout())"}, {"sha": "ebe2aa6f92a63b1f3b79e28a2c6f1acc68429a09", "filename": "src/librustpkg/package_id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fpackage_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fpackage_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_id.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n pub use package_path::{RemotePath, LocalPath, normalize, hash};\n-use core::prelude::*;\n use version::{try_getting_version, Version, NoVersion, split_version};\n \n /// Path-fragment identifier of a package such as"}, {"sha": "a508d2ce1535de0cf4e5194be90c25652e97eccd", "filename": "src/librustpkg/package_path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fpackage_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fpackage_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_path.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,11 +10,11 @@\n \n // rustpkg utilities having to do with local and remote paths\n \n-use core::path::Path;\n-use core::option::Some;\n-use core::hash;\n-use core::rt::io::Writer;\n-use core::hash::Streaming;\n+use std::path::Path;\n+use std::option::Some;\n+use std::hash;\n+use std::rt::io::Writer;\n+use std::hash::Streaming;\n \n /// Wrappers to prevent local and remote paths from getting confused\n /// (These will go away after #6407)"}, {"sha": "24c1bb9b200f4e21213f25ff6bacd68921038375", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,9 +10,9 @@\n \n use target::*;\n use package_id::PkgId;\n-use core::path::Path;\n-use core::option::*;\n-use core::{os, run, str};\n+use std::path::Path;\n+use std::option::*;\n+use std::{os, run, str};\n use context::*;\n use crate::Crate;\n use messages::*;"}, {"sha": "6371d7263461ee05da0b26ba02e4b1d8e80f5930", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -10,15 +10,14 @@\n \n // rustpkg utilities having to do with paths and directories\n \n-use core::prelude::*;\n pub use package_path::{RemotePath, LocalPath, normalize};\n pub use package_id::PkgId;\n pub use target::{OutputType, Main, Lib, Test, Bench, Target, Build, Install};\n pub use version::{Version, NoVersion, split_version_general};\n-use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n-use core::os::mkdir_recursive;\n-use core::os;\n-use core::iterator::IteratorUtil;\n+use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+use std::os::mkdir_recursive;\n+use std::os;\n+use std::iterator::IteratorUtil;\n use messages::*;\n use package_id::*;\n "}, {"sha": "d393ed6956697a0a0212369c42f3c704ca9ccb31", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -18,19 +18,19 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n-#[no_core];\n-#[no_std];\n-\n-extern mod core(name = \"std\");\n-extern mod extra(name = \"extra\");\n-\n+extern mod extra;\n extern mod rustc;\n extern mod syntax;\n \n-use core::prelude::*;\n-use core::*;\n-pub use core::path::Path;\n-use core::hashmap::HashMap;\n+use std::result;\n+use std::io;\n+use std::os;\n+use std::run;\n+use std::str;\n+\n+pub use std::path::Path;\n+use std::hashmap::HashMap;\n+\n use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n use extra::{getopts};\n@@ -65,15 +65,6 @@ mod workspace;\n \n pub mod usage;\n \n-mod std {\n-    pub use core::cmp;\n-    pub use core::condition;\n-    pub use core::os;\n-    pub use core::str;\n-    pub use core::sys;\n-    pub use core::unstable;\n-}\n-\n /// A PkgScript represents user-supplied custom logic for\n /// special build hooks. This only exists for packages with\n /// an explicit package script."}, {"sha": "d04b2c8f3701ad95e667a1041d65c52c5de41c72", "filename": "src/librustpkg/search.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsearch.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use path_util::installed_library_in_workspace;\n-use core::prelude::*;\n \n /// If a library with path `p` matching pkg_id's name exists under sroot_opt,\n /// return Some(p). Return None if there's no such path or if sroot_opt is None."}, {"sha": "0e2a4f33c72c36e1e009c399d35251819857b3e9", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -11,11 +11,10 @@\n // rustpkg unit tests\n \n use context::Ctx;\n-use core::hashmap::HashMap;\n-use core::{io, libc, os, result, run, str, vec};\n-use core::prelude::*;\n+use std::hashmap::HashMap;\n+use std::{io, libc, os, result, run, str, vec};\n use extra::tempfile::mkdtemp;\n-use core::run::ProcessOutput;\n+use std::run::ProcessOutput;\n use package_path::*;\n use package_id::{PkgId};\n use package_source::*;\n@@ -110,7 +109,7 @@ fn mk_temp_workspace(short_name: &LocalPath, version: &Version) -> Path {\n }\n \n fn is_rwx(p: &Path) -> bool {\n-    use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+    use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n \n     match p.get_mode() {\n         None => return false,"}, {"sha": "0fd68ca3a20425464c979fc39e3f3d3c11124f1c", "filename": "src/librustpkg/testsuite/fail/src/no-inferred-crates/src/zzyzx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Ftestsuite%2Ffail%2Fsrc%2Fno-inferred-crates%2Fsrc%2Fzzyzx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Ftestsuite%2Ffail%2Fsrc%2Fno-inferred-crates%2Fsrc%2Fzzyzx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Ffail%2Fsrc%2Fno-inferred-crates%2Fsrc%2Fzzyzx.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -15,7 +15,7 @@ The test runner should check that, after `rustpkg build hello-world`:\n   * testsuite/hello-world/build/ does not contain a library\n */\n \n-use core::io;\n+use std::io;\n \n fn main() {\n     io::println(~\"Hello world!\");"}, {"sha": "c8b2ce97c0c004864bbe1009e1247d6f2afae88b", "filename": "src/librustpkg/testsuite/pass/src/hello-world/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fhello-world%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fhello-world%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fhello-world%2Fmain.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -18,7 +18,7 @@ The test runner should check that, after `rustpkg build hello-world`:\n   * testsuite/pass/hello-world/build is empty\n */\n \n-use core::io;\n+use std::io;\n \n fn main() {\n     io::println(~\"Hello world!\");"}, {"sha": "fee52c3c11f34215e668d3c28156ae00f89c0978", "filename": "src/librustpkg/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fusage.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::io;\n+use std::io;\n \n pub fn general() {\n     io::println(\"Usage: rustpkg [options] <cmd> [args..]"}, {"sha": "26e26add3dc266a3fb7c290022383865d757c0c9", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-use core::{libc, os, result, str};\n+use std::{libc, os, result, str};\n use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n use extra::getopts::groups::getopts;\n@@ -418,4 +417,4 @@ mod test {\n \n // tjc: cheesy\n fn debug_flags() -> ~[~str] { ~[] }\n-// static debug_flags: ~[~str] = ~[~\"-Z\", ~\"time-passes\"];\n\\ No newline at end of file\n+// static debug_flags: ~[~str] = ~[~\"-Z\", ~\"time-passes\"];"}, {"sha": "1ec15c107c7804a18b79b6863d967c3ad36dbe42", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -14,8 +14,7 @@\n extern mod std;\n \n use extra::semver;\n-use core::prelude::*;\n-use core::{char, os, result, run, str};\n+use std::{char, os, result, run, str};\n use package_path::RemotePath;\n use extra::tempfile::mkdtemp;\n "}, {"sha": "dd2cf445302a42949a0cecfa008e364af76fd5f0", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -12,7 +12,7 @@\n \n use path_util::{rust_path, workspace_contains_package_id};\n use package_id::PkgId;\n-use core::path::Path;\n+use std::path::Path;\n \n pub fn each_pkg_parent_workspace(pkgid: &PkgId, action: &fn(&Path) -> bool) -> bool {\n     // Using the RUST_PATH, find workspaces that contain"}, {"sha": "12e32731fcc3108c57ef2e7d536405aa86cce3a9", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd8bf5677652f31008cde5f9f9f00fe67d90b8/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=6fcd8bf5677652f31008cde5f9f9f00fe67d90b8", "patch": "@@ -8,17 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n-use codemap::{BytePos, spanned};\n-use parse::lexer::reader;\n-use parse::parser::Parser;\n-use parse::token::keywords;\n use parse::token;\n use parse::token::{get_ident_interner};\n \n-use opt_vec;\n-use opt_vec::OptVec;\n-\n // SeqSep : a sequence separator (token)\n // and whether a trailing separator is allowed.\n pub struct SeqSep {"}]}