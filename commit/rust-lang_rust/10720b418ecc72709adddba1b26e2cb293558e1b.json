{"sha": "10720b418ecc72709adddba1b26e2cb293558e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNzIwYjQxOGVjYzcyNzA5YWRkZGJhMWIyNmUyY2IyOTM1NThlMWI=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-12-26T15:46:32Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-11T10:18:44Z"}, "message": "Fix a memory leak in emcc if a Rust panic is caught by C++ and discarded", "tree": {"sha": "0ce720fc8043173ad5d1431ca4e7e54a0bd231a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce720fc8043173ad5d1431ca4e7e54a0bd231a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10720b418ecc72709adddba1b26e2cb293558e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10720b418ecc72709adddba1b26e2cb293558e1b", "html_url": "https://github.com/rust-lang/rust/commit/10720b418ecc72709adddba1b26e2cb293558e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10720b418ecc72709adddba1b26e2cb293558e1b/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543b7d97d019bff882cc70cf2f8bdc317e7b840f", "url": "https://api.github.com/repos/rust-lang/rust/commits/543b7d97d019bff882cc70cf2f8bdc317e7b840f", "html_url": "https://github.com/rust-lang/rust/commit/543b7d97d019bff882cc70cf2f8bdc317e7b840f"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "61f33fd4d5d664dc02d3af55c6c7662d06daee69", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10720b418ecc72709adddba1b26e2cb293558e1b/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10720b418ecc72709adddba1b26e2cb293558e1b/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=10720b418ecc72709adddba1b26e2cb293558e1b", "patch": "@@ -52,22 +52,32 @@ pub fn payload() -> *mut u8 {\n     ptr::null_mut()\n }\n \n+struct Exception {\n+    data: Option<Box<dyn Any + Send>>,\n+}\n+\n pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     assert!(!ptr.is_null());\n-    let adjusted_ptr = __cxa_begin_catch(ptr as *mut libc::c_void);\n-    let ex = ptr::read(adjusted_ptr as *mut _);\n+    let adjusted_ptr = __cxa_begin_catch(ptr as *mut libc::c_void) as *mut Exception;\n+    let ex = (*adjusted_ptr).data.take();\n     __cxa_end_catch();\n-    ex\n+    ex.unwrap()\n }\n \n pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     let sz = mem::size_of_val(&data);\n-    let exception = __cxa_allocate_exception(sz);\n+    let exception = __cxa_allocate_exception(sz) as *mut Exception;\n     if exception.is_null() {\n         return uw::_URC_FATAL_PHASE1_ERROR as u32;\n     }\n-    ptr::write(exception as *mut _, data);\n-    __cxa_throw(exception as *mut _, &EXCEPTION_TYPE_INFO, ptr::null_mut());\n+    ptr::write(exception, Exception { data: Some(data) });\n+    __cxa_throw(exception as *mut _, &EXCEPTION_TYPE_INFO, exception_cleanup);\n+\n+    extern \"C\" fn exception_cleanup(ptr: *mut libc::c_void) {\n+        unsafe {\n+            ptr::drop_in_place(ptr as *mut Exception);\n+        }\n+    }\n }\n \n #[lang = \"eh_personality\"]\n@@ -89,7 +99,7 @@ extern \"C\" {\n     fn __cxa_throw(\n         thrown_exception: *mut libc::c_void,\n         tinfo: *const TypeInfo,\n-        dest: *mut libc::c_void,\n+        dest: extern \"C\" fn(*mut libc::c_void),\n     ) -> !;\n     fn __gxx_personality_v0(\n         version: c_int,"}]}