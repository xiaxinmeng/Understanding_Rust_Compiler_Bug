{"sha": "d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMWVmN2Q5MTg1YTExM2ZhNWUwODljZTFjZTcxYmIxZmI2ZWFjMzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-24T11:03:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-24T14:11:50Z"}, "message": "improve debug-printing of scalars\n\nBefore: Immediate(ScalarMaybeUndef(Scalar(Ptr(Pointer { alloc_id: AllocId(3401), offset: Size { raw: 4 }, tag: Tagged(7723) }))))\nAfter: Immediate(Scalar(AllocId(3401).0x4[<7723>]))\n\nBefore: Immediate(ScalarMaybeUndef(Scalar(Bits { size: 8, bits: 10 })))\nAfter: Immediate(Scalar(0x000000000000000A))\n\nBefore: Immediate(ScalarMaybeUndef(Scalar(Bits { size: 1, bits: 1 })))\nAfter: Immediate(Scalar(0x01))", "tree": {"sha": "813ddd05aed4c02feccccc27fb9b32c622de8edf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/813ddd05aed4c02feccccc27fb9b32c622de8edf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32", "html_url": "https://github.com/rust-lang/rust/commit/d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46805805abe58c287fa16963f897fd09d5d97467", "url": "https://api.github.com/repos/rust-lang/rust/commits/46805805abe58c287fa16963f897fd09d5d97467", "html_url": "https://github.com/rust-lang/rust/commit/46805805abe58c287fa16963f897fd09d5d97467"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "356c4cc16c23c68b1cc2fd72afb7cf4640a97f44", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt;\n+\n use crate::mir;\n use crate::ty::layout::{self, HasDataLayout, Size};\n use rustc_macros::HashStable;\n@@ -70,7 +72,7 @@ impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n ///\n /// Pointer is also generic over the `Tag` associated with each pointer,\n /// which is used to do provenance tracking during execution.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd,\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd,\n          RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub struct Pointer<Tag=(),Id=AllocId> {\n     pub alloc_id: Id,\n@@ -80,6 +82,18 @@ pub struct Pointer<Tag=(),Id=AllocId> {\n \n static_assert_size!(Pointer, 16);\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Pointer<Tag, Id> {\n+    default fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}.{:#x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n+    }\n+}\n+// Specialization for no tag\n+impl<Id: fmt::Debug> fmt::Debug for Pointer<(), Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}.{:#x}\", self.alloc_id, self.offset.bytes())\n+    }\n+}\n+\n /// Produces a `Pointer` which points to the beginning of the Allocation\n impl From<AllocId> for Pointer {\n     #[inline(always)]"}, {"sha": "e3d016ff4e03e761190fa9f73b9435631fbcbbcf", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=d01ef7d9185a113fa5e089ce1ce71bb1fb6eac32", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> ConstValue<'tcx> {\n /// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes\n /// of a simple value or a pointer into another `Allocation`\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd,\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd,\n          RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub enum Scalar<Tag=(), Id=AllocId> {\n     /// The raw bytes of a simple value.\n@@ -113,6 +113,27 @@ pub enum Scalar<Tag=(), Id=AllocId> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(Scalar, 24);\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Scalar<Tag, Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Scalar::Ptr(ptr) =>\n+                write!(f, \"{:?}\", ptr),\n+            &Scalar::Bits { bits, size } => {\n+                if size == 0 {\n+                    assert_eq!(bits, 0, \"ZST value must be 0\");\n+                    write!(f, \"<ZST>\")\n+                } else {\n+                    assert_eq!(truncate(bits, Size::from_bytes(size as u64)), bits,\n+                            \"Scalar value {:#x} exceeds size of {} bytes\", bits, size);\n+                    // Format as hex number wide enough to fit any value of the given `size`.\n+                    // So e.g. bits=20, size=1 will be \"0x14\", but with size=4 it'll be \"0x00000014\".\n+                    write!(f, \"0x{:>0width$x}\", bits, width=(size*2) as usize)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<Tag> fmt::Display for Scalar<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n@@ -412,7 +433,7 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n pub enum ScalarMaybeUndef<Tag=(), Id=AllocId> {\n     Scalar(Scalar<Tag, Id>),\n     Undef,\n@@ -425,6 +446,15 @@ impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n     }\n }\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for ScalarMaybeUndef<Tag, Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            ScalarMaybeUndef::Undef => write!(f, \"Undef\"),\n+            ScalarMaybeUndef::Scalar(s) => write!(f, \"{:?}\", s),\n+        }\n+    }\n+}\n+\n impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {"}]}