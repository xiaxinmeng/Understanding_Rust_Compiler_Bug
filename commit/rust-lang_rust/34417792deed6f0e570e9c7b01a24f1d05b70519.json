{"sha": "34417792deed6f0e570e9c7b01a24f1d05b70519", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NDE3NzkyZGVlZDZmMGU1NzBlOWM3YjAxYTI0ZjFkMDViNzA1MTk=", "commit": {"author": {"name": "Tobias Thiel", "email": "tobias011@gmail.com", "date": "2020-01-05T07:35:43Z"}, "committer": {"name": "Tobias Thiel", "email": "tobias011@gmail.com", "date": "2020-01-05T07:35:43Z"}, "message": "tools/compiletest: fix argument ordering for allowing unused in ui & compile-fail tests", "tree": {"sha": "027600f1517712d394c71df4c007763ffb5f7fc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/027600f1517712d394c71df4c007763ffb5f7fc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34417792deed6f0e570e9c7b01a24f1d05b70519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34417792deed6f0e570e9c7b01a24f1d05b70519", "html_url": "https://github.com/rust-lang/rust/commit/34417792deed6f0e570e9c7b01a24f1d05b70519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34417792deed6f0e570e9c7b01a24f1d05b70519/comments", "author": {"login": "tobithiel", "id": 956860, "node_id": "MDQ6VXNlcjk1Njg2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/956860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobithiel", "html_url": "https://github.com/tobithiel", "followers_url": "https://api.github.com/users/tobithiel/followers", "following_url": "https://api.github.com/users/tobithiel/following{/other_user}", "gists_url": "https://api.github.com/users/tobithiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobithiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobithiel/subscriptions", "organizations_url": "https://api.github.com/users/tobithiel/orgs", "repos_url": "https://api.github.com/users/tobithiel/repos", "events_url": "https://api.github.com/users/tobithiel/events{/privacy}", "received_events_url": "https://api.github.com/users/tobithiel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tobithiel", "id": 956860, "node_id": "MDQ6VXNlcjk1Njg2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/956860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobithiel", "html_url": "https://github.com/tobithiel", "followers_url": "https://api.github.com/users/tobithiel/followers", "following_url": "https://api.github.com/users/tobithiel/following{/other_user}", "gists_url": "https://api.github.com/users/tobithiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobithiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobithiel/subscriptions", "organizations_url": "https://api.github.com/users/tobithiel/orgs", "repos_url": "https://api.github.com/users/tobithiel/repos", "events_url": "https://api.github.com/users/tobithiel/events{/privacy}", "received_events_url": "https://api.github.com/users/tobithiel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51021b1d421a7d055ff44f9b6afe11377b825c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/51021b1d421a7d055ff44f9b6afe11377b825c5c", "html_url": "https://github.com/rust-lang/rust/commit/51021b1d421a7d055ff44f9b6afe11377b825c5c"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "cfa4db69a6a88476212859ed30e99ff8cdda4e27", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34417792deed6f0e570e9c7b01a24f1d05b70519/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34417792deed6f0e570e9c7b01a24f1d05b70519/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=34417792deed6f0e570e9c7b01a24f1d05b70519", "patch": "@@ -1478,11 +1478,7 @@ impl<'test> TestCx<'test> {\n             WillExecute::No => TargetLocation::ThisDirectory(self.output_base_dir()),\n         };\n \n-        let mut rustc = self.make_compile_args(&self.testpaths.file, output_file, emit_metadata);\n-\n-        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n-\n-        match self.config.mode {\n+        let allow_unused = match self.config.mode {\n             CompileFail | Ui => {\n                 // compile-fail and ui tests tend to have tons of unused code as\n                 // it's just testing various pieces of the compile, but we don't\n@@ -1495,11 +1491,18 @@ impl<'test> TestCx<'test> {\n                     // via command line flags.\n                     && local_pm != Some(PassMode::Run)\n                 {\n-                    rustc.args(&[\"-A\", \"unused\"]);\n+                    AllowUnused::Yes\n+                } else {\n+                    AllowUnused::No\n                 }\n             }\n-            _ => {}\n-        }\n+            _ => AllowUnused::No,\n+        };\n+\n+        let mut rustc =\n+            self.make_compile_args(&self.testpaths.file, output_file, emit_metadata, allow_unused);\n+\n+        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n \n         self.compose_and_run_compiler(rustc, None)\n     }\n@@ -1710,7 +1713,8 @@ impl<'test> TestCx<'test> {\n         // Create the directory for the stdout/stderr files.\n         create_dir_all(aux_cx.output_base_dir()).unwrap();\n         let input_file = &aux_testpaths.file;\n-        let mut aux_rustc = aux_cx.make_compile_args(input_file, aux_output, EmitMetadata::No);\n+        let mut aux_rustc =\n+            aux_cx.make_compile_args(input_file, aux_output, EmitMetadata::No, AllowUnused::No);\n \n         let (dylib, crate_type) = if aux_props.no_prefer_dynamic {\n             (true, None)\n@@ -1819,6 +1823,7 @@ impl<'test> TestCx<'test> {\n         input_file: &Path,\n         output_file: TargetLocation,\n         emit_metadata: EmitMetadata,\n+        allow_unused: AllowUnused,\n     ) -> Command {\n         let is_rustdoc = self.is_rustdoc();\n         let mut rustc = if !is_rustdoc {\n@@ -1951,6 +1956,13 @@ impl<'test> TestCx<'test> {\n             rustc.arg(\"-Ctarget-feature=-crt-static\");\n         }\n \n+        match allow_unused {\n+            AllowUnused::Yes => {\n+                rustc.args(&[\"-A\", \"unused\"]);\n+            }\n+            AllowUnused::No => {}\n+        }\n+\n         rustc.args(&self.props.compile_flags);\n \n         rustc\n@@ -2134,7 +2146,8 @@ impl<'test> TestCx<'test> {\n \n         let output_file = TargetLocation::ThisDirectory(self.output_base_dir());\n         let input_file = &self.testpaths.file;\n-        let mut rustc = self.make_compile_args(input_file, output_file, EmitMetadata::No);\n+        let mut rustc =\n+            self.make_compile_args(input_file, output_file, EmitMetadata::No, AllowUnused::No);\n         rustc.arg(\"-L\").arg(aux_dir).arg(\"--emit=llvm-ir\");\n \n         self.compose_and_run_compiler(rustc, None)\n@@ -2147,7 +2160,8 @@ impl<'test> TestCx<'test> {\n \n         let output_file = TargetLocation::ThisFile(output_path.clone());\n         let input_file = &self.testpaths.file;\n-        let mut rustc = self.make_compile_args(input_file, output_file, EmitMetadata::No);\n+        let mut rustc =\n+            self.make_compile_args(input_file, output_file, EmitMetadata::No, AllowUnused::No);\n \n         rustc.arg(\"-L\").arg(self.aux_output_dir_name());\n \n@@ -2999,6 +3013,7 @@ impl<'test> TestCx<'test> {\n                 &self.testpaths.file.with_extension(UI_FIXED),\n                 TargetLocation::ThisFile(self.make_exe_name()),\n                 emit_metadata,\n+                AllowUnused::No,\n             );\n             rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n             let res = self.compose_and_run_compiler(rustc, None);\n@@ -3486,6 +3501,11 @@ enum ExpectedLine<T: AsRef<str>> {\n     Text(T),\n }\n \n+enum AllowUnused {\n+    Yes,\n+    No,\n+}\n+\n impl<T> fmt::Debug for ExpectedLine<T>\n where\n     T: AsRef<str> + fmt::Debug,"}]}