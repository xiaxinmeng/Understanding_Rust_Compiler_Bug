{"sha": "d156bf658fd2478ee83d8e86e8c7c46093b74ec8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNTZiZjY1OGZkMjQ3OGVlODNkOGU4NmU4YzdjNDYwOTNiNzRlYzg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-20T01:09:24Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-22T23:45:23Z"}, "message": "Remove some local variables.\n\nI find the code easier to read if the values in `config` are all used\ndirectly, rather than a mix of `config` values and local variables. It\nwill also faciliate some of the following commits.\n\nAlso, use `config.bitcode_needed()` in one place.", "tree": {"sha": "52455f666220000a7ebb66ea18983c4bfd6581e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52455f666220000a7ebb66ea18983c4bfd6581e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d156bf658fd2478ee83d8e86e8c7c46093b74ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d156bf658fd2478ee83d8e86e8c7c46093b74ec8", "html_url": "https://github.com/rust-lang/rust/commit/d156bf658fd2478ee83d8e86e8c7c46093b74ec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d156bf658fd2478ee83d8e86e8c7c46093b74ec8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c54ce496635e0e013e14aa4be5d86c1247f9319a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c54ce496635e0e013e14aa4be5d86c1247f9319a", "html_url": "https://github.com/rust-lang/rust/commit/c54ce496635e0e013e14aa4be5d86c1247f9319a"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "9ffccad4b932d3bc6410791aed07a0869d025718", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d156bf658fd2478ee83d8e86e8c7c46093b74ec8/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d156bf658fd2478ee83d8e86e8c7c46093b74ec8/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=d156bf658fd2478ee83d8e86e8c7c46093b74ec8", "patch": "@@ -634,30 +634,24 @@ pub(crate) unsafe fn codegen(\n             f(cpm)\n         }\n \n-        // If we don't have the integrated assembler, then we need to emit asm\n-        // from LLVM and use `gcc` to create the object file.\n-        let asm_to_obj = config.emit_obj && config.no_integrated_as;\n-\n-        // Change what we write and cleanup based on whether obj files are\n-        // just llvm bitcode. In that case write bitcode, and possibly\n-        // delete the bitcode if it wasn't requested. Don't generate the\n-        // machine code, instead copy the .o file from the .bc\n-        let write_bc = config.emit_bc || config.obj_is_bitcode;\n-        let rm_bc = !config.emit_bc && config.obj_is_bitcode;\n-        let write_obj = config.emit_obj && !config.obj_is_bitcode && !asm_to_obj;\n-        let copy_bc_to_obj = config.emit_obj && config.obj_is_bitcode;\n+        // Two things to note:\n+        // - If object files are just LLVM bitcode we write bitcode, copy it to\n+        //   the .o file, and delete the bitcode if it wasn't otherwise\n+        //   requested.\n+        // - If we don't have the integrated assembler then we need to emit\n+        //   asm from LLVM and use `gcc` to create the object file.\n \n         let bc_out = cgcx.output_filenames.temp_path(OutputType::Bitcode, module_name);\n         let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, module_name);\n \n-        if write_bc || config.emit_bc_compressed || config.embed_bitcode {\n+        if config.bitcode_needed() {\n             let _timer = cgcx\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_module_codegen_make_bitcode\", &module.name[..]);\n             let thin = ThinBuffer::new(llmod);\n             let data = thin.data();\n \n-            if write_bc {\n+            if config.emit_bc || config.obj_is_bitcode {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_emit_bitcode\",\n                     &module.name[..],\n@@ -740,7 +734,7 @@ pub(crate) unsafe fn codegen(\n                 })?;\n             }\n \n-            if config.emit_asm || asm_to_obj {\n+            if config.emit_asm || (config.emit_obj && config.no_integrated_as) {\n                 let _timer = cgcx\n                     .prof\n                     .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n@@ -762,7 +756,7 @@ pub(crate) unsafe fn codegen(\n                 })?;\n             }\n \n-            if write_obj {\n+            if config.emit_obj && !config.obj_is_bitcode && !config.no_integrated_as {\n                 let _timer = cgcx\n                     .prof\n                     .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n@@ -776,7 +770,7 @@ pub(crate) unsafe fn codegen(\n                         llvm::FileType::ObjectFile,\n                     )\n                 })?;\n-            } else if asm_to_obj {\n+            } else if config.emit_obj && config.no_integrated_as {\n                 let _timer = cgcx\n                     .prof\n                     .generic_activity_with_arg(\"LLVM_module_codegen_asm_to_obj\", &module.name[..]);\n@@ -789,14 +783,14 @@ pub(crate) unsafe fn codegen(\n             }\n         }\n \n-        if copy_bc_to_obj {\n+        if config.emit_obj && config.obj_is_bitcode {\n             debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n             if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n                 diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n             }\n         }\n \n-        if rm_bc {\n+        if !config.emit_bc && config.obj_is_bitcode {\n             debug!(\"removing_bitcode {:?}\", bc_out);\n             if let Err(e) = fs::remove_file(&bc_out) {\n                 diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));"}]}