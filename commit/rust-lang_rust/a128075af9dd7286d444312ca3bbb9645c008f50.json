{"sha": "a128075af9dd7286d444312ca3bbb9645c008f50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMjgwNzVhZjlkZDcyODZkNDQ0MzEyY2EzYmJiOTY0NWMwMDhmNTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T20:25:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T20:27:01Z"}, "message": "remove Option<SourceFileItemId> hack", "tree": {"sha": "f054e2dcf065c34ecb5c42ea2bd58c520a8d3a21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f054e2dcf065c34ecb5c42ea2bd58c520a8d3a21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a128075af9dd7286d444312ca3bbb9645c008f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a128075af9dd7286d444312ca3bbb9645c008f50", "html_url": "https://github.com/rust-lang/rust/commit/a128075af9dd7286d444312ca3bbb9645c008f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a128075af9dd7286d444312ca3bbb9645c008f50/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1a18a626770b60e8785aa34505dc2caf061c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1a18a626770b60e8785aa34505dc2caf061c02", "html_url": "https://github.com/rust-lang/rust/commit/9c1a18a626770b60e8785aa34505dc2caf061c02"}], "stats": {"total": 169, "additions": 86, "deletions": 83}, "files": [{"sha": "418d59c91ed4bfe8fb8448ec00d4cf76330157bf", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=a128075af9dd7286d444312ca3bbb9645c008f50", "patch": "@@ -25,9 +25,10 @@ impl Module {\n \n     pub(crate) fn definition_source_impl(&self, db: &impl HirDatabase) -> (FileId, ModuleSource) {\n         let module_tree = db.module_tree(self.krate);\n-        let source = self.module_id.source(&module_tree);\n-        let module_source = ModuleSource::from_source_item_id(db, source);\n-        let file_id = source.file_id.as_original_file();\n+        let file_id = self.module_id.file_id(&module_tree);\n+        let decl_id = self.module_id.decl_id(&module_tree);\n+        let module_source = ModuleSource::new(db, file_id, decl_id);\n+        let file_id = file_id.as_original_file();\n         (file_id, module_source)\n     }\n \n@@ -39,8 +40,7 @@ impl Module {\n         let link = self.module_id.parent_link(&module_tree)?;\n         let file_id = link\n             .owner(&module_tree)\n-            .source(&module_tree)\n-            .file_id\n+            .file_id(&module_tree)\n             .as_original_file();\n         let src = link.source(&module_tree, db);\n         Some((file_id, src))"}, {"sha": "3f76b769dd2b261463008903e220293e47c04d30", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=a128075af9dd7286d444312ca3bbb9645c008f50", "patch": "@@ -16,6 +16,7 @@ use crate::{\n     adt::{StructData, EnumData},\n     impl_block::ModuleImplBlocks,\n     generics::{GenericParams, GenericDef},\n+    ids::SourceFileItemId,\n };\n \n #[salsa::query_group(HirDatabaseStorage)]\n@@ -51,7 +52,11 @@ pub trait HirDatabase: SourceDatabase + AsRef<HirInterner> {\n     fn file_item(&self, source_item_id: SourceItemId) -> TreeArc<SyntaxNode>;\n \n     #[salsa::invoke(crate::module_tree::Submodule::submodules_query)]\n-    fn submodules(&self, source: SourceItemId) -> Arc<Vec<crate::module_tree::Submodule>>;\n+    fn submodules(\n+        &self,\n+        file_id: HirFileId,\n+        delc_id: Option<SourceFileItemId>,\n+    ) -> Arc<Vec<crate::module_tree::Submodule>>;\n \n     #[salsa::invoke(crate::nameres::lower::LoweredModule::lower_module_query)]\n     fn lower_module(&self, module: Module) -> (Arc<LoweredModule>, Arc<ImportSourceMap>);"}, {"sha": "0e4dc62614d144ff72872981374b1ebdba13bd9d", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=a128075af9dd7286d444312ca3bbb9645c008f50", "patch": "@@ -203,7 +203,7 @@ pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n         let items = ctx.db.file_items(ctx.file_id);\n         let raw = SourceItemId {\n             file_id: ctx.file_id,\n-            item_id: Some(items.id_of(ctx.file_id, ast.syntax())),\n+            item_id: items.id_of(ctx.file_id, ast.syntax()),\n         };\n         let loc = ItemLoc {\n             module: ctx.module,\n@@ -301,8 +301,7 @@ impl_arena_id!(SourceFileItemId);\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct SourceItemId {\n     pub(crate) file_id: HirFileId,\n-    /// None for the whole file.\n-    pub(crate) item_id: Option<SourceFileItemId>,\n+    pub(crate) item_id: SourceFileItemId,\n }\n \n /// Maps items' `SyntaxNode`s to `SourceFileItemId`s and back."}, {"sha": "d1dc3fa4b70f418e43c57ed9074d359f87d6295c", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 55, "deletions": 44, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=a128075af9dd7286d444312ca3bbb9645c008f50", "patch": "@@ -11,21 +11,28 @@ use ra_syntax::{\n use ra_arena::{Arena, RawId, impl_arena_id};\n use test_utils::tested_by;\n \n-use crate::{Name, AsName, HirDatabase, SourceItemId, HirFileId, Problem, SourceFileItems, ModuleSource};\n+use crate::{\n+    Name, AsName, HirDatabase, SourceItemId, HirFileId, Problem, SourceFileItems, ModuleSource,\n+    ids::SourceFileItemId,\n+};\n \n impl ModuleSource {\n-    pub(crate) fn from_source_item_id(\n+    pub(crate) fn new(\n         db: &impl HirDatabase,\n-        source_item_id: SourceItemId,\n+        file_id: HirFileId,\n+        decl_id: Option<SourceFileItemId>,\n     ) -> ModuleSource {\n-        let module_syntax = db.file_item(source_item_id);\n-        if let Some(source_file) = ast::SourceFile::cast(&module_syntax) {\n-            ModuleSource::SourceFile(source_file.to_owned())\n-        } else if let Some(module) = ast::Module::cast(&module_syntax) {\n-            assert!(module.item_list().is_some(), \"expected inline module\");\n-            ModuleSource::Module(module.to_owned())\n-        } else {\n-            panic!(\"expected file or inline module\")\n+        match decl_id {\n+            Some(item_id) => {\n+                let module = db.file_item(SourceItemId { file_id, item_id });\n+                let module = ast::Module::cast(&*module).unwrap();\n+                assert!(module.item_list().is_some(), \"expected inline module\");\n+                ModuleSource::Module(module.to_owned())\n+            }\n+            None => {\n+                let source_file = db.hir_parse(file_id);\n+                ModuleSource::SourceFile(source_file)\n+            }\n         }\n     }\n }\n@@ -34,18 +41,18 @@ impl ModuleSource {\n pub struct Submodule {\n     name: Name,\n     is_declaration: bool,\n-    source: SourceItemId,\n+    decl_id: SourceFileItemId,\n }\n \n impl Submodule {\n     pub(crate) fn submodules_query(\n         db: &impl HirDatabase,\n-        source: SourceItemId,\n+        file_id: HirFileId,\n+        decl_id: Option<SourceFileItemId>,\n     ) -> Arc<Vec<Submodule>> {\n         db.check_canceled();\n-        let file_id = source.file_id;\n         let file_items = db.file_items(file_id);\n-        let module_source = ModuleSource::from_source_item_id(db, source);\n+        let module_source = ModuleSource::new(db, file_id, decl_id);\n         let submodules = match module_source {\n             ModuleSource::SourceFile(source_file) => {\n                 collect_submodules(file_id, &file_items, &*source_file)\n@@ -54,6 +61,7 @@ impl Submodule {\n                 collect_submodules(file_id, &file_items, module.item_list().unwrap())\n             }\n         };\n+\n         return Arc::new(submodules);\n \n         fn collect_submodules(\n@@ -75,10 +83,7 @@ impl Submodule {\n                     let sub = Submodule {\n                         name,\n                         is_declaration: module.has_semi(),\n-                        source: SourceItemId {\n-                            file_id,\n-                            item_id: Some(file_items.id_of(file_id, module.syntax())),\n-                        },\n+                        decl_id: file_items.id_of(file_id, module.syntax()),\n                     };\n                     Some(sub)\n                 })\n@@ -110,7 +115,9 @@ pub struct ModuleTree {\n \n #[derive(Debug, PartialEq, Eq, Hash)]\n pub struct ModuleData {\n-    source: SourceItemId,\n+    file_id: HirFileId,\n+    /// Points to `ast::Module`, `None` for the whole file.\n+    decl_id: Option<SourceFileItemId>,\n     parent: Option<LinkId>,\n     children: Vec<LinkId>,\n }\n@@ -136,8 +143,15 @@ impl ModuleTree {\n         self.mods.iter().map(|(id, _)| id)\n     }\n \n-    pub(crate) fn find_module_by_source(&self, source: SourceItemId) -> Option<ModuleId> {\n-        let (res, _) = self.mods.iter().find(|(_, m)| m.source == source)?;\n+    pub(crate) fn find_module_by_source(\n+        &self,\n+        file_id: HirFileId,\n+        decl_id: Option<SourceFileItemId>,\n+    ) -> Option<ModuleId> {\n+        let (res, _) = self\n+            .mods\n+            .iter()\n+            .find(|(_, m)| (m.file_id, m.decl_id) == (file_id, decl_id))?;\n         Some(res)\n     }\n \n@@ -147,53 +161,47 @@ impl ModuleTree {\n         let source_root_id = db.file_source_root(file_id);\n \n         let source_root = db.source_root(source_root_id);\n-        let source = SourceItemId {\n-            file_id: file_id.into(),\n-            item_id: None,\n-        };\n-        self.init_subtree(db, &source_root, None, source);\n+        self.init_subtree(db, &source_root, None, file_id.into(), None);\n     }\n \n     fn init_subtree(\n         &mut self,\n         db: &impl HirDatabase,\n         source_root: &SourceRoot,\n         parent: Option<LinkId>,\n-        source: SourceItemId,\n+        file_id: HirFileId,\n+        decl_id: Option<SourceFileItemId>,\n     ) -> ModuleId {\n         let id = self.alloc_mod(ModuleData {\n-            source,\n+            file_id,\n+            decl_id,\n             parent,\n             children: Vec::new(),\n         });\n-        for sub in db.submodules(source).iter() {\n+        for sub in db.submodules(file_id, decl_id).iter() {\n             let link = self.alloc_link(LinkData {\n-                source: sub.source,\n+                source: SourceItemId {\n+                    file_id,\n+                    item_id: sub.decl_id,\n+                },\n                 name: sub.name.clone(),\n                 owner: id,\n                 points_to: Vec::new(),\n                 problem: None,\n             });\n \n             let (points_to, problem) = if sub.is_declaration {\n-                let (points_to, problem) = resolve_submodule(db, source.file_id, &sub.name);\n+                let (points_to, problem) = resolve_submodule(db, file_id, &sub.name);\n                 let points_to = points_to\n                     .into_iter()\n                     .map(|file_id| {\n-                        self.init_subtree(\n-                            db,\n-                            source_root,\n-                            Some(link),\n-                            SourceItemId {\n-                                file_id: file_id.into(),\n-                                item_id: None,\n-                            },\n-                        )\n+                        self.init_subtree(db, source_root, Some(link), file_id.into(), None)\n                     })\n                     .collect::<Vec<_>>();\n                 (points_to, problem)\n             } else {\n-                let points_to = self.init_subtree(db, source_root, Some(link), sub.source);\n+                let points_to =\n+                    self.init_subtree(db, source_root, Some(link), file_id, Some(sub.decl_id));\n                 (vec![points_to], None)\n             };\n \n@@ -216,8 +224,11 @@ impl ModuleTree {\n }\n \n impl ModuleId {\n-    pub(crate) fn source(self, tree: &ModuleTree) -> SourceItemId {\n-        tree.mods[self].source\n+    pub(crate) fn file_id(self, tree: &ModuleTree) -> HirFileId {\n+        tree.mods[self].file_id\n+    }\n+    pub(crate) fn decl_id(self, tree: &ModuleTree) -> Option<SourceFileItemId> {\n+        tree.mods[self].decl_id\n     }\n     pub(crate) fn parent_link(self, tree: &ModuleTree) -> Option<LinkId> {\n         tree.mods[self].parent"}, {"sha": "97ce6c946d4e21b8799f49b19d1aa4f95121a79d", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=a128075af9dd7286d444312ca3bbb9645c008f50", "patch": "@@ -215,7 +215,7 @@ where\n         // Populate extern crates prelude\n         {\n             let root_id = module_id.crate_root(&self.module_tree);\n-            let file_id = root_id.source(&self.module_tree).file_id;\n+            let file_id = root_id.file_id(&self.module_tree);\n             let crate_graph = self.db.crate_graph();\n             if let Some(crate_id) = crate_graph.crate_id_for_crate_root(file_id.as_original_file())\n             {"}, {"sha": "8df11a5f4198d06347a67ab3a18c125fb35505a4", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=a128075af9dd7286d444312ca3bbb9645c008f50", "patch": "@@ -121,10 +121,7 @@ impl LoweredModule {\n                     let item_id = file_items.id_of_unchecked(macro_call.syntax());\n                     let loc = MacroCallLoc {\n                         module,\n-                        source_item_id: SourceItemId {\n-                            file_id,\n-                            item_id: Some(item_id),\n-                        },\n+                        source_item_id: SourceItemId { file_id, item_id },\n                     };\n                     let id = loc.id(db);\n                     let file_id = HirFileId::from(id);"}, {"sha": "bf9ac0dfb42457dcc6c0c32b839441ca878c263b", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=a128075af9dd7286d444312ca3bbb9645c008f50", "patch": "@@ -4,9 +4,7 @@ use std::{\n };\n \n use rustc_hash::FxHashMap;\n-use ra_syntax::{\n-    AstNode, SyntaxNode, TreeArc,\n-};\n+use ra_syntax::{SyntaxNode, TreeArc};\n use ra_db::{CrateId};\n \n use crate::{\n@@ -33,12 +31,9 @@ pub(super) fn file_item(\n     source_item_id: SourceItemId,\n ) -> TreeArc<SyntaxNode> {\n     let source_file = db.hir_parse(source_item_id.file_id);\n-    match source_item_id.item_id {\n-        Some(id) => db.file_items(source_item_id.file_id)[id]\n-            .to_node(&source_file)\n-            .to_owned(),\n-        None => source_file.syntax().to_owned(),\n-    }\n+    db.file_items(source_item_id.file_id)[source_item_id.item_id]\n+        .to_node(&source_file)\n+        .to_owned()\n }\n \n pub(super) fn item_map(db: &impl HirDatabase, crate_id: CrateId) -> Arc<ItemMap> {"}, {"sha": "f523f0647601faf53beeaae3c043c6d370f23cc4", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a128075af9dd7286d444312ca3bbb9645c008f50/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=a128075af9dd7286d444312ca3bbb9645c008f50", "patch": "@@ -13,18 +13,14 @@ use ra_syntax::{\n };\n \n use crate::{\n-    HirDatabase, Function, SourceItemId, ModuleDef,\n-    AsName, Module,\n-    ids::LocationCtx,\n+    HirDatabase, Function, ModuleDef,\n+    AsName, Module, HirFileId,\n+    ids::{LocationCtx, SourceFileItemId},\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file.\n pub fn module_from_file_id(db: &impl HirDatabase, file_id: FileId) -> Option<Module> {\n-    let module_source = SourceItemId {\n-        file_id: file_id.into(),\n-        item_id: None,\n-    };\n-    module_from_source(db, module_source)\n+    module_from_source(db, file_id.into(), None)\n }\n \n /// Locates the child module by `mod child;` declaration.\n@@ -59,11 +55,7 @@ fn module_from_inline(\n     let file_id = file_id.into();\n     let file_items = db.file_items(file_id);\n     let item_id = file_items.id_of(file_id, module.syntax());\n-    let source = SourceItemId {\n-        file_id,\n-        item_id: Some(item_id),\n-    };\n-    module_from_source(db, source)\n+    module_from_source(db, file_id, Some(item_id))\n }\n \n /// Locates the module by child syntax element within the module\n@@ -83,13 +75,17 @@ pub fn module_from_child_node(\n     }\n }\n \n-fn module_from_source(db: &impl HirDatabase, source: SourceItemId) -> Option<Module> {\n-    let source_root_id = db.file_source_root(source.file_id.as_original_file());\n+fn module_from_source(\n+    db: &impl HirDatabase,\n+    file_id: HirFileId,\n+    decl_id: Option<SourceFileItemId>,\n+) -> Option<Module> {\n+    let source_root_id = db.file_source_root(file_id.as_original_file());\n     db.source_root_crates(source_root_id)\n         .iter()\n         .find_map(|&krate| {\n             let module_tree = db.module_tree(krate);\n-            let module_id = module_tree.find_module_by_source(source)?;\n+            let module_id = module_tree.find_module_by_source(file_id, decl_id)?;\n             Some(Module { krate, module_id })\n         })\n }"}]}