{"sha": "74b93f35dade697b679064f59720d689c1501045", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YjkzZjM1ZGFkZTY5N2I2NzkwNjRmNTk3MjBkNjg5YzE1MDEwNDU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-25T14:19:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-25T14:19:40Z"}, "message": "Add a `self_arg` convenience", "tree": {"sha": "c3f61ef48a343995510d1e39b5e4171fa78bc77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f61ef48a343995510d1e39b5e4171fa78bc77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74b93f35dade697b679064f59720d689c1501045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74b93f35dade697b679064f59720d689c1501045", "html_url": "https://github.com/rust-lang/rust/commit/74b93f35dade697b679064f59720d689c1501045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74b93f35dade697b679064f59720d689c1501045/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c97ffa1d4a1d9f8039a580297988af1880f5665", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c97ffa1d4a1d9f8039a580297988af1880f5665", "html_url": "https://github.com/rust-lang/rust/commit/8c97ffa1d4a1d9f8039a580297988af1880f5665"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "d47e722de84479aa773cbcf6735eebe887ceabdc", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74b93f35dade697b679064f59720d689c1501045/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b93f35dade697b679064f59720d689c1501045/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=74b93f35dade697b679064f59720d689c1501045", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n                     lvalue: &mut Lvalue<'tcx>,\n                     context: LvalueContext<'tcx>,\n                     location: Location) {\n-        if *lvalue == Lvalue::Local(Local::new(1)) {\n+        if *lvalue == Lvalue::Local(self_arg()) {\n             *lvalue = Lvalue::Projection(Box::new(Projection {\n                 base: lvalue.clone(),\n                 elem: ProjectionElem::Deref,\n@@ -63,6 +63,10 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n     }\n }\n \n+fn self_arg() -> Local {\n+    Local::new(1)\n+}\n+\n struct TransformVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     state_adt_ref: &'tcx AdtDef,\n@@ -97,7 +101,7 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n \n     // Create a Lvalue referencing a generator struct field\n     fn make_field(&self, idx: usize, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n-        let base = Lvalue::Local(Local::new(1));\n+        let base = Lvalue::Local(self_arg());\n         let field = Projection {\n             base: base,\n             elem: ProjectionElem::Field(Field::new(idx), ty),\n@@ -256,7 +260,7 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     // The generator argument is ignored\n-    set.remove(&Local::new(1));\n+    set.remove(&self_arg());\n \n     set\n }\n@@ -334,7 +338,7 @@ fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     use shim::DropShimElaborator;\n \n     let param_env = tcx.param_env(def_id);\n-    let gen = Local::new(1);\n+    let gen = self_arg();\n \n     for block in mir.basic_blocks().indices() {\n         let (target, unwind, source_info) = match mir.basic_blocks()[block].terminator() {\n@@ -452,7 +456,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n     make_generator_state_argument_indirect(tcx, def_id, &mut mir);\n \n     // Change the generator argument from &mut to *mut\n-    mir.local_decls[Local::new(1)] = LocalDecl {\n+    mir.local_decls[self_arg()] = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: tcx.mk_ptr(ty::TypeAndMut {\n             ty: gen_ty,\n@@ -604,7 +608,7 @@ fn insert_clean_drop<'a, 'tcx>(mir: &mut Mir<'tcx>) -> BasicBlock {\n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n     let drop_clean = BasicBlock::new(mir.basic_blocks().len());\n     let term = TerminatorKind::Drop {\n-        location: Lvalue::Local(Local::new(1)),\n+        location: Lvalue::Local(self_arg()),\n         target: return_block,\n         unwind: None,\n     };"}]}