{"sha": "d349e87d61745d402f6e38727beb62a6525a2153", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDllODdkNjE3NDVkNDAyZjZlMzg3MjdiZWI2MmE2NTI1YTIxNTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-02-22T20:59:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-25T20:58:05Z"}, "message": "Parse trait object types starting with a lifetime bound", "tree": {"sha": "58b6b7ee7928ee053d2b35ba83afe3cb277dbad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58b6b7ee7928ee053d2b35ba83afe3cb277dbad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d349e87d61745d402f6e38727beb62a6525a2153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d349e87d61745d402f6e38727beb62a6525a2153", "html_url": "https://github.com/rust-lang/rust/commit/d349e87d61745d402f6e38727beb62a6525a2153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d349e87d61745d402f6e38727beb62a6525a2153/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b4c911581099e247a68b3a8adc782d778f5190b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b4c911581099e247a68b3a8adc782d778f5190b", "html_url": "https://github.com/rust-lang/rust/commit/2b4c911581099e247a68b3a8adc782d778f5190b"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "c7f4512301c841a2631ae1e860c5ee2b53771710", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d349e87d61745d402f6e38727beb62a6525a2153/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d349e87d61745d402f6e38727beb62a6525a2153/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d349e87d61745d402f6e38727beb62a6525a2153", "patch": "@@ -1451,9 +1451,9 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(keywords::Impl) {\n             // FIXME: figure out priority of `+` in `impl Trait1 + Trait2` (#34511).\n             TyKind::ImplTrait(self.parse_ty_param_bounds()?)\n-        } else if self.check(&token::Question) {\n+        } else if self.check(&token::Question) ||\n+                  self.check_lifetime() && self.look_ahead(1, |t| t == &token::BinOp(token::Plus)){\n             // Bound list (trait object type)\n-            // Bound lists starting with `'lt` are not currently supported (#40043)\n             TyKind::TraitObject(self.parse_ty_param_bounds_common(allow_plus)?)\n         } else {\n             let msg = format!(\"expected type, found {}\", self.this_token_descr());"}, {"sha": "8497a699e974c3b130b12879b482ee9fdeb95dcd", "filename": "src/test/compile-fail/trait-object-macro-matcher.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d349e87d61745d402f6e38727beb62a6525a2153/src%2Ftest%2Fcompile-fail%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d349e87d61745d402f6e38727beb62a6525a2153/src%2Ftest%2Fcompile-fail%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-macro-matcher.rs?ref=d349e87d61745d402f6e38727beb62a6525a2153", "patch": "@@ -16,4 +16,6 @@ macro_rules! m {\n \n fn main() {\n     m!(Copy + Send + 'static); //~ ERROR the trait `std::marker::Copy` cannot be made into an object\n+    m!('static + Send);\n+    m!('static +); //~ ERROR at least one non-builtin trait is required for an object type\n }"}, {"sha": "9801cac4714434a168b2614bfadd221fe730c27c", "filename": "src/test/compile-fail/trait-object-vs-lifetime-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d349e87d61745d402f6e38727beb62a6525a2153/src%2Ftest%2Fcompile-fail%2Ftrait-object-vs-lifetime-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d349e87d61745d402f6e38727beb62a6525a2153/src%2Ftest%2Fcompile-fail%2Ftrait-object-vs-lifetime-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-vs-lifetime-2.rs?ref=d349e87d61745d402f6e38727beb62a6525a2153", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A few contrived examples where lifetime should (or should not) be parsed as an object type.\n+// Lifetimes parsed as types are still rejected later by semantic checks.\n+\n+// compile-flags: -Z continue-parse-after-error\n+\n+// `'static` is a lifetime, `'static +` is a type, `'a` is a type\n+fn g() where\n+    'static: 'static,\n+    'static +: 'static + Copy,\n+    //~^ ERROR at least one non-builtin trait is required for an object type\n+{}\n+\n+fn main() {}"}, {"sha": "a70141edc29f277922c4ada64c3306eea8f32a42", "filename": "src/test/compile-fail/trait-object-vs-lifetime.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d349e87d61745d402f6e38727beb62a6525a2153/src%2Ftest%2Fcompile-fail%2Ftrait-object-vs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d349e87d61745d402f6e38727beb62a6525a2153/src%2Ftest%2Fcompile-fail%2Ftrait-object-vs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-vs-lifetime.rs?ref=d349e87d61745d402f6e38727beb62a6525a2153", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A few contrived examples where lifetime should (or should not) be parsed as an object type.\n+// Lifetimes parsed as types are still rejected later by semantic checks.\n+\n+// compile-flags: -Z continue-parse-after-error\n+\n+struct S<'a, T>(&'a u8, T);\n+\n+fn main() {\n+    // `'static` is a lifetime argument, `'static +` is a type argument\n+    let _: S<'static, u8>;\n+    let _: S<'static, 'static +>;\n+    //~^ at least one non-builtin trait is required for an object type\n+    let _: S<'static, 'static>;\n+    //~^ ERROR wrong number of lifetime parameters: expected 1, found 2\n+    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    let _: S<'static +, 'static>;\n+    //~^ ERROR lifetime parameters must be declared prior to type parameters\n+    //~| ERROR at least one non-builtin trait is required for an object type\n+}"}, {"sha": "f269fe90d4b4e0b98b5261ae286dfc69b77e2381", "filename": "src/test/run-pass/trait-object-lifetime-first.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d349e87d61745d402f6e38727beb62a6525a2153/src%2Ftest%2Frun-pass%2Ftrait-object-lifetime-first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d349e87d61745d402f6e38727beb62a6525a2153/src%2Ftest%2Frun-pass%2Ftrait-object-lifetime-first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-lifetime-first.rs?ref=d349e87d61745d402f6e38727beb62a6525a2153", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::Display;\n+\n+static BYTE: u8 = 33;\n+\n+fn main() {\n+    let x: &('static + Display) = &BYTE;\n+    let y: Box<'static + Display> = Box::new(BYTE);\n+    let xstr = format!(\"{}\", x);\n+    let ystr = format!(\"{}\", y);\n+    assert_eq!(xstr, \"33\");\n+    assert_eq!(ystr, \"33\");\n+}"}]}