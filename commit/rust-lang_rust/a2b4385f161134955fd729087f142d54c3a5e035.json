{"sha": "a2b4385f161134955fd729087f142d54c3a5e035", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYjQzODVmMTYxMTM0OTU1ZmQ3MjkwODdmMTQyZDU0YzNhNWUwMzU=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-11T22:17:30Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-11T22:17:30Z"}, "message": "Add few smoke tests for patterns and refactoring", "tree": {"sha": "57340237a1bc00f3b5383881bc289d224e4c6ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57340237a1bc00f3b5383881bc289d224e4c6ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b4385f161134955fd729087f142d54c3a5e035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b4385f161134955fd729087f142d54c3a5e035", "html_url": "https://github.com/rust-lang/rust/commit/a2b4385f161134955fd729087f142d54c3a5e035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b4385f161134955fd729087f142d54c3a5e035/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f46bc12199dc88b88bd826f49d5c5af6e9caf727", "url": "https://api.github.com/repos/rust-lang/rust/commits/f46bc12199dc88b88bd826f49d5c5af6e9caf727", "html_url": "https://github.com/rust-lang/rust/commit/f46bc12199dc88b88bd826f49d5c5af6e9caf727"}], "stats": {"total": 121, "additions": 111, "deletions": 10}, "files": [{"sha": "675991154b8a3eb32df6a385897504f87bad951b", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2b4385f161134955fd729087f142d54c3a5e035/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b4385f161134955fd729087f142d54c3a5e035/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=a2b4385f161134955fd729087f142d54c3a5e035", "patch": "@@ -65,13 +65,13 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     add_keyword(ctx, acc, \"use\", \"fn $0() {}\", ctx.is_new_item || ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"impl\", \"impl $0 {}\", ctx.is_new_item);\n     add_keyword(ctx, acc, \"trait\", \"impl $0 {}\", ctx.is_new_item);\n-    add_keyword(ctx, acc, \"enum\", \"enum $0 {}\", ctx.is_new_item && !ctx.after_unsafe);\n-    add_keyword(ctx, acc, \"struct\", \"struct $0 {}\", ctx.is_new_item && !ctx.after_unsafe);\n-    add_keyword(ctx, acc, \"union\", \"union $0 {}\", ctx.is_new_item && !ctx.after_unsafe);\n+    add_keyword(ctx, acc, \"enum\", \"enum $0 {}\", ctx.is_new_item && !ctx.unsafe_is_prev);\n+    add_keyword(ctx, acc, \"struct\", \"struct $0 {}\", ctx.is_new_item && !ctx.unsafe_is_prev);\n+    add_keyword(ctx, acc, \"union\", \"union $0 {}\", ctx.is_new_item && !ctx.unsafe_is_prev);\n     add_keyword(ctx, acc, \"match\", \"match $0 {}\", ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"loop\", \"loop {$0}\", ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"while\", \"while $0 {}\", ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"let\", \"let \", ctx.after_if || ctx.block_expr_parent);\n+    add_keyword(ctx, acc, \"let\", \"let \", ctx.if_is_prev || ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"else\", \"else {$0}\", ctx.after_if);\n     add_keyword(ctx, acc, \"else if\", \"else if $0 {}\", ctx.after_if);\n     add_keyword(ctx, acc, \"mod\", \"mod $0 {}\", ctx.is_new_item || ctx.block_expr_parent);"}, {"sha": "41aec5686eeaddb15b7dbe7a7549495156ae5631", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2b4385f161134955fd729087f142d54c3a5e035/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b4385f161134955fd729087f142d54c3a5e035/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=a2b4385f161134955fd729087f142d54c3a5e035", "patch": "@@ -12,8 +12,8 @@ use ra_syntax::{\n use ra_text_edit::Indel;\n \n use super::patterns::{\n-    goes_after_unsafe, has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling,\n-    has_ref_pat_parent, has_trait_as_prev_sibling, inside_trait, is_in_loop_body,\n+    has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_ref_pat_parent,\n+    has_trait_as_prev_sibling, if_is_prev, inside_trait, is_in_loop_body, unsafe_is_prev,\n };\n use crate::{call_info::ActiveParameter, completion::CompletionConfig, FilePosition};\n use test_utils::mark;\n@@ -64,7 +64,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_path_type: bool,\n     pub(super) has_type_args: bool,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n-    pub(super) after_unsafe: bool,\n+    pub(super) unsafe_is_prev: bool,\n+    pub(super) if_is_prev: bool,\n     pub(super) block_expr_parent: bool,\n     pub(super) bind_pat_parent: bool,\n     pub(super) ref_pat_parent: bool,\n@@ -130,14 +131,15 @@ impl<'a> CompletionContext<'a> {\n             has_type_args: false,\n             dot_receiver_is_ambiguous_float_literal: false,\n             attribute_under_caret: None,\n-            after_unsafe: false,\n+            unsafe_is_prev: false,\n             in_loop_body: false,\n             ref_pat_parent: false,\n             bind_pat_parent: false,\n             block_expr_parent: false,\n             inside_trait: false,\n             trait_as_prev_sibling: false,\n             impl_as_prev_sibling: false,\n+            if_is_prev: false,\n         };\n \n         let mut original_file = original_file.syntax().clone();\n@@ -212,7 +214,8 @@ impl<'a> CompletionContext<'a> {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token.clone());\n         self.block_expr_parent = has_block_expr_parent(syntax_element.clone());\n-        self.after_unsafe = goes_after_unsafe(syntax_element.clone());\n+        self.unsafe_is_prev = unsafe_is_prev(syntax_element.clone());\n+        self.if_is_prev = if_is_prev(syntax_element.clone());\n         self.bind_pat_parent = has_bind_pat_parent(syntax_element.clone());\n         self.ref_pat_parent = has_ref_pat_parent(syntax_element.clone());\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());"}, {"sha": "df25941527e06d7e7ef36ff29df098f7e0ac36e8", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a2b4385f161134955fd729087f142d54c3a5e035/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b4385f161134955fd729087f142d54c3a5e035/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=a2b4385f161134955fd729087f142d54c3a5e035", "patch": "@@ -22,14 +22,22 @@ pub(crate) fn has_ref_pat_parent(element: SyntaxElement) -> bool {\n     element.ancestors().find(|it| it.kind() == REF_PAT).is_some()\n }\n \n-pub(crate) fn goes_after_unsafe(element: SyntaxElement) -> bool {\n+pub(crate) fn unsafe_is_prev(element: SyntaxElement) -> bool {\n     element\n         .into_token()\n         .and_then(|it| previous_non_trivia_token(it))\n         .filter(|it| it.kind() == UNSAFE_KW)\n         .is_some()\n }\n \n+pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n+    element\n+        .into_token()\n+        .and_then(|it| previous_non_trivia_token(it))\n+        .filter(|it| it.kind() == IF_KW)\n+        .is_some()\n+}\n+\n pub(crate) fn has_block_expr_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element).filter(|it| it.kind() == BLOCK_EXPR).is_some()\n }\n@@ -110,3 +118,79 @@ fn previous_sibling_or_ancestor_sibling(element: SyntaxElement) -> Option<Syntax\n         non_trivia_sibling(NodeOrToken::Node(prev_sibling_node), Direction::Prev)\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{\n+        has_block_expr_parent, has_impl_as_prev_sibling, has_trait_as_prev_sibling, if_is_prev,\n+        inside_trait, unsafe_is_prev,\n+    };\n+    use crate::completion::test_utils::check_pattern_is_applicable;\n+\n+    #[test]\n+    fn test_unsafe_is_prev() {\n+        check_pattern_is_applicable(\n+            r\"\n+        unsafe i<|>\n+        \",\n+            unsafe_is_prev,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_if_is_prev() {\n+        check_pattern_is_applicable(\n+            r\"\n+        if l<|>\n+        \",\n+            if_is_prev,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_inside_trait() {\n+        check_pattern_is_applicable(\n+            r\"\n+        trait A {\n+            fn<|>\n+        }\n+        \",\n+            inside_trait,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_has_trait_as_prev_sibling() {\n+        check_pattern_is_applicable(\n+            r\"\n+        trait A w<|> {\n+        }\n+        \",\n+            has_trait_as_prev_sibling,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_has_impl_as_prev_sibling() {\n+        check_pattern_is_applicable(\n+            r\"\n+        impl A w<|> {\n+        }\n+        \",\n+            has_impl_as_prev_sibling,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_parent_block_expr() {\n+        check_pattern_is_applicable(\n+            r\"\n+        fn my_fn() {\n+            let a = 2;\n+            f<|>\n+        }\n+        \",\n+            has_block_expr_parent,\n+        );\n+    }\n+}"}, {"sha": "e9e89104e41024f93a294acf67c996f633fb5e54", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a2b4385f161134955fd729087f142d54c3a5e035/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b4385f161134955fd729087f142d54c3a5e035/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=a2b4385f161134955fd729087f142d54c3a5e035", "patch": "@@ -5,6 +5,8 @@ use crate::{\n     mock_analysis::{analysis_and_position, single_file_with_position},\n     CompletionItem,\n };\n+use hir::Semantics;\n+use ra_syntax::{AstNode, NodeOrToken, SyntaxElement, SyntaxToken};\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n     do_completion_with_options(code, kind, &CompletionConfig::default())\n@@ -27,3 +29,15 @@ pub(crate) fn do_completion_with_options(\n     kind_completions.sort_by_key(|c| c.label().to_owned());\n     kind_completions\n }\n+\n+pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n+    let (analysis, pos) = single_file_with_position(code);\n+    analysis\n+        .with_db(|db| {\n+            let sema = Semantics::new(db);\n+            let original_file = sema.parse(pos.file_id);\n+            let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n+            assert!(check(NodeOrToken::Token(token)));\n+        })\n+        .unwrap();\n+}"}]}