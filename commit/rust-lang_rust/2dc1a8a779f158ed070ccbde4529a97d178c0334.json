{"sha": "2dc1a8a779f158ed070ccbde4529a97d178c0334", "node_id": "C_kwDOAAsO6NoAKDJkYzFhOGE3NzlmMTU4ZWQwNzBjY2JkZTQ1MjlhOTdkMTc4YzAzMzQ", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2021-12-03T14:24:05Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-01-06T09:32:42Z"}, "message": "cg: use thorin instead of llvm-dwp\n\n`thorin` is a Rust implementation of a DWARF packaging utility that\nsupports reading DWARF objects from archive files (i.e. rlibs) and\ntherefore is better suited for integration into rustc.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "6ac3d7bdf718fbc73869d32ef2ccd450cf568f9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ac3d7bdf718fbc73869d32ef2ccd450cf568f9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc1a8a779f158ed070ccbde4529a97d178c0334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc1a8a779f158ed070ccbde4529a97d178c0334", "html_url": "https://github.com/rust-lang/rust/commit/2dc1a8a779f158ed070ccbde4529a97d178c0334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc1a8a779f158ed070ccbde4529a97d178c0334/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08ed338f561b000ce5672b55c0545fa7f3f13591", "url": "https://api.github.com/repos/rust-lang/rust/commits/08ed338f561b000ce5672b55c0545fa7f3f13591", "html_url": "https://github.com/rust-lang/rust/commit/08ed338f561b000ce5672b55c0545fa7f3f13591"}], "stats": {"total": 349, "additions": 259, "deletions": 90}, "files": [{"sha": "50a5d78731febc6ebab8d2c5151b9f2e5d3c5362", "filename": "Cargo.lock", "status": "modified", "additions": 60, "deletions": 17, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2dc1a8a779f158ed070ccbde4529a97d178c0334/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2dc1a8a779f158ed070ccbde4529a97d178c0334/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2dc1a8a779f158ed070ccbde4529a97d178c0334", "patch": "@@ -9,7 +9,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3e61f2b7f93d2c7d2b08263acaa4a363b3e276806c68af6134c44f523bf1aacd\"\n dependencies = [\n  \"compiler_builtins\",\n- \"gimli\",\n+ \"gimli 0.25.0\",\n  \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n ]\n@@ -87,9 +87,9 @@ dependencies = [\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.34\"\n+version = \"1.0.51\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf8dcb5b4bbaa28653b647d8c77bd4ed40183b48882e130c1f1ffb73de069fd7\"\n+checksum = \"8b26702f315f53b6071259e15dd9d64528213b44d61de1ec926eca7715d62203\"\n \n [[package]]\n name = \"array_tool\"\n@@ -1158,6 +1158,12 @@ version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n \n+[[package]]\n+name = \"fallible-iterator\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"\n+\n [[package]]\n name = \"filetime\"\n version = \"0.2.14\"\n@@ -1446,6 +1452,17 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"gimli\"\n+version = \"0.26.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4\"\n+dependencies = [\n+ \"fallible-iterator\",\n+ \"indexmap\",\n+ \"stable_deref_trait\",\n+]\n+\n [[package]]\n name = \"git2\"\n version = \"0.13.23\"\n@@ -2339,6 +2356,18 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"object\"\n+version = \"0.27.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"67ac1d3f9a1d3616fd9a60c8d74296f22406a238b6a72f5cc1e6f314df4ffbf9\"\n+dependencies = [\n+ \"crc32fast\",\n+ \"flate2\",\n+ \"indexmap\",\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"odht\"\n version = \"0.3.1\"\n@@ -3725,10 +3754,11 @@ dependencies = [\n  \"itertools 0.9.0\",\n  \"jobserver\",\n  \"libc\",\n- \"object\",\n+ \"object 0.26.2\",\n  \"pathdiff\",\n  \"regex\",\n  \"rustc_apfloat\",\n+ \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n@@ -3749,6 +3779,7 @@ dependencies = [\n  \"smallvec\",\n  \"snap\",\n  \"tempfile\",\n+ \"thorin-dwp\",\n  \"tracing\",\n ]\n \n@@ -4993,7 +5024,7 @@ dependencies = [\n  \"hermit-abi\",\n  \"libc\",\n  \"miniz_oxide\",\n- \"object\",\n+ \"object 0.26.2\",\n  \"panic_abort\",\n  \"panic_unwind\",\n  \"profiler_builtins\",\n@@ -5057,9 +5088,9 @@ checksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \n [[package]]\n name = \"structopt\"\n-version = \"0.3.16\"\n+version = \"0.3.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"de5472fb24d7e80ae84a7801b7978f95a19ec32cb1876faea59ab711eb901976\"\n+checksum = \"40b9788f4202aa75c240ecc9c15c65185e6a39ccdeb0fd5d008b98825464c87c\"\n dependencies = [\n  \"clap\",\n  \"lazy_static\",\n@@ -5068,9 +5099,9 @@ dependencies = [\n \n [[package]]\n name = \"structopt-derive\"\n-version = \"0.4.9\"\n+version = \"0.4.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e0eb37335aeeebe51be42e2dc07f031163fbabfa6ac67d7ea68b5c2f68d5f99\"\n+checksum = \"dcb5ae327f9cc13b68763b5749770cb9e048a99bd9dfdfa58d0cf05d5f64afe0\"\n dependencies = [\n  \"heck\",\n  \"proc-macro-error\",\n@@ -5249,24 +5280,36 @@ dependencies = [\n \n [[package]]\n name = \"thiserror\"\n-version = \"1.0.20\"\n+version = \"1.0.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7dfdd070ccd8ccb78f4ad66bf1982dc37f620ef696c6b5028fe2ed83dd3d0d08\"\n+checksum = \"854babe52e4df1653706b98fcfc05843010039b406875930a70e4d9644e5c417\"\n dependencies = [\n  \"thiserror-impl\",\n ]\n \n [[package]]\n name = \"thiserror-impl\"\n-version = \"1.0.20\"\n+version = \"1.0.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bd80fc12f73063ac132ac92aceea36734f04a1d93c1240c6944e23a3b8841793\"\n+checksum = \"aa32fd3f627f367fe16f893e2597ae3c05020f8bba2666a4e6ea73d377e5714b\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"thorin-dwp\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"039d1fc0bfdb73910c2702893515580e38c192f47a987bc98ddd38a36f2d953a\"\n+dependencies = [\n+ \"gimli 0.26.1\",\n+ \"indexmap\",\n+ \"object 0.27.1\",\n+ \"tracing\",\n+]\n+\n [[package]]\n name = \"thread_local\"\n version = \"1.0.1\"\n@@ -5394,9 +5437,9 @@ checksum = \"360dfd1d6d30e05fda32ace2c8c70e9c0a9da713275777f5a4dbb8a1893930c6\"\n \n [[package]]\n name = \"tracing\"\n-version = \"0.1.28\"\n+version = \"0.1.29\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84f96e095c0c82419687c20ddf5cb3eadb61f4e1405923c9dc8e53a1adacbda8\"\n+checksum = \"375a639232caf30edfc78e8d89b2d4c375515393e7af7e16f01cd96917fb2105\"\n dependencies = [\n  \"cfg-if 1.0.0\",\n  \"pin-project-lite\",\n@@ -5406,9 +5449,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-attributes\"\n-version = \"0.1.17\"\n+version = \"0.1.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c4f915eb6abf914599c200260efced9203504c4c37380af10cdf3b7d36970650\"\n+checksum = \"f4f480b8f81512e825f337ad51e94c1eb5d3bbdf2b363dcd01e2b19a9ffe3f8e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "5c13dfdc1b50537e8811c2bca03d1f2608495b4d", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc1a8a779f158ed070ccbde4529a97d178c0334/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2dc1a8a779f158ed070ccbde4529a97d178c0334/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=2dc1a8a779f158ed070ccbde4529a97d178c0334", "patch": "@@ -14,12 +14,14 @@ tracing = \"0.1\"\n libc = \"0.2.50\"\n jobserver = \"0.1.22\"\n tempfile = \"3.2\"\n+thorin-dwp = \"0.1.1\"\n pathdiff = \"0.2.0\"\n snap = \"1\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n regex = \"1.4\"\n \n rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_arena = { path = \"../rustc_arena\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "f7fe194d207d31faf611f23d877195b93bd83ba6", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 111, "deletions": 54, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/2dc1a8a779f158ed070ccbde4529a97d178c0334/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc1a8a779f158ed070ccbde4529a97d178c0334/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=2dc1a8a779f158ed070ccbde4529a97d178c0334", "patch": "@@ -1,4 +1,6 @@\n+use rustc_arena::TypedArena;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n+use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorReported, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n@@ -32,7 +34,10 @@ use cc::windows_registry;\n use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n-use std::ffi::{OsStr, OsString};\n+use std::borrow::Borrow;\n+use std::ffi::OsString;\n+use std::fs::{File, OpenOptions};\n+use std::io::{BufWriter, Write};\n use std::lazy::OnceCell;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n@@ -261,8 +266,14 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n \n     let mut ab = <B as ArchiveBuilder>::new(sess, out_filename, None);\n \n-    for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n-        ab.add_file(obj);\n+    for m in &codegen_results.modules {\n+        if let Some(obj) = m.object.as_ref() {\n+            ab.add_file(obj);\n+        }\n+\n+        if let Some(dwarf_obj) = m.dwarf_object.as_ref() {\n+            ab.add_file(dwarf_obj);\n+        }\n     }\n \n     // Note that in this loop we are ignoring the value of `lib.cfg`. That is,\n@@ -518,59 +529,108 @@ fn escape_stdout_stderr_string(s: &[u8]) -> String {\n     })\n }\n \n-const LLVM_DWP_EXECUTABLE: &'static str = \"rust-llvm-dwp\";\n-\n-/// Invoke `llvm-dwp` (shipped alongside rustc) to link debuginfo in object files into a `dwp`\n-/// file.\n-fn link_dwarf_object<'a, I>(sess: &'a Session, executable_out_filename: &Path, object_files: I)\n-where\n-    I: IntoIterator<Item: AsRef<OsStr>>,\n-{\n-    info!(\"preparing dwp to {}.dwp\", executable_out_filename.to_str().unwrap());\n-\n+/// Use `thorin` (rust implementation of a dwarf packaging utility) to link DWARF objects into a\n+/// DWARF package.\n+fn link_dwarf_object<'a>(\n+    sess: &'a Session,\n+    cg_results: &CodegenResults,\n+    executable_out_filename: &Path,\n+) {\n     let dwp_out_filename = executable_out_filename.with_extension(\"dwp\");\n-    let mut cmd = Command::new(LLVM_DWP_EXECUTABLE);\n-    cmd.arg(\"-o\");\n-    cmd.arg(&dwp_out_filename);\n-    cmd.args(object_files);\n+    debug!(?dwp_out_filename, ?executable_out_filename);\n \n-    let mut new_path = sess.get_tools_search_paths(false);\n-    if let Some(path) = env::var_os(\"PATH\") {\n-        new_path.extend(env::split_paths(&path));\n+    #[derive(Default)]\n+    struct ThorinSession<Relocations> {\n+        arena_data: TypedArena<Vec<u8>>,\n+        arena_mmap: TypedArena<Mmap>,\n+        arena_relocations: TypedArena<Relocations>,\n     }\n-    let new_path = env::join_paths(new_path).unwrap();\n-    cmd.env(\"PATH\", new_path);\n \n-    info!(\"{:?}\", &cmd);\n-    match sess.time(\"run_dwp\", || cmd.output()) {\n-        Ok(prog) if !prog.status.success() => {\n-            sess.struct_err(&format!(\n-                \"linking dwarf objects with `{}` failed: {}\",\n-                LLVM_DWP_EXECUTABLE, prog.status\n-            ))\n-            .note(&format!(\"{:?}\", &cmd))\n-            .note(&escape_stdout_stderr_string(&prog.stdout))\n-            .note(&escape_stdout_stderr_string(&prog.stderr))\n-            .emit();\n-            info!(\"linker stderr:\\n{}\", escape_stdout_stderr_string(&prog.stderr));\n-            info!(\"linker stdout:\\n{}\", escape_stdout_stderr_string(&prog.stdout));\n+    impl<Relocations> ThorinSession<Relocations> {\n+        fn alloc_mmap<'arena>(&'arena self, data: Mmap) -> &'arena Mmap {\n+            (*self.arena_mmap.alloc(data)).borrow()\n+        }\n+    }\n+\n+    impl<Relocations> thorin::Session<Relocations> for ThorinSession<Relocations> {\n+        fn alloc_data<'arena>(&'arena self, data: Vec<u8>) -> &'arena [u8] {\n+            (*self.arena_data.alloc(data)).borrow()\n         }\n-        Ok(_) => {}\n-        Err(e) => {\n-            let dwp_not_found = e.kind() == io::ErrorKind::NotFound;\n-            let mut err = if dwp_not_found {\n-                sess.struct_err(&format!(\"linker `{}` not found\", LLVM_DWP_EXECUTABLE))\n-            } else {\n-                sess.struct_err(&format!(\"could not exec the linker `{}`\", LLVM_DWP_EXECUTABLE))\n-            };\n \n-            err.note(&e.to_string());\n+        fn alloc_relocation<'arena>(&'arena self, data: Relocations) -> &'arena Relocations {\n+            (*self.arena_relocations.alloc(data)).borrow()\n+        }\n \n-            if !dwp_not_found {\n-                err.note(&format!(\"{:?}\", &cmd));\n+        fn read_input<'arena>(&'arena self, path: &Path) -> std::io::Result<&'arena [u8]> {\n+            let file = File::open(&path)?;\n+            let mmap = (unsafe { Mmap::map(file) })?;\n+            Ok(self.alloc_mmap(mmap))\n+        }\n+    }\n+\n+    match sess.time(\"run_thorin\", || -> Result<(), thorin::Error> {\n+        let thorin_sess = ThorinSession::default();\n+        let mut package = thorin::DwarfPackage::new(&thorin_sess);\n+\n+        // Input objs contain .o/.dwo files from the current crate.\n+        match sess.opts.debugging_opts.split_dwarf_kind {\n+            SplitDwarfKind::Single => {\n+                for input_obj in cg_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n+                    package.add_input_object(input_obj)?;\n+                }\n             }\n+            SplitDwarfKind::Split => {\n+                for input_obj in cg_results.modules.iter().filter_map(|m| m.dwarf_object.as_ref()) {\n+                    package.add_input_object(input_obj)?;\n+                }\n+            }\n+        }\n \n-            err.emit();\n+        // Input rlibs contain .o/.dwo files from dependencies.\n+        let input_rlibs = cg_results\n+            .crate_info\n+            .used_crate_source\n+            .values()\n+            .filter_map(|csource| csource.rlib.as_ref())\n+            .map(|(path, _)| path);\n+        for input_rlib in input_rlibs {\n+            debug!(?input_rlib);\n+            package.add_input_object(input_rlib)?;\n+        }\n+\n+        // Failing to read the referenced objects is expected for dependencies where the path in the\n+        // executable will have been cleaned by Cargo, but the referenced objects will be contained\n+        // within rlibs provided as inputs.\n+        //\n+        // If paths have been remapped, then .o/.dwo files from the current crate also won't be\n+        // found, but are provided explicitly above.\n+        //\n+        // Adding an executable is primarily done to make `thorin` check that all the referenced\n+        // dwarf objects are found in the end.\n+        package.add_executable(\n+            &executable_out_filename,\n+            thorin::MissingReferencedObjectBehaviour::Skip,\n+        )?;\n+\n+        let output = package.finish()?.write()?;\n+        let mut output_stream = BufWriter::new(\n+            OpenOptions::new()\n+                .read(true)\n+                .write(true)\n+                .create(true)\n+                .truncate(true)\n+                .open(dwp_out_filename)?,\n+        );\n+        output_stream.write_all(&output)?;\n+        output_stream.flush()?;\n+\n+        Ok(())\n+    }) {\n+        Ok(()) => {}\n+        Err(e) => {\n+            sess.struct_err(\"linking dwarf objects with thorin failed\")\n+                .note(&format!(\"{:?}\", e))\n+                .emit();\n         }\n     }\n }\n@@ -916,14 +976,11 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         SplitDebuginfo::Packed if sess.target.is_like_msvc => {}\n \n         // ... and otherwise we're processing a `*.dwp` packed dwarf file.\n+        //\n         // We cannot rely on the .o paths in the exectuable because they may have been\n-        // remapped by --remap-path-prefix and therefore invalid. So we need to provide\n-        // the .o paths explicitly\n-        SplitDebuginfo::Packed => link_dwarf_object(\n-            sess,\n-            &out_filename,\n-            codegen_results.modules.iter().filter_map(|m| m.object.as_ref()),\n-        ),\n+        // remapped by --remap-path-prefix and therefore invalid, so we need to provide\n+        // the .o/.dwo paths explicitly.\n+        SplitDebuginfo::Packed => link_dwarf_object(sess, codegen_results, out_filename),\n     }\n \n     let strip = strip_value(sess);"}, {"sha": "e2dc64d8ce2ddcce90949d447403a3424db38b99", "filename": "src/test/run-make-fulldeps/split-debuginfo/Makefile", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile?ref=2dc1a8a779f158ed070ccbde4529a97d178c0334", "patch": "@@ -57,7 +57,45 @@ packed-single:\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \trm -rf $(TMPDIR)/*.dwp\n \n-unpacked: unpacked-split unpacked-single\n+packed-remapped: packed-remapped-split packed-remapped-single\n+\n+packed-remapped-split:\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 \\\n+\t\t-Z split-dwarf-kind=split --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n+\tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\n+packed-remapped-single:\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 \\\n+\t\t-Z split-dwarf-kind=single --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n+\tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\n+packed-crosscrate: packed-crosscrate-split packed-crosscrate-single\n+\n+packed-crosscrate-split:\n+\t$(RUSTC) --crate-type lib -Z unstable-options -C split-debuginfo=packed \\\n+\t\t-Zsplit-dwarf-kind=split -C debuginfo=2 -g bar.rs\n+\tls $(TMPDIR)/*.rlib\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib -Z unstable-options -C split-debuginfo=packed \\\n+\t\t-Zsplit-dwarf-kind=split -C debuginfo=2 -g main.rs\n+\trm $(TMPDIR)/*.dwo\n+\trm $(TMPDIR)/main.dwp\n+\trm $(TMPDIR)/$(call BIN,main)\n+\n+packed-crosscrate-single:\n+\t$(RUSTC) --crate-type lib -Z unstable-options -C split-debuginfo=packed \\\n+\t\t-Zsplit-dwarf-kind=single -C debuginfo=2 -g bar.rs\n+\tls $(TMPDIR)/*.rlib\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib -Z unstable-options -C split-debuginfo=packed \\\n+\t\t-Zsplit-dwarf-kind=single -C debuginfo=2 -g main.rs\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\trm $(TMPDIR)/main.dwp\n+\trm $(TMPDIR)/$(call BIN,main)\n+\n+unpacked: unpacked-split unpacked-single unpacked-remapped-split unpacked-remapped-single\n \n unpacked-split:\n \t$(RUSTC) foo.rs -g -C split-debuginfo=unpacked -Z unstable-options -Zsplit-dwarf-kind=split\n@@ -69,5 +107,15 @@ unpacked-single:\n \t$(RUSTC) foo.rs -g -C split-debuginfo=unpacked -Z unstable-options -Zsplit-dwarf-kind=single\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\n+unpacked-remapped-split:\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=unpacked -C debuginfo=2 \\\n+\t\t-Z split-dwarf-kind=split --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n+\tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\n+unpacked-remapped-single:\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=unpacked -C debuginfo=2 \\\n+\t\t-Z split-dwarf-kind=single --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n+\tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n endif\n endif"}, {"sha": "07dd0715252cc346913b560ee70946ab9467e4aa", "filename": "src/test/run-make-fulldeps/split-debuginfo/bar.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fbar.rs?ref=2dc1a8a779f158ed070ccbde4529a97d178c0334", "patch": "@@ -0,0 +1,13 @@\n+pub struct Bar {\n+    x: u32,\n+}\n+\n+impl Bar {\n+    pub fn print(&self) {\n+        println!(\"{}\", self.x);\n+    }\n+}\n+\n+pub fn make_bar(x: u32) -> Bar {\n+    Bar { x }\n+}"}, {"sha": "b058e540862343f7a2b2b791e78fdfc830dc65e3", "filename": "src/test/run-make-fulldeps/split-debuginfo/foo.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Ffoo.rs?ref=2dc1a8a779f158ed070ccbde4529a97d178c0334", "patch": "@@ -1 +1,15 @@\n+pub struct Foo {\n+    x: u32,\n+}\n+\n+impl Foo {\n+    pub fn print(&self) {\n+        println!(\"{}\", self.x);\n+    }\n+}\n+\n+pub fn make_foo(x: u32) -> Foo {\n+    Foo { x }\n+}\n+\n fn main() {}"}, {"sha": "21fa16e40a4abaa42ac9f0d68df9f20630979027", "filename": "src/test/run-make-fulldeps/split-debuginfo/main.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fmain.rs?ref=2dc1a8a779f158ed070ccbde4529a97d178c0334", "patch": "@@ -0,0 +1,8 @@\n+extern crate bar;\n+\n+use bar::{Bar, make_bar};\n+\n+fn main() {\n+    let b = make_bar(3);\n+    b.print();\n+}"}, {"sha": "eef04c767fb7c6bf7871b6997e3f67c274701b9d", "filename": "src/test/run-make-fulldeps/split-dwarf/Makefile", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/08ed338f561b000ce5672b55c0545fa7f3f13591/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/08ed338f561b000ce5672b55c0545fa7f3f13591/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile?ref=08ed338f561b000ce5672b55c0545fa7f3f13591", "patch": "@@ -1,17 +0,0 @@\n--include ../tools.mk\n-\n-# only-linux\n-\n-all: packed remapped\n-\n-remapped:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n-\tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n-\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=unpacked -C debuginfo=2 --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n-\tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n-\n-packed:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 foo.rs -g\n-\trm $(TMPDIR)/foo.dwp\n-\trm $(TMPDIR)/$(call BIN,foo)"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make-fulldeps/split-dwarf/foo.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08ed338f561b000ce5672b55c0545fa7f3f13591/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ed338f561b000ce5672b55c0545fa7f3f13591/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2Ffoo.rs?ref=08ed338f561b000ce5672b55c0545fa7f3f13591", "patch": "@@ -1 +0,0 @@\n-fn main() {}"}, {"sha": "4c28655bc865354926422bed5ecb321bd328404a", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc1a8a779f158ed070ccbde4529a97d178c0334/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=2dc1a8a779f158ed070ccbde4529a97d178c0334", "patch": "@@ -109,6 +109,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"env_logger\",\n     \"expect-test\",\n     \"fake-simd\",\n+    \"fallible-iterator\", // dependency of `thorin`\n     \"filetime\",\n     \"fixedbitset\",\n     \"flate2\",\n@@ -201,6 +202,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"tempfile\",\n     \"termcolor\",\n     \"termize\",\n+    \"thorin-dwp\",\n     \"thread_local\",\n     \"time\",\n     \"tinyvec\","}]}