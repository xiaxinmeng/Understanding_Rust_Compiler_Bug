{"sha": "ae8a438034caee5c345792b7655c689324fd25c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOGE0MzgwMzRjYWVlNWMzNDU3OTJiNzY1NWM2ODkzMjRmZDI1Yzg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-10T14:15:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-10T14:15:03Z"}, "message": "Rollup merge of #85112 - RalfJung:promoted-errors, r=oli-obk\n\nensure failing promoteds in const/static bodies are handled correctly\n\n`const`/`static` bodies are the one case where we still promote code that might fail to evaluate. Ensure that this is handled correctly; in particular, it must not fail compilation.\n\n`src/test/ui/consts/const-eval/erroneous-const.rs` ensures that when a non-promoted fails to evaluate, we *do* show an error.\n\nr? `@oli-obk`", "tree": {"sha": "3cf7e720b3150d2f5df98c5b1d9fc08bc58c4142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf7e720b3150d2f5df98c5b1d9fc08bc58c4142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae8a438034caee5c345792b7655c689324fd25c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmT/oCRBK7hj4Ov3rIwAASesIAFAZWC/+CZKiIH/QRkd+dy5N\nyctwhe6+k+PmtvxDoUMl3tarfU8vgR2KAg/EaAOsyR8qJhEONLU5YReLQ9fg43RA\nYikg+FDerN0sksIbzO4j0SKwfqkA0RL6bfdNIMNeBC/2ghzSs/hvUEU+WPFurfpD\nO26f9ktgJrabPORIb1zNQ2NgC2xuSVLU8n+s1lPNnxhVFiQ2EpCYBW5iV1Qhrmkk\nVfnkYWr9oyDXIDrN3MTy/57t3qmGSBpZetGm8rlRkwOSXSfE0Co5M4kT0pQJsp/E\nEUPEbgCaEdmQ30GK1ZQgOUrX8wPZyf6lWT+J11hXPvgY5zsp+Id0J44DmJGIk7w=\n=kGxN\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cf7e720b3150d2f5df98c5b1d9fc08bc58c4142\nparent 7107c899700e8141b53eddbd5d9e93a6267cb691\nparent 7a01160ce484325b6de27cf56400039d1b2c3721\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620656103 +0200\ncommitter GitHub <noreply@github.com> 1620656103 +0200\n\nRollup merge of #85112 - RalfJung:promoted-errors, r=oli-obk\n\nensure failing promoteds in const/static bodies are handled correctly\n\n`const`/`static` bodies are the one case where we still promote code that might fail to evaluate. Ensure that this is handled correctly; in particular, it must not fail compilation.\n\n`src/test/ui/consts/const-eval/erroneous-const.rs` ensures that when a non-promoted fails to evaluate, we *do* show an error.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a438034caee5c345792b7655c689324fd25c8", "html_url": "https://github.com/rust-lang/rust/commit/ae8a438034caee5c345792b7655c689324fd25c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a438034caee5c345792b7655c689324fd25c8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7107c899700e8141b53eddbd5d9e93a6267cb691", "url": "https://api.github.com/repos/rust-lang/rust/commits/7107c899700e8141b53eddbd5d9e93a6267cb691", "html_url": "https://github.com/rust-lang/rust/commit/7107c899700e8141b53eddbd5d9e93a6267cb691"}, {"sha": "7a01160ce484325b6de27cf56400039d1b2c3721", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a01160ce484325b6de27cf56400039d1b2c3721", "html_url": "https://github.com/rust-lang/rust/commit/7a01160ce484325b6de27cf56400039d1b2c3721"}], "stats": {"total": 120, "additions": 101, "deletions": 19}, "files": [{"sha": "bee5a7cb3ba7255fce8b1c48f497be30b7f0a277", "filename": "src/test/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=ae8a438034caee5c345792b7655c689324fd25c8", "patch": "@@ -10,6 +10,8 @@ impl<T> PrintName<T> {\n \n const fn no_codegen<T>() {\n     if false {\n+        // This bad constant is only used in dead code in a no-codegen function... and yet we still\n+        // must make sure that the build fails.\n         let _ = PrintName::<T>::VOID; //~ERROR could not evaluate static initializer\n     }\n }"}, {"sha": "7e2a60929c73d36a278389859fe79ade6c460f3e", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=ae8a438034caee5c345792b7655c689324fd25c8", "patch": "@@ -27,16 +27,16 @@ LL | #![warn(const_err, unconditional_panic)]\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/erroneous-const.rs:13:17\n+  --> $DIR/erroneous-const.rs:15:17\n    |\n LL |         let _ = PrintName::<T>::VOID;\n    |                 ^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 referenced constant has errors\n-   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:13:17\n+   |                 inside `no_codegen::<i32>` at $DIR/erroneous-const.rs:15:17\n ...\n LL | pub static FOO: () = no_codegen::<i32>();\n-   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:17:22\n+   |                      ------------------- inside `FOO` at $DIR/erroneous-const.rs:19:22\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "aa0f093bf6293c73f420d9d5412efec36492d49e", "filename": "src/test/ui/consts/const-eval/erroneous-const2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.rs?ref=ae8a438034caee5c345792b7655c689324fd25c8", "patch": "@@ -0,0 +1,21 @@\n+//! Make sure we error on erroneous consts even if they are unused.\n+#![warn(const_err, unconditional_panic)]\n+\n+struct PrintName<T>(T);\n+impl<T> PrintName<T> {\n+    const VOID: () = [()][2]; //~WARN any use of this value will cause an error\n+    //~^ WARN this operation will panic at runtime\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+}\n+\n+pub static FOO: () = {\n+    if false {\n+        // This bad constant is only used in dead code in a static initializer... and yet we still\n+        // must make sure that the build fails.\n+        let _ = PrintName::<i32>::VOID; //~ERROR could not evaluate static initializer\n+    }\n+};\n+\n+fn main() {\n+    FOO\n+}"}, {"sha": "813d3ee249fb2be97deaafed153c9deb4ef0430f", "filename": "src/test/ui/consts/const-eval/erroneous-const2.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=ae8a438034caee5c345792b7655c689324fd25c8", "patch": "@@ -0,0 +1,37 @@\n+warning: this operation will panic at runtime\n+  --> $DIR/erroneous-const2.rs:6:22\n+   |\n+LL |     const VOID: () = [()][2];\n+   |                      ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n+   |\n+note: the lint level is defined here\n+  --> $DIR/erroneous-const2.rs:2:20\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n+warning: any use of this value will cause an error\n+  --> $DIR/erroneous-const2.rs:6:22\n+   |\n+LL |     const VOID: () = [()][2];\n+   |     -----------------^^^^^^^-\n+   |                      |\n+   |                      index out of bounds: the length is 1 but the index is 2\n+   |\n+note: the lint level is defined here\n+  --> $DIR/erroneous-const2.rs:2:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/erroneous-const2.rs:15:17\n+   |\n+LL |         let _ = PrintName::<i32>::VOID;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to previous error; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "77e7d484071860fb5f979a1ed501a37040982d4d", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=ae8a438034caee5c345792b7655c689324fd25c8", "patch": "@@ -1,12 +1,12 @@\n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:13:5\n+  --> $DIR/promoted_errors.rs:15:5\n    |\n LL |       0 - 1\n    |       ^^^^^\n    |       |\n    |       attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n-   |       inside `X` at $DIR/promoted_errors.rs:33:29\n+   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |       inside `X` at $DIR/promoted_errors.rs:38:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n@@ -18,15 +18,15 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:9\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:33:28\n+  --> $DIR/promoted_errors.rs:38:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();"}, {"sha": "6b17346e6ecd1456f65c34ece14b1d3e522b834a", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=ae8a438034caee5c345792b7655c689324fd25c8", "patch": "@@ -1,12 +1,12 @@\n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:18:5\n+  --> $DIR/promoted_errors.rs:20:5\n    |\n LL |       1 / 0\n    |       ^^^^^\n    |       |\n    |       attempt to divide `1_i32` by zero\n-   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:18:5\n-   |       inside `X` at $DIR/promoted_errors.rs:36:29\n+   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:20:5\n+   |       inside `X` at $DIR/promoted_errors.rs:41:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n@@ -18,15 +18,15 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:9\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:36:28\n+  --> $DIR/promoted_errors.rs:41:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();"}, {"sha": "77e7d484071860fb5f979a1ed501a37040982d4d", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=ae8a438034caee5c345792b7655c689324fd25c8", "patch": "@@ -1,12 +1,12 @@\n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:13:5\n+  --> $DIR/promoted_errors.rs:15:5\n    |\n LL |       0 - 1\n    |       ^^^^^\n    |       |\n    |       attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n-   |       inside `X` at $DIR/promoted_errors.rs:33:29\n+   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |       inside `X` at $DIR/promoted_errors.rs:38:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n@@ -18,15 +18,15 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:9\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:33:28\n+  --> $DIR/promoted_errors.rs:38:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();"}, {"sha": "5bafea1ed46bdf1c4faa8cd048462869ab8dbec6", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a438034caee5c345792b7655c689324fd25c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=ae8a438034caee5c345792b7655c689324fd25c8", "patch": "@@ -6,6 +6,8 @@\n // build-pass\n // ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n \n+//! This test ensures that when we promote code that fails to evaluate, the build still succeeds.\n+\n #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n \n // The only way to have promoteds that fail is in `const fn` called from `const`/`static`.\n@@ -29,6 +31,9 @@ const fn oob() -> i32 {\n     [1, 2, 3][4]\n }\n \n+// An unused constant containing failing promoteds.\n+// This should work as long as `const_err` can be turned into just a warning;\n+// once it turns into a hard error, just remove `X`.\n const X: () = {\n     let _x: &'static u32 = &overflow();\n     //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n@@ -41,4 +46,21 @@ const X: () = {\n     let _x: &'static i32 = &oob();\n };\n \n-fn main() {}\n+const fn mk_false() -> bool { false }\n+\n+// An actually used constant referencing failing promoteds in dead code.\n+// This needs to always work.\n+const Y: () = {\n+    if mk_false() {\n+        let _x: &'static u32 = &overflow();\n+        let _x: &'static i32 = &div_by_zero1();\n+        let _x: &'static i32 = &div_by_zero2();\n+        let _x: &'static i32 = &div_by_zero3();\n+        let _x: &'static i32 = &oob();\n+    }\n+    ()\n+};\n+\n+fn main() {\n+    let _y = Y;\n+}"}]}