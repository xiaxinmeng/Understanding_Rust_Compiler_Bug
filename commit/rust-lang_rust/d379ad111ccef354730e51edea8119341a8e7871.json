{"sha": "d379ad111ccef354730e51edea8119341a8e7871", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNzlhZDExMWNjZWYzNTQ3MzBlNTFlZGVhODExOTM0MWE4ZTc4NzE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-05T13:24:28Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-14T00:39:36Z"}, "message": "syntax: tests: fix fallout from using ptr::P.", "tree": {"sha": "5896fd037c2983f9dee6abd9b567b969b338a655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5896fd037c2983f9dee6abd9b567b969b338a655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d379ad111ccef354730e51edea8119341a8e7871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d379ad111ccef354730e51edea8119341a8e7871", "html_url": "https://github.com/rust-lang/rust/commit/d379ad111ccef354730e51edea8119341a8e7871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d379ad111ccef354730e51edea8119341a8e7871/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccd8498afbb371939b7decdbee712f726ccbded3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd8498afbb371939b7decdbee712f726ccbded3", "html_url": "https://github.com/rust-lang/rust/commit/ccd8498afbb371939b7decdbee712f726ccbded3"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "310f7c4f3036fa5a2c92576dc830c623adee649b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d379ad111ccef354730e51edea8119341a8e7871", "patch": "@@ -1130,6 +1130,7 @@ mod test {\n     use fold::Folder;\n     use parse;\n     use parse::token;\n+    use ptr::P;\n     use util::parser_testing::{string_to_parser};\n     use util::parser_testing::{string_to_pat, string_to_crate, strs_to_idents};\n     use visit;\n@@ -1239,7 +1240,7 @@ mod test {\n         let attr1 = make_dummy_attr (\"foo\");\n         let attr2 = make_dummy_attr (\"bar\");\n         let escape_attr = make_dummy_attr (\"macro_escape\");\n-        let attrs1 = vec!(attr1, escape_attr, attr2);\n+        let attrs1 = vec!(attr1.clone(), escape_attr, attr2.clone());\n         assert_eq!(contains_macro_escape(attrs1.as_slice()),true);\n         let attrs2 = vec!(attr1,attr2);\n         assert_eq!(contains_macro_escape(attrs2.as_slice()),false);"}, {"sha": "44ed347d70c9785bd2e1ba6eb395f954b4e06aaf", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d379ad111ccef354730e51edea8119341a8e7871", "patch": "@@ -1236,7 +1236,7 @@ mod test {\n         fn fold_ident(&mut self, _: ast::Ident) -> ast::Ident {\n             token::str_to_ident(\"zz\")\n         }\n-        fn fold_mac(&mut self, macro: &ast::Mac) -> ast::Mac {\n+        fn fold_mac(&mut self, macro: ast::Mac) -> ast::Mac {\n             fold::noop_fold_mac(macro, self)\n         }\n     }"}, {"sha": "e5b6359000b6c1647dc69d6395e51be1f12ec8c0", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d379ad111ccef354730e51edea8119341a8e7871", "patch": "@@ -702,7 +702,6 @@ pub fn integer_lit(s: &str, sd: &SpanHandler, sp: Span) -> ast::Lit_ {\n mod test {\n     use super::*;\n     use serialize::json;\n-    use std::gc::GC;\n     use codemap::{Span, BytePos, Spanned};\n     use owned_slice::OwnedSlice;\n     use ast;\n@@ -711,6 +710,7 @@ mod test {\n     use attr::AttrMetaMethods;\n     use parse::parser::Parser;\n     use parse::token::{str_to_ident};\n+    use ptr::P;\n     use util::parser_testing::{string_to_tts, string_to_parser};\n     use util::parser_testing::{string_to_expr, string_to_item};\n     use util::parser_testing::string_to_stmt;\n@@ -1023,10 +1023,10 @@ mod test {\n                       P(ast::Item{ident:str_to_ident(\"a\"),\n                             attrs:Vec::new(),\n                             id: ast::DUMMY_NODE_ID,\n-                            node: ast::ItemFn(ast::P(ast::FnDecl {\n+                            node: ast::ItemFn(P(ast::FnDecl {\n                                 inputs: vec!(ast::Arg{\n-                                    ty: ast::P(ast::Ty{id: ast::DUMMY_NODE_ID,\n-                                                       node: ast::TyPath(ast::Path{\n+                                    ty: P(ast::Ty{id: ast::DUMMY_NODE_ID,\n+                                                  node: ast::TyPath(ast::Path{\n                                         span:sp(10,13),\n                                         global:false,\n                                         segments: vec!(\n@@ -1053,9 +1053,9 @@ mod test {\n                                     }),\n                                         id: ast::DUMMY_NODE_ID\n                                     }),\n-                                output: ast::P(ast::Ty{id: ast::DUMMY_NODE_ID,\n-                                                       node: ast::TyNil,\n-                                                       span:sp(15,15)}), // not sure\n+                                output: P(ast::Ty{id: ast::DUMMY_NODE_ID,\n+                                                  node: ast::TyNil,\n+                                                  span:sp(15,15)}), // not sure\n                                 cf: ast::Return,\n                                 variadic: false\n                             }),\n@@ -1069,7 +1069,7 @@ mod test {\n                                             predicates: Vec::new(),\n                                         }\n                                     },\n-                                    ast::P(ast::Block {\n+                                    P(ast::Block {\n                                         view_items: Vec::new(),\n                                         stmts: vec!(P(Spanned{\n                                             node: ast::StmtSemi(P(ast::Expr{"}, {"sha": "d0df95d711ee407abad10bdbd5bd318eeeb13e7c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d379ad111ccef354730e51edea8119341a8e7871", "patch": "@@ -2786,16 +2786,17 @@ mod test {\n     use ast_util;\n     use codemap;\n     use parse::token;\n+    use ptr::P;\n \n     #[test]\n     fn test_fun_to_string() {\n         let abba_ident = token::str_to_ident(\"abba\");\n \n         let decl = ast::FnDecl {\n             inputs: Vec::new(),\n-            output: ast::P(ast::Ty {id: 0,\n-                                    node: ast::TyNil,\n-                                    span: codemap::DUMMY_SP}),\n+            output: P(ast::Ty {id: 0,\n+                               node: ast::TyNil,\n+                               span: codemap::DUMMY_SP}),\n             cf: ast::Return,\n             variadic: false\n         };"}, {"sha": "d0faa3c682064029ecec220d2858ffd5f35b0b4b", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d379ad111ccef354730e51edea8119341a8e7871/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=d379ad111ccef354730e51edea8119341a8e7871", "patch": "@@ -9,14 +9,12 @@\n // except according to those terms.\n \n use ast;\n-use ast::P;\n use parse::{new_parse_sess};\n use parse::{ParseSess,string_to_filemap,filemap_to_tts};\n use parse::{new_parser_from_source_str};\n use parse::parser::Parser;\n use parse::token;\n-\n-use std::gc::Gc;\n+use ptr::P;\n \n /// Map a string to tts, using a made-up filename:\n pub fn string_to_tts(source_str: String) -> Vec<ast::TokenTree> {"}]}