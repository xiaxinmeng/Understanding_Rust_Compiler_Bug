{"sha": "d602d7b97e737c461fdd0ff724d092ec53707157", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDJkN2I5N2U3MzdjNDYxZmRkMGZmNzI0ZDA5MmVjNTM3MDcxNTc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-08T21:55:51Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-08T22:06:56Z"}, "message": "Extend middle::reachable to also consider provided trait methods.", "tree": {"sha": "b75979205d659c8dfc482abd0ff9394b0a6025e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75979205d659c8dfc482abd0ff9394b0a6025e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d602d7b97e737c461fdd0ff724d092ec53707157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d602d7b97e737c461fdd0ff724d092ec53707157", "html_url": "https://github.com/rust-lang/rust/commit/d602d7b97e737c461fdd0ff724d092ec53707157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d602d7b97e737c461fdd0ff724d092ec53707157/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209308439a1099b285520459f57e380f18793c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/209308439a1099b285520459f57e380f18793c07", "html_url": "https://github.com/rust-lang/rust/commit/209308439a1099b285520459f57e380f18793c07"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "2c4710f1e452b6559c2709bfc55df0eb538b928e", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d602d7b97e737c461fdd0ff724d092ec53707157/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d602d7b97e737c461fdd0ff724d092ec53707157/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d602d7b97e737c461fdd0ff724d092ec53707157", "patch": "@@ -323,19 +323,37 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n // items of non-exported traits (or maybe all local traits?) unless their respective\n // trait items are used from inlinable code through method call syntax or UFCS, or their\n // trait is a lang item.\n-struct CollectPrivateImplItemsVisitor<'a> {\n+struct CollectPrivateImplItemsVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     access_levels: &'a privacy::AccessLevels,\n     worklist: &'a mut Vec<ast::NodeId>,\n }\n \n-impl<'a, 'v> ItemLikeVisitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n+impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         // We need only trait impls here, not inherent impls, and only non-exported ones\n-        if let hir::ItemImpl(.., Some(_), _, ref impl_item_refs) = item.node {\n+        if let hir::ItemImpl(.., Some(ref trait_ref), _, ref impl_item_refs) = item.node {\n             if !self.access_levels.is_reachable(item.id) {\n                 for impl_item_ref in impl_item_refs {\n                     self.worklist.push(impl_item_ref.id.node_id);\n                 }\n+\n+                let trait_def_id = match trait_ref.path.def {\n+                    Def::Trait(def_id) => def_id,\n+                    _ => unreachable!()\n+                };\n+\n+                if !trait_def_id.is_local() {\n+                    return\n+                }\n+\n+                for default_method in self.tcx.provided_trait_methods(trait_def_id) {\n+                    let node_id = self.tcx\n+                                      .map\n+                                      .as_local_node_id(default_method.def_id)\n+                                      .unwrap();\n+                    self.worklist.push(node_id);\n+                }\n             }\n         }\n     }\n@@ -369,6 +387,7 @@ pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n     {\n         let mut collect_private_impl_items = CollectPrivateImplItemsVisitor {\n+            tcx: tcx,\n             access_levels: access_levels,\n             worklist: &mut reachable_context.worklist,\n         };"}, {"sha": "d48a973368501d978dddade44c045f5674e42a0c", "filename": "src/test/run-pass/auxiliary/issue_38226_aux.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d602d7b97e737c461fdd0ff724d092ec53707157/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38226_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d602d7b97e737c461fdd0ff724d092ec53707157/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38226_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38226_aux.rs?ref=d602d7b97e737c461fdd0ff724d092ec53707157", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"rlib\"]\n+\n+#[inline(never)]\n+pub fn foo<T>() {\n+    let _: Box<SomeTrait> = Box::new(SomeTraitImpl);\n+}\n+\n+pub fn bar() {\n+    SomeTraitImpl.bar();\n+}\n+\n+mod submod {\n+    pub trait SomeTrait {\n+        fn bar(&self) {\n+            panic!(\"NO\")\n+        }\n+    }\n+}\n+\n+use self::submod::SomeTrait;\n+\n+pub struct SomeTraitImpl;\n+impl SomeTrait for SomeTraitImpl {}"}, {"sha": "33604212af9516c0357c7e7d6b1a53cfaa6ffb6d", "filename": "src/test/run-pass/issue-38226.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d602d7b97e737c461fdd0ff724d092ec53707157/src%2Ftest%2Frun-pass%2Fissue-38226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d602d7b97e737c461fdd0ff724d092ec53707157/src%2Ftest%2Frun-pass%2Fissue-38226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38226.rs?ref=d602d7b97e737c461fdd0ff724d092ec53707157", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test makes sure that we don't run into a linker error because of the\n+// middle::reachable pass missing trait methods with default impls.\n+\n+// aux-build:issue_38226_aux.rs\n+\n+// Need -Cno-prepopulate-passes to really disable inlining, otherwise the faulty\n+// code gets optimized out:\n+// compile-flags: -Cno-prepopulate-passes\n+\n+extern crate issue_38226_aux;\n+\n+fn main() {\n+    issue_38226_aux::foo::<()>();\n+}"}]}