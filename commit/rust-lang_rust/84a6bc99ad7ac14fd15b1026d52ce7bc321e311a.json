{"sha": "84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "node_id": "C_kwDOAAsO6NoAKDg0YTZiYzk5YWQ3YWMxNGZkMTViMTAyNmQ1MmNlN2JjMzIxZTMxMWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T09:46:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T09:46:26Z"}, "message": "Auto merge of #12742 - TonalidadeHidrica:fix-obsolete-config-keys, r=Veykril\n\nFix obsolete config keys\n\nThe config keys were drastically reorganized by #12010, but the docs don't reflect the updates, causing inconsistency and confusion.  I checked for such obsolete configuration keys and updated to the new one.  For reproducibility, I attach a small shell script that I used to examine the old keys.  Now the script only detects `cargoExtraArgs` and `overrideCargo`, which originates from other type definition in the code but not from the configuration.\n\n<details><summary>script</summary>\n\n```bash\necho \"allowMergingIntoGlobImports\nexprFillDefault\nimportEnforceGranularity\nimportGranularity\nimportMergeBehavior\nimportMergeBehaviour\nimportGroup\nimportPrefix\nwarmup\nloadOutDirsFromCheck\nrunBuildScripts\nrunBuildScriptsCommand\nuseRustcWrapperForBuildScripts\nenableExperimental\nprocAttrMacros\nbreakPoints\nexitPoints\nyieldPoints\nlinksInHover\nlinksInHover\ngotoTypeDef\nchainingHints\nclosureReturnTypeHints\nhideNamedConstructorHints\nparameterHints\nreborrowHints\ntypeHints\nlruCapacity\ncargoExtraArgs\noverrideCargo\nrustcSource\nenableRangeFormatting\nassist\\.allowMergingIntoGlobImports\nassist\\.exprFillDefault\nassist\\.importEnforceGranularity\nassist\\.importGranularity\nassist\\.importMergeBehavior\nassist\\.importMergeBehaviour\nassist\\.importGroup\nassist\\.importPrefix\nprimeCaches\\.enable\ncache\\.warmup\ncargo\\.loadOutDirsFromCheck\ncargo\\.runBuildScripts\ncargo\\.runBuildScriptsCommand\ncargo\\.useRustcWrapperForBuildScripts\ncompletion\\.snippets\ndiagnostics\\.enableExperimental\nexperimental\\.procAttrMacros\nhighlighting\\.strings\nhighlightRelated\\.breakPoints\nhighlightRelated\\.exitPoints\nhighlightRelated\\.yieldPoints\nhighlightRelated\\.references\nhover\\.documentation\nhover\\.linksInHover\nhoverActions\\.linksInHover\nhoverActions\\.debug\nhoverActions\\.enable\nhoverActions\\.gotoTypeDef\nhoverActions\\.implementations\nhoverActions\\.references\nhoverActions\\.run\ninlayHints\\.chainingHints\ninlayHints\\.closureReturnTypeHints\ninlayHints\\.hideNamedConstructorHints\ninlayHints\\.parameterHints\ninlayHints\\.reborrowHints\ninlayHints\\.typeHints\nlruCapacity\nrunnables\\.cargoExtraArgs\nrunnables\\.overrideCargo\nrustcSource\nrustfmt\\.enableRangeFormatting\nallFeatures\naddCallArgumentSnippets\naddCallParenthesis\ncallInfo\\.full\ncargo\\.allFeatures\ncheckOnSave\\.allFeatures\ncompletion\\.addCallArgumentSnippets\ncompletion\\.addCallParenthesis\" | while read -r pattern\ndo\n  rg '\\b'$pattern'\\b([^.]|$)' . -g \"!crates/rust-analyzer/src/config/patch_old_style.rs\" -g \"!editors/code/src/config.ts\" -g \"!a.sh\" --no-heading --color=always --line-number\ndone\n\nexit\n\nexcluded\n# debug\n# enable\n# run\n# implementations\n# references\n# documentation\n# references\n# snippets\n# strings\n# full\n```\n\n</details>", "tree": {"sha": "89058a5fe54709316824537a6edef62d7788c00a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89058a5fe54709316824537a6edef62d7788c00a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "html_url": "https://github.com/rust-lang/rust/commit/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cbf23c192517cfebb0d754987aae95bc683b7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cbf23c192517cfebb0d754987aae95bc683b7a4", "html_url": "https://github.com/rust-lang/rust/commit/4cbf23c192517cfebb0d754987aae95bc683b7a4"}, {"sha": "e3bde579c4a103a90572975902837d793ea8c60e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3bde579c4a103a90572975902837d793ea8c60e", "html_url": "https://github.com/rust-lang/rust/commit/e3bde579c4a103a90572975902837d793ea8c60e"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "802449f85884db9209aef9f0a6b7d3e08b6c9595", "filename": "crates/ide-assists/src/handlers/auto_import.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "patch": "@@ -40,7 +40,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n //\n // .Import Granularity\n //\n-// It is possible to configure how use-trees are merged with the `importGranularity` setting.\n+// It is possible to configure how use-trees are merged with the `imports.granularity.group` setting.\n // It has the following configurations:\n //\n // - `crate`: Merge imports from the same crate into a single use statement. This kind of\n@@ -50,11 +50,11 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n // - `preserve`: Do not change the granularity of any imports. For auto-import this has the same\n //  effect as `item`.\n //\n-// In `VS Code` the configuration for this is `rust-analyzer.assist.importGranularity`.\n+// In `VS Code` the configuration for this is `rust-analyzer.imports.granularity.group`.\n //\n // .Import Prefix\n //\n-// The style of imports in the same crate is configurable through the `importPrefix` setting.\n+// The style of imports in the same crate is configurable through the `imports.prefix` setting.\n // It has the following configurations:\n //\n // - `crate`: This setting will force paths to be always absolute, starting with the `crate`\n@@ -64,7 +64,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n //  `super` or an extern crate identifier.\n // - `plain`: This setting does not impose any restrictions in imports.\n //\n-// In `VS Code` the configuration for this is `rust-analyzer.assist.importPrefix`.\n+// In `VS Code` the configuration for this is `rust-analyzer.imports.prefix`.\n //\n // image::https://user-images.githubusercontent.com/48062697/113020673-b85be580-917a-11eb-9022-59585f35d4f8.gif[]\n "}, {"sha": "6dbcfb0a5d7304a10274af8d150fbb24ef310ef4", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "patch": "@@ -95,7 +95,7 @@ use super::Completions;\n //\n // .Import configuration\n //\n-// It is possible to configure how use-trees are merged with the `importMergeBehavior` setting.\n+// It is possible to configure how use-trees are merged with the `imports.granularity.group` setting.\n // Mimics the corresponding behavior of the `Auto Import` feature.\n //\n // .LSP and performance implications"}, {"sha": "d2680c775838695975ee5deb9787969df532b143", "filename": "crates/ide-completion/src/snippet.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fsnippet.rs?ref=84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "patch": "@@ -6,12 +6,12 @@\n //\n // rust-analyzer allows the user to define custom (postfix)-snippets that may depend on items to be accessible for the current scope to be applicable.\n //\n-// A custom snippet can be defined by adding it to the `rust-analyzer.completion.snippets` object respectively.\n+// A custom snippet can be defined by adding it to the `rust-analyzer.completion.snippets.custom` object respectively.\n //\n // [source,json]\n // ----\n // {\n-//   \"rust-analyzer.completion.snippets\": {\n+//   \"rust-analyzer.completion.snippets.custom\": {\n //     \"thread spawn\": {\n //       \"prefix\": [\"spawn\", \"tspawn\"],\n //       \"body\": ["}, {"sha": "de42458354566f481b944db43b753c2328c3cefd", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "patch": "@@ -737,7 +737,7 @@ fn handle_rustc_crates(\n     let root_pkg =\n         rustc_workspace.packages().find(|package| rustc_workspace[*package].name == \"rustc_driver\");\n     // The rustc workspace might be incomplete (such as if rustc-dev is not\n-    // installed for the current toolchain) and `rustcSource` is set to discover.\n+    // installed for the current toolchain) and `rustc_source` is set to discover.\n     if let Some(root_pkg) = root_pkg {\n         // Iterate through every crate in the dependency subtree of rustc_driver using BFS\n         let mut queue = VecDeque::new();\n@@ -822,7 +822,7 @@ fn handle_rustc_crates(\n                 for (from, _) in pkg_crates.get(&pkg).into_iter().flatten() {\n                     // Avoid creating duplicate dependencies\n                     // This avoids the situation where `from` depends on e.g. `arrayvec`, but\n-                    // `rust_analyzer` thinks that it should use the one from the `rustcSource`\n+                    // `rust_analyzer` thinks that it should use the one from the `rustc_source`\n                     // instead of the one from `crates.io`\n                     if !crate_graph[*from].dependencies.iter().any(|d| d.name == name) {\n                         add_dep(crate_graph, *from, name.clone(), to);"}, {"sha": "e3875228a1877539fad2058a8771bcb149db2051", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "patch": "@@ -1798,7 +1798,7 @@ fn run_rustfmt(\n                         String::from(\n                             \"rustfmt range formatting is unstable. \\\n                             Opt-in by using a nightly build of rustfmt and setting \\\n-                            `rustfmt.enableRangeFormatting` to true in your LSP configuration\",\n+                            `rustfmt.rangeFormatting.enable` to true in your LSP configuration\",\n                         ),\n                     )\n                     .into());"}, {"sha": "999a6437ab9ed3955573447d37bbb83cd424f710", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/84a6bc99ad7ac14fd15b1026d52ce7bc321e311a/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=84a6bc99ad7ac14fd15b1026d52ce7bc321e311a", "patch": "@@ -308,12 +308,16 @@ nvim_lsp.rust_analyzer.setup({\n     on_attach=on_attach,\n     settings = {\n         [\"rust-analyzer\"] = {\n-            assist = {\n-                importGranularity = \"module\",\n-                importPrefix = \"self\",\n+            imports = {\n+                granularity = {\n+                    group = \"module\",\n+                },\n+                prefix = \"self\",\n             },\n             cargo = {\n-                loadOutDirsFromCheck = true\n+                buildScripts = {\n+                    enable = true,\n+                },\n             },\n             procMacro = {\n                 enable = true\n@@ -364,7 +368,9 @@ if executable('rust-analyzer')\n         \\   'whitelist': ['rust'],\n         \\   'initialization_options': {\n         \\     'cargo': {\n-        \\       'loadOutDirsFromCheck': v:true,\n+        \\       'buildScripts': {\n+        \\         'enable': v:true,\n+        \\       },\n         \\     },\n         \\     'procMacro': {\n         \\       'enable': v:true,\n@@ -527,7 +533,9 @@ For example, a very common configuration is to enable proc-macro support, can be\n ----\n {\n   \"cargo\": {\n-    \"loadOutDirsFromCheck\": true,\n+    \"buildScripts\": {\n+      \"enable\": true,\n+    },\n   },\n   \"procMacro\": {\n     \"enable\": true,\n@@ -705,7 +713,7 @@ include::./generated_assists.adoc[]\n == Diagnostics\n \n While most errors and warnings provided by rust-analyzer come from the `cargo check` integration, there's a growing number of diagnostics implemented using rust-analyzer's own analysis.\n-Some of these diagnostics don't respect `\\#[allow]` or `\\#[deny]` attributes yet, but can be turned off using the `rust-analyzer.diagnostics.enable`, `rust-analyzer.diagnostics.enableExperimental` or `rust-analyzer.diagnostics.disabled` settings.\n+Some of these diagnostics don't respect `\\#[allow]` or `\\#[deny]` attributes yet, but can be turned off using the `rust-analyzer.diagnostics.enable`, `rust-analyzer.diagnostics.experimental.enable` or `rust-analyzer.diagnostics.disabled` settings.\n \n include::./generated_diagnostic.adoc[]\n "}]}