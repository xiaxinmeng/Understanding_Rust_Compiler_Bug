{"sha": "47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f", "node_id": "C_kwDOAAsO6NoAKDQ3YjVkOTVkYjhhYmFhZjRmZGFkODc4ZWMzYjA2ZGZhYTJhMWQ3NGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-01T05:24:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-01T22:06:34Z"}, "message": "Remove `FileMatch`.\n\nIt's returned from `FileSearch::search` but it's only used to print some\ndebug info.", "tree": {"sha": "5f766bad63b12e3243846bc68ca003cf8f290e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f766bad63b12e3243846bc68ca003cf8f290e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f", "html_url": "https://github.com/rust-lang/rust/commit/47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f916f3a36b21629d58e1b8ea4dbddc0db1316903", "url": "https://api.github.com/repos/rust-lang/rust/commits/f916f3a36b21629d58e1b8ea4dbddc0db1316903", "html_url": "https://github.com/rust-lang/rust/commit/f916f3a36b21629d58e1b8ea4dbddc0db1316903"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "8db65a10c138635fa49dfabf90b875a295300400", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f", "patch": "@@ -223,7 +223,7 @@ use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{struct_span_err, FatalError};\n use rustc_session::config::{self, CrateType};\n use rustc_session::cstore::{CrateSource, MetadataLoader};\n-use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n+use rustc_session::filesearch::FileSearch;\n use rustc_session::search_paths::PathKind;\n use rustc_session::utils::CanonicalizedPath;\n use rustc_session::Session;\n@@ -396,7 +396,7 @@ impl<'a> CrateLocator<'a> {\n         // The goal of this step is to look at as little metadata as possible.\n         self.filesearch.search(|spf, kind| {\n             let file = match &spf.file_name_str {\n-                None => return FileDoesntMatch,\n+                None => return,\n                 Some(file) => file,\n             };\n             let (hash, found_kind) = if file.starts_with(&rlib_prefix) && file.ends_with(\".rlib\") {\n@@ -415,23 +415,22 @@ impl<'a> CrateLocator<'a> {\n                     staticlibs\n                         .push(CrateMismatch { path: spf.path.clone(), got: \"static\".to_string() });\n                 }\n-                return FileDoesntMatch;\n+                return;\n             };\n \n             info!(\"lib candidate: {}\", spf.path.display());\n \n             let (rlibs, rmetas, dylibs) = candidates.entry(hash.to_string()).or_default();\n             let path = fs::canonicalize(&spf.path).unwrap_or_else(|_| spf.path.clone());\n             if seen_paths.contains(&path) {\n-                return FileDoesntMatch;\n+                return;\n             };\n             seen_paths.insert(path.clone());\n             match found_kind {\n                 CrateFlavor::Rlib => rlibs.insert(path, kind),\n                 CrateFlavor::Rmeta => rmetas.insert(path, kind),\n                 CrateFlavor::Dylib => dylibs.insert(path, kind),\n             };\n-            FileMatches\n         });\n         self.crate_rejections.via_kind.extend(staticlibs);\n "}, {"sha": "e6ec16b393b2f966334e594ab73a88b9a7d8b6d6", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=47b5d95db8abaaf4fdad878ec3b06dfaa2a1d74f", "patch": "@@ -1,7 +1,5 @@\n //! A module for searching for libraries\n \n-pub use self::FileMatch::*;\n-\n use std::env;\n use std::fs;\n use std::iter::FromIterator;\n@@ -45,21 +43,13 @@ impl<'a> FileSearch<'a> {\n \n     pub fn search<F>(&self, mut pick: F)\n     where\n-        F: FnMut(&SearchPathFile, PathKind) -> FileMatch,\n+        F: FnMut(&SearchPathFile, PathKind),\n     {\n         for search_path in self.search_paths() {\n             debug!(\"searching {}\", search_path.dir.display());\n             for spf in search_path.files.iter() {\n                 debug!(\"testing {}\", spf.path.display());\n-                let maybe_picked = pick(spf, search_path.kind);\n-                match maybe_picked {\n-                    FileMatches => {\n-                        debug!(\"picked {}\", spf.path.display());\n-                    }\n-                    FileDoesntMatch => {\n-                        debug!(\"rejected {}\", spf.path.display());\n-                    }\n-                }\n+                pick(spf, search_path.kind);\n             }\n         }\n     }"}]}