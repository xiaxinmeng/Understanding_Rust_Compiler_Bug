{"sha": "2a82d1cd0c93b8d33c885734373bd7806725b37d", "node_id": "C_kwDOAAsO6NoAKDJhODJkMWNkMGM5M2I4ZDMzYzg4NTczNDM3M2JkNzgwNjcyNWIzN2Q", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-11-16T02:11:15Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-11-16T02:33:39Z"}, "message": "Suggest where feature should be placed", "tree": {"sha": "91fc4cb70200dfcffa2eba1c6dc3fe50c3ad0954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91fc4cb70200dfcffa2eba1c6dc3fe50c3ad0954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a82d1cd0c93b8d33c885734373bd7806725b37d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYZMYgwAKCRC4DhnkZita\npAkGAP9VXUNwQgQIzmrbiiquGAJlk2exuQyxybeteEKmzSdR3QD8DC2lAdZhIHB8\nMn2p9NpImCrTftl/RA7piFVV+5HDfAQ=\n=EpZA\n-----END PGP SIGNATURE-----", "payload": "tree 91fc4cb70200dfcffa2eba1c6dc3fe50c3ad0954\nparent 77b0613f1a7d420a19fdddc731e45ee0b5d7c10a\nauthor Jacob Pratt <jacob@jhpratt.dev> 1637028675 -0500\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1637030019 -0500\n\nSuggest where feature should be placed\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a82d1cd0c93b8d33c885734373bd7806725b37d", "html_url": "https://github.com/rust-lang/rust/commit/2a82d1cd0c93b8d33c885734373bd7806725b37d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a82d1cd0c93b8d33c885734373bd7806725b37d/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77b0613f1a7d420a19fdddc731e45ee0b5d7c10a", "url": "https://api.github.com/repos/rust-lang/rust/commits/77b0613f1a7d420a19fdddc731e45ee0b5d7c10a", "html_url": "https://github.com/rust-lang/rust/commit/77b0613f1a7d420a19fdddc731e45ee0b5d7c10a"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "9b6037c6a4ba7b0c5105f6f51d1346016dcca472", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2a82d1cd0c93b8d33c885734373bd7806725b37d/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a82d1cd0c93b8d33c885734373bd7806725b37d/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=2a82d1cd0c93b8d33c885734373bd7806725b37d", "patch": "@@ -258,7 +258,7 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n     let mut next_feature_omits_tracking_issue = false;\n \n     let mut in_feature_group = false;\n-    let mut prev_name = None;\n+    let mut prev_names = vec![];\n \n     contents\n         .lines()\n@@ -291,11 +291,11 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 }\n \n                 in_feature_group = true;\n-                prev_name = None;\n+                prev_names = vec![];\n                 return None;\n             } else if line.starts_with(FEATURE_GROUP_END_PREFIX) {\n                 in_feature_group = false;\n-                prev_name = None;\n+                prev_names = vec![];\n                 return None;\n             }\n \n@@ -325,16 +325,49 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 }\n             };\n             if in_feature_group {\n-                if prev_name > Some(name) {\n+                if prev_names.last() > Some(&name) {\n+                    // This assumes the user adds the feature name at the end of the list, as we're\n+                    // not looking ahead.\n+                    let correct_index = match prev_names.binary_search(&name) {\n+                        Ok(_) => {\n+                            // This only occurs when the feature name has already been declared.\n+                            tidy_error!(\n+                                bad,\n+                                \"{}:{}: duplicate feature {}\",\n+                                path.display(),\n+                                line_number,\n+                                name,\n+                            );\n+                            // skip any additional checks for this line\n+                            return None;\n+                        }\n+                        Err(index) => index,\n+                    };\n+\n+                    let correct_placement = if correct_index == 0 {\n+                        \"at the beginning of the feature group\".to_owned()\n+                    } else if correct_index == prev_names.len() {\n+                        // I don't believe this is reachable given the above assumption, but it\n+                        // doesn't hurt to be safe.\n+                        \"at the end of the feature group\".to_owned()\n+                    } else {\n+                        format!(\n+                            \"between {} and {}\",\n+                            prev_names[correct_index - 1],\n+                            prev_names[correct_index],\n+                        )\n+                    };\n+\n                     tidy_error!(\n                         bad,\n-                        \"{}:{}: feature {} is not sorted by feature name\",\n+                        \"{}:{}: feature {} is not sorted by feature name (should be {})\",\n                         path.display(),\n                         line_number,\n                         name,\n+                        correct_placement,\n                     );\n                 }\n-                prev_name = Some(name);\n+                prev_names.push(name);\n             }\n \n             let issue_str = parts.next().unwrap().trim();"}]}