{"sha": "edf88416426d82d0099fc888e443bf21feeb1f04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZjg4NDE2NDI2ZDgyZDAwOTlmYzg4OGU0NDNiZjIxZmVlYjFmMDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-06T23:33:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:51Z"}, "message": "syntax: Convert statics to constants", "tree": {"sha": "d29a3013428dfe5654ef3c2276c85622044a6667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d29a3013428dfe5654ef3c2276c85622044a6667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edf88416426d82d0099fc888e443bf21feeb1f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edf88416426d82d0099fc888e443bf21feeb1f04", "html_url": "https://github.com/rust-lang/rust/commit/edf88416426d82d0099fc888e443bf21feeb1f04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edf88416426d82d0099fc888e443bf21feeb1f04/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ccb61609238063b2f1b0cd038974426cdf81bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccb61609238063b2f1b0cd038974426cdf81bc8", "html_url": "https://github.com/rust-lang/rust/commit/8ccb61609238063b2f1b0cd038974426cdf81bc8"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "03325ad470668497522d3db0710a4bbe2fb995b6", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=edf88416426d82d0099fc888e443bf21feeb1f04", "patch": "@@ -48,9 +48,9 @@ pub enum Architecture {\n }\n \n #[allow(non_uppercase_statics)]\n-static IntelBits: u32 = (1 << (X86 as uint)) | (1 << (X86_64 as uint));\n+const IntelBits: u32 = (1 << (X86 as uint)) | (1 << (X86_64 as uint));\n #[allow(non_uppercase_statics)]\n-static ArmBits: u32 = (1 << (Arm as uint));\n+const ArmBits: u32 = (1 << (Arm as uint));\n \n pub struct AbiData {\n     abi: Abi,"}, {"sha": "274bb2e39e019fbf1bbc37cc92907585d1c2bc64", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=edf88416426d82d0099fc888e443bf21feeb1f04", "patch": "@@ -104,8 +104,8 @@ impl PartialEq for Ident {\n // this uint is a reference to a table stored in thread-local\n // storage.\n pub type SyntaxContext = u32;\n-pub static EMPTY_CTXT : SyntaxContext = 0;\n-pub static ILLEGAL_CTXT : SyntaxContext = 1;\n+pub const EMPTY_CTXT : SyntaxContext = 0;\n+pub const ILLEGAL_CTXT : SyntaxContext = 1;\n \n /// A name is a part of an identifier, representing a string or gensym. It's\n /// the result of interning.\n@@ -198,13 +198,13 @@ pub struct DefId {\n \n /// Item definitions in the currently-compiled crate would have the CrateNum\n /// LOCAL_CRATE in their DefId.\n-pub static LOCAL_CRATE: CrateNum = 0;\n-pub static CRATE_NODE_ID: NodeId = 0;\n+pub const LOCAL_CRATE: CrateNum = 0;\n+pub const CRATE_NODE_ID: NodeId = 0;\n \n /// When parsing and doing expansions, we initially give all AST nodes this AST\n /// node value. Then later, in the renumber pass, we renumber them to have\n /// small, positive ids.\n-pub static DUMMY_NODE_ID: NodeId = -1;\n+pub const DUMMY_NODE_ID: NodeId = -1;\n \n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against"}, {"sha": "5d96cc359c2ff8d83da72a501dc6a18bb18c8734", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=edf88416426d82d0099fc888e443bf21feeb1f04", "patch": "@@ -96,7 +96,7 @@ pub struct Span {\n     pub expn_id: ExpnId\n }\n \n-pub static DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n+pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Spanned<T> {\n@@ -227,7 +227,7 @@ pub struct ExpnInfo {\n #[deriving(PartialEq, Eq, Clone, Show, Hash, Encodable, Decodable)]\n pub struct ExpnId(u32);\n \n-pub static NO_EXPANSION: ExpnId = ExpnId(-1);\n+pub const NO_EXPANSION: ExpnId = ExpnId(-1);\n \n impl ExpnId {\n     pub fn from_llvm_cookie(cookie: c_uint) -> ExpnId {"}, {"sha": "e7f40cf072296e16fc209fa526de503b0a5a01a0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=edf88416426d82d0099fc888e443bf21feeb1f04", "patch": "@@ -91,10 +91,10 @@ use std::iter;\n \n bitflags! {\n     flags Restrictions: u8 {\n-        static UNRESTRICTED                  = 0b0000,\n-        static RESTRICTION_STMT_EXPR         = 0b0001,\n-        static RESTRICTION_NO_BAR_OP         = 0b0010,\n-        static RESTRICTION_NO_STRUCT_LITERAL = 0b0100\n+        const UNRESTRICTED                  = 0b0000,\n+        const RESTRICTION_STMT_EXPR         = 0b0001,\n+        const RESTRICTION_NO_BAR_OP         = 0b0010,\n+        const RESTRICTION_NO_STRUCT_LITERAL = 0b0100\n     }\n }\n "}, {"sha": "fa6b0c5ad4ae785d079c36dd2f345892c751e19a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=edf88416426d82d0099fc888e443bf21feeb1f04", "patch": "@@ -385,13 +385,13 @@ macro_rules! declare_special_idents_and_keywords {(\n         use ast::{Ident, Name};\n         $(\n             #[allow(non_uppercase_statics)]\n-            pub static $si_static: Ident = Ident { name: Name($si_name), ctxt: 0 };\n+            pub const $si_static: Ident = Ident { name: Name($si_name), ctxt: 0 };\n          )*\n     }\n \n     pub mod special_names {\n         use ast::Name;\n-        $( #[allow(non_uppercase_statics)] pub static $si_static: Name =  Name($si_name); )*\n+        $( #[allow(non_uppercase_statics)] pub const $si_static: Name =  Name($si_name); )*\n     }\n \n     /**\n@@ -432,13 +432,13 @@ macro_rules! declare_special_idents_and_keywords {(\n }}\n \n // If the special idents get renumbered, remember to modify these two as appropriate\n-pub static SELF_KEYWORD_NAME: Name = Name(SELF_KEYWORD_NAME_NUM);\n-static STATIC_KEYWORD_NAME: Name = Name(STATIC_KEYWORD_NAME_NUM);\n-static SUPER_KEYWORD_NAME: Name = Name(SUPER_KEYWORD_NAME_NUM);\n+pub const SELF_KEYWORD_NAME: Name = Name(SELF_KEYWORD_NAME_NUM);\n+const STATIC_KEYWORD_NAME: Name = Name(STATIC_KEYWORD_NAME_NUM);\n+const SUPER_KEYWORD_NAME: Name = Name(SUPER_KEYWORD_NAME_NUM);\n \n-pub static SELF_KEYWORD_NAME_NUM: u32 = 1;\n-static STATIC_KEYWORD_NAME_NUM: u32 = 2;\n-static SUPER_KEYWORD_NAME_NUM: u32 = 3;\n+pub const SELF_KEYWORD_NAME_NUM: u32 = 1;\n+const STATIC_KEYWORD_NAME_NUM: u32 = 2;\n+const SUPER_KEYWORD_NAME_NUM: u32 = 3;\n \n // NB: leaving holes in the ident table is bad! a different ident will get\n // interned with the id from the hole, but it will be between the min and max"}, {"sha": "e1a2b2aeefeea7bd4563e1c87d88802e4c8035db", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf88416426d82d0099fc888e443bf21feeb1f04/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=edf88416426d82d0099fc888e443bf21feeb1f04", "patch": "@@ -90,10 +90,10 @@ pub fn rust_printer_annotated<'a>(writer: Box<io::Writer+'static>,\n }\n \n #[allow(non_uppercase_statics)]\n-pub static indent_unit: uint = 4u;\n+pub const indent_unit: uint = 4u;\n \n #[allow(non_uppercase_statics)]\n-pub static default_columns: uint = 78u;\n+pub const default_columns: uint = 78u;\n \n /// Requires you to pass an input filename and reader so that\n /// it can scan the input text for comments and literals to"}]}