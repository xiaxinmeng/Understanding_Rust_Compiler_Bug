{"sha": "8fad24d3c286aae9974ed3429cb24af249ced76d", "node_id": "C_kwDOAAsO6NoAKDhmYWQyNGQzYzI4NmFhZTk5NzRlZDM0MjljYjI0YWYyNDljZWQ3NmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T11:40:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T11:40:46Z"}, "message": "minor: Simplify", "tree": {"sha": "9653db351e7a0e61ccbeb2242e6ccbd5840c91c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9653db351e7a0e61ccbeb2242e6ccbd5840c91c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fad24d3c286aae9974ed3429cb24af249ced76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fad24d3c286aae9974ed3429cb24af249ced76d", "html_url": "https://github.com/rust-lang/rust/commit/8fad24d3c286aae9974ed3429cb24af249ced76d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fad24d3c286aae9974ed3429cb24af249ced76d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91200e31e3a277670a3615e390eb986c82b2541e", "url": "https://api.github.com/repos/rust-lang/rust/commits/91200e31e3a277670a3615e390eb986c82b2541e", "html_url": "https://github.com/rust-lang/rust/commit/91200e31e3a277670a3615e390eb986c82b2541e"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "98b37dd12252e060225d44d81708c1f9e1547655", "filename": "crates/mbe/src/expander/transcriber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fad24d3c286aae9974ed3429cb24af249ced76d/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fad24d3c286aae9974ed3429cb24af249ced76d/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs?ref=8fad24d3c286aae9974ed3429cb24af249ced76d", "patch": "@@ -192,7 +192,7 @@ fn expand_repeat(\n         t.delimiter = None;\n         push_subtree(&mut buf, t);\n \n-        if let Some(ref sep) = separator {\n+        if let Some(sep) = separator {\n             match sep {\n                 Separator::Ident(ident) => {\n                     has_seps = 1;"}, {"sha": "8021e63f7f0a18e1777f8108e0aa5d260166b215", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8fad24d3c286aae9974ed3429cb24af249ced76d/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fad24d3c286aae9974ed3429cb24af249ced76d/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=8fad24d3c286aae9974ed3429cb24af249ced76d", "patch": "@@ -396,7 +396,7 @@ impl TokenIdAlloc {\n     }\n }\n \n-/// A Raw Token (straightly from lexer) convertor\n+/// A raw token (straight from lexer) convertor\n struct RawConvertor<'a> {\n     lexed: parser::LexedStr<'a>,\n     pos: usize,\n@@ -525,8 +525,7 @@ enum SynToken {\n impl SynToken {\n     fn token(&self) -> &SyntaxToken {\n         match self {\n-            SynToken::Ordinary(it) => it,\n-            SynToken::Punch(it, _) => it,\n+            SynToken::Ordinary(it) | SynToken::Punch(it, _) => it,\n         }\n     }\n }\n@@ -659,7 +658,7 @@ impl<'a> TtTreeSink<'a> {\n \n         let mut last = self.cursor;\n         for _ in 0..n_tokens {\n-            let tmp_str: SmolStr;\n+            let tmp: u8;\n             if self.cursor.eof() {\n                 break;\n             }\n@@ -669,18 +668,15 @@ impl<'a> TtTreeSink<'a> {\n                     Some(tt::buffer::TokenTreeRef::Leaf(leaf, _)) => {\n                         // Mark the range if needed\n                         let (text, id) = match leaf {\n-                            tt::Leaf::Ident(ident) => (&ident.text, ident.id),\n+                            tt::Leaf::Ident(ident) => (ident.text.as_str(), ident.id),\n                             tt::Leaf::Punct(punct) => {\n                                 assert!(punct.char.is_ascii());\n-                                let char = &(punct.char as u8);\n-                                tmp_str = SmolStr::new_inline(\n-                                    std::str::from_utf8(std::slice::from_ref(char)).unwrap(),\n-                                );\n-                                (&tmp_str, punct.id)\n+                                tmp = punct.char as u8;\n+                                (std::str::from_utf8(std::slice::from_ref(&tmp)).unwrap(), punct.id)\n                             }\n-                            tt::Leaf::Literal(lit) => (&lit.text, lit.id),\n+                            tt::Leaf::Literal(lit) => (lit.text.as_str(), lit.id),\n                         };\n-                        let range = TextRange::at(self.text_pos, TextSize::of(text.as_str()));\n+                        let range = TextRange::at(self.text_pos, TextSize::of(text));\n                         self.token_map.insert(id, range);\n                         self.cursor = self.cursor.bump();\n                         text\n@@ -740,7 +736,7 @@ impl<'a> TtTreeSink<'a> {\n \n         match self.roots.last_mut() {\n             None | Some(0) => self.roots.push(1),\n-            Some(ref mut n) => **n += 1,\n+            Some(n) => *n += 1,\n         };\n     }\n "}]}