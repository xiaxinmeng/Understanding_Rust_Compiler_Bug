{"sha": "eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViODBhYzRlNzIxYmY1ZDdiNGYwM2ZkNjgwMzFkZGQ1MmQ3NmQ4YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-14T14:27:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-14T14:27:13Z"}, "message": "Auto merge of #6697 - camsteffen:vec-init-push-fp, r=flip1995\n\nFix vec_init_then_push false positives\n\nchangelog: Fix vec_init_then_push false positives\n\nFixes #6615", "tree": {"sha": "3df0d094c997ba82cf90e2d3d169d1fa5367d6db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df0d094c997ba82cf90e2d3d169d1fa5367d6db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0", "html_url": "https://github.com/rust-lang/rust/commit/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f611ceef7d11c906cf063ac6acc2189d769eab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f611ceef7d11c906cf063ac6acc2189d769eab5", "html_url": "https://github.com/rust-lang/rust/commit/5f611ceef7d11c906cf063ac6acc2189d769eab5"}, {"sha": "a42be8589a0b380da18a78da4c81205ff8086243", "url": "https://api.github.com/repos/rust-lang/rust/commits/a42be8589a0b380da18a78da4c81205ff8086243", "html_url": "https://github.com/rust-lang/rust/commit/a42be8589a0b380da18a78da4c81205ff8086243"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "8d111f98add9aac2c7ba145d443bbbf67cb5a594", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0", "patch": "@@ -1,12 +1,14 @@\n-use crate::utils::{is_type_diagnostic_item, match_def_path, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{\n+    is_type_diagnostic_item, match_def_path, path_to_local, path_to_local_id, paths, snippet, span_lint_and_sugg,\n+};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Local, PatKind, QPath, Stmt, StmtKind};\n+use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Local, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{symbol::sym, Span, Symbol};\n+use rustc_span::{symbol::sym, Span};\n use std::convert::TryInto;\n \n declare_clippy_lint! {\n@@ -45,8 +47,8 @@ enum VecInitKind {\n     WithCapacity(u64),\n }\n struct VecPushSearcher {\n+    local_id: HirId,\n     init: VecInitKind,\n-    name: Symbol,\n     lhs_is_local: bool,\n     lhs_span: Span,\n     err_span: Span,\n@@ -81,17 +83,20 @@ impl VecPushSearcher {\n }\n \n impl LateLintPass<'_> for VecInitThenPush {\n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+    fn check_block(&mut self, _: &LateContext<'tcx>, _: &'tcx Block<'tcx>) {\n         self.searcher = None;\n+    }\n+\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n         if_chain! {\n             if !in_external_macro(cx.sess(), local.span);\n             if let Some(init) = local.init;\n-            if let PatKind::Binding(BindingAnnotation::Mutable, _, ident, None) = local.pat.kind;\n+            if let PatKind::Binding(BindingAnnotation::Mutable, id, _, None) = local.pat.kind;\n             if let Some(init_kind) = get_vec_init_kind(cx, init);\n             then {\n                 self.searcher = Some(VecPushSearcher {\n+                        local_id: id,\n                         init: init_kind,\n-                        name: ident.name,\n                         lhs_is_local: true,\n                         lhs_span: local.ty.map_or(local.pat.span, |t| local.pat.span.to(t.span)),\n                         err_span: local.span,\n@@ -106,13 +111,12 @@ impl LateLintPass<'_> for VecInitThenPush {\n             if_chain! {\n                 if !in_external_macro(cx.sess(), expr.span);\n                 if let ExprKind::Assign(left, right, _) = expr.kind;\n-                if let ExprKind::Path(QPath::Resolved(_, path)) = left.kind;\n-                if let Some(name) = path.segments.get(0);\n+                if let Some(id) = path_to_local(left);\n                 if let Some(init_kind) = get_vec_init_kind(cx, right);\n                 then {\n                     self.searcher = Some(VecPushSearcher {\n+                        local_id: id,\n                         init: init_kind,\n-                        name: name.ident.name,\n                         lhs_is_local: false,\n                         lhs_span: left.span,\n                         err_span: expr.span,\n@@ -128,10 +132,8 @@ impl LateLintPass<'_> for VecInitThenPush {\n             if_chain! {\n                 if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = stmt.kind;\n                 if let ExprKind::MethodCall(path, _, [self_arg, _], _) = expr.kind;\n+                if path_to_local_id(self_arg, searcher.local_id);\n                 if path.ident.name.as_str() == \"push\";\n-                if let ExprKind::Path(QPath::Resolved(_, self_path)) = self_arg.kind;\n-                if let [self_name] = self_path.segments;\n-                if self_name.ident.name == searcher.name;\n                 then {\n                     self.searcher = Some(VecPushSearcher {\n                         found: searcher.found + 1,"}, {"sha": "5099aad83bcbc78c1e32a8be3efddf760b203c9e", "filename": "tests/ui/vec_init_then_push.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0/tests%2Fui%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0/tests%2Fui%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_init_then_push.rs?ref=eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0", "patch": "@@ -12,10 +12,35 @@ fn main() {\n     cap_err.push(0);\n     cap_err.push(1);\n     cap_err.push(2);\n+    if true {\n+        // don't include this one\n+        cap_err.push(3);\n+    }\n \n     let mut cap_ok = Vec::with_capacity(10);\n     cap_ok.push(0);\n \n     new_err = Vec::new();\n     new_err.push(0);\n+\n+    let mut vec = Vec::new();\n+    // control flow at block final expression\n+    if true {\n+        // no lint\n+        vec.push(1);\n+    }\n+}\n+\n+pub fn no_lint() -> Vec<i32> {\n+    let mut p = Some(1);\n+    let mut vec = Vec::new();\n+    loop {\n+        match p {\n+            None => return vec,\n+            Some(i) => {\n+                vec.push(i);\n+                p = None;\n+            },\n+        }\n+    }\n }"}, {"sha": "9ec3e10e62470559cb304b27c6ea89f7f6700bf9", "filename": "tests/ui/vec_init_then_push.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0/tests%2Fui%2Fvec_init_then_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0/tests%2Fui%2Fvec_init_then_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_init_then_push.stderr?ref=eb80ac4e721bf5d7b4f03fd68031ddd52d76d8a0", "patch": "@@ -24,7 +24,7 @@ LL | |     cap_err.push(2);\n    | |____________________^ help: consider using the `vec![]` macro: `let mut cap_err = vec![..];`\n \n error: calls to `push` immediately after creation\n-  --> $DIR/vec_init_then_push.rs:19:5\n+  --> $DIR/vec_init_then_push.rs:23:5\n    |\n LL | /     new_err = Vec::new();\n LL | |     new_err.push(0);"}]}