{"sha": "84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "node_id": "C_kwDOAAsO6NoAKDg0ZjgwZjFmYzlmODljOGFiYmJiY2JlNTVjYzBiZDFkMGFlMjFjMjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T15:34:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T15:34:23Z"}, "message": "Auto merge of #2884 - oli-obk:ui_test, r=RalfJung,oli-obk\n\nUpdate to latest ui_test crate version.\n\nAlso stops using github actions groups that conflict with our groups as github does not nest them", "tree": {"sha": "24435458716f86879ca167489cb8bc9f0d032b8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24435458716f86879ca167489cb8bc9f0d032b8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "html_url": "https://github.com/rust-lang/rust/commit/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a477b81c7ebe2cf986ad205e213570b5acfbced4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a477b81c7ebe2cf986ad205e213570b5acfbced4", "html_url": "https://github.com/rust-lang/rust/commit/a477b81c7ebe2cf986ad205e213570b5acfbced4"}, {"sha": "f321c8d39dcc94b960c683623fd1645c50a3269e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f321c8d39dcc94b960c683623fd1645c50a3269e", "html_url": "https://github.com/rust-lang/rust/commit/f321c8d39dcc94b960c683623fd1645c50a3269e"}], "stats": {"total": 182, "additions": 118, "deletions": 64}, "files": [{"sha": "e2a7d484c234b34da3ba479a827a82da86f68b77", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -820,9 +820,9 @@ dependencies = [\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.6.2\"\n+version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3e10f5f88ce8c331a388deda1e6e2bd533c73ca89cc5f539a3df02ed35c8efba\"\n+checksum = \"95033b0e41b8018013d99a6f1486c1ae5bd080378ced60c5f797e93842423b33\"\n dependencies = [\n  \"bstr\",\n  \"cargo-platform\","}, {"sha": "f6f8183680445e346b31a4b44d35feaea577b14c", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -39,7 +39,7 @@ libloading = \"0.7\"\n \n [dev-dependencies]\n colored = \"2\"\n-ui_test = \"0.6.2\"\n+ui_test = \"0.9\"\n rustc_version = \"0.4\"\n # Features chosen to match those required by env_logger, to avoid rebuilds\n regex = { version = \"1.5.5\", default-features = false, features = [\"perf\", \"std\"] }"}, {"sha": "fe70ab3f45aa528493ee136b15bd5bd4e7e69541", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 78, "deletions": 24, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -2,6 +2,8 @@ use colored::*;\n use regex::bytes::Regex;\n use std::path::{Path, PathBuf};\n use std::{env, process::Command};\n+use ui_test::status_emitter::StatusEmitter;\n+use ui_test::CommandBuilder;\n use ui_test::{color_eyre::Result, Config, Match, Mode, OutputConflictHandling};\n \n fn miri_path() -> PathBuf {\n@@ -44,40 +46,30 @@ fn build_so_for_c_ffi_tests() -> PathBuf {\n }\n \n fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n-    let mut config = Config {\n-        target: Some(target.to_owned()),\n-        stderr_filters: STDERR.clone(),\n-        stdout_filters: STDOUT.clone(),\n-        root_dir: PathBuf::from(path),\n-        mode,\n-        program: miri_path(),\n-        quiet: false,\n-        edition: Some(\"2021\".into()),\n-        ..Config::default()\n-    };\n+    // Miri is rustc-like, so we create a default builder for rustc and modify it\n+    let mut program = CommandBuilder::rustc();\n+    program.program = miri_path();\n \n     let in_rustc_test_suite = option_env!(\"RUSTC_STAGE\").is_some();\n \n     // Add some flags we always want.\n     if in_rustc_test_suite {\n         // Less aggressive warnings to make the rustc toolstate management less painful.\n         // (We often get warnings when e.g. a feature gets stabilized or some lint gets added/improved.)\n-        config.args.push(\"-Astable-features\".into());\n-        config.args.push(\"-Aunused\".into());\n+        program.args.push(\"-Astable-features\".into());\n+        program.args.push(\"-Aunused\".into());\n     } else {\n-        config.args.push(\"-Dwarnings\".into());\n-        config.args.push(\"-Dunused\".into());\n+        program.args.push(\"-Dwarnings\".into());\n+        program.args.push(\"-Dunused\".into());\n     }\n     if let Ok(extra_flags) = env::var(\"MIRIFLAGS\") {\n         for flag in extra_flags.split_whitespace() {\n-            config.args.push(flag.into());\n+            program.args.push(flag.into());\n         }\n     }\n-    config.args.push(\"-Zui-testing\".into());\n-    if let Some(target) = &config.target {\n-        config.args.push(\"--target\".into());\n-        config.args.push(target.into());\n-    }\n+    program.args.push(\"-Zui-testing\".into());\n+    program.args.push(\"--target\".into());\n+    program.args.push(target.into());\n \n     // If we're on linux, and we're testing the extern-so functionality,\n     // then build the shared object file for testing external C function calls\n@@ -86,18 +78,31 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         let so_file_path = build_so_for_c_ffi_tests();\n         let mut flag = std::ffi::OsString::from(\"-Zmiri-extern-so-file=\");\n         flag.push(so_file_path.into_os_string());\n-        config.args.push(flag);\n+        program.args.push(flag);\n     }\n \n     let skip_ui_checks = env::var_os(\"MIRI_SKIP_UI_CHECKS\").is_some();\n \n-    config.output_conflict_handling = match (env::var_os(\"MIRI_BLESS\").is_some(), skip_ui_checks) {\n+    let output_conflict_handling = match (env::var_os(\"MIRI_BLESS\").is_some(), skip_ui_checks) {\n         (false, false) => OutputConflictHandling::Error,\n         (true, false) => OutputConflictHandling::Bless,\n         (false, true) => OutputConflictHandling::Ignore,\n         (true, true) => panic!(\"cannot use MIRI_BLESS and MIRI_SKIP_UI_CHECKS at the same time\"),\n     };\n \n+    let mut config = Config {\n+        target: Some(target.to_owned()),\n+        stderr_filters: STDERR.clone(),\n+        stdout_filters: STDOUT.clone(),\n+        root_dir: PathBuf::from(path),\n+        mode,\n+        program,\n+        output_conflict_handling,\n+        quiet: false,\n+        edition: Some(\"2021\".into()),\n+        ..Config::default()\n+    };\n+\n     // Handle command-line arguments.\n     let mut after_dashdash = false;\n     config.path_filter.extend(std::env::args().skip(1).filter(|arg| {\n@@ -135,7 +140,14 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n             \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n         ];\n     }\n-    ui_test::run_tests(config)\n+    ui_test::run_tests_generic(\n+        config,\n+        // The files we're actually interested in (all `.rs` files).\n+        |path| path.extension().is_some_and(|ext| ext == \"rs\"),\n+        // This could be used to overwrite the `Config` on a per-test basis.\n+        |_, _| None,\n+        TextAndGha,\n+    )\n }\n \n macro_rules! regexes {\n@@ -235,3 +247,45 @@ fn main() -> Result<()> {\n \n     Ok(())\n }\n+\n+/// This is a custom renderer for `ui_test` output that does not emit github actions\n+/// `group`s, while still producing regular github actions messages on test failures.\n+struct TextAndGha;\n+impl StatusEmitter for TextAndGha {\n+    fn failed_test<'a>(\n+        &'a self,\n+        revision: &'a str,\n+        path: &'a Path,\n+        cmd: &'a Command,\n+        stderr: &'a [u8],\n+    ) -> Box<dyn std::fmt::Debug + 'a> {\n+        Box::new((\n+            ui_test::status_emitter::Gha::<false>.failed_test(revision, path, cmd, stderr),\n+            ui_test::status_emitter::Text.failed_test(revision, path, cmd, stderr),\n+        ))\n+    }\n+\n+    fn run_tests(&self, _config: &Config) -> Box<dyn ui_test::status_emitter::DuringTestRun> {\n+        Box::new(TextAndGha)\n+    }\n+\n+    fn finalize(\n+        &self,\n+        failures: usize,\n+        succeeded: usize,\n+        ignored: usize,\n+        filtered: usize,\n+    ) -> Box<dyn ui_test::status_emitter::Summary> {\n+        Box::new((\n+            ui_test::status_emitter::Gha::<false>.finalize(failures, succeeded, ignored, filtered),\n+            ui_test::status_emitter::Text.finalize(failures, succeeded, ignored, filtered),\n+        ))\n+    }\n+}\n+\n+impl ui_test::status_emitter::DuringTestRun for TextAndGha {\n+    fn test_result(&mut self, path: &Path, revision: &str, result: &ui_test::TestResult) {\n+        ui_test::status_emitter::Text.test_result(path, revision, result);\n+        ui_test::status_emitter::Gha::<false>.test_result(path, revision, result);\n+    }\n+}"}, {"sha": "e8ba824db717c6fcf6f909cfa450344015bc3af2", "filename": "src/tools/miri/tests/fail/alloc/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-//@error-pattern: has size 1 and alignment 1, but gave size 1 and alignment 2\n+//@error-in-other-file: has size 1 and alignment 1, but gave size 1 and alignment 2\n \n fn main() {\n     unsafe {"}, {"sha": "e3f9a20ac3bcbd821d31825b511e643ca65bbc69", "filename": "src/tools/miri/tests/fail/alloc/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-//@error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n+//@error-in-other-file: has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "f07bbda4a9be9219468e549a80236419878c68eb", "filename": "src/tools/miri/tests/fail/alloc/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-//@error-pattern: dereferenced after this allocation got freed\n+//@error-in-other-file: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "2e88e5644e441c3810d07dbd21e61898e900131c", "filename": "src/tools/miri/tests/fail/alloc/global_system_mixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,6 +1,6 @@\n // Make sure we detect when the `Global` and `System` allocators are mixed\n // (even when the default `Global` uses `System`).\n-//@error-pattern: /deallocating .*, which is Rust heap memory, using .* heap deallocation operation/\n+//@error-in-other-file: /deallocating .*, which is Rust heap memory, using .* heap deallocation operation/\n \n //@normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\""}, {"sha": "49b2c62d7e4f7544eb3695c5eabb2474a5d60722", "filename": "src/tools/miri/tests/fail/alloc/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, realloc, Layout};\n \n-//@error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n+//@error-in-other-file: has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "130e2a8301e1c542b5517b668785d2cae3ad9f1a", "filename": "src/tools/miri/tests/fail/alloc/reallocate-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, realloc, Layout};\n \n-//@error-pattern: dereferenced after this allocation got freed\n+//@error-in-other-file: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "15a17a25afefc9c54441d8f2d05683b5f74269d5", "filename": "src/tools/miri/tests/fail/alloc/stack_free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,7 +1,7 @@\n // Validation/SB changes why we fail\n //@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-//@error-pattern: /deallocating .*, which is stack variable memory, using Rust heap deallocation operation/\n+//@error-in-other-file: /deallocating .*, which is stack variable memory, using Rust heap deallocation operation/\n \n fn main() {\n     let x = 42;"}, {"sha": "7e6f490bb3dd452b751228d663d1d905e20ced8d", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_create_main_terminate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,5 +1,5 @@\n //@ignore-target-windows: No libc on Windows\n-//@error-pattern: the main thread terminated without waiting for all remaining threads\n+//@error-in-other-file: the main thread terminated without waiting for all remaining threads\n \n // Check that we terminate the program when the main thread terminates.\n "}, {"sha": "b68a07797f8bd9e5c2306cebbc8789b417867fb8", "filename": "src/tools/miri/tests/fail/concurrency/windows_join_detached.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,5 +1,5 @@\n //@only-target-windows: Uses win32 api functions\n-//@error-pattern: Undefined Behavior: trying to join a detached thread\n+//@error-in-other-file: Undefined Behavior: trying to join a detached thread\n \n // Joining a detached thread is undefined behavior.\n "}, {"sha": "217d5677584135ae485efdde7c33862a99171ccf", "filename": "src/tools/miri/tests/fail/deny_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdeny_lint.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: miri cannot be run on programs that fail compilation\n+//@error-in-other-file: miri cannot be run on programs that fail compilation\n \n #![deny(warnings)]\n "}, {"sha": "8905d739078a2853290d51226cd84eec27833214", "filename": "src/tools/miri/tests/fail/intrinsics/simd-float-to-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: cannot be represented in target type `i32`\n+//@error-in-other-file: cannot be represented in target type `i32`\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "5dd9bd8a685507a0dfb204e7bce093d68c236f23", "filename": "src/tools/miri/tests/fail/intrinsics/simd-gather.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+//@error-in-other-file: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "0a64478dc74b274d554065ebde715568c97d461f", "filename": "src/tools/miri/tests/fail/intrinsics/simd-scatter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+//@error-in-other-file: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "3e0dd881db84e52a011beac32d988d70e83afd38", "filename": "src/tools/miri/tests/fail/layout_cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: a cycle occurred during layout computation\n+//@error-in-other-file: a cycle occurred during layout computation\n //~^ ERROR: cycle detected when computing layout of\n \n use std::mem;"}, {"sha": "984b44d6d40928b99f4126907060410df299eaa0", "filename": "src/tools/miri/tests/fail/memleak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: memory leaked\n+//@error-in-other-file: memory leaked\n //@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n fn main() {"}, {"sha": "a1f8d9957ff8e02a463bb8d9e23e30df55fd098e", "filename": "src/tools/miri/tests/fail/memleak_no_backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_no_backtrace.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,5 +1,5 @@\n //@compile-flags: -Zmiri-disable-leak-backtraces\n-//@error-pattern: the evaluated program leaked memory\n+//@error-in-other-file: the evaluated program leaked memory\n //@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n fn main() {"}, {"sha": "0927612d08eac8fd436b1521a06cbe2ff0d798ef", "filename": "src/tools/miri/tests/fail/memleak_rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmemleak_rc.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: memory leaked\n+//@error-in-other-file: memory leaked\n //@stderr-per-bitwidth\n //@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n "}, {"sha": "01b8c7bd66bf0f38602a25025ac23d91b7705adc", "filename": "src/tools/miri/tests/fail/no_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fno_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fno_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fno_main.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,2 +1,2 @@\n-//@error-pattern: miri can only run programs that have a main function\n+//@error-in-other-file: miri can only run programs that have a main function\n #![no_main]"}, {"sha": "9378adb8609df3d2a71be9dbc41d65e6b7dd5d21", "filename": "src/tools/miri/tests/fail/panic/double_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted\n+//@error-in-other-file: the program aborted\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"unsafe \\{ libc::abort\\(\\) \\}|crate::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@normalize-stderr-test: \"\\n  +[0-9]+:[^\\n]+\" -> \"$1\""}, {"sha": "300bfa32ecbd63340b0b397913887e6c4300aeb6", "filename": "src/tools/miri/tests/fail/panic/panic_abort1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted execution\n+//@error-in-other-file: the program aborted execution\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@compile-flags: -C panic=abort"}, {"sha": "5d691350577085d7fcc293d658129b9eaa16241d", "filename": "src/tools/miri/tests/fail/panic/panic_abort2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted execution\n+//@error-in-other-file: the program aborted execution\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@compile-flags: -C panic=abort"}, {"sha": "25afc315628e33228d4973b7b1f16651d91d204c", "filename": "src/tools/miri/tests/fail/panic/panic_abort3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted execution\n+//@error-in-other-file: the program aborted execution\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@compile-flags: -C panic=abort"}, {"sha": "025b51a5cf51aaa9ccb9226c25a40cbf0b059264", "filename": "src/tools/miri/tests/fail/panic/panic_abort4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: the program aborted execution\n+//@error-in-other-file: the program aborted execution\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n //@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n //@compile-flags: -C panic=abort"}, {"sha": "2f27e95297b25095fb1e580904072fc9e2bce93e", "filename": "src/tools/miri/tests/fail/shims/fs/isolated_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,5 +1,5 @@\n //@ignore-target-windows: File handling is not implemented yet\n-//@error-pattern: `open` not available when isolation is enabled\n+//@error-in-other-file: `open` not available when isolation is enabled\n \n fn main() {\n     let _file = std::fs::File::open(\"file.txt\").unwrap();"}, {"sha": "a34df7c7fe3ae6c36d28df31a65f727cb939a367", "filename": "src/tools/miri/tests/fail/stacked_borrows/deallocate_against_protector1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: /deallocating while item \\[Unique for .*\\] is strongly protected/\n+//@error-in-other-file: /deallocating while item \\[Unique for .*\\] is strongly protected/\n \n fn inner(x: &mut i32, f: fn(&mut i32)) {\n     // `f` may mutate, but it may not deallocate!"}, {"sha": "9126b7e8575b05f7fbfaa737185cadc7f4628ff8", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,7 +1,7 @@\n //! Test that drop_in_place mutably retags the entire place, even for a type that does not need\n //! dropping, ensuring among other things that it is writeable\n \n-//@error-pattern: /retag .* for Unique permission .* only grants SharedReadOnly permission/\n+//@error-in-other-file: /retag .* for Unique permission .* only grants SharedReadOnly permission/\n \n fn main() {\n     unsafe {"}, {"sha": "b2ec23bda02c5eadb4e6241d6dfdb5392f88b8bc", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_dealloc1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: /deallocation .* tag does not exist in the borrow stack/\n+//@error-in-other-file: /deallocation .* tag does not exist in the borrow stack/\n use std::alloc::{alloc, dealloc, Layout};\n \n fn main() {"}, {"sha": "075efe494123d84bc2694b4edc14dd87d05ac890", "filename": "src/tools/miri/tests/fail/stacked_borrows/issue-miri-1050-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: pointer to 4 bytes starting at offset 0 is out-of-bounds\n+//@error-in-other-file: pointer to 4 bytes starting at offset 0 is out-of-bounds\n \n fn main() {\n     unsafe {"}, {"sha": "1b43daa925389003c9b044eb9674a6c068278000", "filename": "src/tools/miri/tests/fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: is a dangling pointer\n+//@error-in-other-file: is a dangling pointer\n use std::ptr::NonNull;\n \n fn main() {"}, {"sha": "1ae6740924c50a3eda64f67955be9694d7168e26", "filename": "src/tools/miri/tests/fail/stacked_borrows/newtype_pair_retagging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: which is strongly protected\n+//@error-in-other-file: which is strongly protected\n struct Newtype<'a>(&'a mut i32, i32);\n \n fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {"}, {"sha": "f106274b8112ebd2a02f3d29ed6f84fbb059a8e6", "filename": "src/tools/miri/tests/fail/stacked_borrows/newtype_retagging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: which is strongly protected\n+//@error-in-other-file: which is strongly protected\n struct Newtype<'a>(&'a mut i32);\n \n fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {"}, {"sha": "fd51fa6468a0475f6c344619ced0556046325644", "filename": "src/tools/miri/tests/fail/stacked_borrows/zst_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,5 +1,5 @@\n //@compile-flags: -Zmiri-strict-provenance\n-//@error-pattern: /retag .* tag does not exist in the borrow stack/\n+//@error-in-other-file: /retag .* tag does not exist in the borrow stack/\n \n fn main() {\n     unsafe {"}, {"sha": "d96d778e6ca40c96a8e7ecea912c535fb4810c9e", "filename": "src/tools/miri/tests/fail/tokio/sleep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftokio%2Fsleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftokio%2Fsleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftokio%2Fsleep.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,6 +1,6 @@\n //@compile-flags: -Zmiri-permissive-provenance -Zmiri-backtrace=full\n //@only-target-x86_64-unknown-linux: support for tokio only on linux and x86\n-//@error-pattern: returning ready events from epoll_wait is not yet implemented\n+//@error-in-other-file: returning ready events from epoll_wait is not yet implemented\n //@normalize-stderr-test: \" += note:.*\\n\" -> \"\"\n \n use tokio::time::{sleep, Duration, Instant};"}, {"sha": "484c7c3bbff78744f6498e3063f85a877a73ef34", "filename": "src/tools/miri/tests/fail/tree-borrows/strongly-protected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ftree-borrows%2Fstrongly-protected.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,5 +1,5 @@\n //@compile-flags: -Zmiri-tree-borrows\n-//@error-pattern: /deallocation through .* is forbidden/\n+//@error-in-other-file: /deallocation through .* is forbidden/\n \n fn inner(x: &mut i32, f: fn(&mut i32)) {\n     // `f` may mutate, but it may not deallocate!"}, {"sha": "d8cab68ac5de800c74a09dca6ab5d25b50e4f16a", "filename": "src/tools/miri/tests/fail/unaligned_pointers/drop_in_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -13,7 +13,7 @@ struct PartialDrop {\n     b: u8,\n }\n \n-//@error-pattern: /alignment 2 is required/\n+//@error-in-other-file: /alignment 2 is required/\n fn main() {\n     unsafe {\n         // Create an unaligned pointer"}, {"sha": "8819c53a4f91e53f8e750d3da437b314296f8429", "filename": "src/tools/miri/tests/fail/uninit_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: memory is uninitialized at [0x4..0x10]\n+//@error-in-other-file: memory is uninitialized at [0x4..0x10]\n \n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;"}, {"sha": "e788c079cb4dea4ec90af54e031ef27fad4906eb", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=84f80f1fc9f89c8abbbbcbe55cc0bd1d0ae21c28", "patch": "@@ -1,4 +1,4 @@\n-//@error-pattern: memory is uninitialized at [0x4..0x8]\n+//@error-in-other-file: memory is uninitialized at [0x4..0x8]\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n "}]}