{"sha": "5cef16e9b3aad82b7e3a154b4c7945c6d7abb73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZWYxNmU5YjNhYWQ4MmI3ZTNhMTU0YjRjNzk0NWM2ZDdhYmI3M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-15T05:56:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-15T05:56:19Z"}, "message": "auto merge of #15531 : steveklabnik/rust/guide_looping, r=brson", "tree": {"sha": "ef77f512cfb3984fc0fd00b4b38d784324d8e52c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef77f512cfb3984fc0fd00b4b38d784324d8e52c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cef16e9b3aad82b7e3a154b4c7945c6d7abb73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cef16e9b3aad82b7e3a154b4c7945c6d7abb73c", "html_url": "https://github.com/rust-lang/rust/commit/5cef16e9b3aad82b7e3a154b4c7945c6d7abb73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cef16e9b3aad82b7e3a154b4c7945c6d7abb73c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eadfe42e58de0263286195e7560cb85337a3847", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eadfe42e58de0263286195e7560cb85337a3847", "html_url": "https://github.com/rust-lang/rust/commit/2eadfe42e58de0263286195e7560cb85337a3847"}, {"sha": "636aff144a2c8d3f3ea4cdd182f409940f82958d", "url": "https://api.github.com/repos/rust-lang/rust/commits/636aff144a2c8d3f3ea4cdd182f409940f82958d", "html_url": "https://github.com/rust-lang/rust/commit/636aff144a2c8d3f3ea4cdd182f409940f82958d"}], "stats": {"total": 141, "additions": 137, "deletions": 4}, "files": [{"sha": "456ebb6e380c076542275c3f5e7ea470f93d1a41", "filename": "src/doc/guide.md", "status": "modified", "additions": 137, "deletions": 4, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/5cef16e9b3aad82b7e3a154b4c7945c6d7abb73c/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/5cef16e9b3aad82b7e3a154b4c7945c6d7abb73c/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=5cef16e9b3aad82b7e3a154b4c7945c6d7abb73c", "patch": "@@ -1362,13 +1362,146 @@ string where we don't need to, but sometimes, it's a nice pattern.\n \n ## Looping\n \n-for\n+Looping is the last basic construct that we haven't learned yet in Rust. Rust has\n+two main looping constructs: `for` and `while`.\n \n-while\n+### `for`\n \n-loop\n+The `for` loop is used to loop a particular number of times. Rust's `for` loops\n+work a bit differently than in other systems languages, however. Rust's `for`\n+loop doesn't look like this C `for` loop:\n \n-break/continue\n+```{ignore,c}\n+for (x = 0; x < 10; x++) {\n+    printf( \"%d\\n\", x );\n+}\n+```\n+\n+It looks like this:\n+\n+```{rust}\n+for x in range(0i, 10i) {\n+    println!(\"{:d}\", x);\n+}\n+```\n+\n+In slightly more abstract terms,\n+\n+```{ignore,notrust}\n+for var in expression {\n+    code\n+}\n+```\n+\n+The expression is an iterator, which we will discuss in more depth later in the\n+guide. The iterator gives back a series of elements. Each element is one\n+iteration of the loop. That value is then bound to the name `var`, which is\n+valid for the loop body. Once the body is over, the next value is fetched from\n+the iterator, and we loop another time. When there are no more values, the\n+`for` loop is over.\n+\n+In our example, the `range` function is a function, provided by Rust, that\n+takes a start and an end position, and gives an iterator over those values. The\n+upper bound is exclusive, though, so our loop will print `0` through `9`, not\n+`10`.\n+\n+Rust does not have the \"C style\" `for` loop on purpose. Manually controlling\n+each element of the loop is complicated and error prone, even for experienced C\n+developers. There's an old joke that goes, \"There are two hard problems in\n+computer science: naming things, cache invalidation, and off-by-one errors.\"\n+The joke, of course, being that the setup says \"two hard problems\" but then\n+lists three things. This happens quite a bit with \"C style\" `for` loops.\n+\n+We'll talk more about `for` when we cover **vector**s, later in the Guide.\n+\n+### `while`\n+\n+The other kind of looping construct in Rust is the `while` loop. It looks like\n+this:\n+\n+```{rust}\n+let mut x = 5u;\n+let mut done = false;\n+\n+while !done {\n+    x += x - 3;\n+    println!(\"{}\", x);\n+    if x % 5 == 0 { done = true; }\n+}\n+```\n+\n+`while` loops are the correct choice when you're not sure how many times\n+you need to loop. \n+\n+If you need an infinite loop, you may be tempted to write this:\n+\n+```{rust,ignore}\n+while true {\n+```\n+\n+Rust has a dedicated keyword, `loop`, to handle this case:\n+\n+```{rust,ignore}\n+loop {\n+```\n+\n+Rust's control-flow analysis treats this construct differently than a\n+`while true`, since we know that it will always loop. The details of what\n+that _means_ aren't super important to understand at this stage, but in\n+general, the more information we can give to the compiler, the better it\n+can do with safety and code generation. So you should always prefer\n+`loop` when you plan to loop infinitely.\n+\n+### Ending iteration early\n+\n+Let's take a look at that `while` loop we had earlier:\n+\n+```{rust}\n+let mut x = 5u;\n+let mut done = false;\n+\n+while !done {\n+    x += x - 3;\n+    println!(\"{}\", x);\n+    if x % 5 == 0 { done = true; }\n+}\n+```\n+\n+We had to keep a dedicated `mut` boolean variable binding, `done`, to know\n+when we should skip out of the loop. Rust has two keywords to help us with\n+modifying iteration: `break` and `continue`.\n+\n+In this case, we can write the loop in a better way with `break`:\n+\n+```{rust}\n+let mut x = 5u;\n+\n+loop {\n+    x += x - 3;\n+    println!(\"{}\", x);\n+    if x % 5 == 0 { break; }\n+}\n+```\n+\n+We now loop forever with `loop`, and use `break` to break out early.\n+\n+`continue` is similar, but instead of ending the loop, goes to the next\n+iteration: This will only print the odd numbers:\n+\n+```\n+for x in range(0i, 10i) {\n+    if x % 2 == 0 { continue; }\n+\n+    println!(\"{:d}\", x);\n+}\n+```\n+\n+Both `continue` and `break` are valid in both kinds of loops.\n+\n+We have now learned all of the most basic Rust concepts. We're ready to start\n+building our guessing game, but we need to know how to do one last thing first:\n+get input from the keyboard. You can't have a guessing game without the ability\n+to guess!\n \n ## Guessing Game: complete\n "}]}