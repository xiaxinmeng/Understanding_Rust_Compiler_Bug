{"sha": "f391acbd3f34c9ee066a2e9767222061221a1042", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTFhY2JkM2YzNGM5ZWUwNjZhMmU5NzY3MjIyMDYxMjIxYTEwNDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-01T20:01:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T18:09:06Z"}, "message": "rustc: Switch tag type parameters to interior vectors", "tree": {"sha": "23e85130bca61c366b4541fc4e93ccba3ee249ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e85130bca61c366b4541fc4e93ccba3ee249ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f391acbd3f34c9ee066a2e9767222061221a1042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f391acbd3f34c9ee066a2e9767222061221a1042", "html_url": "https://github.com/rust-lang/rust/commit/f391acbd3f34c9ee066a2e9767222061221a1042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f391acbd3f34c9ee066a2e9767222061221a1042/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e591c12fcfef0533c113eca7dab59cd770e521", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e591c12fcfef0533c113eca7dab59cd770e521", "html_url": "https://github.com/rust-lang/rust/commit/09e591c12fcfef0533c113eca7dab59cd770e521"}], "stats": {"total": 50, "additions": 19, "deletions": 31}, "files": [{"sha": "88d68d01b2bbfa14fd41922d5ff2afe838d4c769", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f391acbd3f34c9ee066a2e9767222061221a1042/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f391acbd3f34c9ee066a2e9767222061221a1042/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=f391acbd3f34c9ee066a2e9767222061221a1042", "patch": "@@ -253,8 +253,8 @@ fn parse_ty(@pstate st, str_def sd) -> ty::t {\n             assert (next(st) as char == '[');\n             auto def = parse_def(st, sd);\n             auto inner = parse_ty(st, sd);\n-            let vec[ty::t] params = [];\n-            while (peek(st) as char != ']') { params += [parse_ty(st, sd)]; }\n+            let ty::t[] params = ~[];\n+            while (peek(st) as char != ']') { params += ~[parse_ty(st, sd)]; }\n             st.pos = st.pos + 1u;\n             ret ty::mk_res(st.tcx, def, inner, params);\n         }"}, {"sha": "e3c972d4edbcdc4b99c3480b01887b50959d1fdb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f391acbd3f34c9ee066a2e9767222061221a1042/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f391acbd3f34c9ee066a2e9767222061221a1042/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f391acbd3f34c9ee066a2e9767222061221a1042", "patch": "@@ -2145,13 +2145,9 @@ fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n }\n \n fn trans_res_drop(@block_ctxt cx, ValueRef rs, &ast::def_id did,\n-                  ty::t inner_t, &vec[ty::t] tps) -> result {\n-    // FIXME: Remove this vec->ivec conversion.\n-    auto tps_ivec = ~[];\n-    for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n-\n+                  ty::t inner_t, &ty::t[] tps) -> result {\n     auto ccx = cx.fcx.lcx.ccx;\n-    auto inner_t_s = ty::substitute_type_params(ccx.tcx, tps_ivec, inner_t);\n+    auto inner_t_s = ty::substitute_type_params(ccx.tcx, tps, inner_t);\n     auto tup_ty = ty::mk_imm_tup(ccx.tcx, ~[ty::mk_int(ccx.tcx), inner_t_s]);\n     auto drop_cx = new_sub_block_ctxt(cx, \"drop res\");\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");"}, {"sha": "aea0a2c731f1c7f96c457cedb319aa80843b3fba", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f391acbd3f34c9ee066a2e9767222061221a1042/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f391acbd3f34c9ee066a2e9767222061221a1042/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=f391acbd3f34c9ee066a2e9767222061221a1042", "patch": "@@ -269,8 +269,8 @@ tag sty {\n     ty_rec(field[]);\n     ty_fn(ast::proto, arg[], t, controlflow, vec[@constr_def]);\n     ty_native_fn(ast::native_abi, arg[], t);\n-    ty_obj(vec[method]);\n-    ty_res(def_id, t, vec[t]);\n+    ty_obj(method[]);\n+    ty_res(def_id, t, t[]);\n     ty_var(int); // type variable\n     ty_param(uint); // fn/tag type param\n     ty_type;\n@@ -608,7 +608,7 @@ fn mk_obj(&ctxt cx, &vec[method] meths) -> t {\n     ret gen_ty(cx, ty_obj(meths));\n }\n \n-fn mk_res(&ctxt cx, &ast::def_id did, &t inner, &vec[t] tps) -> t {\n+fn mk_res(&ctxt cx, &ast::def_id did, &t inner, &t[] tps) -> t {\n     ret gen_ty(cx, ty_res(did, inner, tps));\n }\n \n@@ -817,8 +817,8 @@ fn fold_ty(&ctxt cx, fold_mode fld, t ty_0) -> t {\n             ty = copy_cname(cx, mk_obj(cx, new_methods), ty);\n         }\n         case (ty_res(?did, ?subty, ?tps)) {\n-            auto new_tps = [];\n-            for (t tp in tps) { new_tps += [fold_ty(cx, fld, tp)]; }\n+            auto new_tps = ~[];\n+            for (t tp in tps) { new_tps += ~[fold_ty(cx, fld, tp)]; }\n             ty = copy_cname(cx, mk_res(cx, did, fold_ty(cx, fld, subty),\n                                        new_tps), ty);\n         }\n@@ -2475,13 +2475,13 @@ mod unify {\n                         alt (result) {\n                             case (ures_ok(?res_inner)) {\n                                 auto i = 0u;\n-                                auto res_tps = [];\n+                                auto res_tps = ~[];\n                                 for (t ex_tp in ex_tps) {\n                                     auto result =\n                                         unify_step(cx, ex_tp, act_tps.(i));\n                                     alt (result) {\n                                         case (ures_ok(?rty)) {\n-                                            vec::push(res_tps, rty);\n+                                            res_tps += ~[rty];\n                                         }\n                                         case (_) { ret result; }\n                                     }"}, {"sha": "1bc93793f4d1ed2fb2c50abb1a962c519f9b1dd0", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f391acbd3f34c9ee066a2e9767222061221a1042/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f391acbd3f34c9ee066a2e9767222061221a1042/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f391acbd3f34c9ee066a2e9767222061221a1042", "patch": "@@ -472,11 +472,11 @@ mod write {\n mod collect {\n     type ctxt = rec(ty::ctxt tcx);\n \n-    fn mk_ty_params(&@ctxt cx, uint n) -> vec[ty::t] {\n-        auto tps = [];\n+    fn mk_ty_params(&@ctxt cx, uint n) -> ty::t[] {\n+        auto tps = ~[];\n         auto i = 0u;\n         while (i < n) {\n-            tps += [ty::mk_param(cx.tcx, i)];\n+            tps += ~[ty::mk_param(cx.tcx, i)];\n             i += 1u;\n         }\n         ret tps;\n@@ -648,12 +648,8 @@ mod collect {\n \n                 auto ty_param_count = vec::len[ast::ty_param](tps);\n \n-                let vec[ty::t] subtys = mk_ty_params(cx, ty_param_count);\n-                // FIXME: Remove this vec->ivec conversion.\n-                auto tps_ivec = ~[];\n-                for (ty::t tp in subtys) { tps_ivec += ~[tp]; }\n-\n-                auto t = ty::mk_tag(cx.tcx, local_def(it.id), tps_ivec);\n+                let ty::t[] subtys = mk_ty_params(cx, ty_param_count);\n+                auto t = ty::mk_tag(cx.tcx, local_def(it.id), subtys);\n                 auto tpt = tup(ty_param_count, t);\n                 cx.tcx.tcache.insert(local_def(it.id), tpt);\n                 ret tpt;\n@@ -690,18 +686,14 @@ mod collect {\n         // Create a set of parameter types shared among all the variants.\n \n         auto ty_param_count = vec::len[ast::ty_param](ty_params);\n-        let vec[ty::t] ty_param_tys = mk_ty_params(cx, ty_param_count);\n+        let ty::t[] ty_param_tys = mk_ty_params(cx, ty_param_count);\n         for (ast::variant variant in variants) {\n             // Nullary tag constructors get turned into constants; n-ary tag\n             // constructors get turned into functions.\n \n-            // FIXME: Remove this vec->ivec conversion.\n-            auto tps_ivec = ~[];\n-            for (ty::t tp in ty_param_tys) { tps_ivec += ~[tp]; }\n-\n             auto result_ty;\n             if (vec::len[ast::variant_arg](variant.node.args) == 0u) {\n-                result_ty = ty::mk_tag(cx.tcx, tag_id, tps_ivec);\n+                result_ty = ty::mk_tag(cx.tcx, tag_id, ty_param_tys);\n             } else {\n                 // As above, tell ast_ty_to_ty() that trans_ty_item_to_ty()\n                 // should be called to resolve named types.\n@@ -712,7 +704,7 @@ mod collect {\n                     auto arg_ty = ast_ty_to_ty(cx.tcx, f, va.ty);\n                     args += ~[rec(mode=ty::mo_alias(false), ty=arg_ty)];\n                 }\n-                auto tag_t = ty::mk_tag(cx.tcx, tag_id, tps_ivec);\n+                auto tag_t = ty::mk_tag(cx.tcx, tag_id, ty_param_tys);\n                 // FIXME: this will be different for constrained types\n                 result_ty = ty::mk_fn(cx.tcx, ast::proto_fn, args, tag_t,\n                                       ast::return, []);"}]}