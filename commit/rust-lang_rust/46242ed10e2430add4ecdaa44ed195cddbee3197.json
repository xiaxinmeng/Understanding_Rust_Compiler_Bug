{"sha": "46242ed10e2430add4ecdaa44ed195cddbee3197", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MjQyZWQxMGUyNDMwYWRkNGVjZGFhNDRlZDE5NWNkZGJlZTMxOTc=", "commit": {"author": {"name": "sid", "email": "sidred@gmail.com", "date": "2016-01-22T10:43:54Z"}, "committer": {"name": "sid", "email": "sidred@gmail.com", "date": "2016-02-02T09:38:44Z"}, "message": "Add support for the config-path option\n\nAdds a config-path option for rustfmt. If this argument is provided,\nit recursively searches the config-path for a rustfmt.toml file.\nIf file is not found, reverts to searching the file input path for the\nconfig file or uses default options.", "tree": {"sha": "d22317328f64edd52cccad3fa4d6141ad8722656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22317328f64edd52cccad3fa4d6141ad8722656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46242ed10e2430add4ecdaa44ed195cddbee3197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46242ed10e2430add4ecdaa44ed195cddbee3197", "html_url": "https://github.com/rust-lang/rust/commit/46242ed10e2430add4ecdaa44ed195cddbee3197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46242ed10e2430add4ecdaa44ed195cddbee3197/comments", "author": null, "committer": null, "parents": [{"sha": "ee32615df112e9491b583cdd3b6dc8763d2fa155", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee32615df112e9491b583cdd3b6dc8763d2fa155", "html_url": "https://github.com/rust-lang/rust/commit/ee32615df112e9491b583cdd3b6dc8763d2fa155"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "fed74868f6a81607304c8e86b904663c811969e4", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 61, "deletions": 14, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/46242ed10e2430add4ecdaa44ed195cddbee3197/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46242ed10e2430add4ecdaa44ed195cddbee3197/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=46242ed10e2430add4ecdaa44ed195cddbee3197", "patch": "@@ -30,7 +30,7 @@ use getopts::{Matches, Options};\n /// Rustfmt operations.\n enum Operation {\n     /// Format files and their child modules.\n-    Format(Vec<PathBuf>, WriteMode),\n+    Format(Vec<PathBuf>, WriteMode, Option<PathBuf>),\n     /// Print the help message.\n     Help,\n     // Print version information\n@@ -40,7 +40,7 @@ enum Operation {\n     /// Invalid program input, including reason.\n     InvalidInput(String),\n     /// No file specified, read from stdin\n-    Stdin(String, WriteMode),\n+    Stdin(String, WriteMode, Option<PathBuf>),\n }\n \n /// Try to find a project file in the given directory and its parents. Returns the path of a the\n@@ -95,6 +95,20 @@ fn resolve_config(dir: &Path) -> io::Result<(Config, Option<PathBuf>)> {\n     Ok((Config::from_toml(&toml), Some(path)))\n }\n \n+/// read the given config file path recursively if present else read the project file path\n+fn match_cli_path_or_file(config_path: Option<PathBuf>,\n+                          input_file: &Path)\n+                          -> io::Result<(Config, Option<PathBuf>)> {\n+\n+    if let Some(config_file) = config_path {\n+        let (toml, path) = try!(resolve_config(config_file.as_ref()));\n+        if path.is_some() {\n+            return Ok((toml, path));\n+        }\n+    }\n+    resolve_config(input_file)\n+}\n+\n fn update_config(config: &mut Config, matches: &Matches) {\n     config.verbose = matches.opt_present(\"verbose\");\n     config.skip_children = matches.opt_present(\"skip-children\");\n@@ -114,6 +128,11 @@ fn execute() -> i32 {\n     opts.optflag(\"\",\n                  \"config-help\",\n                  \"show details of rustfmt configuration options\");\n+    opts.optopt(\"\",\n+                \"config-path\",\n+                \"Recursively searches the given path for the rustfmt.toml config file. If not \\\n+                 found reverts to the input file path\",\n+                \"[Path for the configuration file]\");\n \n     let matches = match opts.parse(env::args().skip(1)) {\n         Ok(m) => m,\n@@ -142,23 +161,41 @@ fn execute() -> i32 {\n             Config::print_docs();\n             0\n         }\n-        Operation::Stdin(input, write_mode) => {\n+        Operation::Stdin(input, write_mode, config_path) => {\n             // try to read config from local directory\n-            let (config, _) = resolve_config(&env::current_dir().unwrap())\n+            let (config, _) = match_cli_path_or_file(config_path, &env::current_dir().unwrap())\n                                   .expect(\"Error resolving config\");\n \n             run_from_stdin(input, write_mode, &config);\n             0\n         }\n-        Operation::Format(files, write_mode) => {\n+        Operation::Format(files, write_mode, config_path) => {\n+            let mut config = Config::default();\n+            let mut path = None;\n+            // Load the config path file if provided\n+            if let Some(config_file) = config_path {\n+                let (cfg_tmp, path_tmp) = resolve_config(config_file.as_ref())\n+                                              .expect(&format!(\"Error resolving config for {:?}\",\n+                                                               config_file));\n+                config = cfg_tmp;\n+                path = path_tmp;\n+            };\n+            if let Some(path) = path.as_ref() {\n+                println!(\"Using rustfmt config file {}\", path.display());\n+            }\n             for file in files {\n-                let (mut config, path) = resolve_config(file.parent().unwrap())\n-                                             .expect(&format!(\"Error resolving config for {}\",\n-                                                              file.display()));\n-                if let Some(path) = path {\n-                    println!(\"Using rustfmt config file {} for {}\",\n-                             path.display(),\n-                             file.display());\n+                // Check the file directory if the config-path could not be read or not provided\n+                if path.is_none() {\n+                    let (config_tmp, path_tmp) = resolve_config(file.parent().unwrap())\n+                                                     .expect(&format!(\"Error resolving config \\\n+                                                                       for {}\",\n+                                                                      file.display()));\n+                    if let Some(path) = path_tmp.as_ref() {\n+                        println!(\"Using rustfmt config file {} for {}\",\n+                                 path.display(),\n+                                 file.display());\n+                    }\n+                    config = config_tmp;\n                 }\n \n                 update_config(&mut config, &matches);\n@@ -211,6 +248,16 @@ fn determine_operation(matches: &Matches) -> Operation {\n         return Operation::Version;\n     }\n \n+    // Read the config_path and convert to parent dir if a file is provided.\n+    let config_path: Option<PathBuf> = matches.opt_str(\"config-path\")\n+                                              .map(PathBuf::from)\n+                                              .and_then(|dir| {\n+                                                  if dir.is_file() {\n+                                                      return dir.parent().map(|v| v.into());\n+                                                  }\n+                                                  Some(dir)\n+                                              });\n+\n     // if no file argument is supplied, read from stdin\n     if matches.free.is_empty() {\n \n@@ -221,7 +268,7 @@ fn determine_operation(matches: &Matches) -> Operation {\n         }\n \n         // WriteMode is always plain for Stdin\n-        return Operation::Stdin(buffer, WriteMode::Plain);\n+        return Operation::Stdin(buffer, WriteMode::Plain, config_path);\n     }\n \n     let write_mode = match matches.opt_str(\"write-mode\") {\n@@ -236,5 +283,5 @@ fn determine_operation(matches: &Matches) -> Operation {\n \n     let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();\n \n-    Operation::Format(files, write_mode)\n+    Operation::Format(files, write_mode, config_path)\n }"}]}