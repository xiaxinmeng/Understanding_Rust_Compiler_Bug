{"sha": "e16f413582ea45d6b318337ea2c7838fdc3b82a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNmY0MTM1ODJlYTQ1ZDZiMzE4MzM3ZWEyYzc4MzhmZGMzYjgyYTQ=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-19T13:00:25Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:49:44Z"}, "message": "eprint panic context", "tree": {"sha": "2fbd3e339ca0d5d3f05e1d5888e5c530e7c207c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fbd3e339ca0d5d3f05e1d5888e5c530e7c207c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e16f413582ea45d6b318337ea2c7838fdc3b82a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e16f413582ea45d6b318337ea2c7838fdc3b82a4", "html_url": "https://github.com/rust-lang/rust/commit/e16f413582ea45d6b318337ea2c7838fdc3b82a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e16f413582ea45d6b318337ea2c7838fdc3b82a4/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f571b62a13aff662c9d1c17206342479f8529633", "url": "https://api.github.com/repos/rust-lang/rust/commits/f571b62a13aff662c9d1c17206342479f8529633", "html_url": "https://github.com/rust-lang/rust/commit/f571b62a13aff662c9d1c17206342479f8529633"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "44d5f6b225af424400efeb486e04314219559a1e", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e16f413582ea45d6b318337ea2c7838fdc3b82a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16f413582ea45d6b318337ea2c7838fdc3b82a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=e16f413582ea45d6b318337ea2c7838fdc3b82a4", "patch": "@@ -357,6 +357,18 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             infer: &infer,\n             db,\n             pattern_arena: &pattern_arena,\n+            eprint_panic_context: &|| {\n+                use syntax::AstNode;\n+                if let Ok(scrutinee_sptr) = source_map.expr_syntax(match_expr) {\n+                    let root = scrutinee_sptr.file_syntax(db.upcast());\n+                    if let Some(match_ast) = scrutinee_sptr.value.to_node(&root).syntax().parent() {\n+                        eprintln!(\n+                            \"Match checking is about to panic on this expression:\\n{}\",\n+                            match_ast.to_string(),\n+                        );\n+                    }\n+                }\n+            },\n         };\n         let report = compute_match_usefulness(&cx, &m_arms);\n "}, {"sha": "15ec5cf45011b2252db16d51b914299b3ebd2f8c", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e16f413582ea45d6b318337ea2c7838fdc3b82a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16f413582ea45d6b318337ea2c7838fdc3b82a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=e16f413582ea45d6b318337ea2c7838fdc3b82a4", "patch": "@@ -328,7 +328,7 @@ impl Constructor {\n             PatKind::Leaf { .. } | PatKind::Deref { .. } => Single,\n             &PatKind::Variant { enum_variant, .. } => Variant(enum_variant),\n             &PatKind::LiteralBool { value } => IntRange(IntRange::from_bool(value)),\n-            PatKind::Or { .. } => panic!(\"bug: Or-pattern should have been expanded earlier on.\"),\n+            PatKind::Or { .. } => cx.bug(\"Or-pattern should have been expanded earlier on.\"),\n         }\n     }\n \n@@ -375,7 +375,7 @@ impl Constructor {\n     /// this checks for inclusion.\n     // We inline because this has a single call site in `Matrix::specialize_constructor`.\n     #[inline]\n-    pub(super) fn is_covered_by(&self, _pcx: PatCtxt<'_>, other: &Self) -> bool {\n+    pub(super) fn is_covered_by(&self, pcx: PatCtxt<'_>, other: &Self) -> bool {\n         // This must be kept in sync with `is_covered_by_any`.\n         match (self, other) {\n             // Wildcards cover anything\n@@ -400,17 +400,17 @@ impl Constructor {\n             // Only a wildcard pattern can match the special extra constructor.\n             (NonExhaustive, _) => false,\n \n-            _ => panic!(\n-                \"bug: trying to compare incompatible constructors {:?} and {:?}\",\n+            _ => pcx.cx.bug(&format!(\n+                \"trying to compare incompatible constructors {:?} and {:?}\",\n                 self, other\n-            ),\n+            )),\n         }\n     }\n \n     /// Faster version of `is_covered_by` when applied to many constructors. `used_ctors` is\n     /// assumed to be built from `matrix.head_ctors()` with wildcards filtered out, and `self` is\n     /// assumed to have been split from a wildcard.\n-    fn is_covered_by_any(&self, _pcx: PatCtxt<'_>, used_ctors: &[Constructor]) -> bool {\n+    fn is_covered_by_any(&self, pcx: PatCtxt<'_>, used_ctors: &[Constructor]) -> bool {\n         if used_ctors.is_empty() {\n             return false;\n         }\n@@ -431,7 +431,7 @@ impl Constructor {\n             // This constructor is never covered by anything else\n             NonExhaustive => false,\n             Str(..) | FloatRange(..) | Opaque | Missing | Wildcard => {\n-                panic!(\"bug: found unexpected ctor in all_ctors: {:?}\", self)\n+                pcx.cx.bug(&format!(\"found unexpected ctor in all_ctors: {:?}\", self))\n             }\n         }\n     }\n@@ -683,7 +683,9 @@ impl Fields {\n                         }\n                     }\n                 }\n-                _ => panic!(\"Unexpected type for `Single` constructor: {:?}\", ty),\n+                ty_kind => {\n+                    cx.bug(&format!(\"Unexpected type for `Single` constructor: {:?}\", ty_kind))\n+                }\n             },\n             Slice(..) => {\n                 unimplemented!()\n@@ -748,7 +750,7 @@ impl Fields {\n                 // can ignore this issue.\n                 TyKind::Ref(..) => PatKind::Deref { subpattern: subpatterns.next().unwrap() },\n                 TyKind::Slice(..) | TyKind::Array(..) => {\n-                    panic!(\"bug: bad slice pattern {:?} {:?}\", ctor, pcx.ty)\n+                    pcx.cx.bug(&format!(\"bad slice pattern {:?} {:?}\", ctor, pcx.ty))\n                 }\n                 _ => PatKind::Wild,\n             },\n@@ -758,10 +760,11 @@ impl Fields {\n             Constructor::IntRange(_) => UNHANDLED,\n             NonExhaustive => PatKind::Wild,\n             Wildcard => return Pat::wildcard_from_ty(pcx.ty),\n-            Opaque => panic!(\"bug: we should not try to apply an opaque constructor\"),\n-            Missing => {\n-                panic!(\"bug: trying to apply the `Missing` constructor; this should have been done in `apply_constructors`\")\n-            }\n+            Opaque => pcx.cx.bug(\"we should not try to apply an opaque constructor\"),\n+            Missing => pcx.cx.bug(\n+                \"trying to apply the `Missing` constructor;\\\n+                this should have been done in `apply_constructors`\",\n+            ),\n         };\n \n         Pat { ty: pcx.ty.clone(), kind: Box::new(pat) }"}, {"sha": "cb322a3de36cf50305be3ffb4555d8b31da49d53", "filename": "crates/hir_ty/src/diagnostics/match_check/usefulness.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e16f413582ea45d6b318337ea2c7838fdc3b82a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16f413582ea45d6b318337ea2c7838fdc3b82a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs?ref=e16f413582ea45d6b318337ea2c7838fdc3b82a4", "patch": "@@ -295,6 +295,7 @@ pub(crate) struct MatchCheckCtx<'a> {\n     pub(crate) db: &'a dyn HirDatabase,\n     /// Lowered patterns from arms plus generated by the check.\n     pub(crate) pattern_arena: &'a RefCell<PatternArena>,\n+    pub(crate) eprint_panic_context: &'a dyn Fn(),\n }\n \n impl<'a> MatchCheckCtx<'a> {\n@@ -327,6 +328,12 @@ impl<'a> MatchCheckCtx<'a> {\n     pub(super) fn type_of(&self, pat: PatId) -> Ty {\n         self.pattern_arena.borrow()[pat].ty.clone()\n     }\n+\n+    #[track_caller]\n+    pub(super) fn bug(&self, info: &str) -> ! {\n+        (self.eprint_panic_context)();\n+        panic!(\"bug: {}\", info);\n+    }\n }\n \n #[derive(Copy, Clone)]\n@@ -737,7 +744,7 @@ impl SubPatSet {\n                 }\n                 Seq { subpats: new_subpats }\n             }\n-            Alt { .. } => panic!(\"bug\"),\n+            Alt { .. } => panic!(\"bug\"), // `self` is a patstack\n         }\n     }\n "}]}