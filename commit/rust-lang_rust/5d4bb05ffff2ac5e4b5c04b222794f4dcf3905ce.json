{"sha": "5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "node_id": "C_kwDOAAsO6NoAKDVkNGJiMDVmZmZmMmFjNWU0YjVjMDRiMjIyNzk0ZjRkY2YzOTA1Y2U", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-27T17:05:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-27T17:05:39Z"}, "message": "Merge #10374\n\n10374: fix: Make `stringify!` insert/collapse whitespace when needed r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10365\r\n\r\nUnlike rustc, we don't insert newlines, but that should be fine.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "0e919719f18e9400e60eec7bfca7e3a456e8f573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e919719f18e9400e60eec7bfca7e3a456e8f573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUfnkCRBK7hj4Ov3rIwAASAMIACaohFvsVo9KFDWhBdPpU2nw\navgkvzz35iB7ZA98E6Lgvt6Kg1eXSsKCPZVuvF4zPuwjhVvvyDbPegnrDFiDAQig\ngYrIur1ZqoDg9lzlqoc46I8L+dK1NT538PtIE6yBdBnq3qxIvou8CS7oNBsQKISY\nBVUvx70Ob+ndwwGGq1jcVH6QZUkXc6GE11M7m/zm2a7cxv2f75dMsbgNceja88g0\nag3bUvEIU8iMGdigz4lYWgBSS45EsoyC+o8Bc3JI/p0jfNapjIOJt4/32Y+Mv9wZ\nbu6IpffwIeAQhQwHSwRQBS6GQ4Jz5YsqcouSsVUOv9zFFRDLvBSrWDlCv+yetLk=\n=ba8d\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e919719f18e9400e60eec7bfca7e3a456e8f573\nparent f22eea905358efafc68c6c3de2bae05fb30b68a5\nparent d05eae6ada1178b3c455be9731dd8b5db7804706\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632762339 +0000\ncommitter GitHub <noreply@github.com> 1632762339 +0000\n\nMerge #10374\n\n10374: fix: Make `stringify!` insert/collapse whitespace when needed r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10365\r\n\r\nUnlike rustc, we don't insert newlines, but that should be fine.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "html_url": "https://github.com/rust-lang/rust/commit/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22eea905358efafc68c6c3de2bae05fb30b68a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22eea905358efafc68c6c3de2bae05fb30b68a5", "html_url": "https://github.com/rust-lang/rust/commit/f22eea905358efafc68c6c3de2bae05fb30b68a5"}, {"sha": "d05eae6ada1178b3c455be9731dd8b5db7804706", "url": "https://api.github.com/repos/rust-lang/rust/commits/d05eae6ada1178b3c455be9731dd8b5db7804706", "html_url": "https://github.com/rust-lang/rust/commit/d05eae6ada1178b3c455be9731dd8b5db7804706"}], "stats": {"total": 181, "additions": 48, "deletions": 133}, "files": [{"sha": "297497ac1bf95c0f4e2a2f2b4d0f59f0482b261a", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "patch": "@@ -1,7 +1,7 @@\n //! Builtin macro\n use crate::{\n     db::AstDatabase, name, quote, AstId, CrateId, MacroCallId, MacroCallLoc, MacroDefId,\n-    MacroDefKind, TextSize,\n+    MacroDefKind,\n };\n \n use base_db::{AnchoredPath, Edition, FileId};\n@@ -148,25 +148,14 @@ fn line_expand(\n }\n \n fn stringify_expand(\n-    db: &dyn AstDatabase,\n-    id: MacroCallId,\n-    _tt: &tt::Subtree,\n+    _db: &dyn AstDatabase,\n+    _id: MacroCallId,\n+    tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n-    let loc = db.lookup_intern_macro(id);\n-\n-    let macro_content = {\n-        let arg = match loc.kind.arg(db) {\n-            Some(arg) => arg,\n-            None => return ExpandResult::only_err(mbe::ExpandError::UnexpectedToken),\n-        };\n-        let macro_args = arg;\n-        let text = macro_args.text();\n-        let without_parens = TextSize::of('(')..text.len() - TextSize::of(')');\n-        text.slice(without_parens).to_string()\n-    };\n+    let pretty = tt::pretty(&tt.token_trees);\n \n     let expanded = quote! {\n-        #macro_content\n+        #pretty\n     };\n \n     ExpandResult::ok(expanded)\n@@ -685,7 +674,11 @@ mod tests {\n             r#\"\n             #[rustc_builtin_macro]\n             macro_rules! stringify {() => {}}\n-            stringify!(a b c)\n+            stringify!(\n+                a\n+                b\n+                c\n+            )\n             \"#,\n             expect![[\"\\\"a b c\\\"\"]],\n         );"}, {"sha": "d903725d8845771f838d75c0232e4971e0586848", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "patch": "@@ -26,7 +26,7 @@ use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n use syntax::{\n     algo::skip_trivia_token,\n     ast::{self, AstNode, HasAttrs},\n-    Direction, SyntaxNode, SyntaxToken, TextRange, TextSize,\n+    Direction, SyntaxNode, SyntaxToken, TextRange,\n };\n \n use crate::{"}, {"sha": "ff4976d0cbf30e5ec2cd5eb2b1d997e8dc62be4d", "filename": "crates/proc_macro_srv/src/abis/abi_1_47/rustc_server.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs?ref=5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "patch": "@@ -199,44 +199,7 @@ pub mod token_stream {\n \n     impl ToString for TokenStream {\n         fn to_string(&self) -> String {\n-            return tokentrees_to_text(&self.token_trees[..]);\n-\n-            fn tokentrees_to_text(tkns: &[tt::TokenTree]) -> String {\n-                tkns.iter()\n-                    .fold((String::new(), true), |(last, last_to_joint), tkn| {\n-                        let s = [last, tokentree_to_text(tkn)].join(if last_to_joint {\n-                            \"\"\n-                        } else {\n-                            \" \"\n-                        });\n-                        let mut is_joint = false;\n-                        if let tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) = tkn {\n-                            if punct.spacing == tt::Spacing::Joint {\n-                                is_joint = true;\n-                            }\n-                        }\n-                        (s, is_joint)\n-                    })\n-                    .0\n-            }\n-\n-            fn tokentree_to_text(tkn: &tt::TokenTree) -> String {\n-                match tkn {\n-                    tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => ident.text.clone().into(),\n-                    tt::TokenTree::Leaf(tt::Leaf::Literal(literal)) => literal.text.clone().into(),\n-                    tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) => format!(\"{}\", punct.char),\n-                    tt::TokenTree::Subtree(subtree) => {\n-                        let content = tokentrees_to_text(&subtree.token_trees);\n-                        let (open, close) = match subtree.delimiter.map(|it| it.kind) {\n-                            None => (\"\", \"\"),\n-                            Some(tt::DelimiterKind::Brace) => (\"{\", \"}\"),\n-                            Some(tt::DelimiterKind::Parenthesis) => (\"(\", \")\"),\n-                            Some(tt::DelimiterKind::Bracket) => (\"[\", \"]\"),\n-                        };\n-                        format!(\"{}{}{}\", open, content, close)\n-                    }\n-                }\n-            }\n+            tt::pretty(&self.token_trees)\n         }\n     }\n "}, {"sha": "56f9853399c3bc23dcf16a0dc66e638cca0b0ff5", "filename": "crates/proc_macro_srv/src/abis/abi_1_55/rustc_server.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs?ref=5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "patch": "@@ -199,44 +199,7 @@ pub mod token_stream {\n \n     impl ToString for TokenStream {\n         fn to_string(&self) -> String {\n-            return tokentrees_to_text(&self.token_trees[..]);\n-\n-            fn tokentrees_to_text(tkns: &[tt::TokenTree]) -> String {\n-                tkns.iter()\n-                    .fold((String::new(), true), |(last, last_to_joint), tkn| {\n-                        let s = [last, tokentree_to_text(tkn)].join(if last_to_joint {\n-                            \"\"\n-                        } else {\n-                            \" \"\n-                        });\n-                        let mut is_joint = false;\n-                        if let tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) = tkn {\n-                            if punct.spacing == tt::Spacing::Joint {\n-                                is_joint = true;\n-                            }\n-                        }\n-                        (s, is_joint)\n-                    })\n-                    .0\n-            }\n-\n-            fn tokentree_to_text(tkn: &tt::TokenTree) -> String {\n-                match tkn {\n-                    tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => ident.text.clone().into(),\n-                    tt::TokenTree::Leaf(tt::Leaf::Literal(literal)) => literal.text.clone().into(),\n-                    tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) => format!(\"{}\", punct.char),\n-                    tt::TokenTree::Subtree(subtree) => {\n-                        let content = tokentrees_to_text(&subtree.token_trees);\n-                        let (open, close) = match subtree.delimiter.map(|it| it.kind) {\n-                            None => (\"\", \"\"),\n-                            Some(tt::DelimiterKind::Brace) => (\"{\", \"}\"),\n-                            Some(tt::DelimiterKind::Parenthesis) => (\"(\", \")\"),\n-                            Some(tt::DelimiterKind::Bracket) => (\"[\", \"]\"),\n-                        };\n-                        format!(\"{}{}{}\", open, content, close)\n-                    }\n-                }\n-            }\n+            tt::pretty(&self.token_trees)\n         }\n     }\n "}, {"sha": "b0c2681f713d36d6d1967dc948cc0db08eae3187", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/rustc_server.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs?ref=5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "patch": "@@ -199,44 +199,7 @@ pub mod token_stream {\n \n     impl ToString for TokenStream {\n         fn to_string(&self) -> String {\n-            return tokentrees_to_text(&self.token_trees[..]);\n-\n-            fn tokentrees_to_text(tkns: &[tt::TokenTree]) -> String {\n-                tkns.iter()\n-                    .fold((String::new(), true), |(last, last_to_joint), tkn| {\n-                        let s = [last, tokentree_to_text(tkn)].join(if last_to_joint {\n-                            \"\"\n-                        } else {\n-                            \" \"\n-                        });\n-                        let mut is_joint = false;\n-                        if let tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) = tkn {\n-                            if punct.spacing == tt::Spacing::Joint {\n-                                is_joint = true;\n-                            }\n-                        }\n-                        (s, is_joint)\n-                    })\n-                    .0\n-            }\n-\n-            fn tokentree_to_text(tkn: &tt::TokenTree) -> String {\n-                match tkn {\n-                    tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => ident.text.clone().into(),\n-                    tt::TokenTree::Leaf(tt::Leaf::Literal(literal)) => literal.text.clone().into(),\n-                    tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) => format!(\"{}\", punct.char),\n-                    tt::TokenTree::Subtree(subtree) => {\n-                        let content = tokentrees_to_text(&subtree.token_trees);\n-                        let (open, close) = match subtree.delimiter.map(|it| it.kind) {\n-                            None => (\"\", \"\"),\n-                            Some(tt::DelimiterKind::Brace) => (\"{\", \"}\"),\n-                            Some(tt::DelimiterKind::Parenthesis) => (\"(\", \")\"),\n-                            Some(tt::DelimiterKind::Bracket) => (\"[\", \"]\"),\n-                        };\n-                        format!(\"{}{}{}\", open, content, close)\n-                    }\n-                }\n-            }\n+            tt::pretty(&self.token_trees)\n         }\n     }\n "}, {"sha": "66180bb1561743be177901574c58e13f8f7a5932", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "patch": "@@ -274,3 +274,36 @@ impl Subtree {\n }\n \n pub mod buffer;\n+\n+pub fn pretty(tkns: &[TokenTree]) -> String {\n+    fn tokentree_to_text(tkn: &TokenTree) -> String {\n+        match tkn {\n+            TokenTree::Leaf(Leaf::Ident(ident)) => ident.text.clone().into(),\n+            TokenTree::Leaf(Leaf::Literal(literal)) => literal.text.clone().into(),\n+            TokenTree::Leaf(Leaf::Punct(punct)) => format!(\"{}\", punct.char),\n+            TokenTree::Subtree(subtree) => {\n+                let content = pretty(&subtree.token_trees);\n+                let (open, close) = match subtree.delimiter.map(|it| it.kind) {\n+                    None => (\"\", \"\"),\n+                    Some(DelimiterKind::Brace) => (\"{\", \"}\"),\n+                    Some(DelimiterKind::Parenthesis) => (\"(\", \")\"),\n+                    Some(DelimiterKind::Bracket) => (\"[\", \"]\"),\n+                };\n+                format!(\"{}{}{}\", open, content, close)\n+            }\n+        }\n+    }\n+\n+    tkns.iter()\n+        .fold((String::new(), true), |(last, last_to_joint), tkn| {\n+            let s = [last, tokentree_to_text(tkn)].join(if last_to_joint { \"\" } else { \" \" });\n+            let mut is_joint = false;\n+            if let TokenTree::Leaf(Leaf::Punct(punct)) = tkn {\n+                if punct.spacing == Spacing::Joint {\n+                    is_joint = true;\n+                }\n+            }\n+            (s, is_joint)\n+        })\n+        .0\n+}"}]}