{"sha": "a214b8e41dda31bd09243d4da58355fbc94614ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMTRiOGU0MWRkYTMxYmQwOTI0M2Q0ZGE1ODM1NWZiYzk0NjE0ZWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T20:14:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:57Z"}, "message": "libsyntax: De-`@mut` `StringReader::peek_tok`", "tree": {"sha": "101c80e509a1f01fad97b3319e45d975cf4f99c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/101c80e509a1f01fad97b3319e45d975cf4f99c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a214b8e41dda31bd09243d4da58355fbc94614ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a214b8e41dda31bd09243d4da58355fbc94614ec", "html_url": "https://github.com/rust-lang/rust/commit/a214b8e41dda31bd09243d4da58355fbc94614ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a214b8e41dda31bd09243d4da58355fbc94614ec/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "501a6c816a4a38e6ca1d204700cc0396285abd1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/501a6c816a4a38e6ca1d204700cc0396285abd1f", "html_url": "https://github.com/rust-lang/rust/commit/501a6c816a4a38e6ca1d204700cc0396285abd1f"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "1379ce5da7b741e46ad732ee1af25e1b51302629", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a214b8e41dda31bd09243d4da58355fbc94614ec/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a214b8e41dda31bd09243d4da58355fbc94614ec/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=a214b8e41dda31bd09243d4da58355fbc94614ec", "patch": "@@ -18,7 +18,7 @@ use parse::token;\n use parse::token::{str_to_ident};\n \n use std::cast::transmute;\n-use std::cell::Cell;\n+use std::cell::{Cell, RefCell};\n use std::char;\n use std::num::from_str_radix;\n use std::util;\n@@ -53,7 +53,7 @@ pub struct StringReader {\n     curr: Cell<char>,\n     filemap: @codemap::FileMap,\n     /* cached: */\n-    peek_tok: token::Token,\n+    peek_tok: RefCell<token::Token>,\n     peek_span: Span\n }\n \n@@ -80,7 +80,7 @@ pub fn new_low_level_string_reader(span_diagnostic: @mut SpanHandler,\n         curr: Cell::new(initial_char),\n         filemap: filemap,\n         /* dummy values; not read */\n-        peek_tok: token::EOF,\n+        peek_tok: RefCell::new(token::EOF),\n         peek_span: codemap::DUMMY_SP\n     };\n     bump(r);\n@@ -108,9 +108,12 @@ impl reader for StringReader {\n     fn is_eof(@mut self) -> bool { is_eof(self) }\n     // return the next token. EFFECT: advances the string_reader.\n     fn next_token(@mut self) -> TokenAndSpan {\n-        let ret_val = TokenAndSpan {\n-            tok: util::replace(&mut self.peek_tok, token::UNDERSCORE),\n-            sp: self.peek_span,\n+        let ret_val = {\n+            let mut peek_tok = self.peek_tok.borrow_mut();\n+            TokenAndSpan {\n+                tok: util::replace(peek_tok.get(), token::UNDERSCORE),\n+                sp: self.peek_span,\n+            }\n         };\n         string_advance_token(self);\n         ret_val\n@@ -122,7 +125,7 @@ impl reader for StringReader {\n     fn peek(@mut self) -> TokenAndSpan {\n         // XXX(pcwalton): Bad copy!\n         TokenAndSpan {\n-            tok: self.peek_tok.clone(),\n+            tok: self.peek_tok.get(),\n             sp: self.peek_span,\n         }\n     }\n@@ -195,14 +198,14 @@ fn string_advance_token(r: @mut StringReader) {\n     match (consume_whitespace_and_comments(r)) {\n         Some(comment) => {\n             r.peek_span = comment.sp;\n-            r.peek_tok = comment.tok;\n+            r.peek_tok.set(comment.tok);\n         },\n         None => {\n             if is_eof(r) {\n-                r.peek_tok = token::EOF;\n+                r.peek_tok.set(token::EOF);\n             } else {\n                 let start_bytepos = r.last_pos.get();\n-                r.peek_tok = next_token_inner(r);\n+                r.peek_tok.set(next_token_inner(r));\n                 r.peek_span = codemap::mk_sp(start_bytepos, r.last_pos.get());\n             };\n         }"}]}