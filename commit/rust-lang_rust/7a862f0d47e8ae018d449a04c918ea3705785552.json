{"sha": "7a862f0d47e8ae018d449a04c918ea3705785552", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODYyZjBkNDdlOGFlMDE4ZDQ0OWEwNGM5MThlYTM3MDU3ODU1NTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T16:09:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T16:12:20Z"}, "message": "Make legacy macros private", "tree": {"sha": "48200c7e43dbd10f9a584c360019b4721ac46285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48200c7e43dbd10f9a584c360019b4721ac46285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a862f0d47e8ae018d449a04c918ea3705785552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a862f0d47e8ae018d449a04c918ea3705785552", "html_url": "https://github.com/rust-lang/rust/commit/7a862f0d47e8ae018d449a04c918ea3705785552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a862f0d47e8ae018d449a04c918ea3705785552/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af42cb5981a1f94116b1da8cfeedb6efdd5aeb01", "url": "https://api.github.com/repos/rust-lang/rust/commits/af42cb5981a1f94116b1da8cfeedb6efdd5aeb01", "html_url": "https://github.com/rust-lang/rust/commit/af42cb5981a1f94116b1da8cfeedb6efdd5aeb01"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "6b9be8325d498f3e481273742a353772d242795c", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a862f0d47e8ae018d449a04c918ea3705785552/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a862f0d47e8ae018d449a04c918ea3705785552/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=7a862f0d47e8ae018d449a04c918ea3705785552", "patch": "@@ -23,7 +23,7 @@ pub struct ItemScope {\n     /// Module scoped macros will be inserted into `items` instead of here.\n     // FIXME: Macro shadowing in one module is not properly handled. Non-item place macros will\n     // be all resolved to the last one defined if shadowing happens.\n-    pub(crate) legacy_macros: FxHashMap<Name, MacroDefId>,\n+    legacy_macros: FxHashMap<Name, MacroDefId>,\n }\n \n static BUILTIN_SCOPE: Lazy<FxHashMap<Name, Resolution>> = Lazy::new(|| {\n@@ -108,6 +108,10 @@ impl ItemScope {\n         self.impls.push(imp)\n     }\n \n+    pub(crate) fn define_legacy_macro(&mut self, name: Name, mac: MacroDefId) {\n+        self.legacy_macros.insert(name, mac);\n+    }\n+\n     pub(crate) fn push_res(\n         &mut self,\n         name: Name,\n@@ -146,6 +150,10 @@ impl ItemScope {\n     pub(crate) fn collect_resolutions(&self) -> Vec<(Name, Resolution)> {\n         self.items.iter().map(|(name, res)| (name.clone(), res.clone())).collect()\n     }\n+\n+    pub(crate) fn collect_legacy_macros(&self) -> FxHashMap<Name, MacroDefId> {\n+        self.legacy_macros.clone()\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Default)]"}, {"sha": "8b641d8b561519f0d5d5a4376c601506af2fe13a", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a862f0d47e8ae018d449a04c918ea3705785552/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a862f0d47e8ae018d449a04c918ea3705785552/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=7a862f0d47e8ae018d449a04c918ea3705785552", "patch": "@@ -231,9 +231,9 @@ where\n     /// the definition of current module.\n     /// And also, `macro_use` on a module will import all legacy macros visible inside to\n     /// current legacy scope, with possible shadowing.\n-    fn define_legacy_macro(&mut self, module_id: LocalModuleId, name: Name, macro_: MacroDefId) {\n+    fn define_legacy_macro(&mut self, module_id: LocalModuleId, name: Name, mac: MacroDefId) {\n         // Always shadowing\n-        self.def_map.modules[module_id].scope.legacy_macros.insert(name, macro_);\n+        self.def_map.modules[module_id].scope.define_legacy_macro(name, mac);\n     }\n \n     /// Import macros from `#[macro_use] extern crate`.\n@@ -711,7 +711,9 @@ where\n         let res = modules.alloc(ModuleData::default());\n         modules[res].parent = Some(self.module_id);\n         modules[res].origin = ModuleOrigin::not_sure_file(definition, declaration);\n-        modules[res].scope.legacy_macros = modules[self.module_id].scope.legacy_macros.clone();\n+        for (name, mac) in modules[self.module_id].scope.collect_legacy_macros() {\n+            modules[res].scope.define_legacy_macro(name, mac)\n+        }\n         modules[self.module_id].children.insert(name.clone(), res);\n         let resolution = Resolution {\n             def: PerNs::types(\n@@ -875,7 +877,7 @@ where\n     }\n \n     fn import_all_legacy_macros(&mut self, module_id: LocalModuleId) {\n-        let macros = self.def_collector.def_map[module_id].scope.legacy_macros.clone();\n+        let macros = self.def_collector.def_map[module_id].scope.collect_legacy_macros();\n         for (name, macro_) in macros {\n             self.def_collector.define_legacy_macro(self.module_id, name.clone(), macro_);\n         }"}, {"sha": "4e968bcc842dfa079f1a792d72a082dafb1219f0", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a862f0d47e8ae018d449a04c918ea3705785552/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a862f0d47e8ae018d449a04c918ea3705785552/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=7a862f0d47e8ae018d449a04c918ea3705785552", "patch": "@@ -32,27 +32,22 @@ fn render_crate_def_map(map: &CrateDefMap) -> String {\n         *buf += path;\n         *buf += \"\\n\";\n \n-        let mut entries = map.modules[module]\n-            .scope\n-            .items\n-            .iter()\n-            .map(|(name, res)| (name, res.def))\n-            .collect::<Vec<_>>();\n-        entries.sort_by_key(|(name, _)| *name);\n+        let mut entries = map.modules[module].scope.collect_resolutions();\n+        entries.sort_by_key(|(name, _)| name.clone());\n \n         for (name, res) in entries {\n             *buf += &format!(\"{}:\", name);\n \n-            if res.types.is_some() {\n+            if res.def.types.is_some() {\n                 *buf += \" t\";\n             }\n-            if res.values.is_some() {\n+            if res.def.values.is_some() {\n                 *buf += \" v\";\n             }\n-            if res.macros.is_some() {\n+            if res.def.macros.is_some() {\n                 *buf += \" m\";\n             }\n-            if res.is_none() {\n+            if res.def.is_none() {\n                 *buf += \" _\";\n             }\n \n@@ -587,6 +582,6 @@ mod b {\n     \u22eeT: v\n     \u22ee\n     \u22eecrate::a\n-    \u22eeT: t v    \n+    \u22eeT: t v\n \"###);\n }"}, {"sha": "ef2e9435cf64b4f57926e25d65d0167accde5afd", "filename": "crates/ra_hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a862f0d47e8ae018d449a04c918ea3705785552/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a862f0d47e8ae018d449a04c918ea3705785552/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=7a862f0d47e8ae018d449a04c918ea3705785552", "patch": "@@ -116,7 +116,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let crate_def_map = db.crate_def_map(krate);\n             let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n-            assert_eq!(module_data.scope.items.len(), 1);\n+            assert_eq!(module_data.scope.collect_resolutions().len(), 1);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }\n@@ -126,7 +126,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let crate_def_map = db.crate_def_map(krate);\n             let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n-            assert_eq!(module_data.scope.items.len(), 1);\n+            assert_eq!(module_data.scope.collect_resolutions().len(), 1);\n         });\n         assert!(!format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }"}]}