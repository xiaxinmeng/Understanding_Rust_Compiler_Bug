{"sha": "14d50133141d3c728c4497375dab7de14f19dbf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZDUwMTMzMTQxZDNjNzI4YzQ0OTczNzVkYWI3ZGUxNGYxOWRiZjU=", "commit": {"author": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-10T19:55:15Z"}, "committer": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-10T19:55:15Z"}, "message": "Use both pair orders.", "tree": {"sha": "0b9bfd6ce6b5b2f238577adfd8ca6dfd28494c33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b9bfd6ce6b5b2f238577adfd8ca6dfd28494c33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d50133141d3c728c4497375dab7de14f19dbf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d50133141d3c728c4497375dab7de14f19dbf5", "html_url": "https://github.com/rust-lang/rust/commit/14d50133141d3c728c4497375dab7de14f19dbf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d50133141d3c728c4497375dab7de14f19dbf5/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67aeb2eaeb9910d2177a6fc0e675c6bc84261c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67aeb2eaeb9910d2177a6fc0e675c6bc84261c3d", "html_url": "https://github.com/rust-lang/rust/commit/67aeb2eaeb9910d2177a6fc0e675c6bc84261c3d"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "e1e8bce1f7d9b0247d73b2d00e27dc17cea34d6e", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/14d50133141d3c728c4497375dab7de14f19dbf5/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d50133141d3c728c4497375dab7de14f19dbf5/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=14d50133141d3c728c4497375dab7de14f19dbf5", "patch": "@@ -44,11 +44,10 @@ declare_lint! {\n     \"boolean expressions that contain terminals which can be eliminated\"\n }\n \n-const METHODS_WITH_NEGATION: [(&str, &str); 4] = [\n+// For each pairs, both orders are considered.\n+const METHODS_WITH_NEGATION: [(&str, &str); 2] = [\n     (\"is_some\", \"is_none\"),\n-    (\"is_none\", \"is_some\"),\n     (\"is_err\", \"is_ok\"),\n-    (\"is_ok\", \"is_err\"),\n ];\n \n #[derive(Copy, Clone)]\n@@ -407,21 +406,23 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n     fn handle_method_call_in_not(&mut self, e: &'tcx Expr, inner: &'tcx Expr) {\n         if let ExprMethodCall(ref path, _, ref args) = inner.node {\n             if args.len() == 1 {\n-                METHODS_WITH_NEGATION.iter().for_each(|&(method, negation_method)| {\n-                    if method == path.name.as_str() {\n-                        span_lint_and_then(\n-                            self.cx,\n-                            NONMINIMAL_BOOL,\n-                            e.span,\n-                            \"this boolean expression can be simplified\",\n-                            |db| {\n-                                db.span_suggestion(\n-                                    e.span,\n-                                    \"try\",\n-                                    negation_method.to_owned()\n-                                );\n-                            }\n-                        )\n+                METHODS_WITH_NEGATION.iter().for_each(|&(method1, method2)| {\n+                    for &(method, negation_method) in &[(method1, method2), (method2, method1)] {\n+                        if method == path.name.as_str() {\n+                            span_lint_and_then(\n+                                self.cx,\n+                                NONMINIMAL_BOOL,\n+                                e.span,\n+                                \"this boolean expression can be simplified\",\n+                                |db| {\n+                                    db.span_suggestion(\n+                                        e.span,\n+                                        \"try\",\n+                                        negation_method.to_owned()\n+                                    );\n+                                }\n+                            )\n+                        }\n                     }\n                 })\n             }"}]}