{"sha": "77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "node_id": "C_kwDOAAsO6NoAKDc3MDA0ZWFmZWFmOGY1NzlmZGNkOWE3NDZlZTU5Mjc0YTgzYjhhZDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-06T11:30:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T11:30:03Z"}, "message": "Rollup merge of #110610 - spastorino:smir-terminator, r=oli-obk\n\nAdd Terminator conversion from MIR to SMIR, part #1\n\nThis adds internal MIR TerminatorKind to SMIR Terminator conversion.\n\nr? ```@oli-obk```", "tree": {"sha": "0516ed2a0cf79359d311bec61151d54a99ea8b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0516ed2a0cf79359d311bec61151d54a99ea8b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVjo7CRBK7hj4Ov3rIwAAhz8IAD6RVvJsBh4VgJCrE8QedT9X\nk6p+8tt2XkPtej7NT0LgAsC0Y/Gh2KYsQW8DZ4iJ9O+UIy0h6lvf12sm2ZKMcxUs\nqUX9vublpjo1IuG7ip4fb4YbbBfQyUVzP7Vz80XXr2+SIHxH2BuafFgoQMlwxKzi\npULJFVhDSzZCxWueIazYQbjHQ072iYz5L2X8NBIVXF9w+9756srojfI0mp60U+Ww\n30JUd/or7hVQU1ebyGyi1r2pCv4XUsPIJB/xU+21LITnlRsGXIxpVQatQVxArh1w\nloFJkf6TPeTskGAMh7kzT8eZgn3xDUlDTHVFQwiPV6QmC6oS0vz+Tn1WoGgh8fM=\n=kRKZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0516ed2a0cf79359d311bec61151d54a99ea8b67\nparent bcc9aa01b59432bed050f922e04391ea469263b4\nparent 698acc645e08078edfe70ad8651c0874a7933052\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683372603 +0200\ncommitter GitHub <noreply@github.com> 1683372603 +0200\n\nRollup merge of #110610 - spastorino:smir-terminator, r=oli-obk\n\nAdd Terminator conversion from MIR to SMIR, part #1\n\nThis adds internal MIR TerminatorKind to SMIR Terminator conversion.\n\nr? ```@oli-obk```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "html_url": "https://github.com/rust-lang/rust/commit/77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcc9aa01b59432bed050f922e04391ea469263b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc9aa01b59432bed050f922e04391ea469263b4", "html_url": "https://github.com/rust-lang/rust/commit/bcc9aa01b59432bed050f922e04391ea469263b4"}, {"sha": "698acc645e08078edfe70ad8651c0874a7933052", "url": "https://api.github.com/repos/rust-lang/rust/commits/698acc645e08078edfe70ad8651c0874a7933052", "html_url": "https://github.com/rust-lang/rust/commit/698acc645e08078edfe70ad8651c0874a7933052"}], "stats": {"total": 222, "additions": 209, "deletions": 13}, "files": [{"sha": "724587a4a71c10f9898d0070177dea75a0619699", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "patch": "@@ -4093,6 +4093,7 @@ dependencies = [\n name = \"rustc_smir\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_hir\",\n  \"rustc_middle\",\n  \"rustc_span\",\n  \"tracing\","}, {"sha": "80360a3c73f8dcfddbff2b5ab5c324f9f0c0662f", "filename": "compiler/rustc_smir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/compiler%2Frustc_smir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/compiler%2Frustc_smir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FCargo.toml?ref=77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "patch": "@@ -4,6 +4,7 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n+rustc_hir = { path = \"../rustc_hir\" }\n rustc_middle = { path = \"../rustc_middle\", optional = true }\n rustc_span = { path = \"../rustc_span\", optional = true }\n tracing = \"0.1\""}, {"sha": "241cd182059ba2d0a54719714076c8a37d9be933", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 117, "deletions": 9, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "patch": "@@ -93,20 +93,26 @@ fn rustc_statement_to_statement(\n     }\n }\n \n-fn rustc_rvalue_to_rvalue(rvalue: &rustc_middle::mir::Rvalue<'_>) -> stable_mir::mir::Operand {\n+fn rustc_rvalue_to_rvalue(rvalue: &rustc_middle::mir::Rvalue<'_>) -> stable_mir::mir::Rvalue {\n     use rustc_middle::mir::Rvalue::*;\n     match rvalue {\n-        Use(op) => rustc_op_to_op(op),\n+        Use(op) => stable_mir::mir::Rvalue::Use(rustc_op_to_op(op)),\n         Repeat(_, _) => todo!(),\n         Ref(_, _, _) => todo!(),\n         ThreadLocalRef(_) => todo!(),\n         AddressOf(_, _) => todo!(),\n         Len(_) => todo!(),\n         Cast(_, _, _) => todo!(),\n         BinaryOp(_, _) => todo!(),\n-        CheckedBinaryOp(_, _) => todo!(),\n+        CheckedBinaryOp(bin_op, ops) => stable_mir::mir::Rvalue::CheckedBinaryOp(\n+            rustc_bin_op_to_bin_op(bin_op),\n+            rustc_op_to_op(&ops.0),\n+            rustc_op_to_op(&ops.1),\n+        ),\n         NullaryOp(_, _) => todo!(),\n-        UnaryOp(_, _) => todo!(),\n+        UnaryOp(un_op, op) => {\n+            stable_mir::mir::Rvalue::UnaryOp(rustc_un_op_to_un_op(un_op), rustc_op_to_op(op))\n+        }\n         Discriminant(_) => todo!(),\n         Aggregate(_, _) => todo!(),\n         ShallowInitBox(_, _) => todo!(),\n@@ -124,8 +130,10 @@ fn rustc_op_to_op(op: &rustc_middle::mir::Operand<'_>) -> stable_mir::mir::Opera\n }\n \n fn rustc_place_to_place(place: &rustc_middle::mir::Place<'_>) -> stable_mir::mir::Place {\n-    assert_eq!(&place.projection[..], &[]);\n-    stable_mir::mir::Place { local: place.local.as_usize() }\n+    stable_mir::mir::Place {\n+        local: place.local.as_usize(),\n+        projection: format!(\"{:?}\", place.projection),\n+    }\n }\n \n fn rustc_unwind_to_unwind(\n@@ -140,6 +148,96 @@ fn rustc_unwind_to_unwind(\n     }\n }\n \n+fn rustc_assert_msg_to_msg<'tcx>(\n+    assert_message: &rustc_middle::mir::AssertMessage<'tcx>,\n+) -> stable_mir::mir::AssertMessage {\n+    use rustc_middle::mir::AssertKind;\n+    match assert_message {\n+        AssertKind::BoundsCheck { len, index } => stable_mir::mir::AssertMessage::BoundsCheck {\n+            len: rustc_op_to_op(len),\n+            index: rustc_op_to_op(index),\n+        },\n+        AssertKind::Overflow(bin_op, op1, op2) => stable_mir::mir::AssertMessage::Overflow(\n+            rustc_bin_op_to_bin_op(bin_op),\n+            rustc_op_to_op(op1),\n+            rustc_op_to_op(op2),\n+        ),\n+        AssertKind::OverflowNeg(op) => {\n+            stable_mir::mir::AssertMessage::OverflowNeg(rustc_op_to_op(op))\n+        }\n+        AssertKind::DivisionByZero(op) => {\n+            stable_mir::mir::AssertMessage::DivisionByZero(rustc_op_to_op(op))\n+        }\n+        AssertKind::RemainderByZero(op) => {\n+            stable_mir::mir::AssertMessage::RemainderByZero(rustc_op_to_op(op))\n+        }\n+        AssertKind::ResumedAfterReturn(generator) => {\n+            stable_mir::mir::AssertMessage::ResumedAfterReturn(rustc_generator_to_generator(\n+                generator,\n+            ))\n+        }\n+        AssertKind::ResumedAfterPanic(generator) => {\n+            stable_mir::mir::AssertMessage::ResumedAfterPanic(rustc_generator_to_generator(\n+                generator,\n+            ))\n+        }\n+        AssertKind::MisalignedPointerDereference { required, found } => {\n+            stable_mir::mir::AssertMessage::MisalignedPointerDereference {\n+                required: rustc_op_to_op(required),\n+                found: rustc_op_to_op(found),\n+            }\n+        }\n+    }\n+}\n+\n+fn rustc_bin_op_to_bin_op(bin_op: &rustc_middle::mir::BinOp) -> stable_mir::mir::BinOp {\n+    use rustc_middle::mir::BinOp;\n+    match bin_op {\n+        BinOp::Add => stable_mir::mir::BinOp::Add,\n+        BinOp::Sub => stable_mir::mir::BinOp::Sub,\n+        BinOp::Mul => stable_mir::mir::BinOp::Mul,\n+        BinOp::Div => stable_mir::mir::BinOp::Div,\n+        BinOp::Rem => stable_mir::mir::BinOp::Rem,\n+        BinOp::BitXor => stable_mir::mir::BinOp::BitXor,\n+        BinOp::BitAnd => stable_mir::mir::BinOp::BitAnd,\n+        BinOp::BitOr => stable_mir::mir::BinOp::BitOr,\n+        BinOp::Shl => stable_mir::mir::BinOp::Shl,\n+        BinOp::Shr => stable_mir::mir::BinOp::Shr,\n+        BinOp::Eq => stable_mir::mir::BinOp::Eq,\n+        BinOp::Lt => stable_mir::mir::BinOp::Lt,\n+        BinOp::Le => stable_mir::mir::BinOp::Le,\n+        BinOp::Ne => stable_mir::mir::BinOp::Ne,\n+        BinOp::Ge => stable_mir::mir::BinOp::Ge,\n+        BinOp::Gt => stable_mir::mir::BinOp::Gt,\n+        BinOp::Offset => stable_mir::mir::BinOp::Offset,\n+    }\n+}\n+\n+fn rustc_un_op_to_un_op(unary_op: &rustc_middle::mir::UnOp) -> stable_mir::mir::UnOp {\n+    use rustc_middle::mir::UnOp;\n+    match unary_op {\n+        UnOp::Not => stable_mir::mir::UnOp::Not,\n+        UnOp::Neg => stable_mir::mir::UnOp::Neg,\n+    }\n+}\n+\n+fn rustc_generator_to_generator(\n+    generator: &rustc_hir::GeneratorKind,\n+) -> stable_mir::mir::GeneratorKind {\n+    use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n+    match generator {\n+        GeneratorKind::Async(async_gen) => {\n+            let async_gen = match async_gen {\n+                AsyncGeneratorKind::Block => stable_mir::mir::AsyncGeneratorKind::Block,\n+                AsyncGeneratorKind::Closure => stable_mir::mir::AsyncGeneratorKind::Closure,\n+                AsyncGeneratorKind::Fn => stable_mir::mir::AsyncGeneratorKind::Fn,\n+            };\n+            stable_mir::mir::GeneratorKind::Async(async_gen)\n+        }\n+        GeneratorKind::Gen => stable_mir::mir::GeneratorKind::Gen,\n+    }\n+}\n+\n fn rustc_terminator_to_terminator(\n     terminator: &rustc_middle::mir::Terminator<'_>,\n ) -> stable_mir::mir::Terminator {\n@@ -162,7 +260,11 @@ fn rustc_terminator_to_terminator(\n         Terminate => Terminator::Abort,\n         Return => Terminator::Return,\n         Unreachable => Terminator::Unreachable,\n-        Drop { .. } => todo!(),\n+        Drop { place, target, unwind } => Terminator::Drop {\n+            place: rustc_place_to_place(place),\n+            target: target.as_usize(),\n+            unwind: rustc_unwind_to_unwind(unwind),\n+        },\n         Call { func, args, destination, target, unwind, from_hir_call: _, fn_span: _ } => {\n             Terminator::Call {\n                 func: rustc_op_to_op(func),\n@@ -172,9 +274,15 @@ fn rustc_terminator_to_terminator(\n                 unwind: rustc_unwind_to_unwind(unwind),\n             }\n         }\n-        Assert { .. } => todo!(),\n+        Assert { cond, expected, msg, target, unwind } => Terminator::Assert {\n+            cond: rustc_op_to_op(cond),\n+            expected: *expected,\n+            msg: rustc_assert_msg_to_msg(msg),\n+            target: target.as_usize(),\n+            unwind: rustc_unwind_to_unwind(unwind),\n+        },\n         Yield { .. } => todo!(),\n-        GeneratorDrop => todo!(),\n+        GeneratorDrop => Terminator::GeneratorDrop,\n         FalseEdge { .. } => todo!(),\n         FalseUnwind { .. } => todo!(),\n         InlineAsm { .. } => todo!(),"}, {"sha": "4baf3f1f75eac400117a02ff4f1ed657d3bd6db3", "filename": "compiler/rustc_smir/src/stable_mir/mir/body.rs", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs?ref=77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "patch": "@@ -26,7 +26,7 @@ pub enum Terminator {\n     Drop {\n         place: Place,\n         target: usize,\n-        unwind: Option<usize>,\n+        unwind: UnwindAction,\n     },\n     Call {\n         func: Operand,\n@@ -38,10 +38,11 @@ pub enum Terminator {\n     Assert {\n         cond: Operand,\n         expected: bool,\n-        msg: String,\n+        msg: AssertMessage,\n         target: usize,\n-        cleanup: Option<usize>,\n+        unwind: UnwindAction,\n     },\n+    GeneratorDrop,\n }\n \n #[derive(Clone, Debug)]\n@@ -52,12 +53,72 @@ pub enum UnwindAction {\n     Cleanup(usize),\n }\n \n+#[derive(Clone, Debug)]\n+pub enum AssertMessage {\n+    BoundsCheck { len: Operand, index: Operand },\n+    Overflow(BinOp, Operand, Operand),\n+    OverflowNeg(Operand),\n+    DivisionByZero(Operand),\n+    RemainderByZero(Operand),\n+    ResumedAfterReturn(GeneratorKind),\n+    ResumedAfterPanic(GeneratorKind),\n+    MisalignedPointerDereference { required: Operand, found: Operand },\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum BinOp {\n+    Add,\n+    Sub,\n+    Mul,\n+    Div,\n+    Rem,\n+    BitXor,\n+    BitAnd,\n+    BitOr,\n+    Shl,\n+    Shr,\n+    Eq,\n+    Lt,\n+    Le,\n+    Ne,\n+    Ge,\n+    Gt,\n+    Offset,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum UnOp {\n+    Not,\n+    Neg,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum GeneratorKind {\n+    Async(AsyncGeneratorKind),\n+    Gen,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum AsyncGeneratorKind {\n+    Block,\n+    Closure,\n+    Fn,\n+}\n+\n #[derive(Clone, Debug)]\n pub enum Statement {\n-    Assign(Place, Operand),\n+    Assign(Place, Rvalue),\n     Nop,\n }\n \n+// FIXME this is incomplete\n+#[derive(Clone, Debug)]\n+pub enum Rvalue {\n+    Use(Operand),\n+    CheckedBinaryOp(BinOp, Operand, Operand),\n+    UnaryOp(UnOp, Operand),\n+}\n+\n #[derive(Clone, Debug)]\n pub enum Operand {\n     Copy(Place),\n@@ -68,6 +129,7 @@ pub enum Operand {\n #[derive(Clone, Debug)]\n pub struct Place {\n     pub local: usize,\n+    pub projection: String,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "1454d6dde6c979402019acd911dc4ee7cfe94cab", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77004eafeaf8f579fdcd9a746ee59274a83b8ad7/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=77004eafeaf8f579fdcd9a746ee59274a83b8ad7", "patch": "@@ -60,6 +60,24 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n         stable_mir::mir::Terminator::Call { .. } => {}\n         other => panic!(\"{other:?}\"),\n     }\n+\n+    let drop = get_item(tcx, &items, (DefKind::Fn, \"drop\")).unwrap();\n+    let body = drop.body();\n+    assert_eq!(body.blocks.len(), 2);\n+    let block = &body.blocks[0];\n+    match &block.terminator {\n+        stable_mir::mir::Terminator::Drop { .. } => {}\n+        other => panic!(\"{other:?}\"),\n+    }\n+\n+    let assert = get_item(tcx, &items, (DefKind::Fn, \"assert\")).unwrap();\n+    let body = assert.body();\n+    assert_eq!(body.blocks.len(), 2);\n+    let block = &body.blocks[0];\n+    match &block.terminator {\n+        stable_mir::mir::Terminator::Assert { .. } => {}\n+        other => panic!(\"{other:?}\"),\n+    }\n }\n \n // Use internal API to find a function in a crate.\n@@ -131,6 +149,12 @@ fn generate_input(path: &str) -> std::io::Result<()> {\n         let x_64 = foo::bar(x);\n         let y_64 = foo::bar(y);\n         x_64.wrapping_add(y_64)\n+    }}\n+\n+    pub fn drop(_: String) {{}}\n+\n+    pub fn assert(x: i32) -> i32 {{\n+        x + 1\n     }}\"#\n     )?;\n     Ok(())"}]}