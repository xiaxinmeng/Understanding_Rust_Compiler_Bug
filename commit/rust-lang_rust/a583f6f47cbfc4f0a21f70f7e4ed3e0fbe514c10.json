{"sha": "a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ODNmNmY0N2NiZmM0ZjBhMjFmNzBmN2U0ZWQzZTBmYmU1MTRjMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-23T22:38:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-23T22:38:33Z"}, "message": "Auto merge of #39260 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 7 pull requests\n\n- Successful merges: #38794, #38956, #38993, #39191, #39200, #39233, #39258\n- Failed merges:", "tree": {"sha": "4024bd08b9fb7b131079ca4e5b068e7da9339c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4024bd08b9fb7b131079ca4e5b068e7da9339c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "html_url": "https://github.com/rust-lang/rust/commit/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfe5c0281df677048decf41c46d28b872c19d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfe5c0281df677048decf41c46d28b872c19d7f", "html_url": "https://github.com/rust-lang/rust/commit/7bfe5c0281df677048decf41c46d28b872c19d7f"}, {"sha": "d7c5f0d4cafcb3f9e23a00c5b712c460dc594c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c5f0d4cafcb3f9e23a00c5b712c460dc594c4b", "html_url": "https://github.com/rust-lang/rust/commit/d7c5f0d4cafcb3f9e23a00c5b712c460dc594c4b"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "8dbe24213905a64b195458e03045a374f047c7cf", "filename": "Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "patch": "@@ -17,6 +17,10 @@\n # most intimate workings of the compiler itself, you've come to the\n # right place. Let's see what's on the menu.\n #\n+# Please note that most of these options only work if configure was\n+# run with --disable-rustbuild. For documentation on the new build\n+# system, see CONTRIBUTING.md.\n+#\n # First, start with one of these build targets:\n #\n #   * all - The default. Build a complete, bootstrapped compiler."}, {"sha": "52d3c6ae9260c0d6b4d209d595edfc30987ec714", "filename": "src/doc/book/match.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Fdoc%2Fbook%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Fdoc%2Fbook%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmatch.md?ref=a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "patch": "@@ -82,7 +82,7 @@ fn process_message(msg: Message) {\n     match msg {\n         Message::Quit => quit(),\n         Message::ChangeColor(r, g, b) => change_color(r, g, b),\n-        Message::Move { x: x, y: y } => move_cursor(x, y),\n+        Message::Move { x, y: new_name_for_y } => move_cursor(x, new_name_for_y),\n         Message::Write(s) => println!(\"{}\", s),\n     };\n }"}, {"sha": "5fa78001fad5442df034d87eb8d76aad07048fec", "filename": "src/doc/book/syntax-index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Fdoc%2Fbook%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Fdoc%2Fbook%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsyntax-index.md?ref=a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "patch": "@@ -45,7 +45,7 @@\n * `%` (`expr % expr`): arithmetic remainder.  Overloadable (`Rem`).\n * `%=` (`var %= expr`): arithmetic remainder & assignment. Overloadable (`RemAssign`).\n * `&` (`expr & expr`): bitwise and.  Overloadable (`BitAnd`).\n-* `&` (`&expr`): borrow.  See [References and Borrowing].\n+* `&` (`&expr`, `&mut expr`): borrow.  See [References and Borrowing].\n * `&` (`&type`, `&mut type`, `&'a type`, `&'a mut type`): borrowed pointer type.  See [References and Borrowing].\n * `&=` (`var &= expr`): bitwise and & assignment. Overloadable (`BitAndAssign`).\n * `&&` (`expr && expr`): logical and."}, {"sha": "00a841a75db864ad44fa61c47de2724d2334501b", "filename": "src/doc/book/trait-objects.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Fdoc%2Fbook%2Ftrait-objects.md", "raw_url": "https://github.com/rust-lang/rust/raw/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Fdoc%2Fbook%2Ftrait-objects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftrait-objects.md?ref=a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "patch": "@@ -263,10 +263,7 @@ any resources of the vtable\u2019s type: for `u8` it is trivial, but for `String` i\n will free the memory. This is necessary for owning trait objects like\n `Box<Foo>`, which need to clean-up both the `Box` allocation as well as the\n internal type when they go out of scope. The `size` and `align` fields store\n-the size of the erased type, and its alignment requirements; these are\n-essentially unused at the moment since the information is embedded in the\n-destructor, but will be used in the future, as trait objects are progressively\n-made more flexible.\n+the size of the erased type, and its alignment requirements.\n \n Suppose we\u2019ve got some values that implement `Foo`. The explicit form of\n construction and use of `Foo` trait objects might look a bit like (ignoring the"}, {"sha": "c81f2e2282b5e5993a3ed7eef3bd7020f68b5f41", "filename": "src/doc/grammar.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "patch": "@@ -510,8 +510,9 @@ unit_expr : \"()\" ;\n ### Structure expressions\n \n ```antlr\n-struct_expr : expr_path '{' ident ':' expr\n-                      [ ',' ident ':' expr ] *\n+struct_expr_field_init : ident | ident ':' expr ;\n+struct_expr : expr_path '{' struct_expr_field_init\n+                      [ ',' struct_expr_field_init ] *\n                       [ \"..\" expr ] '}' |\n               expr_path '(' expr\n                       [ ',' expr ] * ')' |"}, {"sha": "a3cb12844777badcb616fd8623b00b2531667f80", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "patch": "@@ -21,9 +21,10 @@\n //!\n //! Each method takes an `Ordering` which represents the strength of\n //! the memory barrier for that operation. These orderings are the\n-//! same as [LLVM atomic orderings][1].\n+//! same as [LLVM atomic orderings][1]. For more information see the [nomicon][2].\n //!\n //! [1]: http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\n+//! [2]: https://doc.rust-lang.org/nomicon/atomics.html\n //!\n //! Atomic variables are safe to share between threads (they implement `Sync`)\n //! but they do not themselves provide the mechanism for sharing and follow the\n@@ -141,6 +142,9 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n ///\n /// Rust's memory orderings are [the same as\n /// LLVM's](http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations).\n+///\n+/// For more information see the [nomicon][1].\n+/// [1]: https://doc.rust-lang.org/nomicon/atomics.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n pub enum Ordering {"}, {"sha": "b220504d2b4f5c6eb246303009a99aaec9292d3f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=a583f6f47cbfc4f0a21f70f7e4ed3e0fbe514c10", "patch": "@@ -66,6 +66,11 @@ pub trait AsciiExt {\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n     ///\n+    /// To uppercase the string in-place, use [`make_ascii_uppercase`].\n+    ///\n+    /// To uppercase ASCII characters in addition to non-ASCII characters, use\n+    /// [`str::to_uppercase`].\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -77,6 +82,9 @@ pub trait AsciiExt {\n     /// assert_eq!('A', ascii.to_ascii_uppercase());\n     /// assert_eq!('\u2764', utf8.to_ascii_uppercase());\n     /// ```\n+    ///\n+    /// [`make_ascii_uppercase`]: #tymethod.make_ascii_uppercase\n+    /// [`str::to_uppercase`]: ../primitive.str.html#method.to_uppercase\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_ascii_uppercase(&self) -> Self::Owned;\n \n@@ -85,6 +93,11 @@ pub trait AsciiExt {\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n     ///\n+    /// To lowercase the string in-place, use [`make_ascii_lowercase`].\n+    ///\n+    /// To lowercase ASCII characters in addition to non-ASCII characters, use\n+    /// [`str::to_lowercase`].\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -96,6 +109,9 @@ pub trait AsciiExt {\n     /// assert_eq!('a', ascii.to_ascii_lowercase());\n     /// assert_eq!('\u2764', utf8.to_ascii_lowercase());\n     /// ```\n+    ///\n+    /// [`make_ascii_lowercase`]: #tymethod.make_ascii_lowercase\n+    /// [`str::to_lowercase`]: ../primitive.str.html#method.to_lowercase\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_ascii_lowercase(&self) -> Self::Owned;\n \n@@ -123,7 +139,11 @@ pub trait AsciiExt {\n \n     /// Converts this type to its ASCII upper case equivalent in-place.\n     ///\n-    /// See `to_ascii_uppercase` for more information.\n+    /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To return a new uppercased string without modifying the existing one, use\n+    /// [`to_ascii_uppercase`].\n     ///\n     /// # Examples\n     ///\n@@ -136,12 +156,18 @@ pub trait AsciiExt {\n     ///\n     /// assert_eq!('A', ascii);\n     /// ```\n+    ///\n+    /// [`to_ascii_uppercase`]: #tymethod.to_ascii_uppercase\n     #[stable(feature = \"ascii\", since = \"1.9.0\")]\n     fn make_ascii_uppercase(&mut self);\n \n     /// Converts this type to its ASCII lower case equivalent in-place.\n     ///\n-    /// See `to_ascii_lowercase` for more information.\n+    /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n+    /// but non-ASCII letters are unchanged.\n+    ///\n+    /// To return a new lowercased string without modifying the existing one, use\n+    /// [`to_ascii_lowercase`].\n     ///\n     /// # Examples\n     ///\n@@ -154,6 +180,8 @@ pub trait AsciiExt {\n     ///\n     /// assert_eq!('a', ascii);\n     /// ```\n+    ///\n+    /// [`to_ascii_lowercase`]: #tymethod.to_ascii_lowercase\n     #[stable(feature = \"ascii\", since = \"1.9.0\")]\n     fn make_ascii_lowercase(&mut self);\n }"}]}