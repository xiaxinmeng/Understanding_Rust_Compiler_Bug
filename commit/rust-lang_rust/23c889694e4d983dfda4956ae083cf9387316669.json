{"sha": "23c889694e4d983dfda4956ae083cf9387316669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYzg4OTY5NGU0ZDk4M2RmZGE0OTU2YWUwODNjZjkzODczMTY2Njk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-30T19:00:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T19:00:30Z"}, "message": "Merge #4153\n\n4153: Add support for incremental text synchronization r=matklad a=lnicola\n\nFixes #3762.\r\n\r\nThis still needs a `ra_vfs` PR, but I want to know I'm on the right track. I tested the change and it didn't crash horribly, but YMMV.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "ebc1b799be1c56be0d11c29d6d4f86586bc9310b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebc1b799be1c56be0d11c29d6d4f86586bc9310b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c889694e4d983dfda4956ae083cf9387316669", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqyBOCRBK7hj4Ov3rIwAAdHIIAIJLimqN8idP6yPQ6fvn4Wpq\nfpAARIdkcsZbm37uGDUv21qL1Ycy51QJ+rfJWnEMlq2H4WFz3de3HJSL8yAKfIim\nar9eZNAbdwDxAdcH/rmDasBPjxyr0u53O4REzGyUg0cvPh0WIOtD1uv/GfhZL0r6\nzSB6KWnWlp0u14MDrYj99zb1SQ5uLfc3OCad6Z4FbvHLzrBMTE0UQ7YnNBoM0aU9\nvmvrSPncxBFWeROzjFO3aJEKhFq4J5OiEVcUo/n5iNDsqxc7LeWmTuvaoTRE/I6S\nEADRYN2kQ6uTeB6Z9vhFXrgzvE779kd/SNZIH2Uo2JplFX66W5j7xGGlaz0uZ1Y=\n=yGho\n-----END PGP SIGNATURE-----\n", "payload": "tree ebc1b799be1c56be0d11c29d6d4f86586bc9310b\nparent 745bd45ddb2f8b6165ab7eacfd482d8530cab05a\nparent 1a2d4e2921b5d2bef41adfec56112fd4f6499274\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588273230 +0000\ncommitter GitHub <noreply@github.com> 1588273230 +0000\n\nMerge #4153\n\n4153: Add support for incremental text synchronization r=matklad a=lnicola\n\nFixes #3762.\r\n\r\nThis still needs a `ra_vfs` PR, but I want to know I'm on the right track. I tested the change and it didn't crash horribly, but YMMV.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c889694e4d983dfda4956ae083cf9387316669", "html_url": "https://github.com/rust-lang/rust/commit/23c889694e4d983dfda4956ae083cf9387316669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c889694e4d983dfda4956ae083cf9387316669/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "url": "https://api.github.com/repos/rust-lang/rust/commits/745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "html_url": "https://github.com/rust-lang/rust/commit/745bd45ddb2f8b6165ab7eacfd482d8530cab05a"}, {"sha": "1a2d4e2921b5d2bef41adfec56112fd4f6499274", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2d4e2921b5d2bef41adfec56112fd4f6499274", "html_url": "https://github.com/rust-lang/rust/commit/1a2d4e2921b5d2bef41adfec56112fd4f6499274"}], "stats": {"total": 138, "additions": 125, "deletions": 13}, "files": [{"sha": "522ecf2ee87ce5aab38911f48c6e8e3e8ff1f6e2", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c889694e4d983dfda4956ae083cf9387316669/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/23c889694e4d983dfda4956ae083cf9387316669/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=23c889694e4d983dfda4956ae083cf9387316669", "patch": "@@ -1193,9 +1193,9 @@ dependencies = [\n \n [[package]]\n name = \"ra_vfs\"\n-version = \"0.5.3\"\n+version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"58a265769d5e5655345a9fcbd870a1a7c3658558c0d8efaed79e0669358f46b8\"\n+checksum = \"fcaa5615f420134aea7667253db101d03a5c5f300eac607872dc2a36407b2ac9\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\","}, {"sha": "0459807fc9d9131d158991899c15831ede85a160", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c889694e4d983dfda4956ae083cf9387316669/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/23c889694e4d983dfda4956ae083cf9387316669/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=23c889694e4d983dfda4956ae083cf9387316669", "patch": "@@ -39,7 +39,7 @@ ra_prof = { path = \"../ra_prof\" }\n ra_project_model = { path = \"../ra_project_model\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n-ra_vfs = \"0.5.2\"\n+ra_vfs = \"0.6.0\"\n \n # This should only be used in CLI\n ra_db = { path = \"../ra_db\" }"}, {"sha": "e22ab8402ec68a5e68693bcf12a0522346333398", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c889694e4d983dfda4956ae083cf9387316669/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c889694e4d983dfda4956ae083cf9387316669/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=23c889694e4d983dfda4956ae083cf9387316669", "patch": "@@ -16,7 +16,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n     ServerCapabilities {\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n             open_close: Some(true),\n-            change: Some(TextDocumentSyncKind::Full),\n+            change: Some(TextDocumentSyncKind::Incremental),\n             will_save: None,\n             will_save_wait_until: None,\n             save: Some(SaveOptions::default()),"}, {"sha": "0a0e616c9cbd4e50eb72084b80dd2061aabe1981", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 121, "deletions": 9, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/23c889694e4d983dfda4956ae083cf9387316669/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c889694e4d983dfda4956ae083cf9387316669/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=23c889694e4d983dfda4956ae083cf9387316669", "patch": "@@ -6,9 +6,12 @@ mod subscriptions;\n pub(crate) mod pending_requests;\n \n use std::{\n+    borrow::Cow,\n     env,\n     error::Error,\n-    fmt, panic,\n+    fmt,\n+    ops::Range,\n+    panic,\n     path::PathBuf,\n     sync::Arc,\n     time::{Duration, Instant},\n@@ -18,11 +21,12 @@ use crossbeam_channel::{never, select, unbounded, RecvError, Sender};\n use itertools::Itertools;\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{\n-    NumberOrString, WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressCreateParams,\n-    WorkDoneProgressEnd, WorkDoneProgressReport,\n+    DidChangeTextDocumentParams, NumberOrString, TextDocumentContentChangeEvent, WorkDoneProgress,\n+    WorkDoneProgressBegin, WorkDoneProgressCreateParams, WorkDoneProgressEnd,\n+    WorkDoneProgressReport,\n };\n use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckTask};\n-use ra_ide::{Canceled, FileId, LibraryData, SourceRootId};\n+use ra_ide::{Canceled, FileId, LibraryData, LineIndex, SourceRootId};\n use ra_prof::profile;\n use ra_project_model::{PackageRoot, ProjectWorkspace};\n use ra_vfs::{VfsFile, VfsTask, Watch};\n@@ -33,6 +37,7 @@ use threadpool::ThreadPool;\n \n use crate::{\n     config::{Config, FilesWatcher},\n+    conv::{ConvWith, TryConvWith},\n     diagnostics::DiagnosticTask,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n@@ -579,12 +584,16 @@ fn on_notification(\n         Err(not) => not,\n     };\n     let not = match notification_cast::<req::DidChangeTextDocument>(not) {\n-        Ok(mut params) => {\n-            let uri = params.text_document.uri;\n+        Ok(params) => {\n+            let DidChangeTextDocumentParams { text_document, content_changes } = params;\n+            let world = state.snapshot();\n+            let file_id = text_document.try_conv_with(&world)?;\n+            let line_index = world.analysis().file_line_index(file_id)?;\n+            let uri = text_document.uri;\n             let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n-            let text =\n-                params.content_changes.pop().ok_or_else(|| \"empty changes\".to_string())?.text;\n-            state.vfs.write().change_file_overlay(path.as_path(), text);\n+            state.vfs.write().change_file_overlay(&path, |old_text| {\n+                apply_document_changes(old_text, Cow::Borrowed(&line_index), content_changes);\n+            });\n             return Ok(());\n         }\n         Err(not) => not,\n@@ -653,6 +662,48 @@ fn on_notification(\n     Ok(())\n }\n \n+fn apply_document_changes(\n+    old_text: &mut String,\n+    mut line_index: Cow<'_, LineIndex>,\n+    content_changes: Vec<TextDocumentContentChangeEvent>,\n+) {\n+    // The changes we got must be applied sequentially, but can cross lines so we\n+    // have to keep our line index updated.\n+    // Some clients (e.g. Code) sort the ranges in reverse. As an optimization, we\n+    // remember the last valid line in the index and only rebuild it if needed.\n+    enum IndexValid {\n+        All,\n+        UpToLine(u64),\n+    }\n+\n+    impl IndexValid {\n+        fn covers(&self, line: u64) -> bool {\n+            match *self {\n+                IndexValid::UpToLine(to) => to >= line,\n+                _ => true,\n+            }\n+        }\n+    }\n+\n+    let mut index_valid = IndexValid::All;\n+    for change in content_changes {\n+        match change.range {\n+            Some(range) => {\n+                if !index_valid.covers(range.start.line) {\n+                    line_index = Cow::Owned(LineIndex::new(&old_text));\n+                }\n+                index_valid = IndexValid::UpToLine(range.start.line);\n+                let range = range.conv_with(&line_index);\n+                old_text.replace_range(Range::<usize>::from(range), &change.text);\n+            }\n+            None => {\n+                *old_text = change.text;\n+                index_valid = IndexValid::UpToLine(0);\n+            }\n+        }\n+    }\n+}\n+\n fn on_check_task(\n     task: CheckTask,\n     world_state: &mut WorldState,\n@@ -958,3 +1009,64 @@ where\n {\n     Request::new(id, R::METHOD.to_string(), params)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use std::borrow::Cow;\n+\n+    use lsp_types::{Position, Range, TextDocumentContentChangeEvent};\n+    use ra_ide::LineIndex;\n+\n+    #[test]\n+    fn apply_document_changes() {\n+        fn run(text: &mut String, changes: Vec<TextDocumentContentChangeEvent>) {\n+            let line_index = Cow::Owned(LineIndex::new(&text));\n+            super::apply_document_changes(text, line_index, changes);\n+        }\n+\n+        macro_rules! c {\n+            [$($sl:expr, $sc:expr; $el:expr, $ec:expr => $text:expr),+] => {\n+                vec![$(TextDocumentContentChangeEvent {\n+                    range: Some(Range {\n+                        start: Position { line: $sl, character: $sc },\n+                        end: Position { line: $el, character: $ec },\n+                    }),\n+                    range_length: None,\n+                    text: String::from($text),\n+                }),+]\n+            };\n+        }\n+\n+        let mut text = String::new();\n+        run(&mut text, vec![]);\n+        assert_eq!(text, \"\");\n+        run(\n+            &mut text,\n+            vec![TextDocumentContentChangeEvent {\n+                range: None,\n+                range_length: None,\n+                text: String::from(\"the\"),\n+            }],\n+        );\n+        assert_eq!(text, \"the\");\n+        run(&mut text, c![0, 3; 0, 3 => \" quick\"]);\n+        assert_eq!(text, \"the quick\");\n+        run(&mut text, c![0, 0; 0, 4 => \"\", 0, 5; 0, 5 => \" foxes\"]);\n+        assert_eq!(text, \"quick foxes\");\n+        run(&mut text, c![0, 11; 0, 11 => \"\\ndream\"]);\n+        assert_eq!(text, \"quick foxes\\ndream\");\n+        run(&mut text, c![1, 0; 1, 0 => \"have \"]);\n+        assert_eq!(text, \"quick foxes\\nhave dream\");\n+        run(&mut text, c![0, 0; 0, 0 => \"the \", 1, 4; 1, 4 => \" quiet\", 1, 16; 1, 16 => \"s\\n\"]);\n+        assert_eq!(text, \"the quick foxes\\nhave quiet dreams\\n\");\n+        run(&mut text, c![0, 15; 0, 15 => \"\\n\", 2, 17; 2, 17 => \"\\n\"]);\n+        assert_eq!(text, \"the quick foxes\\n\\nhave quiet dreams\\n\\n\");\n+        run(\n+            &mut text,\n+            c![1, 0; 1, 0 => \"DREAM\", 2, 0; 2, 0 => \"they \", 3, 0; 3, 0 => \"DON'T THEY?\"],\n+        );\n+        assert_eq!(text, \"the quick foxes\\nDREAM\\nthey have quiet dreams\\nDON'T THEY?\\n\");\n+        run(&mut text, c![0, 10; 1, 5 => \"\", 2, 0; 2, 12 => \"\"]);\n+        assert_eq!(text, \"the quick \\nthey have quiet dreams\\n\");\n+    }\n+}"}]}