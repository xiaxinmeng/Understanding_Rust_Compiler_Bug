{"sha": "ecaf1f57eaeca759528f1ef99017a7ee4763e307", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYWYxZjU3ZWFlY2E3NTk1MjhmMWVmOTkwMTdhN2VlNDc2M2UzMDc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-19T15:51:11Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-26T21:16:10Z"}, "message": "Add future deprecation warning to rustdoc", "tree": {"sha": "7a2b69d41a8e21f54049680090a22879cbf82f0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a2b69d41a8e21f54049680090a22879cbf82f0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecaf1f57eaeca759528f1ef99017a7ee4763e307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecaf1f57eaeca759528f1ef99017a7ee4763e307", "html_url": "https://github.com/rust-lang/rust/commit/ecaf1f57eaeca759528f1ef99017a7ee4763e307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecaf1f57eaeca759528f1ef99017a7ee4763e307/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c08902b084081867ee437d621e605d231d2ba109", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08902b084081867ee437d621e605d231d2ba109", "html_url": "https://github.com/rust-lang/rust/commit/c08902b084081867ee437d621e605d231d2ba109"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "d1202b59e04f5520bb13df029894277768f8326e", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ecaf1f57eaeca759528f1ef99017a7ee4763e307/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecaf1f57eaeca759528f1ef99017a7ee4763e307/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=ecaf1f57eaeca759528f1ef99017a7ee4763e307", "patch": "@@ -470,6 +470,30 @@ pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n }\n \n+/// Check whether an item marked with `deprecated(since=\"X\")` is currently\n+/// deprecated (i.e. whether X is not greater than the current rustc version).\n+pub fn deprecation_in_effect(since: &str) -> bool {\n+    fn parse_version(ver: &str) -> Vec<u32> {\n+        // We ignore non-integer components of the version (e.g. \"nightly\").\n+        ver.split(|c| c == '.' || c == '-').flat_map(|s| s.parse()).collect()\n+    }\n+\n+    if let Some(rustc) = option_env!(\"CFG_RELEASE\") {\n+        let since: Vec<u32> = parse_version(since);\n+        let rustc: Vec<u32> = parse_version(rustc);\n+        // We simply treat invalid `since` attributes as relating to a previous\n+        // Rust version, thus always displaying the warning.\n+        if since.len() != 3 {\n+            return true;\n+        }\n+        since <= rustc\n+    } else {\n+        // By default, a deprecation warning applies to\n+        // the current version of the compiler.\n+        true\n+    }\n+}\n+\n struct Checker<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n@@ -559,33 +583,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(id) = id {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n-                fn deprecation_in_effect(since: Option<&str>, rustc: Option<&str>) -> bool {\n-                    fn parse_version(ver: &str) -> Vec<u32> {\n-                        // We ignore non-integer components of the version (e.g. \"nightly\").\n-                        ver.split(|c| c == '.' || c == '-').flat_map(|s| s.parse()).collect()\n-                    }\n-\n-                    if since.is_none() || rustc.is_none() {\n-                        // By default, a deprecation warning applies to\n-                        // the current version of the compiler.\n-                        true\n-                    } else {\n-                        let since: Vec<u32> = parse_version(since.unwrap());\n-                        let rustc: Vec<u32> = parse_version(rustc.unwrap());\n-                        // We simply treat invalid `since` attributes as relating to a previous\n-                        // Rust version, thus always displaying the warning.\n-                        if since.len() != 3 {\n-                            return true;\n-                        }\n-                        since <= rustc\n-                    }\n-                }\n-\n                 // If the deprecation is scheduled for a future Rust\n                 // version, then we should display no warning message.\n                 let deprecated_in_future_version = if let Some(sym) = depr_entry.attr.since {\n                     let since = sym.as_str();\n-                    !deprecation_in_effect(Some(since.as_ref()), option_env!(\"CFG_RELEASE\"))\n+                    !deprecation_in_effect(since.as_ref())\n                 } else {\n                     false\n                 };"}, {"sha": "5c7825f2dd623db1be5ae58a85fcb1789bee32dc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ecaf1f57eaeca759528f1ef99017a7ee4763e307/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecaf1f57eaeca759528f1ef99017a7ee4763e307/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ecaf1f57eaeca759528f1ef99017a7ee4763e307", "patch": "@@ -2108,9 +2108,15 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             } else {\n                 String::new()\n             };\n-            let text = format!(\"Deprecated{}{}\",\n-                               since,\n-                               MarkdownHtml(&deprecated_reason));\n+            let text = if stability::deprecation_in_effect(&stab.deprecated_since) {\n+                format!(\"Deprecated{}{}\",\n+                        since,\n+                        MarkdownHtml(&deprecated_reason))\n+            } else {\n+                format!(\"This will be deprecated in {}{}\",\n+                        Escape(&stab.deprecated_since),\n+                        MarkdownHtml(&deprecated_reason))\n+            };\n             stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n         };\n \n@@ -2160,7 +2166,15 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             String::new()\n         };\n \n-        let text = format!(\"Deprecated{}{}\", since, MarkdownHtml(&note));\n+        let text = if stability::deprecation_in_effect(&depr.since) {\n+            format!(\"Deprecated{}{}\",\n+                    since,\n+                    MarkdownHtml(&note))\n+        } else {\n+            format!(\"This will be deprecated in {}{}\",\n+                    Escape(&depr.since),\n+                    MarkdownHtml(&note))\n+        };\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n     }\n "}]}