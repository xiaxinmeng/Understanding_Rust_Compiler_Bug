{"sha": "1f5d31f8db456228a8aee430ce00dd969d740144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNWQzMWY4ZGI0NTYyMjhhOGFlZTQzMGNlMDBkZDk2OWQ3NDAxNDQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-19T23:15:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-19T23:15:25Z"}, "message": "Rollup merge of #49139 - sfackler:bufreader-buffer, r=SimonSapin\n\nAdd BufReader::buffer\n\nThis subsumes the need for an explicit is_empty function, and provides\naccess to the buffered data itself which has been requested from time to\ntime.\n\nWe could call this `buf` to match `fill_buf`, but I think I'd prefer `fill_buffer` anyways in hindsight.", "tree": {"sha": "0ba74debf73574ca15ab8d870fbe62191db775bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ba74debf73574ca15ab8d870fbe62191db775bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f5d31f8db456228a8aee430ce00dd969d740144", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJasESOCRBK7hj4Ov3rIwAAdHIIAJrPFwT877Ucu1+fwunYiz2N\nHpQiSGLa/b2fvzc6Eh6XL4O2spngir48cx7CBFHIKcMUmMn7Qa540t8weoXB61ts\nDnuFLGYKk0UkBI2W9y3sLyBStIcTX/HXg919bFjGPSw+ruQl0pIU4ZEc+EB9Sf/U\nZaVZBGsGgoqXwYlIy3YAA1pE+4os+NgiolEmZL6/5U9+/BfIv7PSVLlt5/duLhNA\noZfIEb4DdLyZ+oYdbRHWzN1eqxLAl3VXr0nPTPQB4+UgAwAqZswcpPwf5wQPQzIQ\nnBtYqWwj887vwFYo2ofGOpm9eix+1WBUaurpGmZYg5o7iMSid+L5FljY7rrU7ic=\n=pO6E\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ba74debf73574ca15ab8d870fbe62191db775bd\nparent baea60b610530c94ec12a914428cdf0a7d346a7e\nparent 16da5d4bb2d65a4d533d1da2a4e0d288d3a474c5\nauthor kennytm <kennytm@gmail.com> 1521501325 +0800\ncommitter GitHub <noreply@github.com> 1521501325 +0800\n\nRollup merge of #49139 - sfackler:bufreader-buffer, r=SimonSapin\n\nAdd BufReader::buffer\n\nThis subsumes the need for an explicit is_empty function, and provides\naccess to the buffered data itself which has been requested from time to\ntime.\n\nWe could call this `buf` to match `fill_buf`, but I think I'd prefer `fill_buffer` anyways in hindsight.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d31f8db456228a8aee430ce00dd969d740144", "html_url": "https://github.com/rust-lang/rust/commit/1f5d31f8db456228a8aee430ce00dd969d740144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d31f8db456228a8aee430ce00dd969d740144/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baea60b610530c94ec12a914428cdf0a7d346a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/baea60b610530c94ec12a914428cdf0a7d346a7e", "html_url": "https://github.com/rust-lang/rust/commit/baea60b610530c94ec12a914428cdf0a7d346a7e"}, {"sha": "16da5d4bb2d65a4d533d1da2a4e0d288d3a474c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/16da5d4bb2d65a4d533d1da2a4e0d288d3a474c5", "html_url": "https://github.com/rust-lang/rust/commit/16da5d4bb2d65a4d533d1da2a4e0d288d3a474c5"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "ccaa19acc8379eaaa68424656281cf5cac597409", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f5d31f8db456228a8aee430ce00dd969d740144/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5d31f8db456228a8aee430ce00dd969d740144/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1f5d31f8db456228a8aee430ce00dd969d740144", "patch": "@@ -168,8 +168,36 @@ impl<R: Read> BufReader<R> {\n     /// # }\n     /// ```\n     #[unstable(feature = \"bufreader_is_empty\", issue = \"45323\", reason = \"recently added\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use .buffer().is_empty() instead\")]\n     pub fn is_empty(&self) -> bool {\n-        self.pos == self.cap\n+        self.buffer().is_empty()\n+    }\n+\n+    /// Returns a reference to the internally buffered data.\n+    ///\n+    /// Unlike `fill_buf`, this will not attempt to fill the buffer if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(bufreader_buffer)]\n+    /// use std::io::{BufReader, BufRead};\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let f = File::open(\"log.txt\")?;\n+    /// let mut reader = BufReader::new(f);\n+    /// assert!(reader.buffer().is_empty());\n+    ///\n+    /// if reader.fill_buf()?.len() > 0 {\n+    ///     assert!(!reader.buffer().is_empty());\n+    /// }\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"bufreader_buffer\", issue = \"45323\")]\n+    pub fn buffer(&self) -> &[u8] {\n+        &self.buf[self.pos..self.cap]\n     }\n \n     /// Unwraps this `BufReader`, returning the underlying reader."}]}