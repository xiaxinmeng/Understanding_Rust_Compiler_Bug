{"sha": "e5f1a299378e8be934f42ab14cabce4a2dab7d00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZjFhMjk5Mzc4ZThiZTkzNGY0MmFiMTRjYWJjZTRhMmRhYjdkMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T22:55:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T22:55:08Z"}, "message": "Auto merge of #1257 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "cf0a79e3fa1c427da99630ba7ef76d955a064fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf0a79e3fa1c427da99630ba7ef76d955a064fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5f1a299378e8be934f42ab14cabce4a2dab7d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f1a299378e8be934f42ab14cabce4a2dab7d00", "html_url": "https://github.com/rust-lang/rust/commit/e5f1a299378e8be934f42ab14cabce4a2dab7d00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5f1a299378e8be934f42ab14cabce4a2dab7d00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db49339136a8066847b85cf5e5bf23d4bcedeb31", "url": "https://api.github.com/repos/rust-lang/rust/commits/db49339136a8066847b85cf5e5bf23d4bcedeb31", "html_url": "https://github.com/rust-lang/rust/commit/db49339136a8066847b85cf5e5bf23d4bcedeb31"}, {"sha": "90918111474cb573a4183bb9b8eb04dfd8150275", "url": "https://api.github.com/repos/rust-lang/rust/commits/90918111474cb573a4183bb9b8eb04dfd8150275", "html_url": "https://github.com/rust-lang/rust/commit/90918111474cb573a4183bb9b8eb04dfd8150275"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "1270131b72677aa9713de361249dfc286c591a0e", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f1a299378e8be934f42ab14cabce4a2dab7d00/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/e5f1a299378e8be934f42ab14cabce4a2dab7d00/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=e5f1a299378e8be934f42ab14cabce4a2dab7d00", "patch": "@@ -1 +1 @@\n-8ff785011be6625e32afceee3a08e5cff7470feb\n+1edd389cc4c7b5be7a3dd4fe4b986f6017018e54"}, {"sha": "37f2acf4c3bce3b308d5ca823703b02512606818", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5f1a299378e8be934f42ab14cabce4a2dab7d00/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f1a299378e8be934f42ab14cabce4a2dab7d00/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=e5f1a299378e8be934f42ab14cabce4a2dab7d00", "patch": "@@ -194,11 +194,10 @@ impl GlobalState {\n \n /// Error reporting\n fn err_sb_ub(msg: String) -> InterpError<'static> {\n-    // FIXME: use `err_machine_stop!` macro, once that exists.\n-    InterpError::MachineStop(Box::new(TerminationInfo::ExperimentalUb {\n+    err_machine_stop!(TerminationInfo::ExperimentalUb {\n         msg,\n         url: format!(\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\"),\n-    }))\n+    })\n }\n \n // # Stacked Borrows Core Begin"}, {"sha": "b0a9791233437c2efaf64122aa26380ff9bb3c4f", "filename": "tests/run-pass/async-fn.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e5f1a299378e8be934f42ab14cabce4a2dab7d00/tests%2Frun-pass%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f1a299378e8be934f42ab14cabce4a2dab7d00/tests%2Frun-pass%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fasync-fn.rs?ref=e5f1a299378e8be934f42ab14cabce4a2dab7d00", "patch": "@@ -1,7 +1,9 @@\n #![feature(never_type)]\n+#![feature(wake_trait)]\n \n-use std::{future::Future, pin::Pin, task::Poll, ptr};\n-use std::task::{Waker, RawWaker, RawWakerVTable, Context};\n+use std::{future::Future, pin::Pin, task::Poll};\n+use std::task::{Wake, Waker, Context};\n+use std::sync::Arc;\n \n // See if we can run a basic `async fn`\n pub async fn foo(x: &u32, y: u32) -> u32 {\n@@ -47,25 +49,14 @@ async fn partial_init(x: u32) -> u32 {\n }\n \n fn run_fut(mut fut: impl Future<Output=u32>, output: u32) {\n-    fn raw_waker_clone(_this: *const ()) -> RawWaker {\n-        panic!(\"unimplemented\");\n+    struct MyWaker;\n+    impl Wake for MyWaker {\n+        fn wake(self: Arc<Self>) {\n+            unimplemented!()\n+        }\n     }\n-    fn raw_waker_wake(_this: *const ()) {\n-        panic!(\"unimplemented\");\n-    }\n-    fn raw_waker_wake_by_ref(_this: *const ()) {\n-        panic!(\"unimplemented\");\n-    }\n-    fn raw_waker_drop(_this: *const ()) {}\n-\n-    static RAW_WAKER: RawWakerVTable = RawWakerVTable::new(\n-        raw_waker_clone,\n-        raw_waker_wake,\n-        raw_waker_wake_by_ref,\n-        raw_waker_drop,\n-    );\n \n-    let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n+    let waker = Waker::from(Arc::new(MyWaker));\n     let mut context = Context::from_waker(&waker);\n     assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(output));\n }"}]}