{"sha": "bea404f292f0ec60a990de28433b9eaa1dfecb4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTQwNGYyOTJmMGVjNjBhOTkwZGUyODQzM2I5ZWFhMWRmZWNiNGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T07:13:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T07:13:42Z"}, "message": "syntax: stylistic cleanup in item parsing.", "tree": {"sha": "f346134591f41db0665ed1dbdf5135f2907ae4c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f346134591f41db0665ed1dbdf5135f2907ae4c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea404f292f0ec60a990de28433b9eaa1dfecb4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea404f292f0ec60a990de28433b9eaa1dfecb4c", "html_url": "https://github.com/rust-lang/rust/commit/bea404f292f0ec60a990de28433b9eaa1dfecb4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea404f292f0ec60a990de28433b9eaa1dfecb4c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258e86a5833588ffb2443a80b4e3c42300c4b278", "url": "https://api.github.com/repos/rust-lang/rust/commits/258e86a5833588ffb2443a80b4e3c42300c4b278", "html_url": "https://github.com/rust-lang/rust/commit/258e86a5833588ffb2443a80b4e3c42300c4b278"}], "stats": {"total": 154, "additions": 47, "deletions": 107}, "files": [{"sha": "68f0357abd03c5245ddeba20bc43608da61103e1", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 47, "deletions": 107, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/bea404f292f0ec60a990de28433b9eaa1dfecb4c/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea404f292f0ec60a990de28433b9eaa1dfecb4c/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=bea404f292f0ec60a990de28433b9eaa1dfecb4c", "patch": "@@ -128,13 +128,9 @@ impl<'a> Parser<'a> {\n                     constness: respan(fn_span, Constness::NotConst),\n                     abi: opt_abi.unwrap_or(Abi::C),\n                 })?;\n-                let prev_span = self.prev_span;\n-                let item = self.mk_item(lo.to(prev_span),\n-                                        ident,\n-                                        item_,\n-                                        visibility,\n-                                        maybe_append(attrs, extra_attrs));\n-                return Ok(Some(item));\n+                let span = lo.to(self.prev_span);\n+                let attrs = maybe_append(attrs, extra_attrs);\n+                return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n                 return Ok(Some(\n                     self.parse_item_foreign_mod(lo, opt_abi, visibility, attrs, extern_sp)?,\n@@ -149,13 +145,9 @@ impl<'a> Parser<'a> {\n             // STATIC ITEM\n             let m = self.parse_mutability();\n             let (ident, item_, extra_attrs) = self.parse_item_const(Some(m))?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.eat_keyword(kw::Const) {\n             let const_span = self.prev_span;\n@@ -171,13 +163,9 @@ impl<'a> Parser<'a> {\n                     constness: respan(const_span, Constness::Const),\n                     abi: Abi::Rust,\n                 })?;\n-                let prev_span = self.prev_span;\n-                let item = self.mk_item(lo.to(prev_span),\n-                                        ident,\n-                                        item_,\n-                                        visibility,\n-                                        maybe_append(attrs, extra_attrs));\n-                return Ok(Some(item));\n+                let span = lo.to(self.prev_span);\n+                let attrs = maybe_append(attrs, extra_attrs);\n+                return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n             }\n \n             // CONST ITEM\n@@ -194,13 +182,9 @@ impl<'a> Parser<'a> {\n                     .emit();\n             }\n             let (ident, item_, extra_attrs) = self.parse_item_const(None)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n \n         // Parses `async unsafe? fn`.\n@@ -224,14 +208,10 @@ impl<'a> Parser<'a> {\n                     constness: respan(fn_span, Constness::NotConst),\n                     abi: Abi::Rust,\n                 })?;\n-                let prev_span = self.prev_span;\n-                let item = self.mk_item(lo.to(prev_span),\n-                                        ident,\n-                                        item_,\n-                                        visibility,\n-                                        maybe_append(attrs, extra_attrs));\n                 self.ban_async_in_2015(async_span);\n-                return Ok(Some(item));\n+                let span = lo.to(self.prev_span);\n+                let attrs = maybe_append(attrs, extra_attrs);\n+                return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n             }\n         }\n         if self.check_keyword(kw::Unsafe) &&\n@@ -246,15 +226,10 @@ impl<'a> Parser<'a> {\n                 self.expect_keyword(kw::Trait)?;\n                 IsAuto::Yes\n             };\n-            let (ident, item_, extra_attrs) =\n-                self.parse_item_trait(is_auto, Unsafety::Unsafe)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let (ident, item_, extra_attrs) = self.parse_item_trait(is_auto, Unsafety::Unsafe)?;\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.check_keyword(kw::Impl) ||\n            self.check_keyword(kw::Unsafe) &&\n@@ -265,10 +240,10 @@ impl<'a> Parser<'a> {\n             let defaultness = self.parse_defaultness();\n             let unsafety = self.parse_unsafety();\n             self.expect_keyword(kw::Impl)?;\n-            let (ident, item, extra_attrs) = self.parse_item_impl(unsafety, defaultness)?;\n+            let (ident, item_, extra_attrs) = self.parse_item_impl(unsafety, defaultness)?;\n             let span = lo.to(self.prev_span);\n-            return Ok(Some(self.mk_item(span, ident, item, visibility,\n-                                        maybe_append(attrs, extra_attrs))));\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.check_keyword(kw::Fn) {\n             // FUNCTION ITEM\n@@ -280,13 +255,9 @@ impl<'a> Parser<'a> {\n                 constness: respan(fn_span, Constness::NotConst),\n                 abi: Abi::Rust,\n             })?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.check_keyword(kw::Unsafe)\n             && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace)) {\n@@ -307,25 +278,16 @@ impl<'a> Parser<'a> {\n                 constness: respan(fn_span, Constness::NotConst),\n                 abi,\n             })?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n-            let (ident, item_, extra_attrs) =\n-                self.parse_item_mod(&attrs[..])?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let (ident, item_, extra_attrs) = self.parse_item_mod(&attrs[..])?;\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if let Some(type_) = self.eat_type() {\n             let (ident, alias, generics) = type_?;\n@@ -334,24 +296,15 @@ impl<'a> Parser<'a> {\n                 AliasKind::Weak(ty) => ItemKind::TyAlias(ty, generics),\n                 AliasKind::OpaqueTy(bounds) => ItemKind::OpaqueTy(bounds, generics),\n             };\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    attrs);\n-            return Ok(Some(item));\n+            let span = lo.to(self.prev_span);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.eat_keyword(kw::Enum) {\n             // ENUM ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_enum()?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.check_keyword(kw::Trait)\n             || (self.check_keyword(kw::Auto)\n@@ -365,38 +318,25 @@ impl<'a> Parser<'a> {\n                 IsAuto::Yes\n             };\n             // TRAIT ITEM\n-            let (ident, item_, extra_attrs) =\n-                self.parse_item_trait(is_auto, Unsafety::Normal)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let (ident, item_, extra_attrs) = self.parse_item_trait(is_auto, Unsafety::Normal)?;\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.eat_keyword(kw::Struct) {\n             // STRUCT ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_struct()?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if self.is_union_item() {\n             // UNION ITEM\n             self.bump();\n             let (ident, item_, extra_attrs) = self.parse_item_union()?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n+            let span = lo.to(self.prev_span);\n+            let attrs = maybe_append(attrs, extra_attrs);\n+            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n         }\n         if let Some(macro_def) = self.eat_macro_def(&attrs, &visibility, lo)? {\n             return Ok(Some(macro_def));"}]}