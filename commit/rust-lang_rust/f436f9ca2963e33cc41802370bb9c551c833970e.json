{"sha": "f436f9ca2963e33cc41802370bb9c551c833970e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MzZmOWNhMjk2M2UzM2NjNDE4MDIzNzBiYjljNTUxYzgzMzk3MGU=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-21T23:49:42Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-26T16:26:33Z"}, "message": "Make Send and Sync traits unsafe", "tree": {"sha": "c79b09c0cb3024b389027fd2a501a44a0a1f9bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c79b09c0cb3024b389027fd2a501a44a0a1f9bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f436f9ca2963e33cc41802370bb9c551c833970e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f436f9ca2963e33cc41802370bb9c551c833970e", "html_url": "https://github.com/rust-lang/rust/commit/f436f9ca2963e33cc41802370bb9c551c833970e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f436f9ca2963e33cc41802370bb9c551c833970e/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686ce664da31f87b8d1c7377313f160d8fdcebe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/686ce664da31f87b8d1c7377313f160d8fdcebe9", "html_url": "https://github.com/rust-lang/rust/commit/686ce664da31f87b8d1c7377313f160d8fdcebe9"}], "stats": {"total": 128, "additions": 73, "deletions": 55}, "files": [{"sha": "4810e15d68b993a196944494b745b1928fa2298a", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -129,9 +129,9 @@ pub struct Weak<T> {\n     _ptr: *mut ArcInner<T>,\n }\n \n-impl<T: Sync + Send> Send for Arc<T> { }\n+unsafe impl<T: Sync + Send> Send for Arc<T> { }\n \n-impl<T: Sync + Send> Sync for Arc<T> { }\n+unsafe impl<T: Sync + Send> Sync for Arc<T> { }\n \n struct ArcInner<T> {\n     strong: atomic::AtomicUint,"}, {"sha": "6fc6c2a569d05514728c283715e5a9bb550a43c8", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -577,6 +577,6 @@ impl<T> RacyCell<T> {\n     }\n }\n \n-impl<T:Send> Send for RacyCell<T> { }\n+unsafe impl<T:Send> Send for RacyCell<T> { }\n \n-impl<T> Sync for RacyCell<T> { } // Oh dear\n+unsafe impl<T> Sync for RacyCell<T> { } // Oh dear"}, {"sha": "fb030ea45f3998180bb64a72d73838b55a8f8ac2", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -19,7 +19,7 @@\n \n /// Types able to be transferred across task boundaries.\n #[lang=\"send\"]\n-pub trait Send for Sized? : 'static {\n+pub unsafe trait Send for Sized? : 'static {\n     // empty.\n }\n \n@@ -81,7 +81,7 @@ pub trait Copy for Sized? {\n /// reference; not doing this is undefined behaviour (for example,\n /// `transmute`-ing from `&T` to `&mut T` is illegal).\n #[lang=\"sync\"]\n-pub trait Sync for Sized? {\n+pub unsafe trait Sync for Sized? {\n     // Empty\n }\n "}, {"sha": "402e85b4d8b22b6c0dd85071a15782584739d146", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -515,13 +515,13 @@ pub struct UniquePtr<T>(pub *mut T);\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `UniquePtr` must enforce it.\n-impl<T:Send> Send for UniquePtr<T> { }\n+unsafe impl<T:Send> Send for UniquePtr<T> { }\n \n /// `UniquePtr` pointers are `Sync` if `T` is `Sync` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `UniquePtr` must enforce it.\n-impl<T:Sync> Sync for UniquePtr<T> { }\n+unsafe impl<T:Sync> Sync for UniquePtr<T> { }\n \n impl<T> UniquePtr<T> {\n     /// Returns a null UniquePtr."}, {"sha": "513b955da3f5855104e5a1adb1db86610220f65b", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -281,7 +281,7 @@ struct ModuleConfig {\n     time_passes: bool,\n }\n \n-impl Send for ModuleConfig { }\n+unsafe impl Send for ModuleConfig { }\n \n impl ModuleConfig {\n     fn new(tm: TargetMachineRef, passes: Vec<String>) -> ModuleConfig {"}, {"sha": "7e4517c209b25271303a6031b84f80f05058632f", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -60,8 +60,8 @@ pub struct ModuleTranslation {\n     pub llmod: ModuleRef,\n }\n \n-impl Send for ModuleTranslation { }\n-impl Sync for ModuleTranslation { }\n+unsafe impl Send for ModuleTranslation { }\n+unsafe impl Sync for ModuleTranslation { }\n \n pub struct CrateTranslation {\n     pub modules: Vec<ModuleTranslation>,"}, {"sha": "846b542d81a4af53dcb95e5d3ef6dbcdab0f6c4b", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -89,8 +89,8 @@ pub struct CString {\n     owns_buffer_: bool,\n }\n \n-impl Send for CString { }\n-impl Sync for CString { }\n+unsafe impl Send for CString { }\n+unsafe impl Sync for CString { }\n \n impl Clone for CString {\n     /// Clone this CString into a new, uniquely owned CString. For safety"}, {"sha": "412b7161305e68b12c2d9db7adc400ad1ad834fc", "filename": "src/libstd/comm/blocking.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fblocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fblocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fblocking.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -13,16 +13,19 @@\n use thread::Thread;\n use sync::atomic::{AtomicBool, INIT_ATOMIC_BOOL, Ordering};\n use sync::Arc;\n+use kinds::{Sync, Send};\n use kinds::marker::{NoSend, NoSync};\n use mem;\n use clone::Clone;\n \n-#[deriving(Send, Sync)]\n struct Inner {\n     thread: Thread,\n     woken: AtomicBool,\n }\n \n+unsafe impl Send for Inner {}\n+unsafe impl Sync for Inner {}\n+\n #[deriving(Clone)]\n pub struct SignalToken {\n     inner: Arc<Inner>,"}, {"sha": "618a5eebf0f9306f4820ef6c979f2fbeef9b29d9", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -363,7 +363,7 @@ pub struct Receiver<T> {\n \n // The receiver port can be sent from place to place, so long as it\n // is not used to receive non-sendable things.\n-impl<T:Send> Send for Receiver<T> { }\n+unsafe impl<T:Send> Send for Receiver<T> { }\n \n /// An iterator over messages on a receiver, this iterator will block\n /// whenever `next` is called, waiting for a new message, and `None` will be\n@@ -382,7 +382,7 @@ pub struct Sender<T> {\n \n // The send port can be sent from place to place, so long as it\n // is not used to send non-sendable things.\n-impl<T:Send> Send for Sender<T> { }\n+unsafe impl<T:Send> Send for Sender<T> { }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks."}, {"sha": "cddef236664343332998cf53dbaebd6358449a76", "filename": "src/libstd/comm/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmpsc_queue.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -76,8 +76,8 @@ pub struct Queue<T> {\n     tail: UnsafeCell<*mut Node<T>>,\n }\n \n-impl<T:Send> Send for Queue<T> { }\n-impl<T:Send> Sync for Queue<T> { }\n+unsafe impl<T:Send> Send for Queue<T> { }\n+unsafe impl<T:Send> Sync for Queue<T> { }\n \n impl<T> Node<T> {\n     unsafe fn new(v: Option<T>) -> *mut Node<T> {"}, {"sha": "becb78063aeb5ae82ae9c87676879c0f3d678686", "filename": "src/libstd/comm/spsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fspsc_queue.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -73,9 +73,9 @@ pub struct Queue<T> {\n     cache_subtractions: AtomicUint,\n }\n \n-impl<T: Send> Send for Queue<T> { }\n+unsafe impl<T: Send> Send for Queue<T> { }\n \n-impl<T: Send> Sync for Queue<T> { }\n+unsafe impl<T: Send> Sync for Queue<T> { }\n \n impl<T: Send> Node<T> {\n     fn new() -> *mut Node<T> {"}, {"sha": "88338849965b0589177f9aeda001a9c6e16ee44b", "filename": "src/libstd/comm/sync.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fcomm%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fsync.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -53,11 +53,10 @@ pub struct Packet<T> {\n     lock: Mutex<State<T>>,\n }\n \n-impl<T:Send> Send for Packet<T> { }\n+unsafe impl<T:Send> Send for Packet<T> { }\n \n-impl<T:Send> Sync for Packet<T> { }\n+unsafe impl<T:Send> Sync for Packet<T> { }\n \n-#[deriving(Send)]\n struct State<T> {\n     disconnected: bool, // Is the channel disconnected yet?\n     queue: Queue,       // queue of senders waiting to send data\n@@ -74,6 +73,8 @@ struct State<T> {\n     canceled: Option<&'static mut bool>,\n }\n \n+unsafe impl<T: Send> Send for State<T> {}\n+\n /// Possible flavors of threads who can be blocked on this channel.\n enum Blocker {\n     BlockedSender(SignalToken),\n@@ -93,7 +94,7 @@ struct Node {\n     next: *mut Node,\n }\n \n-impl Send for Node {}\n+unsafe impl Send for Node {}\n \n /// A simple ring-buffer\n struct Buffer<T> {"}, {"sha": "88bdb29caecadc94b7e386cd02979ed039fee701", "filename": "src/libstd/rt/exclusive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Frt%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Frt%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fexclusive.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -26,9 +26,9 @@ pub struct Exclusive<T> {\n     data: UnsafeCell<T>,\n }\n \n-impl<T:Send> Send for Exclusive<T> { }\n+unsafe impl<T:Send> Send for Exclusive<T> { }\n \n-impl<T:Send> Sync for Exclusive<T> { }\n+unsafe impl<T:Send> Sync for Exclusive<T> { }\n \n /// An RAII guard returned via `lock`\n pub struct ExclusiveGuard<'a, T:'a> {"}, {"sha": "d2dafac281a878b0f4fab8b8326c3825580bcb07", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -11,7 +11,7 @@\n use prelude::*;\n \n use cell::{UnsafeCell, RacyCell};\n-use kinds::marker;\n+use kinds::{marker, Sync};\n use sync::{poison, AsMutexGuard};\n use sys_common::mutex as sys;\n \n@@ -73,9 +73,9 @@ pub struct Mutex<T> {\n     data: RacyCell<T>,\n }\n \n-impl<T:Send> Send for Mutex<T> { }\n+unsafe impl<T:Send> Send for Mutex<T> { }\n \n-impl<T:Send> Sync for Mutex<T> { }\n+unsafe impl<T:Send> Sync for Mutex<T> { }\n \n /// The static mutex type is provided to allow for static allocation of mutexes.\n ///\n@@ -98,12 +98,13 @@ impl<T:Send> Sync for Mutex<T> { }\n /// }\n /// // lock is unlocked here.\n /// ```\n-#[deriving(Sync)]\n pub struct StaticMutex {\n     lock: sys::Mutex,\n     poison: RacyCell<poison::Flag>,\n }\n \n+unsafe impl Sync for StaticMutex {}\n+\n /// An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n /// dropped (falls out of scope), the lock will be unlocked.\n ///"}, {"sha": "4d9fbb5990840af8ce3ab716a962b3e66c20912e", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -14,6 +14,7 @@\n //! example use case would be for initializing an FFI library.\n \n use int;\n+use kinds::Sync;\n use mem::drop;\n use ops::FnOnce;\n use sync::atomic;\n@@ -35,13 +36,14 @@ use sync::{StaticMutex, MUTEX_INIT};\n ///     // run initialization here\n /// });\n /// ```\n-#[deriving(Sync)]\n pub struct Once {\n     mutex: StaticMutex,\n     cnt: atomic::AtomicInt,\n     lock_cnt: atomic::AtomicInt,\n }\n \n+unsafe impl Sync for Once {}\n+\n /// Initialization value for static `Once` values.\n pub const ONCE_INIT: Once = Once {\n     mutex: MUTEX_INIT,"}, {"sha": "b0137bdad06ae65b82f47985ad6e15a01441593c", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -59,9 +59,9 @@ pub struct Helper<M> {\n     pub shutdown: UnsafeCell<bool>,\n }\n \n-impl<M:Send> Send for Helper<M> { }\n+unsafe impl<M:Send> Send for Helper<M> { }\n \n-impl<M:Send> Sync for Helper<M> { }\n+unsafe impl<M:Send> Sync for Helper<M> { }\n \n impl<M: Send> Helper<M> {\n     /// Lazily boots a helper thread, becoming a no-op if the helper has already"}, {"sha": "567c26956efe94f6c3a1e62d440b7e75b9d46035", "filename": "src/libstd/sys/common/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -8,16 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use kinds::Sync;\n use sys::mutex as imp;\n \n /// An OS-based mutual exclusion lock.\n ///\n /// This is the thinnest cross-platform wrapper around OS mutexes. All usage of\n /// this mutex is unsafe and it is recommended to instead use the safe wrapper\n /// at the top level of the crate instead of this type.\n-#[deriving(Sync)]\n pub struct Mutex(imp::Mutex);\n \n+unsafe impl Sync for Mutex {}\n+\n /// Constant initializer for statically allocated mutexes.\n pub const MUTEX_INIT: Mutex = Mutex(imp::MUTEX_INIT);\n "}, {"sha": "a4ebcbd25d00efc345345c66b8562ff551104cd4", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -162,8 +162,8 @@ mod signal {\n         sa_restorer: *mut libc::c_void,\n     }\n \n-    impl ::kinds::Send for sigaction { }\n-    impl ::kinds::Sync for sigaction { }\n+    unsafe impl ::kinds::Send for sigaction { }\n+    unsafe impl ::kinds::Sync for sigaction { }\n \n     #[repr(C)]\n     #[cfg(target_word_size = \"32\")]"}, {"sha": "986f50bc8de9e2fb2a6af0ef6a02a24eb4d70ad6", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use kinds::Sync;\n use cell::{UnsafeCell, RacyCell};\n use sys::sync as ffi;\n use sys_common::mutex;\n \n-#[deriving(Sync)]\n pub struct Mutex { inner: RacyCell<ffi::pthread_mutex_t> }\n \n #[inline]\n@@ -24,6 +24,8 @@ pub const MUTEX_INIT: Mutex = Mutex {\n     inner: RacyCell(UnsafeCell { value: ffi::PTHREAD_MUTEX_INITIALIZER }),\n };\n \n+unsafe impl Sync for Mutex {}\n+\n impl Mutex {\n     #[inline]\n     pub unsafe fn new() -> Mutex {"}, {"sha": "c4aec82894f69a0121ff8fe676ad7a33f873b8a6", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -210,12 +210,13 @@ impl Clone for UnixStream {\n // Unix Listener\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[deriving(Sync)]\n pub struct UnixListener {\n     inner: Inner,\n     path: CString,\n }\n \n+unsafe impl Sync for UnixListener {}\n+\n impl UnixListener {\n     pub fn bind(addr: &CString) -> IoResult<UnixListener> {\n         bind(addr, libc::SOCK_STREAM).map(|fd| {\n@@ -253,14 +254,15 @@ pub struct UnixAcceptor {\n     deadline: u64,\n }\n \n-#[deriving(Sync)]\n struct AcceptorInner {\n     listener: UnixListener,\n     reader: FileDesc,\n     writer: FileDesc,\n     closed: atomic::AtomicBool,\n }\n \n+unsafe impl Sync for AcceptorInner {}\n+\n impl UnixAcceptor {\n     pub fn fd(&self) -> fd_t { self.inner.listener.fd() }\n "}, {"sha": "e2a78947e167ab015c9ea3950b3d5a0b1fda65d3", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -29,11 +29,12 @@ pub use sys_common::net::TcpStream;\n // TCP listeners\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[deriving(Sync)]\n pub struct TcpListener {\n     pub inner: FileDesc,\n }\n \n+unsafe impl Sync for TcpListener {}\n+\n impl TcpListener {\n     pub fn bind(addr: ip::SocketAddr) -> IoResult<TcpListener> {\n         let fd = try!(net::socket(addr, libc::SOCK_STREAM));\n@@ -90,14 +91,15 @@ pub struct TcpAcceptor {\n     deadline: u64,\n }\n \n-#[deriving(Sync)]\n struct AcceptorInner {\n     listener: TcpListener,\n     reader: FileDesc,\n     writer: FileDesc,\n     closed: atomic::AtomicBool,\n }\n \n+unsafe impl Sync for AcceptorInner {}\n+\n impl TcpAcceptor {\n     pub fn fd(&self) -> sock_t { self.inner.listener.fd() }\n "}, {"sha": "92aa5201ec30120749ec6ab24a7794ae93e41055", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -283,19 +283,22 @@ impl Builder {\n     }\n }\n \n-#[deriving(Sync)]\n struct Inner {\n     name: Option<String>,\n     lock: Mutex<bool>,          // true when there is a buffered unpark\n     cvar: Condvar,\n }\n \n-#[deriving(Clone, Sync)]\n+unsafe impl Sync for Inner {}\n+\n+#[deriving(Clone)]\n /// A handle to a thread.\n pub struct Thread {\n     inner: Arc<Inner>,\n }\n \n+unsafe impl Sync for Thread {}\n+\n impl Thread {\n     // Used only internally to construct a thread object without spawning\n     fn new(name: Option<String>) -> Thread {"}, {"sha": "242dceb425636291692151bf6bf0c0adc2f82b6b", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -280,7 +280,7 @@ mod imp {\n         pub dtor_running: UnsafeCell<bool>, // should be Cell\n     }\n \n-    impl<T> ::kinds::Sync for Key<T> { }\n+    unsafe impl<T> ::kinds::Sync for Key<T> { }\n \n     #[doc(hidden)]\n     impl<T> Key<T> {\n@@ -412,7 +412,7 @@ mod imp {\n         pub os: OsStaticKey,\n     }\n \n-    impl<T> ::kinds::Sync for Key<T> { }\n+    unsafe impl<T> ::kinds::Sync for Key<T> { }\n \n     struct Value<T: 'static> {\n         key: &'static Key<T>,"}, {"sha": "d7ea163cc805e84ebbdb4ad6b59f0d142096abbf", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -202,7 +202,7 @@ mod imp {\n     #[doc(hidden)]\n     pub struct KeyInner<T> { pub inner: UnsafeCell<*mut T> }\n \n-    #[cfg(not(stage0))] impl<T> ::kinds::Sync for KeyInner<T> { }\n+    unsafe impl<T> ::kinds::Sync for KeyInner<T> { }\n \n     #[doc(hidden)]\n     impl<T> KeyInner<T> {\n@@ -224,7 +224,7 @@ mod imp {\n         pub marker: marker::InvariantType<T>,\n     }\n \n-    #[cfg(not(stage0))] impl<T> ::kinds::Sync for KeyInner<T> { }\n+    unsafe impl<T> ::kinds::Sync for KeyInner<T> { }\n \n     #[doc(hidden)]\n     impl<T> KeyInner<T> {"}, {"sha": "88dd6fce88f044337fcccb147db68127240b0e88", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -976,7 +976,7 @@ enum TestEvent {\n \n pub type MonitorMsg = (TestDesc, TestResult, Vec<u8> );\n \n-impl Send for MonitorMsg {}\n+unsafe impl Send for MonitorMsg {}\n \n fn run_tests<F>(opts: &TestOpts,\n                 tests: Vec<TestDescAndFn> ,"}, {"sha": "35783ea5899d55897a1a1e245b902f5439d9a430", "filename": "src/test/run-pass/const-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -18,7 +18,7 @@ struct Foo {\n     b: *const ()\n }\n \n-impl Sync for Foo {}\n+unsafe impl Sync for Foo {}\n \n fn foo<T>(a: T) -> T {\n     a"}, {"sha": "50e460bd1798a79c5752c4bc62c6683e8c5d9e0a", "filename": "src/test/run-pass/const-cast-ptr-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -14,7 +14,7 @@ struct TestStruct {\n     x: *const u8\n }\n \n-impl Sync for TestStruct {}\n+unsafe impl Sync for TestStruct {}\n \n static a: TestStruct = TestStruct{x: 0 as *const u8};\n "}, {"sha": "b7e9c0338dd6375fdd84d395e49ee1cce538d418", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -14,7 +14,7 @@ struct TestStruct {\n     x: *const libc::c_void\n }\n \n-impl Sync for TestStruct {}\n+unsafe impl Sync for TestStruct {}\n \n extern fn foo() {}\n const x: extern \"C\" fn() = foo;"}, {"sha": "c6847ce55dec2ca7090c97bdb090a74ceb98caa6", "filename": "src/test/run-pass/issue-13837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fissue-13837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fissue-13837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13837.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -12,7 +12,7 @@ struct TestStruct {\n     x: *const [int; 2]\n }\n \n-impl Sync for TestStruct {}\n+unsafe impl Sync for TestStruct {}\n \n static TEST_VALUE : TestStruct = TestStruct{x: 0x1234 as *const [int; 2]};\n "}, {"sha": "17dd6d69fd4003251c6bd85c2552f2937cae8a69", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -36,7 +36,7 @@ struct Wrap<T> {\n     value: T\n }\n \n-impl<T: Send> Sync for Wrap<T> {}\n+unsafe impl<T: Send> Sync for Wrap<T> {}\n \n static UNSAFE: RacyCell<int> = RacyCell(UnsafeCell{value: 1});\n static WRAPPED_UNSAFE: Wrap<&'static RacyCell<int>> = Wrap { value: &UNSAFE };"}, {"sha": "d949cab97c2292764e7805ed88afe38cd439d9c6", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -46,7 +46,7 @@ pub mod pipes {\n         payload: Option<T>\n     }\n \n-    impl<T:Send> Send for packet<T> {}\n+    unsafe impl<T:Send> Send for packet<T> {}\n \n     pub fn packet<T:Send>() -> *const packet<T> {\n         unsafe {"}, {"sha": "a8ae3f40f0ec6e43da6c85d4c3cf3bbede538d5e", "filename": "src/test/run-pass/typeck_type_placeholder_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f436f9ca2963e33cc41802370bb9c551c833970e/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs?ref=f436f9ca2963e33cc41802370bb9c551c833970e", "patch": "@@ -15,7 +15,7 @@ struct TestStruct {\n     x: *const int\n }\n \n-impl Sync for TestStruct {}\n+unsafe impl Sync for TestStruct {}\n \n static CONSTEXPR: TestStruct = TestStruct{x: &413 as *const _};\n "}]}