{"sha": "e77f5b1561092d9caa3a5423c569c1a2f8e44f99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3N2Y1YjE1NjEwOTJkOWNhYTNhNTQyM2M1NjljMWEyZjhlNDRmOTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-27T00:19:44Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-27T00:19:44Z"}, "message": "Speed up calls to get_tydesc and kill cname-redundant glue generation.", "tree": {"sha": "4da2964bf697e3b337ce9211e7b420103635171b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da2964bf697e3b337ce9211e7b420103635171b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e77f5b1561092d9caa3a5423c569c1a2f8e44f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e77f5b1561092d9caa3a5423c569c1a2f8e44f99", "html_url": "https://github.com/rust-lang/rust/commit/e77f5b1561092d9caa3a5423c569c1a2f8e44f99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e77f5b1561092d9caa3a5423c569c1a2f8e44f99/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592cd5fa309e1d6a3157c7417b67bf7503d0151f", "url": "https://api.github.com/repos/rust-lang/rust/commits/592cd5fa309e1d6a3157c7417b67bf7503d0151f", "html_url": "https://github.com/rust-lang/rust/commit/592cd5fa309e1d6a3157c7417b67bf7503d0151f"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "d14bb86c23dd4fb0d668e7461e8f263d548d115e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e77f5b1561092d9caa3a5423c569c1a2f8e44f99/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77f5b1561092d9caa3a5423c569c1a2f8e44f99/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e77f5b1561092d9caa3a5423c569c1a2f8e44f99", "patch": "@@ -1564,20 +1564,16 @@ fn get_tydesc(&@block_ctxt cx, ty.t t) -> result {\n     }\n \n     // Does it contain a type param? If so, generate a derived tydesc.\n-    let uint n_params = ty.count_ty_params(cx.fcx.lcx.ccx.tcx, t);\n \n-    if (n_params > 0u) {\n+    if (ty.type_contains_params(cx.fcx.lcx.ccx.tcx, t)) {\n+\n+        let uint n_params = ty.count_ty_params(cx.fcx.lcx.ccx.tcx, t);\n         auto tys = linearize_ty_params(cx, t);\n \n         check (n_params == _vec.len[uint](tys._0));\n         check (n_params == _vec.len[ValueRef](tys._1));\n \n-        if (!cx.fcx.lcx.ccx.tydescs.contains_key(t)) {\n-            declare_tydesc(cx.fcx.lcx, t);\n-            define_tydesc(cx.fcx.lcx, t, tys._0);\n-        }\n-\n-        auto root = cx.fcx.lcx.ccx.tydescs.get(t).tydesc;\n+        auto root = get_static_tydesc(cx, t, tys._0).tydesc;\n \n         auto tydescs = alloca(cx, T_array(T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn)),\n                                           1u /* for root*/ + n_params));\n@@ -1610,18 +1606,35 @@ fn get_tydesc(&@block_ctxt cx, ty.t t) -> result {\n     }\n \n     // Otherwise, generate a tydesc if necessary, and return it.\n-    if (!cx.fcx.lcx.ccx.tydescs.contains_key(t)) {\n-        let vec[uint] tps = vec();\n-        declare_tydesc(cx.fcx.lcx, t);\n-        define_tydesc(cx.fcx.lcx, t, tps);\n+    let vec[uint] tps = vec();\n+    ret res(cx, get_static_tydesc(cx, t, tps).tydesc);\n+}\n+\n+fn get_static_tydesc(&@block_ctxt cx,\n+                     ty.t t, vec[uint] ty_params) -> @tydesc_info {\n+    alt (cx.fcx.lcx.ccx.tydescs.find(t)) {\n+        case (some[@tydesc_info](?info)) {\n+            ret info;\n+        }\n+        case (none[@tydesc_info]) {\n+            fn simplifier(ty.t typ) -> ty.t {\n+                ret @rec(cname=none[str] with *typ);\n+            }\n+            auto f = simplifier;\n+            auto t_simplified = ty.fold_ty(cx.fcx.lcx.ccx.tcx, f, t);\n+            auto info = declare_tydesc(cx.fcx.lcx, t_simplified);\n+            cx.fcx.lcx.ccx.tydescs.insert(t, info);\n+            cx.fcx.lcx.ccx.tydescs.insert(t_simplified, info);\n+            define_tydesc(cx.fcx.lcx, t, ty_params);\n+            ret info;\n+        }\n     }\n-    ret res(cx, cx.fcx.lcx.ccx.tydescs.get(t).tydesc);\n }\n \n // Generates the declaration for (but doesn't fill in) a type descriptor. This\n // needs to be separate from make_tydesc() below, because sometimes type glue\n // functions needs to refer to their own type descriptors.\n-fn declare_tydesc(@local_ctxt cx, ty.t t) {\n+fn declare_tydesc(@local_ctxt cx, ty.t t) -> @tydesc_info {\n     auto take_glue = declare_generic_glue(cx, t, T_glue_fn(cx.ccx.tn),\n                                           \"take\");\n     auto drop_glue = declare_generic_glue(cx, t, T_glue_fn(cx.ccx.tn),\n@@ -1666,14 +1679,14 @@ fn declare_tydesc(@local_ctxt cx, ty.t t) {\n     llvm.LLVMSetLinkage(gvar, lib.llvm.LLVMInternalLinkage\n                         as llvm.Linkage);\n \n-    auto info = rec(\n+    auto info = @rec(\n         tydesc=gvar,\n         take_glue=take_glue,\n         drop_glue=drop_glue,\n         cmp_glue=cmp_glue\n     );\n \n-    ccx.tydescs.insert(t, @info);\n+    ret info;\n }\n \n tag make_generic_glue_helper_fn {"}]}