{"sha": "209eb32796c6fd56d1b378690c807cf73ce54235", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOWViMzI3OTZjNmZkNTZkMWIzNzg2OTBjODA3Y2Y3M2NlNTQyMzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T14:27:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T14:27:52Z"}, "message": "Classify name takes const patterns into account", "tree": {"sha": "a7bc47a44969c8c236289bb3750c819a510dc5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7bc47a44969c8c236289bb3750c819a510dc5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/209eb32796c6fd56d1b378690c807cf73ce54235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/209eb32796c6fd56d1b378690c807cf73ce54235", "html_url": "https://github.com/rust-lang/rust/commit/209eb32796c6fd56d1b378690c807cf73ce54235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/209eb32796c6fd56d1b378690c807cf73ce54235/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef6359950fa2f3ecb9a7d4120f01e4baeaad978", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef6359950fa2f3ecb9a7d4120f01e4baeaad978", "html_url": "https://github.com/rust-lang/rust/commit/9ef6359950fa2f3ecb9a7d4120f01e4baeaad978"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "621ab982c350f3f3104ea3dc827c9338330b08d5", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=209eb32796c6fd56d1b378690c807cf73ce54235", "patch": "@@ -30,7 +30,9 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                name_definition(&sema, &name)?\n+                let def = classify_name(&sema, &name)?.definition();\n+                let nav = def.try_to_nav(sema.db)?;\n+                vec![nav]\n             },\n             _ => return None,\n         }\n@@ -88,15 +90,6 @@ pub(crate) fn reference_definition(\n     Approximate(navs)\n }\n \n-fn name_definition(\n-    sema: &Semantics<RootDatabase>,\n-    name: &ast::Name,\n-) -> Option<Vec<NavigationTarget>> {\n-    let def = classify_name(sema, name)?;\n-    let nav = def.try_to_nav(sema.db)?;\n-    Some(vec![nav])\n-}\n-\n #[cfg(test)]\n mod tests {\n     use test_utils::{assert_eq_text, covers};"}, {"sha": "1e4fcdefb61802da83bfabe42fba84760b16e9da", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=209eb32796c6fd56d1b378690c807cf73ce54235", "patch": "@@ -156,7 +156,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 classify_name_ref(&sema, &name_ref).map(|d| (name_ref.syntax().clone(), d))\n             },\n             ast::Name(name) => {\n-                classify_name(&sema, &name).map(|d| (name.syntax().clone(), d))\n+                classify_name(&sema, &name).map(|d| (name.syntax().clone(), d.definition()))\n             },\n             _ => None,\n         }\n@@ -761,13 +761,13 @@ fn func(foo: i32) { if true { <|>foo; }; }\n     fn test_hover_through_literal_string_in_builtin_macro() {\n         check_hover_no_result(\n             r#\"\n-            //- /lib.rs            \n+            //- /lib.rs\n             #[rustc_builtin_macro]\n             macro_rules! assert {\n                 ($cond:expr) => {{ /* compiler built-in */ }};\n                 ($cond:expr,) => {{ /* compiler built-in */ }};\n                 ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\n-            }        \n+            }\n \n             fn foo() {\n                 assert!(\"hel<|>lo\");"}, {"sha": "f763013aecc8c11d1d9a6c384766daf1a5aaf835", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=209eb32796c6fd56d1b378690c807cf73ce54235", "patch": "@@ -155,7 +155,7 @@ fn find_name(\n     opt_name: Option<ast::Name>,\n ) -> Option<RangeInfo<(String, NameDefinition)>> {\n     if let Some(name) = opt_name {\n-        let def = classify_name(sema, &name)?;\n+        let def = classify_name(sema, &name)?.definition();\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, (name.text().to_string(), def)));\n     }"}, {"sha": "6312bcb836c9659a89276fbfae40ad2103a5e96a", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=209eb32796c6fd56d1b378690c807cf73ce54235", "patch": "@@ -7,7 +7,7 @@ mod tests;\n \n use hir::{Name, Semantics};\n use ra_ide_db::{\n-    defs::{classify_name, NameDefinition},\n+    defs::{classify_name, NameClass, NameDefinition},\n     RootDatabase,\n };\n use ra_prof::profile;\n@@ -169,19 +169,21 @@ fn highlight_element(\n             let name = element.into_node().and_then(ast::Name::cast).unwrap();\n             let name_kind = classify_name(sema, &name);\n \n-            if let Some(NameDefinition::Local(local)) = &name_kind {\n+            if let Some(NameClass::NameDefinition(NameDefinition::Local(local))) = &name_kind {\n                 if let Some(name) = local.name(db) {\n                     let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n                     *shadow_count += 1;\n                     binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n                 }\n             };\n \n-            let h = match name_kind {\n-                Some(name_kind) => highlight_name(db, name_kind),\n-                None => highlight_name_by_syntax(name),\n-            };\n-            h | HighlightModifier::Definition\n+            match name_kind {\n+                Some(NameClass::NameDefinition(def)) => {\n+                    highlight_name(db, def) | HighlightModifier::Definition\n+                }\n+                Some(NameClass::ConstReference(def)) => highlight_name(db, def),\n+                None => highlight_name_by_syntax(name) | HighlightModifier::Definition,\n+            }\n         }\n \n         // Highlight references like the definitions they resolve to"}, {"sha": "3079d1197a1891a6e2fe2347630e11418ddf3f3b", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=209eb32796c6fd56d1b378690c807cf73ce54235", "patch": "@@ -68,7 +68,32 @@ impl NameDefinition {\n     }\n }\n \n-pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameDefinition> {\n+pub enum NameClass {\n+    NameDefinition(NameDefinition),\n+    /// `None` in `if let None = Some(82) {}`\n+    ConstReference(NameDefinition),\n+}\n+\n+impl NameClass {\n+    pub fn into_definition(self) -> Option<NameDefinition> {\n+        match self {\n+            NameClass::NameDefinition(it) => Some(it),\n+            NameClass::ConstReference(_) => None,\n+        }\n+    }\n+\n+    pub fn definition(self) -> NameDefinition {\n+        match self {\n+            NameClass::NameDefinition(it) | NameClass::ConstReference(it) => it,\n+        }\n+    }\n+}\n+\n+pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n+    classify_name_inner(sema, name).map(NameClass::NameDefinition)\n+}\n+\n+fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameDefinition> {\n     let _p = profile(\"classify_name\");\n     let parent = name.syntax().parent()?;\n "}, {"sha": "e5fc3c47012782cdc39c1b2c4faf520917891b6b", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209eb32796c6fd56d1b378690c807cf73ce54235/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=209eb32796c6fd56d1b378690c807cf73ce54235", "patch": "@@ -59,6 +59,7 @@ impl<'a> ImportsLocator<'a> {\n         } else {\n             candidate_node\n         };\n-        classify_name(&self.sema, &ast::Name::cast(candidate_name_node)?)\n+        let name = ast::Name::cast(candidate_name_node)?;\n+        classify_name(&self.sema, &name)?.into_definition()\n     }\n }"}]}