{"sha": "d6c959c680df8e3a68932e42ed919f5664669cc7", "node_id": "C_kwDOAAsO6NoAKGQ2Yzk1OWM2ODBkZjhlM2E2ODkzMmU0MmVkOTE5ZjU2NjQ2NjljYzc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-30T22:26:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-30T22:26:32Z"}, "message": "Rollup merge of #95298 - jhorstmann:fix-double-drop-of-allocator-in-vec-into-iter, r=oli-obk\n\nFix double drop of allocator in IntoIter impl of Vec\n\nFixes #95269\n\nThe `drop` impl of `IntoIter` reconstructs a `RawVec` from `buf`, `cap` and `alloc`, when that `RawVec` is dropped it also drops the allocator. To avoid dropping the allocator twice we wrap it in `ManuallyDrop` in the `InttoIter` struct.\n\nNote this is my first contribution to the standard library, so I might be missing some details or a better way to solve this.", "tree": {"sha": "367e984f66e6d0b2253cb0a546a9f2b0a757e2c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367e984f66e6d0b2253cb0a546a9f2b0a757e2c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c959c680df8e3a68932e42ed919f5664669cc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRNkZCRBK7hj4Ov3rIwAAsKMIADxNh0PFId3XBGnht2BONYry\n5TYkrKAnzS1lYXqNGYNt4OpUlEZ51LXySjo30SmM6p2jdZIDXI9QiPAXJNFUW98H\nphwD9Y09wlTNRmMROgPN3IRbpW8UMLVTgetLwCDvWuvsoGTInKqIQT0obE1JtHia\nmb28iUz9xHGc49ZlHWXU0Y71sl+04m93CTDF7mv2qxFOqpUAK2qyLSuxGSQVNa5P\n01wleSvyUEm61H9U9l9Ph2NgNIVYcbAIVZkpjfHZ/B3WngLkcZLf5sIj/HSQItbI\n5Vt1i8MF7g0T3nLTUUDwizktouA81rFsqezMIdU8KNFagrTuAndR3rRz0HMSeTg=\n=Sryi\n-----END PGP SIGNATURE-----\n", "payload": "tree 367e984f66e6d0b2253cb0a546a9f2b0a757e2c9\nparent 86388f617178875af0b6a585479efa4f09abd630\nparent d9a438dc73de6ff146ae3e6bc4050b7cea41b09e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648679192 +0200\ncommitter GitHub <noreply@github.com> 1648679192 +0200\n\nRollup merge of #95298 - jhorstmann:fix-double-drop-of-allocator-in-vec-into-iter, r=oli-obk\n\nFix double drop of allocator in IntoIter impl of Vec\n\nFixes #95269\n\nThe `drop` impl of `IntoIter` reconstructs a `RawVec` from `buf`, `cap` and `alloc`, when that `RawVec` is dropped it also drops the allocator. To avoid dropping the allocator twice we wrap it in `ManuallyDrop` in the `InttoIter` struct.\n\nNote this is my first contribution to the standard library, so I might be missing some details or a better way to solve this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c959c680df8e3a68932e42ed919f5664669cc7", "html_url": "https://github.com/rust-lang/rust/commit/d6c959c680df8e3a68932e42ed919f5664669cc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c959c680df8e3a68932e42ed919f5664669cc7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86388f617178875af0b6a585479efa4f09abd630", "url": "https://api.github.com/repos/rust-lang/rust/commits/86388f617178875af0b6a585479efa4f09abd630", "html_url": "https://github.com/rust-lang/rust/commit/86388f617178875af0b6a585479efa4f09abd630"}, {"sha": "d9a438dc73de6ff146ae3e6bc4050b7cea41b09e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a438dc73de6ff146ae3e6bc4050b7cea41b09e", "html_url": "https://github.com/rust-lang/rust/commit/d9a438dc73de6ff146ae3e6bc4050b7cea41b09e"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "03c532bb69769d13e5fddf5dc3389d4ec6b7bc53", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6c959c680df8e3a68932e42ed919f5664669cc7/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c959c680df8e3a68932e42ed919f5664669cc7/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=d6c959c680df8e3a68932e42ed919f5664669cc7", "patch": "@@ -8,7 +8,8 @@ use core::iter::{\n     FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccessNoCoerce,\n };\n use core::marker::PhantomData;\n-use core::mem::{self};\n+use core::mem::{self, ManuallyDrop};\n+use core::ops::Deref;\n use core::ptr::{self, NonNull};\n use core::slice::{self};\n \n@@ -32,7 +33,9 @@ pub struct IntoIter<\n     pub(super) buf: NonNull<T>,\n     pub(super) phantom: PhantomData<T>,\n     pub(super) cap: usize,\n-    pub(super) alloc: A,\n+    // the drop impl reconstructs a RawVec from buf, cap and alloc\n+    // to avoid dropping the allocator twice we need to wrap it into ManuallyDrop\n+    pub(super) alloc: ManuallyDrop<A>,\n     pub(super) ptr: *const T,\n     pub(super) end: *const T,\n }\n@@ -295,11 +298,11 @@ where\n impl<T: Clone, A: Allocator + Clone> Clone for IntoIter<T, A> {\n     #[cfg(not(test))]\n     fn clone(&self) -> Self {\n-        self.as_slice().to_vec_in(self.alloc.clone()).into_iter()\n+        self.as_slice().to_vec_in(self.alloc.deref().clone()).into_iter()\n     }\n     #[cfg(test)]\n     fn clone(&self) -> Self {\n-        crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()\n+        crate::slice::to_vec(self.as_slice(), self.alloc.deref().clone()).into_iter()\n     }\n }\n \n@@ -311,8 +314,8 @@ unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {\n         impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {\n             fn drop(&mut self) {\n                 unsafe {\n-                    // `IntoIter::alloc` is not used anymore after this\n-                    let alloc = ptr::read(&self.0.alloc);\n+                    // `IntoIter::alloc` is not used anymore after this and will be dropped by RawVec\n+                    let alloc = ManuallyDrop::take(&mut self.0.alloc);\n                     // RawVec handles deallocation\n                     let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);\n                 }"}, {"sha": "9773ec023377f46999eebc7ab26219cf699b4c4b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c959c680df8e3a68932e42ed919f5664669cc7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c959c680df8e3a68932e42ed919f5664669cc7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=d6c959c680df8e3a68932e42ed919f5664669cc7", "patch": "@@ -2579,7 +2579,7 @@ impl<T, A: Allocator> IntoIterator for Vec<T, A> {\n     fn into_iter(self) -> IntoIter<T, A> {\n         unsafe {\n             let mut me = ManuallyDrop::new(self);\n-            let alloc = ptr::read(me.allocator());\n+            let alloc = ManuallyDrop::new(ptr::read(me.allocator()));\n             let begin = me.as_mut_ptr();\n             let end = if mem::size_of::<T>() == 0 {\n                 arith_offset(begin as *const i8, me.len() as isize) as *const T"}, {"sha": "19e39ebf910b5aacef57ac9864b801dba83114fa", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6c959c680df8e3a68932e42ed919f5664669cc7/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c959c680df8e3a68932e42ed919f5664669cc7/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=d6c959c680df8e3a68932e42ed919f5664669cc7", "patch": "@@ -1,3 +1,6 @@\n+use core::alloc::{Allocator, Layout};\n+use core::ptr::NonNull;\n+use std::alloc::System;\n use std::assert_matches::assert_matches;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -991,6 +994,31 @@ fn test_into_iter_advance_by() {\n     assert_eq!(i.len(), 0);\n }\n \n+#[test]\n+fn test_into_iter_drop_allocator() {\n+    struct ReferenceCountedAllocator<'a>(DropCounter<'a>);\n+\n+    unsafe impl Allocator for ReferenceCountedAllocator<'_> {\n+        fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, core::alloc::AllocError> {\n+            System.allocate(layout)\n+        }\n+\n+        unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n+            System.deallocate(ptr, layout)\n+        }\n+    }\n+\n+    let mut drop_count = 0;\n+\n+    let allocator = ReferenceCountedAllocator(DropCounter { count: &mut drop_count });\n+    let _ = Vec::<u32, _>::new_in(allocator);\n+    assert_eq!(drop_count, 1);\n+\n+    let allocator = ReferenceCountedAllocator(DropCounter { count: &mut drop_count });\n+    let _ = Vec::<u32, _>::new_in(allocator).into_iter();\n+    assert_eq!(drop_count, 2);\n+}\n+\n #[test]\n fn test_from_iter_specialization() {\n     let src: Vec<usize> = vec![0usize; 1];"}]}