{"sha": "4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMmQzZmM1ZGFkZjg5NGE4YWQ3MDlhNTg2MGE1NDlmMmMwYjEwMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-13T00:14:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-13T00:14:11Z"}, "message": "Auto merge of #47804 - retep007:recursive-requirements, r=pnkfelix\n\nOptimized error reporting for recursive requirements #47720\n\nFixes #47720", "tree": {"sha": "083692288e797b23cbc748b69f0ed20a292fabbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/083692288e797b23cbc748b69f0ed20a292fabbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "html_url": "https://github.com/rust-lang/rust/commit/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16362c737fe740f630ada06349fa9004e2a51bb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/16362c737fe740f630ada06349fa9004e2a51bb7", "html_url": "https://github.com/rust-lang/rust/commit/16362c737fe740f630ada06349fa9004e2a51bb7"}, {"sha": "80b8c808baaba629e73440abf52ee4bbfdb5c0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b8c808baaba629e73440abf52ee4bbfdb5c0f8", "html_url": "https://github.com/rust-lang/rust/commit/80b8c808baaba629e73440abf52ee4bbfdb5c0f8"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "214d8ec325f2b16ce72bb39953f941b921471a91", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "patch": "@@ -1224,13 +1224,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         self.note_obligation_cause_code(err,\n                                         &obligation.predicate,\n-                                        &obligation.cause.code);\n+                                        &obligation.cause.code,\n+                                        &mut vec![]);\n     }\n \n     fn note_obligation_cause_code<T>(&self,\n                                      err: &mut DiagnosticBuilder,\n                                      predicate: &T,\n-                                     cause_code: &ObligationCauseCode<'tcx>)\n+                                     cause_code: &ObligationCauseCode<'tcx>,\n+                                     obligated_types: &mut Vec<&ty::TyS<'tcx>>)\n         where T: fmt::Display\n     {\n         let tcx = self.tcx;\n@@ -1326,12 +1328,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n             ObligationCauseCode::BuiltinDerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_type_vars_if_possible(&data.parent_trait_ref);\n-                err.note(&format!(\"required because it appears within the type `{}`\",\n-                                  parent_trait_ref.0.self_ty()));\n+                let ty = parent_trait_ref.0.self_ty();\n+                err.note(&format!(\"required because it appears within the type `{}`\", ty));\n+                obligated_types.push(ty);\n+\n                 let parent_predicate = parent_trait_ref.to_predicate();\n-                self.note_obligation_cause_code(err,\n-                                                &parent_predicate,\n-                                                &data.parent_code);\n+                if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n+                    self.note_obligation_cause_code(err,\n+                                                    &parent_predicate,\n+                                                    &data.parent_code,\n+                                                    obligated_types);\n+                }\n             }\n             ObligationCauseCode::ImplDerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_type_vars_if_possible(&data.parent_trait_ref);\n@@ -1341,8 +1348,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                              parent_trait_ref.0.self_ty()));\n                 let parent_predicate = parent_trait_ref.to_predicate();\n                 self.note_obligation_cause_code(err,\n-                                                &parent_predicate,\n-                                                &data.parent_code);\n+                                            &parent_predicate,\n+                                            &data.parent_code,\n+                                            obligated_types);\n             }\n             ObligationCauseCode::CompareImplMethodObligation { .. } => {\n                 err.note(\n@@ -1361,6 +1369,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         err.help(&format!(\"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n                           suggested_limit));\n     }\n+\n+    fn is_recursive_obligation(&self,\n+                                   obligated_types: &mut Vec<&ty::TyS<'tcx>>,\n+                                   cause_code: &ObligationCauseCode<'tcx>) -> bool {\n+        if let ObligationCauseCode::BuiltinDerivedObligation(ref data) = cause_code {\n+            let parent_trait_ref = self.resolve_type_vars_if_possible(&data.parent_trait_ref);\n+            for obligated_type in obligated_types {\n+                if obligated_type == &parent_trait_ref.0.self_ty() {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n \n enum ArgKind {"}, {"sha": "2c0f0338b2d15a7aed9b98f0b3482f3fe326e6a1", "filename": "src/test/ui/recursive-requirements.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/src%2Ftest%2Fui%2Frecursive-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/src%2Ftest%2Fui%2Frecursive-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursive-requirements.rs?ref=4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::PhantomData;\n+\n+struct AssertSync<T: Sync>(PhantomData<T>);\n+\n+pub struct Foo {\n+    bar: *const Bar,\n+    phantom: PhantomData<Bar>,\n+}\n+\n+pub struct Bar {\n+    foo: *const Foo,\n+    phantom: PhantomData<Foo>,\n+}\n+\n+fn main() {\n+    let _: AssertSync<Foo> = unimplemented!(); //~ ERROR E0275\n+}"}, {"sha": "8cf2c65b1e25c493c65f9e40dcae6d3d0a1925be", "filename": "src/test/ui/recursive-requirements.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/src%2Ftest%2Fui%2Frecursive-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/src%2Ftest%2Fui%2Frecursive-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursive-requirements.stderr?ref=4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "patch": "@@ -0,0 +1,14 @@\n+error[E0275]: overflow evaluating the requirement `Foo: std::marker::Sync`\n+  --> $DIR/recursive-requirements.rs:26:12\n+   |\n+26 |     let _: AssertSync<Foo> = unimplemented!(); //~ ERROR E0275\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n+   = note: required because it appears within the type `std::marker::PhantomData<Foo>`\n+   = note: required because it appears within the type `Bar`\n+   = note: required because it appears within the type `std::marker::PhantomData<Bar>`\n+   = note: required because it appears within the type `Foo`\n+\n+error: aborting due to previous error\n+"}]}