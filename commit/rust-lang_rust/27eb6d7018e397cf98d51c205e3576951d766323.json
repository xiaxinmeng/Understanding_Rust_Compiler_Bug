{"sha": "27eb6d7018e397cf98d51c205e3576951d766323", "node_id": "C_kwDOAAsO6NoAKDI3ZWI2ZDcwMThlMzk3Y2Y5OGQ1MWMyMDVlMzU3Njk1MWQ3NjYzMjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-04T20:00:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-04T20:00:41Z"}, "message": "Auto merge of #98627 - RalfJung:interpret-arith, r=lcnr\n\ninterpret: don't rely on ScalarPair for overflowed arithmetic\n\nThis is for https://github.com/rust-lang/rust/pull/97861.\nCc `@eddyb`\n\nI would like to avoid making this depend on `dest.layout.abi` to avoid a branch that we are not usually covering both sides of. Though OTOH this seems like fairly straight-forward code. But let's benchmark this option first to see how bad that extra `force_allocation` really is.", "tree": {"sha": "9a3724de806f63be8cbfc170e856542db8e5f4ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a3724de806f63be8cbfc170e856542db8e5f4ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27eb6d7018e397cf98d51c205e3576951d766323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27eb6d7018e397cf98d51c205e3576951d766323", "html_url": "https://github.com/rust-lang/rust/commit/27eb6d7018e397cf98d51c205e3576951d766323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27eb6d7018e397cf98d51c205e3576951d766323/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17581a79adb7b1c064222defa94a5a3d79f5bfb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/17581a79adb7b1c064222defa94a5a3d79f5bfb2", "html_url": "https://github.com/rust-lang/rust/commit/17581a79adb7b1c064222defa94a5a3d79f5bfb2"}, {"sha": "0850bad94dab9499a6dde0f303a73220a21a2f71", "url": "https://api.github.com/repos/rust-lang/rust/commits/0850bad94dab9499a6dde0f303a73220a21a2f71", "html_url": "https://github.com/rust-lang/rust/commit/0850bad94dab9499a6dde0f303a73220a21a2f71"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "dec7fa8c4aa96f635ce18964061156a7bd7d1e30", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/27eb6d7018e397cf98d51c205e3576951d766323/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27eb6d7018e397cf98d51c205e3576951d766323/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=27eb6d7018e397cf98d51c205e3576951d766323", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_middle::ty::{self, FloatTy, Ty};\n+use rustc_target::abi::Abi;\n \n use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};\n \n@@ -25,8 +26,22 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             \"type mismatch for result of {:?}\",\n             op,\n         );\n-        let val = Immediate::ScalarPair(val.into(), Scalar::from_bool(overflowed).into());\n-        self.write_immediate(val, dest)\n+        if let Abi::ScalarPair(..) = dest.layout.abi {\n+            // We can use the optimized path and avoid `place_field` (which might do\n+            // `force_allocation`).\n+            let pair = Immediate::ScalarPair(val.into(), Scalar::from_bool(overflowed).into());\n+            self.write_immediate(pair, dest)?;\n+        } else {\n+            assert!(self.tcx.sess.opts.debugging_opts.randomize_layout);\n+            // With randomized layout, `(int, bool)` might cease to be a `ScalarPair`, so we have to\n+            // do a component-wise write here. This code path is slower than the above because\n+            // `place_field` will have to `force_allocate` locals here.\n+            let val_field = self.place_field(&dest, 0)?;\n+            self.write_scalar(val, &val_field)?;\n+            let overflowed_field = self.place_field(&dest, 1)?;\n+            self.write_scalar(Scalar::from_bool(overflowed), &overflowed_field)?;\n+        }\n+        Ok(())\n     }\n \n     /// Applies the binary operation `op` to the arguments and writes the result to the"}]}