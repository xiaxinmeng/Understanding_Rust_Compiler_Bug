{"sha": "eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNWZiMjFiZDU4NzFhMGRkM2JiN2JjMTM1YmMxYTA4M2FkMzIyOTI=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-06-27T23:15:29Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-07-02T11:53:29Z"}, "message": "Fix the test failure, add comment, and refactor a little bit", "tree": {"sha": "53d595f50db5a07a4deeb7f080e5f056c6d9f176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53d595f50db5a07a4deeb7f080e5f056c6d9f176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292", "html_url": "https://github.com/rust-lang/rust/commit/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da887074fc70a9f8d2afec8dbe6e2eeea6fc1406", "url": "https://api.github.com/repos/rust-lang/rust/commits/da887074fc70a9f8d2afec8dbe6e2eeea6fc1406", "html_url": "https://github.com/rust-lang/rust/commit/da887074fc70a9f8d2afec8dbe6e2eeea6fc1406"}], "stats": {"total": 143, "additions": 39, "deletions": 104}, "files": [{"sha": "46467cd3c3e05204277ee9a16caa01a99dc40117", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292", "patch": "@@ -160,11 +160,6 @@ pub mod array;\n pub mod sync;\n pub mod cell;\n pub mod char;\n-// FIXME: remove when SNAP\n-#[cfg(stage0)]\n-#[path = \"panicking_stage0.rs\"]\n-pub mod panicking;\n-#[cfg(not(stage0))]\n pub mod panicking;\n pub mod iter;\n pub mod option;"}, {"sha": "70820dce5f9409013daf6092959e3a1bc862fb95", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292", "patch": "@@ -19,7 +19,7 @@ macro_rules! panic {\n     ($msg:expr) => ({\n         static _MSG_FILE_LINE_COL: (&'static str, &'static str, u32, u32) =\n             ($msg, file!(), line!(), column!());\n-        $crate::panicking::panic_new(&_MSG_FILE_LINE_COL)\n+        $crate::panicking::panic(&_MSG_FILE_LINE_COL)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // The leading _'s are to avoid dead code warnings if this is\n@@ -28,7 +28,7 @@ macro_rules! panic {\n         // `#[forbid(dead_code)]` and which cannot be overridden.\n         static _MSG_FILE_LINE_COL: (&'static str, u32, u32) =\n             (file!(), line!(), column!());\n-        $crate::panicking::panic_fmt_new(format_args!($fmt, $($arg)*), &_MSG_FILE_LINE_COL)\n+        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_MSG_FILE_LINE_COL)\n     });\n }\n "}, {"sha": "eae33cf0422e58c610575ae9b697297ab9496e16", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292", "patch": "@@ -38,13 +38,8 @@\n \n use fmt;\n \n-#[cold] #[inline(never)]\n-pub fn panic_new(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n-    panic(&expr_file_line_col)\n-}\n-\n #[cold] #[inline(never)] // this is the slow path, always\n-#[lang = \"panic\"]\n+#[cfg_attr(not(stage0), lang = \"panic\")]\n pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n     // reduce size overhead. The format_args! macro uses str's Display trait to\n@@ -56,17 +51,33 @@ pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line, col))\n }\n \n+// FIXME: remove when SNAP\n #[cold] #[inline(never)]\n-#[lang = \"panic_bounds_check\"]\n+#[cfg(stage0)]\n+#[lang = \"panic\"]\n+pub fn panic_old(expr_file_line: &(&'static str, &'static str, u32)) -> ! {\n+    let (expr, file, line) = *expr_file_line;\n+    let expr_file_line_col = (expr, file, line, 0);\n+    panic(&expr_file_line_col)\n+}\n+\n+#[cold] #[inline(never)]\n+#[cfg_attr(not(stage0), lang = \"panic_bounds_check\")]\n fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                      index: usize, len: usize) -> ! {\n     panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n                            len, index), file_line_col)\n }\n \n+// FIXME: remove when SNAP\n #[cold] #[inline(never)]\n-pub fn panic_fmt_new(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n-    panic_fmt(fmt, &file_line_col)\n+#[cfg(stage0)]\n+#[lang = \"panic_bounds_check\"]\n+fn panic_bounds_check_old(file_line: &(&'static str, u32),\n+                     index: usize, len: usize) -> ! {\n+    let (file, line) = *file_line;\n+    panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n+                           len, index), &(file, line, 0))\n }\n \n #[cold] #[inline(never)]"}, {"sha": "3506f6a93bc0daf9118645a7e28ade18617252de", "filename": "src/libcore/panicking_stage0.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/da887074fc70a9f8d2afec8dbe6e2eeea6fc1406/src%2Flibcore%2Fpanicking_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da887074fc70a9f8d2afec8dbe6e2eeea6fc1406/src%2Flibcore%2Fpanicking_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking_stage0.rs?ref=da887074fc70a9f8d2afec8dbe6e2eeea6fc1406", "patch": "@@ -1,86 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Panic support for libcore\n-//!\n-//! The core library cannot define panicking, but it does *declare* panicking. This\n-//! means that the functions inside of libcore are allowed to panic, but to be\n-//! useful an upstream crate must define panicking for libcore to use. The current\n-//! interface for panicking is:\n-//!\n-//! ```\n-//! # use std::fmt;\n-//! fn panic_impl(fmt: fmt::Arguments, file_line: &(&'static str, u32)) -> !\n-//! # { loop {} }\n-//! ```\n-//!\n-//! This definition allows for panicking with any general message, but it does not\n-//! allow for failing with a `Box<Any>` value. The reason for this is that libcore\n-//! is not allowed to allocate.\n-//!\n-//! This module contains a few other panicking functions, but these are just the\n-//! necessary lang items for the compiler. All panics are funneled through this\n-//! one function. Currently, the actual symbol is declared in the standard\n-//! library, but the location of this may change over time.\n-\n-#![allow(dead_code, missing_docs)]\n-#![unstable(feature = \"core_panic\",\n-            reason = \"internal details of the implementation of the `panic!` \\\n-                      and related macros\",\n-            issue = \"0\")]\n-\n-use fmt;\n-\n-#[cold] #[inline(never)]\n-pub fn panic_new(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n-    let (expr, file, line, _) = *expr_file_line_col;\n-    let expr_file_line = (expr, file, line);\n-    panic(&expr_file_line)\n-}\n-\n-#[cold] #[inline(never)] // this is the slow path, always\n-#[lang = \"panic\"]\n-pub fn panic(expr_file_line: &(&'static str, &'static str, u32)) -> ! {\n-    // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n-    // reduce size overhead. The format_args! macro uses str's Display trait to\n-    // write expr, which calls Formatter::pad, which must accommodate string\n-    // truncation and padding (even though none is used here). Using\n-    // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n-    // output binary, saving up to a few kilobytes.\n-    let (expr, file, line) = *expr_file_line;\n-    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line))\n-}\n-\n-#[cold] #[inline(never)]\n-#[lang = \"panic_bounds_check\"]\n-fn panic_bounds_check(file_line: &(&'static str, u32),\n-                     index: usize, len: usize) -> ! {\n-    panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n-                           len, index), file_line)\n-}\n-\n-#[cold] #[inline(never)]\n-pub fn panic_fmt_new(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n-    let (file, line, _) = *file_line_col;\n-    let file_line = (file, line);\n-    panic_fmt(fmt, &file_line)\n-}\n-\n-#[cold] #[inline(never)]\n-pub fn panic_fmt(fmt: fmt::Arguments, file_line: &(&'static str, u32)) -> ! {\n-    #[allow(improper_ctypes)]\n-    extern {\n-        #[lang = \"panic_fmt\"]\n-        #[unwind]\n-        fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: u32, col: u32) -> !;\n-    }\n-    let (file, line) = *file_line;\n-    unsafe { panic_impl(fmt, file, line, 0) }\n-}"}, {"sha": "494376b831ed6c87076aa525a23030bc1130641b", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=eb5fb21bd5871a0dd3bb7bc135bc1a083ad32292", "patch": "@@ -315,6 +315,7 @@ impl<'a> Location<'a> {\n     /// # Examples\n     ///\n     /// ```should_panic\n+    /// #![feature(panic_col)]\n     /// use std::panic;\n     ///\n     /// panic::set_hook(Box::new(|panic_info| {\n@@ -327,7 +328,7 @@ impl<'a> Location<'a> {\n     ///\n     /// panic!(\"Normal panic\");\n     /// ```\n-    #[unstable(feature = \"panic_col\", issue = \"42939\")]\n+    #[unstable(feature = \"panic_col\", reason = \"recently added\", issue = \"42939\")]\n     pub fn column(&self) -> u32 {\n         self.col\n     }\n@@ -520,7 +521,21 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments,\n     begin_panic_new(s, file_line_col)\n }\n \n-// FIXME: remove begin_panic and rename begin_panic_new to begin_panic when SNAP\n+// FIXME: In PR #42938, we have added the column as info passed to the panic\n+// handling code. For this, we want to break the ABI of begin_panic.\n+// This is not possible to do directly, as the stage0 compiler is hardcoded\n+// to emit a call to begin_panic in src/libsyntax/ext/build.rs, only\n+// with the file and line number being passed, but not the colum number.\n+// By changing the compiler source, we can only affect behaviour of higher\n+// stages. We need to perform the switch over two stage0 replacements, using\n+// a temporary function begin_panic_new while performing the switch:\n+// 0. Right now, we tell stage1 onward to emit a call to begin_panic_new.\n+// 1. In the first SNAP, stage0 calls begin_panic_new with the new ABI,\n+//    begin_panic stops being used. Now we can change begin_panic to\n+//    the new ABI, and start emitting calls to begin_panic in higher\n+//    stages again, this time with the new ABI.\n+// 2. After the second SNAP, stage0 calls begin_panic with the new ABI,\n+//    and we can remove the temporary begin_panic_new function.\n \n /// This is the entry point of panicking for panic!() and assert!().\n #[unstable(feature = \"libstd_sys_internals\","}]}