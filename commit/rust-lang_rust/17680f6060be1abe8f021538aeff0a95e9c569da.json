{"sha": "17680f6060be1abe8f021538aeff0a95e9c569da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjgwZjYwNjBiZTFhYmU4ZjAyMTUzOGFlZmYwYTk1ZTljNTY5ZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T13:02:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T13:02:33Z"}, "message": "More decoupling", "tree": {"sha": "707e3d2946429cdbe0c4536befcf9faef86ea572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/707e3d2946429cdbe0c4536befcf9faef86ea572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17680f6060be1abe8f021538aeff0a95e9c569da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17680f6060be1abe8f021538aeff0a95e9c569da", "html_url": "https://github.com/rust-lang/rust/commit/17680f6060be1abe8f021538aeff0a95e9c569da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17680f6060be1abe8f021538aeff0a95e9c569da/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d569869f7a8c7a4c23b14fadbef63d4dbc949bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d569869f7a8c7a4c23b14fadbef63d4dbc949bcd", "html_url": "https://github.com/rust-lang/rust/commit/d569869f7a8c7a4c23b14fadbef63d4dbc949bcd"}], "stats": {"total": 60, "additions": 27, "deletions": 33}, "files": [{"sha": "0e987240a66f7a44f4cd91cb6f241d4ab6a2eb93", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17680f6060be1abe8f021538aeff0a95e9c569da/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17680f6060be1abe8f021538aeff0a95e9c569da/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=17680f6060be1abe8f021538aeff0a95e9c569da", "patch": "@@ -618,7 +618,7 @@ impl Function {\n     }\n \n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(self.into())\n+        db.infer(self.id.into())\n     }\n \n     /// The containing impl block, if this is a method.\n@@ -672,7 +672,7 @@ impl Const {\n     }\n \n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(self.into())\n+        db.infer(self.id.into())\n     }\n \n     /// The containing impl block, if this is a type alias.\n@@ -715,7 +715,7 @@ impl Static {\n     }\n \n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(self.into())\n+        db.infer(self.id.into())\n     }\n }\n \n@@ -908,9 +908,9 @@ impl Local {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        let infer = db.infer(self.parent);\n-        let ty = infer[self.pat_id].clone();\n         let def = DefWithBodyId::from(self.parent);\n+        let infer = db.infer(def);\n+        let ty = infer[self.pat_id].clone();\n         let resolver = def.resolver(db);\n         let krate = def.module(db).krate;\n         let environment = TraitEnvironment::lower(db, &resolver);"}, {"sha": "e192c8f47009b0a1d78c72c9c42934f36b112b82", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/17680f6060be1abe8f021538aeff0a95e9c569da/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17680f6060be1abe8f021538aeff0a95e9c569da/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=17680f6060be1abe8f021538aeff0a95e9c569da", "patch": "@@ -2,18 +2,15 @@\n \n use std::sync::Arc;\n \n-use hir_def::{GenericDefId, ImplId, LocalStructFieldId, TraitId, VariantId};\n+use hir_def::{DefWithBodyId, GenericDefId, ImplId, LocalStructFieldId, TraitId, VariantId};\n use ra_arena::map::ArenaMap;\n use ra_db::{salsa, CrateId};\n \n-use crate::{\n-    ty::{\n-        method_resolution::CrateImplBlocks,\n-        traits::{AssocTyValue, Impl},\n-        CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, Ty, TyDefId, TypeCtor,\n-        ValueTyDefId,\n-    },\n-    DefWithBody,\n+use crate::ty::{\n+    method_resolution::CrateImplBlocks,\n+    traits::{AssocTyValue, Impl},\n+    CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, Ty, TyDefId, TypeCtor,\n+    ValueTyDefId,\n };\n \n pub use hir_def::db::{\n@@ -32,7 +29,7 @@ pub use hir_expand::db::{\n #[salsa::requires(salsa::Database)]\n pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::infer_query)]\n-    fn infer(&self, def: DefWithBody) -> Arc<InferenceResult>;\n+    fn infer(&self, def: DefWithBodyId) -> Arc<InferenceResult>;\n \n     #[salsa::invoke(crate::ty::ty_query)]\n     fn ty(&self, def: TyDefId) -> Ty;"}, {"sha": "c85e38a0da252a1325da4a1f7a1ad129b69ed6e4", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17680f6060be1abe8f021538aeff0a95e9c569da/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17680f6060be1abe8f021538aeff0a95e9c569da/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=17680f6060be1abe8f021538aeff0a95e9c569da", "patch": "@@ -168,7 +168,7 @@ impl SourceAnalyzer {\n                 resolver,\n                 body_owner: Some(def),\n                 body_source_map: Some(source_map),\n-                infer: Some(db.infer(def)),\n+                infer: Some(db.infer(def.into())),\n                 scopes: Some(scopes),\n                 file_id: node.file_id,\n             }\n@@ -297,13 +297,13 @@ impl SourceAnalyzer {\n         if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n             let expr_id = self.expr_id(&path_expr.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_expr(expr_id) {\n-                return Some(PathResolution::AssocItem(assoc));\n+                return Some(PathResolution::AssocItem(assoc.into()));\n             }\n         }\n         if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n             let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n-                return Some(PathResolution::AssocItem(assoc));\n+                return Some(PathResolution::AssocItem(assoc.into()));\n             }\n         }\n         // This must be a normal source file rather than macro file."}, {"sha": "1eca4883d4277f21af75e8320816fb1525b27362", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/17680f6060be1abe8f021538aeff0a95e9c569da/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17680f6060be1abe8f021538aeff0a95e9c569da/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=17680f6060be1abe8f021538aeff0a95e9c569da", "patch": "@@ -41,10 +41,7 @@ use super::{\n     ApplicationTy, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n     TypeWalk, Uncertain,\n };\n-use crate::{\n-    db::HirDatabase, ty::infer::diagnostics::InferenceDiagnostic, AssocItem, DefWithBody,\n-    VariantDef,\n-};\n+use crate::{db::HirDatabase, ty::infer::diagnostics::InferenceDiagnostic, VariantDef};\n \n macro_rules! ty_app {\n     ($ctor:pat, $param:pat) => {\n@@ -62,15 +59,15 @@ mod pat;\n mod coerce;\n \n /// The entry point of type inference.\n-pub fn infer_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResult> {\n+pub fn infer_query(db: &impl HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n     let _p = profile(\"infer_query\");\n-    let resolver = DefWithBodyId::from(def).resolver(db);\n+    let resolver = def.resolver(db);\n     let mut ctx = InferenceContext::new(db, def, resolver);\n \n-    match &def {\n-        DefWithBody::Const(c) => ctx.collect_const(&db.const_data(c.id)),\n-        DefWithBody::Function(f) => ctx.collect_fn(&db.function_data(f.id)),\n-        DefWithBody::Static(s) => ctx.collect_const(&db.static_data(s.id)),\n+    match def {\n+        DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n+        DefWithBodyId::FunctionId(f) => ctx.collect_fn(&db.function_data(f)),\n+        DefWithBodyId::StaticId(s) => ctx.collect_const(&db.static_data(s)),\n     }\n \n     ctx.infer_body();\n@@ -129,7 +126,7 @@ pub struct InferenceResult {\n     /// For each struct literal, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantDef>,\n     /// For each associated item record what it resolves to\n-    assoc_resolutions: FxHashMap<ExprOrPatId, AssocItem>,\n+    assoc_resolutions: FxHashMap<ExprOrPatId, AssocItemId>,\n     diagnostics: Vec<InferenceDiagnostic>,\n     pub(super) type_of_expr: ArenaMap<ExprId, Ty>,\n     pub(super) type_of_pat: ArenaMap<PatId, Ty>,\n@@ -152,10 +149,10 @@ impl InferenceResult {\n     pub fn variant_resolution_for_pat(&self, id: PatId) -> Option<VariantDef> {\n         self.variant_resolutions.get(&id.into()).copied()\n     }\n-    pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<AssocItem> {\n+    pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<AssocItemId> {\n         self.assoc_resolutions.get(&id.into()).copied()\n     }\n-    pub fn assoc_resolutions_for_pat(&self, id: PatId) -> Option<AssocItem> {\n+    pub fn assoc_resolutions_for_pat(&self, id: PatId) -> Option<AssocItemId> {\n         self.assoc_resolutions.get(&id.into()).copied()\n     }\n     pub fn type_mismatch_for_expr(&self, expr: ExprId) -> Option<&TypeMismatch> {\n@@ -191,7 +188,7 @@ impl Index<PatId> for InferenceResult {\n #[derive(Clone, Debug)]\n struct InferenceContext<'a, D: HirDatabase> {\n     db: &'a D,\n-    owner: DefWithBody,\n+    owner: DefWithBodyId,\n     body: Arc<Body>,\n     resolver: Resolver,\n     var_unification_table: InPlaceUnificationTable<TypeVarId>,\n@@ -209,7 +206,7 @@ struct InferenceContext<'a, D: HirDatabase> {\n }\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n-    fn new(db: &'a D, owner: DefWithBody, resolver: Resolver) -> Self {\n+    fn new(db: &'a D, owner: DefWithBodyId, resolver: Resolver) -> Self {\n         InferenceContext {\n             result: InferenceResult::default(),\n             var_unification_table: InPlaceUnificationTable::new(),"}]}