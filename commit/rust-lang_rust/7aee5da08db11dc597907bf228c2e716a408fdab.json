{"sha": "7aee5da08db11dc597907bf228c2e716a408fdab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZWU1ZGEwOGRiMTFkYzU5NzkwN2JmMjI4YzJlNzE2YTQwOGZkYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T11:38:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T11:38:06Z"}, "message": "auto merge of #7254 : Blei/rust/intrinsic-overhaul, r=cmr\n\nThis sets the `get_tydesc()` return type correctly and removes the intrinsic module. See #3730, #3475.\r\n\r\nUpdate: this now also removes the unused shape fields in tydescs.", "tree": {"sha": "7217207f8ec916aca96034f94d64a15746e22f79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7217207f8ec916aca96034f94d64a15746e22f79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aee5da08db11dc597907bf228c2e716a408fdab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aee5da08db11dc597907bf228c2e716a408fdab", "html_url": "https://github.com/rust-lang/rust/commit/7aee5da08db11dc597907bf228c2e716a408fdab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aee5da08db11dc597907bf228c2e716a408fdab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b11346bb5d2659313eb96f3108137f01239785c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b11346bb5d2659313eb96f3108137f01239785c9", "html_url": "https://github.com/rust-lang/rust/commit/b11346bb5d2659313eb96f3108137f01239785c9"}, {"sha": "f8ae3cdcaacb29c7b56e546a9ddab1396b615f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ae3cdcaacb29c7b56e546a9ddab1396b615f8f", "html_url": "https://github.com/rust-lang/rust/commit/f8ae3cdcaacb29c7b56e546a9ddab1396b615f8f"}], "stats": {"total": 1219, "additions": 565, "deletions": 654}, "files": [{"sha": "4d37c244b139f1792d68ded917036da4b44beb09", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -41,30 +41,21 @@ use list::{MutList, MutCons, MutNil};\n use core::at_vec;\n use core::cast::{transmute, transmute_mut, transmute_mut_region};\n use core::cast;\n-use core::libc::size_t;\n use core::ptr;\n-use core::sys::TypeDesc;\n use core::sys;\n use core::uint;\n use core::vec;\n use core::unstable::intrinsics;\n+use core::unstable::intrinsics::{TyDesc};\n \n-pub mod rustrt {\n-    use core::libc::size_t;\n-    use core::sys::TypeDesc;\n+#[cfg(not(stage0))]\n+use core::unstable::intrinsics::{get_tydesc};\n \n-    pub extern {\n-        #[rust_stack]\n-        unsafe fn rust_call_tydesc_glue(root: *u8,\n-                                        tydesc: *TypeDesc,\n-                                        field: size_t);\n-    }\n+#[cfg(stage0)]\n+unsafe fn get_tydesc<T>() -> *TyDesc {\n+    intrinsics::get_tydesc::<T>() as *TyDesc\n }\n \n-// This probably belongs somewhere else. Needs to be kept in sync with\n-// changes to glue...\n-static tydesc_drop_glue_index: size_t = 3 as size_t;\n-\n // The way arena uses arrays is really deeply awful. The arrays are\n // allocated, and have capacities reserved, but the fill for the array\n // will always stay at 0.\n@@ -125,6 +116,19 @@ fn round_up_to(base: uint, align: uint) -> uint {\n     (base + (align - 1)) & !(align - 1)\n }\n \n+#[inline]\n+#[cfg(not(stage0))]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    // This function should be inlined when stage0 is gone\n+    ((*tydesc).drop_glue)(data);\n+}\n+\n+#[inline]\n+#[cfg(stage0)]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    ((*tydesc).drop_glue)(0 as **TyDesc, data);\n+}\n+\n // Walk down a chunk, running the destructors for any objects stored\n // in it.\n unsafe fn destroy_chunk(chunk: &Chunk) {\n@@ -137,19 +141,18 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n         let (tydesc, is_done) = un_bitpack_tydesc_ptr(*tydesc_data);\n         let (size, align) = ((*tydesc).size, (*tydesc).align);\n \n-        let after_tydesc = idx + sys::size_of::<*TypeDesc>();\n+        let after_tydesc = idx + sys::size_of::<*TyDesc>();\n \n         let start = round_up_to(after_tydesc, align);\n \n         //debug!(\"freeing object: idx = %u, size = %u, align = %u, done = %b\",\n         //       start, size, align, is_done);\n         if is_done {\n-            rustrt::rust_call_tydesc_glue(\n-                ptr::offset(buf, start), tydesc, tydesc_drop_glue_index);\n+            call_drop_glue(tydesc, ptr::offset(buf, start) as *i8);\n         }\n \n         // Find where the next tydesc lives\n-        idx = round_up_to(start + size, sys::pref_align_of::<*TypeDesc>());\n+        idx = round_up_to(start + size, sys::pref_align_of::<*TyDesc>());\n     }\n }\n \n@@ -158,12 +161,12 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n // is necessary in order to properly do cleanup if a failure occurs\n // during an initializer.\n #[inline]\n-unsafe fn bitpack_tydesc_ptr(p: *TypeDesc, is_done: bool) -> uint {\n+unsafe fn bitpack_tydesc_ptr(p: *TyDesc, is_done: bool) -> uint {\n     let p_bits: uint = transmute(p);\n     p_bits | (is_done as uint)\n }\n #[inline]\n-unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TypeDesc, bool) {\n+unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TyDesc, bool) {\n     (transmute(p & !1), p & 1 == 1)\n }\n \n@@ -203,7 +206,7 @@ impl Arena {\n     #[inline]\n     fn alloc_pod<'a, T>(&'a mut self, op: &fn() -> T) -> &'a T {\n         unsafe {\n-            let tydesc = sys::get_type_desc::<T>();\n+            let tydesc = get_tydesc::<T>();\n             let ptr = self.alloc_pod_inner((*tydesc).size, (*tydesc).align);\n             let ptr: *mut T = transmute(ptr);\n             intrinsics::move_val_init(&mut (*ptr), op());\n@@ -231,13 +234,13 @@ impl Arena {\n             let head = transmute_mut_region(&mut self.head);\n \n             let tydesc_start = head.fill;\n-            let after_tydesc = head.fill + sys::size_of::<*TypeDesc>();\n+            let after_tydesc = head.fill + sys::size_of::<*TyDesc>();\n             let start = round_up_to(after_tydesc, align);\n             let end = start + n_bytes;\n             if end > at_vec::capacity(head.data) {\n                 return self.alloc_nonpod_grow(n_bytes, align);\n             }\n-            head.fill = round_up_to(end, sys::pref_align_of::<*TypeDesc>());\n+            head.fill = round_up_to(end, sys::pref_align_of::<*TyDesc>());\n \n             //debug!(\"idx = %u, size = %u, align = %u, fill = %u\",\n             //       start, n_bytes, align, head.fill);\n@@ -250,7 +253,7 @@ impl Arena {\n     #[inline]\n     fn alloc_nonpod<'a, T>(&'a mut self, op: &fn() -> T) -> &'a T {\n         unsafe {\n-            let tydesc = sys::get_type_desc::<T>();\n+            let tydesc = get_tydesc::<T>();\n             let (ty_ptr, ptr) =\n                 self.alloc_nonpod_inner((*tydesc).size, (*tydesc).align);\n             let ty_ptr: *mut uint = transmute(ty_ptr);"}, {"sha": "43c4aecdd27fa5e60ffd97cc63f45d9a1375c6f9", "filename": "src/libextra/dbg.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibextra%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibextra%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdbg.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -13,56 +13,62 @@\n #[allow(missing_doc)];\n \n use core::cast::transmute;\n-use core::sys;\n+#[cfg(stage0)]\n+use intrinsic::{get_tydesc};\n+#[cfg(not(stage0))]\n+use core::unstable::intrinsics::{get_tydesc};\n \n pub mod rustrt {\n-    use core::sys;\n+    #[cfg(stage0)]\n+    use intrinsic::{TyDesc};\n+    #[cfg(not(stage0))]\n+    use core::unstable::intrinsics::{TyDesc};\n \n     #[abi = \"cdecl\"]\n     pub extern {\n-        pub unsafe fn debug_tydesc(td: *sys::TypeDesc);\n-        pub unsafe fn debug_opaque(td: *sys::TypeDesc, x: *());\n-        pub unsafe fn debug_box(td: *sys::TypeDesc, x: *());\n-        pub unsafe fn debug_tag(td: *sys::TypeDesc, x: *());\n-        pub unsafe fn debug_fn(td: *sys::TypeDesc, x: *());\n-        pub unsafe fn debug_ptrcast(td: *sys::TypeDesc, x: *()) -> *();\n+        pub unsafe fn debug_tydesc(td: *TyDesc);\n+        pub unsafe fn debug_opaque(td: *TyDesc, x: *());\n+        pub unsafe fn debug_box(td: *TyDesc, x: *());\n+        pub unsafe fn debug_tag(td: *TyDesc, x: *());\n+        pub unsafe fn debug_fn(td: *TyDesc, x: *());\n+        pub unsafe fn debug_ptrcast(td: *TyDesc, x: *()) -> *();\n         pub unsafe fn rust_dbg_breakpoint();\n     }\n }\n \n pub fn debug_tydesc<T>() {\n     unsafe {\n-        rustrt::debug_tydesc(sys::get_type_desc::<T>());\n+        rustrt::debug_tydesc(get_tydesc::<T>());\n     }\n }\n \n pub fn debug_opaque<T>(x: T) {\n     unsafe {\n-        rustrt::debug_opaque(sys::get_type_desc::<T>(), transmute(&x));\n+        rustrt::debug_opaque(get_tydesc::<T>(), transmute(&x));\n     }\n }\n \n pub fn debug_box<T>(x: @T) {\n     unsafe {\n-        rustrt::debug_box(sys::get_type_desc::<T>(), transmute(&x));\n+        rustrt::debug_box(get_tydesc::<T>(), transmute(&x));\n     }\n }\n \n pub fn debug_tag<T>(x: T) {\n     unsafe {\n-        rustrt::debug_tag(sys::get_type_desc::<T>(), transmute(&x));\n+        rustrt::debug_tag(get_tydesc::<T>(), transmute(&x));\n     }\n }\n \n pub fn debug_fn<T>(x: T) {\n     unsafe {\n-        rustrt::debug_fn(sys::get_type_desc::<T>(), transmute(&x));\n+        rustrt::debug_fn(get_tydesc::<T>(), transmute(&x));\n     }\n }\n \n pub unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n     transmute(\n-        rustrt::debug_ptrcast(sys::get_type_desc::<T>(), transmute(x)))\n+        rustrt::debug_ptrcast(get_tydesc::<T>(), transmute(x)))\n }\n \n /// Triggers a debugger breakpoint"}, {"sha": "05b6e90c682f0f6030588c444c9df4e5e59a9c8f", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n pub static rc_base_field_refcnt: uint = 0u;\n \n pub static task_field_refcnt: uint = 0u;\n@@ -49,9 +46,7 @@ pub static tydesc_field_take_glue: uint = 2u;\n pub static tydesc_field_drop_glue: uint = 3u;\n pub static tydesc_field_free_glue: uint = 4u;\n pub static tydesc_field_visit_glue: uint = 5u;\n-pub static tydesc_field_shape: uint = 6u;\n-pub static tydesc_field_shape_tables: uint = 7u;\n-pub static n_tydesc_fields: uint = 8u;\n+pub static n_tydesc_fields: uint = 6u;\n \n // The two halves of a closure: code and environment.\n pub static fn_field_code: uint = 0u;\n@@ -71,14 +66,4 @@ pub static vec_elt_elems: uint = 2u;\n pub static slice_elt_base: uint = 0u;\n pub static slice_elt_len: uint = 1u;\n \n-pub static worst_case_glue_call_args: uint = 7u;\n-\n pub static abi_version: uint = 1u;\n-\n-pub fn memcpy_glue_name() -> ~str { return ~\"rust_memcpy_glue\"; }\n-\n-pub fn bzero_glue_name() -> ~str { return ~\"rust_bzero_glue\"; }\n-\n-pub fn yield_glue_name() -> ~str { return ~\"rust_yield_glue\"; }\n-\n-pub fn no_op_type_glue_name() -> ~str { return ~\"rust_no_op_type_glue\"; }"}, {"sha": "fbb273450df29bed6721c823f4ef88068a8a4799", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -206,9 +206,6 @@ pub fn compile_rest(sess: Session,\n     let mut crate = crate_opt.unwrap();\n \n     let (llcx, llmod, link_meta) = {\n-    crate = time(time_passes, ~\"intrinsic injection\", ||\n-                 front::intrinsic_inject::inject_intrinsic(sess, crate));\n-\n         crate = time(time_passes, ~\"extra injection\", ||\n                      front::std_inject::maybe_inject_libstd_ref(sess, crate));\n "}, {"sha": "fcb08180a5ea27565ff9f3a854c9981c8df6d866", "filename": "src/librustc/front/intrinsic.rs", "status": "removed", "additions": 0, "deletions": 140, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/b11346bb5d2659313eb96f3108137f01239785c9/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11346bb5d2659313eb96f3108137f01239785c9/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=b11346bb5d2659313eb96f3108137f01239785c9", "patch": "@@ -1,140 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// NB: this file is include_str!'ed into the compiler, re-parsed\n-// and injected into each crate the compiler builds. Keep it small.\n-\n-pub mod intrinsic {\n-    #[allow(missing_doc)];\n-\n-    pub use intrinsic::rusti::visit_tydesc;\n-\n-    // FIXME (#3727): remove this when the interface has settled and the\n-    // version in sys is no longer present.\n-    pub fn get_tydesc<T>() -> *TyDesc {\n-        unsafe {\n-            rusti::get_tydesc::<T>() as *TyDesc\n-        }\n-    }\n-\n-    pub struct TyDesc {\n-        size: uint,\n-        align: uint\n-        // Remaining fields not listed\n-    }\n-\n-    pub enum Opaque { }\n-\n-    pub trait TyVisitor {\n-        fn visit_bot(&self) -> bool;\n-        fn visit_nil(&self) -> bool;\n-        fn visit_bool(&self) -> bool;\n-\n-        fn visit_int(&self) -> bool;\n-        fn visit_i8(&self) -> bool;\n-        fn visit_i16(&self) -> bool;\n-        fn visit_i32(&self) -> bool;\n-        fn visit_i64(&self) -> bool;\n-\n-        fn visit_uint(&self) -> bool;\n-        fn visit_u8(&self) -> bool;\n-        fn visit_u16(&self) -> bool;\n-        fn visit_u32(&self) -> bool;\n-        fn visit_u64(&self) -> bool;\n-\n-        fn visit_float(&self) -> bool;\n-        fn visit_f32(&self) -> bool;\n-        fn visit_f64(&self) -> bool;\n-\n-        fn visit_char(&self) -> bool;\n-        fn visit_str(&self) -> bool;\n-\n-        fn visit_estr_box(&self) -> bool;\n-        fn visit_estr_uniq(&self) -> bool;\n-        fn visit_estr_slice(&self) -> bool;\n-        fn visit_estr_fixed(&self, n: uint, sz: uint, align: uint) -> bool;\n-\n-        fn visit_box(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_ptr(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_rptr(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-\n-        fn visit_vec(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_unboxed_vec(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_evec_box(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_evec_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_evec_slice(&self, mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_evec_fixed(&self, n: uint, sz: uint, align: uint,\n-                            mtbl: uint, inner: *TyDesc) -> bool;\n-\n-        fn visit_enter_rec(&self, n_fields: uint,\n-                           sz: uint, align: uint) -> bool;\n-        fn visit_rec_field(&self, i: uint, name: &str,\n-                           mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_rec(&self, n_fields: uint,\n-                           sz: uint, align: uint) -> bool;\n-\n-        fn visit_enter_class(&self, n_fields: uint,\n-                             sz: uint, align: uint) -> bool;\n-        fn visit_class_field(&self, i: uint, name: &str,\n-                             mtbl: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_class(&self, n_fields: uint,\n-                             sz: uint, align: uint) -> bool;\n-\n-        fn visit_enter_tup(&self, n_fields: uint,\n-                           sz: uint, align: uint) -> bool;\n-        fn visit_tup_field(&self, i: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_tup(&self, n_fields: uint,\n-                           sz: uint, align: uint) -> bool;\n-\n-        fn visit_enter_enum(&self, n_variants: uint,\n-                            get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n-                            sz: uint, align: uint) -> bool;\n-        fn visit_enter_enum_variant(&self, variant: uint,\n-                                    disr_val: int,\n-                                    n_fields: uint,\n-                                    name: &str) -> bool;\n-        fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_enum_variant(&self, variant: uint,\n-                                    disr_val: int,\n-                                    n_fields: uint,\n-                                    name: &str) -> bool;\n-        fn visit_leave_enum(&self, n_variants: uint,\n-                            get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n-                            sz: uint, align: uint) -> bool;\n-\n-        fn visit_enter_fn(&self, purity: uint, proto: uint,\n-                          n_inputs: uint, retstyle: uint) -> bool;\n-        fn visit_fn_input(&self, i: uint, mode: uint, inner: *TyDesc) -> bool;\n-        fn visit_fn_output(&self, retstyle: uint, inner: *TyDesc) -> bool;\n-        fn visit_leave_fn(&self, purity: uint, proto: uint,\n-                          n_inputs: uint, retstyle: uint) -> bool;\n-\n-        fn visit_trait(&self) -> bool;\n-        fn visit_var(&self) -> bool;\n-        fn visit_var_integral(&self) -> bool;\n-        fn visit_param(&self, i: uint) -> bool;\n-        fn visit_self(&self) -> bool;\n-        fn visit_type(&self) -> bool;\n-        fn visit_opaque_box(&self) -> bool;\n-        fn visit_constr(&self, inner: *TyDesc) -> bool;\n-        fn visit_closure_ptr(&self, ck: uint) -> bool;\n-    }\n-\n-    pub mod rusti {\n-        use super::{TyDesc, TyVisitor};\n-\n-        #[abi = \"rust-intrinsic\"]\n-        pub extern \"rust-intrinsic\" {\n-            pub fn get_tydesc<T>() -> *();\n-            pub fn visit_tydesc(td: *TyDesc, tv: @TyVisitor);\n-        }\n-    }\n-}"}, {"sha": "0caadc8572e90cf545744b9e2af78d3cdcacd173", "filename": "src/librustc/front/intrinsic_inject.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b11346bb5d2659313eb96f3108137f01239785c9/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11346bb5d2659313eb96f3108137f01239785c9/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs?ref=b11346bb5d2659313eb96f3108137f01239785c9", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use core::prelude::*;\n-\n-use core::vec;\n-use driver::session::Session;\n-use syntax::parse;\n-use syntax::ast;\n-use syntax::codemap::spanned;\n-\n-pub fn inject_intrinsic(sess: Session, crate: @ast::crate) -> @ast::crate {\n-    let intrinsic_module = include_str!(\"intrinsic.rs\").to_managed();\n-\n-    let item = parse::parse_item_from_source_str(@\"<intrinsic>\",\n-                                                 intrinsic_module,\n-                                                 /*bad*/copy sess.opts.cfg,\n-                                                 ~[],\n-                                                 sess.parse_sess);\n-    let item =\n-        match item {\n-          Some(i) => i,\n-          None => {\n-            sess.fatal(\"no item found in intrinsic module\");\n-          }\n-        };\n-\n-    let items = vec::append(~[item], crate.node.module.items);\n-\n-    @spanned {\n-        node: ast::crate_ {\n-            module: ast::_mod {\n-                items: items,\n-                .. /*bad*/copy crate.node.module\n-            },\n-            .. /*bad*/copy crate.node\n-        },\n-        .. /*bad*/copy *crate\n-    }\n-}"}, {"sha": "d73b019c1ea768038cf74b9dc94b7c236e07e75c", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -76,16 +76,20 @@ pub enum LangItem {\n     UnrecordBorrowFnLangItem,   // 36\n \n     StartFnLangItem,            // 37\n+\n+    TyDescStructLangItem,       // 38\n+    TyVisitorTraitLangItem,     // 39\n+    OpaqueStructLangItem,       // 40\n }\n \n pub struct LanguageItems {\n-    items: [Option<def_id>, ..38]\n+    items: [Option<def_id>, ..41]\n }\n \n impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..38 ]\n+            items: [ None, ..41 ]\n         }\n     }\n \n@@ -138,6 +142,10 @@ impl LanguageItems {\n \n             37 => \"start\",\n \n+            38 => \"ty_desc\",\n+            39 => \"ty_visitor\",\n+            40 => \"opaque\",\n+\n             _ => \"???\"\n         }\n     }\n@@ -262,6 +270,15 @@ impl LanguageItems {\n     pub fn start_fn(&const self) -> def_id {\n         self.items[StartFnLangItem as uint].get()\n     }\n+    pub fn ty_desc(&const self) -> def_id {\n+        self.items[TyDescStructLangItem as uint].get()\n+    }\n+    pub fn ty_visitor(&const self) -> def_id {\n+        self.items[TyVisitorTraitLangItem as uint].get()\n+    }\n+    pub fn opaque(&const self) -> def_id {\n+        self.items[OpaqueStructLangItem as uint].get()\n+    }\n }\n \n fn LanguageItemCollector(crate: @crate,\n@@ -313,6 +330,9 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(@\"record_borrow\", RecordBorrowFnLangItem as uint);\n     item_refs.insert(@\"unrecord_borrow\", UnrecordBorrowFnLangItem as uint);\n     item_refs.insert(@\"start\", StartFnLangItem as uint);\n+    item_refs.insert(@\"ty_desc\", TyDescStructLangItem as uint);\n+    item_refs.insert(@\"ty_visitor\", TyVisitorTraitLangItem as uint);\n+    item_refs.insert(@\"opaque\", OpaqueStructLangItem as uint);\n \n     LanguageItemCollector {\n         crate: crate,"}, {"sha": "a5a6c1434c63fc639be4c5eb8c8ccdd2f8513ad4", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -681,9 +681,12 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n             let static_ti = get_tydesc(ccx, tp_ty);\n             glue::lazily_emit_all_tydesc_glue(ccx, static_ti);\n \n-            // FIXME (#3727): change this to ccx.tydesc_ty.ptr_to() when the\n-            // core::sys copy of the get_tydesc interface dies off.\n-            let td = PointerCast(bcx, static_ti.tydesc, Type::nil().ptr_to());\n+            // FIXME (#3730): ideally this shouldn't need a cast,\n+            // but there's a circularity between translating rust types to llvm\n+            // types and having a tydesc type available. So I can't directly access\n+            // the llvm type of intrinsic::TyDesc struct.\n+            let userland_tydesc_ty = type_of::type_of(ccx, output_type);\n+            let td = PointerCast(bcx, static_ti.tydesc, userland_tydesc_ty);\n             Store(bcx, td, fcx.llretptr.get());\n         }\n         \"init\" => {"}, {"sha": "3b55e843d360639e62bf26c999b10e70ef8613da", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -232,7 +232,7 @@ pub fn lazily_emit_tydesc_glue(ccx: @mut CrateContext,\n                                field: uint,\n                                ti: @mut tydesc_info) {\n     let _icx = push_ctxt(\"lazily_emit_tydesc_glue\");\n-    let llfnty = type_of_glue_fn(ccx);\n+    let llfnty = Type::glue_fn();\n \n     if lazily_emit_simplified_tydesc_glue(ccx, field, ti) {\n         return;\n@@ -338,9 +338,7 @@ pub fn call_tydesc_glue_full(bcx: block,\n         }\n     };\n \n-    Call(bcx, llfn, [C_null(Type::nil().ptr_to()),\n-                        C_null(bcx.ccx().tydesc_type.ptr_to().ptr_to()),\n-                        llrawptr]);\n+    Call(bcx, llfn, [C_null(Type::nil().ptr_to()), llrawptr]);\n }\n \n // See [Note-arg-mode]\n@@ -680,7 +678,7 @@ pub fn make_generic_glue_inner(ccx: @mut CrateContext,\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n-    let rawptr0_arg = fcx.arg_pos(1u);\n+    let rawptr0_arg = fcx.arg_pos(0u);\n     let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, rawptr0_arg as c_uint) };\n     let llty = type_of(ccx, t);\n     let llrawptr0 = PointerCast(bcx, llrawptr0, llty.ptr_to());\n@@ -715,7 +713,7 @@ pub fn emit_tydescs(ccx: &mut CrateContext) {\n     let _icx = push_ctxt(\"emit_tydescs\");\n     // As of this point, allow no more tydescs to be created.\n     ccx.finished_tydescs = true;\n-    let glue_fn_ty = Type::generic_glue_fn(ccx);\n+    let glue_fn_ty = Type::generic_glue_fn(ccx).ptr_to();\n     let tyds = &mut ccx.tydescs;\n     for tyds.each_value |&val| {\n         let ti = val;\n@@ -765,19 +763,13 @@ pub fn emit_tydescs(ccx: &mut CrateContext) {\n               }\n             };\n \n-\n-        let shape = C_null(Type::i8p());\n-        let shape_tables = C_null(Type::i8p());\n-\n         let tydesc = C_named_struct(ccx.tydesc_type,\n-                           [ti.size, // size\n-                            ti.align, // align\n-                            take_glue, // take_glue\n-                            drop_glue, // drop_glue\n-                            free_glue, // free_glue\n-                            visit_glue, // visit_glue\n-                            shape, // shape\n-                            shape_tables]); // shape_tables\n+                                    [ti.size, // size\n+                                    ti.align, // align\n+                                    take_glue, // take_glue\n+                                    drop_glue, // drop_glue\n+                                    free_glue, // free_glue\n+                                    visit_glue]); // visit_glue\n \n         unsafe {\n             let gvar = ti.tydesc;\n@@ -788,8 +780,3 @@ pub fn emit_tydescs(ccx: &mut CrateContext) {\n         }\n     };\n }\n-\n-fn type_of_glue_fn(ccx: &CrateContext) -> Type {\n-    let tydescpp = ccx.tydesc_type.ptr_to().ptr_to();\n-    Type::func([ Type::nil().ptr_to(), tydescpp, Type::i8p() ], &Type::void())\n-}"}, {"sha": "c2a8b47f24583eda65547216b57a38c858c48064", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -274,9 +274,7 @@ impl Reflector {\n             let repr = adt::represent_type(bcx.ccx(), t);\n             let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n             let llptrty = type_of(ccx, t).ptr_to();\n-            let (_, opaquety) =\n-                ccx.tcx.intrinsic_defs.find_copy(&ccx.sess.ident_of(\"Opaque\"))\n-                .expect(\"Failed to resolve intrinsic::Opaque\");\n+            let opaquety = ty::get_opaque_ty(ccx.tcx);\n             let opaqueptrty = ty::mk_ptr(ccx.tcx, ty::mt { ty: opaquety, mutbl: ast::m_imm });\n \n             let make_get_disr = || {\n@@ -373,10 +371,8 @@ pub fn emit_calls_to_trait_visit_ty(bcx: block,\n                                     visitor_val: ValueRef,\n                                     visitor_trait_id: def_id)\n                                  -> block {\n-    use syntax::parse::token::special_idents::tydesc;\n     let final = sub_block(bcx, \"final\");\n-    assert!(bcx.ccx().tcx.intrinsic_defs.contains_key(&tydesc));\n-    let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get_copy(&tydesc);\n+    let tydesc_ty = ty::get_tydesc_ty(bcx.ccx().tcx);\n     let tydesc_ty = type_of(bcx.ccx(), tydesc_ty);\n     let mut r = Reflector {\n         visitor_val: visitor_val,"}, {"sha": "64688ac4134243d0933906145c0ffc8dc9f83d4d", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -20,7 +20,6 @@ use middle::trans::base;\n \n use syntax::ast;\n use syntax::abi::{Architecture, X86, X86_64, Arm, Mips};\n-use back::abi;\n \n use core::vec;\n use core::cast;\n@@ -189,25 +188,26 @@ impl Type {\n             None => ()\n         }\n \n-        let ty = cx.tydesc_type.get_field(abi::tydesc_field_drop_glue);\n+        let ty = Type::glue_fn();\n         cx.tn.associate_type(\"glue_fn\", &ty);\n \n         return ty;\n     }\n \n+    pub fn glue_fn() -> Type {\n+        Type::func([ Type::nil().ptr_to(), Type::i8p() ],\n+            &Type::void())\n+    }\n+\n     pub fn tydesc(arch: Architecture) -> Type {\n         let mut tydesc = Type::named_struct(\"tydesc\");\n-        let tydescpp = tydesc.ptr_to().ptr_to();\n-        let pvoid = Type::i8p();\n-        let glue_fn_ty = Type::func([ Type::nil().ptr_to(), tydescpp, pvoid ],\n-            &Type::void()).ptr_to();\n+        let glue_fn_ty = Type::glue_fn().ptr_to();\n \n         let int_ty = Type::int(arch);\n \n         let elems = [\n             int_ty, int_ty,\n-            glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty,\n-            pvoid, pvoid\n+            glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty\n         ];\n \n         tydesc.set_struct_body(elems, false);\n@@ -265,10 +265,6 @@ impl Type {\n         cx.int_type\n     }\n \n-    pub fn captured_tydescs(ctx: &CrateContext, num: uint) -> Type {\n-        Type::struct_(vec::from_elem(num, ctx.tydesc_type.ptr_to()), false)\n-    }\n-\n     pub fn opaque_trait(ctx: &CrateContext, store: ty::TraitStore) -> Type {\n         let tydesc_ptr = ctx.tydesc_type.ptr_to();\n         match store {"}, {"sha": "0518e6b7cf79ecc456cfecf236ef8351687560db", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -44,7 +44,6 @@ use syntax::attr;\n use syntax::codemap::span;\n use syntax::codemap;\n use syntax::parse::token;\n-use syntax::parse::token::special_idents;\n use syntax::{ast, ast_map};\n use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n@@ -276,8 +275,7 @@ struct ctxt_ {\n     trait_defs: @mut HashMap<def_id, @TraitDef>,\n \n     items: ast_map::map,\n-    intrinsic_defs: @mut HashMap<ast::ident, (ast::def_id, t)>,\n-    intrinsic_traits: @mut HashMap<ast::ident, @TraitRef>,\n+    intrinsic_defs: @mut HashMap<ast::def_id, t>,\n     freevars: freevars::freevar_map,\n     tcache: type_cache,\n     rcache: creader_cache,\n@@ -954,7 +952,6 @@ pub fn mk_ctxt(s: session::Session,\n         node_type_substs: @mut HashMap::new(),\n         trait_refs: @mut HashMap::new(),\n         trait_defs: @mut HashMap::new(),\n-        intrinsic_traits: @mut HashMap::new(),\n         items: amap,\n         intrinsic_defs: @mut HashMap::new(),\n         freevars: freevars,\n@@ -4469,10 +4466,26 @@ pub fn get_impl_id(tcx: ctxt, trait_id: def_id, self_ty: t) -> def_id {\n     }\n }\n \n+pub fn get_tydesc_ty(tcx: ctxt) -> t {\n+    let tydesc_lang_item = tcx.lang_items.ty_desc();\n+    tcx.intrinsic_defs.find_copy(&tydesc_lang_item)\n+        .expect(\"Failed to resolve TyDesc\")\n+}\n+\n+pub fn get_opaque_ty(tcx: ctxt) -> t {\n+    let opaque_lang_item = tcx.lang_items.opaque();\n+    tcx.intrinsic_defs.find_copy(&opaque_lang_item)\n+        .expect(\"Failed to resolve Opaque\")\n+}\n+\n pub fn visitor_object_ty(tcx: ctxt) -> (@TraitRef, t) {\n-    let ty_visitor_name = special_idents::ty_visitor;\n-    assert!(tcx.intrinsic_traits.contains_key(&ty_visitor_name));\n-    let trait_ref = tcx.intrinsic_traits.get_copy(&ty_visitor_name);\n+    let substs = substs {\n+        self_r: None,\n+        self_ty: None,\n+        tps: ~[]\n+    };\n+    let trait_lang_item = tcx.lang_items.ty_visitor();\n+    let trait_ref = @TraitRef { def_id: trait_lang_item, substs: substs };\n     (trait_ref,\n      mk_trait(tcx, trait_ref.def_id, copy trait_ref.substs,\n               BoxTraitStore, ast::m_imm, EmptyBuiltinBounds()))"}, {"sha": "eb505338e4b2cd1ea381b06ba773cb0fee7ff443", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -3506,13 +3506,15 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             }\n \n             \"get_tydesc\" => {\n-              // FIXME (#3730): return *intrinsic::tydesc, not *()\n-              (1u, ~[], ty::mk_nil_ptr(ccx.tcx))\n+              let tydesc_ty = ty::get_tydesc_ty(ccx.tcx);\n+              let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n+                  ty: tydesc_ty,\n+                  mutbl: ast::m_imm\n+              });\n+              (1u, ~[], td_ptr)\n             }\n             \"visit_tydesc\" => {\n-              let tydesc_name = special_idents::tydesc;\n-              assert!(tcx.intrinsic_defs.contains_key(&tydesc_name));\n-              let (_, tydesc_ty) = tcx.intrinsic_defs.get_copy(&tydesc_name);\n+              let tydesc_ty = ty::get_tydesc_ty(ccx.tcx);\n               let (_, visitor_object_ty) = ty::visitor_object_ty(tcx);\n               let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n                   ty: tydesc_ty,"}, {"sha": "3554376902cb72a0ae69e4731dbcaf3b6c656b66", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -62,55 +62,16 @@ use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n \n pub fn collect_item_types(ccx: @mut CrateCtxt, crate: @ast::crate) {\n-\n-    // FIXME (#2592): hooking into the \"intrinsic\" root module is crude.\n-    // There ought to be a better approach. Attributes?\n-\n-    for crate.node.module.items.iter().advance |crate_item| {\n-        if crate_item.ident\n-            == ::syntax::parse::token::special_idents::intrinsic {\n-\n-            match crate_item.node {\n-              ast::item_mod(ref m) => {\n-                for m.items.iter().advance |intrinsic_item| {\n-                    let def_id = ast::def_id { crate: ast::local_crate,\n-                                               node: intrinsic_item.id };\n-                    let substs = substs {\n-                        self_r: None,\n-                        self_ty: None,\n-                        tps: ~[]\n-                    };\n-\n-                    match intrinsic_item.node {\n-                      ast::item_trait(*) => {\n-                          let tref = @ty::TraitRef {def_id: def_id,\n-                                                    substs: substs};\n-                          ccx.tcx.intrinsic_traits.insert\n-                              (intrinsic_item.ident, tref);\n-                      }\n-\n-                      ast::item_enum(*) => {\n-                        let ty = ty::mk_enum(ccx.tcx, def_id, substs);\n-                        ccx.tcx.intrinsic_defs.insert\n-                            (intrinsic_item.ident, (def_id, ty));\n-                      }\n-\n-                      ast::item_struct(*) => {\n-                        let ty = ty::mk_struct(ccx.tcx, def_id, substs);\n-                        ccx.tcx.intrinsic_defs.insert\n-                            (intrinsic_item.ident, (def_id, ty));\n-                      }\n-\n-                      _ => {}\n-                    }\n-                }\n-              }\n-              _ => { }\n-            }\n-            break;\n-        }\n+    fn collect_intrinsic_type(ccx: @mut CrateCtxt,\n+                              lang_item: ast::def_id) {\n+        let ty::ty_param_bounds_and_ty { ty: ty, _ } =\n+            ccx.get_item_ty(lang_item);\n+        ccx.tcx.intrinsic_defs.insert(lang_item, ty);\n     }\n \n+    collect_intrinsic_type(ccx, ccx.tcx.lang_items.ty_desc());\n+    collect_intrinsic_type(ccx, ccx.tcx.lang_items.opaque());\n+\n     visit::visit_crate(\n         crate, ((),\n         visit::mk_simple_visitor(@visit::SimpleVisitor {"}, {"sha": "20705b3d7975061e2cdb297c885e18592f1a49a6", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -86,7 +86,6 @@ pub mod front {\n     pub mod config;\n     pub mod test;\n     pub mod std_inject;\n-    pub mod intrinsic_inject;\n }\n \n pub mod back {"}, {"sha": "5a2f948600a800a14e155499b1ae5312069a42b0", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -25,13 +25,16 @@ use vec::ImmutableVector;\n \n pub mod rustrt {\n     use libc;\n-    use sys;\n     use vec;\n+    #[cfg(stage0)]\n+    use intrinsic::{TyDesc};\n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::{TyDesc};\n \n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n     pub extern {\n-        pub unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n+        pub unsafe fn vec_reserve_shared_actual(t: *TyDesc,\n                                                 v: **vec::raw::VecRepr,\n                                                 n: libc::size_t);\n     }\n@@ -197,6 +200,10 @@ pub mod raw {\n     use uint;\n     use unstable::intrinsics::{move_val_init};\n     use vec;\n+    #[cfg(stage0)]\n+    use intrinsic::{get_tydesc};\n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::{get_tydesc};\n \n     pub type VecRepr = vec::raw::VecRepr;\n     pub type SliceRepr = vec::raw::SliceRepr;\n@@ -258,7 +265,7 @@ pub mod raw {\n         // Only make the (slow) call into the runtime if we have to\n         if capacity(*v) < n {\n             let ptr: **VecRepr = transmute(v);\n-            rustrt::vec_reserve_shared_actual(sys::get_type_desc::<T>(),\n+            rustrt::vec_reserve_shared_actual(get_tydesc::<T>(),\n                                               ptr, n as libc::size_t);\n         }\n     }"}, {"sha": "ee9fdd3c6200575b0abe53078aef89ab8e12ff45", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -10,24 +10,19 @@\n \n #[doc(hidden)];\n \n-use libc::{c_char, c_void, intptr_t, uintptr_t};\n-use ptr::mut_null;\n+use libc::{c_char, intptr_t, uintptr_t};\n+use ptr::{mut_null};\n use repr::BoxRepr;\n-use sys::TypeDesc;\n use cast::transmute;\n+use unstable::intrinsics::TyDesc;\n #[cfg(not(test))] use unstable::lang::clear_task_borrow_list;\n \n-#[cfg(not(test))] use ptr::to_unsafe_ptr;\n-\n /**\n  * Runtime structures\n  *\n  * NB: These must match the representation in the C++ runtime.\n  */\n \n-type DropGlue<'self> = &'self fn(**TypeDesc, *c_void);\n-type FreeGlue<'self> = &'self fn(**TypeDesc, *c_void);\n-\n type TaskID = uintptr_t;\n \n struct StackSegment { priv opaque: () }\n@@ -164,6 +159,19 @@ fn debug_mem() -> bool {\n     false\n }\n \n+#[inline]\n+#[cfg(not(stage0))]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    // This function should be inlined when stage0 is gone\n+    ((*tydesc).drop_glue)(data);\n+}\n+\n+#[inline]\n+#[cfg(stage0)]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    ((*tydesc).drop_glue)(0 as **TyDesc, data);\n+}\n+\n /// Destroys all managed memory (i.e. @ boxes) held by the current task.\n #[cfg(not(test))]\n #[lang=\"annihilate\"]\n@@ -205,9 +213,9 @@ pub unsafe fn annihilate() {\n     // callback, as the original value may have been freed.\n     for each_live_alloc(false) |box, uniq| {\n         if !uniq {\n-            let tydesc: *TypeDesc = transmute(copy (*box).header.type_desc);\n-            let drop_glue: DropGlue = transmute(((*tydesc).drop_glue, 0));\n-            drop_glue(to_unsafe_ptr(&tydesc), transmute(&(*box).data));\n+            let tydesc = (*box).header.type_desc;\n+            let data = transmute(&(*box).data);\n+            call_drop_glue(tydesc, data);\n         }\n     }\n "}, {"sha": "c9e33219fa5033d3917c4af2a4b62e13c6652b3c", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -40,12 +40,13 @@ with destructors.\n use cast;\n use container::{Map, Set};\n use io;\n-use libc::{size_t, uintptr_t};\n+use libc::{uintptr_t};\n use option::{None, Option, Some};\n use ptr;\n use hashmap::HashSet;\n use stackwalk::walk_stack;\n use sys;\n+use unstable::intrinsics::{TyDesc};\n \n pub use stackwalk::Word;\n \n@@ -58,17 +59,11 @@ pub struct StackSegment {\n }\n \n pub mod rustrt {\n-    use libc::size_t;\n     use stackwalk::Word;\n     use super::StackSegment;\n \n     #[link_name = \"rustrt\"]\n     pub extern {\n-        #[rust_stack]\n-        pub unsafe fn rust_call_tydesc_glue(root: *Word,\n-                                            tydesc: *Word,\n-                                            field: size_t);\n-\n         #[rust_stack]\n         pub unsafe fn rust_gc_metadata() -> *Word;\n \n@@ -125,7 +120,7 @@ unsafe fn is_safe_point(pc: *Word) -> Option<SafePoint> {\n     return None;\n }\n \n-type Visitor<'self> = &'self fn(root: **Word, tydesc: *Word) -> bool;\n+type Visitor<'self> = &'self fn(root: **Word, tydesc: *TyDesc) -> bool;\n \n // Walks the list of roots for the given safe point, and calls visitor\n // on each root.\n@@ -139,7 +134,7 @@ unsafe fn _walk_safe_point(fp: *Word, sp: SafePoint, visitor: Visitor) -> bool {\n     let stack_roots: *u32 = bump(sp_meta, 2);\n     let reg_roots: *u8 = bump(stack_roots, num_stack_roots);\n     let addrspaces: *Word = align_to_pointer(bump(reg_roots, num_reg_roots));\n-    let tydescs: ***Word = bump(addrspaces, num_stack_roots);\n+    let tydescs: ***TyDesc = bump(addrspaces, num_stack_roots);\n \n     // Stack roots\n     let mut sri = 0;\n@@ -321,6 +316,19 @@ fn expect_sentinel() -> bool { true }\n #[cfg(nogc)]\n fn expect_sentinel() -> bool { false }\n \n+#[inline]\n+#[cfg(not(stage0))]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    // This function should be inlined when stage0 is gone\n+    ((*tydesc).drop_glue)(data);\n+}\n+\n+#[inline]\n+#[cfg(stage0)]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    ((*tydesc).drop_glue)(0 as **TyDesc, data);\n+}\n+\n // Entry point for GC-based cleanup. Walks stack looking for exchange\n // heap and stack allocations requiring drop, and runs all\n // destructors.\n@@ -364,7 +372,7 @@ pub fn cleanup_stack_for_failure() {\n                 // FIXME #4420: Destroy this box\n                 // FIXME #4330: Destroy this box\n             } else {\n-                rustrt::rust_call_tydesc_glue(*root, tydesc, 3 as size_t);\n+                call_drop_glue(tydesc, *root as *i8);\n             }\n         }\n     }"}, {"sha": "b71b3b503c2acca5514562275b63692b308d5db0", "filename": "src/libstd/managed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmanaged.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -15,7 +15,7 @@ use ptr::to_unsafe_ptr;\n #[cfg(not(test))] use cmp::{Eq, Ord};\n \n pub mod raw {\n-    use intrinsic::TyDesc;\n+    use std::unstable::intrinsics::TyDesc;\n \n     pub static RC_EXCHANGE_UNIQUE : uint = (-1) as uint;\n     pub static RC_MANAGED_UNIQUE : uint = (-2) as uint;"}, {"sha": "16ab4771d0de10a837b1584145bef9e933fa4c9e", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -16,8 +16,10 @@ Runtime type reflection\n \n #[allow(missing_doc)];\n \n-use intrinsic::{TyDesc, TyVisitor};\n-use intrinsic::Opaque;\n+#[cfg(stage0)]\n+use intrinsic::{Opaque, TyDesc, TyVisitor};\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::{Opaque, TyDesc, TyVisitor};\n use libc::c_void;\n use sys;\n use vec;"}, {"sha": "f39b5a00ed054b61fafeb678079500a8e527041b", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -19,9 +19,6 @@ More runtime type reflection\n use cast::transmute;\n use char;\n use container::Container;\n-use intrinsic;\n-use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n-use intrinsic::Opaque;\n use io::{Writer, WriterUtil};\n use iterator::IteratorUtil;\n use libc::c_void;\n@@ -34,6 +31,10 @@ use to_str::ToStr;\n use vec::raw::{VecRepr, SliceRepr};\n use vec;\n use vec::{OwnedVector, UnboxedVecRepr};\n+#[cfg(stage0)]\n+use intrinsic::{Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::{Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n \n #[cfg(test)] use io;\n \n@@ -564,13 +565,24 @@ impl TyVisitor for ReprVisitor {\n     fn visit_self(&self) -> bool { true }\n     fn visit_type(&self) -> bool { true }\n \n+    #[cfg(not(stage0))]\n     fn visit_opaque_box(&self) -> bool {\n         self.writer.write_char('@');\n         do self.get::<&managed::raw::BoxRepr> |b| {\n             let p = ptr::to_unsafe_ptr(&b.data) as *c_void;\n             self.visit_ptr_inner(p, b.header.type_desc);\n         }\n     }\n+    #[cfg(stage0)]\n+    fn visit_opaque_box(&self) -> bool {\n+        self.writer.write_char('@');\n+        do self.get::<&managed::raw::BoxRepr> |b| {\n+            let p = ptr::to_unsafe_ptr(&b.data) as *c_void;\n+            unsafe {\n+                self.visit_ptr_inner(p, transmute(b.header.type_desc));\n+            }\n+        }\n+    }\n \n     // Type no longer exists, vestigial function.\n     fn visit_constr(&self, _inner: *TyDesc) -> bool { fail!(); }\n@@ -581,7 +593,7 @@ impl TyVisitor for ReprVisitor {\n pub fn write_repr<T>(writer: @Writer, object: &T) {\n     unsafe {\n         let ptr = ptr::to_unsafe_ptr(object) as *c_void;\n-        let tydesc = intrinsic::get_tydesc::<T>();\n+        let tydesc = get_tydesc::<T>();\n         let u = ReprVisitor(ptr, writer);\n         let v = reflect::MovePtrAdaptor(u);\n         visit_tydesc(tydesc, @v as @TyVisitor)"}, {"sha": "1e9f9aab8345cb24ed10b64495c063e44d75ee0d", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -8,26 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use sys::{TypeDesc, size_of};\n+use sys::{size_of};\n use libc::{c_void, size_t, uintptr_t};\n use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n use cast::transmute;\n-use unstable::intrinsics::{atomic_xadd,atomic_xsub};\n+use unstable::intrinsics::{atomic_xadd,atomic_xsub,TyDesc};\n use ptr::null;\n-use intrinsic::TyDesc;\n \n-pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n+pub unsafe fn malloc(td: *TyDesc, size: uint) -> *c_void {\n     assert!(td.is_not_null());\n \n     let total_size = get_box_size(size, (*td).align);\n     let p = c_malloc(total_size as size_t);\n     assert!(p.is_not_null());\n \n-    // FIXME #3475: Converting between our two different tydesc types\n-    let td: *TyDesc = transmute(td);\n-\n     let box: &mut BoxRepr = transmute(p);\n     box.header.ref_count = -1; // Exchange values not ref counted\n     box.header.type_desc = td;"}, {"sha": "a1d6342323c64bc09cf6b56fee8c0929b0ac3315", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -17,23 +17,11 @@ use cast;\n use gc;\n use io;\n use libc;\n-use libc::{c_void, c_char, size_t};\n+use libc::{c_char, size_t};\n use repr;\n use str;\n use unstable::intrinsics;\n \n-pub type FreeGlue<'self> = &'self fn(*TypeDesc, *c_void);\n-\n-// Corresponds to runtime type_desc type\n-pub struct TypeDesc {\n-    size: uint,\n-    align: uint,\n-    take_glue: uint,\n-    drop_glue: uint,\n-    free_glue: uint\n-    // Remaining fields not listed\n-}\n-\n /// The representation of a Rust closure\n pub struct Closure {\n     code: *(),\n@@ -51,23 +39,6 @@ pub mod rustrt {\n     }\n }\n \n-/**\n- * Returns a pointer to a type descriptor.\n- *\n- * Useful for calling certain function in the Rust runtime or otherwise\n- * performing dark magick.\n- */\n-#[inline]\n-pub fn get_type_desc<T>() -> *TypeDesc {\n-    unsafe { intrinsics::get_tydesc::<T>() as *TypeDesc }\n-}\n-\n-/// Returns a pointer to a type descriptor.\n-#[inline]\n-pub fn get_type_desc_val<T>(_val: &T) -> *TypeDesc {\n-    get_type_desc::<T>()\n-}\n-\n /// Returns the size of a type\n #[inline]\n pub fn size_of<T>() -> uint {"}, {"sha": "5c47901df480226214d2db95f88ac4ef310c8b64", "filename": "src/libstd/unstable/exchange_alloc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Funstable%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Funstable%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fexchange_alloc.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -8,26 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use sys::{TypeDesc, size_of};\n+use sys::size_of;\n use libc::{c_void, size_t};\n use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n use cast::transmute;\n use unstable::intrinsics::{atomic_xadd,atomic_xsub};\n use ptr::null;\n+#[cfg(stage0)]\n use intrinsic::TyDesc;\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::TyDesc;\n \n-pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n+pub unsafe fn malloc(td: *TyDesc, size: uint) -> *c_void {\n     assert!(td.is_not_null());\n \n     let total_size = get_box_size(size, (*td).align);\n     let p = c_malloc(total_size as size_t);\n     assert!(p.is_not_null());\n \n-    // FIXME #3475: Converting between our two different tydesc types\n-    let td: *TyDesc = transmute(td);\n-\n     let box: &mut BoxRepr = transmute(p);\n     box.header.ref_count = -1; // Exchange values not ref counted\n     box.header.type_desc = td;"}, {"sha": "1254a591293265b32b8a7a74e2649b4068b6b50a", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 129, "deletions": 3, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -32,6 +32,130 @@ A quick refresher on memory ordering:\n \n */\n \n+// This is needed to prevent duplicate lang item definitions.\n+#[cfg(test)]\n+pub use realstd::unstable::intrinsics::{TyDesc, Opaque, TyVisitor};\n+\n+#[cfg(not(stage0))]\n+pub type GlueFn = extern \"Rust\" fn(*i8);\n+\n+#[cfg(stage0)]\n+pub type GlueFn = extern \"Rust\" fn(**TyDesc, *i8);\n+\n+// NB: this has to be kept in sync with the Rust ABI.\n+#[lang=\"ty_desc\"]\n+#[cfg(not(test))]\n+pub struct TyDesc {\n+    size: uint,\n+    align: uint,\n+    take_glue: GlueFn,\n+    drop_glue: GlueFn,\n+    free_glue: GlueFn,\n+    visit_glue: GlueFn,\n+}\n+\n+#[lang=\"opaque\"]\n+#[cfg(not(test))]\n+pub enum Opaque { }\n+\n+#[lang=\"ty_visitor\"]\n+#[cfg(not(test))]\n+pub trait TyVisitor {\n+    fn visit_bot(&self) -> bool;\n+    fn visit_nil(&self) -> bool;\n+    fn visit_bool(&self) -> bool;\n+\n+    fn visit_int(&self) -> bool;\n+    fn visit_i8(&self) -> bool;\n+    fn visit_i16(&self) -> bool;\n+    fn visit_i32(&self) -> bool;\n+    fn visit_i64(&self) -> bool;\n+\n+    fn visit_uint(&self) -> bool;\n+    fn visit_u8(&self) -> bool;\n+    fn visit_u16(&self) -> bool;\n+    fn visit_u32(&self) -> bool;\n+    fn visit_u64(&self) -> bool;\n+\n+    fn visit_float(&self) -> bool;\n+    fn visit_f32(&self) -> bool;\n+    fn visit_f64(&self) -> bool;\n+\n+    fn visit_char(&self) -> bool;\n+    fn visit_str(&self) -> bool;\n+\n+    fn visit_estr_box(&self) -> bool;\n+    fn visit_estr_uniq(&self) -> bool;\n+    fn visit_estr_slice(&self) -> bool;\n+    fn visit_estr_fixed(&self, n: uint, sz: uint, align: uint) -> bool;\n+\n+    fn visit_box(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_ptr(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_rptr(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+\n+    fn visit_vec(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_unboxed_vec(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_evec_box(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_evec_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_evec_slice(&self, mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_evec_fixed(&self, n: uint, sz: uint, align: uint,\n+                        mtbl: uint, inner: *TyDesc) -> bool;\n+\n+    fn visit_enter_rec(&self, n_fields: uint,\n+                       sz: uint, align: uint) -> bool;\n+    fn visit_rec_field(&self, i: uint, name: &str,\n+                       mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_rec(&self, n_fields: uint,\n+                       sz: uint, align: uint) -> bool;\n+\n+    fn visit_enter_class(&self, n_fields: uint,\n+                         sz: uint, align: uint) -> bool;\n+    fn visit_class_field(&self, i: uint, name: &str,\n+                         mtbl: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_class(&self, n_fields: uint,\n+                         sz: uint, align: uint) -> bool;\n+\n+    fn visit_enter_tup(&self, n_fields: uint,\n+                       sz: uint, align: uint) -> bool;\n+    fn visit_tup_field(&self, i: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_tup(&self, n_fields: uint,\n+                       sz: uint, align: uint) -> bool;\n+\n+    fn visit_enter_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint) -> bool;\n+    fn visit_enter_enum_variant(&self, variant: uint,\n+                                disr_val: int,\n+                                n_fields: uint,\n+                                name: &str) -> bool;\n+    fn visit_enum_variant_field(&self, i: uint, offset: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_enum_variant(&self, variant: uint,\n+                                disr_val: int,\n+                                n_fields: uint,\n+                                name: &str) -> bool;\n+    fn visit_leave_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint) -> bool;\n+\n+    fn visit_enter_fn(&self, purity: uint, proto: uint,\n+                      n_inputs: uint, retstyle: uint) -> bool;\n+    fn visit_fn_input(&self, i: uint, mode: uint, inner: *TyDesc) -> bool;\n+    fn visit_fn_output(&self, retstyle: uint, inner: *TyDesc) -> bool;\n+    fn visit_leave_fn(&self, purity: uint, proto: uint,\n+                      n_inputs: uint, retstyle: uint) -> bool;\n+\n+    fn visit_trait(&self) -> bool;\n+    fn visit_var(&self) -> bool;\n+    fn visit_var_integral(&self) -> bool;\n+    fn visit_param(&self, i: uint) -> bool;\n+    fn visit_self(&self) -> bool;\n+    fn visit_type(&self) -> bool;\n+    fn visit_opaque_box(&self) -> bool;\n+    fn visit_constr(&self, inner: *TyDesc) -> bool;\n+    fn visit_closure_ptr(&self, ck: uint) -> bool;\n+}\n+\n #[abi = \"rust-intrinsic\"]\n pub extern \"rust-intrinsic\" {\n \n@@ -159,6 +283,9 @@ pub extern \"rust-intrinsic\" {\n     pub fn pref_align_of<T>() -> uint;\n \n     /// Get a static pointer to a type descriptor.\n+    #[cfg(not(stage0))]\n+    pub fn get_tydesc<T>() -> *TyDesc;\n+    #[cfg(stage0)]\n     pub fn get_tydesc<T>() -> *();\n \n     /// Create a value initialized to zero.\n@@ -181,9 +308,8 @@ pub extern \"rust-intrinsic\" {\n     /// Returns `true` if a type requires drop glue.\n     pub fn needs_drop<T>() -> bool;\n \n-    // XXX: intrinsic uses legacy modes and has reference to TyDesc\n-    // and TyVisitor which are in librustc\n-    //fn visit_tydesc(++td: *TyDesc, &&tv: TyVisitor) -> ();\n+    #[cfg(not(stage0))]\n+    pub fn visit_tydesc(td: *TyDesc, tv: @TyVisitor);\n \n     pub fn frame_address(f: &once fn(*u8));\n "}, {"sha": "72b583078496f34bb10aa9bc37a9f95f3ac90bef", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -30,26 +30,33 @@ use sys;\n use sys::size_of;\n use uint;\n use unstable::intrinsics;\n+#[cfg(stage0)]\n+use intrinsic::{get_tydesc};\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::{get_tydesc};\n use vec;\n use util;\n \n #[cfg(not(test))] use cmp::Equiv;\n \n pub mod rustrt {\n     use libc;\n-    use sys;\n     use vec::raw;\n+    #[cfg(stage0)]\n+    use intrinsic::{TyDesc};\n+    #[cfg(not(stage0))]\n+    use unstable::intrinsics::{TyDesc};\n \n     #[abi = \"cdecl\"]\n     pub extern {\n         // These names are terrible. reserve_shared applies\n         // to ~[] and reserve_shared_actual applies to @[].\n         #[fast_ffi]\n-        unsafe fn vec_reserve_shared(t: *sys::TypeDesc,\n+        unsafe fn vec_reserve_shared(t: *TyDesc,\n                                      v: **raw::VecRepr,\n                                      n: libc::size_t);\n         #[fast_ffi]\n-        unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n+        unsafe fn vec_reserve_shared_actual(t: *TyDesc,\n                                             v: **raw::VecRepr,\n                                             n: libc::size_t);\n     }\n@@ -78,7 +85,7 @@ pub fn reserve<T>(v: &mut ~[T], n: uint) {\n     if capacity(v) < n {\n         unsafe {\n             let ptr: **raw::VecRepr = cast::transmute(v);\n-            let td = sys::get_type_desc::<T>();\n+            let td = get_tydesc::<T>();\n             if ((**ptr).box_header.ref_count ==\n                 managed::raw::RC_MANAGED_UNIQUE) {\n                 rustrt::vec_reserve_shared_actual(td, ptr, n as libc::size_t);"}, {"sha": "d40b96f077bb1f18208a243561855ef6a98ef099", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 99, "deletions": 105, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -331,21 +331,18 @@ pub mod special_idents {\n     pub static str : ident = ident { name: 19, ctxt: 0}; // for the type\n \n     /* outside of libsyntax */\n-    pub static ty_visitor : ident = ident { name: 20, ctxt: 0};\n-    pub static arg : ident = ident { name: 21, ctxt: 0};\n-    pub static descrim : ident = ident { name: 22, ctxt: 0};\n-    pub static clownshoe_abi : ident = ident { name: 23, ctxt: 0};\n-    pub static clownshoe_stack_shim : ident = ident { name: 24, ctxt: 0};\n-    pub static tydesc : ident = ident { name: 25, ctxt: 0};\n-    pub static main : ident = ident { name: 26, ctxt: 0};\n-    pub static opaque : ident = ident { name: 27, ctxt: 0};\n-    pub static blk : ident = ident { name: 28, ctxt: 0};\n-    pub static statik : ident = ident { name: 29, ctxt: 0};\n-    pub static intrinsic : ident = ident { name: 30, ctxt: 0};\n-    pub static clownshoes_foreign_mod: ident = ident { name: 31, ctxt: 0};\n-    pub static unnamed_field: ident = ident { name: 32, ctxt: 0};\n-    pub static c_abi: ident = ident { name: 33, ctxt: 0};\n-    pub static type_self: ident = ident { name: 34, ctxt: 0};    // `Self`\n+    pub static arg : ident = ident { name: 20, ctxt: 0};\n+    pub static descrim : ident = ident { name: 21, ctxt: 0};\n+    pub static clownshoe_abi : ident = ident { name: 22, ctxt: 0};\n+    pub static clownshoe_stack_shim : ident = ident { name: 23, ctxt: 0};\n+    pub static main : ident = ident { name: 24, ctxt: 0};\n+    pub static opaque : ident = ident { name: 25, ctxt: 0};\n+    pub static blk : ident = ident { name: 26, ctxt: 0};\n+    pub static statik : ident = ident { name: 27, ctxt: 0};\n+    pub static clownshoes_foreign_mod: ident = ident { name: 28, ctxt: 0};\n+    pub static unnamed_field: ident = ident { name: 29, ctxt: 0};\n+    pub static c_abi: ident = ident { name: 30, ctxt: 0};\n+    pub static type_self: ident = ident { name: 31, ctxt: 0};    // `Self`\n }\n \n /**\n@@ -426,59 +423,56 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"tt\",                 // 17\n         \"matchers\",           // 18\n         \"str\",                // 19\n-        \"TyVisitor\",          // 20\n-        \"arg\",                // 21\n-        \"descrim\",            // 22\n-        \"__rust_abi\",         // 23\n-        \"__rust_stack_shim\",  // 24\n-        \"TyDesc\",             // 25\n-        \"main\",               // 26\n-        \"<opaque>\",           // 27\n-        \"blk\",                // 28\n-        \"static\",             // 29\n-        \"intrinsic\",          // 30\n-        \"__foreign_mod__\",    // 31\n-        \"__field__\",          // 32\n-        \"C\",                  // 33\n-        \"Self\",               // 34\n-\n-        \"as\",                 // 35\n-        \"break\",              // 36\n-        \"const\",              // 37\n-        \"copy\",               // 38\n-        \"do\",                 // 39\n-        \"else\",               // 40\n-        \"enum\",               // 41\n-        \"extern\",             // 42\n-        \"false\",              // 43\n-        \"fn\",                 // 44\n-        \"for\",                // 45\n-        \"if\",                 // 46\n-        \"impl\",               // 47\n-        \"let\",                // 48\n-        \"__log\",              // 49\n-        \"loop\",               // 50\n-        \"match\",              // 51\n-        \"mod\",                // 52\n-        \"mut\",                // 53\n-        \"once\",               // 54\n-        \"priv\",               // 55\n-        \"pub\",                // 56\n-        \"pure\",               // 57\n-        \"ref\",                // 58\n-        \"return\",             // 59\n-        \"static\",             // 29 -- also a special ident\n+        \"arg\",                // 20\n+        \"descrim\",            // 21\n+        \"__rust_abi\",         // 22\n+        \"__rust_stack_shim\",  // 23\n+        \"main\",               // 24\n+        \"<opaque>\",           // 25\n+        \"blk\",                // 26\n+        \"static\",             // 27\n+        \"__foreign_mod__\",    // 28\n+        \"__field__\",          // 29\n+        \"C\",                  // 30\n+        \"Self\",               // 31\n+\n+        \"as\",                 // 32\n+        \"break\",              // 33\n+        \"const\",              // 34\n+        \"copy\",               // 35\n+        \"do\",                 // 36\n+        \"else\",               // 37\n+        \"enum\",               // 38\n+        \"extern\",             // 39\n+        \"false\",              // 40\n+        \"fn\",                 // 41\n+        \"for\",                // 42\n+        \"if\",                 // 43\n+        \"impl\",               // 44\n+        \"let\",                // 45\n+        \"__log\",              // 46\n+        \"loop\",               // 47\n+        \"match\",              // 48\n+        \"mod\",                // 49\n+        \"mut\",                // 50\n+        \"once\",               // 51\n+        \"priv\",               // 52\n+        \"pub\",                // 53\n+        \"pure\",               // 54\n+        \"ref\",                // 55\n+        \"return\",             // 56\n+        \"static\",             // 27 -- also a special ident\n         \"self\",               //  8 -- also a special ident\n-        \"struct\",             // 60\n-        \"super\",              // 61\n-        \"true\",               // 62\n-        \"trait\",              // 63\n-        \"type\",               // 64\n-        \"unsafe\",             // 65\n-        \"use\",                // 66\n-        \"while\",              // 67\n-\n-        \"be\",                 // 68\n+        \"struct\",             // 57\n+        \"super\",              // 58\n+        \"true\",               // 59\n+        \"trait\",              // 60\n+        \"type\",               // 61\n+        \"unsafe\",             // 62\n+        \"use\",                // 63\n+        \"while\",              // 64\n+\n+        \"be\",                 // 65\n     ];\n \n     @ident_interner {\n@@ -612,42 +606,42 @@ pub mod keywords {\n     impl Keyword {\n         pub fn to_ident(&self) -> ident {\n             match *self {\n-                As => ident { name: 35, ctxt: 0 },\n-                Break => ident { name: 36, ctxt: 0 },\n-                Const => ident { name: 37, ctxt: 0 },\n-                Copy => ident { name: 38, ctxt: 0 },\n-                Do => ident { name: 39, ctxt: 0 },\n-                Else => ident { name: 40, ctxt: 0 },\n-                Enum => ident { name: 41, ctxt: 0 },\n-                Extern => ident { name: 42, ctxt: 0 },\n-                False => ident { name: 43, ctxt: 0 },\n-                Fn => ident { name: 44, ctxt: 0 },\n-                For => ident { name: 45, ctxt: 0 },\n-                If => ident { name: 46, ctxt: 0 },\n-                Impl => ident { name: 47, ctxt: 0 },\n-                Let => ident { name: 48, ctxt: 0 },\n-                __Log => ident { name: 49, ctxt: 0 },\n-                Loop => ident { name: 50, ctxt: 0 },\n-                Match => ident { name: 51, ctxt: 0 },\n-                Mod => ident { name: 52, ctxt: 0 },\n-                Mut => ident { name: 53, ctxt: 0 },\n-                Once => ident { name: 54, ctxt: 0 },\n-                Priv => ident { name: 55, ctxt: 0 },\n-                Pub => ident { name: 56, ctxt: 0 },\n-                Pure => ident { name: 57, ctxt: 0 },\n-                Ref => ident { name: 58, ctxt: 0 },\n-                Return => ident { name: 59, ctxt: 0 },\n-                Static => ident { name: 29, ctxt: 0 },\n+                As => ident { name: 32, ctxt: 0 },\n+                Break => ident { name: 33, ctxt: 0 },\n+                Const => ident { name: 34, ctxt: 0 },\n+                Copy => ident { name: 35, ctxt: 0 },\n+                Do => ident { name: 36, ctxt: 0 },\n+                Else => ident { name: 37, ctxt: 0 },\n+                Enum => ident { name: 38, ctxt: 0 },\n+                Extern => ident { name: 39, ctxt: 0 },\n+                False => ident { name: 40, ctxt: 0 },\n+                Fn => ident { name: 41, ctxt: 0 },\n+                For => ident { name: 42, ctxt: 0 },\n+                If => ident { name: 43, ctxt: 0 },\n+                Impl => ident { name: 44, ctxt: 0 },\n+                Let => ident { name: 45, ctxt: 0 },\n+                __Log => ident { name: 46, ctxt: 0 },\n+                Loop => ident { name: 47, ctxt: 0 },\n+                Match => ident { name: 48, ctxt: 0 },\n+                Mod => ident { name: 49, ctxt: 0 },\n+                Mut => ident { name: 50, ctxt: 0 },\n+                Once => ident { name: 51, ctxt: 0 },\n+                Priv => ident { name: 52, ctxt: 0 },\n+                Pub => ident { name: 53, ctxt: 0 },\n+                Pure => ident { name: 54, ctxt: 0 },\n+                Ref => ident { name: 55, ctxt: 0 },\n+                Return => ident { name: 56, ctxt: 0 },\n+                Static => ident { name: 27, ctxt: 0 },\n                 Self => ident { name: 8, ctxt: 0 },\n-                Struct => ident { name: 60, ctxt: 0 },\n-                Super => ident { name: 61, ctxt: 0 },\n-                True => ident { name: 62, ctxt: 0 },\n-                Trait => ident { name: 63, ctxt: 0 },\n-                Type => ident { name: 64, ctxt: 0 },\n-                Unsafe => ident { name: 65, ctxt: 0 },\n-                Use => ident { name: 66, ctxt: 0 },\n-                While => ident { name: 67, ctxt: 0 },\n-                Be => ident { name: 68, ctxt: 0 },\n+                Struct => ident { name: 57, ctxt: 0 },\n+                Super => ident { name: 58, ctxt: 0 },\n+                True => ident { name: 59, ctxt: 0 },\n+                Trait => ident { name: 60, ctxt: 0 },\n+                Type => ident { name: 61, ctxt: 0 },\n+                Unsafe => ident { name: 62, ctxt: 0 },\n+                Use => ident { name: 63, ctxt: 0 },\n+                While => ident { name: 64, ctxt: 0 },\n+                Be => ident { name: 65, ctxt: 0 },\n             }\n         }\n     }\n@@ -663,7 +657,7 @@ pub fn is_keyword(kw: keywords::Keyword, tok: &Token) -> bool {\n pub fn is_any_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 29 | 35 .. 68 => true,\n+            8 | 27 | 32 .. 65 => true,\n             _ => false,\n         },\n         _ => false\n@@ -673,7 +667,7 @@ pub fn is_any_keyword(tok: &Token) -> bool {\n pub fn is_strict_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 29 | 35 .. 67 => true,\n+            8 | 27 | 32 .. 64 => true,\n             _ => false,\n         },\n         _ => false,\n@@ -683,7 +677,7 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            68 => true,\n+            65 => true,\n             _ => false,\n         },\n         _ => false,"}, {"sha": "de46d7b3e8ae7a05a4050557b2698962903d7de5", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -739,15 +739,6 @@ rust_task_deref(rust_task *task) {\n     task->deref();\n }\n \n-// Must call on rust stack.\n-extern \"C\" CDECL void\n-rust_call_tydesc_glue(void *root, size_t *tydesc, size_t glue_index) {\n-    void (*glue_fn)(void *, void *, void *) =\n-        (void (*)(void *, void *, void *))tydesc[glue_index];\n-    if (glue_fn)\n-        glue_fn(0, 0, root);\n-}\n-\n // Don't run on the Rust stack!\n extern \"C\" void\n rust_log_str(uint32_t level, const char *str, size_t size) {"}, {"sha": "81ae991623f8c7f06d8a5b3a9f4961d65ab086aa", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -183,7 +183,11 @@ void task_start_wrapper(spawn_args *a)\n     if(env) {\n         // free the environment (which should be a unique closure).\n         const type_desc *td = env->td;\n-        td->drop_glue(NULL, NULL, box_body(env));\n+        td->drop_glue(NULL,\n+#ifdef _RUST_STAGE0\n+                      NULL,\n+#endif\n+                      box_body(env));\n         task->kernel->region()->free(env);\n     }\n "}, {"sha": "30ff5f1fa54e2d399c6f8de792f2e90ae1c8bfe6", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -25,7 +25,11 @@ typedef void (*CDECL spawn_fn)(rust_opaque_box*, void *);\n \n struct type_desc;\n \n-typedef void CDECL (glue_fn)(void *, const type_desc **, void *);\n+typedef void CDECL (glue_fn)(void *,\n+#ifdef _RUST_STAGE0\n+                             const type_desc **,\n+#endif\n+                             void *);\n \n // Corresponds to the boxed data in the @ region.  The body follows the\n // header; you can obtain a ptr via box_body() below.\n@@ -57,8 +61,6 @@ struct type_desc {\n     glue_fn *drop_glue;\n     glue_fn *free_glue;\n     glue_fn *visit_glue;\n-    const uint8_t *unused;\n-    const uint8_t *unused2;\n };\n \n extern \"C\" type_desc *rust_clone_type_desc(type_desc*);"}, {"sha": "4a15830e529a0fb59ce4262cb5a60cfd9248fbdb", "filename": "src/rt/rust_util.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frust_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frust_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.cpp?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -21,8 +21,6 @@ struct type_desc str_body_tydesc = {\n     NULL, // drop_glue\n     NULL, // free_glue\n     NULL, // visit_glue\n-    NULL, // shape\n-    NULL, // shape_tables\n };\n \n //"}, {"sha": "a4876618c971573ecbc5756c86c72fdd642e79a2", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -176,7 +176,6 @@ rust_set_task_local_data\n rust_task_local_data_atexit\n rust_task_ref\n rust_task_deref\n-rust_call_tydesc_glue\n tdefl_compress_mem_to_heap\n tinfl_decompress_mem_to_heap\n rust_gc_metadata"}, {"sha": "27c45893930ca937a7399660d6292ebbdba28bc8", "filename": "src/test/run-pass/extern-pub.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pub.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -1,11 +1,5 @@\n-use std::libc;\n-use std::sys;\n-use std::vec;\n-\n extern {\n-    pub unsafe fn vec_reserve_shared_actual(t: *sys::TypeDesc,\n-                                            v: **vec::raw::VecRepr,\n-                                            n: libc::size_t);\n+    pub unsafe fn free(p: *u8);\n }\n \n pub fn main() {"}, {"sha": "176e49e0ea195b3b956ed05cb277b4ae7a0b82a6", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -10,15 +10,14 @@\n \n // xfail-fast\n \n-use std::bool;\n use std::int;\n use std::libc::c_void;\n use std::ptr;\n use std::sys;\n use std::vec::UnboxedVecRepr;\n-use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n+use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n \n-#[doc = \"High-level interfaces to `intrinsic::visit_ty` reflection system.\"]\n+#[doc = \"High-level interfaces to `std::unstable::intrinsics::visit_ty` reflection system.\"]\n \n /// Trait for visitor that wishes to reflect on data.\n trait movable_ptr {\n@@ -637,7 +636,9 @@ impl TyVisitor for my_visitor {\n }\n \n fn get_tydesc_for<T>(_t: T) -> *TyDesc {\n-    get_tydesc::<T>()\n+    unsafe {\n+        get_tydesc::<T>()\n+    }\n }\n \n struct Triple { x: int, y: int, z: int }\n@@ -651,8 +652,8 @@ pub fn main() {\n                                        vals: ~[]});\n         let v = ptr_visit_adaptor(Inner {inner: u});\n         let td = get_tydesc_for(r);\n-        unsafe { error!(\"tydesc sz: %u, align: %u\",\n-                        (*td).size, (*td).align); }\n+        error!(\"tydesc sz: %u, align: %u\",\n+               (*td).size, (*td).align);\n         let v = @v as @TyVisitor;\n         visit_tydesc(td, v);\n \n@@ -661,8 +662,7 @@ pub fn main() {\n             println(fmt!(\"val: %s\", *s));\n         }\n         error!(\"%?\", u.vals.clone());\n-        assert!(u.vals == ~[\n-            ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\", ~\"12\"\n-        ]);\n+        assert_eq!(u.vals.clone(),\n+                   ~[ ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\", ~\"12\"]);\n     }\n- }\n+}"}, {"sha": "bb1c92dfa8a730ab317c58e473d64e72c464d95a", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 96, "deletions": 85, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aee5da08db11dc597907bf228c2e716a408fdab/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=7aee5da08db11dc597907bf228c2e716a408fdab", "patch": "@@ -8,151 +8,162 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n-struct my_visitor(@mut { types: ~[str] });\n+use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n \n-impl TyVisitor for my_visitor {\n-    fn visit_bot() -> bool {\n-        self.types += ~[\"bot\"];\n+struct MyVisitor {\n+    types: @mut ~[~str],\n+}\n+\n+impl TyVisitor for MyVisitor {\n+    fn visit_bot(&self) -> bool {\n+        self.types.push(~\"bot\");\n         error!(\"visited bot type\");\n         true\n     }\n-    fn visit_nil() -> bool {\n-        self.types += ~[\"nil\"];\n+    fn visit_nil(&self) -> bool {\n+        self.types.push(~\"nil\");\n         error!(\"visited nil type\");\n         true\n     }\n-    fn visit_bool() -> bool {\n-        self.types += ~[\"bool\"];\n+    fn visit_bool(&self) -> bool {\n+        self.types.push(~\"bool\");\n         error!(\"visited bool type\");\n         true\n     }\n-    fn visit_int() -> bool {\n-        self.types += ~[\"int\"];\n+    fn visit_int(&self) -> bool {\n+        self.types.push(~\"int\");\n         error!(\"visited int type\");\n         true\n     }\n-    fn visit_i8() -> bool {\n-        self.types += ~[\"i8\"];\n+    fn visit_i8(&self) -> bool {\n+        self.types.push(~\"i8\");\n         error!(\"visited i8 type\");\n         true\n     }\n-    fn visit_i16() -> bool {\n-        self.types += ~[\"i16\"];\n+    fn visit_i16(&self) -> bool {\n+        self.types.push(~\"i16\");\n         error!(\"visited i16 type\");\n         true\n     }\n-    fn visit_i32() -> bool { true }\n-    fn visit_i64() -> bool { true }\n-\n-    fn visit_uint() -> bool { true }\n-    fn visit_u8() -> bool { true }\n-    fn visit_u16() -> bool { true }\n-    fn visit_u32() -> bool { true }\n-    fn visit_u64() -> bool { true }\n-\n-    fn visit_float() -> bool { true }\n-    fn visit_f32() -> bool { true }\n-    fn visit_f64() -> bool { true }\n-\n-    fn visit_char() -> bool { true }\n-    fn visit_str() -> bool { true }\n-\n-    fn visit_estr_box() -> bool { true }\n-    fn visit_estr_uniq() -> bool { true }\n-    fn visit_estr_slice() -> bool { true }\n-    fn visit_estr_fixed(_sz: uint, _sz: uint,\n+    fn visit_i32(&self) -> bool { true }\n+    fn visit_i64(&self) -> bool { true }\n+\n+    fn visit_uint(&self) -> bool { true }\n+    fn visit_u8(&self) -> bool { true }\n+    fn visit_u16(&self) -> bool { true }\n+    fn visit_u32(&self) -> bool { true }\n+    fn visit_u64(&self) -> bool { true }\n+\n+    fn visit_float(&self) -> bool { true }\n+    fn visit_f32(&self) -> bool { true }\n+    fn visit_f64(&self) -> bool { true }\n+\n+    fn visit_char(&self) -> bool { true }\n+    fn visit_str(&self) -> bool { true }\n+\n+    fn visit_estr_box(&self) -> bool { true }\n+    fn visit_estr_uniq(&self) -> bool { true }\n+    fn visit_estr_slice(&self) -> bool { true }\n+    fn visit_estr_fixed(&self,\n+                        _sz: uint, _sz: uint,\n                         _align: uint) -> bool { true }\n \n-    fn visit_box(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_uniq(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_ptr(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_rptr(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-\n-    fn visit_vec(_mtbl: uint, inner: *TyDesc) -> bool {\n-        self.types += ~[\"[\"];\n-        visit_tydesc(inner, my_visitor(*self) as TyVisitor);\n-        self.types += ~[\"]\"];\n+    fn visit_box(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_uniq(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_ptr(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_rptr(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+\n+    fn visit_vec(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_unboxed_vec(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_box(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_uniq(&self, _mtbl: uint, inner: *TyDesc) -> bool {\n+        self.types.push(~\"[\");\n+        unsafe {\n+            visit_tydesc(inner, (@*self) as @TyVisitor);\n+        }\n+        self.types.push(~\"]\");\n         true\n     }\n-    fn visit_unboxed_vec(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_evec_box(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_evec_uniq(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_evec_slice(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_evec_fixed(_n: uint, _sz: uint, _align: uint,\n+    fn visit_evec_slice(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_fixed(&self, _n: uint, _sz: uint, _align: uint,\n                         _mtbl: uint, _inner: *TyDesc) -> bool { true }\n \n-    fn visit_enter_rec(_n_fields: uint,\n+    fn visit_enter_rec(&self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n-    fn visit_rec_field(_i: uint, _name: &str,\n+    fn visit_rec_field(&self, _i: uint, _name: &str,\n                        _mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_rec(_n_fields: uint,\n+    fn visit_leave_rec(&self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_class(_n_fields: uint,\n+    fn visit_enter_class(&self, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n-    fn visit_class_field(_i: uint, _name: &str,\n+    fn visit_class_field(&self, _i: uint, _name: &str,\n                          _mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_class(_n_fields: uint,\n+    fn visit_leave_class(&self, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_tup(_n_fields: uint,\n+    fn visit_enter_tup(&self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n-    fn visit_tup_field(_i: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_tup(_n_fields: uint,\n+    fn visit_tup_field(&self, _i: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_leave_tup(&self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_enum(_n_variants: uint,\n+    fn visit_enter_enum(&self, _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool { true }\n-    fn visit_enter_enum_variant(_variant: uint,\n+    fn visit_enter_enum_variant(&self,\n+                                _variant: uint,\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n-    fn visit_enum_variant_field(_i: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_enum_variant(_variant: uint,\n+    fn visit_enum_variant_field(&self, _i: uint, _offset: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_leave_enum_variant(&self,\n+                                _variant: uint,\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n-    fn visit_leave_enum(_n_variants: uint,\n+    fn visit_leave_enum(&self,\n+                        _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_fn(_purity: uint, _proto: uint,\n+    fn visit_enter_fn(&self, _purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n-    fn visit_fn_input(_i: uint, _mode: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_fn_output(_retstyle: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_fn(_purity: uint, _proto: uint,\n+    fn visit_fn_input(&self, _i: uint, _mode: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_fn_output(&self, _retstyle: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_leave_fn(&self, _purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n \n-    fn visit_trait() -> bool { true }\n-    fn visit_var() -> bool { true }\n-    fn visit_var_integral() -> bool { true }\n-    fn visit_param(_i: uint) -> bool { true }\n-    fn visit_self() -> bool { true }\n-    fn visit_type() -> bool { true }\n-    fn visit_opaque_box() -> bool { true }\n-    fn visit_constr(_inner: *TyDesc) -> bool { true }\n-    fn visit_closure_ptr(_ck: uint) -> bool { true }\n+    fn visit_trait(&self) -> bool { true }\n+    fn visit_var(&self) -> bool { true }\n+    fn visit_var_integral(&self) -> bool { true }\n+    fn visit_param(&self, _i: uint) -> bool { true }\n+    fn visit_self(&self) -> bool { true }\n+    fn visit_type(&self) -> bool { true }\n+    fn visit_opaque_box(&self) -> bool { true }\n+    fn visit_constr(&self, _inner: *TyDesc) -> bool { true }\n+    fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }\n \n-fn visit_ty<T>(v: TyVisitor) {\n-    visit_tydesc(get_tydesc::<T>(), v);\n+fn visit_ty<T>(v: @TyVisitor) {\n+    unsafe {\n+        visit_tydesc(get_tydesc::<T>(), v);\n+    }\n }\n \n pub fn main() {\n-    let v = my_visitor(@mut {types: ~[]});\n-    let vv = v as TyVisitor;\n+    let v = @MyVisitor {types: @mut ~[]};\n+    let vv = v as @TyVisitor;\n \n     visit_ty::<bool>(vv);\n     visit_ty::<int>(vv);\n     visit_ty::<i8>(vv);\n     visit_ty::<i16>(vv);\n     visit_ty::<~[int]>(vv);\n \n-    for (v.types.clone()).each {|s|\n-        io::println(fmt!(\"type: %s\", s));\n+    for v.types.iter().advance |&s| {\n+        println(fmt!(\"type: %s\", s));\n     }\n-    assert!(v.types == [\"bool\", \"int\", \"i8\", \"i16\",\n-                       \"[\", \"int\", \"]\"]);\n+    assert_eq!((*v.types).clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n }"}]}