{"sha": "1a6f1ebad541e179f7418ce0102540cb15fb455e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmYxZWJhZDU0MWUxNzlmNzQxOGNlMDEwMjU0MGNiMTVmYjQ1NWU=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-10-15T22:11:06Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-10-15T22:11:06Z"}, "message": "shootout-reverse-complement: reimplement TwoSideIter using pointers", "tree": {"sha": "78e9cb4d1ae87ef355ef5c1b3d5147486f5772b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78e9cb4d1ae87ef355ef5c1b3d5147486f5772b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6f1ebad541e179f7418ce0102540cb15fb455e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6f1ebad541e179f7418ce0102540cb15fb455e", "html_url": "https://github.com/rust-lang/rust/commit/1a6f1ebad541e179f7418ce0102540cb15fb455e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6f1ebad541e179f7418ce0102540cb15fb455e/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8786a5cbac0c0868e28000f8936ae91fd2ef926", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8786a5cbac0c0868e28000f8936ae91fd2ef926", "html_url": "https://github.com/rust-lang/rust/commit/b8786a5cbac0c0868e28000f8936ae91fd2ef926"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "352d351973bc68c326a7acc56c4d903e8c3111cd", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f1ebad541e179f7418ce0102540cb15fb455e/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f1ebad541e179f7418ce0102540cb15fb455e/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=1a6f1ebad541e179f7418ce0102540cb15fb455e", "patch": "@@ -96,9 +96,9 @@ fn main() {\n         }\n \n         // reverse complement, as\n-        //    seq.reverse(); for c in seq.iter_mut() {*c = complements[*c]}\n+        //    seq.reverse(); for c in seq.iter_mut() { *c = complements[*c] }\n         // but faster:\n-        for (front, back) in TwoSideIterator::new(seq) {\n+        for (front, back) in two_side_iter(seq) {\n             let tmp = complements[*front as uint];\n             *front = complements[*back as uint];\n             *back = tmp;\n@@ -112,30 +112,39 @@ fn main() {\n     stdout().write(data.as_slice()).unwrap();\n }\n \n-pub struct TwoSideIterator<'a, T: 'a> {\n-    last: uint,\n-    nb: uint,\n-    cur: uint,\n-    slice: &'a mut [T]\n+pub struct TwoSideIter<'a, T: 'a> {\n+    first: *mut T,\n+    last: *mut T,\n+    marker: std::kinds::marker::ContravariantLifetime<'a>,\n+    marker2: std::kinds::marker::NoCopy\n }\n-impl<'a, T> TwoSideIterator<'a, T> {\n-    pub fn new(s: &'a mut [T]) -> TwoSideIterator<'a, T> {\n-        TwoSideIterator {\n-            last: s.len() - 1,\n-            nb: s.len() / 2,\n-            cur: 0,\n-            slice: s\n-        }\n+\n+pub fn two_side_iter<'a, T>(slice: &'a mut [T]) -> TwoSideIter<'a, T> {\n+    let len = slice.len();\n+    let first = slice.as_mut_ptr();\n+    let last = if len == 0 {\n+        first\n+    } else {\n+        unsafe { first.offset(len as int - 1) }\n+    };\n+\n+    TwoSideIter {\n+        first: first,\n+        last: last,\n+        marker: std::kinds::marker::ContravariantLifetime,\n+        marker2: std::kinds::marker::NoCopy\n     }\n }\n-impl<'a, T> Iterator<(&'a mut T, &'a mut T)> for TwoSideIterator<'a, T> {\n+\n+impl<'a, T> Iterator<(&'a mut T, &'a mut T)> for TwoSideIter<'a, T> {\n     fn next(&mut self) -> Option<(&'a mut T, &'a mut T)> {\n-        if self.cur >= self.nb { return None; }\n-        let res = unsafe {\n-            (std::mem::transmute(self.slice.unsafe_mut(self.cur)),\n-             std::mem::transmute(self.slice.unsafe_mut(self.last - self.cur)))\n-        };\n-        self.cur += 1;\n-        Some(res)\n+        if self.first < self.last {\n+            let result = unsafe { (&mut *self.first, &mut *self.last) };\n+            self.first = unsafe { self.first.offset(1) };\n+            self.last = unsafe { self.last.offset(-1) };\n+            Some(result)\n+        } else {\n+            None\n+        }\n     }\n }"}]}