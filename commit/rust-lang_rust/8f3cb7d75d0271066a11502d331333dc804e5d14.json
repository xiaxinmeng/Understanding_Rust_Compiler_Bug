{"sha": "8f3cb7d75d0271066a11502d331333dc804e5d14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmM2NiN2Q3NWQwMjcxMDY2YTExNTAyZDMzMTMzM2RjODA0ZTVkMTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-12-31T16:36:28Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-12-31T16:36:28Z"}, "message": "Make [A]Rc::allocate_for_layout() use try_allocate_for_layout()", "tree": {"sha": "b1b5c041dcc8ab2dc0a98baa567487b75dfddf64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1b5c041dcc8ab2dc0a98baa567487b75dfddf64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f3cb7d75d0271066a11502d331333dc804e5d14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3cb7d75d0271066a11502d331333dc804e5d14", "html_url": "https://github.com/rust-lang/rust/commit/8f3cb7d75d0271066a11502d331333dc804e5d14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f3cb7d75d0271066a11502d331333dc804e5d14/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "589aa8e29c8b21a450ea6a78a387f6c0ac060fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/589aa8e29c8b21a450ea6a78a387f6c0ac060fa4", "html_url": "https://github.com/rust-lang/rust/commit/589aa8e29c8b21a450ea6a78a387f6c0ac060fa4"}], "stats": {"total": 28, "additions": 5, "deletions": 23}, "files": [{"sha": "5f5c3c19a8115619abd2b8d3fef4c457b356b7d2", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f3cb7d75d0271066a11502d331333dc804e5d14/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3cb7d75d0271066a11502d331333dc804e5d14/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=8f3cb7d75d0271066a11502d331333dc804e5d14", "patch": "@@ -1107,20 +1107,10 @@ impl<T: ?Sized> Rc<T> {\n         // `&*(ptr as *const RcBox<T>)`, but this created a misaligned\n         // reference (see #54908).\n         let layout = Layout::new::<RcBox<()>>().extend(value_layout).unwrap().0.pad_to_align();\n-\n-        // Allocate for the layout.\n-        let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));\n-\n-        // Initialize the RcBox\n-        let inner = mem_to_rcbox(ptr.as_non_null_ptr().as_ptr());\n         unsafe {\n-            debug_assert_eq!(Layout::for_value(&*inner), layout);\n-\n-            ptr::write(&mut (*inner).strong, Cell::new(1));\n-            ptr::write(&mut (*inner).weak, Cell::new(1));\n+            Rc::try_allocate_for_layout(value_layout, allocate, mem_to_rcbox)\n+                .unwrap_or_else(|_| handle_alloc_error(layout))\n         }\n-\n-        inner\n     }\n \n     /// Allocates an `RcBox<T>` with sufficient space for\n@@ -1129,6 +1119,7 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// The function `mem_to_rcbox` is called with the data pointer\n     /// and must return back a (potentially fat)-pointer for the `RcBox<T>`.\n+    #[inline]\n     unsafe fn try_allocate_for_layout(\n         value_layout: Layout,\n         allocate: impl FnOnce(Layout) -> Result<NonNull<[u8]>, AllocError>,"}, {"sha": "83032f7feeedd34a2807319e8d29e44c286f66f5", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8f3cb7d75d0271066a11502d331333dc804e5d14/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3cb7d75d0271066a11502d331333dc804e5d14/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=8f3cb7d75d0271066a11502d331333dc804e5d14", "patch": "@@ -1085,19 +1085,10 @@ impl<T: ?Sized> Arc<T> {\n         // `&*(ptr as *const ArcInner<T>)`, but this created a misaligned\n         // reference (see #54908).\n         let layout = Layout::new::<ArcInner<()>>().extend(value_layout).unwrap().0.pad_to_align();\n-\n-        let ptr = allocate(layout).unwrap_or_else(|_| handle_alloc_error(layout));\n-\n-        // Initialize the ArcInner\n-        let inner = mem_to_arcinner(ptr.as_non_null_ptr().as_ptr());\n-        debug_assert_eq!(unsafe { Layout::for_value(&*inner) }, layout);\n-\n         unsafe {\n-            ptr::write(&mut (*inner).strong, atomic::AtomicUsize::new(1));\n-            ptr::write(&mut (*inner).weak, atomic::AtomicUsize::new(1));\n+            Arc::try_allocate_for_layout(value_layout, allocate, mem_to_arcinner)\n+                .unwrap_or_else(|_| handle_alloc_error(layout))\n         }\n-\n-        inner\n     }\n \n     /// Allocates an `ArcInner<T>` with sufficient space for"}]}