{"sha": "93154dd29cf315d0e58e7da9888e02fd18815540", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTU0ZGQyOWNmMzE1ZDBlNThlN2RhOTg4OGUwMmZkMTg4MTU1NDA=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2015-12-09T11:35:55Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2015-12-09T11:35:55Z"}, "message": "Fix `& ref ident` patterns for DSTs\n\nWe shouldn't load DSTs when recursing into the sub-pattern of `& ref ident`.\n\nFixes #30277", "tree": {"sha": "691da0813656805964c56ce0819dd7bfc627b61c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/691da0813656805964c56ce0819dd7bfc627b61c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93154dd29cf315d0e58e7da9888e02fd18815540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93154dd29cf315d0e58e7da9888e02fd18815540", "html_url": "https://github.com/rust-lang/rust/commit/93154dd29cf315d0e58e7da9888e02fd18815540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93154dd29cf315d0e58e7da9888e02fd18815540/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f95ae612432b38ebdd92c709f2608840f116280", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f95ae612432b38ebdd92c709f2608840f116280", "html_url": "https://github.com/rust-lang/rust/commit/6f95ae612432b38ebdd92c709f2608840f116280"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "0ad780fb0e4d33add43667cb0648c4b333736e4e", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93154dd29cf315d0e58e7da9888e02fd18815540/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93154dd29cf315d0e58e7da9888e02fd18815540/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=93154dd29cf315d0e58e7da9888e02fd18815540", "patch": "@@ -1944,8 +1944,16 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n         hir::PatBox(ref inner) => {\n             let pat_ty = node_id_type(bcx, inner.id);\n-            // Don't load DSTs, instead pass along a fat ptr\n-            let val = if type_is_sized(tcx, pat_ty) {\n+            // Pass along DSTs as fat pointers.\n+            let val = if type_is_fat_ptr(tcx, pat_ty) {\n+                // We need to check for this, as the pattern could be binding\n+                // a fat pointer by-value.\n+                if let hir::PatIdent(hir::BindByRef(_),_,_) = inner.node {\n+                    val.val\n+                } else {\n+                    Load(bcx, val.val)\n+                }\n+            } else if type_is_sized(tcx, pat_ty) {\n                 Load(bcx, val.val)\n             } else {\n                 val.val\n@@ -1955,8 +1963,16 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n         hir::PatRegion(ref inner, _) => {\n             let pat_ty = node_id_type(bcx, inner.id);\n-            // Don't load DSTs, instead pass along a fat ptr\n-            let val = if type_is_sized(tcx, pat_ty) {\n+            // Pass along DSTs as fat pointers.\n+            let val = if type_is_fat_ptr(tcx, pat_ty) {\n+                // We need to check for this, as the pattern could be binding\n+                // a fat pointer by-value.\n+                if let hir::PatIdent(hir::BindByRef(_),_,_) = inner.node {\n+                    val.val\n+                } else {\n+                    Load(bcx, val.val)\n+                }\n+            } else if type_is_sized(tcx, pat_ty) {\n                 Load(bcx, val.val)\n             } else {\n                 val.val"}, {"sha": "9f8067f372aef89cae35b5d49d1c7e952b192510", "filename": "src/test/run-pass/dst-irrefutable-bind.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93154dd29cf315d0e58e7da9888e02fd18815540/src%2Ftest%2Frun-pass%2Fdst-irrefutable-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93154dd29cf315d0e58e7da9888e02fd18815540/src%2Ftest%2Frun-pass%2Fdst-irrefutable-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-irrefutable-bind.rs?ref=93154dd29cf315d0e58e7da9888e02fd18815540", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Test<T: ?Sized>(T);\n+\n+fn main() {\n+    let x = Test([1,2,3]);\n+    let x : &Test<[i32]> = &x;\n+\n+    let & ref _y = x;\n+\n+    // Make sure binding to a fat pointer behind a reference\n+    // still works\n+    let slice = &[1,2,3];\n+    let x = Test(&slice);\n+    let Test(&_slice) = x;\n+}"}]}