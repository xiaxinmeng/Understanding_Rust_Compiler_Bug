{"sha": "95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f", "node_id": "C_kwDOAAsO6NoAKDk1ZTFiZDBkZjgzZTc1OTVkZmMwZWY5ZDQ0MTViN2U2MDFkOGZhNGY", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-05-02T08:09:08Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-05-02T08:09:08Z"}, "message": "add tests", "tree": {"sha": "56736ad081ae21a0f5467c403c8710c6c5077245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56736ad081ae21a0f5467c403c8710c6c5077245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmJvkacACgkQzXazX3c0\ndp6cAhAAif4Kh87e9Th1jZvk2rXy6UdpIPSg55/syZiREfslcLdaBJwZ1tCXBERL\ne984Nl5wedQ5G67x85cJWuc1z12rYy6n3GCYsmFSWbUaaykgP4i/TlqDXscC6FZv\nmP1uWmU1GWc9e22WrKa1XEbkTBXDhYoskZyls+InZY09aDKUBAvYl8uwmWQmPuKA\nhsQPXK0MDGgqj3cOSv7i0pRlQsXkIOvg2P7MGVc3AkgJNcr+sJrr92JBZZV7RajH\noINxO4JQMhnoVQpU9+5NhTTIUkPeOp9HvTVIUXlYBvR4Hl7mMnlg1EohhPhggsCa\nHy20CaEbkwWsca9PuRy2bUCQQrDh1UktGqHIzKRyKyAPJWW4X1SJQbs9+aA2sJbc\nHoq5iNOa2vbhJ1aodIV10lgAE/ExB6re7RNcie+SU470+8KhWgKm6S7fe7KrCkO1\nHIP7MDvNrzDgmsL0LgmcGRrCGBP1p1RXSy+EuZOZKW6B2H68FLSPASge5Wa0HVcA\ntFPeFyImFWyRDxmS3aTpUEhJqV7MJ3qtrqVpnRlpkWIs2jYRoJ03itxHkr7XnZdB\n2wDectGG6fb4OkzVIvP2YjqfRRjswwIcSLEu7Uwb8ZmEew3xcyDz1jMo4e6kRUZi\nvmPAAotlwaRL6AAvzEXr1E6xYu2EVZQW7MMMcA0f+KrHUxXkCUk=\n=6oE3\n-----END PGP SIGNATURE-----", "payload": "tree 56736ad081ae21a0f5467c403c8710c6c5077245\nparent da139693f6375415567725b949c26ddb0367b73c\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1651478948 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1651478948 +0200\n\nadd tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f", "html_url": "https://github.com/rust-lang/rust/commit/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da139693f6375415567725b949c26ddb0367b73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/da139693f6375415567725b949c26ddb0367b73c", "html_url": "https://github.com/rust-lang/rust/commit/da139693f6375415567725b949c26ddb0367b73c"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "313508a7966783fd99b46381d5dd8f7d3aafb3ff", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f", "patch": "@@ -1,6 +1,9 @@\n // FIXME: This is a complete copy of `cargo/src/cargo/util/read2.rs`\n // Consider unify the read2() in libstd, cargo and this to prevent further code duplication.\n \n+#[cfg(test)]\n+mod tests;\n+\n pub use self::imp::read2;\n use std::io::{self, Write};\n use std::mem::replace;"}, {"sha": "d66b501fc2b9f42273919d0c6df5f714f4b896bf", "filename": "src/tools/compiletest/src/read2/tests.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2%2Ftests.rs?ref=95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f", "patch": "@@ -0,0 +1,123 @@\n+use crate::read2::{ProcOutput, EXCLUDED_PLACEHOLDER_LEN, HEAD_LEN, TAIL_LEN};\n+\n+#[test]\n+fn test_abbreviate_short_string() {\n+    let mut out = ProcOutput::new();\n+    out.extend(b\"Hello world!\", &[]);\n+    assert_eq!(b\"Hello world!\", &*out.into_bytes());\n+}\n+\n+#[test]\n+fn test_abbreviate_short_string_multiple_steps() {\n+    let mut out = ProcOutput::new();\n+\n+    out.extend(b\"Hello \", &[]);\n+    out.extend(b\"world!\", &[]);\n+\n+    assert_eq!(b\"Hello world!\", &*out.into_bytes());\n+}\n+\n+#[test]\n+fn test_abbreviate_long_string() {\n+    let mut out = ProcOutput::new();\n+\n+    let data = vec![b'.'; HEAD_LEN + TAIL_LEN + 16];\n+    out.extend(&data, &[]);\n+\n+    let mut expected = vec![b'.'; HEAD_LEN];\n+    expected.extend_from_slice(b\"\\n\\n<<<<<< SKIPPED 16 BYTES >>>>>>\\n\\n\");\n+    expected.extend_from_slice(&vec![b'.'; TAIL_LEN]);\n+\n+    // We first check the length to avoid endless terminal output if the length differs, since\n+    // `out` is hundreds of KBs in size.\n+    let out = out.into_bytes();\n+    assert_eq!(expected.len(), out.len());\n+    assert_eq!(expected, out);\n+}\n+\n+#[test]\n+fn test_abbreviate_long_string_multiple_steps() {\n+    let mut out = ProcOutput::new();\n+\n+    out.extend(&vec![b'.'; HEAD_LEN], &[]);\n+    out.extend(&vec![b'.'; TAIL_LEN], &[]);\n+    // Also test whether the rotation works\n+    out.extend(&vec![b'!'; 16], &[]);\n+    out.extend(&vec![b'?'; 16], &[]);\n+\n+    let mut expected = vec![b'.'; HEAD_LEN];\n+    expected.extend_from_slice(b\"\\n\\n<<<<<< SKIPPED 32 BYTES >>>>>>\\n\\n\");\n+    expected.extend_from_slice(&vec![b'.'; TAIL_LEN - 32]);\n+    expected.extend_from_slice(&vec![b'!'; 16]);\n+    expected.extend_from_slice(&vec![b'?'; 16]);\n+\n+    // We first check the length to avoid endless terminal output if the length differs, since\n+    // `out` is hundreds of KBs in size.\n+    let out = out.into_bytes();\n+    assert_eq!(expected.len(), out.len());\n+    assert_eq!(expected, out);\n+}\n+\n+#[test]\n+fn test_abbreviate_exclusions_are_detected() {\n+    let mut out = ProcOutput::new();\n+    let exclusions = &[\"foo\".to_string(), \"quux\".to_string()];\n+\n+    out.extend(b\"Hello foo\", exclusions);\n+    // Check items from a previous extension are not double-counted.\n+    out.extend(b\"! This is a qu\", exclusions);\n+    // Check items are detected across extensions.\n+    out.extend(b\"ux.\", exclusions);\n+\n+    match out {\n+        ProcOutput::Full { excluded_len, .. } => assert_eq!(\n+            excluded_len,\n+            EXCLUDED_PLACEHOLDER_LEN * exclusions.len() as isize\n+                - exclusions.iter().map(|i| i.len() as isize).sum::<isize>()\n+        ),\n+        ProcOutput::Abbreviated { .. } => panic!(\"out should not be abbreviated\"),\n+    }\n+\n+    assert_eq!(b\"Hello foo! This is a quux.\", &*out.into_bytes());\n+}\n+\n+#[test]\n+fn test_abbreviate_exclusions_avoid_abbreviations() {\n+    let mut out = ProcOutput::new();\n+    let exclusions = &[std::iter::repeat('a').take(64).collect::<String>()];\n+\n+    let mut expected = vec![b'.'; HEAD_LEN - EXCLUDED_PLACEHOLDER_LEN as usize];\n+    expected.extend_from_slice(exclusions[0].as_bytes());\n+    expected.extend_from_slice(&vec![b'.'; TAIL_LEN]);\n+\n+    out.extend(&expected, exclusions);\n+\n+    // We first check the length to avoid endless terminal output if the length differs, since\n+    // `out` is hundreds of KBs in size.\n+    let out = out.into_bytes();\n+    assert_eq!(expected.len(), out.len());\n+    assert_eq!(expected, out);\n+}\n+\n+#[test]\n+fn test_abbreviate_exclusions_can_still_cause_abbreviations() {\n+    let mut out = ProcOutput::new();\n+    let exclusions = &[std::iter::repeat('a').take(64).collect::<String>()];\n+\n+    let mut input = vec![b'.'; HEAD_LEN];\n+    input.extend_from_slice(&vec![b'.'; TAIL_LEN]);\n+    input.extend_from_slice(exclusions[0].as_bytes());\n+\n+    let mut expected = vec![b'.'; HEAD_LEN];\n+    expected.extend_from_slice(b\"\\n\\n<<<<<< SKIPPED 64 BYTES >>>>>>\\n\\n\");\n+    expected.extend_from_slice(&vec![b'.'; TAIL_LEN - 64]);\n+    expected.extend_from_slice(&vec![b'a'; 64]);\n+\n+    out.extend(&input, exclusions);\n+\n+    // We first check the length to avoid endless terminal output if the length differs, since\n+    // `out` is hundreds of KBs in size.\n+    let out = out.into_bytes();\n+    assert_eq!(expected.len(), out.len());\n+    assert_eq!(expected, out);\n+}"}]}