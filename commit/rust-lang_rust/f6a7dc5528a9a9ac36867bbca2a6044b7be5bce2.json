{"sha": "f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YTdkYzU1MjhhOWE5YWMzNjg2N2JiY2EyYTYwNDRiN2JlNWJjZTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:19:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:19:55Z"}, "message": "rollup merge of #20726: dgrunwald/require-parens-for-chained-comparison\n\n[Rendered RFC](https://github.com/rust-lang/rfcs/blob/master/text/0558-require-parentheses-for-chained-comparisons.md)", "tree": {"sha": "859fba6e5162e3f46fe8bf62900d1674f15683be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859fba6e5162e3f46fe8bf62900d1674f15683be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2", "html_url": "https://github.com/rust-lang/rust/commit/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb344be99d6b491017558ffbd015b9a0b86e8558", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb344be99d6b491017558ffbd015b9a0b86e8558", "html_url": "https://github.com/rust-lang/rust/commit/cb344be99d6b491017558ffbd015b9a0b86e8558"}, {"sha": "1cc69c484eadec5e54f178a9fcfaff21b5d25cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc69c484eadec5e54f178a9fcfaff21b5d25cf4", "html_url": "https://github.com/rust-lang/rust/commit/1cc69c484eadec5e54f178a9fcfaff21b5d25cf4"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "836deeffde1b0cb2137cf4df76b3f9287908c976", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2", "patch": "@@ -85,6 +85,13 @@ pub fn is_shift_binop(b: BinOp) -> bool {\n     }\n }\n \n+pub fn is_comparison_binop(b: BinOp) -> bool {\n+    match b {\n+        BiEq | BiLt | BiLe | BiNe | BiGt | BiGe => true,\n+        _ => false\n+    }\n+}\n+\n /// Returns `true` if the binary operator takes its arguments by value\n pub fn is_by_value_binop(b: BinOp) -> bool {\n     match b {\n@@ -317,8 +324,7 @@ pub fn operator_prec(op: ast::BinOp) -> uint {\n       BiBitAnd                  =>  8u,\n       BiBitXor                  =>  7u,\n       BiBitOr                   =>  6u,\n-      BiLt | BiLe | BiGe | BiGt =>  4u,\n-      BiEq | BiNe               =>  3u,\n+      BiLt | BiLe | BiGe | BiGt | BiEq | BiNe => 3u,\n       BiAnd                     =>  2u,\n       BiOr                      =>  1u\n   }"}, {"sha": "3bb9e6692a09742bcb6cd49944d15fd4e6694146", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2", "patch": "@@ -16,7 +16,7 @@ use ast::{AssociatedType, BareFnTy};\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{ProvidedMethod, Public, Unsafety};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n-use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, Block};\n+use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, BiLt, BiGt, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n use ast::{Crate, CrateConfig, Decl, DeclItem};\n use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n@@ -2906,6 +2906,9 @@ impl<'a> Parser<'a> {\n         let cur_opt = self.token.to_binop();\n         match cur_opt {\n             Some(cur_op) => {\n+                if ast_util::is_comparison_binop(cur_op) {\n+                    self.check_no_chained_comparison(&*lhs, cur_op)\n+                }\n                 let cur_prec = operator_prec(cur_op);\n                 if cur_prec > min_prec {\n                     self.bump();\n@@ -2934,6 +2937,25 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Produce an error if comparison operators are chained (RFC #558).\n+    /// We only need to check lhs, not rhs, because all comparison ops\n+    /// have same precedence and are left-associative\n+    fn check_no_chained_comparison(&mut self, lhs: &Expr, outer_op: ast::BinOp) {\n+        debug_assert!(ast_util::is_comparison_binop(outer_op));\n+        match lhs.node {\n+            ExprBinary(op, _, _) if ast_util::is_comparison_binop(op) => {\n+                let op_span = self.span;\n+                self.span_err(op_span,\n+                    \"Chained comparison operators require parentheses\");\n+                if op == BiLt && outer_op == BiGt {\n+                    self.span_help(op_span,\n+                        \"Use ::< instead of < if you meant to specify type arguments.\");\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     /// Parse an assignment expression....\n     /// actually, this seems to be the main entry point for\n     /// parsing an arbitrary expression."}, {"sha": "7513815ad730c2b27ab2e8749e4531b4b3e527f2", "filename": "src/test/compile-fail/require-parens-for-chained-comparison.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/src%2Ftest%2Fcompile-fail%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/src%2Ftest%2Fcompile-fail%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frequire-parens-for-chained-comparison.rs?ref=f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<T>() {}\n+\n+fn main() {\n+    false == false == false;\n+    //~^ ERROR: Chained comparison operators require parentheses\n+\n+    false == 0 < 2;\n+    //~^ ERROR: Chained comparison operators require parentheses\n+\n+    f<X>();\n+    //~^ ERROR: Chained comparison operators require parentheses\n+    //~^^ HELP: Use ::< instead of < if you meant to specify type arguments.\n+}"}, {"sha": "604f7ba3255cd2410c3d04234722dc9f0633a7b9", "filename": "src/test/compile-fail/unsized2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/src%2Ftest%2Fcompile-fail%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2/src%2Ftest%2Fcompile-fail%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized2.rs?ref=f6a7dc5528a9a9ac36867bbca2a6044b7be5bce2", "patch": "@@ -13,5 +13,8 @@\n fn f<X>() {}\n \n pub fn main() {\n-    f<type>(); //~ ERROR expected identifier, found keyword `type`\n+    f<type>();\n+    //~^ ERROR expected identifier, found keyword `type`\n+    //~^^ ERROR: Chained comparison operators require parentheses\n+    //~^^^ HELP: Use ::< instead of < if you meant to specify type arguments.\n }"}]}