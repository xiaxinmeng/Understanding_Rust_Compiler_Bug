{"sha": "eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDlhYWEyNjgxYWVjMzRlNDFmNDhjYTRlNDdiM2U4YzZmMWU0OTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-08T19:34:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T13:05:57Z"}, "message": "Extract create_jit_module function", "tree": {"sha": "02d979a30aea003a80dc1fff1ab1771fff74ceee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d979a30aea003a80dc1fff1ab1771fff74ceee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490", "html_url": "https://github.com/rust-lang/rust/commit/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4d270d5030b48d815a0ca19f28c78888847be11", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d270d5030b48d815a0ca19f28c78888847be11", "html_url": "https://github.com/rust-lang/rust/commit/d4d270d5030b48d815a0ca19f28c78888847be11"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "3ff96d710e58e2a461c07fe710b0633b25a631b4", "filename": "src/driver/aot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490", "patch": "@@ -107,7 +107,6 @@ fn module_codegen(\n \n     let isa = crate::build_isa(tcx.sess, &backend_config);\n     let mut module = crate::backend::make_module(tcx.sess, isa, cgu_name.as_str().to_string());\n-    assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n \n     let mut cx = crate::CodegenCx::new(\n         tcx,"}, {"sha": "f7fe02bb0160c3e4bd58e7be14435601fced47be", "filename": "src/driver/jit.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490", "patch": "@@ -23,6 +23,33 @@ thread_local! {\n     static LAZY_JIT_STATE: RefCell<Option<JitState>> = RefCell::new(None);\n }\n \n+fn create_jit_module<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    backend_config: &BackendConfig,\n+    hotswap: bool,\n+) -> (JITModule, CodegenCx<'tcx>) {\n+    let imported_symbols = load_imported_symbols_for_jit(tcx);\n+\n+    let isa = crate::build_isa(tcx.sess, backend_config);\n+    let mut jit_builder = JITBuilder::with_isa(isa, cranelift_module::default_libcall_names());\n+    jit_builder.hotswap(hotswap);\n+    crate::compiler_builtins::register_functions_for_jit(&mut jit_builder);\n+    jit_builder.symbols(imported_symbols);\n+    let mut jit_module = JITModule::new(jit_builder);\n+\n+    let mut cx = crate::CodegenCx::new(tcx, backend_config.clone(), jit_module.isa(), false);\n+\n+    crate::allocator::codegen(tcx, &mut jit_module, &mut cx.unwind_context);\n+    crate::main_shim::maybe_create_entry_wrapper(\n+        tcx,\n+        &mut jit_module,\n+        &mut cx.unwind_context,\n+        true,\n+    );\n+\n+    (jit_module, cx)\n+}\n+\n pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     if !tcx.sess.opts.output_types.should_codegen() {\n         tcx.sess.fatal(\"JIT mode doesn't work with `cargo check`\");\n@@ -32,15 +59,11 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         tcx.sess.fatal(\"can't jit non-executable crate\");\n     }\n \n-    let imported_symbols = load_imported_symbols_for_jit(tcx);\n-\n-    let isa = crate::build_isa(tcx.sess, &backend_config);\n-    let mut jit_builder = JITBuilder::with_isa(isa, cranelift_module::default_libcall_names());\n-    jit_builder.hotswap(matches!(backend_config.codegen_mode, CodegenMode::JitLazy));\n-    crate::compiler_builtins::register_functions_for_jit(&mut jit_builder);\n-    jit_builder.symbols(imported_symbols);\n-    let mut jit_module = JITModule::new(jit_builder);\n-    assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n+    let (mut jit_module, mut cx) = create_jit_module(\n+        tcx,\n+        &backend_config,\n+        matches!(backend_config.codegen_mode, CodegenMode::JitLazy),\n+    );\n \n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     let mono_items = cgus\n@@ -51,8 +74,6 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    let mut cx = crate::CodegenCx::new(tcx, backend_config.clone(), jit_module.isa(), false);\n-\n     super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n         super::predefine_mono_items(tcx, &mut jit_module, &mono_items);\n         for (mono_item, _) in mono_items {\n@@ -77,20 +98,10 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         }\n     });\n \n-    jit_module.finalize_definitions();\n-\n     if !cx.global_asm.is_empty() {\n         tcx.sess.fatal(\"Inline asm is not supported in JIT mode\");\n     }\n \n-    crate::allocator::codegen(tcx, &mut jit_module, &mut cx.unwind_context);\n-    crate::main_shim::maybe_create_entry_wrapper(\n-        tcx,\n-        &mut jit_module,\n-        &mut cx.unwind_context,\n-        true,\n-    );\n-\n     tcx.sess.abort_if_errors();\n \n     jit_module.finalize_definitions();"}, {"sha": "2c989520f6a56f918a70087969f59196b252a0d4", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490", "patch": "@@ -134,6 +134,8 @@ impl<'tcx> CodegenCx<'tcx> {\n         isa: &dyn TargetIsa,\n         debug_info: bool,\n     ) -> Self {\n+        assert_eq!(pointer_ty(tcx), isa.pointer_type());\n+\n         let unwind_context =\n             UnwindContext::new(tcx, isa, matches!(backend_config.codegen_mode, CodegenMode::Aot));\n         let debug_context = if debug_info { Some(DebugContext::new(tcx, isa)) } else { None };"}, {"sha": "4beb6c65a7791e15f7e89c6fb18cb44a5e65ec9b", "filename": "src/main_shim.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=eed9aaa2681aec34e41f48ca4e47b3e8c6f1e490", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     tcx: TyCtxt<'_>,\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n-    ignore_lang_start_wrapper: bool,\n+    is_jit: bool,\n ) {\n     let (main_def_id, is_main_fn) = match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, entry_ty)) => (\n@@ -24,18 +24,11 @@ pub(crate) fn maybe_create_entry_wrapper(\n     };\n \n     let instance = Instance::mono(tcx, main_def_id).polymorphize(tcx);\n-    if module.get_name(&*tcx.symbol_name(instance).name).is_none() {\n+    if !is_jit && module.get_name(&*tcx.symbol_name(instance).name).is_none() {\n         return;\n     }\n \n-    create_entry_fn(\n-        tcx,\n-        module,\n-        unwind_context,\n-        main_def_id,\n-        ignore_lang_start_wrapper,\n-        is_main_fn,\n-    );\n+    create_entry_fn(tcx, module, unwind_context, main_def_id, is_jit, is_main_fn);\n \n     fn create_entry_fn(\n         tcx: TyCtxt<'_>,"}]}