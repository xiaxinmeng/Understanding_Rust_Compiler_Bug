{"sha": "b9119edc55287bb1a9b5609bdef84001c3341e22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTE5ZWRjNTUyODdiYjFhOWI1NjA5YmRlZjg0MDAxYzMzNDFlMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-16T03:40:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-16T03:40:14Z"}, "message": "auto merge of #7114 : pnkfelix/rust/issue3961-fix-whitespace-detection, r=brson\n\nr?  (yes, the review request is back, now that I got it building against incom... I mean master!)\r\n\r\n(Attempting to port from orphaned pull-request #6764 )\r\n\r\nFix for #3961. Also includes a test case to illustrate the issues. (All of the entries that say \"should align\" should align with each other, and the four lines near the end that say \"compare _\" for _ in {A,B,C,D} should line up with each other.)\r\n\r\nBefore applying this change set:\r\n-- the \"(should align)\"'s are all over the place, and the form/line feeding spaces are not cut out as one might or might not expect.\r\n-- compare B and D do not match A and C.\r\n\r\n(To be honest, its hard to really say what the right behavior is here, and people who are expecting a particular behavior out of a pretty printer in these cases may well get burned.)", "tree": {"sha": "77af5c825954526dfb8cddf081e37c27fcdc0e93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77af5c825954526dfb8cddf081e37c27fcdc0e93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9119edc55287bb1a9b5609bdef84001c3341e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9119edc55287bb1a9b5609bdef84001c3341e22", "html_url": "https://github.com/rust-lang/rust/commit/b9119edc55287bb1a9b5609bdef84001c3341e22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9119edc55287bb1a9b5609bdef84001c3341e22/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c989b79127c5062df0a64d8c383de93c82a3d9b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c989b79127c5062df0a64d8c383de93c82a3d9b7", "html_url": "https://github.com/rust-lang/rust/commit/c989b79127c5062df0a64d8c383de93c82a3d9b7"}, {"sha": "876f6deb4af73d3a6a9845c8ca0a9edff0e25989", "url": "https://api.github.com/repos/rust-lang/rust/commits/876f6deb4af73d3a6a9845c8ca0a9edff0e25989", "html_url": "https://github.com/rust-lang/rust/commit/876f6deb4af73d3a6a9845c8ca0a9edff0e25989"}], "stats": {"total": 262, "additions": 248, "deletions": 14}, "files": [{"sha": "b7bb1b3bc5356876265d59a947d07cac350f0ab4", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b9119edc55287bb1a9b5609bdef84001c3341e22/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9119edc55287bb1a9b5609bdef84001c3341e22/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=b9119edc55287bb1a9b5609bdef84001c3341e22", "patch": "@@ -197,26 +197,35 @@ fn read_line_comments(rdr: @mut StringReader, code_to_the_left: bool,\n     }\n }\n \n-// FIXME #3961: This is not the right way to convert string byte\n-// offsets to characters.\n-fn all_whitespace(s: &str, begin: uint, end: uint) -> bool {\n-    let mut i: uint = begin;\n-    while i != end {\n-        if !is_whitespace(s[i] as char) { return false; } i += 1u;\n+// Returns None if the first col chars of s contain a non-whitespace char.\n+// Otherwise returns Some(k) where k is first char offset after that leading\n+// whitespace.  Note k may be outside bounds of s.\n+fn all_whitespace(s: &str, col: CharPos) -> Option<uint> {\n+    let len = s.len();\n+    let mut col = col.to_uint();\n+    let mut cursor: uint = 0;\n+    while col > 0 && cursor < len {\n+        let r: str::CharRange = s.char_range_at(cursor);\n+        if !r.ch.is_whitespace() {\n+            return None;\n+        }\n+        cursor = r.next;\n+        col -= 1;\n     }\n-    return true;\n+    return Some(cursor);\n }\n \n fn trim_whitespace_prefix_and_push_line(lines: &mut ~[~str],\n                                         s: ~str, col: CharPos) {\n     let len = s.len();\n-    // FIXME #3961: Doing bytewise comparison and slicing with CharPos\n-    let col = col.to_uint();\n-    let s1 = if all_whitespace(s, 0, uint::min(len, col)) {\n-        if col < len {\n-            s.slice(col, len).to_owned()\n-        } else {  ~\"\" }\n-    } else { s };\n+    let s1 = match all_whitespace(s, col) {\n+        Some(col) => {\n+            if col < len {\n+                s.slice(col, len).to_owned()\n+            } else {  ~\"\" }\n+        }\n+        None => s,\n+    };\n     debug!(\"pushing line: %s\", s1);\n     lines.push(s1);\n }"}, {"sha": "911de166e8fc7955473cd7faaa2f5957a74f33be", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/b9119edc55287bb1a9b5609bdef84001c3341e22/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/b9119edc55287bb1a9b5609bdef84001c3341e22/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=b9119edc55287bb1a9b5609bdef84001c3341e22", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is meant as a test case for Issue 3961.\n+//\n+// Test via: rustc --pretty normal src/test/pretty/block-comment-wchar.rs\n+//\n+// pp-exact:block-comment-wchar.pp\n+fn f() {\n+    fn nested() {\n+        /*\n+          Spaced2\n+        */\n+        /*\n+          Spaced10\n+        */\n+        /*\n+          Tabbed8+2\n+        */\n+        /*\n+          CR8+2\n+        */\n+    }\n+    /*\n+      Spaced2:                       (prefixed so start of space aligns with comment)\n+    */\n+    /*\n+    \t\tTabbed2: (more indented b/c *start* of space will align with comment)\n+    */\n+    /*\n+      Spaced6:                       (Alignment removed and realigning spaces inserted)\n+    */\n+    /*\n+      Tabbed4+2:                     (Alignment removed and realigning spaces inserted)\n+    */\n+\n+    /*\n+      VT4+2:                         (should align)\n+    */\n+    /*\n+      FF4+2:                         (should align)\n+    */\n+    /*\n+      CR4+2:                         (should align)\n+    */\n+    /*\n+    // (NEL deliberately omitted)\n+    */\n+    /*\n+      Ogham Space Mark 4+2:          (should align)\n+    */\n+    /*\n+      Mongolian Vowel Separator 4+2: (should align)\n+    */\n+    /*\n+      Four-per-em space 4+2:         (should align)\n+    */\n+\n+    /*\n+      Mongolian Vowel Sep   count 1: (should align)\n+      Mongolian Vowel Sep   count 2: (should align)\n+      Mongolian Vowel Sep   count 3: (should align)\n+      Mongolian Vowel Sep   count 4: (should align)\n+      Mongolian Vowel Sep   count 5: (should align)\n+      Mongolian Vowel Sep   count 6: (should align)\n+      Mongolian Vowel Sep   count 7: (should align)\n+      Mongolian Vowel Sep   count 8: (should align)\n+      Mongolian Vowel Sep   count 9: (should align)\n+      Mongolian Vowel Sep   count A: (should align)\n+      Mongolian Vowel Sep   count B: (should align)\n+      Mongolian Vowel Sep   count C: (should align)\n+      Mongolian Vowel Sep   count D: (should align)\n+      Mongolian Vowel Sep   count E: (should align)\n+      Mongolian Vowel Sep   count F: (should align)\n+    */\n+\n+\n+\n+    /* */\n+\n+    /*\n+      Hello from offset 6\n+      Space 6+2:                     compare A\n+      Mongolian Vowel Separator 6+2: compare B\n+    */\n+\n+    /*\u180e*/\n+\n+    /*\n+      Hello from another offset 6 with wchars establishing column offset\n+      Space 6+2:                     compare C\n+      Mongolian Vowel Separator 6+2: compare D\n+    */\n+}\n+\n+fn main() {\n+    // Taken from http://en.wikipedia.org/wiki/Whitespace_character\n+    let chars =\n+        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20',\n+         // '\\x85', // for some reason Rust thinks NEL isn't whitespace\n+         '\\xA0', '\\u1680', '\\u180E', '\\u2000', '\\u2001', '\\u2002', '\\u2003',\n+         '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200A',\n+         '\\u2028', '\\u2029', '\\u202F', '\\u205F', '\\u3000'];\n+     // <= bugs in pretty-printer?\n+    for chars.each |c| {\n+        let ws = c.is_whitespace();\n+        println(fmt!(\"%? %?\" , c , ws));\n+    }\n+}"}, {"sha": "d8a820542a7214daa04507aed52c800822a7e550", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/b9119edc55287bb1a9b5609bdef84001c3341e22/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9119edc55287bb1a9b5609bdef84001c3341e22/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=b9119edc55287bb1a9b5609bdef84001c3341e22", "patch": "@@ -0,0 +1,109 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is meant as a test case for Issue 3961.\n+//\n+// Test via: rustc --pretty normal src/test/pretty/block-comment-wchar.rs\n+//\n+// pp-exact:block-comment-wchar.pp\n+fn f() {\n+    fn nested() {\n+        /*\n+  Spaced2\n+        */\n+        /*\n+          Spaced10\n+        */\n+        /*\n+\t\t\t\t\t\t\t\t  Tabbed8+2\n+        */\n+        /*\n+\r\r\r\r\r\r\r\r  CR8+2\n+        */\n+    }\n+    /*\n+  Spaced2:                       (prefixed so start of space aligns with comment)\n+    */\n+    /*\n+\t\tTabbed2: (more indented b/c *start* of space will align with comment)\n+    */\n+    /*\n+      Spaced6:                       (Alignment removed and realigning spaces inserted)\n+    */\n+    /*\n+\t\t\t\t  Tabbed4+2:                     (Alignment removed and realigning spaces inserted)\n+    */\n+\n+    /*\n+\u000b\u000b\u000b\u000b  VT4+2:                         (should align)\n+    */\n+    /*\n+\f\f\f\f  FF4+2:                         (should align)\n+    */\n+    /*\n+\r\r\r\r  CR4+2:                         (should align)\n+    */\n+    /*\n+    // (NEL deliberately omitted)\n+    */\n+    /*\n+\u1680\u1680\u1680\u1680  Ogham Space Mark 4+2:          (should align)\n+    */\n+    /*\n+\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 4+2: (should align)\n+    */\n+    /*\n+\u2005\u2005\u2005\u2005  Four-per-em space 4+2:         (should align)\n+    */\n+\n+    /*\n+   \u180e  Mongolian Vowel Sep   count 1: (should align)\n+  \u180e   Mongolian Vowel Sep   count 2: (should align)\n+  \u180e\u180e  Mongolian Vowel Sep   count 3: (should align)\n+ \u180e    Mongolian Vowel Sep   count 4: (should align)\n+ \u180e \u180e  Mongolian Vowel Sep   count 5: (should align)\n+ \u180e\u180e   Mongolian Vowel Sep   count 6: (should align)\n+ \u180e\u180e\u180e  Mongolian Vowel Sep   count 7: (should align)\n+\u180e     Mongolian Vowel Sep   count 8: (should align)\n+\u180e  \u180e  Mongolian Vowel Sep   count 9: (should align)\n+\u180e \u180e   Mongolian Vowel Sep   count A: (should align)\n+\u180e \u180e\u180e  Mongolian Vowel Sep   count B: (should align)\n+\u180e\u180e    Mongolian Vowel Sep   count C: (should align)\n+\u180e\u180e \u180e  Mongolian Vowel Sep   count D: (should align)\n+\u180e\u180e\u180e   Mongolian Vowel Sep   count E: (should align)\n+\u180e\u180e\u180e\u180e  Mongolian Vowel Sep   count F: (should align)\n+    */\n+\n+\n+/* */ /*\n+        Hello from offset 6\n+        Space 6+2:                     compare A\n+\u180e\u180e\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 6+2: compare B\n+      */\n+/*\u180e*/ /*\n+        Hello from another offset 6 with wchars establishing column offset\n+        Space 6+2:                     compare C\n+\u180e\u180e\u180e\u180e\u180e\u180e  Mongolian Vowel Separator 6+2: compare D\n+      */\n+}\n+\n+fn main() {\n+    // Taken from http://en.wikipedia.org/wiki/Whitespace_character\n+    let chars =\n+        ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20',\n+         // '\\x85', // for some reason Rust thinks NEL isn't whitespace\n+         '\\xA0', '\\u1680', '\\u180E', '\\u2000', '\\u2001', '\\u2002', '\\u2003',\n+         '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200A',\n+         '\\u2028', '\\u2029', '\\u202F', '\\u205F', '\\u3000'];\n+    for chars.each |c| {\n+        let ws = c.is_whitespace();\n+        println(fmt!(\"%? %?\", c , ws)); // <= bugs in pretty-printer?\n+    }\n+}"}]}