{"sha": "68bcd202fe2fcf2748ce091071ea2242c228248b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YmNkMjAyZmUyZmNmMjc0OGNlMDkxMDcxZWEyMjQyYzIyODI0OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-08T23:25:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-08T23:25:57Z"}, "message": "Auto merge of #6569 - camsteffen:symbol-comparison, r=Manishearth\n\nInternal lint symbol comparisons\n\nchangelog: none\n\n* Added awareness of `rustc_span::symbol::kw::*` symbols.\n* Compare with const symbols: `symbol.as_str() == \"self\"` => `symbol == kw::SelfLower`\n* Don't compare symbols by string: `a.as_str() == b.as_str()` => `a == b`\n* Lint comparing with `to_ident_string` or `to_string` instead of `Symbol::as_str`.", "tree": {"sha": "d8a7d3ecd7db043cf94b558c6965bd457c209b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a7d3ecd7db043cf94b558c6965bd457c209b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68bcd202fe2fcf2748ce091071ea2242c228248b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68bcd202fe2fcf2748ce091071ea2242c228248b", "html_url": "https://github.com/rust-lang/rust/commit/68bcd202fe2fcf2748ce091071ea2242c228248b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68bcd202fe2fcf2748ce091071ea2242c228248b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2950c8e1cb32e864b599c4b4dae896d29d86e5e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2950c8e1cb32e864b599c4b4dae896d29d86e5e7", "html_url": "https://github.com/rust-lang/rust/commit/2950c8e1cb32e864b599c4b4dae896d29d86e5e7"}, {"sha": "7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "html_url": "https://github.com/rust-lang/rust/commit/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5"}], "stats": {"total": 367, "additions": 309, "deletions": 58}, "files": [{"sha": "9a00fc535fc5c297f818bb4614599c6c227816cb", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -399,7 +399,7 @@ fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n         if let Some(meta_item) = lint.meta_item();\n         if meta_item.path.segments.len() > 1;\n         if let tool_name = meta_item.path.segments[0].ident;\n-        if tool_name.as_str() == \"clippy\";\n+        if tool_name.name == sym::clippy;\n         let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n         then {\n             return Some(lint_name.as_str());"}, {"sha": "58511c6d57c686dedd3c01f5f29a4a19d4fddec4", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -145,7 +145,7 @@ impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n fn is_mutex_lock_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if_chain! {\n         if let ExprKind::MethodCall(path, _span, args, _) = &expr.kind;\n-        if path.ident.to_string() == \"lock\";\n+        if path.ident.as_str() == \"lock\";\n         let ty = cx.typeck_results().expr_ty(&args[0]);\n         if is_type_diagnostic_item(cx, ty, sym!(mutex_type));\n         then {"}, {"sha": "f12994c7a605e21a7e8cafde3bd1cd7d489672c5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -526,6 +526,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n         #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::PRODUCE_ICE,\n+        #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::UNNECESSARY_SYMBOL_STR,\n         &approx_const::APPROX_CONSTANT,\n         &arithmetic::FLOAT_ARITHMETIC,\n         &arithmetic::INTEGER_ARITHMETIC,\n@@ -1372,6 +1374,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n         LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n         LintId::of(&utils::internal_lints::PRODUCE_ICE),\n+        LintId::of(&utils::internal_lints::UNNECESSARY_SYMBOL_STR),\n     ]);\n \n     store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "89f5b2ff31137f0fe949b6706823361939d5c140", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** It checks for manual implementations of `async` functions.\n@@ -137,7 +137,7 @@ fn future_output_ty<'tcx>(trait_ref: &'tcx TraitRef<'tcx>) -> Option<&'tcx Ty<'t\n         if let Some(args) = segment.args;\n         if args.bindings.len() == 1;\n         let binding = &args.bindings[0];\n-        if binding.ident.as_str() == \"Output\";\n+        if binding.ident.name == sym::Output;\n         if let TypeBindingKind::Equality{ty: output} = binding.kind;\n         then {\n             return Some(output)"}, {"sha": "1818836d5d5e836afa476aeb5da4564bf2278192", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n         if_chain! {\n             if let hir::ExprKind::MethodCall(ref method, _, ref args, _) = e.kind;\n             if args.len() == 2;\n-            if method.ident.as_str() == \"map\";\n+            if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if is_type_diagnostic_item(cx, ty, sym::option_type) || match_trait_method(cx, e, &paths::ITERATOR);\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;"}, {"sha": "9f9c108a85a0537610a14d98fb6547c43d9cc372", "filename": "clippy_lints/src/map_identity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for MapIdentity {\n fn get_map_argument<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a [Expr<'a>]> {\n     if_chain! {\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n-        if args.len() == 2 && method.ident.as_str() == \"map\";\n+        if args.len() == 2 && method.ident.name == sym::map;\n         let caller_ty = cx.typeck_results().expr_ty(&args[0]);\n         if match_trait_method(cx, expr, &paths::ITERATOR)\n             || is_type_diagnostic_item(cx, caller_ty, sym::result_type)"}, {"sha": "f13f2491d6e9619f4f049b0ed6bf0ec157c75c6d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -3095,7 +3095,7 @@ fn lint_flat_map_identity<'tcx>(\n             if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = body.value.kind;\n \n             if path.segments.len() == 1;\n-            if path.segments[0].ident.as_str() == binding_ident.as_str();\n+            if path.segments[0].ident.name == binding_ident.name;\n \n             then {\n                 apply_lint(\"called `flat_map(|x| x)` on an `Iterator`\");"}, {"sha": "8d0c3b8e0fe89f39921c198656a553095e85e689", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -89,9 +89,9 @@ fn min_max<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<(MinMax, Cons\n                 if let [obj, _] = args;\n                 if cx.typeck_results().expr_ty(obj).is_floating_point() || match_trait_method(cx, expr, &paths::ORD);\n                 then {\n-                    if path.ident.as_str() == sym!(max).as_str() {\n+                    if path.ident.name == sym!(max) {\n                         fetch_const(cx, args, MinMax::Max)\n-                    } else if path.ident.as_str() == sym!(min).as_str() {\n+                    } else if path.ident.name == sym!(min) {\n                         fetch_const(cx, args, MinMax::Min)\n                     } else {\n                         None"}, {"sha": "0e49eaab4368578a203c4f14600efa133267a17b", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -63,7 +63,7 @@ impl MissingDoc {\n             if let Some(meta) = list.get(0);\n             if let Some(name) = meta.ident();\n             then {\n-                name.as_str() == \"include\"\n+                name.name == sym::include\n             } else {\n                 false\n             }"}, {"sha": "1984942a9145ef49319362d8f3a14f4a04de321a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -13,6 +13,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n@@ -153,7 +154,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             // Ignore `self`s.\n             if idx == 0 {\n                 if let PatKind::Binding(.., ident, _) = arg.pat.kind {\n-                    if ident.as_str() == \"self\" {\n+                    if ident.name == kw::SelfLower {\n                         continue;\n                     }\n                 }"}, {"sha": "58c00541af731142e828b671b4f52e89c8fb25c6", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -66,7 +66,7 @@ declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n /// Returns true iff the given expression is the result of calling `Result::ok`\n fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     if let ExprKind::MethodCall(ref path, _, &[ref receiver], _) = &expr.kind {\n-        path.ident.name.to_ident_string() == \"ok\"\n+        path.ident.name.as_str() == \"ok\"\n             && is_type_diagnostic_item(cx, &cx.typeck_results().expr_ty(&receiver), sym::result_type)\n     } else {\n         false"}, {"sha": "4ae22468f78c7d216af5c07c59831466ab954b94", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -389,5 +389,5 @@ fn is_self_shadow(name: Symbol, expr: &Expr<'_>) -> bool {\n }\n \n fn path_eq_name(name: Symbol, path: &Path<'_>) -> bool {\n-    !path.is_global() && path.segments.len() == 1 && path.segments[0].ident.as_str() == name.as_str()\n+    !path.is_global() && path.segments.len() == 1 && path.segments[0].ident.name == name\n }"}, {"sha": "699fd51ccc194e30d2f16bc978cef70cbb39aba7", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -91,7 +91,7 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n             if let ExprKind::Path(QPath::Resolved(None, ref rhs2)) = rhs2.kind;\n             if rhs2.segments.len() == 1;\n \n-            if ident.as_str() == rhs2.segments[0].ident.as_str();\n+            if ident.name == rhs2.segments[0].ident.name;\n             if eq_expr_value(cx, tmp_init, lhs1);\n             if eq_expr_value(cx, rhs1, lhs2);\n             then {"}, {"sha": "9b45d38afd42f5eeed1a3064e2fbefd2845dd995", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -183,7 +183,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n             Param { pat: Pat { kind: PatKind::Binding(_, _, right_ident, _), .. }, .. }\n         ] = &closure_body.params;\n         if let ExprKind::MethodCall(method_path, _, [ref left_expr, ref right_expr], _) = &closure_body.value.kind;\n-        if method_path.ident.name.to_ident_string() == \"cmp\";\n+        if method_path.ident.name == sym::cmp;\n         then {\n             let (closure_body, closure_arg, reverse) = if mirrored_exprs(\n                 &cx,"}, {"sha": "c53348539860524ce55b0e9db2fadfd55ca07314", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -80,10 +80,10 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         );\n                     }\n                 }\n-                if match_trait_method(cx, e, &paths::INTO_ITERATOR) && &*name.ident.as_str() == \"into_iter\" {\n+                if match_trait_method(cx, e, &paths::INTO_ITERATOR) && name.ident.name == sym::into_iter {\n                     if let Some(parent_expr) = get_parent_expr(cx, e) {\n                         if let ExprKind::MethodCall(ref parent_name, ..) = parent_expr.kind {\n-                            if &*parent_name.ident.as_str() != \"into_iter\" {\n+                            if parent_name.ident.name != sym::into_iter {\n                                 return;\n                             }\n                         }"}, {"sha": "8d28421d70d707fdec87dcbf03a059f5d63ada2c", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -1,6 +1,7 @@\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_session::Session;\n+use rustc_span::sym;\n use std::str::FromStr;\n \n /// Deprecation status of attributes known by Clippy.\n@@ -64,11 +65,11 @@ pub fn get_attr<'a>(\n             return false;\n         };\n         let attr_segments = &attr.path.segments;\n-        if attr_segments.len() == 2 && attr_segments[0].ident.to_string() == \"clippy\" {\n+        if attr_segments.len() == 2 && attr_segments[0].ident.name == sym::clippy {\n             BUILTIN_ATTRIBUTES\n                 .iter()\n-                .find_map(|(builtin_name, deprecation_status)| {\n-                    if *builtin_name == attr_segments[1].ident.to_string() {\n+                .find_map(|&(builtin_name, ref deprecation_status)| {\n+                    if attr_segments[1].ident.name.as_str() == builtin_name {\n                         Some(deprecation_status)\n                     } else {\n                         None\n@@ -99,7 +100,7 @@ pub fn get_attr<'a>(\n                             },\n                             DeprecationStatus::None => {\n                                 diag.cancel();\n-                                attr_segments[1].ident.to_string() == name\n+                                attr_segments[1].ident.name.as_str() == name\n                             },\n                         }\n                     },"}, {"sha": "8d8ad497be6ab5f22c7641be42b97e5086cc2757", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n             (&ExprKind::Continue(li), &ExprKind::Continue(ri)) => {\n-                both(&li.label, &ri.label, |l, r| l.ident.as_str() == r.ident.as_str())\n+                both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n             },\n             (&ExprKind::Assign(ref ll, ref lr, _), &ExprKind::Assign(ref rl, ref rr, _)) => {\n                 self.allow_side_effects && self.eq_expr(ll, rl) && self.eq_expr(lr, rr)\n@@ -102,7 +102,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                     })\n             },\n             (&ExprKind::Break(li, ref le), &ExprKind::Break(ri, ref re)) => {\n-                both(&li.label, &ri.label, |l, r| l.ident.as_str() == r.ident.as_str())\n+                both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n                     && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprKind::Box(ref l), &ExprKind::Box(ref r)) => self.eq_expr(l, r),\n@@ -121,7 +121,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             },\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n             (&ExprKind::Loop(ref lb, ref ll, ref lls), &ExprKind::Loop(ref rb, ref rl, ref rls)) => {\n-                lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.as_str() == r.ident.as_str())\n+                lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.name == r.ident.name)\n             },\n             (&ExprKind::Match(ref le, ref la, ref ls), &ExprKind::Match(ref re, ref ra, ref rs)) => {\n                 ls == rs\n@@ -188,7 +188,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n \n     pub fn eq_fieldpat(&mut self, left: &FieldPat<'_>, right: &FieldPat<'_>) -> bool {\n         let (FieldPat { ident: li, pat: lp, .. }, FieldPat { ident: ri, pat: rp, .. }) = (&left, &right);\n-        li.name.as_str() == ri.name.as_str() && self.eq_pat(lp, rp)\n+        li.name == ri.name && self.eq_pat(lp, rp)\n     }\n \n     /// Checks whether two patterns are the same.\n@@ -202,7 +202,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                 self.eq_qpath(lp, rp) && over(la, ra, |l, r| self.eq_pat(l, r)) && ls == rs\n             },\n             (&PatKind::Binding(ref lb, .., ref li, ref lp), &PatKind::Binding(ref rb, .., ref ri, ref rp)) => {\n-                lb == rb && li.name.as_str() == ri.name.as_str() && both(lp, rp, |l, r| self.eq_pat(l, r))\n+                lb == rb && li.name == ri.name && both(lp, rp, |l, r| self.eq_pat(l, r))\n             },\n             (&PatKind::Path(ref l), &PatKind::Path(ref r)) => self.eq_qpath(l, r),\n             (&PatKind::Lit(ref l), &PatKind::Lit(ref r)) => self.eq_expr(l, r),\n@@ -263,8 +263,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn eq_path_segment(&mut self, left: &PathSegment<'_>, right: &PathSegment<'_>) -> bool {\n         // The == of idents doesn't work with different contexts,\n         // we have to be explicit about hygiene\n-        left.ident.as_str() == right.ident.as_str()\n-            && both(&left.args, &right.args, |l, r| self.eq_path_parameters(l, r))\n+        left.ident.name == right.ident.name && both(&left.args, &right.args, |l, r| self.eq_path_parameters(l, r))\n     }\n \n     pub fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {"}, {"sha": "59a1852aba9219563ee1e36b8ee970ca210cbc33", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 168, "deletions": 16, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -10,9 +10,12 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Node, Path, StmtKind, Ty, TyKind};\n+use rustc_hir::{\n+    BinOpKind, Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Node, Path, StmtKind, Ty, TyKind, UnOp,\n+};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::interpret::ConstValue;\n@@ -272,6 +275,28 @@ declare_clippy_lint! {\n     \"interning a symbol that is pre-interned and defined as a constant\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for unnecessary conversion from Symbol to a string.\n+    ///\n+    /// **Why is this bad?** It's faster use symbols directly intead of strings.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// symbol.as_str() == \"clippy\";\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// symbol == sym::clippy;\n+    /// ```\n+    pub UNNECESSARY_SYMBOL_STR,\n+    internal,\n+    \"unnecessary conversion between Symbol and string\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -868,28 +893,30 @@ impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n \n #[derive(Default)]\n pub struct InterningDefinedSymbol {\n-    // Maps the symbol value to the constant name.\n-    symbol_map: FxHashMap<u32, String>,\n+    // Maps the symbol value to the constant DefId.\n+    symbol_map: FxHashMap<u32, DefId>,\n }\n \n-impl_lint_pass!(InterningDefinedSymbol => [INTERNING_DEFINED_SYMBOL]);\n+impl_lint_pass!(InterningDefinedSymbol => [INTERNING_DEFINED_SYMBOL, UNNECESSARY_SYMBOL_STR]);\n \n impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n         if !self.symbol_map.is_empty() {\n             return;\n         }\n \n-        if let Some(Res::Def(_, def_id)) = path_to_res(cx, &paths::SYM_MODULE) {\n-            for item in cx.tcx.item_children(def_id).iter() {\n-                if_chain! {\n-                    if let Res::Def(DefKind::Const, item_def_id) = item.res;\n-                    let ty = cx.tcx.type_of(item_def_id);\n-                    if match_type(cx, ty, &paths::SYMBOL);\n-                    if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n-                    if let Ok(value) = value.to_u32();\n-                    then {\n-                        self.symbol_map.insert(value, item.ident.to_string());\n+        for &module in &[&paths::KW_MODULE, &paths::SYM_MODULE] {\n+            if let Some(Res::Def(_, def_id)) = path_to_res(cx, module) {\n+                for item in cx.tcx.item_children(def_id).iter() {\n+                    if_chain! {\n+                        if let Res::Def(DefKind::Const, item_def_id) = item.res;\n+                        let ty = cx.tcx.type_of(item_def_id);\n+                        if match_type(cx, ty, &paths::SYMBOL);\n+                        if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n+                        if let Ok(value) = value.to_u32();\n+                        then {\n+                            self.symbol_map.insert(value, item_def_id);\n+                        }\n                     }\n                 }\n             }\n@@ -903,18 +930,143 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n             if match_def_path(cx, *def_id, &paths::SYMBOL_INTERN);\n             if let Some(Constant::Str(arg)) = constant_simple(cx, cx.typeck_results(), arg);\n             let value = Symbol::intern(&arg).as_u32();\n-            if let Some(symbol_const) = self.symbol_map.get(&value);\n+            if let Some(&def_id) = self.symbol_map.get(&value);\n             then {\n                 span_lint_and_sugg(\n                     cx,\n                     INTERNING_DEFINED_SYMBOL,\n                     is_expn_of(expr.span, \"sym\").unwrap_or(expr.span),\n                     \"interning a defined symbol\",\n                     \"try\",\n-                    format!(\"rustc_span::symbol::sym::{}\", symbol_const),\n+                    cx.tcx.def_path_str(def_id),\n                     Applicability::MachineApplicable,\n                 );\n             }\n         }\n+        if let ExprKind::Binary(op, left, right) = expr.kind {\n+            if matches!(op.node, BinOpKind::Eq | BinOpKind::Ne) {\n+                let data = [\n+                    (left, self.symbol_str_expr(left, cx)),\n+                    (right, self.symbol_str_expr(right, cx)),\n+                ];\n+                match data {\n+                    // both operands are a symbol string\n+                    [(_, Some(left)), (_, Some(right))] => {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            UNNECESSARY_SYMBOL_STR,\n+                            expr.span,\n+                            \"unnecessary `Symbol` to string conversion\",\n+                            \"try\",\n+                            format!(\n+                                \"{} {} {}\",\n+                                left.as_symbol_snippet(cx),\n+                                op.node.as_str(),\n+                                right.as_symbol_snippet(cx),\n+                            ),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n+                    // one of the operands is a symbol string\n+                    [(expr, Some(symbol)), _] | [_, (expr, Some(symbol))] => {\n+                        // creating an owned string for comparison\n+                        if matches!(symbol, SymbolStrExpr::Expr { is_to_owned: true, .. }) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                UNNECESSARY_SYMBOL_STR,\n+                                expr.span,\n+                                \"unnecessary string allocation\",\n+                                \"try\",\n+                                format!(\"{}.as_str()\", symbol.as_symbol_snippet(cx)),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    },\n+                    // nothing found\n+                    [(_, None), (_, None)] => {},\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl InterningDefinedSymbol {\n+    fn symbol_str_expr<'tcx>(&self, expr: &'tcx Expr<'tcx>, cx: &LateContext<'tcx>) -> Option<SymbolStrExpr<'tcx>> {\n+        static IDENT_STR_PATHS: &[&[&str]] = &[&paths::IDENT_AS_STR, &paths::TO_STRING_METHOD];\n+        static SYMBOL_STR_PATHS: &[&[&str]] = &[\n+            &paths::SYMBOL_AS_STR,\n+            &paths::SYMBOL_TO_IDENT_STRING,\n+            &paths::TO_STRING_METHOD,\n+        ];\n+        // SymbolStr might be de-referenced: `&*symbol.as_str()`\n+        let call = if_chain! {\n+            if let ExprKind::AddrOf(_, _, e) = expr.kind;\n+            if let ExprKind::Unary(UnOp::UnDeref, e) = e.kind;\n+            then { e } else { expr }\n+        };\n+        if_chain! {\n+            // is a method call\n+            if let ExprKind::MethodCall(_, _, [item], _) = call.kind;\n+            if let Some(did) = cx.typeck_results().type_dependent_def_id(call.hir_id);\n+            let ty = cx.typeck_results().expr_ty(item);\n+            // ...on either an Ident or a Symbol\n+            if let Some(is_ident) = if match_type(cx, ty, &paths::SYMBOL) {\n+                Some(false)\n+            } else if match_type(cx, ty, &paths::IDENT) {\n+                Some(true)\n+            } else {\n+                None\n+            };\n+            // ...which converts it to a string\n+            let paths = if is_ident { IDENT_STR_PATHS } else { SYMBOL_STR_PATHS };\n+            if let Some(path) = paths.iter().find(|path| match_def_path(cx, did, path));\n+            then {\n+                let is_to_owned = path.last().unwrap().ends_with(\"string\");\n+                return Some(SymbolStrExpr::Expr {\n+                    item,\n+                    is_ident,\n+                    is_to_owned,\n+                });\n+            }\n+        }\n+        // is a string constant\n+        if let Some(Constant::Str(s)) = constant_simple(cx, cx.typeck_results(), expr) {\n+            let value = Symbol::intern(&s).as_u32();\n+            // ...which matches a symbol constant\n+            if let Some(&def_id) = self.symbol_map.get(&value) {\n+                return Some(SymbolStrExpr::Const(def_id));\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+enum SymbolStrExpr<'tcx> {\n+    /// a string constant with a corresponding symbol constant\n+    Const(DefId),\n+    /// a \"symbol to string\" expression like `symbol.as_str()`\n+    Expr {\n+        /// part that evaluates to `Symbol` or `Ident`\n+        item: &'tcx Expr<'tcx>,\n+        is_ident: bool,\n+        /// whether an owned `String` is created like `to_ident_string()`\n+        is_to_owned: bool,\n+    },\n+}\n+\n+impl<'tcx> SymbolStrExpr<'tcx> {\n+    /// Returns a snippet that evaluates to a `Symbol` and is const if possible\n+    fn as_symbol_snippet(&self, cx: &LateContext<'_>) -> Cow<'tcx, str> {\n+        match *self {\n+            Self::Const(def_id) => cx.tcx.def_path_str(def_id).into(),\n+            Self::Expr { item, is_ident, .. } => {\n+                let mut snip = snippet(cx, item.span.source_callsite(), \"..\");\n+                if is_ident {\n+                    // get `Ident.name`\n+                    snip.to_mut().push_str(\".name\");\n+                }\n+                snip\n+            },\n+        }\n     }\n }"}, {"sha": "c0b203b5388dce969ecb3a77662022d32d2532b8", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -54,6 +54,10 @@ pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n+#[cfg(feature = \"internal-lints\")]\n+pub const IDENT: [&str; 3] = [\"rustc_span\", \"symbol\", \"Ident\"];\n+#[cfg(feature = \"internal-lints\")]\n+pub const IDENT_AS_STR: [&str; 4] = [\"rustc_span\", \"symbol\", \"Ident\", \"as_str\"];\n pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n@@ -65,6 +69,8 @@ pub const IPADDR_V4: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 4] = [\"std\", \"net\", \"IpAddr\", \"V6\"];\n pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n #[cfg(feature = \"internal-lints\")]\n+pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n #[cfg(feature = \"internal-lints\")]\n@@ -148,8 +154,12 @@ pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_wit\n #[cfg(feature = \"internal-lints\")]\n pub const SYMBOL: [&str; 3] = [\"rustc_span\", \"symbol\", \"Symbol\"];\n #[cfg(feature = \"internal-lints\")]\n+pub const SYMBOL_AS_STR: [&str; 4] = [\"rustc_span\", \"symbol\", \"Symbol\", \"as_str\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const SYMBOL_INTERN: [&str; 4] = [\"rustc_span\", \"symbol\", \"Symbol\", \"intern\"];\n #[cfg(feature = \"internal-lints\")]\n+pub const SYMBOL_TO_IDENT_STRING: [&str; 4] = [\"rustc_span\", \"symbol\", \"Symbol\", \"to_ident_string\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const SYM_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"sym\"];\n #[cfg(feature = \"internal-lints\")]\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];"}, {"sha": "e632a7e57ee87b22fd351a80a3497bec5804a4de", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -158,7 +158,7 @@ fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Op\n             ExprKind::Path(QPath::TypeRelative(ty, name))\n                 if is_type_diagnostic_item(cx, cx.typeck_results().node_type(ty.hir_id), sym::vec_type) =>\n             {\n-                if name.ident.name.as_str() == \"new\" {\n+                if name.ident.name == sym::new {\n                     return Some(VecInitKind::New);\n                 } else if name.ident.name.as_str() == \"with_capacity\" {\n                     return args.get(0).and_then(|arg| {"}, {"sha": "10005a7fc81ed1381abdada242234bcbbcb802de", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -7,7 +7,8 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::BytePos;\n+use rustc_span::symbol::kw;\n+use rustc_span::{sym, BytePos};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `use Enum::*`.\n@@ -198,12 +199,12 @@ impl WildcardImports {\n // Allow \"...prelude::..::*\" imports.\n // Many crates have a prelude, and it is imported as a glob by design.\n fn is_prelude_import(segments: &[PathSegment<'_>]) -> bool {\n-    segments.iter().any(|ps| ps.ident.as_str() == \"prelude\")\n+    segments.iter().any(|ps| ps.ident.name == sym::prelude)\n }\n \n // Allow \"super::*\" imports in tests.\n fn is_super_only_import(segments: &[PathSegment<'_>]) -> bool {\n-    segments.len() == 1 && segments[0].ident.as_str() == \"super\"\n+    segments.len() == 1 && segments[0].ident.name == kw::Super\n }\n \n fn is_test_module_or_function(item: &Item<'_>) -> bool {"}, {"sha": "af324f831dfa2e9fc16f9f412003a63d80585f42", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -10,7 +10,8 @@ use rustc_lexer::unescape::{self, EscapeError};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_parse::parser;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{sym, BytePos, Span, Symbol};\n+use rustc_span::symbol::kw;\n+use rustc_span::{sym, BytePos, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** This lint warns when you use `println!(\"\")` to\n@@ -301,7 +302,7 @@ impl EarlyLintPass for Write {\n             }\n         } else if mac.path == sym!(writeln) {\n             if let (Some(fmt_str), expr) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n-                if fmt_str.symbol == Symbol::intern(\"\") {\n+                if fmt_str.symbol == kw::Empty {\n                     let mut applicability = Applicability::MachineApplicable;\n                     // FIXME: remove this `#[allow(...)]` once the issue #5822 gets fixed\n                     #[allow(clippy::option_if_let_else)]\n@@ -484,7 +485,7 @@ impl Write {\n \n     fn lint_println_empty_string(&self, cx: &EarlyContext<'_>, mac: &MacCall) {\n         if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n-            if fmt_str.symbol == Symbol::intern(\"\") {\n+            if fmt_str.symbol == kw::Empty {\n                 let name = mac.path.segments[0].ident.name;\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "9ab845a573aca66fc880008bee4c0a9f791bda90", "filename": "tests/ui-internal/interning_defined_symbol.fixed", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Finterning_defined_symbol.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Finterning_defined_symbol.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.fixed?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -14,13 +14,16 @@ macro_rules! sym {\n \n fn main() {\n     // Direct use of Symbol::intern\n-    let _ = rustc_span::symbol::sym::f32;\n+    let _ = rustc_span::sym::f32;\n \n     // Using a sym macro\n-    let _ = rustc_span::symbol::sym::f32;\n+    let _ = rustc_span::sym::f32;\n \n     // Correct suggestion when symbol isn't stringified constant name\n-    let _ = rustc_span::symbol::sym::proc_dash_macro;\n+    let _ = rustc_span::sym::proc_dash_macro;\n+\n+    // interning a keyword\n+    let _ = rustc_span::symbol::kw::SelfLower;\n \n     // Interning a symbol that is not defined\n     let _ = Symbol::intern(\"xyz123\");"}, {"sha": "a58e182971d7323e63b595a9e501f0abb63a63f6", "filename": "tests/ui-internal/interning_defined_symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Finterning_defined_symbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Finterning_defined_symbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -22,6 +22,9 @@ fn main() {\n     // Correct suggestion when symbol isn't stringified constant name\n     let _ = Symbol::intern(\"proc-macro\");\n \n+    // interning a keyword\n+    let _ = Symbol::intern(\"self\");\n+\n     // Interning a symbol that is not defined\n     let _ = Symbol::intern(\"xyz123\");\n     let _ = sym!(xyz123);"}, {"sha": "50c1c268eb132e9fdaaab784fae4861be227eb9e", "filename": "tests/ui-internal/interning_defined_symbol.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Finterning_defined_symbol.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Finterning_defined_symbol.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.stderr?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -2,7 +2,7 @@ error: interning a defined symbol\n   --> $DIR/interning_defined_symbol.rs:17:13\n    |\n LL |     let _ = Symbol::intern(\"f32\");\n-   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::sym::f32`\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::f32`\n    |\n note: the lint level is defined here\n   --> $DIR/interning_defined_symbol.rs:2:9\n@@ -15,13 +15,19 @@ error: interning a defined symbol\n   --> $DIR/interning_defined_symbol.rs:20:13\n    |\n LL |     let _ = sym!(f32);\n-   |             ^^^^^^^^^ help: try: `rustc_span::symbol::sym::f32`\n+   |             ^^^^^^^^^ help: try: `rustc_span::sym::f32`\n \n error: interning a defined symbol\n   --> $DIR/interning_defined_symbol.rs:23:13\n    |\n LL |     let _ = Symbol::intern(\"proc-macro\");\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::sym::proc_dash_macro`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::proc_dash_macro`\n \n-error: aborting due to 3 previous errors\n+error: interning a defined symbol\n+  --> $DIR/interning_defined_symbol.rs:26:13\n+   |\n+LL |     let _ = Symbol::intern(\"self\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::kw::SelfLower`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "2ec0efe4c10a5125ed60d9220ebdb419bc78214a", "filename": "tests/ui-internal/unnecessary_symbol_str.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Funnecessary_symbol_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Funnecessary_symbol_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.fixed?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![feature(rustc_private)]\n+#![deny(clippy::internal)]\n+#![allow(clippy::unnecessary_operation, unused_must_use)]\n+\n+extern crate rustc_span;\n+\n+use rustc_span::symbol::{Ident, Symbol};\n+\n+fn main() {\n+    Symbol::intern(\"foo\") == rustc_span::sym::clippy;\n+    Symbol::intern(\"foo\") == rustc_span::symbol::kw::SelfLower;\n+    Symbol::intern(\"foo\") != rustc_span::symbol::kw::SelfUpper;\n+    Ident::invalid().name == rustc_span::sym::clippy;\n+    rustc_span::sym::clippy == Ident::invalid().name;\n+}"}, {"sha": "87e1b3a2ee76a9ebd8d53268d29835a5a3904a34", "filename": "tests/ui-internal/unnecessary_symbol_str.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Funnecessary_symbol_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Funnecessary_symbol_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.rs?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![feature(rustc_private)]\n+#![deny(clippy::internal)]\n+#![allow(clippy::unnecessary_operation, unused_must_use)]\n+\n+extern crate rustc_span;\n+\n+use rustc_span::symbol::{Ident, Symbol};\n+\n+fn main() {\n+    Symbol::intern(\"foo\").as_str() == \"clippy\";\n+    Symbol::intern(\"foo\").to_string() == \"self\";\n+    Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n+    &*Ident::invalid().as_str() == \"clippy\";\n+    \"clippy\" == Ident::invalid().to_string();\n+}"}, {"sha": "b1284b7c8ffd036393046ea09ab8dcebd6abe0cd", "filename": "tests/ui-internal/unnecessary_symbol_str.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Funnecessary_symbol_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68bcd202fe2fcf2748ce091071ea2242c228248b/tests%2Fui-internal%2Funnecessary_symbol_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.stderr?ref=68bcd202fe2fcf2748ce091071ea2242c228248b", "patch": "@@ -0,0 +1,39 @@\n+error: unnecessary `Symbol` to string conversion\n+  --> $DIR/unnecessary_symbol_str.rs:11:5\n+   |\n+LL |     Symbol::intern(\"foo\").as_str() == \"clippy\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") == rustc_span::sym::clippy`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unnecessary_symbol_str.rs:3:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::unnecessary_symbol_str)]` implied by `#[deny(clippy::internal)]`\n+\n+error: unnecessary `Symbol` to string conversion\n+  --> $DIR/unnecessary_symbol_str.rs:12:5\n+   |\n+LL |     Symbol::intern(\"foo\").to_string() == \"self\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") == rustc_span::symbol::kw::SelfLower`\n+\n+error: unnecessary `Symbol` to string conversion\n+  --> $DIR/unnecessary_symbol_str.rs:13:5\n+   |\n+LL |     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Symbol::intern(\"foo\") != rustc_span::symbol::kw::SelfUpper`\n+\n+error: unnecessary `Symbol` to string conversion\n+  --> $DIR/unnecessary_symbol_str.rs:14:5\n+   |\n+LL |     &*Ident::invalid().as_str() == \"clippy\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::invalid().name == rustc_span::sym::clippy`\n+\n+error: unnecessary `Symbol` to string conversion\n+  --> $DIR/unnecessary_symbol_str.rs:15:5\n+   |\n+LL |     \"clippy\" == Ident::invalid().to_string();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::invalid().name`\n+\n+error: aborting due to 5 previous errors\n+"}]}