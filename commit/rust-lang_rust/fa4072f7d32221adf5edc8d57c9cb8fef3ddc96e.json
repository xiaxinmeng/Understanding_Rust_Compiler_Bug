{"sha": "fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e", "node_id": "C_kwDOAAsO6NoAKGZhNDA3MmY3ZDMyMjIxYWRmNWVkYzhkNTdjOWNiOGZlZjNkZGM5NmU", "commit": {"author": {"name": "Sean Young", "email": "sean@mess.org", "date": "2021-09-26T13:21:22Z"}, "committer": {"name": "Sean Young", "email": "sean@mess.org", "date": "2021-10-01T18:54:57Z"}, "message": "path.push() should work as expected on windows verbatim paths", "tree": {"sha": "4a61de865dd7876b51f7233ee1f47758e0a8da5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a61de865dd7876b51f7233ee1f47758e0a8da5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e", "html_url": "https://github.com/rust-lang/rust/commit/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e/comments", "author": {"login": "seanyoung", "id": 816900, "node_id": "MDQ6VXNlcjgxNjkwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/816900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanyoung", "html_url": "https://github.com/seanyoung", "followers_url": "https://api.github.com/users/seanyoung/followers", "following_url": "https://api.github.com/users/seanyoung/following{/other_user}", "gists_url": "https://api.github.com/users/seanyoung/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanyoung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanyoung/subscriptions", "organizations_url": "https://api.github.com/users/seanyoung/orgs", "repos_url": "https://api.github.com/users/seanyoung/repos", "events_url": "https://api.github.com/users/seanyoung/events{/privacy}", "received_events_url": "https://api.github.com/users/seanyoung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanyoung", "id": 816900, "node_id": "MDQ6VXNlcjgxNjkwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/816900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanyoung", "html_url": "https://github.com/seanyoung", "followers_url": "https://api.github.com/users/seanyoung/followers", "following_url": "https://api.github.com/users/seanyoung/following{/other_user}", "gists_url": "https://api.github.com/users/seanyoung/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanyoung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanyoung/subscriptions", "organizations_url": "https://api.github.com/users/seanyoung/orgs", "repos_url": "https://api.github.com/users/seanyoung/repos", "events_url": "https://api.github.com/users/seanyoung/events{/privacy}", "received_events_url": "https://api.github.com/users/seanyoung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8dd1b2f24dc62c962172b27433106b4e84dc62", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8dd1b2f24dc62c962172b27433106b4e84dc62", "html_url": "https://github.com/rust-lang/rust/commit/ac8dd1b2f24dc62c962172b27433106b4e84dc62"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "a45ecf6ea8c63ed05ee1ff29482d6546b5fc98dd", "filename": "library/std/src/path.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e", "patch": "@@ -1231,20 +1231,59 @@ impl PathBuf {\n         let mut need_sep = self.as_mut_vec().last().map(|c| !is_sep_byte(*c)).unwrap_or(false);\n \n         // in the special case of `C:` on Windows, do *not* add a separator\n+        let comps = self.components();\n+\n+        if comps.prefix_len() > 0\n+            && comps.prefix_len() == comps.path.len()\n+            && comps.prefix.unwrap().is_drive()\n         {\n-            let comps = self.components();\n-            if comps.prefix_len() > 0\n-                && comps.prefix_len() == comps.path.len()\n-                && comps.prefix.unwrap().is_drive()\n-            {\n-                need_sep = false\n-            }\n+            need_sep = false\n         }\n \n         // absolute `path` replaces `self`\n         if path.is_absolute() || path.prefix().is_some() {\n             self.as_mut_vec().truncate(0);\n \n+        // verbatim paths need . and .. removed\n+        } else if comps.prefix_verbatim() {\n+            let mut buf: Vec<_> = comps.collect();\n+            for c in path.components() {\n+                match c {\n+                    Component::RootDir => {\n+                        buf.truncate(1);\n+                        buf.push(c);\n+                    }\n+                    Component::CurDir => (),\n+                    Component::ParentDir => {\n+                        if let Some(Component::Normal(_)) = buf.last() {\n+                            buf.pop();\n+                        }\n+                    }\n+                    _ => buf.push(c),\n+                }\n+            }\n+\n+            let mut res = OsString::new();\n+            let mut need_sep = false;\n+\n+            for c in buf {\n+                if need_sep && c != Component::RootDir {\n+                    res.push(MAIN_SEP_STR);\n+                }\n+                res.push(c.as_os_str());\n+\n+                need_sep = match c {\n+                    Component::RootDir => false,\n+                    Component::Prefix(prefix) => {\n+                        !prefix.parsed.is_drive() && prefix.parsed.len() > 0\n+                    }\n+                    _ => true,\n+                }\n+            }\n+\n+            self.inner = res;\n+            return;\n+\n         // `path` has a root but no prefix, e.g., `\\windows` (Windows only)\n         } else if path.has_root() {\n             let prefix_len = self.components().prefix_remaining();"}, {"sha": "3973a6829d3d3e42cd9b58f6c37fb7e695d3a168", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=fa4072f7d32221adf5edc8d57c9cb8fef3ddc96e", "patch": "@@ -1262,6 +1262,15 @@ pub fn test_push() {\n         tp!(\"\\\\\\\\.\\\\foo\", \"..\\\\bar\", \"\\\\\\\\.\\\\foo\\\\..\\\\bar\");\n \n         tp!(\"\\\\\\\\?\\\\C:\", \"foo\", \"\\\\\\\\?\\\\C:\\\\foo\"); // this is a weird one\n+\n+        tp!(r\"\\\\?\\C:\\bar\", \"../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\\bar\", \"../../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\\\", \"../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\", r\"D:\\foo/./\", r\"D:\\foo/./\");\n+        tp!(r\"\\\\?\\C:\", r\"\\\\?\\D:\\foo\\.\\\", r\"\\\\?\\D:\\foo\\.\\\");\n+        tp!(r\"\\\\?\\A:\\x\\y\", \"/foo\", r\"\\\\?\\A:\\foo\");\n+        tp!(r\"\\\\?\\A:\", r\"..\\foo\\.\", r\"\\\\?\\A:\\foo\");\n+        tp!(r\"\\\\?\\A:\\x\\y\", r\".\\foo\\.\", r\"\\\\?\\A:\\x\\y\\foo\");\n     }\n }\n "}]}