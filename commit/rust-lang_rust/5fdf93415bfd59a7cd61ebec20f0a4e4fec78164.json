{"sha": "5fdf93415bfd59a7cd61ebec20f0a4e4fec78164", "node_id": "C_kwDOAAsO6NoAKDVmZGY5MzQxNWJmZDU5YTdjZDYxZWJlYzIwZjBhNGU0ZmVjNzgxNjQ", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-16T23:13:14Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:19Z"}, "message": "intermediate step", "tree": {"sha": "de9d87e19e5dc432578301c42ec36ec5ec6b6f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de9d87e19e5dc432578301c42ec36ec5ec6b6f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fdf93415bfd59a7cd61ebec20f0a4e4fec78164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdf93415bfd59a7cd61ebec20f0a4e4fec78164", "html_url": "https://github.com/rust-lang/rust/commit/5fdf93415bfd59a7cd61ebec20f0a4e4fec78164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fdf93415bfd59a7cd61ebec20f0a4e4fec78164/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "003972f4281ab83fb56ce9a898efd93b6ca3740e", "url": "https://api.github.com/repos/rust-lang/rust/commits/003972f4281ab83fb56ce9a898efd93b6ca3740e", "html_url": "https://github.com/rust-lang/rust/commit/003972f4281ab83fb56ce9a898efd93b6ca3740e"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "a9c6e24918e99943f4060852a7e40bced833a4b6", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5fdf93415bfd59a7cd61ebec20f0a4e4fec78164/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdf93415bfd59a7cd61ebec20f0a4e4fec78164/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=5fdf93415bfd59a7cd61ebec20f0a4e4fec78164", "patch": "@@ -1,8 +1,6 @@\n use clippy_utils::consts::{miri_to_const, Constant};\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::Attribute;\n-use rustc_errors::Applicability;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::{Item, ItemKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -47,15 +45,15 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         dbg!(item.ident);\n         if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_attr(cx, item.def_id) {\n-            span_lint_and_sugg(\n-                cx,\n-                TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C,\n-                item.span,\n-                \"trailing zero-sized array in a struct which is not marked `#[repr(C)]`\",\n-                \"try annotating the struct definition with `#[repr(C)]` (or another `repr` attribute):\",\n-                format!(\"#[repr(C)]\\n{}\", snippet(cx, item.span, \"..\")),\n-                Applicability::MaybeIncorrect,\n-            );\n+            // span_lint_and_help(\n+            //     cx,\n+            //     TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C,\n+            //     item.span,\n+            //     \"trailing zero-sized array in a struct which is not marked `#[repr(C)]`\",\n+            //     None,\n+            //     \"consider annotating the struct definition with `#[repr(C)]` (or another `repr` attribute)\",\n+            // );\n+            eprintln!(\"\u2014 consider yourself linted \u2014 \ud83e\udd80\")\n         }\n     }\n }\n@@ -87,15 +85,16 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n fn has_repr_attr(cx: &LateContext<'tcx>, def_id: LocalDefId) -> bool {\n     let attrs_get_attrs = get_attrs_get_attrs(cx, def_id);\n     let attrs_hir_map = get_attrs_hir_map(cx, def_id);\n-    let b11 = dbg!(includes_repr_attr_using_sym(attrs_get_attrs));\n-    let b12 = dbg!(includes_repr_attr_using_sym(attrs_hir_map));\n-    let b21 = dbg!(includes_repr_attr_using_helper(cx, attrs_get_attrs));\n-    let b22 = dbg!(includes_repr_attr_using_helper(cx, attrs_hir_map));\n-    let b3 = dbg!(has_repr_attr_using_adt(cx, def_id));\n-    let all_same = b11 && b12 && b21 && b22 && b3;\n+\n+    let b11 = includes_repr_attr_using_sym(attrs_get_attrs);\n+    let b12 = includes_repr_attr_using_sym(attrs_hir_map);\n+    let b21 = includes_repr_attr_using_helper(cx, attrs_get_attrs);\n+    let b22 = includes_repr_attr_using_helper(cx, attrs_hir_map);\n+    let b3 =  has_repr_attr_using_adt(cx, def_id);\n+    let all_same = (b11 && b12 && b21 && b22 && b3) || (!b11 && !b12 && !b21 && !b22 && !b3);\n     dbg!(all_same);\n \n-    b11\n+    b21\n }\n \n fn get_attrs_get_attrs(cx: &LateContext<'tcx>, def_id: LocalDefId) -> &'tcx [Attribute] {\n@@ -108,7 +107,9 @@ fn get_attrs_hir_map(cx: &LateContext<'tcx>, def_id: LocalDefId) -> &'tcx [Attri\n     hir_map.attrs(hir_id)\n }\n \n-// Don't like this because it's so dependent on the current list of `repr` flags and it would have to be manually updated if that ever expanded. idk if there's any mechanism in `bitflag!` or elsewhere for requiring that sort of exhaustiveness\n+// Don't like this because it's so dependent on the current list of `repr` flags and it would have\n+// to be manually updated if that ever expanded. idk if there's any mechanism in `bitflag!` or\n+// elsewhere for requiring that sort of exhaustiveness\n fn has_repr_attr_using_adt(cx: &LateContext<'tcx>, def_id: LocalDefId) -> bool {\n     let ty = cx.tcx.type_of(def_id.to_def_id());\n     if let ty_mod::Adt(adt, _) = ty.kind() {\n@@ -129,5 +130,7 @@ fn includes_repr_attr_using_sym(attrs: &'tcx [Attribute]) -> bool {\n }\n \n fn includes_repr_attr_using_helper(cx: &LateContext<'tcx>, attrs: &'tcx [Attribute]) -> bool {\n-    attrs.iter().any(|attr| !rustc_attr::find_repr_attrs(cx.tcx.sess(), attr).is_empty())\n+    attrs\n+        .iter()\n+        .any(|attr| !rustc_attr::find_repr_attrs(cx.tcx.sess(), attr).is_empty())\n }"}, {"sha": "07cba5774a5c4abd7095fb28430db9ddec9f3241", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fdf93415bfd59a7cd61ebec20f0a4e4fec78164/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdf93415bfd59a7cd61ebec20f0a4e4fec78164/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=5fdf93415bfd59a7cd61ebec20f0a4e4fec78164", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::trailing_zero_sized_array_without_repr_c)]\n-// #![feature(const_generics_defaults)] // see below\n+#![feature(const_generics_defaults)] // see below\n \n // Do lint:\n \n@@ -20,13 +20,13 @@ struct GenericArrayType<T> {\n #[derive(Debug)]\n struct PlayNiceWithOtherAttributesDerive {\n     field: i32,\n-    last: [usize; 0]\n+    last: [usize; 0],\n }\n \n #[must_use]\n struct PlayNiceWithOtherAttributesMustUse {\n     field: i32,\n-    last: [usize; 0]\n+    last: [usize; 0],\n }\n \n const ZERO: usize = 0;\n@@ -72,7 +72,7 @@ struct GoodReason {\n     last: [usize; 0],\n }\n \n-struct SizedArray {\n+struct NonZeroSizedArray {\n     field: i32,\n     last: [usize; 1],\n }\n@@ -114,8 +114,8 @@ enum DontLintAnonymousStructsFromDesuraging {\n     C { x: u32, y: [u64; 0] },\n }\n \n-// NOTE: including these (along with the required feature) triggers an ICE. Should make sure the\n-// const generics people are aware of that if they weren't already.\n+// NOTE: including these (along with the required feature) triggers an ICE. Not sure why. Should\n+// make sure the const generics people are aware of that if they weren't already.\n \n // #[repr(C)]\n // struct ConstParamOk<const N: usize = 0> {\n@@ -129,5 +129,5 @@ enum DontLintAnonymousStructsFromDesuraging {\n // }\n \n fn main() {\n-    let _ = PlayNiceWithOtherAttributesMustUse {field: 0, last: []};\n+    let _ = PlayNiceWithOtherAttributesMustUse { field: 0, last: [] };\n }"}]}