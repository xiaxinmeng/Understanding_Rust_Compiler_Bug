{"sha": "b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZThmOWRiZGM0ZjE1NGQ3OTk1ODljZTVlMjFjMDIwYzUxZjIxMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-03T09:33:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-03T09:33:10Z"}, "message": "Auto merge of #55238 - alexcrichton:rm-jemalloc, r=estebank\n\nRemove the `alloc_jemalloc` crate\n\nThis commit removes the `alloc_jemalloc` crate from the standard library and all related configuration. We will no longer be shipping this unstable crate. Rationale for this is provided on https://github.com/rust-lang/rust/issues/36963 and the many linked issues, but I can inline rationale here if desired!\n\nWe currently rely on jemalloc for increased perf in the Rust compiler, however. [This perf run shows](https://perf.rust-lang.org/compare.html?start=74ff7dcb1388e60a613cd6050bcd372a3cc4998b&end=7e7928dc0340d79b404e93f0c79eb4b946c1d669&stat=wall-time) that if we switch to glibc 2.23's allocator that it's slower than jemalloc across many benchmarks. [This perf run, however](https://perf.rust-lang.org/compare.html?start=22cc2ae8057d14e980b7c784e1eb2eee26b59e7d&end=10c95ccfa7a7adc12f4e608621ca29f9b98eed29), shows that if we use `jemalloc-sys` from crates.io then rustc actually gets faster across all benchmarks! (presumably because it has a more recent version of jemalloc than our submodule).\n\nAs a result, it's expected that this doesn't regress any code (as it's just removing an unstable crate) and it should actually improve rustc performance because it updates jemalloc.\n\nCloses #36963", "tree": {"sha": "7a94b270eb09437ba0b116c5b901d3dd9cdc5534", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a94b270eb09437ba0b116c5b901d3dd9cdc5534"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "html_url": "https://github.com/rust-lang/rust/commit/b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "html_url": "https://github.com/rust-lang/rust/commit/757d6cc91a691c8a749a7b0eee09df494ecdcc3b"}, {"sha": "14c6835e03b285f7c73459ca851848fe8513b7a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c6835e03b285f7c73459ca851848fe8513b7a5", "html_url": "https://github.com/rust-lang/rust/commit/14c6835e03b285f7c73459ca851848fe8513b7a5"}], "stats": {"total": 638, "additions": 165, "deletions": 473}, "files": [{"sha": "bf9bdd9a5b4b0a25fce4a97707f1a875ec1d97f0", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -2,9 +2,6 @@\n \tpath = src/llvm\n \turl = https://github.com/rust-lang/llvm.git\n \tbranch = master\n-[submodule \"src/jemalloc\"]\n-\tpath = src/jemalloc\n-\turl = https://github.com/rust-lang/jemalloc.git\n [submodule \"src/rust-installer\"]\n \tpath = src/tools/rust-installer\n \turl = https://github.com/rust-lang/rust-installer.git\n@@ -64,4 +61,4 @@\n \tpath = src/tools/clang\n \turl = https://github.com/rust-lang-nursery/clang.git\n \tbranch = rust-release-80-v1\n-  \n\\ No newline at end of file\n+"}, {"sha": "b208e760d95c672b1a60891970bd7d0cb7a77f01", "filename": ".travis.yml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -30,7 +30,7 @@ matrix:\n \n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--enable-extended --enable-profiler --enable-lldb\"\n+        RUST_CONFIGURE_ARGS=\"--enable-extended --enable-profiler --enable-lldb --set rust.jemalloc\"\n         SRC=.\n         DEPLOY_ALT=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n@@ -53,7 +53,7 @@ matrix:\n     # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n     - env: >\n         RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=\"--build=x86_64-apple-darwin --enable-sanitizers --enable-profiler\"\n+        RUST_CONFIGURE_ARGS=\"--build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\"\n         SRC=.\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         MACOSX_DEPLOYMENT_TARGET=10.8\n@@ -67,7 +67,7 @@ matrix:\n \n     - env: >\n         RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=--build=i686-apple-darwin\n+        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --set rust.jemalloc\"\n         SRC=.\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         MACOSX_DEPLOYMENT_TARGET=10.8\n@@ -87,7 +87,7 @@ matrix:\n     # OSX 10.7 and `xcode7` is the latest Xcode able to compile LLVM for 10.7.\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-full-tools --enable-profiler --enable-lldb\"\n+        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-full-tools --enable-profiler --enable-lldb --set rust.jemalloc\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n@@ -102,7 +102,7 @@ matrix:\n \n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --enable-lldb --set rust.jemalloc\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1"}, {"sha": "8b11014edae795c1a4638680d475e16247c5b056", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -300,12 +300,6 @@\n # Adding debuginfo makes them several times larger.\n #debuginfo-tools = false\n \n-# Whether or not jemalloc is built and enabled\n-#use-jemalloc = true\n-\n-# Whether or not jemalloc is built with its debug option set\n-#debug-jemalloc = false\n-\n # Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n #backtrace = true\n \n@@ -402,6 +396,10 @@\n # generally only set for releases\n #remap-debuginfo = false\n \n+# Link the compiler against `jemalloc`, where on Linux and OSX it should\n+# override the default allocator for rustc and LLVM.\n+#jemalloc = false\n+\n # =============================================================================\n # Options for specific targets\n #\n@@ -441,10 +439,6 @@\n # not, you can specify an explicit file name for it.\n #llvm-filecheck = \"/path/to/FileCheck\"\n \n-# Path to the custom jemalloc static library to link into the standard library\n-# by default. This is only used if jemalloc is still enabled above\n-#jemalloc = \"/path/to/jemalloc/libjemalloc_pic.a\"\n-\n # If this target is for Android, this option will be required to specify where\n # the NDK for the target lives. This is used to find the C compiler to link and\n # build native code."}, {"sha": "2b00cde7f19d056193759d9ff84d5091e41e761e", "filename": "src/Cargo.lock", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -15,17 +15,6 @@ dependencies = [\n  \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"alloc_jemalloc\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"build_helper 0.1.0\",\n- \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.0.0\",\n- \"core 0.0.0\",\n- \"libc 0.0.0\",\n-]\n-\n [[package]]\n name = \"alloc_system\"\n version = \"0.0.0\"\n@@ -785,6 +774,11 @@ dependencies = [\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"fs_extra\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"fst\"\n version = \"0.3.0\"\n@@ -996,6 +990,16 @@ name = \"itoa\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"jemalloc-sys\"\n+version = \"0.1.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"jobserver\"\n version = \"0.1.11\"\n@@ -2181,6 +2185,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"env_logger 0.5.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n+ \"jemalloc-sys 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2680,7 +2685,6 @@ name = \"std\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n- \"alloc_jemalloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3237,6 +3241,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n \"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n \"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n+\"checksum fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n \"checksum fst 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d94485a00b1827b861dd9d1a2cc9764f9044d4c535514c0760a5a2012ef3399f\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n@@ -3259,6 +3264,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum is-match 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e5b386aef33a1c677be65237cb9d32c3f3ef56bd035949710c4bb13083eb053\"\n \"checksum itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f58856976b776fedd95533137617a02fb25719f40e7d9b01c7043cd65474f450\"\n \"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n+\"checksum jemalloc-sys 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bfc62c8e50e381768ce8ee0428ee53741929f7ebd73e4d83f669bcf7693e00ae\"\n \"checksum jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"60af5f849e1981434e4a31d3d782c4774ae9b434ce55b101a96ecfd09147e8be\"\n \"checksum json 0.11.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ad0485404155f45cce53a40d4b2d6ac356418300daed05273d9e26f91c390be\"\n \"checksum jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddf83704f4e79979a424d1082dd2c1e52683058056c9280efa19ac5f6bc9033c\""}, {"sha": "fdd8784453bdb8c509b8bf4824921e327fb2246e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -715,11 +715,6 @@ def update_submodules(self):\n                 backends = self.get_toml('codegen-backends')\n                 if backends is None or not 'emscripten' in backends:\n                     continue\n-            if module.endswith(\"jemalloc\"):\n-                if self.get_toml('use-jemalloc') == 'false':\n-                    continue\n-                if self.get_toml('jemalloc'):\n-                    continue\n             if module.endswith(\"lld\"):\n                 config = self.get_toml('lld')\n                 if config is None or config == 'false':"}, {"sha": "885ad07e0873604adb3b420b6eff5cee74f6ad98", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -158,16 +158,7 @@ pub fn std_cargo(builder: &Builder,\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/rustc/compiler_builtins_shim/Cargo.toml\"));\n     } else {\n-        let mut features = builder.std_features();\n-\n-        // When doing a local rebuild we tell cargo that we're stage1 rather than\n-        // stage0. This works fine if the local rust and being-built rust have the\n-        // same view of what the default allocator is, but fails otherwise. Since\n-        // we don't have a way to express an allocator preference yet, work\n-        // around the issue in the case of a local rebuild with jemalloc disabled.\n-        if compiler.stage == 0 && builder.local_rebuild && !builder.config.use_jemalloc {\n-            features.push_str(\" force_alloc_system\");\n-        }\n+        let features = builder.std_features();\n \n         if compiler.stage != 0 && builder.config.sanitizers {\n             // This variable is used by the sanitizer runtime crates, e.g.\n@@ -188,11 +179,6 @@ pub fn std_cargo(builder: &Builder,\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/libstd/Cargo.toml\"));\n \n-        if let Some(target) = builder.config.target_config.get(&target) {\n-            if let Some(ref jemalloc) = target.jemalloc {\n-                cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n-            }\n-        }\n         if target.contains(\"musl\") {\n             if let Some(p) = builder.musl_root(target) {\n                 cargo.env(\"MUSL_ROOT\", p);"}, {"sha": "0f249eee000224a9f0b8d1ff48878dae20e0551b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -116,15 +116,14 @@ pub struct Config {\n     pub hosts: Vec<Interned<String>>,\n     pub targets: Vec<Interned<String>>,\n     pub local_rebuild: bool,\n+    pub jemalloc: bool,\n \n     // dist misc\n     pub dist_sign_folder: Option<PathBuf>,\n     pub dist_upload_addr: Option<String>,\n     pub dist_gpg_password_file: Option<PathBuf>,\n \n     // libstd features\n-    pub debug_jemalloc: bool,\n-    pub use_jemalloc: bool,\n     pub backtrace: bool, // support for RUST_BACKTRACE\n     pub wasm_syscall: bool,\n \n@@ -166,7 +165,6 @@ pub struct Target {\n     pub llvm_config: Option<PathBuf>,\n     /// Some(path to FileCheck) if one was specified.\n     pub llvm_filecheck: Option<PathBuf>,\n-    pub jemalloc: Option<PathBuf>,\n     pub cc: Option<PathBuf>,\n     pub cxx: Option<PathBuf>,\n     pub ar: Option<PathBuf>,\n@@ -263,7 +261,7 @@ struct Llvm {\n     link_jobs: Option<u32>,\n     link_shared: Option<bool>,\n     version_suffix: Option<String>,\n-    clang_cl: Option<String>\n+    clang_cl: Option<String>,\n }\n \n #[derive(Deserialize, Default, Clone)]\n@@ -302,8 +300,6 @@ struct Rust {\n     debuginfo_only_std: Option<bool>,\n     debuginfo_tools: Option<bool>,\n     experimental_parallel_queries: Option<bool>,\n-    debug_jemalloc: Option<bool>,\n-    use_jemalloc: Option<bool>,\n     backtrace: Option<bool>,\n     default_linker: Option<String>,\n     channel: Option<String>,\n@@ -329,6 +325,7 @@ struct Rust {\n     backtrace_on_ice: Option<bool>,\n     verify_llvm_ir: Option<bool>,\n     remap_debuginfo: Option<bool>,\n+    jemalloc: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -337,7 +334,6 @@ struct Rust {\n struct TomlTarget {\n     llvm_config: Option<String>,\n     llvm_filecheck: Option<String>,\n-    jemalloc: Option<String>,\n     cc: Option<String>,\n     cxx: Option<String>,\n     ar: Option<String>,\n@@ -363,7 +359,6 @@ impl Config {\n         config.llvm_enabled = true;\n         config.llvm_optimize = true;\n         config.llvm_version_check = true;\n-        config.use_jemalloc = true;\n         config.backtrace = true;\n         config.rust_optimize = true;\n         config.rust_optimize_tests = true;\n@@ -499,7 +494,6 @@ impl Config {\n         let mut debuginfo_only_std = None;\n         let mut debuginfo_tools = None;\n         let mut debug = None;\n-        let mut debug_jemalloc = None;\n         let mut debuginfo = None;\n         let mut debug_assertions = None;\n         let mut optimize = None;\n@@ -541,12 +535,11 @@ impl Config {\n             debuginfo_tools = rust.debuginfo_tools;\n             optimize = rust.optimize;\n             ignore_git = rust.ignore_git;\n-            debug_jemalloc = rust.debug_jemalloc;\n             set(&mut config.rust_optimize_tests, rust.optimize_tests);\n             set(&mut config.rust_debuginfo_tests, rust.debuginfo_tests);\n             set(&mut config.codegen_tests, rust.codegen_tests);\n             set(&mut config.rust_rpath, rust.rpath);\n-            set(&mut config.use_jemalloc, rust.use_jemalloc);\n+            set(&mut config.jemalloc, rust.jemalloc);\n             set(&mut config.backtrace, rust.backtrace);\n             set(&mut config.channel, rust.channel.clone());\n             set(&mut config.rust_dist_src, rust.dist_src);\n@@ -596,9 +589,6 @@ impl Config {\n                 if let Some(ref s) = cfg.llvm_filecheck {\n                     target.llvm_filecheck = Some(config.src.join(s));\n                 }\n-                if let Some(ref s) = cfg.jemalloc {\n-                    target.jemalloc = Some(config.src.join(s));\n-                }\n                 if let Some(ref s) = cfg.android_ndk {\n                     target.ndk = Some(config.src.join(s));\n                 }\n@@ -644,7 +634,6 @@ impl Config {\n         config.rust_debuginfo_tools = debuginfo_tools.unwrap_or(false);\n \n         let default = debug == Some(true);\n-        config.debug_jemalloc = debug_jemalloc.unwrap_or(default);\n         config.rust_debuginfo = debuginfo.unwrap_or(default);\n         config.rust_debug_assertions = debug_assertions.unwrap_or(default);\n "}, {"sha": "c69e9a1d9dcf0794eb62c0eee1c22a69d0fffe0d", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -82,7 +82,6 @@ def v(*args):\n o(\"debuginfo-lines\", \"rust.debuginfo-lines\", \"build with line number debugger metadata\")\n o(\"debuginfo-only-std\", \"rust.debuginfo-only-std\", \"build only libstd with debugging information\")\n o(\"debuginfo-tools\", \"rust.debuginfo-tools\", \"build extended tools with debugging information\")\n-o(\"debug-jemalloc\", \"rust.debug-jemalloc\", \"build jemalloc with --enable-debug --enable-fill\")\n v(\"save-toolstates\", \"rust.save-toolstates\", \"save build and test status of external tools into this file\")\n \n v(\"prefix\", \"install.prefix\", \"set installation prefix\")\n@@ -99,7 +98,6 @@ def v(*args):\n v(\"llvm-config\", None, \"set path to llvm-config\")\n v(\"llvm-filecheck\", None, \"set path to LLVM's FileCheck utility\")\n v(\"python\", \"build.python\", \"set path to python\")\n-v(\"jemalloc-root\", None, \"set directory where libjemalloc_pic.a is located\")\n v(\"android-cross-path\", \"target.arm-linux-androideabi.android-ndk\",\n   \"Android NDK standalone path (deprecated)\")\n v(\"i686-linux-android-ndk\", \"target.i686-linux-android.android-ndk\",\n@@ -148,7 +146,6 @@ def v(*args):\n # Many of these are saved below during the \"writing configuration\" step\n # (others are conditionally saved).\n o(\"manage-submodules\", \"build.submodules\", \"let the build manage the git submodules\")\n-o(\"jemalloc\", \"rust.use-jemalloc\", \"build liballoc with jemalloc\")\n o(\"full-bootstrap\", \"build.full-bootstrap\", \"build three compilers instead of two\")\n o(\"extended\", \"build.extended\", \"build an extended rust tool set\")\n \n@@ -330,8 +327,6 @@ def set(key, value):\n         set('target.{}.llvm-config'.format(build()), value)\n     elif option.name == 'llvm-filecheck':\n         set('target.{}.llvm-filecheck'.format(build()), value)\n-    elif option.name == 'jemalloc-root':\n-        set('target.{}.jemalloc'.format(build()), value + '/libjemalloc_pic.a')\n     elif option.name == 'tools':\n         set('build.tools', value.split(','))\n     elif option.name == 'host':"}, {"sha": "567b47a70a12cc52143c3c534e2ce45d1dff4529", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -859,7 +859,6 @@ impl Step for Src {\n             \"src/build_helper\",\n             \"src/dlmalloc\",\n             \"src/liballoc\",\n-            \"src/liballoc_jemalloc\",\n             \"src/liballoc_system\",\n             \"src/libbacktrace\",\n             \"src/libcompiler_builtins\",\n@@ -878,14 +877,12 @@ impl Step for Src {\n             \"src/rustc/dlmalloc_shim\",\n             \"src/libtest\",\n             \"src/libterm\",\n-            \"src/jemalloc\",\n             \"src/libprofiler_builtins\",\n             \"src/stdsimd\",\n             \"src/libproc_macro\",\n         ];\n         let std_src_dirs_exclude = [\n             \"src/libcompiler_builtins/compiler-rt/test\",\n-            \"src/jemalloc/test/unit\",\n         ];\n \n         copy_src_dirs(builder, &std_src_dirs[..], &std_src_dirs_exclude[..], &dst_src);"}, {"sha": "8159fb182a18d05575704723c6646cea9eff3eeb", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -516,12 +516,6 @@ impl Build {\n     fn std_features(&self) -> String {\n         let mut features = \"panic-unwind\".to_string();\n \n-        if self.config.debug_jemalloc {\n-            features.push_str(\" debug-jemalloc\");\n-        }\n-        if self.config.use_jemalloc {\n-            features.push_str(\" jemalloc\");\n-        }\n         if self.config.backtrace {\n             features.push_str(\" backtrace\");\n         }\n@@ -537,8 +531,8 @@ impl Build {\n     /// Get the space-separated set of activated features for the compiler.\n     fn rustc_features(&self) -> String {\n         let mut features = String::new();\n-        if self.config.use_jemalloc {\n-            features.push_str(\" jemalloc\");\n+        if self.config.jemalloc {\n+            features.push_str(\"jemalloc\");\n         }\n         features\n     }\n@@ -791,7 +785,7 @@ impl Build {\n         // If we're compiling on macOS then we add a few unconditional flags\n         // indicating that we want libc++ (more filled out than libstdc++) and\n         // we want to compile for 10.7. This way we can ensure that\n-        // LLVM/jemalloc/etc are all properly compiled.\n+        // LLVM/etc are all properly compiled.\n         if target.contains(\"apple-darwin\") {\n             base.push(\"-stdlib=libc++\".into());\n         }"}, {"sha": "15d3bccba09cc6e448b63240d0cefc0259a79460", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -152,12 +152,6 @@ pub fn check(build: &mut Build) {\n         if !build.config.dry_run {\n             cmd_finder.must_have(build.cxx(*host).unwrap());\n         }\n-\n-        // The msvc hosts don't use jemalloc, turn it off globally to\n-        // avoid packaging the dummy liballoc_jemalloc on that platform.\n-        if host.contains(\"msvc\") {\n-            build.config.use_jemalloc = false;\n-        }\n     }\n \n     // Externally configured LLVM requires FileCheck to exist"}, {"sha": "e55773011df8eb41f157e3959fbbc5254ac33308", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -1504,8 +1504,7 @@ impl Step for CrateNotDefault {\n     type Output = ();\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/liballoc_jemalloc\")\n-            .path(\"src/librustc_asan\")\n+        run.path(\"src/librustc_asan\")\n             .path(\"src/librustc_lsan\")\n             .path(\"src/librustc_msan\")\n             .path(\"src/librustc_tsan\")\n@@ -1522,7 +1521,6 @@ impl Step for CrateNotDefault {\n             target: run.target,\n             test_kind,\n             krate: match run.path {\n-                _ if run.path.ends_with(\"src/liballoc_jemalloc\") => \"alloc_jemalloc\",\n                 _ if run.path.ends_with(\"src/librustc_asan\") => \"rustc_asan\",\n                 _ if run.path.ends_with(\"src/librustc_lsan\") => \"rustc_lsan\",\n                 _ if run.path.ends_with(\"src/librustc_msan\") => \"rustc_msan\",\n@@ -1561,7 +1559,6 @@ impl Step for Crate {\n         run = run.krate(\"test\");\n         for krate in run.builder.in_tree_crates(\"std\") {\n             if krate.is_local(&run.builder)\n-                && !krate.name.contains(\"jemalloc\")\n                 && !(krate.name.starts_with(\"rustc_\") && krate.name.ends_with(\"san\"))\n                 && krate.name != \"dlmalloc\"\n             {"}, {"sha": "8df49f364a372eb50d6b9edbd7d9e850652ffc37", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -98,7 +98,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-sanitizers \\\n       --enable-profiler \\\n       --set target.i686-unknown-linux-gnu.linker=clang \\\n-      --build=i686-unknown-linux-gnu\n+      --build=i686-unknown-linux-gnu \\\n+      --set rust.jemalloc\n ENV SCRIPT python2.7 ../x.py dist --build $HOSTS --host $HOSTS --target $HOSTS\n ENV CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=clang\n "}, {"sha": "0a2dae72f73828d7497625f6de96c1efdf2a67c8", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -101,7 +101,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --set target.x86_64-unknown-linux-gnu.linker=clang \\\n       --set target.x86_64-unknown-linux-gnu.ar=/rustroot/bin/llvm-ar \\\n       --set target.x86_64-unknown-linux-gnu.ranlib=/rustroot/bin/llvm-ranlib \\\n-      --set llvm.thin-lto=true\n+      --set llvm.thin-lto=true \\\n+      --set rust.jemalloc\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=clang\n "}, {"sha": "1f5a28755e301ac581e2048011e4e0ff3da482ef", "filename": "src/jemalloc", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fjemalloc?ref=757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "patch": "@@ -1 +0,0 @@\n-Subproject commit 1f5a28755e301ac581e2048011e4e0ff3da482ef"}, {"sha": "b6be38107da7f33eefd4607b3cd6c3f145a5de7f", "filename": "src/liballoc/tests/heap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fliballoc%2Ftests%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Fliballoc%2Ftests%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fheap.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -12,9 +12,6 @@ use alloc_system::System;\n use std::alloc::{Global, Alloc, Layout};\n \n /// https://github.com/rust-lang/rust/issues/45955\n-///\n-/// Note that `#[global_allocator]` is not used,\n-/// so `liballoc_jemalloc` is linked (on some platforms).\n #[test]\n fn alloc_system_overaligned_request() {\n     check_overalign_requests(System)"}, {"sha": "7986d5dd2eb54b69a12990dc83891ba320a7e838", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/757d6cc91a691c8a749a7b0eee09df494ecdcc3b/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/757d6cc91a691c8a749a7b0eee09df494ecdcc3b/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "patch": "@@ -1,24 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"alloc_jemalloc\"\n-version = \"0.0.0\"\n-build = \"build.rs\"\n-links = \"jemalloc\"\n-\n-[lib]\n-name = \"alloc_jemalloc\"\n-path = \"lib.rs\"\n-test = false\n-doc = false\n-\n-[dependencies]\n-core = { path = \"../libcore\" }\n-libc = { path = \"../rustc/libc_shim\" }\n-compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cc = \"1.0.1\"\n-\n-[features]\n-debug = []"}, {"sha": "fbda425a70bf5d6388455a4a0014e58a0a13d1d0", "filename": "src/liballoc_jemalloc/build.rs", "status": "removed", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/757d6cc91a691c8a749a7b0eee09df494ecdcc3b/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757d6cc91a691c8a749a7b0eee09df494ecdcc3b/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "patch": "@@ -1,151 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(warnings)]\n-\n-extern crate build_helper;\n-extern crate cc;\n-\n-use std::env;\n-use std::path::PathBuf;\n-use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate};\n-\n-fn main() {\n-    // FIXME: This is a hack to support building targets that don't\n-    // support jemalloc alongside hosts that do. The jemalloc build is\n-    // controlled by a feature of the std crate, and if that feature\n-    // changes between targets, it invalidates the fingerprint of\n-    // std's build script (this is a cargo bug); so we must ensure\n-    // that the feature set used by std is the same across all\n-    // targets, which means we have to build the alloc_jemalloc crate\n-    // for targets like emscripten, even if we don't use it.\n-    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n-    let host = env::var(\"HOST\").expect(\"HOST was not set\");\n-    if target.contains(\"bitrig\") || target.contains(\"emscripten\") || target.contains(\"fuchsia\") ||\n-       target.contains(\"msvc\") || target.contains(\"openbsd\") || target.contains(\"redox\") ||\n-       target.contains(\"rumprun\") || target.contains(\"wasm32\") {\n-        println!(\"cargo:rustc-cfg=dummy_jemalloc\");\n-        return;\n-    }\n-\n-    // CloudABI ships with a copy of jemalloc that has been patched to\n-    // work well with sandboxing. Don't attempt to build our own copy,\n-    // as it won't build.\n-    if target.contains(\"cloudabi\") {\n-        return;\n-    }\n-\n-    if target.contains(\"android\") {\n-        println!(\"cargo:rustc-link-lib=gcc\");\n-    } else if !target.contains(\"windows\") && !target.contains(\"musl\") {\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-    }\n-\n-    if let Some(jemalloc) = env::var_os(\"JEMALLOC_OVERRIDE\") {\n-        let jemalloc = PathBuf::from(jemalloc);\n-        println!(\"cargo:rustc-link-search=native={}\",\n-                 jemalloc.parent().unwrap().display());\n-        let stem = jemalloc.file_stem().unwrap().to_str().unwrap();\n-        let name = jemalloc.file_name().unwrap().to_str().unwrap();\n-        let kind = if name.ends_with(\".a\") {\n-            \"static\"\n-        } else {\n-            \"dylib\"\n-        };\n-        println!(\"cargo:rustc-link-lib={}={}\", kind, &stem[3..]);\n-        return;\n-    }\n-\n-    let link_name = if target.contains(\"windows\") { \"jemalloc\" } else { \"jemalloc_pic\" };\n-    let native = match native_lib_boilerplate(\"jemalloc\", \"jemalloc\", link_name, \"lib\") {\n-        Ok(native) => native,\n-        _ => return,\n-    };\n-\n-    let mut cmd = Command::new(\"sh\");\n-    cmd.arg(native.src_dir.join(\"configure\")\n-                          .to_str()\n-                          .unwrap()\n-                          .replace(\"C:\\\\\", \"/c/\")\n-                          .replace(\"\\\\\", \"/\"))\n-       .current_dir(&native.out_dir)\n-       // jemalloc generates Makefile deps using GCC's \"-MM\" flag. This means\n-       // that GCC will run the preprocessor, and only the preprocessor, over\n-       // jemalloc's source files. If we don't specify CPPFLAGS, then at least\n-       // on ARM that step fails with a \"Missing implementation for 32-bit\n-       // atomic operations\" error. This is because no \"-march\" flag will be\n-       // passed to GCC, and then GCC won't define the\n-       // \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\" macro that jemalloc needs to\n-       // select an atomic operation implementation.\n-       .env(\"CPPFLAGS\", env::var_os(\"CFLAGS\").unwrap_or_default());\n-\n-    if target.contains(\"ios\") {\n-        cmd.arg(\"--disable-tls\");\n-    } else if target.contains(\"android\") {\n-        // We force android to have prefixed symbols because apparently\n-        // replacement of the libc allocator doesn't quite work. When this was\n-        // tested (unprefixed symbols), it was found that the `realpath`\n-        // function in libc would allocate with libc malloc (not jemalloc\n-        // malloc), and then the standard library would free with jemalloc free,\n-        // causing a segfault.\n-        //\n-        // If the test suite passes, however, without symbol prefixes then we\n-        // should be good to go!\n-        cmd.arg(\"--with-jemalloc-prefix=je_\");\n-        cmd.arg(\"--disable-tls\");\n-    } else if target.contains(\"dragonfly\") || target.contains(\"musl\") {\n-        cmd.arg(\"--with-jemalloc-prefix=je_\");\n-    }\n-\n-    if cfg!(feature = \"debug\") {\n-        // Enable jemalloc assertions.\n-        cmd.arg(\"--enable-debug\");\n-    }\n-\n-    cmd.arg(format!(\"--host={}\", build_helper::gnu_target(&target)));\n-    cmd.arg(format!(\"--build={}\", build_helper::gnu_target(&host)));\n-\n-    // for some reason, jemalloc configure doesn't detect this value\n-    // automatically for this target\n-    if target == \"sparc64-unknown-linux-gnu\" {\n-        cmd.arg(\"--with-lg-quantum=4\");\n-    }\n-\n-    run(&mut cmd);\n-\n-    let mut make = Command::new(build_helper::make(&host));\n-    make.current_dir(&native.out_dir)\n-        .arg(\"build_lib_static\");\n-\n-    // These are intended for mingw32-make which we don't use\n-    if cfg!(windows) {\n-        make.env_remove(\"MAKEFLAGS\").env_remove(\"MFLAGS\");\n-    }\n-\n-    // mingw make seems... buggy? unclear...\n-    if !host.contains(\"windows\") {\n-        make.arg(\"-j\")\n-            .arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\"));\n-    }\n-\n-    run(&mut make);\n-\n-    // The pthread_atfork symbols is used by jemalloc on android but the really\n-    // old android we're building on doesn't have them defined, so just make\n-    // sure the symbols are available.\n-    if target.contains(\"androideabi\") {\n-        println!(\"cargo:rerun-if-changed=pthread_atfork_dummy.c\");\n-        cc::Build::new()\n-            .flag(\"-fvisibility=hidden\")\n-            .file(\"pthread_atfork_dummy.c\")\n-            .compile(\"pthread_atfork_dummy\");\n-    }\n-}"}, {"sha": "0065e84a7ad1a88a14199ff8035483c8b3dcf73e", "filename": "src/liballoc_jemalloc/lib.rs", "status": "removed", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/757d6cc91a691c8a749a7b0eee09df494ecdcc3b/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757d6cc91a691c8a749a7b0eee09df494ecdcc3b/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "patch": "@@ -1,127 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![no_std]\n-#![allow(unused_attributes)]\n-#![unstable(feature = \"alloc_jemalloc\",\n-            reason = \"implementation detail of std, does not provide any public API\",\n-            issue = \"0\")]\n-#![feature(core_intrinsics)]\n-#![feature(libc)]\n-#![feature(linkage)]\n-#![feature(nll)]\n-#![feature(staged_api)]\n-#![feature(rustc_attrs)]\n-#![cfg_attr(dummy_jemalloc, allow(dead_code, unused_extern_crates))]\n-#![cfg_attr(not(dummy_jemalloc), feature(allocator_api))]\n-#![rustc_alloc_kind = \"exe\"]\n-\n-extern crate libc;\n-\n-#[cfg(not(dummy_jemalloc))]\n-pub use contents::*;\n-#[cfg(not(dummy_jemalloc))]\n-mod contents {\n-    use libc::{c_int, c_void, size_t};\n-\n-    // Note that the symbols here are prefixed by default on macOS and Windows (we\n-    // don't explicitly request it), and on Android and DragonFly we explicitly\n-    // request it as unprefixing cause segfaults (mismatches in allocators).\n-    extern \"C\" {\n-        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                       target_os = \"dragonfly\", target_os = \"windows\", target_env = \"musl\"),\n-                   link_name = \"je_mallocx\")]\n-        fn mallocx(size: size_t, flags: c_int) -> *mut c_void;\n-        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                       target_os = \"dragonfly\", target_os = \"windows\", target_env = \"musl\"),\n-                   link_name = \"je_calloc\")]\n-        fn calloc(size: size_t, flags: c_int) -> *mut c_void;\n-        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                       target_os = \"dragonfly\", target_os = \"windows\", target_env = \"musl\"),\n-                   link_name = \"je_rallocx\")]\n-        fn rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n-        #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n-                       target_os = \"dragonfly\", target_os = \"windows\", target_env = \"musl\"),\n-                   link_name = \"je_sdallocx\")]\n-        fn sdallocx(ptr: *mut c_void, size: size_t, flags: c_int);\n-    }\n-\n-    const MALLOCX_ZERO: c_int = 0x40;\n-\n-    // The minimum alignment guaranteed by the architecture. This value is used to\n-    // add fast paths for low alignment values.\n-    #[cfg(all(any(target_arch = \"arm\",\n-                  target_arch = \"mips\",\n-                  target_arch = \"powerpc\")))]\n-    const MIN_ALIGN: usize = 8;\n-    #[cfg(all(any(target_arch = \"x86\",\n-                  target_arch = \"x86_64\",\n-                  target_arch = \"aarch64\",\n-                  target_arch = \"powerpc64\",\n-                  target_arch = \"mips64\",\n-                  target_arch = \"s390x\",\n-                  target_arch = \"sparc64\")))]\n-    const MIN_ALIGN: usize = 16;\n-\n-    // MALLOCX_ALIGN(a) macro\n-    fn mallocx_align(a: usize) -> c_int {\n-        a.trailing_zeros() as c_int\n-    }\n-\n-    fn align_to_flags(align: usize, size: usize) -> c_int {\n-        if align <= MIN_ALIGN && align <= size {\n-            0\n-        } else {\n-            mallocx_align(align)\n-        }\n-    }\n-\n-    // for symbol names src/librustc/middle/allocator.rs\n-    // for signatures src/librustc_allocator/lib.rs\n-\n-    // linkage directives are provided as part of the current compiler allocator\n-    // ABI\n-\n-    #[rustc_std_internal_symbol]\n-    pub unsafe extern fn __rde_alloc(size: usize, align: usize) -> *mut u8 {\n-        let flags = align_to_flags(align, size);\n-        let ptr = mallocx(size as size_t, flags) as *mut u8;\n-        ptr\n-    }\n-\n-    #[rustc_std_internal_symbol]\n-    pub unsafe extern fn __rde_dealloc(ptr: *mut u8,\n-                                       size: usize,\n-                                       align: usize) {\n-        let flags = align_to_flags(align, size);\n-        sdallocx(ptr as *mut c_void, size, flags);\n-    }\n-\n-    #[rustc_std_internal_symbol]\n-    pub unsafe extern fn __rde_realloc(ptr: *mut u8,\n-                                       _old_size: usize,\n-                                       align: usize,\n-                                       new_size: usize) -> *mut u8 {\n-        let flags = align_to_flags(align, new_size);\n-        let ptr = rallocx(ptr as *mut c_void, new_size, flags) as *mut u8;\n-        ptr\n-    }\n-\n-    #[rustc_std_internal_symbol]\n-    pub unsafe extern fn __rde_alloc_zeroed(size: usize, align: usize) -> *mut u8 {\n-        let ptr = if align <= MIN_ALIGN && align <= size {\n-            calloc(size as size_t, 1) as *mut u8\n-        } else {\n-            let flags = align_to_flags(align, size) | MALLOCX_ZERO;\n-            mallocx(size as size_t, flags) as *mut u8\n-        };\n-        ptr\n-    }\n-}"}, {"sha": "4e3df0ab26c373340bd3c020ec0288b0b17addca", "filename": "src/liballoc_jemalloc/pthread_atfork_dummy.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/757d6cc91a691c8a749a7b0eee09df494ecdcc3b/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c", "raw_url": "https://github.com/rust-lang/rust/raw/757d6cc91a691c8a749a7b0eee09df494ecdcc3b/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c?ref=757d6cc91a691c8a749a7b0eee09df494ecdcc3b", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// See comments in build.rs for why this exists\n-int pthread_atfork(void* prefork,\n-                   void* postfork_parent,\n-                   void* postfork_child) {\n-  return 0;\n-}"}, {"sha": "b5ed256cef6fd24371f85dc54c60e2056f5ec4f3", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -1508,6 +1508,7 @@ enum Message {\n     },\n     CodegenComplete,\n     CodegenItem,\n+    CodegenAborted,\n }\n \n struct Diagnostic {\n@@ -1788,6 +1789,7 @@ fn start_executing_work(tcx: TyCtxt,\n         let mut needs_lto = Vec::new();\n         let mut lto_import_only_modules = Vec::new();\n         let mut started_lto = false;\n+        let mut codegen_aborted = false;\n \n         // This flag tracks whether all items have gone through codegens\n         let mut codegen_done = false;\n@@ -1805,13 +1807,19 @@ fn start_executing_work(tcx: TyCtxt,\n         let mut llvm_start_time = None;\n \n         // Run the message loop while there's still anything that needs message\n-        // processing:\n+        // processing. Note that as soon as codegen is aborted we simply want to\n+        // wait for all existing work to finish, so many of the conditions here\n+        // only apply if codegen hasn't been aborted as they represent pending\n+        // work to be done.\n         while !codegen_done ||\n-              work_items.len() > 0 ||\n               running > 0 ||\n-              needs_lto.len() > 0 ||\n-              lto_import_only_modules.len() > 0 ||\n-              main_thread_worker_state != MainThreadWorkerState::Idle {\n+              (!codegen_aborted && (\n+                  work_items.len() > 0 ||\n+                  needs_lto.len() > 0 ||\n+                  lto_import_only_modules.len() > 0 ||\n+                  main_thread_worker_state != MainThreadWorkerState::Idle\n+              ))\n+        {\n \n             // While there are still CGUs to be codegened, the coordinator has\n             // to decide how to utilize the compiler processes implicit Token:\n@@ -1840,6 +1848,9 @@ fn start_executing_work(tcx: TyCtxt,\n                         spawn_work(cgcx, item);\n                     }\n                 }\n+            } else if codegen_aborted {\n+                // don't queue up any more work if codegen was aborted, we're\n+                // just waiting for our existing children to finish\n             } else {\n                 // If we've finished everything related to normal codegen\n                 // then it must be the case that we've got some LTO work to do.\n@@ -1904,7 +1915,7 @@ fn start_executing_work(tcx: TyCtxt,\n \n             // Spin up what work we can, only doing this while we've got available\n             // parallelism slots and work left to spawn.\n-            while work_items.len() > 0 && running < tokens.len() {\n+            while !codegen_aborted && work_items.len() > 0 && running < tokens.len() {\n                 let (item, _) = work_items.pop().unwrap();\n \n                 maybe_start_llvm_timer(cgcx.config(item.module_kind()),\n@@ -1969,18 +1980,34 @@ fn start_executing_work(tcx: TyCtxt,\n                     if !cgcx.opts.debugging_opts.no_parallel_llvm {\n                         helper.request_token();\n                     }\n+                    assert!(!codegen_aborted);\n                     assert_eq!(main_thread_worker_state,\n                                MainThreadWorkerState::Codegenning);\n                     main_thread_worker_state = MainThreadWorkerState::Idle;\n                 }\n \n                 Message::CodegenComplete => {\n                     codegen_done = true;\n+                    assert!(!codegen_aborted);\n                     assert_eq!(main_thread_worker_state,\n                                MainThreadWorkerState::Codegenning);\n                     main_thread_worker_state = MainThreadWorkerState::Idle;\n                 }\n \n+                // If codegen is aborted that means translation was aborted due\n+                // to some normal-ish compiler error. In this situation we want\n+                // to exit as soon as possible, but we want to make sure all\n+                // existing work has finished. Flag codegen as being done, and\n+                // then conditions above will ensure no more work is spawned but\n+                // we'll keep executing this loop until `running` hits 0.\n+                Message::CodegenAborted => {\n+                    assert!(!codegen_aborted);\n+                    codegen_done = true;\n+                    codegen_aborted = true;\n+                    assert_eq!(main_thread_worker_state,\n+                               MainThreadWorkerState::Codegenning);\n+                }\n+\n                 // If a thread exits successfully then we drop a token associated\n                 // with that worker and update our `running` count. We may later\n                 // re-acquire a token to continue running more work. We may also not\n@@ -2446,6 +2473,19 @@ impl OngoingCodegen {\n         drop(self.coordinator_send.send(Box::new(Message::CodegenComplete)));\n     }\n \n+    /// Consume this context indicating that codegen was entirely aborted, and\n+    /// we need to exit as quickly as possible.\n+    ///\n+    /// This method blocks the current thread until all worker threads have\n+    /// finished, and all worker threads should have exited or be real close to\n+    /// exiting at this point.\n+    pub fn codegen_aborted(self) {\n+        // Signal to the coordinator it should spawn no more work and start\n+        // shutdown.\n+        drop(self.coordinator_send.send(Box::new(Message::CodegenAborted)));\n+        drop(self.future.join());\n+    }\n+\n     pub fn check_for_errors(&self, sess: &Session) {\n         self.shared_emitter_main.check(sess, false);\n     }\n@@ -2464,6 +2504,11 @@ impl OngoingCodegen {\n     }\n }\n \n+// impl Drop for OngoingCodegen {\n+//     fn drop(&mut self) {\n+//     }\n+// }\n+\n pub(crate) fn submit_codegened_module_to_llvm(tcx: TyCtxt,\n                                               module: ModuleCodegen,\n                                               cost: u64) {"}, {"sha": "a55aafe8b5731e240174d63e3cfc5043022386bf", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -76,12 +76,13 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n \n use std::any::Any;\n+use std::cmp;\n use std::ffi::CString;\n-use std::sync::Arc;\n-use std::time::{Instant, Duration};\n use std::i32;\n-use std::cmp;\n+use std::ops::{Deref, DerefMut};\n+use std::sync::Arc;\n use std::sync::mpsc;\n+use std::time::{Instant, Duration};\n use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n use syntax::attr;\n@@ -820,6 +821,7 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         metadata,\n         rx,\n         codegen_units.len());\n+    let ongoing_codegen = AbortCodegenOnDrop(Some(ongoing_codegen));\n \n     // Codegen an allocator shim, if necessary.\n     //\n@@ -949,7 +951,54 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ongoing_codegen.check_for_errors(tcx.sess);\n \n     assert_and_save_dep_graph(tcx);\n-    ongoing_codegen\n+    ongoing_codegen.into_inner()\n+}\n+\n+/// A curious wrapper structure whose only purpose is to call `codegen_aborted`\n+/// when it's dropped abnormally.\n+///\n+/// In the process of working on rust-lang/rust#55238 a mysterious segfault was\n+/// stumbled upon. The segfault was never reproduced locally, but it was\n+/// suspected to be releated to the fact that codegen worker threads were\n+/// sticking around by the time the main thread was exiting, causing issues.\n+///\n+/// This structure is an attempt to fix that issue where the `codegen_aborted`\n+/// message will block until all workers have finished. This should ensure that\n+/// even if the main codegen thread panics we'll wait for pending work to\n+/// complete before returning from the main thread, hopefully avoiding\n+/// segfaults.\n+///\n+/// If you see this comment in the code, then it means that this workaround\n+/// worked! We may yet one day track down the mysterious cause of that\n+/// segfault...\n+struct AbortCodegenOnDrop(Option<OngoingCodegen>);\n+\n+impl AbortCodegenOnDrop {\n+    fn into_inner(mut self) -> OngoingCodegen {\n+        self.0.take().unwrap()\n+    }\n+}\n+\n+impl Deref for AbortCodegenOnDrop {\n+    type Target = OngoingCodegen;\n+\n+    fn deref(&self) -> &OngoingCodegen {\n+        self.0.as_ref().unwrap()\n+    }\n+}\n+\n+impl DerefMut for AbortCodegenOnDrop {\n+    fn deref_mut(&mut self) -> &mut OngoingCodegen {\n+        self.0.as_mut().unwrap()\n+    }\n+}\n+\n+impl Drop for AbortCodegenOnDrop {\n+    fn drop(&mut self) {\n+        if let Some(codegen) = self.0.take() {\n+            codegen.codegen_aborted();\n+        }\n+    }\n }\n \n fn assert_and_save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}, {"sha": "1e32f5ef6f0b61c82a92249497fa2c40aa86048c", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -38,3 +38,8 @@ syntax = { path = \"../libsyntax\" }\n smallvec = { version = \"0.6.5\", features = [\"union\"] }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+\n+[dependencies.jemalloc-sys]\n+version = '0.1.8'\n+optional = true\n+features = ['unprefixed_malloc_on_supported_platforms']"}, {"sha": "e8fdaddaeb89cd5a3e654f196c3dd9007030707f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -64,6 +64,14 @@ extern crate syntax;\n extern crate syntax_ext;\n extern crate syntax_pos;\n \n+// Note that the linkage here should be all that we need, on Linux we're not\n+// prefixing the symbols here so this should naturally override our default\n+// allocator. On OSX it should override via the zone allocator. We shouldn't\n+// enable this by default on other platforms, so other platforms aren't handled\n+// here yet.\n+#[cfg(feature = \"jemalloc-sys\")]\n+extern crate jemalloc_sys;\n+\n use driver::CompileController;\n use pretty::{PpMode, UserIdentifiedItem};\n "}, {"sha": "684ea4c78978cc2b9a79f5a45c448bf4508d8318", "filename": "src/librustc_target/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FCargo.toml?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -13,6 +13,3 @@ bitflags = \"1.0\"\n log = \"0.4\"\n rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n serialize = { path = \"../libserialize\" }\n-\n-[features]\n-jemalloc = []"}, {"sha": "8774c15ff01211b1dc6f30b95fcaa23f7fef057f", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -44,7 +44,6 @@ pub fn opts() -> TargetOptions {\n         dll_suffix: \".dylib\".to_string(),\n         archive_format: \"bsd\".to_string(),\n         pre_link_args: LinkArgs::new(),\n-        exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: version >= (10, 7),\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,"}, {"sha": "e926e4913d634801a0b1fac235f461fb01ddc0fb", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -99,10 +99,6 @@ pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n         pre_link_args,\n         has_elf_tls: false,\n         eliminate_frame_pointer: false,\n-        // The following line is a workaround for jemalloc 4.5 being broken on\n-        // ios. jemalloc 5.0 is supposed to fix this.\n-        // see https://github.com/rust-lang/rust/issues/45262\n-        exe_allocation_crate: None,\n         .. super::apple_base::opts()\n     })\n }"}, {"sha": "055bca6c34848621d11685de781c6c8db554b216", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n     // https://developer.android.com/ndk/guides/abis.html#armeabi\n     base.features = \"+strict-align,+v5te\".to_string();\n-    base.max_atomic_width = Some(64);\n+    base.max_atomic_width = Some(32);\n \n     Ok(Target {\n         llvm_target: \"arm-linux-androideabi\".to_string(),"}, {"sha": "fb78cf495e22ac2caf3db616db59cbfc531c0e07", "filename": "src/librustc_target/spec/cloudabi_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -38,7 +38,6 @@ pub fn opts() -> TargetOptions {\n         // dynamic linking.\n         tls_model: \"local-exec\".to_string(),\n         relro_level: RelroLevel::Full,\n-        exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()\n     }\n }"}, {"sha": "a9e317b7cb8a74d5f8ab907b8c8c2bcd9ab552fd", "filename": "src/librustc_target/spec/dragonfly_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -33,7 +33,6 @@ pub fn opts() -> TargetOptions {\n         pre_link_args: args,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n-        exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()\n     }\n }"}, {"sha": "c8a2946da50a50f7582f12faac6fd296862c303e", "filename": "src/librustc_target/spec/freebsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -34,7 +34,6 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         eliminate_frame_pointer: false, // FIXME 43575\n         relro_level: RelroLevel::Full,\n-        exe_allocation_crate: super::maybe_jemalloc(),\n         abi_return_struct_as_int: true,\n         .. Default::default()\n     }"}, {"sha": "01f65d573632242ea0cbf2eab54343716efa00cb", "filename": "src/librustc_target/spec/linux_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_base.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -36,7 +36,6 @@ pub fn opts() -> TargetOptions {\n         pre_link_args: args,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n-        exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: true,\n         .. Default::default()\n     }"}, {"sha": "49b4d6ec0f9549e32fe6d3b084ad5521147ca72c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -1270,14 +1270,6 @@ impl ToJson for Target {\n     }\n }\n \n-fn maybe_jemalloc() -> Option<String> {\n-    if cfg!(feature = \"jemalloc\") {\n-        Some(\"alloc_jemalloc\".to_string())\n-    } else {\n-        None\n-    }\n-}\n-\n /// Either a target triple string or a path to a JSON file.\n #[derive(PartialEq, Clone, Debug, Hash, RustcEncodable, RustcDecodable)]\n pub enum TargetTriple {"}, {"sha": "93b889d5d399ee12032fd31a1343b4ba40ad85c7", "filename": "src/librustc_target/spec/solaris_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -18,7 +18,6 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         target_family: Some(\"unix\".to_string()),\n         is_like_solaris: true,\n-        exe_allocation_crate: super::maybe_jemalloc(),\n \n         .. Default::default()\n     }"}, {"sha": "0f22459b34349fe79a22a8a3f9e5a33e4aa03cf7", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -14,7 +14,6 @@ crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n alloc = { path = \"../liballoc\" }\n-alloc_jemalloc = { path = \"../liballoc_jemalloc\", optional = true }\n alloc_system = { path = \"../liballoc_system\" }\n panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n panic_abort = { path = \"../libpanic_abort\" }\n@@ -43,9 +42,6 @@ build_helper = { path = \"../build_helper\" }\n \n [features]\n backtrace = []\n-debug-jemalloc = [\"alloc_jemalloc/debug\"]\n-jemalloc = [\"alloc_jemalloc\"]\n-force_alloc_system = []\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n "}, {"sha": "1ff342fa7a7bea25213c1bb5bf4d4ea8a374dc90", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -13,13 +13,10 @@\n //! In a given program, the standard library has one \u201cglobal\u201d memory allocator\n //! that is used for example by `Box<T>` and `Vec<T>`.\n //!\n-//! Currently the default global allocator is unspecified.\n-//! The compiler may link to a version of [jemalloc] on some platforms,\n-//! but this is not guaranteed.\n-//! Libraries, however, like `cdylib`s and `staticlib`s are guaranteed\n-//! to use the [`System`] by default.\n+//! Currently the default global allocator is unspecified. Libraries, however,\n+//! like `cdylib`s and `staticlib`s are guaranteed to use the [`System`] by\n+//! default.\n //!\n-//! [jemalloc]: https://github.com/jemalloc/jemalloc\n //! [`System`]: struct.System.html\n //!\n //! # The `#[global_allocator]` attribute"}, {"sha": "b55d12e4c8dc96693dc81493fc9e7d8a94995bfa", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -313,14 +313,7 @@\n \n #![default_lib_allocator]\n \n-// Always use alloc_system during stage0 since we don't know if the alloc_*\n-// crate the stage0 compiler will pick by default is enabled (e.g.\n-// if the user has disabled jemalloc in `./configure`).\n-// `force_alloc_system` is *only* intended as a workaround for local rebuilds\n-// with a rustc without jemalloc.\n-// FIXME(#44236) shouldn't need MSVC logic\n-#[cfg(all(not(target_env = \"msvc\"),\n-          any(all(stage0, not(test)), feature = \"force_alloc_system\")))]\n+#[cfg(stage0)]\n #[global_allocator]\n static ALLOC: alloc_system::System = alloc_system::System;\n "}, {"sha": "ec822fddef3eba1b2638f82869d131a2b8ec9e46", "filename": "src/rustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.toml?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -12,4 +12,4 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_driver = { path = \"../librustc_driver\" }\n \n [features]\n-jemalloc = [\"rustc_target/jemalloc\"]\n+jemalloc = ['rustc_driver/jemalloc-sys']"}, {"sha": "466d2fa0d2bd627b4461c52158dc7e8cdc30a8ed", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -84,8 +84,7 @@ fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n \n         // This is intentional, this dependency just makes the crate available\n         // for others later on. Cover cases\n-        let whitelisted = krate == \"alloc_jemalloc\";\n-        let whitelisted = whitelisted || krate.starts_with(\"panic\");\n+        let whitelisted = krate.starts_with(\"panic\");\n         if toml.contains(\"name = \\\"std\\\"\") && whitelisted {\n             continue\n         }"}, {"sha": "e235de9c5e138d619b2ef38f0915025086d1fd31", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -57,7 +57,6 @@ pub mod libcoretest;\n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n         \"src/dlmalloc\",\n-        \"src/jemalloc\",\n         \"src/llvm\",\n         \"src/llvm-emscripten\",\n         \"src/libbacktrace\","}, {"sha": "e8f197ba78afe1f83d4f7a158d1443ed2efa0a6c", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e8f9dbdc4f154d799589ce5e21c020c51f2123/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=b6e8f9dbdc4f154d799589ce5e21c020c51f2123", "patch": "@@ -28,7 +28,6 @@\n //! - core may not have platform-specific code\n //! - libcompiler_builtins may have platform-specific code\n //! - liballoc_system may have platform-specific code\n-//! - liballoc_jemalloc may have platform-specific code\n //! - libpanic_abort may have platform-specific code\n //! - libpanic_unwind may have platform-specific code\n //! - libunwind may have platform-specific code\n@@ -52,7 +51,6 @@ use std::iter::Iterator;\n // Paths that may contain platform-specific code\n const EXCEPTION_PATHS: &[&str] = &[\n     // std crates\n-    \"src/liballoc_jemalloc\",\n     \"src/liballoc_system\",\n     \"src/libcompiler_builtins\",\n     \"src/liblibc\","}]}