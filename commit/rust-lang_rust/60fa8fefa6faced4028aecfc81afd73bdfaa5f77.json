{"sha": "60fa8fefa6faced4028aecfc81afd73bdfaa5f77", "node_id": "C_kwDOAAsO6NoAKDYwZmE4ZmVmYTZmYWNlZDQwMjhhZWNmYzgxYWZkNzNiZGZhYTVmNzc", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-14T08:34:19Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-14T08:34:19Z"}, "message": "refactor: reduce nesting", "tree": {"sha": "c39fb2040e933fd2b94df91d706a4f2d13b51e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c39fb2040e933fd2b94df91d706a4f2d13b51e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60fa8fefa6faced4028aecfc81afd73bdfaa5f77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPrR4sACgkQ4laYqTBY\nYXGvfBAAq7LnPIlQCZ0S3PRiYwzYmBge9qY0oGThUZnwyLOe9WVH0cPp68rzo6+N\nzWbSqI1wvWjHuQ9qAUGpzBK/8P6BZuF/NOjRWCEsSxoFZjfJhVcmIyPgl9W4aUTc\nyetaEiKXoGUG0r5tJ18eSxOq7mHab5uIQqR/VND+23wa7XG+w3x64INH3Q1Bhi0M\nDJ9CxHB8jE3belkxnFZzfQAAhnnoQlPMFaLHH7gsiAfpL9TWxgkJEDwaDZY4Hvsw\ntdsaz+cUBrS6NBwlT9ZaYPREL22U4lD4LqzoAimcBLGKy7M5vNi8JzaNUwcdappV\n6HCPJ0zol166q7O1BFYrz51PV3M8hI0r8byE45Qc9KLI1TkK8rdwQHWE2rIZb64Y\nTVWSzWNkB0iHyyRhQh48FiRpm6gpKe2O79BjLbHQ8JROw3XIn0POMW5uus7oZjOU\nsMID4lvXkmLZffHrTvxux3drvBLcoyoM6nwll6sglqzThD3TTrq5JPmXwtG1mNGW\ne2v9H6fmcWPRK6Gs+2Ja9evRlE11LSHY6A10iev1Ef/y4EGvVk224TXa4Q9fVIAm\nj6H42oGErEAYvhmxLEj8b047ry+B9ZAW0LZam1H5y9bSatLp6R4u9SIy5FLJ1ZWI\n68G8r8/bFkHlrs4ciSgHRBEDbzeuixO5tsohpurjpSmWQ3zxhmw=\n=H3U4\n-----END PGP SIGNATURE-----", "payload": "tree c39fb2040e933fd2b94df91d706a4f2d13b51e7c\nparent 098d9d77b45749aeb7514c1cea2b750791ead85e\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1676363659 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1676363659 +0900\n\nrefactor: reduce nesting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60fa8fefa6faced4028aecfc81afd73bdfaa5f77", "html_url": "https://github.com/rust-lang/rust/commit/60fa8fefa6faced4028aecfc81afd73bdfaa5f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60fa8fefa6faced4028aecfc81afd73bdfaa5f77/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098d9d77b45749aeb7514c1cea2b750791ead85e", "url": "https://api.github.com/repos/rust-lang/rust/commits/098d9d77b45749aeb7514c1cea2b750791ead85e", "html_url": "https://github.com/rust-lang/rust/commit/098d9d77b45749aeb7514c1cea2b750791ead85e"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "c18a27f17d22cdcd5253299a59484405b04b28fc", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/60fa8fefa6faced4028aecfc81afd73bdfaa5f77/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fa8fefa6faced4028aecfc81afd73bdfaa5f77/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=60fa8fefa6faced4028aecfc81afd73bdfaa5f77", "patch": "@@ -460,7 +460,8 @@ impl<'a> FindUsages<'a> {\n                     // `name` is stripped of raw ident prefix. See the comment on name retrieval above.\n                     it.text().trim_start_matches(\"r#\") == name\n                 })\n-                .map(|token| {\n+                .into_iter()\n+                .flat_map(|token| {\n                     // FIXME: There should be optimization potential here\n                     // Currently we try to descend everything we find which\n                     // means we call `Semantics::descend_into_macros` on\n@@ -476,30 +477,23 @@ impl<'a> FindUsages<'a> {\n \n             // Search for occurrences of the items name\n             for offset in match_indices(&text, finder, search_range) {\n-                if let Some(iter) = find_nodes(name, &tree, offset) {\n-                    for name in iter.filter_map(ast::NameLike::cast) {\n-                        if match name {\n-                            ast::NameLike::NameRef(name_ref) => {\n-                                self.found_name_ref(&name_ref, sink)\n-                            }\n-                            ast::NameLike::Name(name) => self.found_name(&name, sink),\n-                            ast::NameLike::Lifetime(lifetime) => {\n-                                self.found_lifetime(&lifetime, sink)\n-                            }\n-                        } {\n-                            return;\n-                        }\n+                for name in find_nodes(name, &tree, offset).filter_map(ast::NameLike::cast) {\n+                    if match name {\n+                        ast::NameLike::NameRef(name_ref) => self.found_name_ref(&name_ref, sink),\n+                        ast::NameLike::Name(name) => self.found_name(&name, sink),\n+                        ast::NameLike::Lifetime(lifetime) => self.found_lifetime(&lifetime, sink),\n+                    } {\n+                        return;\n                     }\n                 }\n             }\n             // Search for occurrences of the `Self` referring to our type\n             if let Some((self_ty, finder)) = &include_self_kw_refs {\n                 for offset in match_indices(&text, finder, search_range) {\n-                    if let Some(iter) = find_nodes(\"Self\", &tree, offset) {\n-                        for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                            if self.found_self_ty_name_ref(self_ty, &name_ref, sink) {\n-                                return;\n-                            }\n+                    for name_ref in find_nodes(\"Self\", &tree, offset).filter_map(ast::NameRef::cast)\n+                    {\n+                        if self.found_self_ty_name_ref(self_ty, &name_ref, sink) {\n+                            return;\n                         }\n                     }\n                 }\n@@ -518,21 +512,21 @@ impl<'a> FindUsages<'a> {\n                 let tree = Lazy::new(move || sema.parse(file_id).syntax().clone());\n \n                 for offset in match_indices(&text, finder, search_range) {\n-                    if let Some(iter) = find_nodes(\"super\", &tree, offset) {\n-                        for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                            if self.found_name_ref(&name_ref, sink) {\n-                                return;\n-                            }\n+                    for name_ref in\n+                        find_nodes(\"super\", &tree, offset).filter_map(ast::NameRef::cast)\n+                    {\n+                        if self.found_name_ref(&name_ref, sink) {\n+                            return;\n                         }\n                     }\n                 }\n                 if let Some(finder) = &is_crate_root {\n                     for offset in match_indices(&text, finder, search_range) {\n-                        if let Some(iter) = find_nodes(\"crate\", &tree, offset) {\n-                            for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                                if self.found_name_ref(&name_ref, sink) {\n-                                    return;\n-                                }\n+                        for name_ref in\n+                            find_nodes(\"crate\", &tree, offset).filter_map(ast::NameRef::cast)\n+                        {\n+                            if self.found_name_ref(&name_ref, sink) {\n+                                return;\n                             }\n                         }\n                     }\n@@ -571,11 +565,10 @@ impl<'a> FindUsages<'a> {\n                 let finder = &Finder::new(\"self\");\n \n                 for offset in match_indices(&text, finder, search_range) {\n-                    if let Some(iter) = find_nodes(\"self\", &tree, offset) {\n-                        for name_ref in iter.filter_map(ast::NameRef::cast) {\n-                            if self.found_self_module_name_ref(&name_ref, sink) {\n-                                return;\n-                            }\n+                    for name_ref in find_nodes(\"self\", &tree, offset).filter_map(ast::NameRef::cast)\n+                    {\n+                        if self.found_self_module_name_ref(&name_ref, sink) {\n+                            return;\n                         }\n                     }\n                 }"}]}