{"sha": "45dd0632bc63a04cdc1499a392d83139e2e8c348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZGQwNjMyYmM2M2EwNGNkYzE0OTlhMzkyZDgzMTM5ZTJlOGMzNDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-15T22:00:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-22T19:55:56Z"}, "message": "rename `parameter_environment` to `param_env`", "tree": {"sha": "1037d09e98c29653c9b63fa1e3a96b30a3eeb1af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1037d09e98c29653c9b63fa1e3a96b30a3eeb1af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45dd0632bc63a04cdc1499a392d83139e2e8c348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45dd0632bc63a04cdc1499a392d83139e2e8c348", "html_url": "https://github.com/rust-lang/rust/commit/45dd0632bc63a04cdc1499a392d83139e2e8c348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45dd0632bc63a04cdc1499a392d83139e2e8c348/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697146bf406deaa790915da346b6188220e562be", "url": "https://api.github.com/repos/rust-lang/rust/commits/697146bf406deaa790915da346b6188220e562be", "html_url": "https://github.com/rust-lang/rust/commit/697146bf406deaa790915da346b6188220e562be"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "270430f40df02d145ed68321d5c50f35d0516126", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -161,7 +161,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // For region variables.\n     region_vars: RegionVarBindings<'a, 'gcx, 'tcx>,\n \n-    pub parameter_environment: ty::ParamEnv<'gcx>,\n+    pub param_env: ty::ParamEnv<'gcx>,\n \n     /// Caches the results of trait selection. This cache is used\n     /// for things that have to do with the parameters in scope.\n@@ -453,7 +453,7 @@ impl<'a, 'tcx> InferEnv<'a, 'tcx> for hir::BodyId {\n         let def_id = tcx.hir.body_owner_def_id(self);\n         (Some(tcx.typeck_tables_of(def_id)),\n          None,\n-         Some(tcx.parameter_environment(def_id)))\n+         Some(tcx.param_env(def_id)))\n     }\n }\n \n@@ -498,7 +498,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n             int_unification_table: RefCell::new(UnificationTable::new()),\n             float_unification_table: RefCell::new(UnificationTable::new()),\n             region_vars: RegionVarBindings::new(self),\n-            parameter_environment: param_env.unwrap(),\n+            param_env: param_env.unwrap(),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             projection_cache: RefCell::new(traits::ProjectionCache::new()),\n@@ -535,7 +535,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             int_unification_table: RefCell::new(UnificationTable::new()),\n             float_unification_table: RefCell::new(UnificationTable::new()),\n             region_vars: RegionVarBindings::new(tcx),\n-            parameter_environment: param_env,\n+            param_env: param_env,\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             reported_trait_errors: RefCell::new(FxHashSet()),\n@@ -1673,7 +1673,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn param_env(&self) -> ty::ParamEnv<'gcx> {\n-        self.parameter_environment\n+        self.param_env\n     }\n \n     pub fn closure_kind(&self,"}, {"sha": "e358f39bd9a3a1356fb2130b3ea15cb1b382bcb9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -482,7 +482,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.infer_ctxt(elaborated_env, Reveal::UserFacing).enter(|infcx| {\n         let predicates = match fully_normalize(\n                 &infcx, cause,\n-                // You would really want to pass infcx.parameter_environment.caller_bounds here,\n+                // You would really want to pass infcx.param_env.caller_bounds here,\n                 // but that is an interned slice, and fully_normalize takes &T and returns T, so\n                 // without further refactoring, a slice can't be used. Luckily, we still have the\n                 // predicate vector from which we created the ParamEnv in infcx, so we\n@@ -494,7 +494,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             Err(errors) => {\n                 infcx.report_fulfillment_errors(&errors);\n                 // An unnormalized env is better than nothing.\n-                return infcx.parameter_environment;\n+                return infcx.param_env;\n             }\n         };\n \n@@ -516,13 +516,13 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // all things considered.\n                 tcx.sess.span_err(span, &fixup_err.to_string());\n                 // An unnormalized env is better than nothing.\n-                return infcx.parameter_environment;\n+                return infcx.param_env;\n             }\n         };\n \n         let predicates = match tcx.lift_to_global(&predicates) {\n             Some(predicates) => predicates,\n-            None => return infcx.parameter_environment\n+            None => return infcx.param_env\n         };\n \n         debug!(\"normalize_param_env_or_error: resolved predicates={:?}\","}, {"sha": "e0f28e3b49e919832a56b8bc738e0b2f6d983fe2", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -180,7 +180,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     // create a parameter environment corresponding to a (skolemized) instantiation of impl1\n-    let penv = tcx.parameter_environment(impl1_def_id);\n+    let penv = tcx.param_env(impl1_def_id);\n     let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id).unwrap();\n \n     // Create a infcx, taking the predicates of impl1 as assumptions:\n@@ -250,7 +250,7 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                        source_trait_ref,\n                        target_trait_ref,\n                        errors,\n-                       infcx.parameter_environment.caller_bounds);\n+                       infcx.param_env.caller_bounds);\n                 Err(())\n             }\n "}, {"sha": "1a8c74ff1f94323db427711be1617d01c1100a48", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -1079,7 +1079,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n         let ptr_layout = |pointee: Ty<'gcx>| {\n             let non_zero = !ty.is_unsafe_ptr();\n             let pointee = infcx.normalize_projections(pointee);\n-            if pointee.is_sized(tcx, infcx.parameter_environment, DUMMY_SP) {\n+            if pointee.is_sized(tcx, infcx.param_env, DUMMY_SP) {\n                 Ok(Scalar { value: Pointer, non_zero: non_zero })\n             } else {\n                 let unsized_part = tcx.struct_tail(pointee);\n@@ -1268,7 +1268,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     let kind = if def.is_enum() || def.variants[0].fields.len() == 0{\n                         StructKind::AlwaysSizedUnivariant\n                     } else {\n-                        let param_env = tcx.parameter_environment(def.did);\n+                        let param_env = tcx.param_env(def.did);\n                         let fields = &def.variants[0].fields;\n                         let last_field = &fields[fields.len()-1];\n                         let always_sized = tcx.type_of(last_field.did)"}, {"sha": "31492a8624da6d2ca4152b77141c68abfff742b7", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -890,7 +890,7 @@ define_maps! { <'tcx>\n     [] specialization_graph_of: SpecializationGraph(DefId) -> Rc<specialization_graph::Graph>,\n     [] is_object_safe: ObjectSafety(DefId) -> bool,\n \n-    [] parameter_environment: ParamEnv(DefId) -> ty::ParamEnv<'tcx>,\n+    [] param_env: ParamEnv(DefId) -> ty::ParamEnv<'tcx>,\n \n     // Trait selection queries. These are best used by invoking `ty.moves_by_default()`,\n     // `ty.is_copy()`, etc, since that will prune the environment where possible."}, {"sha": "fa731f6dde638f6fb97f3ff4acf282ad5e5239c9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -2518,7 +2518,7 @@ fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option\n }\n \n /// See `ParamEnv` struct def'n for details.\n-fn parameter_environment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    def_id: DefId)\n                                    -> ParamEnv<'tcx> {\n     // Compute the bounds on Self and the type parameters.\n@@ -2555,7 +2555,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         adt_sized_constraint,\n         adt_dtorck_constraint,\n         def_span,\n-        parameter_environment,\n+        param_env,\n         trait_of_item,\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         relevant_trait_impls_for: trait_def::relevant_trait_impls_provider,\n@@ -2569,7 +2569,7 @@ pub fn provide_extern(providers: &mut ty::maps::Providers) {\n         adt_dtorck_constraint,\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         relevant_trait_impls_for: trait_def::relevant_trait_impls_provider,\n-        parameter_environment,\n+        param_env,\n         ..*providers\n     };\n }"}, {"sha": "722ec6424fecec3dc9c0393b1df4989b022e16f2", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -197,7 +197,7 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         dfcx_loans: dfcx_loans,\n         move_data: move_data,\n         all_loans: all_loans,\n-        param_env: &infcx.parameter_environment\n+        param_env: &infcx.param_env\n     };\n     euv::ExprUseVisitor::new(&mut clcx, &bccx.region_maps, &infcx).consume_body(body);\n }"}, {"sha": "e0d86ff23f8621a6aae97415ee2919e2990055f8", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -44,7 +44,7 @@ impl MirPass for ElaborateDrops {\n             _ => return\n         }\n         let id = src.item_id();\n-        let param_env = tcx.parameter_environment(tcx.hir.local_def_id(id));\n+        let param_env = tcx.param_env(tcx.hir.local_def_id(id));\n         let move_data = MoveData::gather_moves(mir, tcx, param_env);\n         let elaborate_patch = {\n             let mir = &*mir;"}, {"sha": "2eb064305e87c0626999e4951acf956089148332", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -65,7 +65,7 @@ pub fn borrowck_mir(bcx: &mut BorrowckCtxt,\n     // steals it, but it forces the `borrowck` query.\n     let mir = &tcx.mir_validated(def_id).borrow();\n \n-    let param_env = tcx.parameter_environment(def_id);\n+    let param_env = tcx.param_env(def_id);\n     let move_data = MoveData::gather_moves(mir, tcx, param_env);\n     let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());"}, {"sha": "7ed5f620816e11d5cca9c3ddf10fdabf3fdcb47c", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n             tcx: self.tcx,\n             tables: self.tcx.body_tables(b),\n             region_maps: &self.tcx.region_maps(def_id),\n-            param_env: self.tcx.parameter_environment(def_id)\n+            param_env: self.tcx.param_env(def_id)\n         }.visit_body(self.tcx.hir.body(b));\n     }\n }"}, {"sha": "39b8e568ab48d959f5a1e1a5a573c7b0a3b59a36", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -988,7 +988,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n                         traits::Obligation::new(traits::ObligationCause::misc(span, expr_id),\n                                                 trait_ref.to_poly_trait_predicate());\n \n-                    let param_env = tcx.parameter_environment(method.def_id);\n+                    let param_env = tcx.param_env(method.def_id);\n                     tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n                         let mut selcx = traits::SelectionContext::new(&infcx);\n                         match selcx.select(&obligation) {\n@@ -1257,7 +1257,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n     fn check_item(&mut self, ctx: &LateContext, item: &hir::Item) {\n         if let hir::ItemUnion(ref vdata, _) = item.node {\n             let item_def_id = ctx.tcx.hir.local_def_id(item.id);\n-            let param_env = ctx.tcx.parameter_environment(item_def_id);\n+            let param_env = ctx.tcx.param_env(item_def_id);\n             for field in vdata.fields() {\n                 let field_ty = ctx.tcx.type_of(ctx.tcx.hir.local_def_id(field.id));\n                 if field_ty.needs_drop(ctx.tcx, param_env) {"}, {"sha": "9e151596a1ab5da35de92a0d6d6bf6bd8792baec", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -172,7 +172,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     let span = tcx.hir.span(ctor_id);\n     if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n-        let pe = tcx.parameter_environment(tcx.hir.local_def_id(ctor_id));\n+        let pe = tcx.param_env(tcx.hir.local_def_id(ctor_id));\n         tcx.infer_ctxt(pe, Reveal::UserFacing).enter(|infcx| {\n             let (mut mir, src) =\n                 shim::build_adt_ctor(&infcx, ctor_id, fields, span);"}, {"sha": "f61e2545f71fec7466433d5ccad2114c6f07ca21", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                   type with inference types/regions\",\n                  ty);\n         });\n-        ty.needs_drop(self.tcx.global_tcx(), self.infcx.parameter_environment)\n+        ty.needs_drop(self.tcx.global_tcx(), self.infcx.param_env)\n     }\n \n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "428685d7f5058cf1dbdaeabb0251eb9096352e3d", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -186,7 +186,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n \n     if let Some(..) = ty {\n         let patch = {\n-            let param_env = tcx.parameter_environment(def_id);\n+            let param_env = tcx.param_env(def_id);\n             let mut elaborator = DropShimElaborator {\n                 mir: &mir,\n                 patch: MirPatch::new(&mir),"}, {"sha": "edb2f44d18e35423afe37ec1bebed8a9bca2f5d8", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         // FIXME: Give a bonus to functions with only a single caller\n \n         let def_id = tcx.hir.local_def_id(self.source.item_id());\n-        let param_env = tcx.parameter_environment(def_id);\n+        let param_env = tcx.param_env(def_id);\n \n         let mut first_block = true;\n         let mut cost = 0;"}, {"sha": "4e84cbe6fecb130bfd268a39cdfab4c0edc345d2", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -937,7 +937,7 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return Qualif::NOT_CONST.bits();\n     }\n \n-    let param_env = tcx.parameter_environment(def_id);\n+    let param_env = tcx.param_env(def_id);\n \n     let mut qualifier = Qualifier::new(tcx, param_env, def_id, mir, Mode::Const);\n     qualifier.qualify_const().bits()\n@@ -965,7 +965,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             MirSource::Const(_) |\n             MirSource::Promoted(..) => return\n         };\n-        let param_env = tcx.parameter_environment(def_id);\n+        let param_env = tcx.param_env(def_id);\n \n         if mode == Mode::Fn || mode == Mode::ConstFn {\n             // This is ugly because Qualifier holds onto mir,"}, {"sha": "6d9603ea459d40941bc1225945f8d55ace1b1eef", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -751,7 +751,7 @@ impl MirPass for TypeckMir {\n             // broken MIR, so try not to report duplicate errors.\n             return;\n         }\n-        let param_env = tcx.parameter_environment(def_id);\n+        let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt(param_env, Reveal::UserFacing).enter(|infcx| {\n             let mut checker = TypeChecker::new(&infcx, item_id);\n             {"}, {"sha": "25845c5768e8c8629a12efee4bccc4d9894ef8c0", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n         }\n \n         let outer_penv = self.tcx.infer_ctxt(body_id, Reveal::UserFacing).enter(|infcx| {\n-            let param_env = infcx.parameter_environment.clone();\n+            let param_env = infcx.param_env.clone();\n             let outer_penv = mem::replace(&mut self.param_env, param_env);\n             let region_maps = &self.tcx.region_maps(item_def_id);;\n             euv::ExprUseVisitor::new(self, region_maps, &infcx).consume_body(body);"}, {"sha": "767cf8f48cfeabfc3989661bebb1ad150e7ed358", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -223,7 +223,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let infcx = &inh.infcx;\n \n         debug!(\"compare_impl_method: caller_bounds={:?}\",\n-               infcx.parameter_environment.caller_bounds);\n+               infcx.param_env.caller_bounds);\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n@@ -345,7 +345,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let region_maps = RegionMaps::new();\n             let mut free_regions = FreeRegionMap::new();\n             free_regions.relate_free_regions_from_predicates(\n-                &infcx.parameter_environment.caller_bounds);\n+                &infcx.param_env.caller_bounds);\n             infcx.resolve_regions_and_report_errors(impl_m.def_id, &region_maps, &free_regions);\n         } else {\n             let fcx = FnCtxt::new(&inh, impl_m_node_id);"}, {"sha": "3ed0da05dc2c2f800e8916017a22e047de4e2069", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -79,7 +79,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n \n     // check that the impl type can be made to match the trait type.\n \n-    let impl_param_env = tcx.parameter_environment(self_type_did);\n+    let impl_param_env = tcx.param_env(self_type_did);\n     tcx.infer_ctxt(impl_param_env, Reveal::UserFacing).enter(|ref infcx| {\n         let tcx = infcx.tcx;\n         let mut fulfillment_cx = traits::FulfillmentContext::new();"}, {"sha": "9ad72b2a137ea2ea10112bfb7ddb61ed1a0b9f23", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -566,7 +566,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                                                param_ty: ty::ParamTy) {\n         // FIXME -- Do we want to commit to this behavior for param bounds?\n \n-        let bounds: Vec<_> = self.parameter_environment\n+        let bounds: Vec<_> = self.param_env\n             .caller_bounds\n             .iter()\n             .filter_map(|predicate| {\n@@ -893,7 +893,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         debug!(\"assemble_where_clause_candidates(trait_def_id={:?})\",\n                trait_def_id);\n \n-        let caller_predicates = self.parameter_environment.caller_bounds.to_vec();\n+        let caller_predicates = self.param_env.caller_bounds.to_vec();\n         for poly_bound in traits::elaborate_predicates(self.tcx, caller_predicates)\n             .filter_map(|p| p.to_opt_poly_trait_ref())\n             .filter(|b| b.def_id() == trait_def_id) {"}, {"sha": "24a88140cf041014af2370a1c5345beb4404f29d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -539,7 +539,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n     pub fn build(tcx: TyCtxt<'a, 'gcx, 'gcx>, def_id: DefId)\n                  -> InheritedBuilder<'a, 'gcx, 'tcx> {\n         let tables = ty::TypeckTables::empty();\n-        let param_env = tcx.parameter_environment(def_id);\n+        let param_env = tcx.param_env(def_id);\n         InheritedBuilder {\n             infcx: tcx.infer_ctxt((tables, param_env), Reveal::UserFacing),\n             def_id,\n@@ -1561,7 +1561,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n         let index = generics.type_param_to_index[&def_id.index];\n         ty::GenericPredicates {\n             parent: None,\n-            predicates: self.parameter_environment.caller_bounds.iter().filter(|predicate| {\n+            predicates: self.param_env.caller_bounds.iter().filter(|predicate| {\n                 match **predicate {\n                     ty::Predicate::Trait(ref data) => {\n                         data.0.self_ty().is_param(index)"}, {"sha": "b29bf01ba1996d472aba27ff1226c376583f2645", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let subject = self.tcx.hir.local_def_id(item_id);\n         let mut rcx = RegionCtxt::new(self, RepeatingScope(item_id), item_id, Subject(subject));\n         rcx.free_region_map.relate_free_regions_from_predicates(\n-            &self.parameter_environment.caller_bounds);\n+            &self.param_env.caller_bounds);\n         rcx.relate_free_regions(wf_tys, item_id, span);\n         rcx.visit_region_obligations(item_id);\n         rcx.resolve_regions_and_report_errors();\n@@ -158,7 +158,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         rcx.free_region_map.relate_free_regions_from_predicates(\n-            &self.parameter_environment.caller_bounds);\n+            &self.param_env.caller_bounds);\n \n         rcx.resolve_regions_and_report_errors();\n \n@@ -1682,7 +1682,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     fn declared_generic_bounds_from_env(&self, generic: GenericKind<'tcx>)\n                                         -> Vec<ty::Region<'tcx>>\n     {\n-        let param_env = &self.parameter_environment;\n+        let param_env = &self.param_env;\n \n         // To start, collect bounds from user:\n         let mut param_bounds = self.tcx.required_region_bounds(generic.to_ty(self.tcx),"}, {"sha": "ff5599fb1bdbf46c24a1dd0c8474360787035b79", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45dd0632bc63a04cdc1499a392d83139e2e8c348/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=45dd0632bc63a04cdc1499a392d83139e2e8c348", "patch": "@@ -105,7 +105,7 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            self_type);\n \n     let span = tcx.hir.span(impl_node_id);\n-    let param_env = tcx.parameter_environment(impl_did);\n+    let param_env = tcx.param_env(impl_did);\n     assert!(!self_type.has_escaping_regions());\n \n     debug!(\"visit_implementation_of_copy: self_type={:?} (free)\",\n@@ -199,7 +199,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            target);\n \n     let span = tcx.hir.span(impl_node_id);\n-    let param_env = tcx.parameter_environment(impl_did);\n+    let param_env = tcx.param_env(impl_did);\n     assert!(!source.has_escaping_regions());\n \n     let err_info = CoerceUnsizedInfo { custom_kind: None };\n@@ -387,7 +387,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Finally, resolve all regions.\n         let region_maps = RegionMaps::new();\n         let mut free_regions = FreeRegionMap::new();\n-        free_regions.relate_free_regions_from_predicates(&infcx.parameter_environment\n+        free_regions.relate_free_regions_from_predicates(&infcx.param_env\n             .caller_bounds);\n         infcx.resolve_regions_and_report_errors(impl_did, &region_maps, &free_regions);\n "}]}