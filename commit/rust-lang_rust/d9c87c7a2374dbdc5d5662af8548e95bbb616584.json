{"sha": "d9c87c7a2374dbdc5d5662af8548e95bbb616584", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Yzg3YzdhMjM3NGRiZGM1ZDU2NjJhZjg1NDhlOTViYmI2MTY1ODQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:09:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:32Z"}, "message": "librustc: De-`@mut` the moves map", "tree": {"sha": "bd9b1286b4cc047827099ce528c401b93338f3fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd9b1286b4cc047827099ce528c401b93338f3fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c87c7a2374dbdc5d5662af8548e95bbb616584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c87c7a2374dbdc5d5662af8548e95bbb616584", "html_url": "https://github.com/rust-lang/rust/commit/d9c87c7a2374dbdc5d5662af8548e95bbb616584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c87c7a2374dbdc5d5662af8548e95bbb616584/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7393d86580b6b417063b48c9ad4c03829d03713", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7393d86580b6b417063b48c9ad4c03829d03713", "html_url": "https://github.com/rust-lang/rust/commit/f7393d86580b6b417063b48c9ad4c03829d03713"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "d0a3be055d1dce5fafe6a0385eb5fc4145251a1c", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9c87c7a2374dbdc5d5662af8548e95bbb616584/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c87c7a2374dbdc5d5662af8548e95bbb616584/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=d9c87c7a2374dbdc5d5662af8548e95bbb616584", "patch": "@@ -475,7 +475,8 @@ impl BorrowckCtxt {\n     }\n \n     pub fn is_move(&self, id: ast::NodeId) -> bool {\n-        self.moves_map.contains(&id)\n+        let moves_map = self.moves_map.borrow();\n+        moves_map.get().contains(&id)\n     }\n \n     pub fn cat_expr(&self, expr: @ast::Expr) -> mc::cmt {"}, {"sha": "116d0155084ac4ddaaa91e64a92100d452665321", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9c87c7a2374dbdc5d5662af8548e95bbb616584/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c87c7a2374dbdc5d5662af8548e95bbb616584/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=d9c87c7a2374dbdc5d5662af8548e95bbb616584", "patch": "@@ -889,7 +889,8 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                     by_ref_span = Some(span);\n                 }\n                 BindByValue(_) => {\n-                    if cx.moves_map.contains(&id) {\n+                    let moves_map = cx.moves_map.borrow();\n+                    if moves_map.get().contains(&id) {\n                         any_by_move = true;\n                     }\n                 }\n@@ -926,7 +927,8 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n             if pat_is_binding(def_map, p) {\n                 match p.node {\n                     PatIdent(_, _, sub) => {\n-                        if cx.moves_map.contains(&p.id) {\n+                        let moves_map = cx.moves_map.borrow();\n+                        if moves_map.get().contains(&p.id) {\n                             check_move(p, sub);\n                         }\n                     }"}, {"sha": "29e59ba5c455e2fd13ee1356f6591303618e470b", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d9c87c7a2374dbdc5d5662af8548e95bbb616584/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c87c7a2374dbdc5d5662af8548e95bbb616584/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=d9c87c7a2374dbdc5d5662af8548e95bbb616584", "patch": "@@ -161,7 +161,7 @@ pub struct CaptureVar {\n \n pub type CaptureMap = @RefCell<HashMap<NodeId, @[CaptureVar]>>;\n \n-pub type MovesMap = @mut HashSet<NodeId>;\n+pub type MovesMap = @RefCell<HashSet<NodeId>>;\n \n /**\n  * Set of variable node-ids that are moved.\n@@ -215,7 +215,7 @@ pub fn compute_moves(tcx: ty::ctxt,\n         tcx: tcx,\n         method_map: method_map,\n         move_maps: MoveMaps {\n-            moves_map: @mut HashSet::new(),\n+            moves_map: @RefCell::new(HashSet::new()),\n             capture_map: @RefCell::new(HashMap::new()),\n             moved_variables_set: @mut HashSet::new()\n         }\n@@ -283,7 +283,10 @@ impl VisitContext {\n \n         let expr_ty = ty::expr_ty_adjusted(self.tcx, expr);\n         if ty::type_moves_by_default(self.tcx, expr_ty) {\n-            self.move_maps.moves_map.insert(expr.id);\n+            {\n+                let mut moves_map = self.move_maps.moves_map.borrow_mut();\n+                moves_map.get().insert(expr.id);\n+            }\n             self.use_expr(expr, Move);\n         } else {\n             self.use_expr(expr, Read);\n@@ -388,7 +391,12 @@ impl VisitContext {\n                 // closures should be noncopyable, they shouldn't move by default;\n                 // calling a closure should only consume it if it's once.\n                 if mode == Move {\n-                    self.move_maps.moves_map.insert(callee.id);\n+                    {\n+                        let mut moves_map = self.move_maps\n+                                                .moves_map\n+                                                .borrow_mut();\n+                        moves_map.get().insert(callee.id);\n+                    }\n                 }\n                 self.use_expr(callee, mode);\n                 self.use_fn_args(callee.id, *args);\n@@ -643,7 +651,10 @@ impl VisitContext {\n                    id, bm, binding_moves);\n \n             if binding_moves {\n-                self.move_maps.moves_map.insert(id);\n+                {\n+                    let mut moves_map = self.move_maps.moves_map.borrow_mut();\n+                    moves_map.get().insert(id);\n+                }\n             }\n         })\n     }"}]}