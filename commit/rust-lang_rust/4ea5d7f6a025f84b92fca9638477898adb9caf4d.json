{"sha": "4ea5d7f6a025f84b92fca9638477898adb9caf4d", "node_id": "C_kwDOAAsO6NoAKDRlYTVkN2Y2YTAyNWY4NGI5MmZjYTk2Mzg0Nzc4OThhZGI5Y2FmNGQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-16T18:17:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-16T18:26:26Z"}, "message": "Re-introduce option for macro_arg to prevent calling macros with empty inputs", "tree": {"sha": "f048c3bc24204d90b374adf60a4e6f8bdebe672a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f048c3bc24204d90b374adf60a4e6f8bdebe672a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ea5d7f6a025f84b92fca9638477898adb9caf4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea5d7f6a025f84b92fca9638477898adb9caf4d", "html_url": "https://github.com/rust-lang/rust/commit/4ea5d7f6a025f84b92fca9638477898adb9caf4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ea5d7f6a025f84b92fca9638477898adb9caf4d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2a3fecae39310c698e8088beea8e820ee45fcaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a3fecae39310c698e8088beea8e820ee45fcaa", "html_url": "https://github.com/rust-lang/rust/commit/a2a3fecae39310c698e8088beea8e820ee45fcaa"}], "stats": {"total": 84, "additions": 56, "deletions": 28}, "files": [{"sha": "b63d77b1b282018911554e49c7e5d4148e8181e0", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs?ref=4ea5d7f6a025f84b92fca9638477898adb9caf4d", "patch": "@@ -33,7 +33,7 @@ m!(&k\");\n \"#,\n         expect![[r#\"\n macro_rules! m { ($i:literal) => {}; }\n-/* error: Failed to lower macro args to token tree */\"#]],\n+/* error: invalid token tree */\"#]],\n     );\n }\n "}, {"sha": "ae56934f632f135a9108ffc724d37fb229cee390", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=4ea5d7f6a025f84b92fca9638477898adb9caf4d", "patch": "@@ -98,7 +98,7 @@ macro_rules! m1 { ($x:ident) => { ($x } }\n macro_rules! m2 { ($x:ident) => {} }\n \n /* error: invalid macro definition: expected subtree */\n-/* error: Failed to lower macro args to token tree */\n+/* error: invalid token tree */\n \"#]],\n     )\n }"}, {"sha": "552d69ca2eaf36a5d6e99ab056b96707a6abc5c3", "filename": "crates/hir-def/src/macro_expansion_tests/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmod.rs?ref=4ea5d7f6a025f84b92fca9638477898adb9caf4d", "patch": "@@ -183,13 +183,14 @@ pub fn identity_when_valid(_attr: TokenStream, item: TokenStream) -> TokenStream\n         let range: Range<usize> = range.into();\n \n         if show_token_ids {\n-            let (tree, map, _) = &*arg;\n-            let tt_range = call.token_tree().unwrap().syntax().text_range();\n-            let mut ranges = Vec::new();\n-            extract_id_ranges(&mut ranges, map, tree);\n-            for (range, id) in ranges {\n-                let idx = (tt_range.start() + range.end()).into();\n-                text_edits.push((idx..idx, format!(\"#{}\", id.0)));\n+            if let Some((tree, map, _)) = arg.as_deref() {\n+                let tt_range = call.token_tree().unwrap().syntax().text_range();\n+                let mut ranges = Vec::new();\n+                extract_id_ranges(&mut ranges, map, tree);\n+                for (range, id) in ranges {\n+                    let idx = (tt_range.start() + range.end()).into();\n+                    text_edits.push((idx..idx, format!(\"#{}\", id.0)));\n+                }\n             }\n             text_edits.push((range.start..range.start, \"// \".into()));\n             call.to_string().match_indices('\\n').for_each(|(offset, _)| {"}, {"sha": "d2e3575d5e8d5e6b65c5bcd81322caef18d7015f", "filename": "crates/hir-def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=4ea5d7f6a025f84b92fca9638477898adb9caf4d", "patch": "@@ -109,7 +109,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n }\n \n #[test]\n-fn typing_inside_a_function_should_not_invalidate_expansions() {\n+fn typing_inside_a_function_should_not_invalidate_item_expansions() {\n     let (mut db, pos) = TestDB::with_position(\n         r#\"\n //- /lib.rs\n@@ -161,7 +161,7 @@ m!(Z);\n         let n_recalculated_item_trees = events.iter().filter(|it| it.contains(\"item_tree\")).count();\n         assert_eq!(n_recalculated_item_trees, 1);\n         let n_reparsed_macros =\n-            events.iter().filter(|it| it.contains(\"parse_macro_expansion\")).count();\n+            events.iter().filter(|it| it.contains(\"parse_macro_expansion(\")).count();\n         assert_eq!(n_reparsed_macros, 0);\n     }\n }"}, {"sha": "bed04b3a343ca3d15087bdcbb43e4ec5522a9dc0", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=4ea5d7f6a025f84b92fca9638477898adb9caf4d", "patch": "@@ -120,7 +120,7 @@ pub trait ExpandDatabase: SourceDatabase {\n     fn macro_arg(\n         &self,\n         id: MacroCallId,\n-    ) -> Arc<(tt::Subtree, mbe::TokenMap, fixup::SyntaxFixupUndoInfo)>;\n+    ) -> Option<Arc<(tt::Subtree, mbe::TokenMap, fixup::SyntaxFixupUndoInfo)>>;\n     /// Extracts syntax node, corresponding to a macro call. That's a firewall\n     /// query, only typing in the macro call itself changes the returned\n     /// subtree.\n@@ -318,17 +318,8 @@ fn parse_macro_expansion(\n fn macro_arg(\n     db: &dyn ExpandDatabase,\n     id: MacroCallId,\n-) -> Arc<(tt::Subtree, mbe::TokenMap, fixup::SyntaxFixupUndoInfo)> {\n-    let Some(arg) = db.macro_arg_text(id) else {\n-        return Arc::new((\n-            tt::Subtree {\n-                delimiter: tt::Delimiter::UNSPECIFIED,\n-                token_trees: Vec::new(),\n-            },\n-            Default::default(),\n-            Default::default())\n-        );\n-    };\n+) -> Option<Arc<(tt::Subtree, mbe::TokenMap, fixup::SyntaxFixupUndoInfo)>> {\n+    let arg = db.macro_arg_text(id)?;\n     let loc = db.lookup_intern_macro_call(id);\n \n     let node = SyntaxNode::new_root(arg);\n@@ -347,7 +338,7 @@ fn macro_arg(\n         // proc macros expect their inputs without parentheses, MBEs expect it with them included\n         tt.delimiter = tt::Delimiter::unspecified();\n     }\n-    Arc::new((tt, tmap, fixups.undo_info))\n+    Some(Arc::new((tt, tmap, fixups.undo_info)))\n }\n \n fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> FxHashSet<SyntaxNode> {\n@@ -472,7 +463,20 @@ fn macro_expand(db: &dyn ExpandDatabase, id: MacroCallId) -> ExpandResult<Arc<tt\n             }\n         }\n     };\n-    let macro_arg = db.macro_arg(id);\n+    let Some(macro_arg) = db.macro_arg(id) else {\n+        return ExpandResult {\n+            value: Arc::new(\n+                tt::Subtree {\n+                    delimiter: tt::Delimiter::UNSPECIFIED,\n+                    token_trees: Vec::new(),\n+                },\n+            ),\n+            err: Some(ExpandError::Other(\n+                \"invalid token tree\"\n+                .into(),\n+            )),\n+        };\n+    };\n     let ExpandResult { value: mut tt, err } = expander.expand(db, id, &macro_arg.0);\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n@@ -508,7 +512,18 @@ fn parse_macro_expansion_error(\n \n fn expand_proc_macro(db: &dyn ExpandDatabase, id: MacroCallId) -> ExpandResult<tt::Subtree> {\n     let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n-    let macro_arg = db.macro_arg(id);\n+    let Some(macro_arg) = db.macro_arg(id) else {\n+        return ExpandResult {\n+            value: tt::Subtree {\n+                delimiter: tt::Delimiter::UNSPECIFIED,\n+                token_trees: Vec::new(),\n+            },\n+            err: Some(ExpandError::Other(\n+                \"invalid token tree\"\n+                .into(),\n+            )),\n+        };\n+    };\n \n     let expander = match loc.def.kind {\n         MacroDefKind::ProcMacro(expander, ..) => expander,"}, {"sha": "9af38fed04451d1b1eb4793b66d935cba177d56c", "filename": "crates/hir-expand/src/hygiene.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs?ref=4ea5d7f6a025f84b92fca9638477898adb9caf4d", "patch": "@@ -201,7 +201,13 @@ fn make_hygiene_info(\n \n     let macro_def = db.macro_def(loc.def).ok()?;\n     let (_, exp_map) = db.parse_macro_expansion(macro_file).value;\n-    let macro_arg = db.macro_arg(macro_file.macro_call_id);\n+    let macro_arg = db.macro_arg(macro_file.macro_call_id).unwrap_or_else(|| {\n+        Arc::new((\n+            tt::Subtree { delimiter: tt::Delimiter::UNSPECIFIED, token_trees: Vec::new() },\n+            Default::default(),\n+            Default::default(),\n+        ))\n+    });\n \n     Some(HygieneInfo {\n         file: macro_file,"}, {"sha": "965b9e850b425867bd2383ffbfd30ac60374a6f8", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea5d7f6a025f84b92fca9638477898adb9caf4d/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=4ea5d7f6a025f84b92fca9638477898adb9caf4d", "patch": "@@ -258,7 +258,13 @@ impl HirFileId {\n \n         let macro_def = db.macro_def(loc.def).ok()?;\n         let (parse, exp_map) = db.parse_macro_expansion(macro_file).value;\n-        let macro_arg = db.macro_arg(macro_file.macro_call_id);\n+        let macro_arg = db.macro_arg(macro_file.macro_call_id).unwrap_or_else(|| {\n+            Arc::new((\n+                tt::Subtree { delimiter: tt::Delimiter::UNSPECIFIED, token_trees: Vec::new() },\n+                Default::default(),\n+                Default::default(),\n+            ))\n+        });\n \n         let def = loc.def.ast_id().left().and_then(|id| {\n             let def_tt = match id.to_node(db) {"}]}