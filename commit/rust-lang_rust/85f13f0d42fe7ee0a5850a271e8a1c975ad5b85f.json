{"sha": "85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZjEzZjBkNDJmZTdlZTBhNTg1MGEyNzFlOGExYzk3NWFkNWI4NWY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-08T13:54:22Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-13T17:00:18Z"}, "message": "Add a convert::Infallible empty enum, make string::ParseError an alias", "tree": {"sha": "82cbf19af07bbd7faa715f8f9406ba972fbd9a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82cbf19af07bbd7faa715f8f9406ba972fbd9a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f", "html_url": "https://github.com/rust-lang/rust/commit/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54494727855cd14229f5d456591ed2a2f027c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54494727855cd14229f5d456591ed2a2f027c46", "html_url": "https://github.com/rust-lang/rust/commit/e54494727855cd14229f5d456591ed2a2f027c46"}], "stats": {"total": 133, "additions": 97, "deletions": 36}, "files": [{"sha": "b714df5d36b6a8866f2ec867401376ef688b89b7", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f", "patch": "@@ -486,7 +486,7 @@ impl String {\n     /// [`str::from_utf8`]: ../../std/str/fn.from_utf8.html\n     /// [`as_bytes`]: struct.String.html#method.as_bytes\n     /// [`FromUtf8Error`]: struct.FromUtf8Error.html\n-    /// [`Err`]: ../../stdresult/enum.Result.html#variant.Err\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {\n@@ -2073,48 +2073,17 @@ impl ops::DerefMut for String {\n /// [`String`]: struct.String.html\n /// [`from_str`]: ../../std/str/trait.FromStr.html#tymethod.from_str\n #[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-#[derive(Copy)]\n-pub enum ParseError {}\n+pub type ParseError = core::convert::Infallible;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for String {\n-    type Err = ParseError;\n+    type Err = core::convert::Infallible;\n     #[inline]\n     fn from_str(s: &str) -> Result<String, ParseError> {\n         Ok(String::from(s))\n     }\n }\n \n-#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-impl Clone for ParseError {\n-    fn clone(&self) -> ParseError {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-impl fmt::Debug for ParseError {\n-    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n-impl fmt::Display for ParseError {\n-    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-impl PartialEq for ParseError {\n-    fn eq(&self, _: &ParseError) -> bool {\n-        match *self {}\n-    }\n-}\n-\n-#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n-impl Eq for ParseError {}\n \n /// A trait for converting a value to a `String`.\n ///"}, {"sha": "b31b71aef658554212d2a952e3823f9e8a1ecc22", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f", "patch": "@@ -499,3 +499,96 @@ impl AsRef<str> for str {\n         self\n     }\n }\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// THE NO-ERROR ERROR TYPE\n+////////////////////////////////////////////////////////////////////////////////\n+\n+/// The error type for errors that can never happen.\n+///\n+/// Since this enum has no variant, a value of this type can never actually exist.\n+/// This can be useful for generic APIs that use [`Result`] and parameterize the error type,\n+/// to indicate that the result is always [`Ok`].\n+///\n+/// For example, the [`TryFrom`] trait (conversion that returns a [`Result`])\n+/// has a blanket implementation for all types where a reverse [`Into`] implementation exists.\n+///\n+/// ```ignore (illustrates std code, duplicating the impl in a doctest would be an error)\n+/// impl<T, U> TryFrom<U> for T where U: Into<T> {\n+///     type Error = Infallible;\n+///\n+///     fn try_from(value: U) -> Result<Self, Infallible> {\n+///         Ok(U::into(value))  // Never returns `Err`\n+///     }\n+/// }\n+/// ```\n+///\n+/// # Future compatibility\n+///\n+/// This enum has the same role as [the `!` \u201cnever\u201d type][never],\n+/// which is unstable in this version of Rust.\n+/// When `!` is stabilized, we plan to make `Infallible` a type alias to it:\n+///\n+/// ```ignore (illustrates future std change)\n+/// pub type Infallible = !;\n+/// ```\n+///\n+/// \u2026 and eventually deprecate `Infallible`.\n+///\n+///\n+/// However there is one case where `!` syntax can be used\n+/// before `!` is stabilized as a full-fleged type: in the position of a function\u2019s return type.\n+/// Specifically, it is possible implementations for two different function pointer types:\n+///\n+/// ```\n+/// trait MyTrait {}\n+/// impl MyTrait for fn() -> ! {}\n+/// impl MyTrait for fn() -> std::convert::Infallible {}\n+/// ```\n+///\n+/// With `Infallible` being an enum, this code is valid.\n+/// However when `Infallible` becomes an alias for the never type,\n+/// the two `impl`s will start to overlap\n+/// and therefore will be disallowed by the language\u2019s trait coherence rules.\n+///\n+/// [`Ok`]: ../result/enum.Result.html#variant.Ok\n+/// [`Result`]: ../result/enum.Result.html\n+/// [`TryFrom`]: trait.TryFrom.html\n+/// [`Into`]: trait.Into.html\n+/// [never]: ../../std/primitive.never.html\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+#[derive(Copy)]\n+pub enum Infallible {}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Clone for Infallible {\n+    fn clone(&self) -> Infallible {\n+        match *self {}\n+    }\n+}\n+\n+use fmt;\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl fmt::Debug for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl fmt::Display for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl PartialEq for Infallible {\n+    fn eq(&self, _: &Infallible) -> bool {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Eq for Infallible {}"}, {"sha": "d9199666e58315f7ebab9ecddd9d8524cb988402", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=85f13f0d42fe7ee0a5850a271e8a1c975ad5b85f", "patch": "@@ -78,7 +78,6 @@ use iter::{self, FusedIterator};\n use ops::{self, Deref};\n use rc::Rc;\n use str::FromStr;\n-use string::ParseError;\n use sync::Arc;\n \n use ffi::{OsStr, OsString};\n@@ -1453,7 +1452,7 @@ impl From<String> for PathBuf {\n \n #[stable(feature = \"path_from_str\", since = \"1.32.0\")]\n impl FromStr for PathBuf {\n-    type Err = ParseError;\n+    type Err = core::convert::Infallible;\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         Ok(PathBuf::from(s))"}]}