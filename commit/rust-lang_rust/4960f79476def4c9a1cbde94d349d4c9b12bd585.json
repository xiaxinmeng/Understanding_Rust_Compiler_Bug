{"sha": "4960f79476def4c9a1cbde94d349d4c9b12bd585", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NjBmNzk0NzZkZWY0YzlhMWNiZGU5NGQzNDlkNGM5YjEyYmQ1ODU=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-09-04T07:08:48Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-09-04T09:38:25Z"}, "message": "Add manual_saturating_arithmetic lint", "tree": {"sha": "36406891310e29097f0ec51aef0c5be983de012e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36406891310e29097f0ec51aef0c5be983de012e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4960f79476def4c9a1cbde94d349d4c9b12bd585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4960f79476def4c9a1cbde94d349d4c9b12bd585", "html_url": "https://github.com/rust-lang/rust/commit/4960f79476def4c9a1cbde94d349d4c9b12bd585", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4960f79476def4c9a1cbde94d349d4c9b12bd585/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11da8c18a28aaae210cf87ece7de4d52e21111a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/11da8c18a28aaae210cf87ece7de4d52e21111a7", "html_url": "https://github.com/rust-lang/rust/commit/11da8c18a28aaae210cf87ece7de4d52e21111a7"}], "stats": {"total": 482, "additions": 480, "deletions": 2}, "files": [{"sha": "dbdf3df4ddc38405fc94690b856c52a92daf9629", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -1034,6 +1034,7 @@ Released 2018-09-13\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n+[`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n [`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone"}, {"sha": "dd315fd397b0ca276f49fd72cf5cdb27ff6566e9", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 312 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 313 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "a9294da59b6a3d3ecb47c81c16e9e4476553045d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -793,6 +793,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         methods::ITER_CLONED_COLLECT,\n         methods::ITER_NTH,\n         methods::ITER_SKIP_NEXT,\n+        methods::MANUAL_SATURATING_ARITHMETIC,\n         methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n         methods::OPTION_AND_THEN_SOME,\n@@ -958,6 +959,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         methods::INTO_ITER_ON_REF,\n         methods::ITER_CLONED_COLLECT,\n         methods::ITER_SKIP_NEXT,\n+        methods::MANUAL_SATURATING_ARITHMETIC,\n         methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_OR_NONE,"}, {"sha": "6bfd402f7b1e4e771418ed8ace00f85227ada86f", "filename": "clippy_lints/src/methods/checked_arith_unwrap_or.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/clippy_lints%2Fsrc%2Fmethods%2Fchecked_arith_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/clippy_lints%2Fsrc%2Fmethods%2Fchecked_arith_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchecked_arith_unwrap_or.rs?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -0,0 +1,173 @@\n+use crate::utils::{match_qpath, snippet_with_applicability, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::lint::LateContext;\n+use rustc_errors::Applicability;\n+use rustc_target::abi::LayoutOf;\n+use syntax::ast;\n+\n+pub fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[&[hir::Expr]], arith: &str) {\n+    let unwrap_arg = &args[0][1];\n+    let arith_lhs = &args[1][0];\n+    let arith_rhs = &args[1][1];\n+\n+    let ty = cx.tables.expr_ty(arith_lhs);\n+    if !ty.is_integral() {\n+        return;\n+    }\n+\n+    let mm = if let Some(mm) = is_min_or_max(cx, unwrap_arg) {\n+        mm\n+    } else {\n+        return;\n+    };\n+\n+    if ty.is_signed() {\n+        use self::{MinMax::*, Sign::*};\n+\n+        let sign = if let Some(sign) = lit_sign(arith_rhs) {\n+            sign\n+        } else {\n+            return;\n+        };\n+\n+        match (arith, sign, mm) {\n+            (\"add\", Pos, Max) | (\"add\", Neg, Min) | (\"sub\", Neg, Max) | (\"sub\", Pos, Min) => (),\n+            // \"mul\" is omitted because lhs can be negative.\n+            _ => return,\n+        }\n+\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            super::MANUAL_SATURATING_ARITHMETIC,\n+            expr.span,\n+            \"manual saturating arithmetic\",\n+            &format!(\"try using `saturating_{}`\", arith),\n+            format!(\n+                \"{}.saturating_{}({})\",\n+                snippet_with_applicability(cx, arith_lhs.span, \"..\", &mut applicability),\n+                arith,\n+                snippet_with_applicability(cx, arith_rhs.span, \"..\", &mut applicability),\n+            ),\n+            applicability,\n+        );\n+    } else {\n+        match (mm, arith) {\n+            (MinMax::Max, \"add\") | (MinMax::Max, \"mul\") | (MinMax::Min, \"sub\") => (),\n+            _ => return,\n+        }\n+\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            super::MANUAL_SATURATING_ARITHMETIC,\n+            expr.span,\n+            \"manual saturating arithmetic\",\n+            &format!(\"try using `saturating_{}`\", arith),\n+            format!(\n+                \"{}.saturating_{}({})\",\n+                snippet_with_applicability(cx, arith_lhs.span, \"..\", &mut applicability),\n+                arith,\n+                snippet_with_applicability(cx, arith_rhs.span, \"..\", &mut applicability),\n+            ),\n+            applicability,\n+        );\n+    }\n+}\n+\n+#[derive(PartialEq, Eq)]\n+enum MinMax {\n+    Min,\n+    Max,\n+}\n+\n+fn is_min_or_max<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &hir::Expr) -> Option<MinMax> {\n+    // `T::max_value()` `T::min_value()` inherent methods\n+    if_chain! {\n+        if let hir::ExprKind::Call(func, args) = &expr.node;\n+        if args.is_empty();\n+        if let hir::ExprKind::Path(path) = &func.node;\n+        if let hir::QPath::TypeRelative(_, segment) = path;\n+        then {\n+            match &*segment.ident.as_str() {\n+                \"max_value\" => return Some(MinMax::Max),\n+                \"min_value\" => return Some(MinMax::Min),\n+                _ => {}\n+            }\n+        }\n+    }\n+\n+    let ty = cx.tables.expr_ty(expr);\n+    let ty_str = ty.to_string();\n+\n+    // `std::T::MAX` `std::T::MIN` constants\n+    if let hir::ExprKind::Path(path) = &expr.node {\n+        if match_qpath(path, &[\"core\", &ty_str, \"MAX\"][..]) {\n+            return Some(MinMax::Max);\n+        }\n+\n+        if match_qpath(path, &[\"core\", &ty_str, \"MIN\"][..]) {\n+            return Some(MinMax::Min);\n+        }\n+    }\n+\n+    // Literals\n+    let bits = cx.layout_of(ty).unwrap().size.bits();\n+    let (minval, maxval): (u128, u128) = if ty.is_signed() {\n+        let minval = 1 << (bits - 1);\n+        let mut maxval = !(1 << (bits - 1));\n+        if bits != 128 {\n+            maxval &= (1 << bits) - 1;\n+        }\n+        (minval, maxval)\n+    } else {\n+        (0, if bits == 128 { !0 } else { (1 << bits) - 1 })\n+    };\n+\n+    let check_lit = |expr: &hir::Expr, check_min: bool| {\n+        if let hir::ExprKind::Lit(lit) = &expr.node {\n+            if let ast::LitKind::Int(value, _) = lit.node {\n+                if value == maxval {\n+                    return Some(MinMax::Max);\n+                }\n+\n+                if check_min && value == minval {\n+                    return Some(MinMax::Min);\n+                }\n+            }\n+        }\n+\n+        None\n+    };\n+\n+    if let r @ Some(_) = check_lit(expr, !ty.is_signed()) {\n+        return r;\n+    }\n+\n+    if ty.is_signed() {\n+        if let hir::ExprKind::Unary(hir::UnNeg, val) = &expr.node {\n+            return check_lit(val, true);\n+        }\n+    }\n+\n+    None\n+}\n+\n+#[derive(PartialEq, Eq)]\n+enum Sign {\n+    Pos,\n+    Neg,\n+}\n+\n+fn lit_sign(expr: &hir::Expr) -> Option<Sign> {\n+    if let hir::ExprKind::Unary(hir::UnNeg, inner) = &expr.node {\n+        if let hir::ExprKind::Lit(..) = &inner.node {\n+            return Some(Sign::Neg);\n+        }\n+    } else if let hir::ExprKind::Lit(..) = &expr.node {\n+        return Some(Sign::Pos);\n+    }\n+\n+    None\n+}"}, {"sha": "4c1f13daa24803e9a382579bd7e334fe2c988196", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -1,3 +1,4 @@\n+mod checked_arith_unwrap_or;\n mod option_map_unwrap_or;\n mod unnecessary_filter_map;\n \n@@ -983,6 +984,31 @@ declare_clippy_lint! {\n     \"`MaybeUninit::uninit().assume_init()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `.checked_add/sub(x).unwrap_or(MAX/MIN)`.\n+    ///\n+    /// **Why is this bad?** These can be written simply with `saturating_add/sub` methods.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let x: u32 = 100;\n+    ///\n+    /// let add = x.checked_add(y).unwrap_or(u32::max_value());\n+    /// let sub = x.checked_sub(y).unwrap_or(u32::min_value());\n+    /// ```\n+    ///\n+    /// can be written using dedicated methods for saturating addition/subtraction as:\n+    ///\n+    /// ```rust\n+    /// let add = x.saturating_add(y);\n+    /// let sub = x.saturating_sub(y);\n+    /// ```\n+    pub MANUAL_SATURATING_ARITHMETIC,\n+    style,\n+    \"`.chcked_add/sub(x).unwrap_or(MAX/MIN)`\"\n+}\n+\n declare_lint_pass!(Methods => [\n     OPTION_UNWRAP_USED,\n     RESULT_UNWRAP_USED,\n@@ -1024,6 +1050,7 @@ declare_lint_pass!(Methods => [\n     INTO_ITER_ON_REF,\n     SUSPICIOUS_MAP,\n     UNINIT_ASSUMED_INIT,\n+    MANUAL_SATURATING_ARITHMETIC,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n@@ -1072,6 +1099,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"filter_map\", ..] => unnecessary_filter_map::lint(cx, expr, arg_lists[0]),\n             [\"count\", \"map\"] => lint_suspicious_map(cx, expr),\n             [\"assume_init\"] => lint_maybe_uninit(cx, &arg_lists[0][0], expr),\n+            [\"unwrap_or\", arith @ \"checked_add\"]\n+            | [\"unwrap_or\", arith @ \"checked_sub\"]\n+            | [\"unwrap_or\", arith @ \"checked_mul\"] => {\n+                checked_arith_unwrap_or::lint(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n+            },\n             _ => {},\n         }\n "}, {"sha": "be09ac321d240399be1f6e01a8f303569493dd74", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 312] = [\n+pub const ALL_LINTS: [Lint; 313] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -931,6 +931,13 @@ pub const ALL_LINTS: [Lint; 312] = [\n         deprecation: None,\n         module: \"loops\",\n     },\n+    Lint {\n+        name: \"manual_saturating_arithmetic\",\n+        group: \"style\",\n+        desc: \"`.chcked_add/sub(x).unwrap_or(MAX/MIN)`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"manual_swap\",\n         group: \"complexity\","}, {"sha": "c4f53c446c9f74974a15455a3afb85d3d68250f6", "filename": "tests/ui/manual_saturating_arithmetic.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/tests%2Fui%2Fmanual_saturating_arithmetic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/tests%2Fui%2Fmanual_saturating_arithmetic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_saturating_arithmetic.fixed?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+\n+use std::{i128, i32, u128, u32};\n+\n+fn main() {\n+    let _ = 1u32.saturating_add(1);\n+    let _ = 1u32.saturating_add(1);\n+    let _ = 1u8.saturating_add(1);\n+    let _ = 1u128.saturating_add(1);\n+    let _ = 1u32.checked_add(1).unwrap_or(1234); // ok\n+    let _ = 1u8.checked_add(1).unwrap_or(0); // ok\n+    let _ = 1u32.saturating_mul(1);\n+\n+    let _ = 1u32.saturating_sub(1);\n+    let _ = 1u32.saturating_sub(1);\n+    let _ = 1u8.saturating_sub(1);\n+    let _ = 1u32.checked_sub(1).unwrap_or(1234); // ok\n+    let _ = 1u8.checked_sub(1).unwrap_or(255); // ok\n+\n+    let _ = 1i32.saturating_add(1);\n+    let _ = 1i32.saturating_add(1);\n+    let _ = 1i8.saturating_add(1);\n+    let _ = 1i128.saturating_add(1);\n+    let _ = 1i32.saturating_add(-1);\n+    let _ = 1i32.saturating_add(-1);\n+    let _ = 1i8.saturating_add(-1);\n+    let _ = 1i128.saturating_add(-1);\n+    let _ = 1i32.checked_add(1).unwrap_or(1234); // ok\n+    let _ = 1i8.checked_add(1).unwrap_or(-128); // ok\n+    let _ = 1i8.checked_add(-1).unwrap_or(127); // ok\n+\n+    let _ = 1i32.saturating_sub(1);\n+    let _ = 1i32.saturating_sub(1);\n+    let _ = 1i8.saturating_sub(1);\n+    let _ = 1i128.saturating_sub(1);\n+    let _ = 1i32.saturating_sub(-1);\n+    let _ = 1i32.saturating_sub(-1);\n+    let _ = 1i8.saturating_sub(-1);\n+    let _ = 1i128.saturating_sub(-1);\n+    let _ = 1i32.checked_sub(1).unwrap_or(1234); // ok\n+    let _ = 1i8.checked_sub(1).unwrap_or(127); // ok\n+    let _ = 1i8.checked_sub(-1).unwrap_or(-128); // ok\n+}"}, {"sha": "cd83cf6e65e9403b0ac0b8703f5f448293e0a975", "filename": "tests/ui/manual_saturating_arithmetic.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/tests%2Fui%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/tests%2Fui%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_saturating_arithmetic.rs?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -0,0 +1,55 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+\n+use std::{i128, i32, u128, u32};\n+\n+fn main() {\n+    let _ = 1u32.checked_add(1).unwrap_or(u32::max_value());\n+    let _ = 1u32.checked_add(1).unwrap_or(u32::MAX);\n+    let _ = 1u8.checked_add(1).unwrap_or(255);\n+    let _ = 1u128\n+        .checked_add(1)\n+        .unwrap_or(340_282_366_920_938_463_463_374_607_431_768_211_455);\n+    let _ = 1u32.checked_add(1).unwrap_or(1234); // ok\n+    let _ = 1u8.checked_add(1).unwrap_or(0); // ok\n+    let _ = 1u32.checked_mul(1).unwrap_or(u32::MAX);\n+\n+    let _ = 1u32.checked_sub(1).unwrap_or(u32::min_value());\n+    let _ = 1u32.checked_sub(1).unwrap_or(u32::MIN);\n+    let _ = 1u8.checked_sub(1).unwrap_or(0);\n+    let _ = 1u32.checked_sub(1).unwrap_or(1234); // ok\n+    let _ = 1u8.checked_sub(1).unwrap_or(255); // ok\n+\n+    let _ = 1i32.checked_add(1).unwrap_or(i32::max_value());\n+    let _ = 1i32.checked_add(1).unwrap_or(i32::MAX);\n+    let _ = 1i8.checked_add(1).unwrap_or(127);\n+    let _ = 1i128\n+        .checked_add(1)\n+        .unwrap_or(170_141_183_460_469_231_731_687_303_715_884_105_727);\n+    let _ = 1i32.checked_add(-1).unwrap_or(i32::min_value());\n+    let _ = 1i32.checked_add(-1).unwrap_or(i32::MIN);\n+    let _ = 1i8.checked_add(-1).unwrap_or(-128);\n+    let _ = 1i128\n+        .checked_add(-1)\n+        .unwrap_or(-170_141_183_460_469_231_731_687_303_715_884_105_728);\n+    let _ = 1i32.checked_add(1).unwrap_or(1234); // ok\n+    let _ = 1i8.checked_add(1).unwrap_or(-128); // ok\n+    let _ = 1i8.checked_add(-1).unwrap_or(127); // ok\n+\n+    let _ = 1i32.checked_sub(1).unwrap_or(i32::min_value());\n+    let _ = 1i32.checked_sub(1).unwrap_or(i32::MIN);\n+    let _ = 1i8.checked_sub(1).unwrap_or(-128);\n+    let _ = 1i128\n+        .checked_sub(1)\n+        .unwrap_or(-170_141_183_460_469_231_731_687_303_715_884_105_728);\n+    let _ = 1i32.checked_sub(-1).unwrap_or(i32::max_value());\n+    let _ = 1i32.checked_sub(-1).unwrap_or(i32::MAX);\n+    let _ = 1i8.checked_sub(-1).unwrap_or(127);\n+    let _ = 1i128\n+        .checked_sub(-1)\n+        .unwrap_or(170_141_183_460_469_231_731_687_303_715_884_105_727);\n+    let _ = 1i32.checked_sub(1).unwrap_or(1234); // ok\n+    let _ = 1i8.checked_sub(1).unwrap_or(127); // ok\n+    let _ = 1i8.checked_sub(-1).unwrap_or(-128); // ok\n+}"}, {"sha": "d985f2e754bc3e8e44b3a4ca264014bb39eede4c", "filename": "tests/ui/manual_saturating_arithmetic.stderr", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/4960f79476def4c9a1cbde94d349d4c9b12bd585/tests%2Fui%2Fmanual_saturating_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4960f79476def4c9a1cbde94d349d4c9b12bd585/tests%2Fui%2Fmanual_saturating_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_saturating_arithmetic.stderr?ref=4960f79476def4c9a1cbde94d349d4c9b12bd585", "patch": "@@ -0,0 +1,163 @@\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:8:13\n+   |\n+LL |     let _ = 1u32.checked_add(1).unwrap_or(u32::max_value());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1u32.saturating_add(1)`\n+   |\n+   = note: `-D clippy::manual-saturating-arithmetic` implied by `-D warnings`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:9:13\n+   |\n+LL |     let _ = 1u32.checked_add(1).unwrap_or(u32::MAX);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1u32.saturating_add(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:10:13\n+   |\n+LL |     let _ = 1u8.checked_add(1).unwrap_or(255);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1u8.saturating_add(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:11:13\n+   |\n+LL |       let _ = 1u128\n+   |  _____________^\n+LL | |         .checked_add(1)\n+LL | |         .unwrap_or(340_282_366_920_938_463_463_374_607_431_768_211_455);\n+   | |_______________________________________________________________________^ help: try using `saturating_add`: `1u128.saturating_add(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:16:13\n+   |\n+LL |     let _ = 1u32.checked_mul(1).unwrap_or(u32::MAX);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_mul`: `1u32.saturating_mul(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:18:13\n+   |\n+LL |     let _ = 1u32.checked_sub(1).unwrap_or(u32::min_value());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1u32.saturating_sub(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:19:13\n+   |\n+LL |     let _ = 1u32.checked_sub(1).unwrap_or(u32::MIN);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1u32.saturating_sub(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:20:13\n+   |\n+LL |     let _ = 1u8.checked_sub(1).unwrap_or(0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1u8.saturating_sub(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:24:13\n+   |\n+LL |     let _ = 1i32.checked_add(1).unwrap_or(i32::max_value());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1i32.saturating_add(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:25:13\n+   |\n+LL |     let _ = 1i32.checked_add(1).unwrap_or(i32::MAX);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1i32.saturating_add(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:26:13\n+   |\n+LL |     let _ = 1i8.checked_add(1).unwrap_or(127);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1i8.saturating_add(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:27:13\n+   |\n+LL |       let _ = 1i128\n+   |  _____________^\n+LL | |         .checked_add(1)\n+LL | |         .unwrap_or(170_141_183_460_469_231_731_687_303_715_884_105_727);\n+   | |_______________________________________________________________________^ help: try using `saturating_add`: `1i128.saturating_add(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:30:13\n+   |\n+LL |     let _ = 1i32.checked_add(-1).unwrap_or(i32::min_value());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1i32.saturating_add(-1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:31:13\n+   |\n+LL |     let _ = 1i32.checked_add(-1).unwrap_or(i32::MIN);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1i32.saturating_add(-1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:32:13\n+   |\n+LL |     let _ = 1i8.checked_add(-1).unwrap_or(-128);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_add`: `1i8.saturating_add(-1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:33:13\n+   |\n+LL |       let _ = 1i128\n+   |  _____________^\n+LL | |         .checked_add(-1)\n+LL | |         .unwrap_or(-170_141_183_460_469_231_731_687_303_715_884_105_728);\n+   | |________________________________________________________________________^ help: try using `saturating_add`: `1i128.saturating_add(-1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:40:13\n+   |\n+LL |     let _ = 1i32.checked_sub(1).unwrap_or(i32::min_value());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1i32.saturating_sub(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:41:13\n+   |\n+LL |     let _ = 1i32.checked_sub(1).unwrap_or(i32::MIN);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1i32.saturating_sub(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:42:13\n+   |\n+LL |     let _ = 1i8.checked_sub(1).unwrap_or(-128);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1i8.saturating_sub(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:43:13\n+   |\n+LL |       let _ = 1i128\n+   |  _____________^\n+LL | |         .checked_sub(1)\n+LL | |         .unwrap_or(-170_141_183_460_469_231_731_687_303_715_884_105_728);\n+   | |________________________________________________________________________^ help: try using `saturating_sub`: `1i128.saturating_sub(1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:46:13\n+   |\n+LL |     let _ = 1i32.checked_sub(-1).unwrap_or(i32::max_value());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1i32.saturating_sub(-1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:47:13\n+   |\n+LL |     let _ = 1i32.checked_sub(-1).unwrap_or(i32::MAX);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1i32.saturating_sub(-1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:48:13\n+   |\n+LL |     let _ = 1i8.checked_sub(-1).unwrap_or(127);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `saturating_sub`: `1i8.saturating_sub(-1)`\n+\n+error: manual saturating arithmetic\n+  --> $DIR/manual_saturating_arithmetic.rs:49:13\n+   |\n+LL |       let _ = 1i128\n+   |  _____________^\n+LL | |         .checked_sub(-1)\n+LL | |         .unwrap_or(170_141_183_460_469_231_731_687_303_715_884_105_727);\n+   | |_______________________________________________________________________^ help: try using `saturating_sub`: `1i128.saturating_sub(-1)`\n+\n+error: aborting due to 24 previous errors\n+"}]}