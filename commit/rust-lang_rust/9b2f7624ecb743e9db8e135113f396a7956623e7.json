{"sha": "9b2f7624ecb743e9db8e135113f396a7956623e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMmY3NjI0ZWNiNzQzZTlkYjhlMTM1MTEzZjM5NmE3OTU2NjIzZTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-11T00:44:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-28T14:58:20Z"}, "message": "syntax: Add `tokens: Option<TokenStream>` to Item\n\nThis commit adds a new field to the `Item` AST node in libsyntax to optionally\ncontain the original token stream that the item itself was parsed from. This is\ncurrently `None` everywhere but is intended for use later with procedural\nmacros.", "tree": {"sha": "06cb1cc402cf15207cfbf4be2ae620164e254963", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06cb1cc402cf15207cfbf4be2ae620164e254963"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2f7624ecb743e9db8e135113f396a7956623e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2f7624ecb743e9db8e135113f396a7956623e7", "html_url": "https://github.com/rust-lang/rust/commit/9b2f7624ecb743e9db8e135113f396a7956623e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2f7624ecb743e9db8e135113f396a7956623e7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f815ca771b59fe652a5f88f198810b5dc37a4c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f815ca771b59fe652a5f88f198810b5dc37a4c9", "html_url": "https://github.com/rust-lang/rust/commit/6f815ca771b59fe652a5f88f198810b5dc37a4c9"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "25079613e586d694be643155334a0b97c55390be", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -389,6 +389,7 @@ impl CrateStore for cstore::CStore {\n                 legacy: def.legacy,\n             }),\n             vis: ast::Visibility::Inherited,\n+            tokens: None,\n         })\n     }\n "}, {"sha": "bd26ab5bd35a1dc83b700ecbfe7c1da5d9082c07", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -1812,6 +1812,12 @@ pub struct Item {\n     pub node: ItemKind,\n     pub vis: Visibility,\n     pub span: Span,\n+\n+    /// Original tokens this item was parsed from. This isn't necessarily\n+    /// available for all items, although over time more and more items should\n+    /// have this be `Some`. Right now this is primarily used for procedural\n+    /// macros, notably custom attributes.\n+    pub tokens: Option<TokenStream>,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "855f4cd3557008ad1dca7a0a8a6f2a24cb487922", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -236,6 +236,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n             ),\n             vis: ast::Visibility::Public,\n             span: span,\n+            tokens: None,\n         })\n     ]))\n }"}, {"sha": "de0538e38b3ccaffcc194bec70c803149986f466", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -979,7 +979,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             node: node,\n             vis: ast::Visibility::Inherited,\n-            span: span\n+            span: span,\n+            tokens: None,\n         })\n     }\n \n@@ -1147,7 +1148,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             attrs: vec![],\n             node: ast::ItemKind::Use(vp),\n             vis: vis,\n-            span: sp\n+            span: sp,\n+            tokens: None,\n         })\n     }\n "}, {"sha": "16c264e0f941028e4cb59d636d58caed8500f09b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -214,6 +214,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             ident: keywords::Invalid.ident(),\n             id: ast::DUMMY_NODE_ID,\n             vis: ast::Visibility::Public,\n+            tokens: None,\n         })));\n \n         match self.expand(krate_item).make_items().pop().map(P::unwrap) {"}, {"sha": "9bea641b03367051f3efd49b5a7bc8a5bf4e6509", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -46,6 +46,7 @@ pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n         ExpansionKind::Items => Expansion::Items(SmallVector::one(P(ast::Item {\n             id: id, span: span, ident: ident, vis: vis, attrs: attrs,\n             node: ast::ItemKind::Mac(mac_placeholder()),\n+            tokens: None,\n         }))),\n         ExpansionKind::TraitItems => Expansion::TraitItems(SmallVector::one(ast::TraitItem {\n             id: id, span: span, ident: ident, attrs: attrs,"}, {"sha": "71802d0aa2848afe32bbb6716ed51ab3e7037720", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -1000,6 +1000,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n         vis: ast::Visibility::Public,\n         span: span,\n         node: ast::ItemKind::Mod(module),\n+        tokens: None,\n     })).into_iter();\n \n     let (module, attrs, span) = match items.next() {\n@@ -1032,15 +1033,18 @@ pub fn noop_fold_item<T: Folder>(i: P<Item>, folder: &mut T) -> SmallVector<P<It\n }\n \n // fold one item into exactly one item\n-pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}: Item,\n+pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span, tokens}: Item,\n                                         folder: &mut T) -> Item {\n     Item {\n         id: folder.new_id(id),\n         vis: folder.fold_vis(vis),\n         ident: folder.fold_ident(ident),\n         attrs: fold_attrs(attrs, folder),\n         node: folder.fold_item_kind(node),\n-        span: folder.new_span(span)\n+        span: folder.new_span(span),\n+        tokens: tokens.map(|tokens| {\n+            folder.fold_tts(tokens.into()).into()\n+        }),\n     }\n }\n "}, {"sha": "4f8d85a8da47759be378a63284fa951a743cce8a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -4653,6 +4653,7 @@ impl<'a> Parser<'a> {\n             node: node,\n             vis: vis,\n             span: span,\n+            tokens: None, // TODO: fill this in\n         })\n     }\n "}, {"sha": "d9ed96f293a80625b958153899bb9c2147b7a364", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -60,6 +60,7 @@ pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<Strin\n         ident: ast::Ident::from_str(name),\n         id: ast::DUMMY_NODE_ID,\n         span: DUMMY_SP,\n+        tokens: None,\n     }));\n \n     let span = ignored_span(DUMMY_SP);\n@@ -82,6 +83,7 @@ pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<Strin\n         id: ast::DUMMY_NODE_ID,\n         ident: keywords::Invalid.ident(),\n         span: span,\n+        tokens: None,\n     }));\n \n     krate"}, {"sha": "887479a24724989263ed43b21a98b775c334852b", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -192,7 +192,7 @@ impl fold::Folder for EntryPointCleaner {\n             EntryPointType::MainNamed |\n             EntryPointType::MainAttr |\n             EntryPointType::Start =>\n-                folded.map(|ast::Item {id, ident, attrs, node, vis, span}| {\n+                folded.map(|ast::Item {id, ident, attrs, node, vis, span, tokens}| {\n                     let allow_str = Symbol::intern(\"allow\");\n                     let dead_code_str = Symbol::intern(\"dead_code\");\n                     let word_vec = vec![attr::mk_list_word_item(dead_code_str)];\n@@ -212,7 +212,8 @@ impl fold::Folder for EntryPointCleaner {\n                             .collect(),\n                         node: node,\n                         vis: vis,\n-                        span: span\n+                        span: span,\n+                        tokens: tokens,\n                     }\n                 }),\n             EntryPointType::None |\n@@ -255,6 +256,7 @@ fn mk_reexport_mod(cx: &mut TestCtxt,\n         node: ast::ItemKind::Mod(reexport_mod),\n         vis: ast::Visibility::Public,\n         span: DUMMY_SP,\n+        tokens: None,\n     })).pop().unwrap();\n \n     (it, sym)\n@@ -465,7 +467,8 @@ fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n         node: vi,\n         attrs: vec![],\n         vis: vis,\n-        span: sp\n+        span: sp,\n+        tokens: None,\n     })\n }\n \n@@ -506,7 +509,8 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n         id: ast::DUMMY_NODE_ID,\n         node: main,\n         vis: ast::Visibility::Public,\n-        span: sp\n+        span: sp,\n+        tokens: None,\n     })\n }\n \n@@ -536,6 +540,7 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n         node: item_,\n         vis: ast::Visibility::Public,\n         span: DUMMY_SP,\n+        tokens: None,\n     })).pop().unwrap();\n     let reexport = cx.reexport_test_harness_main.map(|s| {\n         // building `use <ident> = __test::main`\n@@ -551,7 +556,8 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n             attrs: vec![],\n             node: ast::ItemKind::Use(P(use_path)),\n             vis: ast::Visibility::Inherited,\n-            span: DUMMY_SP\n+            span: DUMMY_SP,\n+            tokens: None,\n         })).pop().unwrap()\n     });\n "}, {"sha": "8b0bb8cb891ee5267bf1a3a39a5089d475f0adfc", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2f7624ecb743e9db8e135113f396a7956623e7/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=9b2f7624ecb743e9db8e135113f396a7956623e7", "patch": "@@ -61,5 +61,6 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n         })),\n         vis: ast::Visibility::Inherited,\n         span: sp,\n+        tokens: None,\n     })))\n }"}]}