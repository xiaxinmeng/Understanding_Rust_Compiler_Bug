{"sha": "82cf6f204aeb791c38463798e2edd6b4935f1296", "node_id": "C_kwDOAAsO6NoAKDgyY2Y2ZjIwNGFlYjc5MWMzODQ2Mzc5OGUyZWRkNmI0OTM1ZjEyOTY", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-11-17T01:08:14Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-12-28T01:59:19Z"}, "message": "UPDATE - migrate base.rs to new diagnostics infrastructure", "tree": {"sha": "99a61c372b1677cbec29c77a27a528919311e5e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99a61c372b1677cbec29c77a27a528919311e5e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82cf6f204aeb791c38463798e2edd6b4935f1296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82cf6f204aeb791c38463798e2edd6b4935f1296", "html_url": "https://github.com/rust-lang/rust/commit/82cf6f204aeb791c38463798e2edd6b4935f1296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82cf6f204aeb791c38463798e2edd6b4935f1296/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "739d68a76e35b22341d9930bb6338bf202ba05ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/739d68a76e35b22341d9930bb6338bf202ba05ba", "html_url": "https://github.com/rust-lang/rust/commit/739d68a76e35b22341d9930bb6338bf202ba05ba"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "d318c15d34221231ef8843f97083094d054edb87", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82cf6f204aeb791c38463798e2edd6b4935f1296/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82cf6f204aeb791c38463798e2edd6b4935f1296/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=82cf6f204aeb791c38463798e2edd6b4935f1296", "patch": "@@ -5,6 +5,7 @@ use crate::back::write::{\n     submit_post_lto_module_to_llvm, submit_pre_lto_module_to_llvm, ComputedLtoType, OngoingCodegen,\n };\n use crate::common::{IntPredicate, RealPredicate, TypeKind};\n+use crate::errors;\n use crate::meth;\n use crate::mir;\n use crate::mir::operand::OperandValue;\n@@ -451,10 +452,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         let Some(llfn) = cx.declare_c_main(llfty) else {\n             // FIXME: We should be smart and show a better diagnostic here.\n             let span = cx.tcx().def_span(rust_main_def_id);\n-            cx.sess()\n-                .struct_span_err(span, \"entry symbol `main` declared multiple times\")\n-                .help(\"did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\")\n-                .emit();\n+            cx.sess().emit_err(errors::MultipleMainFunctions { span });\n             cx.sess().abort_if_errors();\n             bug!();\n         };\n@@ -595,8 +593,8 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                 &metadata,\n                 &exported_symbols::metadata_symbol_name(tcx),\n             );\n-            if let Err(err) = std::fs::write(&file_name, data) {\n-                tcx.sess.fatal(&format!(\"error writing metadata object file: {}\", err));\n+            if let Err(error) = std::fs::write(&file_name, data) {\n+                tcx.sess.emit_fatal(errors::MetadataObjectFileWrite { error });\n             }\n             Some(CompiledModule {\n                 name: metadata_cgu_name,\n@@ -815,11 +813,7 @@ impl CrateInfo {\n         let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n         let windows_subsystem = subsystem.map(|subsystem| {\n             if subsystem != sym::windows && subsystem != sym::console {\n-                tcx.sess.fatal(&format!(\n-                    \"invalid windows subsystem `{}`, only \\\n-                                     `windows` and `console` are allowed\",\n-                    subsystem\n-                ));\n+                tcx.sess.emit_fatal(errors::InvalidWindowsSubsystem { subsystem });\n             }\n             subsystem.to_string()\n         });"}, {"sha": "9179fe03d3f62232450c32ee86f554c7caebb078", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82cf6f204aeb791c38463798e2edd6b4935f1296/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82cf6f204aeb791c38463798e2edd6b4935f1296/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=82cf6f204aeb791c38463798e2edd6b4935f1296", "patch": "@@ -555,3 +555,23 @@ pub struct ExpectedUsedSymbol {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_multiple_main_functions)]\n+#[help]\n+pub struct MultipleMainFunctions {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_metadata_object_file_write)]\n+pub struct MetadataObjectFileWrite {\n+    pub error: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_invalid_windows_subsystem)]\n+pub struct InvalidWindowsSubsystem {\n+    pub subsystem: Symbol,\n+}"}, {"sha": "1863dae258ffa3be1c1c071e2e937e70fb927845", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82cf6f204aeb791c38463798e2edd6b4935f1296/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/82cf6f204aeb791c38463798e2edd6b4935f1296/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=82cf6f204aeb791c38463798e2edd6b4935f1296", "patch": "@@ -194,3 +194,10 @@ codegen_ssa_unknown_archive_kind =\n     Don't know how to build archive of type: {$kind}\n \n codegen_ssa_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n+\n+codegen_ssa_multiple_main_functions = entry symbol `main` declared multiple times\n+    .help = did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\n+\n+codegen_ssa_metadata_object_file_write = error writing metadata object file: {$error}\n+\n+codegen_ssa_invalid_windows_subsystem = invalid windows subsystem `{$subsystem}`, only `windows` and `console` are allowed"}]}