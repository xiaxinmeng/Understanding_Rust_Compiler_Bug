{"sha": "daa1f5099f96170a290b5a5249041a8c6a8beaed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYTFmNTA5OWY5NjE3MGEyOTBiNWE1MjQ5MDQxYThjNmE4YmVhZWQ=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-04-14T00:33:04Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-04-16T16:38:54Z"}, "message": "Combine lifetime parameters when instantiating default methods\n\nWhen instantiating trait default methods for certain implementation,\n`typeck` correctly combined type parameters from trait bound with those\nfrom method bound, but didn't do so for lifetime parameters. Applies\nthe same logic to lifetime parameters.\n\nCloses #13204", "tree": {"sha": "77fd83d119fb2589e1c2e38aa88a0b72d21aae09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77fd83d119fb2589e1c2e38aa88a0b72d21aae09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa1f5099f96170a290b5a5249041a8c6a8beaed", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa1f5099f96170a290b5a5249041a8c6a8beaed", "html_url": "https://github.com/rust-lang/rust/commit/daa1f5099f96170a290b5a5249041a8c6a8beaed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa1f5099f96170a290b5a5249041a8c6a8beaed/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "html_url": "https://github.com/rust-lang/rust/commit/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4"}], "stats": {"total": 90, "additions": 60, "deletions": 30}, "files": [{"sha": "c0fd73f4a36a4bfa7394841c829f894805bfb5ec", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/daa1f5099f96170a290b5a5249041a8c6a8beaed/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa1f5099f96170a290b5a5249041a8c6a8beaed/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=daa1f5099f96170a290b5a5249041a8c6a8beaed", "patch": "@@ -42,6 +42,7 @@ use syntax::ast_map::NodeItem;\n use syntax::ast_map;\n use syntax::ast_util::{def_id_of_def, local_def};\n use syntax::codemap::Span;\n+use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n use syntax::visit;\n \n@@ -346,7 +347,8 @@ impl<'a> CoherenceChecker<'a> {\n                     Rc::new(Vec::from_slice(impl_poly_type.generics.type_param_defs()).append(\n                             new_method_ty.generics.type_param_defs())),\n                 region_param_defs:\n-                    impl_poly_type.generics.region_param_defs.clone()\n+                    Rc::new(Vec::from_slice(impl_poly_type.generics.region_param_defs()).append(\n+                            new_method_ty.generics.region_param_defs()))\n             };\n             let new_polytype = ty::ty_param_bounds_and_ty {\n                 generics: new_generics,\n@@ -741,39 +743,35 @@ pub fn make_substs_for_receiver_types(tcx: &ty::ctxt,\n      * receiver and method generics.\n      */\n \n-    // determine how many type parameters were declared on the impl\n-    let num_impl_type_parameters = {\n-        let impl_polytype = ty::lookup_item_type(tcx, impl_id);\n-        impl_polytype.generics.type_param_defs().len()\n-    };\n-\n-    // determine how many type parameters appear on the trait\n-    let num_trait_type_parameters = trait_ref.substs.tps.len();\n-\n-    // the current method type has the type parameters from the trait + method\n-    let num_method_type_parameters =\n-        num_trait_type_parameters + method.generics.type_param_defs().len();\n-\n-    // the new method type will have the type parameters from the impl + method\n-    let combined_tps = Vec::from_fn(num_method_type_parameters, |i| {\n-        if i < num_trait_type_parameters {\n-            // replace type parameters that come from trait with new value\n-            *trait_ref.substs.tps.get(i)\n-        } else {\n-            // replace type parameters that belong to method with another\n-            // type parameter, this time with the index adjusted\n-            let method_index = i - num_trait_type_parameters;\n-            let type_param_def = &method.generics.type_param_defs()[method_index];\n-            let new_index = num_impl_type_parameters + method_index;\n-            ty::mk_param(tcx, new_index, type_param_def.def_id)\n+    let impl_polytype = ty::lookup_item_type(tcx, impl_id);\n+    let num_impl_tps = impl_polytype.generics.type_param_defs().len();\n+    let num_impl_regions = impl_polytype.generics.region_param_defs().len();\n+    let meth_tps: Vec<ty::t> =\n+        method.generics.type_param_defs().iter().enumerate()\n+              .map(|(i, t)| ty::mk_param(tcx, i + num_impl_tps, t.def_id))\n+              .collect();\n+    let meth_regions: Vec<ty::Region> =\n+        method.generics.region_param_defs().iter().enumerate()\n+              .map(|(i, l)| ty::ReEarlyBound(l.def_id.node, i + num_impl_regions, l.name))\n+              .collect();\n+    let mut combined_tps = trait_ref.substs.tps.clone();\n+    combined_tps.push_all_move(meth_tps);\n+    let combined_regions = match &trait_ref.substs.regions {\n+        &ty::ErasedRegions =>\n+            fail!(\"make_substs_for_receiver_types: unexpected ErasedRegions\"),\n+\n+        &ty::NonerasedRegions(ref rs) => {\n+            let mut rs = rs.clone().into_vec();\n+            rs.push_all_move(meth_regions);\n+            ty::NonerasedRegions(OwnedSlice::from_vec(rs))\n         }\n-    });\n+    };\n \n-    return ty::substs {\n-        regions: trait_ref.substs.regions.clone(),\n+    ty::substs {\n+        regions: combined_regions,\n         self_ty: trait_ref.substs.self_ty,\n         tps: combined_tps\n-    };\n+    }\n }\n \n fn subst_receiver_types_in_method_ty(tcx: &ty::ctxt,"}, {"sha": "5fb9119849cabe019775b78d373bfa8c8849b668", "filename": "src/test/run-pass/issue-13204.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/daa1f5099f96170a290b5a5249041a8c6a8beaed/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa1f5099f96170a290b5a5249041a8c6a8beaed/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13204.rs?ref=daa1f5099f96170a290b5a5249041a8c6a8beaed", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that when instantiating trait default methods, typeck handles\n+// lifetime parameters defined on the method bound correctly.\n+\n+pub trait Foo {\n+    fn bar<'a, I: Iterator<&'a ()>>(&self, it: I) -> uint {\n+        let mut xs = it.filter(|_| true);\n+        xs.len()\n+    }\n+}\n+\n+pub struct Baz;\n+\n+impl Foo for Baz {\n+    // When instantiating `Foo::bar` for `Baz` here, typeck used to\n+    // ICE due to the lifetime parameter of `bar`.\n+}\n+\n+fn main() {\n+    let x = Baz;\n+    let y = vec!((), (), ());\n+    assert_eq!(x.bar(y.iter()), 3);\n+}"}]}