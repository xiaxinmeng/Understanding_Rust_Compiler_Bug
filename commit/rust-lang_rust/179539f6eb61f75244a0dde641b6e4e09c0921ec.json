{"sha": "179539f6eb61f75244a0dde641b6e4e09c0921ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OTUzOWY2ZWI2MWY3NTI0NGEwZGRlNjQxYjZlNGUwOWMwOTIxZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-20T19:39:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-20T19:39:00Z"}, "message": "Auto merge of #33318 - alexcrichton:hashmap-seed, r=aturon\n\nstd: Cache HashMap keys in TLS\n\nThis is a rebase and extension of #31356 where we not only cache the keys in\nthread local storage but we also bump each key every time a new `HashMap` is\ncreated. This should give us a nice speed bost in creating hash maps along with\nretaining the property that all maps have a nondeterministic iteration order.\n\nCloses #27243", "tree": {"sha": "088a911b82f99863d82a394d8fa5f67025de89c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088a911b82f99863d82a394d8fa5f67025de89c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/179539f6eb61f75244a0dde641b6e4e09c0921ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/179539f6eb61f75244a0dde641b6e4e09c0921ec", "html_url": "https://github.com/rust-lang/rust/commit/179539f6eb61f75244a0dde641b6e4e09c0921ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/179539f6eb61f75244a0dde641b6e4e09c0921ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0352866da7098bdcc868fbc37246b48778ecf74a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0352866da7098bdcc868fbc37246b48778ecf74a", "html_url": "https://github.com/rust-lang/rust/commit/0352866da7098bdcc868fbc37246b48778ecf74a"}, {"sha": "eaeef3db0ea9bc100f4c17d708b55a29477ac634", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaeef3db0ea9bc100f4c17d708b55a29477ac634", "html_url": "https://github.com/rust-lang/rust/commit/eaeef3db0ea9bc100f4c17d708b55a29477ac634"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "e0a489bd2f9652771244bf8304510f5eb293daad", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/179539f6eb61f75244a0dde641b6e4e09c0921ec/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179539f6eb61f75244a0dde641b6e4e09c0921ec/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=179539f6eb61f75244a0dde641b6e4e09c0921ec", "patch": "@@ -1667,8 +1667,33 @@ impl RandomState {\n     #[allow(deprecated)] // rand\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn new() -> RandomState {\n-        let mut r = rand::thread_rng();\n-        RandomState { k0: r.gen(), k1: r.gen() }\n+        // Historically this function did not cache keys from the OS and instead\n+        // simply always called `rand::thread_rng().gen()` twice. In #31356 it\n+        // was discovered, however, that because we re-seed the thread-local RNG\n+        // from the OS periodically that this can cause excessive slowdown when\n+        // many hash maps are created on a thread. To solve this performance\n+        // trap we cache the first set of randomly generated keys per-thread.\n+        //\n+        // In doing this, however, we lose the property that all hash maps have\n+        // nondeterministic iteration order as all of those created on the same\n+        // thread would have the same hash keys. This property has been nice in\n+        // the past as it allows for maximal flexibility in the implementation\n+        // of `HashMap` itself.\n+        //\n+        // The constraint here (if there even is one) is just that maps created\n+        // on the same thread have the same iteration order, and that *may* be\n+        // relied upon even though it is not a documented guarantee at all of\n+        // the `HashMap` type. In any case we've decided that this is reasonable\n+        // for now, so caching keys thread-locally seems fine.\n+        thread_local!(static KEYS: (u64, u64) = {\n+            let r = rand::OsRng::new();\n+            let mut r = r.expect(\"failed to create an OS RNG\");\n+            (r.gen(), r.gen())\n+        });\n+\n+        KEYS.with(|&(k0, k1)| {\n+            RandomState { k0: k0, k1: k1 }\n+        })\n     }\n }\n "}]}