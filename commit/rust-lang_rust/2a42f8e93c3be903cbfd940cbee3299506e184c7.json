{"sha": "2a42f8e93c3be903cbfd940cbee3299506e184c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDJmOGU5M2MzYmU5MDNjYmZkOTQwY2JlZTMyOTk1MDZlMTg0Yzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-26T13:53:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-27T21:32:15Z"}, "message": "fix and test order of TLS dtors and thread joining", "tree": {"sha": "2ae76b56aa93293166a228177149c6c6e7417434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae76b56aa93293166a228177149c6c6e7417434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a42f8e93c3be903cbfd940cbee3299506e184c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a42f8e93c3be903cbfd940cbee3299506e184c7", "html_url": "https://github.com/rust-lang/rust/commit/2a42f8e93c3be903cbfd940cbee3299506e184c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a42f8e93c3be903cbfd940cbee3299506e184c7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "390899e8b9c9b3b415a630e663418f1ad7e10c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/390899e8b9c9b3b415a630e663418f1ad7e10c4d", "html_url": "https://github.com/rust-lang/rust/commit/390899e8b9c9b3b415a630e663418f1ad7e10c4d"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "4a0d5fc22ad6150c23cd3f8db2c54eee30f5de6f", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a42f8e93c3be903cbfd940cbee3299506e184c7/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a42f8e93c3be903cbfd940cbee3299506e184c7/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=2a42f8e93c3be903cbfd940cbee3299506e184c7", "patch": "@@ -328,9 +328,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// schedules them one by one each time it is called and reenables the\n     /// thread so that it can be executed normally by the main execution loop.\n     ///\n-    /// FIXME: we do not support yet deallocation of thread local statics.\n-    /// Issue: https://github.com/rust-lang/miri/issues/1369\n-    ///\n     /// Note: we consistently run TLS destructors for all threads, including the\n     /// main thread. However, it is not clear that we should run the TLS\n     /// destructors for the main thread. See issue:\n@@ -367,6 +364,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // All dtors done!\n         this.machine.tls.delete_all_thread_tls(active_thread);\n+        this.thread_terminated();\n \n         Ok(())\n     }"}, {"sha": "8520dcd073a75fe7ace1e7c74cd5b3760fb8c86d", "filename": "src/thread.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a42f8e93c3be903cbfd940cbee3299506e184c7/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a42f8e93c3be903cbfd940cbee3299506e184c7/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=2a42f8e93c3be903cbfd940cbee3299506e184c7", "patch": "@@ -410,6 +410,20 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         None\n     }\n \n+    /// Handles thread termination of the active thread: wakes up threads joining on this one,\n+    /// and deallocated thread-local statics.\n+    ///\n+    /// This is called from `tls.rs` after handling the TLS dtors.\n+    fn thread_terminated(&mut self) {\n+        for (i, thread) in self.threads.iter_enumerated_mut() {\n+            // Check if we need to unblock any threads.\n+            if thread.state == ThreadState::BlockedOnJoin(self.active_thread) {\n+                trace!(\"unblocking {:?} because {:?} terminated\", i, self.active_thread);\n+                thread.state = ThreadState::Enabled;\n+            }\n+        }\n+    }\n+\n     /// Decide which action to take next and on which thread.\n     ///\n     /// The currently implemented scheduling policy is the one that is commonly\n@@ -421,13 +435,6 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         // checks whether the thread has popped all its stack and if yes, sets\n         // the thread state to terminated).\n         if self.threads[self.active_thread].check_terminated() {\n-            // Check if we need to unblock any threads.\n-            for (i, thread) in self.threads.iter_enumerated_mut() {\n-                if thread.state == ThreadState::BlockedOnJoin(self.active_thread) {\n-                    trace!(\"unblocking {:?} because {:?} terminated\", i, self.active_thread);\n-                    thread.state = ThreadState::Enabled;\n-                }\n-            }\n             return Ok(SchedulingAction::ExecuteDtors);\n         }\n         if self.threads[MAIN_THREAD].state == ThreadState::Terminated {\n@@ -660,4 +667,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.machine.threads.schedule()\n     }\n+\n+    #[inline]\n+    fn thread_terminated(&mut self) {\n+        self.eval_context_mut().machine.threads.thread_terminated()\n+    }\n }"}, {"sha": "46f59ef6204f713ceddbd264523983a0e6c1c10e", "filename": "tests/run-pass/concurrency/tls_lib_drop.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a42f8e93c3be903cbfd940cbee3299506e184c7/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a42f8e93c3be903cbfd940cbee3299506e184c7/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.rs?ref=2a42f8e93c3be903cbfd940cbee3299506e184c7", "patch": "@@ -9,7 +9,8 @@ struct TestCell {\n \n impl Drop for TestCell {\n     fn drop(&mut self) {\n-        println!(\"Dropping: {}\", self.value.borrow())\n+        for _ in 0..10 { thread::yield_now(); }\n+        println!(\"Dropping: {} (should be before 'Continue main 1').\", self.value.borrow())\n     }\n }\n \n@@ -28,7 +29,7 @@ fn check_destructors() {\n     })\n     .join()\n     .unwrap();\n-    println!(\"Continue main.\")\n+    println!(\"Continue main 1.\")\n }\n \n struct JoinCell {\n@@ -37,8 +38,9 @@ struct JoinCell {\n \n impl Drop for JoinCell {\n     fn drop(&mut self) {\n+        for _ in 0..10 { thread::yield_now(); }\n         let join_handle = self.value.borrow_mut().take().unwrap();\n-        println!(\"Joining: {}\", join_handle.join().unwrap());\n+        println!(\"Joining: {} (should be before 'Continue main 2').\", join_handle.join().unwrap());\n     }\n }\n "}, {"sha": "484979b04ca777b38450453029b077d85b48f08f", "filename": "tests/run-pass/concurrency/tls_lib_drop.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a42f8e93c3be903cbfd940cbee3299506e184c7/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2a42f8e93c3be903cbfd940cbee3299506e184c7/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stdout?ref=2a42f8e93c3be903cbfd940cbee3299506e184c7", "patch": "@@ -1,4 +1,4 @@\n-Dropping: 5\n-Continue main.\n+Dropping: 5 (should be before 'Continue main 1').\n+Continue main 1.\n+Joining: 7 (should be before 'Continue main 2').\n Continue main 2.\n-Joining: 7"}]}