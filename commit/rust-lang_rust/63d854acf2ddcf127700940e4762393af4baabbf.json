{"sha": "63d854acf2ddcf127700940e4762393af4baabbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZDg1NGFjZjJkZGNmMTI3NzAwOTQwZTQ3NjIzOTNhZjRiYWFiYmY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-10T02:09:39Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-12T21:51:29Z"}, "message": "Distribute Rustfmt", "tree": {"sha": "03c7b2c33d31ce38e113ac94842cb763b21b42cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c7b2c33d31ce38e113ac94842cb763b21b42cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63d854acf2ddcf127700940e4762393af4baabbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63d854acf2ddcf127700940e4762393af4baabbf", "html_url": "https://github.com/rust-lang/rust/commit/63d854acf2ddcf127700940e4762393af4baabbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63d854acf2ddcf127700940e4762393af4baabbf/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb5ba4ef90bda82b4aa7328927d4413c7f33683d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5ba4ef90bda82b4aa7328927d4413c7f33683d", "html_url": "https://github.com/rust-lang/rust/commit/fb5ba4ef90bda82b4aa7328927d4413c7f33683d"}], "stats": {"total": 134, "additions": 133, "deletions": 1}, "files": [{"sha": "4e2898bd665c0c619948dfd2594c5848480087df", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63d854acf2ddcf127700940e4762393af4baabbf/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d854acf2ddcf127700940e4762393af4baabbf/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=63d854acf2ddcf127700940e4762393af4baabbf", "patch": "@@ -261,7 +261,8 @@ impl<'a> Builder<'a> {\n                 doc::Reference, doc::Rustdoc, doc::CargoBook),\n             Kind::Dist => describe!(dist::Docs, dist::Mingw, dist::Rustc, dist::DebuggerScripts,\n                 dist::Std, dist::Analysis, dist::Src, dist::PlainSourceTarball, dist::Cargo,\n-                dist::Rls, dist::Extended, dist::HashSign, dist::DontDistWithMiriEnabled),\n+                dist::Rls, dist::Rustfmt, dist::Extended, dist::HashSign,\n+                dist::DontDistWithMiriEnabled),\n             Kind::Install => describe!(install::Docs, install::Std, install::Cargo, install::Rls,\n                 install::Analysis, install::Src, install::Rustc),\n         }"}, {"sha": "cafdaef121d14dfb8773294de03c7b27d8800a34", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/63d854acf2ddcf127700940e4762393af4baabbf/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d854acf2ddcf127700940e4762393af4baabbf/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=63d854acf2ddcf127700940e4762393af4baabbf", "patch": "@@ -39,6 +39,8 @@ pub fn pkgname(build: &Build, component: &str) -> String {\n         format!(\"{}-{}\", component, build.cargo_package_vers())\n     } else if component == \"rls\" {\n         format!(\"{}-{}\", component, build.rls_package_vers())\n+    } else if component == \"rustfmt\" {\n+        format!(\"{}-{}\", component, build.rustfmt_package_vers())\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, build.rust_package_vers())\n@@ -1112,6 +1114,92 @@ impl Step for Rls {\n }\n \n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Rustfmt {\n+    pub stage: u32,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Rustfmt {\n+    type Output = Option<PathBuf>;\n+    const ONLY_BUILD_TARGETS: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"rustfmt\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustfmt {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+        let build = builder.build;\n+        let stage = self.stage;\n+        let target = self.target;\n+        assert!(build.config.extended);\n+\n+        if !builder.config.toolstate.rustfmt.testing() {\n+            println!(\"skipping Dist Rustfmt stage{} ({})\", stage, target);\n+            return None\n+        }\n+\n+        println!(\"Dist Rustfmt stage{} ({})\", stage, target);\n+        let src = build.src.join(\"src/tools/rustfmt\");\n+        let release_num = build.release_num(\"rustfmt\");\n+        let name = pkgname(build, \"rustfmt\");\n+        let version = build.rustfmt_info.version(build, &release_num);\n+\n+        let tmp = tmpdir(build);\n+        let image = tmp.join(\"rustfmt-image\");\n+        drop(fs::remove_dir_all(&image));\n+        t!(fs::create_dir_all(&image));\n+\n+        // Prepare the image directory\n+        // We expect RLS to build, because we've exited this step above if tool\n+        // state for RLS isn't testing.\n+        let rustfmt = builder.ensure(tool::Rls {\n+            compiler: builder.compiler(stage, build.build),\n+            target\n+        }).expect(\"Rustfmt to build: toolstate is testing\");\n+        install(&rustfmt, &image.join(\"bin\"), 0o755);\n+        let doc = image.join(\"share/doc/rustfmt\");\n+        install(&src.join(\"README.md\"), &doc, 0o644);\n+        install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+        install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+\n+        // Prepare the overlay\n+        let overlay = tmp.join(\"rustfmt-overlay\");\n+        drop(fs::remove_dir_all(&overlay));\n+        t!(fs::create_dir_all(&overlay));\n+        install(&src.join(\"README.md\"), &overlay, 0o644);\n+        install(&src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n+        install(&src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n+        t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+\n+        // Generate the installer tarball\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rust\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=rustfmt-ready-to-fmt.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(build))\n+           .arg(\"--output-dir\").arg(&distdir(build))\n+           .arg(\"--non-installed-overlay\").arg(&overlay)\n+           .arg(format!(\"--package-name={}-{}\", name, target))\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+           .arg(\"--component-name=rustfmt-preview\");\n+\n+        build.run(&mut cmd);\n+        Some(distdir(build).join(format!(\"{}-{}.tar.gz\", name, target)))\n+    }\n+}\n+\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct DontDistWithMiriEnabled;\n \n@@ -1606,6 +1694,7 @@ impl Step for HashSign {\n         cmd.arg(build.rust_package_vers());\n         cmd.arg(build.package_vers(&build.release_num(\"cargo\")));\n         cmd.arg(build.package_vers(&build.release_num(\"rls\")));\n+        cmd.arg(build.package_vers(&build.release_num(\"rustfmt\")));\n         cmd.arg(addr);\n \n         t!(fs::create_dir_all(distdir(build)));"}, {"sha": "68329922592041b2a67394992d3d3ddcafa0f265", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63d854acf2ddcf127700940e4762393af4baabbf/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d854acf2ddcf127700940e4762393af4baabbf/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=63d854acf2ddcf127700940e4762393af4baabbf", "patch": "@@ -222,6 +222,7 @@ pub struct Build {\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n     rls_info: channel::GitInfo,\n+    rustfmt_info: channel::GitInfo,\n     local_rebuild: bool,\n     fail_fast: bool,\n     verbosity: usize,\n@@ -304,6 +305,7 @@ impl Build {\n         let rust_info = channel::GitInfo::new(&config, &src);\n         let cargo_info = channel::GitInfo::new(&config, &src.join(\"src/tools/cargo\"));\n         let rls_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rls\"));\n+        let rustfmt_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rustfmt\"));\n \n         Build {\n             initial_rustc: config.initial_rustc.clone(),\n@@ -323,6 +325,7 @@ impl Build {\n             rust_info,\n             cargo_info,\n             rls_info,\n+            rustfmt_info,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             ar: HashMap::new(),\n@@ -814,6 +817,11 @@ impl Build {\n         self.package_vers(&self.release_num(\"rls\"))\n     }\n \n+    /// Returns the value of `package_vers` above for rustfmt\n+    fn rustfmt_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"rustfmt\"))\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///"}, {"sha": "0abc0441c266841e401410f07e920b798687495c", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/63d854acf2ddcf127700940e4762393af4baabbf/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d854acf2ddcf127700940e4762393af4baabbf/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=63d854acf2ddcf127700940e4762393af4baabbf", "patch": "@@ -168,18 +168,24 @@ struct Builder {\n     rust_release: String,\n     cargo_release: String,\n     rls_release: String,\n+    rustfmt_release: String,\n+\n     input: PathBuf,\n     output: PathBuf,\n     gpg_passphrase: String,\n     digests: BTreeMap<String, String>,\n     s3_address: String,\n     date: String,\n+\n     rust_version: Option<String>,\n     cargo_version: Option<String>,\n     rls_version: Option<String>,\n+    rustfmt_version: Option<String>,\n+\n     rust_git_commit_hash: Option<String>,\n     cargo_git_commit_hash: Option<String>,\n     rls_git_commit_hash: Option<String>,\n+    rustfmt_git_commit_hash: Option<String>,\n }\n \n fn main() {\n@@ -190,6 +196,7 @@ fn main() {\n     let rust_release = args.next().unwrap();\n     let cargo_release = args.next().unwrap();\n     let rls_release = args.next().unwrap();\n+    let rustfmt_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n     let mut passphrase = String::new();\n     t!(io::stdin().read_to_string(&mut passphrase));\n@@ -198,18 +205,24 @@ fn main() {\n         rust_release,\n         cargo_release,\n         rls_release,\n+        rustfmt_release,\n+\n         input,\n         output,\n         gpg_passphrase: passphrase,\n         digests: BTreeMap::new(),\n         s3_address,\n         date,\n+\n         rust_version: None,\n         cargo_version: None,\n         rls_version: None,\n+        rustfmt_version: None,\n+\n         rust_git_commit_hash: None,\n         cargo_git_commit_hash: None,\n         rls_git_commit_hash: None,\n+        rustfmt_git_commit_hash: None,\n     }.build();\n }\n \n@@ -218,9 +231,12 @@ impl Builder {\n         self.rust_version = self.version(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n+        self.rustfmt_version = self.version(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n+\n         self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_git_commit_hash = self.git_commit_hash(\"rls\", \"x86_64-unknown-linux-gnu\");\n+        self.rustfmt_git_commit_hash = self.git_commit_hash(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n@@ -255,13 +271,19 @@ impl Builder {\n         self.package(\"rust-docs\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-src\", &mut manifest.pkg, &[\"*\"]);\n         self.package(\"rls-preview\", &mut manifest.pkg, HOSTS);\n+        self.package(\"rustfmt-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n \n         let rls_present = manifest.pkg.contains_key(\"rls-preview\");\n+        let rustfmt_present = manifest.pkg.contains_key(\"rustfmt-preview\");\n \n         if rls_present {\n             manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n         }\n+        if rustfmt_present {\n+            manifest.renames.insert(\"rustfmt\".to_owned(),\n+                                    Rename { to: \"rustfmt-preview\".to_owned() });\n+        }\n \n         let mut pkg = Package {\n             version: self.cached_version(\"rust\")\n@@ -306,6 +328,12 @@ impl Builder {\n                     target: host.to_string(),\n                 });\n             }\n+            if rustfmt_present {\n+                extensions.push(Component {\n+                    pkg: \"rustfmt-preview\".to_string(),\n+                    target: host.to_string(),\n+                });\n+            }\n             extensions.push(Component {\n                 pkg: \"rust-analysis\".to_string(),\n                 target: host.to_string(),\n@@ -391,6 +419,8 @@ impl Builder {\n             format!(\"cargo-{}-{}.tar.gz\", self.cargo_release, target)\n         } else if component == \"rls\" || component == \"rls-preview\" {\n             format!(\"rls-{}-{}.tar.gz\", self.rls_release, target)\n+        } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n+            format!(\"rustfmt-{}-{}.tar.gz\", self.rustfmt_release, target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target)\n         }\n@@ -401,6 +431,8 @@ impl Builder {\n             &self.cargo_version\n         } else if component == \"rls\" || component == \"rls-preview\" {\n             &self.rls_version\n+        } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n+            &self.rustfmt_version\n         } else {\n             &self.rust_version\n         }\n@@ -411,6 +443,8 @@ impl Builder {\n             &self.cargo_git_commit_hash\n         } else if component == \"rls\" || component == \"rls-preview\" {\n             &self.rls_git_commit_hash\n+        } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n+            &self.rustfmt_git_commit_hash\n         } else {\n             &self.rust_git_commit_hash\n         }"}]}