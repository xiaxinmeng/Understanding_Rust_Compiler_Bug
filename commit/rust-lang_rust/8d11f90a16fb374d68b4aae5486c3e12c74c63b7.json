{"sha": "8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMTFmOTBhMTZmYjM3NGQ2OGI0YWFlNTQ4NmMzZTEyYzc0YzYzYjc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-05T19:32:25Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-05T20:01:19Z"}, "message": "Record `expansion_that_defined` into crate metadata\n\nFixes #77523\n\nNow that hygiene serialization is implemented, we also need to record\n`expansion_that_defined` so that we properly handle a foreign\n`SyntaxContext`.", "tree": {"sha": "773c235645e80fb88c9465e09fcca9bd94a5676a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773c235645e80fb88c9465e09fcca9bd94a5676a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl97e5AACgkQtAh+UQ6Y\nsWQdFA/+OVt9jhhGj9P9ZFIfnjVX8QyP+RC2jhenBawmuJOMep2tYTfKvbLz6tk4\nPKPm1LeUHSvn94VawjRG2JTrEnFJqMyCIhfJj3bUFBtvn7a+erbWF6ItI6qeh2If\n0ZIqNTT3BwwLdXOChztMBZ2/ma1ysz7uDVwiSmQYF/c8L04/eU9B9zu59csKRA7P\nr2ReP13T7QGTPl8daO9ARHYfko0UIF/gXfoXculuk7dHc4J/Gq6rF9/4hSDjf4Uk\nupu/QcLc7vyqVS06x+dT739mE8saCFuYohDeeQvr7Vhpsj86rQJi7RZPOsrbk77R\nIOCwmLsDkijFGnHTSCPacDBQw3ebKU2BB+rIrsgDlvsRSNEsUB7MkuG0FKZPt7hv\nKITgc4R2/Jm+oqWnDNkuRQL1dRmxTuvU7Dmrlp54b0TPLDvMjOaYQaWZPBgNCNdb\n/HhmSYgIW0tLpoprXiv1gbKlCqISu9lfGjsV+8cCZ4STFzkD3l/2QHShYOAOKygP\nd/ZVbJ6jLYE6XuqXLAPVTfewoJqrdDYaIoCdMhtgtgtgOab2LLYPh5P1dOORa0Mt\nND3fd//VcWnGJ8PbG7O/DohhyhMPdPqh89NtshnraHHGJHgfqGXI+j9/mebNg31s\nSnX6L2tJx1i3m+0hG6/12Eb6byCxkQcyOFSVAWhV+Ex1lRCeqFA=\n=anxc\n-----END PGP SIGNATURE-----", "payload": "tree 773c235645e80fb88c9465e09fcca9bd94a5676a\nparent f317a93d4d326442680eaeb78c22eece739433c7\nauthor Aaron Hill <aa1ronham@gmail.com> 1601926345 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601928079 -0400\n\nRecord `expansion_that_defined` into crate metadata\n\nFixes #77523\n\nNow that hygiene serialization is implemented, we also need to record\n`expansion_that_defined` so that we properly handle a foreign\n`SyntaxContext`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "html_url": "https://github.com/rust-lang/rust/commit/8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f317a93d4d326442680eaeb78c22eece739433c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f317a93d4d326442680eaeb78c22eece739433c7", "html_url": "https://github.com/rust-lang/rust/commit/f317a93d4d326442680eaeb78c22eece739433c7"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "8b11d2c913ac2e0fe45856ebf7a115b4a00c03fe", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -1011,6 +1011,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))\n     }\n \n+    fn get_expn_that_defined(&self, id: DefIndex, sess: &Session) -> ExpnId {\n+        self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))\n+    }\n+\n     /// Iterates over all the stability attributes in the given crate.\n     fn get_lib_features(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {\n         // FIXME: For a proc macro crate, not sure whether we should return the \"host\""}, {"sha": "578ce382912f0a25c357b8f94bcf0a01f1f82847", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -238,6 +238,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n \n     crate_extern_paths => { cdata.source().paths().cloned().collect() }\n+    expn_that_defined => { cdata.get_expn_that_defined(def_id.index, tcx.sess) }\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "4350ac5c27a88813ec9919b900548b5d103412ff", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -747,6 +747,7 @@ impl EncodeContext<'a, 'tcx> {\n             ty::Visibility::from_hir(enum_vis, enum_id, self.tcx));\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- &self.tcx.get_attrs(def_id)[..]);\n+        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -883,6 +884,7 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.visibility[def_id] <- field.vis);\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- variant_data.fields()[field_index].attrs);\n+        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_ident_span(def_id, field.ident);\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n@@ -924,6 +926,7 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));\n         record!(self.tables.visibility[def_id] <- ctor_vis);\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n+        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n@@ -1339,6 +1342,7 @@ impl EncodeContext<'a, 'tcx> {\n             ty::Visibility::from_hir(&item.vis, item.hir_id, tcx));\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- item.attrs);\n+        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         // FIXME(eddyb) there should be a nicer way to do this.\n         match item.kind {\n             hir::ItemKind::ForeignMod(ref fm) => record!(self.tables.children[def_id] <-"}, {"sha": "9e26d02e4e16d7c1e19397ea6f3096e55cbca0a9", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -294,6 +294,7 @@ define_tables! {\n     variances: Table<DefIndex, Lazy<[ty::Variance]>>,\n     generics: Table<DefIndex, Lazy<ty::Generics>>,\n     explicit_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n+    expn_that_defined: Table<DefIndex, Lazy<ExpnId>>,\n     // FIXME(eddyb) this would ideally be `Lazy<[...]>` but `ty::Predicate`\n     // doesn't handle shorthands in its own (de)serialization impls,\n     // as it's an `enum` for which we want to derive (de)serialization,"}, {"sha": "fe115bbb9c334896f6a273c28bac2f8bbe436669", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -191,6 +191,11 @@ rustc_queries! {\n             eval_always\n             desc { |tcx| \"parent module of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n+\n+        /// Internal helper query. Use `tcx.expansion_that_defined` instead\n+        query expn_that_defined(key: DefId) -> rustc_span::ExpnId {\n+            desc { |tcx| \"expansion that defined `{}`\", tcx.def_path_str(key) }\n+        }\n     }\n \n     Codegen {"}, {"sha": "7f77334acee75a7047f009cbe5108be366335667", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -3034,10 +3034,12 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .hygienic_eq(def_name.span.ctxt(), self.expansion_that_defined(def_parent_def_id))\n     }\n \n-    fn expansion_that_defined(self, scope: DefId) -> ExpnId {\n+    pub fn expansion_that_defined(self, scope: DefId) -> ExpnId {\n         match scope.as_local() {\n+            // Parsing and expansion aren't incremental, so we don't\n+            // need to go through a query for the same-crate case.\n             Some(scope) => self.hir().definitions().expansion_that_defined(scope),\n-            None => ExpnId::root(),\n+            None => self.expn_that_defined(scope),\n         }\n     }\n "}, {"sha": "f7e9b8013188573bac47038f2c8542275944bd64", "filename": "src/test/ui/hygiene/auxiliary/def-site-async-await.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fdef-site-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fdef-site-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fdef-site-async-await.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+extern crate opaque_hygiene;\n+\n+pub async fn serve() {\n+    opaque_hygiene::make_it!();\n+}"}, {"sha": "7730f91bd6a0378f73a89d3ed92eb0611603e149", "filename": "src/test/ui/hygiene/auxiliary/opaque-hygiene.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fopaque-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fopaque-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fopaque-hygiene.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -0,0 +1,21 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro_quote)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{TokenStream, quote};\n+\n+#[proc_macro]\n+pub fn make_it(input: TokenStream) -> TokenStream {\n+    // `quote!` applies def-site hygiene\n+    quote! {\n+        trait Foo {\n+            fn my_fn(&self) {}\n+        }\n+\n+        impl<T> Foo for T {}\n+        \"a\".my_fn();\n+    }\n+}"}, {"sha": "2af60ff6f53b6640ce14a4bb5547a3d76745d31d", "filename": "src/test/ui/hygiene/issue-77523-def-site-async-await.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/src%2Ftest%2Fui%2Fhygiene%2Fissue-77523-def-site-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d11f90a16fb374d68b4aae5486c3e12c74c63b7/src%2Ftest%2Fui%2Fhygiene%2Fissue-77523-def-site-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-77523-def-site-async-await.rs?ref=8d11f90a16fb374d68b4aae5486c3e12c74c63b7", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+// aux-build:opaque-hygiene.rs\n+// aux-build:def-site-async-await.rs\n+\n+// Regression test for issue #77523\n+// Tests that we don't ICE when an unusual combination\n+// of def-site hygiene and cross-crate monomorphization occurs.\n+\n+extern crate def_site_async_await;\n+\n+use std::future::Future;\n+\n+fn mk_ctxt() -> std::task::Context<'static> {\n+    panic!()\n+}\n+\n+fn main() {\n+    Box::pin(def_site_async_await::serve()).as_mut().poll(&mut mk_ctxt());\n+}"}]}