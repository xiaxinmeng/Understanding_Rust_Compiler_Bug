{"sha": "1daddb47d2516b503941e8893193789f030b4971", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYWRkYjQ3ZDI1MTZiNTAzOTQxZTg4OTMxOTM3ODlmMDMwYjQ5NzE=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-01-23T22:51:06Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-02-06T20:05:41Z"}, "message": "Restore linking to itself in implementors section of trait page", "tree": {"sha": "e177f30613769c4243a3e279912824e61ee6e537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e177f30613769c4243a3e279912824e61ee6e537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1daddb47d2516b503941e8893193789f030b4971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1daddb47d2516b503941e8893193789f030b4971", "html_url": "https://github.com/rust-lang/rust/commit/1daddb47d2516b503941e8893193789f030b4971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1daddb47d2516b503941e8893193789f030b4971/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399b6452b5d9982438be208668bc758479f13725", "url": "https://api.github.com/repos/rust-lang/rust/commits/399b6452b5d9982438be208668bc758479f13725", "html_url": "https://github.com/rust-lang/rust/commit/399b6452b5d9982438be208668bc758479f13725"}], "stats": {"total": 60, "additions": 9, "deletions": 51}, "files": [{"sha": "bea0e75832c33e3c3db2acc41be3fbfff029628d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1daddb47d2516b503941e8893193789f030b4971/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1daddb47d2516b503941e8893193789f030b4971/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1daddb47d2516b503941e8893193789f030b4971", "patch": "@@ -102,14 +102,6 @@ impl Buffer {\n         self.into_inner()\n     }\n \n-    crate fn from_display<T: std::fmt::Display>(&mut self, t: T) {\n-        if self.for_html {\n-            write!(self, \"{}\", t);\n-        } else {\n-            write!(self, \"{:#}\", t);\n-        }\n-    }\n-\n     crate fn is_for_html(&self) -> bool {\n         self.for_html\n     }\n@@ -900,16 +892,7 @@ impl clean::Type {\n }\n \n impl clean::Impl {\n-    crate fn print<'a>(&'a self, cache: &'a Cache) -> impl fmt::Display + 'a {\n-        self.print_inner(true, false, cache)\n-    }\n-\n-    fn print_inner<'a>(\n-        &'a self,\n-        link_trait: bool,\n-        use_absolute: bool,\n-        cache: &'a Cache,\n-    ) -> impl fmt::Display + 'a {\n+    crate fn print<'a>(&'a self, cache: &'a Cache, use_absolute: bool) -> impl fmt::Display + 'a {\n         display_fn(move |f| {\n             if f.alternate() {\n                 write!(f, \"impl{:#} \", self.generics.print(cache))?;\n@@ -921,21 +904,7 @@ impl clean::Impl {\n                 if self.negative_polarity {\n                     write!(f, \"!\")?;\n                 }\n-\n-                if link_trait {\n-                    fmt::Display::fmt(&ty.print(cache), f)?;\n-                } else {\n-                    match ty {\n-                        clean::ResolvedPath {\n-                            param_names: None, path, is_generic: false, ..\n-                        } => {\n-                            let last = path.segments.last().unwrap();\n-                            fmt::Display::fmt(&last.name, f)?;\n-                            fmt::Display::fmt(&last.args.print(cache), f)?;\n-                        }\n-                        _ => unreachable!(),\n-                    }\n-                }\n+                fmt::Display::fmt(&ty.print(cache), f)?;\n                 write!(f, \" for \")?;\n             }\n \n@@ -952,16 +921,6 @@ impl clean::Impl {\n     }\n }\n \n-// The difference from above is that trait is not hyperlinked.\n-crate fn fmt_impl_for_trait_page(\n-    i: &clean::Impl,\n-    f: &mut Buffer,\n-    use_absolute: bool,\n-    cache: &Cache,\n-) {\n-    f.from_display(i.print_inner(false, use_absolute, cache))\n-}\n-\n impl clean::Arguments {\n     crate fn print<'a>(&'a self, cache: &'a Cache) -> impl fmt::Display + 'a {\n         display_fn(move |f| {"}, {"sha": "c305a412652f7000f9aad95bfd68249a55a0060f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1daddb47d2516b503941e8893193789f030b4971/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1daddb47d2516b503941e8893193789f030b4971/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=1daddb47d2516b503941e8893193789f030b4971", "patch": "@@ -73,7 +73,6 @@ use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, FormatRenderer, Impl, RenderMode};\n use crate::html::escape::Escape;\n-use crate::html::format::fmt_impl_for_trait_page;\n use crate::html::format::Function;\n use crate::html::format::{href, print_default_space, print_generic_bounds, WhereClause};\n use crate::html::format::{print_abi_with_space, Buffer, PrintWithSpace};\n@@ -1138,7 +1137,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                     None\n                 } else {\n                     Some(Implementor {\n-                        text: imp.inner_impl().print(cx.cache()).to_string(),\n+                        text: imp.inner_impl().print(cx.cache(), false).to_string(),\n                         synthetic: imp.inner_impl().synthetic,\n                         types: collect_paths_for_type(imp.inner_impl().for_.clone(), cx.cache()),\n                     })\n@@ -2550,8 +2549,8 @@ fn bounds(t_bounds: &[clean::GenericBound], trait_alias: bool, cache: &Cache) ->\n }\n \n fn compare_impl<'a, 'b>(lhs: &'a &&Impl, rhs: &'b &&Impl, cache: &Cache) -> Ordering {\n-    let lhs = format!(\"{}\", lhs.inner_impl().print(cache));\n-    let rhs = format!(\"{}\", rhs.inner_impl().print(cache));\n+    let lhs = format!(\"{}\", lhs.inner_impl().print(cache, false));\n+    let rhs = format!(\"{}\", rhs.inner_impl().print(cache, false));\n \n     // lhs and rhs are formatted as HTML, which may be unnecessary\n     compare_names(&lhs, &rhs)\n@@ -3698,7 +3697,7 @@ fn spotlight_decl(decl: &clean::FnDecl, cache: &Cache) -> String {\n                     write!(\n                         &mut out,\n                         \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n-                        impl_.print(cache)\n+                        impl_.print(cache, false)\n                     );\n                     let t_did = impl_.trait_.def_id_full(cache).unwrap();\n                     for it in &impl_.items {\n@@ -3771,7 +3770,7 @@ fn render_impl(\n         };\n         if let Some(use_absolute) = use_absolute {\n             write!(w, \"<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">\", id, aliases);\n-            fmt_impl_for_trait_page(&i.inner_impl(), w, use_absolute, cx.cache());\n+            write!(w, \"{}\", i.inner_impl().print(cx.cache(), use_absolute));\n             if show_def_docs {\n                 for it in &i.inner_impl().items {\n                     if let clean::TypedefItem(ref tydef, _) = *it.kind {\n@@ -3796,7 +3795,7 @@ fn render_impl(\n                 \"<h3 id=\\\"{}\\\" class=\\\"impl\\\"{}><code class=\\\"in-band\\\">{}</code>\",\n                 id,\n                 aliases,\n-                i.inner_impl().print(cx.cache())\n+                i.inner_impl().print(cx.cache(), false)\n             );\n         }\n         write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);"}, {"sha": "bac28b44012cc292763030594afca4c7f8610251", "filename": "src/test/rustdoc/trait-self-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1daddb47d2516b503941e8893193789f030b4971/src%2Ftest%2Frustdoc%2Ftrait-self-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1daddb47d2516b503941e8893193789f030b4971/src%2Ftest%2Frustdoc%2Ftrait-self-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-self-link.rs?ref=1daddb47d2516b503941e8893193789f030b4971", "patch": "@@ -1,4 +1,4 @@\n-// @!has trait_self_link/trait.Foo.html //a/@href ../trait_self_link/trait.Foo.html\n+// @has trait_self_link/trait.Foo.html //a/@href ../trait_self_link/trait.Foo.html\n pub trait Foo {}\n \n pub struct Bar;"}]}