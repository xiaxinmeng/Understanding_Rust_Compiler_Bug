{"sha": "2184c7c5687a89ce58e169546c9b83448f4d0ea1", "node_id": "C_kwDOAAsO6NoAKDIxODRjN2M1Njg3YTg5Y2U1OGUxNjk1NDZjOWI4MzQ0OGY0ZDBlYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T21:51:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-14T21:51:31Z"}, "message": "Auto merge of #94935 - matthiaskrgr:rollup-2o2kyz6, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #90621 (Stabilise `aarch64_target_feature`)\n - #93977 (Type params and assoc types have unit metadata if they are sized)\n - #94670 (Improve `expect` impl and handle `#[expect(unfulfilled_lint_expectations)]` (RFC 2383))\n - #94884 (Fix remaining meta-variable expression TODOs)\n - #94931 (update miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ecbc3c584b55eb3020d2a0df1c53705166fa39b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecbc3c584b55eb3020d2a0df1c53705166fa39b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2184c7c5687a89ce58e169546c9b83448f4d0ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2184c7c5687a89ce58e169546c9b83448f4d0ea1", "html_url": "https://github.com/rust-lang/rust/commit/2184c7c5687a89ce58e169546c9b83448f4d0ea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2184c7c5687a89ce58e169546c9b83448f4d0ea1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285fa7ecd05dcbfdaf2faaf20400f5f92b39b3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/285fa7ecd05dcbfdaf2faaf20400f5f92b39b3c6", "html_url": "https://github.com/rust-lang/rust/commit/285fa7ecd05dcbfdaf2faaf20400f5f92b39b3c6"}, {"sha": "4753f24dc46078af25efda5c3a3fd8f2030bbc7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4753f24dc46078af25efda5c3a3fd8f2030bbc7f", "html_url": "https://github.com/rust-lang/rust/commit/4753f24dc46078af25efda5c3a3fd8f2030bbc7f"}], "stats": {"total": 514, "additions": 397, "deletions": 117}, "files": [{"sha": "3ce594b945ac1c35ea730243211f2c4c6d407bea", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -188,8 +188,6 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n         (\"x86\", \"avx512gfni\") => smallvec![\"gfni\"],\n         (\"x86\", \"avx512vpclmulqdq\") => smallvec![\"vpclmulqdq\"],\n         (\"aarch64\", \"fp\") => smallvec![\"fp-armv8\"],\n-        (\"aarch64\", \"fp16\") => smallvec![\"fullfp16\"],\n-        (\"aarch64\", \"fhm\") => smallvec![\"fp16fml\"],\n         (\"aarch64\", \"rcpc2\") => smallvec![\"rcpc-immo\"],\n         (\"aarch64\", \"dpb\") => smallvec![\"ccpp\"],\n         (\"aarch64\", \"dpb2\") => smallvec![\"ccdp\"],\n@@ -198,6 +196,19 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n         (\"aarch64\", \"pmuv3\") => smallvec![\"perfmon\"],\n         (\"aarch64\", \"paca\") => smallvec![\"pauth\"],\n         (\"aarch64\", \"pacg\") => smallvec![\"pauth\"],\n+        // Rust ties fp and neon together. In LLVM neon implicitly enables fp,\n+        // but we manually enable neon when a feature only implicitly enables fp\n+        (\"aarch64\", \"f32mm\") => smallvec![\"f32mm\", \"neon\"],\n+        (\"aarch64\", \"f64mm\") => smallvec![\"f64mm\", \"neon\"],\n+        (\"aarch64\", \"fhm\") => smallvec![\"fp16fml\", \"neon\"],\n+        (\"aarch64\", \"fp16\") => smallvec![\"fullfp16\", \"neon\"],\n+        (\"aarch64\", \"jsconv\") => smallvec![\"jsconv\", \"neon\"],\n+        (\"aarch64\", \"sve\") => smallvec![\"sve\", \"neon\"],\n+        (\"aarch64\", \"sve2\") => smallvec![\"sve2\", \"neon\"],\n+        (\"aarch64\", \"sve2-aes\") => smallvec![\"sve2-aes\", \"neon\"],\n+        (\"aarch64\", \"sve2-sm4\") => smallvec![\"sve2-sm4\", \"neon\"],\n+        (\"aarch64\", \"sve2-sha3\") => smallvec![\"sve2-sha3\", \"neon\"],\n+        (\"aarch64\", \"sve2-bitperm\") => smallvec![\"sve2-bitperm\", \"neon\"],\n         (_, s) => smallvec![s],\n     }\n }\n@@ -490,7 +501,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n         if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n             return SmallVec::<[_; 2]>::new();\n         }\n-        // ... otherwise though we run through `to_llvm_feature when\n+        // ... otherwise though we run through `to_llvm_features` when\n         // passing requests down to LLVM. This means that all in-language\n         // features also work on the command line instead of having two\n         // different names when the LLVM name and the Rust name differ."}, {"sha": "f37c6751381774d812c584f64182ce4c45a9c6f7", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 56, "deletions": 53, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -44,105 +44,108 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // FEAT_AdvSimd\n-    (\"neon\", Some(sym::aarch64_target_feature)),\n+    (\"neon\", None),\n     // FEAT_FP\n-    (\"fp\", Some(sym::aarch64_target_feature)),\n+    (\"fp\", None),\n     // FEAT_FP16\n-    (\"fp16\", Some(sym::aarch64_target_feature)),\n+    (\"fp16\", None),\n     // FEAT_SVE\n-    (\"sve\", Some(sym::aarch64_target_feature)),\n+    (\"sve\", None),\n     // FEAT_CRC\n-    (\"crc\", Some(sym::aarch64_target_feature)),\n+    (\"crc\", None),\n     // FEAT_RAS\n-    (\"ras\", Some(sym::aarch64_target_feature)),\n+    (\"ras\", None),\n     // FEAT_LSE\n-    (\"lse\", Some(sym::aarch64_target_feature)),\n+    (\"lse\", None),\n     // FEAT_RDM\n-    (\"rdm\", Some(sym::aarch64_target_feature)),\n+    (\"rdm\", None),\n     // FEAT_RCPC\n-    (\"rcpc\", Some(sym::aarch64_target_feature)),\n+    (\"rcpc\", None),\n     // FEAT_RCPC2\n-    (\"rcpc2\", Some(sym::aarch64_target_feature)),\n+    (\"rcpc2\", None),\n     // FEAT_DotProd\n-    (\"dotprod\", Some(sym::aarch64_target_feature)),\n+    (\"dotprod\", None),\n     // FEAT_TME\n-    (\"tme\", Some(sym::aarch64_target_feature)),\n+    (\"tme\", None),\n     // FEAT_FHM\n-    (\"fhm\", Some(sym::aarch64_target_feature)),\n+    (\"fhm\", None),\n     // FEAT_DIT\n-    (\"dit\", Some(sym::aarch64_target_feature)),\n+    (\"dit\", None),\n     // FEAT_FLAGM\n-    (\"flagm\", Some(sym::aarch64_target_feature)),\n+    (\"flagm\", None),\n     // FEAT_SSBS\n-    (\"ssbs\", Some(sym::aarch64_target_feature)),\n+    (\"ssbs\", None),\n     // FEAT_SB\n-    (\"sb\", Some(sym::aarch64_target_feature)),\n+    (\"sb\", None),\n     // FEAT_PAUTH (address authentication)\n-    (\"paca\", Some(sym::aarch64_target_feature)),\n+    (\"paca\", None),\n     // FEAT_PAUTH (generic authentication)\n-    (\"pacg\", Some(sym::aarch64_target_feature)),\n+    (\"pacg\", None),\n     // FEAT_DPB\n-    (\"dpb\", Some(sym::aarch64_target_feature)),\n+    (\"dpb\", None),\n     // FEAT_DPB2\n-    (\"dpb2\", Some(sym::aarch64_target_feature)),\n+    (\"dpb2\", None),\n     // FEAT_SVE2\n-    (\"sve2\", Some(sym::aarch64_target_feature)),\n+    (\"sve2\", None),\n     // FEAT_SVE2_AES\n-    (\"sve2-aes\", Some(sym::aarch64_target_feature)),\n+    (\"sve2-aes\", None),\n     // FEAT_SVE2_SM4\n-    (\"sve2-sm4\", Some(sym::aarch64_target_feature)),\n+    (\"sve2-sm4\", None),\n     // FEAT_SVE2_SHA3\n-    (\"sve2-sha3\", Some(sym::aarch64_target_feature)),\n+    (\"sve2-sha3\", None),\n     // FEAT_SVE2_BitPerm\n-    (\"sve2-bitperm\", Some(sym::aarch64_target_feature)),\n+    (\"sve2-bitperm\", None),\n     // FEAT_FRINTTS\n-    (\"frintts\", Some(sym::aarch64_target_feature)),\n+    (\"frintts\", None),\n     // FEAT_I8MM\n-    (\"i8mm\", Some(sym::aarch64_target_feature)),\n+    (\"i8mm\", None),\n     // FEAT_F32MM\n-    (\"f32mm\", Some(sym::aarch64_target_feature)),\n+    (\"f32mm\", None),\n     // FEAT_F64MM\n-    (\"f64mm\", Some(sym::aarch64_target_feature)),\n+    (\"f64mm\", None),\n     // FEAT_BF16\n-    (\"bf16\", Some(sym::aarch64_target_feature)),\n+    (\"bf16\", None),\n     // FEAT_RAND\n-    (\"rand\", Some(sym::aarch64_target_feature)),\n+    (\"rand\", None),\n     // FEAT_BTI\n-    (\"bti\", Some(sym::aarch64_target_feature)),\n+    (\"bti\", None),\n     // FEAT_MTE\n-    (\"mte\", Some(sym::aarch64_target_feature)),\n+    (\"mte\", None),\n     // FEAT_JSCVT\n-    (\"jsconv\", Some(sym::aarch64_target_feature)),\n+    (\"jsconv\", None),\n     // FEAT_FCMA\n-    (\"fcma\", Some(sym::aarch64_target_feature)),\n+    (\"fcma\", None),\n     // FEAT_AES\n-    (\"aes\", Some(sym::aarch64_target_feature)),\n+    (\"aes\", None),\n     // FEAT_SHA1 & FEAT_SHA256\n-    (\"sha2\", Some(sym::aarch64_target_feature)),\n+    (\"sha2\", None),\n     // FEAT_SHA512 & FEAT_SHA3\n-    (\"sha3\", Some(sym::aarch64_target_feature)),\n+    (\"sha3\", None),\n     // FEAT_SM3 & FEAT_SM4\n-    (\"sm4\", Some(sym::aarch64_target_feature)),\n+    (\"sm4\", None),\n     // FEAT_PAN\n-    (\"pan\", Some(sym::aarch64_target_feature)),\n+    (\"pan\", None),\n     // FEAT_LOR\n-    (\"lor\", Some(sym::aarch64_target_feature)),\n+    (\"lor\", None),\n     // FEAT_VHE\n-    (\"vh\", Some(sym::aarch64_target_feature)),\n+    (\"vh\", None),\n     // FEAT_PMUv3\n-    (\"pmuv3\", Some(sym::aarch64_target_feature)),\n+    (\"pmuv3\", None),\n     // FEAT_SPE\n-    (\"spe\", Some(sym::aarch64_target_feature)),\n-    (\"v8.1a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.2a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.3a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.4a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.5a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.6a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.7a\", Some(sym::aarch64_target_feature)),\n+    (\"spe\", None),\n+    (\"v8.1a\", Some(sym::aarch64_ver_target_feature)),\n+    (\"v8.2a\", Some(sym::aarch64_ver_target_feature)),\n+    (\"v8.3a\", Some(sym::aarch64_ver_target_feature)),\n+    (\"v8.4a\", Some(sym::aarch64_ver_target_feature)),\n+    (\"v8.5a\", Some(sym::aarch64_ver_target_feature)),\n+    (\"v8.6a\", Some(sym::aarch64_ver_target_feature)),\n+    (\"v8.7a\", Some(sym::aarch64_ver_target_feature)),\n ];\n \n-const AARCH64_TIED_FEATURES: &[&[&str]] = &[&[\"paca\", \"pacg\"]];\n+const AARCH64_TIED_FEATURES: &[&[&str]] = &[\n+    &[\"fp\", \"neon\"],   // Silicon always has both, so avoid needless complications\n+    &[\"paca\", \"pacg\"], // Together these represent `pauth` in LLVM\n+];\n \n const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"adx\", Some(sym::adx_target_feature)),"}, {"sha": "5c36c3c55b51e872d18761212751f4a6944b4105", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -5,7 +5,8 @@ use crate::Substitution;\n use crate::SubstitutionPart;\n use crate::SuggestionStyle;\n use crate::ToolMetadata;\n-use rustc_lint_defs::Applicability;\n+use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_serialize::json::Json;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n@@ -138,6 +139,28 @@ impl Diagnostic {\n         }\n     }\n \n+    pub fn update_unstable_expectation_id(\n+        &mut self,\n+        unstable_to_stable: &FxHashMap<LintExpectationId, LintExpectationId>,\n+    ) {\n+        if let Level::Expect(expectation_id) = &mut self.level {\n+            if expectation_id.is_stable() {\n+                return;\n+            }\n+\n+            // The unstable to stable map only maps the unstable `AttrId` to a stable `HirId` with an attribute index.\n+            // The lint index inside the attribute is manually transferred here.\n+            let lint_index = expectation_id.get_lint_index();\n+            expectation_id.set_lint_index(None);\n+            let mut stable_id = *unstable_to_stable\n+                .get(&expectation_id)\n+                .expect(\"each unstable `LintExpectationId` must have a matching stable id\");\n+\n+            stable_id.set_lint_index(lint_index);\n+            *expectation_id = stable_id;\n+        }\n+    }\n+\n     pub fn has_future_breakage(&self) -> bool {\n         match self.code {\n             Some(DiagnosticId::Lint { has_future_breakage, .. }) => has_future_breakage,"}, {"sha": "345247b07001b6cfe1d44a3c8da31a5a2c516209", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -522,6 +522,11 @@ impl Drop for HandlerInner {\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n             );\n         }\n+\n+        assert!(\n+            self.unstable_expect_diagnostics.is_empty(),\n+            \"all diagnostics with unstable expectations should have been converted\",\n+        );\n     }\n }\n \n@@ -942,29 +947,30 @@ impl Handler {\n \n         let mut inner = self.inner.borrow_mut();\n         for mut diag in diags.into_iter() {\n-            let mut unstable_id = diag\n+            diag.update_unstable_expectation_id(unstable_to_stable);\n+\n+            let stable_id = diag\n                 .level\n                 .get_expectation_id()\n                 .expect(\"all diagnostics inside `unstable_expect_diagnostics` must have a `LintExpectationId`\");\n-\n-            // The unstable to stable map only maps the unstable `AttrId` to a stable `HirId` with an attribute index.\n-            // The lint index inside the attribute is manually transferred here.\n-            let lint_index = unstable_id.get_lint_index();\n-            unstable_id.set_lint_index(None);\n-            let mut stable_id = *unstable_to_stable\n-                .get(&unstable_id)\n-                .expect(\"each unstable `LintExpectationId` must have a matching stable id\");\n-\n-            stable_id.set_lint_index(lint_index);\n-            diag.level = Level::Expect(stable_id);\n             inner.fulfilled_expectations.insert(stable_id);\n \n             (*TRACK_DIAGNOSTICS)(&diag);\n         }\n+\n+        inner\n+            .stashed_diagnostics\n+            .values_mut()\n+            .for_each(|diag| diag.update_unstable_expectation_id(unstable_to_stable));\n+        inner\n+            .future_breakage_diagnostics\n+            .iter_mut()\n+            .for_each(|diag| diag.update_unstable_expectation_id(unstable_to_stable));\n     }\n \n     /// This methods steals all [`LintExpectationId`]s that are stored inside\n     /// [`HandlerInner`] and indicate that the linked expectation has been fulfilled.\n+    #[must_use]\n     pub fn steal_fulfilled_expectation_ids(&self) -> FxHashSet<LintExpectationId> {\n         assert!(\n             self.inner.borrow().unstable_expect_diagnostics.is_empty(),"}, {"sha": "f18cf95a2bf116fe4c653169091b329f7f586faf", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -337,8 +337,12 @@ fn check_occurrences(\n             let name = MacroRulesNormalizedIdent::new(name);\n             check_ops_is_prefix(sess, node_id, macros, binders, ops, span, name);\n         }\n-        // FIXME(c410-f3r) Check token (https://github.com/rust-lang/rust/issues/93902)\n-        TokenTree::MetaVarExpr(..) => {}\n+        TokenTree::MetaVarExpr(dl, ref mve) => {\n+            let Some(name) = mve.ident().map(MacroRulesNormalizedIdent::new) else {\n+                return;\n+            };\n+            check_ops_is_prefix(sess, node_id, macros, binders, ops, dl.entire(), name);\n+        }\n         TokenTree::Delimited(_, ref del) => {\n             check_nested_occurrences(sess, node_id, &del.tts, macros, binders, ops, valid);\n         }"}, {"sha": "07081c75d46f0e1a02f935460afd93c0dc9a326d", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -324,8 +324,11 @@ pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n                 TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),\n                 TokenTree::MetaVar(..) => 0,\n                 TokenTree::MetaVarDecl(..) => 1,\n-                // FIXME(c410-f3r) MetaVarExpr should be handled instead of being ignored\n-                // https://github.com/rust-lang/rust/issues/9390\n+                // Panicking here would abort execution because `parse_tree` makes use of this\n+                // function. In other words, RHS meta-variable expressions eventually end-up here.\n+                //\n+                // `0` is still returned to inform that no meta-variable was found. `Meta-variables\n+                // != Meta-variable expressions`\n                 TokenTree::MetaVarExpr(..) => 0,\n                 TokenTree::Sequence(_, ref seq) => seq.num_captures,\n                 TokenTree::Token(..) => 0,"}, {"sha": "2949ca716b2309d944279d5b029586a2f48b9d86", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -62,9 +62,9 @@ impl MetaVarExpr {\n         Ok(rslt)\n     }\n \n-    crate fn ident(&self) -> Option<&Ident> {\n-        match self {\n-            MetaVarExpr::Count(ident, _) | MetaVarExpr::Ignore(ident) => Some(&ident),\n+    crate fn ident(&self) -> Option<Ident> {\n+        match *self {\n+            MetaVarExpr::Count(ident, _) | MetaVarExpr::Ignore(ident) => Some(ident),\n             MetaVarExpr::Index(..) | MetaVarExpr::Length(..) => None,\n         }\n     }"}, {"sha": "5ec63739cf574fd934d73f1fa3df4053e0369dbe", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -399,7 +399,7 @@ fn lockstep_iter_size(\n         TokenTree::MetaVarExpr(_, ref expr) => {\n             let default_rslt = LockstepIterSize::Unconstrained;\n             let Some(ident) = expr.ident() else { return default_rslt; };\n-            let name = MacroRulesNormalizedIdent::new(ident.clone());\n+            let name = MacroRulesNormalizedIdent::new(ident);\n             match lookup_cur_matched(name, interpolations, repeats) {\n                 Some(MatchedSeq(ref ads)) => {\n                     default_rslt.with(LockstepIterSize::Constraint(ads.len(), name))\n@@ -479,7 +479,7 @@ fn count_repetitions<'a>(\n     count(cx, 0, depth_opt, matched, sp)\n }\n \n-/// Returns a `NamedMatch` item declared on the RHS given an arbitrary [Ident]\n+/// Returns a `NamedMatch` item declared on the LHS given an arbitrary [Ident]\n fn matched_from_ident<'ctx, 'interp, 'rslt>(\n     cx: &ExtCtxt<'ctx>,\n     ident: Ident,"}, {"sha": "e49f40ff1a1845524110d27953a89db30443a768", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -46,6 +46,8 @@ declare_features! (\n     // feature-group-start: accepted features\n     // -------------------------------------------------------------------------\n \n+    /// Allows `#[target_feature(...)]` on aarch64 platforms\n+    (accepted, aarch64_target_feature, \"1.61.0\", Some(44839), None),\n     /// Allows the sysV64 ABI to be specified on all platforms\n     /// instead of just the platforms on which it is the C ABI.\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),"}, {"sha": "d9748b19e13fe946e619dd83da58963a9f5a3c9d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -243,7 +243,7 @@ declare_features! (\n     // FIXME: Document these and merge with the list below.\n \n     // Unstable `#[target_feature]` directives.\n-    (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, aarch64_ver_target_feature, \"1.27.0\", Some(44839), None),\n     (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n     (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n     (active, avx512_target_feature, \"1.27.0\", Some(44839), None),"}, {"sha": "74fef0be9e98c4fe4e178ef8d2146ca9bbb2499a", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -30,10 +30,6 @@ fn emit_unfulfilled_expectation_lint(\n     hir_id: HirId,\n     expectation: &LintExpectation,\n ) {\n-    // FIXME: The current implementation doesn't cover cases where the\n-    // `unfulfilled_lint_expectations` is actually expected by another lint\n-    // expectation. This can be added here by checking the lint level and\n-    // retrieving the `LintExpectationId` if it was expected.\n     tcx.struct_span_lint_hir(\n         builtin::UNFULFILLED_LINT_EXPECTATIONS,\n         hir_id,\n@@ -43,6 +39,11 @@ fn emit_unfulfilled_expectation_lint(\n             if let Some(rationale) = expectation.reason {\n                 diag.note(&rationale.as_str());\n             }\n+\n+            if expectation.is_unfulfilled_lint_expectations {\n+                diag.note(\"the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\");\n+            }\n+\n             diag.emit();\n         },\n     );"}, {"sha": "47899f8625d265315f2734b244610299f928395f", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::lint::{\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::{\n-    builtin::{self, FORBIDDEN_LINT_GROUPS},\n+    builtin::{self, FORBIDDEN_LINT_GROUPS, UNFULFILLED_LINT_EXPECTATIONS},\n     Level, Lint, LintExpectationId, LintId,\n };\n use rustc_session::parse::{add_feature_diagnostics, feature_err};\n@@ -218,6 +218,14 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n             }\n         }\n+\n+        // The lint `unfulfilled_lint_expectations` can't be expected, as it would suppress itself.\n+        // Handling expectations of this lint would add additional complexity with little to no\n+        // benefit. The expect level for this lint will therefore be ignored.\n+        if let Level::Expect(_) = level && id == LintId::of(UNFULFILLED_LINT_EXPECTATIONS) {\n+            return;\n+        }\n+\n         if let Level::ForceWarn = old_level {\n             self.current_specs_mut().insert(id, (old_level, old_src));\n         } else {\n@@ -350,6 +358,22 @@ impl<'s> LintLevelsBuilder<'s> {\n                     self.store.check_lint_name(&name, tool_name, self.registered_tools);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n+                        // This checks for instances where the user writes `#[expect(unfulfilled_lint_expectations)]`\n+                        // in that case we want to avoid overriding the lint level but instead add an expectation that\n+                        // can't be fulfilled. The lint message will include an explanation, that the\n+                        // `unfulfilled_lint_expectations` lint can't be expected.\n+                        if let Level::Expect(expect_id) = level {\n+                            // The `unfulfilled_lint_expectations` lint is not part of any lint groups. Therefore. we\n+                            // only need to check the slice if it contains a single lint.\n+                            let is_unfulfilled_lint_expectations = match ids {\n+                                [lint] => *lint == LintId::of(UNFULFILLED_LINT_EXPECTATIONS),\n+                                _ => false,\n+                            };\n+                            self.lint_expectations.push((\n+                                expect_id,\n+                                LintExpectation::new(reason, sp, is_unfulfilled_lint_expectations),\n+                            ));\n+                        }\n                         let src = LintLevelSource::Node(\n                             meta_item.path.segments.last().expect(\"empty lint name\").ident.name,\n                             sp,\n@@ -360,10 +384,6 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 self.insert_spec(id, (level, src));\n                             }\n                         }\n-                        if let Level::Expect(expect_id) = level {\n-                            self.lint_expectations\n-                                .push((expect_id, LintExpectation::new(reason, sp)));\n-                        }\n                     }\n \n                     CheckLintNameResult::Tool(result) => {\n@@ -381,7 +401,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp)));\n+                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n                                 }\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n@@ -425,7 +445,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp)));\n+                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n                                 }\n                             }\n                             Err((None, _)) => {\n@@ -531,7 +551,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n-                                .push((expect_id, LintExpectation::new(reason, sp)));\n+                                .push((expect_id, LintExpectation::new(reason, sp, false)));\n                         }\n                     } else {\n                         panic!(\"renamed lint does not exist: {}\", new_name);"}, {"sha": "4842f7ef4b9a9727b4e782fd671e9d612682e1fe", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -54,7 +54,7 @@ pub enum Applicability {\n /// Expected `Diagnostic`s get the lint level `Expect` which stores the `LintExpectationId`\n /// to match it with the actual expectation later on.\n ///\n-/// The `LintExpectationId` has to be has stable between compilations, as diagnostic\n+/// The `LintExpectationId` has to be stable between compilations, as diagnostic\n /// instances might be loaded from cache. Lint messages can be emitted during an\n /// `EarlyLintPass` operating on the AST and during a `LateLintPass` traversing the\n /// HIR tree. The AST doesn't have enough information to create a stable id. The\n@@ -71,7 +71,7 @@ pub enum Applicability {\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, Encodable, Decodable)]\n pub enum LintExpectationId {\n     /// Used for lints emitted during the `EarlyLintPass`. This id is not\n-    /// has stable and should not be cached.\n+    /// hash stable and should not be cached.\n     Unstable { attr_id: AttrId, lint_index: Option<u16> },\n     /// The [`HirId`] that the lint expectation is attached to. This id is\n     /// stable and can be cached. The additional index ensures that nodes with\n@@ -113,7 +113,9 @@ impl<HCX: rustc_hir::HashStableContext> HashStable<HCX> for LintExpectationId {\n                 lint_index.hash_stable(hcx, hasher);\n             }\n             _ => {\n-                unreachable!(\"HashStable should only be called for a filled `LintExpectationId`\")\n+                unreachable!(\n+                    \"HashStable should only be called for filled and stable `LintExpectationId`\"\n+                )\n             }\n         }\n     }"}, {"sha": "1b301629b9c73ac37fb15fd7fe2c66cd003a45e4", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -204,11 +204,19 @@ pub struct LintExpectation {\n     pub reason: Option<Symbol>,\n     /// The [`Span`] of the attribute that this expectation originated from.\n     pub emission_span: Span,\n+    /// Lint messages for the `unfulfilled_lint_expectations` lint will be\n+    /// adjusted to include an additional note. Therefore, we have to track if\n+    /// the expectation is for the lint.\n+    pub is_unfulfilled_lint_expectations: bool,\n }\n \n impl LintExpectation {\n-    pub fn new(reason: Option<Symbol>, attr_span: Span) -> Self {\n-        Self { reason, emission_span: attr_span }\n+    pub fn new(\n+        reason: Option<Symbol>,\n+        emission_span: Span,\n+        is_unfulfilled_lint_expectations: bool,\n+    ) -> Self {\n+        Self { reason, emission_span, is_unfulfilled_lint_expectations }\n     }\n }\n "}, {"sha": "e89f68fd0ea0cac933ce25d0f00c8975dac2c098", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -2252,12 +2252,13 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n-    /// Returns the type of metadata for (potentially fat) pointers to this type.\n+    /// Returns the type of metadata for (potentially fat) pointers to this type,\n+    /// and a boolean signifying if this is conditional on this type being `Sized`.\n     pub fn ptr_metadata_ty(\n         self,\n         tcx: TyCtxt<'tcx>,\n         normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n-    ) -> Ty<'tcx> {\n+    ) -> (Ty<'tcx>, bool) {\n         let tail = tcx.struct_tail_with_normalize(self, normalize);\n         match tail.kind() {\n             // Sized types\n@@ -2277,28 +2278,30 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Error(_)\n+            // Extern types have metadata = ().\n             | ty::Foreign(..)\n             // If returned by `struct_tail_without_normalization` this is a unit struct\n             // without any fields, or not a struct, and therefore is Sized.\n             | ty::Adt(..)\n             // If returned by `struct_tail_without_normalization` this is the empty tuple,\n             // a.k.a. unit type, which is Sized\n-            | ty::Tuple(..) => tcx.types.unit,\n+            | ty::Tuple(..) => (tcx.types.unit, false),\n \n-            ty::Str | ty::Slice(_) => tcx.types.usize,\n+            ty::Str | ty::Slice(_) => (tcx.types.usize, false),\n             ty::Dynamic(..) => {\n                 let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n-                tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])\n+                (tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()]), false)\n             },\n \n-            ty::Projection(_)\n-            | ty::Param(_)\n-            | ty::Opaque(..)\n-            | ty::Infer(ty::TyVar(_))\n+            // type parameters only have unit metadata if they're sized, so return true\n+            // to make sure we double check this during confirmation\n+            ty::Param(_) |  ty::Projection(_) | ty::Opaque(..) => (tcx.types.unit, true),\n+\n+            ty::Infer(ty::TyVar(_))\n             | ty::Bound(..)\n             | ty::Placeholder(..)\n             | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n-                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?}\", tail)\n+                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?} (tail = {:?})\", self, tail)\n             }\n         }\n     }"}, {"sha": "4dd1c3fed6b3658b82c22372cddac5ee2d02072e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -278,6 +278,7 @@ symbols! {\n         _task_context,\n         a32,\n         aarch64_target_feature,\n+        aarch64_ver_target_feature,\n         abi,\n         abi_amdgpu_kernel,\n         abi_avr_interrupt,"}, {"sha": "11f0507d6fd61175d8c0125bad91df0de2cdd855", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -1469,6 +1469,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n                 let tail = selcx.tcx().struct_tail_with_normalize(self_ty, |ty| {\n+                    // We throw away any obligations we get from this, since we normalize\n+                    // and confirm these obligations once again during confirmation\n                     normalize_with_depth(\n                         selcx,\n                         obligation.param_env,\n@@ -1485,7 +1487,6 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Int(_)\n                     | ty::Uint(_)\n                     | ty::Float(_)\n-                    | ty::Foreign(_)\n                     | ty::Str\n                     | ty::Array(..)\n                     | ty::Slice(_)\n@@ -1498,6 +1499,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Generator(..)\n                     | ty::GeneratorWitness(..)\n                     | ty::Never\n+                    // Extern types have unit metadata, according to RFC 2850\n+                    | ty::Foreign(_)\n                     // If returned by `struct_tail_without_normalization` this is a unit struct\n                     // without any fields, or not a struct, and therefore is Sized.\n                     | ty::Adt(..)\n@@ -1506,9 +1509,18 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     // Integers and floats are always Sized, and so have unit type metadata.\n                     | ty::Infer(ty::InferTy::IntVar(_) | ty::InferTy::FloatVar(..)) => true,\n \n-                    ty::Projection(..)\n+                    // type parameters, opaques, and unnormalized projections have pointer\n+                    // metadata if they're known (e.g. by the param_env) to be sized\n+                    ty::Param(_) | ty::Projection(..) | ty::Opaque(..)\n+                        if tail.is_sized(selcx.tcx().at(obligation.cause.span), obligation.param_env) =>\n+                    {\n+                        true\n+                    }\n+\n+                    // FIXME(compiler-errors): are Bound and Placeholder types ever known sized?\n+                    ty::Param(_)\n+                    | ty::Projection(..)\n                     | ty::Opaque(..)\n-                    | ty::Param(..)\n                     | ty::Bound(..)\n                     | ty::Placeholder(..)\n                     | ty::Infer(..)\n@@ -1517,7 +1529,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                             candidate_set.mark_ambiguous();\n                         }\n                         false\n-                    },\n+                    }\n                 }\n             }\n             super::ImplSource::Param(..) => {\n@@ -1727,7 +1739,7 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n     let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n     let mut obligations = vec![];\n-    let metadata_ty = self_ty.ptr_metadata_ty(tcx, |ty| {\n+    let (metadata_ty, check_is_sized) = self_ty.ptr_metadata_ty(tcx, |ty| {\n         normalize_with_depth_to(\n             selcx,\n             obligation.param_env,\n@@ -1737,6 +1749,19 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n             &mut obligations,\n         )\n     });\n+    if check_is_sized {\n+        let sized_predicate = ty::Binder::dummy(ty::TraitRef::new(\n+            tcx.require_lang_item(LangItem::Sized, None),\n+            tcx.mk_substs_trait(self_ty, &[]),\n+        ))\n+        .without_const()\n+        .to_predicate(tcx);\n+        obligations.push(Obligation::new(\n+            obligation.cause.clone(),\n+            obligation.param_env,\n+            sized_predicate,\n+        ));\n+    }\n \n     let substs = tcx.mk_substs([self_ty.into()].iter());\n     let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, None);"}, {"sha": "16e72d0c2c565985afdf556058a7ee2ec395e24c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -2680,7 +2680,6 @@ fn from_target_feature(\n             // Only allow features whose feature gates have been enabled.\n             let allowed = match feature_gate.as_ref().copied() {\n                 Some(sym::arm_target_feature) => rust_features.arm_target_feature,\n-                Some(sym::aarch64_target_feature) => rust_features.aarch64_target_feature,\n                 Some(sym::hexagon_target_feature) => rust_features.hexagon_target_feature,\n                 Some(sym::powerpc_target_feature) => rust_features.powerpc_target_feature,\n                 Some(sym::mips_target_feature) => rust_features.mips_target_feature,\n@@ -2696,6 +2695,7 @@ fn from_target_feature(\n                 Some(sym::f16c_target_feature) => rust_features.f16c_target_feature,\n                 Some(sym::ermsb_target_feature) => rust_features.ermsb_target_feature,\n                 Some(sym::bpf_target_feature) => rust_features.bpf_target_feature,\n+                Some(sym::aarch64_ver_target_feature) => rust_features.aarch64_ver_target_feature,\n                 Some(name) => bug!(\"unknown target feature gate {}\", name),\n                 None => true,\n             };"}, {"sha": "e1be20c217911f615ab77ab028ed6ab75bf537c4", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -206,7 +206,7 @@\n #![feature(asm_const)]\n //\n // Target features:\n-#![feature(aarch64_target_feature)]\n+#![cfg_attr(bootstrap, feature(aarch64_target_feature))]\n #![feature(adx_target_feature)]\n #![feature(arm_target_feature)]\n #![feature(avx512_target_feature)]"}, {"sha": "38f2fcd18c5e42861e732441ee1ea683e3073d9d", "filename": "src/test/run-make-fulldeps/simd-ffi/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2FMakefile?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -41,7 +41,7 @@ define MK_TARGETS\n # now.\n $(1): simd.rs\n \t$$(RUSTC) --target=$(1) --emit=llvm-ir,asm simd.rs \\\n-                -C target-feature='+neon,+sse2' -C extra-filename=-$(1)\n+                -C target-feature='+fp,+neon,+sse2' -C extra-filename=-$(1)\n endef\n \n $(foreach targetxxx,$(TARGETS),$(eval $(call MK_TARGETS,$(targetxxx))))"}, {"sha": "d38e65533869af5341da39fd369277e2cbd74453", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_unfulfilled_expectation.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// ignore-tidy-linelength\n+\n+#![feature(lint_reasons)]\n+#![warn(unused_mut)]\n+\n+#![expect(unfulfilled_lint_expectations, reason = \"idk why you would expect this\")]\n+//~^ WARNING this lint expectation is unfulfilled\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+//~| NOTE idk why you would expect this\n+//~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+#[expect(unfulfilled_lint_expectations, reason = \"a local: idk why you would expect this\")]\n+//~^ WARNING this lint expectation is unfulfilled\n+//~| NOTE a local: idk why you would expect this\n+//~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+pub fn normal_test_fn() {\n+    #[expect(unused_mut, reason = \"this expectation will create a diagnostic with the default lint level\")]\n+    //~^ WARNING this lint expectation is unfulfilled\n+    //~| NOTE this expectation will create a diagnostic with the default lint level\n+    let mut v = vec![1, 1, 2, 3, 5];\n+    v.sort();\n+\n+    // Check that lint lists including `unfulfilled_lint_expectations` are also handled correctly\n+    #[expect(unused, unfulfilled_lint_expectations, reason = \"the expectation for `unused` should be fulfilled\")]\n+    //~^ WARNING this lint expectation is unfulfilled\n+    //~| NOTE the expectation for `unused` should be fulfilled\n+    //~| NOTE the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+    let value = \"I'm unused\";\n+}\n+\n+#[expect(warnings, reason = \"this suppresses all warnings and also suppresses itself. No warning will be issued\")]\n+pub fn expect_warnings() {\n+    // This lint trigger will be suppressed\n+    #[warn(unused_mut)]\n+    let mut v = vec![1, 1, 2, 3, 5];\n+}\n+\n+fn main() {}"}, {"sha": "9bfee79b03d7088cd0abe5a47df3dc63d433a197", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_unfulfilled_expectation.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -0,0 +1,38 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:7:11\n+   |\n+LL | #![expect(unfulfilled_lint_expectations, reason = \"idk why you would expect this\")]\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+   = note: idk why you would expect this\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:13:10\n+   |\n+LL | #[expect(unfulfilled_lint_expectations, reason = \"a local: idk why you would expect this\")]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: a local: idk why you would expect this\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:18:14\n+   |\n+LL |     #[expect(unused_mut, reason = \"this expectation will create a diagnostic with the default lint level\")]\n+   |              ^^^^^^^^^^\n+   |\n+   = note: this expectation will create a diagnostic with the default lint level\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_unfulfilled_expectation.rs:25:22\n+   |\n+LL |     #[expect(unused, unfulfilled_lint_expectations, reason = \"the expectation for `unused` should be fulfilled\")]\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the expectation for `unused` should be fulfilled\n+   = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "2382c98f8f12848c051b6480c1ef3291a2975ac7", "filename": "src/test/ui/target-feature/gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -16,7 +16,6 @@\n // gate-test-avx512_target_feature\n // gate-test-tbm_target_feature\n // gate-test-arm_target_feature\n-// gate-test-aarch64_target_feature\n // gate-test-hexagon_target_feature\n // gate-test-mips_target_feature\n // gate-test-wasm_target_feature\n@@ -28,6 +27,7 @@\n // gate-test-riscv_target_feature\n // gate-test-ermsb_target_feature\n // gate-test-bpf_target_feature\n+// gate-test-aarch64_ver_target_feature\n \n #[target_feature(enable = \"avx512bw\")]\n //~^ ERROR: currently unstable"}, {"sha": "048777cb3ba2644599d32b409af42112c0d98b26", "filename": "src/test/ui/target-feature/tied-features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: --crate-type=rlib --target=aarch64-unknown-linux-gnu\n // needs-llvm-components: aarch64\n-#![feature(aarch64_target_feature, target_feature_11)]\n+#![cfg_attr(bootstrap, feature(aarch64_target_feature))]\n #![feature(no_core, lang_items)]\n #![no_core]\n "}, {"sha": "d081721aca275089adc8018be92c77150abf81ff", "filename": "src/test/ui/traits/pointee-tail-is-generic-errors.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -0,0 +1,22 @@\n+// edition:2018\n+\n+#![feature(ptr_metadata)]\n+#![feature(type_alias_impl_trait)]\n+\n+type Opaque = impl std::fmt::Debug + ?Sized;\n+\n+fn opaque() -> &'static Opaque {\n+    &[1] as &[i32]\n+}\n+\n+fn a<T: ?Sized>() {\n+    is_thin::<T>();\n+    //~^ ERROR type mismatch resolving `<T as Pointee>::Metadata == ()`\n+\n+    is_thin::<Opaque>();\n+    //~^ ERROR type mismatch resolving `<impl Debug + ?Sized as Pointee>::Metadata == ()`\n+}\n+\n+fn is_thin<T: std::ptr::Pointee<Metadata = ()> + ?Sized>() {}\n+\n+fn main() {}"}, {"sha": "fa5fe67e53cb6b57232da0337e6412f23e697983", "filename": "src/test/ui/traits/pointee-tail-is-generic-errors.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -0,0 +1,40 @@\n+error[E0271]: type mismatch resolving `<T as Pointee>::Metadata == ()`\n+  --> $DIR/pointee-tail-is-generic-errors.rs:13:5\n+   |\n+LL |     is_thin::<T>();\n+   |     ^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<T as Pointee>::Metadata`\n+   = help: consider constraining the associated type `<T as Pointee>::Metadata` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `is_thin`\n+  --> $DIR/pointee-tail-is-generic-errors.rs:20:33\n+   |\n+LL | fn is_thin<T: std::ptr::Pointee<Metadata = ()> + ?Sized>() {}\n+   |                                 ^^^^^^^^^^^^^ required by this bound in `is_thin`\n+\n+error[E0271]: type mismatch resolving `<impl Debug + ?Sized as Pointee>::Metadata == ()`\n+  --> $DIR/pointee-tail-is-generic-errors.rs:16:5\n+   |\n+LL | type Opaque = impl std::fmt::Debug + ?Sized;\n+   |               ----------------------------- the found opaque type\n+...\n+LL |     is_thin::<Opaque>();\n+   |     ^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl Debug + ?Sized as Pointee>::Metadata`\n+note: required by a bound in `is_thin`\n+  --> $DIR/pointee-tail-is-generic-errors.rs:20:33\n+   |\n+LL | fn is_thin<T: std::ptr::Pointee<Metadata = ()> + ?Sized>() {}\n+   |                                 ^^^^^^^^^^^^^ required by this bound in `is_thin`\n+help: consider constraining the associated type `<impl Debug + ?Sized as Pointee>::Metadata` to `()`\n+   |\n+LL | type Opaque = impl std::fmt::Debug<Metadata = ()> + ?Sized;\n+   |                                   +++++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "e0da0fc38613d8a17c89fbcfa0f9d9bfa72aa556", "filename": "src/test/ui/traits/pointee-tail-is-generic.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2184c7c5687a89ce58e169546c9b83448f4d0ea1/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(ptr_metadata)]\n+#![feature(type_alias_impl_trait)]\n+\n+type Opaque = impl std::future::Future;\n+\n+fn opaque() -> Opaque {\n+    async {}\n+}\n+\n+fn a<T>() {\n+    // type parameter T is known to be sized\n+    is_thin::<T>();\n+    // tail of ADT (which is a type param) is known to be sized\n+    is_thin::<std::cell::Cell<T>>();\n+    // opaque type is known to be sized\n+    is_thin::<Opaque>();\n+}\n+\n+fn a2<T: Iterator>() {\n+    // associated type is known to be sized\n+    is_thin::<T::Item>();\n+}\n+\n+fn is_thin<T: std::ptr::Pointee<Metadata = ()>>() {}\n+\n+fn main() {}"}, {"sha": "7bc0c986217629e6c831edcb133532023a5aec63", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=2184c7c5687a89ce58e169546c9b83448f4d0ea1", "patch": "@@ -1 +1 @@\n-Subproject commit a12a48bf723e0e13f043979a7f79861d975e7187\n+Subproject commit 7bc0c986217629e6c831edcb133532023a5aec63"}]}