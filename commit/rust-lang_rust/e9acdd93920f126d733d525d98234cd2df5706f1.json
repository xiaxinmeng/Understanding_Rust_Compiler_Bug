{"sha": "e9acdd93920f126d733d525d98234cd2df5706f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWNkZDkzOTIwZjEyNmQ3MzNkNTI1ZDk4MjM0Y2QyZGY1NzA2ZjE=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-17T04:56:51Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-17T06:19:24Z"}, "message": "std: generlize & move io::file::suppressed_stat to io::ignore_io_error", "tree": {"sha": "9ce44218eee9a9bec199780a66927730cbcd5cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ce44218eee9a9bec199780a66927730cbcd5cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9acdd93920f126d733d525d98234cd2df5706f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9acdd93920f126d733d525d98234cd2df5706f1", "html_url": "https://github.com/rust-lang/rust/commit/e9acdd93920f126d733d525d98234cd2df5706f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9acdd93920f126d733d525d98234cd2df5706f1/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52840a5bbc7fa3bc4bf93dacc95d0db523812639", "url": "https://api.github.com/repos/rust-lang/rust/commits/52840a5bbc7fa3bc4bf93dacc95d0db523812639", "html_url": "https://github.com/rust-lang/rust/commit/52840a5bbc7fa3bc4bf93dacc95d0db523812639"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "ee96583206acbd5d7620e8b3a732d8794e09dee4", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e9acdd93920f126d733d525d98234cd2df5706f1/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9acdd93920f126d733d525d98234cd2df5706f1/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=e9acdd93920f126d733d525d98234cd2df5706f1", "patch": "@@ -17,7 +17,7 @@ use rt::rtio::{RtioFileStream, IoFactory, IoFactoryObject};\n use rt::io::{io_error, read_error, EndOfFile,\n             FileMode, FileAccess, FileStat, IoError,\n             PathAlreadyExists, PathDoesntExist,\n-            MismatchedFileTypeForOperation};\n+            MismatchedFileTypeForOperation, ignore_io_error};\n use rt::local::Local;\n use option::{Some, None};\n use path::Path;\n@@ -248,18 +248,6 @@ impl Seek for FileStream {\n     }\n }\n \n-// helper for grabbing a stat and ignoring any\n-// error.. used in Info wrappers\n-fn suppressed_stat(cb: &fn() -> Option<FileStat>) -> Option<FileStat> {\n-    do io_error::cond.trap(|_| {\n-        // just swallow the error.. downstream users\n-        // who can make a decision based on a None result\n-        // won't care\n-    }).inside {\n-        cb()\n-    }\n-}\n-\n /// Shared functionality between `FileInfo` and `DirectoryInfo`\n pub trait FileSystemInfo {\n     /// Get the filesystem path that this instance points at,\n@@ -277,7 +265,7 @@ pub trait FileSystemInfo {\n     /// returns `true` if the location pointed at by the enclosing\n     /// exists on the filesystem\n     fn exists(&self) -> bool {\n-        match suppressed_stat(|| self.stat()) {\n+        match ignore_io_error(|| self.stat()) {\n             Some(_) => true,\n             None => false\n         }\n@@ -306,7 +294,7 @@ pub trait FileInfo : FileSystemInfo {\n     /// false for paths to non-existent locations or directories or\n     /// other non-regular files (named pipes, etc).\n     fn is_file(&self) -> bool {\n-        match suppressed_stat(|| self.stat()) {\n+        match ignore_io_error(|| self.stat()) {\n             Some(s) => s.is_file,\n             None => false\n         }\n@@ -315,7 +303,7 @@ pub trait FileInfo : FileSystemInfo {\n     /// Attempts to open a regular file for reading/writing based\n     /// on provided inputs\n     fn open_stream(&self, mode: FileMode, access: FileAccess) -> Option<FileStream> {\n-        match suppressed_stat(|| self.stat()) {\n+        match ignore_io_error(|| self.stat()) {\n             Some(s) => match s.is_file {\n                 true => open(self.get_path(), mode, access),\n                 false => None\n@@ -364,7 +352,7 @@ trait DirectoryInfo : FileSystemInfo {\n     /// false for paths to non-existent locations or if the item is\n     /// not a directory (eg files, named pipes, links, etc)\n     fn is_dir(&self) -> bool {\n-        match suppressed_stat(|| self.stat()) {\n+        match ignore_io_error(|| self.stat()) {\n             Some(s) => s.is_dir,\n             None => false\n         }\n@@ -375,7 +363,7 @@ trait DirectoryInfo : FileSystemInfo {\n     /// at that location or if some other error occurs during\n     /// the mkdir operation\n     fn mkdir(&self) {\n-        match suppressed_stat(|| self.stat()) {\n+        match ignore_io_error(|| self.stat()) {\n             Some(_) => {\n                 io_error::cond.raise(IoError {\n                     kind: PathAlreadyExists,\n@@ -391,7 +379,7 @@ trait DirectoryInfo : FileSystemInfo {\n     /// the type underlying the given `DirectoryInfo`. Will fail\n     /// if there is no directory at the given location or if\n     fn rmdir(&self) {\n-        match suppressed_stat(|| self.stat()) {\n+        match ignore_io_error(|| self.stat()) {\n             Some(s) => {\n                 match s.is_dir {\n                     true => rmdir(self.get_path()),"}, {"sha": "871b41039d1cec2fe405ab84fc3760fffac9ef54", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9acdd93920f126d733d525d98234cd2df5706f1/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9acdd93920f126d733d525d98234cd2df5706f1/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=e9acdd93920f126d733d525d98234cd2df5706f1", "patch": "@@ -401,6 +401,18 @@ condition! {\n     pub read_error: super::IoError -> ();\n }\n \n+/// Helper for wrapper calls where you want to\n+/// ignore any io_errors that might be raised\n+pub fn ignore_io_error<T>(cb: &fn() -> T) -> T {\n+    do io_error::cond.trap(|_| {\n+        // just swallow the error.. downstream users\n+        // who can make a decision based on a None result\n+        // won't care\n+    }).inside {\n+        cb()\n+    }\n+}\n+\n pub trait Reader {\n     /// Read bytes, up to the length of `buf` and place them in `buf`.\n     /// Returns the number of bytes read. The number of bytes read my"}]}