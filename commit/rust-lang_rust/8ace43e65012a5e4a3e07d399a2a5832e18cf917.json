{"sha": "8ace43e65012a5e4a3e07d399a2a5832e18cf917", "node_id": "C_kwDOAAsO6NoAKDhhY2U0M2U2NTAxMmE1ZTRhM2UwN2QzOTlhMmE1ODMyZTE4Y2Y5MTc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:34:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:34:55Z"}, "message": "Move a couple of macros to intrinsics::simd", "tree": {"sha": "57c81ac5368ce415d0e2bb87368c2e8ae7166e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57c81ac5368ce415d0e2bb87368c2e8ae7166e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ace43e65012a5e4a3e07d399a2a5832e18cf917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ace43e65012a5e4a3e07d399a2a5832e18cf917", "html_url": "https://github.com/rust-lang/rust/commit/8ace43e65012a5e4a3e07d399a2a5832e18cf917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ace43e65012a5e4a3e07d399a2a5832e18cf917/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3a8d5fb90dca1dd8462ea45b73d23ba0603f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3a8d5fb90dca1dd8462ea45b73d23ba0603f76", "html_url": "https://github.com/rust-lang/rust/commit/4e3a8d5fb90dca1dd8462ea45b73d23ba0603f76"}], "stats": {"total": 230, "additions": 115, "deletions": 115}, "files": [{"sha": "d6b35bba9e7ff5039da0eca5eeb14094b851cb0a", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/8ace43e65012a5e4a3e07d399a2a5832e18cf917/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ace43e65012a5e4a3e07d399a2a5832e18cf917/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=8ace43e65012a5e4a3e07d399a2a5832e18cf917", "patch": "@@ -234,121 +234,6 @@ fn bool_to_zero_or_max_uint<'tcx>(\n     CValue::by_val(res, layout)\n }\n \n-macro simd_cmp {\n-    ($fx:expr, $cc:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        let vector_ty = clif_vector_type($fx.tcx, $x.layout());\n-\n-        if let Some(vector_ty) = vector_ty {\n-            let x = $x.load_scalar($fx);\n-            let y = $y.load_scalar($fx);\n-            let val = if vector_ty.lane_type().is_float() {\n-                $fx.bcx.ins().fcmp(FloatCC::$cc_f, x, y)\n-            } else {\n-                $fx.bcx.ins().icmp(IntCC::$cc, x, y)\n-            };\n-\n-            // HACK This depends on the fact that icmp for vectors represents bools as 0 and !0, not 0 and 1.\n-            let val = $fx.bcx.ins().raw_bitcast(vector_ty, val);\n-\n-            $ret.write_cvalue($fx, CValue::by_val(val, $ret.layout()));\n-        } else {\n-            simd_pair_for_each_lane(\n-                $fx,\n-                $x,\n-                $y,\n-                $ret,\n-                |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                    let res_lane = match lane_layout.ty.kind() {\n-                        ty::Uint(_) | ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane),\n-                        ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n-                        _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                    };\n-                    bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n-                },\n-            );\n-        }\n-    },\n-    ($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        // FIXME use vector icmp when possible\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n-                    ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n-                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n-            },\n-        );\n-    },\n-}\n-\n-macro simd_int_binop {\n-    ($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_int_binop!($fx, $op|$op($x, $y) -> $ret);\n-    },\n-    ($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n-                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n-            },\n-        );\n-    },\n-}\n-\n-macro simd_int_flt_binop {\n-    ($fx:expr, $op:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_int_flt_binop!($fx, $op|$op|$op_f($x, $y) -> $ret);\n-    },\n-    ($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind() {\n-                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n-                    ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n-            },\n-        );\n-    },\n-}\n-\n-macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n-    simd_pair_for_each_lane(\n-        $fx,\n-        $x,\n-        $y,\n-        $ret,\n-        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-            let res_lane = match lane_layout.ty.kind() {\n-                ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n-                _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            };\n-            CValue::by_val(res_lane, ret_lane_layout)\n-        },\n-    );\n-}\n-\n pub(crate) fn codegen_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     instance: Instance<'tcx>,"}, {"sha": "181b45a874097b7b7a91d6e6d4f9be59ebf5a81b", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/8ace43e65012a5e4a3e07d399a2a5832e18cf917/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ace43e65012a5e4a3e07d399a2a5832e18cf917/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=8ace43e65012a5e4a3e07d399a2a5832e18cf917", "patch": "@@ -15,6 +15,121 @@ fn validate_simd_type(fx: &mut FunctionCx<'_, '_, '_>, intrinsic: Symbol, span:\n     }\n }\n \n+macro simd_cmp {\n+    ($fx:expr, $cc:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        let vector_ty = clif_vector_type($fx.tcx, $x.layout());\n+\n+        if let Some(vector_ty) = vector_ty {\n+            let x = $x.load_scalar($fx);\n+            let y = $y.load_scalar($fx);\n+            let val = if vector_ty.lane_type().is_float() {\n+                $fx.bcx.ins().fcmp(FloatCC::$cc_f, x, y)\n+            } else {\n+                $fx.bcx.ins().icmp(IntCC::$cc, x, y)\n+            };\n+\n+            // HACK This depends on the fact that icmp for vectors represents bools as 0 and !0, not 0 and 1.\n+            let val = $fx.bcx.ins().raw_bitcast(vector_ty, val);\n+\n+            $ret.write_cvalue($fx, CValue::by_val(val, $ret.layout()));\n+        } else {\n+            simd_pair_for_each_lane(\n+                $fx,\n+                $x,\n+                $y,\n+                $ret,\n+                |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+                    let res_lane = match lane_layout.ty.kind() {\n+                        ty::Uint(_) | ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane),\n+                        ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n+                        _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                    };\n+                    bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n+                },\n+            );\n+        }\n+    },\n+    ($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        // FIXME use vector icmp when possible\n+        simd_pair_for_each_lane(\n+            $fx,\n+            $x,\n+            $y,\n+            $ret,\n+            |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+                let res_lane = match lane_layout.ty.kind() {\n+                    ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n+                    ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n+                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n+                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                };\n+                bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n+            },\n+        );\n+    },\n+}\n+\n+macro simd_int_binop {\n+    ($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        simd_int_binop!($fx, $op|$op($x, $y) -> $ret);\n+    },\n+    ($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        simd_pair_for_each_lane(\n+            $fx,\n+            $x,\n+            $y,\n+            $ret,\n+            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+                let res_lane = match lane_layout.ty.kind() {\n+                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n+                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n+                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                };\n+                CValue::by_val(res_lane, ret_lane_layout)\n+            },\n+        );\n+    },\n+}\n+\n+macro simd_int_flt_binop {\n+    ($fx:expr, $op:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        simd_int_flt_binop!($fx, $op|$op|$op_f($x, $y) -> $ret);\n+    },\n+    ($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        simd_pair_for_each_lane(\n+            $fx,\n+            $x,\n+            $y,\n+            $ret,\n+            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+                let res_lane = match lane_layout.ty.kind() {\n+                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n+                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n+                    ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n+                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                };\n+                CValue::by_val(res_lane, ret_lane_layout)\n+            },\n+        );\n+    },\n+}\n+\n+macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n+    simd_pair_for_each_lane(\n+        $fx,\n+        $x,\n+        $y,\n+        $ret,\n+        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+            let res_lane = match lane_layout.ty.kind() {\n+                ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n+                _ => unreachable!(\"{:?}\", lane_layout.ty),\n+            };\n+            CValue::by_val(res_lane, ret_lane_layout)\n+        },\n+    );\n+}\n+\n pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     intrinsic: Symbol,"}]}