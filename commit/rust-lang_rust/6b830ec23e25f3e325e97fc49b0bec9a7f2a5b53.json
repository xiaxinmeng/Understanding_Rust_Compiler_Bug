{"sha": "6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiODMwZWMyM2UyNWYzZTMyNWU5N2ZjNDliMGJlYzlhN2YyYTViNTM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-21T11:19:17Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-22T19:02:44Z"}, "message": "Add new tests and fix old ones", "tree": {"sha": "8350b822ae31b1ed80f9103bcdcfaaebbbc5030a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8350b822ae31b1ed80f9103bcdcfaaebbbc5030a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "html_url": "https://github.com/rust-lang/rust/commit/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e96ac1178f2350dc35b8d601d3667c6496bf801", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e96ac1178f2350dc35b8d601d3667c6496bf801", "html_url": "https://github.com/rust-lang/rust/commit/3e96ac1178f2350dc35b8d601d3667c6496bf801"}], "stats": {"total": 140, "additions": 96, "deletions": 44}, "files": [{"sha": "f466183bec80a24835ec0f87413760c1ca861aa8", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "patch": "@@ -105,16 +105,19 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         let generics = self.cx.tcx.generics_of(def_id);\n \n         let ty = self.cx.tcx.type_of(def_id);\n-        let mut traits = FxHashMap();\n+        let mut traits = Vec::new();\n         if self.cx.crate_name != Some(\"core\".to_string()) {\n             if let ty::TyAdt(_adt, _) = ty.sty {\n+                let real_name = name.clone().map(|name| Ident::from_str(&name));\n                 let param_env = self.cx.tcx.param_env(def_id);\n                 for &trait_def_id in self.cx.all_traits.iter() {\n-                    if traits.get(&trait_def_id).is_some() ||\n-                       !self.cx.access_levels.borrow().is_doc_reachable(trait_def_id) {\n+                    if !self.cx.access_levels.borrow().is_doc_reachable(trait_def_id) ||\n+                       self.cx.generated_synthetics\n+                              .borrow_mut()\n+                              .get(&(def_id, trait_def_id))\n+                              .is_some() {\n                         continue\n                     }\n-                    let t_name = self.cx.tcx.item_name(trait_def_id).to_string();\n                     self.cx.tcx.for_each_relevant_impl(trait_def_id, ty, |impl_def_id| {\n                         self.cx.tcx.infer_ctxt().enter(|infcx| {\n                             let generics = infcx.tcx.generics_of(impl_def_id);\n@@ -124,7 +127,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                 ::rustc::ty::TypeVariants::TyParam(_) => true,\n                                 _ => false,\n                             } {\n-                                return;\n+                                return\n                             }\n \n                             let substs = infcx.fresh_substs_for_item(DUMMY_SP, def_id);\n@@ -147,38 +150,63 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                     param_env,\n                                     trait_ref.to_predicate(),\n                                 ));\n-                                if may_apply {\n-                                    if traits.get(&trait_def_id).is_none() {\n-                                        let trait_ = hir::TraitRef {\n-                                            path: get_path_for_type(infcx.tcx, trait_def_id, hir::def::Def::Trait),\n-                                            ref_id: ast::DUMMY_NODE_ID,\n-                                        };\n-                                        let provided_trait_methods = infcx.tcx.provided_trait_methods(impl_def_id)\n-                                                                              .into_iter()\n-                                                                              .map(|meth| meth.ident.to_string())\n-                                                                              .collect();\n-                                        traits.insert(trait_def_id, Item {\n-                                            source: Span::empty(),\n-                                            name: None,\n-                                            attrs: Default::default(),\n-                                            visibility: None,\n-                                            def_id: self.next_def_id(impl_def_id.krate),\n-                                            stability: None,\n-                                            deprecation: None,\n-                                            inner: ImplItem(Impl {\n-                                                unsafety: hir::Unsafety::Normal,\n-                                                generics: (generics,\n-                                                           &tcx.predicates_of(impl_def_id)).clean(self.cx),\n-                                                provided_trait_methods,\n-                                                trait_: Some(trait_.clean(self.cx)),\n-                                                for_: ty.clean(self.cx),\n-                                                items: infcx.tcx.associated_items(impl_def_id).collect::<Vec<_>>().clean(self.cx),\n-                                                polarity: None,\n-                                                synthetic: true,\n-                                            }),\n-                                        });\n-                                    }\n+                                if !may_apply {\n+                                    return\n                                 }\n+                                self.cx.generated_synthetics.borrow_mut()\n+                                                            .insert((def_id, trait_def_id));\n+                                let trait_ = hir::TraitRef {\n+                                    path: get_path_for_type(infcx.tcx, trait_def_id, hir::def::Def::Trait),\n+                                    ref_id: ast::DUMMY_NODE_ID,\n+                                };\n+                                let provided_trait_methods = infcx.tcx.provided_trait_methods(impl_def_id)\n+                                                                      .into_iter()\n+                                                                      .map(|meth| meth.ident.to_string())\n+                                                                      .collect();\n+\n+                                let path = get_path_for_type(self.cx.tcx, def_id, def_ctor);\n+                                let mut segments = path.segments.into_vec();\n+                                let last = segments.pop().unwrap();\n+\n+                                segments.push(hir::PathSegment::new(\n+                                    real_name.unwrap_or(last.ident),\n+                                    self.generics_to_path_params(generics.clone()),\n+                                    false,\n+                                ));\n+\n+                                let new_path = hir::Path {\n+                                    span: path.span,\n+                                    def: path.def,\n+                                    segments: HirVec::from_vec(segments),\n+                                };\n+\n+                                let ty = hir::Ty {\n+                                    id: ast::DUMMY_NODE_ID,\n+                                    node: hir::Ty_::TyPath(hir::QPath::Resolved(None, P(new_path))),\n+                                    span: DUMMY_SP,\n+                                    hir_id: hir::DUMMY_HIR_ID,\n+                                };\n+\n+                                traits.push(Item {\n+                                    source: Span::empty(),\n+                                    name: None,\n+                                    attrs: Default::default(),\n+                                    visibility: None,\n+                                    def_id: self.next_def_id(impl_def_id.krate),\n+                                    stability: None,\n+                                    deprecation: None,\n+                                    inner: ImplItem(Impl {\n+                                        unsafety: hir::Unsafety::Normal,\n+                                        generics: (generics,\n+                                                   &tcx.predicates_of(impl_def_id)).clean(self.cx),\n+                                        provided_trait_methods,\n+                                        trait_: Some(trait_.clean(self.cx)),\n+                                        for_: ty.clean(self.cx),\n+                                        items: infcx.tcx.associated_items(impl_def_id).collect::<Vec<_>>().clean(self.cx),\n+                                        polarity: None,\n+                                        synthetic: true,\n+                                    }),\n+                                });\n                                 debug!(\"{:?} => {}\", trait_ref, may_apply);\n                             }\n                         });\n@@ -209,7 +237,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 def_ctor,\n                 tcx.require_lang_item(lang_items::SyncTraitLangItem),\n             ).into_iter())\n-            .chain(traits.into_iter().map(|(_, v)| v))\n+            .chain(traits.into_iter())\n             .collect();\n \n         debug!("}, {"sha": "68277835d2bbe2d5e7f6b65a3336a467912124b8", "filename": "src/test/rustdoc/generic-impl.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+use std::fmt;\n+\n+// @!has foo/struct.Bar.html 'impl<T> ToString for Bar'\n+pub struct Bar;\n+\n+// @has foo/struct.Foo.html '//h3[@id=\"impl-ToString\"]//code' 'impl<T> ToString for Foo'\n+pub struct Foo;\n+\n+impl fmt::Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Foo\")\n+    }\n+}"}, {"sha": "54a8a7648334187dc606be45ed3fc1ffa9ff3e4d", "filename": "src/test/rustdoc/manual_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmanual_impl.rs?ref=6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "patch": "@@ -56,7 +56,6 @@ impl T for S1 {\n // @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n // @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait c_method definition.'\n // @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n-// @!has - '//*[@class=\"docblock\"]' 'Read more'\n pub struct S2(usize);\n \n /// Docs associated with the S2 trait implementation."}, {"sha": "3ecd6b63510f5d3a8a24d5a16c3f18da918cfb40", "filename": "src/test/rustdoc/sidebar-items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-items.rs?ref=6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "patch": "@@ -31,11 +31,11 @@ pub trait Foo {\n // @has - '//*[@class=\"sidebar-title\"][@href=\"#fields\"]' 'Fields'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f\"]' 'f'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.u\"]' 'u'\n-// @!has - '//*[@class=\"sidebar-links\"]/a' 'w'\n+// @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n pub struct Bar {\n     pub f: u32,\n     pub u: u32,\n-    w: u32,\n+    waza: u32,\n }\n \n // @has foo/enum.En.html\n@@ -51,9 +51,9 @@ pub enum En {\n // @has - '//*[@class=\"sidebar-title\"][@href=\"#fields\"]' 'Fields'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f1\"]' 'f1'\n // @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f2\"]' 'f2'\n-// @!has - '//*[@class=\"sidebar-links\"]/a' 'w'\n+// @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n pub union MyUnion {\n     pub f1: u32,\n     pub f2: f32,\n-    w: u32,\n+    waza: u32,\n }"}, {"sha": "200747bf6cd2125fcf8d08e531cf4c6c33fad9a0", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "patch": "@@ -12,7 +12,7 @@\n // @has - '//code' 'impl<T> Send for Foo<T> where T: Send'\n // @has - '//code' 'impl<T> Sync for Foo<T> where T: Sync'\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 2\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 11\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "461b922e28edb9eeb2eb41cdce5556c3e79e63e0", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=6b830ec23e25f3e325e97fc49b0bec9a7f2a5b53", "patch": "@@ -16,7 +16,7 @@\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 1\n-// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]' 10\n pub struct Foo<T> {\n     field: T,\n }"}]}