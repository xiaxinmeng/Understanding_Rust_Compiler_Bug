{"sha": "74ef46cfa2c7d8befbd82faf973268957d5b718d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZWY0NmNmYTJjN2Q4YmVmYmQ4MmZhZjk3MzI2ODk1N2Q1YjcxOGQ=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-10-09T00:37:58Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-11-01T22:16:59Z"}, "message": "Replace UncoeribleReceiver error message with UndispatchableReceiver", "tree": {"sha": "009fecb378f905157c0c6ccd96b14bbe82fc1020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009fecb378f905157c0c6ccd96b14bbe82fc1020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ef46cfa2c7d8befbd82faf973268957d5b718d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ef46cfa2c7d8befbd82faf973268957d5b718d", "html_url": "https://github.com/rust-lang/rust/commit/74ef46cfa2c7d8befbd82faf973268957d5b718d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ef46cfa2c7d8befbd82faf973268957d5b718d/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c56d8d0c21e15be8ea41835c647a0caecc0d0da", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c56d8d0c21e15be8ea41835c647a0caecc0d0da", "html_url": "https://github.com/rust-lang/rust/commit/3c56d8d0c21e15be8ea41835c647a0caecc0d0da"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "cd7e2774371fe90f119a6d0e28435be8b91660f2", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74ef46cfa2c7d8befbd82faf973268957d5b718d/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef46cfa2c7d8befbd82faf973268957d5b718d/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=74ef46cfa2c7d8befbd82faf973268957d5b718d", "patch": "@@ -64,8 +64,8 @@ impl ObjectSafetyViolation {\n                 format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UncoercibleReceiver) =>\n-                format!(\"method `{}` has an uncoercible receiver type\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver) =>\n+                format!(\"method `{}`'s receiver cannot be dispatched on\", name).into(),\n             ObjectSafetyViolation::AssociatedConst(name) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }\n@@ -87,8 +87,8 @@ pub enum MethodViolationCode {\n     /// e.g., `fn foo<A>()`\n     Generic,\n \n-    /// the self argument can't be coerced from Self=dyn Trait to Self=T where T: Trait\n-    UncoercibleReceiver,\n+    /// the method's receiver (`self` argument) can't be dispatched on\n+    UndispatchableReceiver,\n }\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n@@ -325,7 +325,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         // `Receiver: Unsize<Receiver[Self => dyn Trait]>`\n         if receiver_ty != self.mk_self_type() {\n             if !self.receiver_is_dispatchable(method, receiver_ty) {\n-                return Some(MethodViolationCode::UncoercibleReceiver);\n+                return Some(MethodViolationCode::UndispatchableReceiver);\n             }\n         }\n "}, {"sha": "77ca118471db5d6d75c506c69902cbce7f35e8f0", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74ef46cfa2c7d8befbd82faf973268957d5b718d/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef46cfa2c7d8befbd82faf973268957d5b718d/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr?ref=74ef46cfa2c7d8befbd82faf973268957d5b718d", "patch": "@@ -4,15 +4,15 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL |     let x = Rc::new(5usize) as Rc<Foo>;\n    |                                ^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo` has an uncoercible receiver type\n+   = note: method `foo`'s receiver cannot be dispatched on\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:40:13\n    |\n LL |     let x = Rc::new(5usize) as Rc<Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo` has an uncoercible receiver type\n+   = note: method `foo`'s receiver cannot be dispatched on\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n \n error: aborting due to 2 previous errors"}]}