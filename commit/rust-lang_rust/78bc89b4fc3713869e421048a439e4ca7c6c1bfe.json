{"sha": "78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YmM4OWI0ZmMzNzEzODY5ZTQyMTA0OGE0MzllNGNhN2M2YzFiZmU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-28T19:02:54Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T16:06:51Z"}, "message": "Implement `readlink`\n\nDue to the truncating behavior of `readlink`, I was not able to\ndirectly use any of the existing C-cstring helper functions.", "tree": {"sha": "60df9818e7d7e98f97a3a6acc257b421598c8b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60df9818e7d7e98f97a3a6acc257b421598c8b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl958xsACgkQtAh+UQ6Y\nsWSfCA//Rkgp4lPcIcZLINDcKuULGRero63S4q8i3P5gzS0nRo0WIahDuCG+dOzt\nHcdywOyk/kLsG2cHAJeJ6pntlKGU2i/WNeNAAMOrS4exXp34l/VfjpTZYui0c7jh\nGEH2Ndsd0Mr4E4vNQw4unSCNsLs5eYMshEDSi8kxSY8QMSc+1Tgu3O2S4ZZvDMcz\nDyqc5ISapKEVerfwjERbuXdQtZ0B3Ie2FbhfrpdOInuX0NoQISjUKlI4SqD6UAXt\nN1broLE+ugQaBG7JblpSa21ecTCj+hdP1emC9z8uLp+LwqgpReNVv0Yic2j/s/2W\ntriXbgqJBvdrE/B2bPV9OqrGlhG0M3r/5udVM72LAh18cToFzxcxMiSWBzwSnj82\nHrZIiNNKznQk7XPj7AZrbJIj466LHnRyiMomGirAcltpKfLIIYbnk+Ig51zpjIK4\n3nxXONRKV6ZU9lEmvRzFYvTcroXvB9nq1UBf/TJTK+InNgq3y70Kx3XdB8ErnhR3\nx3vLmnAFVulyVQmb3HaWc7pfkZMpQkR1qpAxSHLv4GzUwKlHiGCir9Hmiq/0rWho\n7LUKOF/YoF8YMPr+rKi9FQ6ujpFc4RQ/Uf2ojxXqIK2Uz/QIjX6QKRK8++Rno1vz\nYt6pCZMFZhFpS+y0CDvVFCZmsUQqcupY569sbYIApgrO+yDYn94=\n=asCR\n-----END PGP SIGNATURE-----", "payload": "tree 60df9818e7d7e98f97a3a6acc257b421598c8b3d\nparent 00106b9f1f71bcb5c556632db50745eec4516d8c\nauthor Aaron Hill <aa1ronham@gmail.com> 1601319774 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601827611 -0400\n\nImplement `readlink`\n\nDue to the truncating behavior of `readlink`, I was not able to\ndirectly use any of the existing C-cstring helper functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "html_url": "https://github.com/rust-lang/rust/commit/78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00106b9f1f71bcb5c556632db50745eec4516d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/00106b9f1f71bcb5c556632db50745eec4516d8c", "html_url": "https://github.com/rust-lang/rust/commit/00106b9f1f71bcb5c556632db50745eec4516d8c"}], "stats": {"total": 116, "additions": 100, "deletions": 16}, "files": [{"sha": "b3d40392ac685464d5e15412c16d9902eb8d09dc", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "patch": "@@ -118,22 +118,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         scalar: Scalar<Tag>,\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n-        #[cfg(unix)]\n-        fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-            Ok(os_str.as_bytes())\n-        }\n-        #[cfg(not(unix))]\n-        fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-            // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n-            // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n-            // valid.\n-            os_str\n-                .to_str()\n-                .map(|s| s.as_bytes())\n-                .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n-        }\n \n-        let bytes = os_str_to_bytes(os_str)?;\n+        let bytes = self.os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n         let string_length = u64::try_from(bytes.len()).unwrap();\n@@ -265,4 +251,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n+\n+    #[cfg(unix)]\n+    fn os_str_to_bytes<'a>(&mut self, os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+        Ok(os_str.as_bytes())\n+    }\n+\n+    #[cfg(not(unix))]\n+    fn os_str_to_bytes<'a>(&mut self, os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+        // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n+        // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n+        // valid.\n+        os_str\n+            .to_str()\n+            .map(|s| s.as_bytes())\n+            .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n+    }\n+\n }"}, {"sha": "177678f03d74cd482ca0ebc2b9e389cc6e9abf34", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "patch": "@@ -123,6 +123,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.fdatasync(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"readlink\" => {\n+                let &[pathname, buf, bufsize] = check_arg_count(args)?;\n+                let result = this.readlink(pathname, buf, bufsize)?;\n+                this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n+            }\n \n             // Allocation\n             \"posix_memalign\" => {"}, {"sha": "a5b9642d0604ee839cb4c8bb36bd789e47321c9f", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "patch": "@@ -1353,6 +1353,39 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.handle_not_found()\n         }\n     }\n+\n+    fn readlink(\n+        &mut self,\n+        pathname_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+        bufsize_op: OpTy<'tcx, Tag>\n+    ) -> InterpResult<'tcx, i64> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"readlink\")?;\n+\n+        let pathname = this.read_path_from_c_str(this.read_scalar(pathname_op)?.check_init()?)?;\n+        let buf = this.read_scalar(buf_op)?.check_init()?;\n+        let bufsize = this.read_scalar(bufsize_op)?.to_machine_usize(this)?;\n+\n+        let result = std::fs::read_link(pathname);\n+        match result {\n+            Ok(resolved) => {\n+                let mut path_bytes = this.os_str_to_bytes(resolved.as_ref())?;\n+                if path_bytes.len() > bufsize as usize {\n+                    path_bytes = &path_bytes[..(bufsize as usize)]\n+                }\n+                // 'readlink' truncates the resolved path if\n+                // the provided buffer is not large enough\n+                this.memory.write_bytes(buf, path_bytes.iter().copied())?;\n+                Ok(path_bytes.len() as i64)\n+            }\n+            Err(e) => {\n+                this.set_last_error_from_io_error(e)?;\n+                Ok(-1)\n+            }\n+        }\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "8f750847b203b1dcd3af47a92c0dbdc3fd2e5bd3", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bc89b4fc3713869e421048a439e4ca7c6c1bfe/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "patch": "@@ -1,12 +1,18 @@\n // ignore-windows: File handling is not implemented yet\n // compile-flags: -Zmiri-disable-isolation\n \n+#![feature(rustc_private)]\n+\n use std::fs::{\n     File, create_dir, OpenOptions, read_dir, remove_dir, remove_dir_all, remove_file, rename,\n };\n-use std::io::{Read, Write, ErrorKind, Result, Seek, SeekFrom};\n+use std::ffi::CString;\n+use std::io::{Read, Write, Error, ErrorKind, Result, Seek, SeekFrom};\n use std::path::{PathBuf, Path};\n \n+extern crate libc;\n+\n+\n fn main() {\n     test_file();\n     test_file_clone();\n@@ -215,6 +221,43 @@ fn test_symlink() {\n     let mut contents = Vec::new();\n     symlink_file.read_to_end(&mut contents).unwrap();\n     assert_eq!(bytes, contents.as_slice());\n+\n+\n+    #[cfg(unix)]\n+    {\n+        use std::os::unix::ffi::OsStrExt;\n+\n+        let expected_path = path.as_os_str().as_bytes();\n+\n+        // Test that the expected string gets written to a buffer of proper\n+        // length, and that a trailing null byte is not written\n+        let symlink_c_str = CString::new(symlink_path.as_os_str().as_bytes()).unwrap();\n+        let symlink_c_ptr = symlink_c_str.as_ptr();\n+\n+        // Make the buf one byte larger than it needs to be,\n+        // and check that the last byte is not overwritten\n+        let mut large_buf = vec![0xFF; expected_path.len() + 1];\n+        let res = unsafe { libc::readlink(symlink_c_ptr, large_buf.as_mut_ptr().cast(), large_buf.len()) };\n+        assert_eq!(res, large_buf.len() as isize - 1);\n+        // Check that the resovled path was properly written into the buf\n+        assert_eq!(&large_buf[..(large_buf.len() - 1)], expected_path);\n+        assert_eq!(large_buf.last(), Some(&0xFF));\n+\n+        // Test that the resolved path is truncated if the provided buffer\n+        // is too small.\n+        let mut small_buf = [0u8; 2];\n+        let res = unsafe { libc::readlink(symlink_c_ptr, small_buf.as_mut_ptr().cast(), small_buf.len()) };\n+        assert_eq!(res, small_buf.len() as isize);\n+        assert_eq!(small_buf, &expected_path[..small_buf.len()]);\n+\n+        // Test that we report a proper error for a missing path.\n+        let bad_path = CString::new(\"MIRI_MISSING_FILE_NAME\").unwrap();\n+        let res = unsafe { libc::readlink(bad_path.as_ptr(), small_buf.as_mut_ptr().cast(), small_buf.len()) };\n+        assert_eq!(res, -1);\n+        assert_eq!(Error::last_os_error().kind(), ErrorKind::NotFound);\n+    }\n+\n+\n     // Test that metadata of a symbolic link is correct.\n     check_metadata(bytes, &symlink_path).unwrap();\n     // Test that the metadata of a symbolic link is correct when not following it."}]}