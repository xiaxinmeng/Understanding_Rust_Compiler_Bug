{"sha": "b248767a0740b2031500ad62078f79d9eeb652aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDg3NjdhMDc0MGIyMDMxNTAwYWQ2MjA3OGY3OWQ5ZWViNjUyYWE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-17T17:41:21Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-19T15:03:22Z"}, "message": "Remove support for dep node structs", "tree": {"sha": "140c6af344a003524d562c7af92b89c907d3b002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140c6af344a003524d562c7af92b89c907d3b002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b248767a0740b2031500ad62078f79d9eeb652aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b248767a0740b2031500ad62078f79d9eeb652aa", "html_url": "https://github.com/rust-lang/rust/commit/b248767a0740b2031500ad62078f79d9eeb652aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b248767a0740b2031500ad62078f79d9eeb652aa/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8522256c5ad5d7ec3b0f10f0d23da84d72ce73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8522256c5ad5d7ec3b0f10f0d23da84d72ce73a", "html_url": "https://github.com/rust-lang/rust/commit/a8522256c5ad5d7ec3b0f10f0d23da84d72ce73a"}], "stats": {"total": 41, "additions": 0, "deletions": 41}, "files": [{"sha": "216749a4930126ac2ef2a387a49dd8f26b2d2b46", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b248767a0740b2031500ad62078f79d9eeb652aa/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b248767a0740b2031500ad62078f79d9eeb652aa/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b248767a0740b2031500ad62078f79d9eeb652aa", "patch": "@@ -111,7 +111,6 @@ macro_rules! define_dep_nodes {\n     $(\n         [$($attrs:tt)*]\n         $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n-                       $({ $($struct_arg_name:ident : $struct_arg_ty:ty),* })*\n       ,)*\n     ) => (\n         #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n@@ -136,13 +135,6 @@ macro_rules! define_dep_nodes {\n                                     ::CAN_RECONSTRUCT_QUERY_KEY;\n                             })*\n \n-                            // struct args\n-                            $({\n-\n-                                return <( $($struct_arg_ty,)* ) as DepNodeParams>\n-                                    ::CAN_RECONSTRUCT_QUERY_KEY;\n-                            })*\n-\n                             true\n                         }\n                     )*\n@@ -176,12 +168,6 @@ macro_rules! define_dep_nodes {\n                                 return true;\n                             })*\n \n-                            // struct args\n-                            $({\n-                                $(erase!($struct_arg_name);)*\n-                                return true;\n-                            })*\n-\n                             false\n                         }\n                     )*\n@@ -192,7 +178,6 @@ macro_rules! define_dep_nodes {\n         pub enum DepConstructor<$tcx> {\n             $(\n                 $variant $(( $tuple_arg_ty ))*\n-                         $({ $($struct_arg_name : $struct_arg_ty),* })*\n             ),*\n         }\n \n@@ -212,7 +197,6 @@ macro_rules! define_dep_nodes {\n                 match dep {\n                     $(\n                         DepConstructor :: $variant $(( replace!(($tuple_arg_ty) with arg) ))*\n-                                                   $({ $($struct_arg_name),* })*\n                             =>\n                         {\n                             // tuple args\n@@ -239,31 +223,6 @@ macro_rules! define_dep_nodes {\n                                 return dep_node;\n                             })*\n \n-                            // struct args\n-                            $({\n-                                let tupled_args = ( $($struct_arg_name,)* );\n-                                let hash = DepNodeParams::to_fingerprint(&tupled_args,\n-                                                                         tcx);\n-                                let dep_node = DepNode {\n-                                    kind: DepKind::$variant,\n-                                    hash\n-                                };\n-\n-                                #[cfg(debug_assertions)]\n-                                {\n-                                    if !dep_node.kind.can_reconstruct_query_key() &&\n-                                    (tcx.sess.opts.debugging_opts.incremental_info ||\n-                                        tcx.sess.opts.debugging_opts.query_dep_graph)\n-                                    {\n-                                        tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n-                                            tupled_args.to_debug_str(tcx)\n-                                        });\n-                                    }\n-                                }\n-\n-                                return dep_node;\n-                            })*\n-\n                             DepNode {\n                                 kind: DepKind::$variant,\n                                 hash: Fingerprint::ZERO,"}]}