{"sha": "4f8084a363b352e4a1d75f9ab53f6defcb65d366", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODA4NGEzNjNiMzUyZTRhMWQ3NWY5YWI1M2Y2ZGVmY2I2NWQzNjY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-12T21:57:27Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-12T21:57:27Z"}, "message": "Make Float::classify matching more clear for f64 and f32", "tree": {"sha": "939a02b8801d687348a8acfddd997878ddfa849e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939a02b8801d687348a8acfddd997878ddfa849e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8084a363b352e4a1d75f9ab53f6defcb65d366", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8084a363b352e4a1d75f9ab53f6defcb65d366", "html_url": "https://github.com/rust-lang/rust/commit/4f8084a363b352e4a1d75f9ab53f6defcb65d366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8084a363b352e4a1d75f9ab53f6defcb65d366/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36771ef60997b5882ad391839b5f7854d077cc42", "url": "https://api.github.com/repos/rust-lang/rust/commits/36771ef60997b5882ad391839b5f7854d077cc42", "html_url": "https://github.com/rust-lang/rust/commit/36771ef60997b5882ad391839b5f7854d077cc42"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "a872a6388ba468a0357bebe60653d49266c68b21", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f8084a363b352e4a1d75f9ab53f6defcb65d366/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8084a363b352e4a1d75f9ab53f6defcb65d366/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=4f8084a363b352e4a1d75f9ab53f6defcb65d366", "patch": "@@ -578,10 +578,7 @@ impl Float for f32 {\n     /// Returns `true` if the number is neither zero, infinite, subnormal or NaN\n     #[inline(always)]\n     fn is_normal(&self) -> bool {\n-        match self.classify() {\n-            FPNormal => true,\n-            _ => false,\n-        }\n+        self.classify() == FPNormal\n     }\n \n     /// Returns the floating point category of the number. If only one property is going to\n@@ -591,14 +588,14 @@ impl Float for f32 {\n         static MAN_MASK: u32 = 0x007fffff;\n \n         match (\n+            unsafe { ::cast::transmute::<f32,u32>(*self) } & MAN_MASK,\n             unsafe { ::cast::transmute::<f32,u32>(*self) } & EXP_MASK,\n-            unsafe { ::cast::transmute::<f32,u32>(*self) } & MAN_MASK\n         ) {\n-            (EXP_MASK, 0)        => FPInfinite,\n-            (EXP_MASK, _)        => FPNaN,\n-            (exp, _) if exp != 0 => FPNormal,\n-            _ if self.is_zero()  => FPZero,\n-            _                    => FPSubnormal,\n+            (0, 0)        => FPZero,\n+            (_, 0)        => FPSubnormal,\n+            (0, EXP_MASK) => FPInfinite,\n+            (_, EXP_MASK) => FPNaN,\n+            _             => FPNormal,\n         }\n     }\n "}, {"sha": "8a17ae91934bb62a0198c59616fbae5b293f3460", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f8084a363b352e4a1d75f9ab53f6defcb65d366/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8084a363b352e4a1d75f9ab53f6defcb65d366/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=4f8084a363b352e4a1d75f9ab53f6defcb65d366", "patch": "@@ -621,10 +621,7 @@ impl Float for f64 {\n     /// Returns `true` if the number is neither zero, infinite, subnormal or NaN\n     #[inline(always)]\n     fn is_normal(&self) -> bool {\n-        match self.classify() {\n-            FPNormal => true,\n-            _ => false,\n-        }\n+        self.classify() == FPNormal\n     }\n \n     /// Returns the floating point category of the number. If only one property is going to\n@@ -634,14 +631,14 @@ impl Float for f64 {\n         static MAN_MASK: u64 = 0x000fffffffffffff;\n \n         match (\n+            unsafe { ::cast::transmute::<f64,u64>(*self) } & MAN_MASK,\n             unsafe { ::cast::transmute::<f64,u64>(*self) } & EXP_MASK,\n-            unsafe { ::cast::transmute::<f64,u64>(*self) } & MAN_MASK\n         ) {\n-            (EXP_MASK, 0)        => FPInfinite,\n-            (EXP_MASK, _)        => FPNaN,\n-            (exp, _) if exp != 0 => FPNormal,\n-            _ if self.is_zero()  => FPZero,\n-            _                    => FPSubnormal,\n+            (0, 0)        => FPZero,\n+            (_, 0)        => FPSubnormal,\n+            (0, EXP_MASK) => FPInfinite,\n+            (_, EXP_MASK) => FPNaN,\n+            _             => FPNormal,\n         }\n     }\n "}]}