{"sha": "0ec87d0c928d04b57a3a073195f4095e64b8e867", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzg3ZDBjOTI4ZDA0YjU3YTNhMDczMTk1ZjQwOTVlNjRiOGU4Njc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-17T13:21:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-17T13:21:20Z"}, "message": "rearrange for clarity", "tree": {"sha": "4f93d7737416584eba9eaf418e6c9f4f7c541d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f93d7737416584eba9eaf418e6c9f4f7c541d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec87d0c928d04b57a3a073195f4095e64b8e867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec87d0c928d04b57a3a073195f4095e64b8e867", "html_url": "https://github.com/rust-lang/rust/commit/0ec87d0c928d04b57a3a073195f4095e64b8e867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec87d0c928d04b57a3a073195f4095e64b8e867/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2713d3667927e2633098d16c5bb764c789bc7775", "url": "https://api.github.com/repos/rust-lang/rust/commits/2713d3667927e2633098d16c5bb764c789bc7775", "html_url": "https://github.com/rust-lang/rust/commit/2713d3667927e2633098d16c5bb764c789bc7775"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "5910ba2fd0105f2d8bf417be1004cf955bfb34be", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0ec87d0c928d04b57a3a073195f4095e64b8e867/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec87d0c928d04b57a3a073195f4095e64b8e867/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0ec87d0c928d04b57a3a073195f4095e64b8e867", "patch": "@@ -472,47 +472,6 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n ///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n-/// ## Ownership of the Returned Value\n-///\n-/// `read` creates a bitwise copy of `T`, regardless of whether `T` is [`Copy`].\n-/// If `T` is not [`Copy`], using both the returned value and the value at\n-/// `*src` can violate memory safety.  Note that assigning to `src` counts as a\n-/// use because it will attempt to drop the value at `*src`.\n-///\n-/// [`write`] can be used to overwrite data without causing it to be dropped.\n-///\n-/// [valid]: ../ptr/index.html#safety\n-/// [`Copy`]: ../marker/trait.Copy.html\n-/// [`read_unaligned`]: ./fn.read_unaligned.html\n-/// [`write`]: ./fn.write.html\n-///\n-/// ```\n-/// use std::ptr;\n-///\n-/// let mut s = String::from(\"foo\");\n-/// unsafe {\n-///     // `s2` now points to the same underlying memory as `s`.\n-///     let mut s2: String = ptr::read(&s);\n-///\n-///     assert_eq!(s2, \"foo\");\n-///\n-///     // Assigning to `s2` causes its original value to be dropped. Beyond\n-///     // this point, `s` must no longer be used, as the underlying memory has\n-///     // been freed.\n-///     s2 = String::default();\n-///     assert_eq!(s2, \"\");\n-///\n-///     // Assigning to `s` would cause the old value to be dropped again,\n-///     // resulting in undefined behavior.\n-///     // s = String::from(\"bar\"); // ERROR\n-///\n-///     // `ptr::write` can be used to overwrite a value without dropping it.\n-///     ptr::write(&mut s, String::from(\"bar\"));\n-/// }\n-///\n-/// assert_eq!(s, \"bar\");\n-/// ```\n-///\n /// # Examples\n ///\n /// Basic usage:\n@@ -565,7 +524,47 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// assert_eq!(bar, \"foo\");\n /// ```\n ///\n+/// ## Ownership of the Returned Value\n+///\n+/// `read` creates a bitwise copy of `T`, regardless of whether `T` is [`Copy`].\n+/// If `T` is not [`Copy`], using both the returned value and the value at\n+/// `*src` can violate memory safety.  Note that assigning to `*src` counts as a\n+/// use because it will attempt to drop the value at `*src`.\n+///\n+/// [`write`] can be used to overwrite data without causing it to be dropped.\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let mut s = String::from(\"foo\");\n+/// unsafe {\n+///     // `s2` now points to the same underlying memory as `s`.\n+///     let mut s2: String = ptr::read(&s);\n+///\n+///     assert_eq!(s2, \"foo\");\n+///\n+///     // Assigning to `s2` causes its original value to be dropped. Beyond\n+///     // this point, `s` must no longer be used, as the underlying memory has\n+///     // been freed.\n+///     s2 = String::default();\n+///     assert_eq!(s2, \"\");\n+///\n+///     // Assigning to `s` would cause the old value to be dropped again,\n+///     // resulting in undefined behavior.\n+///     // s = String::from(\"bar\"); // ERROR\n+///\n+///     // `ptr::write` can be used to overwrite a value without dropping it.\n+///     ptr::write(&mut s, String::from(\"bar\"));\n+/// }\n+///\n+/// assert_eq!(s, \"bar\");\n+/// ```\n+///\n /// [`mem::swap`]: ../mem/fn.swap.html\n+/// [valid]: ../ptr/index.html#safety\n+/// [`Copy`]: ../marker/trait.Copy.html\n+/// [`read_unaligned`]: ./fn.read_unaligned.html\n+/// [`write`]: ./fn.write.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {"}]}