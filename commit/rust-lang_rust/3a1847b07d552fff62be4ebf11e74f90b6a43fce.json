{"sha": "3a1847b07d552fff62be4ebf11e74f90b6a43fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTg0N2IwN2Q1NTJmZmY2MmJlNGViZjExZTc0ZjkwYjZhNDNmY2U=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-11-28T21:05:36Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-10-27T13:47:22Z"}, "message": "implement outlive suggestions", "tree": {"sha": "f78a7df11927b72879242fbab8b4aeb7917a7c54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f78a7df11927b72879242fbab8b4aeb7917a7c54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1847b07d552fff62be4ebf11e74f90b6a43fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1847b07d552fff62be4ebf11e74f90b6a43fce", "html_url": "https://github.com/rust-lang/rust/commit/3a1847b07d552fff62be4ebf11e74f90b6a43fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1847b07d552fff62be4ebf11e74f90b6a43fce/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7176b44a203322c834302f3b515f8c10a54f2c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7176b44a203322c834302f3b515f8c10a54f2c1", "html_url": "https://github.com/rust-lang/rust/commit/b7176b44a203322c834302f3b515f8c10a54f2c1"}], "stats": {"total": 813, "additions": 807, "deletions": 6}, "files": [{"sha": "3c4539b597ba9384ad4529ca755bbf7a84cf8ede", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -6,7 +6,7 @@ use crate::Applicability;\n use crate::Level;\n use crate::snippet::Style;\n use std::fmt;\n-use syntax_pos::{MultiSpan, Span};\n+use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n \n #[must_use]\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n@@ -17,6 +17,11 @@ pub struct Diagnostic {\n     pub span: MultiSpan,\n     pub children: Vec<SubDiagnostic>,\n     pub suggestions: Vec<CodeSuggestion>,\n+\n+    /// This is not used for highlighting or rendering any error message.  Rather, it can be used\n+    /// as a sort key to sort a buffer of diagnostics.  By default, it is the primary span of\n+    /// `span` if there is one.  Otherwise, it is `DUMMY_SP`.\n+    pub sort_span: Span,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -87,6 +92,7 @@ impl Diagnostic {\n             span: MultiSpan::new(),\n             children: vec![],\n             suggestions: vec![],\n+            sort_span: DUMMY_SP,\n         }\n     }\n \n@@ -118,6 +124,11 @@ impl Diagnostic {\n         self.level == Level::Cancelled\n     }\n \n+    /// Set the sorting span.\n+    pub fn set_sort_span(&mut self, sp: Span) {\n+        self.sort_span = sp;\n+    }\n+\n     /// Adds a span/label to be included in the resulting snippet.\n     /// This label will be shown together with the original span/label used when creating the\n     /// diagnostic, *not* a span added by one of the `span_*` methods.\n@@ -457,6 +468,9 @@ impl Diagnostic {\n \n     pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self {\n         self.span = sp.into();\n+        if let Some(span) = self.span.primary_span() {\n+            self.sort_span = span;\n+        }\n         self\n     }\n "}, {"sha": "4bfd0844f8436038f0e75fdb3844ae6e2af01863", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -367,7 +367,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     }\n \n     if !mbcx.errors_buffer.is_empty() {\n-        mbcx.errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n+        mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);\n \n         for diag in mbcx.errors_buffer.drain(..) {\n             mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);"}, {"sha": "26b288cb4b24ee2d0d4f9c73d7ef19781e1deb1d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -18,6 +18,10 @@ use syntax::errors::Applicability;\n use syntax::symbol::kw;\n use syntax_pos::Span;\n \n+use self::outlives_suggestion::OutlivesSuggestionBuilder;\n+\n+pub mod outlives_suggestion;\n+\n mod region_name;\n mod var_name;\n \n@@ -56,7 +60,6 @@ enum Trace {\n /// Various pieces of state used when reporting borrow checker errors.\n pub struct ErrorReportingCtx<'a, 'b, 'tcx> {\n     /// The region inference context used for borrow chekcing this MIR body.\n-    #[allow(dead_code)] // FIXME(mark-i-m): used by outlives suggestions\n     region_infcx: &'b RegionInferenceContext<'tcx>,\n \n     /// The inference context used for type checking.\n@@ -370,6 +373,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr: RegionVid,\n         fr_origin: NLLRegionVariableOrigin,\n         outlived_fr: RegionVid,\n+        outlives_suggestion: &mut OutlivesSuggestionBuilder,\n         renctx: &mut RegionErrorNamingCtx,\n     ) -> DiagnosticBuilder<'a> {\n         debug!(\"report_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n@@ -415,9 +419,22 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 self.report_fnmut_error(&errctx, &errci, renctx)\n             }\n             (ConstraintCategory::Assignment, true, false)\n-            | (ConstraintCategory::CallArgument, true, false) =>\n-                self.report_escaping_data_error(&errctx, &errci, renctx),\n-            _ => self.report_general_error(&errctx, &errci, renctx),\n+            | (ConstraintCategory::CallArgument, true, false) => {\n+                let mut db = self.report_escaping_data_error(&errctx, &errci, renctx);\n+\n+                outlives_suggestion.intermediate_suggestion(&errctx, &errci, renctx, &mut db);\n+                outlives_suggestion.collect_constraint(fr, outlived_fr);\n+\n+                db\n+            }\n+            _ => {\n+                let mut db = self.report_general_error(&errctx, &errci, renctx);\n+\n+                outlives_suggestion.intermediate_suggestion(&errctx, &errci, renctx, &mut db);\n+                outlives_suggestion.collect_constraint(fr, outlived_fr);\n+\n+                db\n+            }\n         }\n     }\n "}, {"sha": "a55a3a406044bbf4728fd56343f1bc2ca811b489", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/outlives_suggestion.rs", "status": "added", "additions": 315, "deletions": 0, "changes": 315, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Foutlives_suggestion.rs?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -0,0 +1,315 @@\n+//! Contains utilities for generating suggestions for borrowck errors related to unsatisified\n+//! outlives constraints.\n+\n+use std::collections::BTreeMap;\n+\n+use log::debug;\n+use rustc::{hir::def_id::DefId, infer::InferCtxt, mir::Body, ty::RegionVid};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, Level};\n+\n+use smallvec::SmallVec;\n+\n+use crate::borrow_check::nll::region_infer::{\n+    error_reporting::{\n+        region_name::{RegionName, RegionNameSource},\n+        ErrorConstraintInfo, ErrorReportingCtx, RegionErrorNamingCtx,\n+    },\n+    RegionInferenceContext,\n+};\n+\n+/// The different things we could suggest.\n+enum SuggestedConstraint {\n+    /// Outlives(a, [b, c, d, ...]) => 'a: 'b + 'c + 'd + ...\n+    Outlives(RegionName, SmallVec<[RegionName; 2]>),\n+\n+    /// 'a = 'b\n+    Equal(RegionName, RegionName),\n+\n+    /// 'a: 'static i.e. 'a = 'static and the user should just use 'static\n+    Static(RegionName),\n+}\n+\n+/// Collects information about outlives constraints that needed to be added for a given MIR node\n+/// corresponding to a function definition.\n+///\n+/// Adds a help note suggesting adding a where clause with the needed constraints.\n+pub struct OutlivesSuggestionBuilder {\n+    /// The MIR DefId of the fn with the lifetime error.\n+    mir_def_id: DefId,\n+\n+    /// The list of outlives constraints that need to be added. Specifically, we map each free\n+    /// region to all other regions that it must outlive. I will use the shorthand `fr:\n+    /// outlived_frs`. Not all of these regions will already have names necessarily. Some could be\n+    /// implicit free regions that we inferred. These will need to be given names in the final\n+    /// suggestion message.\n+    constraints_to_add: BTreeMap<RegionVid, Vec<RegionVid>>,\n+}\n+\n+impl OutlivesSuggestionBuilder {\n+    /// Create a new builder for the given MIR node representing a fn definition.\n+    crate fn new(mir_def_id: DefId) -> Self {\n+        OutlivesSuggestionBuilder { mir_def_id, constraints_to_add: BTreeMap::default() }\n+    }\n+\n+    /// Returns `true` iff the `RegionNameSource` is a valid source for an outlives\n+    /// suggestion.\n+    //\n+    // FIXME: Currently, we only report suggestions if the `RegionNameSource` is an early-bound\n+    // region or a named region, avoiding using regions with synthetic names altogether. This\n+    // allows us to avoid giving impossible suggestions (e.g. adding bounds to closure args).\n+    // We can probably be less conservative, since some inferred free regions are namable (e.g.\n+    // the user can explicitly name them. To do this, we would allow some regions whose names\n+    // come from `MatchedAdtAndSegment`, being careful to filter out bad suggestions, such as\n+    // naming the `'self` lifetime in methods, etc.\n+    fn region_name_is_suggestable(name: &RegionName) -> bool {\n+        match name.source {\n+            RegionNameSource::NamedEarlyBoundRegion(..)\n+            | RegionNameSource::NamedFreeRegion(..)\n+            | RegionNameSource::Static => {\n+                debug!(\"Region {:?} is suggestable\", name);\n+                true\n+            }\n+\n+            // Don't give suggestions for upvars, closure return types, or other unnamable\n+            // regions.\n+            RegionNameSource::SynthesizedFreeEnvRegion(..)\n+            | RegionNameSource::CannotMatchHirTy(..)\n+            | RegionNameSource::MatchedHirTy(..)\n+            | RegionNameSource::MatchedAdtAndSegment(..)\n+            | RegionNameSource::AnonRegionFromUpvar(..)\n+            | RegionNameSource::AnonRegionFromOutput(..)\n+            | RegionNameSource::AnonRegionFromYieldTy(..) => {\n+                debug!(\"Region {:?} is NOT suggestable\", name);\n+                false\n+            }\n+        }\n+    }\n+\n+    /// Returns a name for the region if it is suggestable. See `region_name_is_suggestable`.\n+    fn region_vid_to_name(\n+        &self,\n+        errctx: &ErrorReportingCtx<'_, '_, '_>,\n+        renctx: &mut RegionErrorNamingCtx,\n+        region: RegionVid,\n+    ) -> Option<RegionName> {\n+        errctx\n+            .region_infcx\n+            .give_region_a_name(errctx, renctx, region)\n+            .filter(Self::region_name_is_suggestable)\n+    }\n+\n+    /// Compiles a list of all suggestions to be printed in the final big suggestion.\n+    fn compile_all_suggestions<'tcx>(\n+        &self,\n+        body: &Body<'tcx>,\n+        region_infcx: &RegionInferenceContext<'tcx>,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        renctx: &mut RegionErrorNamingCtx,\n+    ) -> SmallVec<[SuggestedConstraint; 2]> {\n+        let mut suggested = SmallVec::new();\n+\n+        // Keep track of variables that we have already suggested unifying so that we don't print\n+        // out silly duplicate messages.\n+        let mut unified_already = FxHashSet::default();\n+\n+        let errctx = ErrorReportingCtx {\n+            region_infcx,\n+            infcx,\n+            body,\n+            mir_def_id: self.mir_def_id,\n+\n+            // We should not be suggesting naming upvars, so we pass in a dummy set of upvars that\n+            // should never be used.\n+            upvars: &[],\n+        };\n+\n+        for (fr, outlived) in &self.constraints_to_add {\n+            let fr_name = if let Some(fr_name) = self.region_vid_to_name(&errctx, renctx, *fr) {\n+                fr_name\n+            } else {\n+                continue;\n+            };\n+\n+            let outlived = outlived\n+                .iter()\n+                // if there is a `None`, we will just omit that constraint\n+                .filter_map(|fr| {\n+                    self.region_vid_to_name(&errctx, renctx, *fr).map(|rname| (fr, rname))\n+                })\n+                .collect::<Vec<_>>();\n+\n+            // No suggestable outlived lifetimes.\n+            if outlived.is_empty() {\n+                continue;\n+            }\n+\n+            // There are three types of suggestions we can make:\n+            // 1) Suggest a bound: 'a: 'b\n+            // 2) Suggest replacing 'a with 'static. If any of `outlived` is `'static`, then we\n+            //    should just replace 'a with 'static.\n+            // 3) Suggest unifying 'a with 'b if we have both 'a: 'b and 'b: 'a\n+\n+            if outlived.iter().any(|(_, outlived_name)| {\n+                if let RegionNameSource::Static = outlived_name.source {\n+                    true\n+                } else {\n+                    false\n+                }\n+            }) {\n+                suggested.push(SuggestedConstraint::Static(fr_name));\n+            } else {\n+                // We want to isolate out all lifetimes that should be unified and print out\n+                // separate messages for them.\n+\n+                let (unified, other): (Vec<_>, Vec<_>) = outlived.into_iter().partition(\n+                    // Do we have both 'fr: 'r and 'r: 'fr?\n+                    |(r, _)| {\n+                        self.constraints_to_add\n+                            .get(r)\n+                            .map(|r_outlived| r_outlived.as_slice().contains(fr))\n+                            .unwrap_or(false)\n+                    },\n+                );\n+\n+                for (r, bound) in unified.into_iter() {\n+                    if !unified_already.contains(fr) {\n+                        suggested.push(SuggestedConstraint::Equal(fr_name.clone(), bound));\n+                        unified_already.insert(r);\n+                    }\n+                }\n+\n+                if !other.is_empty() {\n+                    let other =\n+                        other.iter().map(|(_, rname)| rname.clone()).collect::<SmallVec<_>>();\n+                    suggested.push(SuggestedConstraint::Outlives(fr_name, other))\n+                }\n+            }\n+        }\n+\n+        suggested\n+    }\n+\n+    /// Add the outlives constraint `fr: outlived_fr` to the set of constraints we need to suggest.\n+    crate fn collect_constraint(&mut self, fr: RegionVid, outlived_fr: RegionVid) {\n+        debug!(\"Collected {:?}: {:?}\", fr, outlived_fr);\n+\n+        // Add to set of constraints for final help note.\n+        self.constraints_to_add.entry(fr).or_insert(Vec::new()).push(outlived_fr);\n+    }\n+\n+    /// Emit an intermediate note on the given `Diagnostic` if the involved regions are\n+    /// suggestable.\n+    crate fn intermediate_suggestion(\n+        &mut self,\n+        errctx: &ErrorReportingCtx<'_, '_, '_>,\n+        errci: &ErrorConstraintInfo,\n+        renctx: &mut RegionErrorNamingCtx,\n+        diag: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        // Emit an intermediate note.\n+        let fr_name = self.region_vid_to_name(errctx, renctx, errci.fr);\n+        let outlived_fr_name = self.region_vid_to_name(errctx, renctx, errci.outlived_fr);\n+\n+        if let (Some(fr_name), Some(outlived_fr_name)) = (fr_name, outlived_fr_name) {\n+            if let RegionNameSource::Static = outlived_fr_name.source {\n+                diag.help(&format!(\"consider replacing `{}` with `'static`\", fr_name));\n+            } else {\n+                diag.help(&format!(\n+                    \"consider adding the following bound: `{}: {}`\",\n+                    fr_name, outlived_fr_name\n+                ));\n+            }\n+        }\n+    }\n+\n+    /// If there is a suggestion to emit, add a diagnostic to the buffer. This is the final\n+    /// suggestion including all collected constraints.\n+    crate fn add_suggestion<'tcx>(\n+        &self,\n+        body: &Body<'tcx>,\n+        region_infcx: &RegionInferenceContext<'tcx>,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        errors_buffer: &mut Vec<Diagnostic>,\n+        renctx: &mut RegionErrorNamingCtx,\n+    ) {\n+        // No constraints to add? Done.\n+        if self.constraints_to_add.is_empty() {\n+            debug!(\"No constraints to suggest.\");\n+            return;\n+        }\n+\n+        // If there is only one constraint to suggest, then we already suggested it in the\n+        // intermediate suggestion above.\n+        if self.constraints_to_add.len() == 1 {\n+            debug!(\"Only 1 suggestion. Skipping.\");\n+            return;\n+        }\n+\n+        // Get all suggestable constraints.\n+        let suggested = self.compile_all_suggestions(body, region_infcx, infcx, renctx);\n+\n+        // If there are no suggestable constraints...\n+        if suggested.is_empty() {\n+            debug!(\"Only 1 suggestable constraint. Skipping.\");\n+            return;\n+        }\n+\n+        // If there is exactly one suggestable constraints, then just suggest it. Otherwise, emit a\n+        // list of diagnostics.\n+        let mut diag = if suggested.len() == 1 {\n+            DiagnosticBuilder::new(\n+                infcx.tcx.sess.diagnostic(),\n+                Level::Help,\n+                &match suggested.last().unwrap() {\n+                    SuggestedConstraint::Outlives(a, bs) => {\n+                        let bs: SmallVec<[String; 2]> =\n+                            bs.iter().map(|r| format!(\"{}\", r)).collect();\n+                        format!(\"add bound `{}: {}`\", a, bs.join(\" + \"))\n+                    }\n+\n+                    SuggestedConstraint::Equal(a, b) => {\n+                        format!(\"`{}` and `{}` must be the same: replace one with the other\", a, b)\n+                    }\n+                    SuggestedConstraint::Static(a) => format!(\"replace `{}` with `'static`\", a),\n+                },\n+            )\n+        } else {\n+            // Create a new diagnostic.\n+            let mut diag = DiagnosticBuilder::new(\n+                infcx.tcx.sess.diagnostic(),\n+                Level::Help,\n+                \"the following changes may resolve your lifetime errors\",\n+            );\n+\n+            // Add suggestions.\n+            for constraint in suggested {\n+                match constraint {\n+                    SuggestedConstraint::Outlives(a, bs) => {\n+                        let bs: SmallVec<[String; 2]> =\n+                            bs.iter().map(|r| format!(\"{}\", r)).collect();\n+                        diag.help(&format!(\"add bound `{}: {}`\", a, bs.join(\" + \")));\n+                    }\n+                    SuggestedConstraint::Equal(a, b) => {\n+                        diag.help(&format!(\n+                            \"`{}` and `{}` must be the same: replace one with the other\",\n+                            a, b\n+                        ));\n+                    }\n+                    SuggestedConstraint::Static(a) => {\n+                        diag.help(&format!(\"replace `{}` with `'static`\", a));\n+                    }\n+                }\n+            }\n+\n+            diag\n+        };\n+\n+        // We want this message to appear after other messages on the mir def.\n+        let mir_span = infcx.tcx.def_span(self.mir_def_id);\n+        diag.sort_span = mir_span.shrink_to_hi();\n+\n+        // Buffer the diagnostic\n+        diag.buffer(errors_buffer);\n+    }\n+}"}, {"sha": "4de8200e6a0c7070bb7a00235bdb1dc289267a82", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -11,6 +11,7 @@ use crate::borrow_check::nll::{\n     region_infer::values::{\n         PlaceholderIndices, RegionElement, ToElementIndex\n     },\n+    region_infer::error_reporting::outlives_suggestion::OutlivesSuggestionBuilder,\n     type_check::{free_region_relations::UniversalRegionRelations, Locations},\n };\n use crate::borrow_check::Upvar;\n@@ -1326,6 +1327,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         errors_buffer: &mut Vec<Diagnostic>,\n         region_naming: &mut RegionErrorNamingCtx,\n     ) {\n+        let mut outlives_suggestion = OutlivesSuggestionBuilder::new(mir_def_id);\n+\n         for (fr, fr_definition) in self.definitions.iter_enumerated() {\n             match fr_definition.origin {\n                 NLLRegionVariableOrigin::FreeRegion => {\n@@ -1339,6 +1342,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         mir_def_id,\n                         fr,\n                         &mut propagated_outlives_requirements,\n+                        &mut outlives_suggestion,\n                         errors_buffer,\n                         region_naming,\n                     );\n@@ -1353,6 +1357,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 }\n             }\n         }\n+\n+        // Emit outlives suggestions\n+        outlives_suggestion.add_suggestion(body, self, infcx, errors_buffer, region_naming);\n     }\n \n     /// Checks the final value for the free region `fr` to see if it\n@@ -1371,6 +1378,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         longer_fr: RegionVid,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n+        outlives_suggestion: &mut OutlivesSuggestionBuilder,\n         errors_buffer: &mut Vec<Diagnostic>,\n         region_naming: &mut RegionErrorNamingCtx,\n     ) {\n@@ -1399,6 +1407,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 upvars,\n                 mir_def_id,\n                 propagated_outlives_requirements,\n+                outlives_suggestion,\n                 errors_buffer,\n                 region_naming,\n             );\n@@ -1416,6 +1425,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 upvars,\n                 mir_def_id,\n                 propagated_outlives_requirements,\n+                outlives_suggestion,\n                 errors_buffer,\n                 region_naming,\n             ) {\n@@ -1438,6 +1448,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         upvars: &[Upvar],\n         mir_def_id: DefId,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n+        outlives_suggestion: &mut OutlivesSuggestionBuilder,\n         errors_buffer: &mut Vec<Diagnostic>,\n         region_naming: &mut RegionErrorNamingCtx,\n     ) -> Option<ErrorReported> {\n@@ -1497,6 +1508,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             longer_fr,\n             NLLRegionVariableOrigin::FreeRegion,\n             shorter_fr,\n+            outlives_suggestion,\n             region_naming,\n         );\n "}, {"sha": "61f20d1dc9ad06819f881041c350be3cb4bfd2a0", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -43,5 +43,9 @@ LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: aborting due to previous error\n "}, {"sha": "e34884e9f9a36a5b5345d4541a777a968da477e9", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -46,5 +46,9 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to previous error\n "}, {"sha": "40917135c59d3b08e719a0d81f3f0a15928965ab", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -46,5 +46,9 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to previous error\n "}, {"sha": "f227e9eb413e5d73202ffaa4e861f5bd1c78ed5e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -43,5 +43,9 @@ LL | fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL |         demand_y(outlives1, outlives2, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: aborting due to previous error\n "}, {"sha": "5e8d9fa7882f1e2cd16a81812216bf29d607f62d", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -6,5 +6,9 @@ LL | fn foo<'a>(x: &'a u32) -> &'static u32 {\n LL |     &*x\n    |     ^^^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to previous error\n "}, {"sha": "d3edbfdae88fd855563e821b5362fc4c7abe572d", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-not-outlive-ebr2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -8,5 +8,9 @@ LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {\n LL |     &*x\n    |     ^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: aborting due to previous error\n "}, {"sha": "109c7e9565911c01308e21db6e684af34580c896", "filename": "src/test/ui/nll/issue-52113.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -9,5 +9,9 @@ LL | fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> i\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: aborting due to previous error\n "}, {"sha": "906a7bff00d4e0e10dcbd8ed1d8870ff0a6f20fd", "filename": "src/test/ui/nll/issue-58299.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -7,6 +7,10 @@ LL | fn foo<'a>(x: i32) {\n LL |         A::<'a>::X..=A::<'static>::X => (),\n    |         ^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/issue-58299.rs:24:27\n    |\n@@ -16,5 +20,9 @@ LL | fn bar<'a>(x: i32) {\n LL |         A::<'static>::X..=A::<'a>::X => (),\n    |                           ^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to 2 previous errors\n "}, {"sha": "40ce9e850ea435b5380000a46d570d06469c612e", "filename": "src/test/ui/nll/mir_check_cast_closure.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -9,5 +9,9 @@ LL |     let g: fn(_, _) -> _ = |_x, y| y;\n LL |     g\n    |     ^ returning this value requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n error: aborting due to previous error\n "}, {"sha": "f091161b2240716d944955aaf093685d5b4c9806", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -7,5 +7,9 @@ LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n LL |     f(x)\n    |     ^^^^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to previous error\n "}, {"sha": "2f76758f259a5aa88edd1d94519b4211859f48d9", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -7,5 +7,9 @@ LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n LL |     unsafe { g(input) }\n    |              ^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to previous error\n "}, {"sha": "4a76fa8158e5a3f5865d8d18ddbf37b44b3ec822", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -6,5 +6,9 @@ LL | fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to previous error\n "}, {"sha": "91a7a1d71e80cb066d3cddc21f548b75a2dce911", "filename": "src/test/ui/nll/outlives-suggestion-simple.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.rs?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -0,0 +1,77 @@\n+// Test the simplest of outlives suggestions.\n+\n+#![feature(nll)]\n+\n+fn foo1<'a, 'b>(x: &'a usize) -> &'b usize {\n+    x //~ERROR lifetime may not live long enough\n+}\n+\n+fn foo2<'a>(x: &'a usize) -> &'static usize {\n+    x //~ERROR lifetime may not live long enough\n+}\n+\n+fn foo3<'a, 'b>(x: &'a usize, y: &'b usize) -> (&'b usize, &'a usize) {\n+    (x, y) //~ERROR lifetime may not live long enough\n+           //~^ERROR lifetime may not live long enough\n+}\n+\n+fn foo4<'a, 'b, 'c>(x: &'a usize) -> (&'b usize, &'c usize) {\n+    // FIXME: ideally, we suggest 'a: 'b + 'c, but as of today (may 04, 2019), the null error\n+    // reporting stops after the first error in a MIR def so as not to produce too many errors, so\n+    // currently we only report 'a: 'b. The user would then re-run and get another error.\n+    (x, x) //~ERROR lifetime may not live long enough\n+}\n+\n+struct Foo<'a> {\n+    x: &'a usize,\n+}\n+\n+impl Foo<'static> {\n+    pub fn foo<'a>(x: &'a usize) -> Self {\n+        Foo { x } //~ERROR lifetime may not live long enough\n+    }\n+}\n+\n+struct Bar<'a> {\n+    x: &'a usize,\n+}\n+\n+impl<'a> Bar<'a> {\n+    pub fn get<'b>(&self) -> &'b usize {\n+        self.x //~ERROR lifetime may not live long enough\n+    }\n+}\n+\n+// source: https://stackoverflow.com/questions/41417057/why-do-i-get-a-lifetime-error-when-i-use-a-mutable-reference-in-a-struct-instead\n+struct Baz<'a> {\n+    x: &'a mut i32,\n+}\n+\n+impl<'a> Baz<'a> {\n+    fn get<'b>(&'b self) -> &'a i32 {\n+        self.x //~ERROR lifetime may not live long enough\n+    }\n+}\n+\n+// source: https://stackoverflow.com/questions/41204134/rust-lifetime-error\n+struct Bar2<'a> {\n+    bar: &'a str,\n+}\n+impl<'a> Bar2<'a> {\n+    fn new(foo: &'a Foo2<'a>) -> Bar2<'a> {\n+        Bar2 { bar: foo.raw }\n+    }\n+}\n+\n+pub struct Foo2<'a> {\n+    raw: &'a str,\n+    cell: std::cell::Cell<&'a str>,\n+}\n+impl<'a> Foo2<'a> {\n+    // should not produce outlives suggestions to name 'self\n+    fn get_bar(&self) -> Bar2 {\n+        Bar2::new(&self) //~ERROR borrowed data escapes outside of function\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "90c6bf2f5b8d93b5f3ec507a68aef87c35033888", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -0,0 +1,118 @@\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:6:5\n+   |\n+LL | fn foo1<'a, 'b>(x: &'a usize) -> &'b usize {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     x\n+   |     ^ returning this value requires that `'a` must outlive `'b`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:10:5\n+   |\n+LL | fn foo2<'a>(x: &'a usize) -> &'static usize {\n+   |         -- lifetime `'a` defined here\n+LL |     x\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:14:5\n+   |\n+LL | fn foo3<'a, 'b>(x: &'a usize, y: &'b usize) -> (&'b usize, &'a usize) {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     (x, y)\n+   |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:14:5\n+   |\n+LL | fn foo3<'a, 'b>(x: &'a usize, y: &'b usize) -> (&'b usize, &'a usize) {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     (x, y)\n+   |     ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: `'a` and `'b` must be the same; replace one with the other\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:22:5\n+   |\n+LL | fn foo4<'a, 'b, 'c>(x: &'a usize) -> (&'b usize, &'c usize) {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+...\n+LL |     (x, x)\n+   |     ^^^^^^ returning this value requires that `'a` must outlive `'b`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:31:9\n+   |\n+LL |     pub fn foo<'a>(x: &'a usize) -> Self {\n+   |                -- lifetime `'a` defined here\n+LL |         Foo { x }\n+   |         ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:41:9\n+   |\n+LL | impl<'a> Bar<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     pub fn get<'b>(&self) -> &'b usize {\n+   |                -- lifetime `'b` defined here\n+LL |         self.x\n+   |         ^^^^^^ returning this value requires that `'a` must outlive `'b`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/outlives-suggestion-simple.rs:52:9\n+   |\n+LL | impl<'a> Baz<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     fn get<'b>(&'b self) -> &'a i32 {\n+   |            -- lifetime `'b` defined here\n+LL |         self.x\n+   |         ^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/outlives-suggestion-simple.rs:73:9\n+   |\n+LL |     fn get_bar(&self) -> Bar2 {\n+   |                -----\n+   |                |\n+   |                `self` is declared here, outside of the function body\n+   |                `self` is a reference that is only valid in the function body\n+LL |         Bar2::new(&self)\n+   |         ^^^^^^^^^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "be45c23ed831882dccf5ad6d5545f4a5bee6d25d", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -51,6 +51,10 @@ LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n@@ -105,6 +109,10 @@ LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:70:29\n    |"}, {"sha": "39f9e78f88964a695f56db5581d835a64f7790d1", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -42,6 +42,10 @@ LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n    |\n@@ -87,6 +91,10 @@ LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:60:29\n    |"}, {"sha": "15e921bdec16c6fa4d9afdfff108e2614b5e93ac", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -237,6 +237,10 @@ LL | fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n    |"}, {"sha": "e4fa647e6cb1a44d1f49d0cba8b134e27390beff", "filename": "src/test/ui/nll/ty-outlives/wf-unreachable.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -7,6 +7,10 @@ LL |     return;\n LL |     let x: &'static &'a ();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:13:12\n    |\n@@ -16,6 +20,10 @@ LL |     return;\n LL |     let x: &'static &'a () = &&();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:17:12\n    |\n@@ -24,6 +32,10 @@ LL | fn uninit_infer<'a>() {\n LL |     let x: &'static &'a _;\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:23:12\n    |\n@@ -33,6 +45,10 @@ LL |     return;\n LL |     let x: &'static &'a _ = &&();\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:28:12\n    |\n@@ -42,6 +58,10 @@ LL |     return;\n LL |     let _: &'static &'a ();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:33:12\n    |\n@@ -51,6 +71,10 @@ LL |     return;\n LL |     let _: &'static &'a () = &&();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:38:12\n    |\n@@ -60,6 +84,10 @@ LL |     return;\n LL |     let _: &'static &'a _ = &&();\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:51:12\n    |\n@@ -69,5 +97,9 @@ LL |     return;\n LL |     let _: C<'static, 'a, _> = C((), &(), &());\n    |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to 8 previous errors\n "}, {"sha": "9c7601c3a602611cb91c05401e4e51277d94f385", "filename": "src/test/ui/nll/type-check-pointer-coercions.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -8,6 +8,10 @@ LL | fn shared_to_const<'a, 'b>(x: &&'a i32) -> *const &'b i32 {\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:8:5\n    |\n@@ -18,6 +22,10 @@ LL | fn unique_to_const<'a, 'b>(x: &mut &'a i32) -> *const &'b i32 {\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:13:5\n    |\n@@ -40,6 +48,10 @@ LL |     // Two errors because *mut is invariant\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: `'b` and `'a` must be the same; replace one with the other\n+\n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:18:5\n    |\n@@ -50,6 +62,10 @@ LL | fn mut_to_const<'a, 'b>(x: *mut &'a i32) -> *const &'b i32 {\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:24:5\n    |\n@@ -61,6 +77,10 @@ LL | fn array_elem<'a, 'b>(x: &'a i32) -> *const &'b i32 {\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:30:5\n    |\n@@ -72,6 +92,10 @@ LL | fn array_coerce<'a, 'b>(x: &'a i32) -> *const [&'b i32; 3] {\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:36:5\n    |\n@@ -83,5 +107,9 @@ LL | fn nested_array<'a, 'b>(x: &'a i32) -> *const [&'b i32; 2] {\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: aborting due to 8 previous errors\n "}, {"sha": "5293f48116e8f4256d94f8138c11f86b55e72997", "filename": "src/test/ui/nll/type-check-pointer-comparisons.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -18,6 +18,10 @@ LL | fn compare_const<'a, 'b>(x: *const &mut &'a i32, y: *const &mut &'b i32) {\n LL |     x == y;\n    |          ^ requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: `'b` and `'a` must be the same; replace one with the other\n+\n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-comparisons.rs:12:5\n    |\n@@ -38,6 +42,10 @@ LL | fn compare_mut<'a, 'b>(x: *mut &'a i32, y: *mut &'b i32) {\n LL |     x == y;\n    |          ^ requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: `'a` and `'b` must be the same; replace one with the other\n+\n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-comparisons.rs:18:5\n    |\n@@ -58,5 +66,9 @@ LL | fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32\n LL |     f == g;\n    |          ^ requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: `'a` and `'b` must be the same; replace one with the other\n+\n error: aborting due to 6 previous errors\n "}, {"sha": "ff0cda9114a1abb7c944ec370cb5bd465c79f0fc", "filename": "src/test/ui/nll/user-annotations/closure-substs.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -7,6 +7,10 @@ LL | fn foo<'a>() {\n LL |         return x;\n    |                ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/closure-substs.rs:15:16\n    |\n@@ -24,6 +28,10 @@ LL | fn bar<'a>() {\n LL |         b(x);\n    |         ^^^^ argument requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/closure-substs.rs:29:9\n    |"}, {"sha": "48d56fc1c02fe0dd99425380f76640edaa6624b1", "filename": "src/test/ui/nll/user-annotations/inherent-associated-constants.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -6,5 +6,9 @@ LL | fn non_wf_associated_const<'a>(x: i32) {\n LL |     A::<'a>::IC;\n    |     ^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to previous error\n "}, {"sha": "64df1264d27ea8816aaf7877ed4e699f0a081f5d", "filename": "src/test/ui/nll/user-annotations/issue-54124.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -16,5 +16,9 @@ LL | fn test<'a>() {\n LL |     let _:fn(&()) = |_:&'a ()| {};\n    |                      ^ requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to 2 previous errors\n "}, {"sha": "a629cc267635d96459150539dfb0559a37b1d652", "filename": "src/test/ui/nll/user-annotations/issue-55748-pat-types-constrain-bindings.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -7,6 +7,10 @@ LL | fn coupled_regions_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/issue-55748-pat-types-constrain-bindings.rs:49:5\n    |\n@@ -16,6 +20,10 @@ LL | fn coupled_types_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/issue-55748-pat-types-constrain-bindings.rs:62:5\n    |\n@@ -25,5 +33,9 @@ LL | fn coupled_wilds_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "937db3775738d4ed52952ea96aa5c56485a94656", "filename": "src/test/ui/nll/user-annotations/issue-57731-ascibed-coupled-types.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -7,6 +7,10 @@ LL |     let ((y, _z),) = ((s, _x),): (PairCoupledTypes<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:22:5\n    |\n@@ -16,6 +20,10 @@ LL |     let ((y, _z),) = ((s, _x),): (PairCoupledRegions<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:32:5\n    |\n@@ -25,6 +33,10 @@ LL |     let ((y, _z),) = ((s, _x),) as (PairCoupledTypes<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:37:5\n    |\n@@ -34,5 +46,9 @@ LL |     let ((y, _z),) = ((s, _x),) as (PairCoupledRegions<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to 4 previous errors\n "}, {"sha": "981e59c08c52081f703d8b09df0d60203fc6bb38", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -157,6 +157,10 @@ LL | fn static_to_a_to_static_through_variable<'a>(x: &'a u32) -> &'static u32 {\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:125:5\n    |\n@@ -166,6 +170,10 @@ LL | fn static_to_a_to_static_through_tuple<'a>(x: &'a u32) -> &'static u32 {\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:130:5\n    |\n@@ -175,6 +183,10 @@ LL |     let Single { value: y }: Single<&'a u32> = Single { value: &22 };\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:134:18\n    |\n@@ -183,6 +195,10 @@ LL | fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n LL |     let (y, _z): (&'static u32, u32) = (x, 44);\n    |                  ^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error: aborting due to 19 previous errors\n \n Some errors have detailed explanations: E0597, E0716."}, {"sha": "c3b32865b01470a9179dc7d081d4ef28b43c09ef", "filename": "src/test/ui/nll/user-annotations/wf-self-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -8,5 +8,9 @@ LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n LL |     Foo::xmute(u)\n    |     ^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n error: aborting due to previous error\n "}, {"sha": "c01101cf1f6d02c613cf1e49e912e432ed58d8a3", "filename": "src/test/ui/nll/where_clauses_in_functions.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_functions.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -8,5 +8,9 @@ LL | fn bar<'a, 'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n LL |     foo(x, y)\n    |     ^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: aborting due to previous error\n "}, {"sha": "aa15aa4ddcae2f99da07e055247bca475a90c213", "filename": "src/test/ui/nll/where_clauses_in_structs.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -8,5 +8,9 @@ LL | fn bar<'a, 'b>(x: Cell<&'a u32>, y: Cell<&'b u32>) {\n LL |     Foo { x, y };\n    |           ^ requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: aborting due to previous error\n "}, {"sha": "79ea4caa3433356e4c1b439050d33a9000ed032d", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -9,5 +9,9 @@ LL | fn with_assoc<'a,'b>() {\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n error: aborting due to previous error\n "}, {"sha": "594ea755e3d43b9b8b721c96460f0ef8706b3179", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.nll.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -8,6 +8,10 @@ LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n LL |     let z: Option<&'b &'a usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: lifetime may not live long enough\n   --> $DIR/regions-free-region-ordering-caller.rs:17:12\n    |\n@@ -19,6 +23,10 @@ LL |     let y: Paramd<'a> = Paramd { x: a };\n LL |     let z: Option<&'b Paramd<'a>> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'b`\n+\n error: lifetime may not live long enough\n   --> $DIR/regions-free-region-ordering-caller.rs:22:12\n    |\n@@ -29,5 +37,9 @@ LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n LL |     let z: Option<&'a &'b usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "fb836d32a2bffbec3eb191d6b10021938d9c34ec", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.nll.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -9,6 +9,10 @@ LL | fn with_assoc<'a,'b>() {\n LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n error: lifetime may not live long enough\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n    |\n@@ -20,5 +24,9 @@ LL | fn with_assoc_sub<'a,'b>() {\n LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n error: aborting due to 2 previous errors\n "}, {"sha": "3f5088c12d64a175c52c9937a9ef0cd8a30b7bf6", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -9,5 +9,9 @@ LL | fn with_assoc<'a,'b>() {\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'b: 'a`\n+\n error: aborting due to previous error\n "}, {"sha": "281683ac1da2b288ff41f06542f76de99fd993e5", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1847b07d552fff62be4ebf11e74f90b6a43fce/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=3a1847b07d552fff62be4ebf11e74f90b6a43fce", "patch": "@@ -6,6 +6,10 @@ LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+\n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5\n    |"}]}