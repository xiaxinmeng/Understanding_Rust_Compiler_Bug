{"sha": "11c2c596e4263787f63bcb7ecd317359f2d704c1", "node_id": "C_kwDOAAsO6NoAKDExYzJjNTk2ZTQyNjM3ODdmNjNiY2I3ZWNkMzE3MzU5ZjJkNzA0YzE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-19T23:19:09Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-23T20:33:00Z"}, "message": "Rename `mk_{ty,region}` as `mk_{ty,region}_from_kind`.\n\nTo discourage accidental use -- there are more specific `mk_*` functions\nfor all `Ty` and `Region` kinds.", "tree": {"sha": "7dc312f79121ba1c73abb6e80f6009b74a3243a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dc312f79121ba1c73abb6e80f6009b74a3243a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c2c596e4263787f63bcb7ecd317359f2d704c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c2c596e4263787f63bcb7ecd317359f2d704c1", "html_url": "https://github.com/rust-lang/rust/commit/11c2c596e4263787f63bcb7ecd317359f2d704c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c2c596e4263787f63bcb7ecd317359f2d704c1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a980683d1fc1152fa795e197bd39b315b5745aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a980683d1fc1152fa795e197bd39b315b5745aab", "html_url": "https://github.com/rust-lang/rust/commit/a980683d1fc1152fa795e197bd39b315b5745aab"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "99a5921d93dcc54112066465c3ba8fc5685acc28", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11c2c596e4263787f63bcb7ecd317359f2d704c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c2c596e4263787f63bcb7ecd317359f2d704c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=11c2c596e4263787f63bcb7ecd317359f2d704c1", "patch": "@@ -207,7 +207,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for Ty<'tcx> {\n             })\n         } else {\n             let tcx = decoder.interner();\n-            tcx.mk_ty(rustc_type_ir::TyKind::decode(decoder))\n+            tcx.mk_ty_from_kind(rustc_type_ir::TyKind::decode(decoder))\n         }\n     }\n }\n@@ -263,7 +263,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for mir::Place<'tcx> {\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::Region<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n-        decoder.interner().mk_region(Decodable::decode(decoder))\n+        decoder.interner().mk_region_from_kind(Decodable::decode(decoder))\n     }\n }\n "}, {"sha": "e5301791318b5db56d064c984e23965f910c1be3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 38, "deletions": 30, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/11c2c596e4263787f63bcb7ecd317359f2d704c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c2c596e4263787f63bcb7ecd317359f2d704c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=11c2c596e4263787f63bcb7ecd317359f2d704c1", "patch": "@@ -720,7 +720,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Constructs a `TyKind::Error` type with current `ErrorGuaranteed`\n     #[track_caller]\n     pub fn ty_error(self, reported: ErrorGuaranteed) -> Ty<'tcx> {\n-        self.mk_ty(Error(reported))\n+        self.mk_ty_from_kind(Error(reported))\n     }\n \n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n@@ -734,7 +734,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_ty(Error(reported))\n+        self.mk_ty_from_kind(Error(reported))\n     }\n \n     /// Constructs a `RegionKind::ReError` lifetime.\n@@ -1681,7 +1681,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     // Avoid this in favour of more specific `mk_*` methods, where possible.\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n-    pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {\n+    pub fn mk_ty_from_kind(self, st: TyKind<'tcx>) -> Ty<'tcx> {\n         self.interners.intern_ty(\n             st,\n             self.sess,\n@@ -1746,12 +1746,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn mk_adt(self, def: AdtDef<'tcx>, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n         // Take a copy of substs so that we own the vectors inside.\n-        self.mk_ty(Adt(def, substs))\n+        self.mk_ty_from_kind(Adt(def, substs))\n     }\n \n     #[inline]\n     pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {\n-        self.mk_ty(Foreign(def_id))\n+        self.mk_ty_from_kind(Foreign(def_id))\n     }\n \n     fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {\n@@ -1768,7 +1768,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                 }\n             });\n-        self.mk_ty(Adt(adt_def, substs))\n+        self.mk_ty_from_kind(Adt(adt_def, substs))\n     }\n \n     #[inline]\n@@ -1797,12 +1797,12 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(RawPtr(tm))\n+        self.mk_ty_from_kind(RawPtr(tm))\n     }\n \n     #[inline]\n     pub fn mk_ref(self, r: Region<'tcx>, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Ref(r, tm.ty, tm.mutbl))\n+        self.mk_ty_from_kind(Ref(r, tm.ty, tm.mutbl))\n     }\n \n     #[inline]\n@@ -1827,22 +1827,26 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n-        self.mk_ty(Array(ty, ty::Const::from_target_usize(self, n)))\n+        self.mk_ty_from_kind(Array(ty, ty::Const::from_target_usize(self, n)))\n     }\n \n     #[inline]\n     pub fn mk_array_with_const_len(self, ty: Ty<'tcx>, ct: Const<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Array(ty, ct))\n+        self.mk_ty_from_kind(Array(ty, ct))\n     }\n \n     #[inline]\n     pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Slice(ty))\n+        self.mk_ty_from_kind(Slice(ty))\n     }\n \n     #[inline]\n     pub fn mk_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n-        if ts.is_empty() { self.types.unit } else { self.mk_ty(Tuple(self.mk_type_list(&ts))) }\n+        if ts.is_empty() {\n+            self.types.unit\n+        } else {\n+            self.mk_ty_from_kind(Tuple(self.mk_type_list(&ts)))\n+        }\n     }\n \n     pub fn mk_tup_from_iter<I, T>(self, iter: I) -> T::Output\n@@ -1870,7 +1874,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n         let substs = self.check_and_mk_substs(def_id, substs);\n-        self.mk_ty(FnDef(def_id, substs))\n+        self.mk_ty_from_kind(FnDef(def_id, substs))\n     }\n \n     #[inline(always)]\n@@ -1895,7 +1899,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(FnPtr(fty))\n+        self.mk_ty_from_kind(FnPtr(fty))\n     }\n \n     #[inline]\n@@ -1905,7 +1909,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         reg: ty::Region<'tcx>,\n         repr: DynKind,\n     ) -> Ty<'tcx> {\n-        self.mk_ty(Dynamic(obj, reg, repr))\n+        self.mk_ty_from_kind(Dynamic(obj, reg, repr))\n     }\n \n     #[inline]\n@@ -1919,7 +1923,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_closure(self, closure_id: DefId, closure_substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Closure(closure_id, closure_substs))\n+        self.mk_ty_from_kind(Closure(closure_id, closure_substs))\n     }\n \n     #[inline]\n@@ -1929,12 +1933,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         generator_substs: SubstsRef<'tcx>,\n         movability: hir::Movability,\n     ) -> Ty<'tcx> {\n-        self.mk_ty(Generator(id, generator_substs, movability))\n+        self.mk_ty_from_kind(Generator(id, generator_substs, movability))\n     }\n \n     #[inline]\n     pub fn mk_generator_witness(self, types: ty::Binder<'tcx, &'tcx List<Ty<'tcx>>>) -> Ty<'tcx> {\n-        self.mk_ty(GeneratorWitness(types))\n+        self.mk_ty_from_kind(GeneratorWitness(types))\n     }\n \n     /// Creates a `&mut Context<'_>` [`Ty`] with erased lifetimes.\n@@ -1948,7 +1952,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_generator_witness_mir(self, id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(GeneratorWitnessMIR(id, substs))\n+        self.mk_ty_from_kind(GeneratorWitnessMIR(id, substs))\n     }\n \n     #[inline]\n@@ -1959,17 +1963,21 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n         // Use a pre-interned one when possible.\n-        self.types.ty_vars.get(v.as_usize()).copied().unwrap_or_else(|| self.mk_ty(Infer(TyVar(v))))\n+        self.types\n+            .ty_vars\n+            .get(v.as_usize())\n+            .copied()\n+            .unwrap_or_else(|| self.mk_ty_from_kind(Infer(TyVar(v))))\n     }\n \n     #[inline]\n     pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {\n-        self.mk_ty(Infer(IntVar(v)))\n+        self.mk_ty_from_kind(Infer(IntVar(v)))\n     }\n \n     #[inline]\n     pub fn mk_float_var(self, v: FloatVid) -> Ty<'tcx> {\n-        self.mk_ty(Infer(FloatVar(v)))\n+        self.mk_ty_from_kind(Infer(FloatVar(v)))\n     }\n \n     #[inline]\n@@ -1979,7 +1987,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .fresh_tys\n             .get(n as usize)\n             .copied()\n-            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshTy(n))))\n+            .unwrap_or_else(|| self.mk_ty_from_kind(Infer(ty::FreshTy(n))))\n     }\n \n     #[inline]\n@@ -1989,7 +1997,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .fresh_int_tys\n             .get(n as usize)\n             .copied()\n-            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshIntTy(n))))\n+            .unwrap_or_else(|| self.mk_ty_from_kind(Infer(ty::FreshIntTy(n))))\n     }\n \n     #[inline]\n@@ -1999,12 +2007,12 @@ impl<'tcx> TyCtxt<'tcx> {\n             .fresh_float_tys\n             .get(n as usize)\n             .copied()\n-            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshFloatTy(n))))\n+            .unwrap_or_else(|| self.mk_ty_from_kind(Infer(ty::FreshFloatTy(n))))\n     }\n \n     #[inline]\n     pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {\n-        self.mk_ty(Param(ParamTy { index, name }))\n+        self.mk_ty_from_kind(Param(ParamTy { index, name }))\n     }\n \n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {\n@@ -2026,17 +2034,17 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_bound(self, index: ty::DebruijnIndex, bound_ty: ty::BoundTy) -> Ty<'tcx> {\n-        self.mk_ty(Bound(index, bound_ty))\n+        self.mk_ty_from_kind(Bound(index, bound_ty))\n     }\n \n     #[inline]\n     pub fn mk_placeholder(self, placeholder: ty::PlaceholderType) -> Ty<'tcx> {\n-        self.mk_ty(Placeholder(placeholder))\n+        self.mk_ty_from_kind(Placeholder(placeholder))\n     }\n \n     #[inline]\n     pub fn mk_alias(self, kind: ty::AliasKind, alias_ty: ty::AliasTy<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Alias(kind, alias_ty))\n+        self.mk_ty_from_kind(Alias(kind, alias_ty))\n     }\n \n     #[inline]\n@@ -2089,7 +2097,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     // Avoid this in favour of more specific `mk_re_*` methods, where possible,\n     // to avoid the cost of the `match`.\n-    pub fn mk_region(self, kind: ty::RegionKind<'tcx>) -> Region<'tcx> {\n+    pub fn mk_region_from_kind(self, kind: ty::RegionKind<'tcx>) -> Region<'tcx> {\n         match kind {\n             ty::ReEarlyBound(region) => self.mk_re_early_bound(region),\n             ty::ReLateBound(debruijn, region) => self.mk_re_late_bound(debruijn, region),"}, {"sha": "1d4d76da5722bd71f9dff23abba25b70cf2a8da7", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11c2c596e4263787f63bcb7ecd317359f2d704c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c2c596e4263787f63bcb7ecd317359f2d704c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=11c2c596e4263787f63bcb7ecd317359f2d704c1", "patch": "@@ -513,7 +513,7 @@ impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n             | ty::Foreign(..) => return Ok(self),\n         };\n \n-        Ok(if *self.kind() == kind { self } else { folder.interner().mk_ty(kind) })\n+        Ok(if *self.kind() == kind { self } else { folder.interner().mk_ty_from_kind(kind) })\n     }\n }\n "}, {"sha": "60e22d1001c818de4ed1d4b61e49ab9ace1defbb", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11c2c596e4263787f63bcb7ecd317359f2d704c1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c2c596e4263787f63bcb7ecd317359f2d704c1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=11c2c596e4263787f63bcb7ecd317359f2d704c1", "patch": "@@ -489,7 +489,7 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n             TyKind::InferenceVar(_, _) => unimplemented!(),\n             TyKind::Dyn(_) => unimplemented!(),\n         };\n-        interner.tcx.mk_ty(kind)\n+        interner.tcx.mk_ty_from_kind(kind)\n     }\n }\n "}]}