{"sha": "7f12a1f225c7d3397f27964ce039b55d680772d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMTJhMWYyMjVjN2QzMzk3ZjI3OTY0Y2UwMzliNTVkNjgwNzcyZDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-06T21:39:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-06T21:39:02Z"}, "message": "Merge #6485\n\n6485: Remove RAW literals r=matklad a=matklad\n\nbors r+\r\n\ud83e\udd16\r\n\r\ncloses https://github.com/rust-analyzer/rust-analyzer/issues/6308\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "26043b20588eae4510e28249f11a094aacaf190d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26043b20588eae4510e28249f11a094aacaf190d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f12a1f225c7d3397f27964ce039b55d680772d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfpcJ2CRBK7hj4Ov3rIwAAdHIIAJDStVI+7HsjSBBfYzOJeADg\nVfS1ubNO6VoNYpBFOiGyERUzvuwZ+y1UoMF+xFVbToFqKwMsyLVUtIAamODX3lpt\nY/Bbt9d43AIXySQPC40LVnfUDrxfUIUEeLOk0iPnv8KewShJG5qFPu9UifuNQ9iU\nrkhbFxbkfQmtloufzhITIQqEsSaNLEjLf9Oir+z8bLB32jgH2z0DQ+7E6Dg3joPs\nZfYKlGkNr6hu3OqtC3gCitt15vgjzUYn7eiKVhvXzpgBz7nUe0Dw5JBbGX5Ka6RN\nLNJTWQkrWBpzRwHdnBSo+EzZmlHhqoMXIqcdHYaVYKp9D8EeyH7xrM2422oULgE=\n=T+Nb\n-----END PGP SIGNATURE-----\n", "payload": "tree 26043b20588eae4510e28249f11a094aacaf190d\nparent cdddcaee851be1cff1eeb23599f5a58f1b30a927\nparent 6158304f8b64ef7cdf58b14bc675baf33a27a853\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604698742 +0000\ncommitter GitHub <noreply@github.com> 1604698742 +0000\n\nMerge #6485\n\n6485: Remove RAW literals r=matklad a=matklad\n\nbors r+\r\n\ud83e\udd16\r\n\r\ncloses https://github.com/rust-analyzer/rust-analyzer/issues/6308\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f12a1f225c7d3397f27964ce039b55d680772d3", "html_url": "https://github.com/rust-lang/rust/commit/7f12a1f225c7d3397f27964ce039b55d680772d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f12a1f225c7d3397f27964ce039b55d680772d3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdddcaee851be1cff1eeb23599f5a58f1b30a927", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdddcaee851be1cff1eeb23599f5a58f1b30a927", "html_url": "https://github.com/rust-lang/rust/commit/cdddcaee851be1cff1eeb23599f5a58f1b30a927"}, {"sha": "6158304f8b64ef7cdf58b14bc675baf33a27a853", "url": "https://api.github.com/repos/rust-lang/rust/commits/6158304f8b64ef7cdf58b14bc675baf33a27a853", "html_url": "https://github.com/rust-lang/rust/commit/6158304f8b64ef7cdf58b14bc675baf33a27a853"}], "stats": {"total": 357, "additions": 157, "deletions": 200}, "files": [{"sha": "fcfe2d6ee4aec924393c863c6a7cbf8ab60f5cef", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -12,7 +12,7 @@ use ide_db::{\n };\n use syntax::{\n     algo::{self, find_node_at_offset, SyntaxRewriter},\n-    AstNode, SourceFile, SyntaxElement, SyntaxKind, SyntaxToken, TextRange, TextSize,\n+    AstNode, AstToken, SourceFile, SyntaxElement, SyntaxKind, SyntaxToken, TextRange, TextSize,\n     TokenAtOffset,\n };\n use text_edit::{TextEdit, TextEditBuilder};\n@@ -81,9 +81,12 @@ impl<'a> AssistContext<'a> {\n     pub(crate) fn token_at_offset(&self) -> TokenAtOffset<SyntaxToken> {\n         self.source_file.syntax().token_at_offset(self.offset())\n     }\n-    pub(crate) fn find_token_at_offset(&self, kind: SyntaxKind) -> Option<SyntaxToken> {\n+    pub(crate) fn find_token_syntax_at_offset(&self, kind: SyntaxKind) -> Option<SyntaxToken> {\n         self.token_at_offset().find(|it| it.kind() == kind)\n     }\n+    pub(crate) fn find_token_at_offset<T: AstToken>(&self) -> Option<T> {\n+        self.token_at_offset().find_map(T::cast)\n+    }\n     pub(crate) fn find_node_at_offset<N: AstNode>(&self) -> Option<N> {\n         find_node_at_offset(self.source_file.syntax(), self.offset())\n     }"}, {"sha": "1f486c013c8f3c3065e0617a660a4caed42bb704", "filename": "crates/assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -25,7 +25,7 @@ use crate::{\n // }\n // ```\n pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let ident = ctx.find_token_at_offset(SyntaxKind::IDENT).or_else(|| {\n+    let ident = ctx.find_token_syntax_at_offset(SyntaxKind::IDENT).or_else(|| {\n         let arg_list = ctx.find_node_at_offset::<ast::ArgList>()?;\n         if arg_list.args().count() > 0 {\n             return None;"}, {"sha": "853266395daea7fef1e6bed833a7928366b1e993", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -41,7 +41,7 @@ use crate::{\n // fn qux(bar: Bar, baz: Baz) {}\n // ```\n pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let star = ctx.find_token_at_offset(T![*])?;\n+    let star = ctx.find_token_syntax_at_offset(T![*])?;\n     let (parent, mod_path) = find_parent_and_path(&star)?;\n     let target_module = match ctx.sema.resolve_path(&mod_path)? {\n         PathResolution::Def(ModuleDef::Module(it)) => it,"}, {"sha": "64b4b1a76a50916e3697c839a7f712993d8dd01e", "filename": "crates/assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -18,7 +18,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn flip_comma(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let comma = ctx.find_token_at_offset(T![,])?;\n+    let comma = ctx.find_token_syntax_at_offset(T![,])?;\n     let prev = non_trivia_sibling(comma.clone().into(), Direction::Prev)?;\n     let next = non_trivia_sibling(comma.clone().into(), Direction::Next)?;\n "}, {"sha": "92ee4218104c8f7853eb6be5f4a00183bbb1564b", "filename": "crates/assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -20,7 +20,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n pub(crate) fn flip_trait_bound(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     // We want to replicate the behavior of `flip_binexpr` by only suggesting\n     // the assist when the cursor is on a `+`\n-    let plus = ctx.find_token_at_offset(T![+])?;\n+    let plus = ctx.find_token_syntax_at_offset(T![+])?;\n \n     // Make sure we're in a `TypeBoundList`\n     if ast::TypeBoundList::cast(plus.parent()).is_none() {"}, {"sha": "4cc8dae65026fbb7b9c67c1ad4aa88771446e6f3", "filename": "crates/assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -36,7 +36,7 @@ static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n // FIXME: should also add support for the case fun(f: &Foo) -> &<|>Foo\n pub(crate) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let lifetime_token = ctx\n-        .find_token_at_offset(SyntaxKind::LIFETIME)\n+        .find_token_syntax_at_offset(SyntaxKind::LIFETIME)\n         .filter(|lifetime| lifetime.text() == \"'_\")?;\n     if let Some(fn_def) = lifetime_token.ancestors().find_map(ast::Fn::cast) {\n         generate_fn_def_assist(acc, &fn_def, lifetime_token.text_range())"}, {"sha": "ea722b91b2da65bd1878c93549fe92cd247f933f", "filename": "crates/assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -29,7 +29,7 @@ use crate::{\n // ```\n \n pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let if_keyword = ctx.find_token_at_offset(T![if])?;\n+    let if_keyword = ctx.find_token_syntax_at_offset(T![if])?;\n     let expr = ast::IfExpr::cast(if_keyword.parent())?;\n     let if_range = if_keyword.text_range();\n     let cursor_in_range = if_range.contains_range(ctx.frange.range);"}, {"sha": "4c759cc25e4afaaf44835203f0f0d3f5bc666964", "filename": "crates/assists/src/handlers/raw_string.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,11 +1,6 @@\n use std::borrow::Cow;\n \n-use syntax::{\n-    ast::{self, HasQuotes, HasStringValue},\n-    AstToken,\n-    SyntaxKind::{RAW_STRING, STRING},\n-    TextRange, TextSize,\n-};\n+use syntax::{ast, AstToken, TextRange, TextSize};\n use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -26,7 +21,10 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n+    let token = ctx.find_token_at_offset::<ast::String>()?;\n+    if token.is_raw() {\n+        return None;\n+    }\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n     acc.add(\n@@ -65,7 +63,10 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<\n // }\n // ```\n pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n+    let token = ctx.find_token_at_offset::<ast::String>()?;\n+    if !token.is_raw() {\n+        return None;\n+    }\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n     acc.add(\n@@ -104,11 +105,15 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n // }\n // ```\n pub(crate) fn add_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let token = ctx.find_token_at_offset(RAW_STRING)?;\n-    let target = token.text_range();\n+    let token = ctx.find_token_at_offset::<ast::String>()?;\n+    if !token.is_raw() {\n+        return None;\n+    }\n+    let text_range = token.syntax().text_range();\n+    let target = text_range;\n     acc.add(AssistId(\"add_hash\", AssistKind::Refactor), \"Add #\", target, |edit| {\n-        edit.insert(token.text_range().start() + TextSize::of('r'), \"#\");\n-        edit.insert(token.text_range().end(), \"#\");\n+        edit.insert(text_range.start() + TextSize::of('r'), \"#\");\n+        edit.insert(text_range.end(), \"#\");\n     })\n }\n \n@@ -128,7 +133,10 @@ pub(crate) fn add_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n // }\n // ```\n pub(crate) fn remove_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n+    let token = ctx.find_token_at_offset::<ast::String>()?;\n+    if !token.is_raw() {\n+        return None;\n+    }\n \n     let text = token.text().as_str();\n     if !text.starts_with(\"r#\") && text.ends_with('#') {"}, {"sha": "575b271f71d273bed2faaa6ad3533ac040b7bb52", "filename": "crates/assists/src/handlers/remove_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_mut.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -18,7 +18,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn remove_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let mut_token = ctx.find_token_at_offset(T![mut])?;\n+    let mut_token = ctx.find_token_syntax_at_offset(T![mut])?;\n     let delete_from = mut_token.text_range().start();\n     let delete_to = match mut_token.next_token() {\n         Some(it) if it.kind() == SyntaxKind::WHITESPACE => it.text_range().end(),"}, {"sha": "69d3b08d36cb7065fb225cc410b636554703e0e1", "filename": "crates/assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -37,7 +37,7 @@ use ide_db::ty_filter::TryEnum;\n // fn compute() -> Option<i32> { None }\n // ```\n pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let let_kw = ctx.find_token_at_offset(T![let])?;\n+    let let_kw = ctx.find_token_syntax_at_offset(T![let])?;\n     let let_stmt = let_kw.ancestors().find_map(ast::LetStmt::cast)?;\n     let init = let_stmt.initializer()?;\n     let original_pat = let_stmt.pat()?;"}, {"sha": "b4b8988461eac8208e4d9813193cfd586d73fe85", "filename": "crates/assists/src/handlers/replace_string_with_char.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,8 +1,4 @@\n-use syntax::{\n-    ast::{self, HasStringValue},\n-    AstToken,\n-    SyntaxKind::STRING,\n-};\n+use syntax::{ast, AstToken, SyntaxKind::STRING};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -22,7 +18,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn replace_string_with_char(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n+    let token = ctx.find_token_syntax_at_offset(STRING).and_then(ast::String::cast)?;\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n "}, {"sha": "ef1f6b8a1aaa78c47efccfe1554750c98c69f670", "filename": "crates/assists/src/handlers/split_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -16,7 +16,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // use std::{collections::HashMap};\n // ```\n pub(crate) fn split_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let colon_colon = ctx.find_token_at_offset(T![::])?;\n+    let colon_colon = ctx.find_token_syntax_at_offset(T![::])?;\n     let path = ast::Path::cast(colon_colon.parent())?.qualifier()?;\n     let top_path = successors(Some(path.clone()), |it| it.parent_path()).last()?;\n "}, {"sha": "36ef871b9385ddbec56af702c2ea4dccdf7098b1", "filename": "crates/assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let assist_id = AssistId(\"unwrap_block\", AssistKind::RefactorRewrite);\n     let assist_label = \"Unwrap block\";\n \n-    let l_curly_token = ctx.find_token_at_offset(T!['{'])?;\n+    let l_curly_token = ctx.find_token_syntax_at_offset(T!['{'])?;\n     let mut block = ast::BlockExpr::cast(l_curly_token.parent())?;\n     let mut parent = block.syntax().parent()?;\n     if ast::MatchArm::can_cast(parent.kind()) {"}, {"sha": "aebbfc4dfea1908921e71789b72b03b8e5dcbc75", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -8,7 +8,7 @@ use base_db::FileId;\n use either::Either;\n use mbe::parse_to_token_tree;\n use parser::FragmentKind;\n-use syntax::ast::{self, AstToken, HasStringValue};\n+use syntax::ast::{self, AstToken};\n \n macro_rules! register_builtin {\n     ( LAZY: $(($name:ident, $kind: ident) => $expand:ident),* , EAGER: $(($e_name:ident, $e_kind: ident) => $e_expand:ident),*  ) => {"}, {"sha": "0971f7701536884001736e3cdcc58cb9df3a74be", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -35,7 +35,7 @@ fn try_extend_selection(\n ) -> Option<TextRange> {\n     let range = frange.range;\n \n-    let string_kinds = [COMMENT, STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING];\n+    let string_kinds = [COMMENT, STRING, BYTE_STRING];\n     let list_kinds = [\n         RECORD_PAT_FIELD_LIST,\n         MATCH_ARM_LIST,"}, {"sha": "05bafe9c89dd344f9ce37423e4bc221b67349196", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -179,10 +179,12 @@ pub(crate) fn highlight(\n             element.clone()\n         };\n \n-        if let Some(token) = element.as_token().cloned().and_then(ast::RawString::cast) {\n-            let expanded = element_to_highlight.as_token().unwrap().clone();\n-            if injection::highlight_injection(&mut stack, &sema, token, expanded).is_some() {\n-                continue;\n+        if let Some(token) = element.as_token().cloned().and_then(ast::String::cast) {\n+            if token.is_raw() {\n+                let expanded = element_to_highlight.as_token().unwrap().clone();\n+                if injection::highlight_injection(&mut stack, &sema, token, expanded).is_some() {\n+                    continue;\n+                }\n             }\n         }\n \n@@ -214,10 +216,6 @@ pub(crate) fn highlight(\n                     }\n                     stack.pop_and_inject(None);\n                 }\n-            } else if let Some(string) =\n-                element_to_highlight.as_token().cloned().and_then(ast::RawString::cast)\n-            {\n-                format_string_highlighter.highlight_format_string(&mut stack, &string, range);\n             }\n         }\n     }\n@@ -532,7 +530,7 @@ fn highlight_element(\n                 None => h.into(),\n             }\n         }\n-        STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => HighlightTag::StringLiteral.into(),\n+        STRING | BYTE_STRING => HighlightTag::StringLiteral.into(),\n         ATTR => HighlightTag::Attribute.into(),\n         INT_NUMBER | FLOAT_NUMBER => HighlightTag::NumericLiteral.into(),\n         BYTE => HighlightTag::ByteLiteral.into(),"}, {"sha": "42f27df5d9be7cc1371ba07a24ab55e532a2a391", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -29,9 +29,7 @@ impl FormatStringHighlighter {\n                         .children_with_tokens()\n                         .filter(|t| t.kind() != SyntaxKind::WHITESPACE)\n                         .nth(1)\n-                        .filter(|e| {\n-                            ast::String::can_cast(e.kind()) || ast::RawString::can_cast(e.kind())\n-                        })\n+                        .filter(|e| ast::String::can_cast(e.kind()))\n                 }\n                 _ => {}\n             }"}, {"sha": "e97d1be1aa8644cc631350236ab120be64778157", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -2,7 +2,6 @@\n \n use std::{collections::BTreeMap, convert::TryFrom};\n \n-use ast::{HasQuotes, HasStringValue};\n use hir::Semantics;\n use ide_db::call_info::ActiveParameter;\n use itertools::Itertools;\n@@ -15,7 +14,7 @@ use super::HighlightedRangeStack;\n pub(super) fn highlight_injection(\n     acc: &mut HighlightedRangeStack,\n     sema: &Semantics<RootDatabase>,\n-    literal: ast::RawString,\n+    literal: ast::String,\n     expanded: SyntaxToken,\n ) -> Option<()> {\n     let active_parameter = ActiveParameter::at_token(&sema, expanded)?;"}, {"sha": "6dd05c05de45ce2d171b22279d3573cf06d4bc44", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,9 +1,7 @@\n use ide_db::base_db::{FileId, SourceDatabase};\n use ide_db::RootDatabase;\n use syntax::{\n-    algo, AstNode, NodeOrToken, SourceFile,\n-    SyntaxKind::{RAW_STRING, STRING},\n-    SyntaxToken, TextRange, TextSize,\n+    algo, AstNode, NodeOrToken, SourceFile, SyntaxKind::STRING, SyntaxToken, TextRange, TextSize,\n };\n \n // Feature: Show Syntax Tree\n@@ -46,7 +44,7 @@ fn syntax_tree_for_string(token: &SyntaxToken, text_range: TextRange) -> Option<\n     // we'll attempt parsing it as rust syntax\n     // to provide the syntax tree of the contents of the string\n     match token.kind() {\n-        STRING | RAW_STRING => syntax_tree_for_token(token, text_range),\n+        STRING => syntax_tree_for_token(token, text_range),\n         _ => None,\n     }\n }"}, {"sha": "116b991a82020165c0c1e33ac887bf4224da4987", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -236,10 +236,7 @@ fn abi(p: &mut Parser) {\n     assert!(p.at(T![extern]));\n     let abi = p.start();\n     p.bump(T![extern]);\n-    match p.current() {\n-        STRING | RAW_STRING => p.bump_any(),\n-        _ => (),\n-    }\n+    p.eat(STRING);\n     abi.complete(p, ABI);\n }\n "}, {"sha": "31f42f16185d7017d7400469a931117f618ec8f3", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -15,18 +15,8 @@ use super::*;\n //     let _ = b\"e\";\n //     let _ = br\"f\";\n // }\n-pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n-    TRUE_KW,\n-    FALSE_KW,\n-    INT_NUMBER,\n-    FLOAT_NUMBER,\n-    BYTE,\n-    CHAR,\n-    STRING,\n-    RAW_STRING,\n-    BYTE_STRING,\n-    RAW_BYTE_STRING,\n-]);\n+pub(crate) const LITERAL_FIRST: TokenSet =\n+    TokenSet::new(&[TRUE_KW, FALSE_KW, INT_NUMBER, FLOAT_NUMBER, BYTE, CHAR, STRING, BYTE_STRING]);\n \n pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     if !p.at_ts(LITERAL_FIRST) {"}, {"sha": "780bc470a432b638b5d083c20b9eae39eb4e2fe0", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -239,9 +239,7 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         T![static] => consts::static_(p, m),\n         // test extern_block\n         // extern {}\n-        T![extern]\n-            if la == T!['{'] || ((la == STRING || la == RAW_STRING) && p.nth(2) == T!['{']) =>\n-        {\n+        T![extern] if la == T!['{'] || (la == STRING && p.nth(2) == T!['{']) => {\n             abi(p);\n             extern_item_list(p);\n             m.complete(p, EXTERN_BLOCK);"}, {"sha": "8bc6688f3cc61b481c9ec21922fe122c64156212", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -111,9 +111,7 @@ pub enum SyntaxKind {\n     CHAR,\n     BYTE,\n     STRING,\n-    RAW_STRING,\n     BYTE_STRING,\n-    RAW_BYTE_STRING,\n     ERROR,\n     IDENT,\n     WHITESPACE,\n@@ -277,8 +275,7 @@ impl SyntaxKind {\n     }\n     pub fn is_literal(self) -> bool {\n         match self {\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | RAW_STRING | BYTE_STRING\n-            | RAW_BYTE_STRING => true,\n+            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING => true,\n             _ => false,\n         }\n     }"}, {"sha": "eb44bb2ab17031bff26ebea689c4b6d9f5a07a73", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -320,6 +320,13 @@ impl ast::Literal {\n         ast::IntNumber::cast(self.token())\n     }\n \n+    pub fn as_string(&self) -> Option<ast::String> {\n+        ast::String::cast(self.token())\n+    }\n+    pub fn as_byte_string(&self) -> Option<ast::ByteString> {\n+        ast::ByteString::cast(self.token())\n+    }\n+\n     fn find_suffix(text: &str, possible_suffixes: &[&str]) -> Option<SmolStr> {\n         possible_suffixes\n             .iter()\n@@ -351,10 +358,10 @@ impl ast::Literal {\n                     suffix: Self::find_suffix(&text, &ast::FloatNumber::SUFFIXES),\n                 }\n             }\n-            STRING | RAW_STRING => LiteralKind::String,\n+            STRING => LiteralKind::String,\n             T![true] => LiteralKind::Bool(true),\n             T![false] => LiteralKind::Bool(false),\n-            BYTE_STRING | RAW_BYTE_STRING => LiteralKind::ByteString,\n+            BYTE_STRING => LiteralKind::ByteString,\n             CHAR => LiteralKind::Char,\n             BYTE => LiteralKind::Byte,\n             _ => unreachable!(),"}, {"sha": "728b72cd77e2ab0f81ef09ce3abccd301ce5871f", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -70,16 +70,16 @@ impl AstToken for String {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RawString {\n+pub struct ByteString {\n     pub(crate) syntax: SyntaxToken,\n }\n-impl std::fmt::Display for RawString {\n+impl std::fmt::Display for ByteString {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.syntax, f)\n     }\n }\n-impl AstToken for RawString {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RAW_STRING }\n+impl AstToken for ByteString {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == BYTE_STRING }\n     fn cast(syntax: SyntaxToken) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })"}, {"sha": "ce35ac01afd3e8686acb4ce43c5fc6a5734a9a67", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -7,7 +7,7 @@ use itertools::Itertools;\n use parser::SyntaxKind;\n \n use crate::{\n-    ast::{self, support, token_ext::HasStringValue, AstNode, AstToken, NameOwner, SyntaxNode},\n+    ast::{self, support, AstNode, AstToken, NameOwner, SyntaxNode},\n     SmolStr, SyntaxElement, SyntaxToken, T,\n };\n \n@@ -55,13 +55,7 @@ impl ast::Attr {\n         let key = self.simple_name()?;\n         let value_token = lit.syntax().first_token()?;\n \n-        let value: SmolStr = if let Some(s) = ast::String::cast(value_token.clone()) {\n-            s.value()?.into()\n-        } else if let Some(s) = ast::RawString::cast(value_token) {\n-            s.value()?.into()\n-        } else {\n-            return None;\n-        };\n+        let value: SmolStr = ast::String::cast(value_token.clone())?.value()?.into();\n \n         Some((key, value))\n     }"}, {"sha": "bf0035986b0d7fa4974ac40f7993ac6c4a359bb2", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 34, "deletions": 56, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -114,39 +114,24 @@ impl QuoteOffsets {\n     }\n }\n \n-pub trait HasQuotes: AstToken {\n-    fn quote_offsets(&self) -> Option<QuoteOffsets> {\n-        let text = self.text().as_str();\n-        let offsets = QuoteOffsets::new(text)?;\n-        let o = self.syntax().text_range().start();\n-        let offsets = QuoteOffsets {\n-            quotes: (offsets.quotes.0 + o, offsets.quotes.1 + o),\n-            contents: offsets.contents + o,\n-        };\n-        Some(offsets)\n-    }\n-    fn open_quote_text_range(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.quotes.0)\n+impl ast::String {\n+    pub fn is_raw(&self) -> bool {\n+        self.text().starts_with('r')\n     }\n-\n-    fn close_quote_text_range(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.quotes.1)\n-    }\n-\n-    fn text_range_between_quotes(&self) -> Option<TextRange> {\n-        self.quote_offsets().map(|it| it.contents)\n+    pub fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n+        let contents_range = self.text_range_between_quotes()?;\n+        assert!(TextRange::up_to(contents_range.len()).contains_range(range));\n+        Some(range + contents_range.start())\n     }\n-}\n-\n-impl HasQuotes for ast::String {}\n-impl HasQuotes for ast::RawString {}\n \n-pub trait HasStringValue: HasQuotes {\n-    fn value(&self) -> Option<Cow<'_, str>>;\n-}\n+    pub fn value(&self) -> Option<Cow<'_, str>> {\n+        if self.is_raw() {\n+            let text = self.text().as_str();\n+            let text =\n+                &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+            return Some(Cow::Borrowed(text));\n+        }\n \n-impl HasStringValue for ast::String {\n-    fn value(&self) -> Option<Cow<'_, str>> {\n         let text = self.text().as_str();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n@@ -164,22 +149,31 @@ impl HasStringValue for ast::String {\n         let res = if buf == text { Cow::Borrowed(text) } else { Cow::Owned(buf) };\n         Some(res)\n     }\n-}\n \n-// FIXME: merge `ast::RawString` and `ast::String`.\n-impl HasStringValue for ast::RawString {\n-    fn value(&self) -> Option<Cow<'_, str>> {\n+    pub fn quote_offsets(&self) -> Option<QuoteOffsets> {\n         let text = self.text().as_str();\n-        let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n-        Some(Cow::Borrowed(text))\n+        let offsets = QuoteOffsets::new(text)?;\n+        let o = self.syntax().text_range().start();\n+        let offsets = QuoteOffsets {\n+            quotes: (offsets.quotes.0 + o, offsets.quotes.1 + o),\n+            contents: offsets.contents + o,\n+        };\n+        Some(offsets)\n+    }\n+    pub fn text_range_between_quotes(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.contents)\n+    }\n+    pub fn open_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes.0)\n+    }\n+    pub fn close_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes.1)\n     }\n }\n \n-impl ast::RawString {\n-    pub fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n-        let contents_range = self.text_range_between_quotes()?;\n-        assert!(TextRange::up_to(contents_range.len()).contains_range(range));\n-        Some(range + contents_range.start())\n+impl ast::ByteString {\n+    pub fn is_raw(&self) -> bool {\n+        self.text().starts_with(\"br\")\n     }\n }\n \n@@ -522,22 +516,6 @@ impl HasFormatSpecifier for ast::String {\n     }\n }\n \n-impl HasFormatSpecifier for ast::RawString {\n-    fn char_ranges(\n-        &self,\n-    ) -> Option<Vec<(TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>> {\n-        let text = self.text().as_str();\n-        let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n-        let offset = self.text_range_between_quotes()?.start() - self.syntax().text_range().start();\n-\n-        let mut res = Vec::with_capacity(text.len());\n-        for (idx, c) in text.char_indices() {\n-            res.push((TextRange::at(idx.try_into().unwrap(), TextSize::of(c)) + offset, Ok(c)));\n-        }\n-        Some(res)\n-    }\n-}\n-\n impl ast::IntNumber {\n     #[rustfmt::skip]\n     pub(crate) const SUFFIXES: &'static [&'static str] = &["}, {"sha": "8afd7e53bc5eaf8f3a181d6715bb2ada4fcdb52e", "filename": "crates/syntax/src/parsing/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -235,7 +235,7 @@ fn rustc_token_kind_to_syntax_kind(\n                         RawStrError::TooManyDelimiters { .. } => \"Too many `#` symbols: raw strings may be delimited by up to 65535 `#` symbols\",\n                     };\n                 };\n-                RAW_STRING\n+                STRING\n             }\n             rustc_lexer::LiteralKind::RawByteStr { err: raw_str_err, .. } => {\n                 if let Some(raw_str_err) = raw_str_err {\n@@ -250,7 +250,7 @@ fn rustc_token_kind_to_syntax_kind(\n                     };\n                 };\n \n-                RAW_BYTE_STRING\n+                BYTE_STRING\n             }\n         };\n "}, {"sha": "190f5f67a45c8dad3c0479516cd985679fdd131f", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -44,7 +44,7 @@ fn reparse_token<'node>(\n     let prev_token = algo::find_covering_element(root, edit.delete).as_token()?.clone();\n     let prev_token_kind = prev_token.kind();\n     match prev_token_kind {\n-        WHITESPACE | COMMENT | IDENT | STRING | RAW_STRING => {\n+        WHITESPACE | COMMENT | IDENT | STRING => {\n             if prev_token_kind == WHITESPACE || prev_token_kind == COMMENT {\n                 // removing a new line may extends previous token\n                 let deleted_range = edit.delete - prev_token.text_range().start();"}, {"sha": "62a37c50a156342056de54d92d7dbdca847680e8", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -4,7 +4,7 @@ mod block;\n \n use crate::{\n     algo, ast, match_ast, AstNode, SyntaxError,\n-    SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST, FN, INT_NUMBER, STRING, TYPE_ALIAS},\n+    SyntaxKind::{BYTE, CHAR, CONST, FN, INT_NUMBER, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,\n };\n use rowan::Direction;\n@@ -121,18 +121,19 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n         acc.push(SyntaxError::new_at_offset(rustc_unescape_error_to_string(err), off));\n     };\n \n-    match token.kind() {\n-        BYTE => {\n-            if let Some(Err(e)) = unquote(text, 2, '\\'').map(unescape_byte) {\n-                push_err(2, e);\n-            }\n-        }\n-        CHAR => {\n-            if let Some(Err(e)) = unquote(text, 1, '\\'').map(unescape_char) {\n-                push_err(1, e);\n+    if let Some(s) = literal.as_string() {\n+        if !s.is_raw() {\n+            if let Some(without_quotes) = unquote(text, 1, '\"') {\n+                unescape_literal(without_quotes, Mode::Str, &mut |range, char| {\n+                    if let Err(err) = char {\n+                        push_err(1, (range.start, err));\n+                    }\n+                })\n             }\n         }\n-        BYTE_STRING => {\n+    }\n+    if let Some(s) = literal.as_byte_string() {\n+        if !s.is_raw() {\n             if let Some(without_quotes) = unquote(text, 2, '\"') {\n                 unescape_byte_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n                     if let Err(err) = char {\n@@ -141,13 +142,17 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                 })\n             }\n         }\n-        STRING => {\n-            if let Some(without_quotes) = unquote(text, 1, '\"') {\n-                unescape_literal(without_quotes, Mode::Str, &mut |range, char| {\n-                    if let Err(err) = char {\n-                        push_err(1, (range.start, err));\n-                    }\n-                })\n+    }\n+\n+    match token.kind() {\n+        BYTE => {\n+            if let Some(Err(e)) = unquote(text, 2, '\\'').map(unescape_byte) {\n+                push_err(2, e);\n+            }\n+        }\n+        CHAR => {\n+            if let Some(Err(e)) = unquote(text, 1, '\\'').map(unescape_char) {\n+                push_err(1, e);\n             }\n         }\n         _ => (),"}, {"sha": "54e707b73674a178868d5292274516181a1eeb72", "filename": "crates/syntax/test_data/lexer/err/0033_unclosed_raw_string_at_eof.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0033_unclosed_raw_string_at_eof.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 4 \"r##\\\"\"\n+STRING 4 \"r##\\\"\"\n > error0..4 token(\"r##\\\"\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "1f9889775f5e5ce73bcd642ef29a67d7d8fb3c2f", "filename": "crates/syntax/test_data/lexer/err/0034_unclosed_raw_string_with_ferris.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0034_unclosed_raw_string_with_ferris.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 8 \"r##\\\"\ud83e\udd80\"\n+STRING 8 \"r##\\\"\ud83e\udd80\"\n > error0..8 token(\"r##\\\"\ud83e\udd80\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "93f6f72ae603e8c9677e2ca31423d4566ede5278", "filename": "crates/syntax/test_data/lexer/err/0035_unclosed_raw_string_with_ascii_escape.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0035_unclosed_raw_string_with_ascii_escape.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 8 \"r##\\\"\\\\x7f\"\n+STRING 8 \"r##\\\"\\\\x7f\"\n > error0..8 token(\"r##\\\"\\\\x7f\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "1d2ebc60fdf9cdf6b7751baab387c2814aed27c7", "filename": "crates/syntax/test_data/lexer/err/0036_unclosed_raw_string_with_unicode_escape.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0036_unclosed_raw_string_with_unicode_escape.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 12 \"r##\\\"\\\\u{20AA}\"\n+STRING 12 \"r##\\\"\\\\u{20AA}\"\n > error0..12 token(\"r##\\\"\\\\u{20AA}\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "c567ab7e28210306d3382f2217b708fddd0f80ed", "filename": "crates/syntax/test_data/lexer/err/0037_unclosed_raw_string_with_space.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0037_unclosed_raw_string_with_space.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 5 \"r##\\\" \"\n+STRING 5 \"r##\\\" \"\n > error0..5 token(\"r##\\\" \") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "343b20323a1785c963d0ec69046d57b50d103df3", "filename": "crates/syntax/test_data/lexer/err/0038_unclosed_raw_string_with_slash.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0038_unclosed_raw_string_with_slash.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 5 \"r##\\\"\\\\\"\n+STRING 5 \"r##\\\"\\\\\"\n > error0..5 token(\"r##\\\"\\\\\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "041a42737580c6b44bfec9b77b10a09703572e89", "filename": "crates/syntax/test_data/lexer/err/0039_unclosed_raw_string_with_slash_n.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0039_unclosed_raw_string_with_slash_n.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 6 \"r##\\\"\\\\n\"\n+STRING 6 \"r##\\\"\\\\n\"\n > error0..6 token(\"r##\\\"\\\\n\") msg(Missing trailing `\"` with `#` symbols to terminate the raw string literal)"}, {"sha": "efaa1cafd93e4f51b210a885f7c5181ee00e367e", "filename": "crates/syntax/test_data/lexer/err/0040_unclosed_raw_byte_string_at_eof.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0040_unclosed_raw_byte_string_at_eof.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_BYTE_STRING 5 \"br##\\\"\"\n+BYTE_STRING 5 \"br##\\\"\"\n > error0..5 token(\"br##\\\"\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "b6c938f94e9c3a2cc76a5cbe31caae849fa3722e", "filename": "crates/syntax/test_data/lexer/err/0041_unclosed_raw_byte_string_with_ferris.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0041_unclosed_raw_byte_string_with_ferris.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_BYTE_STRING 9 \"br##\\\"\ud83e\udd80\"\n+BYTE_STRING 9 \"br##\\\"\ud83e\udd80\"\n > error0..9 token(\"br##\\\"\ud83e\udd80\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "f82efe49acc70101a1a70f84fae4ca94ff9dddf2", "filename": "crates/syntax/test_data/lexer/err/0042_unclosed_raw_byte_string_with_ascii_escape.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0042_unclosed_raw_byte_string_with_ascii_escape.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_BYTE_STRING 9 \"br##\\\"\\\\x7f\"\n+BYTE_STRING 9 \"br##\\\"\\\\x7f\"\n > error0..9 token(\"br##\\\"\\\\x7f\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "4e4a576961a19c85b43eba7647058b1b405b71d8", "filename": "crates/syntax/test_data/lexer/err/0043_unclosed_raw_byte_string_with_unicode_escape.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0043_unclosed_raw_byte_string_with_unicode_escape.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_BYTE_STRING 13 \"br##\\\"\\\\u{20AA}\"\n+BYTE_STRING 13 \"br##\\\"\\\\u{20AA}\"\n > error0..13 token(\"br##\\\"\\\\u{20AA}\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "0018c8623c2eaee4987f8a982b9484a2aafd671b", "filename": "crates/syntax/test_data/lexer/err/0044_unclosed_raw_byte_string_with_space.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0044_unclosed_raw_byte_string_with_space.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_BYTE_STRING 6 \"br##\\\" \"\n+BYTE_STRING 6 \"br##\\\" \"\n > error0..6 token(\"br##\\\" \") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "c3ba4ae82b8a75cdb5a62df6753495f9aba8cbe2", "filename": "crates/syntax/test_data/lexer/err/0045_unclosed_raw_byte_string_with_slash.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0045_unclosed_raw_byte_string_with_slash.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_BYTE_STRING 6 \"br##\\\"\\\\\"\n+BYTE_STRING 6 \"br##\\\"\\\\\"\n > error0..6 token(\"br##\\\"\\\\\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "7bda72276fe7679c5668a7dca65e38e5526c29c5", "filename": "crates/syntax/test_data/lexer/err/0046_unclosed_raw_byte_string_with_slash_n.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0046_unclosed_raw_byte_string_with_slash_n.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_BYTE_STRING 7 \"br##\\\"\\\\n\"\n+BYTE_STRING 7 \"br##\\\"\\\\n\"\n > error0..7 token(\"br##\\\"\\\\n\") msg(Missing trailing `\"` with `#` symbols to terminate the raw byte string literal)"}, {"sha": "ce92d2ff75b6358df3e9149c952220f4a4197c27", "filename": "crates/syntax/test_data/lexer/err/0047_unstarted_raw_string_at_eof.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0047_unstarted_raw_string_at_eof.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 3 \"r##\"\n+STRING 3 \"r##\"\n > error0..3 token(\"r##\") msg(Missing `\"` symbol after `#` symbols to begin the raw string literal)"}, {"sha": "a75d9030c4dbd5609a7bb51cb74e97f0395af84d", "filename": "crates/syntax/test_data/lexer/err/0048_unstarted_raw_byte_string_at_eof.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0048_unstarted_raw_byte_string_at_eof.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_BYTE_STRING 4 \"br##\"\n+BYTE_STRING 4 \"br##\"\n > error0..4 token(\"br##\") msg(Missing `\"` symbol after `#` symbols to begin the raw byte string literal)"}, {"sha": "516e0b78ed03f6de4e44442c1dff4c483d3576ba", "filename": "crates/syntax/test_data/lexer/err/0049_unstarted_raw_string_with_ascii.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0049_unstarted_raw_string_with_ascii.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,4 +1,4 @@\n-RAW_STRING 4 \"r## \"\n+STRING 4 \"r## \"\n IDENT 1 \"I\"\n WHITESPACE 1 \" \"\n IDENT 4 \"lack\""}, {"sha": "2f8a6f5f29fd7b3c481d2db2154e3a303527e128", "filename": "crates/syntax/test_data/lexer/err/0050_unstarted_raw_byte_string_with_ascii.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0050_unstarted_raw_byte_string_with_ascii.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,4 +1,4 @@\n-RAW_BYTE_STRING 5 \"br## \"\n+BYTE_STRING 5 \"br## \"\n IDENT 1 \"I\"\n WHITESPACE 1 \" \"\n IDENT 4 \"lack\""}, {"sha": "e61ad99bef5fd008f6e6cf5a2111ed3f6f3ae042", "filename": "crates/syntax/test_data/lexer/ok/0008_byte_strings.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0008_byte_strings.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -4,13 +4,13 @@ BYTE 4 \"b\\'x\\'\"\n WHITESPACE 1 \" \"\n BYTE_STRING 6 \"b\\\"foo\\\"\"\n WHITESPACE 1 \" \"\n-RAW_BYTE_STRING 4 \"br\\\"\\\"\"\n+BYTE_STRING 4 \"br\\\"\\\"\"\n WHITESPACE 1 \"\\n\"\n BYTE 6 \"b\\'\\'suf\"\n WHITESPACE 1 \" \"\n BYTE_STRING 5 \"b\\\"\\\"ix\"\n WHITESPACE 1 \" \"\n-RAW_BYTE_STRING 6 \"br\\\"\\\"br\"\n+BYTE_STRING 6 \"br\\\"\\\"br\"\n WHITESPACE 1 \"\\n\"\n BYTE 5 \"b\\'\\\\n\\'\"\n WHITESPACE 1 \" \""}, {"sha": "988a8877bd7265ec691ba6fb1e000c46d46dfaf5", "filename": "crates/syntax/test_data/lexer/ok/0009_strings.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0009_strings.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,6 +1,6 @@\n STRING 7 \"\\\"hello\\\"\"\n WHITESPACE 1 \" \"\n-RAW_STRING 8 \"r\\\"world\\\"\"\n+STRING 8 \"r\\\"world\\\"\"\n WHITESPACE 1 \" \"\n STRING 17 \"\\\"\\\\n\\\\\\\"\\\\\\\\no escape\\\"\"\n WHITESPACE 1 \" \""}, {"sha": "db0d5ffd1435fc56f2bef058bfb909cd8d6b8a24", "filename": "crates/syntax/test_data/lexer/ok/0013_raw_strings.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0013_raw_strings.txt?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -1,2 +1,2 @@\n-RAW_STRING 36 \"r###\\\"this is a r##\\\"raw\\\"## string\\\"###\"\n+STRING 36 \"r###\\\"this is a r##\\\"raw\\\"## string\\\"###\"\n WHITESPACE 1 \"\\n\""}, {"sha": "ae838105d05e915635f79bed38dbb3882ca43d39", "filename": "crates/syntax/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -104,7 +104,7 @@ SOURCE_FILE@0..189\n         EQ@142..143 \"=\"\n         WHITESPACE@143..144 \" \"\n         LITERAL@144..148\n-          RAW_STRING@144..148 \"r\\\"d\\\"\"\n+          STRING@144..148 \"r\\\"d\\\"\"\n         SEMICOLON@148..149 \";\"\n       WHITESPACE@149..154 \"\\n    \"\n       LET_STMT@154..167\n@@ -128,7 +128,7 @@ SOURCE_FILE@0..189\n         EQ@178..179 \"=\"\n         WHITESPACE@179..180 \" \"\n         LITERAL@180..185\n-          RAW_BYTE_STRING@180..185 \"br\\\"f\\\"\"\n+          BYTE_STRING@180..185 \"br\\\"f\\\"\"\n         SEMICOLON@185..186 \";\"\n       WHITESPACE@186..187 \"\\n\"\n       R_CURLY@187..188 \"}\""}, {"sha": "8ceaaf60eb40ee54ad4912f2b9034b00c8382d56", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -71,16 +71,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\"],\n-    literals: &[\n-        \"INT_NUMBER\",\n-        \"FLOAT_NUMBER\",\n-        \"CHAR\",\n-        \"BYTE\",\n-        \"STRING\",\n-        \"RAW_STRING\",\n-        \"BYTE_STRING\",\n-        \"RAW_BYTE_STRING\",\n-    ],\n+    literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n     tokens: &[\n         \"ERROR\",\n         \"IDENT\","}, {"sha": "44460effa83f1300a2444137f5810b6225eb6c04", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f12a1f225c7d3397f27964ce039b55d680772d3/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f12a1f225c7d3397f27964ce039b55d680772d3/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=7f12a1f225c7d3397f27964ce039b55d680772d3", "patch": "@@ -505,7 +505,7 @@ impl Field {\n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc::default();\n \n-    res.tokens = \"Whitespace Comment String RawString IntNumber FloatNumber\"\n+    res.tokens = \"Whitespace Comment String ByteString IntNumber FloatNumber\"\n         .split_ascii_whitespace()\n         .map(|it| it.to_string())\n         .collect::<Vec<_>>();"}]}