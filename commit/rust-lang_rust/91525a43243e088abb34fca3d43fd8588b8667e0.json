{"sha": "91525a43243e088abb34fca3d43fd8588b8667e0", "node_id": "C_kwDOAAsO6NoAKDkxNTI1YTQzMjQzZTA4OGFiYjM0ZmNhM2Q0M2ZkODU4OGI4NjY3ZTA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-24T17:11:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T17:17:07Z"}, "message": "Use ErrorGuaranteed more in MIR type ops", "tree": {"sha": "c050a71b1d9b243a49bad1fe68920e2ef418e1c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c050a71b1d9b243a49bad1fe68920e2ef418e1c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91525a43243e088abb34fca3d43fd8588b8667e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91525a43243e088abb34fca3d43fd8588b8667e0", "html_url": "https://github.com/rust-lang/rust/commit/91525a43243e088abb34fca3d43fd8588b8667e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91525a43243e088abb34fca3d43fd8588b8667e0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cade26637fe1c23965ce644299ed5200db7c92dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cade26637fe1c23965ce644299ed5200db7c92dd", "html_url": "https://github.com/rust-lang/rust/commit/cade26637fe1c23965ce644299ed5200db7c92dd"}], "stats": {"total": 211, "additions": 104, "deletions": 107}, "files": [{"sha": "f527eee7bda054f217087d039864942e803139f8", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=91525a43243e088abb34fca3d43fd8588b8667e0", "patch": "@@ -1,12 +1,12 @@\n use std::fmt;\n \n+use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::canonical::Canonical;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOpOutput};\n-use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::ObligationCause;\n \n use crate::diagnostics::{ToUniverseInfo, UniverseInfo};\n@@ -30,14 +30,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         locations: Locations,\n         category: ConstraintCategory<'tcx>,\n         op: Op,\n-    ) -> Fallible<R>\n+    ) -> Result<R, ErrorGuaranteed>\n     where\n         Op: type_op::TypeOp<'tcx, Output = R>,\n         Op::ErrorInfo: ToUniverseInfo<'tcx>,\n     {\n         let old_universe = self.infcx.universe();\n \n-        let TypeOpOutput { output, constraints, error_info } = op.fully_perform(self.infcx)?;\n+        let TypeOpOutput { output, constraints, error_info } =\n+            op.fully_perform(self.infcx, locations.span(self.body))?;\n \n         debug!(?output, ?constraints);\n \n@@ -135,14 +136,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     ) {\n         let param_env = self.param_env;\n         let predicate = predicate.to_predicate(self.tcx());\n-        self.fully_perform_op(\n+        let _: Result<_, ErrorGuaranteed> = self.fully_perform_op(\n             locations,\n             category,\n             param_env.and(type_op::prove_predicate::ProvePredicate::new(predicate)),\n-        )\n-        .unwrap_or_else(|NoSolution| {\n-            span_mirbug!(self, NoSolution, \"could not prove {:?}\", predicate);\n-        })\n+        );\n     }\n \n     pub(super) fn normalize<T>(&mut self, value: T, location: impl NormalizeLocation) -> T\n@@ -163,15 +161,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         T: type_op::normalize::Normalizable<'tcx> + fmt::Display + Copy + 'tcx,\n     {\n         let param_env = self.param_env;\n-        self.fully_perform_op(\n+        let result: Result<_, ErrorGuaranteed> = self.fully_perform_op(\n             location.to_locations(),\n             category,\n             param_env.and(type_op::normalize::Normalize::new(value)),\n-        )\n-        .unwrap_or_else(|NoSolution| {\n-            span_mirbug!(self, NoSolution, \"failed to normalize `{:?}`\", value);\n-            value\n-        })\n+        );\n+        result.unwrap_or(value)\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n@@ -181,18 +176,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         user_ty: ty::UserType<'tcx>,\n         span: Span,\n     ) {\n-        self.fully_perform_op(\n+        let _: Result<_, ErrorGuaranteed> = self.fully_perform_op(\n             Locations::All(span),\n             ConstraintCategory::Boring,\n             self.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(mir_ty, user_ty)),\n-        )\n-        .unwrap_or_else(|err| {\n-            span_mirbug!(\n-                self,\n-                span,\n-                \"ascribe_user_type `{mir_ty:?}=={user_ty:?}` failed with `{err:?}`\",\n-            );\n-        });\n+        );\n     }\n \n     /// *Incorrectly* skips the WF checks we normally do in `ascribe_user_type`.\n@@ -219,7 +207,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n         let cause = ObligationCause::dummy_with_span(span);\n         let param_env = self.param_env;\n-        self.fully_perform_op(\n+        let _: Result<_, ErrorGuaranteed> = self.fully_perform_op(\n             Locations::All(span),\n             ConstraintCategory::Boring,\n             type_op::custom::CustomTypeOp::new(\n@@ -230,13 +218,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 },\n                 \"ascribe_user_type_skip_wf\",\n             ),\n-        )\n-        .unwrap_or_else(|err| {\n-            span_mirbug!(\n-                self,\n-                span,\n-                \"ascribe_user_type_skip_wf `{mir_ty:?}=={user_ty:?}` failed with `{err:?}`\",\n-            );\n-        });\n+        );\n     }\n }"}, {"sha": "c8ec1257d376ef4faf78995507244cd60b111f14", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=91525a43243e088abb34fca3d43fd8588b8667e0", "patch": "@@ -8,7 +8,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::query::OutlivesBound;\n use rustc_middle::ty::{self, RegionVid, Ty};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n use std::rc::Rc;\n use type_op::TypeOpOutput;\n@@ -243,18 +243,11 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n             let TypeOpOutput { output: norm_ty, constraints: constraints_normalize, .. } = self\n                 .param_env\n                 .and(type_op::normalize::Normalize::new(ty))\n-                .fully_perform(self.infcx)\n-                .unwrap_or_else(|_| {\n-                    let guar = self\n-                        .infcx\n-                        .tcx\n-                        .sess\n-                        .delay_span_bug(span, format!(\"failed to normalize {:?}\", ty));\n-                    TypeOpOutput {\n-                        output: self.infcx.tcx.ty_error(guar),\n-                        constraints: None,\n-                        error_info: None,\n-                    }\n+                .fully_perform(self.infcx, span)\n+                .unwrap_or_else(|guar| TypeOpOutput {\n+                    output: self.infcx.tcx.ty_error(guar),\n+                    constraints: None,\n+                    error_info: None,\n                 });\n             if let Some(c) = constraints_normalize {\n                 constraints.push(c)\n@@ -324,7 +317,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n         let TypeOpOutput { output: bounds, constraints, .. } = self\n             .param_env\n             .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n-            .fully_perform(self.infcx)\n+            .fully_perform(self.infcx, DUMMY_SP)\n             .unwrap_or_else(|_| bug!(\"failed to compute implied bounds {:?}\", ty));\n         debug!(?bounds, ?constraints);\n         self.add_outlives_bounds(bounds);"}, {"sha": "fd94ac86d7dc2729f4e593304c273bccff802837", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=91525a43243e088abb34fca3d43fd8588b8667e0", "patch": "@@ -4,6 +4,7 @@ use rustc_index::interval::IntervalSet;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_middle::mir::{BasicBlock, Body, ConstraintCategory, Local, Location};\n use rustc_middle::ty::{Ty, TyCtxt, TypeVisitable, TypeVisitableExt};\n+use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n@@ -568,10 +569,15 @@ impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     ) -> DropData<'tcx> {\n         debug!(\"compute_drop_data(dropped_ty={:?})\", dropped_ty,);\n \n-        let param_env = typeck.param_env;\n-        let TypeOpOutput { output, constraints, .. } =\n-            param_env.and(DropckOutlives::new(dropped_ty)).fully_perform(typeck.infcx).unwrap();\n-\n-        DropData { dropck_result: output, region_constraint_data: constraints }\n+        match typeck\n+            .param_env\n+            .and(DropckOutlives::new(dropped_ty))\n+            .fully_perform(typeck.infcx, DUMMY_SP)\n+        {\n+            Ok(TypeOpOutput { output, constraints, .. }) => {\n+                DropData { dropck_result: output, region_constraint_data: constraints }\n+            }\n+            Err(_) => DropData { dropck_result: Default::default(), region_constraint_data: None },\n+        }\n     }\n }"}, {"sha": "b2693e6054674c504fb3946e75d4899d7b9d00c5", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=91525a43243e088abb34fca3d43fd8588b8667e0", "patch": "@@ -10,6 +10,7 @@ use either::Either;\n use hir::OpaqueTyOrigin;\n use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n@@ -216,24 +217,22 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     let opaque_type_values = opaque_type_values\n         .into_iter()\n         .map(|(opaque_type_key, decl)| {\n-            checker\n-                .fully_perform_op(\n-                    Locations::All(body.span),\n-                    ConstraintCategory::OpaqueType,\n-                    CustomTypeOp::new(\n-                        |ocx| {\n-                            ocx.infcx.register_member_constraints(\n-                                param_env,\n-                                opaque_type_key,\n-                                decl.hidden_type.ty,\n-                                decl.hidden_type.span,\n-                            );\n-                            Ok(())\n-                        },\n-                        \"opaque_type_map\",\n-                    ),\n-                )\n-                .unwrap();\n+            let _: Result<_, ErrorGuaranteed> = checker.fully_perform_op(\n+                Locations::All(body.span),\n+                ConstraintCategory::OpaqueType,\n+                CustomTypeOp::new(\n+                    |ocx| {\n+                        ocx.infcx.register_member_constraints(\n+                            param_env,\n+                            opaque_type_key,\n+                            decl.hidden_type.ty,\n+                            decl.hidden_type.span,\n+                        );\n+                        Ok(())\n+                    },\n+                    \"opaque_type_map\",\n+                ),\n+            );\n             let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n             trace!(\"finalized opaque type {:?} to {:#?}\", opaque_type_key, hidden_type.ty.kind());\n             if hidden_type.has_non_region_infer() {\n@@ -2755,11 +2754,20 @@ impl<'tcx> TypeOp<'tcx> for InstantiateOpaqueType<'tcx> {\n     /// constraints in our `InferCtxt`\n     type ErrorInfo = InstantiateOpaqueType<'tcx>;\n \n-    fn fully_perform(mut self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n-        let (mut output, region_constraints) = scrape_region_constraints(infcx, |ocx| {\n-            ocx.register_obligations(self.obligations.clone());\n-            Ok(())\n-        })?;\n+    fn fully_perform(\n+        mut self,\n+        infcx: &InferCtxt<'tcx>,\n+        span: Span,\n+    ) -> Result<TypeOpOutput<'tcx, Self>, ErrorGuaranteed> {\n+        let (mut output, region_constraints) = scrape_region_constraints(\n+            infcx,\n+            |ocx| {\n+                ocx.register_obligations(self.obligations.clone());\n+                Ok(())\n+            },\n+            \"InstantiateOpaqueType\",\n+            span,\n+        )?;\n         self.region_constraints = Some(region_constraints);\n         output.error_info = Some(self);\n         Ok(output)"}, {"sha": "6f3451d56574e8e302838b0ebd3b2fb5cf2cd657", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=91525a43243e088abb34fca3d43fd8588b8667e0", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::nll_relate::{TypeRelating, TypeRelatingDelegate};\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_infer::traits::PredicateObligations;\n@@ -185,7 +186,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n     }\n \n     fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n-        match self.type_checker.fully_perform_op(\n+        let _: Result<_, ErrorGuaranteed> = self.type_checker.fully_perform_op(\n             self.locations,\n             self.category,\n             InstantiateOpaqueType {\n@@ -194,16 +195,6 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n                 base_universe: None,\n                 region_constraints: None,\n             },\n-        ) {\n-            Ok(()) => {}\n-            Err(_) => {\n-                // It's a bit redundant to delay a bug here, but I'd rather\n-                // delay more bugs than accidentally not delay a bug at all.\n-                self.type_checker.tcx().sess.delay_span_bug(\n-                    self.locations.span(self.type_checker.body),\n-                    \"errors selecting obligation during MIR typeck\",\n-                );\n-            }\n-        };\n+        );\n     }\n }"}, {"sha": "0e797a1cb60d58189f5753ec3c10baf8867e4d25", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=91525a43243e088abb34fca3d43fd8588b8667e0", "patch": "@@ -1,8 +1,8 @@\n use crate::infer::InferCtxt;\n use crate::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n-use crate::traits::query::NoSolution;\n use crate::traits::{ObligationCause, ObligationCtxt};\n use rustc_data_structures::fx::FxIndexSet;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::{self, ParamEnv, Ty, TypeFolder, TypeVisitableExt};\n use rustc_span::def_id::LocalDefId;\n@@ -69,16 +69,12 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n         }\n \n         let span = self.tcx.def_span(body_id);\n-        let result = param_env\n+        let result: Result<_, ErrorGuaranteed> = param_env\n             .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n-            .fully_perform(self);\n+            .fully_perform(self, span);\n         let result = match result {\n             Ok(r) => r,\n-            Err(NoSolution) => {\n-                self.tcx.sess.delay_span_bug(\n-                    span,\n-                    \"implied_outlives_bounds failed to solve all obligations\",\n-                );\n+            Err(_) => {\n                 return vec![];\n             }\n         };"}, {"sha": "94464895f3b2e9e64a3025b650c8e8df650f5fc8", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=91525a43243e088abb34fca3d43fd8588b8667e0", "patch": "@@ -3,9 +3,10 @@ use crate::infer::InferCtxt;\n use crate::traits::query::type_op::TypeOpOutput;\n use crate::traits::query::Fallible;\n use crate::traits::ObligationCtxt;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::region_constraints::RegionConstraintData;\n-use rustc_middle::traits::query::NoSolution;\n use rustc_span::source_map::DUMMY_SP;\n+use rustc_span::Span;\n \n use std::fmt;\n \n@@ -35,12 +36,16 @@ where\n     /// Processes the operation and all resulting obligations,\n     /// returning the final result along with any region constraints\n     /// (they will be given over to the NLL region solver).\n-    fn fully_perform(self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n+    fn fully_perform(\n+        self,\n+        infcx: &InferCtxt<'tcx>,\n+        span: Span,\n+    ) -> Result<TypeOpOutput<'tcx, Self>, ErrorGuaranteed> {\n         if cfg!(debug_assertions) {\n             info!(\"fully_perform({:?})\", self);\n         }\n \n-        Ok(scrape_region_constraints(infcx, self.closure)?.0)\n+        Ok(scrape_region_constraints(infcx, self.closure, self.description, span)?.0)\n     }\n }\n \n@@ -55,7 +60,9 @@ impl<F> fmt::Debug for CustomTypeOp<F> {\n pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n     infcx: &InferCtxt<'tcx>,\n     op: impl FnOnce(&ObligationCtxt<'_, 'tcx>) -> Fallible<R>,\n-) -> Fallible<(TypeOpOutput<'tcx, Op>, RegionConstraintData<'tcx>)> {\n+    name: &'static str,\n+    span: Span,\n+) -> Result<(TypeOpOutput<'tcx, Op>, RegionConstraintData<'tcx>), ErrorGuaranteed> {\n     // During NLL, we expect that nobody will register region\n     // obligations **except** as part of a custom type op (and, at the\n     // end of each custom type op, we scrape out the region\n@@ -70,16 +77,17 @@ pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n \n     let value = infcx.commit_if_ok(|_| {\n         let ocx = ObligationCtxt::new_in_snapshot(infcx);\n-        let value = op(&ocx)?;\n+        let value = op(&ocx).map_err(|_| {\n+            infcx.tcx.sess.delay_span_bug(span, format!(\"error performing operation: {name}\"))\n+        })?;\n         let errors = ocx.select_all_or_error();\n         if errors.is_empty() {\n             Ok(value)\n         } else {\n-            infcx.tcx.sess.delay_span_bug(\n+            Err(infcx.tcx.sess.delay_span_bug(\n                 DUMMY_SP,\n                 format!(\"errors selecting obligation during MIR typeck: {:?}\", errors),\n-            );\n-            Err(NoSolution)\n+            ))\n         }\n     })?;\n "}, {"sha": "a34ea3fb3dd30a7e9e887687d71d1b85c3007d91", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91525a43243e088abb34fca3d43fd8588b8667e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=91525a43243e088abb34fca3d43fd8588b8667e0", "patch": "@@ -4,11 +4,12 @@ use crate::infer::canonical::{\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::query::Fallible;\n use crate::traits::ObligationCause;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::canonical::Certainty;\n-use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::PredicateObligations;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n+use rustc_span::Span;\n use std::fmt;\n \n pub mod ascribe_user_type;\n@@ -32,7 +33,11 @@ pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n     /// Processes the operation and all resulting obligations,\n     /// returning the final result along with any region constraints\n     /// (they will be given over to the NLL region solver).\n-    fn fully_perform(self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>>;\n+    fn fully_perform(\n+        self,\n+        infcx: &InferCtxt<'tcx>,\n+        span: Span,\n+    ) -> Result<TypeOpOutput<'tcx, Self>, ErrorGuaranteed>;\n }\n \n /// The output from performing a type op\n@@ -120,10 +125,16 @@ where\n     type Output = Q::QueryResponse;\n     type ErrorInfo = Canonical<'tcx, ParamEnvAnd<'tcx, Q>>;\n \n-    fn fully_perform(self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n+    fn fully_perform(\n+        self,\n+        infcx: &InferCtxt<'tcx>,\n+        span: Span,\n+    ) -> Result<TypeOpOutput<'tcx, Self>, ErrorGuaranteed> {\n         let mut region_constraints = QueryRegionConstraints::default();\n         let (output, error_info, mut obligations, _) =\n-            Q::fully_perform_into(self, infcx, &mut region_constraints)?;\n+            Q::fully_perform_into(self, infcx, &mut region_constraints).map_err(|_| {\n+                infcx.tcx.sess.delay_span_bug(span, format!(\"error performing {self:?}\"))\n+            })?;\n \n         // Typically, instantiating NLL query results does not\n         // create obligations. However, in some cases there\n@@ -151,7 +162,10 @@ where\n                 }\n             }\n             if !progress {\n-                return Err(NoSolution);\n+                return Err(infcx.tcx.sess.delay_span_bug(\n+                    span,\n+                    format!(\"ambiguity processing {obligations:?} from {self:?}\"),\n+                ));\n             }\n         }\n "}]}