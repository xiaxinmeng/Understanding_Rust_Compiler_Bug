{"sha": "2ce9b574a40ff27980578aa7ad7843dacc32acb7", "node_id": "C_kwDOAAsO6NoAKDJjZTliNTc0YTQwZmYyNzk4MDU3OGFhN2FkNzg0M2RhY2MzMmFjYjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-24T05:53:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-24T05:53:25Z"}, "message": "Rollup merge of #110714 - cjgillot:reveal-consts, r=oli-obk\n\nNormalize types and consts in MIR opts.\n\nSome passes were using a non-RevealAll param_env, which is needlessly restrictive in mir-opts.\n\nAs a drive-by, we normalize all constants, since just normalizing their types is not enough.", "tree": {"sha": "e29965e59cfdd41bd229d7142a55d549965122f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29965e59cfdd41bd229d7142a55d549965122f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ce9b574a40ff27980578aa7ad7843dacc32acb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkRhlVCRBK7hj4Ov3rIwAAt5sIAESHV+td10FyGH5aV3Mirdc4\nE1INN1E32EcR8ONnfyB1rTTYr6r6yar5Grjhi/MtLDRApq/13d2itAvS59eeqXkp\nuEnpbRai0wuJ03p0p0MYwpoPEdLO/NYnOVE3kxFdtGKcI1xXOpcVIRLISEefybUR\nEmIdzok1KLhbRWMiJGNXFx45NmzTKw4TP6j+rWjqdOKURhIOHpgkwtyTTOCywRYM\n8QWqzjHzujr58EDQfh3hu6P4rLBtPQvA5o+n82BLzgcbnAR9Qp+F4O6/pLuXP+VT\nQKEzglwIqfHe+sbX93SFajTqiU0SZdXA+YHd8oDkbnJSCiGeu1rGzIHsIa2eu4Y=\n=q+GQ\n-----END PGP SIGNATURE-----\n", "payload": "tree e29965e59cfdd41bd229d7142a55d549965122f3\nparent 3ecae2932ccba4744a70da52dfb0930bcf8e902a\nparent 4fe51365d7a58b34ad0fb0e9b0d2523920743d1d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682315605 +0200\ncommitter GitHub <noreply@github.com> 1682315605 +0200\n\nRollup merge of #110714 - cjgillot:reveal-consts, r=oli-obk\n\nNormalize types and consts in MIR opts.\n\nSome passes were using a non-RevealAll param_env, which is needlessly restrictive in mir-opts.\n\nAs a drive-by, we normalize all constants, since just normalizing their types is not enough.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce9b574a40ff27980578aa7ad7843dacc32acb7", "html_url": "https://github.com/rust-lang/rust/commit/2ce9b574a40ff27980578aa7ad7843dacc32acb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ce9b574a40ff27980578aa7ad7843dacc32acb7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ecae2932ccba4744a70da52dfb0930bcf8e902a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ecae2932ccba4744a70da52dfb0930bcf8e902a", "html_url": "https://github.com/rust-lang/rust/commit/3ecae2932ccba4744a70da52dfb0930bcf8e902a"}, {"sha": "4fe51365d7a58b34ad0fb0e9b0d2523920743d1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe51365d7a58b34ad0fb0e9b0d2523920743d1d", "html_url": "https://github.com/rust-lang/rust/commit/4fe51365d7a58b34ad0fb0e9b0d2523920743d1d"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "c0861f99620d1faddf629f93b694d6e565ae3e77", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=2ce9b574a40ff27980578aa7ad7843dacc32acb7", "patch": "@@ -323,7 +323,7 @@ impl<'tcx> std::fmt::Debug for ScalarTy<'tcx> {\n \n impl<'a, 'tcx> ConstAnalysis<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, map: Map) -> Self {\n-        let param_env = tcx.param_env(body.source.def_id());\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         Self {\n             map,\n             tcx,"}, {"sha": "430a6f6cef5be4cb0c38fb2828fbfe931f3090fc", "filename": "compiler/rustc_mir_transform/src/large_enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs?ref=2ce9b574a40ff27980578aa7ad7843dacc32acb7", "patch": "@@ -120,7 +120,7 @@ impl EnumSizeOpt {\n     fn optim<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let mut alloc_cache = FxHashMap::default();\n         let body_did = body.source.def_id();\n-        let param_env = tcx.param_env(body_did);\n+        let param_env = tcx.param_env_reveal_all_normalized(body_did);\n \n         let blocks = body.basic_blocks.as_mut();\n         let local_decls = &mut body.local_decls;"}, {"sha": "59942dc76f9aa9c836f6a20116f27ad2b4ea2d01", "filename": "compiler/rustc_mir_transform/src/match_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs?ref=2ce9b574a40ff27980578aa7ad7843dacc32acb7", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n-        let param_env = tcx.param_env(def_id);\n+        let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n         let bbs = body.basic_blocks.as_mut();\n         let mut should_cleanup = false;"}, {"sha": "23442f8b97b7ee0a74fcb8243fd1a5dc7aa883bb", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=2ce9b574a40ff27980578aa7ad7843dacc32acb7", "patch": "@@ -34,11 +34,23 @@ impl<'tcx> MutVisitor<'tcx> for RevealAllVisitor<'tcx> {\n         self.tcx\n     }\n \n+    #[inline]\n+    fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _: Location) {\n+        // We have to use `try_normalize_erasing_regions` here, since it's\n+        // possible that we visit impossible-to-satisfy where clauses here,\n+        // see #91745\n+        if let Ok(c) = self.tcx.try_normalize_erasing_regions(self.param_env, constant.literal) {\n+            constant.literal = c;\n+        }\n+    }\n+\n     #[inline]\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n         // We have to use `try_normalize_erasing_regions` here, since it's\n         // possible that we visit impossible-to-satisfy where clauses here,\n         // see #91745\n-        *ty = self.tcx.try_normalize_erasing_regions(self.param_env, *ty).unwrap_or(*ty);\n+        if let Ok(t) = self.tcx.try_normalize_erasing_regions(self.param_env, *ty) {\n+            *ty = t;\n+        }\n     }\n }"}, {"sha": "d4debae5c581a9004a46874bdd33754372730f3a", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=2ce9b574a40ff27980578aa7ad7843dacc32acb7", "patch": "@@ -355,7 +355,7 @@ fn build_thread_local_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'t\n fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -> Body<'tcx> {\n     debug!(\"build_clone_shim(def_id={:?})\", def_id);\n \n-    let param_env = tcx.param_env(def_id);\n+    let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n     let mut builder = CloneShimBuilder::new(tcx, def_id, self_ty);\n     let is_copy = self_ty.is_copy_modulo_regions(tcx, param_env);\n@@ -836,7 +836,7 @@ fn build_call_shim<'tcx>(\n pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n-    let param_env = tcx.param_env(ctor_id);\n+    let param_env = tcx.param_env_reveal_all_normalized(ctor_id);\n \n     // Normalize the sig.\n     let sig = tcx"}, {"sha": "1ff488169864bfe5ad8807b8d88c43b17a2f6cbf", "filename": "compiler/rustc_mir_transform/src/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs?ref=2ce9b574a40ff27980578aa7ad7843dacc32acb7", "patch": "@@ -16,7 +16,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyConstCondition {\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let param_env = tcx.param_env(body.source.def_id());\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         for block in body.basic_blocks_mut() {\n             let terminator = block.terminator_mut();\n             terminator.kind = match terminator.kind {"}, {"sha": "113ca2fc5ada5056cbc211cb4bc897426f2e1858", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=2ce9b574a40ff27980578aa7ad7843dacc32acb7", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyComparisonIntegral {\n         let opts = helper.find_optimizations();\n         let mut storage_deads_to_insert = vec![];\n         let mut storage_deads_to_remove: Vec<(usize, BasicBlock)> = vec![];\n-        let param_env = tcx.param_env(body.source.def_id());\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         for opt in opts {\n             trace!(\"SUCCESS: Applying {:?}\", opt);\n             // replace terminator with a switchInt that switches on the integer directly"}, {"sha": "5389b9f52eb2d43f0d42b6fdb4bebdf2117302c4", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce9b574a40ff27980578aa7ad7843dacc32acb7/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=2ce9b574a40ff27980578aa7ad7843dacc32acb7", "patch": "@@ -109,7 +109,9 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n                 continue;\n             };\n \n-            let layout = tcx.layout_of(tcx.param_env(body.source.def_id()).and(discriminant_ty));\n+            let layout = tcx.layout_of(\n+                tcx.param_env_reveal_all_normalized(body.source.def_id()).and(discriminant_ty),\n+            );\n \n             let allowed_variants = if let Ok(layout) = layout {\n                 variant_discriminants(&layout, discriminant_ty, tcx)"}]}