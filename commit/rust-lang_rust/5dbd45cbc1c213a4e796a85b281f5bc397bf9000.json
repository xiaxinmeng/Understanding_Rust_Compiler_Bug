{"sha": "5dbd45cbc1c213a4e796a85b281f5bc397bf9000", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYmQ0NWNiYzFjMjEzYTRlNzk2YTg1YjI4MWY1YmMzOTdiZjkwMDA=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-26T01:51:49Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-02-26T02:16:44Z"}, "message": "Improve needless_borrowed_ref docs", "tree": {"sha": "c1ee505085906c40b47c38ae3d110e3c491a9130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1ee505085906c40b47c38ae3d110e3c491a9130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dbd45cbc1c213a4e796a85b281f5bc397bf9000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dbd45cbc1c213a4e796a85b281f5bc397bf9000", "html_url": "https://github.com/rust-lang/rust/commit/5dbd45cbc1c213a4e796a85b281f5bc397bf9000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dbd45cbc1c213a4e796a85b281f5bc397bf9000/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5223be2e30a9d116b839bda418bec99d2949a68", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5223be2e30a9d116b839bda418bec99d2949a68", "html_url": "https://github.com/rust-lang/rust/commit/d5223be2e30a9d116b839bda418bec99d2949a68"}], "stats": {"total": 47, "additions": 18, "deletions": 29}, "files": [{"sha": "f449f397e7d6163e4f81ce25475ad21c3ac59e69", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5dbd45cbc1c213a4e796a85b281f5bc397bf9000/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbd45cbc1c213a4e796a85b281f5bc397bf9000/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=5dbd45cbc1c213a4e796a85b281f5bc397bf9000", "patch": "@@ -1,7 +1,3 @@\n-//! Checks for useless borrowed references.\n-//!\n-//! This lint is **warn** by default\n-\n use crate::utils::{snippet_with_applicability, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -10,44 +6,37 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for useless borrowed references.\n-    ///\n-    /// **Why is this bad?** It is mostly useless and make the code look more\n-    /// complex than it\n-    /// actually is.\n+    /// **What it does:** Checks for bindings that destructure a reference and borrow the inner\n+    /// value with `&ref`.\n     ///\n-    /// **Known problems:** It seems that the `&ref` pattern is sometimes useful.\n-    /// For instance in the following snippet:\n-    /// ```rust,ignore\n-    /// enum Animal {\n-    ///     Cat(u64),\n-    ///     Dog(u64),\n-    /// }\n+    /// **Why is this bad?** This pattern has no effect in almost all cases.\n     ///\n-    /// fn foo(a: &Animal, b: &Animal) {\n+    /// **Known problems:** In some cases, `&ref` is needed to avoid a lifetime mismatch error.\n+    /// Example:\n+    /// ```rust\n+    /// fn foo(a: &Option<String>, b: &Option<String>) {\n     ///     match (a, b) {\n-    ///         (&Animal::Cat(v), k) | (k, &Animal::Cat(v)) => (), // lifetime mismatch error\n-    ///         (&Animal::Dog(ref c), &Animal::Dog(_)) => ()\n-    ///     }\n+    ///         (None, &ref c) | (&ref c, None) => (),\n+    ///         (&Some(ref c), _) => (),\n+    ///     };\n     /// }\n     /// ```\n-    /// There is a lifetime mismatch error for `k` (indeed a and b have distinct\n-    /// lifetime).\n-    /// This can be fixed by using the `&ref` pattern.\n-    /// However, the code can also be fixed by much cleaner ways\n     ///\n     /// **Example:**\n+    /// Bad:\n     /// ```rust\n     /// let mut v = Vec::<String>::new();\n     /// let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n     /// ```\n-    /// This closure takes a reference on something that has been matched as a\n-    /// reference and\n-    /// de-referenced.\n-    /// As such, it could just be |a| a.is_empty()\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// let mut v = Vec::<String>::new();\n+    /// let _ = v.iter_mut().filter(|a| a.is_empty());\n+    /// ```\n     pub NEEDLESS_BORROWED_REFERENCE,\n     complexity,\n-    \"taking a needless borrowed reference\"\n+    \"destructuring a reference and borrowing the inner value\"\n }\n \n declare_lint_pass!(NeedlessBorrowedRef => [NEEDLESS_BORROWED_REFERENCE]);"}]}