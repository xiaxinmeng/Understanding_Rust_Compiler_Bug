{"sha": "4b8e9d5483005844e711e2f6191274c3c6ae1c4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOGU5ZDU0ODMwMDU4NDRlNzExZTJmNjE5MTI3NGMzYzZhZTFjNGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:25:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:26:27Z"}, "message": "Move tests to where they belong", "tree": {"sha": "e08cdee722389ccbb59749ff5f629ad6265e4208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e08cdee722389ccbb59749ff5f629ad6265e4208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b8e9d5483005844e711e2f6191274c3c6ae1c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8e9d5483005844e711e2f6191274c3c6ae1c4a", "html_url": "https://github.com/rust-lang/rust/commit/4b8e9d5483005844e711e2f6191274c3c6ae1c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b8e9d5483005844e711e2f6191274c3c6ae1c4a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "174952e89b891b20ea580f37e34389467fb9e23c", "url": "https://api.github.com/repos/rust-lang/rust/commits/174952e89b891b20ea580f37e34389467fb9e23c", "html_url": "https://github.com/rust-lang/rust/commit/174952e89b891b20ea580f37e34389467fb9e23c"}], "stats": {"total": 462, "additions": 231, "deletions": 231}, "files": [{"sha": "b93153b488fa81f76279df43e7daea3a3bc7e9eb", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 0, "deletions": 231, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/4b8e9d5483005844e711e2f6191274c3c6ae1c4a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8e9d5483005844e711e2f6191274c3c6ae1c4a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=4b8e9d5483005844e711e2f6191274c3c6ae1c4a", "patch": "@@ -105,237 +105,6 @@ mod tests {\n         );\n     }\n \n-    #[test]\n-    fn test_struct_field_completion_in_func_call() {\n-        assert_debug_snapshot!(\n-        do_ref_completion(\n-                r\"\n-                struct A { another_field: i64, the_field: u32, my_string: String }\n-                fn test(my_param: u32) -> u32 { my_param }\n-                fn foo(a: A) {\n-                    test(a.<|>)\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: [201; 201),\n-                delete: [201; 201),\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-            },\n-            CompletionItem {\n-                label: \"my_string\",\n-                source_range: [201; 201),\n-                delete: [201; 201),\n-                insert: \"my_string\",\n-                kind: Field,\n-                detail: \"{unknown}\",\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: [201; 201),\n-                delete: [201; 201),\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeMatch,\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn test_struct_field_completion_in_func_call_with_type_and_name() {\n-        assert_debug_snapshot!(\n-        do_ref_completion(\n-                r\"\n-                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n-                fn test(the_field: u32) -> u32 { the_field }\n-                fn foo(a: A) {\n-                    test(a.<|>)\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: [208; 208),\n-                delete: [208; 208),\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-            },\n-            CompletionItem {\n-                label: \"another_good_type\",\n-                source_range: [208; 208),\n-                delete: [208; 208),\n-                insert: \"another_good_type\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeMatch,\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: [208; 208),\n-                delete: [208; 208),\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeAndNameMatch,\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn test_struct_field_completion_in_record_lit() {\n-        assert_debug_snapshot!(\n-        do_ref_completion(\n-                r\"\n-                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n-                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n-                fn foo(a: A) {\n-                    let b = B {\n-                        the_field: a.<|>\n-                    };\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: [270; 270),\n-                delete: [270; 270),\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-            },\n-            CompletionItem {\n-                label: \"another_good_type\",\n-                source_range: [270; 270),\n-                delete: [270; 270),\n-                insert: \"another_good_type\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeMatch,\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: [270; 270),\n-                delete: [270; 270),\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeAndNameMatch,\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn test_struct_field_completion_in_record_lit_and_fn_call() {\n-        assert_debug_snapshot!(\n-        do_ref_completion(\n-                r\"\n-                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n-                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n-                fn test(the_field: i64) -> i64 { the_field }\n-                fn foo(a: A) {\n-                    let b = B {\n-                        the_field: test(a.<|>)\n-                    };\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: [336; 336),\n-                delete: [336; 336),\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-                score: TypeMatch,\n-            },\n-            CompletionItem {\n-                label: \"another_good_type\",\n-                source_range: [336; 336),\n-                delete: [336; 336),\n-                insert: \"another_good_type\",\n-                kind: Field,\n-                detail: \"u32\",\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: [336; 336),\n-                delete: [336; 336),\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn test_struct_field_completion_in_fn_call_and_record_lit() {\n-        assert_debug_snapshot!(\n-        do_ref_completion(\n-                r\"\n-                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n-                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n-                fn test(the_field: i64) -> i64 { the_field }\n-                fn foo(a: A) {\n-                    test(B {\n-                        the_field: a.<|>\n-                    });\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: [328; 328),\n-                delete: [328; 328),\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-            },\n-            CompletionItem {\n-                label: \"another_good_type\",\n-                source_range: [328; 328),\n-                delete: [328; 328),\n-                insert: \"another_good_type\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeMatch,\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: [328; 328),\n-                delete: [328; 328),\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeAndNameMatch,\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n     #[test]\n     fn test_struct_field_completion_self() {\n         assert_debug_snapshot!("}, {"sha": "ae15f91de055a88f8c8077e7691688d63691bec5", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/4b8e9d5483005844e711e2f6191274c3c6ae1c4a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8e9d5483005844e711e2f6191274c3c6ae1c4a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=4b8e9d5483005844e711e2f6191274c3c6ae1c4a", "patch": "@@ -1070,4 +1070,235 @@ mod tests {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn test_struct_field_completion_in_func_call() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+                r\"\n+                struct A { another_field: i64, the_field: u32, my_string: String }\n+                fn test(my_param: u32) -> u32 { my_param }\n+                fn foo(a: A) {\n+                    test(a.<|>)\n+                }\n+                \",\n+        ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"another_field\",\n+                source_range: [201; 201),\n+                delete: [201; 201),\n+                insert: \"another_field\",\n+                kind: Field,\n+                detail: \"i64\",\n+            },\n+            CompletionItem {\n+                label: \"my_string\",\n+                source_range: [201; 201),\n+                delete: [201; 201),\n+                insert: \"my_string\",\n+                kind: Field,\n+                detail: \"{unknown}\",\n+            },\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [201; 201),\n+                delete: [201; 201),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+                score: TypeMatch,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn test_struct_field_completion_in_func_call_with_type_and_name() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+                r\"\n+                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n+                fn test(the_field: u32) -> u32 { the_field }\n+                fn foo(a: A) {\n+                    test(a.<|>)\n+                }\n+                \",\n+        ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"another_field\",\n+                source_range: [208; 208),\n+                delete: [208; 208),\n+                insert: \"another_field\",\n+                kind: Field,\n+                detail: \"i64\",\n+            },\n+            CompletionItem {\n+                label: \"another_good_type\",\n+                source_range: [208; 208),\n+                delete: [208; 208),\n+                insert: \"another_good_type\",\n+                kind: Field,\n+                detail: \"u32\",\n+                score: TypeMatch,\n+            },\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [208; 208),\n+                delete: [208; 208),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+                score: TypeAndNameMatch,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn test_struct_field_completion_in_record_lit() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+                r\"\n+                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n+                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n+                fn foo(a: A) {\n+                    let b = B {\n+                        the_field: a.<|>\n+                    };\n+                }\n+                \",\n+        ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"another_field\",\n+                source_range: [270; 270),\n+                delete: [270; 270),\n+                insert: \"another_field\",\n+                kind: Field,\n+                detail: \"i64\",\n+            },\n+            CompletionItem {\n+                label: \"another_good_type\",\n+                source_range: [270; 270),\n+                delete: [270; 270),\n+                insert: \"another_good_type\",\n+                kind: Field,\n+                detail: \"u32\",\n+                score: TypeMatch,\n+            },\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [270; 270),\n+                delete: [270; 270),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+                score: TypeAndNameMatch,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn test_struct_field_completion_in_record_lit_and_fn_call() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+                r\"\n+                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n+                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n+                fn test(the_field: i64) -> i64 { the_field }\n+                fn foo(a: A) {\n+                    let b = B {\n+                        the_field: test(a.<|>)\n+                    };\n+                }\n+                \",\n+        ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"another_field\",\n+                source_range: [336; 336),\n+                delete: [336; 336),\n+                insert: \"another_field\",\n+                kind: Field,\n+                detail: \"i64\",\n+                score: TypeMatch,\n+            },\n+            CompletionItem {\n+                label: \"another_good_type\",\n+                source_range: [336; 336),\n+                delete: [336; 336),\n+                insert: \"another_good_type\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [336; 336),\n+                delete: [336; 336),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn test_struct_field_completion_in_fn_call_and_record_lit() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+                r\"\n+                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n+                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n+                fn test(the_field: i64) -> i64 { the_field }\n+                fn foo(a: A) {\n+                    test(B {\n+                        the_field: a.<|>\n+                    });\n+                }\n+                \",\n+        ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"another_field\",\n+                source_range: [328; 328),\n+                delete: [328; 328),\n+                insert: \"another_field\",\n+                kind: Field,\n+                detail: \"i64\",\n+            },\n+            CompletionItem {\n+                label: \"another_good_type\",\n+                source_range: [328; 328),\n+                delete: [328; 328),\n+                insert: \"another_good_type\",\n+                kind: Field,\n+                detail: \"u32\",\n+                score: TypeMatch,\n+            },\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [328; 328),\n+                delete: [328; 328),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+                score: TypeAndNameMatch,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}]}