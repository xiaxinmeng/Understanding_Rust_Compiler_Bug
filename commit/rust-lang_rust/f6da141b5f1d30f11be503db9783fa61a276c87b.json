{"sha": "f6da141b5f1d30f11be503db9783fa61a276c87b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZGExNDFiNWYxZDMwZjExYmU1MDNkYjk3ODNmYTYxYTI3NmM4N2I=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-14T18:50:49Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-22T16:22:30Z"}, "message": "Span fixup", "tree": {"sha": "a33a629b0941e1cf3fc27caaa1f7b0fab77f0724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a33a629b0941e1cf3fc27caaa1f7b0fab77f0724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6da141b5f1d30f11be503db9783fa61a276c87b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6da141b5f1d30f11be503db9783fa61a276c87b", "html_url": "https://github.com/rust-lang/rust/commit/f6da141b5f1d30f11be503db9783fa61a276c87b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6da141b5f1d30f11be503db9783fa61a276c87b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db2978a73cc4ab71c8839e70d12bc87d5279e632", "url": "https://api.github.com/repos/rust-lang/rust/commits/db2978a73cc4ab71c8839e70d12bc87d5279e632", "html_url": "https://github.com/rust-lang/rust/commit/db2978a73cc4ab71c8839e70d12bc87d5279e632"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "45c6c1b42496a052038d0758575bb509b2365c5c", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6da141b5f1d30f11be503db9783fa61a276c87b/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6da141b5f1d30f11be503db9783fa61a276c87b/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=f6da141b5f1d30f11be503db9783fa61a276c87b", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc::util::common::ErrorReported;\n \n use syntax::ast::Mutability;\n-use syntax::source_map::DUMMY_SP;\n+use syntax::source_map::{Span, DUMMY_SP};\n \n use crate::interpret::{self,\n     PlaceTy, MPlaceTy, MemPlace, OpTy, Operand, Immediate, Scalar, RawConst, ConstValue, Pointer,\n@@ -43,10 +43,11 @@ const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n /// parameter. These bounds are passed to `mk_eval_cx` via the `ParamEnv` argument.\n pub(crate) fn mk_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> CompileTimeEvalContext<'a, 'mir, 'tcx> {\n     debug!(\"mk_eval_cx: {:?}\", param_env);\n-    EvalContext::new(tcx.at(DUMMY_SP), param_env, CompileTimeInterpreter::new())\n+    EvalContext::new(tcx.at(span), param_env, CompileTimeInterpreter::new())\n }\n \n pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n@@ -55,7 +56,8 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n     mir: &'mir mir::Mir<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n-    let mut ecx = mk_eval_cx(tcx, param_env);\n+    let span = tcx.def_span(cid.instance.def_id());\n+    let mut ecx = mk_eval_cx(tcx, span, param_env);\n     eval_body_using_ecx(&mut ecx, cid, Some(mir), param_env)\n }\n \n@@ -481,7 +483,7 @@ pub fn const_field<'a, 'tcx>(\n     value: ty::Const<'tcx>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     trace!(\"const_field: {:?}, {:?}\", field, value);\n-    let ecx = mk_eval_cx(tcx, param_env);\n+    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n     let result = (|| {\n         // get the operand again\n         let op = lazy_const_to_op(&ecx, ty::LazyConst::Evaluated(value), value.ty)?;\n@@ -509,7 +511,7 @@ pub fn const_variant_index<'a, 'tcx>(\n     val: ty::Const<'tcx>,\n ) -> EvalResult<'tcx, VariantIdx> {\n     trace!(\"const_variant_index: {:?}\", val);\n-    let ecx = mk_eval_cx(tcx, param_env);\n+    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n     let op = lazy_const_to_op(&ecx, ty::LazyConst::Evaluated(val), val.ty)?;\n     Ok(ecx.read_discriminant(op)?.1)\n }\n@@ -529,7 +531,7 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     let cid = key.value;\n-    let ecx = mk_eval_cx(tcx, key.param_env);\n+    let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env);\n     let val = (|| {\n         let op = ecx.raw_const_to_mplace(constant)?.into();\n         // FIXME: Once the visitor infrastructure landed, change validation to"}, {"sha": "dc556a15cd8550fe0891bba8995997519f50d915", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6da141b5f1d30f11be503db9783fa61a276c87b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6da141b5f1d30f11be503db9783fa61a276c87b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f6da141b5f1d30f11be503db9783fa61a276c87b", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         source: MirSource,\n     ) -> ConstPropagator<'a, 'mir, 'tcx> {\n         let param_env = tcx.param_env(source.def_id);\n-        let ecx = mk_eval_cx(tcx, param_env);\n+        let ecx = mk_eval_cx(tcx, tcx.def_span(source.def_id), param_env);\n         ConstPropagator {\n             ecx,\n             mir,"}]}