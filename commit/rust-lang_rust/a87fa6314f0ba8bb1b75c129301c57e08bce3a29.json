{"sha": "a87fa6314f0ba8bb1b75c129301c57e08bce3a29", "node_id": "C_kwDOAAsO6NoAKGE4N2ZhNjMxNGYwYmE4YmIxYjc1YzEyOTMwMWM1N2UwOGJjZTNhMjk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-06T17:00:37Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-06T17:00:37Z"}, "message": "`mirror_expr` cleanup", "tree": {"sha": "ac7f2e80c43e18166b9f81e5db549d3f7199d410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac7f2e80c43e18166b9f81e5db549d3f7199d410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87fa6314f0ba8bb1b75c129301c57e08bce3a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87fa6314f0ba8bb1b75c129301c57e08bce3a29", "html_url": "https://github.com/rust-lang/rust/commit/a87fa6314f0ba8bb1b75c129301c57e08bce3a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87fa6314f0ba8bb1b75c129301c57e08bce3a29/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "html_url": "https://github.com/rust-lang/rust/commit/9714e139ffb25f3b96b28110ae81677c8c1a7cf2"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "147c136e651dd6ccf15dea84b0b5ab315c78e630", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a87fa6314f0ba8bb1b75c129301c57e08bce3a29/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87fa6314f0ba8bb1b75c129301c57e08bce3a29/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=a87fa6314f0ba8bb1b75c129301c57e08bce3a29", "patch": "@@ -158,6 +158,7 @@ impl<'tcx> Cx<'tcx> {\n     }\n \n     fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {\n+        let tcx = self.tcx;\n         let expr_ty = self.typeck_results().expr_ty(expr);\n         let expr_span = expr.span;\n         let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n@@ -196,7 +197,7 @@ impl<'tcx> Cx<'tcx> {\n \n                     let arg_tys = args.iter().map(|e| self.typeck_results().expr_ty_adjusted(e));\n                     let tupled_args = Expr {\n-                        ty: self.tcx.mk_tup(arg_tys),\n+                        ty: tcx.mk_tup(arg_tys),\n                         temp_lifetime,\n                         span: expr.span,\n                         kind: ExprKind::Tuple { fields: self.mirror_exprs(args) },\n@@ -488,24 +489,24 @@ impl<'tcx> Cx<'tcx> {\n                             out_expr: out_expr.as_ref().map(|expr| self.mirror_expr(expr)),\n                         },\n                         hir::InlineAsmOperand::Const { ref anon_const } => {\n-                            let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                            let anon_const_def_id = tcx.hir().local_def_id(anon_const.hir_id);\n                             let value = mir::ConstantKind::from_anon_const(\n-                                self.tcx,\n+                                tcx,\n                                 anon_const_def_id,\n                                 self.param_env,\n                             );\n-                            let span = self.tcx.hir().span(anon_const.hir_id);\n+                            let span = tcx.hir().span(anon_const.hir_id);\n \n                             InlineAsmOperand::Const { value, span }\n                         }\n                         hir::InlineAsmOperand::SymFn { ref anon_const } => {\n-                            let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                            let anon_const_def_id = tcx.hir().local_def_id(anon_const.hir_id);\n                             let value = mir::ConstantKind::from_anon_const(\n-                                self.tcx,\n+                                tcx,\n                                 anon_const_def_id,\n                                 self.param_env,\n                             );\n-                            let span = self.tcx.hir().span(anon_const.hir_id);\n+                            let span = tcx.hir().span(anon_const.hir_id);\n \n                             InlineAsmOperand::SymFn { value, span }\n                         }\n@@ -519,21 +520,16 @@ impl<'tcx> Cx<'tcx> {\n             },\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n-                let tcx = self.tcx;\n-                let local_def_id = tcx.hir().local_def_id(anon_const.hir_id);\n-                let anon_const_def_id = local_def_id.to_def_id();\n-\n-                // Need to include the parent substs\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(local_def_id);\n-                let ty = tcx.typeck(local_def_id).node_type(hir_id);\n-                let typeck_root_def_id = tcx.typeck_root_def_id(anon_const_def_id);\n+                let ty = self.typeck_results().node_type(anon_const.hir_id);\n+                let did = tcx.hir().local_def_id(anon_const.hir_id).to_def_id();\n+                let typeck_root_def_id = tcx.typeck_root_def_id(did);\n                 let parent_substs =\n                     tcx.erase_regions(InternalSubsts::identity_for_item(tcx, typeck_root_def_id));\n                 let substs =\n                     InlineConstSubsts::new(tcx, InlineConstSubstsParts { parent_substs, ty })\n                         .substs;\n \n-                ExprKind::ConstBlock { did: anon_const_def_id, substs }\n+                ExprKind::ConstBlock { did, substs }\n             }\n             // Now comes the rote stuff:\n             hir::ExprKind::Repeat(ref v, _) => {\n@@ -591,7 +587,7 @@ impl<'tcx> Cx<'tcx> {\n             }\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n-                name: Field::new(self.tcx.field_index(expr.hir_id, self.typeck_results)),\n+                name: Field::new(tcx.field_index(expr.hir_id, self.typeck_results)),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {\n                 // Check for a user-given type annotation on this `cast`\n@@ -640,7 +636,7 @@ impl<'tcx> Cx<'tcx> {\n                                     let (d, o) = adt_def.discriminant_def_for_variant(idx);\n                                     use rustc_middle::ty::util::IntTypeExt;\n                                     let ty = adt_def.repr().discr_type();\n-                                    let ty = ty.to_ty(self.tcx());\n+                                    let ty = ty.to_ty(tcx);\n                                     Some((d, o, ty))\n                                 }\n                                 _ => None,\n@@ -652,8 +648,7 @@ impl<'tcx> Cx<'tcx> {\n \n                     let source = if let Some((did, offset, var_ty)) = var {\n                         let param_env_ty = self.param_env.and(var_ty);\n-                        let size = self\n-                            .tcx\n+                        let size = tcx\n                             .layout_of(param_env_ty)\n                             .unwrap_or_else(|e| {\n                                 panic!(\"could not compute layout for {:?}: {:?}\", param_env_ty, e)\n@@ -671,7 +666,7 @@ impl<'tcx> Cx<'tcx> {\n                             Some(did) => {\n                                 // in case we are offsetting from a computed discriminant\n                                 // and not the beginning of discriminants (which is always `0`)\n-                                let substs = InternalSubsts::identity_for_item(self.tcx(), did);\n+                                let substs = InternalSubsts::identity_for_item(tcx, did);\n                                 let kind =\n                                     ExprKind::NamedConst { def_id: did, substs, user_ty: None };\n                                 let lhs = self.thir.exprs.push(Expr {"}]}