{"sha": "0dbb1e4fee5218b338ed1c8307665342c2b99e4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYmIxZTRmZWU1MjE4YjMzOGVkMWM4MzA3NjY1MzQyYzJiOTllNGY=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-02-05T08:41:32Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-02-05T08:41:32Z"}, "message": "Remove use of ptr::eq", "tree": {"sha": "6d1043afbf065d670899aa0c90c4cd939a0cc630", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d1043afbf065d670899aa0c90c4cd939a0cc630"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dbb1e4fee5218b338ed1c8307665342c2b99e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbb1e4fee5218b338ed1c8307665342c2b99e4f", "html_url": "https://github.com/rust-lang/rust/commit/0dbb1e4fee5218b338ed1c8307665342c2b99e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dbb1e4fee5218b338ed1c8307665342c2b99e4f/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1f42cd8930d465bf616d5b2bc5d7b1b945177ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f42cd8930d465bf616d5b2bc5d7b1b945177ab", "html_url": "https://github.com/rust-lang/rust/commit/a1f42cd8930d465bf616d5b2bc5d7b1b945177ab"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "f53d451152fbcff3fd8a490b7e1fe9dc694dd4eb", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb1e4fee5218b338ed1c8307665342c2b99e4f/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb1e4fee5218b338ed1c8307665342c2b99e4f/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=0dbb1e4fee5218b338ed1c8307665342c2b99e4f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ptr;\n use _match::{MatchCheckCtxt, Matrix, expand_pattern, is_useful};\n use _match::Usefulness::*;\n use _match::WitnessPreference::*;\n@@ -274,7 +273,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     let mut seen = Matrix::empty();\n     let mut catchall = None;\n     let mut printed_if_let_err = false;\n-    for &(ref pats, guard) in arms {\n+    for (arm_index, &(ref pats, guard)) in arms.iter().enumerate() {\n         for &(pat, hir_pat) in pats {\n             let v = vec![pat];\n \n@@ -305,17 +304,23 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                             let span = first_pat.0.span;\n \n                             // check which arm we're on.\n-                            if ptr::eq(first_arm_pats, pats) {\n-                                let mut diagnostic = Diagnostic::new(Level::Warning,\n-                                                                     \"unreachable pattern\");\n-                                diagnostic.set_span(pat.span);\n-                                cx.tcx.sess.add_lint_diagnostic(lint::builtin::UNREACHABLE_PATTERNS,\n-                                                                hir_pat.id, diagnostic);\n-                            } else {\n-                                struct_span_err!(cx.tcx.sess, span, E0165,\n-                                                 \"irrefutable while-let pattern\")\n-                                    .span_label(span, &format!(\"irrefutable pattern\"))\n-                                    .emit();\n+                            match arm_index {\n+                                // The arm with the user-specified pattern.\n+                                0 => {\n+                                    let mut diagnostic = Diagnostic::new(Level::Warning,\n+                                                                         \"unreachable pattern\");\n+                                    diagnostic.set_span(pat.span);\n+                                    cx.tcx.sess.add_lint_diagnostic(lint::builtin::UNREACHABLE_PATTERNS,\n+                                                                    hir_pat.id, diagnostic);\n+                                },\n+                                // The arm with the wildcard pattern.\n+                                1 => {\n+                                    struct_span_err!(cx.tcx.sess, span, E0165,\n+                                                     \"irrefutable while-let pattern\")\n+                                        .span_label(span, &format!(\"irrefutable pattern\"))\n+                                        .emit();\n+                                },\n+                                _ => bug!(),\n                             }\n                         },\n "}, {"sha": "198e49daabc63f74422d86778f4dd143ee4f39f9", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb1e4fee5218b338ed1c8307665342c2b99e4f/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb1e4fee5218b338ed1c8307665342c2b99e4f/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=0dbb1e4fee5218b338ed1c8307665342c2b99e4f", "patch": "@@ -30,7 +30,6 @@\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(i128_type)]\n-#![feature(ptr_eq)]\n \n extern crate arena;\n #[macro_use] extern crate syntax;"}]}