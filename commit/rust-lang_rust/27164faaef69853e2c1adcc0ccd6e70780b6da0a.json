{"sha": "27164faaef69853e2c1adcc0ccd6e70780b6da0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MTY0ZmFhZWY2OTg1M2UyYzFhZGNjMGNjZDZlNzA3ODBiNmRhMGE=", "commit": {"author": {"name": "Francis Gagn\u00e9", "email": "fragag1@gmail.com", "date": "2018-02-12T06:17:32Z"}, "committer": {"name": "Francis Gagn\u00e9", "email": "fragag1@gmail.com", "date": "2018-03-27T01:52:58Z"}, "message": "Move some implementations of Clone and Copy to libcore\n\nAdd implementations of `Clone` and `Copy` for some primitive types to\nlibcore so that they show up in the documentation. The concerned types\nare the following:\n\n* All primitive signed and unsigned integer types (`usize`, `u8`, `u16`,\n  `u32`, `u64`, `u128`, `isize`, `i8`, `i16`, `i32`, `i64`, `i128`);\n* All primitive floating point types (`f32`, `f64`)\n* `bool`\n* `char`\n* `!`\n* Raw pointers (`*const T` and `*mut T`)\n* Shared references (`&'a T`)\n\nThese types already implemented `Clone` and `Copy`, but the\nimplementation was provided by the compiler. The compiler no longer\nprovides these implementations and instead tries to look them up as\nnormal trait implementations. The goal of this change is to make the\nimplementations appear in the generated documentation.\n\nFor `Copy` specifically, the compiler would reject an attempt to write\nan `impl` for the primitive types listed above with error `E0206`; this\nerror no longer occurs for these types, but it will still occur for the\nother types that used to raise that error.\n\nThe trait implementations are guarded with `#[cfg(not(stage0))]` because\nthey are invalid according to the stage0 compiler. When the stage0\ncompiler is updated to a revision that includes this change, the\nattribute will have to be removed, otherwise the stage0 build will fail\nbecause the types mentioned above no longer implement `Clone` or `Copy`.\n\nFor type variants that are variadic, such as tuples and function\npointers, and for array types, the `Clone` and `Copy` implementations\nare still provided by the compiler, because the language is not\nexpressive enough yet to be able to write the appropriate\nimplementations in Rust.\n\nThe initial plan was to add `impl` blocks guarded by `#[cfg(dox)]` to\nmake them apply only when generating documentation, without having to\ntouch the compiler. However, rustdoc's usage of the compiler still\nrejected those `impl` blocks.\n\nThis is a [breaking-change] for users of `#![no_core]`, because they\nwill now have to supply their own implementations of `Clone` and `Copy`\nfor the primitive types listed above. The easiest way to do that is to\nsimply copy the implementations from `src/libcore/clone.rs` and\n`src/libcore/marker.rs`.\n\nFixes #25893", "tree": {"sha": "51b2784d55b408eda0393adea6f4bc491159c731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51b2784d55b408eda0393adea6f4bc491159c731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27164faaef69853e2c1adcc0ccd6e70780b6da0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27164faaef69853e2c1adcc0ccd6e70780b6da0a", "html_url": "https://github.com/rust-lang/rust/commit/27164faaef69853e2c1adcc0ccd6e70780b6da0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27164faaef69853e2c1adcc0ccd6e70780b6da0a/comments", "author": {"login": "FraGag", "id": 534195, "node_id": "MDQ6VXNlcjUzNDE5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/534195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FraGag", "html_url": "https://github.com/FraGag", "followers_url": "https://api.github.com/users/FraGag/followers", "following_url": "https://api.github.com/users/FraGag/following{/other_user}", "gists_url": "https://api.github.com/users/FraGag/gists{/gist_id}", "starred_url": "https://api.github.com/users/FraGag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FraGag/subscriptions", "organizations_url": "https://api.github.com/users/FraGag/orgs", "repos_url": "https://api.github.com/users/FraGag/repos", "events_url": "https://api.github.com/users/FraGag/events{/privacy}", "received_events_url": "https://api.github.com/users/FraGag/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FraGag", "id": 534195, "node_id": "MDQ6VXNlcjUzNDE5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/534195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FraGag", "html_url": "https://github.com/FraGag", "followers_url": "https://api.github.com/users/FraGag/followers", "following_url": "https://api.github.com/users/FraGag/following{/other_user}", "gists_url": "https://api.github.com/users/FraGag/gists{/gist_id}", "starred_url": "https://api.github.com/users/FraGag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FraGag/subscriptions", "organizations_url": "https://api.github.com/users/FraGag/orgs", "repos_url": "https://api.github.com/users/FraGag/repos", "events_url": "https://api.github.com/users/FraGag/events{/privacy}", "received_events_url": "https://api.github.com/users/FraGag/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989b25718bbfdcc5615cdc5880e5573eb8b9688f", "url": "https://api.github.com/repos/rust-lang/rust/commits/989b25718bbfdcc5615cdc5880e5573eb8b9688f", "html_url": "https://github.com/rust-lang/rust/commit/989b25718bbfdcc5615cdc5880e5573eb8b9688f"}], "stats": {"total": 206, "additions": 176, "deletions": 30}, "files": [{"sha": "5c83dd79bd7f1a06d13a0225763e0e20f0821368", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -135,3 +135,63 @@ pub struct AssertParamIsClone<T: Clone + ?Sized> { _field: ::marker::PhantomData\n            reason = \"deriving hack, should not be public\",\n            issue = \"0\")]\n pub struct AssertParamIsCopy<T: Copy + ?Sized> { _field: ::marker::PhantomData<T> }\n+\n+/// Implementations of `Clone` for primitive types.\n+///\n+/// Implementations that cannot be described in Rust\n+/// are implemented in `SelectionContext::copy_clone_conditions()` in librustc.\n+#[cfg(not(stage0))]\n+mod impls {\n+\n+    use super::Clone;\n+\n+    macro_rules! impl_clone {\n+        ($($t:ty)*) => {\n+            $(\n+                #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+                impl Clone for $t {\n+                    fn clone(&self) -> Self {\n+                        *self\n+                    }\n+                }\n+            )*\n+        }\n+    }\n+\n+    impl_clone! {\n+        usize u8 u16 u32 u64 u128\n+        isize i8 i16 i32 i64 i128\n+        f32 f64\n+        bool char\n+    }\n+\n+    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    impl Clone for ! {\n+        fn clone(&self) -> Self {\n+            *self\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<T: ?Sized> Clone for *const T {\n+        fn clone(&self) -> Self {\n+            *self\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<T: ?Sized> Clone for *mut T {\n+        fn clone(&self) -> Self {\n+            *self\n+        }\n+    }\n+\n+    // Shared references can be cloned, but mutable references *cannot*!\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<'a, T: ?Sized> Clone for &'a T {\n+        fn clone(&self) -> Self {\n+            *self\n+        }\n+    }\n+\n+}"}, {"sha": "008cb15131d8988c08b0d52501da7c32edf89cea", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -593,3 +593,43 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n /// This trait is automatically implemented for almost every type.\n #[unstable(feature = \"pin\", issue = \"49150\")]\n pub unsafe auto trait Unpin {}\n+\n+/// Implementations of `Copy` for primitive types.\n+///\n+/// Implementations that cannot be described in Rust\n+/// are implemented in `SelectionContext::copy_clone_conditions()` in librustc.\n+#[cfg(not(stage0))]\n+mod copy_impls {\n+\n+    use super::Copy;\n+\n+    macro_rules! impl_copy {\n+        ($($t:ty)*) => {\n+            $(\n+                #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+                impl Copy for $t {}\n+            )*\n+        }\n+    }\n+\n+    impl_copy! {\n+        usize u8 u16 u32 u64 u128\n+        isize i8 i16 i32 i64 i128\n+        f32 f64\n+        bool char\n+    }\n+\n+    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n+    impl Copy for ! {}\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<T: ?Sized> Copy for *const T {}\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<T: ?Sized> Copy for *mut T {}\n+\n+    // Shared references can be copied, but mutable references *cannot*!\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<'a, T: ?Sized> Copy for &'a T {}\n+\n+}"}, {"sha": "8a585d6ac1467ac83588c7197c9daf7d7fb6ce6f", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -2061,11 +2061,15 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         match self_ty.sty {\n             ty::TyInfer(ty::IntVar(_)) | ty::TyInfer(ty::FloatVar(_)) |\n+            ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyError => {\n+                Where(ty::Binder(Vec::new()))\n+            }\n+\n             ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n-            ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar |\n-            ty::TyRawPtr(..) | ty::TyError | ty::TyNever |\n+            ty::TyChar | ty::TyRawPtr(..) | ty::TyNever |\n             ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) => {\n-                Where(ty::Binder(Vec::new()))\n+                // Implementations provided in libcore\n+                None\n             }\n \n             ty::TyDynamic(..) | ty::TyStr | ty::TySlice(..) |"}, {"sha": "22f851a908b252b5f2046949b4f4fdb74a812876", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -197,7 +197,14 @@ impl<'tcx> ty::ParamEnv<'tcx> {\n         // FIXME: (@jroesch) float this code up\n         tcx.infer_ctxt().enter(|infcx| {\n             let (adt, substs) = match self_type.sty {\n+                // These types used to have a builtin impl.\n+                // Now libcore provides that impl.\n+                ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n+                ty::TyChar | ty::TyRawPtr(..) | ty::TyNever |\n+                ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) => return Ok(()),\n+\n                 ty::TyAdt(adt, substs) => (adt, substs),\n+\n                 _ => return Err(CopyImplementationError::NotAnAdt),\n             };\n "}, {"sha": "691e0ffb6a5db87734aa7a96c64222df39c37515", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -1918,16 +1918,16 @@ differs from the behavior for `&T`, which is always `Copy`).\n \n E0206: r##\"\n You can only implement `Copy` for a struct or enum. Both of the following\n-examples will fail, because neither `i32` (primitive type) nor `&'static Bar`\n-(reference to `Bar`) is a struct or enum:\n+examples will fail, because neither `[u8; 256]` nor `&'static mut Bar`\n+(mutable reference to `Bar`) is a struct or enum:\n \n ```compile_fail,E0206\n-type Foo = i32;\n+type Foo = [u8; 256];\n impl Copy for Foo { } // error\n \n #[derive(Copy, Clone)]\n struct Bar;\n-impl Copy for &'static Bar { } // error\n+impl Copy for &'static mut Bar { } // error\n ```\n \"##,\n "}, {"sha": "54f888b3796a17b1763fa2b1ac9134b499a293b5", "filename": "src/test/run-make-fulldeps/atomic-lock-free/atomic_lock_free.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -23,6 +23,8 @@ trait Copy {}\n #[lang = \"freeze\"]\n trait Freeze {}\n \n+impl<T: ?Sized> Copy for *mut T {}\n+\n #[cfg(target_has_atomic = \"8\")]\n pub unsafe fn atomic_u8(x: *mut u8) {\n     atomic_xadd(x, 1);"}, {"sha": "21411a35e3c353197109a348293a7540a805991e", "filename": "src/test/run-make-fulldeps/simd-ffi/simd.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsimd-ffi%2Fsimd.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -75,6 +75,9 @@ pub trait Sized { }\n #[lang = \"copy\"]\n pub trait Copy { }\n \n+impl Copy for f32 {}\n+impl Copy for i32 {}\n+\n pub mod marker {\n     pub use Copy;\n }"}, {"sha": "f48790d1f4039311a5e6b5f378d4b8bf8e872a59", "filename": "src/test/ui/coherence-impls-copy.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -12,6 +12,10 @@\n \n use std::marker::Copy;\n \n+impl Copy for i32 {}\n+//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+\n enum TestE {\n   A\n }\n@@ -35,14 +39,14 @@ impl Copy for (MyType, MyType) {}\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n \n impl Copy for &'static NotSync {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n \n impl Copy for [MyType] {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n \n impl Copy for &'static [NotSync] {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n //~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n \n fn main() {"}, {"sha": "24e7e85b1a9615d5743ee0716e7e59ff3450b26e", "filename": "src/test/ui/coherence-impls-copy.stderr", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -1,35 +1,61 @@\n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:29:15\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+  --> $DIR/coherence-impls-copy.rs:15:1\n    |\n-LL | impl Copy for &'static mut MyType {}\n-   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+LL | impl Copy for i32 {}\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl std::marker::Copy for i32;\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n+  --> $DIR/coherence-impls-copy.rs:41:1\n+   |\n+LL | impl Copy for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<'a, T> std::marker::Copy for &'a T\n+             where T: ?Sized;\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n+  --> $DIR/coherence-impls-copy.rs:48:1\n+   |\n+LL | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<'a, T> std::marker::Copy for &'a T\n+             where T: ?Sized;\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:33:15\n    |\n-LL | impl Copy for (MyType, MyType) {}\n-   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+LL | impl Copy for &'static mut MyType {}\n+   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/coherence-impls-copy.rs:37:15\n    |\n-LL | impl Copy for &'static NotSync {}\n+LL | impl Copy for (MyType, MyType) {}\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:40:15\n+  --> $DIR/coherence-impls-copy.rs:44:15\n    |\n LL | impl Copy for [MyType] {}\n    |               ^^^^^^^^ type is not a structure or enumeration\n \n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/coherence-impls-copy.rs:44:15\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:15:1\n    |\n-LL | impl Copy for &'static [NotSync] {}\n-   |               ^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+LL | impl Copy for i32 {}\n+   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:33:1\n+  --> $DIR/coherence-impls-copy.rs:37:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -38,7 +64,7 @@ LL | impl Copy for (MyType, MyType) {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:40:1\n+  --> $DIR/coherence-impls-copy.rs:44:1\n    |\n LL | impl Copy for [MyType] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n@@ -47,15 +73,15 @@ LL | impl Copy for [MyType] {}\n    = note: define and implement a trait or new type instead\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impls-copy.rs:44:1\n+  --> $DIR/coherence-impls-copy.rs:48:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n-Some errors occurred: E0117, E0206.\n+Some errors occurred: E0117, E0119, E0206.\n For more information about an error, try `rustc --explain E0117`."}, {"sha": "9b3d1b351ddd97a37c0394ad69660dfc48d4a44f", "filename": "src/test/ui/error-codes/E0206.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Foo = i32;\n+type Foo = [u8; 256];\n \n impl Copy for Foo { }\n //~^ ERROR the trait `Copy` may not be implemented for this type\n@@ -17,7 +17,7 @@ impl Copy for Foo { }\n #[derive(Copy, Clone)]\n struct Bar;\n \n-impl Copy for &'static Bar { }\n+impl Copy for &'static mut Bar { }\n //~^ ERROR the trait `Copy` may not be implemented for this type\n \n fn main() {"}, {"sha": "f2c23b0767af8728317e401d3642457f40c84766", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27164faaef69853e2c1adcc0ccd6e70780b6da0a/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=27164faaef69853e2c1adcc0ccd6e70780b6da0a", "patch": "@@ -7,8 +7,8 @@ LL | impl Copy for Foo { }\n error[E0206]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0206.rs:20:15\n    |\n-LL | impl Copy for &'static Bar { }\n-   |               ^^^^^^^^^^^^ type is not a structure or enumeration\n+LL | impl Copy for &'static mut Bar { }\n+   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/E0206.rs:13:1"}]}