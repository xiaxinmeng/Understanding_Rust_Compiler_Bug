{"sha": "df4d59512e496ff010c8710e8ea8e2db4a7f4822", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNGQ1OTUxMmU0OTZmZjAxMGM4NzEwZThlYThlMmRiNGE3ZjQ4MjI=", "commit": {"author": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2020-09-23T15:27:25Z"}, "committer": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2020-09-23T15:27:25Z"}, "message": "Remane function", "tree": {"sha": "a6416fd927a9294d05743d47dce3c3413e1de6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6416fd927a9294d05743d47dce3c3413e1de6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4d59512e496ff010c8710e8ea8e2db4a7f4822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4d59512e496ff010c8710e8ea8e2db4a7f4822", "html_url": "https://github.com/rust-lang/rust/commit/df4d59512e496ff010c8710e8ea8e2db4a7f4822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4d59512e496ff010c8710e8ea8e2db4a7f4822/comments", "author": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38f759c631039d11cb490692b5e07b00324ff10", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38f759c631039d11cb490692b5e07b00324ff10", "html_url": "https://github.com/rust-lang/rust/commit/d38f759c631039d11cb490692b5e07b00324ff10"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "f865639a14d916eee6f6efedc2b2555cc84105db", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df4d59512e496ff010c8710e8ea8e2db4a7f4822/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/df4d59512e496ff010c8710e8ea8e2db4a7f4822/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=df4d59512e496ff010c8710e8ea8e2db4a7f4822", "patch": "@@ -177,7 +177,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n         if (!shouldCheckForNewNightly) return;\n     }\n \n-    const release = await performDownloadWithRetryDialog(state, async () => {\n+    const release = await downloadWithRetryDialog(state, async () => {\n         return await fetchRelease(\"nightly\", state.githubToken);\n     }).catch((e) => {\n         log.error(e);\n@@ -199,7 +199,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n \n     const dest = path.join(config.globalStoragePath, \"rust-analyzer.vsix\");\n \n-    await performDownloadWithRetryDialog(state, async () => {\n+    await downloadWithRetryDialog(state, async () => {\n         // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n         await fs.unlink(dest).catch(err => {\n             if (err.code !== \"ENOENT\") throw err;\n@@ -323,13 +323,13 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     }\n \n     const releaseTag = config.package.releaseTag;\n-    const release = await performDownloadWithRetryDialog(state, async () => {\n+    const release = await downloadWithRetryDialog(state, async () => {\n         return await fetchRelease(releaseTag, state.githubToken);\n     });\n     const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n-    await performDownloadWithRetryDialog(state, async () => {\n+    await downloadWithRetryDialog(state, async () => {\n         // Unlinking the exe file before moving new one on its place should prevent ETXTBSY error.\n         await fs.unlink(dest).catch(err => {\n             if (err.code !== \"ENOENT\") throw err;\n@@ -353,7 +353,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     return dest;\n }\n \n-async function performDownloadWithRetryDialog<T>(state: PersistentState, downloadFunc: () => Promise<T>): Promise<T> {\n+async function downloadWithRetryDialog<T>(state: PersistentState, downloadFunc: () => Promise<T>): Promise<T> {\n     while (true) {\n         try {\n             return await downloadFunc();"}]}