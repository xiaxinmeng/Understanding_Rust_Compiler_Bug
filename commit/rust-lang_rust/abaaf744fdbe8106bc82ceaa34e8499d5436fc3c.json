{"sha": "abaaf744fdbe8106bc82ceaa34e8499d5436fc3c", "node_id": "C_kwDOAAsO6NoAKGFiYWFmNzQ0ZmRiZTgxMDZiYzgyY2VhYTM0ZTg0OTlkNTQzNmZjM2M", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-10-01T15:29:37Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Add some notes about `MethodCall` cases", "tree": {"sha": "3397beefbff14efd6eacfcbe8caf8623f6586351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3397beefbff14efd6eacfcbe8caf8623f6586351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abaaf744fdbe8106bc82ceaa34e8499d5436fc3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abaaf744fdbe8106bc82ceaa34e8499d5436fc3c", "html_url": "https://github.com/rust-lang/rust/commit/abaaf744fdbe8106bc82ceaa34e8499d5436fc3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abaaf744fdbe8106bc82ceaa34e8499d5436fc3c/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "268ef407a65ba07601f8cd70bf40537d76376aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/268ef407a65ba07601f8cd70bf40537d76376aa9", "html_url": "https://github.com/rust-lang/rust/commit/268ef407a65ba07601f8cd70bf40537d76376aa9"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "d08abc5b3defbb0668a35c1898155dada01a8982", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abaaf744fdbe8106bc82ceaa34e8499d5436fc3c/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaaf744fdbe8106bc82ceaa34e8499d5436fc3c/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=abaaf744fdbe8106bc82ceaa34e8499d5436fc3c", "patch": "@@ -221,7 +221,7 @@ struct DerefDelegate<'a, 'tcx> {\n \n impl DerefDelegate<'_, 'tcx> {\n     pub fn finish(&mut self) -> String {\n-        let end_span = Span::new(self.next_pos, self.closure_span.hi(), self.closure_span.ctxt());\n+        let end_span = Span::new(self.next_pos, self.closure_span.hi(), self.closure_span.ctxt(), None);\n         let end_snip = snippet_with_applicability(self.cx, end_span, \"..\", &mut self.applicability);\n         format!(\"{}{}\", self.suggestion_start, end_snip)\n     }\n@@ -255,16 +255,22 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             let map = self.cx.tcx.hir();\n             let ident_str = map.name(id).to_string();\n             let span = map.span(cmt.hir_id);\n-            let start_span = Span::new(self.next_pos, span.lo(), span.ctxt());\n+            let start_span = Span::new(self.next_pos, span.lo(), span.ctxt(), None);\n             let mut start_snip = snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n \n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n                 // i.e.: suggest `&x` instead of `x`\n                 self.suggestion_start.push_str(&format!(\"{}&{}\", start_snip, ident_str));\n             } else {\n-                // cases where a parent call is using the item\n+                // cases where a parent `Call` or `MethodCall` is using the item\n                 // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n+                //\n+                // Note about method calls:\n+                // - compiler automatically dereference references if the target type is a reference (works also for\n+                //   function call)\n+                // - `self` arguments in the case of `x.is_something()` are also automatically (de)referenced, and\n+                //   no projection should be suggested\n                 if let Some(parent_expr) = get_parent_expr_for_hir(self.cx, cmt.hir_id) {\n                     if let ExprKind::Call(_, call_args) | ExprKind::MethodCall(_, _, call_args, _) = parent_expr.kind {\n                         let expr = self.cx.tcx.hir().expect_expr(cmt.hir_id);\n@@ -316,7 +322,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         // so the span is set-up again to get more code, using `span.hi()` (i.e.: `foo[x]`)\n                         // instead of `span.lo()` (i.e.: `foo`)\n                         ProjectionKind::Index => {\n-                            let start_span = Span::new(self.next_pos, span.hi(), span.ctxt());\n+                            let start_span = Span::new(self.next_pos, span.hi(), span.ctxt(), None);\n                             start_snip = snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n                             replacement_str.clear();\n                             projections_handled = true;"}]}