{"sha": "8121d2e0576e74b23f0019e857b1088197ef8c04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMjFkMmUwNTc2ZTc0YjIzZjAwMTllODU3YjEwODgxOTdlZjhjMDQ=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-14T23:58:37Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-15T00:09:26Z"}, "message": "Fix up autoderef when performing mutable auto borrow", "tree": {"sha": "18df40a168f98e6715b8e414e09682fe585b6d7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18df40a168f98e6715b8e414e09682fe585b6d7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8121d2e0576e74b23f0019e857b1088197ef8c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8121d2e0576e74b23f0019e857b1088197ef8c04", "html_url": "https://github.com/rust-lang/rust/commit/8121d2e0576e74b23f0019e857b1088197ef8c04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8121d2e0576e74b23f0019e857b1088197ef8c04/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0793c610d99857820721f58456920e9e0bc240", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0793c610d99857820721f58456920e9e0bc240", "html_url": "https://github.com/rust-lang/rust/commit/fb0793c610d99857820721f58456920e9e0bc240"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "c0f1f356ef372afa35ad334df09eca17165d8712", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8121d2e0576e74b23f0019e857b1088197ef8c04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8121d2e0576e74b23f0019e857b1088197ef8c04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=8121d2e0576e74b23f0019e857b1088197ef8c04", "patch": "@@ -119,11 +119,6 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         // Create the final `MethodCallee`.\n         let callee = MethodCallee { def_id: pick.item.def_id, substs: all_substs, sig: method_sig };\n-\n-        if let Some(hir::Mutability::Mut) = pick.autoref {\n-            self.convert_place_derefs_to_mutable(self.self_expr);\n-        }\n-\n         ConfirmResult { callee, illegal_sized_bound }\n     }\n "}, {"sha": "82523f843aef91e7b5e97c4bdf2b59de0a6e778a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8121d2e0576e74b23f0019e857b1088197ef8c04/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8121d2e0576e74b23f0019e857b1088197ef8c04/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8121d2e0576e74b23f0019e857b1088197ef8c04", "patch": "@@ -3183,6 +3183,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n+        let autoborrow_mut = adj.iter().any(|adj| {\n+            matches!(adj, &Adjustment {\n+                kind: Adjust::Borrow(AutoBorrow::Ref(_, AutoBorrowMutability::Mut { .. })),\n+                ..\n+            })\n+        });\n+\n         match self.tables.borrow_mut().adjustments_mut().entry(expr.hir_id) {\n             Entry::Vacant(entry) => {\n                 entry.insert(adj);\n@@ -3212,6 +3219,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 *entry.get_mut() = adj;\n             }\n         }\n+\n+        // When there is an auto mutable borrow, it is equivalent to `&mut expr`,\n+        // thus `expr` is ought to be typechecked with needs = [`Needs::MutPlace`].\n+        // However in many cases it might not be checked this way originally, e.g.\n+        // the receiver of a method call. We need to fix them up.\n+        if autoborrow_mut {\n+            self.convert_place_derefs_to_mutable(expr);\n+        }\n     }\n \n     /// Basically whenever we are converting from a type scheme into"}]}