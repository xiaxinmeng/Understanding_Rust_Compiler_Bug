{"sha": "39b95c965aada6bab37c803b24067bbb26644f38", "node_id": "C_kwDOAAsO6NoAKDM5Yjk1Yzk2NWFhZGE2YmFiMzdjODAzYjI0MDY3YmJiMjY2NDRmMzg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-26T11:59:51Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-26T11:59:51Z"}, "message": "Don't return a `Binder` from `TraitRef::identity`", "tree": {"sha": "1d3648e9466185ab333170e702ff4030afc62b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d3648e9466185ab333170e702ff4030afc62b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b95c965aada6bab37c803b24067bbb26644f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b95c965aada6bab37c803b24067bbb26644f38", "html_url": "https://github.com/rust-lang/rust/commit/39b95c965aada6bab37c803b24067bbb26644f38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b95c965aada6bab37c803b24067bbb26644f38/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8c7784e58de489331dd8957a889916a0dcbee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8c7784e58de489331dd8957a889916a0dcbee3", "html_url": "https://github.com/rust-lang/rust/commit/1b8c7784e58de489331dd8957a889916a0dcbee3"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "e1d3690b679278830e2103d2a56a594348fc6513", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39b95c965aada6bab37c803b24067bbb26644f38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b95c965aada6bab37c803b24067bbb26644f38/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=39b95c965aada6bab37c803b24067bbb26644f38", "patch": "@@ -855,12 +855,8 @@ impl<'tcx> TraitRef<'tcx> {\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n-    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n-        ty::Binder::dummy(ty::TraitRef::new(\n-            tcx,\n-            def_id,\n-            InternalSubsts::identity_for_item(tcx, def_id),\n-        ))\n+    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n+        ty::TraitRef::new(tcx, def_id, InternalSubsts::identity_for_item(tcx, def_id))\n     }\n \n     pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {"}, {"sha": "7ab652761a410b12eea86db6372ca2893f268b7e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39b95c965aada6bab37c803b24067bbb26644f38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b95c965aada6bab37c803b24067bbb26644f38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=39b95c965aada6bab37c803b24067bbb26644f38", "patch": "@@ -87,7 +87,7 @@ pub fn recompute_applicable_impls<'tcx>(\n         if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = kind.skip_binder()\n             && param_env_candidate_may_apply(kind.rebind(trait_pred))\n         {\n-            if kind.rebind(trait_pred.trait_ref) == ty::TraitRef::identity(tcx, trait_pred.def_id()) {\n+            if kind.rebind(trait_pred.trait_ref) == ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_pred.def_id())) {\n                 ambiguities.push(Ambiguity::ParamEnv(tcx.def_span(trait_pred.def_id())))\n             } else {\n                 ambiguities.push(Ambiguity::ParamEnv(span))"}, {"sha": "6cb9b21385278b3995beb550d69e9183b28d5872", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39b95c965aada6bab37c803b24067bbb26644f38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b95c965aada6bab37c803b24067bbb26644f38/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=39b95c965aada6bab37c803b24067bbb26644f38", "patch": "@@ -279,7 +279,7 @@ fn predicates_reference_self(\n     trait_def_id: DefId,\n     supertraits_only: bool,\n ) -> SmallVec<[Span; 1]> {\n-    let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n     let predicates = if supertraits_only {\n         tcx.super_predicates_of(trait_def_id)\n     } else {\n@@ -661,9 +661,9 @@ fn object_ty_for_trait<'tcx>(\n     let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n     debug!(?trait_ref);\n \n-    let trait_predicate = trait_ref.map_bound(|trait_ref| {\n-        ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref))\n-    });\n+    let trait_predicate = ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n+        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n+    ));\n     debug!(?trait_predicate);\n \n     let pred: ty::Predicate<'tcx> = trait_ref.to_predicate(tcx);\n@@ -880,7 +880,8 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<TyCtxt<'tcx>>>(\n \n                     // Compute supertraits of current trait lazily.\n                     if self.supertraits.is_none() {\n-                        let trait_ref = ty::TraitRef::identity(self.tcx, self.trait_def_id);\n+                        let trait_ref =\n+                            ty::Binder::dummy(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n                         self.supertraits = Some(\n                             traits::supertraits(self.tcx, trait_ref).map(|t| t.def_id()).collect(),\n                         );"}]}