{"sha": "e18518b648b39d08730e3edf8bbd49062cff6ea8", "node_id": "C_kwDOAAsO6NoAKGUxODUxOGI2NDhiMzlkMDg3MzBlM2VkZjhiYmQ0OTA2MmNmZjZlYTg", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-12-09T13:55:16Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-12-09T14:09:47Z"}, "message": "Add unstable book entries for parts of asm that are not being stabilized", "tree": {"sha": "f77732d14eb48e08de16e457e06a3558d7958163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f77732d14eb48e08de16e457e06a3558d7958163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e18518b648b39d08730e3edf8bbd49062cff6ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e18518b648b39d08730e3edf8bbd49062cff6ea8", "html_url": "https://github.com/rust-lang/rust/commit/e18518b648b39d08730e3edf8bbd49062cff6ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e18518b648b39d08730e3edf8bbd49062cff6ea8/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765", "html_url": "https://github.com/rust-lang/rust/commit/3b263ceb5cb89b6d53b5a03b47ec447c3a7f7765"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "1063c23b6dfba4f0650e89c12d6eed6a2ea42ecd", "filename": "src/doc/unstable-book/src/language-features/asm-const.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e18518b648b39d08730e3edf8bbd49062cff6ea8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/e18518b648b39d08730e3edf8bbd49062cff6ea8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-const.md?ref=e18518b648b39d08730e3edf8bbd49062cff6ea8", "patch": "@@ -0,0 +1,11 @@\n+# `asm_const`\n+\n+The tracking issue for this feature is: [#72016]\n+\n+[#72016]: https://github.com/rust-lang/rust/issues/72016\n+\n+------------------------\n+\n+This feature adds a `const <expr>` operand type to `asm!` and `global_asm!`.\n+- `<expr>` must be an integer constant expression.\n+- The value of the expression is formatted as a string and substituted directly into the asm template string."}, {"sha": "ec97eaa8b2b5b969d46fa223bfd69d5984299e07", "filename": "src/doc/unstable-book/src/language-features/asm-experimental-arch.md", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/e18518b648b39d08730e3edf8bbd49062cff6ea8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "raw_url": "https://github.com/rust-lang/rust/raw/e18518b648b39d08730e3edf8bbd49062cff6ea8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md?ref=e18518b648b39d08730e3edf8bbd49062cff6ea8", "patch": "@@ -0,0 +1,117 @@\n+# `asm_experimental_arch`\n+\n+The tracking issue for this feature is: [#72016]\n+\n+[#72016]: https://github.com/rust-lang/rust/issues/72016\n+\n+------------------------\n+\n+This feature tracks `asm!` and `global_asm!` support for the following architectures:\n+- NVPTX\n+- PowerPC\n+- Hexagon\n+- MIPS32r2 and MIPS64r2\n+- wasm32\n+- BPF\n+- SPIR-V\n+- AVR\n+\n+## Register classes\n+\n+| Architecture | Register class | Registers                          | LLVM constraint code |\n+| ------------ | -------------- | ---------------------------------- | -------------------- |\n+| MIPS         | `reg`          | `$[2-25]`                          | `r`                  |\n+| MIPS         | `freg`         | `$f[0-31]`                         | `f`                  |\n+| NVPTX        | `reg16`        | None\\*                             | `h`                  |\n+| NVPTX        | `reg32`        | None\\*                             | `r`                  |\n+| NVPTX        | `reg64`        | None\\*                             | `l`                  |\n+| Hexagon      | `reg`          | `r[0-28]`                          | `r`                  |\n+| PowerPC      | `reg`          | `r[0-31]`                          | `r`                  |\n+| PowerPC      | `reg_nonzero`  | `r[1-31]`                          | `b`                  |\n+| PowerPC      | `freg`         | `f[0-31]`                          | `f`                  |\n+| PowerPC      | `cr`           | `cr[0-7]`, `cr`                    | Only clobbers        |\n+| PowerPC      | `xer`          | `xer`                              | Only clobbers        |\n+| wasm32       | `local`        | None\\*                             | `r`                  |\n+| BPF          | `reg`          | `r[0-10]`                          | `r`                  |\n+| BPF          | `wreg`         | `w[0-10]`                          | `w`                  |\n+| AVR          | `reg`          | `r[2-25]`, `XH`, `XL`, `ZH`, `ZL`  | `r`                  |\n+| AVR          | `reg_upper`    | `r[16-25]`, `XH`, `XL`, `ZH`, `ZL` | `d`                  |\n+| AVR          | `reg_pair`     | `r3r2` .. `r25r24`, `X`, `Z`       | `r`                  |\n+| AVR          | `reg_iw`       | `r25r24`, `X`, `Z`                 | `w`                  |\n+| AVR          | `reg_ptr`      | `X`, `Z`                           | `e`                  |\n+\n+> **Notes**:\n+> - NVPTX doesn't have a fixed register set, so named registers are not supported.\n+>\n+> - WebAssembly doesn't have registers, so named registers are not supported.\n+\n+# Register class supported types\n+\n+| Architecture | Register class                  | Target feature | Allowed types                           |\n+| ------------ | ------------------------------- | -------------- | --------------------------------------- |\n+| MIPS32       | `reg`                           | None           | `i8`, `i16`, `i32`, `f32`               |\n+| MIPS32       | `freg`                          | None           | `f32`, `f64`                            |\n+| MIPS64       | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n+| MIPS64       | `freg`                          | None           | `f32`, `f64`                            |\n+| NVPTX        | `reg16`                         | None           | `i8`, `i16`                             |\n+| NVPTX        | `reg32`                         | None           | `i8`, `i16`, `i32`, `f32`               |\n+| NVPTX        | `reg64`                         | None           | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n+| Hexagon      | `reg`                           | None           | `i8`, `i16`, `i32`, `f32`               |\n+| PowerPC      | `reg`                           | None           | `i8`, `i16`, `i32`                      |\n+| PowerPC      | `reg_nonzero`                   | None           | `i8`, `i16`, `i32`                      |\n+| PowerPC      | `freg`                          | None           | `f32`, `f64`                            |\n+| PowerPC      | `cr`                            | N/A            | Only clobbers                           |\n+| PowerPC      | `xer`                           | N/A            | Only clobbers                           |\n+| wasm32       | `local`                         | None           | `i8` `i16` `i32` `i64` `f32` `f64`      |\n+| BPF          | `reg`                           | None           | `i8` `i16` `i32` `i64`                  |\n+| BPF          | `wreg`                          | `alu32`        | `i8` `i16` `i32`                        |\n+| AVR          | `reg`, `reg_upper`              | None           | `i8`                                    |\n+| AVR          | `reg_pair`, `reg_iw`, `reg_ptr` | None           | `i16`                                   |\n+\n+## Register aliases\n+\n+| Architecture | Base register | Aliases   |\n+| ------------ | ------------- | --------- |\n+| Hexagon      | `r29`         | `sp`      |\n+| Hexagon      | `r30`         | `fr`      |\n+| Hexagon      | `r31`         | `lr`      |\n+| BPF          | `r[0-10]`     | `w[0-10]` |\n+| AVR          | `XH`          | `r27`     |\n+| AVR          | `XL`          | `r26`     |\n+| AVR          | `ZH`          | `r31`     |\n+| AVR          | `ZL`          | `r30`     |\n+\n+## Unsupported registers\n+\n+| Architecture | Unsupported register                    | Reason                                                                                                                                                                              |\n+| ------------ | --------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n+| All          | `sp`                                    | The stack pointer must be restored to its original value at the end of an asm code block.                                                                                           |\n+| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n+| All          | `r19` (Hexagon)                         | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames.                                                                                        |\n+| MIPS         | `$0` or `$zero`                         | This is a constant zero register which can't be modified.                                                                                                                           |\n+| MIPS         | `$1` or `$at`                           | Reserved for assembler.                                                                                                                                                             |\n+| MIPS         | `$26`/`$k0`, `$27`/`$k1`                | OS-reserved registers.                                                                                                                                                              |\n+| MIPS         | `$28`/`$gp`                             | Global pointer cannot be used as inputs or outputs.                                                                                                                                 |\n+| MIPS         | `$ra`                                   | Return address cannot be used as inputs or outputs.                                                                                                                                 |\n+| Hexagon      | `lr`                                    | This is the link register which cannot be used as an input or output.                                                                                                               |\n+| AVR          | `r0`, `r1`, `r1r0`                      | Due to an issue in LLVM, the `r0` and `r1` registers cannot be used as inputs or outputs.  If modified, they must be restored to their original values before the end of the block. |\n+\n+## Template modifiers\n+\n+| Architecture | Register class | Modifier | Example output | LLVM modifier |\n+| ------------ | -------------- | -------- | -------------- | ------------- |\n+| MIPS         | `reg`          | None     | `$2`           | None          |\n+| MIPS         | `freg`         | None     | `$f0`          | None          |\n+| NVPTX        | `reg16`        | None     | `rs0`          | None          |\n+| NVPTX        | `reg32`        | None     | `r0`           | None          |\n+| NVPTX        | `reg64`        | None     | `rd0`          | None          |\n+| Hexagon      | `reg`          | None     | `r0`           | None          |\n+| PowerPC      | `reg`          | None     | `0`            | None          |\n+| PowerPC      | `reg_nonzero`  | None     | `3`            | `b`           |\n+| PowerPC      | `freg`         | None     | `0`            | None          |\n+\n+# Flags covered by `preserves_flags`\n+\n+These flags registers must be restored upon exiting the asm block if the `preserves_flags` option is set:\n+- AVR\n+  - The status register `SREG`."}, {"sha": "7544e20807e9247cc939f513dde3731c6a58d4af", "filename": "src/doc/unstable-book/src/language-features/asm-sym.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e18518b648b39d08730e3edf8bbd49062cff6ea8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md", "raw_url": "https://github.com/rust-lang/rust/raw/e18518b648b39d08730e3edf8bbd49062cff6ea8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md?ref=e18518b648b39d08730e3edf8bbd49062cff6ea8", "patch": "@@ -0,0 +1,13 @@\n+# `asm_sym`\n+\n+The tracking issue for this feature is: [#72016]\n+\n+[#72016]: https://github.com/rust-lang/rust/issues/72016\n+\n+------------------------\n+\n+This feature adds a `sym <path>` operand type to `asm!` and `global_asm!`.\n+- `<path>` must refer to a `fn` or `static`.\n+- A mangled symbol name referring to the item is substituted into the asm template string.\n+- The substituted string does not include any modifiers (e.g. GOT, PLT, relocations, etc).\n+- `<path>` is allowed to point to a `#[thread_local]` static, in which case the asm code can combine the symbol with relocations (e.g. `@plt`, `@TPOFF`) to read from thread-local data."}, {"sha": "414193fe801774de89c1596fe032d4d0c16cf036", "filename": "src/doc/unstable-book/src/language-features/asm-unwind.md", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e18518b648b39d08730e3edf8bbd49062cff6ea8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-unwind.md", "raw_url": "https://github.com/rust-lang/rust/raw/e18518b648b39d08730e3edf8bbd49062cff6ea8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-unwind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-unwind.md?ref=e18518b648b39d08730e3edf8bbd49062cff6ea8", "patch": "@@ -0,0 +1,9 @@\n+# `asm_unwind`\n+\n+The tracking issue for this feature is: [#72016]\n+\n+[#72016]: https://github.com/rust-lang/rust/issues/72016\n+\n+------------------------\n+\n+This feature adds a `may_unwind` option to `asm!` which allows an `asm` block to unwind stack and be part of the stack unwinding process. This option is only supported by the LLVM backend right now."}]}