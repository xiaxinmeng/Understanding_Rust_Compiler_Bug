{"sha": "34ea55908e36e2b83d5ccdf34fa81aed95ecc44b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZWE1NTkwOGUzNmUyYjgzZDVjY2RmMzRmYTgxYWVkOTVlY2M0NGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-02T16:24:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T16:24:43Z"}, "message": "Rollup merge of #64991 - wesleywiser:fix_too_eager_const_prop, r=oli-obk\n\n[const-prop] Correctly handle locals that can't be propagated\n\n`const_prop()` now handles writing the Rvalue into the Place in the\nstack frame for us. So if we're not supposed to propagate that value,\nwe need to clear it.\n\nr? @oli-obk\n\nFixes #64970", "tree": {"sha": "2880583b0b61c437614fd545370b762cabbe90bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2880583b0b61c437614fd545370b762cabbe90bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlM9MCRBK7hj4Ov3rIwAAdHIIAEy3qXiRmcR9SkiitCk4NoG4\nxZvmR8xG5WsBZ+f7EwC8pbUiI32zwkgODh0wF6tHsGOlYxijn0gGzbS5LBz9OgCo\nryizF/fKJM45uER4zeGyf91mB7FMvEQLr3a+vi9zZuBiXpthsRqV6oAELvo4gTkv\nKpIk1oqnbOrbXEqPdfNs5IVfoi/rpGxufpjIbLhlQrnSRHFZiPTmC3Zvs+FFBnk8\njotWH5/HH3xLGMD4rYDj09Gjqu3u/0d3YC20Q7lMxARfL3BUl3vDPz2lfRRzwfAh\n8Np0SUuRuHzSjkZZu4nRd7K27YVfiyTUE+mI4Fr0wtE2wZEY3lSmu0E7U3qKcw4=\n=RwU+\n-----END PGP SIGNATURE-----\n", "payload": "tree 2880583b0b61c437614fd545370b762cabbe90bd\nparent 028ffd136659eabdc1fd4c1d2e2d5f8043440cff\nparent 3a8932d9b0d12a67c9b92e0370de708a089d50b4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570033483 +0200\ncommitter GitHub <noreply@github.com> 1570033483 +0200\n\nRollup merge of #64991 - wesleywiser:fix_too_eager_const_prop, r=oli-obk\n\n[const-prop] Correctly handle locals that can't be propagated\n\n`const_prop()` now handles writing the Rvalue into the Place in the\nstack frame for us. So if we're not supposed to propagate that value,\nwe need to clear it.\n\nr? @oli-obk\n\nFixes #64970\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b", "html_url": "https://github.com/rust-lang/rust/commit/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "html_url": "https://github.com/rust-lang/rust/commit/028ffd136659eabdc1fd4c1d2e2d5f8043440cff"}, {"sha": "3a8932d9b0d12a67c9b92e0370de708a089d50b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8932d9b0d12a67c9b92e0370de708a089d50b4", "html_url": "https://github.com/rust-lang/rust/commit/3a8932d9b0d12a67c9b92e0370de708a089d50b4"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "49ac1de8fef64fe59b1cd1974f76965f3a06327d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=34ea55908e36e2b83d5ccdf34fa81aed95ecc44b", "patch": "@@ -335,34 +335,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n-        let l = &self.ecx.frame().locals[local];\n-\n-        // If the local is `Unitialized` or `Dead` then we haven't propagated a value into it.\n-        //\n-        // `InterpCx::access_local()` mostly takes care of this for us however, for ZSTs,\n-        // it will synthesize a value for us. In doing so, that will cause the\n-        // `get_const(l).is_empty()` assert right before we call `set_const()` in `visit_statement`\n-        // to fail.\n-        if let LocalValue::Uninitialized | LocalValue::Dead = l.value {\n-            return None;\n-        }\n-\n         self.ecx.access_local(self.ecx.frame(), local, None).ok()\n     }\n \n-    fn set_const(&mut self, local: Local, c: Const<'tcx>) {\n-        let frame = self.ecx.frame_mut();\n-\n-        if let Some(layout) = frame.locals[local].layout.get() {\n-            debug_assert_eq!(c.layout, layout);\n-        }\n-\n-        frame.locals[local] = LocalState {\n-            value: LocalValue::Live(*c),\n-            layout: Cell::new(Some(c.layout)),\n-        };\n-    }\n-\n     fn remove_const(&mut self, local: Local) {\n         self.ecx.frame_mut().locals[local] = LocalState {\n             value: LocalValue::Uninitialized,\n@@ -735,10 +710,8 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                                                          place) {\n                         trace!(\"checking whether {:?} can be stored to {:?}\", value, local);\n                         if self.can_const_prop[local] {\n-                            trace!(\"storing {:?} to {:?}\", value, local);\n-                            assert!(self.get_const(local).is_none() ||\n-                                    self.get_const(local) == Some(value));\n-                            self.set_const(local, value);\n+                            trace!(\"stored {:?} to {:?}\", value, local);\n+                            assert_eq!(self.get_const(local), Some(value));\n \n                             if self.should_const_prop() {\n                                 self.replace_with_const(\n@@ -747,6 +720,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                                     statement.source_info,\n                                 );\n                             }\n+                        } else {\n+                            trace!(\"can't propagate {:?} to {:?}\", value, local);\n+                            self.remove_const(local);\n                         }\n                     }\n                 }"}, {"sha": "ede5081c8a5c299f28eddcc9015dd2340c4b1e1a", "filename": "src/test/ui/consts/const-eval/issue-64970.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.rs?ref=34ea55908e36e2b83d5ccdf34fa81aed95ecc44b", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+fn main() {\n+    foo(10);\n+}\n+\n+fn foo(mut n: i32) {\n+    if false {\n+        n = 0i32;\n+    }\n+\n+    if n > 0i32 {\n+        1i32 / n;\n+    }\n+}"}, {"sha": "2c44b68cbd1d1921213f1cf1533f0d05dd5e5b89", "filename": "src/test/ui/consts/const-eval/issue-64970.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34ea55908e36e2b83d5ccdf34fa81aed95ecc44b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.stderr?ref=34ea55908e36e2b83d5ccdf34fa81aed95ecc44b", "patch": "@@ -0,0 +1,8 @@\n+warning: unused arithmetic operation that must be used\n+  --> $DIR/issue-64970.rs:13:9\n+   |\n+LL |         1i32 / n;\n+   |         ^^^^^^^^\n+   |\n+   = note: `#[warn(unused_must_use)]` on by default\n+"}]}