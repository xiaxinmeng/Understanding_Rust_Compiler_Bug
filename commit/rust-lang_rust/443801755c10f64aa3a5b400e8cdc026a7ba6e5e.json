{"sha": "443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "node_id": "C_kwDOAAsO6NoAKDQ0MzgwMTc1NWMxMGY2NGFhM2E1YjQwMGU4Y2RjMDI2YTdiYTZlNWU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-19T10:02:51Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-19T14:55:49Z"}, "message": "Refactor\n\n- Remove unnecessary references and derefs\n- Manual formatting", "tree": {"sha": "08dbcad53e9898f7404d17cb017b5681d98d22c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08dbcad53e9898f7404d17cb017b5681d98d22c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPyOHUACgkQ4laYqTBY\nYXGG/w//RizQ1itPuRtlx9Wk3J3OS/+MnOFA8MZUin6KpcGZpaF2ELoIaLgrgX7d\n7AnbnrraqG5vHJ4dSmRwbtNSpgpfI9xgZq9cQt3Vh/jixX32zTOxAlSB/GQbKiJT\nS0HpzibxMve6xn4V1Evl4sSU0m4JzjODtgV56dVCxUu5YESl4t3y9Yaar+DNJ4II\nf7GgtmvMTr7uZWRTmmNOF/0UGDvNZtnWZcsltF6ez9H1ldQ3AxC7pO6ZQdXQRTwt\ncMZEmh/lQUAxWo2fB5kMdr8ghdKA6Rxiy01GiwuP5KIRiNtEyWfU7RiOieLGar9a\n7FOLvTBFCPhe15+owzyDpqFJcqaI4TTOjvwBJBzt27hrOY8iDTbZvhecUieA217+\n6NvjwWHGdJvmoBVytTQQyrMe/jAbcwFyK+ydc+j6t1q8SL7DWQ5OneAeFxk3X9Tc\nt/Jf6wg4hrQJ6IKJUQ/IS+m3kYDBUUdRsQ9dJt3cPVrUMeAxaKNdmO1SMZ/syaPH\nMBCRqbL4Dsz8GB/4p76X6nyCoZrueOTWUqKv1+bRNmExcziuaMsVxf1dDiGQjVhY\nNtEb2ONJgRH8MfUkyt/LW96CtNuBw3g6zyeWi5ylIB/6hWbFJML4REtWMv7n3hYA\n/IpvUBgaYaoqF1YrtGFgjz2M7gh49RzubaqqxPajoB5senJ7M+k=\n=WIg+\n-----END PGP SIGNATURE-----", "payload": "tree 08dbcad53e9898f7404d17cb017b5681d98d22c9\nparent a6603fc21d50b3386a488c96225b2d1fd492e533\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1676800971 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1676818549 +0900\n\nRefactor\n\n- Remove unnecessary references and derefs\n- Manual formatting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "html_url": "https://github.com/rust-lang/rust/commit/443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6603fc21d50b3386a488c96225b2d1fd492e533", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6603fc21d50b3386a488c96225b2d1fd492e533", "html_url": "https://github.com/rust-lang/rust/commit/a6603fc21d50b3386a488c96225b2d1fd492e533"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "2aab1ccd914c1ccffdc1ddb1c464ae12b9f9b6c2", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "patch": "@@ -128,7 +128,7 @@ impl ModuleId {\n     }\n }\n \n-/// An ID of a module, **local** to a specific crate\n+/// An ID of a module, **local** to a `DefMap`.\n pub type LocalModuleId = Idx<nameres::ModuleData>;\n \n #[derive(Debug)]"}, {"sha": "a7ce0360516aa0e1f6d81efa8c25050abaa3fd20", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "patch": "@@ -342,7 +342,7 @@ impl DefMap {\n     }\n \n     pub(crate) fn block_id(&self) -> Option<BlockId> {\n-        self.block.as_ref().map(|block| block.block)\n+        self.block.map(|block| block.block)\n     }\n \n     pub(crate) fn prelude(&self) -> Option<ModuleId> {\n@@ -354,7 +354,7 @@ impl DefMap {\n     }\n \n     pub fn module_id(&self, local_id: LocalModuleId) -> ModuleId {\n-        let block = self.block.as_ref().map(|b| b.block);\n+        let block = self.block.map(|b| b.block);\n         ModuleId { krate: self.krate, local_id, block }\n     }\n \n@@ -432,9 +432,9 @@ impl DefMap {\n     /// Returns the module containing `local_mod`, either the parent `mod`, or the module containing\n     /// the block, if `self` corresponds to a block expression.\n     pub fn containing_module(&self, local_mod: LocalModuleId) -> Option<ModuleId> {\n-        match &self[local_mod].parent {\n-            Some(parent) => Some(self.module_id(*parent)),\n-            None => self.block.as_ref().map(|block| block.parent),\n+        match self[local_mod].parent {\n+            Some(parent) => Some(self.module_id(parent)),\n+            None => self.block.map(|block| block.parent),\n         }\n     }\n \n@@ -444,11 +444,11 @@ impl DefMap {\n         let mut buf = String::new();\n         let mut arc;\n         let mut current_map = self;\n-        while let Some(block) = &current_map.block {\n+        while let Some(block) = current_map.block {\n             go(&mut buf, current_map, \"block scope\", current_map.root);\n             buf.push('\\n');\n             arc = block.parent.def_map(db);\n-            current_map = &*arc;\n+            current_map = &arc;\n         }\n         go(&mut buf, current_map, \"crate\", current_map.root);\n         return buf;\n@@ -472,10 +472,10 @@ impl DefMap {\n         let mut buf = String::new();\n         let mut arc;\n         let mut current_map = self;\n-        while let Some(block) = &current_map.block {\n+        while let Some(block) = current_map.block {\n             format_to!(buf, \"{:?} in {:?}\\n\", block.block, block.parent);\n             arc = block.parent.def_map(db);\n-            current_map = &*arc;\n+            current_map = &arc;\n         }\n \n         format_to!(buf, \"crate scope\\n\");"}, {"sha": "eee73b9f3738780034ee670277b6ed526b9a70a2", "filename": "crates/hir-def/src/visibility.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fvisibility.rs?ref=443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     nameres::DefMap,\n     path::{ModPath, PathKind},\n     resolver::HasResolver,\n-    ConstId, FunctionId, HasModule, LocalFieldId, ModuleId, VariantId,\n+    ConstId, FunctionId, HasModule, LocalFieldId, LocalModuleId, ModuleId, VariantId,\n };\n \n /// Visibility of an item, not yet resolved.\n@@ -142,7 +142,8 @@ impl Visibility {\n                 arc = to_module.def_map(db);\n                 &arc\n             };\n-        let is_block_root = matches!(to_module.block, Some(_) if to_module_def_map[to_module.local_id].parent.is_none());\n+        let is_block_root =\n+            to_module.block.is_some() && to_module_def_map[to_module.local_id].parent.is_none();\n         if is_block_root {\n             to_module = to_module_def_map.containing_module(to_module.local_id).unwrap();\n         }"}, {"sha": "830d261d78695963aa5080d86eaeeac1d6e20454", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443801755c10f64aa3a5b400e8cdc026a7ba6e5e/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=443801755c10f64aa3a5b400e8cdc026a7ba6e5e", "patch": "@@ -50,7 +50,7 @@ impl HirDisplay for Function {\n \n         let write_self_param = |ty: &TypeRef, f: &mut HirFormatter<'_>| match ty {\n             TypeRef::Path(p) if p.is_self_type() => f.write_str(\"self\"),\n-            TypeRef::Reference(inner, lifetime, mut_) if matches!(&**inner,TypeRef::Path(p) if p.is_self_type()) =>\n+            TypeRef::Reference(inner, lifetime, mut_) if matches!(&**inner, TypeRef::Path(p) if p.is_self_type()) =>\n             {\n                 f.write_char('&')?;\n                 if let Some(lifetime) = lifetime {"}]}