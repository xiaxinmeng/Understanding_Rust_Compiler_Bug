{"sha": "891ada9be16451e46268ea0924c1710596e7ddbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MWFkYTliZTE2NDUxZTQ2MjY4ZWEwOTI0YzE3MTA1OTZlN2RkYmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T04:54:41Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T15:59:03Z"}, "message": "syntax: convert LitBinary from @[u8] to Rc<~[u8]>.", "tree": {"sha": "ec1a843f9963c0c4787520ce27541ed3a67468ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec1a843f9963c0c4787520ce27541ed3a67468ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/891ada9be16451e46268ea0924c1710596e7ddbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/891ada9be16451e46268ea0924c1710596e7ddbb", "html_url": "https://github.com/rust-lang/rust/commit/891ada9be16451e46268ea0924c1710596e7ddbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/891ada9be16451e46268ea0924c1710596e7ddbb/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b972cadf61df77b17c4b53eafaa8e3361f123dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b972cadf61df77b17c4b53eafaa8e3361f123dc4", "html_url": "https://github.com/rust-lang/rust/commit/b972cadf61df77b17c4b53eafaa8e3361f123dc4"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "a8b0da8026689bd321f2075f5e0bc68e1ea94588", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=891ada9be16451e46268ea0924c1710596e7ddbb", "patch": "@@ -75,7 +75,7 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)\n         ast::LitBool(b) => C_bool(b),\n         ast::LitNil => C_nil(),\n         ast::LitStr(ref s, _) => C_str_slice(cx, (*s).clone()),\n-        ast::LitBinary(data) => C_binary_slice(cx, data),\n+        ast::LitBinary(ref data) => C_binary_slice(cx, *data.borrow()),\n     }\n }\n "}, {"sha": "8220be1046166106e5eaac81afcbab4530d38879", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=891ada9be16451e46268ea0924c1710596e7ddbb", "patch": "@@ -1151,7 +1151,7 @@ impl ToSource for syntax::codemap::Span {\n fn lit_to_str(lit: &ast::Lit) -> ~str {\n     match lit.node {\n         ast::LitStr(ref st, _) => st.get().to_owned(),\n-        ast::LitBinary(data) => format!(\"{:?}\", data.as_slice()),\n+        ast::LitBinary(ref data) => format!(\"{:?}\", data.borrow().as_slice()),\n         ast::LitChar(c) => ~\"'\" + std::char::from_u32(c).unwrap().to_str() + \"'\",\n         ast::LitInt(i, _t) => i.to_str(),\n         ast::LitUint(u, _t) => u.to_str(),"}, {"sha": "dcac134329c2b36475b4138af8682054f9e0fe61", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=891ada9be16451e46268ea0924c1710596e7ddbb", "patch": "@@ -20,6 +20,7 @@ use parse::token;\n use std::cell::RefCell;\n use std::hashmap::HashMap;\n use std::option::Option;\n+use std::rc::Rc;\n use std::to_str::ToStr;\n use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -724,7 +725,7 @@ pub type Lit = Spanned<Lit_>;\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum Lit_ {\n     LitStr(InternedString, StrStyle),\n-    LitBinary(@[u8]),\n+    LitBinary(Rc<~[u8]>),\n     LitChar(u32),\n     LitInt(i64, IntTy),\n     LitUint(u64, UintTy),"}, {"sha": "f3f947ec00d3d3a64c5817d3b1355427b62dd475", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=891ada9be16451e46268ea0924c1710596e7ddbb", "patch": "@@ -22,6 +22,7 @@ use print::pprust;\n \n use std::io;\n use std::io::File;\n+use std::rc::Rc;\n use std::str;\n \n // These macros all relate to the file system; they either return\n@@ -135,8 +136,6 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n pub fn expand_include_bin(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         -> base::MacResult\n {\n-    use std::at_vec;\n-\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_bin!\") {\n         Some(f) => f,\n         None => return MacResult::dummy_expr()\n@@ -148,8 +147,7 @@ pub fn expand_include_bin(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             return MacResult::dummy_expr();\n         }\n         Ok(bytes) => {\n-            let bytes = at_vec::to_managed_move(bytes);\n-            base::MRExpr(cx.expr_lit(sp, ast::LitBinary(bytes)))\n+            base::MRExpr(cx.expr_lit(sp, ast::LitBinary(Rc::new(bytes))))\n         }\n     }\n }"}, {"sha": "bdef5e093f2f5b5220974e52a34f56788788333b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/891ada9be16451e46268ea0924c1710596e7ddbb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=891ada9be16451e46268ea0924c1710596e7ddbb", "patch": "@@ -2212,10 +2212,10 @@ pub fn print_literal(s: &mut State, lit: &ast::Lit) {\n       ast::LitBool(val) => {\n         if val { word(&mut s.s, \"true\"); } else { word(&mut s.s, \"false\"); }\n       }\n-      ast::LitBinary(arr) => {\n+      ast::LitBinary(ref arr) => {\n         ibox(s, indent_unit);\n         word(&mut s.s, \"[\");\n-        commasep_cmnt(s, Inconsistent, arr, |s, u| word(&mut s.s, format!(\"{}\", *u)),\n+        commasep_cmnt(s, Inconsistent, *arr.borrow(), |s, u| word(&mut s.s, format!(\"{}\", *u)),\n                       |_| lit.span);\n         word(&mut s.s, \"]\");\n         end(s);"}]}