{"sha": "6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjlkNGY4M2I5Y2NiZmM4NGVjMDRiODZkYTI3YTU4Zjg3ODlkYjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T03:30:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T03:30:20Z"}, "message": "Remove typeck::proto_to_ty_proto", "tree": {"sha": "c6cc2eeb150d3e5ca74e3e5e6600dc92d561c7ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6cc2eeb150d3e5ca74e3e5e6600dc92d561c7ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3", "html_url": "https://github.com/rust-lang/rust/commit/6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64d47a61e3ca5c989927ec23cbe5bc1aa9fbc95", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64d47a61e3ca5c989927ec23cbe5bc1aa9fbc95", "html_url": "https://github.com/rust-lang/rust/commit/f64d47a61e3ca5c989927ec23cbe5bc1aa9fbc95"}], "stats": {"total": 12, "additions": 2, "deletions": 10}, "files": [{"sha": "d418168f3fab384ad049a93a89de702bc57084b1", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3", "patch": "@@ -473,14 +473,6 @@ mod write {\n     }\n }\n \n-// Determine the proto for a fn type given the proto for its associated\n-// code. This is needed because fn and lambda have fn type while iter\n-// has iter type and block has block type. This may end up changing.\n-fn proto_to_ty_proto(proto: ast::proto) -> ast::proto {\n-    // FIXME: This is no longer needed since fn@ and lambda have\n-    // the same type\n-    proto\n-}\n \n // Item collection - a pair of bootstrap passes:\n //\n@@ -529,7 +521,7 @@ mod collect {\n             out_constrs += [ty::ast_constr_to_constr(cx.tcx, constr)];\n         }\n         let t_fn =\n-            ty::mk_fn(cx.tcx, proto_to_ty_proto(proto), input_tys, output_ty,\n+            ty::mk_fn(cx.tcx, proto, input_tys, output_ty,\n                       decl.cf, out_constrs);\n         let tpt = {kinds: ty_param_kinds(ty_params), ty: t_fn};\n         alt def_id { some(did) { cx.tcx.tcache.insert(did, tpt); } _ { } }\n@@ -584,7 +576,7 @@ mod collect {\n         for constr: @ast::constr in m.node.meth.decl.constraints {\n             out_constrs += [ty::ast_constr_to_constr(cx.tcx, constr)];\n         }\n-        ret {proto: proto_to_ty_proto(m.node.meth.proto),\n+        ret {proto: m.node.meth.proto,\n              ident: m.node.ident,\n              inputs: inputs,\n              output: output,"}]}