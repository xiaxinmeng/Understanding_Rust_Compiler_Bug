{"sha": "45de0336a5ca03834f74189af6682462d874f980", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZGUwMzM2YTVjYTAzODM0Zjc0MTg5YWY2NjgyNDYyZDg3NGY5ODA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-29T14:43:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:28:28Z"}, "message": "Fix some more stuff", "tree": {"sha": "6eaa57806c30bfbcf7f529b5ef07927840ee086e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eaa57806c30bfbcf7f529b5ef07927840ee086e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45de0336a5ca03834f74189af6682462d874f980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45de0336a5ca03834f74189af6682462d874f980", "html_url": "https://github.com/rust-lang/rust/commit/45de0336a5ca03834f74189af6682462d874f980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45de0336a5ca03834f74189af6682462d874f980/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79f4c3d002c1265220d2b39b74a7b4b37b6e2f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f4c3d002c1265220d2b39b74a7b4b37b6e2f54", "html_url": "https://github.com/rust-lang/rust/commit/79f4c3d002c1265220d2b39b74a7b4b37b6e2f54"}], "stats": {"total": 145, "additions": 120, "deletions": 25}, "files": [{"sha": "fa47831b6486db7344b889f143a56cb158e5c008", "filename": "example/mini_core.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45de0336a5ca03834f74189af6682462d874f980/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de0336a5ca03834f74189af6682462d874f980/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=45de0336a5ca03834f74189af6682462d874f980", "patch": "@@ -44,10 +44,12 @@ unsafe impl Copy for u8 {}\n unsafe impl Copy for u16 {}\n unsafe impl Copy for u32 {}\n unsafe impl Copy for u64 {}\n+unsafe impl Copy for u128 {}\n unsafe impl Copy for usize {}\n unsafe impl Copy for i8 {}\n unsafe impl Copy for i16 {}\n unsafe impl Copy for i32 {}\n+unsafe impl Copy for i128 {}\n unsafe impl Copy for isize {}\n unsafe impl Copy for char {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n@@ -152,6 +154,14 @@ impl Add for u128 {\n     }\n }\n \n+impl Add for i128 {\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        self + rhs\n+    }\n+}\n+\n #[lang = \"sub\"]\n pub trait Sub<RHS = Self> {\n     type Output;\n@@ -276,6 +286,15 @@ impl PartialEq for i32 {\n     }\n }\n \n+impl PartialEq for i128 {\n+    fn eq(&self, other: &i128) -> bool {\n+        (*self) == (*other)\n+    }\n+    fn ne(&self, other: &i128) -> bool {\n+        (*self) != (*other)\n+    }\n+}\n+\n impl PartialEq for isize {\n     fn eq(&self, other: &isize) -> bool {\n         (*self) == (*other)\n@@ -322,6 +341,14 @@ impl Neg for i16 {\n     type Output = i16;\n \n     fn neg(self) -> i16 {\n+        self\n+    }\n+}\n+\n+impl Neg for i128 {\n+    type Output = i128;\n+\n+    fn neg(self) -> i128 {\n         -self\n     }\n }\n@@ -446,6 +473,7 @@ pub mod intrinsics {\n         pub fn needs_drop<T>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n+        pub fn unchecked_div<T>(lhs: T, rhs: T) -> T;\n     }\n }\n "}, {"sha": "4a26577af524a9d566fb0a27d2044952aba10c24", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45de0336a5ca03834f74189af6682462d874f980/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de0336a5ca03834f74189af6682462d874f980/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=45de0336a5ca03834f74189af6682462d874f980", "patch": "@@ -117,6 +117,22 @@ impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsiz\n fn take_f32(_f: f32) {}\n fn take_unique(_u: Unique<()>) {}\n \n-fn main() {\n+fn checked_div_i128(lhs: i128, rhs: i128) -> Option<i128> {\n+    if rhs == 0 || (lhs == -170141183460469231731687303715884105728 && rhs == -1) {\n+        None\n+    } else {\n+        Some(unsafe { intrinsics::unchecked_div(lhs, rhs) })\n+    }\n+}\n \n+fn checked_div_u128(lhs: u128, rhs: u128) -> Option<u128> {\n+    match rhs {\n+        0 => None,\n+        rhs => Some(unsafe { intrinsics::unchecked_div(lhs, rhs) })\n+    }\n+}\n+\n+fn main() {\n+    checked_div_i128(0i128, 2i128);\n+    checked_div_u128(0u128, 2u128);\n }"}, {"sha": "94ba93de14193df321cc2ebb4ffe7a76ba73390f", "filename": "src/base.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/45de0336a5ca03834f74189af6682462d874f980/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de0336a5ca03834f74189af6682462d874f980/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=45de0336a5ca03834f74189af6682462d874f980", "patch": "@@ -357,15 +357,28 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                                     let res = fx.bcx.ins().icmp_imm(IntCC::Equal, val, 0);\n                                     fx.bcx.ins().bint(types::I8, res)\n                                 }\n-                                ty::Uint(_) | ty::Int(_) => fx.bcx.ins().bnot(val),\n+                                ty::Uint(_) | ty::Int(_) => {\n+                                    if fx.bcx.func.dfg.value_type(val) == types::I128 {\n+                                        let (a, b) = fx.bcx.ins().isplit(val);\n+                                        let a = fx.bcx.ins().bnot(a);\n+                                        let b = fx.bcx.ins().bnot(b);\n+                                        fx.bcx.ins().iconcat(a, b)\n+                                    } else {\n+                                        fx.bcx.ins().bnot(val)\n+                                    }\n+                                }\n                                 _ => unimplemented!(\"un op Not for {:?}\", layout.ty),\n                             }\n                         }\n                         UnOp::Neg => match layout.ty.sty {\n                             ty::Int(_) => {\n                                 let clif_ty = fx.clif_type(layout.ty).unwrap();\n-                                let zero = fx.bcx.ins().iconst(clif_ty, 0);\n-                                fx.bcx.ins().isub(zero, val)\n+                                if clif_ty == types::I128 {\n+                                    crate::trap::trap_unreachable_ret_value(fx, layout, \"i128 neg is not yet supported\").load_scalar(fx)\n+                                } else {\n+                                    let zero = fx.bcx.ins().iconst(clif_ty, 0);\n+                                    fx.bcx.ins().isub(zero, val)\n+                                }\n                             }\n                             ty::Float(_) => fx.bcx.ins().fneg(val),\n                             _ => unimplemented!(\"un op Neg for {:?}\", layout.ty),"}, {"sha": "6c907720477cca7c3de107aba8a9f256673702bb", "filename": "src/common.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/45de0336a5ca03834f74189af6682462d874f980/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de0336a5ca03834f74189af6682462d874f980/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=45de0336a5ca03834f74189af6682462d874f980", "patch": "@@ -82,26 +82,42 @@ pub fn clif_intcast<'a, 'tcx: 'a>(\n     if from == to {\n         return val;\n     }\n-    if to == types::I128 {\n-        let wider = if signed {\n-            fx.bcx.ins().sextend(types::I64, val)\n-        } else {\n-            fx.bcx.ins().uextend(types::I64, val)\n-        };\n-        let zero = fx.bcx.ins().iconst(types::I64, 0);\n-        return fx.bcx.ins().iconcat(wider, zero);\n-    }\n-    if to.wider_or_equal(from) {\n-        if signed {\n-            fx.bcx.ins().sextend(to, val)\n-        } else {\n-            fx.bcx.ins().uextend(to, val)\n+    match (from, to) {\n+        // equal\n+        (_, _) if from == to => val,\n+\n+        // extend\n+        (_, types::I128) => {\n+            let wider = if from == types::I64 {\n+                val\n+            } else if signed {\n+                fx.bcx.ins().sextend(types::I64, val)\n+            } else {\n+                fx.bcx.ins().uextend(types::I64, val)\n+            };\n+            let zero = fx.bcx.ins().iconst(types::I64, 0);\n+            fx.bcx.ins().iconcat(wider, zero)\n+        }\n+        (_, _) if to.wider_or_equal(from) => {\n+            if signed {\n+                fx.bcx.ins().sextend(to, val)\n+            } else {\n+                fx.bcx.ins().uextend(to, val)\n+            }\n+        }\n+\n+        // reduce\n+        (types::I128, _) => {\n+            let (lsb, _msb) = fx.bcx.ins().isplit(val);\n+            if to == types::I64 {\n+                lsb\n+            } else {\n+                fx.bcx.ins().ireduce(to, lsb)\n+            }\n+        }\n+        (_, _) => {\n+            fx.bcx.ins().ireduce(to, val)\n         }\n-    } else if from == types::I128 {\n-        let (lsb, _msb) = fx.bcx.ins().isplit(val);\n-        fx.bcx.ins().ireduce(to, lsb)\n-    } else {\n-        fx.bcx.ins().ireduce(to, val)\n     }\n }\n "}, {"sha": "aaf4622178526b869aa1f070e3bee611b7404adc", "filename": "src/intrinsics.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45de0336a5ca03834f74189af6682462d874f980/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de0336a5ca03834f74189af6682462d874f980/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=45de0336a5ca03834f74189af6682462d874f980", "patch": "@@ -390,11 +390,33 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             fx.bcx.call_memset(fx.module.target_config(), dst_ptr, val, count);\n         };\n         ctlz | ctlz_nonzero, <T> (v arg) {\n-            let res = CValue::by_val(fx.bcx.ins().clz(arg), fx.layout_of(T));\n+            let res = if T == fx.tcx.types.u128 || T == fx.tcx.types.i128 {\n+                // FIXME verify this algorithm is correct\n+                let (lsb, msb) = fx.bcx.ins().isplit(arg);\n+                let lsb_lz = fx.bcx.ins().clz(lsb);\n+                let msb_lz = fx.bcx.ins().clz(msb);\n+                let msb_lz_is_64 = fx.bcx.ins().icmp_imm(IntCC::Equal, msb_lz, 64);\n+                let lsb_lz_plus_64 = fx.bcx.ins().iadd_imm(lsb_lz, 64);\n+                fx.bcx.ins().select(msb_lz_is_64, lsb_lz_plus_64, msb_lz)\n+            } else {\n+                fx.bcx.ins().clz(arg)\n+            };\n+            let res = CValue::by_val(res, fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n         cttz | cttz_nonzero, <T> (v arg) {\n-            let res = CValue::by_val(fx.bcx.ins().ctz(arg), fx.layout_of(T));\n+            let res = if T == fx.tcx.types.u128 || T == fx.tcx.types.i128 {\n+                // FIXME verify this algorithm is correct\n+                let (lsb, msb) = fx.bcx.ins().isplit(arg);\n+                let lsb_tz = fx.bcx.ins().ctz(lsb);\n+                let msb_tz = fx.bcx.ins().ctz(msb);\n+                let lsb_tz_is_64 = fx.bcx.ins().icmp_imm(IntCC::Equal, lsb_tz, 64);\n+                let msb_lz_plus_64 = fx.bcx.ins().iadd_imm(msb_tz, 64);\n+                fx.bcx.ins().select(lsb_tz_is_64, msb_lz_plus_64, lsb_tz)\n+            } else {\n+                fx.bcx.ins().ctz(arg)\n+            };\n+            let res = CValue::by_val(res, fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n         ctpop, <T> (v arg) {"}]}