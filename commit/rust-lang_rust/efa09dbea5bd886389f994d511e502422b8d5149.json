{"sha": "efa09dbea5bd886389f994d511e502422b8d5149", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYTA5ZGJlYTViZDg4NjM4OWY5OTRkNTExZTUwMjQyMmI4ZDUxNDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-05T00:21:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-15T21:50:32Z"}, "message": "modify MIR type-checker to process obligations as they are incurred", "tree": {"sha": "f85dee1793c9c78b3814ac4f89402f34cd63342f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f85dee1793c9c78b3814ac4f89402f34cd63342f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efa09dbea5bd886389f994d511e502422b8d5149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efa09dbea5bd886389f994d511e502422b8d5149", "html_url": "https://github.com/rust-lang/rust/commit/efa09dbea5bd886389f994d511e502422b8d5149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efa09dbea5bd886389f994d511e502422b8d5149/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8abd704a918d8023d3f0cc2268ae37439237c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8abd704a918d8023d3f0cc2268ae37439237c5", "html_url": "https://github.com/rust-lang/rust/commit/9e8abd704a918d8023d3f0cc2268ae37439237c5"}], "stats": {"total": 81, "additions": 37, "deletions": 44}, "files": [{"sha": "f45dd4f3c71eae0413ab467571fc2a860cbd9d56", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/efa09dbea5bd886389f994d511e502422b8d5149/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa09dbea5bd886389f994d511e502422b8d5149/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=efa09dbea5bd886389f994d511e502422b8d5149", "patch": "@@ -11,8 +11,9 @@\n //! This pass type-checks the MIR to ensure it is not broken.\n #![allow(unreachable_code)]\n \n-use rustc::infer::{self, InferCtxt, InferOk};\n-use rustc::traits;\n+use rustc::infer::{InferCtxt, InferOk, InferResult, UnitResult};\n+use rustc::traits::{self, FulfillmentContext};\n+use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n use rustc::middle::const_val::ConstVal;\n@@ -366,7 +367,6 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n pub struct TypeChecker<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'gcx>,\n-    fulfillment_cx: traits::FulfillmentContext<'tcx>,\n     last_span: Span,\n     body_id: ast::NodeId,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n@@ -380,7 +380,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     ) -> Self {\n         TypeChecker {\n             infcx,\n-            fulfillment_cx: traits::FulfillmentContext::new(),\n             last_span: DUMMY_SP,\n             body_id,\n             param_env,\n@@ -392,37 +391,45 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         traits::ObligationCause::misc(span, self.body_id)\n     }\n \n-    pub fn register_infer_ok_obligations<T>(&mut self, infer_ok: InferOk<'tcx, T>) -> T {\n-        for obligation in infer_ok.obligations {\n-            self.fulfillment_cx\n-                .register_predicate_obligation(self.infcx, obligation);\n-        }\n-        infer_ok.value\n+    fn fully_perform_op<OP, R>(&self,\n+                               op: OP)\n+                               -> Result<R, TypeError<'tcx>>\n+        where OP: FnOnce() -> InferResult<'tcx, R>\n+    {\n+        let mut fulfill_cx = FulfillmentContext::new();\n+        let InferOk { value, obligations } = self.infcx.commit_if_ok(|_| op())?;\n+        fulfill_cx.register_predicate_obligations(self.infcx, obligations);\n+        if let Err(e) = fulfill_cx.select_all_or_error(self.infcx) {\n+            span_mirbug!(self, \"\", \"errors selecting obligation: {:?}\", e);\n+        } // FIXME propagate\n+        Ok(value)\n     }\n \n     fn sub_types(\n-        &mut self,\n+        &self,\n         sub: Ty<'tcx>,\n         sup: Ty<'tcx>,\n         _at_location: Location,\n-    ) -> infer::UnitResult<'tcx> {\n-        self.infcx\n-            .at(&self.misc(self.last_span), self.param_env)\n-            .sup(sup, sub)\n-            .map(|ok| self.register_infer_ok_obligations(ok))\n+    ) -> UnitResult<'tcx> {\n+        self.fully_perform_op(|| {\n+            self.infcx\n+                .at(&self.misc(self.last_span), self.param_env)\n+                .sup(sup, sub)\n+        })\n     }\n \n     fn eq_types(\n-        &mut self,\n-        span: Span,\n+        &self,\n+        _span: Span,\n         a: Ty<'tcx>,\n         b: Ty<'tcx>,\n         _at_location: Location,\n-    ) -> infer::UnitResult<'tcx> {\n-        self.infcx\n-            .at(&self.misc(span), self.param_env)\n-            .eq(b, a)\n-            .map(|ok| self.register_infer_ok_obligations(ok))\n+    ) -> UnitResult<'tcx> {\n+        self.fully_perform_op(|| {\n+            self.infcx\n+                .at(&self.misc(self.last_span), self.param_env)\n+                .eq(b, a)\n+        })\n     }\n \n     fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -898,26 +905,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     where\n         T: fmt::Debug + TypeFoldable<'tcx>,\n     {\n-        let mut selcx = traits::SelectionContext::new(self.infcx);\n-        let cause = traits::ObligationCause::misc(self.last_span, ast::CRATE_NODE_ID);\n-        let traits::Normalized { value, obligations } =\n-            traits::normalize(&mut selcx, self.param_env, cause, value);\n-\n-        debug!(\"normalize: value={:?} obligations={:?}\", value, obligations);\n-\n-        let fulfill_cx = &mut self.fulfillment_cx;\n-        for obligation in obligations {\n-            fulfill_cx.register_predicate_obligation(self.infcx, obligation);\n-        }\n-\n-        value\n-    }\n-\n-    fn verify_obligations(&mut self, mir: &Mir<'tcx>) {\n-        self.last_span = mir.span;\n-        if let Err(e) = self.fulfillment_cx.select_all_or_error(self.infcx) {\n-            span_mirbug!(self, \"\", \"errors selecting obligation: {:?}\", e);\n-        }\n+        self.fully_perform_op(|| {\n+            let mut selcx = traits::SelectionContext::new(self.infcx);\n+            let cause = traits::ObligationCause::misc(self.last_span, ast::CRATE_NODE_ID);\n+            let traits::Normalized { value, obligations } =\n+                traits::normalize(&mut selcx, self.param_env, cause, value);\n+            Ok(InferOk { value, obligations })\n+        }).unwrap()\n     }\n }\n \n@@ -946,7 +940,6 @@ impl MirPass for TypeckMir {\n                 }\n             }\n             checker.typeck_mir(mir);\n-            checker.verify_obligations(mir);\n         });\n     }\n }"}]}