{"sha": "ef59ab738e9e6b6021294cd31901ee42c81b67ec", "node_id": "C_kwDOAAsO6NoAKGVmNTlhYjczOGU5ZTZiNjAyMTI5NGNkMzE5MDFlZTQyYzgxYjY3ZWM", "commit": {"author": {"name": "James 'zofrex' Sanderson", "email": "zofrex@gmail.com", "date": "2022-04-07T07:51:59Z"}, "committer": {"name": "James 'zofrex' Sanderson", "email": "zofrex@gmail.com", "date": "2022-04-07T07:51:59Z"}, "message": "Use gender neutral terms", "tree": {"sha": "28fc08c8102c7bf57c9f3d5353a6ba52d10dfb29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28fc08c8102c7bf57c9f3d5353a6ba52d10dfb29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef59ab738e9e6b6021294cd31901ee42c81b67ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef59ab738e9e6b6021294cd31901ee42c81b67ec", "html_url": "https://github.com/rust-lang/rust/commit/ef59ab738e9e6b6021294cd31901ee42c81b67ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef59ab738e9e6b6021294cd31901ee42c81b67ec/comments", "author": {"login": "zofrex", "id": 22220, "node_id": "MDQ6VXNlcjIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/22220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zofrex", "html_url": "https://github.com/zofrex", "followers_url": "https://api.github.com/users/zofrex/followers", "following_url": "https://api.github.com/users/zofrex/following{/other_user}", "gists_url": "https://api.github.com/users/zofrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/zofrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zofrex/subscriptions", "organizations_url": "https://api.github.com/users/zofrex/orgs", "repos_url": "https://api.github.com/users/zofrex/repos", "events_url": "https://api.github.com/users/zofrex/events{/privacy}", "received_events_url": "https://api.github.com/users/zofrex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zofrex", "id": 22220, "node_id": "MDQ6VXNlcjIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/22220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zofrex", "html_url": "https://github.com/zofrex", "followers_url": "https://api.github.com/users/zofrex/followers", "following_url": "https://api.github.com/users/zofrex/following{/other_user}", "gists_url": "https://api.github.com/users/zofrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/zofrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zofrex/subscriptions", "organizations_url": "https://api.github.com/users/zofrex/orgs", "repos_url": "https://api.github.com/users/zofrex/repos", "events_url": "https://api.github.com/users/zofrex/events{/privacy}", "received_events_url": "https://api.github.com/users/zofrex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cd6080f6c778f6664ea3d12ca7848231707a627", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd6080f6c778f6664ea3d12ca7848231707a627", "html_url": "https://github.com/rust-lang/rust/commit/8cd6080f6c778f6664ea3d12ca7848231707a627"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "604e25a14e6be55f17828f9a26da6603f42f5c2d", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef59ab738e9e6b6021294cd31901ee42c81b67ec/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef59ab738e9e6b6021294cd31901ee42c81b67ec/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=ef59ab738e9e6b6021294cd31901ee42c81b67ec", "patch": "@@ -315,7 +315,7 @@ pub(super) fn count_metavar_decls(matcher: &[TokenTree]) -> usize {\n /// only on the nesting depth of repetitions in the originating token tree it\n /// was derived from.\n ///\n-/// In layman's terms: `NamedMatch` will form a tree representing nested matches of a particular\n+/// In layperson's terms: `NamedMatch` will form a tree representing nested matches of a particular\n /// meta variable. For example, if we are matching the following macro against the following\n /// invocation...\n ///"}, {"sha": "b2be70e707dab235e331d17fe357c505f3ae1154", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef59ab738e9e6b6021294cd31901ee42c81b67ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef59ab738e9e6b6021294cd31901ee42c81b67ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ef59ab738e9e6b6021294cd31901ee42c81b67ec", "patch": "@@ -1657,7 +1657,7 @@ fn receiver_is_valid<'fcx, 'tcx>(\n             }\n         } else {\n             debug!(\"receiver_is_valid: type `{:?}` does not deref to `{:?}`\", receiver_ty, self_ty);\n-            // If he receiver already has errors reported due to it, consider it valid to avoid\n+            // If the receiver already has errors reported due to it, consider it valid to avoid\n             // unnecessary errors (#58712).\n             return receiver_ty.references_error();\n         }"}, {"sha": "ec783a16ef73fa6fb1cbea3f96961355358703a5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef59ab738e9e6b6021294cd31901ee42c81b67ec/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef59ab738e9e6b6021294cd31901ee42c81b67ec/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ef59ab738e9e6b6021294cd31901ee42c81b67ec", "patch": "@@ -2700,7 +2700,7 @@ fn linkage_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Linkage {\n     // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n     // applicable to variable declarations and may not really make sense for\n     // Rust code in the first place but allow them anyway and trust that the\n-    // user knows what s/he's doing. Who knows, unanticipated use cases may pop\n+    // user knows what they're doing. Who knows, unanticipated use cases may pop\n     // up in the future.\n     //\n     // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported"}, {"sha": "e8d0132f4b98c57c954c0a67eb9ad6b69b83755b", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef59ab738e9e6b6021294cd31901ee42c81b67ec/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef59ab738e9e6b6021294cd31901ee42c81b67ec/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=ef59ab738e9e6b6021294cd31901ee42c81b67ec", "patch": "@@ -644,9 +644,9 @@ fn recursive_rmdir_toctou() {\n     // Test for time-of-check to time-of-use issues.\n     //\n     // Scenario:\n-    // The attacker wants to get directory contents deleted, to which he does not have access.\n-    // He has a way to get a privileged Rust binary call `std::fs::remove_dir_all()` on a\n-    // directory he controls, e.g. in his home directory.\n+    // The attacker wants to get directory contents deleted, to which they do not have access.\n+    // They have a way to get a privileged Rust binary call `std::fs::remove_dir_all()` on a\n+    // directory they control, e.g. in their home directory.\n     //\n     // The POC sets up the `attack_dest/attack_file` which the attacker wants to have deleted.\n     // The attacker repeatedly creates a directory and replaces it with a symlink from"}, {"sha": "fc307c5666d630a07639d92a184d7d8fbbd07ae7", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef59ab738e9e6b6021294cd31901ee42c81b67ec/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef59ab738e9e6b6021294cd31901ee42c81b67ec/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=ef59ab738e9e6b6021294cd31901ee42c81b67ec", "patch": "@@ -980,7 +980,7 @@ pub mod fast {\n         unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n             // SAFETY: See comment above (this function doc).\n             if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {\n-                // SAFETY: See comment above (his function doc).\n+                // SAFETY: See comment above (this function doc).\n                 Some(unsafe { self.inner.initialize(init) })\n             } else {\n                 None"}]}