{"sha": "d9eca56c065d27498a0e5fbd20ad114063c96281", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZWNhNTZjMDY1ZDI3NDk4YTBlNWZiZDIwYWQxMTQwNjNjOTYyODE=", "commit": {"author": {"name": "Phil Ruffwind", "email": "rf@rufflewind.com", "date": "2014-05-05T01:14:55Z"}, "committer": {"name": "Phil Ruffwind", "email": "rf@rufflewind.com", "date": "2014-05-13T21:19:01Z"}, "message": "Use Get/FreeEnvironmentStringsW instead of Get/FreeEnvironmentStringsA\n\nChanged libstd to use Get/FreeEnvironmentStringsW instead of\nGet/FreeEnvironmentStringsA to support Unicode environment variables.", "tree": {"sha": "2cc823adfc34d56ab0ebc81d1580884602fedc17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cc823adfc34d56ab0ebc81d1580884602fedc17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9eca56c065d27498a0e5fbd20ad114063c96281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9eca56c065d27498a0e5fbd20ad114063c96281", "html_url": "https://github.com/rust-lang/rust/commit/d9eca56c065d27498a0e5fbd20ad114063c96281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9eca56c065d27498a0e5fbd20ad114063c96281/comments", "author": {"login": "Rufflewind", "id": 6571068, "node_id": "MDQ6VXNlcjY1NzEwNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/6571068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rufflewind", "html_url": "https://github.com/Rufflewind", "followers_url": "https://api.github.com/users/Rufflewind/followers", "following_url": "https://api.github.com/users/Rufflewind/following{/other_user}", "gists_url": "https://api.github.com/users/Rufflewind/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rufflewind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rufflewind/subscriptions", "organizations_url": "https://api.github.com/users/Rufflewind/orgs", "repos_url": "https://api.github.com/users/Rufflewind/repos", "events_url": "https://api.github.com/users/Rufflewind/events{/privacy}", "received_events_url": "https://api.github.com/users/Rufflewind/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rufflewind", "id": 6571068, "node_id": "MDQ6VXNlcjY1NzEwNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/6571068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rufflewind", "html_url": "https://github.com/Rufflewind", "followers_url": "https://api.github.com/users/Rufflewind/followers", "following_url": "https://api.github.com/users/Rufflewind/following{/other_user}", "gists_url": "https://api.github.com/users/Rufflewind/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rufflewind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rufflewind/subscriptions", "organizations_url": "https://api.github.com/users/Rufflewind/orgs", "repos_url": "https://api.github.com/users/Rufflewind/repos", "events_url": "https://api.github.com/users/Rufflewind/events{/privacy}", "received_events_url": "https://api.github.com/users/Rufflewind/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6cce7ea5497977291f4ae57937360978e764e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cce7ea5497977291f4ae57937360978e764e41", "html_url": "https://github.com/rust-lang/rust/commit/b6cce7ea5497977291f4ae57937360978e764e41"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "a35ebb06437d92533d6d54815f9c3ba5fe4523b9", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9eca56c065d27498a0e5fbd20ad114063c96281/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9eca56c065d27498a0e5fbd20ad114063c96281/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=d9eca56c065d27498a0e5fbd20ad114063c96281", "patch": "@@ -4195,7 +4195,7 @@ pub mod funcs {\n             use types::os::arch::c95::{c_uint};\n             use types::os::arch::extra::{BOOL, DWORD, SIZE_T, HMODULE,\n                                                LPCWSTR, LPWSTR,\n-                                               LPCH, LPDWORD, LPVOID,\n+                                               LPWCH, LPDWORD, LPVOID,\n                                                LPCVOID, LPOVERLAPPED,\n                                                LPSECURITY_ATTRIBUTES,\n                                                LPSTARTUPINFO,\n@@ -4212,8 +4212,8 @@ pub mod funcs {\n                                                -> DWORD;\n                 pub fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n                                                -> BOOL;\n-                pub fn GetEnvironmentStringsA() -> LPCH;\n-                pub fn FreeEnvironmentStringsA(env_ptr: LPCH) -> BOOL;\n+                pub fn GetEnvironmentStringsW() -> LPWCH;\n+                pub fn FreeEnvironmentStringsW(env_ptr: LPWCH) -> BOOL;\n                 pub fn GetModuleFileNameW(hModule: HMODULE,\n                                           lpFilename: LPWSTR,\n                                           nSize: DWORD)"}, {"sha": "0a920a275acc4c575237521270041bd559cd9446", "filename": "src/libstd/os.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d9eca56c065d27498a0e5fbd20ad114063c96281/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9eca56c065d27498a0e5fbd20ad114063c96281/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=d9eca56c065d27498a0e5fbd20ad114063c96281", "patch": "@@ -31,7 +31,7 @@\n use clone::Clone;\n use container::Container;\n use libc;\n-use libc::{c_char, c_void, c_int};\n+use libc::{c_void, c_int};\n use option::{Some, None, Option};\n use os;\n use ops::Drop;\n@@ -49,6 +49,8 @@ use vec::Vec;\n \n #[cfg(unix)]\n use c_str::ToCStr;\n+#[cfg(unix)]\n+use libc::c_char;\n #[cfg(windows)]\n use str::OwnedStr;\n \n@@ -186,22 +188,42 @@ pub fn env_as_bytes() -> Vec<(~[u8],~[u8])> {\n     unsafe {\n         #[cfg(windows)]\n         unsafe fn get_env_pairs() -> Vec<~[u8]> {\n-            use c_str;\n+            use slice::raw;\n \n             use libc::funcs::extra::kernel32::{\n-                GetEnvironmentStringsA,\n-                FreeEnvironmentStringsA\n+                GetEnvironmentStringsW,\n+                FreeEnvironmentStringsW\n             };\n-            let ch = GetEnvironmentStringsA();\n+            let ch = GetEnvironmentStringsW();\n             if ch as uint == 0 {\n                 fail!(\"os::env() failure getting env string from OS: {}\",\n                        os::last_os_error());\n             }\n+            // Here, we lossily decode the string as UTF16.\n+            //\n+            // The docs suggest that the result should be in Unicode, but\n+            // Windows doesn't guarantee it's actually UTF16 -- it doesn't\n+            // validate the environment string passed to CreateProcess nor\n+            // SetEnvironmentVariable.  Yet, it's unlikely that returning a\n+            // raw u16 buffer would be of practical use since the result would\n+            // be inherently platform-dependent and introduce additional\n+            // complexity to this code.\n+            //\n+            // Using the non-Unicode version of GetEnvironmentStrings is even\n+            // worse since the result is in an OEM code page.  Characters that\n+            // can't be encoded in the code page would be turned into question\n+            // marks.\n             let mut result = Vec::new();\n-            c_str::from_c_multistring(ch as *c_char, None, |cstr| {\n-                result.push(cstr.as_bytes_no_nul().to_owned());\n-            });\n-            FreeEnvironmentStringsA(ch);\n+            let mut i = 0;\n+            while *ch.offset(i) != 0 {\n+                let p = &*ch.offset(i);\n+                let len = ptr::position(p, |c| *c == 0);\n+                raw::buf_as_slice(p, len, |s| {\n+                    result.push(str::from_utf16_lossy(s).into_bytes());\n+                });\n+                i += len as int + 1;\n+            }\n+            FreeEnvironmentStringsW(ch);\n             result\n         }\n         #[cfg(unix)]"}]}