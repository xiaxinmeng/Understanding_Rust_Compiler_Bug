{"sha": "3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "node_id": "C_kwDOAAsO6NoAKDNjZGRjOGJmZjZkNTM1N2ZjNjhhODdjODAyYTdmNGZhM2UxNjQyYTc", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-10-29T08:56:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-10-29T08:56:20Z"}, "message": "More inference-friendly API for lazy\n\nThe signature for new was\n\n```\nfn new<F>(f: F) -> Lazy<T, F>\n```\n\nNotably, with `F` unconstrained, `T` can be literally anything, and just\n`let _ = Lazy::new(|| 92)` would not typecheck.\n\nThis historiacally was a necessity -- `new` is a `const` function, it\ncouldn't have any bounds. Today though, we can move `new` under the `F:\nFnOnce() -> T` bound, which gives the compiler enough data to infer the\ntype of T from closure.", "tree": {"sha": "4203b0d74735994646d293cf245516d8ad7cc4de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4203b0d74735994646d293cf245516d8ad7cc4de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "html_url": "https://github.com/rust-lang/rust/commit/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b55ac39fa633d0983fad014469e1036669bf28", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b55ac39fa633d0983fad014469e1036669bf28", "html_url": "https://github.com/rust-lang/rust/commit/33b55ac39fa633d0983fad014469e1036669bf28"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "39209772c4e835835b20395522f5d62f1aec1515", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "patch": "@@ -31,7 +31,7 @@ pub struct LazyCell<T, F = fn() -> T> {\n     init: Cell<Option<F>>,\n }\n \n-impl<T, F> LazyCell<T, F> {\n+impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// Creates a new lazy value with the given initializing function.\n     ///\n     /// # Examples\n@@ -51,9 +51,7 @@ impl<T, F> LazyCell<T, F> {\n     pub const fn new(init: F) -> LazyCell<T, F> {\n         LazyCell { cell: OnceCell::new(), init: Cell::new(Some(init)) }\n     }\n-}\n \n-impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// Forces the evaluation of this lazy value and returns a reference to\n     /// the result.\n     ///"}, {"sha": "c7c3c479b71db92af495eaa0407940efcdd622e9", "filename": "library/core/tests/lazy.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/library%2Fcore%2Ftests%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/library%2Fcore%2Ftests%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flazy.rs?ref=3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "patch": "@@ -106,6 +106,12 @@ fn lazy_new() {\n     assert_eq!(called.get(), 1);\n }\n \n+// Check that we can infer `T` from closure's type.\n+#[test]\n+fn lazy_type_inference() {\n+    let _ = LazyCell::new(|| ());\n+}\n+\n #[test]\n fn aliasing_in_get() {\n     let x = OnceCell::new();"}, {"sha": "4955975ebdee65d5aec48fdbe64c3b44c9215fcd", "filename": "library/std/src/sync/lazy_lock.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs?ref=3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "patch": "@@ -44,17 +44,14 @@ pub struct LazyLock<T, F = fn() -> T> {\n     cell: OnceLock<T>,\n     init: Cell<Option<F>>,\n }\n-\n-impl<T, F> LazyLock<T, F> {\n+impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n     /// Creates a new lazy value with the given initializing\n     /// function.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub const fn new(f: F) -> LazyLock<T, F> {\n         LazyLock { cell: OnceLock::new(), init: Cell::new(Some(f)) }\n     }\n-}\n \n-impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n     /// Forces the evaluation of this lazy value and\n     /// returns a reference to result. This is equivalent\n     /// to the `Deref` impl, but is explicit."}, {"sha": "a5d4e25c5962a77885dcc906e5a7e8ae4babbc45", "filename": "library/std/src/sync/lazy_lock/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock%2Ftests.rs?ref=3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "patch": "@@ -136,6 +136,12 @@ fn sync_lazy_poisoning() {\n     }\n }\n \n+// Check that we can infer `T` from closure's type.\n+#[test]\n+fn lazy_type_inference() {\n+    let _ = LazyCell::new(|| ());\n+}\n+\n #[test]\n fn is_sync_send() {\n     fn assert_traits<T: Send + Sync>() {}"}]}