{"sha": "628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOGQzZTlkMzhjY2VkNmExZTgwYTQ5N2M5OGRjMTZmNmUxZWFkMTU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-13T22:54:39Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T00:03:54Z"}, "message": "Change (hopefully) all of the code that generates strs asts to produce ~strs.", "tree": {"sha": "aed7036a8756545162efece969ca2e24e9d608f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aed7036a8756545162efece969ca2e24e9d608f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "html_url": "https://github.com/rust-lang/rust/commit/628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e69d611e83c392cb83837ed3e6e440cc180d63", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e69d611e83c392cb83837ed3e6e440cc180d63", "html_url": "https://github.com/rust-lang/rust/commit/f5e69d611e83c392cb83837ed3e6e440cc180d63"}], "stats": {"total": 88, "additions": 52, "deletions": 36}, "files": [{"sha": "d3286fbc80f2b79b6892998ed557cdec3b3cf679", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "patch": "@@ -222,9 +222,13 @@ impl helpers for ext_ctxt {\n     fn lit_str(span: span, s: @str/~) -> @ast::expr {\n         self.expr(\n             span,\n-            ast::expr_lit(\n-                @{node: ast::lit_str(s),\n-                  span: span}))\n+            ast::expr_vstore(\n+                self.expr(\n+                    span,\n+                    ast::expr_lit(\n+                        @{node: ast::lit_str(s),\n+                          span: span})),\n+                ast::vstore_uniq))\n     }\n \n     fn lit_uint(span: span, i: uint) -> @ast::expr {"}, {"sha": "a2ed799819c5d7b9346fb2deefaa3a6e28d90a15", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "patch": "@@ -11,10 +11,6 @@ fn mk_lit(cx: ext_ctxt, sp: span, lit: ast::lit_) -> @ast::expr {\n     let sp_lit = @{node: lit, span: sp};\n     mk_expr(cx, sp, ast::expr_lit(sp_lit))\n }\n-fn mk_str(cx: ext_ctxt, sp: span, s: str) -> @ast::expr {\n-    let lit = ast::lit_str(@s);\n-    ret mk_lit(cx, sp, lit);\n-}\n fn mk_int(cx: ext_ctxt, sp: span, i: int) -> @ast::expr {\n     let lit = ast::lit_int(i as i64, ast::ty_i);\n     ret mk_lit(cx, sp, lit);\n@@ -23,6 +19,10 @@ fn mk_uint(cx: ext_ctxt, sp: span, u: uint) -> @ast::expr {\n     let lit = ast::lit_uint(u as u64, ast::ty_u);\n     ret mk_lit(cx, sp, lit);\n }\n+fn mk_u8(cx: ext_ctxt, sp: span, u: u8) -> @ast::expr {\n+    let lit = ast::lit_uint(u as u64, ast::ty_u8);\n+    ret mk_lit(cx, sp, lit);\n+}\n fn mk_binary(cx: ext_ctxt, sp: span, op: ast::binop,\n              lhs: @ast::expr, rhs: @ast::expr)\n    -> @ast::expr {\n@@ -77,6 +77,13 @@ fn mk_fixed_vec_e(cx: ext_ctxt, sp: span, exprs: ~[@ast::expr]) ->\n    @ast::expr {\n     mk_vstore_e(cx, sp, mk_base_vec_e(cx, sp, exprs), ast::vstore_fixed(none))\n }\n+fn mk_base_str(cx: ext_ctxt, sp: span, s: str) -> @ast::expr {\n+    let lit = ast::lit_str(@s);\n+    ret mk_lit(cx, sp, lit);\n+}\n+fn mk_uniq_str(cx: ext_ctxt, sp: span, s: str) -> @ast::expr {\n+    mk_vstore_e(cx, sp, mk_base_str(cx, sp, s), ast::vstore_uniq)\n+}\n \n fn mk_rec_e(cx: ext_ctxt, sp: span,\n             fields: ~[{ident: ast::ident, ex: @ast::expr}]) ->"}, {"sha": "26f5bbc7715d72e62811b27dc81c86994e568fa4", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "patch": "@@ -5,7 +5,7 @@\n  * interface.\n  */\n import base::*;\n-import build::mk_lit;\n+import build::mk_uniq_str;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n@@ -17,14 +17,11 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n \n     let var = expr_to_str(cx, args[0], \"#env requires a string\");\n     alt os::getenv(var) {\n-      option::none { ret make_new_str(cx, sp, \"\"); }\n-      option::some(s) { ret make_new_str(cx, sp, s); }\n+      option::none { ret mk_uniq_str(cx, sp, \"\"); }\n+      option::some(s) { ret mk_uniq_str(cx, sp, s); }\n     }\n }\n \n-fn make_new_str(cx: ext_ctxt, sp: codemap::span, +s: str) -> @ast::expr {\n-    ret mk_lit(cx, sp, ast::lit_str(@s));\n-}\n //\n // Local Variables:\n // mode: rust"}, {"sha": "16357ec7e26ca4cbcc83ee501581bb6d9d268d4d", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "patch": "@@ -249,7 +249,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n     for pieces.each |pc| {\n         alt pc {\n           piece_string(s) {\n-            vec::push(piece_exprs, mk_str(cx, fmt_sp, s));\n+            vec::push(piece_exprs, mk_uniq_str(cx, fmt_sp, s));\n           }\n           piece_conv(conv) {\n             n += 1u;"}, {"sha": "233089b987451fd60532eafe22a7a2f860386db8", "filename": "src/libsyntax/ext/ident_to_str.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fident_to_str.rs?ref=628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "patch": "@@ -1,12 +1,11 @@\n import base::*;\n-import build::mk_lit;\n+import build::mk_uniq_str;\n import option;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n                      _body: ast::mac_body) -> @ast::expr {\n     let args = get_mac_args(cx,sp,arg,1u,option::some(1u),\"ident_to_str\");\n \n-    ret mk_lit(cx, sp,\n-               ast::lit_str(expr_to_ident(cx, args[0u],\n-                                          \"expected an ident\")));\n+    ret mk_uniq_str(cx, sp, *expr_to_ident(cx, args[0u],\n+                                           \"expected an ident\"));\n }"}, {"sha": "77e67f6da20a17aa8acd260514c2de1cfb19d7af", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "patch": "@@ -242,15 +242,15 @@ fn finish<T: qq_helper>\n                        ~[@\"syntax\"/~, @\"parse\"/~, @\"parser\"/~,\n                         @\"parse_from_source_str\"/~],\n                        ~[node.mk_parse_fn(cx,sp),\n-                        mk_str(cx,sp, fname),\n+                        mk_uniq_str(cx,sp, fname),\n                         mk_call(cx,sp,\n                                 ~[@\"syntax\"/~,@\"ext\"/~,\n                                  @\"qquote\"/~, @\"mk_file_substr\"/~],\n-                                ~[mk_str(cx,sp, loc.file.name),\n+                                ~[mk_uniq_str(cx,sp, loc.file.name),\n                                  mk_uint(cx,sp, loc.line),\n                                  mk_uint(cx,sp, loc.col)]),\n                         mk_unary(cx,sp, ast::box(ast::m_imm),\n-                                 mk_str(cx,sp, str2)),\n+                                 mk_uniq_str(cx,sp, str2)),\n                         cfg_call(),\n                         parse_sess_call()]\n                       );"}, {"sha": "3ba1a7b159ebe8f401b9414f02765a0cbeaf0385", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "patch": "@@ -2,7 +2,7 @@ import base::*;\n import ast;\n import codemap::span;\n import print::pprust;\n-import build::{mk_lit,mk_uniq_vec_e};\n+import build::{mk_uint,mk_u8,mk_uniq_str,mk_uniq_vec_e};\n \n export expand_line;\n export expand_col;\n@@ -18,15 +18,15 @@ fn expand_line(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                _body: ast::mac_body) -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"line\");\n     let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n-    ret mk_lit(cx, sp, ast::lit_uint(loc.line as u64, ast::ty_u));\n+    ret mk_uint(cx, sp, loc.line);\n }\n \n /* #col(): expands to the current column number */\n fn expand_col(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n               _body: ast::mac_body) -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"col\");\n     let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n-    ret mk_lit(cx, sp, ast::lit_uint(loc.col as u64, ast::ty_u));\n+    ret mk_uint(cx, sp, loc.col);\n }\n \n /* #file(): expands to the current filename */\n@@ -37,20 +37,20 @@ fn expand_file(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n     let { file: @{ name: filename, _ }, _ } =\n         codemap::lookup_char_pos(cx.codemap(), sp.lo);\n-    ret mk_lit(cx, sp, ast::lit_str(@filename));\n+    ret mk_uniq_str(cx, sp, filename);\n }\n \n fn expand_stringify(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                     _body: ast::mac_body) -> @ast::expr {\n     let args = get_mac_args(cx, sp, arg, 1u, option::some(1u), \"stringify\");\n-    ret mk_lit(cx, sp, ast::lit_str(@pprust::expr_to_str(args[0])));\n+    ret mk_uniq_str(cx, sp, pprust::expr_to_str(args[0]));\n }\n \n fn expand_mod(cx: ext_ctxt, sp: span, arg: ast::mac_arg, _body: ast::mac_body)\n     -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n-    ret mk_lit(cx, sp, ast::lit_str(\n-        @str::connect(cx.mod_path().map(|x|*x), \"::\")));\n+    ret mk_uniq_str(cx, sp,\n+                    str::connect(cx.mod_path().map(|x|*x), \"::\"));\n }\n \n fn expand_include(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n@@ -77,7 +77,7 @@ fn expand_include_str(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n       }\n     }\n \n-    ret mk_lit(cx, sp, ast::lit_str(@result::unwrap(res)));\n+    ret mk_uniq_str(cx, sp, result::unwrap(res));\n }\n \n fn expand_include_bin(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n@@ -89,7 +89,7 @@ fn expand_include_bin(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n     alt io::read_whole_file(res_rel_file(cx, sp, file)) {\n       result::ok(src) {\n         let u8_exprs = vec::map(src, |char: u8| {\n-            mk_lit(cx, sp, ast::lit_uint(char as u64, ast::ty_u8))\n+            mk_u8(cx, sp, char)\n         });\n         ret mk_uniq_vec_e(cx, sp, u8_exprs);\n       }"}, {"sha": "f533c922531421a7fe320c2affa482bce939b0a4", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d3e9d38cced6a1e80a497c98dc16f6e1ead15/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=628d3e9d38cced6a1e80a497c98dc16f6e1ead15", "patch": "@@ -301,11 +301,17 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n \n     let name_lit: ast::lit =\n         nospan(ast::lit_str(@ast_util::path_name_i(path)));\n-    let name_expr: ast::expr =\n-        {id: cx.sess.next_node_id(),\n-         callee_id: cx.sess.next_node_id(),\n-         node: ast::expr_lit(@name_lit),\n-         span: span};\n+    let name_expr_inner: @ast::expr =\n+        @{id: cx.sess.next_node_id(),\n+          callee_id: cx.sess.next_node_id(),\n+          node: ast::expr_lit(@name_lit),\n+          span: span};\n+    let name_expr = {id: cx.sess.next_node_id(),\n+                     callee_id: cx.sess.next_node_id(),\n+                     node: ast::expr_vstore(name_expr_inner,\n+                                            ast::vstore_uniq),\n+                     span: dummy_sp()};\n+\n \n     let name_field: ast::field =\n         nospan({mutbl: ast::m_imm, ident: @\"name\"/~, expr: @name_expr});\n@@ -401,8 +407,11 @@ fn mk_test_wrapper(cx: test_ctxt,\n \n fn mk_main(cx: test_ctxt) -> @ast::item {\n     let str_pt = path_node(~[@\"str\"/~]);\n+    let str_ty_inner = @{id: cx.sess.next_node_id(),\n+                         node: ast::ty_path(str_pt, cx.sess.next_node_id()),\n+                         span: dummy_sp()};\n     let str_ty = @{id: cx.sess.next_node_id(),\n-                   node: ast::ty_path(str_pt, cx.sess.next_node_id()),\n+                   node: ast::ty_vstore(str_ty_inner, ast::vstore_uniq),\n                    span: dummy_sp()};\n     let args_mt = {ty: str_ty, mutbl: ast::m_imm};\n     let args_ty_inner = @{id: cx.sess.next_node_id(),"}]}