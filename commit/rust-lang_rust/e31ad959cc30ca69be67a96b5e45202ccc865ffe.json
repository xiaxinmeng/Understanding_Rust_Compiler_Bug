{"sha": "e31ad959cc30ca69be67a96b5e45202ccc865ffe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMWFkOTU5Y2MzMGNhNjliZTY3YTk2YjVlNDUyMDJjY2M4NjVmZmU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-20T19:43:57Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-22T14:19:36Z"}, "message": "Improve documentation for std::io::LineWriter\n\nBeef up the struct docs, add examples for the methods.", "tree": {"sha": "316cec92b614d0aa7daf31c3d6ba5a0676185926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/316cec92b614d0aa7daf31c3d6ba5a0676185926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31ad959cc30ca69be67a96b5e45202ccc865ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31ad959cc30ca69be67a96b5e45202ccc865ffe", "html_url": "https://github.com/rust-lang/rust/commit/e31ad959cc30ca69be67a96b5e45202ccc865ffe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31ad959cc30ca69be67a96b5e45202ccc865ffe/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e51763e6428580f2b3275cd7076492376801a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e51763e6428580f2b3275cd7076492376801a1e", "html_url": "https://github.com/rust-lang/rust/commit/4e51763e6428580f2b3275cd7076492376801a1e"}], "stats": {"total": 123, "additions": 120, "deletions": 3}, "files": [{"sha": "d02bd5187f5f343d652a77ec0a9872490c20923f", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 120, "deletions": 3, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/e31ad959cc30ca69be67a96b5e45202ccc865ffe/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31ad959cc30ca69be67a96b5e45202ccc865ffe/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=e31ad959cc30ca69be67a96b5e45202ccc865ffe", "patch": "@@ -417,17 +417,74 @@ impl<W> fmt::Display for IntoInnerError<W> {\n     }\n }\n \n-/// Wraps a Writer and buffers output to it, flushing whenever a newline\n+/// Wraps a writer and buffers output to it, flushing whenever a newline\n /// (`0x0a`, `'\\n'`) is detected.\n ///\n-/// The buffer will be written out when the writer is dropped.\n+/// The [`BufWriter`][bufwriter] struct wraps a writer and buffers its output.\n+/// But it only does this batched write when it goes out of scope, or when the\n+/// internal buffer is full. Sometimes, you'd prefer to write each line as it's\n+/// completed, rather than the entire buffer at once. Enter `LineWriter`. It\n+/// does exactly that.\n+///\n+/// [bufwriter]: struct.BufWriter.html\n+///\n+/// If there's still a partial line in the buffer when the `LineWriter` is\n+/// dropped, it will flush those contents.\n+///\n+/// # Examples\n+///\n+/// We can use `LineWriter` to write one line at a time, significantly\n+/// reducing the number of actual writes to the file.\n+///\n+/// ```\n+/// use std::fs::File;\n+/// use std::io::prelude::*;\n+/// use std::io::LineWriter;\n+///\n+/// # fn foo() -> std::io::Result<()> {\n+/// let road_not_taken = b\"I shall be telling this with a sigh\n+/// Somewhere ages and ages hence:\n+/// Two roads diverged in a wood, and I -\n+/// I took the one less traveled by,\n+/// And that has made all the difference.\";\n+///\n+/// let file = try!(File::create(\"poem.txt\"));\n+/// let mut file = LineWriter::new(file);\n+///\n+/// for &byte in road_not_taken.iter() {\n+///    file.write(&[byte]).unwrap();\n+/// }\n+///\n+/// // let's check we did the right thing.\n+/// let mut file = try!(File::open(\"poem.txt\"));\n+/// let mut contents = String::new();\n+///\n+/// try!(file.read_to_string(&mut contents));\n+///\n+/// assert_eq!(contents.as_bytes(), &road_not_taken[..]);\n+/// # Ok(())\n+/// # }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LineWriter<W: Write> {\n     inner: BufWriter<W>,\n }\n \n impl<W: Write> LineWriter<W> {\n-    /// Creates a new `LineWriter`\n+    /// Creates a new `LineWriter`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs::File;\n+    /// use std::io::LineWriter;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let file = LineWriter::new(file);\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(inner: W) -> LineWriter<W> {\n         // Lines typically aren't that long, don't use a giant buffer\n@@ -436,25 +493,85 @@ impl<W: Write> LineWriter<W> {\n \n     /// Creates a new `LineWriter` with a specified capacity for the internal\n     /// buffer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs::File;\n+    /// use std::io::LineWriter;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let file = LineWriter::with_capacity(100, file);\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(cap: usize, inner: W) -> LineWriter<W> {\n         LineWriter { inner: BufWriter::with_capacity(cap, inner) }\n     }\n \n     /// Gets a reference to the underlying writer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs::File;\n+    /// use std::io::LineWriter;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let file = LineWriter::new(file);\n+    ///\n+    /// let reference = file.get_ref();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &W { self.inner.get_ref() }\n \n     /// Gets a mutable reference to the underlying writer.\n     ///\n     /// Caution must be taken when calling methods on the mutable reference\n     /// returned as extra writes could corrupt the output stream.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs::File;\n+    /// use std::io::LineWriter;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let mut file = LineWriter::new(file);\n+    ///\n+    /// // we can use reference just like file\n+    /// let reference = file.get_mut();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut W { self.inner.get_mut() }\n \n     /// Unwraps this `LineWriter`, returning the underlying writer.\n     ///\n     /// The internal buffer is written out before returning the writer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs::File;\n+    /// use std::io::LineWriter;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let file = try!(File::create(\"poem.txt\"));\n+    ///\n+    /// let writer: LineWriter<File> = LineWriter::new(file);\n+    ///\n+    /// let file: File = try!(writer.into_inner());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> Result<W, IntoInnerError<LineWriter<W>>> {\n         self.inner.into_inner().map_err(|IntoInnerError(buf, e)| {"}]}