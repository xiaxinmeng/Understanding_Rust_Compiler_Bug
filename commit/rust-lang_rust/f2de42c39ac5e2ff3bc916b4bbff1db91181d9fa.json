{"sha": "f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZGU0MmMzOWFjNWUyZmYzYmM5MTZiNGJiZmYxZGI5MTE4MWQ5ZmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-01T01:54:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-01T04:31:33Z"}, "message": "rt: Reorganize stack growth code", "tree": {"sha": "249765cf6b484ce6d3575fac9160b07d0632ba15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/249765cf6b484ce6d3575fac9160b07d0632ba15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "html_url": "https://github.com/rust-lang/rust/commit/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd48a1af58260eb68d87a08cc6dd1b0a589a0eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd48a1af58260eb68d87a08cc6dd1b0a589a0eae", "html_url": "https://github.com/rust-lang/rust/commit/dd48a1af58260eb68d87a08cc6dd1b0a589a0eae"}], "stats": {"total": 147, "additions": 75, "deletions": 72}, "files": [{"sha": "7162f859a720915652a76550da57d07b8a700b5e", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "patch": "@@ -6,14 +6,14 @@\n // prolog when we run out.\n \n #if defined(__APPLE__) || defined(_WIN32)\n-#define RUST_NEW_STACK2         _rust_new_stack2\n-#define RUST_DEL_STACK          _rust_del_stack\n+#define UPCALL_NEW_STACK        _upcall_new_stack\n+#define UPCALL_DEL_STACK        _upcall_del_stack\n #define RUST_GET_TASK           _rust_get_task\n #define UPCALL_CALL_C           _upcall_call_shim_on_c_stack\n #define MORESTACK               ___morestack\n #else\n-#define RUST_NEW_STACK2         rust_new_stack2\n-#define RUST_DEL_STACK          rust_del_stack\n+#define UPCALL_NEW_STACK        upcall_new_stack\n+#define UPCALL_DEL_STACK        upcall_del_stack\n #define RUST_GET_TASK           rust_get_task\n #define UPCALL_CALL_C           upcall_call_shim_on_c_stack\n #define MORESTACK               __morestack\n@@ -22,11 +22,9 @@\n #define ALIGNMENT 8\n #define RETURN_OFFSET   7\n \n-.globl RUST_NEW_STACK\n-.globl RUST_DEL_STACK\n-.globl RUST_GET_PREV_STACK\n+.globl UPCALL_NEW_STACK\n+.globl UPCALL_DEL_STACK\n .globl RUST_GET_TASK\n-.globl UPCALL_ALLOC_C_STACK\n .globl UPCALL_CALL_C_STACK\n .globl MORESTACK\n \n@@ -64,7 +62,7 @@ MORESTACK:\n \tmovl 32(%esp),%eax // The amount of stack needed\n \tmovl %eax,8(%esp)\n \n-\tmovl $RUST_NEW_STACK2,4(%esp)\n+\tmovl $UPCALL_NEW_STACK,4(%esp)\n \tleal 8(%esp), %eax\n \tmovl %eax,(%esp)\n \tcall UPCALL_CALL_C\n@@ -81,7 +79,7 @@ MORESTACK:\n \t// Switch back to the rust stack\n \tmovl %ebp, %esp\n \n-\tpushl $RUST_DEL_STACK\n+\tpushl $UPCALL_DEL_STACK\n \tpushl $0\n \tcall UPCALL_CALL_C\n "}, {"sha": "556a12b4ecbada06b387a712749876924a3445d9", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "patch": "@@ -6,15 +6,15 @@\n // prolog when we run out.\n \n #if defined(__APPLE__) || defined(_WIN32)\n-#define RUST_NEW_STACK2     _rust_new_stack2\n-#define RUST_DEL_STACK      _rust_del_stack\n-#define UPCALL_CALL_C       _upcall_call_shim_on_c_stack\n-#define MORESTACK           ___morestack\n+#define UPCALL_NEW_STACK        _upcall_new_stack\n+#define UPCALL_DEL_STACK        _upcall_del_stack\n+#define UPCALL_CALL_C           _upcall_call_shim_on_c_stack\n+#define MORESTACK               ___morestack\n #else\n-#define RUST_NEW_STACK2     rust_new_stack2\n-#define RUST_DEL_STACK      rust_del_stack\n-#define UPCALL_CALL_C       upcall_call_shim_on_c_stack\n-#define MORESTACK           __morestack\n+#define UPCALL_NEW_STACK        upcall_new_stack\n+#define UPCALL_DEL_STACK        upcall_del_stack\n+#define UPCALL_CALL_C           upcall_call_shim_on_c_stack\n+#define MORESTACK               __morestack\n #endif\n \n         // Naturally, nobody can agree as to\n@@ -30,8 +30,8 @@\n #  define ARG2 %rdx\n #endif\n \n-.globl RUST_NEW_STACK2\n-.globl RUST_DEL_STACK\n+.globl UPCALL_NEW_STACK\n+.globl UPCALL_DEL_STACK\n .globl UPCALL_CALL_C\n .globl MORESTACK\n \n@@ -79,7 +79,7 @@ MORESTACK:\n \tpushq %rcx // Address of stack arguments\n \tpushq %r10 // The amount of stack needed\n \n-\tleaq RUST_NEW_STACK2@PLT(%rip), %rsi\n+\tleaq UPCALL_NEW_STACK@PLT(%rip), %rsi\n \tmovq %rsp, %rdi\n \tcall UPCALL_CALL_C@PLT\n \n@@ -106,7 +106,7 @@ MORESTACK:\n \t// Align the stack again\n \tpushq $0\n \t\n-\tleaq RUST_DEL_STACK@PLT(%rip), %rsi\n+\tleaq UPCALL_DEL_STACK@PLT(%rip), %rsi\n \tmovq $0, %rdi\n \tcall UPCALL_CALL_C@PLT\n "}, {"sha": "41c8bc68d2b0eacbfbeb32175803036bc7417fb4", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "patch": "@@ -399,6 +399,11 @@ get_task_pointer(rust_task_id id) {\n     return task->kernel->get_task_by_id(id);\n }\n \n+extern \"C\" rust_task *\n+rust_get_task() {\n+    return rust_scheduler::get_task();\n+}\n+\n struct fn_env_pair {\n     intptr_t f;\n     intptr_t env;"}, {"sha": "d631a68f8982441cb2947d3e9cbd7b3b1eba9654", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 25, "deletions": 48, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "patch": "@@ -62,54 +62,6 @@ del_stk(rust_task *task, stk_seg *stk)\n     task->free(stk);\n }\n \n-extern \"C\" CDECL void\n-record_sp(void *limit);\n-\n-// Entry points for `__morestack` (see arch/*/morestack.S).\n-extern \"C\" void *\n-rust_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n-    rust_task *task = rust_scheduler::get_task();\n-\n-    stk_seg *stk_seg = new_stk(task->sched, task, stk_sz + args_sz);\n-\n-    uint8_t *new_sp = (uint8_t*)stk_seg->limit;\n-    size_t sizeof_retaddr = sizeof(void*);\n-    // Make enough room on the new stack to hold the old stack pointer\n-    // in addition to the function arguments\n-    new_sp = align_down(new_sp - (args_sz + sizeof_retaddr));\n-    new_sp += sizeof_retaddr;\n-    memcpy(new_sp, args_addr, args_sz);\n-    record_sp(stk_seg->data + RED_ZONE_SIZE);\n-    return new_sp;\n-}\n-\n-struct rust_new_stack2_args {\n-  size_t stk_sz;\n-  void *args_addr;\n-  size_t args_sz;\n-};\n-\n-// A new stack function suitable for calling through\n-// upcall_call_shim_on_c_stack\n-extern \"C\" void *\n-rust_new_stack2(struct rust_new_stack2_args *args) {\n-    return rust_new_stack(args->stk_sz, args->args_addr,\n-                          args->args_sz);\n-}\n-\n-extern \"C\" void\n-rust_del_stack() {\n-    rust_task *task = rust_scheduler::get_task();\n-    del_stk(task, task->stk);\n-    record_sp(task->stk->data + RED_ZONE_SIZE);\n-}\n-\n-extern \"C\" rust_task *\n-rust_get_task() {\n-    return rust_scheduler::get_task();\n-}\n-\n-\n // Tasks\n rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n                      rust_task *spawner, const char *name) :\n@@ -609,6 +561,31 @@ rust_task::notify(bool success) {\n     }\n }\n \n+extern \"C\" CDECL void\n+record_sp(void *limit);\n+\n+void *\n+rust_task::new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n+\n+    stk_seg *stk_seg = new_stk(sched, this, stk_sz + args_sz);\n+\n+    uint8_t *new_sp = (uint8_t*)stk_seg->limit;\n+    size_t sizeof_retaddr = sizeof(void*);\n+    // Make enough room on the new stack to hold the old stack pointer\n+    // in addition to the function arguments\n+    new_sp = align_down(new_sp - (args_sz + sizeof_retaddr));\n+    new_sp += sizeof_retaddr;\n+    memcpy(new_sp, args_addr, args_sz);\n+    record_sp(stk_seg->data + RED_ZONE_SIZE);\n+    return new_sp;\n+}\n+\n+void\n+rust_task::del_stack() {\n+    del_stk(this, stk);\n+    record_sp(stk->data + RED_ZONE_SIZE);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "aa5cc7d75f8fbb4e9efe2521c4fcc9b0cf9a03b8", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "patch": "@@ -196,6 +196,9 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void claim_alloc(void *alloc, const type_desc *tydesc);\n \n     void notify(bool success);\n+\n+    void *new_stack(size_t stk_sz, void *args_addr, size_t args_sz);\n+    void del_stack();\n };\n \n //"}, {"sha": "a8f39cf91da9adcf0fa5809a064dd3fc3cce3fcb", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "patch": "@@ -219,6 +219,26 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n     sched->c_context.call_shim_on_c_stack(args, fn_ptr);\n }\n \n+struct rust_new_stack2_args {\n+  size_t stk_sz;\n+  void *args_addr;\n+  size_t args_sz;\n+};\n+\n+// A new stack function suitable for calling through\n+// upcall_call_shim_on_c_stack\n+extern \"C\" CDECL void *\n+upcall_new_stack(struct rust_new_stack2_args *args) {\n+    rust_task *task = rust_scheduler::get_task();\n+    return task->new_stack(args->stk_sz, args->args_addr, args->args_sz);\n+}\n+\n+extern \"C\" CDECL void\n+upcall_del_stack() {\n+    rust_task *task = rust_scheduler::get_task();\n+    task->del_stack();\n+}\n+\n extern \"C\" _Unwind_Reason_Code\n __gxx_personality_v0(int version,\n                      _Unwind_Action actions,"}, {"sha": "07b23611c99e3d14614c3ff9fe3c09d1f356eb68", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=f2de42c39ac5e2ff3bc916b4bbff1db91181d9fa", "patch": "@@ -27,7 +27,6 @@ rand_free\n rand_new\n rand_next\n refcount\n-rust_del_stack\n rust_file_is_dir\n rust_getcwd\n rust_get_stdin\n@@ -37,7 +36,6 @@ rust_str_push\n rust_list_files\n rust_port_detach\n rust_port_size\n-rust_new_stack\n rust_process_wait\n rust_ptr_eq\n rust_run_program\n@@ -68,4 +66,6 @@ upcall_shared_free\n upcall_vec_grow\n upcall_vec_push\n upcall_call_shim_on_c_stack\n+upcall_new_stack\n+upcall_del_stack\n asm_call_on_stack\n\\ No newline at end of file"}]}