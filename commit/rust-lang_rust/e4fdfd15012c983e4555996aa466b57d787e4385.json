{"sha": "e4fdfd15012c983e4555996aa466b57d787e4385", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZmRmZDE1MDEyYzk4M2U0NTU1OTk2YWE0NjZiNTdkNzg3ZTQzODU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-07T17:01:57Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-07T17:01:57Z"}, "message": "Merge #98\n\n98: WIP: Add resolve_local_name to resolve names in a function scope r=kjeremy a=kjeremy\n\nFirst step to resolving #80 \n\nCo-authored-by: Jeremy A. Kolb <jkolb@ara.com>", "tree": {"sha": "33b5209f553bf29cc409d3d8e71107f841af89ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b5209f553bf29cc409d3d8e71107f841af89ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4fdfd15012c983e4555996aa466b57d787e4385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4fdfd15012c983e4555996aa466b57d787e4385", "html_url": "https://github.com/rust-lang/rust/commit/e4fdfd15012c983e4555996aa466b57d787e4385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4fdfd15012c983e4555996aa466b57d787e4385/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "f53c8aee065fac2816b50964d4b7544c84d67837", "url": "https://api.github.com/repos/rust-lang/rust/commits/f53c8aee065fac2816b50964d4b7544c84d67837", "html_url": "https://github.com/rust-lang/rust/commit/f53c8aee065fac2816b50964d4b7544c84d67837"}, {"sha": "ff1b2da50280ef40988ce79f8bb5e82aff7e68c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1b2da50280ef40988ce79f8bb5e82aff7e68c5", "html_url": "https://github.com/rust-lang/rust/commit/ff1b2da50280ef40988ce79f8bb5e82aff7e68c5"}], "stats": {"total": 104, "additions": 97, "deletions": 7}, "files": [{"sha": "517867e86708fbbe8c72bf7ced6abca28f20a941", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4fdfd15012c983e4555996aa466b57d787e4385/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fdfd15012c983e4555996aa466b57d787e4385/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=e4fdfd15012c983e4555996aa466b57d787e4385", "patch": "@@ -9,7 +9,7 @@ use std::{\n };\n \n use relative_path::RelativePath;\n-use ra_editor::{self, FileSymbol, LineIndex, find_node_at_offset, LocalEdit};\n+use ra_editor::{self, FileSymbol, LineIndex, find_node_at_offset, LocalEdit, resolve_local_name};\n use ra_syntax::{\n     TextUnit, TextRange, SmolStr, File, AstNode,\n     SyntaxKind::*,\n@@ -197,7 +197,21 @@ impl AnalysisImpl {\n         let file = root.syntax(file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n-            return self.index_resolve(name_ref, token);\n+\n+            // First try to resolve the symbol locally\n+            if let Some((name, range)) = resolve_local_name(&file, offset, name_ref) {\n+                let mut vec = vec![];\n+                vec.push((file_id, FileSymbol {\n+                    name,\n+                    node_range: range,\n+                    kind : NAME\n+                }));\n+\n+                return vec;\n+            } else {\n+                // If that fails try the index based approach.\n+                return self.index_resolve(name_ref, token);\n+            }\n         }\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, offset) {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {"}, {"sha": "2a801f7da1ec2ecffdb0ed67f0dfdf3ca3b8857e", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4fdfd15012c983e4555996aa466b57d787e4385/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fdfd15012c983e4555996aa466b57d787e4385/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=e4fdfd15012c983e4555996aa466b57d787e4385", "patch": "@@ -19,7 +19,7 @@ mod scope;\n mod test_utils;\n \n use ra_syntax::{\n-    File, TextUnit, TextRange, SyntaxNodeRef,\n+    File, TextUnit, TextRange, SmolStr, SyntaxNodeRef,\n     ast::{self, AstNode, NameOwner},\n     algo::find_leaf_at_offset,\n     SyntaxKind::{self, *},\n@@ -164,6 +164,14 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n         .next()\n }\n \n+pub fn resolve_local_name(file: &File, offset: TextUnit, name_ref: ast::NameRef) -> Option<(SmolStr, TextRange)> {\n+    let fn_def = find_node_at_offset::<ast::FnDef>(file.syntax(), offset)?;\n+    let scopes = scope::FnScopes::new(fn_def);\n+    let scope_entry = scope::resolve_local_name(name_ref, &scopes)?;\n+    let name = scope_entry.ast().name()?;\n+    Some((scope_entry.name(), name.syntax().range()))\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "a99bd182265d95f3f63239890b0f2d9394b52b9e", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e4fdfd15012c983e4555996aa466b57d787e4385/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fdfd15012c983e4555996aa466b57d787e4385/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=e4fdfd15012c983e4555996aa466b57d787e4385", "patch": "@@ -89,7 +89,7 @@ impl ScopeEntry {\n             .unwrap()\n             .text()\n     }\n-    fn ast(&self) -> ast::BindPat {\n+    pub fn ast(&self) -> ast::BindPat {\n         ast::BindPat::cast(self.syntax.borrowed())\n             .unwrap()\n     }\n@@ -241,6 +241,17 @@ struct ScopeData {\n     entries: Vec<ScopeEntry>\n }\n \n+pub fn resolve_local_name<'a>(name_ref: ast::NameRef, scopes: &'a FnScopes) -> Option<&'a ScopeEntry> {\n+    use std::collections::HashSet;\n+\n+    let mut shadowed = HashSet::new();\n+    scopes.scope_chain(name_ref.syntax())\n+        .flat_map(|scope| scopes.entries(scope).iter())\n+        .filter(|entry| shadowed.insert(entry.name()))\n+        .filter(|entry| entry.name() == name_ref.text())\n+        .nth(0)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -265,7 +276,7 @@ mod tests {\n             .flat_map(|scope| scopes.entries(scope))\n             .map(|it| it.name())\n             .collect::<Vec<_>>();\n-        assert_eq!(expected, actual.as_slice());\n+        assert_eq!(actual.as_slice(), expected);\n     }\n \n     #[test]\n@@ -326,4 +337,61 @@ mod tests {\n             &[\"x\"],\n         );\n     }\n-}\n+\n+    #[test]\n+    fn test_shadow_variable() {\n+        do_check(r\"\n+            fn foo(x: String) {\n+                let x : &str = &x<|>;\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+\n+    fn do_check_local_name(code: &str, expected_offset: u32) {\n+        let (off, code) = extract_offset(code);\n+        let file = File::parse(&code);\n+        let fn_def: ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n+        let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n+\n+        let scopes = FnScopes::new(fn_def);\n+\n+        let local_name = resolve_local_name(name_ref, &scopes).unwrap().ast().name().unwrap();\n+\n+        let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into()).unwrap();\n+        assert_eq!(local_name.syntax().range(), expected_name.syntax().range());\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name() {\n+        do_check_local_name(r#\"\n+            fn foo(x: i32, y: u32) {\n+                {\n+                    let z = x * 2;\n+                }\n+                {\n+                    let t = x<|> * 3;\n+                }\n+            }\"#,\n+            21);\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name_declaration() {\n+        do_check_local_name(r#\"\n+            fn foo(x: String) {\n+                let x : &str = &x<|>;\n+            }\"#,\n+            21);\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name_shadow() {\n+        do_check_local_name(r\"\n+        fn foo(x: String) {\n+            let x : &str = &x;\n+            x<|>\n+        }\",\n+        46);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "7d6d530f787f023357014f12f62189599f0399f7", "filename": "crates/ra_editor/src/scope/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4fdfd15012c983e4555996aa466b57d787e4385/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fdfd15012c983e4555996aa466b57d787e4385/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Fmod.rs?ref=e4fdfd15012c983e4555996aa466b57d787e4385", "patch": "@@ -2,7 +2,7 @@ mod fn_scope;\n mod mod_scope;\n \n pub use self::{\n-    fn_scope::FnScopes,\n+    fn_scope::{FnScopes, resolve_local_name},\n     mod_scope::ModuleScope,\n };\n "}]}