{"sha": "0f8c29f0b4927954fb8e7557eeb232252fcd810c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOGMyOWYwYjQ5Mjc5NTRmYjhlNzU1N2VlYjIzMjI1MmZjZDgxMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-18T06:06:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-18T06:06:46Z"}, "message": "auto merge of #11086 : metajack/rust/rustpkg-new-crateid-syntax, r=cmr\n\n...arts.\r\n\r\nThis fixes a bug where new syntax crate IDs would cause rustpkg to fail to\r\nbuild crates.", "tree": {"sha": "dc9f55afa8c35e7d6c0b977a4bd308f5cf7d471c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc9f55afa8c35e7d6c0b977a4bd308f5cf7d471c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f8c29f0b4927954fb8e7557eeb232252fcd810c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8c29f0b4927954fb8e7557eeb232252fcd810c", "html_url": "https://github.com/rust-lang/rust/commit/0f8c29f0b4927954fb8e7557eeb232252fcd810c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f8c29f0b4927954fb8e7557eeb232252fcd810c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58d2bacb78ed0d2b9c0c0909e56f390b525aabd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c58d2bacb78ed0d2b9c0c0909e56f390b525aabd", "html_url": "https://github.com/rust-lang/rust/commit/c58d2bacb78ed0d2b9c0c0909e56f390b525aabd"}, {"sha": "7fb712e269bcb73c5986c90831a43bcd50bd5340", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb712e269bcb73c5986c90831a43bcd50bd5340", "html_url": "https://github.com/rust-lang/rust/commit/7fb712e269bcb73c5986c90831a43bcd50bd5340"}], "stats": {"total": 65, "additions": 20, "deletions": 45}, "files": [{"sha": "9a3c47823e07b86d04d57be6ca35b1d8699890fe", "filename": "src/librustpkg/crate_id.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0f8c29f0b4927954fb8e7557eeb232252fcd810c/src%2Flibrustpkg%2Fcrate_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8c29f0b4927954fb8e7557eeb232252fcd810c/src%2Flibrustpkg%2Fcrate_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcrate_id.rs?ref=0f8c29f0b4927954fb8e7557eeb232252fcd810c", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n use version::{try_getting_version, try_getting_local_version,\n-              Version, NoVersion, split_version};\n+              Version, NoVersion, ExactRevision};\n use std::hash::Streaming;\n use std::hash;\n+use syntax::crateid;\n \n /// Path-fragment identifier of a package such as\n /// 'github.com/graydon/test'; path must be a relative\n@@ -45,27 +46,14 @@ impl CrateId {\n     pub fn new(s: &str) -> CrateId {\n         use conditions::bad_pkg_id::cond;\n \n-        let mut given_version = None;\n-\n-        // Did the user request a specific version?\n-        let s = match split_version(s) {\n-            Some((path, v)) => {\n-                given_version = Some(v);\n-                path\n-            }\n-            None => {\n-                s\n-            }\n-        };\n-\n-        let path = Path::new(s);\n-        if !path.is_relative() {\n-            return cond.raise((path, ~\"absolute crate_id\"));\n-        }\n-        if path.filename().is_none() {\n-            return cond.raise((path, ~\"0-length crate_id\"));\n+        let raw_crateid: Option<crateid::CrateId> = from_str(s);\n+        if raw_crateid.is_none() {\n+            return cond.raise((Path::new(s), ~\"bad crateid\"))\n         }\n-        let short_name = path.filestem_str().expect(format!(\"Strange path! {}\", s));\n+        let raw_crateid = raw_crateid.unwrap();\n+        let crateid::CrateId { path, name, version } = raw_crateid;\n+        let path = Path::new(path);\n+        let given_version = version.map(|v| ExactRevision(v));\n \n         let version = match given_version {\n             Some(v) => v,\n@@ -79,8 +67,8 @@ impl CrateId {\n         };\n \n         CrateId {\n-            path: path.clone(),\n-            short_name: short_name.to_owned(),\n+            path: path,\n+            short_name: name,\n             version: version\n         }\n     }"}, {"sha": "0e78e907de052e0a9257bee961da4963c66e57f3", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0f8c29f0b4927954fb8e7557eeb232252fcd810c/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8c29f0b4927954fb8e7557eeb232252fcd810c/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=0f8c29f0b4927954fb8e7557eeb232252fcd810c", "patch": "@@ -26,7 +26,7 @@ use extra::getopts::groups::getopts;\n use std::run::ProcessOutput;\n use installed_packages::list_installed_packages;\n use crate_id::{CrateId};\n-use version::{ExactRevision, NoVersion, Version, Tagged};\n+use version::{ExactRevision, NoVersion, Version};\n use path_util::{target_executable_in_workspace, target_test_in_workspace,\n                target_bench_in_workspace, make_dir_rwx,\n                library_in_workspace, installed_library_in_workspace,\n@@ -35,7 +35,6 @@ use path_util::{target_executable_in_workspace, target_test_in_workspace,\n                chmod_read_only, platform_library_name};\n use rustc::back::link::get_cc_prog;\n use rustc::metadata::filesearch::{rust_path, libdir, rustlibdir};\n-use rustc::driver::session;\n use rustc::driver::driver::{build_session, build_session_options, host_triple, optgroups};\n use syntax::diagnostic;\n use target::*;\n@@ -76,14 +75,6 @@ fn git_repo_pkg() -> CrateId {\n     }\n }\n \n-fn git_repo_pkg_with_tag(a_tag: ~str) -> CrateId {\n-    CrateId {\n-        path: Path::new(\"mockgithub.com/catamorphism/test-pkg\"),\n-        short_name: ~\"test-pkg\",\n-        version: Tagged(a_tag)\n-    }\n-}\n-\n fn writeFile(file_path: &Path, contents: &str) {\n     let mut out = File::create(file_path);\n     out.write(contents.as_bytes());\n@@ -487,12 +478,6 @@ fn lib_output_file_name(workspace: &Path, short_name: &str) -> Path {\n                          &NoVersion).expect(\"lib_output_file_name\")\n }\n \n-fn output_file_name(workspace: &Path, short_name: ~str) -> Path {\n-    target_build_dir(workspace).join(short_name.as_slice())\n-                               .join(format!(\"{}{}\", short_name,\n-                                             os::consts::EXE_SUFFIX))\n-}\n-\n #[cfg(target_os = \"linux\")]\n fn touch_source_file(workspace: &Path, crateid: &CrateId) {\n     use conditions::bad_path::cond;\n@@ -746,8 +731,8 @@ fn test_crate_ids_must_be_relative_path_like() {\n             CrateId::new(\"github.com/catamorphism/test-pkg\").to_str());\n \n     cond.trap(|(p, e)| {\n-        assert!(p.filename().is_none())\n-        assert!(\"0-length crate_id\" == e);\n+        assert!(p.filename().is_none());\n+        assert!(\"bad crateid\" == e);\n         whatever.clone()\n     }).inside(|| {\n         let x = CrateId::new(\"\");\n@@ -757,7 +742,7 @@ fn test_crate_ids_must_be_relative_path_like() {\n     cond.trap(|(p, e)| {\n         let abs = os::make_absolute(&Path::new(\"foo/bar/quux\"));\n         assert_eq!(p, abs);\n-        assert!(\"absolute crate_id\" == e);\n+        assert!(\"bad crateid\" == e);\n         whatever.clone()\n     }).inside(|| {\n         let zp = os::make_absolute(&Path::new(\"foo/bar/quux\"));\n@@ -1894,9 +1879,11 @@ fn crateid_pointing_to_subdir() {\n     fs::mkdir_recursive(&foo_dir, io::UserRWX);\n     fs::mkdir_recursive(&bar_dir, io::UserRWX);\n     writeFile(&foo_dir.join(\"lib.rs\"),\n-              \"#[crate_id=\\\"mockgithub.com/mozilla/some_repo/extras/foo\\\"]; pub fn f() {}\");\n+              \"#[crate_id=\\\"mockgithub.com/mozilla/some_repo/extras/rust-foo#foo:0.0\\\"];\" +\n+              \"pub fn f() {}\");\n     writeFile(&bar_dir.join(\"lib.rs\"),\n-              \"#[crate_id=\\\"mockgithub.com/mozilla/some_repo/extras/bar\\\"]; pub fn g() {}\");\n+              \"#[crate_id=\\\"mockgithub.com/mozilla/some_repo/extras/rust-bar#bar:0.0\\\"];\" +\n+              \"pub fn g() {}\");\n \n     debug!(\"Creating a file in {}\", workspace.display());\n     let testpkg_dir = workspace.join_many([\"src\", \"testpkg-0.0\"]);\n@@ -2318,7 +2305,7 @@ fn find_sources_in_cwd() {\n     let source_dir = temp_dir.join(\"foo\");\n     fs::mkdir_recursive(&source_dir, io::UserRWX);\n     writeFile(&source_dir.join(\"main.rs\"),\n-              r#\"#[crate_id=\"foo\"]; fn main() { let _x = (); }\"#);\n+              r#\"#[crate_id=\"rust-foo#foo:0.0\"]; fn main() { let _x = (); }\"#);\n     command_line_test([~\"install\", ~\"foo\"], &source_dir);\n     assert_executable_exists(&source_dir.join(\".rust\"), \"foo\");\n }"}]}