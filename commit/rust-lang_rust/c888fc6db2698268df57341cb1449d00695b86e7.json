{"sha": "c888fc6db2698268df57341cb1449d00695b86e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODhmYzZkYjI2OTgyNjhkZjU3MzQxY2IxNDQ5ZDAwNjk1Yjg2ZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-31T04:06:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-31T04:06:33Z"}, "message": "auto merge of #10164 : brson/rust/configure, r=brson\n\nRebase of #9990", "tree": {"sha": "baf6d92caa18848bbb7da2922dcebe17068fc25b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baf6d92caa18848bbb7da2922dcebe17068fc25b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c888fc6db2698268df57341cb1449d00695b86e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c888fc6db2698268df57341cb1449d00695b86e7", "html_url": "https://github.com/rust-lang/rust/commit/c888fc6db2698268df57341cb1449d00695b86e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c888fc6db2698268df57341cb1449d00695b86e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73a48e9fd6c214976888d8583fb87de55dd05d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73a48e9fd6c214976888d8583fb87de55dd05d8", "html_url": "https://github.com/rust-lang/rust/commit/f73a48e9fd6c214976888d8583fb87de55dd05d8"}, {"sha": "b9504f993116f6d7ff1a12abe6c36f7afcc2abed", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9504f993116f6d7ff1a12abe6c36f7afcc2abed", "html_url": "https://github.com/rust-lang/rust/commit/b9504f993116f6d7ff1a12abe6c36f7afcc2abed"}], "stats": {"total": 482, "additions": 256, "deletions": 226}, "files": [{"sha": "b4730a7952f64dc832279501c2bac2728e947a5a", "filename": "Makefile.in", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -70,22 +70,22 @@ include config.mk\n ALL_OBJ_FILES :=\n \n MKFILE_DEPS := config.stamp $(call rwildcard,$(CFG_SRC_DIR)mk/,*)\n-NON_BUILD_HOST_TRIPLES = $(filter-out $(CFG_BUILD_TRIPLE),$(CFG_HOST_TRIPLES))\n-NON_BUILD_TARGET_TRIPLES = $(filter-out $(CFG_BUILD_TRIPLE),$(CFG_TARGET_TRIPLES))\n+NON_BUILD_HOST = $(filter-out $(CFG_BUILD),$(CFG_HOST))\n+NON_BUILD_TARGET = $(filter-out $(CFG_BUILD),$(CFG_TARGET))\n \n ifneq ($(MAKE_RESTARTS),)\n CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n endif\n \n-CFG_INFO := $(info cfg: build triple $(CFG_BUILD_TRIPLE))\n-CFG_INFO := $(info cfg: host triples $(CFG_HOST_TRIPLES))\n-CFG_INFO := $(info cfg: target triples $(CFG_TARGET_TRIPLES))\n+CFG_INFO := $(info cfg: build triple $(CFG_BUILD))\n+CFG_INFO := $(info cfg: host triples $(CFG_HOST))\n+CFG_INFO := $(info cfg: target triples $(CFG_TARGET))\n \n-ifneq ($(wildcard $(NON_BUILD_HOST_TRIPLES)),)\n-CFG_INFO := $(info cfg: non-build host triples $(NON_BUILD_HOST_TRIPLES))\n+ifneq ($(wildcard $(NON_BUILD_HOST)),)\n+CFG_INFO := $(info cfg: non-build host triples $(NON_BUILD_HOST))\n endif\n-ifneq ($(wildcard $(NON_BUILD_TARGET_TRIPLES)),)\n-CFG_INFO := $(info cfg: non-build target triples $(NON_BUILD_TARGET_TRIPLES))\n+ifneq ($(wildcard $(NON_BUILD_TARGET)),)\n+CFG_INFO := $(info cfg: non-build target triples $(NON_BUILD_TARGET))\n endif\n \n CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n@@ -189,7 +189,7 @@ S := $(CFG_SRC_DIR)\n define DEF_X\n X_$(1) := $(CFG_EXE_SUFFIX_$(1))\n endef\n-$(foreach target,$(CFG_TARGET_TRIPLES),\\\n+$(foreach target,$(CFG_TARGET),\\\n   $(eval $(call DEF_X,$(target))))\n \n # Look in doc and src dirs.\n@@ -273,7 +273,7 @@ define LIST_ALL_OLD_GLOB_MATCHES_EXCEPT\n endef\n endif\n \n-$(foreach target,$(CFG_TARGET_TRIPLES),\\\n+$(foreach target,$(CFG_TARGET),\\\n   $(eval $(call DEF_LIBS,$(target))))\n \n ######################################################################\n@@ -347,7 +347,7 @@ LLC_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llc$$(X_$(1))\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n  $(eval $(call DEF_LLVM_VARS,$(host))))\n \n ######################################################################\n@@ -361,7 +361,7 @@ export CFG_SRC_DIR\n export CFG_BUILD_DIR\n export CFG_VERSION\n export CFG_VERSION_WIN\n-export CFG_BUILD_TRIPLE\n+export CFG_BUILD\n export CFG_LLVM_ROOT\n export CFG_ENABLE_MINGW_CROSS\n export CFG_PREFIX\n@@ -484,7 +484,7 @@ CFGFLAG$(1)_T_$(2)_H_$(3) = stage$(1)\n # if you're building a cross config, the host->* parts are\n # effectively stage1, since it uses the just-built stage0.\n ifeq ($(1),0)\n-ifneq ($(strip $(CFG_BUILD_TRIPLE)),$(strip $(3)))\n+ifneq ($(strip $(CFG_BUILD)),$(strip $(3)))\n CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n endif\n endif\n@@ -507,8 +507,8 @@ PERF_STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\\\n \n endef\n \n-$(foreach build,$(CFG_HOST_TRIPLES), \\\n- $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach build,$(CFG_HOST), \\\n+ $(eval $(foreach target,$(CFG_TARGET), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call SREQ,$(stage),$(target),$(build))))))))\n \n@@ -523,34 +523,34 @@ define DEF_RUSTC_STAGE_TARGET\n # $(2) == stage\n \n rustc-stage$(2)-H-$(1):\t\t\t\t\t\t\t\\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n+\t$$(foreach target,$$(CFG_TARGET),\t\\\n \t\t$$(SREQ$(2)_T_$$(target)_H_$(1)))\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST),\t\t\t\t\t\t\t\\\n  $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\t\t\t\\\n   $(eval $(call DEF_RUSTC_STAGE_TARGET,$(host),$(stage))))))\n \n-rustc-stage1: rustc-stage1-H-$(CFG_BUILD_TRIPLE)\n-rustc-stage2: rustc-stage2-H-$(CFG_BUILD_TRIPLE)\n-rustc-stage3: rustc-stage3-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage1: rustc-stage1-H-$(CFG_BUILD)\n+rustc-stage2: rustc-stage2-H-$(CFG_BUILD)\n+rustc-stage3: rustc-stage3-H-$(CFG_BUILD)\n \n define DEF_RUSTC_TARGET\n # $(1) == architecture\n \n rustc-H-$(1): rustc-stage2-H-$(1)\n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\\\n+$(foreach host,$(CFG_TARGET),\t\t\t\\\n  $(eval $(call DEF_RUSTC_TARGET,$(host))))\n \n-rustc-stage1: rustc-stage1-H-$(CFG_BUILD_TRIPLE)\n-rustc-stage2: rustc-stage2-H-$(CFG_BUILD_TRIPLE)\n-rustc-stage3: rustc-stage3-H-$(CFG_BUILD_TRIPLE)\n-rustc: rustc-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage1: rustc-stage1-H-$(CFG_BUILD)\n+rustc-stage2: rustc-stage2-H-$(CFG_BUILD)\n+rustc-stage3: rustc-stage3-H-$(CFG_BUILD)\n+rustc: rustc-H-$(CFG_BUILD)\n \n-rustc-H-all: $(foreach host,$(CFG_HOST_TRIPLES),rustc-H-$(host))\n+rustc-H-all: $(foreach host,$(CFG_HOST),rustc-H-$(host))\n \n ######################################################################\n # Entrypoint rule\n@@ -566,12 +566,12 @@ CFG_INFO := $(info cfg: *** stage2 and later will not be built ***)\n CFG_INFO := $(info cfg:)\n \n #XXX This is surely busted\n-all: $(SREQ1$(CFG_BUILD_TRIPLE)) $(GENERATED) docs\n+all: $(SREQ1$(CFG_BUILD)) $(GENERATED) docs\n \n else\n \n define ALL_TARGET_N\n-ifneq ($$(findstring $(1),$$(CFG_HOST_TRIPLES)),)\n+ifneq ($$(findstring $(1),$$(CFG_HOST)),)\n # This is a host\n all-target-$(1)-host-$(2): $$(CSREQ2_T_$(1)_H_$(2))\n else\n@@ -580,12 +580,12 @@ all-target-$(1)-host-$(2): $$(SREQ2_T_$(1)_H_$(2))\n endif\n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(foreach host,$(CFG_HOST_TRIPLES), \\\n+$(foreach target,$(CFG_TARGET), \\\n+ $(foreach host,$(CFG_HOST), \\\n  $(eval $(call ALL_TARGET_N,$(target),$(host)))))\n \n-ALL_TARGET_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-\t$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ALL_TARGET_RULES = $(foreach target,$(CFG_TARGET), \\\n+\t$(foreach host,$(CFG_HOST), \\\n  all-target-$(target)-host-$(host)))\n \n all: $(ALL_TARGET_RULES) $(GENERATED) docs"}, {"sha": "244014caab257bf8cbb5ff654d2ecbd970ce137f", "filename": "configure", "status": "modified", "additions": 55, "deletions": 25, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/configure", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -336,7 +336,7 @@ then\n fi\n \n \n-DEFAULT_BUILD_TRIPLE=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n+DEFAULT_BUILD=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n \n CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n CFG_BUILD_DIR=\"$(pwd)/\"\n@@ -385,12 +385,26 @@ opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-\n valopt prefix \"/usr/local\" \"set installation prefix\"\n valopt local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt llvm-root \"\" \"set LLVM root\"\n-valopt build-triple \"${DEFAULT_BUILD_TRIPLE}\" \"LLVM build triple\"\n-valopt host-triples \"${CFG_BUILD_TRIPLE}\" \"LLVM host triples\"\n-valopt target-triples \"${CFG_HOST_TRIPLES}\" \"LLVM target triples\"\n valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path\"\n valopt mingw32-cross-path \"\" \"MinGW32 cross compiler path\"\n \n+valopt build \"${DEFAULT_BUILD}\" \"GNUs ./configure syntax LLVM build triple\"\n+valopt host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n+valopt target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n+\n+valopt localstatedir \"/var/lib\" \"local state directory\"\n+valopt sysconfdir \"/etc\" \"install system configuration files\"\n+\n+valopt datadir \"${CFG_PREFIX}/share\" \"install data\"\n+valopt infodir \"${CFG_PREFIX}/share/info\" \"install additional info\"\n+valopt mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n+valopt libdir \"${CFG_PREFIX}/lib\" \"install libraries\" \n+\n+#Deprecated opts to keep compatibility\n+valopt build-triple \"${DEFAULT_BUILD}\" \"LLVM build triple\"\n+valopt host-triples \"${CFG_BUILD}\" \"LLVM host triples\"\n+valopt target-triples \"${CFG_HOST}\" \"LLVM target triples\"\n+\n # Validate Options\n step_msg \"validating $CFG_SELF args\"\n validate_opt\n@@ -589,23 +603,44 @@ fi\n # a little post-processing of various config values\n \n CFG_PREFIX=${CFG_PREFIX%/}\n-CFG_HOST_TRIPLES=\"$(echo $CFG_HOST_TRIPLES | tr ',' ' ')\"\n-CFG_TARGET_TRIPLES=\"$(echo $CFG_TARGET_TRIPLES | tr ',' ' ')\"\n-CFG_SUPPORTED_TARGET_TRIPLES=\"$(grep ^CC_*=* $CFG_SRC_DIR/mk/platform.mk | sed -e 's/^CC_//' -e 's/\\([^=]*\\).*/\\1/' | xargs)\"\n+CFG_MANDIR=${CFG_MANDIR%/}\n+CFG_HOST=\"$(echo $CFG_HOST | tr ',' ' ')\"\n+CFG_TARGET=\"$(echo $CFG_TARGET | tr ',' ' ')\"\n+CFG_SUPPORTED_TARGET=\"$(grep ^CC_*=* $CFG_SRC_DIR/mk/platform.mk | sed -e 's/^CC_//' -e 's/\\([^=]*\\).*/\\1/' | xargs)\"\n \n # copy host-triples to target-triples so that hosts are a subset of targets\n V_TEMP=\"\"\n+for i in $CFG_HOST $CFG_TARGET;\n+do\n+   echo \"$V_TEMP\" | grep -qF $i || V_TEMP=\"$V_TEMP${V_TEMP:+ }$i\"\n+done\n+CFG_TARGET=$V_TEMP\n+\n+# copy host-triples to target-triples so that hosts are a subset of targets\n+# XXX: remove deprecated variables here\n+V_TEMP=\"\"\n for i in $CFG_HOST_TRIPLES $CFG_TARGET_TRIPLES;\n do\n    echo \"$V_TEMP\" | grep -qF $i || V_TEMP=\"$V_TEMP${V_TEMP:+ }$i\"\n done\n CFG_TARGET_TRIPLES=$V_TEMP\n \n+# XXX: Support for deprecated syntax, should be dropped.\n+if [ ! -z \"$CFG_BUILD_TRIPLE\" ]; then\n+    CFG_BUILD=${CFG_BUILD_TRIPLE}\n+fi\n+if [ ! -z \"$CFG_HOST_TRIPLES\" ]; then\n+    CFG_HOST=${CFG_HOST_TRIPLES}\n+fi\n+if [ ! -z \"$CFG_TARGET_TRIPLES\" ]; then\n+    CFG_TARGET=${CFG_TARGET_TRIPLES}\n+fi\n+\n # check target-specific tool-chains\n-for i in $CFG_TARGET_TRIPLES\n+for i in $CFG_TARGET\n do\n     L_CHECK=false\n-    for j in $CFG_SUPPORTED_TARGET_TRIPLES\n+    for j in $CFG_SUPPORTED_TARGET\n     do\n         if [ $i = $j ]\n         then\n@@ -664,17 +699,17 @@ do\n     make_dir $i\n done\n \n-for t in $CFG_HOST_TRIPLES\n+for t in $CFG_HOST\n do\n     make_dir $t/llvm\n done\n \n-for t in $CFG_HOST_TRIPLES\n+for t in $CFG_HOST\n do\n     make_dir $t/rustllvm\n done\n \n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_TARGET\n do\n   make_dir $t/rt\n   for s in 0 1 2 3\n@@ -703,9 +738,9 @@ then\n     CFG_LIBDIR=bin\n fi\n \n-for h in $CFG_HOST_TRIPLES\n+for h in $CFG_HOST\n do\n-    for t in $CFG_TARGET_TRIPLES\n+    for t in $CFG_TARGET\n     do\n         for i in 0 1 2 3\n         do\n@@ -785,7 +820,7 @@ fi\n # Configure llvm, only if necessary\n step_msg \"looking at LLVM\"\n CFG_LLVM_SRC_DIR=${CFG_SRC_DIR}src/llvm/\n-for t in $CFG_HOST_TRIPLES\n+for t in $CFG_HOST\n do\n     do_reconfigure=1\n \n@@ -961,20 +996,15 @@ putvar CFG_OSTYPE\n putvar CFG_CPUTYPE\n putvar CFG_CONFIGURE_ARGS\n putvar CFG_PREFIX\n-putvar CFG_BUILD_TRIPLE\n-putvar CFG_HOST_TRIPLES\n-putvar CFG_TARGET_TRIPLES\n+putvar CFG_BUILD\n+putvar CFG_HOST\n+putvar CFG_TARGET\n putvar CFG_C_COMPILER\n putvar CFG_LIBDIR\n putvar CFG_DISABLE_MANAGE_SUBMODULES\n putvar CFG_ANDROID_CROSS_PATH\n putvar CFG_MINGW32_CROSS_PATH\n-\n-if [ ! -z \"$CFG_ENABLE_PAX_FLAGS\" ]\n-then\n-    putvar CFG_ENABLE_PAX_FLAGS\n-    putvar CFG_PAXCTL\n-fi\n+putvar CFG_MANDIR\n \n # Avoid spurious warnings from clang by feeding it original source on\n # ccache-miss rather than preprocessed input.\n@@ -1015,7 +1045,7 @@ fi\n putvar CFG_LLVM_ROOT\n putvar CFG_LLVM_SRC_DIR\n \n-for t in $CFG_HOST_TRIPLES\n+for t in $CFG_HOST\n do\n     CFG_LLVM_BUILD_DIR=$(echo CFG_LLVM_BUILD_DIR_${t} | tr - _)\n     CFG_LLVM_INST_DIR=$(echo CFG_LLVM_INST_DIR_${t} | tr - _)"}, {"sha": "fc4bcf6c759f0373436ddff8967c2bf78efc19a5", "filename": "mk/clean.mk", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -14,13 +14,13 @@\n \n CLEAN_STAGE_RULES =\t\t\t\t\t\t\t\t\\\n  $(foreach stage, $(STAGES),\t\t\t\t\t\\\n-  $(foreach host, $(CFG_HOST_TRIPLES),\t\t\\\n+  $(foreach host, $(CFG_HOST),\t\t\\\n    clean$(stage)_H_$(host)\t\t\t\t\t\t\\\n-   $(foreach target, $(CFG_TARGET_TRIPLES),\t\t\\\n+   $(foreach target, $(CFG_TARGET),\t\t\\\n     clean$(stage)_T_$(target)_H_$(host))))\n \n CLEAN_LLVM_RULES = \t\t\t\t\t\t\t\t\\\n- $(foreach target, $(CFG_HOST_TRIPLES),\t\t\\\n+ $(foreach target, $(CFG_HOST),\t\t\\\n   clean-llvm$(target))\n \n .PHONY: clean clean-all clean-misc clean-llvm\n@@ -33,17 +33,17 @@ clean: clean-misc $(CLEAN_STAGE_RULES)\n \n clean-misc:\n \t@$(call E, cleaning)\n-\t$(Q)find $(CFG_BUILD_TRIPLE)/rustllvm \\\n-\t         $(CFG_BUILD_TRIPLE)/rt \\\n-\t\t $(CFG_BUILD_TRIPLE)/test \\\n+\t$(Q)find $(CFG_BUILD)/rustllvm \\\n+\t         $(CFG_BUILD)/rt \\\n+\t\t $(CFG_BUILD)/test \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n          -name '*.dll' -o     \\\n          -name '*.def' -o     \\\n          -name '*.bc'         \\\n          | xargs rm -f\n-\t$(Q)find $(CFG_BUILD_TRIPLE)\\\n+\t$(Q)find $(CFG_BUILD)\\\n          -name '*.dSYM'       \\\n          | xargs rm -Rf\n \t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n@@ -87,7 +87,7 @@ clean$(1)_H_$(2):\n \n endef\n \n-$(foreach host, $(CFG_HOST_TRIPLES), \\\n+$(foreach host, $(CFG_HOST), \\\n  $(eval $(foreach stage, $(STAGES), \\\n   $(eval $(call CLEAN_HOST_STAGE_N,$(stage),$(host))))))\n \n@@ -121,8 +121,8 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows\n endef\n \n-$(foreach host, $(CFG_HOST_TRIPLES), \\\n- $(eval $(foreach target, $(CFG_TARGET_TRIPLES), \\\n+$(foreach host, $(CFG_HOST), \\\n+ $(eval $(foreach target, $(CFG_TARGET), \\\n   $(eval $(foreach stage, 0 1 2 3, \\\n    $(eval $(call CLEAN_TARGET_STAGE_N,$(stage),$(target),$(host))))))))\n \n@@ -136,5 +136,5 @@ clean-llvm$(1): ;\n endif\n endef\n \n-$(foreach host, $(CFG_HOST_TRIPLES), \\\n+$(foreach host, $(CFG_HOST), \\\n  $(eval $(call DEF_CLEAN_LLVM_HOST,$(host))))"}, {"sha": "264d3105839cb6850e300f8cdc457edf3729920e", "filename": "mk/dist.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -57,7 +57,7 @@ LICENSE.txt: $(S)COPYRIGHT $(S)LICENSE-APACHE $(S)LICENSE-MIT\n \tcp $< $@\n \n $(PKG_EXE): rust.iss modpath.iss LICENSE.txt rust-logo.ico \\\n-            $(PKG_FILES) $(CSREQ3_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE))\n+            $(PKG_FILES) $(CSREQ3_T_$(CFG_BUILD)_H_$(CFG_BUILD))\n \t$(CFG_PYTHON) $(S)src/etc/copy-runtime-deps.py i686-pc-mingw32/stage3/bin\n \t@$(call E, ISCC: $@)\n \t$(Q)\"$(CFG_ISCC)\" $<\n@@ -84,7 +84,7 @@ $(PKG_TAR): $(PKG_FILES)\n \n .PHONY: dist distcheck\n \n-ifdef CFG_WINDOWSY_$(CFG_BUILD_TRIPLE)\n+ifdef CFG_WINDOWSY_$(CFG_BUILD)\n \n dist: $(PKG_EXE)\n "}, {"sha": "771f1511c6d9740b5804a6ed6dba12189f6a942d", "filename": "mk/docs.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -235,7 +235,7 @@ endif\n ######################################################################\n \n # The rustdoc executable\n-RUSTDOC = $(HBIN2_H_$(CFG_BUILD_TRIPLE))/rustdoc$(X_$(CFG_BUILD_TRIPLE))\n+RUSTDOC = $(HBIN2_H_$(CFG_BUILD))/rustdoc$(X_$(CFG_BUILD))\n \n # The library documenting macro\n # $(1) - The crate name (std/extra)\n@@ -249,8 +249,8 @@ doc/$(1)/index.html: $$(RUSTDOC) $$(TLIB2_T_$(3)_H_$(3))/$(CFG_STDLIB_$(3))\n DOCS += doc/$(1)/index.html\n endef\n \n-$(eval $(call libdoc,std,$(STDLIB_CRATE),$(CFG_BUILD_TRIPLE)))\n-$(eval $(call libdoc,extra,$(EXTRALIB_CRATE),$(CFG_BUILD_TRIPLE)))\n+$(eval $(call libdoc,std,$(STDLIB_CRATE),$(CFG_BUILD)))\n+$(eval $(call libdoc,extra,$(EXTRALIB_CRATE),$(CFG_BUILD)))\n \n \n ifdef CFG_DISABLE_DOCS"}, {"sha": "9ba2b978f1075775ef028186493da62d9121536c", "filename": "mk/host.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -161,7 +161,7 @@ endif\n \n endef\n \n-$(foreach t,$(CFG_HOST_TRIPLES),\t\t\t\t\t\\\n+$(foreach t,$(CFG_HOST),\t\t\t\t\t\\\n \t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t)))\t\\\n \t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t)))\t\\\n \t$(eval $(call CP_HOST_STAGE_N,2,3,$(t),$(t))))"}, {"sha": "7bedcf812f4ea92f7806ba606fb1112a5dbedf9d", "filename": "mk/install.mk", "status": "modified", "additions": 47, "deletions": 46, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -80,8 +80,8 @@ PTL$(1)$(2) = $$(PTR$(1)$(2))/$(CFG_LIBDIR)\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call INSTALL_PREPARE_N,$(target),$(CFG_BUILD_TRIPLE))))\n+$(foreach target,$(CFG_TARGET), \\\n+ $(eval $(call INSTALL_PREPARE_N,$(target),$(CFG_BUILD))))\n \n define INSTALL_TARGET_N\n install-target-$(1)-host-$(2): LIB_SOURCE_DIR=$$(TL$(1)$(2))\n@@ -114,47 +114,47 @@ install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(if $(findstring $(target), $(CFG_BUILD_TRIPLE)), \\\n-  $(eval $(call INSTALL_HOST_N,$(target),$(CFG_BUILD_TRIPLE))), \\\n-  $(eval $(call INSTALL_TARGET_N,$(target),$(CFG_BUILD_TRIPLE)))))\n+$(foreach target,$(CFG_TARGET), \\\n+ $(if $(findstring $(target), $(CFG_BUILD)), \\\n+  $(eval $(call INSTALL_HOST_N,$(target),$(CFG_BUILD))), \\\n+  $(eval $(call INSTALL_TARGET_N,$(target),$(CFG_BUILD)))))\n \n-INSTALL_TARGET_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- install-target-$(target)-host-$(CFG_BUILD_TRIPLE))\n+INSTALL_TARGET_RULES = $(foreach target,$(CFG_TARGET), \\\n+ install-target-$(target)-host-$(CFG_BUILD))\n \n install: all install-host install-targets\n \n # Shorthand for build/stageN/bin\n-HB = $(HBIN$(ISTAGE)_H_$(CFG_BUILD_TRIPLE))\n-HB2 = $(HBIN2_H_$(CFG_BUILD_TRIPLE))\n+HB = $(HBIN$(ISTAGE)_H_$(CFG_BUILD))\n+HB2 = $(HBIN2_H_$(CFG_BUILD))\n # Shorthand for build/stageN/lib\n-HL = $(HLIB$(ISTAGE)_H_$(CFG_BUILD_TRIPLE))\n+HL = $(HLIB$(ISTAGE)_H_$(CFG_BUILD))\n # Shorthand for the prefix bin directory\n PHB = $(PREFIX_BIN)\n # Shorthand for the prefix bin directory\n PHL = $(PREFIX_LIB)\n \n install-host: LIB_SOURCE_DIR=$(HL)\n install-host: LIB_DESTIN_DIR=$(PHL)\n-install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE))\n+install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_)_H_$(CFG_BUILD_))\n \t$(Q)$(call MK_INSTALL_DIR,$(PREFIX_BIN))\n \t$(Q)$(call MK_INSTALL_DIR,$(PREFIX_LIB))\n-\t$(Q)$(call MK_INSTALL_DIR,$(PREFIX_ROOT)/share/man/man1)\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustc$(X_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustpkg$(X_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(STDLIB_GLOB_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(EXTRALIB_GLOB_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUSTUV_GLOB_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUSTC_GLOB_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBSYNTAX_GLOB_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL_LIB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rustc.1)\n-\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rustdoc.1)\n-\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rustpkg.1)\n+\t$(Q)$(call MK_INSTALL_DIR,$(CFG_MANDIR/man1)\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustc$(X_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustpkg$(X_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(STDLIB_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(EXTRALIB_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(LIBRUSTUV_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(LIBRUSTC_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(LIBSYNTAX_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL_LIB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM_$(CFG_BUILD)))\n+\t$(Q)$(call INSTALL,$(S)/man, $(CFG_MANDIR/man1,rustc.1)\n+\t$(Q)$(call INSTALL,$(S)/man, $(CFG_MANDIR/man1,rustdoc.1)\n+\t$(Q)$(call INSTALL,$(S)/man, $(CFG_MANDIR/man1,rustpkg.1)\n \n install-targets: $(INSTALL_TARGET_RULES)\n \n@@ -163,34 +163,35 @@ HOST_LIB_FROM_HL_GLOB = \\\n   $(patsubst $(HL)/%,$(PHL)/%,$(wildcard $(HL)/$(1)))\n \n uninstall:\n-\t$(Q)rm -f $(PHB)/rustc$(X_$(CFG_BUILD_TRIPLE))\n-\t$(Q)rm -f $(PHB)/rustpkg$(X_$(CFG_BUILD_TRIPLE))\n-\t$(Q)rm -f $(PHB)/rustdoc$(X_$(CFG_BUILD_TRIPLE))\n-\t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE))\n-\t$(Q)rm -f $(PHL)/$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHB)/rustc$(X_$(CFG_BUILD))\n+\t$(Q)rm -f $(PHB)/rustpkg$(X_$(CFG_BUILD))\n+\t$(Q)rm -f $(PHB)/rustdoc$(X_$(CFG_BUILD))\n+\t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM_$(CFG_BUILD))\n+\t$(Q)rm -f $(PHL)/$(CFG_RUNTIME_$(CFG_BUILD))\n \t$(Q)for i in \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_GLOB_$(CFG_BUILD_TRIPLE))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(EXTRALIB_GLOB_$(CFG_BUILD_TRIPLE))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTUV_GLOB_$(CFG_BUILD_TRIPLE))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTC_GLOB_$(CFG_BUILD_TRIPLE))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBSYNTAX_GLOB_$(CFG_BUILD_TRIPLE))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD_TRIPLE))) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(EXTRALIB_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTUV_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTC_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBSYNTAX_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD))) \\\n         ; \\\n         do rm -f $$i ; \\\n         done\n \t$(Q)rm -Rf $(PHL)/rustc\n-\t$(Q)rm -f $(PREFIX_ROOT)/share/man/man1/rustc.1\n-\t$(Q)rm -f $(PREFIX_ROOT)/share/man/man1/rustdoc.1\n-\t$(Q)rm -f $(PREFIX_ROOT)/share/man/man1/rustpkg.1\n+\t$(Q)rm -f $(CFG_MANDIR)/man1/rustc.1\n+\t$(Q)rm -f $(CFG_MANDIR)/man1/rustdoc.1\n+\t$(Q)rm -f $(CFG_MANDIR)/man1/rusti.1\n+\t$(Q)rm -f $(CFG_MANDIR)/man1/rustpkg.1\n \n # target platform specific variables\n # for arm-linux-androidabi\n define DEF_ADB_DEVICE_STATUS\n CFG_ADB_DEVICE_STATUS=$(1)\n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach target,$(CFG_TARGET), \\\n   $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n     $(if $(findstring adb,$(CFG_ADB)), \\\n       $(if $(findstring device,$(shell $(CFG_ADB) devices 2>/dev/null | grep -E '^[_A-Za-z0-9-]+[[:blank:]]+device')), \\\n@@ -246,12 +247,12 @@ install-runtime-target-$(1)-cleanup:\n \t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(LIBRUSTUV_GLOB_$(1)))\n endef\n \n-$(eval $(call INSTALL_RUNTIME_TARGET_N,arm-linux-androideabi,$(CFG_BUILD_TRIPLE)))\n+$(eval $(call INSTALL_RUNTIME_TARGET_N,arm-linux-androideabi,$(CFG_BUILD)))\n $(eval $(call INSTALL_RUNTIME_TARGET_CLEANUP_N,arm-linux-androideabi))\n \n install-runtime-target: \\\n \tinstall-runtime-target-arm-linux-androideabi-cleanup \\\n-\tinstall-runtime-target-arm-linux-androideabi-host-$(CFG_BUILD_TRIPLE)\n+\tinstall-runtime-target-arm-linux-androideabi-host-$(CFG_BUILD)\n else\n install-runtime-target:\n \t@echo \"No device to install runtime library\""}, {"sha": "53f955bd284aa80b2948223b9934cbf069cf6d0b", "filename": "mk/llvm.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -42,5 +42,5 @@ $$(LLVM_STAMP_$(1)): $(S)src/rustllvm/llvm-auto-clean-trigger\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n  $(eval $(call DEF_LLVM_RULES,$(host))))"}, {"sha": "16cbaab495d8256a8dfc4feea72921c44ccd19af", "filename": "mk/perf.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fperf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fperf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fperf.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -10,16 +10,16 @@\n \n \n ifdef CFG_PERF_TOOL\n-rustc-perf$(X): $(CFG_BUILD_TRIPLE)/stage2/bin/rustc$(X_$(CFG_BUILD_TRIPLE))\n+rustc-perf$(X): $(CFG_BUILD)/stage2/bin/rustc$(X_$(CFG_BUILD))\n \t@$(call E, perf compile: $@)\n-\t$(PERF_STAGE2_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE)) \\\n+\t$(PERF_STAGE2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n \t\t -o $@ $(COMPILER_CRATE) >rustc-perf.err 2>&1\n \t$(Q)rm -f $(LIBRUSTC_GLOB)\n else\n-rustc-perf$(X): $(CFG_BUILD_TRIPLE)/stage2/bin/rustc$(X_$(CFG_BUILD_TRIPLE))\n+rustc-perf$(X): $(CFG_BUILD)/stage2/bin/rustc$(X_$(CFG_BUILD))\n \t$(Q)touch $@\n endif\n \n-perf: check-stage2-perf rustc-perf$(X_$(CFG_BUILD_TRIPLE))\n-\t$(Q)find $(CFG_BUILD_TRIPLE)/test/perf -name \\*.err | xargs cat\n+perf: check-stage2-perf rustc-perf$(X_$(CFG_BUILD))\n+\t$(Q)find $(CFG_BUILD)/test/perf -name \\*.err | xargs cat\n \t$(Q)cat rustc-perf.err"}, {"sha": "70dec09971b9bd52e053f08fd86002e88e4268f3", "filename": "mk/platform.mk", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -16,15 +16,15 @@\n define DEF_HOST_VAR\n   HOST_$(1) = $(subst i686,i386,$(word 1,$(subst -, ,$(1))))\n endef\n-$(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_HOST_VAR,$(t))))\n-$(foreach t,$(CFG_TARGET_TRIPLES),$(info cfg: host for $(t) is $(HOST_$(t))))\n+$(foreach t,$(CFG_TARGET),$(eval $(call DEF_HOST_VAR,$(t))))\n+$(foreach t,$(CFG_TARGET),$(info cfg: host for $(t) is $(HOST_$(t))))\n \n # Ditto for OSTYPE\n define DEF_OSTYPE_VAR\n   OSTYPE_$(1) = $(subst $(firstword $(subst -, ,$(1)))-,,$(1))\n endef\n-$(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_OSTYPE_VAR,$(t))))\n-$(foreach t,$(CFG_TARGET_TRIPLES),$(info cfg: os for $(t) is $(OSTYPE_$(t))))\n+$(foreach t,$(CFG_TARGET),$(eval $(call DEF_OSTYPE_VAR,$(t))))\n+$(foreach t,$(CFG_TARGET),$(info cfg: os for $(t) is $(OSTYPE_$(t))))\n \n # FIXME: no-omit-frame-pointer is just so that task_start_wrapper\n # has a frame pointer and the stack walker can understand it. Turning off\n@@ -378,7 +378,7 @@ CFG_UNIXY_i686-pc-mingw32 :=\n CFG_PATH_MUNGE_i686-pc-mingw32 :=\n CFG_LDPATH_i686-pc-mingw32 :=$(CFG_LDPATH_i686-pc-mingw32):$(PATH)\n CFG_RUN_i686-pc-mingw32=PATH=\"$(CFG_LDPATH_i686-pc-mingw32):$(1)\" $(2)\n-CFG_RUN_TARG_i686-pc-mingw32=$(call CFG_RUN_i686-pc-mingw32,$(HLIB$(1)_H_$(CFG_BUILD_TRIPLE)),$(2))\n+CFG_RUN_TARG_i686-pc-mingw32=$(call CFG_RUN_i686-pc-mingw32,$(HLIB$(1)_H_$(CFG_BUILD)),$(2))\n \n # i586-mingw32msvc configuration\n CC_i586-mingw32msvc=$(CFG_MINGW32_CROSS_PATH)/bin/i586-mingw32msvc-gcc\n@@ -432,7 +432,7 @@ CFG_UNIXY_x86_64-w64-mingw32 :=\n CFG_PATH_MUNGE_x86_64-w64-mingw32 :=\n CFG_LDPATH_x86_64-w64-mingw32 :=$(CFG_LDPATH_x86_64-w64-mingw32):$(PATH)\n CFG_RUN_x86_64-w64-mingw32=PATH=\"$(CFG_LDPATH_x86_64-w64-mingw32):$(1)\" $(2)\n-CFG_RUN_TARG_x86_64-w64-mingw32=$(call CFG_RUN_x86_64-w64-mingw32,$(HLIB$(1)_H_$(CFG_BUILD_TRIPLE)),$(2))\n+CFG_RUN_TARG_x86_64-w64-mingw32=$(call CFG_RUN_x86_64-w64-mingw32,$(HLIB$(1)_H_$(CFG_BUILD)),$(2))\n \n # x86_64-unknown-freebsd configuration\n CC_x86_64-unknown-freebsd=$(CC)\n@@ -498,7 +498,7 @@ define CFG_MAKE_TOOLCHAIN\n   # We're using llvm-mc as our assembler because it supports\n   # .cfi pseudo-ops on mac\n   CFG_ASSEMBLE_$(1)=$$(CPP_$(1)) -E $$(CFG_DEPEND_FLAGS) $$(2) | \\\n-                    $$(LLVM_MC_$$(CFG_BUILD_TRIPLE)) \\\n+                    $$(LLVM_MC_$$(CFG_BUILD)) \\\n                     -assemble \\\n                     -filetype=obj \\\n                     -triple=$(1) \\\n@@ -514,5 +514,5 @@ define CFG_MAKE_TOOLCHAIN\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES),\\\n+$(foreach target,$(CFG_TARGET),\\\n   $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))"}, {"sha": "3d2af81f1c811fc5561c00aeb1d191bd049b97de", "filename": "mk/pp.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -24,10 +24,10 @@ else\n                        \"no-reformat\\|xfail-pretty\\|xfail-test\")\n endif\n \n-reformat: $(SREQ1$(CFG_BUILD_TRIPLE))\n+reformat: $(SREQ1$(CFG_BUILD))\n \t@$(call E, reformat [stage1]: $@)\n \tfor i in $(PP_INPUTS_FILTERED);  \\\n-    do $(call CFG_RUN_TARG_$(CFG_BUILD_TRIPLE),1,$(CFG_BUILD_TRIPLE)/stage1/rustc$(X_$(CFG_BUILD_TRIPLE))) \\\n+    do $(call CFG_RUN_TARG_$(CFG_BUILD),1,$(CFG_BUILD)/stage1/rustc$(X_$(CFG_BUILD))) \\\n        --pretty normal $$i >$$i.tmp; \\\n     if [ $$? -ne 0 ]; \\\n         then echo failed to print $$i; rm $$i.tmp; \\"}, {"sha": "d8490230675b866ac815e778e078d4cfbc5a31a5", "filename": "mk/rt.mk", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -44,7 +44,7 @@ endif\n define DEF_LIBUV_ARCH_VAR\n   LIBUV_ARCH_$(1) = $$(subst i386,ia32,$$(subst x86_64,x64,$$(HOST_$(1))))\n endef\n-$(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_LIBUV_ARCH_VAR,$(t))))\n+$(foreach t,$(CFG_TARGET),$(eval $(call DEF_LIBUV_ARCH_VAR,$(t))))\n \n ifdef CFG_ENABLE_FAST_MAKE\n LIBUV_DEPS := $(S)/.gitmodules\n@@ -76,7 +76,7 @@ RUNTIME_CXXFLAGS_$(1)_$(2) = -D_RUST_STAGE$(2)\n # XXX: Like with --cfg stage0, pass the defines for stage1 to the stage0\n # build of non-build-triple host compilers\n ifeq ($(2),0)\n-ifneq ($(strip $(CFG_BUILD_TRIPLE)),$(strip $(1)))\n+ifneq ($(strip $(CFG_BUILD)),$(strip $(1)))\n RUNTIME_CFLAGS_$(1)_$(2) = -D_RUST_STAGE1\n RUNTIME_CXXFLAGS_$(1)_$(2) = -D_RUST_STAGE1\n endif\n@@ -131,7 +131,7 @@ $$(RT_BUILD_DIR_$(1)_$(2))/%.o: rt/%.c $$(MKFILE_DEPS)\n                  $$(SNAP_DEFINES) $$(RUNTIME_CFLAGS_$(1)_$(2))) $$<\n \n $$(RT_BUILD_DIR_$(1)_$(2))/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n-                     $$(LLVM_CONFIG_$$(CFG_BUILD_TRIPLE))\n+                     $$(LLVM_CONFIG_$$(CFG_BUILD))\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n \n@@ -242,12 +242,11 @@ $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1))\n \t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n \t\tV=$$(VERBOSE)\n endif\n-\n endef\n \n # Instantiate template for all stages/targets\n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach target,$(CFG_TARGET), \\\n      $(eval $(call DEF_THIRD_PARTY_TARGETS,$(target))))\n $(foreach stage,$(STAGES), \\\n-    $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+    $(foreach target,$(CFG_TARGET), \\\n \t $(eval $(call DEF_RUNTIME_TARGETS,$(target),$(stage)))))"}, {"sha": "c4a9c9c4f0b14b4c49457a309a620f23d73a1c78", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -46,5 +46,5 @@ $(1)/rustllvm/%.o: rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n endef\n \n # Instantiate template for all stages\n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n  $(eval $(call DEF_RUSTLLVM_TARGETS,$(host))))"}, {"sha": "a7eb71baf6bea82e4dbb2db9374581a06100cb81", "filename": "mk/snap.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fsnap.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fsnap.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fsnap.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -17,12 +17,12 @@ snap-stage$(1)-H-$(2): $$(HSREQ$(1)_H_$(2))\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST),\t\t\t\t\t\t\\\n  $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\t\t\\\n   $(eval $(call DEF_SNAP_FOR_STAGE_H,$(stage),$(host))))))\n \n-snap-stage1: snap-stage1-H-$(CFG_BUILD_TRIPLE)\n+snap-stage1: snap-stage1-H-$(CFG_BUILD)\n \n-snap-stage2: snap-stage2-H-$(CFG_BUILD_TRIPLE)\n+snap-stage2: snap-stage2-H-$(CFG_BUILD)\n \n-snap-stage3: snap-stage3-H-$(CFG_BUILD_TRIPLE)\n+snap-stage3: snap-stage3-H-$(CFG_BUILD)"}, {"sha": "3a678cc04f1d99c7af8639d64f9baddc217cc8cc", "filename": "mk/stage0.mk", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -1,23 +1,23 @@\n # Extract the snapshot host compiler\n \n-$(HBIN0_H_$(CFG_BUILD_TRIPLE))/:\n+$(HBIN0_H_$(CFG_BUILD))/:\n \tmkdir -p $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/:\n+$(HLIB0_H_$(CFG_BUILD))/:\n \tmkdir -p $@\n \n $(SNAPSHOT_RUSTC_POST_CLEANUP):\t\t\t\t\t\t\\\n \t\t$(S)src/snapshots.txt\t\t\t\t\t\\\n \t\t$(S)src/etc/get-snapshot.py $(MKFILE_DEPS)\t\t\\\n-\t\t| $(HBIN0_H_$(CFG_BUILD_TRIPLE))/\n+\t\t| $(HBIN0_H_$(CFG_BUILD))/\n \n \t@$(call E, fetch: $@)\n #   Note: the variable \"SNAPSHOT_FILE\" is generally not set, and so\n #   we generally only pass one argument to this script.\n ifdef CFG_ENABLE_LOCAL_RUST\n-\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_BUILD_TRIPLE) $(CFG_LOCAL_RUST_ROOT)\n+\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_BUILD) $(CFG_LOCAL_RUST_ROOT)\n else\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/get-snapshot.py $(CFG_BUILD_TRIPLE) $(SNAPSHOT_FILE)\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/get-snapshot.py $(CFG_BUILD) $(SNAPSHOT_FILE)\n ifdef CFG_ENABLE_PAX_FLAGS\n \t@$(call E, apply PaX flags: $@)\n \t@\"$(CFG_PAXCTL)\" -cm \"$@\"\n@@ -27,34 +27,34 @@ endif\n \n # Host libs will be extracted by the above rule\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE)): \\\n-\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE)) \\\n-\t\t| $(HLIB0_H_$(CFG_BUILD_TRIPLE))/\n+$(HLIB0_H_$(CFG_BUILD))/$(CFG_RUNTIME_$(CFG_BUILD)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD)) \\\n+\t\t| $(HLIB0_H_$(CFG_BUILD))/\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_STDLIB_$(CFG_BUILD_TRIPLE)): \\\n-\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE)) \\\n-\t\t| $(HLIB0_H_$(CFG_BUILD_TRIPLE))/\n+$(HLIB0_H_$(CFG_BUILD))/$(CFG_STDLIB_$(CFG_BUILD)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD)) \\\n+\t\t| $(HLIB0_H_$(CFG_BUILD))/\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_EXTRALIB_$(CFG_BUILD_TRIPLE)): \\\n-\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE)) \\\n-\t\t| $(HLIB0_H_$(CFG_BUILD_TRIPLE))/\n+$(HLIB0_H_$(CFG_BUILD))/$(CFG_EXTRALIB_$(CFG_BUILD)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD)) \\\n+\t\t| $(HLIB0_H_$(CFG_BUILD))/\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_LIBRUSTUV_$(CFG_BUILD_TRIPLE)): \\\n-\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE)) \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_LIBRUSTUV_$(CFG_BUILD)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD)) \\\n \t\t| $(HLIB0_H_$(CFG_BUILD_TRIPLE))/\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_LIBRUSTC_$(CFG_BUILD_TRIPLE)): \\\n-\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE)) \\\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_LIBRUSTC_$(CFG_BUILD)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD)) \\\n \t\t| $(HLIB0_H_$(CFG_BUILD_TRIPLE))/\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE)): \\\n-\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE)) \\\n-\t\t| $(HLIB0_H_$(CFG_BUILD_TRIPLE))/\n+$(HLIB0_H_$(CFG_BUILD))/$(CFG_RUSTLLVM_$(CFG_BUILD)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD)) \\\n+\t\t| $(HLIB0_H_$(CFG_BUILD))/\n \t$(Q)touch $@\n \n # For other targets, let the host build the target:\n@@ -124,5 +124,5 @@ endef\n \n # Use stage1 to build other architectures: then you don't have to wait\n # for stage2, but you get the latest updates to the compiler source.\n-$(foreach t,$(NON_BUILD_HOST_TRIPLES),\t\t\t\t\t\t\t\t\\\n- $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_BUILD_TRIPLE))))\n+$(foreach t,$(NON_BUILD_HOSTS),\t\t\t\t\t\t\t\t\\\n+ $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_BUILD))))"}, {"sha": "ac95b2f5c66852bde307ed55218aa5745229d835", "filename": "mk/target.mk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -11,7 +11,7 @@\n # This is the compile-time target-triple for the compiler. For the compiler at\n # runtime, this should be considered the host-triple. More explanation for why\n # this exists can be found on issue #2400\n-export CFG_COMPILER_TRIPLE\n+export CFG_COMPILER\n \n # The standard libraries should be held up to a higher standard than any old\n # code, make sure that these common warnings are denied by default. These can\n@@ -36,7 +36,7 @@ WFLAGS_ST2 = -D warnings\n # had its chance to clean it out; otherwise the other products will be\n # inadvertantly included in the clean out.\n \n-SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n+SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD))\n \n define TARGET_STAGE_N\n \n@@ -96,7 +96,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(2)),$$(notdir $$@))\n \n # Only build the compiler for host triples\n-ifneq ($$(findstring $(2),$$(CFG_HOST_TRIPLES)),)\n+ifneq ($$(findstring $(2),$$(CFG_HOST)),)\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3)): \\\n \t\t$(2)/rustllvm/$(CFG_RUSTLLVM_$(3)) \\\n@@ -105,7 +105,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3)): \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)): CFG_COMPILER_TRIPLE = $(2)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)): CFG_COMPILER = $(2)\n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n@@ -142,8 +142,8 @@ endif\n endef\n \n # In principle, each host can build each target:\n-$(foreach source,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n- $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\\\n+$(foreach source,$(CFG_HOST),\t\t\t\t\\\n+ $(foreach target,$(CFG_TARGET),\t\t\t\\\n   $(eval $(call TARGET_STAGE_N,0,$(target),$(source)))\t\t\\\n   $(eval $(call TARGET_STAGE_N,1,$(target),$(source)))\t\t\\\n   $(eval $(call TARGET_STAGE_N,2,$(target),$(source)))\t\t\\"}, {"sha": "d228307764f0e5bffcef7ea485b5753efc971dda", "filename": "mk/tests.mk", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -107,20 +107,20 @@ ifdef CFG_WINDOWSY_$(1)\n                stage2/$$(CFG_LIBDIR), \\\n                $$(if $$(findstring stage3,$$(1)), \\\n                     stage3/$$(CFG_LIBDIR), \\\n-               )))))/rustc/$$(CFG_BUILD_TRIPLE)/$$(CFG_LIBDIR)\n+               )))))/rustc/$$(CFG_BUILD)/$$(CFG_LIBDIR)\n   CFG_RUN_TEST_$(1)=$$(call CFG_RUN_$(1),$$(call CFG_TESTLIB_$(1),$$(1),$$(3)),$$(1))\n endif\n \n # Run the compiletest runner itself under valgrind\n ifdef CTEST_VALGRIND\n-CFG_RUN_CTEST_$(1)=$$(call CFG_RUN_TEST_$$(CFG_BUILD_TRIPLE),$$(2),$$(3))\n+CFG_RUN_CTEST_$(1)=$$(call CFG_RUN_TEST_$$(CFG_BUILD),$$(2),$$(3))\n else\n-CFG_RUN_CTEST_$(1)=$$(call CFG_RUN_$$(CFG_BUILD_TRIPLE),$$(TLIB$$(1)_T_$$(3)_H_$$(3)),$$(2))\n+CFG_RUN_CTEST_$(1)=$$(call CFG_RUN_$$(CFG_BUILD),$$(TLIB$$(1)_T_$$(3)_H_$$(3)),$$(2))\n endif\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach target,$(CFG_TARGET), \\\n   $(eval $(call DEF_TARGET_COMMANDS,$(target))))\n \n # Target platform specific variables\n@@ -129,7 +129,7 @@ define DEF_ADB_DEVICE_STATUS\n CFG_ADB_DEVICE_STATUS=$(1)\n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach target,$(CFG_TARGET), \\\n   $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n     $(if $(findstring adb,$(CFG_ADB)), \\\n       $(if $(findstring device,$(shell $(CFG_ADB) devices 2>/dev/null | grep -E '^[_A-Za-z0-9-]+[[:blank:]]+device')), \\\n@@ -158,11 +158,11 @@ $(info check: android device test dir $(CFG_ADB_TEST_DIR) ready \\\n  $(shell adb push $(S)src/etc/adb_run_wrapper.sh $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n  $(shell adb push $(CFG_ANDROID_CROSS_PATH)/arm-linux-androideabi/lib/armv7-a/libgnustl_shared.so \\\n                   $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n- $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUNTIME_arm-linux-androideabi) \\\n+ $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD))/$(CFG_RUNTIME_arm-linux-androideabi) \\\n                   $(CFG_ADB_TEST_DIR)) \\\n- $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD_TRIPLE))/$(STDLIB_GLOB_arm-linux-androideabi) \\\n+ $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD))/$(STDLIB_GLOB_arm-linux-androideabi) \\\n                   $(CFG_ADB_TEST_DIR)) \\\n- $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD_TRIPLE))/$(EXTRALIB_GLOB_arm-linux-androideabi) \\\n+ $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD))/$(EXTRALIB_GLOB_arm-linux-androideabi) \\\n                   $(CFG_ADB_TEST_DIR)) \\\n  $(shell adb push $(TLIB2_T_arm-linux-androideabi_H_$(CFG_BUILD_TRIPLE))/$(LIBRUSTUV_GLOB_arm-linux-androideabi) \\\n                   $(CFG_ADB_TEST_DIR)) \\\n@@ -202,7 +202,7 @@ cleantmptestlogs:\n \t$(Q)rm -f tmp/*.log\n \n cleantestlibs:\n-\t$(Q)find $(CFG_BUILD_TRIPLE)/test \\\n+\t$(Q)find $(CFG_BUILD)/test \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n@@ -293,7 +293,7 @@ check-stage$(1)-T-$(2)-H-$(3)-exec:     \t\t\t\t\\\n \n # Only test the compiler-dependent crates when the target is\n # able to build a compiler (when the target triple is in the set of host triples)\n-ifneq ($$(findstring $(2),$$(CFG_HOST_TRIPLES)),)\n+ifneq ($$(findstring $(2),$$(CFG_HOST)),)\n \n check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n \t$$(foreach crate,$$(TEST_CRATES), \\\n@@ -320,8 +320,8 @@ check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n- $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n   $(foreach stage,$(STAGES), \\\n     $(eval $(call DEF_TEST_SETS,$(stage),$(target),$(host))))))\n \n@@ -366,7 +366,7 @@ $(3)/stage$(1)/test/syntaxtest-$(2)$$(X_$(2)):\t\t\t\\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)): CFG_COMPILER_TRIPLE = $(2)\n+$(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)): CFG_COMPILER = $(2)\n $(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n \t\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\\n@@ -396,8 +396,8 @@ $(3)/stage$(1)/test/rustdoctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n- $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(eval $(foreach target,$(CFG_TARGET), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call TEST_RUNNER,$(stage),$(target),$(host))))))))\n \n@@ -451,11 +451,11 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t@touch $$@\n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n- $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach crate, $(TEST_CRATES), \\\n-    $(if $(findstring $(target),$(CFG_BUILD_TRIPLE)), \\\n+    $(if $(findstring $(target),$(CFG_BUILD)), \\\n      $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))), \\\n      $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n       $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n@@ -594,7 +594,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3))\t\t\t\\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n         --clang-path $(if $(CFG_CLANG),$(CFG_CLANG),clang) \\\n-        --llvm-bin-path $(CFG_LLVM_INST_DIR_$(CFG_BUILD_TRIPLE))/bin \\\n+        --llvm-bin-path $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin \\\n         --aux-base $$(S)src/test/auxiliary/                 \\\n         --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n         --target $(2)                                       \\\n@@ -614,8 +614,8 @@ CTEST_DEPS_codegen_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_TESTS)\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n- $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(eval $(foreach target,$(CFG_TARGET), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call DEF_CTEST_VARS,$(stage),$(target),$(host))))))))\n \n@@ -657,8 +657,8 @@ endef\n \n CTEST_NAMES = rpass rpass-full rfail cfail bench perf debuginfo codegen\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n- $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(eval $(foreach target,$(CFG_TARGET), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(foreach name,$(CTEST_NAMES), \\\n    $(eval $(call DEF_RUN_COMPILETEST,$(stage),$(target),$(host),$(name))))))))))\n@@ -696,8 +696,8 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n- $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach pretty-name,$(PRETTY_NAMES), \\\n     $(eval $(call DEF_RUN_PRETTY_TEST,$(stage),$(target),$(host),$(pretty-name)))))))\n@@ -723,8 +723,8 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): \\\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n- $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach docname,$(DOC_TEST_NAMES), \\\n     $(eval $(call DEF_RUN_DOC_TEST,$(stage),$(target),$(host),$(docname)))))))\n@@ -745,7 +745,7 @@ doc-$(2)-extract$(1):\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n  $(foreach docname,$(DOC_TEST_NAMES), \\\n   $(eval $(call DEF_DOC_TEST_HOST,$(host),$(docname)))))\n \n@@ -780,32 +780,32 @@ check-stage$(1)-T-$(2)-H-$(3): check-stage$(1)-T-$(2)-H-$(3)-exec\n endef\n \n $(foreach stage,$(STAGES), \\\n- $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach host,$(CFG_HOST), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST,$(stage),$(target),$(host))))))\n \n define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP\n check-stage$(1)-T-$(2)-H-$(3)-$(4): check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec\n endef\n \n $(foreach stage,$(STAGES), \\\n- $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach host,$(CFG_HOST), \\\n    $(foreach group,$(TEST_GROUPS), \\\n     $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP,$(stage),$(target),$(host),$(group)))))))\n \n define DEF_CHECK_FOR_STAGE\n-check-stage$(1): check-stage$(1)-H-$$(CFG_BUILD_TRIPLE)\n-check-stage$(1)-H-all: $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+check-stage$(1): check-stage$(1)-H-$$(CFG_BUILD)\n+check-stage$(1)-H-all: $$(foreach target,$$(CFG_TARGET), \\\n                            check-stage$(1)-H-$$(target))\n endef\n \n $(foreach stage,$(STAGES), \\\n  $(eval $(call DEF_CHECK_FOR_STAGE,$(stage))))\n \n define DEF_CHECK_FOR_STAGE_AND_GROUP\n-check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_BUILD_TRIPLE)-$(2)\n-check-stage$(1)-H-all-$(2): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_BUILD)-$(2)\n+check-stage$(1)-H-all-$(2): $$(foreach target,$$(CFG_TARGET), \\\n                                check-stage$(1)-H-$$(target)-$(2))\n endef\n \n@@ -815,21 +815,21 @@ $(foreach stage,$(STAGES), \\\n \n \n define DEF_CHECK_FOR_STAGE_AND_HOSTS\n-check-stage$(1)-H-$(2): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+check-stage$(1)-H-$(2): $$(foreach target,$$(CFG_TARGET), \\\n                            check-stage$(1)-T-$$(target)-H-$(2))\n endef\n \n $(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(foreach host,$(CFG_HOST), \\\n   $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS,$(stage),$(host)))))\n \n define DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP\n-check-stage$(1)-H-$(2)-$(3): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+check-stage$(1)-H-$(2)-$(3): $$(foreach target,$$(CFG_TARGET), \\\n                                 check-stage$(1)-T-$$(target)-H-$(2)-$(3))\n endef\n \n $(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(foreach host,$(CFG_HOST), \\\n   $(foreach group,$(TEST_GROUPS), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n \n@@ -838,7 +838,7 @@ $(foreach stage,$(STAGES), \\\n ######################################################################\n \n FT := run_pass_stage2\n-FT_LIB := $(call CFG_LIB_NAME_$(CFG_BUILD_TRIPLE),$(FT))\n+FT_LIB := $(call CFG_LIB_NAME_$(CFG_BUILD),$(FT))\n FT_DRIVER := $(FT)_driver\n \n GENERATED += tmp/$(FT).rc tmp/$(FT_DRIVER).rs\n@@ -878,11 +878,11 @@ check-fast-T-$(2)-H-$(3):     \t\t\t\\\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES), \\\n- $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST), \\\n+ $(eval $(foreach target,$(CFG_TARGET), \\\n    $(eval $(call DEF_CHECK_FAST_FOR_T_H,,$(target),$(host))))))\n \n-check-fast: tidy check-fast-H-$(CFG_BUILD_TRIPLE) check-stage2-std check-stage2-extra\n+check-fast: tidy check-fast-H-$(CFG_BUILD) check-stage2-std check-stage2-extra\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n \n define DEF_CHECK_FAST_FOR_H\n@@ -891,5 +891,5 @@ check-fast-H-$(1): \t\tcheck-fast-T-$(1)-H-$(1)\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\\\n+$(foreach host,$(CFG_HOST),\t\t\t\\\n  $(eval $(call DEF_CHECK_FAST_FOR_H,$(host))))"}, {"sha": "ed4ae10e3e2378564a8a51679e3468eeec6423ec", "filename": "mk/tools.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -127,14 +127,14 @@ $$(HBIN$(2)_H_$(4))/rustdoc$$(X_$(4)):\t\t\t\t\\\n \n endef\n \n-$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n-$(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n+$(foreach host,$(CFG_HOST),\t\t\t\t\\\n+$(foreach target,$(CFG_TARGET),\t\t\t\t\\\n  $(eval $(call TOOLS_STAGE_N_TARGET,0,1,$(host),$(target)))\t\\\n  $(eval $(call TOOLS_STAGE_N_TARGET,1,2,$(host),$(target)))\t\\\n  $(eval $(call TOOLS_STAGE_N_TARGET,2,3,$(host),$(target)))\t\\\n  $(eval $(call TOOLS_STAGE_N_TARGET,3,bogus,$(host),$(target)))))\n \n-$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n+$(foreach host,$(CFG_HOST),\t\t\t\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,0,1,$(host),$(host)))\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,1,2,$(host),$(host)))\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,2,3,$(host),$(host))))"}, {"sha": "fb593b56e15f5d73872585b8a8288e794da254df", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c888fc6db2698268df57341cb1449d00695b86e7/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c888fc6db2698268df57341cb1449d00695b86e7/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c888fc6db2698268df57341cb1449d00695b86e7", "patch": "@@ -643,7 +643,7 @@ pub fn host_triple() -> ~str {\n     // Instead of grabbing the host triple (for the current host), we grab (at\n     // compile time) the target triple that this rustc is built with and\n     // calling that (at runtime) the host triple.\n-    (env!(\"CFG_COMPILER_TRIPLE\")).to_owned()\n+    (env!(\"CFG_COMPILER\")).to_owned()\n }\n \n pub fn build_session_options(binary: @str,"}]}