{"sha": "781a265b88f7fc3c8c406b327e8a548e742d6224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MWEyNjViODhmN2ZjM2M4YzQwNmIzMjdlOGE1NDhlNzQyZDYyMjQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-25T15:45:49Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-25T19:15:04Z"}, "message": "Remove variable name 'res' from test suite", "tree": {"sha": "408b0932c9b68240c0cc0bfc9066393ee2c6dd38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408b0932c9b68240c0cc0bfc9066393ee2c6dd38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/781a265b88f7fc3c8c406b327e8a548e742d6224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/781a265b88f7fc3c8c406b327e8a548e742d6224", "html_url": "https://github.com/rust-lang/rust/commit/781a265b88f7fc3c8c406b327e8a548e742d6224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/781a265b88f7fc3c8c406b327e8a548e742d6224/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c772269f08c1ad1467f282d3c95e72b579aecf80", "url": "https://api.github.com/repos/rust-lang/rust/commits/c772269f08c1ad1467f282d3c95e72b579aecf80", "html_url": "https://github.com/rust-lang/rust/commit/c772269f08c1ad1467f282d3c95e72b579aecf80"}], "stats": {"total": 306, "additions": 153, "deletions": 153}, "files": [{"sha": "8af52ed83a04e5ad02fa9ec6f950e62df8c3b0aa", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -171,8 +171,8 @@ fn find_pre_post_state_call(&fn_ctxt fcx, &prestate pres, &@expr a,\n \n fn find_pre_post_state_exprs(&fn_ctxt fcx, &prestate pres, ast::node_id id,\n                              &vec[@expr] es, controlflow cf) -> bool {\n-    auto res = seq_states(fcx, pres, es);\n-    auto changed = res._0;\n+    auto rs = seq_states(fcx, pres, es);\n+    auto changed = rs._0;\n     changed = set_prestate_ann(fcx.ccx, id, pres) || changed;\n     /* if this is a failing call, it sets everything as initialized */\n     alt (cf) {\n@@ -183,7 +183,7 @@ fn find_pre_post_state_exprs(&fn_ctxt fcx, &prestate pres, ast::node_id id,\n                 changed;\n         }\n         case (_) { \n-            changed = set_poststate_ann(fcx.ccx, id, res._1) || changed;\n+            changed = set_poststate_ann(fcx.ccx, id, rs._1) || changed;\n         }\n     }\n     ret changed;"}, {"sha": "88bc74772b48c534073eb01b3707003cdfd6ff22", "filename": "src/comp/middle/tstate/tritv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Fcomp%2Fmiddle%2Ftstate%2Ftritv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Fcomp%2Fmiddle%2Ftstate%2Ftritv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Ftritv.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -241,15 +241,15 @@ fn to_vec(&t v) -> vec[uint] {\n \n fn to_str(&t v) -> str {\n   let uint i = 0u;\n-  let str res = \"\";\n+  let str rs = \"\";\n   while (i < v.nbits) {\n-    res += alt (tritv_get(v, i)) {\n+    rs += alt (tritv_get(v, i)) {\n         case (dont_care) { \"?\" }\n         case (ttrue)     { \"1\" }\n         case (tfalse)    { \"0\" } };\n     i += 1u;\n   }\n-  ret res;\n+  ret rs;\n }\n \n //"}, {"sha": "bc40a508a085e12984dd42339576cd672f66d279", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n   auto pth = break;\n \n-  let rec(str t) res = rec(t=pth);\n+  let rec(str t) rs = rec(t=pth);\n \n }\n\\ No newline at end of file"}, {"sha": "9947ec7010986a5b6672bcfc5b9dff9c30799615", "filename": "src/test/run-fail/rhs-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-fail%2Frhs-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-fail%2Frhs-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frhs-type.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -5,4 +5,4 @@\n // as a _|_-typed thing, not a str-typed thing\n // xfail-stage0\n // error-pattern:bye\n-fn main() { auto pth = fail\"bye\"; let rec(str t) res = rec(t=pth); }\n\\ No newline at end of file\n+fn main() { auto pth = fail\"bye\"; let rec(str t) rs = rec(t=pth); }\n\\ No newline at end of file"}, {"sha": "e2aa0f26c657f81b7db1495a5a410ba8ab0d4c22", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -7,14 +7,14 @@ import std::option::some;\n \n fn foo[T](&option::t[T] y) {\n     let int x;\n-    let vec[int] res = [];\n+    let vec[int] rs = [];\n     /* tests that x doesn't get put in the precondition for the \n        entire if expression */\n \n     if (true) {\n     } else {\n         alt (y) { case (none[T]) { x = 17; } case (_) { x = 42; } }\n-        res += [x];\n+        rs += [x];\n     }\n     ret;\n }"}, {"sha": "ec8b88f7708a2f0daa4bcffb9e486f5f6175b0f5", "filename": "src/test/run-pass/expr-alt-box.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -5,13 +5,13 @@\n \n // Tests for alt as expressions resulting in boxed types\n fn test_box() {\n-    auto res = alt (true) { case (true) { @100 } };\n-    assert (*res == 100);\n+    auto rs = alt (true) { case (true) { @100 } };\n+    assert (*rs == 100);\n }\n \n fn test_str() {\n-    auto res = alt (true) { case (true) { \"happy\" } };\n-    assert (res == \"happy\");\n+    auto rs = alt (true) { case (true) { \"happy\" } };\n+    assert (rs == \"happy\");\n }\n \n fn main() { test_box(); test_str(); }\n\\ No newline at end of file"}, {"sha": "ae318c52e4aa7e1591a1455cf429ea00cc0864ad", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -5,14 +5,14 @@\n \n // Tests for alt as expressions resulting in structural types\n fn test_rec() {\n-    auto res = alt (true) { case (true) { rec(i=100) } };\n-    assert (res == rec(i=100));\n+    auto rs = alt (true) { case (true) { rec(i=100) } };\n+    assert (rs == rec(i=100));\n }\n \n fn test_tag() {\n     tag mood { happy; sad; }\n-    auto res = alt (true) { case (true) { happy } case (false) { sad } };\n-    assert (res == happy);\n+    auto rs = alt (true) { case (true) { happy } case (false) { sad } };\n+    assert (rs == happy);\n }\n \n fn main() { test_rec(); test_tag(); }\n\\ No newline at end of file"}, {"sha": "a401e2df7d3cce09bb544a05eb6127b0b415d90d", "filename": "src/test/run-pass/expr-alt.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -5,37 +5,37 @@\n \n // Tests for using alt as an expression\n fn test_basic() {\n-    let bool res = alt (true) { case (true) { true } case (false) { false } };\n-    assert (res);\n-    res = alt (false) { case (true) { false } case (false) { true } };\n-    assert (res);\n+    let bool rs = alt (true) { case (true) { true } case (false) { false } };\n+    assert (rs);\n+    rs = alt (false) { case (true) { false } case (false) { true } };\n+    assert (rs);\n }\n \n fn test_inferrence() {\n-    auto res = alt (true) { case (true) { true } case (false) { false } };\n-    assert (res);\n+    auto rs = alt (true) { case (true) { true } case (false) { false } };\n+    assert (rs);\n }\n \n fn test_alt_as_alt_head() {\n     // Yeah, this is kind of confusing ...\n \n-    auto res =\n+    auto rs =\n         alt (alt (false) { case (true) { true } case (false) { false } }) {\n             case (true) { false }\n             case (false) { true }\n         };\n-    assert (res);\n+    assert (rs);\n }\n \n fn test_alt_as_block_result() {\n-    auto res =\n+    auto rs =\n         alt (false) {\n             case (true) { false }\n             case (false) {\n                 alt (true) { case (true) { true } case (false) { false } }\n             }\n         };\n-    assert (res);\n+    assert (rs);\n }\n \n fn main() {"}, {"sha": "d2682da289d39bc78b639faff37924290633f1ff", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -4,8 +4,8 @@ fn test_fn() {\n     type t = fn() -> int ;\n \n     fn ten() -> int { ret 10; }\n-    let t res = { ten };\n-    assert (res() == 10);\n+    let t rs = { ten };\n+    assert (rs() == 10);\n }\n \n fn main() { test_fn(); }\n\\ No newline at end of file"}, {"sha": "b11a1254efcef9bb89b3f7e89427c0421b6f3f33", "filename": "src/test/run-pass/expr-block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -4,13 +4,13 @@\n // -*- rust -*-\n \n // Tests for standalone blocks as expressions\n-fn test_basic() { let bool res = { true }; assert (res); }\n+fn test_basic() { let bool rs = { true }; assert (rs); }\n \n-fn test_rec() { auto res = { rec(v1=10, v2=20) }; assert (res.v2 == 20); }\n+fn test_rec() { auto rs = { rec(v1=10, v2=20) }; assert (rs.v2 == 20); }\n \n fn test_filled_with_stuff() {\n-    auto res = { auto a = 0; while (a < 10) { a += 1; } a };\n-    assert (res == 10);\n+    auto rs = { auto a = 0; while (a < 10) { a += 1; } a };\n+    assert (rs == 10);\n }\n \n fn main() { test_basic(); test_rec(); test_filled_with_stuff(); }\n\\ No newline at end of file"}, {"sha": "fd63eb9c6e648c9faaf7e124c15e52f248328c2d", "filename": "src/test/run-pass/expr-if-box.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -5,13 +5,13 @@\n \n // Tests for if as expressions returning boxed types\n fn test_box() {\n-    auto res = if (true) { @100 } else { @101 };\n-    assert (*res == 100);\n+    auto rs = if (true) { @100 } else { @101 };\n+    assert (*rs == 100);\n }\n \n fn test_str() {\n-    auto res = if (true) { \"happy\" } else { \"sad\" };\n-    assert (res == \"happy\");\n+    auto rs = if (true) { \"happy\" } else { \"sad\" };\n+    assert (rs == \"happy\");\n }\n \n fn main() { test_box(); test_str(); }\n\\ No newline at end of file"}, {"sha": "824f72f0ba6ac0f7b96ef9dfc4f88ebae9da7943", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -5,14 +5,14 @@\n \n // Tests for if as expressions returning structural types\n fn test_rec() {\n-    auto res = if (true) { rec(i=100) } else { rec(i=101) };\n-    assert (res == rec(i=100));\n+    auto rs = if (true) { rec(i=100) } else { rec(i=101) };\n+    assert (rs == rec(i=100));\n }\n \n fn test_tag() {\n     tag mood { happy; sad; }\n-    auto res = if (true) { happy } else { sad };\n-    assert (res == happy);\n+    auto rs = if (true) { happy } else { sad };\n+    assert (rs == happy);\n }\n \n fn main() { test_rec(); test_tag(); }\n\\ No newline at end of file"}, {"sha": "e40690248156effb8c5d74a3aa5c68bba0a28819", "filename": "src/test/run-pass/expr-if.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fexpr-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -5,50 +5,50 @@\n \n // Tests for if as expressions\n fn test_if() {\n-    let bool res = if (true) { true } else { false };\n-    assert (res);\n+    let bool rs = if (true) { true } else { false };\n+    assert (rs);\n }\n \n fn test_else() {\n-    let bool res = if (false) { false } else { true };\n-    assert (res);\n+    let bool rs = if (false) { false } else { true };\n+    assert (rs);\n }\n \n fn test_elseif1() {\n-    let bool res = if (true) { true } else if (true) { false } else { false };\n-    assert (res);\n+    let bool rs = if (true) { true } else if (true) { false } else { false };\n+    assert (rs);\n }\n \n fn test_elseif2() {\n-    let bool res =\n+    let bool rs =\n         if (false) { false } else if (true) { true } else { false };\n-    assert (res);\n+    assert (rs);\n }\n \n fn test_elseif3() {\n-    let bool res =\n+    let bool rs =\n         if (false) { false } else if (false) { false } else { true };\n-    assert (res);\n+    assert (rs);\n }\n \n fn test_inferrence() {\n-    auto res = if (true) { true } else { false };\n-    assert (res);\n+    auto rs = if (true) { true } else { false };\n+    assert (rs);\n }\n \n fn test_if_as_if_condition() {\n-    auto res1 =\n+    auto rs1 =\n         if (if (false) { false } else { true }) { true } else { false };\n-    assert (res1);\n-    auto res2 =\n+    assert (rs1);\n+    auto rs2 =\n         if (if (true) { false } else { true }) { false } else { true };\n-    assert (res2);\n+    assert (rs2);\n }\n \n fn test_if_as_block_result() {\n-    auto res =\n+    auto rs =\n         if (true) { if (false) { false } else { true } } else { false };\n-    assert (res);\n+    assert (rs);\n }\n \n fn main() {"}, {"sha": "26d253e1d407d73b950dd83822ae667a252bb7db", "filename": "src/test/run-pass/lib-getopts.rs", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Flib-getopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Flib-getopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-getopts.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -32,8 +32,8 @@ fn check_fail_type(opt::fail_ f, fail_type ft) {\n fn test_reqopt_long() {\n     auto args = [\"--test=20\"];\n     auto opts = [opt::reqopt(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (opt::opt_present(m, \"test\"));\n             assert (opt::opt_str(m, \"test\") == \"20\");\n@@ -45,8 +45,8 @@ fn test_reqopt_long() {\n fn test_reqopt_long_missing() {\n     auto args = [\"blah\"];\n     auto opts = [opt::reqopt(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, option_missing); }\n         case (_) { fail; }\n     }\n@@ -55,8 +55,8 @@ fn test_reqopt_long_missing() {\n fn test_reqopt_long_no_arg() {\n     auto args = [\"--test\"];\n     auto opts = [opt::reqopt(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, argument_missing); }\n         case (_) { fail; }\n     }\n@@ -65,8 +65,8 @@ fn test_reqopt_long_no_arg() {\n fn test_reqopt_long_multi() {\n     auto args = [\"--test=20\", \"--test=30\"];\n     auto opts = [opt::reqopt(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, option_duplicated); }\n         case (_) { fail; }\n     }\n@@ -75,8 +75,8 @@ fn test_reqopt_long_multi() {\n fn test_reqopt_short() {\n     auto args = [\"-t\", \"20\"];\n     auto opts = [opt::reqopt(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (opt::opt_present(m, \"t\"));\n             assert (opt::opt_str(m, \"t\") == \"20\");\n@@ -88,8 +88,8 @@ fn test_reqopt_short() {\n fn test_reqopt_short_missing() {\n     auto args = [\"blah\"];\n     auto opts = [opt::reqopt(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, option_missing); }\n         case (_) { fail; }\n     }\n@@ -98,8 +98,8 @@ fn test_reqopt_short_missing() {\n fn test_reqopt_short_no_arg() {\n     auto args = [\"-t\"];\n     auto opts = [opt::reqopt(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, argument_missing); }\n         case (_) { fail; }\n     }\n@@ -108,8 +108,8 @@ fn test_reqopt_short_no_arg() {\n fn test_reqopt_short_multi() {\n     auto args = [\"-t\", \"20\", \"-t\", \"30\"];\n     auto opts = [opt::reqopt(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, option_duplicated); }\n         case (_) { fail; }\n     }\n@@ -120,8 +120,8 @@ fn test_reqopt_short_multi() {\n fn test_optopt_long() {\n     auto args = [\"--test=20\"];\n     auto opts = [opt::optopt(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (opt::opt_present(m, \"test\"));\n             assert (opt::opt_str(m, \"test\") == \"20\");\n@@ -133,8 +133,8 @@ fn test_optopt_long() {\n fn test_optopt_long_missing() {\n     auto args = [\"blah\"];\n     auto opts = [opt::optopt(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) { assert (!opt::opt_present(m, \"test\")); }\n         case (_) { fail; }\n     }\n@@ -143,8 +143,8 @@ fn test_optopt_long_missing() {\n fn test_optopt_long_no_arg() {\n     auto args = [\"--test\"];\n     auto opts = [opt::optopt(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, argument_missing); }\n         case (_) { fail; }\n     }\n@@ -153,8 +153,8 @@ fn test_optopt_long_no_arg() {\n fn test_optopt_long_multi() {\n     auto args = [\"--test=20\", \"--test=30\"];\n     auto opts = [opt::optopt(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, option_duplicated); }\n         case (_) { fail; }\n     }\n@@ -163,8 +163,8 @@ fn test_optopt_long_multi() {\n fn test_optopt_short() {\n     auto args = [\"-t\", \"20\"];\n     auto opts = [opt::optopt(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (opt::opt_present(m, \"t\"));\n             assert (opt::opt_str(m, \"t\") == \"20\");\n@@ -176,8 +176,8 @@ fn test_optopt_short() {\n fn test_optopt_short_missing() {\n     auto args = [\"blah\"];\n     auto opts = [opt::optopt(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) { assert (!opt::opt_present(m, \"t\")); }\n         case (_) { fail; }\n     }\n@@ -186,8 +186,8 @@ fn test_optopt_short_missing() {\n fn test_optopt_short_no_arg() {\n     auto args = [\"-t\"];\n     auto opts = [opt::optopt(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, argument_missing); }\n         case (_) { fail; }\n     }\n@@ -196,8 +196,8 @@ fn test_optopt_short_no_arg() {\n fn test_optopt_short_multi() {\n     auto args = [\"-t\", \"20\", \"-t\", \"30\"];\n     auto opts = [opt::optopt(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, option_duplicated); }\n         case (_) { fail; }\n     }\n@@ -208,8 +208,8 @@ fn test_optopt_short_multi() {\n fn test_optflag_long() {\n     auto args = [\"--test\"];\n     auto opts = [opt::optflag(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) { assert (opt::opt_present(m, \"test\")); }\n         case (_) { fail; }\n     }\n@@ -218,8 +218,8 @@ fn test_optflag_long() {\n fn test_optflag_long_missing() {\n     auto args = [\"blah\"];\n     auto opts = [opt::optflag(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) { assert (!opt::opt_present(m, \"test\")); }\n         case (_) { fail; }\n     }\n@@ -228,8 +228,8 @@ fn test_optflag_long_missing() {\n fn test_optflag_long_arg() {\n     auto args = [\"--test=20\"];\n     auto opts = [opt::optflag(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) {\n             log_err opt::fail_str(f);\n             check_fail_type(f, unexpected_argument);\n@@ -241,8 +241,8 @@ fn test_optflag_long_arg() {\n fn test_optflag_long_multi() {\n     auto args = [\"--test\", \"--test\"];\n     auto opts = [opt::optflag(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, option_duplicated); }\n         case (_) { fail; }\n     }\n@@ -251,8 +251,8 @@ fn test_optflag_long_multi() {\n fn test_optflag_short() {\n     auto args = [\"-t\"];\n     auto opts = [opt::optflag(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) { assert (opt::opt_present(m, \"t\")); }\n         case (_) { fail; }\n     }\n@@ -261,8 +261,8 @@ fn test_optflag_short() {\n fn test_optflag_short_missing() {\n     auto args = [\"blah\"];\n     auto opts = [opt::optflag(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) { assert (!opt::opt_present(m, \"t\")); }\n         case (_) { fail; }\n     }\n@@ -271,8 +271,8 @@ fn test_optflag_short_missing() {\n fn test_optflag_short_arg() {\n     auto args = [\"-t\", \"20\"];\n     auto opts = [opt::optflag(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             // The next variable after the flag is just a free argument\n \n@@ -285,8 +285,8 @@ fn test_optflag_short_arg() {\n fn test_optflag_short_multi() {\n     auto args = [\"-t\", \"-t\"];\n     auto opts = [opt::optflag(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, option_duplicated); }\n         case (_) { fail; }\n     }\n@@ -297,8 +297,8 @@ fn test_optflag_short_multi() {\n fn test_optmulti_long() {\n     auto args = [\"--test=20\"];\n     auto opts = [opt::optmulti(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (opt::opt_present(m, \"test\"));\n             assert (opt::opt_str(m, \"test\") == \"20\");\n@@ -310,8 +310,8 @@ fn test_optmulti_long() {\n fn test_optmulti_long_missing() {\n     auto args = [\"blah\"];\n     auto opts = [opt::optmulti(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) { assert (!opt::opt_present(m, \"test\")); }\n         case (_) { fail; }\n     }\n@@ -320,8 +320,8 @@ fn test_optmulti_long_missing() {\n fn test_optmulti_long_no_arg() {\n     auto args = [\"--test\"];\n     auto opts = [opt::optmulti(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, argument_missing); }\n         case (_) { fail; }\n     }\n@@ -330,8 +330,8 @@ fn test_optmulti_long_no_arg() {\n fn test_optmulti_long_multi() {\n     auto args = [\"--test=20\", \"--test=30\"];\n     auto opts = [opt::optmulti(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (opt::opt_present(m, \"test\"));\n             assert (opt::opt_str(m, \"test\") == \"20\");\n@@ -345,8 +345,8 @@ fn test_optmulti_long_multi() {\n fn test_optmulti_short() {\n     auto args = [\"-t\", \"20\"];\n     auto opts = [opt::optmulti(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (opt::opt_present(m, \"t\"));\n             assert (opt::opt_str(m, \"t\") == \"20\");\n@@ -358,8 +358,8 @@ fn test_optmulti_short() {\n fn test_optmulti_short_missing() {\n     auto args = [\"blah\"];\n     auto opts = [opt::optmulti(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) { assert (!opt::opt_present(m, \"t\")); }\n         case (_) { fail; }\n     }\n@@ -368,8 +368,8 @@ fn test_optmulti_short_missing() {\n fn test_optmulti_short_no_arg() {\n     auto args = [\"-t\"];\n     auto opts = [opt::optmulti(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, argument_missing); }\n         case (_) { fail; }\n     }\n@@ -378,8 +378,8 @@ fn test_optmulti_short_no_arg() {\n fn test_optmulti_short_multi() {\n     auto args = [\"-t\", \"20\", \"-t\", \"30\"];\n     auto opts = [opt::optmulti(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (opt::opt_present(m, \"t\"));\n             assert (opt::opt_str(m, \"t\") == \"20\");\n@@ -393,8 +393,8 @@ fn test_optmulti_short_multi() {\n fn test_unrecognized_option_long() {\n     auto args = [\"--untest\"];\n     auto opts = [opt::optmulti(\"t\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, unrecognized_option); }\n         case (_) { fail; }\n     }\n@@ -403,8 +403,8 @@ fn test_unrecognized_option_long() {\n fn test_unrecognized_option_short() {\n     auto args = [\"-t\"];\n     auto opts = [opt::optmulti(\"test\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::failure(?f)) { check_fail_type(f, unrecognized_option); }\n         case (_) { fail; }\n     }\n@@ -417,8 +417,8 @@ fn test_combined() {\n     auto opts =\n         [opt::optopt(\"s\"), opt::optflag(\"flag\"), opt::reqopt(\"long\"),\n          opt::optflag(\"f\"), opt::optmulti(\"m\"), opt::optopt(\"notpresent\")];\n-    auto res = opt::getopts(args, opts);\n-    alt (res) {\n+    auto rs = opt::getopts(args, opts);\n+    alt (rs) {\n         case (opt::success(?m)) {\n             assert (m.free.(0) == \"prog\");\n             assert (m.free.(1) == \"free1\");"}, {"sha": "d09243e98e6acb581525565599f36238aab4c2a3", "filename": "src/test/run-pass/lib-list.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Flib-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Flib-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-list.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -16,24 +16,24 @@ fn test_from_vec() {\n fn test_foldl() {\n     auto l = from_vec([0, 1, 2, 3, 4]);\n     fn add(&int a, &uint b) -> uint { ret (a as uint) + b; }\n-    auto res = list::foldl(l, 0u, add);\n-    assert (res == 10u);\n+    auto rs = list::foldl(l, 0u, add);\n+    assert (rs == 10u);\n }\n \n fn test_find_success() {\n     auto l = from_vec([0, 1, 2]);\n     fn match(&int i) -> option::t[int] {\n         ret if (i == 2) { option::some(i) } else { option::none[int] };\n     }\n-    auto res = list::find(l, match);\n-    assert (res == option::some(2));\n+    auto rs = list::find(l, match);\n+    assert (rs == option::some(2));\n }\n \n fn test_find_fail() {\n     auto l = from_vec([0, 1, 2]);\n     fn match(&int i) -> option::t[int] { ret option::none[int]; }\n-    auto res = list::find(l, match);\n-    assert (res == option::none[int]);\n+    auto rs = list::find(l, match);\n+    assert (rs == option::none[int]);\n }\n \n fn test_has() {"}, {"sha": "bfb59453eb1f2f50d22949558f5b572f0ba540d8", "filename": "src/test/run-pass/lib-sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Flib-sha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Flib-sha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-sha1.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -13,9 +13,9 @@ fn main() {\n \n     fn a_million_letter_a() -> str {\n         auto i = 0;\n-        auto res = \"\";\n-        while (i < 100000) { res += \"aaaaaaaaaa\"; i += 1; }\n-        ret res;\n+        auto rs = \"\";\n+        while (i < 100000) { rs += \"aaaaaaaaaa\"; i += 1; }\n+        ret rs;\n     }\n     // Test messages from FIPS 180-1\n "}, {"sha": "0160f0f1d3ca0d208b95cb5e28e227fa6490cba3", "filename": "src/test/run-pass/lib-str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Flib-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Flib-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-str.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -100,15 +100,15 @@ fn test_slice() {\n     assert (str::eq(\"\", str::slice(\"abc\", 1u, 1u)));\n     fn a_million_letter_a() -> str {\n         auto i = 0;\n-        auto res = \"\";\n-        while (i < 100000) { res += \"aaaaaaaaaa\"; i += 1; }\n-        ret res;\n+        auto rs = \"\";\n+        while (i < 100000) { rs += \"aaaaaaaaaa\"; i += 1; }\n+        ret rs;\n     }\n     fn half_a_million_letter_a() -> str {\n         auto i = 0;\n-        auto res = \"\";\n-        while (i < 100000) { res += \"aaaaa\"; i += 1; }\n-        ret res;\n+        auto rs = \"\";\n+        while (i < 100000) { rs += \"aaaaa\"; i += 1; }\n+        ret rs;\n     }\n     assert (str::eq(half_a_million_letter_a(),\n                     str::slice(a_million_letter_a(), 0u, 500000u)));"}, {"sha": "c57f9e571cc1a31c12d7f81d76e8b808ed004e0c", "filename": "src/test/run-pass/obj-self-4.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fobj-self-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Fobj-self-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-4.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -15,12 +15,12 @@ fn main() {\n         // }\n         fn get() -> int { ret i; }\n     }\n-    let int res;\n+    let int rs;\n     auto o = foo(5);\n-    res = o.get();\n-    assert (res == 5);\n-    res = o.inc_by(3);\n-    assert (res == 8);\n-    res = o.get();\n-    assert (res == 8);\n+    rs = o.get();\n+    assert (rs == 5);\n+    rs = o.inc_by(3);\n+    assert (rs == 8);\n+    rs = o.get();\n+    assert (rs == 8);\n }\n\\ No newline at end of file"}, {"sha": "37fb22a32d7e262c7352f9ddd0849feaf92a37c2", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781a265b88f7fc3c8c406b327e8a548e742d6224/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=781a265b88f7fc3c8c406b327e8a548e742d6224", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn checktrue(bool res) -> bool { assert (res); ret true; }\n+fn checktrue(bool rs) -> bool { assert (rs); ret true; }\n \n fn main() { auto k = checktrue; evenk(42, k); oddk(45, k); }\n "}]}