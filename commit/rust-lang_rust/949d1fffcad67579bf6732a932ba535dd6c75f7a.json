{"sha": "949d1fffcad67579bf6732a932ba535dd6c75f7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OWQxZmZmY2FkNjc1NzliZjY3MzJhOTMyYmE1MzVkZDZjNzVmN2E=", "commit": {"author": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2015-02-17T18:00:58Z"}, "committer": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2015-02-21T22:52:58Z"}, "message": "Add cfgs to `liblibc` for NaCl targets.", "tree": {"sha": "4c5244f01c911e79ea9d572ea85e204618f9418f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c5244f01c911e79ea9d572ea85e204618f9418f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/949d1fffcad67579bf6732a932ba535dd6c75f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/949d1fffcad67579bf6732a932ba535dd6c75f7a", "html_url": "https://github.com/rust-lang/rust/commit/949d1fffcad67579bf6732a932ba535dd6c75f7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/949d1fffcad67579bf6732a932ba535dd6c75f7a/comments", "author": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b01a37ec38db9301239f0c0abcf3c695055b0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b01a37ec38db9301239f0c0abcf3c695055b0ff", "html_url": "https://github.com/rust-lang/rust/commit/2b01a37ec38db9301239f0c0abcf3c695055b0ff"}], "stats": {"total": 479, "additions": 241, "deletions": 238}, "files": [{"sha": "8d8f6a406f5d4e1a834961664061fbf4d263fa49", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 241, "deletions": 238, "changes": 479, "blob_url": "https://github.com/rust-lang/rust/blob/949d1fffcad67579bf6732a932ba535dd6c75f7a/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949d1fffcad67579bf6732a932ba535dd6c75f7a/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=949d1fffcad67579bf6732a932ba535dd6c75f7a", "patch": "@@ -76,6 +76,7 @@\n //! one from Berkeley after the lawsuits died down and the CSRG dissolved.\n \n #![allow(bad_style, raw_pointer_derive)]\n+#![cfg_attr(target_os = \"nacl\", allow(unused_imports))]\n #[cfg(feature = \"cargo-build\")] extern crate \"std\" as core;\n #[cfg(not(feature = \"cargo-build\"))] extern crate core;\n \n@@ -86,78 +87,33 @@\n // you can write more-platform-agnostic code if you stick to just these\n // symbols.\n \n-pub use types::common::c95::{FILE, c_void, fpos_t};\n-pub use types::common::c99::{int8_t, int16_t, int32_t, int64_t};\n-pub use types::common::c99::{uint8_t, uint16_t, uint32_t, uint64_t};\n-pub use types::common::posix88::{DIR, dirent_t};\n-pub use types::os::common::posix01::{timeval};\n-pub use types::os::common::bsd44::{addrinfo, in_addr, in6_addr, sockaddr_storage};\n-pub use types::os::common::bsd44::{ip_mreq, ip6_mreq, sockaddr, sockaddr_un};\n-pub use types::os::common::bsd44::{sa_family_t, sockaddr_in, sockaddr_in6, socklen_t};\n-pub use types::os::arch::c95::{c_char, c_double, c_float, c_int, c_uint};\n-pub use types::os::arch::c95::{c_long, c_short, c_uchar, c_ulong, wchar_t};\n-pub use types::os::arch::c95::{c_ushort, clock_t, ptrdiff_t, c_schar};\n-pub use types::os::arch::c95::{size_t, time_t, suseconds_t};\n-pub use types::os::arch::c99::{c_longlong, c_ulonglong};\n-pub use types::os::arch::c99::{intptr_t, uintptr_t};\n-pub use types::os::arch::c99::{intmax_t, uintmax_t};\n-pub use types::os::arch::posix88::{dev_t, ino_t, mode_t};\n-pub use types::os::arch::posix88::{off_t, pid_t, ssize_t};\n-\n-pub use consts::os::c95::{_IOFBF, _IOLBF, _IONBF, BUFSIZ, EOF};\n-pub use consts::os::c95::{EXIT_FAILURE, EXIT_SUCCESS};\n-pub use consts::os::c95::{FILENAME_MAX, FOPEN_MAX, L_tmpnam};\n-pub use consts::os::c95::{RAND_MAX, SEEK_CUR, SEEK_END};\n-pub use consts::os::c95::{SEEK_SET, TMP_MAX};\n-pub use consts::os::posix88::{F_OK, O_APPEND, O_CREAT, O_EXCL};\n-pub use consts::os::posix88::{O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n-pub use consts::os::posix88::{R_OK, S_IEXEC, S_IFBLK, S_IFCHR};\n-pub use consts::os::posix88::{S_IFDIR, S_IFIFO, S_IFMT, S_IFREG, S_IFLNK};\n-pub use consts::os::posix88::{S_IREAD, S_IRUSR, S_IRWXU, S_IWUSR};\n-pub use consts::os::posix88::{STDERR_FILENO, STDIN_FILENO, S_IXUSR};\n-pub use consts::os::posix88::{STDOUT_FILENO, W_OK, X_OK};\n-pub use consts::os::bsd44::{AF_INET, AF_INET6, SOCK_STREAM, SOCK_DGRAM, SOCK_RAW};\n-pub use consts::os::bsd44::{IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, TCP_NODELAY};\n-pub use consts::os::bsd44::{SOL_SOCKET, SO_KEEPALIVE, SO_ERROR};\n-pub use consts::os::bsd44::{SO_REUSEADDR, SO_BROADCAST, SHUT_WR, IP_MULTICAST_LOOP};\n-pub use consts::os::bsd44::{IP_ADD_MEMBERSHIP, IP_DROP_MEMBERSHIP};\n-pub use consts::os::bsd44::{IPV6_ADD_MEMBERSHIP, IPV6_DROP_MEMBERSHIP};\n-pub use consts::os::bsd44::{IP_MULTICAST_TTL, IP_TTL, IP_HDRINCL, SHUT_RD};\n-pub use consts::os::extra::{IPPROTO_RAW};\n-\n-pub use funcs::c95::ctype::{isalnum, isalpha, iscntrl, isdigit};\n-pub use funcs::c95::ctype::{islower, isprint, ispunct, isspace};\n-pub use funcs::c95::ctype::{isupper, isxdigit, tolower, toupper};\n-\n-pub use funcs::c95::stdio::{fclose, feof, ferror, fflush, fgetc};\n-pub use funcs::c95::stdio::{fgetpos, fgets, fopen, fputc, fputs};\n-pub use funcs::c95::stdio::{fread, freopen, fseek, fsetpos, ftell};\n-pub use funcs::c95::stdio::{fwrite, perror, puts, remove, rename, rewind};\n-pub use funcs::c95::stdio::{setbuf, setvbuf, tmpfile, ungetc};\n-\n-pub use funcs::c95::stdlib::{abs, atof, atoi, calloc, exit, _exit, atexit};\n-pub use funcs::c95::stdlib::{free, getenv, labs, malloc, rand};\n-pub use funcs::c95::stdlib::{realloc, srand, strtod, strtol};\n-pub use funcs::c95::stdlib::{strtoul, system};\n-\n-pub use funcs::c95::string::{memchr, memcmp};\n-pub use funcs::c95::string::{strcat, strchr, strcmp};\n-pub use funcs::c95::string::{strcoll, strcpy, strcspn, strerror};\n-pub use funcs::c95::string::{strlen, strncat, strncmp, strncpy};\n-pub use funcs::c95::string::{strpbrk, strrchr, strspn, strstr};\n-pub use funcs::c95::string::{strtok, strxfrm};\n-\n-pub use funcs::posix88::fcntl::{open, creat};\n-pub use funcs::posix88::stat_::{chmod, fstat, mkdir, stat};\n-pub use funcs::posix88::stdio::{fdopen, fileno, pclose, popen};\n-pub use funcs::posix88::unistd::{access, chdir, close, dup, dup2};\n-pub use funcs::posix88::unistd::{execv, execve, execvp, getcwd};\n-pub use funcs::posix88::unistd::{getpid, isatty, lseek, pipe, read};\n-pub use funcs::posix88::unistd::{rmdir, unlink, write};\n-\n-pub use funcs::bsd43::{socket, setsockopt, bind, send, recv, recvfrom};\n-pub use funcs::bsd43::{listen, sendto, accept, connect, getpeername, getsockname};\n-pub use funcs::bsd43::{shutdown};\n+pub use types::common::c95::*;\n+pub use types::common::c99::*;\n+pub use types::common::posix88::*;\n+pub use types::os::common::posix01::*;\n+pub use types::os::common::bsd44::*;\n+pub use types::os::arch::c95::*;\n+pub use types::os::arch::c99::*;\n+pub use types::os::arch::posix88::*;\n+pub use types::os::arch::posix01::*;\n+pub use types::os::arch::extra::*;\n+\n+pub use consts::os::c95::*;\n+pub use consts::os::posix88::*;\n+pub use consts::os::posix01::*;\n+pub use consts::os::bsd44::*;\n+pub use consts::os::extra::*;\n+\n+pub use funcs::c95::ctype::*;\n+pub use funcs::c95::stdio::*;\n+pub use funcs::c95::stdlib::*;\n+pub use funcs::c95::string::*;\n+pub use funcs::posix88::fcntl::*;\n+pub use funcs::posix88::stat_::*;\n+pub use funcs::posix88::stdio::*;\n+pub use funcs::posix88::unistd::*;\n+\n+pub use funcs::bsd43::*;\n \n // But we also reexport most everything\n // if you're interested in writing platform-specific code.\n@@ -169,149 +125,43 @@ pub use funcs::bsd43::{shutdown};\n //\n // So the following exports don't follow any particular plan.\n \n-#[cfg(unix)] pub use consts::os::sysconf::{_SC_PAGESIZE};\n-#[cfg(unix)] pub use consts::os::posix88::{PROT_READ, PROT_WRITE, PROT_EXEC};\n-#[cfg(unix)] pub use consts::os::posix88::{MAP_FIXED, MAP_FILE, MAP_ANON, MAP_PRIVATE, MAP_FAILED};\n-#[cfg(unix)] pub use consts::os::posix88::{EACCES, EBADF, EINVAL, ENODEV, ENOMEM};\n-#[cfg(unix)] pub use consts::os::posix88::{ECONNREFUSED, ECONNRESET, EPERM, EPIPE};\n-#[cfg(unix)] pub use consts::os::posix88::{ENOTCONN, ECONNABORTED, EADDRNOTAVAIL, EINTR};\n-#[cfg(unix)] pub use consts::os::posix88::{EADDRINUSE, ENOENT, EISDIR, EAGAIN, EWOULDBLOCK};\n-#[cfg(unix)] pub use consts::os::posix88::{ECANCELED, SIGINT, EINPROGRESS};\n-#[cfg(unix)] pub use consts::os::posix88::{ENOSYS, ENOTTY, ETIMEDOUT, EMFILE};\n-#[cfg(unix)] pub use consts::os::posix88::{SIGTERM, SIGKILL, SIGPIPE, PROT_NONE};\n-#[cfg(unix)] pub use consts::os::posix01::{SIG_IGN, F_GETFL, F_SETFL};\n-#[cfg(unix)] pub use consts::os::bsd44::{AF_UNIX};\n-#[cfg(unix)] pub use consts::os::extra::{O_NONBLOCK};\n-\n-#[cfg(unix)] pub use types::os::common::posix01::{pthread_t, timespec, timezone};\n-\n-#[cfg(unix)] pub use types::os::arch::posix88::{uid_t, gid_t};\n-#[cfg(unix)] pub use types::os::arch::posix01::{pthread_attr_t};\n-#[cfg(unix)] pub use types::os::arch::posix01::{stat, utimbuf};\n-#[cfg(unix)] pub use types::os::common::bsd44::{ifaddrs};\n-#[cfg(unix)] pub use funcs::posix88::unistd::{sysconf, setgid, setsid, setuid, pread, pwrite};\n-#[cfg(unix)] pub use funcs::posix88::unistd::{getgid, getuid, getsid};\n-#[cfg(unix)] pub use funcs::posix88::unistd::{_PC_NAME_MAX, utime, nanosleep, pathconf, link};\n-#[cfg(unix)] pub use funcs::posix88::unistd::{chown};\n-#[cfg(unix)] pub use funcs::posix88::mman::{mmap, munmap, mprotect};\n-#[cfg(unix)] pub use funcs::posix88::dirent::{opendir, readdir_r, closedir};\n-#[cfg(unix)] pub use funcs::posix88::fcntl::{fcntl};\n-#[cfg(unix)] pub use funcs::posix88::net::{if_nametoindex};\n-#[cfg(unix)] pub use funcs::posix01::stat_::{lstat};\n-#[cfg(unix)] pub use funcs::posix01::unistd::{fsync, ftruncate};\n-#[cfg(unix)] pub use funcs::posix01::unistd::{readlink, symlink};\n-#[cfg(unix)] pub use funcs::bsd43::{getifaddrs, freeifaddrs};\n-\n-#[cfg(windows)] pub use consts::os::c95::{WSAECONNREFUSED, WSAECONNRESET, WSAEACCES};\n-#[cfg(windows)] pub use consts::os::c95::{WSAEWOULDBLOCK, WSAENOTCONN, WSAECONNABORTED};\n-#[cfg(windows)] pub use consts::os::c95::{WSAEADDRNOTAVAIL, WSAEADDRINUSE, WSAEINTR};\n-#[cfg(windows)] pub use consts::os::c95::{WSAEINPROGRESS, WSAEINVAL, WSAEMFILE};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_INSUFFICIENT_BUFFER};\n-#[cfg(windows)] pub use consts::os::extra::{O_BINARY, O_NOINHERIT, PAGE_NOACCESS};\n-#[cfg(windows)] pub use consts::os::extra::{PAGE_READONLY, PAGE_READWRITE, PAGE_EXECUTE};\n-#[cfg(windows)] pub use consts::os::extra::{PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE};\n-#[cfg(windows)] pub use consts::os::extra::{MEM_COMMIT, MEM_RESERVE, MEM_RELEASE};\n-#[cfg(windows)] pub use consts::os::extra::{FILE_MAP_READ, FILE_MAP_WRITE, FILE_MAP_EXECUTE};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_ALREADY_EXISTS, ERROR_NO_DATA};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_FILE_NOT_FOUND, ERROR_INVALID_NAME};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_BROKEN_PIPE, ERROR_INVALID_FUNCTION};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_CALL_NOT_IMPLEMENTED};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_NOTHING_TO_TERMINATE};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_INVALID_HANDLE};\n-#[cfg(windows)] pub use consts::os::extra::{TRUE, FALSE, INFINITE};\n-#[cfg(windows)] pub use consts::os::extra::{PROCESS_TERMINATE, PROCESS_QUERY_INFORMATION};\n-#[cfg(windows)] pub use consts::os::extra::{STILL_ACTIVE, DETACHED_PROCESS};\n-#[cfg(windows)] pub use consts::os::extra::{CREATE_NEW_PROCESS_GROUP, CREATE_UNICODE_ENVIRONMENT};\n-#[cfg(windows)] pub use consts::os::extra::{FILE_BEGIN, FILE_END, FILE_CURRENT};\n-#[cfg(windows)] pub use consts::os::extra::{FILE_GENERIC_READ, FILE_GENERIC_WRITE};\n-#[cfg(windows)] pub use consts::os::extra::{FILE_SHARE_READ, FILE_SHARE_WRITE, FILE_SHARE_DELETE};\n-#[cfg(windows)] pub use consts::os::extra::{TRUNCATE_EXISTING, CREATE_ALWAYS, OPEN_EXISTING};\n-#[cfg(windows)] pub use consts::os::extra::{CREATE_NEW, FILE_APPEND_DATA, FILE_WRITE_DATA};\n-#[cfg(windows)] pub use consts::os::extra::{OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL};\n-#[cfg(windows)] pub use consts::os::extra::{FILE_FLAG_BACKUP_SEMANTICS, INVALID_HANDLE_VALUE};\n-#[cfg(windows)] pub use consts::os::extra::{MOVEFILE_REPLACE_EXISTING};\n-#[cfg(windows)] pub use consts::os::extra::{GENERIC_READ, GENERIC_WRITE};\n-#[cfg(windows)] pub use consts::os::extra::{VOLUME_NAME_DOS};\n-#[cfg(windows)] pub use consts::os::extra::{PIPE_ACCESS_DUPLEX, FILE_FLAG_FIRST_PIPE_INSTANCE};\n-#[cfg(windows)] pub use consts::os::extra::{FILE_FLAG_OVERLAPPED, PIPE_TYPE_BYTE};\n-#[cfg(windows)] pub use consts::os::extra::{PIPE_READMODE_BYTE, PIPE_WAIT};\n-#[cfg(windows)] pub use consts::os::extra::{PIPE_UNLIMITED_INSTANCES, ERROR_ACCESS_DENIED};\n-#[cfg(windows)] pub use consts::os::extra::{FILE_WRITE_ATTRIBUTES, FILE_READ_ATTRIBUTES};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_PIPE_BUSY, ERROR_IO_PENDING};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_PIPE_CONNECTED, WAIT_OBJECT_0};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_NOT_FOUND};\n-#[cfg(windows)] pub use consts::os::extra::{ERROR_OPERATION_ABORTED};\n-#[cfg(windows)] pub use consts::os::extra::{FIONBIO};\n-#[cfg(windows)] pub use types::os::common::bsd44::{SOCKET};\n-#[cfg(windows)] pub use types::os::common::posix01::{stat, utimbuf};\n-#[cfg(windows)] pub use types::os::arch::extra::{HANDLE, BOOL, LPSECURITY_ATTRIBUTES};\n-#[cfg(windows)] pub use types::os::arch::extra::{LPCSTR, WORD, DWORD, BYTE, FILETIME};\n-#[cfg(windows)] pub use types::os::arch::extra::{LARGE_INTEGER, LPVOID, LONG};\n-#[cfg(windows)] pub use types::os::arch::extra::{time64_t, OVERLAPPED, LPCWSTR};\n-#[cfg(windows)] pub use types::os::arch::extra::{LPOVERLAPPED, SIZE_T, LPDWORD};\n-#[cfg(windows)] pub use types::os::arch::extra::{SECURITY_ATTRIBUTES, WIN32_FIND_DATAW};\n-#[cfg(windows)] pub use funcs::c95::string::{wcslen};\n-#[cfg(windows)] pub use funcs::posix88::stat_::{wstat, wutime, wchmod, wrmdir};\n-#[cfg(windows)] pub use funcs::bsd43::{closesocket};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{GetCurrentDirectoryW, GetLastError};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{GetEnvironmentVariableW, SetEnvironmentVariableW};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{GetModuleFileNameW, SetCurrentDirectoryW};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{GetSystemInfo, VirtualAlloc, VirtualFree};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{CreateFileMappingW, MapViewOfFile};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{UnmapViewOfFile, CloseHandle};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{WaitForSingleObject, GetSystemTimeAsFileTime};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{QueryPerformanceCounter};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{QueryPerformanceFrequency};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{GetExitCodeProcess, TerminateProcess};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{ReadFile, WriteFile, SetFilePointerEx};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{SetEndOfFile, CreateFileW};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{CreateDirectoryW, FindFirstFileW};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{FindNextFileW, FindClose, DeleteFileW};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{CreateHardLinkW, CreateEventW};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{FlushFileBuffers, CreateNamedPipeW};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{SetNamedPipeHandleState, WaitNamedPipeW};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{GetOverlappedResult, ConnectNamedPipe};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{DisconnectNamedPipe, OpenProcess};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{MoveFileExW, VirtualProtect};\n-#[cfg(windows)] pub use funcs::extra::kernel32::{RemoveDirectoryW};\n-#[cfg(windows)] pub use funcs::extra::msvcrt::{get_osfhandle, open_osfhandle};\n-#[cfg(windows)] pub use funcs::extra::winsock::{ioctlsocket};\n-\n-#[cfg(any(target_os = \"linux\",\n-          target_os = \"android\",\n-          target_os = \"freebsd\",\n-          target_os = \"dragonfly\",\n-          target_os = \"bitrig\",\n-          target_os = \"openbsd\"))]\n-pub use consts::os::posix01::{CLOCK_REALTIME, CLOCK_MONOTONIC};\n-\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-pub use funcs::posix01::unistd::{fdatasync};\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-pub use types::os::arch::extra::{sockaddr_ll};\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-pub use consts::os::extra::{AF_PACKET};\n-\n-#[cfg(all(unix, not(any(target_os = \"freebsd\", target_os = \"bitrig\", target_os = \"openbsd\"))))]\n-pub use consts::os::extra::{MAP_STACK};\n-\n-#[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n-pub use consts::os::bsd44::{TCP_KEEPIDLE};\n-\n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-pub use consts::os::bsd44::{TCP_KEEPALIVE};\n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-pub use consts::os::extra::{F_FULLFSYNC};\n-\n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-pub use types::os::arch::extra::{mach_timebase_info};\n-\n-\n-#[cfg(not(windows))]\n+#[cfg(unix)] pub use consts::os::sysconf::*;\n+\n+#[cfg(unix)] pub use funcs::posix88::mman::*;\n+#[cfg(unix)] pub use funcs::posix88::dirent::*;\n+#[cfg(unix)] pub use funcs::posix88::net::*;\n+#[cfg(unix)] pub use funcs::posix01::stat_::*;\n+#[cfg(unix)] pub use funcs::posix01::unistd::*;\n+\n+\n+#[cfg(windows)] pub use funcs::extra::kernel32::*;\n+#[cfg(windows)] pub use funcs::extra::winsock::*;\n+#[cfg(windows)] pub use funcs::extra::msvcrt::*;\n+\n+// On NaCl, these libraries are static. Thus it would be a Bad Idea to link them\n+// in when creating a test crate.\n+#[cfg(not(any(windows, all(target_os = \"nacl\", test))))]\n #[link(name = \"c\")]\n #[link(name = \"m\")]\n extern {}\n \n+// libnacl provides functions that require a trip through the IRT to work.\n+// ie: _exit, mmap, nanosleep, etc. Anything that would otherwise require a trip\n+// to the kernel.\n+#[cfg(all(target_os = \"nacl\", not(feature = \"cargo-build\"), not(test)))]\n+#[link(name = \"nacl\", kind = \"static\")]\n+extern {}\n+\n+// pnaclmm provides a number of functions that the toolchain's Clang emits calls\n+// to when codegening atomic ops. All the functions within wrap various atomic\n+// operations.\n+// Yes, it could be linked by rustc explicitly, however by linking it here\n+// instead we save a bit of time where bins are involved (by not running the\n+// optimizations on the whole pnaclmm foreach binary built).\n+#[cfg(all(target_os = \"nacl\", not(feature = \"cargo-build\"), not(test)))]\n+#[link(name = \"pnaclmm\", kind = \"static\")]\n+extern {}\n+\n pub mod types {\n \n     // Types tend to vary *per architecture* so we pull their definitions out\n@@ -362,15 +212,18 @@ pub mod types {\n \n     // Standard types that are scalar but vary by OS and arch.\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"nacl\"))]\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n                 use types::common::c95::{c_void};\n                 use types::os::arch::c95::{c_char, c_ulong, size_t,\n                                                  time_t, suseconds_t, c_long};\n \n+                #[cfg(not(target_os = \"nacl\"))]\n                 pub type pthread_t = c_ulong;\n+                #[cfg(target_os = \"nacl\")]\n+                pub type pthread_t = *mut c_void;\n \n                 #[repr(C)]\n                 #[derive(Copy)] pub struct glob_t {\n@@ -467,10 +320,10 @@ pub mod types {\n                     #[cfg(target_os = \"linux\")]\n                     pub ai_canonname: *mut c_char,\n \n-                    #[cfg(target_os = \"android\")]\n+                    #[cfg(any(target_os = \"android\", target_os = \"nacl\"))]\n                     pub ai_canonname: *mut c_char,\n \n-                    #[cfg(target_os = \"android\")]\n+                    #[cfg(any(target_os = \"android\", target_os = \"nacl\"))]\n                     pub ai_addr: *mut sockaddr,\n \n                     pub ai_next: *mut addrinfo,\n@@ -499,7 +352,8 @@ pub mod types {\n                   target_arch = \"arm\",\n                   target_arch = \"mips\",\n                   target_arch = \"mipsel\",\n-                  target_arch = \"powerpc\"))]\n+                  target_arch = \"powerpc\",\n+                  target_arch = \"le32\"))]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -531,7 +385,8 @@ pub mod types {\n             #[cfg(any(target_arch = \"x86\",\n                       target_arch = \"mips\",\n                       target_arch = \"mipsel\",\n-                      target_arch = \"powerpc\"))]\n+                      target_arch = \"powerpc\",\n+                      target_arch = \"le32\"))]\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u64;\n@@ -556,6 +411,7 @@ pub mod types {\n                 pub type ssize_t = i32;\n             }\n             #[cfg(any(target_arch = \"x86\",\n+                      target_arch = \"le32\",\n                       target_arch = \"powerpc\"))]\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_short, c_long, time_t};\n@@ -2480,7 +2336,7 @@ pub mod consts {\n             pub const SHUT_RDWR: c_int = 2;\n         }\n         pub mod extra {\n-            use SOCKET;\n+            use types::os::common::bsd44::SOCKET;\n             use types::os::arch::c95::{c_int, c_long};\n             use types::os::arch::extra::{WORD, DWORD, BOOL, HANDLE};\n \n@@ -2715,7 +2571,7 @@ pub mod consts {\n     }\n \n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"nacl\"))]\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -2742,6 +2598,7 @@ pub mod consts {\n                   target_arch = \"x86_64\",\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n+                  target_arch = \"le32\",\n                   target_arch = \"powerpc\"))]\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n@@ -3165,6 +3022,7 @@ pub mod consts {\n \n             pub const EDQUOT: c_int = 1133;\n         }\n+        #[cfg(not(target_os = \"nacl\"))]\n         pub mod posix01 {\n             use types::os::arch::c95::{c_int, size_t};\n \n@@ -3175,7 +3033,6 @@ pub mod consts {\n             pub const F_SETFL : c_int = 4;\n \n             pub const SIGTRAP : c_int = 5;\n-            pub const SIGPIPE: c_int = 13;\n             pub const SIG_IGN: size_t = 1;\n \n             pub const GLOB_ERR      : c_int = 1 << 0;\n@@ -3247,12 +3104,81 @@ pub mod consts {\n             pub const CLOCK_REALTIME: c_int = 0;\n             pub const CLOCK_MONOTONIC: c_int = 1;\n         }\n+        #[cfg(target_os = \"nacl\")]\n+        pub mod posix01 {\n+            use types::os::arch::c95::{c_int, size_t};\n+\n+            pub const F_DUPFD : c_int = 0;\n+            pub const F_GETFD : c_int = 1;\n+            pub const F_SETFD : c_int = 2;\n+            pub const F_GETFL : c_int = 3;\n+            pub const F_SETFL : c_int = 4;\n+\n+            pub const SIGTRAP : c_int = 5;\n+            pub const SIG_IGN: size_t = 1;\n+\n+            pub const GLOB_ERR      : c_int = 1 << 0;\n+            pub const GLOB_MARK     : c_int = 1 << 1;\n+            pub const GLOB_NOSORT   : c_int = 1 << 2;\n+            pub const GLOB_DOOFFS   : c_int = 1 << 3;\n+            pub const GLOB_NOCHECK  : c_int = 1 << 4;\n+            pub const GLOB_APPEND   : c_int = 1 << 5;\n+            pub const GLOB_NOESCAPE : c_int = 1 << 6;\n+\n+            pub const GLOB_NOSPACE  : c_int = 1;\n+            pub const GLOB_ABORTED  : c_int = 2;\n+            pub const GLOB_NOMATCH  : c_int = 3;\n+\n+            pub const POSIX_MADV_NORMAL : c_int = 0;\n+            pub const POSIX_MADV_RANDOM : c_int = 1;\n+            pub const POSIX_MADV_SEQUENTIAL : c_int = 2;\n+            pub const POSIX_MADV_WILLNEED : c_int = 3;\n+            pub const POSIX_MADV_DONTNEED : c_int = 4;\n+\n+            pub const _SC_MQ_PRIO_MAX : c_int = 28;\n+            pub const _SC_IOV_MAX : c_int = 60;\n+            pub const _SC_GETGR_R_SIZE_MAX : c_int = 69;\n+            pub const _SC_GETPW_R_SIZE_MAX : c_int = 70;\n+            pub const _SC_LOGIN_NAME_MAX : c_int = 71;\n+            pub const _SC_TTY_NAME_MAX : c_int = 72;\n+            pub const _SC_THREADS : c_int = 67;\n+            pub const _SC_THREAD_SAFE_FUNCTIONS : c_int = 68;\n+            pub const _SC_THREAD_DESTRUCTOR_ITERATIONS : c_int = 73;\n+            pub const _SC_THREAD_KEYS_MAX : c_int = 74;\n+            pub const _SC_THREAD_STACK_MIN : c_int = 75;\n+            pub const _SC_THREAD_THREADS_MAX : c_int = 76;\n+            pub const _SC_THREAD_ATTR_STACKADDR : c_int = 77;\n+            pub const _SC_THREAD_ATTR_STACKSIZE : c_int = 78;\n+            pub const _SC_THREAD_PRIORITY_SCHEDULING : c_int = 79;\n+            pub const _SC_THREAD_PRIO_INHERIT : c_int = 80;\n+            pub const _SC_THREAD_PRIO_PROTECT : c_int = 81;\n+            pub const _SC_THREAD_PROCESS_SHARED : c_int = 82;\n+            pub const _SC_ATEXIT_MAX : c_int = 87;\n+            pub const _SC_XOPEN_VERSION : c_int = 89;\n+            pub const _SC_XOPEN_XCU_VERSION : c_int = 90;\n+            pub const _SC_XOPEN_UNIX : c_int = 91;\n+            pub const _SC_XOPEN_CRYPT : c_int = 92;\n+            pub const _SC_XOPEN_ENH_I18N : c_int = 93;\n+            pub const _SC_XOPEN_SHM : c_int = 94;\n+            pub const _SC_XOPEN_LEGACY : c_int = 129;\n+            pub const _SC_XOPEN_REALTIME : c_int = 130;\n+            pub const _SC_XOPEN_REALTIME_THREADS : c_int = 131;\n+\n+            pub const PTHREAD_CREATE_JOINABLE: c_int = 1;\n+            pub const PTHREAD_CREATE_DETACHED: c_int = 0;\n+\n+            pub const PTHREAD_STACK_MIN: size_t = 1024;\n+\n+            pub const CLOCK_REALTIME: c_int = 0;\n+            pub const CLOCK_MONOTONIC: c_int = 1;\n+        }\n         pub mod posix08 {\n         }\n         #[cfg(any(target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n                   target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n+                  target_arch = \"le32\",\n                   target_arch = \"powerpc\"))]\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n@@ -3350,6 +3276,7 @@ pub mod consts {\n                   target_arch = \"x86_64\",\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\",\n+                  target_arch = \"le32\",\n                   target_arch = \"powerpc\"))]\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n@@ -3465,6 +3392,14 @@ pub mod consts {\n             pub const _SC_XBS5_ILP32_OFFBIG : c_int = 126;\n             pub const _SC_XBS5_LPBIG_OFFBIG : c_int = 128;\n         }\n+        #[cfg(target_os = \"nacl\")]\n+        pub mod sysconf {\n+            use types::os::arch::c95::c_int;\n+\n+            pub static _SC_SENDMSG_MAX_SIZE : c_int = 0;\n+            pub static _SC_NPROCESSORS_ONLN : c_int = 1;\n+            pub static _SC_PAGESIZE : c_int = 2;\n+        }\n         #[cfg(target_os = \"android\")]\n         pub mod sysconf {\n             use types::os::arch::c95::c_int;\n@@ -3706,7 +3641,6 @@ pub mod consts {\n             pub const F_SETFL : c_int = 4;\n \n             pub const SIGTRAP : c_int = 5;\n-            pub const SIGPIPE: c_int = 13;\n             pub const SIG_IGN: size_t = 1;\n \n             pub const GLOB_APPEND   : c_int = 0x0001;\n@@ -4113,7 +4047,6 @@ pub mod consts {\n             pub const F_DUPFD_CLOEXEC : c_int = 10;\n \n             pub const SIGTRAP : c_int = 5;\n-            pub const SIGPIPE: c_int = 13;\n             pub const SIG_IGN: size_t = 1;\n \n             pub const GLOB_APPEND   : c_int = 0x0001;\n@@ -4504,7 +4437,6 @@ pub mod consts {\n             pub const F_SETFL : c_int = 4;\n \n             pub const SIGTRAP : c_int = 5;\n-            pub const SIGPIPE: c_int = 13;\n             pub const SIG_IGN: size_t = 1;\n \n             pub const GLOB_APPEND   : c_int = 0x0001;\n@@ -5009,7 +4941,8 @@ pub mod funcs {\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"openbsd\",\n+              target_os = \"nacl\"))]\n     pub mod posix88 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n@@ -5026,14 +4959,16 @@ pub mod funcs {\n                           target_os = \"bitrig\",\n                           target_os = \"openbsd\",\n                           target_os = \"android\",\n-                          target_os = \"ios\"))]\n+                          target_os = \"ios\",\n+                          target_os = \"nacl\"))]\n                 pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n                 #[link_name = \"fstat64\"]\n                 pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n                 pub fn mkdir(path: *const c_char, mode: mode_t) -> c_int;\n+                #[cfg(not(target_os = \"nacl\"))]\n                 pub fn mkfifo(path: *const c_char, mode: mode_t) -> c_int;\n \n                 #[cfg(any(target_os = \"linux\",\n@@ -5042,7 +4977,8 @@ pub mod funcs {\n                           target_os = \"bitrig\",\n                           target_os = \"openbsd\",\n                           target_os = \"android\",\n-                          target_os = \"ios\"))]\n+                          target_os = \"ios\",\n+                          target_os = \"nacl\"))]\n                 pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n@@ -5114,6 +5050,7 @@ pub mod funcs {\n \n             pub const _PC_NAME_MAX: c_int = 4;\n \n+            #[cfg(not(target_os = \"nacl\"))]\n             extern {\n                 pub fn access(path: *const c_char, amode: c_int) -> c_int;\n                 pub fn alarm(seconds: c_uint) -> c_uint;\n@@ -5135,7 +5072,7 @@ pub mod funcs {\n                 pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n                 pub fn getegid() -> gid_t;\n                 pub fn geteuid() -> uid_t;\n-                pub fn getgid() -> gid_t ;\n+                pub fn getgid() -> gid_t;\n                 pub fn getgroups(ngroups_max: c_int, groups: *mut gid_t)\n                                  -> c_int;\n                 pub fn getlogin() -> *mut c_char;\n@@ -5176,6 +5113,57 @@ pub mod funcs {\n                               offset: off_t) -> ssize_t;\n                 pub fn utime(file: *const c_char, buf: *const utimbuf) -> c_int;\n             }\n+            #[cfg(target_os = \"nacl\")]\n+            extern {\n+                pub fn access(path: *const c_char, amode: c_int) -> c_int;\n+                pub fn chdir(dir: *const c_char) -> c_int;\n+                pub fn chown(path: *const c_char, uid: uid_t,\n+                             gid: gid_t) -> c_int;\n+                pub fn close(fd: c_int) -> c_int;\n+                pub fn dup(fd: c_int) -> c_int;\n+                pub fn dup2(src: c_int, dst: c_int) -> c_int;\n+                pub fn execv(prog: *const c_char,\n+                             argv: *mut *const c_char) -> c_int;\n+                pub fn execve(prog: *const c_char, argv: *mut *const c_char,\n+                              envp: *mut *const c_char)\n+                              -> c_int;\n+                pub fn execvp(c: *const c_char,\n+                              argv: *mut *const c_char) -> c_int;\n+                pub fn fork() -> pid_t;\n+                pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n+                pub fn getegid() -> gid_t;\n+                pub fn geteuid() -> uid_t;\n+                pub fn getgid() -> gid_t;\n+                pub fn getlogin() -> *mut c_char;\n+                pub fn getopt(argc: c_int, argv: *mut *const c_char,\n+                              optstr: *const c_char) -> c_int;\n+                pub fn getuid() -> uid_t;\n+                pub fn getsid(pid: pid_t) -> pid_t;\n+                pub fn isatty(fd: c_int) -> c_int;\n+                pub fn link(src: *const c_char, dst: *const c_char) -> c_int;\n+                pub fn lseek(fd: c_int, offset: off_t, whence: c_int)\n+                             -> off_t;\n+                pub fn pipe(fds: *mut c_int) -> c_int;\n+                pub fn read(fd: c_int, buf: *mut c_void, count: size_t)\n+                            -> ssize_t;\n+                pub fn rmdir(path: *const c_char) -> c_int;\n+                pub fn setgid(gid: gid_t) -> c_int;\n+                pub fn setuid(uid: uid_t) -> c_int;\n+                pub fn sleep(secs: c_uint) -> c_uint;\n+                pub fn usleep(secs: c_uint) -> c_int;\n+                pub fn nanosleep(rqtp: *const timespec,\n+                                 rmtp: *mut timespec) -> c_int;\n+                pub fn sysconf(name: c_int) -> c_long;\n+                pub fn ttyname(fd: c_int) -> *mut c_char;\n+                pub fn unlink(c: *const c_char) -> c_int;\n+                pub fn write(fd: c_int, buf: *const c_void, count: size_t)\n+                             -> ssize_t;\n+                pub fn pread(fd: c_int, buf: *mut c_void, count: size_t,\n+                             offset: off_t) -> ssize_t;\n+                pub fn pwrite(fd: c_int, buf: *const c_void, count: size_t,\n+                              offset: off_t) -> ssize_t;\n+                pub fn utime(file: *const c_char, buf: *const utimbuf) -> c_int;\n+            }\n         }\n \n         pub mod signal {\n@@ -5192,12 +5180,24 @@ pub mod funcs {\n             use types::os::arch::c95::{size_t, c_int, c_char};\n             use types::os::arch::posix88::{mode_t, off_t};\n \n+            #[cfg(not(target_os = \"nacl\"))]\n             extern {\n                 pub fn mlock(addr: *const c_void, len: size_t) -> c_int;\n                 pub fn munlock(addr: *const c_void, len: size_t) -> c_int;\n                 pub fn mlockall(flags: c_int) -> c_int;\n                 pub fn munlockall() -> c_int;\n \n+                pub fn mprotect(addr: *mut c_void, len: size_t, prot: c_int)\n+                                -> c_int;\n+\n+                pub fn msync(addr: *mut c_void, len: size_t, flags: c_int)\n+                             -> c_int;\n+                pub fn shm_open(name: *const c_char, oflag: c_int, mode: mode_t)\n+                                -> c_int;\n+                pub fn shm_unlink(name: *const c_char) -> c_int;\n+            }\n+\n+            extern {\n                 pub fn mmap(addr: *mut c_void,\n                             len: size_t,\n                             prot: c_int,\n@@ -5207,14 +5207,6 @@ pub mod funcs {\n                             -> *mut c_void;\n                 pub fn munmap(addr: *mut c_void, len: size_t) -> c_int;\n \n-                pub fn mprotect(addr: *mut c_void, len: size_t, prot: c_int)\n-                                -> c_int;\n-\n-                pub fn msync(addr: *mut c_void, len: size_t, flags: c_int)\n-                             -> c_int;\n-                pub fn shm_open(name: *const c_char, oflag: c_int, mode: mode_t)\n-                                -> c_int;\n-                pub fn shm_unlink(name: *const c_char) -> c_int;\n             }\n         }\n \n@@ -5235,7 +5227,8 @@ pub mod funcs {\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"openbsd\",\n+              target_os = \"nacl\"))]\n     pub mod posix01 {\n         pub mod stat_ {\n             use types::os::arch::c95::{c_char, c_int};\n@@ -5248,7 +5241,8 @@ pub mod funcs {\n                           target_os = \"bitrig\",\n                           target_os = \"openbsd\",\n                           target_os = \"android\",\n-                          target_os = \"ios\"))]\n+                          target_os = \"ios\",\n+                          target_os = \"nacl\"))]\n                 pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n@@ -5320,6 +5314,7 @@ pub mod funcs {\n             use types::common::c95::{c_void};\n             use types::os::arch::c95::{c_int, size_t};\n \n+            #[cfg(not(target_os = \"nacl\"))]\n             extern {\n                 pub fn posix_madvise(addr: *mut c_void,\n                                      len: size_t,\n@@ -5356,7 +5351,8 @@ pub mod funcs {\n               target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"openbsd\",\n+              target_os = \"nacl\"))]\n     pub mod posix08 {\n         pub mod unistd {\n         }\n@@ -5494,6 +5490,13 @@ pub mod funcs {\n         }\n     }\n \n+    #[cfg(target_os = \"nacl\")]\n+    pub mod bsd44 {\n+        use types::os::arch::c95::c_int;\n+        extern {\n+            pub fn getdtablesize() -> c_int;\n+        }\n+    }\n \n     #[cfg(target_os = \"windows\")]\n     pub mod bsd44 {\n@@ -5516,7 +5519,7 @@ pub mod funcs {\n     pub mod extra {\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"nacl\"))]\n     pub mod extra {\n     }\n "}]}