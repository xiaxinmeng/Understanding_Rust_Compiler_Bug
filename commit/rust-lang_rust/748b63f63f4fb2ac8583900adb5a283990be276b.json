{"sha": "748b63f63f4fb2ac8583900adb5a283990be276b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OGI2M2Y2M2Y0ZmIyYWM4NTgzOTAwYWRiNWEyODM5OTBiZTI3NmI=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-13T04:43:27Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-13T09:56:10Z"}, "message": "(core::str) add find_chars and b2c_pos functions", "tree": {"sha": "1b0c34f288b546376ee1cd5fb57d6b127a41c74d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b0c34f288b546376ee1cd5fb57d6b127a41c74d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748b63f63f4fb2ac8583900adb5a283990be276b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748b63f63f4fb2ac8583900adb5a283990be276b", "html_url": "https://github.com/rust-lang/rust/commit/748b63f63f4fb2ac8583900adb5a283990be276b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748b63f63f4fb2ac8583900adb5a283990be276b/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e61fe2eeaff507ed409c432988aed40a9fe9c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e61fe2eeaff507ed409c432988aed40a9fe9c63", "html_url": "https://github.com/rust-lang/rust/commit/0e61fe2eeaff507ed409c432988aed40a9fe9c63"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "93a2f37c7383d6f90656a33c01b3df12ca089509", "filename": "src/libcore/str.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/748b63f63f4fb2ac8583900adb5a283990be276b/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748b63f63f4fb2ac8583900adb5a283990be276b/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=748b63f63f4fb2ac8583900adb5a283990be276b", "patch": "@@ -908,6 +908,39 @@ fn find(haystack: str, needle: str) -> int {\n     ret -1;\n }\n \n+// Function: find_chars\n+//\n+// Find the character position of the first instance of the substring,\n+// or return option::none\n+//\n+// FIXME: rename find_chars -> find,\n+//               find -> find_bytes\n+fn find_chars(hay: str, pin: str) -> option<uint> {\n+   alt find(hay, pin) {\n+      -1 { ret option::none; }\n+       n { ret option::some(b2c_pos(hay, n as uint)); }\n+   }\n+}\n+\n+// Function: b2c_pos\n+//\n+// Convert a byte position into a char position\n+// within a given string\n+fn b2c_pos(ss: str, bpos: uint) -> uint {\n+   assert bpos < len_bytes(ss);\n+\n+   let ii = 0u;\n+   let cpos = 0u;\n+\n+   while ii < bpos {\n+      let sz = utf8_char_width(ss[ii]);\n+      ii += sz;\n+      cpos += 1u;\n+   }\n+\n+   ret cpos;\n+}\n+\n /*\n Function: contains\n \n@@ -1718,6 +1751,23 @@ mod tests {\n         assert (find(data, \"\u0e44\u0e17\u534e\") == -1);\n     }\n \n+    #[test]\n+    fn test_find_chars() {\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert (find_chars(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some(0u));\n+        assert (find_chars(data, \"\u0e30\u0e40\")   == option::some(2u));\n+        assert (find_chars(data, \"\u4e2d\u534e\") == option::some(9u));\n+        assert (find_chars(data, \"\u0e44\u0e17\u534e\") == option::none);\n+    }\n+\n+    #[test]\n+    fn test_b2c_pos() {\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert 0u == b2c_pos(data, 0u);\n+        assert 2u == b2c_pos(data, 6u);\n+        assert 9u == b2c_pos(data, 27u);\n+    }\n+\n     #[test]\n     fn test_substr() {\n         fn t(a: str, b: str, start: int) {"}]}