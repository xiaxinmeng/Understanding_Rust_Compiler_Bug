{"sha": "b21759f5509477522a208b27bec5822d89f7c6b8", "node_id": "C_kwDOAAsO6NoAKGIyMTc1OWY1NTA5NDc3NTIyYTIwOGIyN2JlYzU4MjJkODlmN2M2Yjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-24T01:09:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-24T01:09:11Z"}, "message": "Auto merge of #96281 - SparrowLii:const_prop, r=wesleywiser\n\nOptimize `const_prop` mir-opt by accessing `local_decls` through `ecx`\n\nFrom the FIXME in the impl of `ConstPropagator`. Accessing `local_decls` and `scource_scopes` from `ecx` can reduce `clone` calls and save compile time.\nBesides, according to #96213 , the FIXME about writing `layouts` to `ecx` in advance can also be removed.", "tree": {"sha": "8f157838ac06aaca7b633812c3bd648adbd315ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f157838ac06aaca7b633812c3bd648adbd315ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21759f5509477522a208b27bec5822d89f7c6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21759f5509477522a208b27bec5822d89f7c6b8", "html_url": "https://github.com/rust-lang/rust/commit/b21759f5509477522a208b27bec5822d89f7c6b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21759f5509477522a208b27bec5822d89f7c6b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "143eaa8d441641251ab41ed73deaba0d8d0cf4a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/143eaa8d441641251ab41ed73deaba0d8d0cf4a5", "html_url": "https://github.com/rust-lang/rust/commit/143eaa8d441641251ab41ed73deaba0d8d0cf4a5"}, {"sha": "db23e773e326edccf38d8ddfd42310fc169b861d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db23e773e326edccf38d8ddfd42310fc169b861d", "html_url": "https://github.com/rust-lang/rust/commit/db23e773e326edccf38d8ddfd42310fc169b861d"}], "stats": {"total": 40, "additions": 11, "deletions": 29}, "files": [{"sha": "691f4fb0e54259a29e5532a8f154274d76e59cc8", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b21759f5509477522a208b27bec5822d89f7c6b8/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21759f5509477522a208b27bec5822d89f7c6b8/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=b21759f5509477522a208b27bec5822d89f7c6b8", "patch": "@@ -313,9 +313,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n-    // FIXME(eddyb) avoid cloning this field more than once,\n-    // by accessing it through `ecx` instead.\n-    local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+    local_decls: &'mir IndexVec<Local, LocalDecl<'tcx>>,\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n@@ -361,10 +359,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let substs = &InternalSubsts::identity_for_item(tcx, def_id);\n         let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n-        let span = tcx.def_span(def_id);\n-        // FIXME: `CanConstProp::check` computes the layout of all locals, return those layouts\n-        // so we can write them to `ecx.frame_mut().locals.layout, reducing the duplication in\n-        // `layout_of` query invocations.\n         let can_const_prop = CanConstProp::check(tcx, param_env, body);\n         let mut only_propagate_inside_block_locals = BitSet::new_empty(can_const_prop.len());\n         for (l, mode) in can_const_prop.iter_enumerated() {\n@@ -374,7 +368,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n         let mut ecx = InterpCx::new(\n             tcx,\n-            span,\n+            tcx.def_span(def_id),\n             param_env,\n             ConstPropMachine::new(only_propagate_inside_block_locals, can_const_prop),\n         );\n@@ -405,10 +399,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             ecx,\n             tcx,\n             param_env,\n-            // FIXME(eddyb) avoid cloning this field more than once,\n-            // by accessing it through `ecx` instead.\n-            //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n-            local_decls: body.local_decls.clone(),\n+            local_decls: &dummy_body.local_decls,\n             source_info: None,\n         }\n     }\n@@ -511,7 +502,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let r = r?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!\n-            let left_ty = left.ty(&self.local_decls, self.tcx);\n+            let left_ty = left.ty(self.local_decls, self.tcx);\n             let left_size = self.ecx.layout_of(left_ty).ok()?.size;\n             let right_size = r.layout.size;\n             let r_bits = r.to_scalar().ok();"}, {"sha": "4945c10c9aaa900aa35f826435a2dd7f083ebd85", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b21759f5509477522a208b27bec5822d89f7c6b8/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21759f5509477522a208b27bec5822d89f7c6b8/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=b21759f5509477522a208b27bec5822d89f7c6b8", "patch": "@@ -308,10 +308,8 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n-    // FIXME(eddyb) avoid cloning these two fields more than once,\n-    // by accessing them through `ecx` instead.\n-    source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,\n-    local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+    source_scopes: &'mir IndexVec<SourceScope, SourceScopeData<'tcx>>,\n+    local_decls: &'mir IndexVec<Local, LocalDecl<'tcx>>,\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,\n@@ -357,10 +355,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let substs = &InternalSubsts::identity_for_item(tcx, def_id);\n         let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n-        let span = tcx.def_span(def_id);\n-        // FIXME: `CanConstProp::check` computes the layout of all locals, return those layouts\n-        // so we can write them to `ecx.frame_mut().locals.layout, reducing the duplication in\n-        // `layout_of` query invocations.\n         let can_const_prop = CanConstProp::check(tcx, param_env, body);\n         let mut only_propagate_inside_block_locals = BitSet::new_empty(can_const_prop.len());\n         for (l, mode) in can_const_prop.iter_enumerated() {\n@@ -370,7 +364,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n         let mut ecx = InterpCx::new(\n             tcx,\n-            span,\n+            tcx.def_span(def_id),\n             param_env,\n             ConstPropMachine::new(only_propagate_inside_block_locals, can_const_prop),\n         );\n@@ -401,11 +395,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             ecx,\n             tcx,\n             param_env,\n-            // FIXME(eddyb) avoid cloning these two fields more than once,\n-            // by accessing them through `ecx` instead.\n-            source_scopes: body.source_scopes.clone(),\n-            //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n-            local_decls: body.local_decls.clone(),\n+            source_scopes: &dummy_body.source_scopes,\n+            local_decls: &dummy_body.local_decls,\n             source_info: None,\n         }\n     }\n@@ -435,7 +426,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n-        source_info.scope.lint_root(&self.source_scopes)\n+        source_info.scope.lint_root(self.source_scopes)\n     }\n \n     fn use_ecx<F, T>(&mut self, f: F) -> Option<T>\n@@ -572,7 +563,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let r = r?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!\n-            let left_ty = left.ty(&self.local_decls, self.tcx);\n+            let left_ty = left.ty(self.local_decls, self.tcx);\n             let left_size = self.ecx.layout_of(left_ty).ok()?.size;\n             let right_size = r.layout.size;\n             let r_bits = r.to_scalar().ok();"}]}