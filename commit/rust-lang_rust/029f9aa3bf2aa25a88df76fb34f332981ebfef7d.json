{"sha": "029f9aa3bf2aa25a88df76fb34f332981ebfef7d", "node_id": "C_kwDOAAsO6NoAKDAyOWY5YWEzYmYyYWEyNWE4OGRmNzZmYjM0ZjMzMjk4MWViZmVmN2Q", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2022-06-23T15:52:13Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2022-06-23T15:52:13Z"}, "message": "add tracking issue for exclusive", "tree": {"sha": "dc37d1705c6be4a21cd308da779374dfffb8dd08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc37d1705c6be4a21cd308da779374dfffb8dd08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/029f9aa3bf2aa25a88df76fb34f332981ebfef7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/029f9aa3bf2aa25a88df76fb34f332981ebfef7d", "html_url": "https://github.com/rust-lang/rust/commit/029f9aa3bf2aa25a88df76fb34f332981ebfef7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/029f9aa3bf2aa25a88df76fb34f332981ebfef7d/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63d1c8623000782ebc1bb6ae662a10af9f067cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/63d1c8623000782ebc1bb6ae662a10af9f067cab", "html_url": "https://github.com/rust-lang/rust/commit/63d1c8623000782ebc1bb6ae662a10af9f067cab"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "a7519ab5ab633c42967cb19801452e0387a2d29a", "filename": "library/core/src/sync/exclusive.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/029f9aa3bf2aa25a88df76fb34f332981ebfef7d/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029f9aa3bf2aa25a88df76fb34f332981ebfef7d/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs?ref=029f9aa3bf2aa25a88df76fb34f332981ebfef7d", "patch": "@@ -72,7 +72,7 @@ use core::task::{Context, Poll};\n ///\n ///\n /// [`Sync`]: core::marker::Sync\n-#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n #[doc(alias = \"SyncWrapper\")]\n #[doc(alias = \"SyncCell\")]\n #[doc(alias = \"Unique\")]\n@@ -86,10 +86,10 @@ pub struct Exclusive<T: ?Sized> {\n }\n \n // See `Exclusive`'s docs for justification.\n-#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n unsafe impl<T: ?Sized> Sync for Exclusive<T> {}\n \n-#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n impl<T: ?Sized> fmt::Debug for Exclusive<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         f.debug_struct(\"Exclusive\").finish_non_exhaustive()\n@@ -98,14 +98,14 @@ impl<T: ?Sized> fmt::Debug for Exclusive<T> {\n \n impl<T: Sized> Exclusive<T> {\n     /// Wrap a value in an `Exclusive`\n-    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n     pub const fn new(t: T) -> Self {\n         Self { inner: t }\n     }\n \n     /// Unwrap the value contained in the `Exclusive`\n-    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n     pub const fn into_inner(self) -> T {\n         self.inner\n@@ -114,7 +114,7 @@ impl<T: Sized> Exclusive<T> {\n \n impl<T: ?Sized> Exclusive<T> {\n     /// Get exclusive access to the underlying value.\n-    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n     pub const fn get_mut(&mut self) -> &mut T {\n         &mut self.inner\n@@ -126,7 +126,7 @@ impl<T: ?Sized> Exclusive<T> {\n     /// value, which means _unpinned_ `Exclusive`s can produce _unpinned_\n     /// access to the underlying value, but _pinned_ `Exclusive`s only\n     /// produce _pinned_ access to the underlying value.\n-    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n     pub const fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T> {\n         // SAFETY: `Exclusive` can only produce `&mut T` if itself is unpinned\n@@ -137,7 +137,7 @@ impl<T: ?Sized> Exclusive<T> {\n     /// Build a _mutable_ references to an `Exclusive<T>` from\n     /// a _mutable_ reference to a `T`. This allows you to skip\n     /// building an `Exclusive` with [`Exclusive::new`].\n-    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n     pub const fn from_mut(r: &'_ mut T) -> &'_ mut Exclusive<T> {\n         // SAFETY: repr is \u2265 C, so refs have the same layout; and `Exclusive` properties are `&mut`-agnostic\n@@ -147,7 +147,7 @@ impl<T: ?Sized> Exclusive<T> {\n     /// Build a _pinned mutable_ references to an `Exclusive<T>` from\n     /// a _pinned mutable_ reference to a `T`. This allows you to skip\n     /// building an `Exclusive` with [`Exclusive::new`].\n-    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n     #[must_use]\n     pub const fn from_pin_mut(r: Pin<&'_ mut T>) -> Pin<&'_ mut Exclusive<T>> {\n         // SAFETY: `Exclusive` can only produce `&mut T` if itself is unpinned\n@@ -156,14 +156,14 @@ impl<T: ?Sized> Exclusive<T> {\n     }\n }\n \n-#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n impl<T> From<T> for Exclusive<T> {\n     fn from(t: T) -> Self {\n         Self::new(t)\n     }\n }\n \n-#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n impl<T: Future + ?Sized> Future for Exclusive<T> {\n     type Output = T::Output;\n "}, {"sha": "4365e4cb250ca44708743a71177703b976380557", "filename": "library/core/src/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/029f9aa3bf2aa25a88df76fb34f332981ebfef7d/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029f9aa3bf2aa25a88df76fb34f332981ebfef7d/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs?ref=029f9aa3bf2aa25a88df76fb34f332981ebfef7d", "patch": "@@ -4,5 +4,5 @@\n \n pub mod atomic;\n mod exclusive;\n-#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n pub use exclusive::Exclusive;"}, {"sha": "0c2ac8e10cee657d1fa749a4352e2a6a0374c772", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/029f9aa3bf2aa25a88df76fb34f332981ebfef7d/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029f9aa3bf2aa25a88df76fb34f332981ebfef7d/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=029f9aa3bf2aa25a88df76fb34f332981ebfef7d", "patch": "@@ -155,7 +155,7 @@\n pub use alloc_crate::sync::{Arc, Weak};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::sync::atomic;\n-#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n pub use core::sync::Exclusive;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}