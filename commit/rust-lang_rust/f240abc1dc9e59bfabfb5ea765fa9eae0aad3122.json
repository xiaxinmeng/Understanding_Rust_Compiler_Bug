{"sha": "f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNDBhYmMxZGM5ZTU5YmZhYmZiNWVhNzY1ZmE5ZWFlMGFhZDMxMjI=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T19:09:14Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-09-16T14:52:20Z"}, "message": "Add array window fn\n\nUpdated issue to #75027\n\nUpdate to rm oob access\n\nAnd hopefully fix docs as well\n\nFixed naming conflict in test\n\nFix test which used 1-indexing\n\nNth starts from 0, woops\n\nFix a bunch of off by 1 errors\n\nSee https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=757b311987e3fae1ca47122969acda5a\n\nAdd even more off by 1 errors\n\nAnd also write `next` and `next_back` in terms of `nth` and `nth_back`.\n\nRun fmt\n\nFix forgetting to change fn name in test\n\nadd nth_back test & document unsafe\n\nRemove as_ref().unwrap()\nDocumented occurrences of unsafe, noting what invariants are maintained", "tree": {"sha": "56f5bdb791e20ed72b589b92c3cf087b93ae16c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f5bdb791e20ed72b589b92c3cf087b93ae16c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "html_url": "https://github.com/rust-lang/rust/commit/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e4485a052857e5dd32ea29ceb7b1a8223e83cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e4485a052857e5dd32ea29ceb7b1a8223e83cc", "html_url": "https://github.com/rust-lang/rust/commit/f4e4485a052857e5dd32ea29ceb7b1a8223e83cc"}], "stats": {"total": 202, "additions": 196, "deletions": 6}, "files": [{"sha": "7881c101f9f60f496f1b6f62b525c7cb330a2a2b", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "patch": "@@ -76,6 +76,7 @@\n #![cfg_attr(test, feature(test))]\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n+#![feature(array_windows)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(box_patterns)]"}, {"sha": "93501ef40852ae7ab6a0b820be94e3c4ac958053", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "patch": "@@ -95,6 +95,8 @@ use crate::vec::Vec;\n pub use core::slice::ArrayChunks;\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub use core::slice::ArrayChunksMut;\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+pub use core::slice::ArrayWindows;\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]"}, {"sha": "84fa34c75e3a2ed3219d3daea51151bc34a946e0", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "patch": "@@ -1687,6 +1687,106 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n     }\n }\n \n+/// A windowed iterator over a slice in overlapping chunks (`N` elements at a\n+/// time), starting at the beginning of the slice\n+///\n+/// This struct is created by the [`array_windows`] method on [slices].\n+///\n+/// [`array_windows`]: ../../std/primitive.slice.html#method.array_windows\n+/// [slices]: ../../std/primitive.slice.html\n+#[derive(Debug, Clone, Copy)]\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+pub struct ArrayWindows<'a, T: 'a, const N: usize> {\n+    pub(crate) slice_head: *const T,\n+    pub(crate) num: usize,\n+    pub(crate) marker: marker::PhantomData<&'a [T; N]>,\n+}\n+\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+impl<'a, T, const N: usize> Iterator for ArrayWindows<'a, T, N> {\n+    type Item = &'a [T; N];\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if self.num == 0 {\n+            return None;\n+        }\n+        // SAFETY:\n+        // This is safe because it's indexing into a slice guaranteed to be length > N.\n+        let ret = unsafe { &*self.slice_head.cast::<[T; N]>() };\n+        // SAFETY: Guaranteed that there are at least 1 item remaining otherwise\n+        // earlier branch would've been hit\n+        self.slice_head = unsafe { self.slice_head.add(1) };\n+\n+        self.num -= 1;\n+        Some(ret)\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.num, Some(self.num))\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.num\n+    }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        if self.num <= n {\n+            self.num = 0;\n+            return None;\n+        }\n+        // SAFETY:\n+        // This is safe because it's indexing into a slice guaranteed to be length > N.\n+        let ret = unsafe { &*self.slice_head.add(n).cast::<[T; N]>() };\n+        // SAFETY: Guaranteed that there are at least n items remaining\n+        self.slice_head = unsafe { self.slice_head.add(n + 1) };\n+\n+        self.num -= n + 1;\n+        Some(ret)\n+    }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.nth(self.num.checked_sub(1)?)\n+    }\n+}\n+\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+impl<'a, T, const N: usize> DoubleEndedIterator for ArrayWindows<'a, T, N> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<&'a [T; N]> {\n+        if self.num == 0 {\n+            return None;\n+        }\n+        // SAFETY: Guaranteed that there are n items remaining, n-1 for 0-indexing.\n+        let ret = unsafe { &*self.slice_head.add(self.num - 1).cast::<[T; N]>() };\n+        self.num -= 1;\n+        Some(ret)\n+    }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<&'a [T; N]> {\n+        if self.num <= n {\n+            self.num = 0;\n+            return None;\n+        }\n+        // SAFETY: Guaranteed that there are n items remaining, n-1 for 0-indexing.\n+        let ret = unsafe { &*self.slice_head.add(self.num - (n + 1)).cast::<[T; N]>() };\n+        self.num -= n + 1;\n+        Some(ret)\n+    }\n+}\n+\n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+impl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N> {\n+    fn is_empty(&self) -> bool {\n+        self.num == 0\n+    }\n+}\n+\n /// An iterator over a slice in (non-overlapping) chunks (`N` elements at a\n /// time), starting at the beginning of the slice.\n ///"}, {"sha": "771540b0877bec506363de6e334bc6aab47a2c12", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "patch": "@@ -56,6 +56,9 @@ pub use iter::{RChunks, RChunksExact, RChunksExactMut, RChunksMut};\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub use iter::{ArrayChunks, ArrayChunksMut};\n \n+#[unstable(feature = \"array_windows\", issue = \"75027\")]\n+pub use iter::ArrayWindows;\n+\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub use iter::{SplitInclusive, SplitInclusiveMut};\n \n@@ -1099,6 +1102,40 @@ impl<T> [T] {\n         }\n     }\n \n+    /// Returns an iterator over overlapping windows of `N` elements of  a slice,\n+    /// starting at the beginning of the slice.\n+    ///\n+    /// This is the const generic equivalent of [`windows`].\n+    ///\n+    /// If `N` is smaller than the size of the array, it will return no windows.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(array_windows)]\n+    /// let slice = [0, 1, 2, 3];\n+    /// let mut iter = slice.array_windows();\n+    /// assert_eq!(iter.next().unwrap(), &[0, 1]);\n+    /// assert_eq!(iter.next().unwrap(), &[1, 2]);\n+    /// assert_eq!(iter.next().unwrap(), &[2, 3]);\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`windows`]: #method.windows\n+    #[unstable(feature = \"array_windows\", issue = \"75027\")]\n+    #[inline]\n+    pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n+        assert_ne!(N, 0);\n+\n+        let num_windows = self.len().saturating_sub(N - 1);\n+        ArrayWindows { slice_head: self.as_ptr(), num: num_windows, marker: marker::PhantomData }\n+    }\n+\n     /// Returns an iterator over `chunk_size` elements of the slice at a time, starting at the end\n     /// of the slice.\n     ///"}, {"sha": "4a204adb33674183c3b276dfef8f5c58797f8f0d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "patch": "@@ -2,6 +2,7 @@\n #![feature(array_chunks)]\n #![feature(array_methods)]\n #![feature(array_map)]\n+#![feature(array_windows)]\n #![feature(bool_to_option)]\n #![feature(bound_cloned)]\n #![feature(box_syntax)]"}, {"sha": "9556d43f9d78b3e9864ca1a6d78d4479ff7fb318", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "patch": "@@ -657,6 +657,55 @@ fn test_array_chunks_mut_zip() {\n     assert_eq!(v1, [13, 14, 19, 20, 4]);\n }\n \n+#[test]\n+fn test_array_windows_infer() {\n+    let v: &[i32] = &[0, 1, 0, 1];\n+    assert_eq!(v.array_windows::<2>().count(), 3);\n+    let c = v.array_windows();\n+    for &[a, b] in c {\n+        assert_eq!(a + b, 1);\n+    }\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4, 5, 6];\n+    let total = v2.array_windows().map(|&[a, b, c]| a + b + c).sum::<i32>();\n+    assert_eq!(total, 3 + 6 + 9 + 12 + 15);\n+}\n+\n+#[test]\n+fn test_array_windows_count() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let c = v.array_windows::<3>();\n+    assert_eq!(c.count(), 4);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4];\n+    let c2 = v2.array_windows::<6>();\n+    assert_eq!(c2.count(), 0);\n+\n+    let v3: &[i32] = &[];\n+    let c3 = v3.array_windows::<2>();\n+    assert_eq!(c3.count(), 0);\n+}\n+\n+#[test]\n+fn test_array_windows_nth() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let snd = v.array_windows::<4>().nth(1);\n+    assert_eq!(snd, Some(&[1, 2, 3, 4]));\n+    let mut arr_windows = v.array_windows::<2>();\n+    assert_ne!(arr_windows.nth(0), arr_windows.nth(0));\n+    let last = v.array_windows::<3>().last();\n+    assert_eq!(last, Some(&[3, 4, 5]));\n+}\n+\n+#[test]\n+fn test_array_windows_nth_back() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let snd = v.array_windows::<4>().nth_back(1);\n+    assert_eq!(snd, Some(&[1, 2, 3, 4]));\n+    let mut arr_windows = v.array_windows::<2>();\n+    assert_ne!(arr_windows.nth_back(0), arr_windows.nth_back(0));\n+}\n+\n #[test]\n fn test_rchunks_count() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];"}, {"sha": "f3b19109a7c80e14cd49faf608ae1cb7966f8802", "filename": "src/test/ui/const-generics/type-dependent/issue-61936.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f240abc1dc9e59bfabfb5ea765fa9eae0aad3122/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs?ref=f240abc1dc9e59bfabfb5ea765fa9eae0aad3122", "patch": "@@ -5,21 +5,21 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n trait SliceExt<T: Clone> {\n-    fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N>;\n+    fn array_windows_example<'a, const N: usize>(&'a self) -> ArrayWindowsExample<'a, T, N>;\n }\n \n impl <T: Clone> SliceExt<T> for [T] {\n-   fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N> {\n-       ArrayWindows{ idx: 0, slice: &self }\n+   fn array_windows_example<'a, const N: usize>(&'a self) -> ArrayWindowsExample<'a, T, N> {\n+       ArrayWindowsExample{ idx: 0, slice: &self }\n    }\n }\n \n-struct ArrayWindows<'a, T, const N: usize> {\n+struct ArrayWindowsExample<'a, T, const N: usize> {\n     slice: &'a [T],\n     idx: usize,\n }\n \n-impl <'a, T: Clone, const N: usize> Iterator for ArrayWindows<'a, T, N> {\n+impl <'a, T: Clone, const N: usize> Iterator for ArrayWindowsExample<'a, T, N> {\n     type Item = [T; N];\n     fn next(&mut self) -> Option<Self::Item> {\n         // Note: this is unsound for some `T` and not meant as an example\n@@ -45,7 +45,7 @@ const FOUR: usize = 4;\n fn main() {\n     let v: Vec<usize> = vec![0; 100];\n \n-    for array in v.as_slice().array_windows::<FOUR>() {\n+    for array in v.as_slice().array_windows_example::<FOUR>() {\n         assert_eq!(array, [0, 0, 0, 0])\n     }\n }"}]}