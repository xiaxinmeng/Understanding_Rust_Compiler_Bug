{"sha": "dcd3cf70177f5af115d4799fc7fff836b3bcf649", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZDNjZjcwMTc3ZjVhZjExNWQ0Nzk5ZmM3ZmZmODM2YjNiY2Y2NDk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-09T18:10:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-09T18:10:27Z"}, "message": "Do not modify mutability of simple bindings.\n\nThis commit removes the modification of the mutability of simple\nbindings. While the mutability isn't used, it is important that it is\nkept so that the input to procedural macros matches what the user wrote.\nThis commit also modifies the span of the binding mode so that it is\nconsidered a compiler desugaring and won't be linted against for being\nunused..", "tree": {"sha": "f0eace511ce62de70a92df6e41c9330bd39bee74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0eace511ce62de70a92df6e41c9330bd39bee74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcd3cf70177f5af115d4799fc7fff836b3bcf649", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlzUbggACgkQAXYLT59T\n8VQYUw/+PzS5BsoN6d1tdCcC/GqP0cSbNIKtOJqlZRUUPbZM491bfBQSoBj9l6RZ\nwQprmSz4KQDUQWIHR8vY1wi3WHsuhcGdWD1dyRHdBh9xur/BV5E0BncNCvgmzpGd\nYleoInHqEKkwvb/P0yxZy4BrdDNjIFzE1DrxaqLq6ZonIUdXT5efHCMN6NAuFyHc\nOiUz84tCN2ElfEGXzslzl/1VmQqnaKq1WS0dL1AfmMjo7UySBDHt4u/dPnwIeV6J\nooc3DqeYsXUU8CmhaLhCsgyg/WZvW+TwWBPfBvOeVA2yxH1HU1ToT443DbDxuIxi\nnIAG1wNU3kPYEBpfyhJyohO41gfnK5VQEyZX9uXpoZDhz4NXfzA43Jz8B8d9FYC2\n50Oep2n4DjTpMrefsOgjTR/1sT0NLj9wL5LkxgTxYnFwJ3D7MgLXRIQcBmS+aiES\np7/4cQyft39kNW30xlfl6YMZg9j39PH8GYi8s/PqfuQZr4ZHw8GziyTb2JyCkRe+\nSygBk8lJYd+F8DvQrFdHLdq+EEMkU19I5e2rsn640NRkFGMr61d6doclPOq5ofqj\nmtWPELdG5bZGLvIBPaViJG2PJrUkvnuWDNaFYLgRgitC+tXii+v5zU0r47tRM2xs\n6NBHVFVQOZtHTCkcG6/jwbd4OW9JGZeVG7xjQVe43zzpqRpREQk=\n=A1sd\n-----END PGP SIGNATURE-----", "payload": "tree f0eace511ce62de70a92df6e41c9330bd39bee74\nparent e57c7b859d3d60ee9c1ed63ac87234e83b088f82\nauthor David Wood <david@davidtw.co> 1557425427 +0100\ncommitter David Wood <david@davidtw.co> 1557425427 +0100\n\nDo not modify mutability of simple bindings.\n\nThis commit removes the modification of the mutability of simple\nbindings. While the mutability isn't used, it is important that it is\nkept so that the input to procedural macros matches what the user wrote.\nThis commit also modifies the span of the binding mode so that it is\nconsidered a compiler desugaring and won't be linted against for being\nunused..\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd3cf70177f5af115d4799fc7fff836b3bcf649", "html_url": "https://github.com/rust-lang/rust/commit/dcd3cf70177f5af115d4799fc7fff836b3bcf649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcd3cf70177f5af115d4799fc7fff836b3bcf649/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57c7b859d3d60ee9c1ed63ac87234e83b088f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57c7b859d3d60ee9c1ed63ac87234e83b088f82", "html_url": "https://github.com/rust-lang/rust/commit/e57c7b859d3d60ee9c1ed63ac87234e83b088f82"}], "stats": {"total": 90, "additions": 46, "deletions": 44}, "files": [{"sha": "2f1bb1475bff66164b99c5bdaaac084992830a4a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dcd3cf70177f5af115d4799fc7fff836b3bcf649/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd3cf70177f5af115d4799fc7fff836b3bcf649/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=dcd3cf70177f5af115d4799fc7fff836b3bcf649", "patch": "@@ -50,7 +50,6 @@ use errors::Applicability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_data_structures::sync::Lrc;\n \n use std::collections::{BTreeSet, BTreeMap};\n use std::mem;\n@@ -59,10 +58,10 @@ use syntax::attr;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::errors;\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::ext::hygiene::Mark;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::source_map::{self, respan, CompilerDesugaringKind, Spanned};\n+use syntax::source_map::{respan, CompilerDesugaringKind, Spanned};\n use syntax::std_inject;\n use syntax::symbol::{keywords, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n@@ -855,27 +854,6 @@ impl<'a> LoweringContext<'a> {\n         Ident::with_empty_ctxt(Symbol::gensym(s))\n     }\n \n-    /// Reuses the span but adds information like the kind of the desugaring and features that are\n-    /// allowed inside this span.\n-    fn mark_span_with_reason(\n-        &self,\n-        reason: CompilerDesugaringKind,\n-        span: Span,\n-        allow_internal_unstable: Option<Lrc<[Symbol]>>,\n-    ) -> Span {\n-        let mark = Mark::fresh(Mark::root());\n-        mark.set_expn_info(source_map::ExpnInfo {\n-            call_site: span,\n-            def_site: Some(span),\n-            format: source_map::CompilerDesugaring(reason),\n-            allow_internal_unstable,\n-            allow_internal_unsafe: false,\n-            local_inner_macros: false,\n-            edition: source_map::hygiene::default_edition(),\n-        });\n-        span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n-    }\n-\n     fn with_anonymous_lifetime_mode<R>(\n         &mut self,\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n@@ -1164,7 +1142,7 @@ impl<'a> LoweringContext<'a> {\n             attrs: ThinVec::new(),\n         };\n \n-        let unstable_span = self.mark_span_with_reason(\n+        let unstable_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n             Some(vec![\n@@ -1571,7 +1549,7 @@ impl<'a> LoweringContext<'a> {\n         // desugaring that explicitly states that we don't want to track that.\n         // Not tracking it makes lints in rustc and clippy very fragile as\n         // frequently opened issues show.\n-        let exist_ty_span = self.mark_span_with_reason(\n+        let exist_ty_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::ExistentialReturnType,\n             span,\n             None,\n@@ -2446,7 +2424,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> hir::FunctionRetTy {\n         let span = output.span();\n \n-        let exist_ty_span = self.mark_span_with_reason(\n+        let exist_ty_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n             None,\n@@ -4182,7 +4160,7 @@ impl<'a> LoweringContext<'a> {\n             }),\n             ExprKind::TryBlock(ref body) => {\n                 self.with_catch_scope(body.id, |this| {\n-                    let unstable_span = this.mark_span_with_reason(\n+                    let unstable_span = this.sess.source_map().mark_span_with_reason(\n                         CompilerDesugaringKind::TryBlock,\n                         body.span,\n                         Some(vec![\n@@ -4615,7 +4593,7 @@ impl<'a> LoweringContext<'a> {\n                 // expand <head>\n                 let mut head = self.lower_expr(head);\n                 let head_sp = head.span;\n-                let desugared_span = self.mark_span_with_reason(\n+                let desugared_span = self.sess.source_map().mark_span_with_reason(\n                     CompilerDesugaringKind::ForLoop,\n                     head_sp,\n                     None,\n@@ -4776,15 +4754,15 @@ impl<'a> LoweringContext<'a> {\n                 //                 return Try::from_error(From::from(err)),\n                 // }\n \n-                let unstable_span = self.mark_span_with_reason(\n+                let unstable_span = self.sess.source_map().mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     e.span,\n                     Some(vec![\n                         Symbol::intern(\"try_trait\")\n                     ].into()),\n                 );\n                 let try_span = self.sess.source_map().end_point(e.span);\n-                let try_span = self.mark_span_with_reason(\n+                let try_span = self.sess.source_map().mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     try_span,\n                     Some(vec![\n@@ -5569,12 +5547,12 @@ impl<'a> LoweringContext<'a> {\n             );\n             self.sess.abort_if_errors();\n         }\n-        let span = self.mark_span_with_reason(\n+        let span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Await,\n             await_span,\n             None,\n         );\n-        let gen_future_span = self.mark_span_with_reason(\n+        let gen_future_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Await,\n             await_span,\n             Some(vec![Symbol::intern(\"gen_future\")].into()),"}, {"sha": "ab4de4891a5b069d57d21d6a3feb4eebaf81dd6a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dcd3cf70177f5af115d4799fc7fff836b3bcf649/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd3cf70177f5af115d4799fc7fff836b3bcf649/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dcd3cf70177f5af115d4799fc7fff836b3bcf649", "patch": "@@ -50,7 +50,10 @@ use crate::symbol::{Symbol, keywords};\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n-use syntax_pos::{Span, MultiSpan, BytePos, FileName};\n+use syntax_pos::{\n+    Span, MultiSpan, BytePos, FileName,\n+    hygiene::CompilerDesugaringKind,\n+};\n use log::{debug, trace};\n \n use std::borrow::Cow;\n@@ -8741,6 +8744,15 @@ impl<'a> Parser<'a> {\n                 // statement.\n                 let (binding_mode, ident, is_simple_pattern) = match input.pat.node {\n                     PatKind::Ident(binding_mode @ BindingMode::ByValue(_), ident, _) => {\n+                        // Simple patterns like this don't have a generated argument, but they are\n+                        // moved into the closure with a statement, so any `mut` bindings on the\n+                        // argument will be unused. This binding mode can't be removed, because\n+                        // this would affect the input to procedural macros, but they can have\n+                        // their span marked as being the result of a compiler desugaring so\n+                        // that they aren't linted against.\n+                        input.pat.span = self.sess.source_map().mark_span_with_reason(\n+                            CompilerDesugaringKind::Async, span, None);\n+\n                         (binding_mode, ident, true)\n                     }\n                     _ => (BindingMode::ByValue(Mutability::Mutable), ident, false),\n@@ -8810,15 +8822,6 @@ impl<'a> Parser<'a> {\n                     })\n                 };\n \n-                // Remove mutability from arguments. If this is not a simple pattern,\n-                // those arguments are replaced by `__argN`, so there is no need to do this.\n-                if let PatKind::Ident(BindingMode::ByValue(mutability @ Mutability::Mutable), ..) =\n-                    &mut input.pat.node\n-                {\n-                    assert!(is_simple_pattern);\n-                    *mutability = Mutability::Immutable;\n-                }\n-\n                 let move_stmt = Stmt { id, node: StmtKind::Local(P(move_local)), span };\n                 arguments.push(AsyncArgument { ident, arg, pat_stmt, move_stmt });\n             }"}, {"sha": "215618bd09ca375538e98701de332977dad45e3d", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dcd3cf70177f5af115d4799fc7fff836b3bcf649/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd3cf70177f5af115d4799fc7fff836b3bcf649/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=dcd3cf70177f5af115d4799fc7fff836b3bcf649", "patch": "@@ -930,6 +930,27 @@ impl SourceMap {\n \n         None\n     }\n+\n+    /// Reuses the span but adds information like the kind of the desugaring and features that are\n+    /// allowed inside this span.\n+    pub fn mark_span_with_reason(\n+        &self,\n+        reason: hygiene::CompilerDesugaringKind,\n+        span: Span,\n+        allow_internal_unstable: Option<Lrc<[symbol::Symbol]>>,\n+    ) -> Span {\n+        let mark = Mark::fresh(Mark::root());\n+        mark.set_expn_info(ExpnInfo {\n+            call_site: span,\n+            def_site: Some(span),\n+            format: CompilerDesugaring(reason),\n+            allow_internal_unstable,\n+            allow_internal_unsafe: false,\n+            local_inner_macros: false,\n+            edition: hygiene::default_edition(),\n+        });\n+        span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n+    }\n }\n \n impl SourceMapper for SourceMap {"}, {"sha": "a93944db1c5916e81dfc8d4494bcf2ead9648eab", "filename": "src/test/ui/async-await/issue-60674.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcd3cf70177f5af115d4799fc7fff836b3bcf649/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/dcd3cf70177f5af115d4799fc7fff836b3bcf649/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-60674.stdout?ref=dcd3cf70177f5af115d4799fc7fff836b3bcf649", "patch": "@@ -1 +1 @@\n-async fn f(x: u8) { }\n+async fn f(mut x: u8) { }"}]}