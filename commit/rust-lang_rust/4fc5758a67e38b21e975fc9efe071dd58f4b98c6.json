{"sha": "4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzU3NThhNjdlMzhiMjFlOTc1ZmM5ZWZlMDcxZGQ1OGY0Yjk4YzY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-30T13:53:15Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-30T13:53:15Z"}, "message": "Update existing tests with more precise error messages", "tree": {"sha": "87353963637bf5efa251d0209b8323594c3434b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87353963637bf5efa251d0209b8323594c3434b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "html_url": "https://github.com/rust-lang/rust/commit/4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e018268ffad0e3d2704705cb3337b6195b5cba08", "url": "https://api.github.com/repos/rust-lang/rust/commits/e018268ffad0e3d2704705cb3337b6195b5cba08", "html_url": "https://github.com/rust-lang/rust/commit/e018268ffad0e3d2704705cb3337b6195b5cba08"}], "stats": {"total": 178, "additions": 102, "deletions": 76}, "files": [{"sha": "fd811e8083cf08885bce0b45b47351da2975d03a", "filename": "src/test/run-pass/array-slice-vec/vec-matching-autoslice.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable pattern\n+  --> $DIR/vec-matching-autoslice.rs:31:9\n+   |\n+LL |         ([_, _], _) => panic!(),\n+   |         ^^^^^^^^^^^\n+   |\n+   = note: #[warn(unreachable_patterns)] on by default\n+"}, {"sha": "f402a98af49b3b317cabe50f56d5b576e3537b88", "filename": "src/test/run-pass/binding/match-range.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-range.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -0,0 +1,20 @@\n+warning: unreachable pattern\n+  --> $DIR/match-range.rs:47:7\n+   |\n+LL |       _ => panic!(\"should match float range\")\n+   |       ^\n+   |\n+   = note: #[warn(unreachable_patterns)] on by default\n+\n+warning: unreachable pattern\n+  --> $DIR/match-range.rs:55:9\n+   |\n+LL |         _ => {},\n+   |         ^\n+\n+warning: unreachable pattern\n+  --> $DIR/match-range.rs:59:9\n+   |\n+LL |         _ => panic!(\"should match the range start\"),\n+   |         ^\n+"}, {"sha": "41b4130acf43534e04692b7275114de81b0a3b25", "filename": "src/test/run-pass/issues/issue-15881-model-lexer-dotdotdot.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15881-model-lexer-dotdotdot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15881-model-lexer-dotdotdot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15881-model-lexer-dotdotdot.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable pattern\n+  --> $DIR/issue-15881-model-lexer-dotdotdot.rs:41:7\n+   |\n+LL |       _ => panic!(\"should match float range\")\n+   |       ^\n+   |\n+   = note: #[warn(unreachable_patterns)] on by default\n+"}, {"sha": "1b231f2da39eba7e0070759cffb218057ef552f1", "filename": "src/test/run-pass/issues/issue-7222.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7222.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7222.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7222.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable pattern\n+  --> $DIR/issue-7222.rs:20:9\n+   |\n+LL |         _ => ()\n+   |         ^\n+   |\n+   = note: #[warn(unreachable_patterns)] on by default\n+"}, {"sha": "703453e6bdd93a865b1494edcfa119749ff42a57", "filename": "src/test/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:35:15\n    |\n LL |     A = { let 0 = 0; 0 },\n-   |               ^ pattern `_` not covered\n+   |               ^ pattern `-2147483648i32..=-1i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "6caff93e642963aa160008aaf751c2b6cd710d0e", "filename": "src/test/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:41:24\n    |\n LL |     let x: [i32; { let 0 = 0; 0 }] = [];\n-   |                        ^ pattern `_` not covered\n+   |                        ^ pattern `-2147483648i32..=-1i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "9e45045d27e8d6424646b8137bdbbd70be51f477", "filename": "src/test/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -1,26 +1,26 @@\n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:14:22\n    |\n LL | const X: i32 = { let 0 = 0; 0 };\n-   |                      ^ pattern `_` not covered\n+   |                      ^ pattern `-2147483648i32..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:18:23\n    |\n LL | static Y: i32 = { let 0 = 0; 0 };\n-   |                       ^ pattern `_` not covered\n+   |                       ^ pattern `-2147483648i32..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:23:26\n    |\n LL |     const X: i32 = { let 0 = 0; 0 };\n-   |                          ^ pattern `_` not covered\n+   |                          ^ pattern `-2147483648i32..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n   --> $DIR/const-match-check.rs:29:26\n    |\n LL |     const X: i32 = { let 0 = 0; 0 };\n-   |                          ^ pattern `_` not covered\n+   |                          ^ pattern `-2147483648i32..=-1i32` not covered\n \n error: aborting due to 4 previous errors\n "}, {"sha": "278864d6de9ec292fe336a7f5a1c619c70f91578", "filename": "src/test/ui/consts/const-pattern-irrefutable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.rs?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -19,8 +19,8 @@ use foo::d;\n const a: u8 = 2;\n \n fn main() {\n-    let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n-    let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n-    let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+    let a = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n+    let c = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n+    let d = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n     fn f() {} // Check that the `NOTE`s still work with an item here (c.f. issue #35115).\n }"}, {"sha": "d9ad16cd0e8da91d96f1afe0220bec7841f9cbf6", "filename": "src/test/ui/consts/const-pattern-irrefutable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-irrefutable.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -1,19 +1,19 @@\n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `0u8..=1u8` not covered\n   --> $DIR/const-pattern-irrefutable.rs:22:9\n    |\n-LL |     let a = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let a = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `0u8..=1u8` not covered\n   --> $DIR/const-pattern-irrefutable.rs:23:9\n    |\n-LL |     let c = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let c = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n-error[E0005]: refutable pattern in local binding: `_` not covered\n+error[E0005]: refutable pattern in local binding: `0u8..=1u8` not covered\n   --> $DIR/const-pattern-irrefutable.rs:24:9\n    |\n-LL |     let d = 4; //~ ERROR refutable pattern in local binding: `_` not covered\n+LL |     let d = 4; //~ ERROR refutable pattern in local binding: `0u8..=1u8` not covered\n    |         ^ interpreted as a constant pattern, not new variable\n \n error: aborting due to 3 previous errors"}, {"sha": "c9b669aefd1ee744ea1286ba3516c7d0145ece95", "filename": "src/test/ui/exhaustive_integer_patterns.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -1,83 +1,83 @@\n error: unreachable pattern\n-  --> $DIR/exhaustive_integer_patterns.rs:32:9\n+  --> $DIR/exhaustive_integer_patterns.rs:33:9\n    |\n LL |         200 => {} //~ ERROR unreachable pattern\n    |         ^^^\n    |\n note: lint level defined here\n-  --> $DIR/exhaustive_integer_patterns.rs:13:9\n+  --> $DIR/exhaustive_integer_patterns.rs:14:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0004]: non-exhaustive patterns: `128u8..=255u8` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:37:11\n+  --> $DIR/exhaustive_integer_patterns.rs:38:11\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ pattern `128u8..=255u8` not covered\n \n error[E0004]: non-exhaustive patterns: `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:42:11\n+  --> $DIR/exhaustive_integer_patterns.rs:43:11\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ patterns `11u8..=19u8`, `31u8..=34u8`, `36u8..=69u8` and 1 more not covered\n \n error: unreachable pattern\n-  --> $DIR/exhaustive_integer_patterns.rs:53:9\n+  --> $DIR/exhaustive_integer_patterns.rs:54:9\n    |\n LL |         -2..=20 => {} //~ ERROR unreachable pattern\n    |         ^^^^^^^\n \n error[E0004]: non-exhaustive patterns: `-128i8..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:50:11\n+  --> $DIR/exhaustive_integer_patterns.rs:51:11\n    |\n LL |     match x { //~ ERROR non-exhaustive patterns\n    |           ^ patterns `-128i8..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n \n error[E0004]: non-exhaustive patterns: `-128i8` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:99:11\n+  --> $DIR/exhaustive_integer_patterns.rs:100:11\n    |\n LL |     match 0i8 { //~ ERROR non-exhaustive patterns\n    |           ^^^ pattern `-128i8` not covered\n \n error[E0004]: non-exhaustive patterns: `0i16` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:107:11\n+  --> $DIR/exhaustive_integer_patterns.rs:108:11\n    |\n LL |     match 0i16 { //~ ERROR non-exhaustive patterns\n    |           ^^^^ pattern `0i16` not covered\n \n error[E0004]: non-exhaustive patterns: `128u8..=255u8` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:125:11\n+  --> $DIR/exhaustive_integer_patterns.rs:126:11\n    |\n LL |     match 0u8 { //~ ERROR non-exhaustive patterns\n    |           ^^^ pattern `128u8..=255u8` not covered\n \n error[E0004]: non-exhaustive patterns: `(0u8, Some(_))` and `(2u8..=255u8, Some(_))` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:137:11\n+  --> $DIR/exhaustive_integer_patterns.rs:138:11\n    |\n LL |     match (0u8, Some(())) { //~ ERROR non-exhaustive patterns\n    |           ^^^^^^^^^^^^^^^ patterns `(0u8, Some(_))` and `(2u8..=255u8, Some(_))` not covered\n \n error[E0004]: non-exhaustive patterns: `(126u8..=127u8, false)` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:142:11\n+  --> $DIR/exhaustive_integer_patterns.rs:143:11\n    |\n LL |     match (0u8, true) { //~ ERROR non-exhaustive patterns\n    |           ^^^^^^^^^^^ pattern `(126u8..=127u8, false)` not covered\n \n error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211455u128` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:162:11\n+  --> $DIR/exhaustive_integer_patterns.rs:163:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `340282366920938463463374607431768211455u128` not covered\n \n error[E0004]: non-exhaustive patterns: `5u128..=340282366920938463463374607431768211455u128` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:166:11\n+  --> $DIR/exhaustive_integer_patterns.rs:167:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `5u128..=340282366920938463463374607431768211455u128` not covered\n \n error[E0004]: non-exhaustive patterns: `0u128..=3u128` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:170:11\n+  --> $DIR/exhaustive_integer_patterns.rs:171:11\n    |\n LL |     match 0u128 { //~ ERROR non-exhaustive patterns\n    |           ^^^^^ pattern `0u128..=3u128` not covered"}, {"sha": "3aa1522945548e1cf487580278cbb17a1c1b013e", "filename": "src/test/ui/feature-gate-exhaustive_integer_patterns.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.rs?ref=e018268ffad0e3d2704705cb3337b6195b5cba08", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let x: u8 = 0;\n-    match x { //~ ERROR non-exhaustive patterns: `_` not covered\n-        0 ..= 255 => {}\n-    }\n-}"}, {"sha": "63d98f6b5eb64bab2500d544f851a365f9a6be64", "filename": "src/test/ui/feature-gate-exhaustive_integer_patterns.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive_integer_patterns.stderr?ref=e018268ffad0e3d2704705cb3337b6195b5cba08", "patch": "@@ -1,9 +0,0 @@\n-error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/feature-gate-exhaustive_integer_patterns.rs:13:11\n-   |\n-LL |     match x { //~ ERROR non-exhaustive patterns: `_` not covered\n-   |           ^ pattern `_` not covered\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0004`."}, {"sha": "9b19fc80e2bd67ce7db2f633a9c5a9c0b1bcf805", "filename": "src/test/ui/for/for-loop-refutable-pattern-error-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in `for` loop binding: `&_` not covered\n+error[E0005]: refutable pattern in `for` loop binding: `&-2147483648i32..=0i32` not covered\n   --> $DIR/for-loop-refutable-pattern-error-message.rs:12:9\n    |\n LL |     for &1 in [1].iter() {} //~ ERROR refutable pattern in `for` loop binding\n-   |         ^^ pattern `&_` not covered\n+   |         ^^ pattern `&-2147483648i32..=0i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "ad895b448dd2015ff720aea2e1051cbc5813f79a", "filename": "src/test/ui/match/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `_` not covered\n+error[E0004]: non-exhaustive patterns: `-2147483648i32..=0i32` and `2i32..=2147483647i32` not covered\n   --> $DIR/match-non-exhaustive.rs:12:11\n    |\n LL |     match 0 { 1 => () } //~ ERROR non-exhaustive patterns\n-   |           ^ pattern `_` not covered\n+   |           ^ patterns `-2147483648i32..=0i32` and `2i32..=2147483647i32` not covered\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/match-non-exhaustive.rs:13:11"}, {"sha": "99f65042d85150c125fc1465899426ba963d9e55", "filename": "src/test/ui/match/match-range-fail-dominate.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -62,5 +62,11 @@ error: unreachable pattern\n LL |       0.02f64 => {}\n    |       ^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: unreachable pattern\n+  --> $DIR/match-range-fail-dominate.rs:47:7\n+   |\n+LL |       _ => {}\n+   |       ^\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "99a0c5d66266030aa5189b859a6bbc545e4df5ed", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -22,7 +22,8 @@ fn main() {\n     match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n       None => {}\n     }\n-    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n+    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)`\n+                      //  and `(_, _, 5i32..=2147483647i32)` not covered\n       (_, _, 4) => {}\n     }\n     match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered"}, {"sha": "d3703a4445499358bb566d55ade6adb38d6566ce", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -16,32 +16,32 @@ error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n LL |     match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n    |           ^^^^^^^^ pattern `Some(_)` not covered\n \n-error[E0004]: non-exhaustive patterns: `(_, _, _)` not covered\n+error[E0004]: non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n   --> $DIR/non-exhaustive-match.rs:25:11\n    |\n-LL |     match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n-   |           ^^^^^^^^^ pattern `(_, _, _)` not covered\n+LL |     match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)`\n+   |           ^^^^^^^^^ patterns `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n \n error[E0004]: non-exhaustive patterns: `(a, a)` not covered\n-  --> $DIR/non-exhaustive-match.rs:28:11\n+  --> $DIR/non-exhaustive-match.rs:29:11\n    |\n LL |     match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n    |           ^^^^^^^^^^^^ pattern `(a, a)` not covered\n \n error[E0004]: non-exhaustive patterns: `b` not covered\n-  --> $DIR/non-exhaustive-match.rs:32:11\n+  --> $DIR/non-exhaustive-match.rs:33:11\n    |\n LL |     match t::a { //~ ERROR non-exhaustive patterns: `b` not covered\n    |           ^^^^ pattern `b` not covered\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n-  --> $DIR/non-exhaustive-match.rs:43:11\n+  --> $DIR/non-exhaustive-match.rs:44:11\n    |\n LL |     match *vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n    |           ^^^^ pattern `[]` not covered\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _]` not covered\n-  --> $DIR/non-exhaustive-match.rs:56:11\n+  --> $DIR/non-exhaustive-match.rs:57:11\n    |\n LL |     match *vec { //~ ERROR non-exhaustive patterns: `[_, _, _, _]` not covered\n    |           ^^^^ pattern `[_, _, _, _]` not covered"}, {"sha": "a140e421a5706e811d8760724db4afae47bef5dd", "filename": "src/test/ui/refutable-pattern-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -14,5 +14,5 @@ fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n \n fn main() {\n     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n-    //~^ ERROR refutable pattern in local binding: `(_, _)` not covered\n+    //~^ ERROR refutable pattern in local binding: `(-2147483648i32..=0i32, _)` not covered\n }"}, {"sha": "42aa572789522c86b631f6556c620684e7b331de", "filename": "src/test/ui/refutable-pattern-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fc5758a67e38b21e975fc9efe071dd58f4b98c6/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr?ref=4fc5758a67e38b21e975fc9efe071dd58f4b98c6", "patch": "@@ -4,11 +4,11 @@ error[E0005]: refutable pattern in function argument: `(_, _)` not covered\n LL | fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n    |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n \n-error[E0005]: refutable pattern in local binding: `(_, _)` not covered\n+error[E0005]: refutable pattern in local binding: `(-2147483648i32..=0i32, _)` not covered\n   --> $DIR/refutable-pattern-errors.rs:16:9\n    |\n LL |     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n-   |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n+   |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(-2147483648i32..=0i32, _)` not covered\n \n error: aborting due to 2 previous errors\n "}]}