{"sha": "11eb91f412b2693c970216099b9d910498b0b789", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZWI5MWY0MTJiMjY5M2M5NzAyMTYwOTliOWQ5MTA0OThiMGI3ODk=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-09T01:02:54Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-28T00:11:12Z"}, "message": "[const-prop] Replace `CheckedBinaryOp` handling with use of `InterpCx`", "tree": {"sha": "b7c419e9b0ef16a45b9710c6f9351c5ccb8179ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c419e9b0ef16a45b9710c6f9351c5ccb8179ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11eb91f412b2693c970216099b9d910498b0b789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11eb91f412b2693c970216099b9d910498b0b789", "html_url": "https://github.com/rust-lang/rust/commit/11eb91f412b2693c970216099b9d910498b0b789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11eb91f412b2693c970216099b9d910498b0b789/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "644d4f3ee93b49ee773b667a970a552983d5e8fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/644d4f3ee93b49ee773b667a970a552983d5e8fa", "html_url": "https://github.com/rust-lang/rust/commit/644d4f3ee93b49ee773b667a970a552983d5e8fa"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "865afefa649b53733b9a961c918617e280b267e6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -312,7 +312,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Rvalue::Use(_) |\n             Rvalue::Len(_) |\n             Rvalue::Cast(..) |\n-            Rvalue::NullaryOp(..) => {\n+            Rvalue::NullaryOp(..) |\n+            Rvalue::CheckedBinaryOp(..) => {\n                 self.use_ecx(source_info, |this| {\n                     this.ecx.eval_rvalue_into_place(rvalue, place)?;\n                     this.ecx.eval_place_to_op(place, Some(place_layout))\n@@ -348,7 +349,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     this.ecx.eval_place_to_op(place, Some(place_layout))\n                 })\n             }\n-            Rvalue::CheckedBinaryOp(op, ref left, ref right) |\n             Rvalue::BinaryOp(op, ref left, ref right) => {\n                 trace!(\"rvalue binop {:?} for {:?} and {:?}\", op, left, right);\n                 let right = self.eval_operand(right, source_info)?;\n@@ -403,23 +403,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 let (val, overflow, _ty) = self.use_ecx(source_info, |this| {\n                     this.ecx.overflowing_binary_op(op, l, r)\n                 })?;\n-                let val = if let Rvalue::CheckedBinaryOp(..) = *rvalue {\n-                    Immediate::ScalarPair(\n-                        val.into(),\n-                        Scalar::from_bool(overflow).into(),\n-                    )\n-                } else {\n-                    // We check overflow in debug mode already\n-                    // so should only check in release mode.\n-                    if !self.tcx.sess.overflow_checks() && overflow {\n-                        let err = err_panic!(Overflow(op)).into();\n-                        let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n-                        return None;\n-                    }\n-                    Immediate::Scalar(val.into())\n-                };\n+                // We check overflow in debug mode already\n+                // so should only check in release mode.\n+                if !self.tcx.sess.overflow_checks() && overflow {\n+                    let err = err_panic!(Overflow(op)).into();\n+                    let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n+                    return None;\n+                }\n                 let res = ImmTy {\n-                    imm: val,\n+                    imm: Immediate::Scalar(val.into()),\n                     layout: place_layout,\n                 };\n                 Some(res.into())"}, {"sha": "37fbf01e487dc6610a6649b0e3245de218bc1e42", "filename": "src/test/run-fail/overflowing-lsh-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     let _x = 1_i32 << 32;"}, {"sha": "7b0b37dfed043e437a44e1c8f331dd097d1aa21d", "filename": "src/test/run-fail/overflowing-lsh-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     let _x = 1 << -1;"}, {"sha": "1768a8e6d3138f49f5cebb5b2449cba729065e2d", "filename": "src/test/run-fail/overflowing-lsh-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     let _x = 1_u64 << 64;"}, {"sha": "ec304b4144e0f80772e6d45639d5108386f1d21e", "filename": "src/test/run-fail/overflowing-lsh-4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -5,6 +5,7 @@\n // sidestep the overflow checking.\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     // this signals overflow when checking is on"}, {"sha": "14514540c06e1c8801540c73e012b5acb6505281", "filename": "src/test/run-fail/overflowing-rsh-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     let _x = -1_i32 >> 32;"}, {"sha": "83dcbd13d2ad8200a93891dab5d517e006bc9485", "filename": "src/test/run-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     let _x = -1_i32 >> -1;"}, {"sha": "3521c0506591c37f7304d1e6f3cbd1c5c6dcbdcb", "filename": "src/test/run-fail/overflowing-rsh-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     let _x = -1_i64 >> 64;"}, {"sha": "ed1191849e57cce2937015a192d932bda032b54d", "filename": "src/test/run-fail/overflowing-rsh-4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eb91f412b2693c970216099b9d910498b0b789/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs?ref=11eb91f412b2693c970216099b9d910498b0b789", "patch": "@@ -5,6 +5,7 @@\n // truncation does not sidestep the overflow checking.\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     // this signals overflow when checking is on"}]}