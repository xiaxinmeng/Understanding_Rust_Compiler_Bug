{"sha": "2b91c40c19e51b694ec113fd6991cf59959d4046", "node_id": "C_kwDOAAsO6NoAKDJiOTFjNDBjMTllNTFiNjk0ZWMxMTNmZDY5OTFjZjU5OTU5ZDQwNDY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-25T04:01:18Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-25T22:56:49Z"}, "message": "Avoid adjusting file positions twice.\n\n`imported_source_files` adjusts lots of file positions, and then calls\n`new_imported_source_file`, which then adjust them all again. This\ncommit combines the two adjustments into one, for a small perf win.", "tree": {"sha": "b32895c88922e4f2e7216209de60f46aa07cc7ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b32895c88922e4f2e7216209de60f46aa07cc7ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b91c40c19e51b694ec113fd6991cf59959d4046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b91c40c19e51b694ec113fd6991cf59959d4046", "html_url": "https://github.com/rust-lang/rust/commit/2b91c40c19e51b694ec113fd6991cf59959d4046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b91c40c19e51b694ec113fd6991cf59959d4046/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e810c64d091112cf8ac51a533068632fad30a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e810c64d091112cf8ac51a533068632fad30a8d", "html_url": "https://github.com/rust-lang/rust/commit/3e810c64d091112cf8ac51a533068632fad30a8d"}], "stats": {"total": 47, "additions": 18, "deletions": 29}, "files": [{"sha": "1624e6cd6ee85ccd5d0c79f6f6a0de5ff959d6b0", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2b91c40c19e51b694ec113fd6991cf59959d4046/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b91c40c19e51b694ec113fd6991cf59959d4046/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2b91c40c19e51b694ec113fd6991cf59959d4046", "patch": "@@ -1639,10 +1639,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                         src_hash,\n                         start_pos,\n                         end_pos,\n-                        mut lines,\n-                        mut multibyte_chars,\n-                        mut non_narrow_chars,\n-                        mut normalized_pos,\n+                        lines,\n+                        multibyte_chars,\n+                        non_narrow_chars,\n+                        normalized_pos,\n                         name_hash,\n                         ..\n                     } = source_file_to_import;\n@@ -1679,24 +1679,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n                     let source_length = (end_pos - start_pos).to_usize();\n \n-                    // Translate line-start positions and multibyte character\n-                    // position into frame of reference local to file.\n-                    // `SourceMap::new_imported_source_file()` will then translate those\n-                    // coordinates to their new global frame of reference when the\n-                    // offset of the SourceFile is known.\n-                    for pos in &mut lines {\n-                        *pos = *pos - start_pos;\n-                    }\n-                    for mbc in &mut multibyte_chars {\n-                        mbc.pos = mbc.pos - start_pos;\n-                    }\n-                    for swc in &mut non_narrow_chars {\n-                        *swc = *swc - start_pos;\n-                    }\n-                    for np in &mut normalized_pos {\n-                        np.pos = np.pos - start_pos;\n-                    }\n-\n                     let local_version = sess.source_map().new_imported_source_file(\n                         name,\n                         src_hash,"}, {"sha": "d60b4d3d021e840de82b8d61dbaaace52426511d", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2b91c40c19e51b694ec113fd6991cf59959d4046/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b91c40c19e51b694ec113fd6991cf59959d4046/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=2b91c40c19e51b694ec113fd6991cf59959d4046", "patch": "@@ -345,20 +345,27 @@ impl SourceMap {\n         let end_pos = Pos::from_usize(start_pos + source_len);\n         let start_pos = Pos::from_usize(start_pos);\n \n+        // Translate these positions into the new global frame of reference,\n+        // now that the offset of the SourceFile is known.\n+        //\n+        // These are all unsigned values. `original_start_pos` may be larger or\n+        // smaller than `start_pos`, but `pos` is always larger than both.\n+        // Therefore, `(pos - original_start_pos) + start_pos` won't overflow\n+        // but `start_pos - original_start_pos` might. So we use the former\n+        // form rather than pre-computing the offset into a local variable. The\n+        // compiler backend can optimize away the repeated computations in a\n+        // way that won't trigger overflow checks.\n         for pos in &mut file_local_lines {\n-            *pos = *pos + start_pos;\n+            *pos = (*pos - original_start_pos) + start_pos;\n         }\n-\n         for mbc in &mut file_local_multibyte_chars {\n-            mbc.pos = mbc.pos + start_pos;\n+            mbc.pos = (mbc.pos - original_start_pos) + start_pos;\n         }\n-\n         for swc in &mut file_local_non_narrow_chars {\n-            *swc = *swc + start_pos;\n+            *swc = (*swc - original_start_pos) + start_pos;\n         }\n-\n         for nc in &mut file_local_normalized_pos {\n-            nc.pos = nc.pos + start_pos;\n+            nc.pos = (nc.pos - original_start_pos) + start_pos;\n         }\n \n         let source_file = Lrc::new(SourceFile {"}]}