{"sha": "581dc7588808e9df11de199ffaddc0f3157720c3", "node_id": "C_kwDOAAsO6NoAKDU4MWRjNzU4ODgwOGU5ZGYxMWRlMTk5ZmZhZGRjMGYzMTU3NzIwYzM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-29T01:39:32Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-29T01:39:32Z"}, "message": "rustdoc: Remove a single-use macro\n\nI think the new code is simpler and easier to understand.", "tree": {"sha": "219eaa7c2ebdea0adb1fdadcca3d483953f42762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219eaa7c2ebdea0adb1fdadcca3d483953f42762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/581dc7588808e9df11de199ffaddc0f3157720c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/581dc7588808e9df11de199ffaddc0f3157720c3", "html_url": "https://github.com/rust-lang/rust/commit/581dc7588808e9df11de199ffaddc0f3157720c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/581dc7588808e9df11de199ffaddc0f3157720c3/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7865a85eb6f11750a0e203538eac4c38df5b48b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7865a85eb6f11750a0e203538eac4c38df5b48b9", "html_url": "https://github.com/rust-lang/rust/commit/7865a85eb6f11750a0e203538eac4c38df5b48b9"}], "stats": {"total": 11, "additions": 1, "deletions": 10}, "files": [{"sha": "d59273db08b4f9f50fe7155816a55340893f3ed2", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/581dc7588808e9df11de199ffaddc0f3157720c3/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581dc7588808e9df11de199ffaddc0f3157720c3/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=581dc7588808e9df11de199ffaddc0f3157720c3", "patch": "@@ -15,15 +15,6 @@ use std::path::{Path, PathBuf};\n use std::string::ToString;\n use std::sync::mpsc::Sender;\n \n-macro_rules! try_err {\n-    ($e:expr, $file:expr) => {\n-        match $e {\n-            Ok(e) => e,\n-            Err(e) => return Err(E::new(e, $file)),\n-        }\n-    };\n-}\n-\n crate trait PathError {\n     fn new<S, P: AsRef<Path>>(e: S, path: P) -> Self\n     where\n@@ -75,7 +66,7 @@ impl DocFS {\n                 });\n             });\n         } else {\n-            try_err!(fs::write(&path, contents), path);\n+            fs::write(&path, contents).map_err(|e| E::new(e, path))?;\n         }\n         Ok(())\n     }"}]}