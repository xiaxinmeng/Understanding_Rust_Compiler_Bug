{"sha": "02aedec72264b76dce679570ea64a799a82ad3ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYWVkZWM3MjI2NGI3NmRjZTY3OTU3MGVhNjRhNzk5YTgyYWQzY2U=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-16T19:07:52Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-16T21:18:21Z"}, "message": "Rollup merge of #50808 - SimonSapin:nonzero, r=alexcrichton\n\nStabilize num::NonZeroU*\n\nTracking issue: https://github.com/rust-lang/rust/issues/49137", "tree": {"sha": "44ed0959b49bab0611c74b7e0dba49091857fe1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ed0959b49bab0611c74b7e0dba49091857fe1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02aedec72264b76dce679570ea64a799a82ad3ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlr8oB0ACgkQ/vbIBR0O\nATwx4xAAjEoga53KrFhcVDbmihK/a3n2F3NWIzUAT00jf4qF7BcZ1L7GiFIxAMQE\nOtoPE3rMBAEwgkx8YYfaHCbLkAp4mYCP95+SHkSobMhipDuBm/8MPqds1kKecN4P\n18b4bvdiqj1dRa8GIHIxGCMDVobjn8A20N7Mbuvmsndz35V7z1WUTczAtIRY/tvL\nSuVOpEc+2QdawWNliL9DZqzU46yUrIH5rg1a7auWKI8MyWF8ZodERcFvSrxgM/4l\nMseTI5sXQ/JLIexjaW/CmHBAbutOZQBIWmSAV9T8hLYF61TM9PzzmQ5az/VN42rx\nSMtXVvJBRxv7PDL5SuovNVeExntO20a77R0W4jfmxaK01a+hXbCtP1lFVQJnYNpY\nI8eVbzE7oZBXMk66jWvgBIIXO9FuxcxqLz0oaAsYcKqc3VDX1OMSwx6EZjiNxpiX\nPMQxmk3xMR97Yuv0NK+CgLd9rEeRinik7mD+x0N8t0xpDGVcJn8FIuZ0H4oH5rA0\njzK/47igdaqqiGvK9jG7QwaNVd2DCSL9rALdFYo8SA62JMQjG/fiqADD5rCTGZYS\nwzUV4FIjI5IYVRicSTVhrT5FzYg/jEmxufjk7x96XJUATa364/tiSwHi7JebnkQX\nG2c42wCDcLiwxL7PBQRaPyL8ph7z6mYJaUjSkcahAB8b5x8chbM=\n=Z5ks\n-----END PGP SIGNATURE-----", "payload": "tree 44ed0959b49bab0611c74b7e0dba49091857fe1b\nparent 63ea42fd3c82c629a0e5a8b981bdaeb30cdc0253\nparent 89d9ca9b50e01cbc5dc78a26f15cc8c435bbc5a4\nauthor kennytm <kennytm@gmail.com> 1526497672 +0800\ncommitter kennytm <kennytm@gmail.com> 1526505501 +0800\n\nRollup merge of #50808 - SimonSapin:nonzero, r=alexcrichton\n\nStabilize num::NonZeroU*\n\nTracking issue: https://github.com/rust-lang/rust/issues/49137\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02aedec72264b76dce679570ea64a799a82ad3ce", "html_url": "https://github.com/rust-lang/rust/commit/02aedec72264b76dce679570ea64a799a82ad3ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02aedec72264b76dce679570ea64a799a82ad3ce/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ea42fd3c82c629a0e5a8b981bdaeb30cdc0253", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ea42fd3c82c629a0e5a8b981bdaeb30cdc0253", "html_url": "https://github.com/rust-lang/rust/commit/63ea42fd3c82c629a0e5a8b981bdaeb30cdc0253"}, {"sha": "89d9ca9b50e01cbc5dc78a26f15cc8c435bbc5a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d9ca9b50e01cbc5dc78a26f15cc8c435bbc5a4", "html_url": "https://github.com/rust-lang/rust/commit/89d9ca9b50e01cbc5dc78a26f15cc8c435bbc5a4"}], "stats": {"total": 168, "additions": 18, "deletions": 150}, "files": [{"sha": "f7dd9d4f010a4235162b6239e93c893314f8fc14", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -102,7 +102,6 @@\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(needs_allocator)]\n-#![feature(nonzero)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n #![feature(pin)]"}, {"sha": "06fbfcecba801d31c2a2c3a34ef12ae10e433884", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -171,7 +171,6 @@ pub mod prelude;\n \n pub mod intrinsics;\n pub mod mem;\n-pub mod nonzero;\n pub mod ptr;\n pub mod hint;\n \n@@ -221,6 +220,7 @@ pub mod heap {\n \n // note: does not need to be public\n mod iter_private;\n+mod nonzero;\n mod tuple;\n mod unit;\n "}, {"sha": "ee5230cef8dd9597d89809ec0451bd0397d78fd6", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 3, "deletions": 93, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -9,103 +9,13 @@\n // except according to those terms.\n \n //! Exposes the NonZero lang item which provides optimization hints.\n-#![unstable(feature = \"nonzero\", reason = \"deprecated\", issue = \"49137\")]\n-#![rustc_deprecated(reason = \"use `std::ptr::NonNull` or `std::num::NonZero*` instead\",\n-                    since = \"1.26.0\")]\n-#![allow(deprecated)]\n \n use ops::CoerceUnsized;\n \n-/// Unsafe trait to indicate what types are usable with the NonZero struct\n-pub unsafe trait Zeroable {\n-    /// Whether this value is zero\n-    fn is_zero(&self) -> bool;\n-}\n-\n-macro_rules! impl_zeroable_for_pointer_types {\n-    ( $( $Ptr: ty )+ ) => {\n-        $(\n-            /// For fat pointers to be considered \"zero\", only the \"data\" part needs to be null.\n-            unsafe impl<T: ?Sized> Zeroable for $Ptr {\n-                #[inline]\n-                fn is_zero(&self) -> bool {\n-                    (*self).is_null()\n-                }\n-            }\n-        )+\n-    }\n-}\n-\n-macro_rules! impl_zeroable_for_integer_types {\n-    ( $( $Int: ty )+ ) => {\n-        $(\n-            unsafe impl Zeroable for $Int {\n-                #[inline]\n-                fn is_zero(&self) -> bool {\n-                    *self == 0\n-                }\n-            }\n-        )+\n-    }\n-}\n-\n-impl_zeroable_for_pointer_types! {\n-    *const T\n-    *mut T\n-}\n-\n-impl_zeroable_for_integer_types! {\n-    usize u8 u16 u32 u64 u128\n-    isize i8 i16 i32 i64 i128\n-}\n-\n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[lang = \"non_zero\"]\n-#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n-pub struct NonZero<T: Zeroable>(pub(crate) T);\n-\n-impl<T: Zeroable> NonZero<T> {\n-    /// Creates an instance of NonZero with the provided value.\n-    /// You must indeed ensure that the value is actually \"non-zero\".\n-    #[inline]\n-    pub const unsafe fn new_unchecked(inner: T) -> Self {\n-        NonZero(inner)\n-    }\n-\n-    /// Creates an instance of NonZero with the provided value.\n-    #[inline]\n-    pub fn new(inner: T) -> Option<Self> {\n-        if inner.is_zero() {\n-            None\n-        } else {\n-            Some(NonZero(inner))\n-        }\n-    }\n-\n-    /// Gets the inner value.\n-    pub fn get(self) -> T {\n-        self.0\n-    }\n-}\n-\n-impl<T: Zeroable+CoerceUnsized<U>, U: Zeroable> CoerceUnsized<NonZero<U>> for NonZero<T> {}\n-\n-impl<'a, T: ?Sized> From<&'a mut T> for NonZero<*mut T> {\n-    fn from(reference: &'a mut T) -> Self {\n-        NonZero(reference)\n-    }\n-}\n-\n-impl<'a, T: ?Sized> From<&'a mut T> for NonZero<*const T> {\n-    fn from(reference: &'a mut T) -> Self {\n-        let ptr: *mut T = reference;\n-        NonZero(ptr)\n-    }\n-}\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n \n-impl<'a, T: ?Sized> From<&'a T> for NonZero<*const T> {\n-    fn from(reference: &'a T) -> Self {\n-        NonZero(reference)\n-    }\n-}\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<NonZero<U>> for NonZero<T> {}"}, {"sha": "6df8ca98ba92c45976fa477b31ae53660891a9d3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -16,15 +16,14 @@ use convert::TryFrom;\n use fmt;\n use intrinsics;\n use mem;\n-#[allow(deprecated)] use nonzero::NonZero;\n+use nonzero::NonZero;\n use ops;\n use str::FromStr;\n \n macro_rules! impl_nonzero_fmt {\n-    ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+    ( ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n         $(\n-            #[$stability]\n-            #[allow(deprecated)]\n+            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n             impl fmt::$Trait for $Ty {\n                 #[inline]\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -36,7 +35,7 @@ macro_rules! impl_nonzero_fmt {\n }\n \n macro_rules! nonzero_integers {\n-    ( #[$stability: meta] #[$deprecation: meta] $( $Ty: ident($Int: ty); )+ ) => {\n+    ( $( $Ty: ident($Int: ty); )+ ) => {\n         $(\n             /// An integer that is known not to equal zero.\n             ///\n@@ -47,27 +46,24 @@ macro_rules! nonzero_integers {\n             /// use std::mem::size_of;\n             /// assert_eq!(size_of::<Option<std::num::NonZeroU32>>(), size_of::<u32>());\n             /// ```\n-            #[$stability]\n-            #[$deprecation]\n-            #[allow(deprecated)]\n+            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n             #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n             pub struct $Ty(NonZero<$Int>);\n \n-            #[allow(deprecated)]\n             impl $Ty {\n                 /// Create a non-zero without checking the value.\n                 ///\n                 /// # Safety\n                 ///\n                 /// The value must not be zero.\n-                #[$stability]\n+                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     $Ty(NonZero(n))\n                 }\n \n                 /// Create a non-zero if the given value is not zero.\n-                #[$stability]\n+                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n@@ -78,7 +74,7 @@ macro_rules! nonzero_integers {\n                 }\n \n                 /// Returns the value as a primitive type.\n-                #[$stability]\n+                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub fn get(self) -> $Int {\n                     self.0 .0\n@@ -87,16 +83,13 @@ macro_rules! nonzero_integers {\n             }\n \n             impl_nonzero_fmt! {\n-                #[$stability]\n                 (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n             }\n         )+\n     }\n }\n \n nonzero_integers! {\n-    #[unstable(feature = \"nonzero\", issue = \"49137\")]\n-    #[allow(deprecated)]  // Redundant, works around \"error: inconsistent lockstep iteration\"\n     NonZeroU8(u8);\n     NonZeroU16(u16);\n     NonZeroU32(u32);\n@@ -105,19 +98,6 @@ nonzero_integers! {\n     NonZeroUsize(usize);\n }\n \n-nonzero_integers! {\n-    #[unstable(feature = \"nonzero\", issue = \"49137\")]\n-    #[rustc_deprecated(since = \"1.26.0\", reason = \"\\\n-        signed non-zero integers are considered for removal due to lack of known use cases. \\\n-        If you\u2019re using them, please comment on https://github.com/rust-lang/rust/issues/49137\")]\n-    NonZeroI8(i8);\n-    NonZeroI16(i16);\n-    NonZeroI32(i32);\n-    NonZeroI64(i64);\n-    NonZeroI128(i128);\n-    NonZeroIsize(isize);\n-}\n-\n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n /// Operations like `+` on `u32` values is intended to never overflow,"}, {"sha": "63bcc024020155fe753716f68dc2d6f1e2e2c046", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -23,7 +23,7 @@ use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n use mem;\n-#[allow(deprecated)] use nonzero::NonZero;\n+use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n \n@@ -2742,7 +2742,6 @@ impl<T: ?Sized> PartialOrd for *mut T {\n #[unstable(feature = \"ptr_internals\", issue = \"0\",\n            reason = \"use NonNull instead and consider PhantomData<T> \\\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n-#[allow(deprecated)]\n #[doc(hidden)]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n@@ -2790,7 +2789,6 @@ impl<T: Sized> Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     ///\n@@ -2855,15 +2853,13 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n         Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n         Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n@@ -2896,7 +2892,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub struct NonNull<T: ?Sized> {\n-    #[allow(deprecated)] pointer: NonZero<*const T>,\n+    pointer: NonZero<*const T>,\n }\n \n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n@@ -2923,7 +2919,6 @@ impl<T: Sized> NonNull<T> {\n     }\n }\n \n-#[allow(deprecated)]\n impl<T: ?Sized> NonNull<T> {\n     /// Creates a new `NonNull`.\n     ///\n@@ -3054,15 +3049,13 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }"}, {"sha": "7fb4b503c01efea48e8acc5e46bb5efc8c356486", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -26,7 +26,6 @@\n #![feature(iterator_step_by)]\n #![feature(iterator_flatten)]\n #![feature(iterator_repeat_with)]\n-#![feature(nonzero)]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}, {"sha": "ac6ff6831adb804ceb61a80d6a0cbf16abfb13d3", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -56,7 +56,6 @@\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(non_exhaustive)]\n-#![feature(nonzero)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n #![feature(optin_builtin_traits)]"}, {"sha": "9a6705fe9cac32b6cad2d276f672abef2e5b6d45", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -21,7 +21,6 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(collections_range)]\n-#![feature(nonzero)]\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]\n #![feature(unsize)]"}, {"sha": "ecced1b81682e94d365b34389a4234a4ff868700", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -30,7 +30,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(nonzero)]\n #![feature(inclusive_range_methods)]\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]"}, {"sha": "9cdc6a21622467af00052f3b006b99c20b71e7a9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -277,7 +277,6 @@\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n-#![feature(nonzero)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]"}, {"sha": "3f90c1fa3b1f2cf39c1d60b0f4ec1d32e9d5a940", "filename": "src/libstd/num.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -21,12 +21,8 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::Wrapping;\n \n-#[unstable(feature = \"nonzero\", issue = \"49137\")]\n-#[allow(deprecated)]\n-pub use core::num::{\n-    NonZeroU8, NonZeroI8, NonZeroU16, NonZeroI16, NonZeroU32, NonZeroI32,\n-    NonZeroU64, NonZeroI64, NonZeroU128, NonZeroI128, NonZeroUsize, NonZeroIsize,\n-};\n+#[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n \n #[cfg(test)] use fmt;\n #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};"}, {"sha": "d5f3e88fd52e86f31301503ba0004ee8d0cb9379", "filename": "src/test/run-pass/ctfe/tuple-struct-constructors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -10,11 +10,9 @@\n \n // https://github.com/rust-lang/rust/issues/41898\n \n-#![feature(nonzero, const_fn)]\n-extern crate core;\n-use core::nonzero::NonZero;\n+use std::num::NonZeroU64;\n \n fn main() {\n-    const FOO: NonZero<u64> = unsafe { NonZero::new_unchecked(2) };\n+    const FOO: NonZeroU64 = unsafe { NonZeroU64::new_unchecked(2) };\n     if let FOO = FOO {}\n }"}, {"sha": "34ed589d418c16e570d9adadd77b03da8f5e623a", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(nonzero, core)]\n-\n use std::mem::size_of;\n use std::num::NonZeroUsize;\n use std::ptr::NonNull;"}, {"sha": "17e7a21cd02e52ca0305dcae1fdb4dba101fd05e", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aedec72264b76dce679570ea64a799a82ad3ce/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=02aedec72264b76dce679570ea64a799a82ad3ce", "patch": "@@ -22,7 +22,6 @@\n // padding and overall computed sizes can be quite different.\n \n #![feature(start)]\n-#![feature(nonzero)]\n #![allow(dead_code)]\n \n use std::num::NonZeroU32;"}]}