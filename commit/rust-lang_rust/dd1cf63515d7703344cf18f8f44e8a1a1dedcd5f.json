{"sha": "dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMWNmNjM1MTVkNzcwMzM0NGNmMThmOGY0NGU4YTFhMWRlZGNkNWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-19T21:20:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-19T21:28:04Z"}, "message": "Build records in two phases to avoid cleanups on partial records", "tree": {"sha": "4c6a59a66e5f373d6fc09936233833e19e469e2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c6a59a66e5f373d6fc09936233833e19e469e2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f", "html_url": "https://github.com/rust-lang/rust/commit/dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432e931a2ab6a0e642a39f71b15e86dd3bfe3c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/432e931a2ab6a0e642a39f71b15e86dd3bfe3c9a", "html_url": "https://github.com/rust-lang/rust/commit/432e931a2ab6a0e642a39f71b15e86dd3bfe3c9a"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "fa56780e8db3f91473447390eb10ed17998ea59f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f", "patch": "@@ -3973,6 +3973,21 @@ fn trans_rec(cx: @block_ctxt, fields: [ast::field],\n     }\n     let ty_fields: [ty::field] = [];\n     alt ty::struct(bcx_tcx(cx), t) { ty::ty_rec(flds) { ty_fields = flds; } }\n+\n+    tag fieldsrc {\n+        provided(lval_result);\n+        inherited(ValueRef);\n+    }\n+    type fieldval = {\n+        dst: ValueRef,\n+        src: fieldsrc,\n+        ty: ty::t\n+    };\n+    let fieldvals: [fieldval] = [];\n+\n+    // We build the record in two stages so that we don't have to clean up a\n+    // partial record if we fail: first collect all the values, then construct\n+    // the record.\n     for tf: ty::field in ty_fields {\n         let e_ty = tf.mt.ty;\n         // FIXME: constraint on argument?\n@@ -3984,21 +3999,43 @@ fn trans_rec(cx: @block_ctxt, fields: [ast::field],\n             if str::eq(f.node.ident, tf.ident) {\n                 expr_provided = true;\n                 let lv = trans_lval(bcx, f.node.expr);\n-                bcx =\n-                    move_val_if_temp(lv.bcx, INIT, dst_res.val, lv, e_ty);\n+                bcx = lv.bcx;\n+                fieldvals += [{\n+                    dst: dst_res.val,\n+                    src: provided(lv),\n+                    ty: e_ty\n+                }];\n                 break;\n             }\n         }\n         if !expr_provided {\n             // FIXME: constraint on argument?\n             check type_is_tup_like(bcx, t);\n             let src_res = GEP_tup_like(bcx, t, base_val, [0, i]);\n-            src_res =\n-                rslt(src_res.bcx, load_if_immediate(bcx, src_res.val, e_ty));\n-            bcx = copy_val(src_res.bcx, INIT, dst_res.val, src_res.val, e_ty);\n+            bcx = src_res.bcx;\n+            fieldvals += [{\n+                dst: dst_res.val,\n+                src: inherited(src_res.val),\n+                ty: e_ty\n+            }];\n         }\n         i += 1;\n     }\n+\n+    // Now build the record\n+    for fieldval in fieldvals {\n+        alt fieldval.src {\n+          provided(lv) {\n+            bcx = move_val_if_temp(bcx, INIT, fieldval.dst,\n+                                   lv, fieldval.ty);\n+          }\n+          inherited(val) {\n+            let val = load_if_immediate(bcx, val, fieldval.ty);\n+            bcx = copy_val(bcx, INIT, fieldval.dst, val, fieldval.ty);\n+          }\n+        }\n+    }\n+\n     add_clean_temp(cx, rec_val, t);\n     ret rslt(bcx, rec_val);\n }"}, {"sha": "4e4afd31a8428601a23b66d42588faf5c1e6c273", "filename": "src/test/run-fail/unwind-rec2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec2.rs?ref=dd1cf63515d7703344cf18f8f44e8a1a1dedcd5f", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern:fail\n+\n+fn build1() -> [int] {\n+    [0,0,0,0,0,0,0]\n+}\n+\n+fn build2() -> [int] {\n+    fail;\n+}\n+\n+fn main() {\n+    let blk = {\n+        node: build1(),\n+        span: build2()\n+    };\n+}\n\\ No newline at end of file"}]}