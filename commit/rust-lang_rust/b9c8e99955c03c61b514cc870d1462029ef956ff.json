{"sha": "b9c8e99955c03c61b514cc870d1462029ef956ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzhlOTk5NTVjMDNjNjFiNTE0Y2M4NzBkMTQ2MjAyOWVmOTU2ZmY=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-08T01:59:57Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-09T23:07:25Z"}, "message": "Move Fn to module.", "tree": {"sha": "e794493017b03c231a285db4f482552c733d687c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e794493017b03c231a285db4f482552c733d687c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c8e99955c03c61b514cc870d1462029ef956ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c8e99955c03c61b514cc870d1462029ef956ff", "html_url": "https://github.com/rust-lang/rust/commit/b9c8e99955c03c61b514cc870d1462029ef956ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c8e99955c03c61b514cc870d1462029ef956ff/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cee5a2dd20a93145026119f46f924c7649e4b21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cee5a2dd20a93145026119f46f924c7649e4b21c", "html_url": "https://github.com/rust-lang/rust/commit/cee5a2dd20a93145026119f46f924c7649e4b21c"}], "stats": {"total": 399, "additions": 206, "deletions": 193}, "files": [{"sha": "62bf69336a398ebdb6015319562fac3ccbb19f46", "filename": "src/libcore/ops/function.rs", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/b9c8e99955c03c61b514cc870d1462029ef956ff/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c8e99955c03c61b514cc870d1462029ef956ff/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=b9c8e99955c03c61b514cc870d1462029ef956ff", "patch": "@@ -0,0 +1,194 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// A version of the call operator that takes an immutable receiver.\n+///\n+/// # Examples\n+///\n+/// Closures automatically implement this trait, which allows them to be\n+/// invoked. Note, however, that `Fn` takes an immutable reference to any\n+/// captured variables. To take a mutable capture, implement [`FnMut`], and to\n+/// consume the capture, implement [`FnOnce`].\n+///\n+/// [`FnMut`]: trait.FnMut.html\n+/// [`FnOnce`]: trait.FnOnce.html\n+///\n+/// ```\n+/// let square = |x| x * x;\n+/// assert_eq!(square(5), 25);\n+/// ```\n+///\n+/// Closures can also be passed to higher-level functions through a `Fn`\n+/// parameter (or a `FnMut` or `FnOnce` parameter, which are supertraits of\n+/// `Fn`).\n+///\n+/// ```\n+/// fn call_with_one<F>(func: F) -> usize\n+///     where F: Fn(usize) -> usize {\n+///     func(1)\n+/// }\n+///\n+/// let double = |x| x * 2;\n+/// assert_eq!(call_with_one(double), 2);\n+/// ```\n+#[lang = \"fn\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_paren_sugar]\n+#[fundamental] // so that regex can rely that `&str: !FnMut`\n+pub trait Fn<Args> : FnMut<Args> {\n+    /// This is called when the call operator is used.\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n+    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n+}\n+\n+/// A version of the call operator that takes a mutable receiver.\n+///\n+/// # Examples\n+///\n+/// Closures that mutably capture variables automatically implement this trait,\n+/// which allows them to be invoked.\n+///\n+/// ```\n+/// let mut x = 5;\n+/// {\n+///     let mut square_x = || x *= x;\n+///     square_x();\n+/// }\n+/// assert_eq!(x, 25);\n+/// ```\n+///\n+/// Closures can also be passed to higher-level functions through a `FnMut`\n+/// parameter (or a `FnOnce` parameter, which is a supertrait of `FnMut`).\n+///\n+/// ```\n+/// fn do_twice<F>(mut func: F)\n+///     where F: FnMut()\n+/// {\n+///     func();\n+///     func();\n+/// }\n+///\n+/// let mut x: usize = 1;\n+/// {\n+///     let add_two_to_x = || x += 2;\n+///     do_twice(add_two_to_x);\n+/// }\n+///\n+/// assert_eq!(x, 5);\n+/// ```\n+#[lang = \"fn_mut\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_paren_sugar]\n+#[fundamental] // so that regex can rely that `&str: !FnMut`\n+pub trait FnMut<Args> : FnOnce<Args> {\n+    /// This is called when the call operator is used.\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n+    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n+}\n+\n+/// A version of the call operator that takes a by-value receiver.\n+///\n+/// # Examples\n+///\n+/// By-value closures automatically implement this trait, which allows them to\n+/// be invoked.\n+///\n+/// ```\n+/// let x = 5;\n+/// let square_x = move || x * x;\n+/// assert_eq!(square_x(), 25);\n+/// ```\n+///\n+/// By-value Closures can also be passed to higher-level functions through a\n+/// `FnOnce` parameter.\n+///\n+/// ```\n+/// fn consume_with_relish<F>(func: F)\n+///     where F: FnOnce() -> String\n+/// {\n+///     // `func` consumes its captured variables, so it cannot be run more\n+///     // than once\n+///     println!(\"Consumed: {}\", func());\n+///\n+///     println!(\"Delicious!\");\n+///\n+///     // Attempting to invoke `func()` again will throw a `use of moved\n+///     // value` error for `func`\n+/// }\n+///\n+/// let x = String::from(\"x\");\n+/// let consume_and_return_x = move || x;\n+/// consume_with_relish(consume_and_return_x);\n+///\n+/// // `consume_and_return_x` can no longer be invoked at this point\n+/// ```\n+#[lang = \"fn_once\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_paren_sugar]\n+#[fundamental] // so that regex can rely that `&str: !FnMut`\n+pub trait FnOnce<Args> {\n+    /// The returned type after the call operator is used.\n+    #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]\n+    type Output;\n+\n+    /// This is called when the call operator is used.\n+    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+mod impls {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<'a,A,F:?Sized> Fn<A> for &'a F\n+        where F : Fn<A>\n+    {\n+        extern \"rust-call\" fn call(&self, args: A) -> F::Output {\n+            (**self).call(args)\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<'a,A,F:?Sized> FnMut<A> for &'a F\n+        where F : Fn<A>\n+    {\n+        extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n+            (**self).call(args)\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<'a,A,F:?Sized> FnOnce<A> for &'a F\n+        where F : Fn<A>\n+    {\n+        type Output = F::Output;\n+\n+        extern \"rust-call\" fn call_once(self, args: A) -> F::Output {\n+            (*self).call(args)\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<'a,A,F:?Sized> FnMut<A> for &'a mut F\n+        where F : FnMut<A>\n+    {\n+        extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n+            (*self).call_mut(args)\n+        }\n+    }\n+\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    impl<'a,A,F:?Sized> FnOnce<A> for &'a mut F\n+        where F : FnMut<A>\n+    {\n+        type Output = F::Output;\n+        extern \"rust-call\" fn call_once(mut self, args: A) -> F::Output {\n+            (*self).call_mut(args)\n+        }\n+    }\n+}"}, {"sha": "7f452fd791fb5392dd37ca24dd8292f15b4b8222", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 4, "deletions": 185, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/b9c8e99955c03c61b514cc870d1462029ef956ff/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c8e99955c03c61b514cc870d1462029ef956ff/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=b9c8e99955c03c61b514cc870d1462029ef956ff", "patch": "@@ -147,8 +147,12 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+mod function;\n mod range;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use self::function::{Fn, FnMut, FnOnce};\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n \n@@ -2200,191 +2204,6 @@ impl<'a, T: ?Sized> DerefMut for &'a mut T {\n     fn deref_mut(&mut self) -> &mut T { *self }\n }\n \n-/// A version of the call operator that takes an immutable receiver.\n-///\n-/// # Examples\n-///\n-/// Closures automatically implement this trait, which allows them to be\n-/// invoked. Note, however, that `Fn` takes an immutable reference to any\n-/// captured variables. To take a mutable capture, implement [`FnMut`], and to\n-/// consume the capture, implement [`FnOnce`].\n-///\n-/// [`FnMut`]: trait.FnMut.html\n-/// [`FnOnce`]: trait.FnOnce.html\n-///\n-/// ```\n-/// let square = |x| x * x;\n-/// assert_eq!(square(5), 25);\n-/// ```\n-///\n-/// Closures can also be passed to higher-level functions through a `Fn`\n-/// parameter (or a `FnMut` or `FnOnce` parameter, which are supertraits of\n-/// `Fn`).\n-///\n-/// ```\n-/// fn call_with_one<F>(func: F) -> usize\n-///     where F: Fn(usize) -> usize {\n-///     func(1)\n-/// }\n-///\n-/// let double = |x| x * 2;\n-/// assert_eq!(call_with_one(double), 2);\n-/// ```\n-#[lang = \"fn\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_paren_sugar]\n-#[fundamental] // so that regex can rely that `&str: !FnMut`\n-pub trait Fn<Args> : FnMut<Args> {\n-    /// This is called when the call operator is used.\n-    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n-}\n-\n-/// A version of the call operator that takes a mutable receiver.\n-///\n-/// # Examples\n-///\n-/// Closures that mutably capture variables automatically implement this trait,\n-/// which allows them to be invoked.\n-///\n-/// ```\n-/// let mut x = 5;\n-/// {\n-///     let mut square_x = || x *= x;\n-///     square_x();\n-/// }\n-/// assert_eq!(x, 25);\n-/// ```\n-///\n-/// Closures can also be passed to higher-level functions through a `FnMut`\n-/// parameter (or a `FnOnce` parameter, which is a supertrait of `FnMut`).\n-///\n-/// ```\n-/// fn do_twice<F>(mut func: F)\n-///     where F: FnMut()\n-/// {\n-///     func();\n-///     func();\n-/// }\n-///\n-/// let mut x: usize = 1;\n-/// {\n-///     let add_two_to_x = || x += 2;\n-///     do_twice(add_two_to_x);\n-/// }\n-///\n-/// assert_eq!(x, 5);\n-/// ```\n-#[lang = \"fn_mut\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_paren_sugar]\n-#[fundamental] // so that regex can rely that `&str: !FnMut`\n-pub trait FnMut<Args> : FnOnce<Args> {\n-    /// This is called when the call operator is used.\n-    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n-}\n-\n-/// A version of the call operator that takes a by-value receiver.\n-///\n-/// # Examples\n-///\n-/// By-value closures automatically implement this trait, which allows them to\n-/// be invoked.\n-///\n-/// ```\n-/// let x = 5;\n-/// let square_x = move || x * x;\n-/// assert_eq!(square_x(), 25);\n-/// ```\n-///\n-/// By-value Closures can also be passed to higher-level functions through a\n-/// `FnOnce` parameter.\n-///\n-/// ```\n-/// fn consume_with_relish<F>(func: F)\n-///     where F: FnOnce() -> String\n-/// {\n-///     // `func` consumes its captured variables, so it cannot be run more\n-///     // than once\n-///     println!(\"Consumed: {}\", func());\n-///\n-///     println!(\"Delicious!\");\n-///\n-///     // Attempting to invoke `func()` again will throw a `use of moved\n-///     // value` error for `func`\n-/// }\n-///\n-/// let x = String::from(\"x\");\n-/// let consume_and_return_x = move || x;\n-/// consume_with_relish(consume_and_return_x);\n-///\n-/// // `consume_and_return_x` can no longer be invoked at this point\n-/// ```\n-#[lang = \"fn_once\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_paren_sugar]\n-#[fundamental] // so that regex can rely that `&str: !FnMut`\n-pub trait FnOnce<Args> {\n-    /// The returned type after the call operator is used.\n-    #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]\n-    type Output;\n-\n-    /// This is called when the call operator is used.\n-    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-}\n-\n-mod impls {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> Fn<A> for &'a F\n-        where F : Fn<A>\n-    {\n-        extern \"rust-call\" fn call(&self, args: A) -> F::Output {\n-            (**self).call(args)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnMut<A> for &'a F\n-        where F : Fn<A>\n-    {\n-        extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n-            (**self).call(args)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnOnce<A> for &'a F\n-        where F : Fn<A>\n-    {\n-        type Output = F::Output;\n-\n-        extern \"rust-call\" fn call_once(self, args: A) -> F::Output {\n-            (*self).call(args)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnMut<A> for &'a mut F\n-        where F : FnMut<A>\n-    {\n-        extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n-            (*self).call_mut(args)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<'a,A,F:?Sized> FnOnce<A> for &'a mut F\n-        where F : FnMut<A>\n-    {\n-        type Output = F::Output;\n-        extern \"rust-call\" fn call_once(mut self, args: A) -> F::Output {\n-            (*self).call_mut(args)\n-        }\n-    }\n-}\n-\n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee.\n ///"}, {"sha": "c3d46ff5314fe0b6cd6d0c05e12419e06a5074cb", "filename": "src/test/codegen-units/item-collection/function-as-argument.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9c8e99955c03c61b514cc870d1462029ef956ff/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c8e99955c03c61b514cc870d1462029ef956ff/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs?ref=b9c8e99955c03c61b514cc870d1462029ef956ff", "patch": "@@ -28,12 +28,12 @@ fn main() {\n \n     //~ TRANS_ITEM fn function_as_argument::take_fn_once[0]<u32, &str, fn(u32, &str)>\n     //~ TRANS_ITEM fn function_as_argument::function[0]<u32, &str>\n-    //~ TRANS_ITEM fn core::ops[0]::FnOnce[0]::call_once[0]<fn(u32, &str), (u32, &str)>\n+    //~ TRANS_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(u32, &str), (u32, &str)>\n     take_fn_once(function, 0u32, \"abc\");\n \n     //~ TRANS_ITEM fn function_as_argument::take_fn_once[0]<char, f64, fn(char, f64)>\n     //~ TRANS_ITEM fn function_as_argument::function[0]<char, f64>\n-    //~ TRANS_ITEM fn core::ops[0]::FnOnce[0]::call_once[0]<fn(char, f64), (char, f64)>\n+    //~ TRANS_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(char, f64), (char, f64)>\n     take_fn_once(function, 'c', 0f64);\n \n     //~ TRANS_ITEM fn function_as_argument::take_fn_pointer[0]<i32, ()>"}, {"sha": "21c9c254e51cfe7cffaa492f19449d3a9ee284c2", "filename": "src/test/codegen-units/item-collection/trait-method-as-argument.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9c8e99955c03c61b514cc870d1462029ef956ff/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c8e99955c03c61b514cc870d1462029ef956ff/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs?ref=b9c8e99955c03c61b514cc870d1462029ef956ff", "patch": "@@ -40,27 +40,27 @@ fn take_foo_mut<T, F: FnMut(T) -> T>(mut f: F, arg: T) -> T {\n fn main() {\n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_once[0]<u32, fn(u32) -> u32>\n     //~ TRANS_ITEM fn trait_method_as_argument::{{impl}}[0]::foo[0]\n-    //~ TRANS_ITEM fn core::ops[0]::FnOnce[0]::call_once[0]<fn(u32) -> u32, (u32)>\n+    //~ TRANS_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(u32) -> u32, (u32)>\n     take_foo_once(Trait::foo, 0u32);\n \n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_once[0]<char, fn(char) -> char>\n     //~ TRANS_ITEM fn trait_method_as_argument::Trait[0]::foo[0]<char>\n-    //~ TRANS_ITEM fn core::ops[0]::FnOnce[0]::call_once[0]<fn(char) -> char, (char)>\n+    //~ TRANS_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(char) -> char, (char)>\n     take_foo_once(Trait::foo, 'c');\n \n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo[0]<u32, fn(u32) -> u32>\n-    //~ TRANS_ITEM fn core::ops[0]::Fn[0]::call[0]<fn(u32) -> u32, (u32)>\n+    //~ TRANS_ITEM fn core::ops[0]::function[0]::Fn[0]::call[0]<fn(u32) -> u32, (u32)>\n     take_foo(Trait::foo, 0u32);\n \n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo[0]<char, fn(char) -> char>\n-    //~ TRANS_ITEM fn core::ops[0]::Fn[0]::call[0]<fn(char) -> char, (char)>\n+    //~ TRANS_ITEM fn core::ops[0]::function[0]::Fn[0]::call[0]<fn(char) -> char, (char)>\n     take_foo(Trait::foo, 'c');\n \n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_mut[0]<u32, fn(u32) -> u32>\n-    //~ TRANS_ITEM fn core::ops[0]::FnMut[0]::call_mut[0]<fn(char) -> char, (char)>\n+    //~ TRANS_ITEM fn core::ops[0]::function[0]::FnMut[0]::call_mut[0]<fn(char) -> char, (char)>\n     take_foo_mut(Trait::foo, 0u32);\n \n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_mut[0]<char, fn(char) -> char>\n-    //~ TRANS_ITEM fn core::ops[0]::FnMut[0]::call_mut[0]<fn(u32) -> u32, (u32)>\n+    //~ TRANS_ITEM fn core::ops[0]::function[0]::FnMut[0]::call_mut[0]<fn(u32) -> u32, (u32)>\n     take_foo_mut(Trait::foo, 'c');\n }"}]}