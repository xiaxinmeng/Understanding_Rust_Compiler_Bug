{"sha": "1ac9400100d276dd169e56ce6df1ebbd8a75f961", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYzk0MDAxMDBkMjc2ZGQxNjllNTZjZTZkZjFlYmJkOGE3NWY5NjE=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-21T13:01:37Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-21T13:01:37Z"}, "message": "func gen: seperate generation form position(2)", "tree": {"sha": "fa6f3c2753a29bc689da68aae84b17a6cd867858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6f3c2753a29bc689da68aae84b17a6cd867858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac9400100d276dd169e56ce6df1ebbd8a75f961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac9400100d276dd169e56ce6df1ebbd8a75f961", "html_url": "https://github.com/rust-lang/rust/commit/1ac9400100d276dd169e56ce6df1ebbd8a75f961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac9400100d276dd169e56ce6df1ebbd8a75f961/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b", "html_url": "https://github.com/rust-lang/rust/commit/87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b"}], "stats": {"total": 107, "additions": 63, "deletions": 44}, "files": [{"sha": "8e446549ba2fa30b711a09373caac8391c8eea1c", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 63, "deletions": 44, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/1ac9400100d276dd169e56ce6df1ebbd8a75f961/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac9400100d276dd169e56ce6df1ebbd8a75f961/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=1ac9400100d276dd169e56ce6df1ebbd8a75f961", "patch": "@@ -85,9 +85,10 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         None => None,\n     };\n \n-    let function_builder = FunctionBuilder::from_call(ctx, &call, &path, target_module)?;\n+    let (function_builder, inserting_offset, file) =\n+        FunctionBuilder::from_call(ctx, &call, &path, target_module)?;\n     let target = call.syntax().text_range();\n-    add_func_to_accumulator(acc, ctx, target, function_builder, None)\n+    add_func_to_accumulator(acc, ctx, target, function_builder, inserting_offset, file, None)\n }\n \n fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -108,7 +109,7 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         ctx.sema.find_node_at_offset_with_macros(file.syntax(), range.range.start())?;\n     let impl_ = find_struct_impl(ctx, &adt_source, fn_name.text().as_str())?;\n \n-    let function_builder = FunctionBuilder::from_method_call(\n+    let (function_builder, inserting_offset, file) = FunctionBuilder::from_method_call(\n         ctx,\n         &call,\n         &fn_name,\n@@ -119,22 +120,24 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     )?;\n     let target = call.syntax().text_range();\n     let adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n-    add_func_to_accumulator(acc, ctx, target, function_builder, adt_name)\n+    add_func_to_accumulator(acc, ctx, target, function_builder, inserting_offset, file, adt_name)\n }\n \n fn add_func_to_accumulator(\n     acc: &mut Assists,\n     ctx: &AssistContext,\n     target: TextRange,\n     function_builder: FunctionBuilder,\n+    insert_offset: TextSize,\n+    file: FileId,\n     adt_name: Option<hir::Name>,\n ) -> Option<()> {\n     acc.add(\n         AssistId(\"generate_function\", AssistKind::Generate),\n         format!(\"Generate `{}` method\", function_builder.fn_name),\n         target,\n         |builder| {\n-            let (function_template, insert_offset, file) = function_builder.render();\n+            let function_template = function_builder.render();\n             let mut func = function_template.to_string(ctx.config.snippet_cap);\n             if let Some(name) = adt_name {\n                 func = format!(\"\\nimpl {} {{\\n{}\\n}}\", name, func);\n@@ -204,7 +207,7 @@ impl FunctionBuilder {\n         call: &ast::CallExpr,\n         path: &ast::Path,\n         target_module: Option<hir::Module>,\n-    ) -> Option<Self> {\n+    ) -> Option<(Self, TextSize, FileId)> {\n         let mut file = ctx.frange.file_id;\n         let target = match &target_module {\n             Some(target_module) => {\n@@ -226,17 +229,28 @@ impl FunctionBuilder {\n         let (ret_type, should_focus_return_type) =\n             make_return_type(ctx, &ast::Expr::CallExpr(call.clone()), target_module);\n \n-        Some(Self {\n-            target,\n-            fn_name,\n-            type_params,\n-            params,\n-            ret_type,\n-            should_focus_return_type,\n+        let insert_offset = match &target {\n+            GeneratedFunctionTarget::BehindItem(it) => it.text_range().end(),\n+            GeneratedFunctionTarget::InEmptyItemList(it) => {\n+                it.text_range().start() + TextSize::of('{')\n+            }\n+        };\n+\n+        Some((\n+            Self {\n+                target,\n+                fn_name,\n+                type_params,\n+                params,\n+                ret_type,\n+                should_focus_return_type,\n+                file,\n+                needs_pub,\n+                is_async,\n+            },\n+            insert_offset,\n             file,\n-            needs_pub,\n-            is_async,\n-        })\n+        ))\n     }\n \n     fn from_method_call(\n@@ -247,7 +261,7 @@ impl FunctionBuilder {\n         file: FileId,\n         target_module: Module,\n         current_module: Module,\n-    ) -> Option<Self> {\n+    ) -> Option<(Self, TextSize, FileId)> {\n         let target = match impl_ {\n             Some(impl_) => next_space_for_fn_in_impl(&impl_)?,\n             None => {\n@@ -269,20 +283,31 @@ impl FunctionBuilder {\n         let (ret_type, should_focus_return_type) =\n             make_return_type(ctx, &ast::Expr::MethodCallExpr(call.clone()), target_module);\n \n-        Some(Self {\n-            target,\n-            fn_name,\n-            type_params,\n-            params,\n-            ret_type,\n-            should_focus_return_type,\n+        let insert_offset = match &target {\n+            GeneratedFunctionTarget::BehindItem(it) => it.text_range().end(),\n+            GeneratedFunctionTarget::InEmptyItemList(it) => {\n+                it.text_range().start() + TextSize::of('{')\n+            }\n+        };\n+\n+        Some((\n+            Self {\n+                target,\n+                fn_name,\n+                type_params,\n+                params,\n+                ret_type,\n+                should_focus_return_type,\n+                file,\n+                needs_pub,\n+                is_async,\n+            },\n+            insert_offset,\n             file,\n-            needs_pub,\n-            is_async,\n-        })\n+        ))\n     }\n \n-    fn render(self) -> (FunctionTemplate, TextSize, FileId) {\n+    fn render(self) -> FunctionTemplate {\n         let placeholder_expr = make::ext::expr_todo();\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n         let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n@@ -298,36 +323,30 @@ impl FunctionBuilder {\n         let leading_ws;\n         let trailing_ws;\n \n-        let insert_offset = match self.target {\n+        match self.target {\n             GeneratedFunctionTarget::BehindItem(it) => {\n                 let indent = IndentLevel::from_node(&it);\n                 leading_ws = format!(\"\\n\\n{}\", indent);\n                 fn_def = fn_def.indent(indent);\n                 trailing_ws = String::new();\n-                it.text_range().end()\n             }\n             GeneratedFunctionTarget::InEmptyItemList(it) => {\n                 let indent = IndentLevel::from_node(&it);\n                 leading_ws = format!(\"\\n{}\", indent + 1);\n                 fn_def = fn_def.indent(indent + 1);\n                 trailing_ws = format!(\"\\n{}\", indent);\n-                it.text_range().start() + TextSize::of('{')\n             }\n         };\n \n-        (\n-            FunctionTemplate {\n-                leading_ws,\n-                ret_type: fn_def.ret_type(),\n-                // PANIC: we guarantee we always create a function body with a tail expr\n-                tail_expr: fn_def.body().unwrap().tail_expr().unwrap(),\n-                should_focus_return_type: self.should_focus_return_type,\n-                fn_def,\n-                trailing_ws,\n-            },\n-            insert_offset,\n-            self.file,\n-        )\n+        FunctionTemplate {\n+            leading_ws,\n+            ret_type: fn_def.ret_type(),\n+            // PANIC: we guarantee we always create a function body with a tail expr\n+            tail_expr: fn_def.body().unwrap().tail_expr().unwrap(),\n+            should_focus_return_type: self.should_focus_return_type,\n+            fn_def,\n+            trailing_ws,\n+        }\n     }\n }\n "}]}