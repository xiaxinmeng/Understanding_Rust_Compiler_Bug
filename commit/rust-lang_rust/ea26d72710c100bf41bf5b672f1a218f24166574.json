{"sha": "ea26d72710c100bf41bf5b672f1a218f24166574", "node_id": "C_kwDOAAsO6NoAKGVhMjZkNzI3MTBjMTAwYmY0MWJmNWI2NzJmMWEyMThmMjQxNjY1NzQ", "commit": {"author": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2022-03-26T15:47:13Z"}, "committer": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2022-03-26T15:47:13Z"}, "message": "Move resolve_path to rustc_builtin_macros and make it private", "tree": {"sha": "ec804bcc2d3e2b6d7f4ca6e087ea63ae99d3c136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec804bcc2d3e2b6d7f4ca6e087ea63ae99d3c136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea26d72710c100bf41bf5b672f1a218f24166574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea26d72710c100bf41bf5b672f1a218f24166574", "html_url": "https://github.com/rust-lang/rust/commit/ea26d72710c100bf41bf5b672f1a218f24166574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea26d72710c100bf41bf5b672f1a218f24166574/comments", "author": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ebd5a1f12f4242edf66cbbd471c421bec62753", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ebd5a1f12f4242edf66cbbd471c421bec62753", "html_url": "https://github.com/rust-lang/rust/commit/a2ebd5a1f12f4242edf66cbbd471c421bec62753"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "be628c9202cbd4a5bc35df6767a6f8907a3b0080", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ea26d72710c100bf41bf5b672f1a218f24166574/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea26d72710c100bf41bf5b672f1a218f24166574/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=ea26d72710c100bf41bf5b672f1a218f24166574", "patch": "@@ -3,15 +3,17 @@ use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast_pretty::pprust;\n+use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n use rustc_expand::module::DirOwnership;\n use rustc_parse::parser::{ForceCollect, Parser};\n use rustc_parse::{self, new_parser_from_file};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{self, Pos, Span};\n+use rustc_span::{self, FileName, Pos, Span};\n \n use smallvec::SmallVec;\n+use std::path::PathBuf;\n use std::rc::Rc;\n \n // These macros all relate to the file system; they either return\n@@ -102,7 +104,7 @@ pub fn expand_include<'cx>(\n         return DummyResult::any(sp);\n     };\n     // The file will be added to the code map by the parser\n-    let file = match cx.resolve_path(file, sp) {\n+    let file = match resolve_path(cx, file, sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -171,7 +173,7 @@ pub fn expand_include_str(\n     let Some(file) = get_single_str_from_tts(cx, sp, tts, \"include_str!\") else {\n         return DummyResult::any(sp);\n     };\n-    let file = match cx.resolve_path(file, sp) {\n+    let file = match resolve_path(cx, file, sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -205,7 +207,7 @@ pub fn expand_include_bytes(\n     let Some(file) = get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") else {\n         return DummyResult::any(sp);\n     };\n-    let file = match cx.resolve_path(file, sp) {\n+    let file = match resolve_path(cx, file, sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -220,3 +222,40 @@ pub fn expand_include_bytes(\n         }\n     }\n }\n+\n+/// Resolves a `path` mentioned inside Rust code, returning an absolute path.\n+///\n+/// This unifies the logic used for resolving `include_X!`.\n+fn resolve_path<'a>(\n+    cx: &mut ExtCtxt<'a>,\n+    path: impl Into<PathBuf>,\n+    span: Span,\n+) -> PResult<'a, PathBuf> {\n+    let path = path.into();\n+\n+    // Relative paths are resolved relative to the file in which they are found\n+    // after macro expansion (that is, they are unhygienic).\n+    if !path.is_absolute() {\n+        let callsite = span.source_callsite();\n+        let mut result = match cx.source_map().span_to_filename(callsite) {\n+            FileName::Real(name) => name\n+                .into_local_path()\n+                .expect(\"attempting to resolve a file path in an external file\"),\n+            FileName::DocTest(path, _) => path,\n+            other => {\n+                return Err(cx.struct_span_err(\n+                    span,\n+                    &format!(\n+                        \"cannot resolve relative path in non-file source `{}`\",\n+                        cx.source_map().filename_for_diagnostics(&other)\n+                    ),\n+                ));\n+            }\n+        };\n+        result.pop();\n+        result.push(path);\n+        Ok(result)\n+    } else {\n+        Ok(path)\n+    }\n+}"}, {"sha": "7f569af4abd659d9c94982de08f76792209602dd", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ea26d72710c100bf41bf5b672f1a218f24166574/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea26d72710c100bf41bf5b672f1a218f24166574/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=ea26d72710c100bf41bf5b672f1a218f24166574", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n@@ -20,7 +20,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n use std::default::Default;\n@@ -1128,41 +1128,6 @@ impl<'a> ExtCtxt<'a> {\n     pub fn check_unused_macros(&mut self) {\n         self.resolver.check_unused_macros();\n     }\n-\n-    /// Resolves a `path` mentioned inside Rust code, returning an absolute path.\n-    ///\n-    /// This unifies the logic used for resolving `include_X!`.\n-    ///\n-    /// FIXME: move this to `rustc_builtin_macros` and make it private.\n-    pub fn resolve_path(&self, path: impl Into<PathBuf>, span: Span) -> PResult<'a, PathBuf> {\n-        let path = path.into();\n-\n-        // Relative paths are resolved relative to the file in which they are found\n-        // after macro expansion (that is, they are unhygienic).\n-        if !path.is_absolute() {\n-            let callsite = span.source_callsite();\n-            let mut result = match self.source_map().span_to_filename(callsite) {\n-                FileName::Real(name) => name\n-                    .into_local_path()\n-                    .expect(\"attempting to resolve a file path in an external file\"),\n-                FileName::DocTest(path, _) => path,\n-                other => {\n-                    return Err(self.struct_span_err(\n-                        span,\n-                        &format!(\n-                            \"cannot resolve relative path in non-file source `{}`\",\n-                            self.source_map().filename_for_diagnostics(&other)\n-                        ),\n-                    ));\n-                }\n-            };\n-            result.pop();\n-            result.push(path);\n-            Ok(result)\n-        } else {\n-            Ok(path)\n-        }\n-    }\n }\n \n /// Extracts a string literal from the macro expanded version of `expr`,"}]}