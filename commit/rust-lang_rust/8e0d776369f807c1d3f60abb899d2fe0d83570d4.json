{"sha": "8e0d776369f807c1d3f60abb899d2fe0d83570d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMGQ3NzYzNjlmODA3YzFkM2Y2MGFiYjg5OWQyZmUwZDgzNTcwZDQ=", "commit": {"author": {"name": "Vladimir Serov", "email": "me@cab404.ru", "date": "2020-05-21T15:49:30Z"}, "committer": {"name": "Vladimir Serov", "email": "me@cab404.ru", "date": "2020-05-21T15:49:30Z"}, "message": "editor/vscode: lint", "tree": {"sha": "285bece9f5eb96b0a25f87c5b9d570df62c631a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285bece9f5eb96b0a25f87c5b9d570df62c631a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0d776369f807c1d3f60abb899d2fe0d83570d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEG7loEJJvTnFd71Z+a6fCbD/fe7MFAl7Gox0ACgkQa6fCbD/f\ne7O8cAwAmsG2VT7z/O0Z4w54c5Q9HwKUV4hI6N6aZ9vl7Yso7tBYkA9uWAZI7Hoh\nG+lkRYWHhRQE3DInm0WDr8N42SgeN+h9tPpwBLOX2tvzdVWLkelmXtALVEkxJXU3\ncduYfdEIT8EQJ095UsD2hrkaP/0Xvckw8d5ER6ZFp0Fcecos/k5WmtJvDMiq8+po\n/MbkQBE0WzDITkMCYyCylCFlfMbA8kjNAGPQb26NHIeoaUMKhn8dgzJijdYhnnXP\niEBDvO1Ar7axAlgJHXymiUFKp9XxzHkDo3AvllR4K9sU83hSyjq8htkPx+JFWgVC\noaLeLi5NVlMcwMiO3aZ9IJabMj/UpCjGYF8h2snqk4/QOzkVLW6FDHPLRP/oCTjT\n+9jfgKxHmIAHW9QXPe9ba20zTrsp9gHSxlymC3f/z5TpCmpJ1CmJ8Da3aFJ3faAi\nvW29T/9uIVN1w6B/80HaLlFlPsVd6VGteWrgmFkU6kdfXLdLdP0JH7e8gJKRHYCG\nlPmPCA/o\n=SZoR\n-----END PGP SIGNATURE-----", "payload": "tree 285bece9f5eb96b0a25f87c5b9d570df62c631a7\nparent 125e4197d8af1eca498e0088aa37cf48e0b3827e\nauthor Vladimir Serov <me@cab404.ru> 1590076170 +0300\ncommitter Vladimir Serov <me@cab404.ru> 1590076170 +0300\n\neditor/vscode: lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0d776369f807c1d3f60abb899d2fe0d83570d4", "html_url": "https://github.com/rust-lang/rust/commit/8e0d776369f807c1d3f60abb899d2fe0d83570d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0d776369f807c1d3f60abb899d2fe0d83570d4/comments", "author": {"login": "cab404", "id": 6453661, "node_id": "MDQ6VXNlcjY0NTM2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/6453661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cab404", "html_url": "https://github.com/cab404", "followers_url": "https://api.github.com/users/cab404/followers", "following_url": "https://api.github.com/users/cab404/following{/other_user}", "gists_url": "https://api.github.com/users/cab404/gists{/gist_id}", "starred_url": "https://api.github.com/users/cab404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cab404/subscriptions", "organizations_url": "https://api.github.com/users/cab404/orgs", "repos_url": "https://api.github.com/users/cab404/repos", "events_url": "https://api.github.com/users/cab404/events{/privacy}", "received_events_url": "https://api.github.com/users/cab404/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cab404", "id": 6453661, "node_id": "MDQ6VXNlcjY0NTM2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/6453661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cab404", "html_url": "https://github.com/cab404", "followers_url": "https://api.github.com/users/cab404/followers", "following_url": "https://api.github.com/users/cab404/following{/other_user}", "gists_url": "https://api.github.com/users/cab404/gists{/gist_id}", "starred_url": "https://api.github.com/users/cab404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cab404/subscriptions", "organizations_url": "https://api.github.com/users/cab404/orgs", "repos_url": "https://api.github.com/users/cab404/repos", "events_url": "https://api.github.com/users/cab404/events{/privacy}", "received_events_url": "https://api.github.com/users/cab404/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "125e4197d8af1eca498e0088aa37cf48e0b3827e", "url": "https://api.github.com/repos/rust-lang/rust/commits/125e4197d8af1eca498e0088aa37cf48e0b3827e", "html_url": "https://github.com/rust-lang/rust/commit/125e4197d8af1eca498e0088aa37cf48e0b3827e"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "1c6e3093b558e70365d00bbd778e2c5d47d66c6f", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8e0d776369f807c1d3f60abb899d2fe0d83570d4/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8e0d776369f807c1d3f60abb899d2fe0d83570d4/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=8e0d776369f807c1d3f60abb899d2fe0d83570d4", "patch": "@@ -192,13 +192,13 @@ async function bootstrapServer(config: Config, state: PersistentState): Promise<\n async function patchelf(dest: PathLike): Promise<void> {\n     await vscode.window.withProgress(\n         {\n-            location: vscode.ProgressLocation.Notification, \n+            location: vscode.ProgressLocation.Notification,\n             title: \"Patching rust-analysis for NixOS\"\n-        }, \n+        },\n         async (progress, _) => {\n-            let patch_path = path.join(os.tmpdir(), \"patch-ra.nix\")\n-            progress.report({message: \"Writing nix file\", increment: 5})\n-            await fs.writeFile(patch_path, `\n+            const patchPath = path.join(os.tmpdir(), \"patch-ra.nix\");\n+            progress.report({ message: \"Writing nix file\", increment: 5 });\n+            await fs.writeFile(patchPath, `\n             {src, pkgs ? import <nixpkgs> {}}:\n                 pkgs.stdenv.mkDerivation {\n                     name = \"rust-analyzer\";\n@@ -210,23 +210,23 @@ async function patchelf(dest: PathLike): Promise<void> {\n                     patchelf --set-interpreter \"$(cat $NIX_CC/nix-support/dynamic-linker)\" $out\n                     '';\n                 }\n-            `)\n-            let orig_file = dest + \"-orig\"\n-            await fs.rename(dest, orig_file)\n-            progress.report({message: \"Patching executable\", increment: 20})\n+            `);\n+            const origFile = dest + \"-orig\";\n+            await fs.rename(dest, origFile);\n+            progress.report({ message: \"Patching executable\", increment: 20 });\n             await new Promise((resolve, reject) => {\n-                exec(`nix-build ${patch_path} --arg src '${orig_file}' -o ${dest}`,\n-                (err, stdout, stderr) => {\n-                    if (err != null) {\n-                        reject(Error(stderr))\n-                    } else {\n-                        resolve(stdout)\n-                    }\n-                })\n-            })\n-            await fs.unlink(orig_file)\n+                exec(`nix-build ${patchPath} --arg src '${origFile}' -o ${dest}`,\n+                    (err, stdout, stderr) => {\n+                        if (err != null) {\n+                            reject(Error(stderr));\n+                        } else {\n+                            resolve(stdout);\n+                        }\n+                    });\n+            });\n+            await fs.unlink(origFile);\n         }\n-    )\n+    );\n }\n \n async function getServer(config: Config, state: PersistentState): Promise<string | undefined> {\n@@ -281,7 +281,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n \n     // Patching executable if that's NixOS.\n     if (fs.stat(\"/etc/nixos\").then(_ => true).catch(_ => false)) {\n-        await patchelf(dest)\n+        await patchelf(dest);\n     }\n \n     await state.updateServerVersion(config.package.version);"}]}