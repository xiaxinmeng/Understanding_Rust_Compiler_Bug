{"sha": "9c7c232a50819ef2bfb59eae283a5e7ed70dd952", "node_id": "C_kwDOAAsO6NoAKDljN2MyMzJhNTA4MTllZjJiZmI1OWVhZTI4M2E1ZTdlZDcwZGQ5NTI", "commit": {"author": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "eduardosm-dev@e64.io", "date": "2022-10-02T09:32:56Z"}, "committer": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "eduardosm-dev@e64.io", "date": "2022-10-02T09:32:56Z"}, "message": "Improve `FromStr` example\n\nThe `from_str` implementation from the example had an `unwrap` that would make it panic on invalid input strings. Instead of panicking, it nows returns an error to better reflect the intented behavior of the `FromStr` trait.", "tree": {"sha": "f4c0b4f4ff8a56ba1e27be9e8e23feaf7b119902", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c0b4f4ff8a56ba1e27be9e8e23feaf7b119902"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c7c232a50819ef2bfb59eae283a5e7ed70dd952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7c232a50819ef2bfb59eae283a5e7ed70dd952", "html_url": "https://github.com/rust-lang/rust/commit/9c7c232a50819ef2bfb59eae283a5e7ed70dd952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c7c232a50819ef2bfb59eae283a5e7ed70dd952/comments", "author": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56a35bc906be1250a76fdb9a4b70e9261e10aec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/56a35bc906be1250a76fdb9a4b70e9261e10aec5", "html_url": "https://github.com/rust-lang/rust/commit/56a35bc906be1250a76fdb9a4b70e9261e10aec5"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "d3ed811b1575bc03e221a7086fc4d4507f9d36a2", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c7c232a50819ef2bfb59eae283a5e7ed70dd952/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7c232a50819ef2bfb59eae283a5e7ed70dd952/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=9c7c232a50819ef2bfb59eae283a5e7ed70dd952", "patch": "@@ -507,26 +507,28 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n ///\n /// ```\n /// use std::str::FromStr;\n-/// use std::num::ParseIntError;\n ///\n /// #[derive(Debug, PartialEq)]\n /// struct Point {\n ///     x: i32,\n ///     y: i32\n /// }\n ///\n+/// #[derive(Debug, PartialEq, Eq)]\n+/// struct ParsePointError;\n+///\n /// impl FromStr for Point {\n-///     type Err = ParseIntError;\n+///     type Err = ParsePointError;\n ///\n ///     fn from_str(s: &str) -> Result<Self, Self::Err> {\n ///         let (x, y) = s\n ///             .strip_prefix('(')\n ///             .and_then(|s| s.strip_suffix(')'))\n ///             .and_then(|s| s.split_once(','))\n-///             .unwrap();\n+///             .ok_or(ParsePointError)?;\n ///\n-///         let x_fromstr = x.parse::<i32>()?;\n-///         let y_fromstr = y.parse::<i32>()?;\n+///         let x_fromstr = x.parse::<i32>().map_err(|_| ParsePointError)?;\n+///         let y_fromstr = y.parse::<i32>().map_err(|_| ParsePointError)?;\n ///\n ///         Ok(Point { x: x_fromstr, y: y_fromstr })\n ///     }\n@@ -538,6 +540,8 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n /// // Implicit calls, through parse\n /// assert_eq!(\"(1,2)\".parse(), expected);\n /// assert_eq!(\"(1,2)\".parse::<Point>(), expected);\n+/// // Invalid input string\n+/// assert!(Point::from_str(\"(1 2)\").is_err());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait FromStr: Sized {"}]}