{"sha": "6d388a4ee33771784137d04186a5070df6f9f0cc", "node_id": "C_kwDOAAsO6NoAKDZkMzg4YTRlZTMzNzcxNzg0MTM3ZDA0MTg2YTUwNzBkZjZmOWYwY2M", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2022-12-27T01:00:26Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2022-12-27T01:31:40Z"}, "message": "Allow cleaning individual crates\n\nAs a bonus, this stops special casing `clean` in `Builder`.", "tree": {"sha": "bec9660981deec81f5bc6e61547e9f0b068a49fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec9660981deec81f5bc6e61547e9f0b068a49fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d388a4ee33771784137d04186a5070df6f9f0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d388a4ee33771784137d04186a5070df6f9f0cc", "html_url": "https://github.com/rust-lang/rust/commit/6d388a4ee33771784137d04186a5070df6f9f0cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d388a4ee33771784137d04186a5070df6f9f0cc/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88c58e3c2c097ebffac425d9e080dcb1aadf790e", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c58e3c2c097ebffac425d9e080dcb1aadf790e", "html_url": "https://github.com/rust-lang/rust/commit/88c58e3c2c097ebffac425d9e080dcb1aadf790e"}], "stats": {"total": 227, "additions": 152, "deletions": 75}, "files": [{"sha": "707e4169002d92f8d58538fbe707da417a85e1f2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 73, "deletions": 48, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6d388a4ee33771784137d04186a5070df6f9f0cc", "patch": "@@ -13,7 +13,6 @@ use std::time::{Duration, Instant};\n \n use crate::cache::{Cache, Interned, INTERNER};\n use crate::config::{SplitDebuginfo, TargetSelection};\n-use crate::dist;\n use crate::doc;\n use crate::flags::{Color, Subcommand};\n use crate::install;\n@@ -25,6 +24,7 @@ use crate::tool::{self, SourceType};\n use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir, output, t};\n use crate::EXTRA_CHECK_CFGS;\n use crate::{check, compile, Crate};\n+use crate::{clean, dist};\n use crate::{Build, CLang, DocTests, GitRepo, Mode};\n \n pub use crate::Compiler;\n@@ -96,6 +96,17 @@ impl RunConfig<'_> {\n     pub fn build_triple(&self) -> TargetSelection {\n         self.builder.build.build\n     }\n+\n+    /// Return a `-p=x -p=y` string suitable for passing to a cargo invocation.\n+    pub fn cargo_crates_in_set(&self) -> Interned<Vec<String>> {\n+        let mut crates = Vec::new();\n+        for krate in &self.paths {\n+            let path = krate.assert_single_path();\n+            let crate_name = self.builder.crate_paths[&path.path];\n+            crates.push(format!(\"-p={crate_name}\"));\n+        }\n+        INTERNER.intern_list(crates)\n+    }\n }\n \n struct StepDescription {\n@@ -764,8 +775,9 @@ impl<'a> Builder<'a> {\n                 run::GenerateCopyright,\n             ),\n             Kind::Setup => describe!(setup::Profile),\n-            // These commands either don't use paths, or they're special-cased in Build::build()\n-            Kind::Clean | Kind::Format => vec![],\n+            Kind::Clean => describe!(clean::CleanAll, clean::Rustc, clean::Std),\n+            // special-cased in Build::build()\n+            Kind::Format => vec![],\n         }\n     }\n \n@@ -827,14 +839,12 @@ impl<'a> Builder<'a> {\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n             Subcommand::Run { ref paths, .. } => (Kind::Run, &paths[..]),\n+            Subcommand::Clean { ref paths, .. } => (Kind::Clean, &paths[..]),\n             Subcommand::Format { .. } => (Kind::Format, &[][..]),\n             Subcommand::Setup { profile: ref path } => (\n                 Kind::Setup,\n                 path.as_ref().map_or([].as_slice(), |path| std::slice::from_ref(path)),\n             ),\n-            Subcommand::Clean { .. } => {\n-                panic!()\n-            }\n         };\n \n         Self::new_internal(build, kind, paths.to_owned())\n@@ -1077,6 +1087,62 @@ impl<'a> Builder<'a> {\n         None\n     }\n \n+    /// Like `cargo`, but only passes flags that are valid for all commands.\n+    pub fn bare_cargo(\n+        &self,\n+        compiler: Compiler,\n+        mode: Mode,\n+        target: TargetSelection,\n+        cmd: &str,\n+    ) -> Command {\n+        let mut cargo = Command::new(&self.initial_cargo);\n+        // Run cargo from the source root so it can find .cargo/config.\n+        // This matters when using vendoring and the working directory is outside the repository.\n+        cargo.current_dir(&self.src);\n+\n+        let out_dir = self.stage_out(compiler, mode);\n+        cargo.env(\"CARGO_TARGET_DIR\", &out_dir).arg(cmd);\n+\n+        // Found with `rg \"init_env_logger\\(\"`. If anyone uses `init_env_logger`\n+        // from out of tree it shouldn't matter, since x.py is only used for\n+        // building in-tree.\n+        let color_logs = [\"RUSTDOC_LOG_COLOR\", \"RUSTC_LOG_COLOR\", \"RUST_LOG_COLOR\"];\n+        match self.build.config.color {\n+            Color::Always => {\n+                cargo.arg(\"--color=always\");\n+                for log in &color_logs {\n+                    cargo.env(log, \"always\");\n+                }\n+            }\n+            Color::Never => {\n+                cargo.arg(\"--color=never\");\n+                for log in &color_logs {\n+                    cargo.env(log, \"never\");\n+                }\n+            }\n+            Color::Auto => {} // nothing to do\n+        }\n+\n+        if cmd != \"install\" {\n+            cargo.arg(\"--target\").arg(target.rustc_target_arg());\n+        } else {\n+            assert_eq!(target, compiler.host);\n+        }\n+\n+        if self.config.rust_optimize {\n+            // FIXME: cargo bench/install do not accept `--release`\n+            if cmd != \"bench\" && cmd != \"install\" {\n+                cargo.arg(\"--release\");\n+            }\n+        }\n+\n+        // Remove make-related flags to ensure Cargo can correctly set things up\n+        cargo.env_remove(\"MAKEFLAGS\");\n+        cargo.env_remove(\"MFLAGS\");\n+\n+        cargo\n+    }\n+\n     /// Prepares an invocation of `cargo` to be run.\n     ///\n     /// This will create a `Command` that represents a pending execution of\n@@ -1092,11 +1158,8 @@ impl<'a> Builder<'a> {\n         target: TargetSelection,\n         cmd: &str,\n     ) -> Cargo {\n-        let mut cargo = Command::new(&self.initial_cargo);\n+        let mut cargo = self.bare_cargo(compiler, mode, target, cmd);\n         let out_dir = self.stage_out(compiler, mode);\n-        // Run cargo from the source root so it can find .cargo/config.\n-        // This matters when using vendoring and the working directory is outside the repository.\n-        cargo.current_dir(&self.src);\n \n         // Codegen backends are not yet tracked by -Zbinary-dep-depinfo,\n         // so we need to explicitly clear out if they've been updated.\n@@ -1121,8 +1184,6 @@ impl<'a> Builder<'a> {\n             self.clear_if_dirty(&my_out, &rustdoc);\n         }\n \n-        cargo.env(\"CARGO_TARGET_DIR\", &out_dir).arg(cmd);\n-\n         let profile_var = |name: &str| {\n             let profile = if self.config.rust_optimize { \"RELEASE\" } else { \"DEV\" };\n             format!(\"CARGO_PROFILE_{}_{}\", profile, name)\n@@ -1135,32 +1196,6 @@ impl<'a> Builder<'a> {\n             cargo.env(\"REAL_LIBRARY_PATH\", e);\n         }\n \n-        // Found with `rg \"init_env_logger\\(\"`. If anyone uses `init_env_logger`\n-        // from out of tree it shouldn't matter, since x.py is only used for\n-        // building in-tree.\n-        let color_logs = [\"RUSTDOC_LOG_COLOR\", \"RUSTC_LOG_COLOR\", \"RUST_LOG_COLOR\"];\n-        match self.build.config.color {\n-            Color::Always => {\n-                cargo.arg(\"--color=always\");\n-                for log in &color_logs {\n-                    cargo.env(log, \"always\");\n-                }\n-            }\n-            Color::Never => {\n-                cargo.arg(\"--color=never\");\n-                for log in &color_logs {\n-                    cargo.env(log, \"never\");\n-                }\n-            }\n-            Color::Auto => {} // nothing to do\n-        }\n-\n-        if cmd != \"install\" {\n-            cargo.arg(\"--target\").arg(target.rustc_target_arg());\n-        } else {\n-            assert_eq!(target, compiler.host);\n-        }\n-\n         // Set a flag for `check`/`clippy`/`fix`, so that certain build\n         // scripts can do less work (i.e. not building/requiring LLVM).\n         if cmd == \"check\" || cmd == \"clippy\" || cmd == \"fix\" {\n@@ -1341,9 +1376,6 @@ impl<'a> Builder<'a> {\n         }\n \n         cargo.arg(\"-j\").arg(self.jobs().to_string());\n-        // Remove make-related flags to ensure Cargo can correctly set things up\n-        cargo.env_remove(\"MAKEFLAGS\");\n-        cargo.env_remove(\"MFLAGS\");\n \n         // FIXME: Temporary fix for https://github.com/rust-lang/cargo/issues/3005\n         // Force cargo to output binaries with disambiguating hashes in the name\n@@ -1827,13 +1859,6 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        if self.config.rust_optimize {\n-            // FIXME: cargo bench/install do not accept `--release`\n-            if cmd != \"bench\" && cmd != \"install\" {\n-                cargo.arg(\"--release\");\n-            }\n-        }\n-\n         if self.config.locked_deps {\n             cargo.arg(\"--locked\");\n         }"}, {"sha": "303c5603be71e5d82f4685ec70ac5f3b8e1bbc70", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=6d388a4ee33771784137d04186a5070df6f9f0cc", "patch": "@@ -9,10 +9,83 @@ use std::fs;\n use std::io::{self, ErrorKind};\n use std::path::Path;\n \n+use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::cache::Interned;\n+use crate::config::TargetSelection;\n use crate::util::t;\n-use crate::Build;\n+use crate::{Build, Mode, Subcommand};\n \n-pub fn clean(build: &Build, all: bool) {\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct CleanAll {}\n+\n+impl Step for CleanAll {\n+    const DEFAULT: bool = true;\n+    type Output = ();\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(CleanAll {})\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let Subcommand::Clean { all, .. } = builder.config.cmd else { unreachable!(\"wrong subcommand?\") };\n+        clean_default(builder.build, all)\n+    }\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.never() // handled by DEFAULT\n+    }\n+}\n+\n+macro_rules! clean_crate_tree {\n+    ( $( $name:ident, $mode:path, $root_crate:literal);+ $(;)? ) => { $(\n+        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+        pub struct $name {\n+            target: TargetSelection,\n+            crates: Interned<Vec<String>>,\n+        }\n+\n+        impl Step for $name {\n+            type Output = ();\n+\n+            fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+                let crates = run.builder.in_tree_crates($root_crate, None);\n+                run.crates(crates)\n+            }\n+\n+            fn make_run(run: RunConfig<'_>) {\n+                let builder = run.builder;\n+                if builder.top_stage != 0 {\n+                    panic!(\"non-stage-0 clean not supported for individual crates\");\n+                }\n+                builder.ensure(Self { crates: run.cargo_crates_in_set(), target: run.target });\n+            }\n+\n+            fn run(self, builder: &Builder<'_>) -> Self::Output {\n+                let compiler = builder.compiler(0, self.target);\n+                let mut cargo = builder.bare_cargo(compiler, $mode, self.target, \"clean\");\n+                for krate in &*self.crates {\n+                    cargo.arg(krate);\n+                }\n+\n+                builder.info(&format!(\n+                    \"Cleaning stage{} {} artifacts ({} -> {})\",\n+                    compiler.stage, stringify!($name).to_lowercase(), &compiler.host, self.target\n+                ));\n+\n+                // NOTE: doesn't use `run_cargo` because we don't want to save a stamp file,\n+                // and doesn't use `stream_cargo` to avoid passing `--message-format` which `clean` doesn't accept.\n+                builder.run(&mut cargo);\n+            }\n+        }\n+    )+ }\n+}\n+\n+clean_crate_tree! {\n+    Rustc, Mode::Rustc, \"rustc-main\";\n+    Std, Mode::Std, \"test\";\n+}\n+\n+fn clean_default(build: &Build, all: bool) {\n     rm_rf(\"tmp\".as_ref());\n \n     if all {"}, {"sha": "427e1a3863e20cb8869166361ad4f89752a76436", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6d388a4ee33771784137d04186a5070df6f9f0cc", "patch": "@@ -46,17 +46,6 @@ impl Std {\n     }\n }\n \n-/// Return a `-p=x -p=y` string suitable for passing to a cargo invocation.\n-fn build_crates_in_set(run: &RunConfig<'_>) -> Interned<Vec<String>> {\n-    let mut crates = Vec::new();\n-    for krate in &run.paths {\n-        let path = krate.assert_single_path();\n-        let crate_name = run.builder.crate_paths[&path.path];\n-        crates.push(format!(\"-p={crate_name}\"));\n-    }\n-    INTERNER.intern_list(crates)\n-}\n-\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n@@ -76,7 +65,7 @@ impl Step for Std {\n         // Build all crates anyway, as if they hadn't passed the other args.\n         let has_library =\n             run.paths.iter().any(|set| set.assert_single_path().path.ends_with(\"library\"));\n-        let crates = if has_library { Default::default() } else { build_crates_in_set(&run) };\n+        let crates = if has_library { Default::default() } else { run.cargo_crates_in_set() };\n         run.builder.ensure(Std {\n             compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n@@ -603,7 +592,7 @@ impl Step for Rustc {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let crates = build_crates_in_set(&run);\n+        let crates = run.cargo_crates_in_set();\n         run.builder.ensure(Rustc {\n             compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,"}, {"sha": "459d2fa964db22e66c0bc8c69fcc85db5ca9aa1c", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=6d388a4ee33771784137d04186a5070df6f9f0cc", "patch": "@@ -130,6 +130,7 @@ pub enum Subcommand {\n         test_args: Vec<String>,\n     },\n     Clean {\n+        paths: Vec<PathBuf>,\n         all: bool,\n     },\n     Dist {\n@@ -601,14 +602,7 @@ Arguments:\n                 open: matches.opt_present(\"open\"),\n                 json: matches.opt_present(\"json\"),\n             },\n-            Kind::Clean => {\n-                if !paths.is_empty() {\n-                    println!(\"\\nclean does not take a path argument\\n\");\n-                    usage(1, &opts, verbose, &subcommand_help);\n-                }\n-\n-                Subcommand::Clean { all: matches.opt_present(\"all\") }\n-            }\n+            Kind::Clean => Subcommand::Clean { all: matches.opt_present(\"all\"), paths },\n             Kind::Format => Subcommand::Format { check: matches.opt_present(\"check\"), paths },\n             Kind::Dist => Subcommand::Dist { paths },\n             Kind::Install => Subcommand::Install { paths },"}, {"sha": "f3e6da8e3e0badfe24f2b8722e333430c5da61b7", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d388a4ee33771784137d04186a5070df6f9f0cc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6d388a4ee33771784137d04186a5070df6f9f0cc", "patch": "@@ -727,10 +727,6 @@ impl Build {\n             return format::format(&builder::Builder::new(&self), *check, &paths);\n         }\n \n-        if let Subcommand::Clean { all } = self.config.cmd {\n-            return clean::clean(self, all);\n-        }\n-\n         // Download rustfmt early so that it can be used in rust-analyzer configs.\n         let _ = &builder::Builder::new(&self).initial_rustfmt();\n "}]}