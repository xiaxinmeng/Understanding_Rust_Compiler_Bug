{"sha": "b3d1de93af7e572647f8d68466128ad1b8d5a36e", "node_id": "C_kwDOAAsO6NoAKGIzZDFkZTkzYWY3ZTU3MjY0N2Y4ZDY4NDY2MTI4YWQxYjhkNWEzNmU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T11:53:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T11:53:15Z"}, "message": "get organizized", "tree": {"sha": "563437858783a200937f14f900064d000ef0e5a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563437858783a200937f14f900064d000ef0e5a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3d1de93af7e572647f8d68466128ad1b8d5a36e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d1de93af7e572647f8d68466128ad1b8d5a36e", "html_url": "https://github.com/rust-lang/rust/commit/b3d1de93af7e572647f8d68466128ad1b8d5a36e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3d1de93af7e572647f8d68466128ad1b8d5a36e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9003447c9ab248a18bd2c00b49cd8c04d72261", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9003447c9ab248a18bd2c00b49cd8c04d72261", "html_url": "https://github.com/rust-lang/rust/commit/8e9003447c9ab248a18bd2c00b49cd8c04d72261"}], "stats": {"total": 237, "additions": 123, "deletions": 114}, "files": [{"sha": "27c1bfebd1f51c2a9551235f2e4ff3152c19f782", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 3, "deletions": 114, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/b3d1de93af7e572647f8d68466128ad1b8d5a36e/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d1de93af7e572647f8d68466128ad1b8d5a36e/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=b3d1de93af7e572647f8d68466128ad1b8d5a36e", "patch": "@@ -1,25 +1,10 @@\n+mod tt_conversion;\n+mod matching;\n+\n use expect_test::expect;\n \n use crate::macro_expansion_tests::check;\n \n-#[test]\n-fn wrong_nesting_level() {\n-    check(\n-        r#\"\n-macro_rules! m {\n-    ($($i:ident);*) => ($i)\n-}\n-m!{a}\n-\"#,\n-        expect![[r#\"\n-macro_rules! m {\n-    ($($i:ident);*) => ($i)\n-}\n-/* error: expected simple binding, found nested binding `i` */\n-\"#]],\n-    );\n-}\n-\n #[test]\n fn expansion_does_not_parse_as_expression() {\n     check(\n@@ -39,99 +24,3 @@ fn f() { let _ = /* error: could not convert tokens */; }\n \"#]],\n     )\n }\n-\n-#[test]\n-fn round_trips_compound_tokens() {\n-    check(\n-        r#\"\n-macro_rules! m {\n-    () => { type qual: ::T = qual::T; }\n-}\n-m!();\n-\"#,\n-        expect![[r#\"\n-macro_rules! m {\n-    () => { type qual: ::T = qual::T; }\n-}\n-type qual: ::T = qual::T;\n-\"#]],\n-    )\n-}\n-\n-#[test]\n-fn round_trips_literals() {\n-    check(\n-        r#\"\n-macro_rules! m {\n-    () => {\n-        let _ = 'c';\n-        let _ = 1000;\n-        let _ = 12E+99_f64;\n-        let _ = \"rust1\";\n-        let _ = -92;\n-    }\n-}\n-fn f() {\n-    m!()\n-}\n-\"#,\n-        expect![[r#\"\n-macro_rules! m {\n-    () => {\n-        let _ = 'c';\n-        let _ = 1000;\n-        let _ = 12E+99_f64;\n-        let _ = \"rust1\";\n-        let _ = -92;\n-    }\n-}\n-fn f() {\n-    let_ = 'c';\n-    let_ = 1000;\n-    let_ = 12E+99_f64;\n-    let_ = \"rust1\";\n-    let_ = -92;\n-}\n-\"#]],\n-    );\n-}\n-\n-#[test]\n-fn broken_parenthesis_sequence() {\n-    check(\n-        r#\"\n-macro_rules! m1 { ($x:ident) => { ($x } }\n-macro_rules! m2 { ($x:ident) => {} }\n-\n-m1!();\n-m2!(x\n-\"#,\n-        expect![[r#\"\n-macro_rules! m1 { ($x:ident) => { ($x } }\n-macro_rules! m2 { ($x:ident) => {} }\n-\n-/* error: Failed to find macro definition */\n-/* error: Failed to lower macro args to token tree */\n-\"#]],\n-    )\n-}\n-\n-#[test]\n-fn unary_minus_is_a_literal() {\n-    check(\n-        r#\"\n-macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n-m!(92);\n-m!(-92);\n-m!(-9.2);\n-m!(--92);\n-\"#,\n-        expect![[r#\"\n-macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n-literal!()\n-literal!()\n-literal!()\n-/* error: leftover tokens */not_a_literal!()\n-\"#]],\n-    )\n-}"}, {"sha": "cfba58c55a4367e756ac33284f7ac83c835e13f8", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/matching.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b3d1de93af7e572647f8d68466128ad1b8d5a36e/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d1de93af7e572647f8d68466128ad1b8d5a36e/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs?ref=b3d1de93af7e572647f8d68466128ad1b8d5a36e", "patch": "@@ -0,0 +1,41 @@\n+use expect_test::expect;\n+\n+use crate::macro_expansion_tests::check;\n+\n+#[test]\n+fn unary_minus_is_a_literal() {\n+    check(\n+        r#\"\n+macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n+m!(92);\n+m!(-92);\n+m!(-9.2);\n+m!(--92);\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n+literal!()\n+literal!()\n+literal!()\n+/* error: leftover tokens */not_a_literal!()\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn wrong_nesting_level() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($($i:ident);*) => ($i)\n+}\n+m!{a}\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($($i:ident);*) => ($i)\n+}\n+/* error: expected simple binding, found nested binding `i` */\n+\"#]],\n+    );\n+}"}, {"sha": "6059fcdb90431ec528ed12ba61e4b245af9481ab", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b3d1de93af7e572647f8d68466128ad1b8d5a36e/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d1de93af7e572647f8d68466128ad1b8d5a36e/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=b3d1de93af7e572647f8d68466128ad1b8d5a36e", "patch": "@@ -0,0 +1,79 @@\n+use expect_test::expect;\n+\n+use crate::macro_expansion_tests::check;\n+\n+#[test]\n+fn round_trips_compound_tokens() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => { type qual: ::T = qual::T; }\n+}\n+m!();\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    () => { type qual: ::T = qual::T; }\n+}\n+type qual: ::T = qual::T;\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn round_trips_literals() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => {\n+        let _ = 'c';\n+        let _ = 1000;\n+        let _ = 12E+99_f64;\n+        let _ = \"rust1\";\n+        let _ = -92;\n+    }\n+}\n+fn f() {\n+    m!()\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    () => {\n+        let _ = 'c';\n+        let _ = 1000;\n+        let _ = 12E+99_f64;\n+        let _ = \"rust1\";\n+        let _ = -92;\n+    }\n+}\n+fn f() {\n+    let_ = 'c';\n+    let_ = 1000;\n+    let_ = 12E+99_f64;\n+    let_ = \"rust1\";\n+    let_ = -92;\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn broken_parenthesis_sequence() {\n+    check(\n+        r#\"\n+macro_rules! m1 { ($x:ident) => { ($x } }\n+macro_rules! m2 { ($x:ident) => {} }\n+\n+m1!();\n+m2!(x\n+\"#,\n+        expect![[r#\"\n+macro_rules! m1 { ($x:ident) => { ($x } }\n+macro_rules! m2 { ($x:ident) => {} }\n+\n+/* error: Failed to find macro definition */\n+/* error: Failed to lower macro args to token tree */\n+\"#]],\n+    )\n+}"}]}