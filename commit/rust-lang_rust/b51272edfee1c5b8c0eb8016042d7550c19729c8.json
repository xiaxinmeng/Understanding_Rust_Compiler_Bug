{"sha": "b51272edfee1c5b8c0eb8016042d7550c19729c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTI3MmVkZmVlMWM1YjhjMGViODAxNjA0MmQ3NTUwYzE5NzI5Yzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-01T23:50:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-01T23:50:07Z"}, "message": "Rollup merge of #82018 - jyn514:no-dummy-cache, r=camelid,GuillaumeGomez\n\nRemove the dummy cache in `DocContext`; delete RenderInfo\n\nThe same information is available everywhere; the only reason the dummy\ncache was needed is because it was previously stored in three different\nplaces. This consolidates the info a bit so the cache in `DocContext` is\nused throughout. As a bonus, it also completely removes `RenderInfo`.\n\n- Return a `Cache` from `run_global_ctxt`, not `RenderInfo`\n- Remove the unused `render_info` from `run_renderer`\n- Remove RenderInfo altogether\n\nHelps with https://github.com/rust-lang/rust/pull/82014. The next step is to move the `populate()` call before the `collect_intra_doc_links` pass, which currently breaks because a) lots of the cache is populated in early passes, and b) intra_doc_links itself sets some info with `register_res`. I'm working on separate PR for that to avoid making too many big changes at once.\n\nr? `@GuillaumeGomez`", "tree": {"sha": "133b7c7bc40a5362730fec12eb471bf3ae8cb168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133b7c7bc40a5362730fec12eb471bf3ae8cb168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b51272edfee1c5b8c0eb8016042d7550c19729c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPX2vCRBK7hj4Ov3rIwAAdHIIAGk2JiG2mcYbDTGIl/7zO4lO\nCC7JlwR+0z06M/czO0wJa2z0BULY8CMhFQaBynOyAT+YtHOB9hVohnp2Y/bZ6IL6\nmvRwcoNZkLolnw2r7N43zQqiVBIViqV6r1QhxP/FwLlKp1qPYyF/2t5t+nQ7j4hs\n+3qsI+d+ORkWaeRPNaTPGYu1C3mYyzAEiRVCYGSWweDPRY4lNyATVVhF2zc5e3vd\nfg0cnQJtAh3tT6sfO+uDo1tm64oQHSeEnbmRdgH41uNsPWi/gAdlHLi6BfAuKIP2\nlKmT+6ccEmtTpeg+IQWksbf0FlAOaTWaxFU/TeykMg64J/SgGL0reBQBX6a3+28=\n=/Us7\n-----END PGP SIGNATURE-----\n", "payload": "tree 133b7c7bc40a5362730fec12eb471bf3ae8cb168\nparent 22ebb867f747c0832a3065abb333d6533c7f8340\nparent be069a687a4e1c231b8ae8c68ac0444fa6fee249\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1614642607 +0100\ncommitter GitHub <noreply@github.com> 1614642607 +0100\n\nRollup merge of #82018 - jyn514:no-dummy-cache, r=camelid,GuillaumeGomez\n\nRemove the dummy cache in `DocContext`; delete RenderInfo\n\nThe same information is available everywhere; the only reason the dummy\ncache was needed is because it was previously stored in three different\nplaces. This consolidates the info a bit so the cache in `DocContext` is\nused throughout. As a bonus, it also completely removes `RenderInfo`.\n\n- Return a `Cache` from `run_global_ctxt`, not `RenderInfo`\n- Remove the unused `render_info` from `run_renderer`\n- Remove RenderInfo altogether\n\nHelps with https://github.com/rust-lang/rust/pull/82014. The next step is to move the `populate()` call before the `collect_intra_doc_links` pass, which currently breaks because a) lots of the cache is populated in early passes, and b) intra_doc_links itself sets some info with `register_res`. I'm working on separate PR for that to avoid making too many big changes at once.\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b51272edfee1c5b8c0eb8016042d7550c19729c8", "html_url": "https://github.com/rust-lang/rust/commit/b51272edfee1c5b8c0eb8016042d7550c19729c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b51272edfee1c5b8c0eb8016042d7550c19729c8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ebb867f747c0832a3065abb333d6533c7f8340", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ebb867f747c0832a3065abb333d6533c7f8340", "html_url": "https://github.com/rust-lang/rust/commit/22ebb867f747c0832a3065abb333d6533c7f8340"}, {"sha": "be069a687a4e1c231b8ae8c68ac0444fa6fee249", "url": "https://api.github.com/repos/rust-lang/rust/commits/be069a687a4e1c231b8ae8c68ac0444fa6fee249", "html_url": "https://github.com/rust-lang/rust/commit/be069a687a4e1c231b8ae8c68ac0444fa6fee249"}], "stats": {"total": 215, "additions": 82, "deletions": 133}, "files": [{"sha": "4e4e1e5cbce2f3111e3e1c3c9061ecfb2d353be5", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -21,7 +21,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n         for &trait_def_id in self.cx.tcx.all_traits(LOCAL_CRATE).iter() {\n-            if !self.cx.renderinfo.access_levels.is_public(trait_def_id)\n+            if !self.cx.cache.access_levels.is_public(trait_def_id)\n                 || self.cx.generated_synthetics.get(&(ty, trait_def_id)).is_some()\n             {\n                 continue;"}, {"sha": "47a74238a7a3de4971cf996d4b539efd4801f0b3", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -17,6 +17,7 @@ use rustc_span::Span;\n \n use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind};\n use crate::core::DocContext;\n+use crate::formats::item_type::ItemType;\n \n use super::Clean;\n \n@@ -122,7 +123,7 @@ crate fn try_inline(\n     let target_attrs = load_attrs(cx, did);\n     let attrs = box merge_attrs(cx, Some(parent_module), target_attrs, attrs_clone);\n \n-    cx.renderinfo.inlined.insert(did);\n+    cx.inlined.insert(did);\n     let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name), kind, cx);\n     ret.push(clean::Item { attrs, ..what_rustc_thinks });\n     Some(ret)\n@@ -181,9 +182,9 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: clean::Typ\n     };\n \n     if did.is_local() {\n-        cx.renderinfo.exact_paths.insert(did, fqn);\n+        cx.cache.exact_paths.insert(did, fqn);\n     } else {\n-        cx.renderinfo.external_paths.insert(did, (fqn, kind));\n+        cx.cache.external_paths.insert(did, (fqn, ItemType::from(kind)));\n     }\n }\n \n@@ -315,7 +316,7 @@ crate fn build_impl(\n     attrs: Option<Attrs<'_>>,\n     ret: &mut Vec<clean::Item>,\n ) {\n-    if !cx.renderinfo.inlined.insert(did) {\n+    if !cx.inlined.insert(did) {\n         return;\n     }\n \n@@ -327,7 +328,7 @@ crate fn build_impl(\n     if !did.is_local() {\n         if let Some(traitref) = associated_trait {\n             let did = traitref.def_id;\n-            if !cx.renderinfo.access_levels.is_public(did) {\n+            if !cx.cache.access_levels.is_public(did) {\n                 return;\n             }\n \n@@ -359,7 +360,7 @@ crate fn build_impl(\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(did) = for_.def_id() {\n-            if !cx.renderinfo.access_levels.is_public(did) {\n+            if !cx.cache.access_levels.is_public(did) {\n                 return;\n             }\n "}, {"sha": "5d81498f8d210d546ab9c747788c47f547d79445", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -1304,7 +1304,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 // Substitute private type aliases\n                 if let Some(def_id) = def_id.as_local() {\n                     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n-                    if !cx.renderinfo.access_levels.is_exported(def_id.to_def_id()) {\n+                    if !cx.cache.access_levels.is_exported(def_id.to_def_id()) {\n                         alias = Some(&cx.tcx.hir().expect_item(hir_id).kind);\n                     }\n                 }"}, {"sha": "09ba0e2740f1b0bcec69d6a17f26eb75c8649de8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -50,7 +50,6 @@ thread_local!(crate static MAX_DEF_IDX: RefCell<FxHashMap<CrateNum, DefIndex>> =\n #[derive(Clone, Debug)]\n crate struct Crate {\n     crate name: Symbol,\n-    crate version: Option<String>,\n     crate src: FileName,\n     crate module: Option<Item>,\n     crate externs: Vec<(CrateNum, ExternalCrate)>,"}, {"sha": "a64e8c21c462e80aba0ee0b02b8afb8be8c88d23", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -17,21 +17,21 @@ use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n \n-crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n+crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     use crate::visit_lib::LibEmbargoVisitor;\n \n     let krate = cx.tcx.hir().krate();\n-    let module = crate::visit_ast::RustdocVisitor::new(&mut cx).visit(krate);\n+    let module = crate::visit_ast::RustdocVisitor::new(cx).visit(krate);\n \n-    cx.renderinfo.deref_trait_did = cx.tcx.lang_items().deref_trait();\n-    cx.renderinfo.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n-    cx.renderinfo.owned_box_did = cx.tcx.lang_items().owned_box();\n+    cx.cache.deref_trait_did = cx.tcx.lang_items().deref_trait();\n+    cx.cache.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n+    cx.cache.owned_box_did = cx.tcx.lang_items().owned_box();\n \n     let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates().iter() {\n         externs.push((cnum, cnum.clean(cx)));\n         // Analyze doc-reachability for extern items\n-        LibEmbargoVisitor::new(&mut cx).visit_lib(cnum);\n+        LibEmbargoVisitor::new(cx).visit_lib(cnum);\n     }\n     externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n \n@@ -77,7 +77,6 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n \n     Crate {\n         name,\n-        version: None,\n         src,\n         module: Some(module),\n         externs,"}, {"sha": "d9f5b5bfa3ae2c20c480c94797f662cdab58605f", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -4,9 +4,7 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::middle::privacy::AccessLevels;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n use rustc_session::config::{\n     build_codegen_options, build_debugging_options, get_cmd_lint_options, host_triple,\n@@ -268,20 +266,6 @@ crate struct RenderOptions {\n     crate unstable_features: rustc_feature::UnstableFeatures,\n }\n \n-/// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n-/// Later on moved into `cache`.\n-#[derive(Default, Clone)]\n-crate struct RenderInfo {\n-    crate inlined: FxHashSet<DefId>,\n-    crate external_paths: crate::core::ExternalPaths,\n-    crate exact_paths: FxHashMap<DefId, Vec<String>>,\n-    crate access_levels: AccessLevels<DefId>,\n-    crate deref_trait_did: Option<DefId>,\n-    crate deref_mut_trait_did: Option<DefId>,\n-    crate owned_box_did: Option<DefId>,\n-    crate output_format: OutputFormat,\n-}\n-\n impl Options {\n     /// Parses the given command-line for options. If an error message or other early-return has\n     /// been printed, returns `Err` with the exit code."}, {"sha": "1d55fa42a3a9bc0b3cb764ca65f9edf7e85a7c3f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -31,15 +31,12 @@ use std::{cell::RefCell, collections::hash_map::Entry};\n use crate::clean;\n use crate::clean::inline::build_external_trait;\n use crate::clean::{AttributesExt, TraitWithExtraInfo, MAX_DEF_IDX};\n-use crate::config::{Options as RustdocOptions, RenderOptions};\n-use crate::config::{OutputFormat, RenderInfo};\n+use crate::config::{Options as RustdocOptions, OutputFormat, RenderOptions};\n use crate::formats::cache::Cache;\n use crate::passes::{self, Condition::*, ConditionalPass};\n \n crate use rustc_session::config::{DebuggingOptions, Input, Options};\n \n-crate type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n-\n crate struct DocContext<'tcx> {\n     crate tcx: TyCtxt<'tcx>,\n     /// Name resolver. Used for intra-doc links.\n@@ -52,8 +49,6 @@ crate struct DocContext<'tcx> {\n     ///\n     /// Most of this logic is copied from rustc_lint::late.\n     crate param_env: ParamEnv<'tcx>,\n-    /// Later on moved into `cache`\n-    crate renderinfo: RenderInfo,\n     /// Later on moved through `clean::Crate` into `cache`\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, clean::TraitWithExtraInfo>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n@@ -81,8 +76,12 @@ crate struct DocContext<'tcx> {\n     /// See `collect_intra_doc_links::traits_implemented_by` for more details.\n     /// `map<module, set<trait>>`\n     crate module_trait_cache: RefCell<FxHashMap<DefId, FxHashSet<DefId>>>,\n-    /// Fake empty cache used when cache is required as parameter.\n+    /// This same cache is used throughout rustdoc, including in [`crate::html::render`].\n     crate cache: Cache,\n+    /// Used by [`clean::inline`] to tell if an item has already been inlined.\n+    crate inlined: FxHashSet<DefId>,\n+    /// Used by `calculate_doc_coverage`.\n+    crate output_format: OutputFormat,\n }\n \n impl<'tcx> DocContext<'tcx> {\n@@ -465,7 +464,7 @@ crate fn run_global_ctxt(\n     mut manual_passes: Vec<String>,\n     render_options: RenderOptions,\n     output_format: OutputFormat,\n-) -> (clean::Crate, RenderInfo, RenderOptions) {\n+) -> (clean::Crate, RenderOptions, Cache) {\n     // Certain queries assume that some checks were run elsewhere\n     // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),\n     // so type-check everything other than function bodies in this crate before running lints.\n@@ -504,17 +503,12 @@ crate fn run_global_ctxt(\n             .collect(),\n     };\n \n-    let mut renderinfo = RenderInfo::default();\n-    renderinfo.access_levels = access_levels;\n-    renderinfo.output_format = output_format;\n-\n     let mut ctxt = DocContext {\n         tcx,\n         resolver,\n         param_env: ParamEnv::empty(),\n         external_traits: Default::default(),\n         active_extern_traits: Default::default(),\n-        renderinfo,\n         ty_substs: Default::default(),\n         lt_substs: Default::default(),\n         ct_substs: Default::default(),\n@@ -527,9 +521,11 @@ crate fn run_global_ctxt(\n             .cloned()\n             .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))\n             .collect(),\n-        render_options,\n         module_trait_cache: RefCell::new(FxHashMap::default()),\n-        cache: Cache::default(),\n+        cache: Cache::new(access_levels, render_options.document_private),\n+        inlined: FxHashSet::default(),\n+        output_format,\n+        render_options,\n     };\n \n     // Small hack to force the Sized trait to be present.\n@@ -647,10 +643,16 @@ crate fn run_global_ctxt(\n \n     ctxt.sess().abort_if_errors();\n \n+    let render_options = ctxt.render_options;\n+    let mut cache = ctxt.cache;\n+    krate = tcx.sess.time(\"create_format_cache\", || {\n+        cache.populate(krate, tcx, &render_options.extern_html_root_urls, &render_options.output)\n+    });\n+\n     // The main crate doc comments are always collapsed.\n     krate.collapsed = true;\n \n-    (krate, ctxt.renderinfo, ctxt.render_options)\n+    (krate, render_options, cache)\n }\n \n /// Due to <https://github.com/rust-lang/rust/pull/73566>,"}, {"sha": "f20296f4fe1480f333117bdb15c51805fc1f100b", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 24, "deletions": 48, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -11,7 +11,6 @@ use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n-use crate::config::RenderInfo;\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n@@ -131,44 +130,23 @@ struct CacheBuilder<'a, 'tcx> {\n }\n \n impl Cache {\n-    crate fn from_krate<'tcx>(\n-        render_info: RenderInfo,\n-        document_private: bool,\n+    crate fn new(access_levels: AccessLevels<DefId>, document_private: bool) -> Self {\n+        Cache { access_levels, document_private, ..Cache::default() }\n+    }\n+\n+    /// Populates the `Cache` with more data. The returned `Crate` will be missing some data that was\n+    /// in `krate` due to the data being moved into the `Cache`.\n+    crate fn populate(\n+        &mut self,\n+        mut krate: clean::Crate,\n+        tcx: TyCtxt<'_>,\n         extern_html_root_urls: &BTreeMap<String, String>,\n         dst: &Path,\n-        mut krate: clean::Crate,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> (clean::Crate, Cache) {\n+    ) -> clean::Crate {\n         // Crawl the crate to build various caches used for the output\n-        let RenderInfo {\n-            inlined: _,\n-            external_paths,\n-            exact_paths,\n-            access_levels,\n-            deref_trait_did,\n-            deref_mut_trait_did,\n-            owned_box_did,\n-            ..\n-        } = render_info;\n-\n-        let external_paths =\n-            external_paths.into_iter().map(|(k, (v, t))| (k, (v, ItemType::from(t)))).collect();\n-\n-        let mut cache = Cache {\n-            external_paths,\n-            exact_paths,\n-            parent_is_trait_impl: false,\n-            stripped_mod: false,\n-            access_levels,\n-            crate_version: krate.version.take(),\n-            document_private,\n-            traits: krate.external_traits.replace(Default::default()),\n-            deref_trait_did,\n-            deref_mut_trait_did,\n-            owned_box_did,\n-            masked_crates: mem::take(&mut krate.masked_crates),\n-            ..Cache::default()\n-        };\n+        debug!(?self.crate_version);\n+        self.traits = krate.external_traits.take();\n+        self.masked_crates = mem::take(&mut krate.masked_crates);\n \n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n@@ -181,12 +159,11 @@ impl Cache {\n                 _ => PathBuf::new(),\n             };\n             let extern_url = extern_html_root_urls.get(&*e.name.as_str()).map(|u| &**u);\n-            cache\n-                .extern_locations\n+            self.extern_locations\n                 .insert(n, (e.name, src_root, extern_location(e, extern_url, &dst)));\n \n             let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n-            cache.external_paths.insert(did, (vec![e.name.to_string()], ItemType::Module));\n+            self.external_paths.insert(did, (vec![e.name.to_string()], ItemType::Module));\n         }\n \n         // Cache where all known primitives have their documentation located.\n@@ -195,27 +172,26 @@ impl Cache {\n         // reverse topological order.\n         for &(_, ref e) in krate.externs.iter().rev() {\n             for &(def_id, prim) in &e.primitives {\n-                cache.primitive_locations.insert(prim, def_id);\n+                self.primitive_locations.insert(prim, def_id);\n             }\n         }\n         for &(def_id, prim) in &krate.primitives {\n-            cache.primitive_locations.insert(prim, def_id);\n+            self.primitive_locations.insert(prim, def_id);\n         }\n \n-        cache.stack.push(krate.name.to_string());\n+        self.stack.push(krate.name.to_string());\n \n-        krate = CacheBuilder { tcx, cache: &mut cache, empty_cache: Cache::default() }\n-            .fold_crate(krate);\n+        krate = CacheBuilder { tcx, cache: self, empty_cache: Cache::default() }.fold_crate(krate);\n \n-        for (trait_did, dids, impl_) in cache.orphan_trait_impls.drain(..) {\n-            if cache.traits.contains_key(&trait_did) {\n+        for (trait_did, dids, impl_) in self.orphan_trait_impls.drain(..) {\n+            if self.traits.contains_key(&trait_did) {\n                 for did in dids {\n-                    cache.impls.entry(did).or_default().push(impl_.clone());\n+                    self.impls.entry(did).or_default().push(impl_.clone());\n                 }\n             }\n         }\n \n-        (krate, cache)\n+        krate\n     }\n }\n "}, {"sha": "b779363e5c701d7bfca255794be71f86175d8eb3", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -2,7 +2,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::edition::Edition;\n \n use crate::clean;\n-use crate::config::{RenderInfo, RenderOptions};\n+use crate::config::RenderOptions;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n \n@@ -18,7 +18,6 @@ crate trait FormatRenderer<'tcx>: Clone {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        render_info: RenderInfo,\n         edition: Edition,\n         cache: Cache,\n         tcx: TyCtxt<'tcx>,\n@@ -49,26 +48,16 @@ crate trait FormatRenderer<'tcx>: Clone {\n crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     options: RenderOptions,\n-    render_info: RenderInfo,\n+    cache: Cache,\n     diag: &rustc_errors::Handler,\n     edition: Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n-    let (krate, cache) = tcx.sess.time(\"create_format_cache\", || {\n-        Cache::from_krate(\n-            render_info.clone(),\n-            options.document_private,\n-            &options.extern_html_root_urls,\n-            &options.output,\n-            krate,\n-            tcx,\n-        )\n-    });\n     let prof = &tcx.sess.prof;\n \n     let (mut format_renderer, mut krate) = prof\n         .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n-        .run(|| T::init(krate, options, render_info, edition, cache, tcx))?;\n+        .run(|| T::init(krate, options, edition, cache, tcx))?;\n \n     let mut item = match krate.module.take() {\n         Some(i) => i,"}, {"sha": "4e762a40f08491849d63c514d63a738ba4fb2680", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -66,7 +66,7 @@ use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, AttributesExt, GetDefId, RenderedLink, SelfTy, TypeKind};\n-use crate::config::{RenderInfo, RenderOptions};\n+use crate::config::RenderOptions;\n use crate::docfs::{DocFS, PathError};\n use crate::error::Error;\n use crate::formats::cache::Cache;\n@@ -385,7 +385,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,\n-        _render_info: RenderInfo,\n         edition: Edition,\n         mut cache: Cache,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "e6edf33d23c8d08056ebf69dc087e5c879bfe5f9", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -19,7 +19,7 @@ use rustc_span::edition::Edition;\n use rustdoc_json_types as types;\n \n use crate::clean;\n-use crate::config::{RenderInfo, RenderOptions};\n+use crate::config::RenderOptions;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::FormatRenderer;\n@@ -133,7 +133,6 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        _render_info: RenderInfo,\n         _edition: Edition,\n         cache: Cache,\n         tcx: TyCtxt<'tcx>,\n@@ -200,7 +199,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n     fn after_krate(\n         &mut self,\n-        krate: &clean::Crate,\n+        _krate: &clean::Crate,\n         _diag: &rustc_errors::Handler,\n     ) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n@@ -211,7 +210,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         #[allow(rustc::default_hash_types)]\n         let output = types::Crate {\n             root: types::Id(String::from(\"0:0\")),\n-            crate_version: krate.version.clone(),\n+            crate_version: self.cache.crate_version.clone(),\n             includes_private: self.cache.document_private,\n             index: index.into_iter().collect(),\n             paths: self"}, {"sha": "d3a72204214979d668829c933f509006c8047584", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -553,12 +553,12 @@ fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainRes\n fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     renderopts: config::RenderOptions,\n-    render_info: config::RenderInfo,\n+    cache: formats::cache::Cache,\n     diag: &rustc_errors::Handler,\n     edition: rustc_span::edition::Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> MainResult {\n-    match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition, tcx) {\n+    match formats::run_format::<T>(krate, renderopts, cache, &diag, edition, tcx) {\n         Ok(_) => Ok(()),\n         Err(e) => {\n             let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n@@ -627,7 +627,7 @@ fn main_options(options: config::Options) -> MainResult {\n             let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).peek_mut();\n \n             global_ctxt.enter(|tcx| {\n-                let (mut krate, render_info, render_opts) = sess.time(\"run_global_ctxt\", || {\n+                let (krate, render_opts, mut cache) = sess.time(\"run_global_ctxt\", || {\n                     core::run_global_ctxt(\n                         tcx,\n                         resolver,\n@@ -639,7 +639,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 });\n                 info!(\"finished with rustc\");\n \n-                krate.version = crate_version;\n+                cache.crate_version = crate_version;\n \n                 if show_coverage {\n                     // if we ran coverage, bail early, we don't need to also generate docs at this point\n@@ -658,7 +658,7 @@ fn main_options(options: config::Options) -> MainResult {\n                         run_renderer::<html::render::Context<'_>>(\n                             krate,\n                             render_opts,\n-                            render_info,\n+                            cache,\n                             &diag,\n                             edition,\n                             tcx,\n@@ -668,7 +668,7 @@ fn main_options(options: config::Options) -> MainResult {\n                         run_renderer::<json::JsonRenderer<'_>>(\n                             krate,\n                             render_opts,\n-                            render_info,\n+                            cache,\n                             &diag,\n                             edition,\n                             tcx,"}, {"sha": "bb54523871c3ec99d70fcd09d565d2cf7eba142a", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'b> CoverageCalculator<'a, 'b> {\n     }\n \n     fn print_results(&self) {\n-        let output_format = self.ctx.renderinfo.output_format;\n+        let output_format = self.ctx.output_format;\n         if output_format.is_json() {\n             println!(\"{}\", self.to_json());\n             return;"}, {"sha": "685451b87eda99f528eda378a4039599d09a2da3", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -47,7 +47,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n                 // FIXME(eddyb) is this `doc(hidden)` check needed?\n                 if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n                     let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n-                    new_items.extend(impls.filter(|i| cx.renderinfo.inlined.insert(i.def_id)));\n+                    new_items.extend(impls.filter(|i| cx.inlined.insert(i.def_id)));\n                 }\n             });\n         }"}, {"sha": "3b1508c1348578b077426f30e58b4fe7793e1676", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -97,7 +97,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n                 |lint| lint.build(\"missing code example in this documentation\").emit(),\n             );\n         }\n-    } else if tests.found_tests > 0 && !cx.renderinfo.access_levels.is_public(item.def_id) {\n+    } else if tests.found_tests > 0 && !cx.cache.access_levels.is_public(item.def_id) {\n         cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,"}, {"sha": "fc8bbc97150298a3524e8dcd52622a810833f0f3", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -17,13 +17,12 @@ crate const STRIP_PRIVATE: Pass = Pass {\n crate fn strip_private(mut krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n     // This stripper collects all *retained* nodes.\n     let mut retained = DefIdSet::default();\n-    let access_levels = cx.renderinfo.access_levels.clone();\n \n     // strip all private items\n     {\n         let mut stripper = Stripper {\n             retained: &mut retained,\n-            access_levels: &access_levels,\n+            access_levels: &cx.cache.access_levels,\n             update_retained: true,\n         };\n         krate = ImportStripper.fold_crate(stripper.fold_crate(krate));"}, {"sha": "5da7d2f1e9b843d22c3bae695a451b9ca9d7c66a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             assert_eq!(cur_mod_def_id, macro_parent_def_id);\n             cur_mod.macros.push((def, None));\n         }\n-        self.cx.renderinfo.exact_paths = self.exact_paths;\n+        self.cx.cache.exact_paths = self.exact_paths;\n         top_level_module\n     }\n \n@@ -199,7 +199,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         // All items need to be handled here in case someone wishes to link\n                         // to them with intra-doc links\n-                        self.cx.renderinfo.access_levels.map.insert(did, AccessLevel::Public);\n+                        self.cx.cache.access_levels.map.insert(did, AccessLevel::Public);\n                     }\n                 }\n             }\n@@ -211,7 +211,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             None => return false,\n         };\n \n-        let is_private = !self.cx.renderinfo.access_levels.is_public(res_did);\n+        let is_private = !self.cx.cache.access_levels.is_public(res_did);\n         let is_hidden = inherits_doc_hidden(self.cx, res_hir_id);\n \n         // Only inline if requested or if the item would otherwise be stripped."}, {"sha": "3e06b4173144ca4a26d5a7831d5e8f680c21c3aa", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     crate fn new(cx: &'a mut crate::core::DocContext<'tcx>) -> LibEmbargoVisitor<'a, 'tcx> {\n         LibEmbargoVisitor {\n             tcx: cx.tcx,\n-            access_levels: &mut cx.renderinfo.access_levels,\n+            access_levels: &mut cx.cache.access_levels,\n             prev_level: Some(AccessLevel::Public),\n             visited_mods: FxHashSet::default(),\n         }"}, {"sha": "5bb66f7f6fd7c1b257f4277c49643b4d63ee718b", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51272edfee1c5b8c0eb8016042d7550c19729c8/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=b51272edfee1c5b8c0eb8016042d7550c19729c8", "patch": "@@ -1,6 +1,8 @@\n // edition:2018\n+// compile-flags: --crate-version 1.0.0\n \n-// @is nested.json \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n+// @is nested.json \"$.crate_version\" \\\"1.0.0\\\"\n+// @is - \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n // @is - \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n // @count - \"$.index[*][?(@.name=='nested')].inner.items[*]\" 1\n "}]}