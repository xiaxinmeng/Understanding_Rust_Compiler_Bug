{"sha": "27d1cd857e8998c423f329efce7c995a26dcdb6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZDFjZDg1N2U4OTk4YzQyM2YzMjllZmNlN2M5OTVhMjZkY2RiNmM=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-21T17:21:55Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-21T17:44:54Z"}, "message": "Add safety annotations in iter::range", "tree": {"sha": "c1e019966d58084bd3a77c7eeb11d6c3d946dbb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1e019966d58084bd3a77c7eeb11d6c3d946dbb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27d1cd857e8998c423f329efce7c995a26dcdb6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27d1cd857e8998c423f329efce7c995a26dcdb6c", "html_url": "https://github.com/rust-lang/rust/commit/27d1cd857e8998c423f329efce7c995a26dcdb6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27d1cd857e8998c423f329efce7c995a26dcdb6c/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c25b82f5bb9770374db31906dedb497034a151fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c25b82f5bb9770374db31906dedb497034a151fd", "html_url": "https://github.com/rust-lang/rust/commit/c25b82f5bb9770374db31906dedb497034a151fd"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "5db790e491c2d99c5a5e3287e482699581773fd8", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27d1cd857e8998c423f329efce7c995a26dcdb6c/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d1cd857e8998c423f329efce7c995a26dcdb6c/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=27d1cd857e8998c423f329efce7c995a26dcdb6c", "patch": "@@ -427,6 +427,8 @@ unsafe impl Step for char {\n             res = Step::forward_checked(res, 0x800)?;\n         }\n         if res <= char::MAX as u32 {\n+            // SAFETY: res is a valid unicode scalar\n+            // (below 0x110000 and not in 0xD800..0xE000)\n             Some(unsafe { char::from_u32_unchecked(res) })\n         } else {\n             None\n@@ -440,6 +442,8 @@ unsafe impl Step for char {\n         if start >= 0xE000 && 0xE000 > res {\n             res = Step::backward_checked(res, 0x800)?;\n         }\n+        // SAFETY: res is a valid unicode scalar\n+        // (below 0x110000 and not in 0xD800..0xE000)\n         Some(unsafe { char::from_u32_unchecked(res) })\n     }\n "}]}