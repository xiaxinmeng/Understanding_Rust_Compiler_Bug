{"sha": "4c05073d1d64b82ad10478324b87816cec16d74c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMDUwNzNkMWQ2NGI4MmFkMTA0NzgzMjRiODc4MTZjZWMxNmQ3NGM=", "commit": {"author": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-05-27T15:13:04Z"}, "committer": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-07-25T19:30:08Z"}, "message": "std: win: Don't use GetFileInformationByHandle on UWP", "tree": {"sha": "fef661163802cc44939fc0cbde2e190ed54790e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef661163802cc44939fc0cbde2e190ed54790e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c05073d1d64b82ad10478324b87816cec16d74c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c05073d1d64b82ad10478324b87816cec16d74c", "html_url": "https://github.com/rust-lang/rust/commit/4c05073d1d64b82ad10478324b87816cec16d74c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c05073d1d64b82ad10478324b87816cec16d74c/comments", "author": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24be59b4693d41634ad22815b4d973440ff0b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24be59b4693d41634ad22815b4d973440ff0b30", "html_url": "https://github.com/rust-lang/rust/commit/a24be59b4693d41634ad22815b4d973440ff0b30"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "6b4d6d9e23b81718268a05ca0d6720cddee51b62", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4c05073d1d64b82ad10478324b87816cec16d74c/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c05073d1d64b82ad10478324b87816cec16d74c/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=4c05073d1d64b82ad10478324b87816cec16d74c", "patch": "@@ -34,7 +34,6 @@ pub type ULONG = c_ulong;\n \n pub type LPBOOL = *mut BOOL;\n pub type LPBYTE = *mut BYTE;\n-pub type LPBY_HANDLE_FILE_INFORMATION = *mut BY_HANDLE_FILE_INFORMATION;\n pub type LPCSTR = *const CHAR;\n pub type LPCVOID = *const c_void;\n pub type LPCWSTR = *const WCHAR;\n@@ -341,20 +340,6 @@ pub struct WIN32_FILE_ATTRIBUTE_DATA {\n     pub nFileSizeLow: DWORD,\n }\n \n-#[repr(C)]\n-pub struct BY_HANDLE_FILE_INFORMATION {\n-    pub dwFileAttributes: DWORD,\n-    pub ftCreationTime: FILETIME,\n-    pub ftLastAccessTime: FILETIME,\n-    pub ftLastWriteTime: FILETIME,\n-    pub dwVolumeSerialNumber: DWORD,\n-    pub nFileSizeHigh: DWORD,\n-    pub nFileSizeLow: DWORD,\n-    pub nNumberOfLinks: DWORD,\n-    pub nFileIndexHigh: DWORD,\n-    pub nFileIndexLow: DWORD,\n-}\n-\n #[repr(C)]\n #[allow(dead_code)] // we only use some variants\n pub enum FILE_INFO_BY_HANDLE_CLASS {\n@@ -657,6 +642,22 @@ pub struct timeval {\n // Functions forbidden when targeting UWP\n cfg_if::cfg_if! {\n if #[cfg(not(target_vendor = \"uwp\"))] {\n+    #[repr(C)]\n+    pub struct BY_HANDLE_FILE_INFORMATION {\n+        pub dwFileAttributes: DWORD,\n+        pub ftCreationTime: FILETIME,\n+        pub ftLastAccessTime: FILETIME,\n+        pub ftLastWriteTime: FILETIME,\n+        pub dwVolumeSerialNumber: DWORD,\n+        pub nFileSizeHigh: DWORD,\n+        pub nFileSizeLow: DWORD,\n+        pub nNumberOfLinks: DWORD,\n+        pub nFileIndexHigh: DWORD,\n+        pub nFileIndexLow: DWORD,\n+    }\n+\n+    pub type LPBY_HANDLE_FILE_INFORMATION = *mut BY_HANDLE_FILE_INFORMATION;\n+\n     pub const HANDLE_FLAG_INHERIT: DWORD = 0x00000001;\n \n     pub const TOKEN_READ: DWORD = 0x20008;\n@@ -672,6 +673,9 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n         pub fn GetUserProfileDirectoryW(hToken: HANDLE,\n                                         lpProfileDir: LPWSTR,\n                                         lpcchSize: *mut DWORD) -> BOOL;\n+        pub fn GetFileInformationByHandle(hFile: HANDLE,\n+                            lpFileInformation: LPBY_HANDLE_FILE_INFORMATION)\n+                            -> BOOL;\n         pub fn SetHandleInformation(hObject: HANDLE,\n                                     dwMask: DWORD,\n                                     dwFlags: DWORD) -> BOOL;\n@@ -688,7 +692,20 @@ cfg_if::cfg_if! {\n if #[cfg(target_vendor = \"uwp\")] {\n     pub const BCRYPT_USE_SYSTEM_PREFERRED_RNG: DWORD = 0x00000002;\n \n+    #[repr(C)]\n+    pub struct FILE_STANDARD_INFO {\n+        pub AllocationSize: LARGE_INTEGER,\n+        pub EndOfFile: LARGE_INTEGER,\n+        pub NumberOfLink: DWORD,\n+        pub DeletePending: BOOLEAN,\n+        pub Directory: BOOLEAN,\n+    }\n+\n     extern \"system\" {\n+        pub fn GetFileInformationByHandleEx(hFile: HANDLE,\n+                                            fileInfoClass: FILE_INFO_BY_HANDLE_CLASS,\n+                                            lpFileInformation: LPVOID,\n+                                            dwBufferSize: DWORD) -> BOOL;\n         pub fn BCryptGenRandom(hAlgorithm: LPVOID, pBuffer: *mut u8,\n                                cbBuffer: ULONG, dwFlags: ULONG) -> LONG;\n     }\n@@ -752,10 +769,6 @@ extern \"system\" {\n     pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn SetFileAttributesW(lpFileName: LPCWSTR,\n                               dwFileAttributes: DWORD) -> BOOL;\n-    pub fn GetFileInformationByHandle(hFile: HANDLE,\n-                            lpFileInformation: LPBY_HANDLE_FILE_INFORMATION)\n-                            -> BOOL;\n-\n     pub fn SetLastError(dwErrCode: DWORD);\n     pub fn GetCommandLineW() -> *mut LPCWSTR;\n     pub fn GetTempPathW(nBufferLength: DWORD,"}, {"sha": "2f158c014060bd32689622c977ed2e8f7c8be65b", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4c05073d1d64b82ad10478324b87816cec16d74c/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c05073d1d64b82ad10478324b87816cec16d74c/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=4c05073d1d64b82ad10478324b87816cec16d74c", "patch": "@@ -287,6 +287,7 @@ impl File {\n         Ok(())\n     }\n \n+    #[cfg(not(target_vendor = \"uwp\"))]\n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n         unsafe {\n             let mut info: c::BY_HANDLE_FILE_INFORMATION = mem::zeroed();\n@@ -310,6 +311,49 @@ impl File {\n         }\n     }\n \n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn file_attr(&self) -> io::Result<FileAttr> {\n+        unsafe {\n+            let mut info: c::FILE_BASIC_INFO = mem::zeroed();\n+            let size = mem::size_of_val(&info);\n+            cvt(c::GetFileInformationByHandleEx(self.handle.raw(),\n+                                              c::FileBasicInfo,\n+                                              &mut info as *mut _ as *mut libc::c_void,\n+                                              size as c::DWORD))?;\n+            let mut attr = FileAttr {\n+                attributes: info.FileAttributes,\n+                creation_time: c::FILETIME {\n+                    dwLowDateTime: info.CreationTime as c::DWORD,\n+                    dwHighDateTime: (info.CreationTime >> 32) as c::DWORD,\n+                },\n+                last_access_time: c::FILETIME {\n+                    dwLowDateTime: info.LastAccessTime as c::DWORD,\n+                    dwHighDateTime: (info.LastAccessTime >> 32) as c::DWORD,\n+                },\n+                last_write_time: c::FILETIME {\n+                    dwLowDateTime: info.LastWriteTime as c::DWORD,\n+                    dwHighDateTime: (info.LastWriteTime >> 32) as c::DWORD,\n+                },\n+                file_size: 0,\n+                reparse_tag: 0,\n+            };\n+            let mut info: c::FILE_STANDARD_INFO = mem::zeroed();\n+            let size = mem::size_of_val(&info);\n+            cvt(c::GetFileInformationByHandleEx(self.handle.raw(),\n+                                                c::FileStandardInfo,\n+                                                &mut info as *mut _ as *mut libc::c_void,\n+                                                size as c::DWORD))?;\n+            attr.file_size = info.AllocationSize as u64;\n+            if attr.is_reparse_point() {\n+                let mut b = [0; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n+                if let Ok((_, buf)) = self.reparse_point(&mut b) {\n+                    attr.reparse_tag = buf.ReparseTag;\n+                }\n+            }\n+            Ok(attr)\n+        }\n+    }\n+\n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.handle.read(buf)\n     }"}]}