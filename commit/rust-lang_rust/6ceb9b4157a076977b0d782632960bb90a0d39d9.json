{"sha": "6ceb9b4157a076977b0d782632960bb90a0d39d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZWI5YjQxNTdhMDc2OTc3YjBkNzgyNjMyOTYwYmI5MGEwZDM5ZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-10T03:20:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-10T03:20:40Z"}, "message": "auto merge of #16824 : steveklabnik/rust/string_guide_improvements, r=alexcrichton\n\nA few steps toward https://github.com/rust-lang/rust/issues/15994", "tree": {"sha": "ec83db1fb115aecad7fe40ba05ad900ffedb51d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec83db1fb115aecad7fe40ba05ad900ffedb51d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ceb9b4157a076977b0d782632960bb90a0d39d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ceb9b4157a076977b0d782632960bb90a0d39d9", "html_url": "https://github.com/rust-lang/rust/commit/6ceb9b4157a076977b0d782632960bb90a0d39d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ceb9b4157a076977b0d782632960bb90a0d39d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1f49730906ca27947cd99547f7295a1bcf83920", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f49730906ca27947cd99547f7295a1bcf83920", "html_url": "https://github.com/rust-lang/rust/commit/a1f49730906ca27947cd99547f7295a1bcf83920"}, {"sha": "8ddb9c71c3f4c18a2679d498d5fe65a9b6516270", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ddb9c71c3f4c18a2679d498d5fe65a9b6516270", "html_url": "https://github.com/rust-lang/rust/commit/8ddb9c71c3f4c18a2679d498d5fe65a9b6516270"}], "stats": {"total": 89, "additions": 86, "deletions": 3}, "files": [{"sha": "a49132ec8be9498dcd55bdc6243d2693ff882abf", "filename": "src/doc/guide-strings.md", "status": "modified", "additions": 86, "deletions": 3, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/6ceb9b4157a076977b0d782632960bb90a0d39d9/src%2Fdoc%2Fguide-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ceb9b4157a076977b0d782632960bb90a0d39d9/src%2Fdoc%2Fguide-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-strings.md?ref=6ceb9b4157a076977b0d782632960bb90a0d39d9", "patch": "@@ -92,9 +92,33 @@ fn foo(s: String) {\n ```\n \n If you have good reason. It's not polite to hold on to ownership you don't\n-need, and it can make your lifetimes more complex. Furthermore, you can pass\n-either kind of string into `foo` by using `.as_slice()` on any `String` you\n-need to pass in, so the `&str` version is more flexible.\n+need, and it can make your lifetimes more complex.\n+\n+## Generic functions\n+\n+To write a function that's generic over types of strings, use [the `Str`\n+trait](http://doc.rust-lang.org/std/str/trait.Str.html):\n+\n+```{rust}\n+fn some_string_length<T: Str>(x: T) -> uint {\n+        x.as_slice().len()\n+}\n+\n+fn main() {\n+    let s = \"Hello, world\";\n+\n+    println!(\"{}\", some_string_length(s));\n+\n+    let s = \"Hello, world\".to_string();\n+\n+    println!(\"{}\", some_string_length(s));\n+}\n+```\n+\n+Both of these lines will print `12`. \n+\n+The only method that the `Str` trait has is `as_slice()`, which gives you\n+access to a `&str` value from the underlying string.\n \n ## Comparisons\n \n@@ -121,6 +145,65 @@ fn compare(string: String) {\n Converting a `String` to a `&str` is cheap, but converting the `&str` to a\n `String` involves an allocation.\n \n+## Indexing strings\n+\n+You may be tempted to try to access a certain character of a `String`, like\n+this:\n+\n+```{rust,ignore}\n+let s = \"hello\".to_string();\n+\n+println!(\"{}\", s[0]);\n+```\n+\n+This does not compile. This is on purpose. In the world of UTF-8, direct\n+indexing is basically never what you want to do. The reason is that each\n+character can be a variable number of bytes. This means that you have to iterate\n+through the characters anyway, which is a O(n) operation. \n+\n+To iterate over a string, use the `graphemes()` method on `&str`:\n+\n+```{rust}\n+let s = \"\u03b1\u1f30\u03b8\u03ae\u03c1\";\n+\n+for l in s.graphemes(true) {\n+    println!(\"{}\", l);\n+}\n+```\n+\n+Note that `l` has the type `&str` here, since a single grapheme can consist of\n+multiple codepoints, so a `char` wouldn't be appropriate.\n+\n+This will print out each character in turn, as you'd expect: first \"\u03b1\", then\n+\"\u1f30\", etc. You can see that this is different than just the individual bytes.\n+Here's a version that prints out each byte:\n+\n+```{rust}\n+let s = \"\u03b1\u1f30\u03b8\u03ae\u03c1\";\n+\n+for l in s.bytes() {\n+    println!(\"{}\", l);\n+}\n+```\n+\n+This will print:\n+\n+```{notrust,ignore}\n+206\n+177\n+225\n+188\n+176\n+206\n+184\n+206\n+174\n+207\n+129\n+```\n+\n+Many more bytes than graphemes!\n+\n # Other Documentation\n \n * [the `&str` API documentation](/std/str/index.html)"}]}