{"sha": "fd5f7673a76306265dbcdb2fa640fab877b9374a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNWY3NjczYTc2MzA2MjY1ZGJjZGIyZmE2NDBmYWI4NzdiOTM3NGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-03T21:24:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:19Z"}, "message": "rename `QueryRegionConstraint` to `QueryOutlivesConstraint`", "tree": {"sha": "e5911e8673d6663014f862124264985e5a9ae764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5911e8673d6663014f862124264985e5a9ae764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5f7673a76306265dbcdb2fa640fab877b9374a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5f7673a76306265dbcdb2fa640fab877b9374a", "html_url": "https://github.com/rust-lang/rust/commit/fd5f7673a76306265dbcdb2fa640fab877b9374a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5f7673a76306265dbcdb2fa640fab877b9374a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ec0ae77742713800613685cbb5a28fd75e8662", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ec0ae77742713800613685cbb5a28fd75e8662", "html_url": "https://github.com/rust-lang/rust/commit/d6ec0ae77742713800613685cbb5a28fd75e8662"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "274dbd1efd5d8f9ae15999ebe76fdb29a917c628", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -189,7 +189,7 @@ pub enum CanonicalTyVarKind {\n #[derive(Clone, Debug, HashStable)]\n pub struct QueryResponse<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n-    pub region_constraints: Vec<QueryRegionConstraint<'tcx>>,\n+    pub region_constraints: Vec<QueryOutlivesConstraint<'tcx>>,\n     pub certainty: Certainty,\n     pub value: R,\n }\n@@ -292,7 +292,7 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     }\n }\n \n-pub type QueryRegionConstraint<'tcx> = ty::Binder<ty::OutlivesPredicate<Kind<'tcx>, Region<'tcx>>>;\n+pub type QueryOutlivesConstraint<'tcx> = ty::Binder<ty::OutlivesPredicate<Kind<'tcx>, Region<'tcx>>>;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// Creates a substitution S for the canonical value with fresh"}, {"sha": "c72af20a86301f073f0cc552c2ac009d7897a5f5", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -11,7 +11,7 @@ use crate::arena::ArenaAllocatable;\n use crate::infer::canonical::substitute::substitute_value;\n use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty,\n-    OriginalQueryValues, QueryRegionConstraint, QueryResponse,\n+    OriginalQueryValues, QueryOutlivesConstraint, QueryResponse,\n };\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxtBuilder;\n@@ -222,7 +222,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             mut obligations,\n         } = self.query_response_substitution(cause, param_env, original_values, query_response)?;\n \n-        obligations.extend(self.query_region_constraints_into_obligations(\n+        obligations.extend(self.query_outlives_constraints_into_obligations(\n             cause,\n             param_env,\n             &query_response.value.region_constraints,\n@@ -248,9 +248,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// that come out of these queries, which it wants to convert into\n     /// MIR-based constraints and solve. Therefore, it is most\n     /// convenient for the NLL Type Checker to **directly consume**\n-    /// the `QueryRegionConstraint` values that arise from doing a\n+    /// the `QueryOutlivesConstraint` values that arise from doing a\n     /// query. This is contrast to other parts of the compiler, which\n-    /// would prefer for those `QueryRegionConstraint` to be converted\n+    /// would prefer for those `QueryOutlivesConstraint` to be converted\n     /// into the older infcx-style constraints (e.g., calls to\n     /// `sub_regions` or `register_region_obligation`).\n     ///\n@@ -263,7 +263,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ///   result. If any errors arise, they are propagated back as an\n     ///   `Err` result.\n     /// - In the case of a successful substitution, we will append\n-    ///   `QueryRegionConstraint` values onto the\n+    ///   `QueryOutlivesConstraint` values onto the\n     ///   `output_query_region_constraints` vector for the solver to\n     ///   use (if an error arises, some values may also be pushed, but\n     ///   they should be ignored).\n@@ -279,15 +279,15 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         original_values: &OriginalQueryValues<'tcx>,\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n-        output_query_region_constraints: &mut Vec<QueryRegionConstraint<'tcx>>,\n+        output_query_outlives_constraints: &mut Vec<QueryOutlivesConstraint<'tcx>>,\n     ) -> InferResult<'tcx, R>\n     where\n         R: Debug + TypeFoldable<'tcx>,\n     {\n         let result_subst =\n             self.query_response_substitution_guess(cause, original_values, query_response);\n \n-        // Compute `QueryRegionConstraint` values that unify each of\n+        // Compute `QueryOutlivesConstraint` values that unify each of\n         // the original values `v_o` that was canonicalized into a\n         // variable...\n         let mut obligations = vec![];\n@@ -305,9 +305,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 (UnpackedKind::Lifetime(v_o), UnpackedKind::Lifetime(v_r)) => {\n                     // To make `v_o = v_r`, we emit `v_o: v_r` and `v_r: v_o`.\n                     if v_o != v_r {\n-                        output_query_region_constraints\n+                        output_query_outlives_constraints\n                             .push(ty::Binder::dummy(ty::OutlivesPredicate(v_o.into(), v_r)));\n-                        output_query_region_constraints\n+                        output_query_outlives_constraints\n                             .push(ty::Binder::dummy(ty::OutlivesPredicate(v_r.into(), v_o)));\n                     }\n                 }\n@@ -333,7 +333,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         }\n \n         // ...also include the other query region constraints from the query.\n-        output_query_region_constraints.extend(\n+        output_query_outlives_constraints.extend(\n             query_response.value.region_constraints.iter().filter_map(|r_c| {\n                 let r_c = substitute_value(self.tcx, &result_subst, r_c);\n \n@@ -560,11 +560,11 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n     /// Converts the region constraints resulting from a query into an\n     /// iterator of obligations.\n-    fn query_region_constraints_into_obligations<'a>(\n+    fn query_outlives_constraints_into_obligations<'a>(\n         &'a self,\n         cause: &'a ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        unsubstituted_region_constraints: &'a [QueryRegionConstraint<'tcx>],\n+        unsubstituted_region_constraints: &'a [QueryOutlivesConstraint<'tcx>],\n         result_subst: &'a CanonicalVarValues<'tcx>,\n     ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints\n@@ -649,7 +649,7 @@ pub fn make_query_outlives<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>)>,\n     region_constraints: &RegionConstraintData<'tcx>,\n-) -> Vec<QueryRegionConstraint<'tcx>> {\n+) -> Vec<QueryOutlivesConstraint<'tcx>> {\n     let RegionConstraintData {\n         constraints,\n         verifys,"}, {"sha": "656b9271115d2117a8a5c2812ad39fd95c6e3862", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -500,7 +500,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n }\n \n pub fn report_unexpected_hidden_region(\n-    tcx: TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     region_scope_tree: Option<&region::ScopeTree>,\n     opaque_type_def_id: DefId,\n     hidden_ty: Ty<'tcx>,"}, {"sha": "42d0608d358ac748ab3fd813a2c605e720ef6486", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use crate::traits::query::Fallible;\n \n use crate::infer::canonical::query_response;\n-use crate::infer::canonical::QueryRegionConstraint;\n+use crate::infer::canonical::QueryOutlivesConstraint;\n use std::rc::Rc;\n use syntax::source_map::DUMMY_SP;\n use crate::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n@@ -39,7 +39,7 @@ where\n     fn fully_perform(\n         self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>)> {\n+    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>)> {\n         if cfg!(debug_assertions) {\n             info!(\"fully_perform({:?})\", self);\n         }\n@@ -62,7 +62,7 @@ where\n fn scrape_region_constraints<'tcx, R>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     op: impl FnOnce() -> Fallible<InferOk<'tcx, R>>,\n-) -> Fallible<(R, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>)> {\n+) -> Fallible<(R, Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>)> {\n     let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n     let dummy_body_id = ObligationCause::dummy().body_id;\n "}, {"sha": "0c415876247da209c6b19d379037d7f02b3216ba", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{\n     Canonical, Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues,\n-    QueryRegionConstraint, QueryResponse,\n+    QueryOutlivesConstraint, QueryResponse,\n };\n use crate::infer::{InferCtxt, InferOk};\n use std::fmt;\n@@ -32,7 +32,7 @@ pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n     fn fully_perform(\n         self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>)>;\n+    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>)>;\n }\n \n /// \"Query type ops\" are type ops that are implemented using a\n@@ -85,7 +85,7 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n     fn fully_perform_into(\n         query_key: ParamEnvAnd<'tcx, Self>,\n         infcx: &InferCtxt<'_, 'tcx>,\n-        output_query_region_constraints: &mut Vec<QueryRegionConstraint<'tcx>>,\n+        output_query_region_constraints: &mut Vec<QueryOutlivesConstraint<'tcx>>,\n     ) -> Fallible<Self::QueryResponse> {\n         if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {\n             return Ok(result);\n@@ -140,7 +140,7 @@ where\n     fn fully_perform(\n         self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>)> {\n+    ) -> Fallible<(Self::Output, Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>)> {\n         let mut qrc = vec![];\n         let r = Q::fully_perform_into(self, infcx, &mut qrc)?;\n "}, {"sha": "4a539f4b449b7a94d4571f781a326447abe5e023", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -8,7 +8,7 @@ use crate::borrow_check::Upvar;\n use crate::borrow_check::nll::type_check::free_region_relations::UniversalRegionRelations;\n use crate::borrow_check::nll::type_check::Locations;\n use rustc::hir::def_id::DefId;\n-use rustc::infer::canonical::QueryRegionConstraint;\n+use rustc::infer::canonical::QueryOutlivesConstraint;\n use rustc::infer::region_constraints::{GenericKind, VarInfos, VerifyBound};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin, RegionVariableOrigin};\n use rustc::mir::{\n@@ -1372,7 +1372,7 @@ pub trait ClosureRegionRequirementsExt<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         closure_def_id: DefId,\n         closure_substs: SubstsRef<'tcx>,\n-    ) -> Vec<QueryRegionConstraint<'tcx>>;\n+    ) -> Vec<QueryOutlivesConstraint<'tcx>>;\n \n     fn subst_closure_mapping<T>(\n         &self,\n@@ -1402,7 +1402,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n         tcx: TyCtxt<'tcx>,\n         closure_def_id: DefId,\n         closure_substs: SubstsRef<'tcx>,\n-    ) -> Vec<QueryRegionConstraint<'tcx>> {\n+    ) -> Vec<QueryOutlivesConstraint<'tcx>> {\n         debug!(\n             \"apply_requirements(closure_def_id={:?}, closure_substs={:?})\",\n             closure_def_id, closure_substs"}, {"sha": "8c7562739a762ddaef7a0c7e19c8ba384640d2c1", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -3,7 +3,7 @@ use crate::borrow_check::nll::region_infer::TypeTest;\n use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n use crate::borrow_check::nll::universal_regions::UniversalRegions;\n use crate::borrow_check::nll::ToRegionVid;\n-use rustc::infer::canonical::QueryRegionConstraint;\n+use rustc::infer::canonical::QueryOutlivesConstraint;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::outlives::obligations::{TypeOutlives, TypeOutlivesDelegate};\n use rustc::infer::region_constraints::{GenericKind, VerifyBound};\n@@ -49,13 +49,13 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         }\n     }\n \n-    pub(super) fn convert_all(&mut self, query_constraints: &[QueryRegionConstraint<'tcx>]) {\n+    pub(super) fn convert_all(&mut self, query_constraints: &[QueryOutlivesConstraint<'tcx>]) {\n         for query_constraint in query_constraints {\n             self.convert(query_constraint);\n         }\n     }\n \n-    pub(super) fn convert(&mut self, query_constraint: &QueryRegionConstraint<'tcx>) {\n+    pub(super) fn convert(&mut self, query_constraint: &QueryOutlivesConstraint<'tcx>) {\n         debug!(\"generate: constraints at: {:#?}\", self.locations);\n \n         // Extract out various useful fields we'll need below."}, {"sha": "09ea8dfd61c25be981df2282bd07389157271839", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -2,7 +2,7 @@ use crate::borrow_check::nll::type_check::constraint_conversion;\n use crate::borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n use crate::borrow_check::nll::universal_regions::UniversalRegions;\n use crate::borrow_check::nll::ToRegionVid;\n-use rustc::infer::canonical::QueryRegionConstraint;\n+use rustc::infer::canonical::QueryOutlivesConstraint;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;\n use rustc::infer::InferCtxt;\n@@ -311,7 +311,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n     /// either the return type of the MIR or one of its arguments. At\n     /// the same time, compute and add any implied bounds that come\n     /// from this local.\n-    fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<Rc<Vec<QueryRegionConstraint<'tcx>>>> {\n+    fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>> {\n         debug!(\"add_implied_bounds(ty={:?})\", ty);\n         let (bounds, constraints) =\n             self.param_env"}, {"sha": "70441cd258e707373f770ff26da44f9a51796a92", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -6,7 +6,7 @@ use crate::borrow_check::nll::type_check::TypeChecker;\n use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n-use rustc::infer::canonical::QueryRegionConstraint;\n+use rustc::infer::canonical::QueryOutlivesConstraint;\n use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Body};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n@@ -88,7 +88,7 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n \n struct DropData<'tcx> {\n     dropck_result: DropckOutlivesResult<'tcx>,\n-    region_constraint_data: Option<Rc<Vec<QueryRegionConstraint<'tcx>>>>,\n+    region_constraint_data: Option<Rc<Vec<QueryOutlivesConstraint<'tcx>>>>,\n }\n \n struct LivenessResults<'me, 'typeck, 'flow, 'tcx> {"}, {"sha": "134b51c4b7912b005525e1f875cb15bb58fb6607", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5f7673a76306265dbcdb2fa640fab877b9374a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=fd5f7673a76306265dbcdb2fa640fab877b9374a", "patch": "@@ -23,7 +23,7 @@ use crate::dataflow::MaybeInitializedPlaces;\n use either::Either;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::infer::canonical::QueryRegionConstraint;\n+use rustc::infer::canonical::QueryOutlivesConstraint;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1093,7 +1093,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         locations: Locations,\n         category: ConstraintCategory,\n-        data: &[QueryRegionConstraint<'tcx>],\n+        data: &[QueryOutlivesConstraint<'tcx>],\n     ) {\n         debug!(\n             \"push_region_constraints: constraints generated at {:?} are {:#?}\","}]}