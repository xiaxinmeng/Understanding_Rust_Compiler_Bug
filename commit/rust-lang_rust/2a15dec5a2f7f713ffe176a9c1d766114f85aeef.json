{"sha": "2a15dec5a2f7f713ffe176a9c1d766114f85aeef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMTVkZWM1YTJmN2Y3MTNmZmUxNzZhOWMxZDc2NjExNGY4NWFlZWY=", "commit": {"author": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2019-05-06T21:39:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-20T08:44:02Z"}, "message": "Document layout guarantee of MaybeUninit", "tree": {"sha": "064a0bb925ce9dd31593d141c4dffbdb062fccd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064a0bb925ce9dd31593d141c4dffbdb062fccd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a15dec5a2f7f713ffe176a9c1d766114f85aeef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a15dec5a2f7f713ffe176a9c1d766114f85aeef", "html_url": "https://github.com/rust-lang/rust/commit/2a15dec5a2f7f713ffe176a9c1d766114f85aeef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a15dec5a2f7f713ffe176a9c1d766114f85aeef/comments", "author": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bf500fea7b9c57d0fb20c9bdade3590b80358f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bf500fea7b9c57d0fb20c9bdade3590b80358f0", "html_url": "https://github.com/rust-lang/rust/commit/4bf500fea7b9c57d0fb20c9bdade3590b80358f0"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "24bee6355a7ccfe41f9e868b32a71718b52a2fcb", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a15dec5a2f7f713ffe176a9c1d766114f85aeef/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a15dec5a2f7f713ffe176a9c1d766114f85aeef/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=2a15dec5a2f7f713ffe176a9c1d766114f85aeef", "patch": "@@ -1053,6 +1053,28 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// to its fields.\n ///\n /// [ub]: ../../reference/behavior-considered-undefined.html\n+///\n+/// # Layout\n+///\n+/// `MaybeUninit<T>` is guaranteed to have the same size and alignment as `T`:\n+///\n+/// ```rust\n+/// use std::mem::{MaybeUninit, size_of, align_of};\n+/// assert_eq!(size_of::<MaybeUninit<u64>>(), size_of::<u64>());\n+/// assert_eq!(align_of::<MaybeUninit<u64>>(), align_of::<u64>());\n+/// ```\n+///\n+/// However remember that a type *containing* a `MaybeUninit<T>` is not necessarily the same\n+/// layout; Rust does not in general guarantee that the fields of a `Foo<T>` have the same order as\n+/// a `Foo<U>` even if `T` and `U` have the same size and alignment. Furthermore because any bit\n+/// value is valid for a `MaybeUninit<T>` the compiler can't apply non-zero/niche-filling\n+/// optimizations, potentially resulting in a larger size:\n+///\n+/// ```rust\n+/// # use std::mem::{MaybeUninit, size_of, align_of};\n+/// assert_eq!(size_of::<Option<bool>>(), 1);\n+/// assert_eq!(size_of::<Option<MaybeUninit<bool>>>(), 2);\n+/// ```\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n #[derive(Copy)]"}]}