{"sha": "0e039ada55bab9b94ceb3fabff409790e37635c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMDM5YWRhNTViYWI5Yjk0Y2ViM2ZhYmZmNDA5NzkwZTM3NjM1YzY=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-23T20:52:02Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-29T00:40:48Z"}, "message": "libcoretest: Add tests for NonZero.", "tree": {"sha": "568cbe062fbc6dfdd5a82eabff4f7d8f71c58be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/568cbe062fbc6dfdd5a82eabff4f7d8f71c58be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e039ada55bab9b94ceb3fabff409790e37635c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e039ada55bab9b94ceb3fabff409790e37635c6", "html_url": "https://github.com/rust-lang/rust/commit/0e039ada55bab9b94ceb3fabff409790e37635c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e039ada55bab9b94ceb3fabff409790e37635c6/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f12615735b833750b35eed7805d8a5a9898c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f12615735b833750b35eed7805d8a5a9898c1f", "html_url": "https://github.com/rust-lang/rust/commit/94f12615735b833750b35eed7805d8a5a9898c1f"}], "stats": {"total": 139, "additions": 101, "deletions": 38}, "files": [{"sha": "c429e4b8212bc2e1d95db58ffa1e4d2f2c00dc3e", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0e039ada55bab9b94ceb3fabff409790e37635c6/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e039ada55bab9b94ceb3fabff409790e37635c6/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=0e039ada55bab9b94ceb3fabff409790e37635c6", "patch": "@@ -51,41 +51,3 @@ impl<T: Zeroable> Deref<T> for NonZero<T> {\n         inner\n     }\n }\n-\n-#[cfg(test)]\n-mod test {\n-    use super::NonZero;\n-\n-    #[test]\n-    fn test_create_nonzero_instance() {\n-        let _a = unsafe {\n-            NonZero::new(21)\n-        };\n-    }\n-\n-    #[test]\n-    fn test_size_nonzero_in_option() {\n-        use mem::size_of;\n-        use option::Option;\n-\n-        assert_eq!(size_of::<NonZero<u32>>(), size_of::<Option<NonZero<u32>>>());\n-    }\n-\n-    #[test]\n-    fn test_match_on_nonzero_option() {\n-        use option::Some;\n-\n-        let a = Some(unsafe {\n-            NonZero::new(42)\n-        });\n-        match a {\n-            Some(val) => assert_eq!(*val, 42),\n-            None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n-        }\n-\n-        match unsafe { NonZero::new(43) } {\n-            Some(val) => assert_eq!(*val, 43),\n-            None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n-        }\n-    }\n-}"}, {"sha": "e6608eee3ddfab565f6fb8f71f94705f72aa1198", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e039ada55bab9b94ceb3fabff409790e37635c6/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e039ada55bab9b94ceb3fabff409790e37635c6/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=0e039ada55bab9b94ceb3fabff409790e37635c6", "patch": "@@ -25,6 +25,7 @@ mod fmt;\n mod hash;\n mod iter;\n mod mem;\n+mod nonzero;\n mod num;\n mod ops;\n mod option;"}, {"sha": "ed66be3d890dc75f23a1a2ea5ac6a48e804bb90e", "filename": "src/libcoretest/nonzero.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/0e039ada55bab9b94ceb3fabff409790e37635c6/src%2Flibcoretest%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e039ada55bab9b94ceb3fabff409790e37635c6/src%2Flibcoretest%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnonzero.rs?ref=0e039ada55bab9b94ceb3fabff409790e37635c6", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::nonzero::NonZero;\n+use core::option::Option;\n+use core::option::Option::{Some, None};\n+use std::mem::size_of;\n+\n+#[test]\n+fn test_create_nonzero_instance() {\n+    let _a = unsafe {\n+        NonZero::new(21i)\n+    };\n+}\n+\n+#[test]\n+fn test_size_nonzero_in_option() {\n+    assert_eq!(size_of::<NonZero<u32>>(), size_of::<Option<NonZero<u32>>>());\n+}\n+\n+#[test]\n+fn test_match_on_nonzero_option() {\n+    let a = Some(unsafe {\n+        NonZero::new(42i)\n+    });\n+    match a {\n+        Some(val) => assert_eq!(*val, 42),\n+        None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n+    }\n+\n+    match unsafe { Some(NonZero::new(43i)) } {\n+        Some(val) => assert_eq!(*val, 43),\n+        None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n+    }\n+}\n+\n+#[test]\n+fn test_match_option_empty_vec() {\n+    let a: Option<Vec<int>> = Some(vec![]);\n+    match a {\n+        None => panic!(\"unexpected None while matching on Some(vec![])\"),\n+        _ => {}\n+    }\n+}\n+\n+#[test]\n+fn test_match_option_vec() {\n+    let a = Some(vec![1i, 2, 3, 4]);\n+    match a {\n+        Some(v) => assert_eq!(v, vec![1i, 2, 3, 4]),\n+        None => panic!(\"unexpected None while matching on Some(vec![1, 2, 3, 4])\")\n+    }\n+}\n+\n+#[test]\n+fn test_match_option_rc() {\n+    use std::rc::Rc;\n+\n+    let five = Rc::new(5i);\n+    match Some(five) {\n+        Some(r) => assert_eq!(*r, 5i),\n+        None => panic!(\"unexpected None while matching on Some(Rc::new(5))\")\n+    }\n+}\n+\n+#[test]\n+fn test_match_option_arc() {\n+    use std::sync::Arc;\n+\n+    let five = Arc::new(5i);\n+    match Some(five) {\n+        Some(a) => assert_eq!(*a, 5i),\n+        None => panic!(\"unexpected None while matching on Some(Arc::new(5))\")\n+    }\n+}\n+\n+#[test]\n+fn test_match_option_empty_string() {\n+    let a = Some(String::new());\n+    match a {\n+        None => panic!(\"unexpected None while matching on Some(String::new())\"),\n+        _ => {}\n+    }\n+}\n+\n+#[test]\n+fn test_match_option_string() {\n+    let five = \"Five\".into_string();\n+    match Some(five) {\n+        Some(s) => assert_eq!(s, \"Five\"),\n+        None => panic!(\"unexpected None while matching on Some(String { ... })\")\n+    }\n+}"}]}