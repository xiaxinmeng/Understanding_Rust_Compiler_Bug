{"sha": "78e27e2c7a85021a0b72253c17d0d99a383e8385", "node_id": "C_kwDOAAsO6NoAKDc4ZTI3ZTJjN2E4NTAyMWEwYjcyMjUzYzE3ZDBkOTlhMzgzZTgzODU", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-16T14:52:21Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-30T09:12:45Z"}, "message": "async: Give predictable, reserved name to binding generated from .await expressions.\n\nThis name makes it to debuginfo and allows debuggers to identify such bindings and\ntheir captured versions in suspended async fns.", "tree": {"sha": "8a16612a7ebd84f80ae17e9cf783679c407503da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a16612a7ebd84f80ae17e9cf783679c407503da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e27e2c7a85021a0b72253c17d0d99a383e8385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e27e2c7a85021a0b72253c17d0d99a383e8385", "html_url": "https://github.com/rust-lang/rust/commit/78e27e2c7a85021a0b72253c17d0d99a383e8385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e27e2c7a85021a0b72253c17d0d99a383e8385/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461e8078010433ff7de2db2aaae8a3cfb0847215", "url": "https://api.github.com/repos/rust-lang/rust/commits/461e8078010433ff7de2db2aaae8a3cfb0847215", "html_url": "https://github.com/rust-lang/rust/commit/461e8078010433ff7de2db2aaae8a3cfb0847215"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "9442e0f1a1f3533714c940e8e935000f07aaa533", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/78e27e2c7a85021a0b72253c17d0d99a383e8385/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e27e2c7a85021a0b72253c17d0d99a383e8385/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=78e27e2c7a85021a0b72253c17d0d99a383e8385", "patch": "@@ -618,9 +618,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// Desugar `<expr>.await` into:\n     /// ```rust\n     /// match ::std::future::IntoFuture::into_future(<expr>) {\n-    ///     mut pinned => loop {\n+    ///     mut __awaitee => loop {\n     ///         match unsafe { ::std::future::Future::poll(\n-    ///             <::std::pin::Pin>::new_unchecked(&mut pinned),\n+    ///             <::std::pin::Pin>::new_unchecked(&mut __awaitee),\n     ///             ::std::future::get_context(task_context),\n     ///         ) } {\n     ///             ::std::task::Poll::Ready(result) => break result,\n@@ -657,21 +657,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let expr = self.lower_expr_mut(expr);\n         let expr_hir_id = expr.hir_id;\n \n-        let pinned_ident = Ident::with_dummy_span(sym::pinned);\n-        let (pinned_pat, pinned_pat_hid) =\n-            self.pat_ident_binding_mode(span, pinned_ident, hir::BindingAnnotation::Mutable);\n+        // Note that the name of this binding must not be changed to something else because\n+        // debuggers and debugger extensions expect it to be called `__awaitee`. They use\n+        // this name to identify what is being awaited by a suspended async functions.\n+        let awaitee_ident = Ident::with_dummy_span(sym::__awaitee);\n+        let (awaitee_pat, awaitee_pat_hid) =\n+            self.pat_ident_binding_mode(span, awaitee_ident, hir::BindingAnnotation::Mutable);\n \n         let task_context_ident = Ident::with_dummy_span(sym::_task_context);\n \n         // unsafe {\n         //     ::std::future::Future::poll(\n-        //         ::std::pin::Pin::new_unchecked(&mut pinned),\n+        //         ::std::pin::Pin::new_unchecked(&mut __awaitee),\n         //         ::std::future::get_context(task_context),\n         //     )\n         // }\n         let poll_expr = {\n-            let pinned = self.expr_ident(span, pinned_ident, pinned_pat_hid);\n-            let ref_mut_pinned = self.expr_mut_addr_of(span, pinned);\n+            let awaitee = self.expr_ident(span, awaitee_ident, awaitee_pat_hid);\n+            let ref_mut_awaitee = self.expr_mut_addr_of(span, awaitee);\n             let task_context = if let Some(task_context_hid) = self.task_context {\n                 self.expr_ident_mut(span, task_context_ident, task_context_hid)\n             } else {\n@@ -681,7 +684,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let new_unchecked = self.expr_call_lang_item_fn_mut(\n                 span,\n                 hir::LangItem::PinNewUnchecked,\n-                arena_vec![self; ref_mut_pinned],\n+                arena_vec![self; ref_mut_awaitee],\n                 Some(expr_hir_id),\n             );\n             let get_context = self.expr_call_lang_item_fn_mut(\n@@ -782,8 +785,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             span: self.lower_span(span),\n         });\n \n-        // mut pinned => loop { ... }\n-        let pinned_arm = self.arm(pinned_pat, loop_expr);\n+        // mut __awaitee => loop { ... }\n+        let awaitee_arm = self.arm(awaitee_pat, loop_expr);\n \n         // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n         let into_future_span = self.mark_span_with_reason(\n@@ -799,11 +802,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         );\n \n         // match <into_future_expr> {\n-        //     mut pinned => loop { .. }\n+        //     mut __awaitee => loop { .. }\n         // }\n         hir::ExprKind::Match(\n             into_future_expr,\n-            arena_vec![self; pinned_arm],\n+            arena_vec![self; awaitee_arm],\n             hir::MatchSource::AwaitDesugar,\n         )\n     }"}, {"sha": "774cf6a19c76ddecfc84b0cc05c1393119c2c52d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e27e2c7a85021a0b72253c17d0d99a383e8385/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e27e2c7a85021a0b72253c17d0d99a383e8385/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=78e27e2c7a85021a0b72253c17d0d99a383e8385", "patch": "@@ -272,6 +272,7 @@ symbols! {\n         __D,\n         __H,\n         __S,\n+        __awaitee,\n         __try_var,\n         _d,\n         _e,\n@@ -1022,7 +1023,6 @@ symbols! {\n         pattern_parentheses,\n         phantom_data,\n         pin,\n-        pinned,\n         platform_intrinsics,\n         plugin,\n         plugin_registrar,"}, {"sha": "efb345fa9f3e52be803134e5ce50d939a63d7697", "filename": "src/test/codegen/async-fn-debug-awaitee-field.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/78e27e2c7a85021a0b72253c17d0d99a383e8385/src%2Ftest%2Fcodegen%2Fasync-fn-debug-awaitee-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e27e2c7a85021a0b72253c17d0d99a383e8385/src%2Ftest%2Fcodegen%2Fasync-fn-debug-awaitee-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-awaitee-field.rs?ref=78e27e2c7a85021a0b72253c17d0d99a383e8385", "patch": "@@ -0,0 +1,23 @@\n+// This test makes sure that the generator field capturing the awaitee in a `.await` expression\n+// is called \"__awaitee\" in debuginfo. This name must not be changed since debuggers and debugger\n+// extensions rely on the field having this name.\n+\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+\n+async fn foo() {}\n+\n+async fn async_fn_test() {\n+    foo().await;\n+}\n+\n+// NONMSVC: [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}\",\n+// MSVC: [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"enum$<async_fn_debug_awaitee_field::async_fn_test::async_fn_env$0>\",\n+// CHECK: [[SUSPEND_STRUCT:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend0\", scope: [[GEN]],\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"__awaitee\", scope: [[SUSPEND_STRUCT]], {{.*}}, baseType: [[AWAITEE_TYPE:![0-9]*]],\n+// NONMSVC: [[AWAITEE_TYPE]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"GenFuture<async_fn_debug_awaitee_field::foo::{async_fn_env#0}>\",\n+// MSVC: [[AWAITEE_TYPE]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"GenFuture<enum$<async_fn_debug_awaitee_field::foo::async_fn_env$0> >\",\n+\n+fn main() {\n+    let _fn = async_fn_test();\n+}"}]}