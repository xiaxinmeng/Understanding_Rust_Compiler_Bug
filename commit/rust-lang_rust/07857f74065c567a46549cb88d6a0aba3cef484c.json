{"sha": "07857f74065c567a46549cb88d6a0aba3cef484c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ODU3Zjc0MDY1YzU2N2E0NjU0OWNiODhkNmEwYWJhM2NlZjQ4NGM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-28T11:47:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-29T03:13:24Z"}, "message": "review comments", "tree": {"sha": "4599c7d9394140bb621fc1d3116d282ddee4b6a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4599c7d9394140bb621fc1d3116d282ddee4b6a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07857f74065c567a46549cb88d6a0aba3cef484c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07857f74065c567a46549cb88d6a0aba3cef484c", "html_url": "https://github.com/rust-lang/rust/commit/07857f74065c567a46549cb88d6a0aba3cef484c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07857f74065c567a46549cb88d6a0aba3cef484c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51ca0268d0b130cbe3ef4a2dd0024d6d136e3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51ca0268d0b130cbe3ef4a2dd0024d6d136e3fb", "html_url": "https://github.com/rust-lang/rust/commit/a51ca0268d0b130cbe3ef4a2dd0024d6d136e3fb"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "7886af0c973935343d339c10fe08eeec6d9f041c", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 44, "deletions": 39, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/07857f74065c567a46549cb88d6a0aba3cef484c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07857f74065c567a46549cb88d6a0aba3cef484c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=07857f74065c567a46549cb88d6a0aba3cef484c", "patch": "@@ -249,6 +249,26 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n+    fn is_hir_id_from_struct_pattern_shorthand_field(&self, hir_id: hir::HirId) -> bool {\n+        let parent_id = self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id);\n+        let mut is_struct_pat_shorthand_field = false;\n+        if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {\n+            // Account for fields\n+            if let Node::Expr(hir::Expr {\n+                node: hir::ExprKind::Struct(_, fields, ..), ..\n+            }) = parent {\n+                if let Ok(src) = cm.span_to_snippet(sp) {\n+                    for field in fields {\n+                        if field.ident.as_str() == src.as_str() && field.is_shorthand {\n+                            is_struct_pat_shorthand_field = true;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        };\n+    }\n+\n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n     /// provide them useful help. For example:\n     ///\n@@ -277,23 +297,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        let parent_id = self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id);\n-        let mut is_struct_pat_shorthand_field = false;\n-        if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {\n-            // Account for fields\n-            if let Node::Expr(hir::Expr {\n-                node: hir::ExprKind::Struct(_, fields, ..), ..\n-            }) = parent {\n-                if let Ok(src) = cm.span_to_snippet(sp) {\n-                    for field in fields {\n-                        if field.ident.as_str() == src.as_str() && field.is_shorthand {\n-                            is_struct_pat_shorthand_field = true;\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-        };\n+        let mut is_struct_pat_shorthand_field =\n+            self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id);\n \n         match (&expected.sty, &checked_ty.sty) {\n             (&ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.sty, &check.sty) {\n@@ -333,12 +338,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // bar(&x); // error, expected &mut\n                 // ```\n                 let ref_ty = match mutability {\n-                    hir::Mutability::MutMutable => self.tcx.mk_mut_ref(\n-                                                       self.tcx.mk_region(ty::ReStatic),\n-                                                       checked_ty),\n-                    hir::Mutability::MutImmutable => self.tcx.mk_imm_ref(\n-                                                       self.tcx.mk_region(ty::ReStatic),\n-                                                       checked_ty),\n+                    hir::Mutability::MutMutable => {\n+                        self.tcx.mk_mut_ref(self.tcx.mk_region(ty::ReStatic), checked_ty)\n+                    }\n+                    hir::Mutability::MutImmutable => {\n+                        self.tcx.mk_imm_ref(self.tcx.mk_region(ty::ReStatic), checked_ty)\n+                    }\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n                     if let Ok(src) = cm.span_to_snippet(sp) {\n@@ -359,22 +364,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some(sugg);\n                         }\n-                        return Some(match (mutability, is_struct_pat_shorthand_field) {\n-                            (hir::Mutability::MutMutable, false) => {\n-                                (sp, \"consider mutably borrowing here\",\n-                                 format!(\"&mut {}\", sugg_expr))\n-                            }\n-                            (hir::Mutability::MutImmutable, false) => {\n-                                (sp, \"consider borrowing here\", format!(\"&{}\", sugg_expr))\n-                            }\n-                            (hir::Mutability::MutMutable, true) => {\n-                                (sp, \"consider mutably borrowing here\",\n-                                 format!(\"{}: &mut {}\", sugg_expr, sugg_expr))\n-                            }\n-                            (hir::Mutability::MutImmutable, true) => {\n-                                (sp, \"consider borrowing here\",\n-                                 format!(\"{}: &{}\", sugg_expr, sugg_expr))\n-                            }\n+                        let field_name = if is_struct_pat_shorthand_field {\n+                            format!(\"{}: \", sugg_expr)\n+                        } else {\n+                            String::new()\n+                        };\n+                        return Some(match mutability {\n+                            hir::Mutability::MutMutable => (\n+                                sp,\n+                                \"consider mutably borrowing here\",\n+                                format!(\"{}&mut {}\", field_name, sugg_expr),\n+                            ),\n+                            hir::Mutability::MutImmutable => (\n+                                sp,\n+                                \"consider borrowing here\",\n+                                format!(\"{}&{}\", field_name, sugg_expr),\n+                            ),\n                         });\n                     }\n                 }"}]}