{"sha": "3f032979562e9b245ac452ec91ec3204176c27fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMDMyOTc5NTYyZTliMjQ1YWM0NTJlYzkxZWMzMjA0MTc2YzI3ZmU=", "commit": {"author": {"name": "DebugSteven", "email": "debugsteven@gmail.com", "date": "2019-01-11T01:27:44Z"}, "committer": {"name": "DebugSteven", "email": "debugsteven@gmail.com", "date": "2019-01-11T01:27:44Z"}, "message": "inline pub extern crate statements", "tree": {"sha": "efbecb8a37909add9ac3e7000116f726bc47fc72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efbecb8a37909add9ac3e7000116f726bc47fc72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f032979562e9b245ac452ec91ec3204176c27fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f032979562e9b245ac452ec91ec3204176c27fe", "html_url": "https://github.com/rust-lang/rust/commit/3f032979562e9b245ac452ec91ec3204176c27fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f032979562e9b245ac452ec91ec3204176c27fe/comments", "author": {"login": "DebugSteven", "id": 10746702, "node_id": "MDQ6VXNlcjEwNzQ2NzAy", "avatar_url": "https://avatars.githubusercontent.com/u/10746702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DebugSteven", "html_url": "https://github.com/DebugSteven", "followers_url": "https://api.github.com/users/DebugSteven/followers", "following_url": "https://api.github.com/users/DebugSteven/following{/other_user}", "gists_url": "https://api.github.com/users/DebugSteven/gists{/gist_id}", "starred_url": "https://api.github.com/users/DebugSteven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DebugSteven/subscriptions", "organizations_url": "https://api.github.com/users/DebugSteven/orgs", "repos_url": "https://api.github.com/users/DebugSteven/repos", "events_url": "https://api.github.com/users/DebugSteven/events{/privacy}", "received_events_url": "https://api.github.com/users/DebugSteven/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DebugSteven", "id": 10746702, "node_id": "MDQ6VXNlcjEwNzQ2NzAy", "avatar_url": "https://avatars.githubusercontent.com/u/10746702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DebugSteven", "html_url": "https://github.com/DebugSteven", "followers_url": "https://api.github.com/users/DebugSteven/followers", "following_url": "https://api.github.com/users/DebugSteven/following{/other_user}", "gists_url": "https://api.github.com/users/DebugSteven/gists{/gist_id}", "starred_url": "https://api.github.com/users/DebugSteven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DebugSteven/subscriptions", "organizations_url": "https://api.github.com/users/DebugSteven/orgs", "repos_url": "https://api.github.com/users/DebugSteven/repos", "events_url": "https://api.github.com/users/DebugSteven/events{/privacy}", "received_events_url": "https://api.github.com/users/DebugSteven/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecad338381cc3b8d56e2df22e5971a598eddd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecad338381cc3b8d56e2df22e5971a598eddd6c", "html_url": "https://github.com/rust-lang/rust/commit/6ecad338381cc3b8d56e2df22e5971a598eddd6c"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "6eea95b61c99051e5652a028c4639bebcc283c37", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3f032979562e9b245ac452ec91ec3204176c27fe/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f032979562e9b245ac452ec91ec3204176c27fe/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3f032979562e9b245ac452ec91ec3204176c27fe", "patch": "@@ -587,7 +587,7 @@ impl Clean<Item> for doctree::Module {\n         let attrs = self.attrs.clean(cx);\n \n         let mut items: Vec<Item> = vec![];\n-        items.extend(self.extern_crates.iter().map(|x| x.clean(cx)));\n+        items.extend(self.extern_crates.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.structs.iter().map(|x| x.clean(cx)));\n         items.extend(self.unions.iter().map(|x| x.clean(cx)));\n@@ -3503,9 +3503,30 @@ fn build_deref_target_impls(cx: &DocContext,\n     }\n }\n \n-impl Clean<Item> for doctree::ExternCrate {\n-    fn clean(&self, cx: &DocContext) -> Item {\n-        Item {\n+impl Clean<Vec<Item>> for doctree::ExternCrate {\n+    fn clean(&self, cx: &DocContext) -> Vec<Item> {\n+\n+        let please_inline = self.vis.node.is_pub() && self.attrs.iter().any(|a| {\n+            a.name() == \"doc\" && match a.meta_item_list() {\n+                Some(l) => attr::list_contains_name(&l, \"inline\"),\n+                None => false,\n+            }\n+        });\n+\n+        if please_inline {\n+            let mut visited = FxHashSet::default();\n+\n+            let def = Def::Mod(DefId {\n+                krate: self.cnum,\n+                index: CRATE_DEF_INDEX,\n+            });\n+\n+            if let Some(items) = inline::try_inline(cx, def, self.name, &mut visited) {\n+                return items;\n+            }\n+        }\n+\n+        vec![Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n@@ -3514,7 +3535,7 @@ impl Clean<Item> for doctree::ExternCrate {\n             stability: None,\n             deprecation: None,\n             inner: ExternCrateItem(self.name.clean(cx), self.path.clone())\n-        }\n+        }]\n     }\n }\n "}]}