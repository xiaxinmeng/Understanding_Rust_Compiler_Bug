{"sha": "65d02b26c525c07d47686302a15231b28914fda4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDAyYjI2YzUyNWMwN2Q0NzY4NjMwMmExNTIzMWIyODkxNGZkYTQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-05-23T12:47:41Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-06-15T21:48:30Z"}, "message": "Add impl of `Alloc` for the global rust heap.\n\nAlpha-renamed `HeapAllocator` to `HeapAlloc`.\n\n`<HeapAlloc as Alloc>::alloc_zeroed` is hooked up to `heap::allocate_zeroed`.\n\n`HeapAlloc::realloc` falls back on alloc+copy+realloc on align mismatch.", "tree": {"sha": "f52625ca2c599abb5bf000f646986152b6ba4529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f52625ca2c599abb5bf000f646986152b6ba4529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d02b26c525c07d47686302a15231b28914fda4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d02b26c525c07d47686302a15231b28914fda4", "html_url": "https://github.com/rust-lang/rust/commit/65d02b26c525c07d47686302a15231b28914fda4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d02b26c525c07d47686302a15231b28914fda4/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3bc4e90fab35d4debe7d6cb0468d299b38354c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3bc4e90fab35d4debe7d6cb0468d299b38354c", "html_url": "https://github.com/rust-lang/rust/commit/1d3bc4e90fab35d4debe7d6cb0468d299b38354c"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "d46c6a83ff32c64069c50f985838e1885199909b", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/65d02b26c525c07d47686302a15231b28914fda4/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d02b26c525c07d47686302a15231b28914fda4/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=65d02b26c525c07d47686302a15231b28914fda4", "patch": "@@ -15,7 +15,8 @@\n                       tracing garbage collector\",\n             issue = \"27700\")]\n \n-use core::{isize, usize};\n+use allocator::{Alloc, AllocErr, CannotReallocInPlace, Layout};\n+use core::{isize, usize, cmp, ptr};\n use core::intrinsics::{min_align_of_val, size_of_val};\n \n #[allow(improper_ctypes)]\n@@ -44,6 +45,82 @@ fn check_size_and_alignment(size: usize, align: usize) {\n                   align);\n }\n \n+#[derive(Copy, Clone, Default, Debug)]\n+pub struct HeapAlloc;\n+\n+unsafe impl Alloc for HeapAlloc {\n+    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        let addr = allocate(layout.size(), layout.align());\n+        if addr.is_null() {\n+            Err(AllocErr::Exhausted { request: layout })\n+        } else {\n+            Ok(addr)\n+        }\n+    }\n+\n+    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        let addr = allocate_zeroed(layout.size(), layout.align());\n+        if addr.is_null() {\n+            Err(AllocErr::Exhausted { request: layout })\n+        } else {\n+            Ok(addr)\n+        }\n+    }\n+\n+    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n+        deallocate(ptr, layout.size(), layout.align());\n+    }\n+\n+    fn usable_size(&self, layout: &Layout) -> (usize, usize) {\n+        (layout.size(), usable_size(layout.size(), layout.align()))\n+    }\n+\n+    unsafe fn realloc(&mut self,\n+                      ptr: *mut u8,\n+                      layout: Layout,\n+                      new_layout: Layout)\n+                      -> Result<*mut u8, AllocErr>\n+    {\n+        let old_size = layout.size();\n+        let new_size = new_layout.size();\n+        if layout.align() == new_layout.align() {\n+            let new_ptr = reallocate(ptr, old_size, new_size, layout.align());\n+            if new_ptr.is_null() {\n+                // We assume `reallocate` already tried alloc + copy +\n+                // dealloc fallback; thus pointless to repeat effort\n+                Err(AllocErr::Exhausted { request: new_layout })\n+            } else {\n+                Ok(new_ptr)\n+            }\n+        } else {\n+            // if alignments don't match, fall back on alloc + copy + dealloc\n+            let result = self.alloc(new_layout);\n+            if let Ok(new_ptr) = result {\n+                ptr::copy_nonoverlapping(ptr as *const u8, new_ptr, cmp::min(old_size, new_size));\n+                self.dealloc(ptr, layout);\n+            }\n+            result\n+        }\n+    }\n+\n+    unsafe fn grow_in_place(&mut self,\n+                            ptr: *mut u8,\n+                            layout: Layout,\n+                            new_layout: Layout)\n+                            -> Result<(), CannotReallocInPlace>\n+    {\n+        // grow_in_place spec requires this, and the spec for reallocate_inplace\n+        // makes it hard to detect failure if it does not hold.\n+        debug_assert!(new_layout.size() >= layout.size());\n+\n+        if layout.align() != new_layout.align() { // reallocate_inplace requires this.\n+            return Err(CannotReallocInPlace);\n+        }\n+        let usable = reallocate_inplace(ptr, layout.size(), new_layout.size(), layout.align());\n+        if usable >= new_layout.size() { Ok(()) } else { Err(CannotReallocInPlace) }\n+    }\n+}\n+\n // FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`\n \n /// Return a pointer to `size` bytes of memory aligned to `align`."}]}