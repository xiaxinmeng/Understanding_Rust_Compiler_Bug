{"sha": "91fa898975609f09f33e3e03fa8706c31a6b7d9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZmE4OTg5NzU2MDlmMDlmMzNlM2UwM2ZhODcwNmMzMWE2YjdkOWI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-04-18T02:38:17Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-07-25T04:35:49Z"}, "message": "Stabilize the type_name intrinsic in core::any\n\nCloses rust-lang/rfcs#1428", "tree": {"sha": "c6b06ecaf4550f0853cf4ad6015928a0f6984f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6b06ecaf4550f0853cf4ad6015928a0f6984f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91fa898975609f09f33e3e03fa8706c31a6b7d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91fa898975609f09f33e3e03fa8706c31a6b7d9b", "html_url": "https://github.com/rust-lang/rust/commit/91fa898975609f09f33e3e03fa8706c31a6b7d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91fa898975609f09f33e3e03fa8706c31a6b7d9b/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f19f7ff128a3b01eeab3f87f04cce22883f006", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f19f7ff128a3b01eeab3f87f04cce22883f006", "html_url": "https://github.com/rust-lang/rust/commit/03f19f7ff128a3b01eeab3f87f04cce22883f006"}], "stats": {"total": 71, "additions": 46, "deletions": 25}, "files": [{"sha": "f7aef66942d9b556a62cdb5a400029353af9e5d1", "filename": "src/libcore/any.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -450,3 +450,29 @@ impl TypeId {\n         }\n     }\n }\n+\n+/// Returns the name of a type as a string slice.\n+///\n+/// # Note\n+///\n+/// This is intended for diagnostic use. The exact contents and format of the\n+/// string are not specified, other than being a best-effort description of the\n+/// type. For example, `type_name::<Option<String>>()` could return the\n+/// `\"Option<String>\"` or `\"std::option::Option<std::string::String>\"`, but not\n+/// `\"foobar\"`. In addition, the output may change between versions of the\n+/// compiler.\n+///\n+/// The type name should not be considered a unique identifier of a type;\n+/// multiple types may share the same type name.\n+///\n+/// The current implementation uses the same infrastructure as compiler\n+/// diagnostics and debuginfo, but this is not guaranteed.\n+#[stable(feature = \"type_name\", since = \"1.38.0\")]\n+pub fn type_name<T: ?Sized>() -> &'static str {\n+    #[cfg(bootstrap)]\n+    unsafe {\n+        intrinsics::type_name::<T>()\n+    }\n+    #[cfg(not(bootstrap))]\n+    intrinsics::type_name::<T>()\n+}"}, {"sha": "2ffcd0fd4d941b054ff92b0c7be849cb06492d2f", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -34,7 +34,7 @@ impl<'cx, 'tcx> At<'cx, 'tcx> {\n     {\n         debug!(\n             \"normalize::<{}>(value={:?}, param_env={:?})\",\n-            unsafe { ::std::intrinsics::type_name::<T>() },\n+            ::std::any::type_name::<T>(),\n             value,\n             self.param_env,\n         );"}, {"sha": "d09288461d44489d4bb3200ce8e54d5f425257c5", "filename": "src/librustc/traits/query/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -22,7 +22,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         debug!(\n             \"normalize_erasing_regions::<{}>(value={:?}, param_env={:?})\",\n-            unsafe { ::std::intrinsics::type_name::<T>() },\n+            ::std::any::type_name::<T>(),\n             value,\n             param_env,\n         );"}, {"sha": "1cc083ea93c6c1c66fee90fabcc19fd1ebbc75d2", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -69,7 +69,7 @@ impl<'tcx, M: QueryAccessors<'tcx, Key = DefId>> QueryDescription<'tcx> for M {\n         if !tcx.sess.verbose() {\n             format!(\"processing `{}`\", tcx.def_path_str(def_id)).into()\n         } else {\n-            let name = unsafe { ::std::intrinsics::type_name::<M>() };\n+            let name = ::std::any::type_name::<M>();\n             format!(\"processing {:?} with query `{}`\", def_id, name).into()\n         }\n     }"}, {"sha": "f4b99ca3688747ee0c8cca34e2b34cc907db146f", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -54,7 +54,7 @@ use rustc_target::spec::PanicStrategy;\n use std::borrow::Cow;\n use std::ops::Deref;\n use std::sync::Arc;\n-use std::intrinsics::type_name;\n+use std::any::type_name;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax_pos::symbol::InternedString;\n use syntax::attr;"}, {"sha": "24bce7e338bd916180b0d71a8d135057f46e4473", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -1060,7 +1060,7 @@ where\n     Q::Value: Encodable,\n {\n     let desc = &format!(\"encode_query_results for {}\",\n-        unsafe { ::std::intrinsics::type_name::<Q>() });\n+        ::std::any::type_name::<Q>());\n \n     time_ext(tcx.sess.time_extended(), Some(tcx.sess), desc, || {\n         let map = Q::query_cache(tcx).borrow();"}, {"sha": "ce9f67db592324e8d11fe80949ab48a1b3270b16", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -782,9 +782,9 @@ macro_rules! define_queries_inner {\n                         #[cfg(not(debug_assertions))]\n                         cache_hits: 0,\n                         key_size: mem::size_of::<Q::Key>(),\n-                        key_type: unsafe { type_name::<Q::Key>() },\n+                        key_type: type_name::<Q::Key>(),\n                         value_size: mem::size_of::<Q::Value>(),\n-                        value_type: unsafe { type_name::<Q::Value>() },\n+                        value_type: type_name::<Q::Value>(),\n                         entry_count: map.results.len(),\n                     }\n                 }"}, {"sha": "195a652b0a2e674759f977b83afdcae4bfe7cf2c", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -127,7 +127,7 @@ impl<'tcx> MirSource<'tcx> {\n /// Generates a default name for the pass based on the name of the\n /// type `T`.\n pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n-    let name = unsafe { ::std::intrinsics::type_name::<T>() };\n+    let name = ::std::any::type_name::<T>();\n     if let Some(tail) = name.rfind(\":\") {\n         Cow::from(&name[tail+1..])\n     } else {"}, {"sha": "4d8f564123634e7c3bc190589a4078b2109f3e3a", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -71,7 +71,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n         \"saturating_add\" | \"saturating_sub\" |\n         \"rotate_left\" | \"rotate_right\" |\n         \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\" |\n-        \"minnumf32\" | \"minnumf64\" | \"maxnumf32\" | \"maxnumf64\"\n+        \"minnumf32\" | \"minnumf64\" | \"maxnumf32\" | \"maxnumf64\" | \"type_name\"\n         => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }"}, {"sha": "a5f7b4898ae0e854a98f0e57644fa3ea0a804edb", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -4,8 +4,8 @@\n Core encoding and decoding interfaces.\n */\n \n+use std::any;\n use std::borrow::Cow;\n-use std::intrinsics;\n use std::marker::PhantomData;\n use std::path;\n use std::rc::Rc;\n@@ -849,9 +849,9 @@ pub trait SpecializationError {\n impl<E> SpecializationError for E {\n     default fn not_found<S, T: ?Sized>(trait_name: &'static str, method_name: &'static str) -> E {\n         panic!(\"missing specialization: `<{} as {}<{}>>::{}` not overridden\",\n-               unsafe { intrinsics::type_name::<S>() },\n+               any::type_name::<S>(),\n                trait_name,\n-               unsafe { intrinsics::type_name::<T>() },\n+               any::type_name::<T>(),\n                method_name);\n     }\n }"}, {"sha": "2bb1aeecf376d9d8abdc97779d5fd5a38f9b6695", "filename": "src/test/run-pass/consts/const-fn-type-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-type-name.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -5,7 +5,7 @@\n #![allow(dead_code)]\n \n const fn type_name_wrapper<T>(_: &T) -> &'static str {\n-    unsafe { core::intrinsics::type_name::<T>() }\n+    core::intrinsics::type_name::<T>()\n }\n \n struct Struct<TA, TB, TC> {"}, {"sha": "6facf0b2dd5782fb0228e3cafcd574d9df27ffc5", "filename": "src/test/run-pass/issues/issue-21058.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![feature(core_intrinsics)]\n \n use std::fmt::Debug;\n \n@@ -12,7 +11,7 @@ macro_rules! check {\n         assert_eq!(type_name_of_val($ty_of), $expected);\n     };\n     ($ty:ty, $expected:expr) => {\n-        assert_eq!(unsafe { std::intrinsics::type_name::<$ty>()}, $expected);\n+        assert_eq!(std::any::type_name::<$ty>(), $expected);\n     };\n }\n \n@@ -50,7 +49,7 @@ fn bar<T: Trait>() {\n }\n \n fn type_name_of_val<T>(_: T) -> &'static str {\n-    unsafe { std::intrinsics::type_name::<T>() }\n+    std::any::type_name::<T>()\n }\n \n #[derive(Debug)]"}, {"sha": "4d407125299a722a699c73d4a9a377325ebf5ff9", "filename": "src/test/run-pass/issues/issue-61894.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Ftest%2Frun-pass%2Fissues%2Fissue-61894.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Ftest%2Frun-pass%2Fissues%2Fissue-61894.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-61894.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -1,14 +1,14 @@\n #![feature(core_intrinsics)]\n \n-use std::intrinsics::type_name;\n+use std::any::type_name;\n \n struct Bar<M>(M);\n \n impl<M> Bar<M> {\n     fn foo(&self) -> &'static str {\n         fn f() {}\n         fn type_name_of<T>(_: T) -> &'static str {\n-            unsafe { type_name::<T>() }\n+            type_name::<T>()\n         }\n         type_name_of(f)\n     }"}, {"sha": "d9d947bd4c062ac8787cd8b9eba5248668717132", "filename": "src/test/run-pass/tydesc-name.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fa898975609f09f33e3e03fa8706c31a6b7d9b/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftydesc-name.rs?ref=91fa898975609f09f33e3e03fa8706c31a6b7d9b", "patch": "@@ -1,16 +1,12 @@\n #![allow(dead_code)]\n \n-#![feature(core_intrinsics)]\n-\n-use std::intrinsics::type_name;\n+use std::any::type_name;\n \n struct Foo<T> {\n     x: T\n }\n \n pub fn main() {\n-    unsafe {\n-        assert_eq!(type_name::<isize>(), \"isize\");\n-        assert_eq!(type_name::<Foo<usize>>(), \"tydesc_name::Foo<usize>\");\n-    }\n+    assert_eq!(type_name::<isize>(), \"isize\");\n+    assert_eq!(type_name::<Foo<usize>>(), \"tydesc_name::Foo<usize>\");\n }"}]}