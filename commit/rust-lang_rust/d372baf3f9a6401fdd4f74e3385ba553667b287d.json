{"sha": "d372baf3f9a6401fdd4f74e3385ba553667b287d", "node_id": "C_kwDOAAsO6NoAKGQzNzJiYWYzZjlhNjQwMWZkZDRmNzRlMzM4NWJhNTUzNjY3YjI4N2Q", "commit": {"author": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-02-01T21:44:53Z"}, "committer": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-02-01T21:44:53Z"}, "message": "Fix annotation of code blocks", "tree": {"sha": "5362afbab16d62cf3440a1d119d952fd68b62261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5362afbab16d62cf3440a1d119d952fd68b62261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d372baf3f9a6401fdd4f74e3385ba553667b287d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEhCkfJ9Js3nBacaLYxBeqnEA5788FAmH5qd4ACgkQxBeqnEA5\n788BIgf/Zgz2Ub8rFSZh8RwfNrI5y6/fnGTKc4sPRFKYoF6CWA1Ur1tWhsFzP9UB\npEOoHi4xtrj+Fsm/dDqFJYHukVDbR5Le6cGMXacs+EyLtp8ZEjiIdn2eAJmFb4hB\nmGvlWcqpvuVv2UfxdG/r47AqzJfQierIPxIOY5Ud31jimFaYZGCIk5x/QXVCggok\nqXgJtSd3o2S8MLTP8+OJPXUYjIqSs6hM+5eAlYkpuuuiflZm28g32LDaDWZMfouI\n9GvnXwzDdHc6XrQv1XElPXoxV4+MJ+aXXNhubK2XzeLxbAV7xe224jajrr/YwB9G\nl4O3ydnbiVQZtvZKW1uwzP2TDHkR+g==\n=V/A3\n-----END PGP SIGNATURE-----", "payload": "tree 5362afbab16d62cf3440a1d119d952fd68b62261\nparent 5357ec1473c8a44dd8e324b2c664951bf4306b5a\nauthor George Bateman <george.bateman16@gmail.com> 1643751893 +0000\ncommitter George Bateman <george.bateman16@gmail.com> 1643751893 +0000\n\nFix annotation of code blocks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d372baf3f9a6401fdd4f74e3385ba553667b287d", "html_url": "https://github.com/rust-lang/rust/commit/d372baf3f9a6401fdd4f74e3385ba553667b287d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d372baf3f9a6401fdd4f74e3385ba553667b287d/comments", "author": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5357ec1473c8a44dd8e324b2c664951bf4306b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5357ec1473c8a44dd8e324b2c664951bf4306b5a", "html_url": "https://github.com/rust-lang/rust/commit/5357ec1473c8a44dd8e324b2c664951bf4306b5a"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "ebb1d8971b99ddd63cf89315cea88df043983ebd", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d372baf3f9a6401fdd4f74e3385ba553667b287d/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d372baf3f9a6401fdd4f74e3385ba553667b287d/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=d372baf3f9a6401fdd4f74e3385ba553667b287d", "patch": "@@ -275,6 +275,7 @@ mod prim_bool {}\n mod prim_never {}\n \n #[doc(primitive = \"char\")]\n+#[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n /// The `char` type represents a single character. More specifically, since\n@@ -295,7 +296,7 @@ mod prim_never {}\n /// No `char` may be constructed, whether as a literal or at runtime, that is not a\n /// Unicode scalar value:\n ///\n-/// ```text\n+/// ```compile_fail\n /// // Each of these is a compiler error\n /// ['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n /// ```\n@@ -305,7 +306,7 @@ mod prim_never {}\n /// char::from_u32(0xDE01).unwrap();\n /// ```\n ///\n-/// ```\n+/// ```no_run\n /// // Undefined behaviour\n /// unsafe { char::from_u32_unchecked(0x110000) };\n /// ```"}, {"sha": "ebb1d8971b99ddd63cf89315cea88df043983ebd", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d372baf3f9a6401fdd4f74e3385ba553667b287d/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d372baf3f9a6401fdd4f74e3385ba553667b287d/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=d372baf3f9a6401fdd4f74e3385ba553667b287d", "patch": "@@ -275,6 +275,7 @@ mod prim_bool {}\n mod prim_never {}\n \n #[doc(primitive = \"char\")]\n+#[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n /// The `char` type represents a single character. More specifically, since\n@@ -295,7 +296,7 @@ mod prim_never {}\n /// No `char` may be constructed, whether as a literal or at runtime, that is not a\n /// Unicode scalar value:\n ///\n-/// ```text\n+/// ```compile_fail\n /// // Each of these is a compiler error\n /// ['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n /// ```\n@@ -305,7 +306,7 @@ mod prim_never {}\n /// char::from_u32(0xDE01).unwrap();\n /// ```\n ///\n-/// ```\n+/// ```no_run\n /// // Undefined behaviour\n /// unsafe { char::from_u32_unchecked(0x110000) };\n /// ```"}]}