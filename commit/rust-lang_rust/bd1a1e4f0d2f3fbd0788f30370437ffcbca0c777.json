{"sha": "bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "node_id": "C_kwDOAAsO6NoAKGJkMWExZTRmMGQyZjNmYmQwNzg4ZjMwMzcwNDM3ZmZjYmNhMGM3Nzc", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-14T21:19:39Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-15T13:04:50Z"}, "message": "Don't mark for loop head span with desugaring", "tree": {"sha": "b35de25f0a6316756e640172a5fefea65223ea77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b35de25f0a6316756e640172a5fefea65223ea77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "html_url": "https://github.com/rust-lang/rust/commit/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "313e71a2535196466b0bbdcfa3387bd6373e0f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/313e71a2535196466b0bbdcfa3387bd6373e0f28", "html_url": "https://github.com/rust-lang/rust/commit/313e71a2535196466b0bbdcfa3387bd6373e0f28"}], "stats": {"total": 101, "additions": 48, "deletions": 53}, "files": [{"sha": "bc8ea4fb5efa5044284983c24e1bbd810f0af145", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "patch": "@@ -1331,15 +1331,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Block,\n         opt_label: Option<Label>,\n     ) -> hir::Expr<'hir> {\n-        let orig_head_span = head.span;\n         // expand <head>\n-        let mut head = self.lower_expr_mut(head);\n-        let desugared_span = self.mark_span_with_reason(\n-            DesugaringKind::ForLoop(ForLoopLoc::Head),\n-            orig_head_span,\n-            None,\n-        );\n-        head.span = self.lower_span(desugared_span);\n+        let head = self.lower_expr_mut(head);\n+        let desugared_span =\n+            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), head.span, None);\n \n         let iter = Ident::with_dummy_span(sym::iter);\n \n@@ -1428,7 +1423,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             loop_block,\n             self.lower_label(opt_label),\n             hir::LoopSource::ForLoop,\n-            self.lower_span(e.span.with_hi(orig_head_span.hi())),\n+            self.lower_span(e.span.with_hi(head.span.hi())),\n         );\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: self.lower_node_id(e.id),\n@@ -1441,7 +1436,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let into_iter_span = self.mark_span_with_reason(\n             DesugaringKind::ForLoop(ForLoopLoc::IntoIter),\n-            orig_head_span,\n+            head.span,\n             None,\n         );\n "}, {"sha": "439c728798d3a42b1b8c1717fd61a4a873103820", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n-use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -247,6 +246,36 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         place_name, partially_str, loop_message\n                                     ),\n                                 );\n+                                let sess = self.infcx.tcx.sess;\n+                                let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n+                                // If we have a `&mut` ref, we need to reborrow.\n+                                if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n+                                    // If we are in a loop this will be suggested later.\n+                                    if !is_loop_move {\n+                                        err.span_suggestion_verbose(\n+                                            move_span.shrink_to_lo(),\n+                                            &format!(\n+                                                \"consider creating a fresh reborrow of {} here\",\n+                                                self.describe_place(moved_place.as_ref())\n+                                                    .map(|n| format!(\"`{}`\", n))\n+                                                    .unwrap_or_else(\n+                                                        || \"the mutable reference\".to_string()\n+                                                    ),\n+                                            ),\n+                                            \"&mut *\".to_string(),\n+                                            Applicability::MachineApplicable,\n+                                        );\n+                                    }\n+                                } else if let Ok(snippet) =\n+                                    sess.source_map().span_to_snippet(move_span)\n+                                {\n+                                    err.span_suggestion(\n+                                        move_span,\n+                                        \"consider borrowing to avoid moving into the for loop\",\n+                                        format!(\"&{}\", snippet),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             } else {\n                                 err.span_label(\n                                     fn_call_span,\n@@ -315,35 +344,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         in_pattern = true;\n                     }\n                 }\n-\n-                if let Some(DesugaringKind::ForLoop(_)) = move_span.desugaring_kind() {\n-                    let sess = self.infcx.tcx.sess;\n-                    let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n-                    // If we have a `&mut` ref, we need to reborrow.\n-                    if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n-                        // If we are in a loop this will be suggested later.\n-                        if !is_loop_move {\n-                            err.span_suggestion_verbose(\n-                                move_span.shrink_to_lo(),\n-                                &format!(\n-                                    \"consider creating a fresh reborrow of {} here\",\n-                                    self.describe_place(moved_place.as_ref())\n-                                        .map(|n| format!(\"`{}`\", n))\n-                                        .unwrap_or_else(|| \"the mutable reference\".to_string()),\n-                                ),\n-                                \"&mut *\".to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    } else if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n-                        err.span_suggestion(\n-                            move_span,\n-                            \"consider borrowing to avoid moving into the for loop\",\n-                            format!(\"&{}\", snippet),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n             }\n \n             use_spans.var_span_label_path_only("}, {"sha": "692c20d7dfe34ebed24443a863b7966d356528c7", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "patch": "@@ -5,11 +5,10 @@ use rustc_middle::ty;\n use rustc_mir_dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n };\n-use rustc_span::source_map::DesugaringKind;\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n \n-use crate::diagnostics::UseSpans;\n+use crate::diagnostics::{FnSelfUseKind, UseSpans};\n use crate::prefixes::PrefixSet;\n use crate::MirBorrowckCtxt;\n \n@@ -400,19 +399,21 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             | ty::Opaque(def_id, _) => def_id,\n             _ => return err,\n         };\n-        let is_option = self.infcx.tcx.is_diagnostic_item(sym::Option, def_id);\n-        let is_result = self.infcx.tcx.is_diagnostic_item(sym::Result, def_id);\n-        if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n+        let diag_name = self.infcx.tcx.get_diagnostic_name(def_id);\n+        if matches!(diag_name, Some(sym::Option | sym::Result))\n+            && use_spans.map_or(true, |v| !v.for_closure())\n+        {\n             err.span_suggestion_verbose(\n                 span.shrink_to_hi(),\n-                &format!(\n-                    \"consider borrowing the `{}`'s content\",\n-                    if is_option { \"Option\" } else { \"Result\" }\n-                ),\n+                &format!(\"consider borrowing the `{}`'s content\", diag_name.unwrap()),\n                 \".as_ref()\".to_string(),\n                 Applicability::MaybeIncorrect,\n             );\n-        } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_))) {\n+        } else if let Some(UseSpans::FnSelfUse {\n+            kind: FnSelfUseKind::Normal { implicit_into_iter: true, .. },\n+            ..\n+        }) = use_spans\n+        {\n             let suggest = match self.infcx.tcx.get_diagnostic_item(sym::IntoIterator) {\n                 Some(def_id) => self.infcx.tcx.infer_ctxt().enter(|infcx| {\n                     type_known_to_meet_bound_modulo_regions("}, {"sha": "d8883b0e66dba77be936bb086f2197af5d384880", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "patch": "@@ -134,9 +134,8 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                     Applicability::MachineApplicable,\n                 );\n                 if self.for_expr_span == expr.span {\n-                    let expr_span = expr.span.ctxt().outer_expn_data().call_site;\n                     diag.span_suggestion(\n-                        receiver_arg.span.shrink_to_hi().to(expr_span.shrink_to_hi()),\n+                        receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n                         \"or remove `.into_iter()` to iterate by value\",\n                         String::new(),\n                         Applicability::MaybeIncorrect,"}, {"sha": "7d4a08ba3246d7673d1a373c7a4c010409ca842e", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=bd1a1e4f0d2f3fbd0788f30370437ffcbca0c777", "patch": "@@ -83,7 +83,7 @@ pub fn change_iteration_variable_pattern() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck, promoted_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;"}]}