{"sha": "86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "node_id": "C_kwDOAAsO6NoAKDg2YThhM2JlYjQ2ZjdiNjRhNWJkZDM5M2I4NmIyOTE2ZmUwODJmODg", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-09-30T16:47:39Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-09-30T16:47:44Z"}, "message": "make `compare_const_impl` a query and use it in `instance.rs`", "tree": {"sha": "f1159f8b609f30b57d64224428baa0329f119e96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1159f8b609f30b57d64224428baa0329f119e96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "html_url": "https://github.com/rust-lang/rust/commit/86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f914b82a754c6d85c0a909ab152f5b611defef73", "url": "https://api.github.com/repos/rust-lang/rust/commits/f914b82a754c6d85c0a909ab152f5b611defef73", "html_url": "https://github.com/rust-lang/rust/commit/f914b82a754c6d85c0a909ab152f5b611defef73"}], "stats": {"total": 202, "additions": 118, "deletions": 84}, "files": [{"sha": "5e65446e100018579f5db219f435df5852af136c", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -2,7 +2,7 @@ use crate::check::intrinsicck::InlineAsmCtxt;\n \n use super::coercion::CoerceMany;\n use super::compare_method::check_type_bounds;\n-use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_impl};\n+use super::compare_method::{compare_impl_method, compare_ty_impl};\n use super::*;\n use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan};\n@@ -1045,13 +1045,11 @@ fn check_impl_items_against_trait<'tcx>(\n         match impl_item_full.kind {\n             hir::ImplItemKind::Const(..) => {\n                 // Find associated const definition.\n-                compare_const_impl(\n-                    tcx,\n+                let _ = tcx.compare_assoc_const_impl_item_with_trait_item((\n                     &ty_impl_item,\n-                    impl_item.span,\n                     &ty_trait_item,\n                     impl_trait_ref,\n-                );\n+                ));\n             }\n             hir::ImplItemKind::Fn(..) => {\n                 let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);"}, {"sha": "c859796d388aa1ca8f60d5ee51dd62dd6ddb3cbc", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -1300,15 +1300,15 @@ fn compare_generic_param_kinds<'tcx>(\n     Ok(())\n }\n \n-pub(crate) fn compare_const_impl<'tcx>(\n+/// Use `tcx.compare_assoc_const_impl_item_with_trait_item` instead\n+pub(crate) fn raw_compare_const_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    impl_c: &ty::AssocItem,\n-    impl_c_span: Span,\n-    trait_c: &ty::AssocItem,\n-    impl_trait_ref: ty::TraitRef<'tcx>,\n-) {\n+    (impl_c, trait_c, impl_trait_ref): (&ty::AssocItem, &ty::AssocItem, ty::TraitRef<'tcx>),\n+) -> Result<(), ErrorGuaranteed> {\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\", impl_trait_ref);\n \n+    let impl_c_span = tcx.def_span(impl_c.def_id);\n+\n     tcx.infer_ctxt().enter(|infcx| {\n         let param_env = tcx.param_env(impl_c.def_id);\n         let ocx = ObligationCtxt::new(&infcx);\n@@ -1346,68 +1346,68 @@ pub(crate) fn compare_const_impl<'tcx>(\n \n         debug!(\"compare_const_impl: trait_ty={:?}\", trait_ty);\n \n-        let err = infcx\n+        let maybe_error_reported = infcx\n             .at(&cause, param_env)\n             .sup(trait_ty, impl_ty)\n-            .map(|ok| ocx.register_infer_ok_obligations(ok));\n+            .map(|ok| ocx.register_infer_ok_obligations(ok))\n+            .map_err(|terr| {\n+                debug!(\n+                    \"checking associated const for compatibility: impl ty {:?}, trait ty {:?}\",\n+                    impl_ty, trait_ty\n+                );\n \n-        if let Err(terr) = err {\n-            debug!(\n-                \"checking associated const for compatibility: impl ty {:?}, trait ty {:?}\",\n-                impl_ty, trait_ty\n-            );\n+                // Locate the Span containing just the type of the offending impl\n+                match tcx.hir().expect_impl_item(impl_c.def_id.expect_local()).kind {\n+                    ImplItemKind::Const(ref ty, _) => cause.span = ty.span,\n+                    _ => bug!(\"{:?} is not a impl const\", impl_c),\n+                }\n \n-            // Locate the Span containing just the type of the offending impl\n-            match tcx.hir().expect_impl_item(impl_c.def_id.expect_local()).kind {\n-                ImplItemKind::Const(ref ty, _) => cause.span = ty.span,\n-                _ => bug!(\"{:?} is not a impl const\", impl_c),\n-            }\n+                let mut diag = struct_span_err!(\n+                    tcx.sess,\n+                    cause.span,\n+                    E0326,\n+                    \"implemented const `{}` has an incompatible type for trait\",\n+                    trait_c.name\n+                );\n \n-            let mut diag = struct_span_err!(\n-                tcx.sess,\n-                cause.span,\n-                E0326,\n-                \"implemented const `{}` has an incompatible type for trait\",\n-                trait_c.name\n-            );\n+                let trait_c_span = trait_c.def_id.as_local().map(|trait_c_def_id| {\n+                    // Add a label to the Span containing just the type of the const\n+                    match tcx.hir().expect_trait_item(trait_c_def_id).kind {\n+                        TraitItemKind::Const(ref ty, _) => ty.span,\n+                        _ => bug!(\"{:?} is not a trait const\", trait_c),\n+                    }\n+                });\n \n-            let trait_c_span = trait_c.def_id.as_local().map(|trait_c_def_id| {\n-                // Add a label to the Span containing just the type of the const\n-                match tcx.hir().expect_trait_item(trait_c_def_id).kind {\n-                    TraitItemKind::Const(ref ty, _) => ty.span,\n-                    _ => bug!(\"{:?} is not a trait const\", trait_c),\n-                }\n+                infcx.note_type_err(\n+                    &mut diag,\n+                    &cause,\n+                    trait_c_span.map(|span| (span, \"type in trait\".to_owned())),\n+                    Some(infer::ValuePairs::Terms(ExpectedFound {\n+                        expected: trait_ty.into(),\n+                        found: impl_ty.into(),\n+                    })),\n+                    terr,\n+                    false,\n+                    false,\n+                );\n+                diag.emit()\n             });\n \n-            infcx.note_type_err(\n-                &mut diag,\n-                &cause,\n-                trait_c_span.map(|span| (span, \"type in trait\".to_owned())),\n-                Some(infer::ValuePairs::Terms(ExpectedFound {\n-                    expected: trait_ty.into(),\n-                    found: impl_ty.into(),\n-                })),\n-                terr,\n-                false,\n-                false,\n-            );\n-            diag.emit();\n-        }\n-\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return;\n+            return Err(infcx.report_fulfillment_errors(&errors, None, false));\n         }\n \n+        // FIXME return `ErrorReported` if region obligations error?\n         let outlives_environment = OutlivesEnvironment::new(param_env);\n         infcx.check_region_obligations_and_report_errors(\n             impl_c.def_id.expect_local(),\n             &outlives_environment,\n         );\n-    });\n+        maybe_error_reported\n+    })\n }\n \n pub(crate) fn compare_ty_impl<'tcx>("}, {"sha": "04e8c9c22d15930cb4b2902abfd4762cc0be02cf", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -251,6 +251,7 @@ pub fn provide(providers: &mut Providers) {\n         check_mod_item_types,\n         region_scope_tree,\n         collect_trait_impl_trait_tys,\n+        compare_assoc_const_impl_item_with_trait_item: compare_method::raw_compare_const_impl,\n         ..*providers\n     };\n }"}, {"sha": "3fdeb3dd8ba003de4e1b93aaa26dc7514c744ff2", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -2100,4 +2100,10 @@ rustc_queries! {\n     query permits_zero_init(key: TyAndLayout<'tcx>) -> bool {\n         desc { \"checking to see if {:?} permits being left zeroed\", key.ty }\n     }\n+\n+    query compare_assoc_const_impl_item_with_trait_item(\n+        key: (&'tcx ty::AssocItem, &'tcx ty::AssocItem, ty::TraitRef<'tcx>)\n+    ) -> Result<(), ErrorGuaranteed> {\n+        desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0.def_id) }\n+    }\n }"}, {"sha": "68debcffc8570155c24265eab59ce83d8772a1e7", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -557,3 +557,14 @@ impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n         DUMMY_SP\n     }\n }\n+\n+impl<'tcx> Key for (&'tcx ty::AssocItem, &'tcx ty::AssocItem, ty::TraitRef<'tcx>) {\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        self.0.def_id.krate == LOCAL_CRATE\n+    }\n+\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        tcx.def_span(self.0.def_id)\n+    }\n+}"}, {"sha": "97e2a146d2860cb57494f0c1524f210fc98844f5", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -182,40 +182,18 @@ fn resolve_associated_item<'tcx>(\n             // a `trait` to an associated `const` definition in an `impl`, where\n             // the definition in the `impl` has the wrong type (for which an\n             // error has already been/will be emitted elsewhere).\n-            //\n-            // NB: this may be expensive, we try to skip it in all the cases where\n-            // we know the error would've been caught (e.g. in an upstream crate).\n-            //\n-            // A better approach might be to just introduce a query (returning\n-            // `Result<(), ErrorGuaranteed>`) for the check that `rustc_hir_analysis`\n-            // performs (i.e. that the definition's type in the `impl` matches\n-            // the declaration in the `trait`), so that we can cheaply check\n-            // here if it failed, instead of approximating it.\n             if leaf_def.item.kind == ty::AssocKind::Const\n                 && trait_item_id != leaf_def.item.def_id\n                 && leaf_def.item.def_id.is_local()\n             {\n-                let normalized_type_of = |def_id, substs| {\n-                    tcx.subst_and_normalize_erasing_regions(substs, param_env, tcx.type_of(def_id))\n-                };\n-\n-                let original_ty = normalized_type_of(trait_item_id, rcvr_substs);\n-                let resolved_ty = normalized_type_of(leaf_def.item.def_id, substs);\n-\n-                if original_ty != resolved_ty {\n-                    let msg = format!(\n-                        \"Instance::resolve: inconsistent associated `const` type: \\\n-                         was `{}: {}` but resolved to `{}: {}`\",\n-                        tcx.def_path_str_with_substs(trait_item_id, rcvr_substs),\n-                        original_ty,\n-                        tcx.def_path_str_with_substs(leaf_def.item.def_id, substs),\n-                        resolved_ty,\n-                    );\n-                    let span = tcx.def_span(leaf_def.item.def_id);\n-                    let reported = tcx.sess.delay_span_bug(span, &msg);\n-\n-                    return Err(reported);\n-                }\n+                let impl_item = tcx.associated_item(leaf_def.item.def_id);\n+                let trait_item = tcx.associated_item(trait_item_id);\n+                let impl_trait_ref = tcx.impl_trait_ref(impl_item.container_id(tcx)).unwrap();\n+                tcx.compare_assoc_const_impl_item_with_trait_item((\n+                    impl_item,\n+                    trait_item,\n+                    impl_trait_ref,\n+                ))?;\n             }\n \n             Some(ty::Instance::new(leaf_def.item.def_id, substs))"}, {"sha": "4dc6c2e47a9eab522d67ac8666a3c9dbd9883ce2", "filename": "src/test/ui/associated-consts/mismatched_impl_ty_1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_1.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    type ArrayType;\n+    const SIZE: usize;\n+    const ARRAY: Self::ArrayType;\n+}\n+impl MyTrait for () {\n+    type ArrayType = [u8; Self::SIZE];\n+    const SIZE: usize = 4;\n+    const ARRAY: [u8; Self::SIZE] = [1, 2, 3, 4];\n+}\n+\n+fn main() {\n+    let _ = <() as MyTrait>::ARRAY;\n+}"}, {"sha": "539becfdc7c8287763b38b31e4350d0ca50bf9d5", "filename": "src/test/ui/associated-consts/mismatched_impl_ty_2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_2.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+trait Trait {\n+    const ASSOC: fn(&'static u32);\n+}\n+impl Trait for () {\n+    const ASSOC: for<'a> fn(&'a u32) = |_| ();\n+}\n+\n+fn main() {\n+    let _ = <() as Trait>::ASSOC;\n+}"}, {"sha": "17bcc8fe5768ceb917d754229ddbdb571dd3467c", "filename": "src/test/ui/associated-consts/mismatched_impl_ty_3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a8a3beb46f7b64a5bdd393b86b2916fe082f88/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fmismatched_impl_ty_3.rs?ref=86a8a3beb46f7b64a5bdd393b86b2916fe082f88", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+trait Trait {\n+    const ASSOC: for<'a, 'b> fn(&'a u32, &'b u32);\n+}\n+impl Trait for () {\n+    const ASSOC: for<'a> fn(&'a u32, &'a u32) = |_, _| ();\n+}\n+\n+fn main() {\n+    let _ = <() as Trait>::ASSOC;\n+}"}]}