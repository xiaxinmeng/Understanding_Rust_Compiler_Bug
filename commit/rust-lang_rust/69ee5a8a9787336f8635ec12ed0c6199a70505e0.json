{"sha": "69ee5a8a9787336f8635ec12ed0c6199a70505e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZWU1YThhOTc4NzMzNmY4NjM1ZWMxMmVkMGM2MTk5YTcwNTA1ZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-11T09:56:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-11T09:56:22Z"}, "message": "Auto merge of #45772 - leodasvacas:fix-auto-bounds-in-trait-objects, r=nikomatsakis\n\nFix checking of auto trait bounds in trait objects.\n\nAny auto trait is allowed in trait object bounds. Fix duplicate check of type and lifetime parameter count, which we were [emitting twice](https://play.rust-lang.org/?gist=37dbbdbbec62dec423bb8f6d92f137cc&version=stable).\n\nNote: This was the last use of `Send` in the compiler, meaning after a new `stage0` we could remove the `send` lang item.", "tree": {"sha": "8a458a7e82a9a5181bacdeb36913b6f702e21ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a458a7e82a9a5181bacdeb36913b6f702e21ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ee5a8a9787336f8635ec12ed0c6199a70505e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ee5a8a9787336f8635ec12ed0c6199a70505e0", "html_url": "https://github.com/rust-lang/rust/commit/69ee5a8a9787336f8635ec12ed0c6199a70505e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ee5a8a9787336f8635ec12ed0c6199a70505e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7ce71aabfcd851b94a097060643c056a9b0659", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7ce71aabfcd851b94a097060643c056a9b0659", "html_url": "https://github.com/rust-lang/rust/commit/bd7ce71aabfcd851b94a097060643c056a9b0659"}, {"sha": "7995f879d0c520d162d965db0ebbe403bfa2bfda", "url": "https://api.github.com/repos/rust-lang/rust/commits/7995f879d0c520d162d965db0ebbe403bfa2bfda", "html_url": "https://github.com/rust-lang/rust/commit/7995f879d0c520d162d965db0ebbe403bfa2bfda"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "0a8127f4ce4fe64b2a723f7c2b9a9a1300b9dd0e", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -39,7 +39,7 @@ use hash::Hasher;\n /// [arc]: ../../std/sync/struct.Arc.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[lang = \"send\"]\n+#[cfg_attr(stage0, lang = \"send\")]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n pub unsafe trait Send {\n     // empty."}, {"sha": "19a43f3b5dd84e454852a3f6661371b59e6abb54", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -229,7 +229,6 @@ language_item_table! {\n     F32ImplItem,                     \"f32\",                     f32_impl;\n     F64ImplItem,                     \"f64\",                     f64_impl;\n \n-    SendTraitLangItem,               \"send\",                    send_trait;\n     SizedTraitLangItem,              \"sized\",                   sized_trait;\n     UnsizeTraitLangItem,             \"unsize\",                  unsize_trait;\n     CopyTraitLangItem,               \"copy\",                    copy_trait;"}, {"sha": "0bcdcd3691ef921928fb03611e0072a6fa26ab04", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -572,8 +572,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             let b = &trait_bounds[0];\n             let span = b.trait_ref.path.span;\n             struct_span_err!(self.tcx().sess, span, E0225,\n-                \"only Send/Sync traits can be used as additional traits in a trait object\")\n-                .span_label(span, \"non-Send/Sync additional trait\")\n+                \"only auto traits can be used as additional traits in a trait object\")\n+                .span_label(span, \"non-auto additional trait\")\n                 .emit();\n         }\n \n@@ -1257,27 +1257,10 @@ fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     -> (Vec<DefId>, Vec<&'b hir::PolyTraitRef>)\n {\n     let (auto_traits, trait_bounds): (Vec<_>, _) = trait_bounds.iter().partition(|bound| {\n+        // Checks whether `trait_did` is an auto trait and adds it to `auto_traits` if so.\n         match bound.trait_ref.path.def {\n-            Def::Trait(trait_did) => {\n-                // Checks whether `trait_did` refers to one of the builtin\n-                // traits, like `Send`, and adds it to `auto_traits` if so.\n-                if Some(trait_did) == tcx.lang_items().send_trait() ||\n-                    Some(trait_did) == tcx.lang_items().sync_trait() {\n-                    let segments = &bound.trait_ref.path.segments;\n-                    segments[segments.len() - 1].with_parameters(|parameters| {\n-                        if !parameters.types.is_empty() {\n-                            check_type_argument_count(tcx, bound.trait_ref.path.span,\n-                                                      parameters.types.len(), &[]);\n-                        }\n-                        if !parameters.lifetimes.is_empty() {\n-                            report_lifetime_number_error(tcx, bound.trait_ref.path.span,\n-                                                         parameters.lifetimes.len(), 0);\n-                        }\n-                    });\n-                    true\n-                } else {\n-                    false\n-                }\n+            Def::Trait(trait_did) if tcx.trait_is_auto(trait_did) => {\n+                true\n             }\n             _ => false\n         }"}, {"sha": "0c3a88a8e9a7eacf4b1859d5bb8858908418a2a6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -2455,9 +2455,9 @@ fn main() {\n }\n ```\n \n-Send and Sync are an exception to this rule: it's possible to have bounds of\n-one non-builtin trait, plus either or both of Send and Sync. For example, the\n-following compiles correctly:\n+Auto traits such as Send and Sync are an exception to this rule:\n+It's possible to have bounds of one non-builtin trait, plus any number of\n+auto traits. For example, the following compiles correctly:\n \n ```\n fn main() {"}, {"sha": "c2f610ecd2816aed6fbe3b0d5a16fb639abe39da", "filename": "src/test/compile-fail/E0225.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Fcompile-fail%2FE0225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Fcompile-fail%2FE0225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0225.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     let _: Box<std::io::Read + std::io::Write>;\n-    //~^ ERROR only Send/Sync traits can be used as additional traits in a trait object [E0225]\n-    //~| NOTE non-Send/Sync additional trait\n+    //~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+    //~| NOTE non-auto additional trait\n }"}, {"sha": "df3da5096bf538d9d57639d729b92b178b0bbcb3", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -12,7 +12,7 @@ trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n-    //~^ ERROR only Send/Sync traits can be used as additional traits in a trait object\n+    //~^ ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the trait bound `Trait: std::marker::Sized` is not satisfied\n     //~| ERROR the trait bound `Trait: std::marker::Sized` is not satisfied\n }"}, {"sha": "914a3bd79d4602db7cf9c9aa93cd657103b9edb8", "filename": "src/test/compile-fail/issue-22560.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -23,6 +23,6 @@ type Test = Add +\n             //~| NOTE missing reference to `RHS`\n             //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n             //~| ERROR E0225\n-            //~| NOTE non-Send/Sync additional trait\n+            //~| NOTE non-auto additional trait\n \n fn main() { }"}, {"sha": "e97e5a86a9d7d88567f4fd8249ddf996e9d83ddd", "filename": "src/test/compile-fail/issue-32963.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -16,6 +16,6 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n \n fn main() {\n     size_of_copy::<Misc+Copy>();\n-    //~^ ERROR only Send/Sync traits can be used as additional traits in a trait object\n+    //~^ ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the trait bound `Misc: std::marker::Copy` is not satisfied\n }"}, {"sha": "e42aca9ccbd1378c29cff2e7c80765e2237b5e88", "filename": "src/test/run-pass/auto-traits.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5a8a9787336f8635ec12ed0c6199a70505e0/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-traits.rs?ref=69ee5a8a9787336f8635ec12ed0c6199a70505e0", "patch": "@@ -33,4 +33,7 @@ fn main() {\n     take_auto(AutoBool(true));\n     take_auto_unsafe(0);\n     take_auto_unsafe(AutoBool(true));\n+\n+    /// Auto traits are allowed in trait object bounds.\n+    let _: &(Send + Auto) = &0;\n }"}]}