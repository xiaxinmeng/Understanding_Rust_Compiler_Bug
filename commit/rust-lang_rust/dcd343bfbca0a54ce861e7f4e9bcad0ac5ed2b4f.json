{"sha": "dcd343bfbca0a54ce861e7f4e9bcad0ac5ed2b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZDM0M2JmYmNhMGE1NGNlODYxZTdmNGU5YmNhZDBhYzVlZDJiNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-04T12:54:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-04T12:54:34Z"}, "message": "Auto merge of #45617 - GuillaumeGomez:search-fixes, r=QuietMisdreavus\n\nSearch fixes\n\nFixes #45608.\n\nr? @QuietMisdreavus", "tree": {"sha": "9ec183728db22f13b2a5860f7e99af196cba1a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ec183728db22f13b2a5860f7e99af196cba1a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcd343bfbca0a54ce861e7f4e9bcad0ac5ed2b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd343bfbca0a54ce861e7f4e9bcad0ac5ed2b4f", "html_url": "https://github.com/rust-lang/rust/commit/dcd343bfbca0a54ce861e7f4e9bcad0ac5ed2b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcd343bfbca0a54ce861e7f4e9bcad0ac5ed2b4f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6885cb853390fc79a8ff0b223ea1471e261d60e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6885cb853390fc79a8ff0b223ea1471e261d60e", "html_url": "https://github.com/rust-lang/rust/commit/a6885cb853390fc79a8ff0b223ea1471e261d60e"}, {"sha": "ee7e372bbf2d6ce184e50aaf2679873eb961dc49", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7e372bbf2d6ce184e50aaf2679873eb961dc49", "html_url": "https://github.com/rust-lang/rust/commit/ee7e372bbf2d6ce184e50aaf2679873eb961dc49"}], "stats": {"total": 154, "additions": 112, "deletions": 42}, "files": [{"sha": "b1120e0af38949e13daa2d1eb2125e2098291766", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 112, "deletions": 42, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/dcd343bfbca0a54ce861e7f4e9bcad0ac5ed2b4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/dcd343bfbca0a54ce861e7f4e9bcad0ac5ed2b4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=dcd343bfbca0a54ce861e7f4e9bcad0ac5ed2b4f", "patch": "@@ -349,7 +349,7 @@\n             var valLower = query.query.toLowerCase(),\n                 val = valLower,\n                 typeFilter = itemTypeFromName(query.type),\n-                results = [],\n+                results = {},\n                 split = valLower.split(\"::\");\n \n             // remove empty keywords\n@@ -360,15 +360,52 @@\n                 }\n             }\n \n+            function min(a, b) {\n+                if (a < b) {\n+                    return a;\n+                }\n+                return b;\n+            }\n+\n+            function nbElements(obj) {\n+                var size = 0, key;\n+                for (key in obj) {\n+                    if (obj.hasOwnProperty(key)) {\n+                        size += 1;\n+                    }\n+                }\n+                return size;\n+            }\n+\n             function findArg(obj, val) {\n+                var lev_distance = MAX_LEV_DISTANCE + 1;\n                 if (obj && obj.type && obj.type.inputs.length > 0) {\n                     for (var i = 0; i < obj.type.inputs.length; i++) {\n                         if (obj.type.inputs[i].name === val) {\n-                            return true;\n+                            // No need to check anything else: we found it. Let's just move on.\n+                            return 0;\n+                        }\n+                        lev_distance = min(levenshtein(obj.type.inputs[i].name, val), lev_distance);\n+                        if (lev_distance === 0) {\n+                            return 0;\n                         }\n                     }\n                 }\n-                return false;\n+                return lev_distance;\n+            }\n+\n+            function checkReturned(obj, val) {\n+                var lev_distance = MAX_LEV_DISTANCE + 1;\n+                if (obj && obj.type && obj.type.output) {\n+                    if (obj.type.output.name.toLowerCase() === val) {\n+                        return 0;\n+                    }\n+                    lev_distance = min(levenshtein(obj.type.output.name, val));\n+                    if (lev_distance === 0) {\n+                        return 0;\n+                    }\n+                }\n+                return lev_distance;\n             }\n \n             function typePassesFilter(filter, type) {\n@@ -398,22 +435,27 @@\n             if ((val.charAt(0) === \"\\\"\" || val.charAt(0) === \"'\") &&\n                 val.charAt(val.length - 1) === val.charAt(0))\n             {\n-                val = val.substr(1, val.length - 2);\n+                val = val.substr(1, val.length - 2).toLowerCase();\n                 for (var i = 0; i < nSearchWords; ++i) {\n+                    var ty = searchIndex[i];\n                     if (searchWords[i] === val) {\n                         // filter type: ... queries\n                         if (typePassesFilter(typeFilter, searchIndex[i].ty)) {\n-                            results.push({id: i, index: -1});\n+                            results[ty.path + ty.name] = {id: i, index: -1};\n                         }\n-                    } else if (findArg(searchIndex[i], val.toLowerCase()) ||\n-                               (searchIndex[i].type &&\n-                                searchIndex[i].type.output &&\n-                                searchIndex[i].type.output.name === val.toLowerCase())) {\n+                    } else if (findArg(searchIndex[i], val) ||\n+                               (ty.type &&\n+                                ty.type.output &&\n+                                ty.type.output.name === val)) {\n                         if (typePassesFilter(typeFilter, searchIndex[i].ty)) {\n-                            results.push({id: i, index: -1, dontValidate: true});\n+                            results[ty.path + ty.name] = {\n+                                id: i,\n+                                index: -1,\n+                                dontValidate: true,\n+                            };\n                         }\n                     }\n-                    if (results.length === max) {\n+                    if (nbElements(results) === max) {\n                         break;\n                     }\n                 }\n@@ -431,6 +473,7 @@\n \n                 for (var i = 0; i < nSearchWords; ++i) {\n                     var type = searchIndex[i].type;\n+                    var ty = searchIndex[i];\n                     if (!type) {\n                         continue;\n                     }\n@@ -444,7 +487,7 @@\n                     var typeOutput = type.output ? type.output.name : \"\";\n                     if (output === \"*\" || output == typeOutput) {\n                         if (input === \"*\") {\n-                            results.push({id: i, index: -1, dontValidate: true});\n+                            results[ty.path + ty.name] = {id: i, index: -1, dontValidate: true};\n                         } else {\n                             var allFound = true;\n                             for (var it = 0; allFound === true && it < inputs.length; it++) {\n@@ -455,7 +498,11 @@\n                                 allFound = found;\n                             }\n                             if (allFound === true) {\n-                                results.push({id: i, index: -1, dontValidate: true});\n+                                results[ty.path + ty.name] = {\n+                                    id: i,\n+                                    index: -1,\n+                                    dontValidate: true,\n+                                };\n                             }\n                         }\n                     }\n@@ -471,46 +518,77 @@\n                 for (var i = 0; i < split.length; ++i) {\n                     for (var j = 0; j < nSearchWords; ++j) {\n                         var lev_distance;\n+                        var ty = searchIndex[j];\n+                        if (!ty) {\n+                            continue;\n+                        }\n                         if (searchWords[j].indexOf(split[i]) > -1 ||\n                             searchWords[j].indexOf(val) > -1 ||\n                             searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n                         {\n                             // filter type: ... queries\n                             if (typePassesFilter(typeFilter, searchIndex[j].ty)) {\n-                                results.push({\n+                                results[ty.path + ty.name] = {\n                                     id: j,\n                                     index: searchWords[j].replace(/_/g, \"\").indexOf(val),\n                                     lev: 0,\n-                                });\n+                                };\n                             }\n                         } else if (\n-                            (lev_distance = levenshtein(searchWords[j], val)) <=\n-                                MAX_LEV_DISTANCE) {\n+                            (lev_distance = levenshtein(searchWords[j], val)) <= MAX_LEV_DISTANCE) {\n                             if (typePassesFilter(typeFilter, searchIndex[j].ty)) {\n-                                results.push({\n-                                    id: j,\n-                                    index: 0,\n-                                    // we want lev results to go lower than others\n-                                    lev: lev_distance,\n-                                });\n+                                if (results[ty.path + ty.name] === undefined ||\n+                                    results[ty.path + ty.name].lev > lev_distance) {\n+                                    results[ty.path + ty.name] = {\n+                                        id: j,\n+                                        index: 0,\n+                                        // we want lev results to go lower than others\n+                                        lev: lev_distance,\n+                                    };\n+                                }\n                             }\n-                        } else if (findArg(searchIndex[j], val)) {\n+                        } else if (\n+                            (lev_distance = findArg(searchIndex[j], val)) <= MAX_LEV_DISTANCE) {\n                             if (typePassesFilter(typeFilter, searchIndex[j].ty)) {\n-                                results.push({\n-                                    id: j,\n-                                    index: 0,\n-                                    // we want lev results to go lower than others\n-                                    lev: lev_distance,\n-                                });\n+                                if (results[ty.path + ty.name] === undefined ||\n+                                    results[ty.path + ty.name].lev > lev_distance) {\n+                                    results[ty.path + ty.name] = {\n+                                        id: j,\n+                                        index: 0,\n+                                        // we want lev results to go lower than others\n+                                        lev: lev_distance,\n+                                    };\n+                                }\n+                            }\n+                        } else if (\n+                            (lev_distance = checkReturned(searchIndex[j], val)) <=\n+                            MAX_LEV_DISTANCE) {\n+                            if (typePassesFilter(typeFilter, searchIndex[j].ty)) {\n+                                if (results[ty.path + ty.name] === undefined ||\n+                                    results[ty.path + ty.name].lev > lev_distance) {\n+                                    results[ty.path + ty.name] = {\n+                                        id: j,\n+                                        index: 0,\n+                                        // we want lev results to go lower than others\n+                                        lev: lev_distance,\n+                                    };\n+                                }\n                             }\n                         }\n-                        if (results.length === max) {\n+                        if (nbElements(results) === max) {\n                             break;\n                         }\n                     }\n                 }\n             }\n \n+            var ar = [];\n+            for (var entry in results) {\n+                if (results.hasOwnProperty(entry)) {\n+                    ar.push(results[entry]);\n+                }\n+            }\n+            results = ar;\n             var nresults = results.length;\n             for (var i = 0; i < nresults; ++i) {\n                 results[i].word = searchWords[results[i].id];\n@@ -586,16 +664,6 @@\n                 return 0;\n             });\n \n-            // remove duplicates, according to the data provided\n-            for (var i = results.length - 1; i > 0; i -= 1) {\n-                if (results[i].word === results[i - 1].word &&\n-                    results[i].item.ty === results[i - 1].item.ty &&\n-                    results[i].item.path === results[i - 1].item.path &&\n-                    (results[i].item.parent || {}).name === (results[i - 1].item.parent || {}).name)\n-                {\n-                    results[i].id = -1;\n-                }\n-            }\n             for (var i = 0; i < results.length; ++i) {\n                 var result = results[i],\n                     name = result.item.name.toLowerCase(),\n@@ -884,6 +952,7 @@\n             elems[0].onclick = function() { printTab(0); };\n             elems[1].onclick = function() { printTab(1); };\n             elems[2].onclick = function() { printTab(2); };\n+            printTab(currentTab);\n         }\n \n         function search(e) {\n@@ -951,7 +1020,8 @@\n                         }\n                     }\n                     if (results['others'].length < maxResults &&\n-                        ((query.search && obj.name.indexOf(query.search)) || added === false)) {\n+                        ((query.search && obj.name.indexOf(query.search) !== -1) ||\n+                          added === false)) {\n                         results['others'].push(obj);\n                     }\n                 }"}]}