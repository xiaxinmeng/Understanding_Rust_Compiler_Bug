{"sha": "016cef914bdec750489518d5064958236672d72c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNmNlZjkxNGJkZWM3NTA0ODk1MThkNTA2NDk1ODIzNjY3MmQ3MmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T07:55:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-06T07:55:20Z"}, "message": "Auto merge of #25062 - michaelsproul:html-error-index, r=alexcrichton\n\nThis PR adds a program which uses the JSON output from #24884 to generate a webpage with descriptions of each diagnostic error.\r\n\r\nThe page is constructed by hand, with calls to `rustdoc`'s markdown renderers where needed. I opted to generate HTML directly as I think it's more flexible than generating a markdown file and feeding it into the `rustdoc` executable. I envision adding the ability to filter errors by their properties (description, no description, used, unused), which is infeasible using the whole-file markdown approach due to the need to wrap each error in a `<div>` (markdown inside tags isn't rendered).\r\n\r\nArchitecturally, I wasn't sure how to add this generator to the distribution. For the moment I've settled on a separate Rust program in `src/etc/` that gets compiled and run by a custom makefile rule. This approach doesn't seem too hackish, but I'm unsure if my usage of makefile variables is correct, particularly the call to `rustc` (and the `LD_LIBRARY_PATH` weirdness). Other options I considered were:\r\n\r\n* Integrate the error-index generator into `rustdoc` so that it gets invoked via a flag and can be built as part of `rustdoc`.\r\n* Add the error-index-generator as a \"tool\" to the `TOOLS` array, and make use of the facilities for building tools. The main reason I didn't do this was because it seemed like I'd need to add lots of stuff. I'm happy to investigate this further if it's the preferred method.", "tree": {"sha": "071c78a2854369d9a8be8b19246b78f79b1b3861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071c78a2854369d9a8be8b19246b78f79b1b3861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016cef914bdec750489518d5064958236672d72c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016cef914bdec750489518d5064958236672d72c", "html_url": "https://github.com/rust-lang/rust/commit/016cef914bdec750489518d5064958236672d72c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016cef914bdec750489518d5064958236672d72c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afa669524f550744834b5cd031dc3918e65905f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afa669524f550744834b5cd031dc3918e65905f", "html_url": "https://github.com/rust-lang/rust/commit/6afa669524f550744834b5cd031dc3918e65905f"}, {"sha": "b9d484ff8c63084326d81bc8036906e089a5f016", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d484ff8c63084326d81bc8036906e089a5f016", "html_url": "https://github.com/rust-lang/rust/commit/b9d484ff8c63084326d81bc8036906e089a5f016"}], "stats": {"total": 137, "additions": 134, "deletions": 3}, "files": [{"sha": "546b16c1b850b9619c39bfed16e22d5418b20b62", "filename": "mk/crates.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/016cef914bdec750489518d5064958236672d72c/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/016cef914bdec750489518d5064958236672d72c/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=016cef914bdec750489518d5064958236672d72c", "patch": "@@ -58,7 +58,7 @@ RUSTC_CRATES := rustc rustc_typeck rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_data_structures\n HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc fmt_macros\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n-TOOLS := compiletest rustdoc rustc rustbook\n+TOOLS := compiletest rustdoc rustc rustbook error-index-generator\n \n DEPS_core :=\n DEPS_libc := core\n@@ -107,10 +107,12 @@ TOOL_DEPS_compiletest := test getopts\n TOOL_DEPS_rustdoc := rustdoc\n TOOL_DEPS_rustc := rustc_driver\n TOOL_DEPS_rustbook := std rustdoc\n+TOOL_DEPS_error-index-generator := rustdoc syntax serialize\n TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs\n TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustbook := $(S)src/rustbook/main.rs\n+TOOL_SOURCE_error-index-generator := $(S)src/error-index-generator/main.rs\n \n ONLY_RLIB_core := 1\n ONLY_RLIB_libc := 1"}, {"sha": "39eb30a5b8dd56afbc57ab468ba7455958dccb65", "filename": "mk/docs.mk", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/016cef914bdec750489518d5064958236672d72c/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/016cef914bdec750489518d5064958236672d72c/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=016cef914bdec750489518d5064958236672d72c", "patch": "@@ -71,9 +71,13 @@ RUSTBOOK_EXE = $(HBIN2_H_$(CFG_BUILD))/rustbook$(X_$(CFG_BUILD))\n # ./configure\n RUSTBOOK = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTBOOK_EXE)\n \n+# The error-index-generator executable...\n+ERR_IDX_GEN_EXE = $(HBIN2_H_$(CFG_BUILD))/error-index-generator$(X_$(CFG_BUILD))\n+ERR_IDX_GEN = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(ERR_IDX_GEN_EXE)\n+\n D := $(S)src/doc\n \n-DOC_TARGETS := trpl style\n+DOC_TARGETS := trpl style error-index\n COMPILER_DOC_TARGETS :=\n DOC_L10N_TARGETS :=\n \n@@ -288,3 +292,9 @@ doc/style/index.html: $(RUSTBOOK_EXE) $(wildcard $(S)/src/doc/style/*.md) | doc/\n \t@$(call E, rustbook: $@)\n \t$(Q)rm -rf doc/style\n \t$(Q)$(RUSTBOOK) build $(S)src/doc/style doc/style\n+\n+error-index: doc/error-index.html\n+\n+doc/error-index.html: $(ERR_IDX_GEN_EXE) | doc/\n+\t$(Q)$(call E, error-index-generator: $@)\n+\t$(Q)$(ERR_IDX_GEN)"}, {"sha": "1ae6a61c95a8c250e8cf397738f6a4052a370bfe", "filename": "mk/prepare.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/016cef914bdec750489518d5064958236672d72c/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/016cef914bdec750489518d5064958236672d72c/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=016cef914bdec750489518d5064958236672d72c", "patch": "@@ -70,7 +70,7 @@ define PREPARE_MAN\n \t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n endef\n \n-PREPARE_TOOLS = $(filter-out compiletest rustbook, $(TOOLS))\n+PREPARE_TOOLS = $(filter-out compiletest rustbook error-index-generator, $(TOOLS))\n \n \n # $(1) is tool"}, {"sha": "855d89bc8a35eb42771d73cd8ee000fc23c6d285", "filename": "src/error-index-generator/main.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/016cef914bdec750489518d5064958236672d72c/src%2Ferror-index-generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016cef914bdec750489518d5064958236672d72c/src%2Ferror-index-generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror-index-generator%2Fmain.rs?ref=016cef914bdec750489518d5064958236672d72c", "patch": "@@ -0,0 +1,119 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_private, rustdoc)]\n+\n+extern crate syntax;\n+extern crate rustdoc;\n+extern crate serialize as rustc_serialize;\n+\n+use std::collections::BTreeMap;\n+use std::fs::{read_dir, File};\n+use std::io::{Read, Write};\n+use std::path::Path;\n+use std::error::Error;\n+\n+use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap};\n+\n+use rustdoc::html::markdown::Markdown;\n+use rustc_serialize::json;\n+\n+/// Load all the metadata files from `metadata_dir` into an in-memory map.\n+fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<Error>> {\n+    let mut all_errors = BTreeMap::new();\n+\n+    for entry in try!(read_dir(metadata_dir)) {\n+        let path = try!(entry).path();\n+\n+        let mut metadata_str = String::new();\n+        try!(\n+            File::open(&path).and_then(|mut f|\n+            f.read_to_string(&mut metadata_str))\n+        );\n+\n+        let some_errors: ErrorMetadataMap = try!(json::decode(&metadata_str));\n+\n+        for (err_code, info) in some_errors {\n+            all_errors.insert(err_code, info);\n+        }\n+    }\n+\n+    Ok(all_errors)\n+}\n+\n+/// Output an HTML page for the errors in `err_map` to `output_path`.\n+fn render_error_page(err_map: &ErrorMetadataMap, output_path: &Path) -> Result<(), Box<Error>> {\n+    let mut output_file = try!(File::create(output_path));\n+\n+    try!(write!(&mut output_file,\n+r##\"<!DOCTYPE html>\n+<html>\n+<head>\n+<title>Rust Compiler Error Index</title>\n+<meta charset=\"utf-8\">\n+<!-- Include rust.css after main.css so its rules take priority. -->\n+<link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\"/>\n+<link rel=\"stylesheet\" type=\"text/css\" href=\"rust.css\"/>\n+<style>\n+.error-undescribed {{\n+    display: none;\n+}}\n+</style>\n+</head>\n+<body>\n+\"##\n+    ));\n+\n+    try!(write!(&mut output_file, \"<h1>Rust Compiler Error Index</h1>\\n\"));\n+\n+    for (err_code, info) in err_map.iter() {\n+        // Enclose each error in a div so they can be shown/hidden en masse.\n+        let desc_desc = match info.description {\n+            Some(_) => \"error-described\",\n+            None => \"error-undescribed\"\n+        };\n+        let use_desc = match info.use_site {\n+            Some(_) => \"error-used\",\n+            None => \"error-unused\"\n+        };\n+        try!(write!(&mut output_file, \"<div class=\\\"{} {}\\\">\", desc_desc, use_desc));\n+\n+        // Error title (with self-link).\n+        try!(write!(&mut output_file,\n+            \"<h2 id=\\\"{0}\\\" class=\\\"section-header\\\"><a href=\\\"#{0}\\\">{0}</a></h2>\\n\",\n+            err_code\n+        ));\n+\n+        // Description rendered as markdown.\n+        match info.description {\n+            Some(ref desc) => try!(write!(&mut output_file, \"{}\", Markdown(desc))),\n+            None => try!(write!(&mut output_file, \"<p>No description.</p>\\n\"))\n+        }\n+\n+        try!(write!(&mut output_file, \"</div>\\n\"));\n+    }\n+\n+    try!(write!(&mut output_file, \"</body>\\n</html>\"));\n+\n+    Ok(())\n+}\n+\n+fn main_with_result() -> Result<(), Box<Error>> {\n+    let metadata_dir = get_metadata_dir();\n+    let err_map = try!(load_all_errors(&metadata_dir));\n+    try!(render_error_page(&err_map, Path::new(\"doc/error-index.html\")));\n+    Ok(())\n+}\n+\n+fn main() {\n+    if let Err(e) = main_with_result() {\n+        panic!(\"{}\", e.description());\n+    }\n+}"}]}