{"sha": "688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OGE0ZGRkMjA3NDJmOTQxNTVlYzQ3ZmEyYzFhOTZlMWUzZDc4ZDM=", "commit": {"author": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-04-04T17:15:01Z"}, "committer": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-04-07T17:49:14Z"}, "message": "--bless more mir-opt tests.", "tree": {"sha": "448f4434be52f28469efcdefd9bec5aa54243233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/448f4434be52f28469efcdefd9bec5aa54243233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "html_url": "https://github.com/rust-lang/rust/commit/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/comments", "author": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f", "html_url": "https://github.com/rust-lang/rust/commit/ef88769e4fd74cea5cc4f0c03259d6ee8a119e0f"}], "stats": {"total": 3267, "additions": 2254, "deletions": 1013}, "files": [{"sha": "928ed8265d3fbb3c38e857f1f2def2464a0fe658", "filename": "src/test/mir-opt/const_prop/aggregate.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,25 +1,6 @@\n // compile-flags: -O\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x = (0, 1, 2).1 + 0;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _3 = (const 0i32, const 1i32, const 2i32);\n-//      _2 = (_3.1: i32);\n-//      _1 = Add(move _2, const 0i32);\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _3 = (const 0i32, const 1i32, const 2i32);\n-//      _2 = const 1i32;\n-//      _1 = const 1i32;\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "d20019287b08c6c061bce81cf6b01c2cc80c482a", "filename": "src/test/mir-opt/const_prop/aggregate/rustc.main.ConstProp.diff", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,62 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:4:11: 4:11\n+      let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:5:9: 5:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:5:13: 5:24\n+      let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:5:9: 5:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/aggregate.rs:5:9: 5:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/aggregate.rs:5:13: 5:24\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+          _3 = (const 0i32, const 1i32, const 2i32); // bb0[3]: scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/aggregate.rs:5:14: 5:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/aggregate.rs:5:17: 5:18\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/aggregate.rs:5:20: 5:21\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+-         _2 = (_3.1: i32);                // bb0[4]: scope 0 at $DIR/aggregate.rs:5:13: 5:24\n+-         _1 = Add(move _2, const 0i32);   // bb0[5]: scope 0 at $DIR/aggregate.rs:5:13: 5:28\n++         _2 = const 1i32;                 // bb0[4]: scope 0 at $DIR/aggregate.rs:5:13: 5:24\n+                                           // ty::Const\n+                                           // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000000))\n++                                          // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/aggregate.rs:5:27: 5:28\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n++                                          // + span: $DIR/aggregate.rs:5:13: 5:24\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++         _1 = const 1i32;                 // bb0[5]: scope 0 at $DIR/aggregate.rs:5:13: 5:28\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/aggregate.rs:5:13: 5:28\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          StorageDead(_2);                 // bb0[6]: scope 0 at $DIR/aggregate.rs:5:27: 5:28\n+          StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/aggregate.rs:5:28: 5:29\n+          _0 = ();                         // bb0[8]: scope 0 at $DIR/aggregate.rs:4:11: 6:2\n+          StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/aggregate.rs:6:1: 6:2\n+          return;                          // bb0[10]: scope 0 at $DIR/aggregate.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "011a25e978cdf7f707cbe8bfbd08edd3368629a3", "filename": "src/test/mir-opt/const_prop/array_index.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,33 +1,5 @@\n+// EMIT_MIR rustc.main.ConstProp.diff\n+\n fn main() {\n     let x: u32 = [0, 1, 2, 3][2];\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _2 = [const 0u32, const 1u32, const 2u32, const 3u32];\n-//      ...\n-//      _3 = const 2usize;\n-//      _4 = const 4usize;\n-//      _5 = Lt(_3, _4);\n-//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n-//  }\n-//  bb1: {\n-//      _1 = _2[_3];\n-//      ...\n-//      return;\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _5 = const true;\n-//      assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n-//  }\n-//  bb1: {\n-//      _1 = const 2u32;\n-//      ...\n-//      return;\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "b34db8618b62bca5fef06ba5a65f8693a6572397", "filename": "src/test/mir-opt/const_prop/array_index/rustc.main.ConstProp.diff", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,92 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:3:11: 3:11\n+      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/array_index.rs:4:9: 4:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:4:18: 4:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:4:31: 4:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:4:18: 4:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:4:18: 4:33\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:4:9: 4:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array_index.rs:4:9: 4:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/array_index.rs:4:18: 4:30\n+          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // bb0[2]: scope 0 at $DIR/array_index.rs:4:18: 4:30\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:4:19: 4:20\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:4:22: 4:23\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:4:25: 4:26\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:4:28: 4:29\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/array_index.rs:4:31: 4:32\n+          _3 = const 2usize;               // bb0[4]: scope 0 at $DIR/array_index.rs:4:31: 4:32\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:4:31: 4:32\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n+          _4 = const 4usize;               // bb0[5]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000004))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:4:18: 4:33\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }\n+-         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n+-         assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n++         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:4:18: 4:33\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:4:18: 4:33\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb1: {\n+-         _1 = _2[_3];                     // bb1[0]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n++         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:4:18: 4:33\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:4:33: 4:34\n+          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:4:33: 4:34\n+          _0 = ();                         // bb1[3]: scope 0 at $DIR/array_index.rs:3:11: 5:2\n+          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:5:1: 5:2\n+          return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:5:2: 5:2\n+      }\n+  }\n+  "}, {"sha": "d45804ebb6cf29b1a57b878d58195f88a97b271c", "filename": "src/test/mir-opt/const_prop/boxes.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -7,50 +7,7 @@\n \n // Note: this test verifies that we, in fact, do not const prop `box`\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x = *(box 42) + 0;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _4 = Box(i32);\n-//      (*_4) = const 42i32;\n-//      _3 = move _4;\n-//      ...\n-//      _2 = (*_3);\n-//      _1 = Add(move _2, const 0i32);\n-//      ...\n-//      drop(_3) -> [return: bb2, unwind: bb1];\n-//  }\n-//  bb1 (cleanup): {\n-//      resume;\n-//  }\n-//  bb2: {\n-//      ...\n-//      _0 = ();\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _4 = Box(i32);\n-//      (*_4) = const 42i32;\n-//      _3 = move _4;\n-//      ...\n-//      _2 = (*_3);\n-//      _1 = Add(move _2, const 0i32);\n-//      ...\n-//      drop(_3) -> [return: bb2, unwind: bb1];\n-//  }\n-//  bb1 (cleanup): {\n-//      resume;\n-//  }\n-//  bb2: {\n-//      ...\n-//      _0 = ();\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "50ee2abecfe452470399a47356eec39e7b47e8a3", "filename": "src/test/mir-opt/const_prop/boxes/rustc.main.ConstProp.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/boxes.rs:11:11: 11:11\n+      let _1: i32;                         // in scope 0 at $DIR/boxes.rs:12:9: 12:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:12:13: 12:22\n+      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/boxes.rs:12:9: 12:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/boxes.rs:12:9: 12:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/boxes.rs:12:13: 12:22\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          _4 = Box(i32);                   // bb0[4]: scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          (*_4) = const 42i32;             // bb0[5]: scope 0 at $DIR/boxes.rs:12:19: 12:21\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/boxes.rs:12:19: 12:21\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          _3 = move _4;                    // bb0[6]: scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          StorageDead(_4);                 // bb0[7]: scope 0 at $DIR/boxes.rs:12:21: 12:22\n+          _2 = (*_3);                      // bb0[8]: scope 0 at $DIR/boxes.rs:12:13: 12:22\n+          _1 = Add(move _2, const 0i32);   // bb0[9]: scope 0 at $DIR/boxes.rs:12:13: 12:26\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/boxes.rs:12:25: 12:26\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          StorageDead(_2);                 // bb0[10]: scope 0 at $DIR/boxes.rs:12:25: 12:26\n+          drop(_3) -> [return: bb2, unwind: bb1]; // bb0[11]: scope 0 at $DIR/boxes.rs:12:26: 12:27\n+      }\n+  \n+      bb1 (cleanup): {\n+          resume;                          // bb1[0]: scope 0 at $DIR/boxes.rs:11:1: 13:2\n+      }\n+  \n+      bb2: {\n+          StorageDead(_3);                 // bb2[0]: scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          _0 = ();                         // bb2[1]: scope 0 at $DIR/boxes.rs:11:11: 13:2\n+          StorageDead(_1);                 // bb2[2]: scope 0 at $DIR/boxes.rs:13:1: 13:2\n+          return;                          // bb2[3]: scope 0 at $DIR/boxes.rs:13:2: 13:2\n+      }\n+  }\n+  "}, {"sha": "439bd2df91f574397476eef4bdedb04bffa997cd", "filename": "src/test/mir-opt/const_prop/checked_add.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,21 +1,6 @@\n // compile-flags: -C overflow-checks=on\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x: u32 = 1 + 1;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _2 = CheckedAdd(const 1u32, const 1u32);\n-//      assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _2 = (const 2u32, const false);\n-//      assert(!const false, \"attempt to add with overflow\") -> bb1;\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "0a0a4ff852f0f325c7dfb7e705521e592c682986", "filename": "src/test/mir-opt/const_prop/checked_add/rustc.main.ConstProp.diff", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,59 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/checked_add.rs:4:11: 4:11\n+      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/checked_add.rs:5:9: 5:10\n+      let mut _2: (u32, bool);             // in scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/checked_add.rs:5:9: 5:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/checked_add.rs:5:9: 5:10\n+-         _2 = CheckedAdd(const 1u32, const 1u32); // bb0[1]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         _2 = (const 2u32, const false);  // bb0[1]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+                                           // ty::Const\n+                                           // + ty: u32\n+-                                          // + val: Value(Scalar(0x00000001))\n++                                          // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/checked_add.rs:5:18: 5:19\n+-                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n++                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+                                           // ty::Const\n+-                                          // + ty: u32\n+-                                          // + val: Value(Scalar(0x00000001))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/checked_add.rs:5:22: 5:23\n+-                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+-         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_2.0: u32);           // bb1[0]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+          _0 = ();                         // bb1[1]: scope 0 at $DIR/checked_add.rs:4:11: 6:2\n+          StorageDead(_1);                 // bb1[2]: scope 0 at $DIR/checked_add.rs:6:1: 6:2\n+          return;                          // bb1[3]: scope 0 at $DIR/checked_add.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "c6c006c080912bed3c033ab562285e7d0723942f", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,31 +1,9 @@\n #[inline(never)]\n fn read(_: usize) { }\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     const FOO: &i32 = &1;\n     let x = FOO as *const i32 as usize;\n     read(x);\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _2 = &raw const (*_3);\n-//      _1 = move _2 as usize (Misc);\n-//      ...\n-//      _5 = _1;\n-//      _4 = const read(move _5) -> bb1;\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _3 = const main::FOO;\n-//      _2 = &raw const (*_3);\n-//      _1 = move _2 as usize (Misc);\n-//      ...\n-//      _5 = _1;\n-//      _4 = const read(move _5) -> bb1;\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "f4a5b64f0d932beb9706902bdde130777aa8f046", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully/rustc.main.ConstProp.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 5:11\n+      let _1: usize;                       // in scope 0 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n+      let mut _2: *const i32;              // in scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:30\n+      let _3: &i32;                        // in scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+      let _4: ();                          // in scope 0 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n+      let mut _5: usize;                   // in scope 0 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:9: 7:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:30\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+          _3 = const main::FOO;            // bb0[3]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), [], None)\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), [], None) }\n+          _2 = &raw const (*_3);           // bb0[4]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n+          _1 = move _2 as usize (Misc);    // bb0[5]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n+          StorageDead(_2);                 // bb0[6]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39\n+          StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/const_prop_fails_gracefully.rs:7:39: 7:40\n+          StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n+          StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n+          _5 = _1;                         // bb0[10]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n+          _4 = const read(move _5) -> bb1; // bb0[11]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n+                                           // ty::Const\n+                                           // + ty: fn(usize) {read}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:8:5: 8:9\n+                                           // + literal: Const { ty: fn(usize) {read}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // bb1[0]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:11: 8:12\n+          StorageDead(_4);                 // bb1[1]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:12: 8:13\n+          _0 = ();                         // bb1[2]: scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n+          StorageDead(_1);                 // bb1[3]: scope 0 at $DIR/const_prop_fails_gracefully.rs:9:1: 9:2\n+          return;                          // bb1[4]: scope 0 at $DIR/const_prop_fails_gracefully.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "1071590dd9e518c7d8086b1dcf448689914bae75", "filename": "src/test/mir-opt/const_prop/control-flow-simplification.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -6,6 +6,8 @@ trait NeedsDrop:Sized{\n \n impl<This> NeedsDrop for This{}\n \n+// EMIT_MIR rustc.hello.ConstProp.diff\n+// EMIT_MIR rustc.hello.PreCodegen.before.mir\n fn hello<T>(){\n     if <bool>::NEEDS {\n         panic!()\n@@ -16,49 +18,3 @@ pub fn main() {\n     hello::<()>();\n     hello::<Vec<()>>();\n }\n-\n-// END RUST SOURCE\n-// START rustc.hello.ConstProp.before.mir\n-// let mut _0: ();\n-// let mut _1: bool;\n-// let mut _2: !;\n-// bb0: {\n-//   StorageLive(_1);\n-//   _1 = const <bool as NeedsDrop>::NEEDS;\n-//   switchInt(_1) -> [false: bb1, otherwise: bb2];\n-// }\n-// bb1: {\n-//   _0 = ();\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// bb2: {\n-//   StorageLive(_2);\n-//   const std::rt::begin_panic::<&str>(const \"explicit panic\");\n-// }\n-// END rustc.hello.ConstProp.before.mir\n-// START rustc.hello.ConstProp.after.mir\n-// let mut _0: ();\n-// let mut _1: bool;\n-// let mut _2: !;\n-// bb0: {\n-//   StorageLive(_1);\n-//   _1 = const false;\n-//   switchInt(const false) -> [false: bb1, otherwise: bb2];\n-// }\n-// bb1: {\n-//   _0 = ();\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// bb2: {\n-//   StorageLive(_2);\n-//   const std::rt::begin_panic::<&str>(const \"explicit panic\");\n-// }\n-// END rustc.hello.ConstProp.after.mir\n-// START rustc.hello.PreCodegen.before.mir\n-// let mut _0: ();\n-// bb0: {\n-//   return;\n-// }\n-// END rustc.hello.PreCodegen.before.mir"}, {"sha": "5546542168850989464c106abc1f71ddbde210d3", "filename": "src/test/mir-opt/const_prop/control-flow-simplification/rustc.hello.ConstProp.diff", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,54 @@\n+- // MIR for `hello` before ConstProp\n++ // MIR for `hello` after ConstProp\n+  \n+  fn hello() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n+      let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+      let mut _2: !;                       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL: 13:52\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+-         _1 = const <bool as NeedsDrop>::NEEDS; // bb0[1]: scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n++         _1 = const false;                // bb0[1]: scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+                                           // ty::Const\n+                                           // + ty: bool\n+-                                          // + val: Unevaluated(DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), [bool], None)\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/control-flow-simplification.rs:12:8: 12:21\n+-                                          // + literal: Const { ty: bool, val: Unevaluated(DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), [bool], None) }\n+-         switchInt(_1) -> [false: bb1, otherwise: bb2]; // bb0[2]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         switchInt(const false) -> [false: bb1, otherwise: bb2]; // bb0[2]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/control-flow-simplification.rs:12:5: 14:6\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb1: {\n+          _0 = ();                         // bb1[0]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+          StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/control-flow-simplification.rs:15:1: 15:2\n+          return;                          // bb1[2]: scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n+      }\n+  \n+      bb2: {\n+          StorageLive(_2);                 // bb2[0]: scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL: 13:52\n+          const std::rt::begin_panic::<&str>(const \"explicit panic\"); // bb2[1]: scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL: 13:52\n+                                           // ty::Const\n+                                           // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL: 13:46\n+                                           // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL: 12:45\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n+      }\n+  }\n+  "}, {"sha": "53296f8714b087488f80faa2161783c16dbc636a", "filename": "src/test/mir-opt/const_prop/control-flow-simplification/rustc.hello.PreCodegen.before.mir", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,9 @@\n+// MIR for `hello` before PreCodegen\n+\n+fn hello() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n+\n+    bb0: {\n+        return;                          // bb0[0]: scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n+    }\n+}"}, {"sha": "2117589fce2418a40bf7b8fa4050391bb833b179", "filename": "src/test/mir-opt/const_prop/discriminant.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,53 +1,6 @@\n // compile-flags: -O\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x = (if let Some(true) = Some(true) { 42 } else { 10 }) + 0;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _3 = std::option::Option::<bool>::Some(const true,);\n-//      _4 = discriminant(_3);\n-//      switchInt(move _4) -> [1isize: bb2, otherwise: bb1];\n-//  }\n-//  bb1: {\n-//      _2 = const 10i32;\n-//      goto -> bb4;\n-//  }\n-//  bb2: {\n-//      switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3];\n-//  }\n-//  bb3: {\n-//      _2 = const 42i32;\n-//      goto -> bb4;\n-//  }\n-//  bb4: {\n-//      _1 = Add(move _2, const 0i32);\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _3 = const {transmute(0x01): std::option::Option<bool>};\n-//      _4 = const 1isize;\n-//      switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1];\n-//  }\n-//  bb1: {\n-//      _2 = const 10i32;\n-//      goto -> bb4;\n-//  }\n-//  bb2: {\n-//      switchInt(const true) -> [false: bb1, otherwise: bb3];\n-//  }\n-//  bb3: {\n-//      _2 = const 42i32;\n-//      goto -> bb4;\n-//  }\n-//  bb4: {\n-//      _1 = Add(move _2, const 0i32);\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "152a3e5e391aecdc7e3e881225bf67652a67b368", "filename": "src/test/mir-opt/const_prop/discriminant/rustc.main.ConstProp.diff", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,95 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:4:11: 4:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:5:9: 5:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:5:13: 5:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:5:34: 5:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:5:21: 5:31\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:5:9: 5:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/discriminant.rs:5:9: 5:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:5:13: 5:64\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:5:34: 5:44\n+-         _3 = std::option::Option::<bool>::Some(const true,); // bb0[3]: scope 0 at $DIR/discriminant.rs:5:34: 5:44\n++         _3 = const {transmute(0x01): std::option::Option<bool>}; // bb0[3]: scope 0 at $DIR/discriminant.rs:5:34: 5:44\n+                                           // ty::Const\n+-                                          // + ty: bool\n++                                          // + ty: std::option::Option<bool>\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/discriminant.rs:5:39: 5:43\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+-         _4 = discriminant(_3);           // bb0[4]: scope 0 at $DIR/discriminant.rs:5:21: 5:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:5:21: 5:31\n++                                          // + span: $DIR/discriminant.rs:5:34: 5:44\n++                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n++         _4 = const 1isize;               // bb0[4]: scope 0 at $DIR/discriminant.rs:5:21: 5:31\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x0000000000000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:5:21: 5:31\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:5:21: 5:31\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x0000000000000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:5:21: 5:31\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n+      }\n+  \n+      bb1: {\n+          _2 = const 10i32;                // bb1[0]: scope 0 at $DIR/discriminant.rs:5:59: 5:61\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000000a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/discriminant.rs:5:59: 5:61\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n+          goto -> bb4;                     // bb1[1]: scope 0 at $DIR/discriminant.rs:5:13: 5:64\n+      }\n+  \n+      bb2: {\n+-         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:5:26: 5:30\n++         switchInt(const true) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:5:26: 5:30\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:5:26: 5:30\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb3: {\n+          _2 = const 42i32;                // bb3[0]: scope 0 at $DIR/discriminant.rs:5:47: 5:49\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/discriminant.rs:5:47: 5:49\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          goto -> bb4;                     // bb3[1]: scope 0 at $DIR/discriminant.rs:5:13: 5:64\n+      }\n+  \n+      bb4: {\n+          _1 = Add(move _2, const 0i32);   // bb4[0]: scope 0 at $DIR/discriminant.rs:5:13: 5:68\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/discriminant.rs:5:67: 5:68\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/discriminant.rs:5:67: 5:68\n+          StorageDead(_3);                 // bb4[2]: scope 0 at $DIR/discriminant.rs:5:68: 5:69\n+          _0 = ();                         // bb4[3]: scope 0 at $DIR/discriminant.rs:4:11: 6:2\n+          StorageDead(_1);                 // bb4[4]: scope 0 at $DIR/discriminant.rs:6:1: 6:2\n+          return;                          // bb4[5]: scope 0 at $DIR/discriminant.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "961e4447d8b6b8118f55714137898666619d795f", "filename": "src/test/mir-opt/const_prop/indirect.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,23 +1,6 @@\n // compile-flags: -C overflow-checks=on\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x = (2u32 as u8) + 1;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-// bb0: {\n-//     ...\n-//     _2 = const 2u32 as u8 (Misc);\n-//     _3 = CheckedAdd(move _2, const 1u8);\n-//     assert(!move (_3.1: bool), \"attempt to add with overflow\") -> bb1;\n-//}\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-// bb0: {\n-//     ...\n-//     _2 = const 2u8;\n-//     _3 = (const 3u8, const false);\n-//     assert(!const false, \"attempt to add with overflow\") -> bb1;\n-// }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "ca3e3bb5d2de0e2ce56a8fdda878e0dc99825f6e", "filename": "src/test/mir-opt/const_prop/indirect/rustc.main.ConstProp.diff", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,70 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:4:11: 4:11\n+      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:5:9: 5:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:5:13: 5:25\n+      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:5:13: 5:29\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:5:9: 5:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/indirect.rs:5:9: 5:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/indirect.rs:5:13: 5:25\n+-         _2 = const 2u32 as u8 (Misc);    // bb0[2]: scope 0 at $DIR/indirect.rs:5:13: 5:25\n++         _2 = const 2u8;                  // bb0[2]: scope 0 at $DIR/indirect.rs:5:13: 5:25\n+                                           // ty::Const\n+-                                          // + ty: u32\n+-                                          // + val: Value(Scalar(0x00000002))\n++                                          // + ty: u8\n++                                          // + val: Value(Scalar(0x02))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/indirect.rs:5:14: 5:18\n+-                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+-         _3 = CheckedAdd(move _2, const 1u8); // bb0[3]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n++                                          // + span: $DIR/indirect.rs:5:13: 5:25\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n++         _3 = (const 3u8, const false);   // bb0[3]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n+                                           // ty::Const\n+                                           // + ty: u8\n+-                                          // + val: Value(Scalar(0x01))\n++                                          // + val: Value(Scalar(0x03))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/indirect.rs:5:28: 5:29\n+-                                          // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n+-         assert(!move (_3.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[4]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n++                                          // + span: $DIR/indirect.rs:5:13: 5:29\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/indirect.rs:5:13: 5:29\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[4]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/indirect.rs:5:13: 5:29\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_3.0: u8);            // bb1[0]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         _1 = const 3u8;                  // bb1[0]: scope 0 at $DIR/indirect.rs:5:13: 5:29\n++                                          // ty::Const\n++                                          // + ty: u8\n++                                          // + val: Value(Scalar(0x03))\n++                                          // mir::Constant\n++                                          // + span: $DIR/indirect.rs:5:13: 5:29\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }\n+          StorageDead(_2);                 // bb1[1]: scope 0 at $DIR/indirect.rs:5:28: 5:29\n+          _0 = ();                         // bb1[2]: scope 0 at $DIR/indirect.rs:4:11: 6:2\n+          StorageDead(_1);                 // bb1[3]: scope 0 at $DIR/indirect.rs:6:1: 6:2\n+          return;                          // bb1[4]: scope 0 at $DIR/indirect.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "50a1405b77b4c7db4162eebeb0406fb7f3040686", "filename": "src/test/mir-opt/const_prop/issue-66971.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -11,28 +11,7 @@ fn encode(this: ((), u8, u8)) {\n     assert!(this.2 == 0);\n }\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     encode(((), 0, 0));\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _3 = ();\n-//      _2 = (move _3, const 0u8, const 0u8);\n-//      ...\n-//      _1 = const encode(move _2) -> bb1;\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _3 = const ();\n-//      _2 = (move _3, const 0u8, const 0u8);\n-//      ...\n-//      _1 = const encode(move _2) -> bb1;\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "d3ebaa0a6329f2a820dec2b5e45c3173e04b41a5", "filename": "src/test/mir-opt/const_prop/issue-66971/rustc.main.ConstProp.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-66971.rs:15:11: 15:11\n+      let _1: ();                          // in scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n+      let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n+      let mut _3: ();                      // in scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+-         _3 = ();                         // bb0[3]: scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n++         _3 = const ();                   // bb0[3]: scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n++                                          // ty::Const\n++                                          // + ty: ()\n++                                          // + val: Value(Scalar(<ZST>))\n++                                          // mir::Constant\n++                                          // + span: $DIR/issue-66971.rs:16:13: 16:15\n++                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          _2 = (move _3, const 0u8, const 0u8); // bb0[4]: scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-66971.rs:16:17: 16:18\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-66971.rs:16:20: 16:21\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/issue-66971.rs:16:21: 16:22\n+          _1 = const encode(move _2) -> bb1; // bb0[6]: scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n+                                           // ty::Const\n+                                           // + ty: fn(((), u8, u8)) {encode}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-66971.rs:16:5: 16:11\n+                                           // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/issue-66971.rs:16:22: 16:23\n+          StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/issue-66971.rs:16:23: 16:24\n+          _0 = ();                         // bb1[2]: scope 0 at $DIR/issue-66971.rs:15:11: 17:2\n+          return;                          // bb1[3]: scope 0 at $DIR/issue-66971.rs:17:2: 17:2\n+      }\n+  }\n+  "}, {"sha": "3c832eb1344022ae373408a9a7a32a5f5008cc44", "filename": "src/test/mir-opt/const_prop/issue-67019.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -6,29 +6,7 @@ fn test(this: ((u8, u8),)) {\n     assert!((this.0).0 == 1);\n }\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     test(((1, 2),));\n }\n-\n-// Important bit is parameter passing so we only check that below\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _3 = (const 1u8, const 2u8);\n-//      _2 = (move _3,);\n-//      ...\n-//      _1 = const test(move _2) -> bb1;\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _3 = (const 1u8, const 2u8);\n-//      _2 = (move _3,);\n-//      ...\n-//      _1 = const test(move _2) -> bb1;\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "96a20edd91aaa28f612178aace5dad49aa036288", "filename": "src/test/mir-opt/const_prop/issue-67019/rustc.main.ConstProp.diff", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,47 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-67019.rs:10:11: 10:11\n+      let _1: ();                          // in scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n+      let mut _2: ((u8, u8),);             // in scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n+      let mut _3: (u8, u8);                // in scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          _3 = (const 1u8, const 2u8);     // bb0[3]: scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/issue-67019.rs:11:12: 11:13\n++                                          // + span: $DIR/issue-67019.rs:11:11: 11:17\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x02))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/issue-67019.rs:11:15: 11:16\n++                                          // + span: $DIR/issue-67019.rs:11:11: 11:17\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n+          _2 = (move _3,);                 // bb0[4]: scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n+          StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n+          _1 = const test(move _2) -> bb1; // bb0[6]: scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n+                                           // ty::Const\n+                                           // + ty: fn(((u8, u8),)) {test}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-67019.rs:11:5: 11:9\n+                                           // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/issue-67019.rs:11:19: 11:20\n+          StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/issue-67019.rs:11:20: 11:21\n+          _0 = ();                         // bb1[2]: scope 0 at $DIR/issue-67019.rs:10:11: 12:2\n+          return;                          // bb1[3]: scope 0 at $DIR/issue-67019.rs:12:2: 12:2\n+      }\n+  }\n+  "}, {"sha": "9ecc1eadceb3f24eb57bb63d7027fb1ae69c24e0", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.rs", "status": "modified", "additions": 2, "deletions": 137, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -5,145 +5,10 @@ struct Point {\n     y: u32,\n }\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n+// EMIT_MIR rustc.main.SimplifyLocals.after.mir\n fn main() {\n     let x = 2 + 2;\n     let y = [0, 1, 2, 3, 4, 5][3];\n     let z = (Point { x: 12, y: 42}).y;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-// let mut _0: ();\n-// let _1: i32;\n-// let mut _2: (i32, bool);\n-// let mut _4: [i32; 6];\n-// let _5: usize;\n-// let mut _6: usize;\n-// let mut _7: bool;\n-// let mut _9: Point;\n-// scope 1 {\n-//   debug x => _1;\n-//   let _3: i32;\n-//   scope 2 {\n-//     debug y => _3;\n-//     let _8: u32;\n-//     scope 3 {\n-//       debug z => _8;\n-//     }\n-//   }\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   _2 = CheckedAdd(const 2i32, const 2i32);\n-//   assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n-// }\n-// bb1: {\n-//   _1 = move (_2.0: i32);\n-//   StorageLive(_3);\n-//   StorageLive(_4);\n-//   _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32];\n-//   StorageLive(_5);\n-//   _5 = const 3usize;\n-//   _6 = const 6usize;\n-//   _7 = Lt(_5, _6);\n-//   assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2;\n-// }\n-// bb2: {\n-//   _3 = _4[_5];\n-//   StorageDead(_5);\n-//   StorageDead(_4);\n-//   StorageLive(_8);\n-//   StorageLive(_9);\n-//   _9 = Point { x: const 12u32, y: const 42u32 };\n-//   _8 = (_9.1: u32);\n-//   StorageDead(_9);\n-//   _0 = ();\n-//   StorageDead(_8);\n-//   StorageDead(_3);\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-// let mut _0: ();\n-// let _1: i32;\n-// let mut _2: (i32, bool);\n-// let mut _4: [i32; 6];\n-// let _5: usize;\n-// let mut _6: usize;\n-// let mut _7: bool;\n-// let mut _9: Point;\n-// scope 1 {\n-//   debug x => _1;\n-//   let _3: i32;\n-//   scope 2 {\n-//     debug y => _3;\n-//     let _8: u32;\n-//     scope 3 {\n-//       debug z => _8;\n-//     }\n-//   }\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   _2 = (const 4i32, const false);\n-//   assert(!const false, \"attempt to add with overflow\") -> bb1;\n-// }\n-// bb1: {\n-//   _1 = const 4i32;\n-//   StorageLive(_3);\n-//   StorageLive(_4);\n-//   _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32];\n-//   StorageLive(_5);\n-//   _5 = const 3usize;\n-//   _6 = const 6usize;\n-//   _7 = const true;\n-//   assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2;\n-// }\n-// bb2: {\n-//   _3 = const 3i32;\n-//   StorageDead(_5);\n-//   StorageDead(_4);\n-//   StorageLive(_8);\n-//   StorageLive(_9);\n-//   _9 = Point { x: const 12u32, y: const 42u32 };\n-//   _8 = const 42u32;\n-//   StorageDead(_9);\n-//   _0 = ();\n-//   StorageDead(_8);\n-//   StorageDead(_3);\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// END rustc.main.ConstProp.after.mir\n-// START rustc.main.SimplifyLocals.after.mir\n-// let mut _0: ();\n-// let _1: i32;\n-// let mut _3: [i32; 6];\n-// scope 1 {\n-//   debug x => _1;\n-//   let _2: i32;\n-//   scope 2 {\n-//     debug y => _2;\n-//     let _4: u32;\n-//     scope 3 {\n-//       debug z => _4;\n-//     }\n-//   }\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   _1 = const 4i32;\n-//   StorageLive(_2);\n-//   StorageLive(_3);\n-//   _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32];\n-//   _2 = const 3i32;\n-//   StorageDead(_3);\n-//   StorageLive(_4);\n-//   _4 = const 42u32;\n-//   StorageDead(_4);\n-//   StorageDead(_2);\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// END rustc.main.SimplifyLocals.after.mir"}, {"sha": "5bce2ecee343176857a0b01ad25ab5246a0ad134", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/rustc.main.ConstProp.diff", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,181 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:10:11: 10:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:12:32: 12:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:36\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+          scope 2 {\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+              scope 3 {\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n+-         _2 = CheckedAdd(const 2i32, const 2i32); // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n++         _2 = (const 4i32, const false);  // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n+                                           // ty::Const\n+                                           // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000002))\n++                                          // + val: Value(Scalar(0x00000004))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:14\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n++                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000002))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/optimizes_into_variable.rs:11:17: 11:18\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+-         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_2.0: i32);           // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n++         _1 = const 4i32;                 // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000004))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+          StorageLive(_3);                 // bb1[1]: scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+          StorageLive(_4);                 // bb1[2]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb1[3]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:14: 12:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:20: 12:21\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:23: 12:24\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000004))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:26: 12:27\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000005))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:29: 12:30\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+          StorageLive(_5);                 // bb1[4]: scope 1 at $DIR/optimizes_into_variable.rs:12:32: 12:33\n+          _5 = const 3usize;               // bb1[5]: scope 1 at $DIR/optimizes_into_variable.rs:12:32: 12:33\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:32: 12:33\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n+          _6 = const 6usize;               // bb1[6]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000006))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000006)) }\n+-         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+-         assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n++         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb2: {\n+-         _3 = _4[_5];                     // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n++         _3 = const 3i32;                 // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+          StorageDead(_5);                 // bb2[1]: scope 1 at $DIR/optimizes_into_variable.rs:12:34: 12:35\n+          StorageDead(_4);                 // bb2[2]: scope 1 at $DIR/optimizes_into_variable.rs:12:34: 12:35\n+          StorageLive(_8);                 // bb2[3]: scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+          StorageLive(_9);                 // bb2[4]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:36\n+          _9 = Point { x: const 12u32, y: const 42u32 }; // bb2[5]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:36\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x0000000c))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:25: 13:27\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000000c)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:32: 13:34\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+-         _8 = (_9.1: u32);                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:38\n++         _8 = const 42u32;                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:38\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x0000002a))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:38\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+          StorageDead(_9);                 // bb2[7]: scope 2 at $DIR/optimizes_into_variable.rs:13:38: 13:39\n+          _0 = ();                         // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:10:11: 14:2\n+          StorageDead(_8);                 // bb2[9]: scope 2 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n+          StorageDead(_3);                 // bb2[10]: scope 1 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n+          StorageDead(_1);                 // bb2[11]: scope 0 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n+          return;                          // bb2[12]: scope 0 at $DIR/optimizes_into_variable.rs:14:2: 14:2\n+      }\n+  }\n+  "}, {"sha": "8cd40cd535cece290ee6e991ccd9275cef68eb18", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/rustc.main.SimplifyLocals.after.mir", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2Frustc.main.SimplifyLocals.after.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,88 @@\n+// MIR for `main` after SimplifyLocals\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:10:11: 10:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n+    let mut _3: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+            let _4: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+            scope 3 {\n+                debug z => _4;           // in scope 3 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n+        _1 = const 4i32;                 // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000004))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+        _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb0[4]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:14: 12:15\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:20: 12:21\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:23: 12:24\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000004))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:26: 12:27\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000005))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:29: 12:30\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+        _2 = const 3i32;                 // bb0[5]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        StorageDead(_3);                 // bb0[6]: scope 1 at $DIR/optimizes_into_variable.rs:12:34: 12:35\n+        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+        _4 = const 42u32;                // bb0[8]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:38\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:13: 13:38\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+        StorageDead(_4);                 // bb0[9]: scope 2 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n+        StorageDead(_2);                 // bb0[10]: scope 1 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n+        StorageDead(_1);                 // bb0[11]: scope 0 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n+        return;                          // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:14:2: 14:2\n+    }\n+}"}, {"sha": "9635f7050a687b89543bf4616d429d8a9521dc4f", "filename": "src/test/mir-opt/const_prop/read_immutable_static.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -2,30 +2,7 @@\n \n static FOO: u8 = 2;\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x = FOO + FOO;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _3 = const {alloc0+0: &u8};\n-//      _2 = (*_3);\n-//      ...\n-//      _5 = const {alloc0+0: &u8};\n-//      _4 = (*_5);\n-//      _1 = Add(move _2, move _4);\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _2 = const 2u8;\n-//      ...\n-//      _4 = const 2u8;\n-//      _1 = const 4u8;\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "6183b22a95fce49bf1d139470032f322c4e456e4", "filename": "src/test/mir-opt/const_prop/read_immutable_static/rustc.main.ConstProp.diff", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,72 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/read_immutable_static.rs:6:11: 6:11\n+      let _1: u8;                          // in scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n+      let mut _2: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+      let mut _3: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+      let mut _4: u8;                      // in scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+      let mut _5: &u8;                     // in scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/read_immutable_static.rs:7:9: 7:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          _3 = const {alloc0+0: &u8};      // bb0[3]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+                                           // ty::Const\n+                                           // + ty: &u8\n+                                           // + val: Value(Scalar(alloc0+0))\n+                                           // mir::Constant\n+                                           // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0)) }\n+-         _2 = (*_3);                      // bb0[4]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n++         _2 = const 2u8;                  // bb0[4]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n++                                          // ty::Const\n++                                          // + ty: u8\n++                                          // + val: Value(Scalar(0x02))\n++                                          // mir::Constant\n++                                          // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n+          StorageLive(_4);                 // bb0[5]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+          StorageLive(_5);                 // bb0[6]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+          _5 = const {alloc0+0: &u8};      // bb0[7]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+                                           // ty::Const\n+                                           // + ty: &u8\n+                                           // + val: Value(Scalar(alloc0+0))\n+                                           // mir::Constant\n+                                           // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0)) }\n+-         _4 = (*_5);                      // bb0[8]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+-         _1 = Add(move _2, move _4);      // bb0[9]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n++         _4 = const 2u8;                  // bb0[8]: scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n++                                          // ty::Const\n++                                          // + ty: u8\n++                                          // + val: Value(Scalar(0x02))\n++                                          // mir::Constant\n++                                          // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n++         _1 = const 4u8;                  // bb0[9]: scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n++                                          // ty::Const\n++                                          // + ty: u8\n++                                          // + val: Value(Scalar(0x04))\n++                                          // mir::Constant\n++                                          // + span: $DIR/read_immutable_static.rs:7:13: 7:22\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x04)) }\n+          StorageDead(_4);                 // bb0[10]: scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n+          StorageDead(_2);                 // bb0[11]: scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n+          StorageDead(_5);                 // bb0[12]: scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n+          StorageDead(_3);                 // bb0[13]: scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n+          _0 = ();                         // bb0[14]: scope 0 at $DIR/read_immutable_static.rs:6:11: 8:2\n+          StorageDead(_1);                 // bb0[15]: scope 0 at $DIR/read_immutable_static.rs:8:1: 8:2\n+          return;                          // bb0[16]: scope 0 at $DIR/read_immutable_static.rs:8:2: 8:2\n+      }\n+  }\n+  \n+  alloc0 (static: FOO, size: 1, align: 1) {\n+      02                                              \u2502 .\n+  }\n+  "}, {"sha": "fc33e0e1f3b1879c9382501047f45465c36554d0", "filename": "src/test/mir-opt/const_prop/ref_deref.rs", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,41 +1,6 @@\n+// EMIT_MIR rustc.main.PromoteTemps.diff\n+// EMIT_MIR rustc.main.ConstProp.diff\n+\n fn main() {\n     *(&4);\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.PromoteTemps.before.mir\n-// bb0: {\n-//     ...\n-//     _3 = const 4i32;\n-//     _2 = &_3;\n-//     _1 = (*_2);\n-//     ...\n-//}\n-// END rustc.main.PromoteTemps.before.mir\n-// START rustc.main.PromoteTemps.after.mir\n-// bb0: {\n-//     ...\n-//     _4 = const main::promoted[0];\n-//     _2 = &(*_4);\n-//     _1 = (*_2);\n-//     ...\n-//}\n-// END rustc.main.PromoteTemps.after.mir\n-// START rustc.main.ConstProp.before.mir\n-// bb0: {\n-//     ...\n-//     _4 = const main::promoted[0];\n-//     _2 = _4;\n-//     _1 = (*_2);\n-//     ...\n-//}\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-// bb0: {\n-//     ...\n-//     _4 = const main::promoted[0];\n-//     _2 = _4;\n-//     _1 = const 4i32;\n-//     ...\n-// }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "0f8563daba5d02704d272a653594c6e1fdc802fd", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.ConstProp.diff", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,36 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:4:11: 4:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n+      let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+          _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_deref.rs:5:6: 5:10\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0])) }\n+          _2 = _4;                         // bb0[3]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+-         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n++         _1 = const 4i32;                 // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000004))\n++                                          // mir::Constant\n++                                          // + span: $DIR/ref_deref.rs:5:5: 5:10\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+          StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+          StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+          _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n+          return;                          // bb0[8]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "ea1baa40f7ef8c14c9d0c2b641d19c3baad559a0", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.PromoteTemps.diff", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,42 @@\n+- // MIR for `main` before PromoteTemps\n++ // MIR for `main` after PromoteTemps\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:4:11: 4:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n++     let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+-         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n+-         _3 = const 4i32;                 // bb0[3]: scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n++         _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000004))\n++                                          // + ty: &i32\n++                                          // + val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/ref_deref.rs:5:8: 5:9\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+-         _2 = &_3;                        // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n+-         _1 = (*_2);                      // bb0[5]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+-         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+-         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+-         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n+-         _0 = ();                         // bb0[9]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n+-         return;                          // bb0[10]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n++                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0])) }\n++         _2 = &(*_4);                     // bb0[3]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n++         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n++         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n++         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n++         _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n++         return;                          // bb0[8]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "0322e3006431713d1c5145d98fdded2d1c62878e", "filename": "src/test/mir-opt/const_prop/ref_deref_project.rs", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,41 +1,6 @@\n+// EMIT_MIR rustc.main.PromoteTemps.diff\n+// EMIT_MIR rustc.main.ConstProp.diff\n+\n fn main() {\n     *(&(4, 5).1); // This does not currently propagate (#67862)\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.PromoteTemps.before.mir\n-// bb0: {\n-//     ...\n-//     _3 = (const 4i32, const 5i32);\n-//     _2 = &(_3.1: i32);\n-//     _1 = (*_2);\n-//     ...\n-//}\n-// END rustc.main.PromoteTemps.before.mir\n-// START rustc.main.PromoteTemps.after.mir\n-// bb0: {\n-//     ...\n-//     _4 = const main::promoted[0];\n-//     _2 = &((*_4).1: i32);\n-//     _1 = (*_2);\n-//     ...\n-//}\n-// END rustc.main.PromoteTemps.after.mir\n-// START rustc.main.ConstProp.before.mir\n-// bb0: {\n-//     ...\n-//     _4 = const main::promoted[0];\n-//     _2 = &((*_4).1: i32);\n-//     _1 = (*_2);\n-//     ...\n-//}\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-// bb0: {\n-//     ...\n-//     _4 = const main::promoted[0];\n-//     _2 = &((*_4).1: i32);\n-//     _1 = (*_2);\n-//     ...\n-// }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "c4b3d6b6c27ec88dd185da414862057f96868ce4", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.ConstProp.diff", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,29 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:4:11: 4:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n+      let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+                                           // ty::Const\n+                                           // + ty: &(i32, i32)\n+                                           // + val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n+          _2 = &((*_4).1: i32);            // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+          _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+          StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+          StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+          _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+          return;                          // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "852436e13b6183c2680ac61645e2af5786503ad9", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.PromoteTemps.diff", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,48 @@\n+- // MIR for `main` before PromoteTemps\n++ // MIR for `main` after PromoteTemps\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:4:11: 4:11\n+      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n++     let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+-         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n+-         _3 = (const 4i32, const 5i32);   // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n++         _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000004))\n++                                          // + ty: &(i32, i32)\n++                                          // + val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/ref_deref_project.rs:5:9: 5:10\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+-                                          // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000005))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/ref_deref_project.rs:5:12: 5:13\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+-         _2 = &(_3.1: i32);               // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n+-         _1 = (*_2);                      // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+-         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+-         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+-         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n+-         _0 = ();                         // bb0[9]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+-         return;                          // bb0[10]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n++                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n++         _2 = &((*_4).1: i32);            // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n++         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n++         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n++         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n++         _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n++         return;                          // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "834eb0cb1e943f713e1ef3b4191b69fc00ac23cd", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,25 +1,5 @@\n+// EMIT_MIR rustc.main.ConstProp.diff\n+\n fn main() {\n     let _ = main as usize as *const fn();\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _3 = const main as fn() (Pointer(ReifyFnPointer));\n-//      _2 = move _3 as usize (Misc);\n-//      ...\n-//      _1 = move _2 as *const fn() (Misc);\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _3 = const main as fn() (Pointer(ReifyFnPointer));\n-//      _2 = move _3 as usize (Misc);\n-//      ...\n-//      _1 = move _2 as *const fn() (Misc);\n-//      ...\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "7a41a8ad74ed4063a576fe84541c262ebf91d58f", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr/rustc.main.ConstProp.diff", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,32 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reify_fn_ptr.rs:3:11: 3:11\n+      let mut _1: *const fn();             // in scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n+      let mut _2: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n+      let mut _3: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n+          _3 = const main as fn() (Pointer(ReifyFnPointer)); // bb0[3]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n+                                           // ty::Const\n+                                           // + ty: fn() {main}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n+                                           // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n+          _2 = move _3 as usize (Misc);    // bb0[4]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n+          StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n+          _1 = move _2 as *const fn() (Misc); // bb0[6]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n+          StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41\n+          StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/reify_fn_ptr.rs:4:41: 4:42\n+          _0 = ();                         // bb0[9]: scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2\n+          return;                          // bb0[10]: scope 0 at $DIR/reify_fn_ptr.rs:5:2: 5:2\n+      }\n+  }\n+  "}, {"sha": "31d03fa326c316d66cda94bc49a606c216045706", "filename": "src/test/mir-opt/const_prop/repeat.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,37 +1,6 @@\n // compile-flags: -O\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x: u32 = [42; 8][2] + 0;\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _3 = [const 42u32; 8];\n-//      ...\n-//      _4 = const 2usize;\n-//      _5 = const 8usize;\n-//      _6 = Lt(_4, _5);\n-//      assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1;\n-//  }\n-//  bb1: {\n-//      _2 = _3[_4];\n-//      _1 = Add(move _2, const 0u32);\n-//      ...\n-//      return;\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _6 = const true;\n-//      assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1;\n-//  }\n-//  bb1: {\n-//      _2 = const 42u32;\n-//      _1 = const 42u32;\n-//      ...\n-//      return;\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "16eb2c807a7d64e010326b73c07ea5363e84c3cc", "filename": "src/test/mir-opt/const_prop/repeat/rustc.main.ConstProp.diff", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,88 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:4:11: 4:11\n+      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/repeat.rs:5:9: 5:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:5:18: 5:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:5:18: 5:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:5:26: 5:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:5:18: 5:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:5:18: 5:28\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:5:9: 5:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/repeat.rs:5:9: 5:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/repeat.rs:5:18: 5:25\n+          _3 = [const 42u32; 8];           // bb0[3]: scope 0 at $DIR/repeat.rs:5:18: 5:25\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/repeat.rs:5:19: 5:21\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+          StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/repeat.rs:5:26: 5:27\n+          _4 = const 2usize;               // bb0[5]: scope 0 at $DIR/repeat.rs:5:26: 5:27\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/repeat.rs:5:26: 5:27\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n+          _5 = const 8usize;               // bb0[6]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000008))\n+                                           // mir::Constant\n+                                           // + span: $DIR/repeat.rs:5:18: 5:28\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000008)) }\n+-         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n+-         assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n++         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:5:18: 5:28\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:5:18: 5:28\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb1: {\n+-         _2 = _3[_4];                     // bb1[0]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n+-         _1 = Add(move _2, const 0u32);   // bb1[1]: scope 0 at $DIR/repeat.rs:5:18: 5:32\n++         _2 = const 42u32;                // bb1[0]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n+                                           // ty::Const\n+                                           // + ty: u32\n+-                                          // + val: Value(Scalar(0x00000000))\n++                                          // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/repeat.rs:5:31: 5:32\n+-                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n++                                          // + span: $DIR/repeat.rs:5:18: 5:28\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n++         _1 = const 42u32;                // bb1[1]: scope 0 at $DIR/repeat.rs:5:18: 5:32\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x0000002a))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:5:18: 5:32\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/repeat.rs:5:31: 5:32\n+          StorageDead(_4);                 // bb1[3]: scope 0 at $DIR/repeat.rs:5:32: 5:33\n+          StorageDead(_3);                 // bb1[4]: scope 0 at $DIR/repeat.rs:5:32: 5:33\n+          _0 = ();                         // bb1[5]: scope 0 at $DIR/repeat.rs:4:11: 6:2\n+          StorageDead(_1);                 // bb1[6]: scope 0 at $DIR/repeat.rs:6:1: 6:2\n+          return;                          // bb1[7]: scope 0 at $DIR/repeat.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "8d5b63b9afd88beab61b1a334eec643b9d28b442", "filename": "src/test/mir-opt/const_prop/return_place.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,48 +1,11 @@\n // compile-flags: -C overflow-checks=on\n \n+// EMIT_MIR rustc.add.ConstProp.diff\n+// EMIT_MIR rustc.add.PreCodegen.before.mir\n fn add() -> u32 {\n     2 + 2\n }\n \n fn main() {\n     add();\n }\n-\n-// END RUST SOURCE\n-// START rustc.add.ConstProp.before.mir\n-// fn add() -> u32 {\n-//     let mut _0: u32;\n-//     let mut _1: (u32, bool);\n-//     bb0: {\n-//         _1 = CheckedAdd(const 2u32, const 2u32);\n-//         assert(!move (_1.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     }\n-//     bb1: {\n-//         _0 = move (_1.0: u32);\n-//         return;\n-//     }\n-// }\n-// END rustc.add.ConstProp.before.mir\n-// START rustc.add.ConstProp.after.mir\n-// fn add() -> u32 {\n-//     let mut _0: u32;\n-//     let mut _1: (u32, bool);\n-//     bb0: {\n-//         _1 = (const 4u32, const false);\n-//         assert(!const false, \"attempt to add with overflow\") -> bb1;\n-//     }\n-//     bb1: {\n-//         _0 = const 4u32;\n-//         return;\n-//     }\n-// }\n-// END rustc.add.ConstProp.after.mir\n-// START rustc.add.PreCodegen.before.mir\n-// fn add() -> u32 {\n-//     let mut _0: u32;\n-//     bb0: {\n-//         _0 = const 4u32;\n-//         return;\n-//     }\n-// }\n-// END rustc.add.PreCodegen.before.mir"}, {"sha": "3453c424a368bc2e8ba2e345d447e313816690cd", "filename": "src/test/mir-opt/const_prop/return_place/rustc.add.ConstProp.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `add` before ConstProp\n++ // MIR for `add` after ConstProp\n+  \n+  fn add() -> u32 {\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:5:13: 5:16\n+      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:6:5: 6:10\n+  \n+      bb0: {\n+-         _1 = CheckedAdd(const 2u32, const 2u32); // bb0[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         _1 = (const 4u32, const false);  // bb0[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n+                                           // ty::Const\n+                                           // + ty: u32\n+-                                          // + val: Value(Scalar(0x00000002))\n++                                          // + val: Value(Scalar(0x00000004))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/return_place.rs:6:5: 6:6\n+-                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n++                                          // + span: $DIR/return_place.rs:6:5: 6:10\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000004)) }\n+                                           // ty::Const\n+-                                          // + ty: u32\n+-                                          // + val: Value(Scalar(0x00000002))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/return_place.rs:6:9: 6:10\n+-                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+-         assert(!move (_1.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[1]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n++                                          // + span: $DIR/return_place.rs:6:5: 6:10\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[1]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/return_place.rs:6:5: 6:10\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb1: {\n+-         _0 = move (_1.0: u32);           // bb1[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         _0 = const 4u32;                 // bb1[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000004))\n++                                          // mir::Constant\n++                                          // + span: $DIR/return_place.rs:6:5: 6:10\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000004)) }\n+          return;                          // bb1[1]: scope 0 at $DIR/return_place.rs:7:2: 7:2\n+      }\n+  }\n+  "}, {"sha": "9af6be771ed2b4f143bea35e157a24e8e662966c", "filename": "src/test/mir-opt/const_prop/return_place/rustc.add.PreCodegen.before.mir", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place%2Frustc.add.PreCodegen.before.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,16 @@\n+// MIR for `add` before PreCodegen\n+\n+fn add() -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:5:13: 5:16\n+\n+    bb0: {\n+        _0 = const 4u32;                 // bb0[0]: scope 0 at $DIR/return_place.rs:6:5: 6:10\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x00000004))\n+                                         // mir::Constant\n+                                         // + span: $DIR/return_place.rs:6:5: 6:10\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000004)) }\n+        return;                          // bb0[1]: scope 0 at $DIR/return_place.rs:7:2: 7:2\n+    }\n+}"}, {"sha": "20c106add579fe3b5cb3d75e97010cb729525d8d", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,43 +1,5 @@\n+// EMIT_MIR rustc.main.ConstProp.diff\n+\n fn main() {\n     (&[1u32, 2, 3] as &[u32])[1];\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _9 = const main::promoted[0];\n-//      _4 = _9;\n-//      _3 = _4;\n-//      _2 = move _3 as &[u32] (Pointer(Unsize));\n-//      ...\n-//      _6 = const 1usize;\n-//      _7 = Len((*_2));\n-//      _8 = Lt(_6, _7);\n-//      assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n-//  }\n-//  bb1: {\n-//      _1 = (*_2)[_6];\n-//      ...\n-//      return;\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      _9 = const main::promoted[0];\n-//      _4 = _9;\n-//      _3 = _4;\n-//      _2 = move _3 as &[u32] (Pointer(Unsize));\n-//      ...\n-//      _6 = const 1usize;\n-//      _7 = const 3usize;\n-//      _8 = const true;\n-//      assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n-//  }\n-//  bb1: {\n-//      _1 = const 2u32;\n-//      ...\n-//      return;\n-//  }\n-// END rustc.main.ConstProp.after.mir"}, {"sha": "8946c271d6e2e557a3eac9a4876fe5ced7ba16bf", "filename": "src/test/mir-opt/const_prop/slice_len/rustc.main.ConstProp.diff", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,83 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:3:11: 3:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:4:5: 4:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:4:5: 4:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:4:7: 4:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:4:31: 4:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:4:5: 4:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:4:5: 4:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/slice_len.rs:4:5: 4:30\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+          StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+          _9 = const main::promoted[0];    // bb0[4]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+                                           // ty::Const\n+                                           // + ty: &[u32; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:4:6: 4:19\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0])) }\n+          _4 = _9;                         // bb0[5]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+          _3 = _4;                         // bb0[6]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // bb0[7]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+          StorageDead(_3);                 // bb0[8]: scope 0 at $DIR/slice_len.rs:4:18: 4:19\n+          StorageLive(_6);                 // bb0[9]: scope 0 at $DIR/slice_len.rs:4:31: 4:32\n+          _6 = const 1usize;               // bb0[10]: scope 0 at $DIR/slice_len.rs:4:31: 4:32\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x0000000000000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:4:31: 4:32\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+-         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n+-         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n+-         assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n++         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:4:5: 4:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n++         _8 = const true;                 // bb0[12]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:4:5: 4:33\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:4:5: 4:33\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb1: {\n+-         _1 = (*_2)[_6];                  // bb1[0]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n++         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:4:5: 4:33\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+          StorageDead(_6);                 // bb1[1]: scope 0 at $DIR/slice_len.rs:4:33: 4:34\n+          StorageDead(_4);                 // bb1[2]: scope 0 at $DIR/slice_len.rs:4:33: 4:34\n+          StorageDead(_2);                 // bb1[3]: scope 0 at $DIR/slice_len.rs:4:33: 4:34\n+          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/slice_len.rs:4:33: 4:34\n+          _0 = ();                         // bb1[5]: scope 0 at $DIR/slice_len.rs:3:11: 5:2\n+          return;                          // bb1[6]: scope 0 at $DIR/slice_len.rs:5:2: 5:2\n+      }\n+  }\n+  "}, {"sha": "46e6efb8180ebd16342875a37a96758cad31f3d3", "filename": "src/test/mir-opt/const_prop/switch_int.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,38 +1,11 @@\n #[inline(never)]\n fn foo(_: i32) { }\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n+// EMIT_MIR rustc.main.SimplifyBranches-after-const-prop.diff\n fn main() {\n     match 1 {\n         1 => foo(0),\n         _ => foo(-1),\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.ConstProp.before.mir\n-//  bb0: {\n-//      ...\n-//      _1 = const 1i32;\n-//      switchInt(_1) -> [1i32: bb2, otherwise: bb1];\n-//  }\n-// END rustc.main.ConstProp.before.mir\n-// START rustc.main.ConstProp.after.mir\n-//  bb0: {\n-//      ...\n-//      switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1];\n-//  }\n-// END rustc.main.ConstProp.after.mir\n-// START rustc.main.SimplifyBranches-after-const-prop.before.mir\n-//  bb0: {\n-//      ...\n-//      _1 = const 1i32;\n-//      switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1];\n-//  }\n-// END rustc.main.SimplifyBranches-after-const-prop.before.mir\n-// START rustc.main.SimplifyBranches-after-const-prop.after.mir\n-//  bb0: {\n-//      ...\n-//      _1 = const 1i32;\n-//      goto -> bb2;\n-//  }\n-// END rustc.main.SimplifyBranches-after-const-prop.after.mir"}, {"sha": "92b14309bf2b772e44e176276cd58c429cbbbc0e", "filename": "src/test/mir-opt/const_prop/switch_int/rustc.main.ConstProp.diff", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.ConstProp.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,64 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:6:11: 6:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+          _1 = const 1i32;                 // bb0[1]: scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:7:11: 7:12\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+-         switchInt(_1) -> [1i32: bb2, otherwise: bb1]; // bb0[2]: scope 0 at $DIR/switch_int.rs:8:9: 8:10\n++         switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1]; // bb0[2]: scope 0 at $DIR/switch_int.rs:8:9: 8:10\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/switch_int.rs:8:9: 8:10\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+      }\n+  \n+      bb1: {\n+          _0 = const foo(const -1i32) -> bb3; // bb1[0]: scope 0 at $DIR/switch_int.rs:9:14: 9:21\n+                                           // ty::Const\n+                                           // + ty: fn(i32) {foo}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0xffffffff))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:9:18: 9:20\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n+      }\n+  \n+      bb2: {\n+          _0 = const foo(const 0i32) -> bb3; // bb2[0]: scope 0 at $DIR/switch_int.rs:8:14: 8:20\n+                                           // ty::Const\n+                                           // + ty: fn(i32) {foo}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:8:18: 8:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/switch_int.rs:11:1: 11:2\n+          return;                          // bb3[1]: scope 0 at $DIR/switch_int.rs:11:2: 11:2\n+      }\n+  }\n+  "}, {"sha": "e1805cc57311db483724bb904f5a821adb041e8a", "filename": "src/test/mir-opt/const_prop/switch_int/rustc.main.SimplifyBranches-after-const-prop.diff", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int%2Frustc.main.SimplifyBranches-after-const-prop.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,64 @@\n+- // MIR for `main` before SimplifyBranches-after-const-prop\n++ // MIR for `main` after SimplifyBranches-after-const-prop\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:6:11: 6:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+          _1 = const 1i32;                 // bb0[1]: scope 0 at $DIR/switch_int.rs:7:11: 7:12\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:7:11: 7:12\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+-         switchInt(const 1i32) -> [1i32: bb2, otherwise: bb1]; // bb0[2]: scope 0 at $DIR/switch_int.rs:8:9: 8:10\n+-                                          // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000001))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/switch_int.rs:8:9: 8:10\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++         goto -> bb2;                     // bb0[2]: scope 0 at $DIR/switch_int.rs:8:9: 8:10\n+      }\n+  \n+      bb1: {\n+          _0 = const foo(const -1i32) -> bb3; // bb1[0]: scope 0 at $DIR/switch_int.rs:9:14: 9:21\n+                                           // ty::Const\n+                                           // + ty: fn(i32) {foo}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0xffffffff))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:9:18: 9:20\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n+      }\n+  \n+      bb2: {\n+          _0 = const foo(const 0i32) -> bb3; // bb2[0]: scope 0 at $DIR/switch_int.rs:8:14: 8:20\n+                                           // ty::Const\n+                                           // + ty: fn(i32) {foo}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:8:14: 8:17\n+                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/switch_int.rs:8:18: 8:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/switch_int.rs:11:1: 11:2\n+          return;                          // bb3[1]: scope 0 at $DIR/switch_int.rs:11:2: 11:2\n+      }\n+  }\n+  "}, {"sha": "2edde12d72e0bfdc8d68fb1d17fbda3b3303731f", "filename": "src/test/mir-opt/inline/inline-any-operand.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -6,6 +6,7 @@ fn main() {\n     println!(\"{}\", bar());\n }\n \n+// EMIT_MIR rustc.bar.Inline.after.mir\n fn bar() -> bool {\n     let f = foo;\n     f(1, -1)\n@@ -15,15 +16,3 @@ fn bar() -> bool {\n fn foo(x: i32, y: i32) -> bool {\n     x == y\n }\n-\n-// END RUST SOURCE\n-// START rustc.bar.Inline.after.mir\n-// ...\n-// bb0: {\n-//     ...\n-//     _0 = Eq(move _3, move _4);\n-//     ...\n-//     return;\n-// }\n-// ...\n-// END rustc.bar.Inline.after.mir"}, {"sha": "058d9e70d260601f08a3a363a2bbf7375ee7df28", "filename": "src/test/mir-opt/inline/inline-any-operand/rustc.bar.Inline.after.mir", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-any-operand%2Frustc.bar.Inline.after.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,47 @@\n+// MIR for `bar` after Inline\n+\n+fn bar() -> bool {\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/inline-any-operand.rs:10:13: 10:17\n+    let _1: fn(i32, i32) -> bool {foo};  // in scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n+    let mut _2: fn(i32, i32) -> bool {foo}; // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:6\n+    let mut _3: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n+    let mut _4: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n+    scope 1 {\n+        debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:11:9: 11:10\n+        scope 2 {\n+            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n+            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n+        _1 = const foo;                  // bb0[1]: scope 0 at $DIR/inline-any-operand.rs:11:13: 11:16\n+                                         // ty::Const\n+                                         // + ty: fn(i32, i32) -> bool {foo}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-any-operand.rs:11:13: 11:16\n+                                         // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n+        _2 = _1;                         // bb0[3]: scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n+        _3 = const 1i32;                 // bb0[4]: scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-any-operand.rs:12:7: 12:8\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+        _4 = const -1i32;                // bb0[5]: scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0xffffffff))\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-any-operand.rs:12:10: 12:12\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0xffffffff)) }\n+        _0 = Eq(move _3, move _4);       // bb0[6]: scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n+        StorageDead(_2);                 // bb0[7]: scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13\n+        StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/inline-any-operand.rs:13:1: 13:2\n+        return;                          // bb0[9]: scope 0 at $DIR/inline-any-operand.rs:13:2: 13:2\n+    }\n+}"}, {"sha": "a82a91945d862cd8da135b339691a55c2724be00", "filename": "src/test/mir-opt/inline/inline-closure-borrows-arg.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -7,53 +7,11 @@ fn main() {\n     println!(\"{}\", foo(0, &14));\n }\n \n+// EMIT_MIR rustc.foo.Inline.after.mir\n fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n     let x = |r: &i32, _s: &i32| {\n         let variable = &*r;\n         *variable\n     };\n     x(q, q)\n }\n-\n-// END RUST SOURCE\n-// START rustc.foo.Inline.after.mir\n-// fn foo(_1: T, _2: &i32) -> i32{\n-//     debug _t => _1;\n-//     debug q => _2;\n-//     let mut _0: i32;\n-//     let _3: [closure@foo<T>::{{closure}}#0];\n-//     let mut _4: &[closure@foo<T>::{{closure}}#0];\n-//     let mut _5: (&i32, &i32);\n-//     let mut _6: &i32;\n-//     let mut _7: &i32;\n-//     let mut _8: &i32;\n-//     let mut _9: &i32;\n-//     scope 1 {\n-//         debug x => _3;\n-//         scope 2 {\n-//             debug r => _8;\n-//             debug _s => _9;\n-//         }\n-//     }\n-//     scope 3 {\n-//         debug variable => _8;\n-//     }\n-//     bb0: {\n-//         ...\n-//         _3 = [closure@foo::<T>::{{closure}}#0];\n-//         ...\n-//         _4 = &_3;\n-//         ...\n-//         _6 = &(*_2);\n-//         ...\n-//         _7 = &(*_2);\n-//         _5 = (move _6, move _7);\n-//         _8 = move (_5.0: &i32);\n-//         _9 = move (_5.1: &i32);\n-//         ...\n-//         _0 = (*_8);\n-//         ...\n-//         return;\n-//     }\n-// }\n-// END rustc.foo.Inline.after.mir"}, {"sha": "a8e846d11817e9f54c342e656de93080874da113", "filename": "src/test/mir-opt/inline/inline-closure-borrows-arg/rustc.foo.Inline.after.mir", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg%2Frustc.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg%2Frustc.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-borrows-arg%2Frustc.foo.Inline.after.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,54 @@\n+// MIR for `foo` after Inline\n+\n+fn foo(_1: T, _2: &i32) -> i32 {\n+    debug _t => _1;                      // in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:17: 11:19\n+    debug q => _2;                       // in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:24: 11:25\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:36: 11:39\n+    let _3: [closure@foo<T>::{{closure}}#0]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n+    let mut _4: &[closure@foo<T>::{{closure}}#0]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n+    let mut _5: (&i32, &i32);            // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+    let mut _6: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n+    let mut _7: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n+    let mut _8: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+    let mut _9: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+    scope 1 {\n+        debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n+        scope 2 {\n+            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n+            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n+        }\n+    }\n+    scope 3 {\n+        debug variable => _8;            // in scope 3 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n+        _3 = [closure@foo::<T>::{{closure}}#0]; // bb0[1]: scope 0 at $DIR/inline-closure-borrows-arg.rs:12:13: 15:6\n+                                         // closure\n+                                         // + def_id: DefId(0:6 ~ inline_closure_borrows_arg[317d]::foo[0]::{{closure}}[0])\n+                                         // + substs: [\n+                                         //     T,\n+                                         //     i8,\n+                                         //     for<'r, 's> extern \"rust-call\" fn((&'r i32, &'s i32)) -> i32,\n+                                         //     (),\n+                                         // ]\n+        StorageLive(_4);                 // bb0[2]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n+        _4 = &_3;                        // bb0[3]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n+        StorageLive(_5);                 // bb0[4]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_6);                 // bb0[5]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n+        _6 = &(*_2);                     // bb0[6]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n+        StorageLive(_7);                 // bb0[7]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n+        _7 = &(*_2);                     // bb0[8]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n+        _5 = (move _6, move _7);         // bb0[9]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _8 = move (_5.0: &i32);          // bb0[10]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _9 = move (_5.1: &i32);          // bb0[11]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _0 = (*_8);                      // bb0[12]: scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n+        StorageDead(_7);                 // bb0[13]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n+        StorageDead(_6);                 // bb0[14]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n+        StorageDead(_5);                 // bb0[15]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n+        StorageDead(_4);                 // bb0[16]: scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n+        StorageDead(_3);                 // bb0[17]: scope 0 at $DIR/inline-closure-borrows-arg.rs:17:1: 17:2\n+        return;                          // bb0[18]: scope 0 at $DIR/inline-closure-borrows-arg.rs:17:2: 17:2\n+    }\n+}"}, {"sha": "4a0aad9b0e699c937394fea0fc38c4f1ff08135c", "filename": "src/test/mir-opt/inline/inline-closure-captures.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -6,55 +6,8 @@ fn main() {\n     println!(\"{:?}\", foo(0, 14));\n }\n \n+// EMIT_MIR rustc.foo.Inline.after.mir\n fn foo<T: Copy>(t: T, q: i32) -> (i32, T) {\n     let x = |_q| (q, t);\n     x(q)\n }\n-\n-// END RUST SOURCE\n-// START rustc.foo.Inline.after.mir\n-// fn foo(_1: T, _2: i32) -> (i32, T){\n-//     debug t => _1;\n-//     debug q => _2;\n-//     let mut _0: (i32, T);\n-//     let _3: [closure@foo<T>::{{closure}}#0 q:&i32, t:&T];\n-//     let mut _4: &i32;\n-//     let mut _5: &T;\n-//     let mut _6: &[closure@foo<T>::{{closure}}#0 q:&i32, t:&T];\n-//     let mut _7: (i32,);\n-//     let mut _8: i32;\n-//     let mut _11: i32;\n-//     scope 1 {\n-//         debug x => _3;\n-//         scope 2 {\n-//             debug _q => _11;\n-//             debug q => (*((*_6).0: &i32));\n-//             debug t => (*((*_6).1: &T));\n-//             let mut _9: i32;\n-//             let mut _10: T;\n-//         }\n-//     }\n-//     bb0: {\n-//         ...\n-//         _4 = &_2;\n-//         ...\n-//         _5 = &_1;\n-//         _3 = [closure@foo::<T>::{{closure}}#0] { q: move _4, t: move _5 };\n-//         ...\n-//         _6 = &_3;\n-//         ...\n-//         ...\n-//         _8 = _2;\n-//         _7 = (move _8,);\n-//         _11 = move (_7.0: i32);\n-//         ...\n-//         _9 = (*((*_6).0: &i32));\n-//         ...\n-//         _10 = (*((*_6).1: &T));\n-//         (_0.0: i32) = move _9;\n-//         (_0.1: T) = move _10;\n-//         ...\n-//         return;\n-//     }\n-// }\n-// END rustc.foo.Inline.after.mir"}, {"sha": "8f7c5615662b301a9685ce2d421a73a9ef3c41a4", "filename": "src/test/mir-opt/inline/inline-closure-captures/rustc.foo.Inline.after.mir", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures%2Frustc.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures%2Frustc.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure-captures%2Frustc.foo.Inline.after.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,63 @@\n+// MIR for `foo` after Inline\n+\n+fn foo(_1: T, _2: i32) -> (i32, T) {\n+    debug t => _1;                       // in scope 0 at $DIR/inline-closure-captures.rs:10:17: 10:18\n+    debug q => _2;                       // in scope 0 at $DIR/inline-closure-captures.rs:10:23: 10:24\n+    let mut _0: (i32, T);                // return place in scope 0 at $DIR/inline-closure-captures.rs:10:34: 10:42\n+    let _3: [closure@foo<T>::{{closure}}#0 q:&i32, t:&T]; // in scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n+    let mut _4: &i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+    let mut _5: &T;                      // in scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+    let mut _6: &[closure@foo<T>::{{closure}}#0 q:&i32, t:&T]; // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:6\n+    let mut _7: (i32,);                  // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+    let mut _8: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:12:7: 12:8\n+    let mut _11: i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+    scope 1 {\n+        debug x => _3;                   // in scope 1 at $DIR/inline-closure-captures.rs:11:9: 11:10\n+        scope 2 {\n+            debug _q => _11;             // in scope 2 at $DIR/inline-closure-captures.rs:11:14: 11:16\n+            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:10:23: 10:24\n+            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:10:17: 10:18\n+            let mut _9: i32;             // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+            let mut _10: T;              // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n+        StorageLive(_4);                 // bb0[1]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        _4 = &_2;                        // bb0[2]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        StorageLive(_5);                 // bb0[3]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        _5 = &_1;                        // bb0[4]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        _3 = [closure@foo::<T>::{{closure}}#0] { q: move _4, t: move _5 }; // bb0[5]: scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+                                         // closure\n+                                         // + def_id: DefId(0:6 ~ inline_closure_captures[317d]::foo[0]::{{closure}}[0])\n+                                         // + substs: [\n+                                         //     T,\n+                                         //     i8,\n+                                         //     extern \"rust-call\" fn((i32,)) -> (i32, T),\n+                                         //     (&i32, &T),\n+                                         // ]\n+        StorageDead(_5);                 // bb0[6]: scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_4);                 // bb0[7]: scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageLive(_6);                 // bb0[8]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n+        _6 = &_3;                        // bb0[9]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n+        StorageLive(_7);                 // bb0[10]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_8);                 // bb0[11]: scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n+        _8 = _2;                         // bb0[12]: scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n+        _7 = (move _8,);                 // bb0[13]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        _11 = move (_7.0: i32);          // bb0[14]: scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_9);                 // bb0[15]: scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n+        _9 = (*((*_6).0: &i32));         // bb0[16]: scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n+        StorageLive(_10);                // bb0[17]: scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        _10 = (*((*_6).1: &T));          // bb0[18]: scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        (_0.0: i32) = move _9;           // bb0[19]: scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n+        (_0.1: T) = move _10;            // bb0[20]: scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n+        StorageDead(_10);                // bb0[21]: scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_9);                 // bb0[22]: scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_8);                 // bb0[23]: scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n+        StorageDead(_7);                 // bb0[24]: scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n+        StorageDead(_6);                 // bb0[25]: scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n+        StorageDead(_3);                 // bb0[26]: scope 0 at $DIR/inline-closure-captures.rs:13:1: 13:2\n+        return;                          // bb0[27]: scope 0 at $DIR/inline-closure-captures.rs:13:2: 13:2\n+    }\n+}"}, {"sha": "77e424a2bb3f7cfe9a8249e291e5a7a853318783", "filename": "src/test/mir-opt/inline/inline-closure.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -6,45 +6,8 @@ fn main() {\n     println!(\"{}\", foo(0, 14));\n }\n \n+// EMIT_MIR rustc.foo.Inline.after.mir\n fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n     let x = |_t, _q| _t;\n     x(q, q)\n }\n-\n-// END RUST SOURCE\n-// START rustc.foo.Inline.after.mir\n-// fn foo(_1: T, _2: i32) -> i32{\n-//     debug _t => _1;\n-//     debug q => _2;\n-//     let mut _0: i32;\n-//     let _3: [closure@foo<T>::{{closure}}#0];\n-//     let mut _4: &[closure@foo<T>::{{closure}}#0];\n-//     let mut _5: (i32, i32);\n-//     let mut _6: i32;\n-//     let mut _7: i32;\n-//     let mut _8: i32;\n-//     let mut _9: i32;\n-//     scope 1 {\n-//         debug x => _3;\n-//         scope 2 {\n-//             debug _t => _8;\n-//             debug _q => _9;\n-//         }\n-//     }\n-//     bb0: {\n-//         ...\n-//         _3 = [closure@foo::<T>::{{closure}}#0];\n-//         ...\n-//         _4 = &_3;\n-//         ...\n-//         _6 = _2;\n-//         ...\n-//         _7 = _2;\n-//         _5 = (move _6, move _7);\n-//         _8 = move (_5.0: i32);\n-//         _9 = move (_5.1: i32);\n-//         _0 = _8;\n-//         ...\n-//         return;\n-//     }\n-// END rustc.foo.Inline.after.mir"}, {"sha": "e31032e8c6999c478babbba81d52e5d117ecbe61", "filename": "src/test/mir-opt/inline/inline-closure/rustc.foo.Inline.after.mir", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure%2Frustc.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure%2Frustc.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-closure%2Frustc.foo.Inline.after.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,51 @@\n+// MIR for `foo` after Inline\n+\n+fn foo(_1: T, _2: i32) -> i32 {\n+    debug _t => _1;                      // in scope 0 at $DIR/inline-closure.rs:10:17: 10:19\n+    debug q => _2;                       // in scope 0 at $DIR/inline-closure.rs:10:24: 10:25\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure.rs:10:35: 10:38\n+    let _3: [closure@foo<T>::{{closure}}#0]; // in scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n+    let mut _4: &[closure@foo<T>::{{closure}}#0]; // in scope 0 at $DIR/inline-closure.rs:12:5: 12:6\n+    let mut _5: (i32, i32);              // in scope 0 at $DIR/inline-closure.rs:12:5: 12:12\n+    let mut _6: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:7: 12:8\n+    let mut _7: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:10: 12:11\n+    let mut _8: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:5: 12:12\n+    let mut _9: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:5: 12:12\n+    scope 1 {\n+        debug x => _3;                   // in scope 1 at $DIR/inline-closure.rs:11:9: 11:10\n+        scope 2 {\n+            debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:11:14: 11:16\n+            debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:11:18: 11:20\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // bb0[0]: scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n+        _3 = [closure@foo::<T>::{{closure}}#0]; // bb0[1]: scope 0 at $DIR/inline-closure.rs:11:13: 11:24\n+                                         // closure\n+                                         // + def_id: DefId(0:6 ~ inline_closure[317d]::foo[0]::{{closure}}[0])\n+                                         // + substs: [\n+                                         //     T,\n+                                         //     i8,\n+                                         //     extern \"rust-call\" fn((i32, i32)) -> i32,\n+                                         //     (),\n+                                         // ]\n+        StorageLive(_4);                 // bb0[2]: scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n+        _4 = &_3;                        // bb0[3]: scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n+        StorageLive(_5);                 // bb0[4]: scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        StorageLive(_6);                 // bb0[5]: scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n+        _6 = _2;                         // bb0[6]: scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n+        StorageLive(_7);                 // bb0[7]: scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n+        _7 = _2;                         // bb0[8]: scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n+        _5 = (move _6, move _7);         // bb0[9]: scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        _8 = move (_5.0: i32);           // bb0[10]: scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        _9 = move (_5.1: i32);           // bb0[11]: scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        _0 = _8;                         // bb0[12]: scope 2 at $DIR/inline-closure.rs:11:22: 11:24\n+        StorageDead(_7);                 // bb0[13]: scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n+        StorageDead(_6);                 // bb0[14]: scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n+        StorageDead(_5);                 // bb0[15]: scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n+        StorageDead(_4);                 // bb0[16]: scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n+        StorageDead(_3);                 // bb0[17]: scope 0 at $DIR/inline-closure.rs:13:1: 13:2\n+        return;                          // bb0[18]: scope 0 at $DIR/inline-closure.rs:13:2: 13:2\n+    }\n+}"}, {"sha": "d36d93cd01c126c450c04b1ff6c767ecea30fcc3", "filename": "src/test/mir-opt/inline/inline-into-box-place.rs", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,73 +1,9 @@\n-// ignore-tidy-linelength\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=3\n // only-64bit FIXME: the mir representation of RawVec depends on ptr size\n #![feature(box_syntax)]\n \n+// EMIT_MIR rustc.main.Inline.diff\n fn main() {\n     let _x: Box<Vec<u32>> = box Vec::new();\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.Inline.before.mir\n-// let mut _0: ();\n-// let _1: std::boxed::Box<std::vec::Vec<u32>> as UserTypeProjection { base: UserType(0), projs: [] };\n-// let mut _2: std::boxed::Box<std::vec::Vec<u32>>;\n-// let mut _3: ();\n-// scope 1 {\n-//   debug _x => _1;\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   StorageLive(_2);\n-//   _2 = Box(std::vec::Vec<u32>);\n-//   (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4];\n-// }\n-// bb1 (cleanup): {\n-//   resume;\n-// }\n-// bb2: {\n-//   _1 = move _2;\n-//   StorageDead(_2);\n-//   _0 = ();\n-//   drop(_1) -> [return: bb3, unwind: bb1];\n-// }\n-// bb3: {\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// bb4 (cleanup): {\n-//   _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1;\n-// }\n-// END rustc.main.Inline.before.mir\n-// START rustc.main.Inline.after.mir\n-// let mut _0: ();\n-// let _1: std::boxed::Box<std::vec::Vec<u32>> as UserTypeProjection { base: UserType(0), projs: [] };\n-// let mut _2: std::boxed::Box<std::vec::Vec<u32>>;\n-// let mut _3: ();\n-// let mut _4: &mut std::vec::Vec<u32>;\n-// scope 1 {\n-//   debug _x => _1;\n-// }\n-// scope 2 {\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   StorageLive(_2);\n-//   _2 = Box(std::vec::Vec<u32>);\n-//   _4 = &mut (*_2);\n-//   ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>;\n-//   ((*_4).1: usize) = const 0usize;\n-//   _1 = move _2;\n-//   StorageDead(_2);\n-//   _0 = ();\n-//   drop(_1) -> [return: bb2, unwind: bb1];\n-// }\n-// bb1 (cleanup): {\n-//   resume;\n-// }\n-// bb2: {\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// END rustc.main.Inline.after.mir"}, {"sha": "a0db20cbb743bd3438e1eab73e0b14e44b2797a5", "filename": "src/test/mir-opt/inline/inline-into-box-place/rustc.main.Inline.diff", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2Frustc.main.Inline.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,76 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n+      let _1: std::boxed::Box<std::vec::Vec<u32>> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+      let mut _2: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _3: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++     let mut _4: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      scope 1 {\n+          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+      }\n++     scope 2 {\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n+                                           // ty::Const\n+-                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n+-                                          // + val: Value(Scalar(<ZST>))\n++                                          // + ty: alloc::raw_vec::RawVec<u32>\n++                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n+-                                          // + user_ty: UserType(1)\n+-                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // + user_ty: UserType(0)\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++         ((*_4).1: usize) = const 0usize; // bb0[5]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000000))\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n++         _1 = move _2;                    // bb0[6]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n++         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         _0 = ();                         // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // bb0[9]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+      }\n+  \n+      bb1 (cleanup): {\n+          resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+      }\n+  \n+      bb2: {\n+-         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _0 = ();                         // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-     }\n+- \n+-     bb3: {\n+-         StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // bb3[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     }\n+- \n+-     bb4 (cleanup): {\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // bb4[0]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // ty::Const\n+-                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++         StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "d7e425ec6586fe0cda38fb2d108985189764fa25", "filename": "src/test/mir-opt/inline/inline-retag.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -6,6 +6,7 @@ fn main() {\n     println!(\"{}\", bar());\n }\n \n+// EMIT_MIR rustc.bar.Inline.after.mir\n fn bar() -> bool {\n     let f = foo;\n     f(&1, &-1)\n@@ -15,23 +16,3 @@ fn bar() -> bool {\n fn foo(x: &i32, y: &i32) -> bool {\n     *x == *y\n }\n-\n-// END RUST SOURCE\n-// START rustc.bar.Inline.after.mir\n-// ...\n-//     bb0: {\n-//         ...\n-//         Retag(_3);\n-//         ...\n-//         Retag(_3);\n-//         Retag(_6);\n-//         StorageLive(_11);\n-//         _11 = (*_3);\n-//         StorageLive(_12);\n-//         _12 = (*_6);\n-//         _0 = Eq(move _11, move _12);\n-//         ...\n-//         return;\n-//     }\n-// ...\n-// END rustc.bar.Inline.after.mir"}, {"sha": "ae2226bd183d0fa1247334696b32316d35fc373b", "filename": "src/test/mir-opt/inline/inline-retag/rustc.bar.Inline.after.mir", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,81 @@\n+// MIR for `bar` after Inline\n+\n+fn bar() -> bool {\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/inline-retag.rs:10:13: 10:17\n+    let _1: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}; // in scope 0 at $DIR/inline-retag.rs:11:9: 11:10\n+    let mut _2: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}; // in scope 0 at $DIR/inline-retag.rs:12:5: 12:6\n+    let mut _3: &i32;                    // in scope 0 at $DIR/inline-retag.rs:12:7: 12:9\n+    let _4: &i32;                        // in scope 0 at $DIR/inline-retag.rs:12:7: 12:9\n+    let _5: i32;                         // in scope 0 at $DIR/inline-retag.rs:12:8: 12:9\n+    let mut _6: &i32;                    // in scope 0 at $DIR/inline-retag.rs:12:11: 12:14\n+    let _7: &i32;                        // in scope 0 at $DIR/inline-retag.rs:12:11: 12:14\n+    let _8: i32;                         // in scope 0 at $DIR/inline-retag.rs:12:12: 12:14\n+    scope 1 {\n+        debug f => _1;                   // in scope 1 at $DIR/inline-retag.rs:11:9: 11:10\n+        let mut _9: &i32;                // in scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        let mut _10: &i32;               // in scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        scope 2 {\n+            debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:16:8: 16:9\n+            debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:16:17: 16:18\n+            let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+            let mut _12: i32;            // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-retag.rs:11:9: 11:10\n+        _1 = const foo;                  // bb0[1]: scope 0 at $DIR/inline-retag.rs:11:13: 11:16\n+                                         // ty::Const\n+                                         // + ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-retag.rs:11:13: 11:16\n+                                         // + literal: Const { ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/inline-retag.rs:12:5: 12:6\n+        _2 = _1;                         // bb0[3]: scope 1 at $DIR/inline-retag.rs:12:5: 12:6\n+        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        StorageLive(_4);                 // bb0[5]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        _10 = const bar::promoted[1];    // bb0[6]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+                                         // ty::Const\n+                                         // + ty: &i32\n+                                         // + val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[1]))\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-retag.rs:12:7: 12:9\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[1])) }\n+        Retag(_10);                      // bb0[7]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        _4 = &(*_10);                    // bb0[8]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        Retag(_4);                       // bb0[9]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        _3 = &(*_4);                     // bb0[10]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        Retag(_3);                       // bb0[11]: scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n+        StorageLive(_6);                 // bb0[12]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        StorageLive(_7);                 // bb0[13]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        _9 = const bar::promoted[0];     // bb0[14]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+                                         // ty::Const\n+                                         // + ty: &i32\n+                                         // + val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[0]))\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-retag.rs:12:11: 12:14\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[0])) }\n+        Retag(_9);                       // bb0[15]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        _7 = &(*_9);                     // bb0[16]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        Retag(_7);                       // bb0[17]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        _6 = &(*_7);                     // bb0[18]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        Retag(_6);                       // bb0[19]: scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n+        Retag(_3);                       // bb0[20]: scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n+        Retag(_6);                       // bb0[21]: scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n+        StorageLive(_11);                // bb0[22]: scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+        _11 = (*_3);                     // bb0[23]: scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+        StorageLive(_12);                // bb0[24]: scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        _12 = (*_6);                     // bb0[25]: scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        _0 = Eq(move _11, move _12);     // bb0[26]: scope 2 at $DIR/inline-retag.rs:17:5: 17:13\n+        StorageDead(_12);                // bb0[27]: scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n+        StorageDead(_11);                // bb0[28]: scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n+        StorageDead(_6);                 // bb0[29]: scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n+        StorageDead(_3);                 // bb0[30]: scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n+        StorageDead(_2);                 // bb0[31]: scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n+        StorageDead(_1);                 // bb0[32]: scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n+        StorageDead(_7);                 // bb0[33]: scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n+        StorageDead(_4);                 // bb0[34]: scope 0 at $DIR/inline-retag.rs:13:1: 13:2\n+        return;                          // bb0[35]: scope 0 at $DIR/inline-retag.rs:13:2: 13:2\n+    }\n+}"}, {"sha": "fcdaca460a9dead810898b7222a9651ccdda223f", "filename": "src/test/mir-opt/inline/inline-specialization.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,5 +1,6 @@\n #![feature(specialization)]\n \n+// EMIT_MIR rustc.main.Inline.diff\n fn main() {\n     let x = <Vec::<()> as Foo>::bar();\n }\n@@ -12,37 +13,3 @@ impl<T> Foo for Vec<T> {\n     #[inline(always)]\n     default fn bar() -> u32 { 123 }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.Inline.before.mir\n-// let mut _0: ();\n-// let _1: u32;\n-// scope 1 {\n-//   debug x => _1;\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   _1 = const <std::vec::Vec<()> as Foo>::bar() -> bb1;\n-// }\n-// bb1: {\n-//   _0 = ();\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// END rustc.main.Inline.before.mir\n-// START rustc.main.Inline.after.mir\n-// let mut _0: ();\n-// let _1: u32;\n-// scope 1 {\n-//   debug x => _1;\n-// }\n-// scope 2 {\n-// }\n-// bb0: {\n-//   StorageLive(_1);\n-//   _1 = const 123u32;\n-//   _0 = ();\n-//   StorageDead(_1);\n-//   return;\n-// }\n-// END rustc.main.Inline.after.mir"}, {"sha": "98d03b19977bbb44e093c2b4d89e2c8fa60e094f", "filename": "src/test/mir-opt/inline/inline-specialization/rustc.main.Inline.diff", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,38 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-specialization.rs:4:11: 4:11\n+      let _1: u32;                         // in scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/inline-specialization.rs:5:9: 5:10\n+      }\n++     scope 2 {\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n+-         _1 = const <std::vec::Vec<()> as Foo>::bar() -> bb1; // bb0[1]: scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n++         _1 = const 123u32;               // bb0[1]: scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n+                                           // ty::Const\n+-                                          // + ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}\n+-                                          // + val: Value(Scalar(<ZST>))\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x0000007b))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36\n+-                                          // + literal: Const { ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n+-         _0 = ();                         // bb1[0]: scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n+-         StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n+-         return;                          // bb1[2]: scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n++                                          // + span: $DIR/inline-specialization.rs:14:31: 14:34\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000007b)) }\n++         _0 = ();                         // bb0[2]: scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n++         StorageDead(_1);                 // bb0[3]: scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n++         return;                          // bb0[4]: scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "cb3db9b55924607b21a86ac6587b780873414f7f", "filename": "src/test/mir-opt/inline/inline-trait-method.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -4,6 +4,7 @@ fn main() {\n     println!(\"{}\", test(&()));\n }\n \n+// EMIT_MIR rustc.test.Inline.after.mir\n fn test(x: &dyn X) -> u32 {\n     x.y()\n }\n@@ -19,13 +20,3 @@ impl X for () {\n         2\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.test.Inline.after.mir\n-// ...\n-// bb0: {\n-// ...\n-//     _0 = const <dyn X as X>::y(move _2) -> bb1;\n-// }\n-// ...\n-// END rustc.test.Inline.after.mir"}, {"sha": "488303e09ef64627299690f446e71b74eaf74eee", "filename": "src/test/mir-opt/inline/inline-trait-method/rustc.test.Inline.after.mir", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method%2Frustc.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method%2Frustc.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method%2Frustc.test.Inline.after.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,24 @@\n+// MIR for `test` after Inline\n+\n+fn test(_1: &dyn X) -> u32 {\n+    debug x => _1;                       // in scope 0 at $DIR/inline-trait-method.rs:8:9: 8:10\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/inline-trait-method.rs:8:23: 8:26\n+    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n+\n+    bb0: {\n+        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n+        _2 = &(*_1);                     // bb0[1]: scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n+        _0 = const <dyn X as X>::y(move _2) -> bb1; // bb0[2]: scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n+                                         // ty::Const\n+                                         // + ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-trait-method.rs:9:7: 9:8\n+                                         // + literal: Const { ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/inline-trait-method.rs:9:9: 9:10\n+        return;                          // bb1[1]: scope 0 at $DIR/inline-trait-method.rs:10:2: 10:2\n+    }\n+}"}, {"sha": "e37f091c5cd2b115eec6b30fbf77b6130b133bf0", "filename": "src/test/mir-opt/inline/inline-trait-method_2.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -Z span_free_formats -Z mir-opt-level=3\n \n+// EMIT_MIR rustc.test2.Inline.after.mir\n fn test2(x: &dyn X) -> bool {\n     test(x)\n }\n@@ -24,13 +25,3 @@ impl X for () {\n fn main() {\n     println!(\"Should be true: {}\", test2(&()));\n }\n-\n-// END RUST SOURCE\n-// START rustc.test2.Inline.after.mir\n-// ...\n-// bb0: {\n-// ...\n-//     _0 = const <dyn X as X>::y(move _2) -> bb1;\n-// }\n-// ...\n-// END rustc.test2.Inline.after.mir"}, {"sha": "aca47198aa95384fa03beaaa379dd58720d5bdab", "filename": "src/test/mir-opt/inline/inline-trait-method_2/rustc.test2.Inline.after.mir", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2%2Frustc.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2%2Frustc.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-trait-method_2%2Frustc.test2.Inline.after.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,31 @@\n+// MIR for `test2` after Inline\n+\n+fn test2(_1: &dyn X) -> bool {\n+    debug x => _1;                       // in scope 0 at $DIR/inline-trait-method_2.rs:4:10: 4:11\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/inline-trait-method_2.rs:4:24: 4:28\n+    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+    let mut _3: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+    scope 1 {\n+        debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:9:9: 9:10\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        _3 = &(*_1);                     // bb0[2]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        _2 = move _3 as &dyn X (Pointer(Unsize)); // bb0[3]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        StorageDead(_3);                 // bb0[4]: scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n+        _0 = const <dyn X as X>::y(move _2) -> bb1; // bb0[5]: scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+                                         // ty::Const\n+                                         // + ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n+                                         // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/inline-trait-method_2.rs:5:11: 5:12\n+        return;                          // bb1[1]: scope 0 at $DIR/inline-trait-method_2.rs:6:2: 6:2\n+    }\n+}"}, {"sha": "073ccf7e6c643e723405108c39c12e54036dfee6", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -8,31 +8,8 @@\n \n #![allow(warnings)]\n \n+// EMIT_MIR rustc.use_x.nll.0.mir\n fn use_x<'a, 'b: 'a, 'c>(w: &'a mut i32, x: &'b u32, y: &'a u32, z: &'c u32) -> bool { true }\n \n fn main() {\n }\n-\n-// END RUST SOURCE\n-// START rustc.use_x.nll.0.mir\n-// | Free Region Mapping\n-// | '_#0r    | Global   | ['_#2r, '_#1r, '_#0r, '_#4r, '_#3r]\n-// | '_#1r    | External | ['_#1r, '_#4r]\n-// | '_#2r    | External | ['_#2r, '_#1r, '_#4r]\n-// | '_#3r    | Local    | ['_#4r, '_#3r]\n-// | '_#4r    | Local    | ['_#4r]\n-// |\n-// | Inferred Region Values\n-// | '_#0r    | U0 | {bb0[0..=1], '_#0r, '_#1r, '_#2r, '_#3r, '_#4r}\n-// | '_#1r    | U0 | {bb0[0..=1], '_#1r}\n-// | '_#2r    | U0 | {bb0[0..=1], '_#2r}\n-// | '_#3r    | U0 | {bb0[0..=1], '_#3r}\n-// | '_#4r    | U0 | {bb0[0..=1], '_#4r}\n-// | '_#5r    | U0 | {bb0[0..=1], '_#1r}\n-// | '_#6r    | U0 | {bb0[0..=1], '_#2r}\n-// | '_#7r    | U0 | {bb0[0..=1], '_#1r}\n-// | '_#8r    | U0 | {bb0[0..=1], '_#3r}\n-// |\n-// ...\n-// fn use_x(_1: &'_#5r mut i32, _2: &'_#6r u32, _3: &'_#7r u32, _4: &'_#8r u32) -> bool {\n-// END rustc.use_x.nll.0.mir"}, {"sha": "a486af608ef79ebcde43f81ba56a37899ffa59d1", "filename": "src/test/mir-opt/nll/named-lifetimes-basic/rustc.use_x.nll.0.mir", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic%2Frustc.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic%2Frustc.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic%2Frustc.use_x.nll.0.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,53 @@\n+// MIR for `use_x` 0 nll\n+\n+| Free Region Mapping\n+| '_#0r | Global | ['_#2r, '_#1r, '_#0r, '_#4r, '_#3r]\n+| '_#1r | External | ['_#1r, '_#4r]\n+| '_#2r | External | ['_#2r, '_#1r, '_#4r]\n+| '_#3r | Local | ['_#4r, '_#3r]\n+| '_#4r | Local | ['_#4r]\n+|\n+| Inferred Region Values\n+| '_#0r | U0 | {bb0[0..=1], '_#0r, '_#1r, '_#2r, '_#3r, '_#4r}\n+| '_#1r | U0 | {bb0[0..=1], '_#1r}\n+| '_#2r | U0 | {bb0[0..=1], '_#2r}\n+| '_#3r | U0 | {bb0[0..=1], '_#3r}\n+| '_#4r | U0 | {bb0[0..=1], '_#4r}\n+| '_#5r | U0 | {bb0[0..=1], '_#1r}\n+| '_#6r | U0 | {bb0[0..=1], '_#2r}\n+| '_#7r | U0 | {bb0[0..=1], '_#1r}\n+| '_#8r | U0 | {bb0[0..=1], '_#3r}\n+|\n+| Inference Constraints\n+| '_#0r live at {bb0[0..=1]}\n+| '_#1r live at {bb0[0..=1]}\n+| '_#2r live at {bb0[0..=1]}\n+| '_#3r live at {bb0[0..=1]}\n+| '_#4r live at {bb0[0..=1]}\n+| '_#1r: '_#5r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27)\n+| '_#1r: '_#7r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55)\n+| '_#2r: '_#6r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43)\n+| '_#3r: '_#8r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67)\n+| '_#5r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27)\n+| '_#6r: '_#2r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43)\n+| '_#7r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55)\n+| '_#8r: '_#3r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67)\n+|\n+fn use_x(_1: &'_#5r mut i32, _2: &'_#6r u32, _3: &'_#7r u32, _4: &'_#8r u32) -> bool {\n+    debug w => _1;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:12:26: 12:27\n+    debug x => _2;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:12:42: 12:43\n+    debug y => _3;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:12:54: 12:55\n+    debug z => _4;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:12:66: 12:67\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/named-lifetimes-basic.rs:12:81: 12:85\n+\n+    bb0: {\n+        _0 = const Const(Value(Scalar(0x01)): bool); // bb0[0]: scope 0 at $DIR/named-lifetimes-basic.rs:12:88: 12:92\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/named-lifetimes-basic.rs:12:88: 12:92\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        return;                          // bb0[1]: scope 0 at $DIR/named-lifetimes-basic.rs:12:94: 12:94\n+    }\n+}"}, {"sha": "4d8fbbfeec274e4554b2af76f60cd9d0fbda92b6", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -9,6 +9,7 @@\n \n fn use_x(_: usize) -> bool { true }\n \n+// EMIT_MIR rustc.main.nll.0.mir\n fn main() {\n     let mut v = [1, 2, 3];\n     let p = &v[0];\n@@ -19,23 +20,3 @@ fn main() {\n         use_x(22);\n     }\n }\n-\n-// END RUST SOURCE\n-// START rustc.main.nll.0.mir\n-// | '_#2r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n-// | '_#3r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n-// | '_#4r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n-// END rustc.main.nll.0.mir\n-// START rustc.main.nll.0.mir\n-// let _2: &'_#3r usize;\n-// ...\n-// debug p => _2;\n-// ...\n-// let _6: &'_#4r usize;\n-// ...\n-// debug q => _6;\n-// ...\n-// _2 = &'_#2r _1[_3];\n-// ...\n-// _6 = _2;\n-// END rustc.main.nll.0.mir"}, {"sha": "b97cbd8ef5c1866dd903a39b3a5de51f6a26ee91", "filename": "src/test/mir-opt/nll/region-subtyping-basic/rustc.main.nll.0.mir", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2Frustc.main.nll.0.mir?ref=688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "patch": "@@ -0,0 +1,158 @@\n+// MIR for `main` 0 nll\n+\n+| Free Region Mapping\n+| '_#0r | Global | ['_#0r, '_#1r]\n+| '_#1r | Local | ['_#1r]\n+|\n+| Inferred Region Values\n+| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n+| '_#2r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n+| '_#3r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n+| '_#4r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n+|\n+| Inference Constraints\n+| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#2r live at {bb2[0]}\n+| '_#3r live at {bb2[1..=3]}\n+| '_#4r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#2r: '_#3r due to Assignment at Single(bb2[0])\n+| '_#3r: '_#4r due to Assignment at Single(bb2[3])\n+|\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:13:11: 13:11\n+    let mut _1: [usize; Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:14:9: 14:14\n+    let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:15:16: 15:17\n+    let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n+    let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n+    let mut _7: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:17:8: 17:12\n+    let _8: bool;                        // in scope 0 at $DIR/region-subtyping-basic.rs:18:9: 18:18\n+    let mut _9: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:18:15: 18:17\n+    let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:20:9: 20:18\n+    scope 1 {\n+        debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:14:9: 14:14\n+        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:10\n+        scope 2 {\n+            debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:15:9: 15:10\n+            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+            scope 3 {\n+                debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:14:9: 14:14\n+        _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:14:17: 14:26\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:14:18: 14:19\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:14:21: 14:22\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:14:24: 14:25\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n+        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:14:9: 14:14\n+        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:10\n+        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:15:16: 15:17\n+        _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:15:16: 15:17\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:15:16: 15:17\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n+        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n+        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n+        assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:13:1: 22:2\n+    }\n+\n+    bb2: {\n+        _2 = &'_#2r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:15:13: 15:18\n+        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:10\n+        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:16:13: 16:14\n+        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:17:8: 17:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:17:8: 17:12\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:17:8: 17:12\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:17:8: 17:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:17:5: 21:6\n+    }\n+\n+    bb3: {\n+        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:17:5: 21:6\n+    }\n+\n+    bb4: {\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:9: 20:18\n+        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:9: 20:18\n+                                         // ty::Const\n+                                         // + ty: fn(usize) -> bool {use_x}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:20:9: 20:14\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000000000016))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:20:15: 20:17\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000016)) }\n+    }\n+\n+    bb5: {\n+        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:18:9: 18:18\n+        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:18:15: 18:17\n+        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:15: 18:17\n+        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:18:9: 18:18\n+                                         // ty::Const\n+                                         // + ty: fn(usize) -> bool {use_x}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:18:9: 18:14\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb6: {\n+        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:18:17: 18:18\n+        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:18:18: 18:19\n+        _0 = ();                         // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:17:13: 19:6\n+        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:17:5: 21:6\n+    }\n+\n+    bb7: {\n+        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:18: 20:19\n+        _0 = ();                         // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:12: 21:6\n+        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:17:5: 21:6\n+    }\n+\n+    bb8: {\n+        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n+        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n+        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n+        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n+        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n+        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:22:2: 22:2\n+    }\n+}"}]}