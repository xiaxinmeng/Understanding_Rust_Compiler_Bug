{"sha": "74fb3bbee45d54e1680832ba064fa1af8d344bc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZmIzYmJlZTQ1ZDU0ZTE2ODA4MzJiYTA2NGZhMWFmOGQzNDRiYzA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-30T22:33:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T01:33:59Z"}, "message": "On type inference errors use the type argument name when possible\n\n```\nerror[E0282]: type annotations needed in `std::result::Result<i32, E>`\n --> file7.rs:3:13\n  |\n3 |     let b = Ok(4);\n  |         -   ^^ cannot infer type for `E` in `std::result::Result<i32, E>`\n  |         |\n  |         consider giving `b` a type`\n```", "tree": {"sha": "01ab612bf99564ee00c8815ec1ec07d84c41deb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01ab612bf99564ee00c8815ec1ec07d84c41deb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74fb3bbee45d54e1680832ba064fa1af8d344bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74fb3bbee45d54e1680832ba064fa1af8d344bc0", "html_url": "https://github.com/rust-lang/rust/commit/74fb3bbee45d54e1680832ba064fa1af8d344bc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74fb3bbee45d54e1680832ba064fa1af8d344bc0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65c2a7b18bb34547de7c716ace2e8878c2676794", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c2a7b18bb34547de7c716ace2e8878c2676794", "html_url": "https://github.com/rust-lang/rust/commit/65c2a7b18bb34547de7c716ace2e8878c2676794"}], "stats": {"total": 109, "additions": 81, "deletions": 28}, "files": [{"sha": "85ff1cbc9e4d62e7b96109f237d2985a39f4ffec", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -15,7 +15,7 @@ struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_local_pattern: Option<&'gcx Pat>,\n     found_arg_pattern: Option<&'gcx Pat>,\n-    found_ty: Option<String>,\n+    found_ty: Option<Ty<'tcx>>,\n }\n \n impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n@@ -55,7 +55,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n     fn visit_local(&mut self, local: &'gcx Local) {\n         if let (None, Some(ty)) = (self.found_local_pattern, self.node_matches_type(local.hir_id)) {\n             self.found_local_pattern = Some(&*local.pat);\n-            self.found_ty = Some(ty.to_string());\n+            self.found_ty = Some(ty);\n         }\n         intravisit::walk_local(self, local);\n     }\n@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n                 self.node_matches_type(argument.hir_id),\n             ) {\n                 self.found_arg_pattern = Some(&*argument.pat);\n-                self.found_ty = Some(ty.to_string());\n+                self.found_ty = Some(ty);\n             }\n         }\n         intravisit::walk_body(self, body);\n@@ -117,14 +117,43 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             found_arg_pattern: None,\n             found_ty: None,\n         };\n+        let ty_to_string = |ty: Ty<'tcx>| -> String {\n+            let mut s = String::new();\n+            let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);\n+            let ty_vars = self.type_variables.borrow();\n+            let getter = move |ty_vid| {\n+                if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n+                    *ty_vars.var_origin(ty_vid) {\n+                    return Some(name.to_string());\n+                }\n+                None\n+            };\n+            printer.name_resolver = Some(Box::new(&getter));\n+            let _ = ty.print(printer);\n+            s\n+        };\n \n         if let Some(body_id) = body_id {\n             let expr = self.tcx.hir().expect_expr_by_hir_id(body_id.hir_id);\n             local_visitor.visit_expr(expr);\n         }\n \n+        // When `name` corresponds to a type argument, show the path of the full type we're\n+        // trying to infer. In the following example, `ty_msg` contains\n+        // \" in `std::result::Result<i32, E>`\":\n+        // ```\n+        // error[E0282]: type annotations needed in `std::result::Result<i32, E>`\n+        //  --> file.rs:L:CC\n+        //   |\n+        // L |     let b = Ok(4);\n+        //   |         -   ^^ cannot infer type for `E` in `std::result::Result<i32, E>`\n+        //   |         |\n+        //   |         consider giving `b` a type\n+        // ```\n         let ty_msg = match &local_visitor.found_ty {\n-            Some(ty) if &ty[..] != \"_\" && ty != &name => format!(\" in `{}`\", ty),\n+            Some(ty) if &ty.to_string() != \"_\" && ty.to_string() != name => {\n+                format!(\" in `{}`\", ty_to_string(ty))\n+            }\n             _ => String::new(),\n         };\n         let mut labels = vec![(span, InferCtxt::missing_type_msg(&name, &ty_msg))];\n@@ -144,17 +173,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // After clearing, it looks something like this:\n             // ```\n             // let x = |_| {  };\n-            //          ^ consider giving this closure parameter a type\n+            //          ^ consider giving this closure parameter the type `[_; 0]`\n+            //            with the type parameter `_` specified\n             // ```\n             labels.clear();\n             labels.push((pattern.span, format!(\n                 \"consider giving this closure parameter {}\",\n                 match &local_visitor.found_ty {\n-                    Some(ty) if &ty[..] != \"_\" && ty != &name => format!(\n-                        \"the type `{}` with the type parameter `{}` specified\",\n-                        ty,\n-                        name,\n-                    ),\n+                    Some(ty) if &ty.to_string() != \"_\" && ty.to_string() != name => {\n+                        format!(\n+                            \"the type `{}` with the type parameter `{}` specified\",\n+                            ty_to_string(ty),\n+                            name,\n+                        )\n+                    }\n                     _ => \"a type\".to_owned(),\n                 },\n             )));"}, {"sha": "cd617a9368d8547a1cb86b0463f404b30b0a2fcc", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -483,7 +483,17 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             ty::FnPtr(ref bare_fn) => {\n                 p!(print(bare_fn))\n             }\n-            ty::Infer(infer_ty) => p!(write(\"{}\", infer_ty)),\n+            ty::Infer(infer_ty) => {\n+                if let ty::TyVar(ty_vid) = infer_ty {\n+                    if let Some(name) = self.infer_ty_name(ty_vid) {\n+                        p!(write(\"{}\", name))\n+                    } else {\n+                        p!(write(\"{}\", infer_ty))\n+                    }\n+                } else {\n+                    p!(write(\"{}\", infer_ty))\n+                }\n+            },\n             ty::Error => p!(write(\"[type error]\")),\n             ty::Param(ref param_ty) => p!(write(\"{}\", param_ty)),\n             ty::Bound(debruijn, bound_ty) => {\n@@ -681,6 +691,10 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n         Ok(self)\n     }\n \n+    fn infer_ty_name(&self, _: ty::TyVid) -> Option<String> {\n+        None\n+    }\n+\n     fn pretty_print_dyn_existential(\n         mut self,\n         predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n@@ -931,6 +945,8 @@ pub struct FmtPrinterData<'a, 'gcx, 'tcx, F> {\n     binder_depth: usize,\n \n     pub region_highlight_mode: RegionHighlightMode,\n+\n+    pub name_resolver: Option<Box<&'a dyn Fn(ty::sty::TyVid) -> Option<String>>>,\n }\n \n impl<F> Deref for FmtPrinter<'a, 'gcx, 'tcx, F> {\n@@ -957,6 +973,7 @@ impl<F> FmtPrinter<'a, 'gcx, 'tcx, F> {\n             region_index: 0,\n             binder_depth: 0,\n             region_highlight_mode: RegionHighlightMode::default(),\n+            name_resolver: None,\n         }))\n     }\n }\n@@ -1206,6 +1223,10 @@ impl<F: fmt::Write> Printer<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n }\n \n impl<F: fmt::Write> PrettyPrinter<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n+    fn infer_ty_name(&self, id: ty::TyVid) -> Option<String> {\n+        self.0.name_resolver.as_ref().and_then(|func| func(id))\n+    }\n+\n     fn print_value_path(\n         mut self,\n         def_id: DefId,"}, {"sha": "5f07dbc6673d9779031c6647d6236e612aaf7b61", "filename": "src/test/ui/issues/issue-12187-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed in `&_`\n+error[E0282]: type annotations needed in `&T`\n   --> $DIR/issue-12187-1.rs:6:10\n    |\n LL |     let &v = new();"}, {"sha": "5b44278359cdf4926f96d0aa61b4a27c0104ec4c", "filename": "src/test/ui/issues/issue-12187-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed in `&_`\n+error[E0282]: type annotations needed in `&T`\n   --> $DIR/issue-12187-2.rs:6:10\n    |\n LL |     let &v = new();"}, {"sha": "95af1e41b58ef384c3634aead04a8b300b336e67", "filename": "src/test/ui/issues/issue-17551.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed in `B<_>`\n+error[E0282]: type annotations needed in `B<T>`\n   --> $DIR/issue-17551.rs:6:15\n    |\n LL |     let foo = B(marker::PhantomData);\n-   |         ---   ^ cannot infer type for `T` in `B<_>`\n+   |         ---   ^ cannot infer type for `T` in `B<T>`\n    |         |\n    |         consider giving `foo` a type\n "}, {"sha": "102cfe0085fc0ddcefeed5090253040e9bc3b3cc", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed in `Expr<'_, _>`\n+error[E0282]: type annotations needed in `Expr<'_, VAR>`\n   --> $DIR/issue-23046.rs:17:15\n    |\n LL |     let ex = |x| {\n-   |               ^ consider giving this closure parameter the type `Expr<'_, _>` with the type parameter `VAR` specified\n+   |               ^ consider giving this closure parameter the type `Expr<'_, VAR>` with the type parameter `VAR` specified\n \n error: aborting due to previous error\n "}, {"sha": "a386fc946284f921123c3802bd6f826d003297bc", "filename": "src/test/ui/issues/issue-25368.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,11 +1,11 @@\n-error[E0282]: type annotations needed in `(std::sync::mpsc::Sender<Foo<_>>, std::sync::mpsc::Receiver<Foo<_>>)`\n+error[E0282]: type annotations needed in `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`\n   --> $DIR/issue-25368.rs:11:17\n    |\n LL |     let (tx, rx) = channel();\n    |         -------- consider giving the pattern a type\n ...\n LL |         tx.send(Foo{ foo: PhantomData });\n-   |                 ^^^ cannot infer type for `T` in `(std::sync::mpsc::Sender<Foo<_>>, std::sync::mpsc::Receiver<Foo<_>>)`\n+   |                 ^^^ cannot infer type for `T` in `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`\n \n error: aborting due to previous error\n "}, {"sha": "b9fa36041b19eb0e054c1c450b6744fcc2fb213a", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed in `std::vec::Vec<_>`\n+error[E0282]: type annotations needed in `std::vec::Vec<T>`\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:24:17\n    |\n LL |     let mut x = Vec::new();\n-   |         -----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<_>`\n+   |         -----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n    |         |\n    |         consider giving `x` a type\n "}, {"sha": "a491d4516cc7841592f0eea48596fef4ec1cc9cb", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed in `std::vec::Vec<_>`\n+error[E0282]: type annotations needed in `std::vec::Vec<T>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:13\n    |\n LL |     let x = vec![];\n-   |         -   ^^^^^^ cannot infer type for `T` in `std::vec::Vec<_>`\n+   |         -   ^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n    |         |\n    |         consider giving `x` a type\n    |"}, {"sha": "1c5b750b9b4a9f137de2a63ba81ab230ef73dc02", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed in `(std::vec::Vec<_>,)`\n+error[E0282]: type annotations needed in `(std::vec::Vec<T>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:18\n    |\n LL |     let (x, ) = (vec![], );\n-   |         -----    ^^^^^^ cannot infer type for `T` in `(std::vec::Vec<_>,)`\n+   |         -----    ^^^^^^ cannot infer type for `T` in `(std::vec::Vec<T>,)`\n    |         |\n    |         consider giving the pattern a type\n    |"}, {"sha": "dda453870dcefcbc1d5a15aca6f4dc82ad7cc20c", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed in `std::option::Option<_>`\n+error[E0282]: type annotations needed in `std::option::Option<T>`\n   --> $DIR/unboxed-closures-failed-recursive-fn-2.rs:16:32\n    |\n LL |     let mut closure0 = None;"}, {"sha": "a6c805c0c2679fb3118ceb2cef0c307670dc561c", "filename": "src/test/ui/vector-no-ann.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb3bbee45d54e1680832ba064fa1af8d344bc0/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.stderr?ref=74fb3bbee45d54e1680832ba064fa1af8d344bc0", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed in `std::vec::Vec<_>`\n+error[E0282]: type annotations needed in `std::vec::Vec<T>`\n   --> $DIR/vector-no-ann.rs:2:16\n    |\n LL |     let _foo = Vec::new();\n-   |         ----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<_>`\n+   |         ----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n    |         |\n    |         consider giving `_foo` a type\n "}]}