{"sha": "13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "node_id": "C_kwDOAAsO6NoAKDEzYjY3ZmI5ZDI4NDliNGU1OWQ1NjUxYjBlNGZjODJlZjhiMDg4YWE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-09-18T15:55:36Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-01T10:03:06Z"}, "message": "bless ui tests", "tree": {"sha": "f683e6adf1d562c87135e109f3b8fbc9c1886a07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f683e6adf1d562c87135e109f3b8fbc9c1886a07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "html_url": "https://github.com/rust-lang/rust/commit/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3d1fc9d535bf4399c88a0fa97aeddb2c0c8f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3d1fc9d535bf4399c88a0fa97aeddb2c0c8f51", "html_url": "https://github.com/rust-lang/rust/commit/ad3d1fc9d535bf4399c88a0fa97aeddb2c0c8f51"}], "stats": {"total": 2388, "additions": 1194, "deletions": 1194}, "files": [{"sha": "e86a73ea60f65090962a9e25f1b09a5fa637540c", "filename": "src/test/ui/abi/unsupported.aarch64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -52,9 +52,9 @@ warning: use of calling convention not supported on this target\n LL | extern \"stdcall\" fn stdcall() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n \n error: aborting due to 8 previous errors; 1 warning emitted\n "}, {"sha": "f7569c8cdd797f2fcb277dd1d70c96d2bbdc767f", "filename": "src/test/ui/abi/unsupported.arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -46,9 +46,9 @@ warning: use of calling convention not supported on this target\n LL | extern \"stdcall\" fn stdcall() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n \n error: aborting due to 7 previous errors; 1 warning emitted\n "}, {"sha": "26023a4584e4087f48a414c9dd48988150a618d3", "filename": "src/test/ui/abi/unsupported.x64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -46,9 +46,9 @@ warning: use of calling convention not supported on this target\n LL | extern \"stdcall\" fn stdcall() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n \n error: aborting due to 7 previous errors; 1 warning emitted\n "}, {"sha": "691e2c7951249586938d1b20cdaca198f823ed9c", "filename": "src/test/ui/anon-params/anon-params-deprecated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn foo(i32);\n    |            ^^^ help: try naming the parameter or explicitly ignoring it: `_: i32`\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n note: the lint level is defined here\n   --> $DIR/anon-params-deprecated.rs:1:9\n    |\n LL | #![warn(anonymous_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/anon-params-deprecated.rs:12:30"}, {"sha": "154872915d6bdd87951de4313363f68a07532420", "filename": "src/test/ui/array-slice-vec/array_const_index-0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const B: i32 = (&A)[1];\n    | ------------   ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -17,7 +17,7 @@ error: any use of this value will cause an error\n LL | const B: i32 = (&A)[1];\n    | ------------   ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "a13b5b4ccc1891b4f7dc162c9fd6541fb884abbe", "filename": "src/test/ui/array-slice-vec/array_const_index-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const B: i32 = A[1];\n    | ------------   ^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -17,7 +17,7 @@ error: any use of this value will cause an error\n LL | const B: i32 = A[1];\n    | ------------   ^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "f710df2dcde96f50fac308aa63c79f0e877b8513", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{}\", in(reg) 0u8);\n    |               ^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:w}` to have the register formatted as `w0`\n    = help: or use `{0:x}` to keep the default formatting of `x0`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:50:15"}, {"sha": "bb6a222b22ee7c2258becf6b8f61ea3403e90c31", "filename": "src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -189,9 +189,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:w}` to have the register formatted as `w0`\n    = help: or use `{0:x}` to keep the default formatting of `x0`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "bb6a222b22ee7c2258becf6b8f61ea3403e90c31", "filename": "src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -189,9 +189,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:w}` to have the register formatted as `w0`\n    = help: or use `{0:x}` to keep the default formatting of `x0`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "903b5e959f3efc8d313056b0aa0606b1df363d1d", "filename": "src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -189,9 +189,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:e}` to have the register formatted as `eax`\n    = help: or use `{0:r}` to keep the default formatting of `rax`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "903b5e959f3efc8d313056b0aa0606b1df363d1d", "filename": "src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -189,9 +189,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:e}` to have the register formatted as `eax`\n    = help: or use `{0:r}` to keep the default formatting of `rax`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "908881b1949992f44932193ab891c490cf078614", "filename": "src/test/ui/asm/naked-functions-ffi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: `extern` fn uses type `char`, which is not FFI-safe\n LL | pub extern \"C\" fn naked(p: char) -> u128 {\n    |                            ^^^^ not FFI-safe\n    |\n-   = note: `#[warn(improper_ctypes_definitions)]` on by default\n    = help: consider using `u32` or `libc::wchar_t` instead\n    = note: the `char` type has no C equivalent\n+   = note: `#[warn(improper_ctypes_definitions)]` on by default\n \n warning: `extern` fn uses type `u128`, which is not FFI-safe\n   --> $DIR/naked-functions-ffi.rs:9:37"}, {"sha": "c8380629e12ea429f4c1b907d128947c49195f16", "filename": "src/test/ui/asm/named-asm-labels.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: avoid using named labels in inline assembly\n LL |         asm!(\"bar: nop\");\n    |               ^^^\n    |\n-   = note: `#[deny(named_asm_labels)]` on by default\n    = help: only local labels of the form `<number>:` should be used in inline asm\n    = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n+   = note: `#[deny(named_asm_labels)]` on by default\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:27:15\n@@ -259,13 +259,13 @@ warning: avoid using named labels in inline assembly\n LL |             asm!(\"warned: nop\");\n    |                   ^^^^^^\n    |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n note: the lint level is defined here\n   --> $DIR/named-asm-labels.rs:132:16\n    |\n LL |         #[warn(named_asm_labels)]\n    |                ^^^^^^^^^^^^^^^^\n-   = help: only local labels of the form `<number>:` should be used in inline asm\n-   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:143:20"}, {"sha": "1baf50ff6e0c75b8516b6d8e692b37db60cb17f2", "filename": "src/test/ui/asm/x86_64/type-check-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -44,9 +44,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    |               ^^^ ^^^           ---- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:x}` to have the register formatted as `ax`\n    = help: or use `{0:r}` to keep the default formatting of `rax`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:36:15"}, {"sha": "8a7c16e6117520a9589e0590d2c7968568d686d6", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL |     const B: u8 = Self::A + 1;\n    |     -----------   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/defaults-not-assumed-fail.rs:34:16\n@@ -34,9 +34,9 @@ error: any use of this value will cause an error\n LL |     const B: u8 = Self::A + 1;\n    |     -----------   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -45,8 +45,8 @@ error: erroneous constant used\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "8df326351fa0cf48c82d755710bb9c91b7220448", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(associated_type_defaults, specialization)]\n    |                                      ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:19:18"}, {"sha": "d99967eb23ca6b0fccd30eb60ee6e19a8fa85e67", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: `await` is a keyword in the 2018 edition\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n note: the lint level is defined here\n   --> $DIR/2015-edition-error-various-positions.rs:2:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n   --> $DIR/2015-edition-error-various-positions.rs:7:20"}, {"sha": "bf5c4d8d6aab3737bde8e6bd1973a80ae3ff7611", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: `await` is a keyword in the 2018 edition\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n note: the lint level is defined here\n   --> $DIR/2015-edition-warning.rs:4:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n   --> $DIR/2015-edition-warning.rs:10:20"}, {"sha": "da34f44b2d680550fe468ae13a85e8cc5c7f06ce", "filename": "src/test/ui/async-await/large_moves.attribute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,12 +10,12 @@ LL | |         dbg!(y);\n LL | |     };\n    | |_____^ value moved from here\n    |\n+   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n note: the lint level is defined here\n   --> $DIR/large_moves.rs:1:9\n    |\n LL | #![deny(large_assignments)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n \n error: moving 10024 bytes\n   --> $DIR/large_moves.rs:18:14"}, {"sha": "da34f44b2d680550fe468ae13a85e8cc5c7f06ce", "filename": "src/test/ui/async-await/large_moves.option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,12 +10,12 @@ LL | |         dbg!(y);\n LL | |     };\n    | |_____^ value moved from here\n    |\n+   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n note: the lint level is defined here\n   --> $DIR/large_moves.rs:1:9\n    |\n LL | #![deny(large_assignments)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n \n error: moving 10024 bytes\n   --> $DIR/large_moves.rs:18:14"}, {"sha": "68df2771fd7235c9f9b31037cb261dc4f1ac5881", "filename": "src/test/ui/attributes/doc-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,14 +4,14 @@ error: unknown `doc` attribute `as_ptr`\n LL | #[doc(as_ptr)]\n    |       ^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n note: the lint level is defined here\n   --> $DIR/doc-attr.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n error: invalid `doc` attribute\n   --> $DIR/doc-attr.rs:12:7"}, {"sha": "3c66e587b470d4b6cf3d9f25fd0bc0dea9357112", "filename": "src/test/ui/attributes/invalid-doc-attr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,15 +4,15 @@ error: this attribute can only be applied at the crate level\n LL | #[doc(test(no_crate_inject))]\n    |       ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n note: the lint level is defined here\n   --> $DIR/invalid-doc-attr.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n help: to apply to the crate, use an inner attribute\n    |\n LL | #![doc(test(no_crate_inject))]"}, {"sha": "9cd4e79f851ebb4ef59148789df1baaa8f86674a", "filename": "src/test/ui/auto-traits/suspicious-impls-lint.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,6 @@ error: cross-crate traits with a default impl, like `Send`, should not be specia\n LL | unsafe impl<T: Send> Send for MayImplementSendErr<&T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/suspicious-impls-lint.rs:1:9\n-   |\n-LL | #![deny(suspicious_auto_trait_impls)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n    = note: `&T` is not a generic parameter\n@@ -17,6 +12,11 @@ note: try using the same sequence of generic parameters as the struct definition\n    |\n LL | struct MayImplementSendErr<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/suspicious-impls-lint.rs:1:9\n+   |\n+LL | #![deny(suspicious_auto_trait_impls)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:21:1"}, {"sha": "57a065d6d4d2f1a6fc22b3a806764132e88a56c3", "filename": "src/test/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,11 @@ error: reference to packed field is unaligned\n LL |     let _ = &p.b;\n    |             ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n \n error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:29:17\n@@ -109,11 +109,11 @@ error: reference to packed field is unaligned\n LL |     let _ = &p.b;\n    |             ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n \n Future breakage diagnostic:\n error: reference to packed field is unaligned\n@@ -122,11 +122,11 @@ error: reference to packed field is unaligned\n LL |     let (_,) = (&p.b,);\n    |                 ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n \n Future breakage diagnostic:\n error: reference to packed field is unaligned\n@@ -135,11 +135,11 @@ error: reference to packed field is unaligned\n LL |     match &p.b  { _ => { } }\n    |           ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n \n Future breakage diagnostic:\n error: reference to packed field is unaligned\n@@ -148,9 +148,9 @@ error: reference to packed field is unaligned\n LL |     match (&p.b,)  { (_,) => { } }\n    |            ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n "}, {"sha": "19cd323ce5748ce04734f79f13cf3222187a1e38", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -18,9 +18,9 @@ error: any use of this value will cause an error\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -32,7 +32,7 @@ error: any use of this value will cause an error\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "4492af7ec6bfbb98550dccf043ca093bc7ef0936", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -18,9 +18,9 @@ error: any use of this value will cause an error\n LL | const _CONST: &() = &f(&|_| {});\n    | -----------------   ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -32,7 +32,7 @@ error: any use of this value will cause an error\n LL | const _CONST: &() = &f(&|_| {});\n    | -----------------   ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "a889e67f4ea0015164f0b3243b96f3080ad77e70", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -18,9 +18,9 @@ error: any use of this value will cause an error\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -32,7 +32,7 @@ error: any use of this value will cause an error\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "b3f921c14edbc4218c8c6165c8d379439fa8ec37", "filename": "src/test/ui/cenum_impl_drop_cast.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcenum_impl_drop_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcenum_impl_drop_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcenum_impl_drop_cast.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: cannot cast enum `E` into integer `u32` because it implements `Drop`\n LL |     let i = e as u32;\n    |             ^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #73333 <https://github.com/rust-lang/rust/issues/73333>\n note: the lint level is defined here\n   --> $DIR/cenum_impl_drop_cast.rs:1:9\n    |\n LL | #![deny(cenum_impl_drop_cast)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73333 <https://github.com/rust-lang/rust/issues/73333>\n \n error: aborting due to previous error\n \n@@ -21,11 +21,11 @@ error: cannot cast enum `E` into integer `u32` because it implements `Drop`\n LL |     let i = e as u32;\n    |             ^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #73333 <https://github.com/rust-lang/rust/issues/73333>\n note: the lint level is defined here\n   --> $DIR/cenum_impl_drop_cast.rs:1:9\n    |\n LL | #![deny(cenum_impl_drop_cast)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73333 <https://github.com/rust-lang/rust/issues/73333>\n "}, {"sha": "9ce4710d69bc07b43850af795ead05e981e0d879", "filename": "src/test/ui/cfg/future-compat-crate-attributes-using-cfg_attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: `crate_type` within an `#![cfg_attr] attribute is deprecated`\n LL | #![cfg_attr(foo, crate_type=\"bin\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(deprecated_cfg_attr_crate_type_name)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n+   = note: `#[deny(deprecated_cfg_attr_crate_type_name)]` on by default\n \n error: `crate_name` within an `#![cfg_attr] attribute is deprecated`\n   --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:9:18"}, {"sha": "9864aa385f99ea97eeadef98b4edc32906b900f6", "filename": "src/test/ui/check-cfg/compact-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target(os = \"linux\", arch = \"X\"))]\n    |                            ^^^^^^^^^^\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: expected values for `target_arch` are: aarch64, arm, avr, bpf, hexagon, m68k, mips, mips64, msp430, nvptx64, powerpc, powerpc64, riscv32, riscv64, s390x, sparc, sparc64, wasm32, wasm64, x86, x86_64\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "a0168b2caa8e3ca0dcbea08acbe7fef1698980fd", "filename": "src/test/ui/check-cfg/empty-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,8 +6,8 @@ LL | #[cfg(test = \"value\")]\n    |           |\n    |           help: remove the value\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: no expected value for `test`\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "60abcb18824bac5370c5fba5cffdb1322e6ea35b", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"sedre\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: expected values for `feature` are: full, serde\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n   --> $DIR/invalid-cfg-value.rs:14:7"}, {"sha": "8c926d187fed4ae9d42912b9369b24f1cf416795", "filename": "src/test/ui/check-cfg/no-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"foo\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: no expected value for `feature`\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n   --> $DIR/no-values.rs:10:7"}, {"sha": "4ec74494fe09b446315f26a93b67f8b1d01e5a35", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,8 +6,8 @@ LL | #[cfg(target_os = \"linuz\")]\n    |                   |\n    |                   help: did you mean: `\"linux\"`\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n   --> $DIR/well-known-values.rs:14:7"}, {"sha": "cf414adc0b943911576ba568ea59febedfbc83ae", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,22 +4,22 @@ warning: value captured by `a` is never read\n LL |         a = 1;\n    |         ^\n    |\n+   = help: did you mean to capture by reference instead?\n note: the lint level is defined here\n   --> $DIR/liveness.rs:5:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n-   = help: did you mean to capture by reference instead?\n \n warning: unused variable: `a`\n   --> $DIR/liveness.rs:33:9\n    |\n LL |         a += 1;\n    |         ^\n    |\n-   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n    = help: did you mean to capture by reference instead?\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: value assigned to `a` is never read\n   --> $DIR/liveness.rs:53:9"}, {"sha": "0410de4c7982a1174ee203ab60af4a92e9a46a74", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,22 +4,22 @@ warning: value assigned to `a` is never read\n LL |         a = s;\n    |         ^\n    |\n+   = help: maybe it is overwritten before being read?\n note: the lint level is defined here\n   --> $DIR/liveness_unintentional_copy.rs:4:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n-   = help: maybe it is overwritten before being read?\n \n warning: unused variable: `a`\n   --> $DIR/liveness_unintentional_copy.rs:20:9\n    |\n LL |         a = s;\n    |         ^\n    |\n-   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n    = help: did you mean to capture by reference instead?\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `a`\n   --> $DIR/liveness_unintentional_copy.rs:36:9"}, {"sha": "508c4b911b70b6f57f7ae78b46c75e8bb904c966", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,11 @@ error: reference to packed field is unaligned\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n@@ -20,10 +20,10 @@ error: reference to packed field is unaligned\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b3cb558f976795475f99b1198256ef6437bfcc93", "filename": "src/test/ui/closures/2229_closure_analysis/issue-88118-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88118-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88118-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88118-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: irrefutable `if let` guard pattern\n LL |             Registry if let _ = registry.try_find_description() => { }\n    |                             ^\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the guard is useless\n    = help: consider removing the guard and adding a `let` inside the match arm\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "c1679c6b637e523eaa1b50760bb24648e19bd21f", "filename": "src/test/ui/closures/2229_closure_analysis/issue-90465.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,12 +10,12 @@ LL |         let _ = f0;\n LL | }\n    | - in Rust 2018, `f0` is dropped here along with the closure, but in Rust 2021 `f0` is not part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/issue-90465.rs:3:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f0` to be fully captured\n    |\n LL ~     let c0 = move || {"}, {"sha": "38401085971316efcf649a298b3e21f5bc4099a7", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -18,8 +18,8 @@ LL | |         Variant::B => (),\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: closures are lazy and do nothing unless called\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: unused closure that must be used\n   --> $DIR/issue-87097.rs:26:5"}, {"sha": "3a42cc8b8439b6247376cabd0fb0a58a422ca7cc", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,12 +7,12 @@ LL |     thread::spawn(move || unsafe {\n LL |         *fptr.0 = 20;\n    |         ------- in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/auto_traits.rs:2:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = &fptr; unsafe {"}, {"sha": "bb17e3a34af61d29f926caa29e0ce08fd28726d6", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/closure-body-macro-fragment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -15,13 +15,13 @@ LL | |         println!(\"{:?}\", x);\n LL | |     });\n    | |______- in this macro invocation\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/closure-body-macro-fragment.rs:4:9\n    |\n LL | #![warn(rust_2021_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(rust_2021_incompatible_closure_captures)]` implied by `#[warn(rust_2021_compatibility)]`\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n    = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: add a dummy let to cause `a` to be fully captured\n    |"}, {"sha": "a0795c12928ff96a0607ba24a461caca3580528e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,12 +10,12 @@ LL |         let _t = t.0;\n LL | }\n    | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "36a80e694e82495acc2b3fd317fafb250b548fd6", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/issue-78720.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: irrefutable `if let` pattern\n LL |     if let a = \"\" {\n    |        ^^^^^^^^^^\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "c17edce72f9878b5d152f95e2c65408545cb7408", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,12 +7,12 @@ LL |     let _ = || dbg!(a.0);\n LL | }\n    | - in Rust 2018, `a` is dropped here, but in Rust 2021, only `a.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/macro.rs:5:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `a` to be fully captured\n    |\n LL |     let _ = || { let _ = &a; dbg!(a.0) };"}, {"sha": "94526487e6792248191b2a1295cccfb6355cced1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,12 +10,12 @@ LL |         let _t = t.0;\n LL | }\n    | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/migrations_rustfix.rs:2:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "e10898f984499ef7f04fbe274f3706736b9b0046", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,12 +10,12 @@ LL |     let result = panic::catch_unwind(move || {\n LL |         f.0()\n    |         --- in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.0`\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/mir_calls_to_shims.rs:4:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n LL ~     let result = panic::catch_unwind(move || {"}, {"sha": "efb264447f68d70e8fc93fd0b62c88e2159ffda9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -13,12 +13,12 @@ LL |         let _f_2 = f2.1;\n LL | }\n    | - in Rust 2018, `f2` is dropped here, but in Rust 2021, only `f2.1` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/multi_diagnostics.rs:2:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1`, `f2` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "eff26a4d6f5f6fb6e7ad0da10807cc79e5e398d2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,12 +10,12 @@ LL |         let _t = t.0;\n LL | }\n    | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/precise.rs:3:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "54ad20f898338f10085ed8a37fe938bad444f329", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -20,12 +20,12 @@ LL | }\n    | in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n    | in Rust 2018, `t2` is dropped here, but in Rust 2021, only `t2.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/significant_drop.rs:2:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "2018712043e235a8d7db415174a1a18767647706", "filename": "src/test/ui/coherence/coherence-fn-implied-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,14 +7,14 @@ LL |\n LL | impl Trait for for<'c> fn(&'c &'c u32, &'c &'c u32) -> &'c u32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n note: the lint level is defined here\n   --> $DIR/coherence-fn-implied-bounds.rs:15:9\n    |\n LL | #![deny(coherence_leak_check)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error: aborting due to previous error\n "}, {"sha": "e2d84b833200c5722b5f973fa6bc89d261bf72dc", "filename": "src/test/ui/coherence/coherence-free-vs-bound-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,14 +7,14 @@ LL |\n LL | impl TheTrait for fn(&u8) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `fn(&u8)`\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n note: the lint level is defined here\n   --> $DIR/coherence-free-vs-bound-region.rs:10:9\n    |\n LL | #![deny(coherence_leak_check)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error: aborting due to previous error\n "}, {"sha": "7bd50649d6d09388b8aab835990ba9ab49bea64d", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0391]: cycle detected when building specialization graph of trait `Trait`\n   --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1"}, {"sha": "9d90019a50fd3c655f6be5c476ee3e91dad0557e", "filename": "src/test/ui/coherence/coherence-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,10 +7,10 @@ LL |\n LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n    |\n-   = note: `#[warn(coherence_leak_check)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+   = note: `#[warn(coherence_leak_check)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "cfcc21240e4ebf3b35f257eb5f0da8bf59d2659c", "filename": "src/test/ui/coherence/coherence-wasm-bindgen.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,15 +7,15 @@ LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)\n LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn for<'x> Fn(&'x A) -> R + 'b)\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&dyn std::ops::Fn(&_) -> _`\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: downstream crates may implement trait `FromWasmAbi` for type `&_`\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n note: the lint level is defined here\n   --> $DIR/coherence-wasm-bindgen.rs:10:9\n    |\n LL | #![deny(coherence_leak_check)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n-   = note: downstream crates may implement trait `FromWasmAbi` for type `&_`\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error: aborting due to previous error\n "}, {"sha": "4dcd8f4fc280a62f3b1279cc29fd759ec7832f3e", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error[E0566]: conflicting representation hints\n LL | #[repr(C, u64)]\n    |        ^  ^^^\n    |\n-   = note: `#[deny(conflicting_repr_hints)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n+   = note: `#[deny(conflicting_repr_hints)]` on by default\n \n error[E0566]: conflicting representation hints\n   --> $DIR/conflicting-repr-hints.rs:19:8"}, {"sha": "828f0988a039f7b4b045d71bcbe687b482db11a0", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -22,9 +22,9 @@ warning: cannot use constants which depend on generic parameters in types\n LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: cannot use constants which depend on generic parameters in types\n   --> $DIR/dependence_lint.rs:16:9"}, {"sha": "8eb1fccc5f88e43667024a167384a2141490519f", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-try-unify.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `generic_const_exprs` is incomplete and may not be safe to\n LL | #![feature(generic_const_exprs)]\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "796dc01043cd89afddf339bf970600d09d185424", "filename": "src/test/ui/const-generics/generic_const_exprs/function-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: cannot use constants which depend on generic parameters in types\n LL |     let _ = [0; foo::<T>()];\n    |                 ^^^^^^^^^^\n    |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "1cceaece715bbf3dd7d04dec59b9a89c6172d154", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-97047-ice-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-1.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params, generic_const_exprs)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-97047-ice-1.rs:3:30"}, {"sha": "774e842bcbeab7ed68f863f2adfd443d115da0aa", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-97047-ice-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params, generic_const_exprs)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-97047-ice-2.rs:3:30"}, {"sha": "440cf457e196ca026f2c45b5bc771dfcfb7cf38a", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-where-bounds.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,6 @@ error: the trait `Foo` cannot be made into an object\n LL |     fn test(&self) where [u8; bar::<Self>()]: Sized;\n    |        ^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/object-safety-err-where-bounds.rs:3:9\n-   |\n-LL | #![deny(where_clauses_object_safety)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -19,6 +14,11 @@ LL | trait Foo {\n LL |     fn test(&self) where [u8; bar::<Self>()]: Sized;\n    |        ^^^^ ...because method `test` references the `Self` type in its `where` clause\n    = help: consider moving `test` to another trait\n+note: the lint level is defined here\n+  --> $DIR/object-safety-err-where-bounds.rs:3:9\n+   |\n+LL | #![deny(where_clauses_object_safety)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aabe4c93b3624dcef9d911a8f148697f34f25917", "filename": "src/test/ui/const-generics/invariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,10 +7,10 @@ LL | impl SadBee for for<'a> fn(&'a ()) {\n LL | impl SadBee for fn(&'static ()) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a> fn(&'a ())`\n    |\n-   = note: `#[warn(coherence_leak_check)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+   = note: `#[warn(coherence_leak_check)]` on by default\n \n error[E0308]: mismatched types\n   --> $DIR/invariant.rs:27:5"}, {"sha": "b89706710bcf20bb4fa4d4b8a2c1508b442f3593", "filename": "src/test/ui/const-generics/issue-80471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0741]: `Box<Nat>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/issue-80471.rs:10:17"}, {"sha": "bcfd706398966f406bf8d8ac40c1ea8e6536fd3c", "filename": "src/test/ui/const-generics/issues/issue-83466.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,9 +7,9 @@ LL |     fn func<'a, U>(self) -> U {\n LL |     S.func::<'a, 10_u32>()\n    |              ^^\n    |\n-   = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+   = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n \n error[E0747]: constant provided when a type was expected\n   --> $DIR/issue-83466.rs:11:18"}, {"sha": "0b051c6131b85bf2f75f0fb534706865c5b52654", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -67,9 +67,9 @@ warning: cannot use constants which depend on generic parameters in types\n LL |     let _ = [0; size_of::<*mut T>() + 1];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n error: aborting due to 7 previous errors; 1 warning emitted\n "}, {"sha": "f0ba7a39d1eafc7555b3ce512cc651276b788870", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: cannot use constants which depend on generic parameters in types\n LL |     [0; std::mem::size_of::<*mut T>()];\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: cannot use constants which depend on generic parameters in types\n   --> $DIR/const-evaluatable-unchecked.rs:16:21"}, {"sha": "fe3f24a67a26053e69f39f424ab82688bd88c6f7", "filename": "src/test/ui/const-generics/occurs-check/unify-fixpoint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `generic_const_exprs` is incomplete and may not be safe to\n LL | #![feature(generic_const_exprs)]\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "a183856dff8072e496e69f6fd78bfa0f759487f2", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,9 +6,9 @@ LL |     const _BAD1: () = unsafe {\n LL |         MaybeUninit::<!>::uninit().assume_init();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/assert-type-intrinsics.rs:17:9\n@@ -43,9 +43,9 @@ LL |     const _BAD1: () = unsafe {\n LL |         MaybeUninit::<!>::uninit().assume_init();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -56,9 +56,9 @@ LL |     const _BAD2: () = {\n LL |         intrinsics::assert_uninit_valid::<bool>();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -69,7 +69,7 @@ LL |     const _BAD3: () = {\n LL |         intrinsics::assert_zero_valid::<&'static i32>();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ca6db350c75f4baa55b6c506006134ea51eef758", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n    |     -------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/assoc_const_generic_impl.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: erroneous constant encountered\n   --> $DIR/assoc_const_generic_impl.rs:14:18\n@@ -27,11 +27,11 @@ warning: any use of this value will cause an error\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n    |     -------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/assoc_const_generic_impl.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "fce8f051061466a28c2833fe54d64b6f0f53ded0", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -i8::MIN;\n    | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:5:19\n@@ -57,13 +57,13 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -i8::MIN;\n    | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -72,13 +72,13 @@ error: any use of this value will cause an error\n LL | pub const B: u8 = 200u8 + 200u8;\n    | ---------------   ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -87,13 +87,13 @@ error: any use of this value will cause an error\n LL | pub const C: u8 = 200u8 * 4;\n    | ---------------   ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -102,13 +102,13 @@ error: any use of this value will cause an error\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n    | ---------------   ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -117,11 +117,11 @@ error: any use of this value will cause an error\n LL | pub const E: u8 = [5u8][1];\n    | ---------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "16b912695a64c288f56389456970000a19b09748", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -i8::MIN;\n    | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:6:19\n@@ -48,13 +48,13 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -i8::MIN;\n    | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -63,13 +63,13 @@ error: any use of this value will cause an error\n LL | pub const B: i8 = A;\n    | ---------------   ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -78,13 +78,13 @@ error: any use of this value will cause an error\n LL | pub const C: u8 = A as u8;\n    | ---------------   ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -93,11 +93,11 @@ error: any use of this value will cause an error\n LL | pub const D: i8 = 50 - A;\n    | ---------------        ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "f83a2cbb1908ad682fefb4749d5b3c7c2cfc61b0", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | const FOO: u8 = [5u8][1];\n    | -------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err.rs:5:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: erroneous constant used\n   --> $DIR/const-err.rs:16:16\n@@ -34,11 +34,11 @@ warning: any use of this value will cause an error\n LL | const FOO: u8 = [5u8][1];\n    | -------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err.rs:5:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "84061e52d318ae5c2687bd0e3c1814da09d5ca10", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/conditional_array_execution.rs:12:20\n@@ -38,13 +38,13 @@ warning: any use of this value will cause an error\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -53,12 +53,12 @@ warning: erroneous constant used\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b6d0898bb9229e96fa2dab60eb9dd6075bf66f71", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -19,11 +19,11 @@ warning: any use of this value will cause an error\n LL | const NEG_NEG_128: i8 = -NEG_128;\n    | ---------------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow-2.rs:4:36\n    |\n LL | #![allow(unused_imports, warnings, const_err)]\n    |                                    ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "8e3028c50f31f0dd0a081b0a172b2f9ba60eaf05", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,13 +7,13 @@ LL |     (\n LL |      i8::MIN - 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:21:6\n@@ -109,13 +109,13 @@ LL |     (\n LL |      i8::MIN - 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -127,13 +127,13 @@ LL |     (\n LL |      i16::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -145,13 +145,13 @@ LL |     (\n LL |      i32::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,13 +163,13 @@ LL |     (\n LL |      i64::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -181,13 +181,13 @@ LL |     (\n LL |      u8::MIN - 1,\n    |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -198,13 +198,13 @@ LL | const VALS_U16: (u16,) = (\n LL |      u16::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -215,13 +215,13 @@ LL | const VALS_U32: (u32,) = (\n LL |      u32::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -233,11 +233,11 @@ LL |     (\n LL |      u64::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "b6dc85f416b17a73dd201f6154581223f6a62012", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,13 +7,13 @@ LL |     (\n LL |      i8::MAX + 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:21:6\n@@ -109,13 +109,13 @@ LL |     (\n LL |      i8::MAX + 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -127,13 +127,13 @@ LL |     (\n LL |      i16::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -145,13 +145,13 @@ LL |     (\n LL |      i32::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,13 +163,13 @@ LL |     (\n LL |      i64::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -181,13 +181,13 @@ LL |     (\n LL |      u8::MAX + 1,\n    |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -198,13 +198,13 @@ LL | const VALS_U16: (u16,) = (\n LL |      u16::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -215,13 +215,13 @@ LL | const VALS_U32: (u32,) = (\n LL |      u32::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -233,11 +233,11 @@ LL |     (\n LL |      u64::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "df66fe1e5dee56af6d622ee21cacb27c715db3af", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,13 +7,13 @@ LL |     (\n LL |      i8::MIN * 2,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:21:6\n@@ -109,13 +109,13 @@ LL |     (\n LL |      i8::MIN * 2,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -127,13 +127,13 @@ LL |     (\n LL |      i16::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -145,13 +145,13 @@ LL |     (\n LL |      i32::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,13 +163,13 @@ LL |     (\n LL |      i64::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -181,13 +181,13 @@ LL |     (\n LL |      u8::MAX * 2,\n    |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -198,13 +198,13 @@ LL | const VALS_U16: (u16,) = (\n LL |      u16::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -215,13 +215,13 @@ LL | const VALS_U32: (u32,) = (\n LL |      u32::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -233,11 +233,11 @@ LL |     (\n LL |      u64::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "67d290bbcaa49d0be512c1dee678ba57fd958435", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | const X: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-query-stack.rs:18:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-query-stack.rs:23:28\n@@ -24,9 +24,9 @@ error: erroneous constant used\n LL |     let x: &'static i32 = &X;\n    |                           ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n query stack during panic:\n #0 [mir_drops_elaborated_and_const_checked] elaborating drops for `main`\n@@ -40,13 +40,13 @@ warning: any use of this value will cause an error\n LL | const X: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-query-stack.rs:18:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -55,7 +55,7 @@ error: erroneous constant used\n LL |     let x: &'static i32 = &X;\n    |                           ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "de717899dd8fa9c510b2399bdc9b06b39b9c8514", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.64bit.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     --------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:30:43\n@@ -318,11 +318,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     --------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -331,11 +331,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -344,11 +344,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -357,11 +357,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -370,11 +370,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -383,11 +383,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -396,11 +396,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -409,11 +409,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -422,11 +422,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -435,11 +435,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -448,11 +448,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -461,11 +461,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -474,11 +474,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -487,11 +487,11 @@ error: any use of this value will cause an error\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -500,11 +500,11 @@ error: any use of this value will cause an error\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -513,11 +513,11 @@ error: any use of this value will cause an error\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -526,11 +526,11 @@ error: any use of this value will cause an error\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -539,11 +539,11 @@ error: any use of this value will cause an error\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -552,11 +552,11 @@ error: any use of this value will cause an error\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -565,11 +565,11 @@ error: any use of this value will cause an error\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -578,11 +578,11 @@ error: any use of this value will cause an error\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -591,11 +591,11 @@ error: any use of this value will cause an error\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -604,11 +604,11 @@ error: any use of this value will cause an error\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -617,11 +617,11 @@ error: any use of this value will cause an error\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -630,11 +630,11 @@ error: any use of this value will cause an error\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -643,11 +643,11 @@ error: any use of this value will cause an error\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -656,9 +656,9 @@ error: any use of this value will cause an error\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "6aacc6cffc97fd95c1a69006449654d2b918caa2", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -35,13 +35,13 @@ LL |     x(y)\n LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n    | --------------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -57,13 +57,13 @@ LL |     x(y)\n LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n    | --------------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -72,13 +72,13 @@ warning: erroneous constant used\n LL |     assert_eq!(Y, 4);\n    |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -88,12 +88,12 @@ warning: erroneous constant used\n LL |     assert_eq!(Z, 4);\n    |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3553a18d3883c71453e519d791d23a425bc8dd10", "filename": "src/test/ui/consts/const-eval/const_panic_stability.e2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: panic message is not a string literal\n LL |     panic!({ \"foo\" });\n    |            ^^^^^^^^^\n    |\n-   = note: `#[warn(non_fmt_panics)]` on by default\n    = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+   = note: `#[warn(non_fmt_panics)]` on by default\n help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!(\"{}\", { \"foo\" });"}, {"sha": "24428732a42b969a504d37cdcad780052e1e23f9", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -16,13 +16,13 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/erroneous-const.rs:15:17\n@@ -46,11 +46,11 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "0eea5648a64c9be05cde23e6198bf94d57d29bf9", "filename": "src/test/ui/consts/const-eval/erroneous-const2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -16,13 +16,13 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/erroneous-const2.rs:2:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/erroneous-const2.rs:15:17\n@@ -40,11 +40,11 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/erroneous-const2.rs:2:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "f3f6f2bb028defc9f9cb76fb5ea5109ec01d1e47", "filename": "src/test/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -40,9 +40,9 @@ error: erroneous constant used\n LL |     panic!(\"{:?}\", 0);\n    |            ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: erroneous constant used\n   --> $DIR/format.rs:2:20\n@@ -83,9 +83,9 @@ error: erroneous constant used\n LL |     panic!(\"{:?}\", 0);\n    |            ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -94,9 +94,9 @@ error: erroneous constant used\n LL |     panic!(\"{:?}\", 0);\n    |                    ^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -106,9 +106,9 @@ error: erroneous constant used\n LL |     println!(\"{:?}\", 0);\n    |              ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -117,8 +117,8 @@ error: erroneous constant used\n LL |     println!(\"{:?}\", 0);\n    |                      ^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3f4739c56f0285e2a727a8f0ec78999cb5ddab6a", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n    |     -------------                                           ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/index-out-of-bounds-never-type.rs:4:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: erroneous constant encountered\n   --> $DIR/index-out-of-bounds-never-type.rs:17:13\n@@ -27,11 +27,11 @@ warning: any use of this value will cause an error\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n    |     -------------                                           ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/index-out-of-bounds-never-type.rs:4:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "ceeaa1baece65ad578340931ff59258c57548398", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL |     const X: u32 = 0 - 1;\n    |     ------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n   --> $DIR/issue-43197.rs:13:24\n@@ -63,13 +63,13 @@ warning: any use of this value will cause an error\n LL |     const X: u32 = 0 - 1;\n    |     ------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -78,13 +78,13 @@ warning: any use of this value will cause an error\n LL |     const Y: u32 = foo(0 - 1);\n    |     ------------       ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -93,13 +93,13 @@ warning: erroneous constant used\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -109,12 +109,12 @@ warning: erroneous constant used\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c3a794d2fe3019b5934b458ee25ac10c06415556", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -14,13 +14,13 @@ warning: any use of this value will cause an error\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n    |     ----------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-44578.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -29,12 +29,12 @@ warning: erroneous constant used\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-44578.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "bd860197720591bd55a546212d745beecb21a2e1", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |     ----------------   ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of `foo::<()>` failed\n   --> $DIR/issue-50814-2.rs:19:6\n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |     ----------------   ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "c8e5a169ff97b704fe1dfad817d498a463699a4b", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |     -------------   ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of `foo::<i32>` failed\n   --> $DIR/issue-50814.rs:21:6\n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |     -------------   ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "f41fa1c1ee03d9f94c8389750e899d27254d8e76", "filename": "src/test/ui/consts/const-eval/partial_ptr_overwrite.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,11 +7,11 @@ LL | const PARTIAL_OVERWRITE: () = {\n LL |         *(ptr as *mut u8) = 123;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -25,9 +25,9 @@ LL | const PARTIAL_OVERWRITE: () = {\n LL |         *(ptr as *mut u8) = 123;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "d5f73dcd11f9bad2c69bdb0d3cb1b443dbd2fc69", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -53,13 +53,13 @@ LL |     0 - 1\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:43:28\n@@ -88,13 +88,13 @@ LL |     0 - 1\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -105,11 +105,11 @@ LL | const X: () = {\n LL |     let _x: &'static u32 = &overflow();\n    |                            ^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "423103276926b853f2fc16fc532f632648d3a27e", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -53,13 +53,13 @@ LL |     1 / 0\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:46:28\n@@ -89,13 +89,13 @@ LL |     1 / 0\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -107,11 +107,11 @@ LL | const X: () = {\n LL |     let _x: &'static i32 = &div_by_zero1();\n    |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "d5f73dcd11f9bad2c69bdb0d3cb1b443dbd2fc69", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -53,13 +53,13 @@ LL |     0 - 1\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:43:28\n@@ -88,13 +88,13 @@ LL |     0 - 1\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -105,11 +105,11 @@ LL | const X: () = {\n LL |     let _x: &'static u32 = &overflow();\n    |                            ^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "d1081f9c2caa31b6f0e7be7c9a34f9285100ec0d", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 1 warning emitted\n \n@@ -21,11 +21,11 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "93362a9375cc9c7872caaf32a4701ca1c4dfbe47", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 1 warning emitted\n \n@@ -21,11 +21,11 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "02feb6a7832cd7cc93c18b585b4ee00ceefb1d92", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,11 @@ error: any use of this value will cause an error\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: could not evaluate constant pattern\n   --> $DIR/ref_to_int_match.rs:7:14\n@@ -31,9 +31,9 @@ error: any use of this value will cause an error\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "02feb6a7832cd7cc93c18b585b4ee00ceefb1d92", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,11 @@ error: any use of this value will cause an error\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: could not evaluate constant pattern\n   --> $DIR/ref_to_int_match.rs:7:14\n@@ -31,9 +31,9 @@ error: any use of this value will cause an error\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ddfe1d5909fa03a4af93d7c8867dac50587e636e", "filename": "src/test/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -15,11 +15,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:31:1\n@@ -137,11 +137,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -150,11 +150,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,11 +163,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -176,11 +176,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -189,9 +189,9 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "930f8130bc347f5cfd8b41a6a43636b5c394963f", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -15,11 +15,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:31:1\n@@ -137,11 +137,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -150,11 +150,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,11 +163,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -176,11 +176,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -189,9 +189,9 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "66b993764e933a8422b978774c1a136023e8f8bf", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -48,11 +48,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:39\n@@ -171,11 +171,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -184,11 +184,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -197,9 +197,9 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -208,11 +208,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -221,7 +221,7 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "cbf120a397ecfbeb64fed373f7433e1f35acbc17", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -48,11 +48,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:39\n@@ -171,11 +171,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -184,11 +184,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -197,9 +197,9 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -208,11 +208,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -221,7 +221,7 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "2d4218a94f549f421bcba0c4428ca18d2a09f8b3", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -26,11 +26,11 @@ error: any use of this value will cause an error\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:46:1\n@@ -320,11 +320,11 @@ error: any use of this value will cause an error\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -333,11 +333,11 @@ error: any use of this value will cause an error\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -346,11 +346,11 @@ error: any use of this value will cause an error\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -359,11 +359,11 @@ error: any use of this value will cause an error\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -372,9 +372,9 @@ error: any use of this value will cause an error\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -383,9 +383,9 @@ error: any use of this value will cause an error\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -394,7 +394,7 @@ error: any use of this value will cause an error\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "9997b8fe5f225d9a5fefeca677a884b3d525e0eb", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -26,11 +26,11 @@ error: any use of this value will cause an error\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:46:1\n@@ -320,11 +320,11 @@ error: any use of this value will cause an error\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -333,11 +333,11 @@ error: any use of this value will cause an error\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -346,11 +346,11 @@ error: any use of this value will cause an error\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -359,11 +359,11 @@ error: any use of this value will cause an error\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -372,9 +372,9 @@ error: any use of this value will cause an error\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -383,9 +383,9 @@ error: any use of this value will cause an error\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -394,7 +394,7 @@ error: any use of this value will cause an error\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "cdc1e9d97f4c6efd99fe9edced2aede051ae3fad", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const FOO: i32 = [][0];\n    | --------------   ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -17,7 +17,7 @@ error: any use of this value will cause an error\n LL | const FOO: i32 = [][0];\n    | --------------   ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "dd948f9adb3794488edd227210904d8a482b5e9c", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              this code causes undefined behavior when executed\n    |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `#[warn(invalid_value)]` on by default\n    = note: the `!` type has no valid value\n+   = note: `#[warn(invalid_value)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14"}, {"sha": "dd948f9adb3794488edd227210904d8a482b5e9c", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              this code causes undefined behavior when executed\n    |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `#[warn(invalid_value)]` on by default\n    = note: the `!` type has no valid value\n+   = note: `#[warn(invalid_value)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14"}, {"sha": "b57615e9a7cf09a8a57808cad314b7e04fdfce8a", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n@@ -18,8 +18,8 @@ error: any use of this value will cause an error\n LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "908fef7265df1fe3df4a73ebabe5a450efe30d8b", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -45,9 +45,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:33:34\n@@ -184,9 +184,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -198,9 +198,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -212,9 +212,9 @@ LL |             const _: () = assert!($a == $b);\n LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -226,9 +226,9 @@ LL |             const _: () = assert!($a == $b);\n LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -240,9 +240,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -254,9 +254,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -268,9 +268,9 @@ LL |             const _: () = assert!($a == $b);\n LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -282,7 +282,7 @@ LL |             const _: () = assert!($a == $b);\n LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "56645980b057343904e13ae6210d354427c3ecdb", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const LEN: usize = ONE - TWO;\n    | ----------------   ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-len-underflow-separate-spans.rs:12:17\n@@ -24,7 +24,7 @@ error: any use of this value will cause an error\n LL | const LEN: usize = ONE - TWO;\n    | ----------------   ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "389413310036117ec1719f4628aa4269e55ad8a3", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const TEST: u8 = MY_STATIC;\n    | --------------   ^^^^^^^^^ constant accesses static\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n warning: skipping const checks\n    |\n@@ -25,7 +25,7 @@ error: any use of this value will cause an error\n LL | const TEST: u8 = MY_STATIC;\n    | --------------   ^^^^^^^^^ constant accesses static\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "0ed09ff8341674083fc618bbbcf2c3dbacf5f8e1", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n    | ------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n@@ -26,9 +26,9 @@ error: any use of this value will cause an error\n LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n    | ------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -37,7 +37,7 @@ error: any use of this value will cause an error\n LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n    | -------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "167564549740b4386861857000073f0230f2f76f", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const BAR: u32 = FOO[5];\n    | --------------   ^^^^^^ index out of bounds: the length is 3 but the index is 5\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -17,7 +17,7 @@ error: any use of this value will cause an error\n LL | const BAR: u32 = FOO[5];\n    | --------------   ^^^^^^ index out of bounds: the length is 3 but the index is 5\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "22348272275203f3a0c56623773c2733841cbb02", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: to use a constant of type `CustomEq` in a pattern, the constant's initi\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^\n    |\n-   = note: `#[warn(nontrivial_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "ddc576ced8f360e7ea3bcccf47c9d99fa791de39", "filename": "src/test/ui/consts/const_in_pattern/incomplete-slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: to use a constant of type `E` in a pattern, `E` must be annotated with\n LL |         E_SL => {}\n    |         ^^^^\n    |\n-   = note: `#[warn(indirect_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: `#[warn(indirect_structural_match)]` on by default\n \n error[E0004]: non-exhaustive patterns: `&_` not covered\n   --> $DIR/incomplete-slice.rs:9:11"}, {"sha": "731ef509ccad4ef1a03c7c8ac50e1e3de45c4931", "filename": "src/test/ui/consts/const_in_pattern/issue-44333.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: function pointers and unsized pointers in patterns behave unpredictably\n LL |         FOO => println!(\"foo\"),\n    |         ^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/70861>\n note: the lint level is defined here\n   --> $DIR/issue-44333.rs:3:9\n    |\n LL | #![warn(pointer_structural_match)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/70861>\n \n warning: function pointers and unsized pointers in patterns behave unpredictably and should not be relied upon. See https://github.com/rust-lang/rust/issues/70861 for details.\n   --> $DIR/issue-44333.rs:21:9"}, {"sha": "6601983499779a0d59f9b56ae3d359fd54f1895f", "filename": "src/test/ui/consts/const_in_pattern/reject_non_structural.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -64,13 +64,13 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!(\"whoops\"), };\n    |                             ^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n note: the lint level is defined here\n   --> $DIR/reject_non_structural.rs:12:9\n    |\n LL | #![warn(indirect_structural_match)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n \n error: aborting due to 10 previous errors; 1 warning emitted\n "}, {"sha": "e957a43a13da5d53df93a4cda62574df6b6cff6a", "filename": "src/test/ui/consts/const_in_pattern/warn_corner_cases.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: to use a constant of type `NoDerive` in a pattern, the constant's initi\n LL |     match None { Some(_) => panic!(\"whoops\"), INDEX => dbg!(INDEX), };\n    |                                               ^^^^^\n    |\n-   = note: `#[warn(nontrivial_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n \n warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:32:47"}, {"sha": "0f7d93a3be3eddf1ec38a3213a72eb0e3673125c", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,9 +7,9 @@ LL |     let mut x = 0;\n LL |     while x != 1000 {\n    |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -23,7 +23,7 @@ LL |     let mut x = 0;\n LL |     while x != 1000 {\n    |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "a2d881f396e2faedaf6116909b59309207193d12", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -12,11 +12,11 @@ LL | const INVALID_PTR_IN_INT: () = unsafe {\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/detect-extra-ub.rs:22:30\n@@ -80,11 +80,11 @@ LL | const INVALID_PTR_IN_INT: () = unsafe {\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -96,11 +96,11 @@ LL |     let x: &[u8] = &[0; 32];\n LL |     let _x: (usize, usize) = transmute(x);\n    |                              ^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -111,7 +111,7 @@ LL | const UNALIGNED_READ: () = {\n LL |     INNER;\n    |     ^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "f4d69c801abddbe731a825c9886464a6294cab7e", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -15,9 +15,9 @@ error: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -29,7 +29,7 @@ error: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "69b63d3ff92428a6b06875b747b683cf5a80fb05", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -15,9 +15,9 @@ error: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -29,7 +29,7 @@ error: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "b672f5690da3e4203e390685bece6fe1cd6acfc5", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -19,9 +19,9 @@ error: erroneous constant used\n LL | const fn foo() { (||{})() }\n    |                  ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 3 previous errors\n \n@@ -33,7 +33,7 @@ error: erroneous constant used\n LL | const fn foo() { (||{})() }\n    |                  ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "5320da005620c89f4088e50b896025025dded7e0", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -28,9 +28,9 @@ error: erroneous constant used\n LL |     panic!(&1);\n    |            ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 4 previous errors\n \n@@ -41,7 +41,7 @@ error: erroneous constant used\n LL |     panic!(&1);\n    |            ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "bfd5421a93c558cb36131c2dbbcc4cb3d5b6c403", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -14,11 +14,11 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL | const C: () = unsafe {\n    | -----------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -39,9 +39,9 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL | const C: () = unsafe {\n    | -----------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "c64107ee26e184037e51ab57b667e4e32653c2dd", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -32,11 +32,11 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n LL |     const F: u32 = (U::X, 42).1;\n    |     ------------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/assoc_const.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "950c3db1b7e460488cc544cd8bc24a892ac7cdb7", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -14,11 +14,11 @@ warning: any use of this value will cause an error\n LL |     const F: u32 = 100 / U::X;\n    |     ------------   ^^^^^^^^^^ attempt to divide `100_u32` by zero\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/assoc_const_2.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "03359e62264e59be69cfd0878f46e4c9716a282e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -57,13 +57,13 @@ LL |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL |     FOO.fetch_add(1, Ordering::Relaxed)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -75,13 +75,13 @@ LL |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL |     unsafe { *(&FOO as *const _ as *const usize) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -90,11 +90,11 @@ warning: any use of this value will cause an error\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    | -------------------            ^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "f66a96ae3f1ee9cd7a47a8c70dcd44886ba6ce98", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -40,13 +40,13 @@ LL | const U8_MUT2: &u8 = {\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n@@ -62,13 +62,13 @@ LL | const U8_MUT3: &u8 = {\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n@@ -165,13 +165,13 @@ LL | const U8_MUT2: &u8 = {\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -182,11 +182,11 @@ LL | const U8_MUT3: &u8 = {\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "f919c36431035ad95002c427ef4b605f3e50022f", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -40,13 +40,13 @@ LL | const U8_MUT2: &u8 = {\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n@@ -62,13 +62,13 @@ LL | const U8_MUT3: &u8 = {\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n@@ -165,13 +165,13 @@ LL | const U8_MUT2: &u8 = {\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -182,11 +182,11 @@ LL | const U8_MUT3: &u8 = {\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "df9a8bf51b0eb769f8051169397a3017fd6d1a00", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -24,11 +24,11 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:62:27\n@@ -51,11 +51,11 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -64,9 +64,9 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "65fb2a69d8f9258bd8b86d9fc1126db04b98d0f5", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,8 +6,8 @@ LL | const fn f<T>(x: T) {\n LL |     f(x);\n    |     ---- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/recursive.rs:4:5\n@@ -23,9 +23,9 @@ LL |     f(x);\n LL | const X: () = f(1);\n    | -----------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error; 1 warning emitted\n \n@@ -44,7 +44,7 @@ LL |     f(x);\n LL | const X: () = f(1);\n    | -----------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "3855b5f2a68e007473bda434d1dbd62090a836bf", "filename": "src/test/ui/consts/refs_check_const_eq-issue-88384.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/refs_check_const_eq-issue-88384.rs:10:21"}, {"sha": "10bebe8ebc55ddd9f715e7f8dfb9fdfea49c9d4e", "filename": "src/test/ui/consts/trait_specialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "0848fbf1968dd3581e9b92beb1f5136e23ee5889", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -137,9 +137,9 @@ LL |     hint_unreachable()\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n    |     -------------------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: erroneous constant used\n   --> $DIR/uninhabited-const-issue-61744.rs:19:10\n@@ -290,7 +290,7 @@ LL |     hint_unreachable()\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n    |     -------------------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "dcdf8f8430ff3a2c644f2d691070fbab1f85c05c", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,8 +7,8 @@ LL |     Bar(u8),\n LL |     Void(Void),\n    |     ^^^^\n    |\n-   = note: `-W dead-code` implied by `-W unused`\n    = note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n+   = note: `-W dead-code` implied by `-W unused`\n \n warning: 1 warning emitted\n "}, {"sha": "512b870fa4b6c323fe117cefe2b3547477b289a5", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -13,12 +13,12 @@ LL |     field3: (),\n LL |     field4: (),\n    |     ^^^^^^\n    |\n+   = note: `Whatever` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n note: the lint level is defined here\n   --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:1:11\n    |\n LL | #![forbid(dead_code)]\n    |           ^^^^^^^^^\n-   = note: `Whatever` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n \n error: aborting due to previous error\n "}, {"sha": "0ad800c398180af7c93fa4781578c8e001f0ee1b", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: `Clone` can't be derived on this `#[repr(packed)]` struct with type or co\n LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                ^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `PartialEq` can't be derived on this `#[repr(packed)]` struct with type or const parameters\n@@ -52,13 +52,13 @@ error: `Clone` can't be derived on this `#[repr(packed)]` struct with type or co\n LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                ^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -68,13 +68,13 @@ error: `PartialEq` can't be derived on this `#[repr(packed)]` struct with type o\n LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                                ^^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -84,13 +84,13 @@ error: `Hash` can't be derived on this `#[repr(packed)]` struct that does not de\n LL | #[derive(Default, Hash)]\n    |                   ^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -100,12 +100,12 @@ error: `Debug` can't be derived on this `#[repr(packed)]` struct that does not d\n LL | #[derive(Debug, Default)]\n    |          ^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e16625136acae2bc970d95cf63f90dcfccf40e5b", "filename": "src/test/ui/destructuring-assignment/warn-unused-duplication.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fwarn-unused-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fwarn-unused-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fwarn-unused-duplication.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ warning: value assigned to `a` is never read\n LL |     (a, a) = (0, 1);\n    |      ^\n    |\n+   = help: maybe it is overwritten before being read?\n note: the lint level is defined here\n   --> $DIR/warn-unused-duplication.rs:3:9\n    |\n LL | #![warn(unused_assignments)]\n    |         ^^^^^^^^^^^^^^^^^^\n-   = help: maybe it is overwritten before being read?\n \n warning: 1 warning emitted\n "}, {"sha": "21f957ab549a3832f1769c824d27a21992ae9d88", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -105,9 +105,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | type H = Fn(u8) -> (u8)::Output;\n    |          ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `#[warn(bare_trait_objects)]` on by default\n help: use `dyn`\n    |\n LL | type H = <dyn Fn(u8) -> (u8)>::Output;"}, {"sha": "8fe38bf697287f71c2be37e9151fcb4a22fd90ca", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -24,8 +24,8 @@ LL |     fn bar(self: &mut Self) {\n LL |         (&mut self).bar();\n    |         ----------------- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:16:9"}, {"sha": "89aded9134f9f95bb46e555f6941b83e4655c2ac", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub mod dyn {\n    |             ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n note: the lint level is defined here\n   --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:11:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n   --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:17:20"}, {"sha": "6bafff9192a3649010ee52905a63d6a6ba0942c7", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: trait objects without an explicit `dyn` are deprecated\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |                 ^^^^^^^^^\n    |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n note: the lint level is defined here\n   --> $DIR/dyn-2018-edition-lint.rs:2:8\n    |\n LL | #[deny(bare_trait_objects)]\n    |        ^^^^^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {"}, {"sha": "0bb764d712e23ba2c8cbd4ea6e24e0a8fecfd7bf", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |         <fmt::Debug>::fmt(self, f)\n    |          ^^^^^^^^^^\n    |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n note: the lint level is defined here\n   --> $DIR/dyn-angle-brackets.rs:4:9\n    |\n LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n LL |         <dyn fmt::Debug>::fmt(self, f)"}, {"sha": "612dd17e71efc24b898223d395d91ff0c108afeb", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,14 +4,14 @@ error: type annotations needed\n LL |     let _ = y.is_null();\n    |               ^^^^^^^\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n note: the lint level is defined here\n   --> $DIR/edition-raw-pointer-method-2015.rs:5:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(tyvar_behind_raw_pointer)]` implied by `#[deny(warnings)]`\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n \n error: aborting due to previous error\n "}, {"sha": "01d0d5a6b48b55b27e26e9b45b579e88c40d4bae", "filename": "src/test/ui/empty/empty-attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fempty%2Fempty-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fempty%2Fempty-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-attributes.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: unused attribute\n LL | #[repr()]\n    | ^^^^^^^^^ help: remove this attribute\n    |\n+   = note: attribute `repr` with an empty list has no effect\n note: the lint level is defined here\n   --> $DIR/empty-attributes.rs:3:9\n    |\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: attribute `repr` with an empty list has no effect\n \n error: unused attribute\n   --> $DIR/empty-attributes.rs:14:1"}, {"sha": "9b1505b5c468d2cfb0b6acff2dc96e0df62fd962", "filename": "src/test/ui/enum-discriminant/discriminant_size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `repr128` is incomplete and may not be safe to use and/or c\n LL | #![feature(core_intrinsics, repr128)]\n    |                             ^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "fc7bbd06284346576d84c927910dee9e6576440c", "filename": "src/test/ui/enum-discriminant/issue-43398.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-43398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-43398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-43398.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `repr128` is incomplete and may not be safe to use and/or c\n LL | #![feature(repr128)]\n    |            ^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "ac93badf2156b577c3a75d7eac36ee26ccffe911", "filename": "src/test/ui/enum-discriminant/issue-70509-partial_eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `repr128` is incomplete and may not be safe to use and/or c\n LL | #![feature(repr128, arbitrary_enum_discriminant)]\n    |            ^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "da8d75c11aff273fdb3604465f67b91cf4fdb4da", "filename": "src/test/ui/enum-discriminant/repr128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: the feature `repr128` is incomplete and may not be safe to use and/or c\n LL | #![feature(repr128, core_intrinsics, discriminant_kind)]\n    |            ^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "f79f7a043d6886c37cddeadf8a9d525f39f50ebe", "filename": "src/test/ui/enum/enum-discrim-too-small2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: literal out of range for `i8`\n LL |     Ci8 = 223,\n    |           ^^^\n    |\n+   = note: the literal `223` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n note: the lint level is defined here\n   --> $DIR/enum-discrim-too-small2.rs:1:9\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = note: the literal `223` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using the type `u8` instead\n \n error: literal out of range for `i16`\n   --> $DIR/enum-discrim-too-small2.rs:15:12"}, {"sha": "6e48f9582f1c050a8980f2472f12d4724e2100dd", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,14 +4,14 @@ warning: taking a mutable reference to a `const` item\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^\n    |\n-   = note: `#[warn(const_item_mutation)]` on by default\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: `const` item defined here\n   --> $DIR/E0017.rs:2:1\n    |\n LL | const C: i32 = 2;\n    | ^^^^^^^^^^^^\n+   = note: `#[warn(const_item_mutation)]` on by default\n \n error[E0764]: mutable references are not allowed in the final value of constants\n   --> $DIR/E0017.rs:5:30"}, {"sha": "b51aa263d5e1cc6f9215faecd376908319e07a49", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,14 +4,14 @@ warning: taking a mutable reference to a `const` item\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^\n    |\n-   = note: `#[warn(const_item_mutation)]` on by default\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: `const` item defined here\n   --> $DIR/E0388.rs:2:1\n    |\n LL | const C: i32 = 2;\n    | ^^^^^^^^^^^^\n+   = note: `#[warn(const_item_mutation)]` on by default\n \n error[E0764]: mutable references are not allowed in the final value of constants\n   --> $DIR/E0388.rs:4:30"}, {"sha": "12ecead13de5f4d544c47b5c6b2b3fcc4a4870fe", "filename": "src/test/ui/error-codes/E0520.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0520]: `fly` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/E0520.rs:17:5"}, {"sha": "b759399a940bbe3bb0ca736e4ea694336487eb04", "filename": "src/test/ui/error-codes/E0771.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -12,8 +12,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "08eb8cfac49ce0679297c21e38e62c3afaa406be", "filename": "src/test/ui/errors/issue-89280-emitter-overflow-splice-lines.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -8,9 +8,9 @@ LL | |\n LL | |     )) {}\n    | |_____^\n    |\n-   = note: `#[warn(anonymous_parameters)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+   = note: `#[warn(anonymous_parameters)]` on by default\n help: try naming the parameter or explicitly ignoring it\n    |\n LL ~     fn test(x: u32, _: ("}, {"sha": "c4bba3cb1a8a0366dbec17347502a8109e6888ce", "filename": "src/test/ui/expr/if/if-let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -9,9 +9,9 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |______- in this macro invocation\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `if let` pattern"}, {"sha": "f20ee158ac4334288255a14c4ad23226ae3eecbb", "filename": "src/test/ui/extern/extern-no-mangle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,12 +7,12 @@ LL |     #[no_mangle]\n LL |     let x = 0_u8;\n    |     ------------- not a free function, impl method or static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n note: the lint level is defined here\n   --> $DIR/extern-no-mangle.rs:1:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: `#[no_mangle]` has no effect on a foreign static\n   --> $DIR/extern-no-mangle.rs:11:5"}, {"sha": "5f0aaf9251fb29f29a9edc971457f3055bcbfe43", "filename": "src/test/ui/feature-gates/bench.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: use of unstable library feature 'test': `bench` is a part of custom test\n LL | #[bench]\n    |   ^^^^^\n    |\n-   = note: `#[deny(soft_unstable)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n+   = note: `#[deny(soft_unstable)]` on by default\n \n error: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n   --> $DIR/bench.rs:7:5"}, {"sha": "308de2692930d26f1605f45ab3b29b966b365a12", "filename": "src/test/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n LL | fn avg<T=i32>(_: T) {}\n    |        ^^^^^\n    |\n-   = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+   = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:8:6"}, {"sha": "4d79ce3c6594a68baf53e7b87104358651c29429", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,10 +4,10 @@ warning: unknown lint: `non_exhaustive_omitted_patterns`\n LL | #![deny(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unknown_lints)]` on by default\n    = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `non_exhaustive_omitted_patterns`\n   --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1"}, {"sha": "5b1270a19845fbd9902f273c787601a3420adca9", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -25,9 +25,9 @@ LL |\n LL | #[repr(simd)]\n    |        ^^^^\n    |\n-   = note: `#[deny(conflicting_repr_hints)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n+   = note: `#[deny(conflicting_repr_hints)]` on by default\n \n error: aborting due to 3 previous errors\n "}, {"sha": "751da87cc0d0027789a80c94f6477313afe948e5", "filename": "src/test/ui/feature-gates/feature-gate-strict_provenance.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,10 +4,10 @@ warning: unknown lint: `fuzzy_provenance_casts`\n LL | #![deny(fuzzy_provenance_casts)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unknown_lints)]` on by default\n    = note: the `fuzzy_provenance_casts` lint is unstable\n    = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n    = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `lossy_provenance_casts`\n   --> $DIR/feature-gate-strict_provenance.rs:7:1"}, {"sha": "b4d6aa658e1bd181cfe12dfb72d6ef2e96226efb", "filename": "src/test/ui/feature-gates/feature-gate-test_unstable_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: unknown lint: `test_unstable_lint`\n LL | #![allow(test_unstable_lint)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unknown_lints)]` on by default\n    = note: the `test_unstable_lint` lint is unstable\n    = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `test_unstable_lint`\n   --> $DIR/feature-gate-test_unstable_lint.rs:4:1"}, {"sha": "5a645cf4ef98782af41dd7d123569fd61c07a117", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -12,9 +12,9 @@ error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n LL |     #[inline = \"2100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n \n error: `start` attribute can only be used on functions\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:119:1"}, {"sha": "1b1cf6792433357251e338d3efe1a12a16a0cd29", "filename": "src/test/ui/for-loop-while/while-let-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -9,9 +9,9 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |______- in this macro invocation\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the loop will never exit\n    = help: consider instead using a `loop { ... }` with a `let` inside it\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `while let` pattern"}, {"sha": "a8fb100a74960c3efc4f19c36101a872d33b2a39", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,25 +4,25 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn f(u8) {}\n    |          ^^ help: try naming the parameter or explicitly ignoring it: `_: u8`\n    |\n-   = note: `#[warn(anonymous_parameters)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+   = note: `#[warn(anonymous_parameters)]` on by default\n \n error: this attribute can only be applied at the crate level\n   --> $DIR/future-incompatible-lint-group.rs:13:12\n    |\n LL |     #![doc(test(some_test))]\n    |            ^^^^^^^^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n note: the lint level is defined here\n   --> $DIR/future-incompatible-lint-group.rs:3:9\n    |\n LL | #![deny(future_incompatible)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(future_incompatible)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "30a6732f75956d40042bbc34125fb9cbfb3060a3", "filename": "src/test/ui/generator/issue-52398.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,8 +6,8 @@ LL | |         A.test(yield);\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: unused generator that must be used\n   --> $DIR/issue-52398.rs:24:5"}, {"sha": "29aca94408a82174811f7edbbf976cc8ae58d9c0", "filename": "src/test/ui/generator/issue-57084.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -9,8 +9,8 @@ LL | |         }\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "b911b6661909a1fcb042a5bf467562130a42a3d3", "filename": "src/test/ui/generator/match-bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,8 +10,8 @@ LL | |         }\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "e83dbf833bfa747de2eead4c79022333b5f07411", "filename": "src/test/ui/generator/reborrow-mut-upvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,8 +10,8 @@ LL | |         *bar = 2;\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "5cb43067fee6bf067092a349e4dcb2ab332b671f", "filename": "src/test/ui/generator/too-live-local-in-immovable-gen.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,8 +10,8 @@ LL | |             let _ = &a;\n LL | |         };\n    | |__________^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "c9e1ab722d47ff8d2931dc1dd25c4d1242492620", "filename": "src/test/ui/generator/yield-in-args-rev.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,8 +7,8 @@ LL | |         foo(yield, &b);\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "8587e1dc663bc9e4a7e85aa487fbfff02489367b", "filename": "src/test/ui/generator/yield-in-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,8 +10,8 @@ LL | |         }\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "07de24662cf2e4034f18b0b76da77698fe58610b", "filename": "src/test/ui/generator/yield-in-initializer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,8 +10,8 @@ LL | |         }\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "fe10477bf7380b17a845a010990b29cadef6cd09", "filename": "src/test/ui/generator/yield-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,8 +7,8 @@ LL | |         yield b;\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "11c4ebf604e74cd1e246670e6d187bae56459056", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0277]: can't compare `Foo` with `Foo`\n   --> $DIR/issue-87429-specialization.rs:20:31"}, {"sha": "727b9e6bec8e6aa01587077b370d4b2bf80dd4bc", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -9,8 +9,8 @@ LL | |     T: Bar<&'b isize>,\n LL |       no_hrtb(&mut t);\n    |       --------------- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n warning: function cannot return without recursing\n   --> $DIR/hrtb-perfect-forwarding.rs:25:1"}, {"sha": "bde8362fdf81e64b8082ba4e8035d246a359e2ce", "filename": "src/test/ui/impl-trait/equality-rpass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "1841b8e5dcd0849d7d659594f5081fc21a661279", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5"}, {"sha": "e399a61023d1eebfcdcee33b06badb4e71b5ad63", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18"}, {"sha": "d2dbd8c620546b92fd598617231ce8f3c71c9483", "filename": "src/test/ui/impl-trait/issue-100075-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-100075-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,8 +7,8 @@ LL | fn opaque<T>(t: T) -> impl Sized {\n LL |     opaque(Some(t))\n    |     --------------- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/issue-100075-2.rs:1:23"}, {"sha": "173fca63fa01f3d99b562389fd090077683cbe49", "filename": "src/test/ui/impl-trait/issue-87450.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,8 +7,8 @@ LL | fn foo() -> impl Fn() {\n LL |     wrap(wrap(wrap(wrap(wrap(wrap(wrap(foo())))))))\n    |                                        ----- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n error[E0720]: cannot resolve opaque type\n   --> $DIR/issue-87450.rs:5:13"}, {"sha": "2e7c7ca40ddb380d18ca6f69b8ff208884053f17", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -301,9 +301,9 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n LL | impl <T = impl Debug> T {}\n    |       ^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+   = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n   --> $DIR/where-allowed.rs:241:36"}, {"sha": "2c1965ac0a47aee30d4fdd8844cac382d545db1d", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,7 +4,6 @@ error: macro-expanded `macro_export` macros from the current crate cannot be ref\n LL |     use exported;\n    |         ^^^^^^^^\n    |\n-   = note: `#[deny(macro_expanded_macro_exports_accessed_by_absolute_paths)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #52234 <https://github.com/rust-lang/rust/issues/52234>\n note: the macro is defined here\n@@ -17,6 +16,7 @@ LL | |     }\n ...\n LL |   define_exported!();\n    |   ------------------ in this macro invocation\n+   = note: `#[deny(macro_expanded_macro_exports_accessed_by_absolute_paths)]` on by default\n    = note: this error originates in the macro `define_exported` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths"}, {"sha": "3dea09e7f52823ef7de452073f5b333a33634d5f", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: type annotations needed\n LL |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n-   = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n+   = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "ecbf2641bec45eac118f94eff816ef67ea972799", "filename": "src/test/ui/inference/inference_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,11 @@ warning: an associated function with this name may be added to the standard libr\n LL |     assert_eq!('x'.ipu_flatten(), 1);\n    |                    ^^^^^^^^^^^\n    |\n-   = note: `#[warn(unstable_name_collisions)]` on by default\n    = warning: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method\n    = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n+   = note: `#[warn(unstable_name_collisions)]` on by default\n \n warning: an associated function with this name may be added to the standard library in the future\n   --> $DIR/inference_unstable.rs:19:20"}, {"sha": "5dca4c2f01d56c0e2001fed5ce145a01a8332c0a", "filename": "src/test/ui/issues/issue-11958.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-11958.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-11958.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11958.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,17 +4,17 @@ warning: value assigned to `x` is never read\n LL |     let _thunk = Box::new(move|| { x = 2; });\n    |                                    ^\n    |\n-   = note: `#[warn(unused_assignments)]` on by default\n    = help: maybe it is overwritten before being read?\n+   = note: `#[warn(unused_assignments)]` on by default\n \n warning: unused variable: `x`\n   --> $DIR/issue-11958.rs:8:36\n    |\n LL |     let _thunk = Box::new(move|| { x = 2; });\n    |                                    ^\n    |\n-   = note: `#[warn(unused_variables)]` on by default\n    = help: did you mean to capture by reference instead?\n+   = note: `#[warn(unused_variables)]` on by default\n \n warning: 2 warnings emitted\n "}, {"sha": "f0ff2cafd4466126336f2ad11d8ce8b3814e4817", "filename": "src/test/ui/issues/issue-1460.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1460.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: unused closure that must be used\n LL |     {|i: u32| if 1 == i { }};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: closures are lazy and do nothing unless called\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "5eb5e0864ad1990982351f051b2ddf877034e8c5", "filename": "src/test/ui/issues/issue-16250.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,19 +4,19 @@ error: `extern` block uses type `Foo`, which is not FFI-safe\n LL |     pub fn foo(x: (Foo));\n    |                    ^^^ not FFI-safe\n    |\n-note: the lint level is defined here\n-  --> $DIR/issue-16250.rs:1:9\n-   |\n-LL | #![deny(warnings)]\n-   |         ^^^^^^^^\n-   = note: `#[deny(improper_ctypes)]` implied by `#[deny(warnings)]`\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n   --> $DIR/issue-16250.rs:3:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/issue-16250.rs:1:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(improper_ctypes)]` implied by `#[deny(warnings)]`\n \n error: aborting due to previous error\n "}, {"sha": "ca8e9a1bed3374d3d4db50e4ce176d12a61df5ce", "filename": "src/test/ui/issues/issue-16256.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16256.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: unused closure that must be used\n LL |     |c: u8| buf.push(c);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: closures are lazy and do nothing unless called\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "f398a5da3e93a03609f2bf35380a126f326b485d", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n    |                 ^^^^^^\n    |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `#[warn(bare_trait_objects)]` on by default\n help: use `dyn`\n    |\n LL |     let x: u8 = <dyn BitXor>::bitor(0 as u8, 0 as u8);"}, {"sha": "970e3184710499c47b5b1a369a5156917307e24c", "filename": "src/test/ui/issues/issue-47094.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47094.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error[E0566]: conflicting representation hints\n LL | #[repr(C, u8)]\n    |        ^  ^^\n    |\n-   = note: `#[deny(conflicting_repr_hints)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n+   = note: `#[deny(conflicting_repr_hints)]` on by default\n \n error[E0566]: conflicting representation hints\n   --> $DIR/issue-47094.rs:8:8"}, {"sha": "7143fb4d6e140e95e19718d28af389dbe6fb3e22", "filename": "src/test/ui/issues/issue-47725.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -13,12 +13,12 @@ LL | #[link_name = \"foo\"]\n LL | struct Foo;\n    | ----------- not a foreign function or static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n note: the lint level is defined here\n   --> $DIR/issue-47725.rs:1:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: attribute should be applied to a foreign function or static\n   --> $DIR/issue-47725.rs:8:1"}, {"sha": "e185ecdda238f16954c6e123d778d6fedd288305", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,11 +4,6 @@ error: the trait `X` cannot be made into an object\n LL |     fn foo(&self) where Self: Trait;\n    |        ^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/issue-50781.rs:1:9\n-   |\n-LL | #![deny(where_clauses_object_safety)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -19,6 +14,11 @@ LL | trait X {\n LL |     fn foo(&self) where Self: Trait;\n    |        ^^^ ...because method `foo` references the `Self` type in its `where` clause\n    = help: consider moving `foo` to another trait\n+note: the lint level is defined here\n+  --> $DIR/issue-50781.rs:1:9\n+   |\n+LL | #![deny(where_clauses_object_safety)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8bd94a041d0c24fe7fa00f9145271374ff59abae", "filename": "src/test/ui/issues/issue-54044.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,12 +7,12 @@ LL | #[cold]\n LL | struct Foo;\n    | ----------- not a function definition\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n note: the lint level is defined here\n   --> $DIR/issue-54044.rs:1:9\n    |\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n error: attribute should be applied to a function definition\n   --> $DIR/issue-54044.rs:9:5"}, {"sha": "403844c726fa2aaee332da47ee58e4bbfb7dc19a", "filename": "src/test/ui/issues/issue-55380.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55380.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "d2314626d3e88c2c65506c28658d6fb640f3a7f2", "filename": "src/test/ui/issues/issue-58734.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     Trait::nonexistent(());\n    |     ^^^^^\n    |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `#[warn(bare_trait_objects)]` on by default\n help: use `dyn`\n    |\n LL |     <dyn Trait>::nonexistent(());"}, {"sha": "ecf1ae758dde35359c0df88803f0302be201ca6b", "filename": "src/test/ui/issues/issue-60622.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,14 +7,14 @@ LL |     fn a(&self) {}\n LL |     b.a::<'_, T>();\n    |           ^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n note: the lint level is defined here\n   --> $DIR/issue-60622.rs:1:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(late_bound_lifetime_arguments)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n \n error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-60622.rs:10:7"}, {"sha": "5468837a305911cd0b23719647769206a0f26bf3", "filename": "src/test/ui/issues/issue-72278.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-72278.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-72278.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72278.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,9 +7,9 @@ LL |     fn func<'a, U>(&'a self) -> U {\n LL |     S.func::<'a, U>()\n    |              ^^\n    |\n-   = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+   = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "6de22d6bf79fce9b52503ba5458cb376bf330712", "filename": "src/test/ui/issues/issue-78957.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -10,12 +10,12 @@ error: attribute should be applied to a function definition\n LL | pub struct Bar<#[cold] const N: usize>;\n    |                ^^^^^^^ -------------- not a function definition\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n note: the lint level is defined here\n   --> $DIR/issue-78957.rs:1:9\n    |\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/issue-78957.rs:10:23"}, {"sha": "693cfecedc4bd9097b1becee84099b8246238730", "filename": "src/test/ui/issues/issue-86756.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -20,9 +20,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     eq::<dyn, Foo>\n    |               ^^^\n    |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `#[warn(bare_trait_objects)]` on by default\n help: use `dyn`\n    |\n LL |     eq::<dyn, dyn Foo>"}, {"sha": "5e1fdad60cb8a7d97498cdb4cb3c6a57c72739f3", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,8 +6,8 @@ LL | fn generic<T>() {\n LL |     generic::<Option<T>>();\n    |     ---------------------- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-8727.rs:8:5"}, {"sha": "2378476e5d0e3cd0e3086cb4ccfe3fbda6812d7f", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (du\n LL |     let _: Iter<'_, i32> = array.into_iter();\n    |                                  ^^^^^^^^^\n    |\n-   = note: `#[warn(array_into_iter)]` on by default\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n+   = note: `#[warn(array_into_iter)]` on by default\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     let _: Iter<'_, i32> = array.iter();"}, {"sha": "2fde276faa3d55307014802601f9be678d81a086", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (du\n LL |     small.into_iter();\n    |           ^^^^^^^^^\n    |\n-   = note: `#[warn(array_into_iter)]` on by default\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n+   = note: `#[warn(array_into_iter)]` on by default\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     small.iter();"}, {"sha": "fc9ab293f99da503257afbbb25c86db6e1670750", "filename": "src/test/ui/lang-items/issue-83471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -32,9 +32,9 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn call(export_name);\n    |             ^^^^^^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: export_name`\n    |\n-   = note: `#[warn(anonymous_parameters)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+   = note: `#[warn(anonymous_parameters)]` on by default\n \n error[E0718]: `fn` language item must be applied to a trait with 1 generic argument\n   --> $DIR/issue-83471.rs:11:1"}, {"sha": "e0581f4d9ab62b2b5484fbf5f4085330f6807c2e", "filename": "src/test/ui/let-else/let-else-irrefutable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: irrefutable `let...else` pattern\n LL |     let x = 1 else { return };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the `else` clause is useless\n    = help: consider removing the `else` clause\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "4f165b1d9fea65b629ad53cc5d9bc84d4a0c62a9", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -15,9 +15,9 @@ error: erroneous constant used\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n@@ -30,8 +30,8 @@ error: erroneous constant used\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "24ad9d825f8d3fa22b2ba1729f9dc960620ccda7", "filename": "src/test/ui/linkage-attr/link-attr-validation-early.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib\n LL | #[link]\n    | ^^^^^^^\n    |\n-   = note: `#[deny(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n \n error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\", /*opt*/ import_name_type = \"decorated|noprefix|undecorated\")]`\n   --> $DIR/link-attr-validation-early.rs:4:1"}, {"sha": "8ed303ca6069c108049f12d0407d4ca87e6c3c54", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let _: Dyn::Ty;\n    |            ^^^\n    |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `#[warn(bare_trait_objects)]` on by default\n help: use `dyn`\n    |\n LL |     let _: <dyn Dyn>::Ty;"}, {"sha": "217eed6c92cea63ecbccc259a64c30d27a813b03", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,13 +7,13 @@ LL |             fn clash(x: u8);\n LL |             fn clash(x: u64);\n    |             ^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n+   = note: expected `unsafe extern \"C\" fn(u8)`\n+              found `unsafe extern \"C\" fn(u64)`\n note: the lint level is defined here\n   --> $DIR/clashing-extern-fn.rs:4:9\n    |\n LL | #![warn(clashing_extern_declarations)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `unsafe extern \"C\" fn(u8)`\n-              found `unsafe extern \"C\" fn(u64)`\n \n warning: `extern_link_name` redeclared with a different signature\n   --> $DIR/clashing-extern-fn.rs:52:9\n@@ -219,9 +219,9 @@ warning: `extern` block uses type `Option<TransparentNoNiche>`, which is not FFI\n LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoNiche>;\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n-   = note: `#[warn(improper_ctypes)]` on by default\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n    = note: enum has no representation hint\n+   = note: `#[warn(improper_ctypes)]` on by default\n \n warning: `extern` block uses type `Option<UnsafeCell<NonZeroUsize>>`, which is not FFI-safe\n   --> $DIR/clashing-extern-fn.rs:412:46"}, {"sha": "d1c66a81cd8a31fe4048883d20e80b8af4934f05", "filename": "src/test/ui/lint/cli-lint-override.forbid_warn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.forbid_warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.forbid_warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.forbid_warn.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: extern declarations without an explicit ABI are deprecated\n LL | extern fn foo() {}\n    | ^^^^^^^^^^^^^^^ ABI should be specified here\n    |\n-   = note: requested on the command line with `-F missing-abi`\n    = help: the default ABI is C\n+   = note: requested on the command line with `-F missing-abi`\n \n error: aborting due to previous error\n "}, {"sha": "779c24c93f245791f2057c9cc09ec37d420c19e9", "filename": "src/test/ui/lint/cli-lint-override.force_warn_deny.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.force_warn_deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.force_warn_deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.force_warn_deny.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: extern declarations without an explicit ABI are deprecated\n LL | extern fn foo() {}\n    | ^^^^^^^^^^^^^^^ ABI should be specified here\n    |\n-   = note: requested on the command line with `--force-warn missing-abi`\n    = help: the default ABI is C\n+   = note: requested on the command line with `--force-warn missing-abi`\n \n warning: 1 warning emitted\n "}, {"sha": "f034cfa9338a19ae48f4887cf4bc394330774120", "filename": "src/test/ui/lint/cli-lint-override.warn_deny.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.warn_deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.warn_deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcli-lint-override.warn_deny.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: extern declarations without an explicit ABI are deprecated\n LL | extern fn foo() {}\n    | ^^^^^^^^^^^^^^^ ABI should be specified here\n    |\n-   = note: requested on the command line with `-D missing-abi`\n    = help: the default ABI is C\n+   = note: requested on the command line with `-D missing-abi`\n \n error: aborting due to previous error\n "}, {"sha": "5e963183d094b42dc415866ee105f2fba401c441", "filename": "src/test/ui/lint/dead-code/issue-85071-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85071-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85071-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85071-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,16 +7,16 @@ LL |\n LL |     let _y = x;\n    |         ^^ unreachable definition\n    |\n-note: the lint level is defined here\n-  --> $DIR/issue-85071-2.rs:7:26\n-   |\n-LL | #![warn(unused_variables,unreachable_code)]\n-   |                          ^^^^^^^^^^^^^^^^\n note: this expression has type `Foo`, which is uninhabited\n   --> $DIR/issue-85071-2.rs:18:13\n    |\n LL |     let x = s.f();\n    |             ^^^^^\n+note: the lint level is defined here\n+  --> $DIR/issue-85071-2.rs:7:26\n+   |\n+LL | #![warn(unused_variables,unreachable_code)]\n+   |                          ^^^^^^^^^^^^^^^^\n \n warning: unused variable: `x`\n   --> $DIR/issue-85071-2.rs:18:9"}, {"sha": "721fb8148d96b5c739a2c3ea8b829a67286f9393", "filename": "src/test/ui/lint/dead-code/issue-85071.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85071.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85071.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85071.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,16 +7,16 @@ LL |\n LL |     let _ = x;\n    |             ^ unreachable expression\n    |\n-note: the lint level is defined here\n-  --> $DIR/issue-85071.rs:9:26\n-   |\n-LL | #![warn(unused_variables,unreachable_code)]\n-   |                          ^^^^^^^^^^^^^^^^\n note: this expression has type `Foo`, which is uninhabited\n   --> $DIR/issue-85071.rs:15:13\n    |\n LL |     let x = f();\n    |             ^^^\n+note: the lint level is defined here\n+  --> $DIR/issue-85071.rs:9:26\n+   |\n+LL | #![warn(unused_variables,unreachable_code)]\n+   |                          ^^^^^^^^^^^^^^^^\n \n warning: unused variable: `x`\n   --> $DIR/issue-85071.rs:15:9"}, {"sha": "6029bf26856075cd4bd7dc9e06f4b78122bcafe9", "filename": "src/test/ui/lint/dead-code/unused-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,12 +6,12 @@ LL | enum Enum {\n LL |     Variant1,\n    |     ^^^^^^^^\n    |\n+   = note: `Enum` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n note: the lint level is defined here\n   --> $DIR/unused-variant.rs:1:9\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n-   = note: `Enum` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n \n error: aborting due to previous error\n "}, {"sha": "beb0ad79560f9c676585bdc4a8fece394a782ccb", "filename": "src/test/ui/lint/deny-overflowing-literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: literal out of range for `u8`\n LL |     let x: u8 = 256;\n    |                 ^^^\n    |\n-   = note: `#[deny(overflowing_literals)]` on by default\n    = note: the literal `256` does not fit into the type `u8` whose range is `0..=255`\n+   = note: `#[deny(overflowing_literals)]` on by default\n \n error: range endpoint is out of range for `u8`\n   --> $DIR/deny-overflowing-literals.rs:5:14"}, {"sha": "064ee5fadb1d155fc8bc7098a877fe2638fb10af", "filename": "src/test/ui/lint/expansion-time.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -18,27 +18,27 @@ warning: missing fragment specifier\n LL | macro_rules! m { ($i) => {} }\n    |                   ^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n note: the lint level is defined here\n   --> $DIR/expansion-time.rs:8:8\n    |\n LL | #[warn(missing_fragment_specifier)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n \n warning: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n   --> $DIR/expansion-time.rs:14:7\n    |\n LL |     #[bench]\n    |       ^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n note: the lint level is defined here\n   --> $DIR/expansion-time.rs:12:8\n    |\n LL | #[warn(soft_unstable)]\n    |        ^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n \n warning: include macro expected single expression in source\n   --> $DIR/expansion-time-include.rs:4:1"}, {"sha": "2805720f035b8d78163352d7c32fcccf7fab2b11", "filename": "src/test/ui/lint/fn_must_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ warning: unused return value of `need_to_use_this_value` that must be used\n LL |     need_to_use_this_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: it's important\n note: the lint level is defined here\n   --> $DIR/fn_must_use.rs:3:9\n    |\n LL | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n-   = note: it's important\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` that must be used\n   --> $DIR/fn_must_use.rs:60:5"}, {"sha": "b2e2bcea1b4088c2af9cc0340ae0498234678ffe", "filename": "src/test/ui/lint/forbid-group-group-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-group-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,13 +7,13 @@ LL | #![forbid(warnings)]\n LL | #[allow(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n note: the lint level is defined here\n   --> $DIR/forbid-group-group-2.rs:5:9\n    |\n LL | #![deny(forbidden_lint_groups)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n error: allow(nonstandard_style) incompatible with previous forbid\n   --> $DIR/forbid-group-group-2.rs:7:9"}, {"sha": "47336d4d890bc479fa52e48aa25674850ddd967f", "filename": "src/test/ui/lint/forbid-group-member.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,9 +7,9 @@ LL |\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |\n-   = note: `#[warn(forbidden_lint_groups)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+   = note: `#[warn(forbidden_lint_groups)]` on by default\n \n warning: allow(unused_variables) incompatible with previous forbid\n   --> $DIR/forbid-group-member.rs:8:9"}, {"sha": "97c2dee46dd135d43c22da3f76667a1b889a1c95", "filename": "src/test/ui/lint/force-warn/allowed-cli-deny-by-default-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: any use of this value will cause an error\n LL | const C: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n-   = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: requested on the command line with `--force-warn const-err`\n \n warning: 1 warning emitted\n \n@@ -17,7 +17,7 @@ warning: any use of this value will cause an error\n LL | const C: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n-   = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: requested on the command line with `--force-warn const-err`\n "}, {"sha": "f293b78119e46be78f8d3960d036079364e90d61", "filename": "src/test/ui/lint/force-warn/allowed-deny-by-default-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-deny-by-default-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: any use of this value will cause an error\n LL | const C: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n-   = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: requested on the command line with `--force-warn const-err`\n \n warning: 1 warning emitted\n \n@@ -17,7 +17,7 @@ warning: any use of this value will cause an error\n LL | const C: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n-   = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: requested on the command line with `--force-warn const-err`\n "}, {"sha": "0f58953a54ba8cfbc3a809afd6b7d5ca50d629b1", "filename": "src/test/ui/lint/force-warn/allowed-group-warn-by-default-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: requested on the command line with `--force-warn bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: requested on the command line with `--force-warn bare-trait-objects`\n help: use `dyn`\n    |\n LL | pub fn function(_x: Box<dyn SomeTrait>) {}"}, {"sha": "03a32fa6f085fcd36bdf14a2d38adb6ac28184dd", "filename": "src/test/ui/lint/force-warn/cap-lints-allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: requested on the command line with `--force-warn bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: requested on the command line with `--force-warn bare-trait-objects`\n help: use `dyn`\n    |\n LL | pub fn function(_x: Box<dyn SomeTrait>) {}"}, {"sha": "d1b764b341435bbf18a52a8d2eb7a26882a95462", "filename": "src/test/ui/lint/force-warn/cap-lints-warn-allowed-warn-by-default-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-warn-allowed-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-warn-allowed-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-warn-allowed-warn-by-default-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: `...` range patterns are deprecated\n LL |         0...100 => true,\n    |          ^^^ help: use `..=` for an inclusive range\n    |\n-   = note: `--force-warn ellipsis-inclusive-range-patterns` implied by `--force-warn rust-2021-compatibility`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `--force-warn ellipsis-inclusive-range-patterns` implied by `--force-warn rust-2021-compatibility`\n \n warning: 1 warning emitted\n "}, {"sha": "703d0afd6085030ba5a741f443605496ddc487b9", "filename": "src/test/ui/lint/force-warn/deny-by-default-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fdeny-by-default-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: any use of this value will cause an error\n LL | const C: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n-   = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: requested on the command line with `--force-warn const-err`\n \n warning: 1 warning emitted\n \n@@ -17,7 +17,7 @@ warning: any use of this value will cause an error\n LL | const C: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n-   = note: requested on the command line with `--force-warn const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: requested on the command line with `--force-warn const-err`\n "}, {"sha": "e17630fd358156230403f9dd1242bd0b5599e3e7", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-cli-warn-by-default-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n help: use `dyn`\n    |\n LL | pub fn function(_x: Box<dyn SomeTrait>) {}"}, {"sha": "72198541a7041a2e7f551e41ca972d5b31168b77", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n help: use `dyn`\n    |\n LL | pub fn function(_x: Box<dyn SomeTrait>) {}"}, {"sha": "52c870ac28ae6e34ed82a6547838532f83280164", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-warn-by-default-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n help: use `dyn`\n    |\n LL | pub fn function(_x: Box<dyn SomeTrait>) {}"}, {"sha": "ed9fa0d4101b2ee213760627d759f460687ea6c8", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: `...` range patterns are deprecated\n LL |         1...2 => {}\n    |          ^^^ help: use `..=` for an inclusive range\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n note: the lint level is defined here\n   --> $DIR/inclusive-range-pattern-syntax.rs:4:9\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: `...` range patterns are deprecated\n   --> $DIR/inclusive-range-pattern-syntax.rs:16:9"}, {"sha": "5ccb4ffe792986212a9ba0cfe9751f19987e3bc6", "filename": "src/test/ui/lint/inert-attr-macro.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,17 +4,17 @@ warning: unused attribute `inline`\n LL |     #[inline] foo!();\n    |     ^^^^^^^^^\n    |\n+note: the built-in attribute `inline` will be ignored, since it's applied to the macro invocation `foo`\n+  --> $DIR/inert-attr-macro.rs:10:15\n+   |\n+LL |     #[inline] foo!();\n+   |               ^^^\n note: the lint level is defined here\n   --> $DIR/inert-attr-macro.rs:3:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_attributes)]` implied by `#[warn(unused)]`\n-note: the built-in attribute `inline` will be ignored, since it's applied to the macro invocation `foo`\n-  --> $DIR/inert-attr-macro.rs:10:15\n-   |\n-LL |     #[inline] foo!();\n-   |               ^^^\n \n warning: unused attribute `allow`\n   --> $DIR/inert-attr-macro.rs:14:5"}, {"sha": "27399746bed6f2880e3098e22f325fb8961604de", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: `#[inline]` is ignored on constants\n LL |     #[inline]\n    |     ^^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n note: the lint level is defined here\n   --> $DIR/inline-trait-and-foreign-items.rs:4:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/inline-trait-and-foreign-items.rs:11:5"}, {"sha": "f0dcf53dfeee30c065ace8df821e37ae666b8633", "filename": "src/test/ui/lint/invalid_value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,12 +7,12 @@ LL |         let _val: &'static T = mem::zeroed();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n+   = note: references must be non-null\n note: the lint level is defined here\n   --> $DIR/invalid_value.rs:6:9\n    |\n LL | #![deny(invalid_value)]\n    |         ^^^^^^^^^^^^^\n-   = note: references must be non-null\n \n error: the type `&T` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:51:32"}, {"sha": "9ce62a6b8044b94aae44d78c00addc87f9f619f0", "filename": "src/test/ui/lint/issue-14309.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-14309.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-14309.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-14309.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,18 +4,18 @@ error: `extern` block uses type `A`, which is not FFI-safe\n LL |     fn foo(x: A);\n    |               ^ not FFI-safe\n    |\n-note: the lint level is defined here\n-  --> $DIR/issue-14309.rs:1:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n LL | struct A {\n    | ^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/issue-14309.rs:1:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:31:15"}, {"sha": "d19a1349668314b08b95d82b0a38501b6dd267c0", "filename": "src/test/ui/lint/issue-1866.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-1866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-1866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-1866.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,13 +7,13 @@ LL |             pub fn rust_task_is_unwinding(rt: *const rust_task) -> bool;\n LL |             pub fn rust_task_is_unwinding(rt: *const rust_task) -> bool;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n+   = note: expected `unsafe extern \"C\" fn(*const usize) -> bool`\n+              found `unsafe extern \"C\" fn(*const bool) -> bool`\n note: the lint level is defined here\n   --> $DIR/issue-1866.rs:4:9\n    |\n LL | #![warn(clashing_extern_declarations)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `unsafe extern \"C\" fn(*const usize) -> bool`\n-              found `unsafe extern \"C\" fn(*const bool) -> bool`\n \n warning: 1 warning emitted\n "}, {"sha": "9b5453fa82d4c78f76563518355f09be28d4eb31", "filename": "src/test/ui/lint/issue-63364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-63364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-63364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-63364.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: literal out of range for `u16`\n LL |     for n in 100_000.. {\n    |              ^^^^^^^\n    |\n-   = note: `#[deny(overflowing_literals)]` on by default\n    = note: the literal `100_000` does not fit into the type `u16` whose range is `0..=65535`\n+   = note: `#[deny(overflowing_literals)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "cc44f8aa58bd0325e2953bf2c436be6de8cb950e", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,13 +6,13 @@ LL |     #![forbid(unused)]\n LL |     #![deny(unused)]\n    |             ^^^^^^ overruled by previous forbid\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n note: the lint level is defined here\n   --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:17:11\n    |\n LL | #![forbid(forbidden_lint_groups)]\n    |           ^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n error: aborting due to previous error\n "}, {"sha": "c1b56250d3ed9ca4111b094f17881e2b8083a04f", "filename": "src/test/ui/lint/issue-79744.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-79744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-79744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-79744.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ error: literal out of range for `i8`\n LL |     let e2 = 230;\n    |              ^^^\n    |\n-   = note: `#[deny(overflowing_literals)]` on by default\n    = note: the literal `230` does not fit into the type `i8` whose range is `-128..=127`\n    = help: consider using the type `u8` instead\n+   = note: `#[deny(overflowing_literals)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "73e27ffda7fee469543d74a5e632259cefa1af24", "filename": "src/test/ui/lint/issue-80988.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,9 +7,9 @@ LL |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^ overruled by previous forbid\n    |\n-   = note: `#[warn(forbidden_lint_groups)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n+   = note: `#[warn(forbidden_lint_groups)]` on by default\n \n warning: deny(warnings) incompatible with previous forbid\n   --> $DIR/issue-80988.rs:7:8"}, {"sha": "f824fc09e724066d42c6cdd5382461737ffb2d26", "filename": "src/test/ui/lint/issue-83477.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-83477.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-83477.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-83477.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -18,13 +18,13 @@ warning: prefer `FxHashMap` over `HashMap`, it has better performance\n LL |     let _ = std::collections::HashMap::<String, String>::new();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n note: the lint level is defined here\n   --> $DIR/issue-83477.rs:3:9\n    |\n LL | #![warn(rustc::internal)]\n    |         ^^^^^^^^^^^^^^^\n    = note: `#[warn(rustc::default_hash_types)]` implied by `#[warn(rustc::internal)]`\n-   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n warning: 3 warnings emitted\n "}, {"sha": "5a65c612128589661eac82458a8c2578bab57e71", "filename": "src/test/ui/lint/issue-86600-lint-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-86600-lint-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fissue-86600-lint-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-86600-lint-twice.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: floating-point types cannot be used in patterns\n LL |         5.0 => {}\n    |         ^^^\n    |\n-   = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+   = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "d6c6d5faef2844ff283c5c70bcae511f1f272541", "filename": "src/test/ui/lint/lint-attr-everywhere-early.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-early.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -474,13 +474,13 @@ error: `...` range patterns are deprecated\n LL |             f1: 0...100,\n    |                  ^^^ help: use `..=` for an inclusive range\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n note: the lint level is defined here\n   --> $DIR/lint-attr-everywhere-early.rs:166:20\n    |\n LL |             #[deny(ellipsis_inclusive_range_patterns)]\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: aborting due to 36 previous errors\n "}, {"sha": "a69c2e0ef2bd2a54d30771e77275e750a9a048c1", "filename": "src/test/ui/lint/lint-attr-everywhere-late.stderr", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-everywhere-late.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -163,13 +163,13 @@ LL |         fn clashing1();\n LL |     fn clashing1(_: i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n+   = note: expected `unsafe extern \"C\" fn()`\n+              found `unsafe extern \"C\" fn(i32)`\n note: the lint level is defined here\n   --> $DIR/lint-attr-everywhere-late.rs:122:13\n    |\n LL |     #![deny(clashing_extern_declarations)]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `unsafe extern \"C\" fn()`\n-              found `unsafe extern \"C\" fn(i32)`\n \n error: `clashing2` redeclared with a different signature\n   --> $DIR/lint-attr-everywhere-late.rs:128:5\n@@ -180,13 +180,13 @@ LL |         fn clashing2();\n LL |     fn clashing2(_: i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n+   = note: expected `unsafe extern \"C\" fn()`\n+              found `unsafe extern \"C\" fn(i32)`\n note: the lint level is defined here\n   --> $DIR/lint-attr-everywhere-late.rs:127:12\n    |\n LL |     #[deny(clashing_extern_declarations)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `unsafe extern \"C\" fn()`\n-              found `unsafe extern \"C\" fn(i32)`\n \n error: types that do not implement `Drop` can still have drop glue, consider instead using `std::mem::needs_drop` to detect whether a type is trivially dropped\n   --> $DIR/lint-attr-everywhere-late.rs:93:38\n@@ -206,29 +206,29 @@ error: the return value of `mem::discriminant` is unspecified when called with a\n LL |     fn assoc_fn() { discriminant::<i32>(&123); }\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:95:12\n-   |\n-LL |     #[deny(enum_intrinsics_non_enums)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:96:41\n    |\n LL |     fn assoc_fn() { discriminant::<i32>(&123); }\n    |                                         ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:95:12\n+   |\n+LL |     #[deny(enum_intrinsics_non_enums)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: literal out of range for `u8`\n   --> $DIR/lint-attr-everywhere-late.rs:98:59\n    |\n LL |     #[deny(overflowing_literals)] const ASSOC_CONST: u8 = 1000;\n    |                                                           ^^^^\n    |\n+   = note: the literal `1000` does not fit into the type `u8` whose range is `0..=255`\n note: the lint level is defined here\n   --> $DIR/lint-attr-everywhere-late.rs:98:12\n    |\n LL |     #[deny(overflowing_literals)] const ASSOC_CONST: u8 = 1000;\n    |            ^^^^^^^^^^^^^^^^^^^^\n-   = note: the literal `1000` does not fit into the type `u8` whose range is `0..=255`\n \n error: variable `PARAM` should have a snake case name\n   --> $DIR/lint-attr-everywhere-late.rs:131:37\n@@ -248,16 +248,16 @@ error: the return value of `mem::discriminant` is unspecified when called with a\n LL |     let _ = discriminant::<i32>(&123);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:138:12\n-   |\n-LL |     #[deny(enum_intrinsics_non_enums)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:139:33\n    |\n LL |     let _ = discriminant::<i32>(&123);\n    |                                 ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:138:12\n+   |\n+LL |     #[deny(enum_intrinsics_non_enums)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: variable `PARAM` should have a snake case name\n   --> $DIR/lint-attr-everywhere-late.rs:145:44\n@@ -277,152 +277,152 @@ error: the return value of `mem::discriminant` is unspecified when called with a\n LL |             discriminant::<i32>(&123);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:153:17\n-   |\n-LL |         #![deny(enum_intrinsics_non_enums)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:155:33\n    |\n LL |             discriminant::<i32>(&123);\n    |                                 ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:153:17\n+   |\n+LL |         #![deny(enum_intrinsics_non_enums)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-attr-everywhere-late.rs:161:13\n    |\n LL |             discriminant::<i32>(&123);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:159:16\n-   |\n-LL |         #[deny(enum_intrinsics_non_enums)]\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:161:33\n    |\n LL |             discriminant::<i32>(&123);\n    |                                 ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:159:16\n+   |\n+LL |         #[deny(enum_intrinsics_non_enums)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-attr-everywhere-late.rs:168:9\n    |\n LL |         discriminant::<i32>(&123);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:167:17\n-   |\n-LL |         #![deny(enum_intrinsics_non_enums)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:168:29\n    |\n LL |         discriminant::<i32>(&123);\n    |                             ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:167:17\n+   |\n+LL |         #![deny(enum_intrinsics_non_enums)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-attr-everywhere-late.rs:172:9\n    |\n LL |         discriminant::<i32>(&123);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:171:16\n-   |\n-LL |         #[deny(enum_intrinsics_non_enums)]\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:172:29\n    |\n LL |         discriminant::<i32>(&123);\n    |                             ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:171:16\n+   |\n+LL |         #[deny(enum_intrinsics_non_enums)]\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-attr-everywhere-late.rs:177:5\n    |\n LL |     discriminant::<i32>(&123);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:176:12\n-   |\n-LL |     #[deny(enum_intrinsics_non_enums)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:177:25\n    |\n LL |     discriminant::<i32>(&123);\n    |                         ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:176:12\n+   |\n+LL |     #[deny(enum_intrinsics_non_enums)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-attr-everywhere-late.rs:179:41\n    |\n LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:179:13\n-   |\n-LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:179:61\n    |\n LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n    |                                                             ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:179:13\n+   |\n+LL |     [#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123)];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-attr-everywhere-late.rs:180:41\n    |\n LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:180:13\n-   |\n-LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:180:61\n    |\n LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n    |                                                             ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:180:13\n+   |\n+LL |     (#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123),);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-attr-everywhere-late.rs:182:45\n    |\n LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:182:17\n-   |\n-LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:182:65\n    |\n LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                                                                 ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:182:17\n+   |\n+LL |     call(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-attr-everywhere-late.rs:184:52\n    |\n LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-attr-everywhere-late.rs:184:24\n-   |\n-LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `i32`, which is not an enum.\n   --> $DIR/lint-attr-everywhere-late.rs:184:72\n    |\n LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n    |                                                                        ^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-attr-everywhere-late.rs:184:24\n+   |\n+LL |     TupleStruct(#[deny(enum_intrinsics_non_enums)] discriminant::<i32>(&123));\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 31 previous errors\n "}, {"sha": "9f4360e676382859b177b169a17f2f0c9f938385", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: attempting to modify a `const` item\n LL |     ARRAY[0] = 5;\n    |     ^^^^^^^^^^^^\n    |\n-   = note: `#[warn(const_item_mutation)]` on by default\n    = note: each usage of a `const` item creates a new temporary; the original `const` item will not be modified\n note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:26:1\n    |\n LL | const ARRAY: [u8; 1] = [25];\n    | ^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(const_item_mutation)]` on by default\n \n warning: attempting to modify a `const` item\n   --> $DIR/lint-const-item-mutation.rs:38:5"}, {"sha": "8073c33dd46311a5deb605ecf4ae54dbccec4dc2", "filename": "src/test/ui/lint/lint-ctypes-73249-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: `extern` block uses type `Qux`, which is not FFI-safe\n LL |     pub fn lint_me() -> A<()>;\n    |                         ^^^^^ not FFI-safe\n    |\n+   = note: opaque types have no C equivalent\n note: the lint level is defined here\n   --> $DIR/lint-ctypes-73249-2.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n \n error: aborting due to previous error\n "}, {"sha": "c41ce666db872ceab03b178e9f069ed643b89d74", "filename": "src/test/ui/lint/lint-ctypes-73249-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: `extern` block uses type `Qux`, which is not FFI-safe\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n+   = note: opaque types have no C equivalent\n note: the lint level is defined here\n   --> $DIR/lint-ctypes-73249-3.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n \n error: aborting due to previous error\n "}, {"sha": "98245c4f144aee4688b90d9000dea41ef09b4678", "filename": "src/test/ui/lint/lint-ctypes-73249-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: `extern` block uses type `Qux`, which is not FFI-safe\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n+   = note: opaque types have no C equivalent\n note: the lint level is defined here\n   --> $DIR/lint-ctypes-73249-5.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n \n error: aborting due to previous error\n "}, {"sha": "9f43576ad73534e54a30d6e3f6d5c6e121e34507", "filename": "src/test/ui/lint/lint-ctypes-73251-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: `extern` block uses type `Qux`, which is not FFI-safe\n LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n+   = note: opaque types have no C equivalent\n note: the lint level is defined here\n   --> $DIR/lint-ctypes-73251-1.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n \n error: aborting due to previous error\n "}, {"sha": "0b3de379c19d50c3a87f0652837e6f5c4e5b320e", "filename": "src/test/ui/lint/lint-ctypes-73251-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: `extern` block uses type `AliasA`, which is not FFI-safe\n LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n+   = note: opaque types have no C equivalent\n note: the lint level is defined here\n   --> $DIR/lint-ctypes-73251-2.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n \n error: aborting due to previous error\n "}, {"sha": "8554e261778e7601d202c4fe2063d66cc8d04d8f", "filename": "src/test/ui/lint/lint-ctypes-enum.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,18 +4,18 @@ error: `extern` block uses type `U`, which is not FFI-safe\n LL |    fn uf(x: U);\n    |             ^ not FFI-safe\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-enum.rs:3:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n    = note: enum has no representation hint\n note: the type is defined here\n   --> $DIR/lint-ctypes-enum.rs:9:1\n    |\n LL | enum U {\n    | ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-enum.rs:3:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `B`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:61:13"}, {"sha": "a05206bf18dbb011af416e73a1836858013a1f57", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: `extern` fn uses type `[u32]`, which is not FFI-safe\n LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n    |                                 ^^^^^^ not FFI-safe\n    |\n+   = help: consider using a raw pointer instead\n+   = note: slices have no C equivalent\n note: the lint level is defined here\n   --> $DIR/lint-ctypes-fn.rs:4:9\n    |\n LL | #![deny(improper_ctypes_definitions)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: consider using a raw pointer instead\n-   = note: slices have no C equivalent\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:76:31"}, {"sha": "121ad0ce8fa75367e78d9d85c8705a90eac7618c", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,18 +4,18 @@ error: `extern` block uses type `Foo`, which is not FFI-safe\n LL |     pub fn ptr_type1(size: *const Foo);\n    |                            ^^^^^^^^^^ not FFI-safe\n    |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n   --> $DIR/lint-ctypes.rs:26:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes.rs:4:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `Foo`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:49:28"}, {"sha": "63ed2503cf39f65bea8a9ca50fd580401789cf81", "filename": "src/test/ui/lint/lint-enum-intrinsics-non-enums.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: the return value of `mem::discriminant` is unspecified when called with a\n LL |     discriminant(&());\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(enum_intrinsics_non_enums)]` on by default\n note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `()`, which is not an enum.\n   --> $DIR/lint-enum-intrinsics-non-enums.rs:26:18\n    |\n LL |     discriminant(&());\n    |                  ^^^\n+   = note: `#[deny(enum_intrinsics_non_enums)]` on by default\n \n error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n   --> $DIR/lint-enum-intrinsics-non-enums.rs:29:5"}, {"sha": "3f366bedbf3763662b2226c9b2826339eda14c0e", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,9 +7,9 @@ LL |\n LL | impl Foo for dyn Send + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n    |\n-   = note: `#[deny(order_dependent_trait_objects)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+   = note: `#[deny(order_dependent_trait_objects)]` on by default\n \n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n   --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1"}, {"sha": "9f38dcb0b22909d7d7907267bc8441ec7347932c", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-bool.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: atomic loads cannot have `Release` or `AcqRel` ordering\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n \n error: atomic loads cannot have `Release` or `AcqRel` ordering\n   --> $DIR/lint-invalid-atomic-ordering-bool.rs:15:20"}, {"sha": "cc075ce9e41153c64e499cb1b7c1ec69a7309f42", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRe\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n \n error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:30:67"}, {"sha": "fe6c7e55c62aa8a8321809be769499c2033c8e0a", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, s\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n \n error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:28:57"}, {"sha": "38327d607c9878e70b73af8a05f34605ac846cf9", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fence.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: memory fences cannot have `Relaxed` ordering\n LL |     fence(Ordering::Relaxed);\n    |           ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n \n error: memory fences cannot have `Relaxed` ordering\n   --> $DIR/lint-invalid-atomic-ordering-fence.rs:19:20"}, {"sha": "33829d68fd5c71645444586dabb1345f8eadef99", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using `Acquire` or `Relaxed` failure ordering instead\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n \n error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:28:47"}, {"sha": "36930e2f440f910364b3ede094654c118030a76e", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-int.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: atomic loads cannot have `Release` or `AcqRel` ordering\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n \n error: atomic loads cannot have `Release` or `AcqRel` ordering\n   --> $DIR/lint-invalid-atomic-ordering-int.rs:22:20"}, {"sha": "12f4cad90fe1744d121c8745ffed5e84979e7779", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-ptr.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: atomic loads cannot have `Release` or `AcqRel` ordering\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n \n error: atomic loads cannot have `Release` or `AcqRel` ordering\n   --> $DIR/lint-invalid-atomic-ordering-ptr.rs:17:20"}, {"sha": "d26621f2a889f6ae13f17e2cdafb45a42d3da18c", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-uint.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ error: atomic loads cannot have `Release` or `AcqRel` ordering\n LL |     let _ = x.load(Ordering::Release);\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(invalid_atomic_ordering)]` on by default\n    = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+   = note: `#[deny(invalid_atomic_ordering)]` on by default\n \n error: atomic loads cannot have `Release` or `AcqRel` ordering\n   --> $DIR/lint-invalid-atomic-ordering-uint.rs:21:20"}, {"sha": "4b42145bbed8b5e3184513604bf2406e7ad844d5", "filename": "src/test/ui/lint/lint-non-snake-case-crate-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-crate-2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -1,11 +1,11 @@\n error: crate `NonSnakeCase` should have a snake case name\n    |\n+   = help: convert the identifier to snake case: `non_snake_case`\n note: the lint level is defined here\n   --> $DIR/lint-non-snake-case-crate-2.rs:4:9\n    |\n LL | #![deny(non_snake_case)]\n    |         ^^^^^^^^^^^^^^\n-   = help: convert the identifier to snake case: `non_snake_case`\n \n error: aborting due to previous error\n "}, {"sha": "ce3e8806a9e3ca33af0ce4cfff05cedc784b74fd", "filename": "src/test/ui/lint/lint-pre-expansion-extern-module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: `try` is a keyword in the 2018 edition\n LL | pub fn try() {}\n    |        ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n    |\n-   = note: `-W keyword-idents` implied by `-W rust-2018-compatibility`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+   = note: `-W keyword-idents` implied by `-W rust-2018-compatibility`\n \n warning: 1 warning emitted\n "}, {"sha": "383623b48317fea6f480b4e0e8f7a96a71016fb5", "filename": "src/test/ui/lint/lint-strict-provenance-fuzzy-casts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: strict provenance disallows casting integer `usize` to pointer `*const u8\n LL |     let dangling = 16_usize as *const u8;\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: if you can't comply with strict provenance and don't have a pointer with the correct provenance you can use `std::ptr::from_exposed_addr()` instead\n note: the lint level is defined here\n   --> $DIR/lint-strict-provenance-fuzzy-casts.rs:2:9\n    |\n LL | #![deny(fuzzy_provenance_casts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = help: if you can't comply with strict provenance and don't have a pointer with the correct provenance you can use `std::ptr::from_exposed_addr()` instead\n help: use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\n    |\n LL |     let dangling = (...).with_addr(16_usize);"}, {"sha": "aa151fe2d214eeffbe3ca685f8f2e90a1e5e7759", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: under strict provenance it is considered bad style to cast pointer `*cons\n LL |     let addr: usize = &x as *const u8 as usize;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n note: the lint level is defined here\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:2:9\n    |\n LL | #![deny(lossy_provenance_casts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n help: use `.addr()` to obtain the address of a pointer\n    |\n LL |     let addr: usize = (&x as *const u8).addr();"}, {"sha": "838b3bc13feea96bd702e7e783b6352564cdbce4", "filename": "src/test/ui/lint/lint-temporary-cstring-as-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,13 +6,13 @@ LL |     some_function(CString::new(\"\").unwrap().as_ptr());\n    |                   |\n    |                   this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n    |\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n+   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n note: the lint level is defined here\n   --> $DIR/lint-temporary-cstring-as-param.rs:1:9\n    |\n LL | #![deny(temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n-   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n error: aborting due to previous error\n "}, {"sha": "79ef57dd1a34eabb452acaf541fab1f0e2544de1", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,13 +6,13 @@ LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n    |             |\n    |             this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n    |\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n+   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n note: the lint level is defined here\n   --> $DIR/lint-temporary-cstring-as-ptr.rs:2:9\n    |\n LL | #![deny(temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n-   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n error: aborting due to previous error\n "}, {"sha": "b3420ad8afde6a1232423e711a3c359a45d453c0", "filename": "src/test/ui/lint/lint-type-limits2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -12,13 +12,13 @@ warning: literal out of range for `i8`\n LL |     128 > bar()\n    |     ^^^\n    |\n+   = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n note: the lint level is defined here\n   --> $DIR/lint-type-limits2.rs:2:9\n    |\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using the type `u8` instead\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "db46e7ae7148e242ef0eaf039232384e873e9c6d", "filename": "src/test/ui/lint/lint-type-limits3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -12,13 +12,13 @@ warning: literal out of range for `i8`\n LL |     while 200 != i {\n    |           ^^^\n    |\n+   = note: the literal `200` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n note: the lint level is defined here\n   --> $DIR/lint-type-limits3.rs:2:9\n    |\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = note: the literal `200` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using the type `u8` instead\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "48d8228b802acc5349561e6594cfc55c5194304e", "filename": "src/test/ui/lint/lint-type-overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: literal out of range for `u8`\n LL |     let x1: u8 = 256;\n    |                  ^^^\n    |\n+   = note: the literal `256` does not fit into the type `u8` whose range is `0..=255`\n note: the lint level is defined here\n   --> $DIR/lint-type-overflow.rs:1:9\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = note: the literal `256` does not fit into the type `u8` whose range is `0..=255`\n \n error: literal out of range for `u8`\n   --> $DIR/lint-type-overflow.rs:13:14"}, {"sha": "117bfc3ced7e120bd9a09f0954daeee83364cb03", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: literal out of range for `i8`\n LL |     let x2: i8 = --128;\n    |                    ^^^\n    |\n+   = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n note: the lint level is defined here\n   --> $DIR/lint-type-overflow2.rs:3:9\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using the type `u8` instead\n \n error: literal out of range for `f32`\n   --> $DIR/lint-type-overflow2.rs:9:14"}, {"sha": "9d200a7898eb235ddd86df6c3169ff2e88c2274f", "filename": "src/test/ui/lint/lint-unconditional-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,12 +6,12 @@ LL | fn foo() {\n LL |     foo();\n    |     ----- recursive call site\n    |\n+   = help: a `loop` may express intention better if this is on purpose\n note: the lint level is defined here\n   --> $DIR/lint-unconditional-recursion.rs:1:9\n    |\n LL | #![deny(unconditional_recursion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:14:1"}, {"sha": "037f0a8323a756a61b3d6fa11c20313a9050c973", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: declaration of a `no_mangle` function\n LL | #[no_mangle] fn foo() {}\n    | ^^^^^^^^^^^^\n    |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n note: the lint level is defined here\n   --> $DIR/lint-unsafe-code.rs:3:9\n    |\n LL | #![deny(unsafe_code)]\n    |         ^^^^^^^^^^^\n-   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a `no_mangle` static\n   --> $DIR/lint-unsafe-code.rs:32:1"}, {"sha": "9efc7b0693bfd7c0ef9aaeb1158b68301407277a", "filename": "src/test/ui/lint/must_not_suspend/boxed.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,11 +6,6 @@ LL |     let _guard = bar();\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/boxed.rs:3:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n   --> $DIR/boxed.rs:20:9\n    |\n@@ -21,6 +16,11 @@ help: consider using a block (`{ ... }`) to shrink the value's scope, ending bef\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/boxed.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f8978ba57f15bcf5a774fd18e54bc32e9f9bd3e5", "filename": "src/test/ui/lint/must_not_suspend/dedup.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,16 +4,16 @@ error: `No` held across a suspend point, but should not be\n LL |     wheeee(&No {}).await;\n    |             ^^^^^ ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/dedup.rs:3:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/dedup.rs:16:13\n    |\n LL |     wheeee(&No {}).await;\n    |             ^^^^^\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "64de1ebeaabe7569e29b14b1d2d8203bef427efb", "filename": "src/test/ui/lint/must_not_suspend/gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,10 +4,10 @@ warning: unknown lint: `must_not_suspend`\n LL | #![deny(must_not_suspend)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unknown_lints)]` on by default\n    = note: the `must_not_suspend` lint is unstable\n    = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n    = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `must_not_suspend`\n   --> $DIR/gated.rs:4:1"}, {"sha": "c251cb84589e042d554967e852dd5030dbcd816f", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,11 +6,6 @@ LL |     let _guard = m.lock().unwrap();\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/mutex.rs:3:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n   --> $DIR/mutex.rs:8:9\n    |\n@@ -21,6 +16,11 @@ help: consider using a block (`{ ... }`) to shrink the value's scope, ending bef\n    |\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/mutex.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "180e187c1b01208753fbc1dd6ece27a4664c0205", "filename": "src/test/ui/lint/must_not_suspend/ref-drop-tracking.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref-drop-tracking.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,11 +7,6 @@ LL |\n LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/ref-drop-tracking.rs:4:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n   --> $DIR/ref-drop-tracking.rs:19:13\n    |\n@@ -22,6 +17,11 @@ help: consider using a block (`{ ... }`) to shrink the value's scope, ending bef\n    |\n LL |         let guard = &mut self.u;\n    |             ^^^^^\n+note: the lint level is defined here\n+  --> $DIR/ref-drop-tracking.rs:4:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "abf76711bf04f2f218b2ba18aa9fbf0a2aee089f", "filename": "src/test/ui/lint/must_not_suspend/ref.drop_tracking.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,11 +7,6 @@ LL |\n LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/ref.rs:6:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n   --> $DIR/ref.rs:21:13\n    |\n@@ -22,6 +17,11 @@ help: consider using a block (`{ ... }`) to shrink the value's scope, ending bef\n    |\n LL |         let guard = &mut self.u;\n    |             ^^^^^\n+note: the lint level is defined here\n+  --> $DIR/ref.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "41ac09ea72aaa4fe055e8ee1800aba11c80b39ac", "filename": "src/test/ui/lint/must_not_suspend/ref.no_drop_tracking.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,11 +7,6 @@ LL |\n LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/ref.rs:6:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n   --> $DIR/ref.rs:21:26\n    |\n@@ -22,6 +17,11 @@ help: consider using a block (`{ ... }`) to shrink the value's scope, ending bef\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/ref.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d64d25aae5274357ef852e2e43ef2dc902db563b", "filename": "src/test/ui/lint/must_not_suspend/trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,16 +7,16 @@ LL |     let _guard1 = r#impl();\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/trait.rs:3:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:21:9\n    |\n LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: boxed `Wow` trait object held across a suspend point, but should not be\n   --> $DIR/trait.rs:22:9"}, {"sha": "c967dbac56c2c48ccb9785af905d3d09423a1d07", "filename": "src/test/ui/lint/must_not_suspend/unit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,11 +6,6 @@ LL |     let _guard = bar();\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/unit.rs:3:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n   --> $DIR/unit.rs:20:9\n    |\n@@ -21,6 +16,11 @@ help: consider using a block (`{ ... }`) to shrink the value's scope, ending bef\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fe551c6521d49a75674e445db8d151118ce1dfbd", "filename": "src/test/ui/lint/must_not_suspend/warn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -6,11 +6,6 @@ LL |     let _guard = bar();\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |\n-note: the lint level is defined here\n-  --> $DIR/warn.rs:4:9\n-   |\n-LL | #![warn(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n   --> $DIR/warn.rs:21:9\n    |\n@@ -21,6 +16,11 @@ help: consider using a block (`{ ... }`) to shrink the value's scope, ending bef\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:4:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "c71de44dc716836939d9fe9a68294183d4f22252", "filename": "src/test/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ warning: call to `.clone()` on a reference in this situation does nothing\n LL |     let non_clone_type_ref_clone: &PlainType<u32> = non_clone_type_ref.clone();\n    |                                                                       ^^^^^^^^ unnecessary method call\n    |\n+   = note: the type `&PlainType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n note: the lint level is defined here\n   --> $DIR/noop-method-call.rs:4:9\n    |\n LL | #![warn(noop_method_call)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: the type `&PlainType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n \n warning: call to `.deref()` on a reference in this situation does nothing\n   --> $DIR/noop-method-call.rs:28:63"}, {"sha": "33aa95854e3064f6bb8ac735f009646b4180e07a", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: `extern` block uses type `A`, which is not FFI-safe\n LL |     pub fn a(_: A);\n    |                 ^ not FFI-safe\n    |\n+   = note: opaque types have no C equivalent\n note: the lint level is defined here\n   --> $DIR/opaque-ty-ffi-unsafe.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n \n error: aborting due to previous error\n "}, {"sha": "a47877980a0668de7de3a29baf4420ce4fea6dcf", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,13 +7,13 @@ LL | #![forbid(unused, non_snake_case)]\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n note: the lint level is defined here\n   --> $DIR/outer-forbid.rs:18:11\n    |\n LL | #![forbid(forbidden_lint_groups)]\n    |           ^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #81670 <https://github.com/rust-lang/rust/issues/81670>\n \n error: allow(unused) incompatible with previous forbid\n   --> $DIR/outer-forbid.rs:25:9"}, {"sha": "2c35647b8a3d9a95e043e806412e453a3d356596", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_nested_lint_levels.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -31,8 +31,8 @@ warning: this lint expectation is unfulfilled\n LL |     unused_mut,\n    |     ^^^^^^^^^^\n    |\n-   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n    = note: this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n \n warning: this lint expectation is unfulfilled\n   --> $DIR/expect_nested_lint_levels.rs:24:5"}, {"sha": "9a1c3e442bb927044a0b185e3e16c40fc8580a6d", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_unfulfilled_expectation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_unfulfilled_expectation.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,9 +4,9 @@ warning: this lint expectation is unfulfilled\n LL | #![expect(unfulfilled_lint_expectations, reason = \"idk why you would expect this\")]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n    = note: idk why you would expect this\n    = note: the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n \n warning: this lint expectation is unfulfilled\n   --> $DIR/expect_unfulfilled_expectation.rs:13:10"}, {"sha": "e349e4081f860613d30d5ea23d9461394ebcceb0", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_with_reason.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,8 +4,8 @@ warning: this lint expectation is unfulfilled\n LL | #![expect(unused_variables, reason = \"<This should fail and display this reason>\")]\n    |           ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n    = note: <This should fail and display this reason>\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "3e9d70821b5790738215055dc69444d3b4d1fd75", "filename": "src/test/ui/lint/rfc-2383-lint-reason/lint-attribute-only-with-reason.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Flint-attribute-only-with-reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Flint-attribute-only-with-reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Flint-attribute-only-with-reason.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: unused attribute\n LL | #[allow(reason = \"I want to allow something\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n    |\n+   = note: attribute `allow` without any lints has no effect\n note: the lint level is defined here\n   --> $DIR/lint-attribute-only-with-reason.rs:3:9\n    |\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: attribute `allow` without any lints has no effect\n \n error: unused attribute\n   --> $DIR/lint-attribute-only-with-reason.rs:6:1"}, {"sha": "884a4a45382448bac353987e104f0c16858c09bd", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ error: the usage of Script Group `Greek` in this crate consists solely of mixed\n LL | struct \u0391ctuallyNotLatin;\n    |        ^^^^^^^^^^^^^^^^\n    |\n+   = note: the usage includes '\u0391' (U+0391)\n+   = note: please recheck to make sure their usages are indeed what you want\n note: the lint level is defined here\n   --> $DIR/lint-mixed-script-confusables.rs:1:9\n    |\n LL | #![deny(mixed_script_confusables)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: the usage includes '\u0391' (U+0391)\n-   = note: please recheck to make sure their usages are indeed what you want\n \n error: the usage of Script Group `Cyrillic` in this crate consists solely of mixed script confusables\n   --> $DIR/lint-mixed-script-confusables.rs:10:5"}, {"sha": "49608c20524d3a59d73b3463b06b647109b2a143", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,15 +7,15 @@ LL |         true;\n LL |         foo!(warn_in_block)\n    |         ------------------- in this macro invocation\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n note: the lint level is defined here\n   --> $DIR/semicolon-in-expressions-from-macros.rs:4:9\n    |\n LL | #![warn(semicolon_in_expressions_from_macros)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n-   = note: macro invocations at the end of a block are treated as expressions\n-   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `foo`\n    = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: trailing semicolon in macro used in expression position"}, {"sha": "16c152eb23c2d7f12a05b99db2d55d09b9ad3e8d", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/warn-semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fwarn-semicolon-in-expressions-from-macros.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -7,9 +7,9 @@ LL |         true;\n LL |         _ => foo!()\n    |              ------ in this macro invocation\n    |\n-   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n    = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted"}, {"sha": "5087807b6c7874bf405d65a0fca1561e49afd53b", "filename": "src/test/ui/lint/trivial-casts-featuring-type-ascription.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,25 +4,25 @@ error: trivial numeric cast: `i32` as `i32`\n LL |     let lugubrious = 12i32 as i32;\n    |                      ^^^^^^^^^^^^\n    |\n+   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n note: the lint level is defined here\n   --> $DIR/trivial-casts-featuring-type-ascription.rs:1:24\n    |\n LL | #![deny(trivial_casts, trivial_numeric_casts)]\n    |                        ^^^^^^^^^^^^^^^^^^^^^\n-   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n \n error: trivial cast: `&u32` as `*const u32`\n   --> $DIR/trivial-casts-featuring-type-ascription.rs:8:13\n    |\n LL |     let _ = haunted as *const u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n note: the lint level is defined here\n   --> $DIR/trivial-casts-featuring-type-ascription.rs:1:9\n    |\n LL | #![deny(trivial_casts, trivial_numeric_casts)]\n    |         ^^^^^^^^^^^^^\n-   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7ace353de68b06ed99bdc046fa2cd4862615a4f4", "filename": "src/test/ui/lint/trivial-casts.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,25 +4,25 @@ error: trivial numeric cast: `i32` as `i32`\n LL |     let lugubrious = 12i32 as i32;\n    |                      ^^^^^^^^^^^^\n    |\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n note: the lint level is defined here\n   --> $DIR/trivial-casts.rs:1:24\n    |\n LL | #![deny(trivial_casts, trivial_numeric_casts)]\n    |                        ^^^^^^^^^^^^^^^^^^^^^\n-   = help: cast can be replaced by coercion; this might require a temporary variable\n \n error: trivial cast: `&u32` as `*const u32`\n   --> $DIR/trivial-casts.rs:7:13\n    |\n LL |     let _ = haunted as *const u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n note: the lint level is defined here\n   --> $DIR/trivial-casts.rs:1:9\n    |\n LL | #![deny(trivial_casts, trivial_numeric_casts)]\n    |         ^^^^^^^^^^^^^\n-   = help: cast can be replaced by coercion; this might require a temporary variable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "74f962835c255bf4b1b3aeca5631aa8f18341ee6", "filename": "src/test/ui/lint/trivial_casts.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ftrivial_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ftrivial_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial_casts.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,12 +4,12 @@ error: trivial numeric cast: `i32` as `i32`\n LL |     let _ = 42_i32 as i32;\n    |             ^^^^^^^^^^^^^\n    |\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n note: the lint level is defined here\n   --> $DIR/trivial_casts.rs:4:24\n    |\n LL | #![deny(trivial_casts, trivial_numeric_casts)]\n    |                        ^^^^^^^^^^^^^^^^^^^^^\n-   = help: cast can be replaced by coercion; this might require a temporary variable\n \n error: trivial numeric cast: `u8` as `u8`\n   --> $DIR/trivial_casts.rs:19:13\n@@ -25,12 +25,12 @@ error: trivial cast: `&u32` as `*const u32`\n LL |     let _ = x as *const u32;\n    |             ^^^^^^^^^^^^^^^\n    |\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n note: the lint level is defined here\n   --> $DIR/trivial_casts.rs:4:9\n    |\n LL | #![deny(trivial_casts, trivial_numeric_casts)]\n    |         ^^^^^^^^^^^^^\n-   = help: cast can be replaced by coercion; this might require a temporary variable\n \n error: trivial cast: `&mut u32` as `*mut u32`\n   --> $DIR/trivial_casts.rs:28:13"}, {"sha": "62cb1f7f4aa370122ce5b2802f667c4d4e38bb31", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=13b67fb9d2849b4e59d5651b0e4fc82ef8b088aa", "patch": "@@ -4,13 +4,13 @@ warning: literal out of range for `i8`\n LL |     let error = 255i8;\n    |                 ^^^^^\n    |\n+   = note: the literal `255i8` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n note: the lint level is defined here\n   --> $DIR/type-overflow.rs:2:9\n    |\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = note: the literal `255i8` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using the type `u8` instead\n \n warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:10:16"}]}