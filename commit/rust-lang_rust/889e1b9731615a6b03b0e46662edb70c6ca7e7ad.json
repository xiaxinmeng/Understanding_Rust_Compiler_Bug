{"sha": "889e1b9731615a6b03b0e46662edb70c6ca7e7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OWUxYjk3MzE2MTVhNmIwM2IwZTQ2NjYyZWRiNzBjNmNhN2U3YWQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-09T06:32:30Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-09T17:48:54Z"}, "message": "add `noalias` attribute to ~ return values", "tree": {"sha": "efa68942d244886127abd459e6efa43a23757a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efa68942d244886127abd459e6efa43a23757a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/889e1b9731615a6b03b0e46662edb70c6ca7e7ad", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/889e1b9731615a6b03b0e46662edb70c6ca7e7ad", "html_url": "https://github.com/rust-lang/rust/commit/889e1b9731615a6b03b0e46662edb70c6ca7e7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5c7379e9b8f3fe6df95f3ff43ca955b6bba485", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5c7379e9b8f3fe6df95f3ff43ca955b6bba485", "html_url": "https://github.com/rust-lang/rust/commit/dd5c7379e9b8f3fe6df95f3ff43ca955b6bba485"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "34c0dbb178872f27ca63b0317270be01ce23a719", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=889e1b9731615a6b03b0e46662edb70c6ca7e7ad", "patch": "@@ -873,6 +873,12 @@ pub mod llvm {\n         pub fn LLVMAddFunctionAttrString(Fn: ValueRef, Name: *c_char);\n         #[fast_ffi]\n         pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_ulonglong;\n+\n+        #[fast_ffi]\n+        pub fn LLVMAddReturnAttribute(Fn: ValueRef, PA: c_uint);\n+        #[fast_ffi]\n+        pub fn LLVMRemoveReturnAttribute(Fn: ValueRef, PA: c_uint);\n+\n         #[fast_ffi]\n         pub fn LLVMRemoveFunctionAttr(Fn: ValueRef,\n                                       PA: c_ulonglong,"}, {"sha": "d964e89ab8e1c46ce2a09319c486d0a7c73e52db", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=889e1b9731615a6b03b0e46662edb70c6ca7e7ad", "patch": "@@ -1716,21 +1716,15 @@ pub fn create_llargs_for_fn_args(cx: @mut FunctionContext,\n         let llarg = unsafe {llvm::LLVMGetParam(cx.llfn, arg_n as c_uint) };\n \n         match ty::get(arg_ty).sty {\n-            // `~` pointers never alias other parameters, because\n-            // ownership was transferred\n+            // `~` pointer parameters never alias because ownership is transferred\n             ty::ty_uniq(*) |\n             ty::ty_evec(_, ty::vstore_uniq) |\n             ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, _}) => {\n                 unsafe {\n-                    llvm::LLVMAddAttribute(\n-                        llarg, lib::llvm::NoAliasAttribute as c_uint);\n+                    llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n                 }\n             }\n-            // FIXME: #6785: `&mut` can only alias `&const` and\n-            // `@mut`, we should check for those in the other\n-            // parameters and then mark it as `noalias` if there\n-            // aren't any\n-            _ => {}\n+            _ => ()\n         }\n \n         llarg\n@@ -1952,6 +1946,18 @@ pub fn trans_fn(ccx: @mut CrateContext,\n            param_substs.repr(ccx.tcx));\n     let _icx = push_ctxt(\"trans_fn\");\n     let output_type = ty::ty_fn_ret(ty::node_id_to_type(ccx.tcx, id));\n+\n+    match ty::get(output_type).sty {\n+        // `~` pointer return values never alias because ownership is transferred\n+        ty::ty_uniq(*) |\n+        ty::ty_evec(_, ty::vstore_uniq) => {\n+            unsafe {\n+                llvm::LLVMAddReturnAttribute(llfndecl, lib::llvm::NoAliasAttribute as c_uint);\n+            }\n+        }\n+        _ => ()\n+    }\n+\n     trans_closure(ccx,\n                   path.clone(),\n                   decl,"}, {"sha": "226a7c34304f48ab74198265f58c67a1920bb7ef", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=889e1b9731615a6b03b0e46662edb70c6ca7e7ad", "patch": "@@ -350,6 +350,21 @@ extern \"C\" void LLVMAddFunctionAttrString(LLVMValueRef fn, const char *Name) {\n   unwrap<Function>(fn)->addFnAttr(Name);\n }\n \n+\n+extern \"C\" void LLVMAddReturnAttribute(LLVMValueRef Fn, LLVMAttribute PA) {\n+  Function *A = unwrap<Function>(Fn);\n+  AttrBuilder B(PA);\n+  A->addAttributes(AttributeSet::ReturnIndex,\n+                   AttributeSet::get(A->getContext(), AttributeSet::ReturnIndex,  B));\n+}\n+\n+extern \"C\" void LLVMRemoveReturnAttribute(LLVMValueRef Fn, LLVMAttribute PA) {\n+  Function *A = unwrap<Function>(Fn);\n+  AttrBuilder B(PA);\n+  A->removeAttributes(AttributeSet::ReturnIndex,\n+                      AttributeSet::get(A->getContext(), AttributeSet::ReturnIndex,  B));\n+}\n+\n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n                                             const char* Name,"}, {"sha": "d905370f5877adf5574cea64a979e903baada3dd", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/889e1b9731615a6b03b0e46662edb70c6ca7e7ad/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=889e1b9731615a6b03b0e46662edb70c6ca7e7ad", "patch": "@@ -624,3 +624,5 @@ LLVMRustSetLLVMOptions\n LLVMRustPrintPasses\n LLVMRustSetNormalizedTarget\n LLVMRustAddAlwaysInlinePass\n+LLVMAddReturnAttribute\n+LLVMRemoveReturnAttribute"}]}