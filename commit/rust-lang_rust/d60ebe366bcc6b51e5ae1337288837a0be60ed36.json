{"sha": "d60ebe366bcc6b51e5ae1337288837a0be60ed36", "node_id": "C_kwDOAAsO6NoAKGQ2MGViZTM2NmJjYzZiNTFlNWFlMTMzNzI4ODgzN2EwYmU2MGVkMzY", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-25T08:17:00Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-26T14:14:21Z"}, "message": "bless tests, remove nonexistent E0395", "tree": {"sha": "e40002750c830f2426e893637ce8f194b32b29dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e40002750c830f2426e893637ce8f194b32b29dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60ebe366bcc6b51e5ae1337288837a0be60ed36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60ebe366bcc6b51e5ae1337288837a0be60ed36", "html_url": "https://github.com/rust-lang/rust/commit/d60ebe366bcc6b51e5ae1337288837a0be60ed36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60ebe366bcc6b51e5ae1337288837a0be60ed36/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6f9826979ae590bba7f68024afebbb688f61911", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f9826979ae590bba7f68024afebbb688f61911", "html_url": "https://github.com/rust-lang/rust/commit/a6f9826979ae590bba7f68024afebbb688f61911"}], "stats": {"total": 376, "additions": 182, "deletions": 194}, "files": [{"sha": "d6c48e63bb3ce70f98fbdbebddae06b2019356a7", "filename": "src/test/ui/const-generics/issues/issue-90318.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -12,16 +12,14 @@ impl True for If<true> {}\n fn consume<T: 'static>(_val: T)\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-    //~^ ERROR: overly complex generic constant\n-    //~| ERROR: cannot call non-const operator in constants\n+    //~^ ERROR: can't compare\n {\n }\n \n fn test<T: 'static>()\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-    //~^ ERROR: overly complex generic constant\n-    //~| ERROR: cannot call non-const operator in constants\n+    //~^ ERROR: can't compare\n {\n }\n "}, {"sha": "30eb4eba4a607dcebe7a3577fbda017c38b6f0b3", "filename": "src/test/ui/const-generics/issues/issue-90318.stderr", "status": "modified", "additions": 18, "deletions": 40, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,53 +1,31 @@\n-error: overly complex generic constant\n-  --> $DIR/issue-90318.rs:14:8\n+error[E0277]: can't compare `TypeId` with `_` in const contexts\n+  --> $DIR/issue-90318.rs:14:28\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |        ^^-----------------^^^^^^^^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          borrowing is not supported in generic constants\n+   |                            ^^ no implementation for `TypeId == _`\n    |\n-   = help: consider moving this anonymous constant into a `const` function\n-   = note: this operation may be supported in the future\n-\n-error[E0015]: cannot call non-const operator in constants\n-  --> $DIR/issue-90318.rs:14:10\n+   = help: the trait `~const PartialEq<_>` is not implemented for `TypeId`\n+note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementation is not `const`\n+  --> $DIR/issue-90318.rs:14:28\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/core/src/any.rs:LL:COL\n-   |\n-LL | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-   |                       ^^^^^^^^^\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                            ^^\n+   = help: the trait `PartialEq` is implemented for `TypeId`\n \n-error: overly complex generic constant\n-  --> $DIR/issue-90318.rs:22:8\n+error[E0277]: can't compare `TypeId` with `_` in const contexts\n+  --> $DIR/issue-90318.rs:21:28\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |        ^^-----------------^^^^^^^^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          borrowing is not supported in generic constants\n+   |                            ^^ no implementation for `TypeId == _`\n    |\n-   = help: consider moving this anonymous constant into a `const` function\n-   = note: this operation may be supported in the future\n-\n-error[E0015]: cannot call non-const operator in constants\n-  --> $DIR/issue-90318.rs:22:10\n+   = help: the trait `~const PartialEq<_>` is not implemented for `TypeId`\n+note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementation is not `const`\n+  --> $DIR/issue-90318.rs:21:28\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/core/src/any.rs:LL:COL\n-   |\n-LL | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-   |                       ^^^^^^^^^\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                            ^^\n+   = help: the trait `PartialEq` is implemented for `TypeId`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cd7c980077533bea1f5d4366ad82dba067bafb25", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,6 +1,6 @@\n fn main() {}\n \n // unconst and bad, will thus error in miri\n-const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR cannot be reliably\n+const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR can't compare\n // unconst and bad, will thus error in miri\n-const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR cannot be reliably\n+const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR can't compare"}, {"sha": "168fa0ad0f0ed0ad2c567800ebaa26b9cc80c8a7", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,18 +1,49 @@\n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/const_raw_ptr_ops.rs:4:26\n+error[E0277]: can't compare `*const i32` with `_` in const contexts\n+  --> $DIR/const_raw_ptr_ops.rs:4:43\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                           ^^ no implementation for `*const i32 == _`\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+   = help: the trait `~const PartialEq<_>` is not implemented for `*const i32`\n+note: the trait `PartialEq<_>` is implemented for `*const i32`, but that implementation is not `const`\n+  --> $DIR/const_raw_ptr_ops.rs:4:43\n+   |\n+LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n+   |                                           ^^\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n+           and 6 others\n \n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/const_raw_ptr_ops.rs:6:27\n+error[E0277]: can't compare `*const i32` with `_` in const contexts\n+  --> $DIR/const_raw_ptr_ops.rs:6:44\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^^ no implementation for `*const i32 == _`\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+   = help: the trait `~const PartialEq<_>` is not implemented for `*const i32`\n+note: the trait `PartialEq<_>` is implemented for `*const i32`, but that implementation is not `const`\n+  --> $DIR/const_raw_ptr_ops.rs:6:44\n+   |\n+LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n+   |                                            ^^\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n+           and 6 others\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c340c30a113b5108a4e719b8d67f20afb9cb6533", "filename": "src/test/ui/consts/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,6 +1,6 @@\n fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-    //~^ ERROR pointers cannot be reliably compared during const eval\n+    //~^ ERROR can't compare\n     println!(\"{}\", A);\n }"}, {"sha": "b80befa26f6e007392731a55ee323596a621adf3", "filename": "src/test/ui/consts/issue-25826.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,10 +1,20 @@\n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/issue-25826.rs:3:30\n+error[E0277]: can't compare `*const ()` with `*const ()` in const contexts\n+  --> $DIR/issue-25826.rs:3:52\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                    ^ no implementation for `*const () < *const ()` and `*const () > *const ()`\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+   = help: the trait `~const PartialOrd` is not implemented for `*const ()`\n+note: the trait `PartialOrd` is implemented for `*const ()`, but that implementation is not `const`\n+  --> $DIR/issue-25826.rs:3:52\n+   |\n+LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n+   |                                                    ^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() where *const (): ~const PartialOrd {\n+   |           ++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9a2775688c6fa43c1f1a2b1c515b7350de3de96d", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,6 +1,6 @@\n const fn cmp(x: fn(), y: fn()) -> bool {\n     unsafe { x == y }\n-    //~^ ERROR pointers cannot be reliably compared\n+    //~^ ERROR can't compare\n }\n \n fn main() {}"}, {"sha": "02d01445aa15ed09dc8f07cd165ae1718dd2aa6c", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,10 +1,26 @@\n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/cmp_fn_pointers.rs:2:14\n+error[E0277]: can't compare `fn()` with `_` in const contexts\n+  --> $DIR/cmp_fn_pointers.rs:2:16\n    |\n LL |     unsafe { x == y }\n-   |              ^^^^^^\n+   |                ^^ no implementation for `fn() == _`\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+   = help: the trait `~const PartialEq<_>` is not implemented for `fn()`\n+note: the trait `PartialEq<_>` is implemented for `fn()`, but that implementation is not `const`\n+  --> $DIR/cmp_fn_pointers.rs:2:16\n+   |\n+LL |     unsafe { x == y }\n+   |                ^^\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             extern \"C\" fn() -> Ret\n+             extern \"C\" fn(A, B) -> Ret\n+             extern \"C\" fn(A, B, ...) -> Ret\n+             extern \"C\" fn(A, B, C) -> Ret\n+             extern \"C\" fn(A, B, C, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D) -> Ret\n+             extern \"C\" fn(A, B, C, D, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D, E) -> Ret\n+           and 68 others\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "13e6af36e0200225f5277c4937d5e10c196e636e", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -2,14 +2,8 @@\n #![feature(core_intrinsics)]\n #![allow(const_err)]\n \n-// During CTFE, we prevent pointer comparison and pointer-to-int casts.\n-\n-static CMP: () = {\n-    let x = &0 as *const _;\n-    let _v = x == x;\n-    //~^ ERROR could not evaluate static initializer\n-    //~| \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n-};\n+// During CTFE, we prevent pointer-to-int casts.\n+// Pointer comparisons are prevented in the trait system.\n \n static PTR_INT_CAST: () = {\n     let x = &0 as *const _ as usize;"}, {"sha": "00cff23fb3fbe4471c490bdd82afa3a4424fc7b8", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,34 +1,23 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:9:14\n-   |\n-LL |     let _v = x == x;\n-   |              ^^^^^^ \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n-\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:15:13\n+  --> $DIR/ptr_arith.rs:9:13\n    |\n LL |     let x = &0 as *const _ as usize;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ \"exposing pointers\" needs an rfc before being allowed inside constants\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:23:14\n+  --> $DIR/ptr_arith.rs:17:14\n    |\n LL |     let _v = x + 0;\n    |              ^ unable to turn pointer into raw bytes\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/ptr_arith.rs:9:14\n-   |\n-LL |     let _v = x == x;\n-   |              ^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/ptr_arith.rs:15:13\n+  --> $DIR/ptr_arith.rs:9:13\n    |\n LL |     let x = &0 as *const _ as usize;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "d2edd97efb232e6bd2a34d6053ea5a79f5a4672b", "filename": "src/test/ui/error-codes/E0395.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6f9826979ae590bba7f68024afebbb688f61911/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f9826979ae590bba7f68024afebbb688f61911/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=a6f9826979ae590bba7f68024afebbb688f61911", "patch": "@@ -1,8 +0,0 @@\n-static FOO: i32 = 42;\n-static BAR: i32 = 42;\n-\n-static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n-//~^ ERROR pointers cannot be reliably compared during const eval\n-\n-fn main() {\n-}"}, {"sha": "ea17e95a719affe5459868910029d459b388a771", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6f9826979ae590bba7f68024afebbb688f61911/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6f9826979ae590bba7f68024afebbb688f61911/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=a6f9826979ae590bba7f68024afebbb688f61911", "patch": "@@ -1,10 +0,0 @@\n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/E0395.rs:4:29\n-   |\n-LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-\n-error: aborting due to previous error\n-"}, {"sha": "d65818234ef97193dabf362725ef58395c3a40b9", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]: ~const FnOnce<()>` is not satisfied\n+error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]: FnOnce<()>` is not satisfied\n   --> $DIR/const-eval-select-bad.rs:7:27\n    |\n LL |     const_eval_select((), || {}, || {});\n@@ -19,7 +19,7 @@ note: required by a bound in `const_eval_select`\n LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n-error[E0277]: the trait bound `{integer}: ~const FnOnce<()>` is not satisfied\n+error[E0277]: the trait bound `{integer}: FnOnce<()>` is not satisfied\n   --> $DIR/const-eval-select-bad.rs:9:27\n    |\n LL |     const_eval_select((), 42, 0xDEADBEEF);"}, {"sha": "2bc5ee512c52fd1c77672e55b8c89926409a3756", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -3,7 +3,6 @@\n pub const fn equals_self<T: PartialEq>(t: &T) -> bool {\n     *t == *t\n     //~^ ERROR can't compare\n-    //~| ERROR cannot call non-const\n }\n \n fn main() {}"}, {"sha": "b011a2916fbd6eafce28d6801341fe2ed93be2b6", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,28 +1,22 @@\n-error[E0277]: can't compare `T` with `T` in const contexts\n-  --> $DIR/call-generic-method-fail.rs:4:5\n+error[E0277]: can't compare `T` with `_` in const contexts\n+  --> $DIR/call-generic-method-fail.rs:4:8\n    |\n LL |     *t == *t\n-   |     ^^^^^^^^ no implementation for `T == T`\n+   |        ^^ no implementation for `T == _`\n    |\n-note: the trait `PartialEq` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/call-generic-method-fail.rs:4:5\n+note: the trait `PartialEq<_>` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/call-generic-method-fail.rs:4:8\n    |\n LL |     *t == *t\n-   |     ^^^^^^^^\n+   |        ^^\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             <&A as PartialEq<&B>>\n+             <&A as PartialEq<&mut B>>\n+             <&mut A as PartialEq<&B>>\n+             <&mut A as PartialEq<&mut B>>\n+             <*const T as PartialEq>\n+             <*mut T as PartialEq>\n \n-error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/call-generic-method-fail.rs:4:5\n-   |\n-LL |     *t == *t\n-   |     ^^^^^^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-help: consider further restricting this bound\n-   |\n-LL | pub const fn equals_self<T: PartialEq + ~const std::cmp::PartialEq>(t: &T) -> bool {\n-   |                                       ++++++++++++++++++++++++++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "140a06a73ac6d636909b49517ba77a2d4161846a", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -23,7 +23,6 @@ impl const ConstDefaultFn for ConstImpl {\n const fn test() {\n     NonConstImpl.a();\n     //~^ ERROR the trait bound\n-    //~| ERROR cannot call non-const fn\n     ConstImpl.a();\n }\n "}, {"sha": "ec724cc9675f134dc8d422b7209ec448ed4c6cbe", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -2,23 +2,18 @@ error[E0277]: the trait bound `NonConstImpl: ~const ConstDefaultFn` is not satis\n   --> $DIR/const-default-method-bodies.rs:24:18\n    |\n LL |     NonConstImpl.a();\n-   |                  ^^^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n+   |                  ^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n    |\n note: the trait `ConstDefaultFn` is implemented for `NonConstImpl`, but that implementation is not `const`\n   --> $DIR/const-default-method-bodies.rs:24:18\n    |\n LL |     NonConstImpl.a();\n-   |                  ^^^\n-\n-error[E0015]: cannot call non-const fn `<NonConstImpl as ConstDefaultFn>::a` in constant functions\n-  --> $DIR/const-default-method-bodies.rs:24:18\n-   |\n-LL |     NonConstImpl.a();\n-   |                  ^^^\n+   |                  ^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | const fn test() where NonConstImpl: ~const ConstDefaultFn {\n+   |                 +++++++++++++++++++++++++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3ca9abb139b86e03753ef05983a639b40360af8b", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gated.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6f9826979ae590bba7f68024afebbb688f61911/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6f9826979ae590bba7f68024afebbb688f61911/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr?ref=a6f9826979ae590bba7f68024afebbb688f61911", "patch": "@@ -1,24 +0,0 @@\n-error[E0277]: the trait bound `cross_crate::NonConst: ~const cross_crate::MyTrait` is not satisfied\n-  --> $DIR/cross-crate.rs:15:14\n-   |\n-LL |     NonConst.func();\n-   |              ^^^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n-   |\n-note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n-  --> $DIR/cross-crate.rs:15:14\n-   |\n-LL |     NonConst.func();\n-   |              ^^^^^^\n-\n-error[E0015]: cannot call non-const fn `<cross_crate::NonConst as cross_crate::MyTrait>::func` in constant functions\n-  --> $DIR/cross-crate.rs:15:14\n-   |\n-LL |     NonConst.func();\n-   |              ^^^^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`."}, {"sha": "174c62912fcee84aa56454dcd909d7d19d8eee90", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gatednc.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `cross_crate::NonConst: ~const cross_crate::MyTrait` is not satisfied\n+  --> $DIR/cross-crate.rs:17:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |\n+note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n+  --> $DIR/cross-crate.rs:17:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {\n+   |                          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6df47022cc948077b0d64c82871d7e3db3a2ec6c", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,5 +1,6 @@\n-// revisions: stock gated\n-#![cfg_attr(gated, feature(const_trait_impl))]\n+// revisions: stock gated stocknc gatednc\n+// [gated] check-pass\n+#![cfg_attr(any(gated, gatednc), feature(const_trait_impl))]\n \n // aux-build: cross-crate.rs\n extern crate cross_crate;\n@@ -12,10 +13,12 @@ fn non_const_context() {\n }\n \n const fn const_context() {\n-    NonConst.func(); //~ ERROR: cannot call non-const fn\n-    //[gated]~^ ERROR: the trait bound\n+    #[cfg(any(stocknc, gatednc))]\n+    NonConst.func();\n+    //[stocknc]~^ ERROR: the trait bound\n+    //[gatednc]~^^ ERROR: the trait bound\n     Const.func();\n-    //[stock]~^ ERROR: cannot call non-const fn\n+    //[stock]~^ ERROR: cannot call\n }\n \n fn main() {}"}, {"sha": "086547542bb095323cd027ca5d7ea5746a1289f3", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stock.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -1,19 +1,11 @@\n-error[E0015]: cannot call non-const fn `<cross_crate::NonConst as cross_crate::MyTrait>::func` in constant functions\n-  --> $DIR/cross-crate.rs:15:14\n-   |\n-LL |     NonConst.func();\n-   |              ^^^^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-\n error[E0015]: cannot call non-const fn `<cross_crate::Const as cross_crate::MyTrait>::func` in constant functions\n-  --> $DIR/cross-crate.rs:17:11\n+  --> $DIR/cross-crate.rs:20:11\n    |\n LL |     Const.func();\n    |           ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "4619dd1138e1ff2f44539ad71ab69e05167bf792", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stocknc.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `cross_crate::NonConst: cross_crate::MyTrait` is not satisfied\n+  --> $DIR/cross-crate.rs:17:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |\n+note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n+  --> $DIR/cross-crate.rs:17:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {\n+   |                          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f70ecbc3746f992c8b4974a4a6dccc3b950e42f5", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -7,7 +7,6 @@ pub trait Tr {\n     fn b(&self) {\n         ().a()\n         //~^ ERROR the trait bound\n-        //~| ERROR cannot call\n     }\n }\n "}, {"sha": "b229053eb50cfa5e3aaa1bcd6a2aaa10e6bd5499", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d60ebe366bcc6b51e5ae1337288837a0be60ed36/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=d60ebe366bcc6b51e5ae1337288837a0be60ed36", "patch": "@@ -2,23 +2,18 @@ error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n   --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n    |\n LL |         ().a()\n-   |            ^^^ the trait `~const Tr` is not implemented for `()`\n+   |            ^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n   --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n    |\n LL |         ().a()\n-   |            ^^^\n-\n-error[E0015]: cannot call non-const fn `<() as Tr>::a` in constant functions\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n-   |\n-LL |         ().a()\n-   |            ^^^\n+   |            ^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | pub trait Tr where (): ~const Tr {\n+   |              +++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}]}