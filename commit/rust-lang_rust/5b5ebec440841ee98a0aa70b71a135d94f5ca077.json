{"sha": "5b5ebec440841ee98a0aa70b71a135d94f5ca077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNWViZWM0NDA4NDFlZTk4YTBhYTcwYjcxYTEzNWQ5NGY1Y2EwNzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-21T17:50:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-21T18:05:33Z"}, "message": "Formalize JoinLines protocol extension", "tree": {"sha": "5accb5fce10496334b49ed5a823d321572b375b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5accb5fce10496334b49ed5a823d321572b375b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5ebec440841ee98a0aa70b71a135d94f5ca077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5ebec440841ee98a0aa70b71a135d94f5ca077", "html_url": "https://github.com/rust-lang/rust/commit/5b5ebec440841ee98a0aa70b71a135d94f5ca077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5ebec440841ee98a0aa70b71a135d94f5ca077/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6cf638fbf3d0a025e804f2d354d91abc8afd28", "html_url": "https://github.com/rust-lang/rust/commit/ba6cf638fbf3d0a025e804f2d354d91abc8afd28"}], "stats": {"total": 176, "additions": 129, "deletions": 47}, "files": [{"sha": "97ff67ee891da5ebb689472432f106837757430a", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -89,6 +89,7 @@ pub use ra_ide_db::{\n     symbol_index::Query,\n     RootDatabase,\n };\n+pub use ra_text_edit::{Indel, TextEdit};\n \n pub type Cancelable<T> = Result<T, Canceled>;\n \n@@ -285,14 +286,10 @@ impl Analysis {\n \n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n-    pub fn join_lines(&self, frange: FileRange) -> Cancelable<SourceChange> {\n+    pub fn join_lines(&self, frange: FileRange) -> Cancelable<TextEdit> {\n         self.with_db(|db| {\n             let parse = db.parse(frange.file_id);\n-            let file_edit = SourceFileEdit {\n-                file_id: frange.file_id,\n-                edit: join_lines::join_lines(&parse.tree(), frange.range),\n-            };\n-            SourceChange::source_file_edit(\"Join lines\", file_edit)\n+            join_lines::join_lines(&parse.tree(), frange.range)\n         })\n     }\n "}, {"sha": "25554f583ec21a2403fbfbc2691ddd1236eeb3a0", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -17,7 +17,7 @@ pub struct Indel {\n     pub delete: TextRange,\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Default, Debug, Clone)]\n pub struct TextEdit {\n     indels: Vec<Indel>,\n }\n@@ -64,14 +64,6 @@ impl TextEdit {\n         builder.finish()\n     }\n \n-    pub(crate) fn from_indels(mut indels: Vec<Indel>) -> TextEdit {\n-        indels.sort_by_key(|a| (a.delete.start(), a.delete.end()));\n-        for (a1, a2) in indels.iter().zip(indels.iter().skip(1)) {\n-            assert!(a1.delete.end() <= a2.delete.start())\n-        }\n-        TextEdit { indels }\n-    }\n-\n     pub fn len(&self) -> usize {\n         self.indels.len()\n     }\n@@ -122,6 +114,17 @@ impl TextEdit {\n         *text = buf\n     }\n \n+    pub fn union(&mut self, other: TextEdit) -> Result<(), TextEdit> {\n+        // FIXME: can be done without allocating intermediate vector\n+        let mut all = self.iter().chain(other.iter()).collect::<Vec<_>>();\n+        if !check_disjoint(&mut all) {\n+            return Err(other);\n+        }\n+        self.indels.extend(other.indels);\n+        assert!(check_disjoint(&mut self.indels));\n+        Ok(())\n+    }\n+\n     pub fn apply_to_offset(&self, offset: TextSize) -> Option<TextSize> {\n         let mut res = offset;\n         for indel in self.indels.iter() {\n@@ -149,9 +152,19 @@ impl TextEditBuilder {\n         self.indels.push(Indel::insert(offset, text))\n     }\n     pub fn finish(self) -> TextEdit {\n-        TextEdit::from_indels(self.indels)\n+        let mut indels = self.indels;\n+        assert!(check_disjoint(&mut indels));\n+        TextEdit { indels }\n     }\n     pub fn invalidates_offset(&self, offset: TextSize) -> bool {\n         self.indels.iter().any(|indel| indel.delete.contains_inclusive(offset))\n     }\n }\n+\n+fn check_disjoint(indels: &mut [impl std::borrow::Borrow<Indel>]) -> bool {\n+    indels.sort_by_key(|indel| (indel.borrow().delete.start(), indel.borrow().delete.end()));\n+    indels\n+        .iter()\n+        .zip(indels.iter().skip(1))\n+        .all(|(l, r)| l.borrow().delete.end() <= r.borrow().delete.start())\n+}"}, {"sha": "4c417c270454afea135b791b668a907612e4cc5e", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -1,8 +1,6 @@\n //! Advertizes the capabilities of the LSP Server.\n use std::env;\n \n-use crate::semantic_tokens;\n-\n use lsp_types::{\n     CallHierarchyServerCapability, CodeActionOptions, CodeActionProviderCapability,\n     CodeLensOptions, CompletionOptions, DocumentOnTypeFormattingOptions,\n@@ -12,6 +10,9 @@ use lsp_types::{\n     ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n     TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n };\n+use serde_json::json;\n+\n+use crate::semantic_tokens;\n \n pub fn server_capabilities() -> ServerCapabilities {\n     ServerCapabilities {\n@@ -91,6 +92,8 @@ pub fn server_capabilities() -> ServerCapabilities {\n             }\n             .into(),\n         ),\n-        experimental: Default::default(),\n+        experimental: Some(json!({\n+            \"joinLines\": true,\n+        })),\n     }\n }"}, {"sha": "1bb1b02ab49570f05d9f2ca43206d9edffc41052", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -87,15 +87,15 @@ pub enum JoinLines {}\n \n impl Request for JoinLines {\n     type Params = JoinLinesParams;\n-    type Result = SourceChange;\n-    const METHOD: &'static str = \"rust-analyzer/joinLines\";\n+    type Result = Vec<lsp_types::TextEdit>;\n+    const METHOD: &'static str = \"experimental/joinLines\";\n }\n \n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct JoinLinesParams {\n     pub text_document: TextDocumentIdentifier,\n-    pub range: Range,\n+    pub ranges: Vec<Range>,\n }\n \n pub enum OnEnter {}"}, {"sha": "12196471880882a64dfeab848b9854ac0dded347", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -15,10 +15,11 @@ use lsp_types::{\n     DocumentSymbol, FoldingRange, FoldingRangeParams, Hover, HoverContents, Location,\n     MarkupContent, MarkupKind, Position, PrepareRenameResponse, Range, RenameParams,\n     SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n-    SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, TextEdit, Url, WorkspaceEdit,\n+    SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use ra_ide::{\n     Assist, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n+    TextEdit,\n };\n use ra_prof::profile;\n use ra_project_model::TargetKind;\n@@ -149,11 +150,24 @@ pub fn handle_find_matching_brace(\n pub fn handle_join_lines(\n     world: WorldSnapshot,\n     params: lsp_ext::JoinLinesParams,\n-) -> Result<lsp_ext::SourceChange> {\n+) -> Result<Vec<lsp_types::TextEdit>> {\n     let _p = profile(\"handle_join_lines\");\n-    let frange = from_proto::file_range(&world, params.text_document, params.range)?;\n-    let source_change = world.analysis().join_lines(frange)?;\n-    to_proto::source_change(&world, source_change)\n+    let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+    let line_endings = world.file_line_endings(file_id);\n+    let mut res = TextEdit::default();\n+    for range in params.ranges {\n+        let range = from_proto::text_range(&line_index, range);\n+        let edit = world.analysis().join_lines(FileRange { file_id, range })?;\n+        match res.union(edit) {\n+            Ok(()) => (),\n+            Err(_edit) => {\n+                // just ignore overlapping edits\n+            }\n+        }\n+    }\n+    let res = to_proto::text_edit_vec(&line_index, line_endings, res);\n+    Ok(res)\n }\n \n pub fn handle_on_enter(\n@@ -172,7 +186,7 @@ pub fn handle_on_enter(\n pub fn handle_on_type_formatting(\n     world: WorldSnapshot,\n     params: lsp_types::DocumentOnTypeFormattingParams,\n-) -> Result<Option<Vec<TextEdit>>> {\n+) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n     let _p = profile(\"handle_on_type_formatting\");\n     let mut position = from_proto::file_position(&world, params.text_document_position)?;\n     let line_index = world.analysis().file_line_index(position.file_id)?;\n@@ -618,7 +632,7 @@ pub fn handle_references(\n pub fn handle_formatting(\n     world: WorldSnapshot,\n     params: DocumentFormattingParams,\n-) -> Result<Option<Vec<TextEdit>>> {\n+) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n     let _p = profile(\"handle_formatting\");\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let file = world.analysis().file_text(file_id)?;\n@@ -685,7 +699,7 @@ pub fn handle_formatting(\n         }\n     }\n \n-    Ok(Some(vec![TextEdit {\n+    Ok(Some(vec![lsp_types::TextEdit {\n         range: Range::new(Position::new(0, 0), end_position),\n         new_text: captured_stdout,\n     }]))"}, {"sha": "f6f4bb13402dfd4cc0b1813ba0612639a7588ddd", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -2,12 +2,11 @@\n use ra_db::{FileId, FileRange};\n use ra_ide::{\n     Assist, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold, FoldKind,\n-    FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange, InlayHint,\n-    InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess, Severity,\n-    SourceChange, SourceFileEdit,\n+    FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange, Indel,\n+    InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess, Severity,\n+    SourceChange, SourceFileEdit, TextEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n-use ra_text_edit::{Indel, TextEdit};\n use ra_vfs::LineEndings;\n \n use crate::{lsp_ext, semantic_tokens, world::WorldSnapshot, Result};"}, {"sha": "0e3a0af1cbb5c802e18af941574736f066410798", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -7,13 +7,7 @@ All capabilities are enabled via `experimental` field of `ClientCapabilities`.\n \n ## `SnippetTextEdit`\n \n-**Capability**\n-\n-```typescript\n-{\n-    \"snippetTextEdit\": boolean\n-}\n-```\n+**Client Capability:** `{ \"snippetTextEdit\": boolean }`\n \n If this capability is set, `WorkspaceEdit`s returned from `codeAction` requests might contain `SnippetTextEdit`s instead of usual `TextEdit`s:\n \n@@ -32,3 +26,61 @@ export interface TextDocumentEdit {\n \n When applying such code action, the editor should insert snippet, with tab stops and placeholder.\n At the moment, rust-analyzer guarantees that only a single edit will have `InsertTextFormat.Snippet`.\n+\n+### Example\n+\n+\"Add `derive`\" code action transforms `struct S;` into `#[derive($0)] struct S;`\n+\n+### Unresolved Questions\n+\n+* Where exactly are `SnippetTextEdit`s allowed (only in code actions at the moment)?\n+* Can snippets span multiple files (so far, no)?\n+\n+## `joinLines`\n+\n+**Server Capability:** `{ \"joinLines\": boolean }`\n+\n+This request is send from client to server to handle \"Join Lines\" editor action.\n+\n+**Method:** `experimental/JoinLines`\n+\n+**Request:**\n+\n+```typescript\n+interface JoinLinesParams {\n+    textDocument: TextDocumentIdentifier,\n+    /// Currently active selections/cursor offsets.\n+    /// This is an array to support multiple cursors.\n+    ranges: Range[],\n+}\n+```\n+\n+**Response:**\n+\n+```typescript\n+TextEdit[]\n+```\n+\n+### Example\n+\n+```rust\n+fn main() {\n+    /*cursor here*/let x = {\n+        92\n+    };\n+}\n+```\n+\n+`experimental/joinLines` yields (curly braces are automagiacally removed)\n+\n+```rust\n+fn main() {\n+    let x = 92;\n+}\n+```\n+\n+### Unresolved Question\n+\n+* What is the position of the cursor after `joinLines`?\n+  Currently this is left to editor's discretion, but it might be useful to specify on the server via snippets.\n+  However, it then becomes unclear how it works with multi cursor."}, {"sha": "0bf1ee6e671e12ba46b06663b20d9c20ee4face4", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -1,18 +1,22 @@\n import * as ra from '../rust-analyzer-api';\n+import * as lc from 'vscode-languageclient';\n \n import { Ctx, Cmd } from '../ctx';\n-import { applySourceChange } from '../source_change';\n \n export function joinLines(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const change = await client.sendRequest(ra.joinLines, {\n-            range: client.code2ProtocolConverter.asRange(editor.selection),\n+        const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n+            ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n             textDocument: { uri: editor.document.uri.toString() },\n         });\n-        await applySourceChange(ctx, change);\n+        editor.edit((builder) => {\n+            client.protocol2CodeConverter.asTextEdits(items).forEach((edit) => {\n+                builder.replace(edit.range, edit.newText);\n+            });\n+        });\n     };\n }"}, {"sha": "8ed56c173ee524fd7f34b5332b845d00ca7b18ee", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b5ebec440841ee98a0aa70b71a135d94f5ca077/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5b5ebec440841ee98a0aa70b71a135d94f5ca077/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=5b5ebec440841ee98a0aa70b71a135d94f5ca077", "patch": "@@ -64,9 +64,9 @@ export const parentModule = request<lc.TextDocumentPositionParams, Vec<lc.Locati\n \n export interface JoinLinesParams {\n     textDocument: lc.TextDocumentIdentifier;\n-    range: lc.Range;\n+    ranges: lc.Range[];\n }\n-export const joinLines = request<JoinLinesParams, SourceChange>(\"joinLines\");\n+export const joinLines = new lc.RequestType<JoinLinesParams, lc.TextEdit[], unknown>('experimental/joinLines');\n \n \n export const onEnter = request<lc.TextDocumentPositionParams, Option<lc.WorkspaceEdit>>(\"onEnter\");"}]}