{"sha": "0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNDBmZjVlNjIzYjM2NzBjZTNlMGUzMjRlY2JhYjNlNTE5N2FhZWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-21T09:51:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-21T09:51:06Z"}, "message": "Merge #8131\n\n8131: Do smart case fuzzy search during flyimports r=SomeoneToIgnore a=SomeoneToIgnore\n\nFor now, last actionable part of https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/autoimport.20weirdness\r\n\r\nShould help https://github.com/rust-analyzer/rust-analyzer/issues/7902\r\n\r\nNow during the flyimport completion, if the input is searched case-sensitively, if the input contains any non-lowercase letters; otherwise the lookup done as before, case-insensitively.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "b376f04aa3bd91eb13007e1a334327a45e45753c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b376f04aa3bd91eb13007e1a334327a45e45753c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVxcKCRBK7hj4Ov3rIwAAdHIIAGFKKiGNfM4Mmj0gJVK2NsKe\nBenI771Clx/tKwyfZoGqrDGt+IluuuDuTJEuOXJcQt8psALeYZUmX3mCg3KlUybr\n5Lk6Yd/u+Iude7N4sPTS/p0c6msDHnrUvNc1EQejxisL0v6NcEPg6g+TMhC9oCTl\n9SXOpZSaO+fVRNQ28N7an3dzvHb0krKJJr7MZyj8Ln4AiiPGWIMlTpj8cRrka/Tp\n9dLd+H2Uin7a3hQXm5ejHA93axXWlRm4UT/KWj55kbNAWhUyIe6QzECijYARqkze\nyC3zotz4V0v21buAHh71DVgdmSwhZEnPuzwLKQEhtkpb5NOrbmUaG2hLozKTyB8=\n=xicd\n-----END PGP SIGNATURE-----\n", "payload": "tree b376f04aa3bd91eb13007e1a334327a45e45753c\nparent 09412d85fc3137d6ada3b27170e14c287f1a1191\nparent b17d99c0706674c7549aca4670f915aa0b0e2f4e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616320266 +0000\ncommitter GitHub <noreply@github.com> 1616320266 +0000\n\nMerge #8131\n\n8131: Do smart case fuzzy search during flyimports r=SomeoneToIgnore a=SomeoneToIgnore\n\nFor now, last actionable part of https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/autoimport.20weirdness\r\n\r\nShould help https://github.com/rust-analyzer/rust-analyzer/issues/7902\r\n\r\nNow during the flyimport completion, if the input is searched case-sensitively, if the input contains any non-lowercase letters; otherwise the lookup done as before, case-insensitively.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "html_url": "https://github.com/rust-lang/rust/commit/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09412d85fc3137d6ada3b27170e14c287f1a1191", "url": "https://api.github.com/repos/rust-lang/rust/commits/09412d85fc3137d6ada3b27170e14c287f1a1191", "html_url": "https://github.com/rust-lang/rust/commit/09412d85fc3137d6ada3b27170e14c287f1a1191"}, {"sha": "b17d99c0706674c7549aca4670f915aa0b0e2f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17d99c0706674c7549aca4670f915aa0b0e2f4e", "html_url": "https://github.com/rust-lang/rust/commit/b17d99c0706674c7549aca4670f915aa0b0e2f4e"}], "stats": {"total": 121, "additions": 93, "deletions": 28}, "files": [{"sha": "4f0ef52ca04faf7b0aa02cb02d52588c4c4475c9", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "patch": "@@ -72,7 +72,6 @@ pub(crate) fn replace_derive_with_manual_impl(\n         items_locator::AssocItemSearch::Exclude,\n         Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n-    .into_iter()\n     .filter_map(|item| match ModuleDef::from(item.as_module_def_id()?) {\n         ModuleDef::Trait(trait_) => Some(trait_),\n         _ => None,"}, {"sha": "1ad01719829a303a92d8f207a80502c22ea5dbea", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "patch": "@@ -1,8 +1,10 @@\n //! Feature: completion with imports-on-the-fly\n //!\n //! When completing names in the current scope, proposes additional imports from other modules or crates,\n-//! if they can be qualified in the scope and their name contains all symbols from the completion input\n-//! (case-insensitive, in any order or places).\n+//! if they can be qualified in the scope and their name contains all symbols from the completion input.\n+//!\n+//! To be considered applicable, the name must contain all input symbols in the given order, not necessarily adjacent.\n+//! If any input symbol is not lowercased, the name must contain all symbols in exact case; otherwise the contaning is checked case-insensitively.\n //!\n //! ```\n //! fn main() {\n@@ -942,7 +944,7 @@ mod foo {\n }\n \n fn main() {\n-    bar::Ass$0\n+    bar::ASS$0\n }\"#,\n             expect![[]],\n         )\n@@ -979,4 +981,57 @@ fn main() {\n             expect![[]],\n         )\n     }\n+\n+    #[test]\n+    fn case_matters() {\n+        check(\n+            r#\"\n+mod foo {\n+    pub const TEST_CONST: usize = 3;\n+    pub fn test_function() -> i32 {\n+        4\n+    }\n+}\n+\n+fn main() {\n+    TE$0\n+}\"#,\n+            expect![[r#\"\n+        ct foo::TEST_CONST\n+    \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+mod foo {\n+    pub const TEST_CONST: usize = 3;\n+    pub fn test_function() -> i32 {\n+        4\n+    }\n+}\n+\n+fn main() {\n+    te$0\n+}\"#,\n+            expect![[r#\"\n+        ct foo::TEST_CONST\n+        fn test_function() (foo::test_function) fn() -> i32\n+    \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+mod foo {\n+    pub const TEST_CONST: usize = 3;\n+    pub fn test_function() -> i32 {\n+        4\n+    }\n+}\n+\n+fn main() {\n+    Te$0\n+}\"#,\n+            expect![[]],\n+        );\n+    }\n }"}, {"sha": "5ac1cb48d49a2ee6eed419e04000cbe03bbd37d0", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "patch": "@@ -161,7 +161,6 @@ pub fn resolve_completion_edits(\n         items_locator::AssocItemSearch::Include,\n         Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n-    .into_iter()\n     .filter_map(|candidate| {\n         current_module\n             .find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)"}, {"sha": "1881c746f691e91001c13144c8c4ba19c03eb62a", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "patch": "@@ -267,7 +267,6 @@ fn path_applicable_imports(\n                 AssocItemSearch::Exclude,\n                 Some(DEFAULT_QUERY_SEARCH_LIMIT),\n             )\n-            .into_iter()\n             .filter_map(|item| {\n                 let mod_path = mod_path(item)?;\n                 Some(LocatedImport::new(mod_path.clone(), item, item, Some(mod_path)))\n@@ -285,7 +284,6 @@ fn path_applicable_imports(\n                 AssocItemSearch::Include,\n                 Some(DEFAULT_QUERY_SEARCH_LIMIT),\n             )\n-            .into_iter()\n             .filter_map(|item| {\n                 import_for_item(\n                     sema.db,\n@@ -430,7 +428,6 @@ fn trait_applicable_items(\n         AssocItemSearch::AssocItemsOnly,\n         Some(DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n-    .into_iter()\n     .filter_map(|input| item_as_assoc(db, input))\n     .filter_map(|assoc| {\n         let assoc_item_trait = assoc.containing_trait(db)?;"}, {"sha": "ef796b6f7761c0682a10937c3b8acf9f46777b44", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "patch": "@@ -15,7 +15,6 @@ use crate::{\n     symbol_index::{self, FileSymbol},\n     RootDatabase,\n };\n-use rustc_hash::FxHashSet;\n \n /// A value to use, when uncertain which limit to pick.\n pub const DEFAULT_QUERY_SEARCH_LIMIT: usize = 40;\n@@ -32,16 +31,16 @@ pub enum AssocItemSearch {\n }\n \n /// Searches for importable items with the given name in the crate and its dependencies.\n-pub fn items_with_name(\n-    sema: &Semantics<'_, RootDatabase>,\n+pub fn items_with_name<'a>(\n+    sema: &'a Semantics<'_, RootDatabase>,\n     krate: Crate,\n     name: NameToImport,\n     assoc_item_search: AssocItemSearch,\n     limit: Option<usize>,\n-) -> FxHashSet<ItemInNs> {\n+) -> impl Iterator<Item = ItemInNs> + 'a {\n     let _p = profile::span(\"items_with_name\").detail(|| {\n         format!(\n-            \"Name: {} ({:?}), crate: {:?}, limit: {:?}\",\n+            \"Name: {}, crate: {:?}, assoc items: {:?}, limit: {:?}\",\n             name.text(),\n             assoc_item_search,\n             krate.display_name(sema.db).map(|name| name.to_string()),\n@@ -62,6 +61,8 @@ pub fn items_with_name(\n             (local_query, external_query)\n         }\n         NameToImport::Fuzzy(fuzzy_search_string) => {\n+            let mut local_query = symbol_index::Query::new(fuzzy_search_string.clone());\n+\n             let mut external_query = import_map::Query::new(fuzzy_search_string.clone())\n                 .search_mode(import_map::SearchMode::Fuzzy)\n                 .name_only();\n@@ -75,7 +76,12 @@ pub fn items_with_name(\n                 }\n             }\n \n-            (symbol_index::Query::new(fuzzy_search_string), external_query)\n+            if fuzzy_search_string.to_lowercase() != fuzzy_search_string {\n+                local_query.case_sensitive();\n+                external_query = external_query.case_sensitive();\n+            }\n+\n+            (local_query, external_query)\n         }\n     };\n \n@@ -87,13 +93,13 @@ pub fn items_with_name(\n     find_items(sema, krate, assoc_item_search, local_query, external_query)\n }\n \n-fn find_items(\n-    sema: &Semantics<'_, RootDatabase>,\n+fn find_items<'a>(\n+    sema: &'a Semantics<'_, RootDatabase>,\n     krate: Crate,\n     assoc_item_search: AssocItemSearch,\n     local_query: symbol_index::Query,\n     external_query: import_map::Query,\n-) -> FxHashSet<ItemInNs> {\n+) -> impl Iterator<Item = ItemInNs> + 'a {\n     let _p = profile::span(\"find_items\");\n     let db = sema.db;\n \n@@ -108,21 +114,18 @@ fn find_items(\n     // Query the local crate using the symbol index.\n     let local_results = symbol_index::crate_symbols(db, krate.into(), local_query)\n         .into_iter()\n-        .filter_map(|local_candidate| get_name_definition(sema, &local_candidate))\n+        .filter_map(move |local_candidate| get_name_definition(sema, &local_candidate))\n         .filter_map(|name_definition_to_import| match name_definition_to_import {\n             Definition::ModuleDef(module_def) => Some(ItemInNs::from(module_def)),\n             Definition::Macro(macro_def) => Some(ItemInNs::from(macro_def)),\n             _ => None,\n         });\n \n-    external_importables\n-        .chain(local_results)\n-        .filter(move |&item| match assoc_item_search {\n-            AssocItemSearch::Include => true,\n-            AssocItemSearch::Exclude => !is_assoc_item(item, sema.db),\n-            AssocItemSearch::AssocItemsOnly => is_assoc_item(item, sema.db),\n-        })\n-        .collect()\n+    external_importables.chain(local_results).filter(move |&item| match assoc_item_search {\n+        AssocItemSearch::Include => true,\n+        AssocItemSearch::Exclude => !is_assoc_item(item, sema.db),\n+        AssocItemSearch::AssocItemsOnly => is_assoc_item(item, sema.db),\n+    })\n }\n \n fn get_name_definition("}, {"sha": "35e382b5cdb03846cfca01226eb5af84db282929", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "patch": "@@ -52,6 +52,7 @@ pub struct Query {\n     only_types: bool,\n     libs: bool,\n     exact: bool,\n+    case_sensitive: bool,\n     limit: usize,\n }\n \n@@ -64,6 +65,7 @@ impl Query {\n             only_types: false,\n             libs: false,\n             exact: false,\n+            case_sensitive: false,\n             limit: usize::max_value(),\n         }\n     }\n@@ -80,6 +82,10 @@ impl Query {\n         self.exact = true;\n     }\n \n+    pub fn case_sensitive(&mut self) {\n+        self.case_sensitive = true;\n+    }\n+\n     pub fn limit(&mut self, limit: usize) {\n         self.limit = limit\n     }\n@@ -326,8 +332,14 @@ impl Query {\n                     if self.only_types && !symbol.kind.is_type() {\n                         continue;\n                     }\n-                    if self.exact && symbol.name != self.query {\n-                        continue;\n+                    if self.exact {\n+                        if symbol.name != self.query {\n+                            continue;\n+                        }\n+                    } else if self.case_sensitive {\n+                        if self.query.chars().any(|c| !symbol.name.contains(c)) {\n+                            continue;\n+                        }\n                     }\n \n                     res.push(symbol.clone());"}]}