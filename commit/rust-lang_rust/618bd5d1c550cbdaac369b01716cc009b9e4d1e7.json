{"sha": "618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOGJkNWQxYzU1MGNiZGFhYzM2OWIwMTcxNmNjMDA5YjllNGQxZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T15:26:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T15:26:43Z"}, "message": "auto merge of #19070 : nikomatsakis/rust/crates, r=nikomatsakis\n\nReduces memory usage significantly and opens opportunities for more parallel compilation.\r\n\r\nThis PR was previously #19002 but I closed it because bors didn't seem to recognize the `r+` annotations there.", "tree": {"sha": "d84fc4251cce5fc21e53c1eb5918192cb883063b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d84fc4251cce5fc21e53c1eb5918192cb883063b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "html_url": "https://github.com/rust-lang/rust/commit/618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9", "html_url": "https://github.com/rust-lang/rust/commit/d7a29d87ba6bfca0bfe6207a99c7ec2b7ce869b9"}, {"sha": "dc6e414e6f85293aceca3357e2466bcc4bcf425c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6e414e6f85293aceca3357e2466bcc4bcf425c", "html_url": "https://github.com/rust-lang/rust/commit/dc6e414e6f85293aceca3357e2466bcc4bcf425c"}], "stats": {"total": 1174, "additions": 641, "deletions": 533}, "files": [{"sha": "1a9d1e82467af33615c754439d741b83bf60c1ad", "filename": "mk/crates.mk", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -53,7 +53,7 @@ TARGET_CRATES := libc std green native flate arena term \\\n                  serialize sync getopts collections test time rand \\\n                  log regex graphviz core rbml alloc rustrt \\\n                  unicode\n-HOST_CRATES := syntax rustc rustdoc regex_macros fmt_macros \\\n+HOST_CRATES := syntax rustc rustc_trans rustdoc regex_macros fmt_macros \\\n \t       rustc_llvm rustc_back\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n@@ -69,11 +69,12 @@ DEPS_graphviz := std\n DEPS_green := std native:context_switch\n DEPS_native := std\n DEPS_syntax := std term serialize log fmt_macros arena libc\n+DEPS_rustc_trans := rustc rustc_back rustc_llvm libc\n DEPS_rustc := syntax flate arena serialize getopts rbml \\\n               time log graphviz rustc_llvm rustc_back\n DEPS_rustc_llvm := native:rustllvm libc std\n DEPS_rustc_back := std syntax rustc_llvm flate log libc\n-DEPS_rustdoc := rustc native:hoedown serialize getopts \\\n+DEPS_rustdoc := rustc rustc_trans native:hoedown serialize getopts \\\n                 test time\n DEPS_flate := std native:miniz\n DEPS_arena := std\n@@ -96,7 +97,7 @@ DEPS_fmt_macros = std\n \n TOOL_DEPS_compiletest := test getopts native\n TOOL_DEPS_rustdoc := rustdoc native\n-TOOL_DEPS_rustc := rustc native\n+TOOL_DEPS_rustc := rustc_trans native\n TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs\n TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n@@ -112,8 +113,8 @@ ONLY_RLIB_unicode := 1\n # You should not need to edit below this line\n ################################################################################\n \n-DOC_CRATES := $(filter-out rustc, $(filter-out syntax, $(CRATES)))\n-COMPILER_DOC_CRATES := rustc syntax\n+DOC_CRATES := $(filter-out rustc, $(filter-out rustc_trans, $(filter-out syntax, $(CRATES))))\n+COMPILER_DOC_CRATES := rustc rustc_trans syntax\n \n # This macro creates some simple definitions for each crate being built, just\n # some munging of all of the parameters above."}, {"sha": "632d21d7b9c05deea379d824054e8b81516fa14e", "filename": "src/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -12,6 +12,6 @@\n extern crate \"rustdoc\" as this;\n \n #[cfg(rustc)]\n-extern crate \"rustc\" as this;\n+extern crate \"rustc_trans\" as this;\n \n fn main() { this::main() }"}, {"sha": "e79ee7fa6477bea68a32eb3ccb28bb6baf965fab", "filename": "src/librustc/README.txt", "status": "modified", "additions": 59, "deletions": 28, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.txt?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -13,31 +13,62 @@ https://github.com/rust-lang/rust/issues\n \n Your concerns are probably the same as someone else's.\n \n-\n-High-level concepts\n+The crates of rustc\n ===================\n \n-Rustc consists of the following subdirectories:\n-\n-front/    - front-end: attributes, conditional compilation\n-middle/   - middle-end: name resolution, typechecking, LLVM code\n+Rustc consists of four crates altogether: `libsyntax`, `librustc`,\n+`librustc_back`, and `librustc_trans` (the names and divisions are not\n+set in stone and may change; in general, a finer-grained division of\n+crates is preferable):\n+\n+- `libsyntax` contains those things concerned purely with syntax --\n+  that is, the AST, parser, pretty-printer, lexer, macro expander, and\n+  utilities for traversing ASTs -- are in a separate crate called\n+  \"syntax\", whose files are in ./../libsyntax, where . is the current\n+  directory (that is, the parent directory of front/, middle/, back/,\n+  and so on).\n+\n+- `librustc` (the current directory) contains the high-level analysis\n+  passes, such as the type checker, borrow checker, and so forth.\n+  It is the heart of the compiler.\n+\n+- `librustc_back` contains some very low-level details that are\n+  specific to different LLVM targets and so forth.\n+\n+- `librustc_trans` contains the code to convert from Rust IR into LLVM\n+  IR, and then from LLVM IR into machine code, as well as the main\n+  driver that orchestrates all the other passes and various other bits\n+  of miscellany. In general it contains code that runs towards the\n+  end of the compilation process.\n+  \n+Roughly speaking the \"order\" of the three crates is as follows:\n+\n+    libsyntax -> librustc -> librustc_trans\n+    |                                     |\n+    +-----------------+-------------------+\n+                      |\n+             librustc_trans/driver\n+\n+Here the role of `librustc_trans/driver` is to invoke the compiler\n+from libsyntax, then the analysis phases from librustc, and finally\n+the lowering and codegen passes from librustc_trans.\n+\n+Modules in the rustc crate\n+==========================\n+\n+The rustc crate itself consists of the following subdirectories\n+(mostly, but not entirely, in their own directories):\n+\n+session  - options and data that pertain to the compilation session as a whole\n+middle   - middle-end: name resolution, typechecking, LLVM code\n                   generation\n-back/     - back-end: linking and ABI\n-metadata/ - encoder and decoder for data required by\n+metadata - encoder and decoder for data required by\n                     separate compilation\n-driver/   - command-line processing, main() entrypoint\n-util/     - ubiquitous types and helper functions\n-lib/      - bindings to LLVM\n-\n-The files concerned purely with syntax -- that is, the AST, parser,\n-pretty-printer, lexer, macro expander, and utilities for traversing\n-ASTs -- are in a separate crate called \"syntax\", whose files are in\n-./../libsyntax, where . is the current directory (that is, the parent\n-directory of front/, middle/, back/, and so on).\n-\n-The entry-point for the compiler is main() in lib.rs, and\n-this file sequences the various parts together.\n+util     - ubiquitous types and helper functions\n+lib      - bindings to LLVM\n \n+The entry-point for the compiler is main() in the librustc_trans\n+crate. But the \n \n The 3 central data structures:\n ------------------------------\n@@ -66,10 +97,10 @@ The 3 central data structures:\n     compilation.  Most variants in the ast::ty tag have a\n     corresponding variant in the ty::sty tag.\n \n-#3: lib/llvm.rs defines the exported types ValueRef, TypeRef,\n-    BasicBlockRef, and several others. Each of these is an opaque\n-    pointer to an LLVM type, manipulated through the lib::llvm\n-    interface.\n+#3: lib/llvm.rs (in librustc_trans) defines the exported types\n+    ValueRef, TypeRef, BasicBlockRef, and several others. Each of\n+    these is an opaque pointer to an LLVM type, manipulated through\n+    the lib::llvm interface.\n \n \n Control and information flow within the compiler:\n@@ -87,7 +118,7 @@ Control and information flow within the compiler:\n   structures. The driver passes environments to each compiler pass\n   that needs to refer to them.\n \n-- Finally middle/trans.rs translates the Rust AST to LLVM bitcode in a\n-  type-directed way. When it's finished synthesizing LLVM values,\n-  rustc asks LLVM to write them out in some form (.bc, .o) and\n-  possibly run the system linker.\n+- Finally, the `trans` module in `librustc_trans` translates the Rust\n+  AST to LLVM bitcode in a type-directed way. When it's finished\n+  synthesizing LLVM values, rustc asks LLVM to write them out in some\n+  form (.bc, .o) and possibly run the system linker."}, {"sha": "0da9b05d4f862385047fe011e3289922ce3514e4", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -62,11 +62,6 @@ pub mod back {\n     pub use rustc_back::target_strs;\n     pub use rustc_back::x86;\n     pub use rustc_back::x86_64;\n-\n-    pub mod link;\n-    pub mod lto;\n-    pub mod write;\n-\n }\n \n pub mod middle {\n@@ -99,11 +94,9 @@ pub mod middle {\n     pub mod region;\n     pub mod resolve;\n     pub mod resolve_lifetime;\n-    pub mod save;\n     pub mod stability;\n     pub mod subst;\n     pub mod traits;\n-    pub mod trans;\n     pub mod ty;\n     pub mod ty_fold;\n     pub mod typeck;\n@@ -112,7 +105,7 @@ pub mod middle {\n \n pub mod metadata;\n \n-pub mod driver;\n+pub mod session;\n \n pub mod plugin;\n \n@@ -142,9 +135,3 @@ __build_diagnostic_array!(DIAGNOSTICS)\n mod rustc {\n     pub use lint;\n }\n-\n-pub fn main() {\n-    let args = std::os::args();\n-    let result = driver::run(args);\n-    std::os::set_exit_status(result);\n-}"}, {"sha": "e9b235a2fe34b3c31f54bb2d3336082e19c8a621", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -30,8 +30,7 @@ use middle::subst;\n use middle::ty;\n use middle::typeck::astconv::AstConv;\n use middle::typeck::infer;\n-use driver::session::Session;\n-use driver::early_error;\n+use session::{early_error, Session};\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass, LintPassObject};\n use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};\n use lint::builtin;"}, {"sha": "7f0941db6b2e4f28c0bf8de59961fb1bcff8652b", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -13,8 +13,7 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n use back::svh::Svh;\n-use driver::session::Session;\n-use driver::driver;\n+use session::{config, Session};\n use metadata::cstore;\n use metadata::cstore::{CStore, CrateSource};\n use metadata::decoder;\n@@ -455,7 +454,7 @@ impl<'a> PluginMetadataReader<'a> {\n     pub fn read_plugin_metadata(&mut self, krate: &ast::ViewItem) -> PluginMetadata {\n         let info = extract_crate_info(&self.env, krate).unwrap();\n         let target_triple = self.env.sess.opts.target_triple.as_slice();\n-        let is_cross = target_triple != driver::host_triple();\n+        let is_cross = target_triple != config::host_triple();\n         let mut should_link = info.should_link && !is_cross;\n         let mut load_ctxt = loader::Context {\n             sess: self.env.sess,\n@@ -464,7 +463,7 @@ impl<'a> PluginMetadataReader<'a> {\n             crate_name: info.name.as_slice(),\n             hash: None,\n             filesearch: self.env.sess.host_filesearch(),\n-            triple: driver::host_triple(),\n+            triple: config::host_triple(),\n             root: &None,\n             rejected_via_hash: vec!(),\n             rejected_via_triple: vec!(),\n@@ -481,7 +480,7 @@ impl<'a> PluginMetadataReader<'a> {\n                 if decoder::get_plugin_registrar_fn(lib.metadata.as_slice()).is_some() {\n                     let message = format!(\"crate `{}` contains a plugin_registrar fn but \\\n                                   only a version for triple `{}` could be found (need {})\",\n-                                  info.ident, target_triple, driver::host_triple());\n+                                  info.ident, target_triple, config::host_triple());\n                     self.env.sess.span_err(krate.span, message.as_slice());\n                     // need to abort now because the syntax expansion\n                     // code will shortly attempt to load and execute"}, {"sha": "e90bf1e2b33142e47cd49e4645574bae0fb5f4fc", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -16,7 +16,7 @@\n pub use self::InlinedItemRef::*;\n \n use back::svh::Svh;\n-use driver::config;\n+use session::config;\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;"}, {"sha": "269c15e7d81a4debe4059841f237d5b7e9c2b173", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -214,7 +214,7 @@\n \n use back::archive::{METADATA_FILENAME};\n use back::svh::Svh;\n-use driver::session::Session;\n+use session::Session;\n use llvm;\n use llvm::{False, ObjectFile, mk_section_iter};\n use llvm::archive_ro::ArchiveRO;"}, {"sha": "20dcf094b66209a1d84d5d26af43a88fadc7b426", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -14,7 +14,7 @@\n \n use metadata::common as c;\n use metadata::cstore as cstore;\n-use driver::session::Session;\n+use session::Session;\n use metadata::decoder;\n use middle::def;\n use metadata::encoder as e;"}, {"sha": "01ec9bbc13db05dc455bb84c27f786527c23852c", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n use self::Context::*;\n \n-use driver::session::Session;\n+use session::Session;\n \n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "b32eb64025f8800b14e063e9f5f1208cb188499c", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -11,7 +11,7 @@\n // This compiler pass detects static items that refer to themselves\n // recursively.\n \n-use driver::session::Session;\n+use session::Session;\n use middle::resolve;\n use middle::def::{DefStatic, DefConst};\n "}, {"sha": "e8e90e7498975451b3be19ad9efbf2a8fc16b892", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -63,8 +63,8 @@\n \n use syntax::ast;\n \n-use driver::session;\n-use driver::config;\n+use session;\n+use session::config;\n use metadata::cstore;\n use metadata::csearch;\n use middle::ty;"}, {"sha": "fd0162b30d8aedd02fbbfa48fa431c06c86943a1", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n \n-use driver::config;\n-use driver::session::Session;\n+use session::{config, Session};\n use syntax::ast::{Name, NodeId, Item, ItemFn};\n use syntax::ast_map;\n use syntax::attr;"}, {"sha": "da1c0bd649a16c78e4888e9d817984842f7e34cc", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -21,7 +21,7 @@\n \n pub use self::LangItem::*;\n \n-use driver::session::Session;\n+use session::Session;\n use metadata::csearch::each_lang_item;\n use middle::ty;\n use middle::weak_lang_items;"}, {"sha": "7dcc0510a6affe3581b465ddffe1e6daefcffdfd", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -15,11 +15,11 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use driver::config;\n use middle::def;\n use middle::ty;\n use middle::typeck;\n use middle::privacy;\n+use session::config;\n use util::nodemap::NodeSet;\n \n use std::collections::HashSet;"}, {"sha": "f3d62988cc09151a55bba7da73b8387ee5020921", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -21,7 +21,7 @@ Most of the documentation on regions can be found in\n */\n \n \n-use driver::session::Session;\n+use session::Session;\n use middle::ty::{FreeRegion};\n use middle::ty;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};"}, {"sha": "94b52532a946d63e1d346b128fe815e26e777b18", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -36,7 +36,7 @@ use self::ModuleKind::*;\n use self::TraitReferenceType::*;\n use self::FallbackChecks::*;\n \n-use driver::session::Session;\n+use session::Session;\n use lint;\n use metadata::csearch;\n use metadata::decoder::{DefLike, DlDef, DlField, DlImpl};"}, {"sha": "4077629f76dad12bf602beea584f2f7c32e35962", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -20,7 +20,7 @@\n pub use self::DefRegion::*;\n use self::ScopeChain::*;\n \n-use driver::session::Session;\n+use session::Session;\n use middle::subst;\n use std::fmt;\n use syntax::ast;"}, {"sha": "5ec89ffb9e7e2a76a0437017ee10648f7c728800", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -37,7 +37,7 @@ pub use self::sty::*;\n pub use self::IntVarValue::*;\n \n use back::svh::Svh;\n-use driver::session::Session;\n+use session::Session;\n use lint;\n use metadata::csearch;\n use middle::const_eval;"}, {"sha": "33705343dabe7de07788db0c4ce3504934ee5540", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -82,7 +82,7 @@ use self::Expectation::*;\n use self::IsBinopAssignment::*;\n use self::TupleArgumentsFlag::*;\n \n-use driver::session::Session;\n+use session::Session;\n use middle::const_eval;\n use middle::def;\n use middle::lang_items::IteratorItem;"}, {"sha": "a75e3a78e4b2530a3f99a093c81adbe573262210", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -67,7 +67,6 @@ pub mod region_inference;\n pub mod resolve;\n mod skolemize;\n pub mod sub;\n-pub mod test;\n pub mod type_variable;\n pub mod unify;\n \n@@ -996,6 +995,16 @@ impl TypeTrace {\n     pub fn span(&self) -> Span {\n         self.origin.span()\n     }\n+\n+    pub fn dummy() -> TypeTrace {\n+        TypeTrace {\n+            origin: Misc(codemap::DUMMY_SP),\n+            values: Types(ty::expected_found {\n+                expected: ty::mk_err(),\n+                found: ty::mk_err(),\n+            })\n+        }\n+    }\n }\n \n impl Repr for TypeTrace {"}, {"sha": "634b153a9ce341332cfa770b691aa48b668ba063", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -65,13 +65,12 @@ pub use self::ExprAdjustment::*;\n pub use self::vtable_origin::*;\n pub use self::MethodOrigin::*;\n \n-use driver::config;\n-\n use middle::def;\n use middle::resolve;\n use middle::subst;\n use middle::subst::VecPerParamSpace;\n use middle::ty;\n+use session::config;\n use util::common::time;\n use util::ppaux::Repr;\n use util::ppaux;"}, {"sha": "e0fe87d6d065a87171cdcbedcd9c92fe06c4360e", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -10,8 +10,8 @@\n \n //! Validity checking for weak lang items\n \n-use driver::config;\n-use driver::session::Session;\n+use session::config;\n+use session::Session;\n use metadata::csearch;\n use middle::lang_items;\n "}, {"sha": "1a270d0b1b7a6906dc1439e19c1263d37794696e", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -10,7 +10,7 @@\n \n //! Used by `rustc` when loading a plugin.\n \n-use driver::session::Session;\n+use session::Session;\n use metadata::creader::PluginMetadataReader;\n use plugin::registry::Registry;\n "}, {"sha": "e10a1a4342c45fcb660f042e20b9247d1bb8762e", "filename": "src/librustc/session/config.rs", "status": "renamed", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -15,14 +15,11 @@ pub use self::EntryFnType::*;\n pub use self::CrateType::*;\n pub use self::Passes::*;\n pub use self::OptLevel::*;\n+pub use self::OutputType::*;\n pub use self::DebugInfoLevel::*;\n \n-use driver::{early_error, early_warn};\n-use driver::driver;\n-use driver::session::Session;\n+use session::{early_error, early_warn, Session};\n \n-use back;\n-use back::write;\n use rustc_back::target::Target;\n use lint;\n use metadata::cstore;\n@@ -65,6 +62,15 @@ pub enum DebugInfoLevel {\n     FullDebugInfo,\n }\n \n+#[deriving(Clone, PartialEq, PartialOrd, Ord, Eq)]\n+pub enum OutputType {\n+    OutputTypeBitcode,\n+    OutputTypeAssembly,\n+    OutputTypeLlvmAssembly,\n+    OutputTypeObject,\n+    OutputTypeExe,\n+}\n+\n #[deriving(Clone)]\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n@@ -76,7 +82,7 @@ pub struct Options {\n     pub debuginfo: DebugInfoLevel,\n     pub lint_opts: Vec<(String, lint::Level)>,\n     pub describe_lints: bool,\n-    pub output_types: Vec<back::write::OutputType> ,\n+    pub output_types: Vec<OutputType> ,\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n@@ -108,6 +114,19 @@ pub struct Options {\n     pub alt_std_name: Option<String>\n }\n \n+pub fn host_triple() -> &'static str {\n+    // Get the host triple out of the build environment. This ensures that our\n+    // idea of the host triple is the same as for the set of libraries we've\n+    // actually built.  We can't just take LLVM's host triple because they\n+    // normalize all ix86 architectures to i386.\n+    //\n+    // Instead of grabbing the host triple (for the current host), we grab (at\n+    // compile time) the target triple that this rustc is built with and\n+    // calling that (at runtime) the host triple.\n+    (option_env!(\"CFG_COMPILER_HOST_TRIPLE\")).\n+        expect(\"CFG_COMPILER_HOST_TRIPLE\")\n+}\n+\n /// Some reasonable defaults\n pub fn basic_options() -> Options {\n     Options {\n@@ -120,7 +139,7 @@ pub fn basic_options() -> Options {\n         output_types: Vec::new(),\n         addl_lib_search_paths: RefCell::new(Vec::new()),\n         maybe_sysroot: None,\n-        target_triple: driver::host_triple().to_string(),\n+        target_triple: host_triple().to_string(),\n         cfg: Vec::new(),\n         test: false,\n         parse_only: false,\n@@ -673,11 +692,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         for unparsed_output_type in unparsed_output_types.iter() {\n             for part in unparsed_output_type.as_slice().split(',') {\n                 let output_type = match part.as_slice() {\n-                    \"asm\"  => write::OutputTypeAssembly,\n-                    \"ir\"   => write::OutputTypeLlvmAssembly,\n-                    \"bc\"   => write::OutputTypeBitcode,\n-                    \"obj\"  => write::OutputTypeObject,\n-                    \"link\" => write::OutputTypeExe,\n+                    \"asm\"  => OutputTypeAssembly,\n+                    \"ir\"   => OutputTypeLlvmAssembly,\n+                    \"bc\"   => OutputTypeBitcode,\n+                    \"obj\"  => OutputTypeObject,\n+                    \"link\" => OutputTypeExe,\n                     _ => {\n                         early_error(format!(\"unknown emission type: `{}`\",\n                                             part).as_slice())\n@@ -690,12 +709,12 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     output_types.as_mut_slice().sort();\n     output_types.dedup();\n     if output_types.len() == 0 {\n-        output_types.push(write::OutputTypeExe);\n+        output_types.push(OutputTypeExe);\n     }\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| Path::new(m));\n     let target = matches.opt_str(\"target\").unwrap_or(\n-        driver::host_triple().to_string());\n+        host_triple().to_string());\n     let opt_level = {\n         if matches.opt_present(\"O\") {\n             if matches.opt_present(\"opt-level\") {\n@@ -880,8 +899,8 @@ impl fmt::Show for CrateType {\n #[cfg(test)]\n mod test {\n \n-    use driver::config::{build_configuration, optgroups, build_session_options};\n-    use driver::session::build_session;\n+    use session::config::{build_configuration, optgroups, build_session_options};\n+    use session::build_session;\n \n     use getopts::getopts;\n     use syntax::attr;", "previous_filename": "src/librustc/driver/config.rs"}, {"sha": "d723db7706faceefc16ebbc2549314da0f5fbd23", "filename": "src/librustc/session/mod.rs", "status": "renamed", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -9,16 +9,14 @@\n // except according to those terms.\n \n \n-use driver::config;\n-use driver::driver;\n use metadata::cstore::CStore;\n use metadata::filesearch;\n use lint;\n use util::nodemap::NodeMap;\n \n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n-use syntax::diagnostic;\n+use syntax::diagnostic::{mod, Emitter};\n use syntax::diagnostics;\n use syntax::feature_gate;\n use syntax::parse;\n@@ -29,6 +27,8 @@ use syntax::{ast, codemap};\n use std::os;\n use std::cell::{Cell, RefCell};\n \n+pub mod config;\n+\n // Represents the data associated with a compilation\n // session for a single crate.\n pub struct Session {\n@@ -197,7 +197,7 @@ impl Session {\n     pub fn host_filesearch<'a>(&'a self) -> filesearch::FileSearch<'a> {\n         filesearch::FileSearch::new(\n             self.sysroot(),\n-            driver::host_triple(),\n+            config::host_triple(),\n             &self.opts.addl_lib_search_paths)\n     }\n }\n@@ -263,3 +263,15 @@ pub fn build_session_(sopts: config::Options,\n pub fn expect<T>(sess: &Session, opt: Option<T>, msg: || -> String) -> T {\n     diagnostic::expect(sess.diagnostic(), opt, msg)\n }\n+\n+pub fn early_error(msg: &str) -> ! {\n+    let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto, None);\n+    emitter.emit(None, msg, None, diagnostic::Fatal);\n+    panic!(diagnostic::FatalError);\n+}\n+\n+pub fn early_warn(msg: &str) {\n+    let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto, None);\n+    emitter.emit(None, msg, None, diagnostic::Warning);\n+}\n+", "previous_filename": "src/librustc/driver/session.rs"}, {"sha": "3904db4433c892a69bffc712ea2d01afa73788c0", "filename": "src/librustc_trans/README.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FREADME.txt?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -0,0 +1 @@\n+See the README.txt in ../librustc."}, {"sha": "d5d488e8965a3d0c34dda98ff528a162f282dc05", "filename": "src/librustc_trans/back/link.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -13,15 +13,15 @@ use super::archive;\n use super::rpath;\n use super::rpath::RPathConfig;\n use super::svh::Svh;\n-use super::write::{OutputTypeBitcode, OutputTypeExe, OutputTypeObject};\n use driver::driver::{CrateTranslation, OutputFilenames, Input, FileInput};\n-use driver::config::NoDebugInfo;\n-use driver::session::Session;\n-use driver::config;\n+use session::config;\n+use session::config::NoDebugInfo;\n+use session::config::{OutputTypeBitcode, OutputTypeExe, OutputTypeObject};\n+use session::Session;\n use metadata::common::LinkMeta;\n use metadata::{encoder, cstore, filesearch, csearch, creader};\n-use middle::trans::context::CrateContext;\n-use middle::trans::common::gensym_name;\n+use trans::context::CrateContext;\n+use trans::common::gensym_name;\n use middle::ty;\n use util::common::time;\n use util::ppaux;", "previous_filename": "src/librustc/back/link.rs"}, {"sha": "407f632bee7ddf610c3a3ddef1fb0e5ee5bf1c53", "filename": "src/librustc_trans/back/lto.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -10,13 +10,12 @@\n \n use super::link;\n use super::write;\n-use driver::session;\n-use driver::config;\n+use rustc::session::{mod, config};\n use llvm;\n use llvm::archive_ro::ArchiveRO;\n use llvm::{ModuleRef, TargetMachineRef, True, False};\n-use metadata::cstore;\n-use util::common::time;\n+use rustc::metadata::cstore;\n+use rustc::util::common::time;\n \n use libc;\n use flate;", "previous_filename": "src/librustc/back/lto.rs"}, {"sha": "abf29fe3a4cf95e37be921282bf61d2e6aa261a4", "filename": "src/librustc_trans/back/write.rs", "status": "renamed", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::OutputType::*;\n-\n use back::lto;\n use back::link::{get_cc_prog, remove};\n use driver::driver::{CrateTranslation, ModuleTranslation, OutputFilenames};\n-use driver::config::{NoDebugInfo, Passes, SomePasses, AllPasses};\n-use driver::session::Session;\n-use driver::config;\n+use session::config::{NoDebugInfo, Passes, SomePasses, AllPasses};\n+use session::Session;\n+use session::config;\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n use llvm::SMDiagnosticRef;\n@@ -35,15 +33,6 @@ use std::sync::{Arc, Mutex};\n use std::task::TaskBuilder;\n use libc::{c_uint, c_int, c_void};\n \n-#[deriving(Clone, PartialEq, PartialOrd, Ord, Eq)]\n-pub enum OutputType {\n-    OutputTypeBitcode,\n-    OutputTypeAssembly,\n-    OutputTypeLlvmAssembly,\n-    OutputTypeObject,\n-    OutputTypeExe,\n-}\n-\n pub fn llvm_err(handler: &diagnostic::Handler, msg: String) -> ! {\n     unsafe {\n         let cstr = llvm::LLVMRustGetLastError();\n@@ -536,7 +525,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n \n pub fn run_passes(sess: &Session,\n                   trans: &CrateTranslation,\n-                  output_types: &[OutputType],\n+                  output_types: &[config::OutputType],\n                   crate_output: &OutputFilenames) {\n     // It's possible that we have `codegen_units > 1` but only one item in\n     // `trans.modules`.  We could theoretically proceed and do LTO in that\n@@ -580,26 +569,26 @@ pub fn run_passes(sess: &Session,\n     // archive in order to allow LTO against it.\n     let needs_crate_bitcode =\n             sess.crate_types.borrow().contains(&config::CrateTypeRlib) &&\n-            sess.opts.output_types.contains(&OutputTypeExe);\n+            sess.opts.output_types.contains(&config::OutputTypeExe);\n     if needs_crate_bitcode {\n         modules_config.emit_bc = true;\n     }\n \n     for output_type in output_types.iter() {\n         match *output_type {\n-            OutputTypeBitcode => { modules_config.emit_bc = true; },\n-            OutputTypeLlvmAssembly => { modules_config.emit_ir = true; },\n-            OutputTypeAssembly => {\n+            config::OutputTypeBitcode => { modules_config.emit_bc = true; },\n+            config::OutputTypeLlvmAssembly => { modules_config.emit_ir = true; },\n+            config::OutputTypeAssembly => {\n                 modules_config.emit_asm = true;\n                 // If we're not using the LLVM assembler, this function\n                 // could be invoked specially with output_type_assembly, so\n                 // in this case we still want the metadata object file.\n-                if !sess.opts.output_types.contains(&OutputTypeAssembly) {\n+                if !sess.opts.output_types.contains(&config::OutputTypeAssembly) {\n                     metadata_config.emit_obj = true;\n                 }\n             },\n-            OutputTypeObject => { modules_config.emit_obj = true; },\n-            OutputTypeExe => {\n+            config::OutputTypeObject => { modules_config.emit_obj = true; },\n+            config::OutputTypeExe => {\n                 modules_config.emit_obj = true;\n                 metadata_config.emit_obj = true;\n             },\n@@ -647,7 +636,7 @@ pub fn run_passes(sess: &Session,\n \n     // Produce final compile outputs.\n \n-    let copy_if_one_unit = |ext: &str, output_type: OutputType, keep_numbered: bool| {\n+    let copy_if_one_unit = |ext: &str, output_type: config::OutputType, keep_numbered: bool| {\n         // Three cases:\n         if sess.opts.cg.codegen_units == 1 {\n             // 1) Only one codegen unit.  In this case it's no difficulty\n@@ -750,25 +739,31 @@ pub fn run_passes(sess: &Session,\n     let mut user_wants_bitcode = false;\n     for output_type in output_types.iter() {\n         match *output_type {\n-            OutputTypeBitcode => {\n+            config::OutputTypeBitcode => {\n                 user_wants_bitcode = true;\n                 // Copy to .bc, but always keep the .0.bc.  There is a later\n                 // check to figure out if we should delete .0.bc files, or keep\n                 // them for making an rlib.\n-                copy_if_one_unit(\"0.bc\", OutputTypeBitcode, true);\n-            },\n-            OutputTypeLlvmAssembly => { copy_if_one_unit(\"0.ll\", OutputTypeLlvmAssembly, false); },\n-            OutputTypeAssembly => { copy_if_one_unit(\"0.s\", OutputTypeAssembly, false); },\n-            OutputTypeObject => { link_obj(&crate_output.path(OutputTypeObject)); },\n-            OutputTypeExe => {\n-                // If OutputTypeObject is already in the list, then\n-                // `crate.o` will be handled by the OutputTypeObject case.\n+                copy_if_one_unit(\"0.bc\", config::OutputTypeBitcode, true);\n+            }\n+            config::OutputTypeLlvmAssembly => {\n+                copy_if_one_unit(\"0.ll\", config::OutputTypeLlvmAssembly, false);\n+            }\n+            config::OutputTypeAssembly => {\n+                copy_if_one_unit(\"0.s\", config::OutputTypeAssembly, false);\n+            }\n+            config::OutputTypeObject => {\n+                link_obj(&crate_output.path(config::OutputTypeObject));\n+            }\n+            config::OutputTypeExe => {\n+                // If config::OutputTypeObject is already in the list, then\n+                // `crate.o` will be handled by the config::OutputTypeObject case.\n                 // Otherwise, we need to create the temporary object so we\n                 // can run the linker.\n-                if !sess.opts.output_types.contains(&OutputTypeObject) {\n-                    link_obj(&crate_output.temp_path(OutputTypeObject));\n+                if !sess.opts.output_types.contains(&config::OutputTypeObject) {\n+                    link_obj(&crate_output.temp_path(config::OutputTypeObject));\n                 }\n-            },\n+            }\n         }\n     }\n     let user_wants_bitcode = user_wants_bitcode;\n@@ -922,8 +917,8 @@ pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n     let pname = get_cc_prog(sess);\n     let mut cmd = Command::new(pname.as_slice());\n \n-    cmd.arg(\"-c\").arg(\"-o\").arg(outputs.path(OutputTypeObject))\n-                           .arg(outputs.temp_path(OutputTypeAssembly));\n+    cmd.arg(\"-c\").arg(\"-o\").arg(outputs.path(config::OutputTypeObject))\n+                           .arg(outputs.temp_path(config::OutputTypeAssembly));\n     debug!(\"{}\", &cmd);\n \n     match cmd.output() {", "previous_filename": "src/librustc/back/write.rs"}, {"sha": "ca70a37bf3d218a8b7bb075272ca30a9fce8699d", "filename": "src/librustc_trans/driver/driver.rs", "status": "renamed", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -12,18 +12,19 @@ pub use self::Input::*;\n \n use back::link;\n use back::write;\n-use driver::session::Session;\n-use driver::config;\n+use session::Session;\n+use session::config;\n use lint;\n use llvm::{ContextRef, ModuleRef};\n use metadata::common::LinkMeta;\n use metadata::creader;\n-use middle::{trans, stability, ty, typeck, reachable};\n+use middle::{stability, ty, typeck, reachable};\n use middle::dependency_format;\n use middle;\n use plugin::load::Plugins;\n use plugin::registry::Registry;\n use plugin;\n+use trans;\n \n use util::common::time;\n use util::nodemap::{NodeSet};\n@@ -34,6 +35,7 @@ use std::io;\n use std::io::fs;\n use std::os;\n use arena::TypedArena;\n+use save;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::attr;\n@@ -43,19 +45,6 @@ use syntax::parse;\n use syntax::parse::token;\n use syntax;\n \n-pub fn host_triple() -> &'static str {\n-    // Get the host triple out of the build environment. This ensures that our\n-    // idea of the host triple is the same as for the set of libraries we've\n-    // actually built.  We can't just take LLVM's host triple because they\n-    // normalize all ix86 architectures to i386.\n-    //\n-    // Instead of grabbing the host triple (for the current host), we grab (at\n-    // compile time) the target triple that this rustc is built with and\n-    // calling that (at runtime) the host triple.\n-    (option_env!(\"CFG_COMPILER_HOST_TRIPLE\")).\n-        expect(\"CFG_COMPILER_HOST_TRIPLE\")\n-}\n-\n pub fn compile_input(sess: Session,\n                      cfg: ast::CrateConfig,\n                      input: &Input,\n@@ -503,7 +492,7 @@ pub fn phase_save_analysis(sess: &Session,\n         return;\n     }\n     time(sess.time_passes(), \"save analysis\", krate, |krate|\n-         middle::save::process_crate(sess, krate, analysis, odir));\n+         save::process_crate(sess, krate, analysis, odir));\n }\n \n pub struct ModuleTranslation {\n@@ -541,7 +530,7 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n                                trans: &CrateTranslation,\n                                outputs: &OutputFilenames) {\n     if sess.opts.cg.no_integrated_as {\n-        let output_type = write::OutputTypeAssembly;\n+        let output_type = config::OutputTypeAssembly;\n \n         time(sess.time_passes(), \"LLVM passes\", (), |_|\n             write::run_passes(sess, trans, &[output_type], outputs));\n@@ -550,7 +539,7 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n \n         // Remove assembly source, unless --save-temps was specified\n         if !sess.opts.cg.save_temps {\n-            fs::unlink(&outputs.temp_path(write::OutputTypeAssembly)).unwrap();\n+            fs::unlink(&outputs.temp_path(config::OutputTypeAssembly)).unwrap();\n         }\n     } else {\n         time(sess.time_passes(), \"LLVM passes\", (), |_|\n@@ -610,7 +599,7 @@ pub fn stop_after_phase_2(sess: &Session) -> bool {\n }\n \n pub fn stop_after_phase_5(sess: &Session) -> bool {\n-    if !sess.opts.output_types.iter().any(|&i| i == write::OutputTypeExe) {\n+    if !sess.opts.output_types.iter().any(|&i| i == config::OutputTypeExe) {\n         debug!(\"not building executable, returning early from compile_input\");\n         return true;\n     }\n@@ -632,7 +621,7 @@ fn write_out_deps(sess: &Session,\n     for output_type in sess.opts.output_types.iter() {\n         let file = outputs.path(*output_type);\n         match *output_type {\n-            write::OutputTypeExe => {\n+            config::OutputTypeExe => {\n                 for output in sess.crate_types.borrow().iter() {\n                     let p = link::filename_for_input(sess, *output,\n                                                      id, &file);\n@@ -772,22 +761,22 @@ pub struct OutputFilenames {\n }\n \n impl OutputFilenames {\n-    pub fn path(&self, flavor: write::OutputType) -> Path {\n+    pub fn path(&self, flavor: config::OutputType) -> Path {\n         match self.single_output_file {\n             Some(ref path) => return path.clone(),\n             None => {}\n         }\n         self.temp_path(flavor)\n     }\n \n-    pub fn temp_path(&self, flavor: write::OutputType) -> Path {\n+    pub fn temp_path(&self, flavor: config::OutputType) -> Path {\n         let base = self.out_directory.join(self.filestem());\n         match flavor {\n-            write::OutputTypeBitcode => base.with_extension(\"bc\"),\n-            write::OutputTypeAssembly => base.with_extension(\"s\"),\n-            write::OutputTypeLlvmAssembly => base.with_extension(\"ll\"),\n-            write::OutputTypeObject => base.with_extension(\"o\"),\n-            write::OutputTypeExe => base,\n+            config::OutputTypeBitcode => base.with_extension(\"bc\"),\n+            config::OutputTypeAssembly => base.with_extension(\"s\"),\n+            config::OutputTypeLlvmAssembly => base.with_extension(\"ll\"),\n+            config::OutputTypeObject => base.with_extension(\"o\"),\n+            config::OutputTypeExe => base,\n         }\n     }\n ", "previous_filename": "src/librustc/driver/driver.rs"}, {"sha": "8985d05b6ca847f397267f695c32d81a75ffe32a", "filename": "src/librustc_trans/driver/mod.rs", "status": "renamed", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fmod.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -12,16 +12,20 @@ pub use syntax::diagnostic;\n \n use back::link;\n use driver::driver::{Input, FileInput, StrInput};\n-use driver::session::{Session, build_session};\n+use session::{config, Session, build_session};\n use lint::Lint;\n use lint;\n use metadata;\n \n+use rustc::DIAGNOSTICS;\n+\n use std::any::AnyRefExt;\n use std::io;\n use std::os;\n use std::task::TaskBuilder;\n \n+use session::early_error;\n+\n use syntax::ast;\n use syntax::parse;\n use syntax::diagnostic::Emitter;\n@@ -30,8 +34,6 @@ use syntax::diagnostics;\n use getopts;\n \n pub mod driver;\n-pub mod session;\n-pub mod config;\n pub mod pretty;\n \n pub fn run(args: Vec<String>) -> int {\n@@ -48,7 +50,7 @@ fn run_compiler(args: &[String]) {\n         None => return\n     };\n \n-    let descriptions = diagnostics::registry::Registry::new(&super::DIAGNOSTICS);\n+    let descriptions = diagnostics::registry::Registry::new(&DIAGNOSTICS);\n     match matches.opt_str(\"explain\") {\n         Some(ref code) => {\n             match descriptions.find_description(code.as_slice()) {\n@@ -155,7 +157,7 @@ pub fn version(binary: &str, matches: &getopts::Matches) -> Option<String> {\n         println!(\"binary: {}\", binary);\n         println!(\"commit-hash: {}\", unw(commit_hash_str()));\n         println!(\"commit-date: {}\", unw(commit_date_str()));\n-        println!(\"host: {}\", driver::host_triple());\n+        println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(release_str()));\n     }\n     None\n@@ -418,17 +420,6 @@ fn parse_crate_attrs(sess: &Session, input: &Input) ->\n     result.into_iter().collect()\n }\n \n-pub fn early_error(msg: &str) -> ! {\n-    let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto, None);\n-    emitter.emit(None, msg, None, diagnostic::Fatal);\n-    panic!(diagnostic::FatalError);\n-}\n-\n-pub fn early_warn(msg: &str) {\n-    let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto, None);\n-    emitter.emit(None, msg, None, diagnostic::Warning);\n-}\n-\n pub fn list_metadata(sess: &Session, path: &Path,\n                      out: &mut io::Writer) -> io::IoResult<()> {\n     metadata::loader::list_file_metadata(sess.target.target.options.is_like_osx, path, out)\n@@ -508,3 +499,4 @@ pub fn monitor(f: proc():Send) {\n         }\n     }\n }\n+", "previous_filename": "src/librustc/driver/mod.rs"}, {"sha": "c20f2e097f31f3050eb5d37f462eafac3d08bdf9", "filename": "src/librustc_trans/driver/pretty.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -17,9 +17,8 @@ use self::NodesMatchingUII::*;\n \n use back::link;\n \n-use driver::config;\n+use session::{config, Session};\n use driver::driver::{mod, CrateAnalysis};\n-use driver::session::Session;\n \n use middle::ty;\n use middle::borrowck::{mod, FnPartsWithCFG};", "previous_filename": "src/librustc/driver/pretty.rs"}, {"sha": "ad9333e579427dd921012ba3d9236d49e22aeb36", "filename": "src/librustc_trans/lib.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -0,0 +1,87 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+\n+The Rust compiler.\n+\n+# Note\n+\n+This API is completely unstable and subject to change.\n+\n+*/\n+\n+#![crate_name = \"rustc_trans\"]\n+#![experimental]\n+#![comment = \"The Rust compiler back end and driver\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(default_type_params, globs, if_let, import_shadowing, macro_rules, phase, quote)]\n+#![feature(slicing_syntax, struct_variant, unsafe_destructor)]\n+#![feature(rustc_diagnostic_macros)]\n+\n+extern crate arena;\n+extern crate flate;\n+extern crate getopts;\n+extern crate graphviz;\n+extern crate libc;\n+extern crate rustc;\n+extern crate rustc_back;\n+#[phase(plugin, link)] extern crate log;\n+#[phase(plugin, link)] extern crate syntax;\n+extern crate serialize;\n+extern crate \"rustc_llvm\" as llvm;\n+\n+pub use rustc::session;\n+pub use rustc::metadata;\n+pub use rustc::middle;\n+pub use rustc::lint;\n+pub use rustc::plugin;\n+pub use rustc::util;\n+\n+pub mod back {\n+    pub use rustc_back::abi;\n+    pub use rustc_back::archive;\n+    pub use rustc_back::arm;\n+    pub use rustc_back::mips;\n+    pub use rustc_back::mipsel;\n+    pub use rustc_back::rpath;\n+    pub use rustc_back::svh;\n+    pub use rustc_back::target_strs;\n+    pub use rustc_back::x86;\n+    pub use rustc_back::x86_64;\n+\n+    pub mod link;\n+    pub mod lto;\n+    pub mod write;\n+\n+}\n+\n+pub mod trans;\n+pub mod save;\n+pub mod driver;\n+\n+pub mod lib {\n+    pub use llvm;\n+}\n+\n+pub fn main() {\n+    let args = std::os::args();\n+    let result = driver::run(args);\n+    std::os::set_exit_status(result);\n+}\n+\n+#[cfg(test)]\n+pub mod test;"}, {"sha": "38bc8c99c0fe1528d51625efe194185e6c5fb781", "filename": "src/librustc_trans/save/mod.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -28,7 +28,7 @@\n //! DxrVisitor walks the AST and processes it.\n \n use driver::driver::CrateAnalysis;\n-use driver::session::Session;\n+use session::Session;\n \n use middle::def;\n use middle::ty;\n@@ -55,9 +55,9 @@ use syntax::visit::Visitor;\n use syntax::print::pprust::{path_to_string,ty_to_string};\n use syntax::ptr::P;\n \n-use middle::save::span_utils::SpanUtils;\n-use middle::save::recorder::Recorder;\n-use middle::save::recorder::FmtStrs;\n+use self::span_utils::SpanUtils;\n+use self::recorder::Recorder;\n+use self::recorder::FmtStrs;\n \n use util::ppaux;\n ", "previous_filename": "src/librustc/middle/save/mod.rs"}, {"sha": "120e4b203e0ede86000f9b0619b73c79e4786e92", "filename": "src/librustc_trans/save/recorder.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -10,8 +10,8 @@\n \n pub use self::Row::*;\n \n-use middle::save::escape;\n-use middle::save::span_utils::SpanUtils;\n+use super::escape;\n+use super::span_utils::SpanUtils;\n \n use std::vec::Vec;\n ", "previous_filename": "src/librustc/middle/save/recorder.rs"}, {"sha": "e01081d8422b14ab94dd61bf775477fe3131983a", "filename": "src/librustc_trans/save/span_utils.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use driver::session::Session;\n+use rustc::session::Session;\n \n-use middle::save::generated_code;\n+use save::generated_code;\n \n use std::cell::Cell;\n ", "previous_filename": "src/librustc/middle/save/span_utils.rs"}, {"sha": "4648021cc5fd7dbf3b358f43a7768cb6f63cb40a", "filename": "src/librustc_trans/test.rs", "status": "renamed", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftest.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -17,11 +17,9 @@\n // This is only used by tests, hence allow dead code.\n #![allow(dead_code)]\n \n-use driver::config;\n use driver::diagnostic;\n use driver::diagnostic::Emitter;\n use driver::driver;\n-use driver::session;\n use middle::lang_items;\n use middle::region;\n use middle::resolve;\n@@ -32,6 +30,7 @@ use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::glb::Glb;\n+use session::{mod, config};\n use syntax::codemap;\n use syntax::codemap::{Span, CodeMap, DUMMY_SP};\n use syntax::diagnostic::{Level, RenderSpan, Bug, Fatal, Error, Warning, Note, Help};\n@@ -289,13 +288,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n     }\n \n     pub fn dummy_type_trace(&self) -> infer::TypeTrace {\n-        infer::TypeTrace {\n-            origin: infer::Misc(DUMMY_SP),\n-            values: infer::Types(ty::expected_found {\n-                expected: ty::mk_err(),\n-                found: ty::mk_err(),\n-            })\n-        }\n+        infer::TypeTrace::dummy()\n     }\n \n     pub fn lub(&self) -> Lub<'a, 'tcx> {", "previous_filename": "src/librustc/middle/typeck/infer/test.rs"}, {"sha": "001a3a4dca0e9fd0949b7d09b47f0d7af890429e", "filename": "src/librustc_trans/trans/_match.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -193,7 +193,6 @@ use self::Opt::*;\n use self::FailureHandler::*;\n \n use back::abi;\n-use driver::config::FullDebugInfo;\n use llvm::{ValueRef, BasicBlockRef};\n use middle::check_match::StaticInliner;\n use middle::check_match;\n@@ -204,21 +203,22 @@ use middle::lang_items::StrEqFnLangItem;\n use middle::mem_categorization as mc;\n use middle::pat_util::*;\n use middle::resolve::DefMap;\n-use middle::trans::adt;\n-use middle::trans::base::*;\n-use middle::trans::build::{AddCase, And, BitCast, Br, CondBr, GEPi, InBoundsGEP, Load};\n-use middle::trans::build::{Mul, Not, Store, Sub, add_comment};\n-use middle::trans::build;\n-use middle::trans::callee;\n-use middle::trans::cleanup::{mod, CleanupMethods};\n-use middle::trans::common::*;\n-use middle::trans::consts;\n-use middle::trans::datum::*;\n-use middle::trans::expr::{mod, Dest};\n-use middle::trans::tvec;\n-use middle::trans::type_of;\n-use middle::trans::debuginfo;\n+use trans::adt;\n+use trans::base::*;\n+use trans::build::{AddCase, And, BitCast, Br, CondBr, GEPi, InBoundsGEP, Load};\n+use trans::build::{Mul, Not, Store, Sub, add_comment};\n+use trans::build;\n+use trans::callee;\n+use trans::cleanup::{mod, CleanupMethods};\n+use trans::common::*;\n+use trans::consts;\n+use trans::datum::*;\n+use trans::expr::{mod, Dest};\n+use trans::tvec;\n+use trans::type_of;\n+use trans::debuginfo;\n use middle::ty;\n+use session::config::FullDebugInfo;\n use util::common::indenter;\n use util::nodemap::FnvHashMap;\n use util::ppaux::{Repr, vec_map_to_string};", "previous_filename": "src/librustc/middle/trans/_match.rs"}, {"sha": "806c4a68ba281c69cd56b07f402650142c1349e1", "filename": "src/librustc_trans/trans/adt.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -55,15 +55,15 @@ use llvm::{ValueRef, True, IntEQ, IntNE};\n use back::abi::slice_elt_base;\n use middle::subst;\n use middle::subst::Subst;\n-use middle::trans::_match;\n-use middle::trans::build::*;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::common::*;\n-use middle::trans::datum;\n-use middle::trans::machine;\n-use middle::trans::type_::Type;\n-use middle::trans::type_of;\n+use trans::_match;\n+use trans::build::*;\n+use trans::cleanup;\n+use trans::cleanup::CleanupMethods;\n+use trans::common::*;\n+use trans::datum;\n+use trans::machine;\n+use trans::type_::Type;\n+use trans::type_of;\n use middle::ty;\n use middle::ty::Disr;\n use syntax::ast;", "previous_filename": "src/librustc/middle/trans/adt.rs"}, {"sha": "9b499b6d1a147ca9088dd661e249e88fd13da3fb", "filename": "src/librustc_trans/trans/asm.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -13,14 +13,14 @@\n */\n \n use llvm;\n-use middle::trans::build::*;\n-use middle::trans::callee;\n-use middle::trans::common::*;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::expr;\n-use middle::trans::type_of;\n-use middle::trans::type_::Type;\n+use trans::build::*;\n+use trans::callee;\n+use trans::common::*;\n+use trans::cleanup;\n+use trans::cleanup::CleanupMethods;\n+use trans::expr;\n+use trans::type_of;\n+use trans::type_::Type;\n \n use std::c_str::ToCStr;\n use std::string::String;", "previous_filename": "src/librustc/middle/trans/asm.rs"}, {"sha": "39474a99f6d1e48f4a94b38681541850f3fcab82", "filename": "src/librustc_trans/trans/base.rs", "status": "renamed", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -31,10 +31,7 @@ pub use self::scalar_type::*;\n \n use back::link::{mangle_exported_name};\n use back::{link, abi};\n-use driver::config;\n-use driver::config::{NoDebugInfo, FullDebugInfo};\n use driver::driver::{CrateAnalysis, CrateTranslation, ModuleTranslation};\n-use driver::session::Session;\n use lint;\n use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n@@ -44,41 +41,43 @@ use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::subst;\n use middle::weak_lang_items;\n use middle::subst::Subst;\n-use middle::trans::_match;\n-use middle::trans::adt;\n-use middle::trans::build::*;\n-use middle::trans::builder::{Builder, noname};\n-use middle::trans::callee;\n-use middle::trans::cleanup::{CleanupMethods, ScopeId};\n-use middle::trans::cleanup;\n-use middle::trans::common::{Block, C_bool, C_bytes_in_context, C_i32, C_integral};\n-use middle::trans::common::{C_null, C_struct_in_context, C_u64, C_u8, C_uint, C_undef};\n-use middle::trans::common::{CrateContext, ExternMap, FunctionContext};\n-use middle::trans::common::{NodeInfo, Result, SubstP};\n-use middle::trans::common::{node_id_type, param_substs, return_type_is_void};\n-use middle::trans::common::{tydesc_info, type_is_immediate};\n-use middle::trans::common::{type_is_zero_size, val_ty};\n-use middle::trans::common;\n-use middle::trans::consts;\n-use middle::trans::context::SharedCrateContext;\n-use middle::trans::controlflow;\n-use middle::trans::datum;\n-use middle::trans::debuginfo;\n-use middle::trans::expr;\n-use middle::trans::foreign;\n-use middle::trans::glue;\n-use middle::trans::inline;\n-use middle::trans::intrinsic;\n-use middle::trans::machine;\n-use middle::trans::machine::{llsize_of, llsize_of_real, llalign_of_min};\n-use middle::trans::meth;\n-use middle::trans::monomorphize;\n-use middle::trans::tvec;\n-use middle::trans::type_::Type;\n-use middle::trans::type_of;\n-use middle::trans::type_of::*;\n-use middle::trans::value::Value;\n use middle::ty;\n+use session::config::{mod, NoDebugInfo, FullDebugInfo};\n+use session::Session;\n+use trans::_match;\n+use trans::adt;\n+use trans::build::*;\n+use trans::builder::{Builder, noname};\n+use trans::callee;\n+use trans::cleanup::{CleanupMethods, ScopeId};\n+use trans::cleanup;\n+use trans::common::{Block, C_bool, C_bytes_in_context, C_i32, C_integral};\n+use trans::common::{C_null, C_struct_in_context, C_u64, C_u8, C_uint, C_undef};\n+use trans::common::{CrateContext, ExternMap, FunctionContext};\n+use trans::common::{NodeInfo, Result, SubstP};\n+use trans::common::{node_id_type, param_substs, return_type_is_void};\n+use trans::common::{tydesc_info, type_is_immediate};\n+use trans::common::{type_is_zero_size, val_ty};\n+use trans::common;\n+use trans::consts;\n+use trans::context::SharedCrateContext;\n+use trans::controlflow;\n+use trans::datum;\n+use trans::debuginfo;\n+use trans::expr;\n+use trans::foreign;\n+use trans::glue;\n+use trans::inline;\n+use trans::intrinsic;\n+use trans::machine;\n+use trans::machine::{llsize_of, llsize_of_real, llalign_of_min};\n+use trans::meth;\n+use trans::monomorphize;\n+use trans::tvec;\n+use trans::type_::Type;\n+use trans::type_of;\n+use trans::type_of::*;\n+use trans::value::Value;\n use util::common::indenter;\n use util::ppaux::{Repr, ty_to_string};\n use util::sha2::Sha256;\n@@ -1500,7 +1499,7 @@ pub fn init_function<'a, 'tcx>(fcx: &'a FunctionContext<'a, 'tcx>,\n //  - trans_args\n \n pub fn arg_kind(cx: &FunctionContext, t: ty::t) -> datum::Rvalue {\n-    use middle::trans::datum::{ByRef, ByValue};\n+    use trans::datum::{ByRef, ByValue};\n \n     datum::Rvalue {\n         mode: if arg_is_indirect(cx.ccx, t) { ByRef } else { ByValue }", "previous_filename": "src/librustc/middle/trans/base.rs"}, {"sha": "35afe7ac55e0dbd155e9be989edcdbbddda4856f", "filename": "src/librustc_trans/trans/basic_block.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -10,7 +10,7 @@\n \n use llvm;\n use llvm::{BasicBlockRef};\n-use middle::trans::value::{Users, Value};\n+use trans::value::{Users, Value};\n use std::iter::{Filter, Map};\n \n pub struct BasicBlock(pub BasicBlockRef);", "previous_filename": "src/librustc/middle/trans/basic_block.rs"}, {"sha": "1f77f625c9db3474a9e6af78f3821b6e1e43c535", "filename": "src/librustc_trans/trans/build.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -15,11 +15,11 @@ use llvm;\n use llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect, AttrBuilder};\n use llvm::{Opcode, IntPredicate, RealPredicate};\n use llvm::{ValueRef, BasicBlockRef};\n-use middle::trans::common::*;\n+use trans::common::*;\n use syntax::codemap::Span;\n \n-use middle::trans::builder::Builder;\n-use middle::trans::type_::Type;\n+use trans::builder::Builder;\n+use trans::type_::Type;\n \n use libc::{c_uint, c_char};\n ", "previous_filename": "src/librustc/middle/trans/build.rs"}, {"sha": "526592181ae646824231a4670848b7f1f22e8006", "filename": "src/librustc_trans/trans/builder.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -14,10 +14,10 @@ use llvm;\n use llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect, AttrBuilder};\n use llvm::{Opcode, IntPredicate, RealPredicate, False};\n use llvm::{ValueRef, BasicBlockRef, BuilderRef, ModuleRef};\n-use middle::trans::base;\n-use middle::trans::common::*;\n-use middle::trans::machine::llalign_of_pref;\n-use middle::trans::type_::Type;\n+use trans::base;\n+use trans::common::*;\n+use trans::machine::llalign_of_pref;\n+use trans::type_::Type;\n use util::nodemap::FnvHashMap;\n use libc::{c_uint, c_char};\n use std::string::String;", "previous_filename": "src/librustc/middle/trans/builder.rs"}, {"sha": "0214bf29eeeb972f8d26278531d442de0544c9f3", "filename": "src/librustc_trans/trans/cabi.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -12,13 +12,13 @@ pub use self::ArgKind::*;\n \n use llvm::Attribute;\n use std::option;\n-use middle::trans::context::CrateContext;\n-use middle::trans::cabi_x86;\n-use middle::trans::cabi_x86_64;\n-use middle::trans::cabi_x86_win64;\n-use middle::trans::cabi_arm;\n-use middle::trans::cabi_mips;\n-use middle::trans::type_::Type;\n+use trans::context::CrateContext;\n+use trans::cabi_x86;\n+use trans::cabi_x86_64;\n+use trans::cabi_x86_win64;\n+use trans::cabi_arm;\n+use trans::cabi_mips;\n+use trans::type_::Type;\n \n #[deriving(Clone, PartialEq)]\n pub enum ArgKind {", "previous_filename": "src/librustc/middle/trans/cabi.rs"}, {"sha": "46440fcf1a1b347c105deb412717b30852b5b2ca", "filename": "src/librustc_trans/trans/cabi_arm.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -13,9 +13,9 @@\n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n use llvm::{StructRetAttribute, ZExtAttribute};\n-use middle::trans::cabi::{FnType, ArgType};\n-use middle::trans::context::CrateContext;\n-use middle::trans::type_::Type;\n+use trans::cabi::{FnType, ArgType};\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n \n use std::cmp;\n ", "previous_filename": "src/librustc/middle/trans/cabi_arm.rs"}, {"sha": "4dfe8daf33946806519e8579285338af39efb96c", "filename": "src/librustc_trans/trans/cabi_mips.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -15,9 +15,9 @@ use std::cmp;\n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n use llvm::{StructRetAttribute, ZExtAttribute};\n-use middle::trans::cabi::{ArgType, FnType};\n-use middle::trans::context::CrateContext;\n-use middle::trans::type_::Type;\n+use trans::cabi::{ArgType, FnType};\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n \n fn align_up_to(off: uint, a: uint) -> uint {\n     return (off + a - 1u) / a * a;", "previous_filename": "src/librustc/middle/trans/cabi_mips.rs"}, {"sha": "32f6eb060c05a48467a48135c0e7a58d4682dcec", "filename": "src/librustc_trans/trans/cabi_x86.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -10,8 +10,8 @@\n \n use self::Strategy::*;\n use llvm::*;\n-use middle::trans::cabi::{ArgType, FnType};\n-use middle::trans::type_::Type;\n+use trans::cabi::{ArgType, FnType};\n+use trans::type_::Type;\n use super::common::*;\n use super::machine::*;\n ", "previous_filename": "src/librustc/middle/trans/cabi_x86.rs"}, {"sha": "69ee5301d18bf03be001d6c6e20da8567b3dab36", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -18,9 +18,9 @@ use llvm;\n use llvm::{Integer, Pointer, Float, Double};\n use llvm::{Struct, Array, Attribute};\n use llvm::{StructRetAttribute, ByValAttribute, ZExtAttribute};\n-use middle::trans::cabi::{ArgType, FnType};\n-use middle::trans::context::CrateContext;\n-use middle::trans::type_::Type;\n+use trans::cabi::{ArgType, FnType};\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n \n use std::cmp;\n ", "previous_filename": "src/librustc/middle/trans/cabi_x86_64.rs"}, {"sha": "79e309dacaaa4c2bc02a18aca448a2289b768262", "filename": "src/librustc_trans/trans/cabi_x86_win64.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -11,8 +11,8 @@\n use llvm::*;\n use super::common::*;\n use super::machine::*;\n-use middle::trans::cabi::{ArgType, FnType};\n-use middle::trans::type_::Type;\n+use trans::cabi::{ArgType, FnType};\n+use trans::type_::Type;\n \n // Win64 ABI: http://msdn.microsoft.com/en-us/library/zthk2dkh.aspx\n ", "previous_filename": "src/librustc/middle/trans/cabi_x86_win64.rs"}, {"sha": "0544c9d43a811e70b0f7566420df78a0071e8dc3", "filename": "src/librustc_trans/trans/callee.rs", "status": "renamed", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -23,33 +23,33 @@ pub use self::CallArgs::*;\n use arena::TypedArena;\n use back::abi;\n use back::link;\n-use driver::session;\n+use session;\n use llvm::{ValueRef, get_param};\n use llvm;\n use metadata::csearch;\n use middle::def;\n use middle::subst;\n use middle::subst::{Subst};\n-use middle::trans::adt;\n-use middle::trans::base;\n-use middle::trans::base::*;\n-use middle::trans::build::*;\n-use middle::trans::callee;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::closure;\n-use middle::trans::common;\n-use middle::trans::common::*;\n-use middle::trans::datum::*;\n-use middle::trans::expr;\n-use middle::trans::glue;\n-use middle::trans::inline;\n-use middle::trans::foreign;\n-use middle::trans::intrinsic;\n-use middle::trans::meth;\n-use middle::trans::monomorphize;\n-use middle::trans::type_::Type;\n-use middle::trans::type_of;\n+use trans::adt;\n+use trans::base;\n+use trans::base::*;\n+use trans::build::*;\n+use trans::callee;\n+use trans::cleanup;\n+use trans::cleanup::CleanupMethods;\n+use trans::closure;\n+use trans::common;\n+use trans::common::*;\n+use trans::datum::*;\n+use trans::expr;\n+use trans::glue;\n+use trans::inline;\n+use trans::foreign;\n+use trans::intrinsic;\n+use trans::meth;\n+use trans::monomorphize;\n+use trans::type_::Type;\n+use trans::type_of;\n use middle::ty;\n use middle::typeck::coherence::make_substs_for_receiver_types;\n use middle::typeck::MethodCall;", "previous_filename": "src/librustc/middle/trans/callee.rs"}, {"sha": "02909b0e3a921a5b59d0319d4a858c76d6e5f96e", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -19,14 +19,14 @@ pub use self::EarlyExitLabel::*;\n pub use self::Heap::*;\n \n use llvm::{BasicBlockRef, ValueRef};\n-use middle::trans::base;\n-use middle::trans::build;\n-use middle::trans::callee;\n-use middle::trans::common;\n-use middle::trans::common::{Block, FunctionContext, ExprId, NodeInfo};\n-use middle::trans::debuginfo;\n-use middle::trans::glue;\n-use middle::trans::type_::Type;\n+use trans::base;\n+use trans::build;\n+use trans::callee;\n+use trans::common;\n+use trans::common::{Block, FunctionContext, ExprId, NodeInfo};\n+use trans::debuginfo;\n+use trans::glue;\n+use trans::type_::Type;\n use middle::ty;\n use std::fmt;\n use syntax::ast;", "previous_filename": "src/librustc/middle/trans/cleanup.rs"}, {"sha": "139087507ff9698b116e41ba62051fad0cf254c8", "filename": "src/librustc_trans/trans/closure.rs", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -11,23 +11,23 @@\n \n use back::abi;\n use back::link::mangle_internal_name_by_path_and_seq;\n-use driver::config::FullDebugInfo;\n use llvm::ValueRef;\n use middle::def;\n use middle::mem_categorization::Typer;\n-use middle::trans::adt;\n-use middle::trans::base::*;\n-use middle::trans::build::*;\n-use middle::trans::cleanup::{CleanupMethods, ScopeId};\n-use middle::trans::common::*;\n-use middle::trans::datum::{Datum, DatumBlock, Expr, Lvalue, rvalue_scratch_datum};\n-use middle::trans::debuginfo;\n-use middle::trans::expr;\n-use middle::trans::monomorphize::MonoId;\n-use middle::trans::type_of::*;\n-use middle::trans::type_::Type;\n+use trans::adt;\n+use trans::base::*;\n+use trans::build::*;\n+use trans::cleanup::{CleanupMethods, ScopeId};\n+use trans::common::*;\n+use trans::datum::{Datum, DatumBlock, Expr, Lvalue, rvalue_scratch_datum};\n+use trans::debuginfo;\n+use trans::expr;\n+use trans::monomorphize::MonoId;\n+use trans::type_of::*;\n+use trans::type_::Type;\n use middle::ty;\n use middle::subst::{Subst, Substs};\n+use session::config::FullDebugInfo;\n use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n ", "previous_filename": "src/librustc/middle/trans/closure.rs"}, {"sha": "d06cfa4a0271773df3e425517109c1a639d3c577", "filename": "src/librustc_trans/trans/common.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -14,7 +14,7 @@\n \n pub use self::ExprOrMethodCall::*;\n \n-use driver::session::Session;\n+use session::Session;\n use llvm;\n use llvm::{ValueRef, BasicBlockRef, BuilderRef, ContextRef};\n use llvm::{True, False, Bool};\n@@ -23,14 +23,14 @@ use middle::lang_items::LangItem;\n use middle::mem_categorization as mc;\n use middle::subst;\n use middle::subst::Subst;\n-use middle::trans::base;\n-use middle::trans::build;\n-use middle::trans::cleanup;\n-use middle::trans::datum;\n-use middle::trans::debuginfo;\n-use middle::trans::machine;\n-use middle::trans::type_::Type;\n-use middle::trans::type_of;\n+use trans::base;\n+use trans::build;\n+use trans::cleanup;\n+use trans::datum;\n+use trans::debuginfo;\n+use trans::machine;\n+use trans::type_::Type;\n+use trans::type_of;\n use middle::traits;\n use middle::ty;\n use middle::ty_fold;\n@@ -53,7 +53,7 @@ use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n \n-pub use middle::trans::context::CrateContext;\n+pub use trans::context::CrateContext;\n \n fn type_is_newtype_immediate(ccx: &CrateContext, ty: ty::t) -> bool {\n     match ty::get(ty).sty {\n@@ -69,8 +69,8 @@ fn type_is_newtype_immediate(ccx: &CrateContext, ty: ty::t) -> bool {\n }\n \n pub fn type_is_immediate(ccx: &CrateContext, ty: ty::t) -> bool {\n-    use middle::trans::machine::llsize_of_alloc;\n-    use middle::trans::type_of::sizing_type_of;\n+    use trans::machine::llsize_of_alloc;\n+    use trans::type_of::sizing_type_of;\n \n     let tcx = ccx.tcx();\n     let simple = ty::type_is_scalar(ty) ||\n@@ -98,8 +98,8 @@ pub fn type_is_zero_size(ccx: &CrateContext, ty: ty::t) -> bool {\n      * Identify types which have size zero at runtime.\n      */\n \n-    use middle::trans::machine::llsize_of_alloc;\n-    use middle::trans::type_of::sizing_type_of;\n+    use trans::machine::llsize_of_alloc;\n+    use trans::type_of::sizing_type_of;\n     let llty = sizing_type_of(ccx, ty);\n     llsize_of_alloc(ccx, llty) == 0\n }", "previous_filename": "src/librustc/middle/trans/common.rs"}, {"sha": "545b12d2267e1aea54b68552a1c639da3db7d8c0", "filename": "src/librustc_trans/trans/consts.rs", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -17,18 +17,18 @@ use llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT,\n use metadata::csearch;\n use middle::const_eval;\n use middle::def;\n-use middle::trans::adt;\n-use middle::trans::base;\n-use middle::trans::base::push_ctxt;\n-use middle::trans::closure;\n-use middle::trans::common::*;\n-use middle::trans::consts;\n-use middle::trans::expr;\n-use middle::trans::inline;\n-use middle::trans::machine;\n-use middle::trans::type_::Type;\n-use middle::trans::type_of;\n-use middle::trans::debuginfo;\n+use trans::adt;\n+use trans::base;\n+use trans::base::push_ctxt;\n+use trans::closure;\n+use trans::common::*;\n+use trans::consts;\n+use trans::expr;\n+use trans::inline;\n+use trans::machine;\n+use trans::type_::Type;\n+use trans::type_of;\n+use trans::debuginfo;\n use middle::ty;\n use util::ppaux::{Repr, ty_to_string};\n ", "previous_filename": "src/librustc/middle/trans/consts.rs"}, {"sha": "c2c1f8bb5f5acff8dbb5aef068efb37fcb034c09", "filename": "src/librustc_trans/trans/context.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -8,23 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use driver::config::NoDebugInfo;\n-use driver::session::Session;\n use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n use llvm::{TargetData};\n use llvm::mk_target_data;\n use metadata::common::LinkMeta;\n use middle::resolve;\n use middle::traits;\n-use middle::trans::adt;\n-use middle::trans::base;\n-use middle::trans::builder::Builder;\n-use middle::trans::common::{ExternMap,tydesc_info,BuilderRef_res};\n-use middle::trans::debuginfo;\n-use middle::trans::monomorphize::MonoId;\n-use middle::trans::type_::{Type, TypeNames};\n+use trans::adt;\n+use trans::base;\n+use trans::builder::Builder;\n+use trans::common::{ExternMap,tydesc_info,BuilderRef_res};\n+use trans::debuginfo;\n+use trans::monomorphize::MonoId;\n+use trans::type_::{Type, TypeNames};\n use middle::ty;\n+use session::config::NoDebugInfo;\n+use session::Session;\n use util::ppaux::Repr;\n use util::sha2::Sha256;\n use util::nodemap::{NodeMap, NodeSet, DefIdMap, FnvHashMap, FnvHashSet};", "previous_filename": "src/librustc/middle/trans/context.rs"}, {"sha": "10a73033b64af81bfe07cae36a504bee16a6b1e0", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -9,26 +9,26 @@\n // except according to those terms.\n \n use llvm::*;\n-use driver::config::FullDebugInfo;\n use middle::def;\n use middle::lang_items::{PanicFnLangItem, PanicBoundsCheckFnLangItem};\n-use middle::trans::_match;\n-use middle::trans::adt;\n-use middle::trans::base::*;\n-use middle::trans::build::*;\n-use middle::trans::callee;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::cleanup;\n-use middle::trans::common::*;\n-use middle::trans::consts;\n-use middle::trans::datum;\n-use middle::trans::debuginfo;\n-use middle::trans::expr;\n-use middle::trans::meth;\n-use middle::trans::type_::Type;\n-use middle::trans;\n+use trans::_match;\n+use trans::adt;\n+use trans::base::*;\n+use trans::build::*;\n+use trans::callee;\n+use trans::cleanup::CleanupMethods;\n+use trans::cleanup;\n+use trans::common::*;\n+use trans::consts;\n+use trans::datum;\n+use trans::debuginfo;\n+use trans::expr;\n+use trans::meth;\n+use trans::type_::Type;\n+use trans;\n use middle::ty;\n use middle::typeck::MethodCall;\n+use session::config::FullDebugInfo;\n use util::ppaux::Repr;\n use util::ppaux;\n ", "previous_filename": "src/librustc/middle/trans/controlflow.rs"}, {"sha": "c4be6bf27b800f281609bab7a7e0c6460da519c3", "filename": "src/librustc_trans/trans/datum.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -17,14 +17,14 @@ pub use self::Expr::*;\n pub use self::RvalueMode::*;\n \n use llvm::ValueRef;\n-use middle::trans::base::*;\n-use middle::trans::build::Load;\n-use middle::trans::common::*;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::expr;\n-use middle::trans::tvec;\n-use middle::trans::type_of;\n+use trans::base::*;\n+use trans::build::Load;\n+use trans::common::*;\n+use trans::cleanup;\n+use trans::cleanup::CleanupMethods;\n+use trans::expr;\n+use trans::tvec;\n+use trans::type_of;\n use middle::ty;\n use util::ppaux::{ty_to_string};\n ", "previous_filename": "src/librustc/middle/trans/datum.rs"}, {"sha": "e3e36ee53fd4a115dd92b45ab27526d4fcb0cb92", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "renamed", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -192,22 +192,21 @@ use self::RecursiveTypeDescription::*;\n use self::EnumDiscriminantInfo::*;\n use self::DebugLocation::*;\n \n-use driver::config;\n-use driver::config::{FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::*;\n use metadata::csearch;\n use middle::subst::{mod, Subst};\n-use middle::trans::adt;\n-use middle::trans::common::*;\n-use middle::trans::machine;\n-use middle::trans::_match::{BindingInfo, TrByCopy, TrByMove, TrByRef};\n-use middle::trans::type_of;\n-use middle::trans::type_::Type;\n-use middle::trans;\n+use trans::adt;\n+use trans::common::*;\n+use trans::machine;\n+use trans::_match::{BindingInfo, TrByCopy, TrByMove, TrByRef};\n+use trans::type_of;\n+use trans::type_::Type;\n+use trans;\n use middle::ty;\n use middle::pat_util;\n+use session::config::{mod, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n use util::ppaux;\n ", "previous_filename": "src/librustc/middle/trans/debuginfo.rs"}, {"sha": "013483d0003c31e5ca4c43a5181afeffd286e819", "filename": "src/librustc_trans/trans/doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdoc.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "previous_filename": "src/librustc/middle/trans/doc.rs"}, {"sha": "2b7c3d0c24ff980ff659fe1414789503d4c23cd4", "filename": "src/librustc_trans/trans/expr.rs", "status": "renamed", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -44,27 +44,27 @@ use middle::def;\n use middle::mem_categorization::Typer;\n use middle::subst;\n use middle::subst::Subst;\n-use middle::trans::_match;\n-use middle::trans::adt;\n-use middle::trans::asm;\n-use middle::trans::base::*;\n-use middle::trans::base;\n-use middle::trans::build::*;\n-use middle::trans::callee;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::closure;\n-use middle::trans::common::*;\n-use middle::trans::consts;\n-use middle::trans::controlflow;\n-use middle::trans::datum::*;\n-use middle::trans::debuginfo;\n-use middle::trans::glue;\n-use middle::trans::machine;\n-use middle::trans::meth;\n-use middle::trans::inline;\n-use middle::trans::tvec;\n-use middle::trans::type_of;\n+use trans::_match;\n+use trans::adt;\n+use trans::asm;\n+use trans::base::*;\n+use trans::base;\n+use trans::build::*;\n+use trans::callee;\n+use trans::cleanup;\n+use trans::cleanup::CleanupMethods;\n+use trans::closure;\n+use trans::common::*;\n+use trans::consts;\n+use trans::controlflow;\n+use trans::datum::*;\n+use trans::debuginfo;\n+use trans::glue;\n+use trans::machine;\n+use trans::meth;\n+use trans::inline;\n+use trans::tvec;\n+use trans::type_of;\n use middle::ty::{struct_fields, tup_fields};\n use middle::ty::{AdjustDerefRef, AdjustAddEnv, AutoUnsafe};\n use middle::ty::{AutoPtr};\n@@ -73,8 +73,8 @@ use middle::typeck;\n use middle::typeck::MethodCall;\n use util::common::indenter;\n use util::ppaux::Repr;\n-use middle::trans::machine::{llsize_of, llsize_of_alloc};\n-use middle::trans::type_::Type;\n+use trans::machine::{llsize_of, llsize_of_alloc};\n+use trans::type_::Type;\n \n use syntax::ast;\n use syntax::codemap;", "previous_filename": "src/librustc/middle/trans/expr.rs"}, {"sha": "3ca37f9e355654fe8da16d02470ce92d9bd80f40", "filename": "src/librustc_trans/trans/foreign.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -13,15 +13,15 @@ use back::{link};\n use llvm::{ValueRef, CallConv, get_param};\n use llvm;\n use middle::weak_lang_items;\n-use middle::trans::base::{llvm_linkage_by_name, push_ctxt};\n-use middle::trans::base;\n-use middle::trans::build::*;\n-use middle::trans::cabi;\n-use middle::trans::common::*;\n-use middle::trans::machine;\n-use middle::trans::type_::Type;\n-use middle::trans::type_of::*;\n-use middle::trans::type_of;\n+use trans::base::{llvm_linkage_by_name, push_ctxt};\n+use trans::base;\n+use trans::build::*;\n+use trans::cabi;\n+use trans::common::*;\n+use trans::machine;\n+use trans::type_::Type;\n+use trans::type_of::*;\n+use trans::type_of;\n use middle::ty::FnSig;\n use middle::ty;\n use middle::subst::Subst;", "previous_filename": "src/librustc/middle/trans/foreign.rs"}, {"sha": "cceea96d4c1a8ddb86b7ef3c797d59dfbca66f0a", "filename": "src/librustc_trans/trans/glue.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -20,20 +20,20 @@ use llvm;\n use middle::lang_items::ExchangeFreeFnLangItem;\n use middle::subst;\n use middle::subst::Subst;\n-use middle::trans::adt;\n-use middle::trans::base::*;\n-use middle::trans::build::*;\n-use middle::trans::callee;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::common::*;\n-use middle::trans::datum;\n-use middle::trans::debuginfo;\n-use middle::trans::expr;\n-use middle::trans::machine::*;\n-use middle::trans::tvec;\n-use middle::trans::type_::Type;\n-use middle::trans::type_of::{type_of, sizing_type_of, align_of};\n+use trans::adt;\n+use trans::base::*;\n+use trans::build::*;\n+use trans::callee;\n+use trans::cleanup;\n+use trans::cleanup::CleanupMethods;\n+use trans::common::*;\n+use trans::datum;\n+use trans::debuginfo;\n+use trans::expr;\n+use trans::machine::*;\n+use trans::tvec;\n+use trans::type_::Type;\n+use trans::type_of::{type_of, sizing_type_of, align_of};\n use middle::ty;\n use util::ppaux::{ty_to_short_str, Repr};\n use util::ppaux;", "previous_filename": "src/librustc/middle/trans/glue.rs"}, {"sha": "51d839c3bee15e11f8452225352802ab0b6cbf10", "filename": "src/librustc_trans/trans/inline.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -11,8 +11,8 @@\n use llvm::{AvailableExternallyLinkage, InternalLinkage, SetLinkage};\n use metadata::csearch;\n use middle::astencode;\n-use middle::trans::base::{push_ctxt, trans_item, get_item_val, trans_fn};\n-use middle::trans::common::*;\n+use trans::base::{push_ctxt, trans_item, get_item_val, trans_fn};\n+use trans::common::*;\n use middle::ty;\n \n use syntax::ast;", "previous_filename": "src/librustc/middle/trans/inline.rs"}, {"sha": "3bc6c30f8d6c0dfa3bbd7d8e12c8c67aacfc1eae", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -14,20 +14,20 @@ use llvm;\n use llvm::{SequentiallyConsistent, Acquire, Release, AtomicXchg, ValueRef};\n use middle::subst;\n use middle::subst::FnSpace;\n-use middle::trans::base::*;\n-use middle::trans::build::*;\n-use middle::trans::callee;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::common::*;\n-use middle::trans::datum::*;\n-use middle::trans::expr;\n-use middle::trans::glue;\n-use middle::trans::type_of::*;\n-use middle::trans::type_of;\n-use middle::trans::machine;\n-use middle::trans::machine::llsize_of;\n-use middle::trans::type_::Type;\n+use trans::base::*;\n+use trans::build::*;\n+use trans::callee;\n+use trans::cleanup;\n+use trans::cleanup::CleanupMethods;\n+use trans::common::*;\n+use trans::datum::*;\n+use trans::expr;\n+use trans::glue;\n+use trans::type_of::*;\n+use trans::type_of;\n+use trans::machine;\n+use trans::machine::llsize_of;\n+use trans::type_::Type;\n use middle::ty;\n use syntax::abi::RustIntrinsic;\n use syntax::ast;", "previous_filename": "src/librustc/middle/trans/intrinsic.rs"}, {"sha": "dcf3a53215788784c38a317bb0a7ae4de30daf9d", "filename": "src/librustc_trans/trans/llrepr.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fllrepr.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::trans::context::CrateContext;\n-use middle::trans::type_::Type;\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n use llvm::ValueRef;\n \n pub trait LlvmRepr for Sized? {", "previous_filename": "src/librustc/middle/trans/llrepr.rs"}, {"sha": "41738f1e58f3ea324957a758425406265f951689", "filename": "src/librustc_trans/trans/machine.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -15,9 +15,9 @@\n use llvm;\n use llvm::{ValueRef};\n use llvm::False;\n-use middle::trans::common::*;\n+use trans::common::*;\n \n-use middle::trans::type_::Type;\n+use trans::type_::Type;\n \n pub type llbits = u64;\n pub type llsize = u64;", "previous_filename": "src/librustc/middle/trans/machine.rs"}, {"sha": "313280cb7a8cc7eddb52e9f07167c65e6da937c1", "filename": "src/librustc_trans/trans/macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmacros.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "previous_filename": "src/librustc/middle/trans/macros.rs"}, {"sha": "55ecd8a6554a64738b8a5c3dd55f04a206896f08", "filename": "src/librustc_trans/trans/meth.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -17,19 +17,19 @@ use middle::subst::{Subst,Substs};\n use middle::subst::VecPerParamSpace;\n use middle::subst;\n use middle::traits;\n-use middle::trans::base::*;\n-use middle::trans::build::*;\n-use middle::trans::callee::*;\n-use middle::trans::callee;\n-use middle::trans::cleanup;\n-use middle::trans::common::*;\n-use middle::trans::datum::*;\n-use middle::trans::expr::{SaveIn, Ignore};\n-use middle::trans::expr;\n-use middle::trans::glue;\n-use middle::trans::machine;\n-use middle::trans::type_::Type;\n-use middle::trans::type_of::*;\n+use trans::base::*;\n+use trans::build::*;\n+use trans::callee::*;\n+use trans::callee;\n+use trans::cleanup;\n+use trans::common::*;\n+use trans::datum::*;\n+use trans::expr::{SaveIn, Ignore};\n+use trans::expr;\n+use trans::glue;\n+use trans::machine;\n+use trans::type_::Type;\n+use trans::type_of::*;\n use middle::ty;\n use middle::typeck;\n use middle::typeck::MethodCall;", "previous_filename": "src/librustc/middle/trans/meth.rs"}, {"sha": "fe7697447acda8a897a3f7af36cc0e92c80672df", "filename": "src/librustc_trans/trans/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "previous_filename": "src/librustc/middle/trans/mod.rs"}, {"sha": "077c1337a44d6a58d644832378663e056f10e5d0", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n use back::link::exported_name;\n-use driver::session;\n+use session;\n use llvm::ValueRef;\n use llvm;\n use middle::subst;\n use middle::subst::Subst;\n-use middle::trans::base::{set_llvm_fn_attrs, set_inline_hint};\n-use middle::trans::base::{trans_enum_variant, push_ctxt, get_item_val};\n-use middle::trans::base::{trans_fn, decl_internal_rust_fn};\n-use middle::trans::base;\n-use middle::trans::common::*;\n-use middle::trans::foreign;\n+use trans::base::{set_llvm_fn_attrs, set_inline_hint};\n+use trans::base::{trans_enum_variant, push_ctxt, get_item_val};\n+use trans::base::{trans_fn, decl_internal_rust_fn};\n+use trans::base;\n+use trans::common::*;\n+use trans::foreign;\n use middle::ty;\n use util::ppaux::Repr;\n ", "previous_filename": "src/librustc/middle/trans/monomorphize.rs"}, {"sha": "0590d7c785ad9a2b27fbb16bdf7f1c6c37f388ec", "filename": "src/librustc_trans/trans/tvec.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -13,20 +13,20 @@\n use back::abi;\n use llvm;\n use llvm::{ValueRef};\n-use middle::trans::base::*;\n-use middle::trans::base;\n-use middle::trans::build::*;\n-use middle::trans::cleanup;\n-use middle::trans::cleanup::CleanupMethods;\n-use middle::trans::common::*;\n-use middle::trans::datum::*;\n-use middle::trans::expr::{Dest, Ignore, SaveIn};\n-use middle::trans::expr;\n-use middle::trans::glue;\n-use middle::trans::machine;\n-use middle::trans::machine::{nonzero_llsize_of, llsize_of_alloc};\n-use middle::trans::type_::Type;\n-use middle::trans::type_of;\n+use trans::base::*;\n+use trans::base;\n+use trans::build::*;\n+use trans::cleanup;\n+use trans::cleanup::CleanupMethods;\n+use trans::common::*;\n+use trans::datum::*;\n+use trans::expr::{Dest, Ignore, SaveIn};\n+use trans::expr;\n+use trans::glue;\n+use trans::machine;\n+use trans::machine::{nonzero_llsize_of, llsize_of_alloc};\n+use trans::type_::Type;\n+use trans::type_of;\n use middle::ty;\n use util::ppaux::ty_to_string;\n ", "previous_filename": "src/librustc/middle/trans/tvec.rs"}, {"sha": "0662909e40f5addf45fd05c6f1fd8d79af14882c", "filename": "src/librustc_trans/trans/type_.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -14,7 +14,7 @@ use llvm;\n use llvm::{TypeRef, Bool, False, True, TypeKind, ValueRef};\n use llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};\n \n-use middle::trans::context::CrateContext;\n+use trans::context::CrateContext;\n use util::nodemap::FnvHashMap;\n \n use syntax::ast;", "previous_filename": "src/librustc/middle/trans/type_.rs"}, {"sha": "5fa2198463793fde5b405dd527d70db584fc96bd", "filename": "src/librustc_trans/trans/type_of.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -13,15 +13,15 @@\n pub use self::named_ty::*;\n \n use middle::subst;\n-use middle::trans::adt;\n-use middle::trans::common::*;\n-use middle::trans::foreign;\n-use middle::trans::machine;\n+use trans::adt;\n+use trans::common::*;\n+use trans::foreign;\n+use trans::machine;\n use middle::ty;\n use util::ppaux;\n use util::ppaux::Repr;\n \n-use middle::trans::type_::Type;\n+use trans::type_::Type;\n \n use std::num::Int;\n use syntax::abi;", "previous_filename": "src/librustc/middle/trans/type_of.rs"}, {"sha": "8d74275c92ac7788917ed680af0bdce70c4db8d6", "filename": "src/librustc_trans/trans/value.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -10,8 +10,8 @@\n \n use llvm;\n use llvm::{UseRef, ValueRef};\n-use middle::trans::basic_block::BasicBlock;\n-use middle::trans::common::Block;\n+use trans::basic_block::BasicBlock;\n+use trans::common::Block;\n use libc::c_uint;\n \n pub struct Value(pub ValueRef);", "previous_filename": "src/librustc/middle/trans/value.rs"}, {"sha": "d622965dac772118e7b6b93108dd912de5a60e3d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -38,8 +38,8 @@ use syntax::parse::token::InternedString;\n use syntax::parse::token;\n use syntax::ptr::P;\n \n-use rustc::back::link;\n-use rustc::driver::driver;\n+use rustc_trans::back::link;\n+use rustc_trans::driver::driver;\n use rustc::metadata::cstore;\n use rustc::metadata::csearch;\n use rustc::metadata::decoder;"}, {"sha": "21242e6f1e48d97719db491961c14deb707d05ba", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -9,10 +9,11 @@\n // except according to those terms.\n pub use self::MaybeTyped::*;\n \n-use rustc::driver::{config, driver, session};\n+use rustc_trans::driver::driver;\n+use rustc::session::{mod, config};\n use rustc::middle::{privacy, ty};\n use rustc::lint;\n-use rustc::back::link;\n+use rustc_trans::back::link;\n \n use syntax::{ast, ast_map, codemap, diagnostic};\n \n@@ -93,7 +94,7 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n         crate_types: vec!(config::CrateTypeRlib),\n         lint_opts: vec!((warning_lint, lint::Allow)),\n         externs: externs,\n-        target_triple: triple.unwrap_or(driver::host_triple().to_string()),\n+        target_triple: triple.unwrap_or(config::host_triple().to_string()),\n         cfg: config::parse_cfgspecs(cfgs),\n         ..config::basic_options().clone()\n     };"}, {"sha": "0350fe72e110d953f93410466ff2465af812aa5d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -22,6 +22,7 @@ extern crate arena;\n extern crate getopts;\n extern crate libc;\n extern crate rustc;\n+extern crate rustc_trans;\n extern crate serialize;\n extern crate syntax;\n extern crate \"test\" as testing;\n@@ -155,7 +156,7 @@ pub fn main_args(args: &[String]) -> int {\n         usage(args[0].as_slice());\n         return 0;\n     } else if matches.opt_present(\"version\") {\n-        match rustc::driver::version(\"rustdoc\", &matches) {\n+        match rustc_trans::driver::version(\"rustdoc\", &matches) {\n             Some(err) => {\n                 println!(\"{}\", err);\n                 return 1"}, {"sha": "2dc1bcf776eb8d74c12bef9cc6d65592e7ff962d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618bd5d1c550cbdaac369b01716cc009b9e4d1e7/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "patch": "@@ -19,10 +19,8 @@ use std::string::String;\n \n use std::collections::{HashSet, HashMap};\n use testing;\n-use rustc::back::write;\n-use rustc::driver::config;\n-use rustc::driver::driver;\n-use rustc::driver::session;\n+use rustc::session::{mod, config};\n+use rustc_trans::driver::driver;\n use syntax::ast;\n use syntax::codemap::{CodeMap, dummy_spanned};\n use syntax::diagnostic;\n@@ -119,7 +117,7 @@ fn runtest(test: &str, cratename: &str, libs: Vec<Path>, externs: core::Externs,\n         maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: RefCell::new(libs),\n         crate_types: vec!(config::CrateTypeExecutable),\n-        output_types: vec!(write::OutputTypeExe),\n+        output_types: vec!(config::OutputTypeExe),\n         no_trans: no_run,\n         externs: externs,\n         cg: config::CodegenOptions {"}]}