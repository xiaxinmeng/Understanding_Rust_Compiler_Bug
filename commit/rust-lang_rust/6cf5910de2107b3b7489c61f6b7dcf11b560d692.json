{"sha": "6cf5910de2107b3b7489c61f6b7dcf11b560d692", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZjU5MTBkZTIxMDdiM2I3NDg5YzYxZjZiN2RjZjExYjU2MGQ2OTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-27T18:59:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-27T21:11:02Z"}, "message": "rustc: Don't allow multiple candidate methods from impls with the same def ID", "tree": {"sha": "8704e5d462e13168fd7a1cf1899411fe18aa197c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8704e5d462e13168fd7a1cf1899411fe18aa197c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf5910de2107b3b7489c61f6b7dcf11b560d692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf5910de2107b3b7489c61f6b7dcf11b560d692", "html_url": "https://github.com/rust-lang/rust/commit/6cf5910de2107b3b7489c61f6b7dcf11b560d692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf5910de2107b3b7489c61f6b7dcf11b560d692/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576f59a79bb79234ce259167ba17885ac8fc020b", "url": "https://api.github.com/repos/rust-lang/rust/commits/576f59a79bb79234ce259167ba17885ac8fc020b", "html_url": "https://github.com/rust-lang/rust/commit/576f59a79bb79234ce259167ba17885ac8fc020b"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "367dc256c1687c8aec2373a7b41ac275bbad8725", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6cf5910de2107b3b7489c61f6b7dcf11b560d692/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf5910de2107b3b7489c61f6b7dcf11b560d692/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=6cf5910de2107b3b7489c61f6b7dcf11b560d692", "patch": "@@ -1,6 +1,8 @@\n /* Code to handle method lookups (which can be quite complex) */\n \n+import syntax::ast::def_id;\n import syntax::ast_map;\n+import syntax::ast_util::new_def_hash;\n import middle::typeck::infer::methods; // next_ty_vars\n import dvec::{dvec, extensions};\n \n@@ -23,6 +25,7 @@ class lookup {\n     let mut self_ty: ty::t;\n     let mut derefs: uint;\n     let candidates: dvec<candidate>;\n+    let candidate_impls: hashmap<def_id, ()>;\n     let supplied_tps: [ty::t]/~;\n     let include_private: bool;\n \n@@ -45,6 +48,7 @@ class lookup {\n         self.self_ty = self_ty;\n         self.derefs = 0u;\n         self.candidates = dvec();\n+        self.candidate_impls = new_def_hash();\n         self.supplied_tps = supplied_tps;\n         self.include_private = include_private;\n     }\n@@ -311,16 +315,19 @@ class lookup {\n                     alt can_assign {\n                       result::err(_) { /* keep looking */ }\n                       result::ok(_) {\n-                        let fty = self.ty_from_did(m.did);\n-                        self.candidates.push(\n-                            {self_ty: self.self_ty,\n-                             self_substs: impl_substs,\n-                             rcvr_ty: impl_ty,\n-                             n_tps_m: m.n_tps,\n-                             fty: fty,\n-                             entry: {derefs: self.derefs,\n-                                     origin: method_static(m.did)}});\n-                        added_any = true;\n+                        if !self.candidate_impls.contains_key(im.did) {\n+                            let fty = self.ty_from_did(m.did);\n+                            self.candidates.push(\n+                                {self_ty: self.self_ty,\n+                                 self_substs: impl_substs,\n+                                 rcvr_ty: impl_ty,\n+                                 n_tps_m: m.n_tps,\n+                                 fty: fty,\n+                                 entry: {derefs: self.derefs,\n+                                         origin: method_static(m.did)}});\n+                            self.candidate_impls.insert(im.did, ());\n+                            added_any = true;\n+                        }\n                       }\n                     }\n                 }"}]}