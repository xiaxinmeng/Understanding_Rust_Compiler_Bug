{"sha": "7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMmYzZWU3M2Y2Mjg2NzQ0ZmY3YjM2MzI0ZGRiOWZiNWRjYTYyYWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-27T20:42:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-16T21:23:19Z"}, "message": "Account for `rustc_on_unimplemented`", "tree": {"sha": "69bdac588f859afdff37a85c4fcb25e89459be86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69bdac588f859afdff37a85c4fcb25e89459be86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "html_url": "https://github.com/rust-lang/rust/commit/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7f2346a688466624d10bfa8310b8d6aedd0ede", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7f2346a688466624d10bfa8310b8d6aedd0ede", "html_url": "https://github.com/rust-lang/rust/commit/0f7f2346a688466624d10bfa8310b8d6aedd0ede"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "1321d5348a29962b4f45fb7fbbfd528343eda379", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "patch": "@@ -776,6 +776,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             &mut err,\n                             &trait_ref,\n                             points_at_arg,\n+                            have_alt_message,\n                         ) {\n                             self.note_obligation_cause(&mut err, obligation);\n                             err.emit();\n@@ -1318,6 +1319,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'tcx>,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n+        has_custom_message: bool,\n     ) -> bool {\n         if !points_at_arg {\n             return false;\n@@ -1346,14 +1348,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     // original type obligation, not the last one that failed, which is arbitrary.\n                     // Because of this, we modify the error to refer to the original obligation and\n                     // return early in the caller.\n-                    err.message = vec![(\n-                        format!(\n-                            \"the trait bound `{}: {}` is not satisfied\",\n-                            found,\n-                            obligation.parent_trait_ref.skip_binder(),\n-                        ),\n-                        Style::NoStyle,\n-                    )];\n+                    let msg = format!(\n+                        \"the trait bound `{}: {}` is not satisfied\",\n+                        found,\n+                        obligation.parent_trait_ref.skip_binder(),\n+                    );\n+                    if has_custom_message {\n+                        err.note(&msg);\n+                    } else {\n+                        err.message = vec![(msg, Style::NoStyle)];\n+                    }\n                     if snippet.starts_with('&') {\n                         // This is already a literal borrow and the obligation is failing\n                         // somewhere else in the obligation chain. Do not suggest non-sense."}, {"sha": "f272f829ba60004d49c54de9ac8d5139ef742fde", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }"}, {"sha": "3b7f85c56689e9d02be9a977c6cb18953cef983e", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::string::String: std::str::pattern::Pattern<'_>` is not satisfied\n+error[E0277]: expected a `std::ops::FnMut<(char,)>` closure, found `std::string::String`\n   --> $DIR/issue-62843.rs:4:32\n    |\n LL |     println!(\"{:?}\", line.find(pattern));\n@@ -7,6 +7,7 @@ LL |     println!(\"{:?}\", line.find(pattern));\n    |                                expected an implementor of trait `std::str::pattern::Pattern<'_>`\n    |                                help: consider borrowing here: `&pattern`\n    |\n+   = note: the trait bound `std::string::String: std::str::pattern::Pattern<'_>` is not satisfied\n    = note: required because of the requirements on the impl of `std::str::pattern::Pattern<'_>` for `std::string::String`\n \n error: aborting due to previous error"}, {"sha": "fb9a3a99748d02d4c222d656f9f48a5774db7c71", "filename": "src/test/ui/traits/traits-negative-impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.rs?ref=7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "patch": "@@ -46,7 +46,7 @@ fn dummy2() {\n     impl !Send for TestType {}\n \n     is_send(Box::new(TestType));\n-    //~^ ERROR the trait bound `dummy2::TestType: std::marker::Send` is not satisfied\n+    //~^ ERROR `dummy2::TestType` cannot be sent between threads safely\n }\n \n fn dummy3() {\n@@ -64,5 +64,5 @@ fn main() {\n     // This will complain about a missing Send impl because `Sync` is implement *just*\n     // for T that are `Send`. Look at #20366 and #19950\n     is_sync(Outer2(TestType));\n-    //~^ ERROR the trait bound `main::TestType: std::marker::Sync` is not satisfied\n+    //~^ ERROR `main::TestType` cannot be sent between threads safely\n }"}, {"sha": "599bbfe222546aa20b0141f9e16e9c885863ca4f", "filename": "src/test/ui/traits/traits-negative-impls.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr?ref=7a2f3ee73f6286744ff7b36324ddb9fb5dca62ac", "patch": "@@ -43,7 +43,7 @@ LL |     is_send((8, TestType));\n    = help: within `({integer}, dummy1c::TestType)`, the trait `std::marker::Send` is not implemented for `dummy1c::TestType`\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n \n-error[E0277]: the trait bound `dummy2::TestType: std::marker::Send` is not satisfied\n+error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:48:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n@@ -55,6 +55,7 @@ LL |     is_send(Box::new(TestType));\n    |             expected an implementor of trait `std::marker::Send`\n    |             help: consider borrowing here: `&Box::new(TestType)`\n    |\n+   = note: the trait bound `dummy2::TestType: std::marker::Send` is not satisfied\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dummy2::TestType>`\n    = note: required because it appears within the type `std::boxed::Box<dummy2::TestType>`\n \n@@ -72,7 +73,7 @@ LL |     is_send(Box::new(Outer2(TestType)));\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<Outer2<dummy3::TestType>>`\n    = note: required because it appears within the type `std::boxed::Box<Outer2<dummy3::TestType>>`\n \n-error[E0277]: the trait bound `main::TestType: std::marker::Sync` is not satisfied\n+error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:66:13\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n@@ -84,6 +85,7 @@ LL |     is_sync(Outer2(TestType));\n    |             expected an implementor of trait `std::marker::Sync`\n    |             help: consider borrowing here: `&Outer2(TestType)`\n    |\n+   = note: the trait bound `main::TestType: std::marker::Sync` is not satisfied\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `Outer2<main::TestType>`\n \n error: aborting due to 7 previous errors"}]}