{"sha": "f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZGI5Y2Q3YzNmOTYxMmM0ZDVkNTk0ZmQ4MWJmNGNhMWU3MjE1NDA=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-03T03:00:01Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-06-03T03:15:50Z"}, "message": "s/method/associated function/ in E0201", "tree": {"sha": "0339eb0f942081337fc2e90b93399c2e277378a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0339eb0f942081337fc2e90b93399c2e277378a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "html_url": "https://github.com/rust-lang/rust/commit/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/comments", "author": null, "committer": null, "parents": [{"sha": "dc1e79b3c215ac71285f468ed4e7715528e7e9f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1e79b3c215ac71285f468ed4e7715528e7e9f4", "html_url": "https://github.com/rust-lang/rust/commit/dc1e79b3c215ac71285f468ed4e7715528e7e9f4"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "41b3be46c0d83e98cb4a783b170ba35bf7e0f757", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "patch": "@@ -752,7 +752,7 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n     let mut seen_methods = FnvHashSet();\n     for (sig, id, ident, vis, span) in methods {\n         if !seen_methods.insert(ident.name) {\n-            span_err!(tcx.sess, span, E0201, \"duplicate method\");\n+            span_err!(tcx.sess, span, E0201, \"duplicate associated function\");\n         }\n \n         convert_method(ccx,"}, {"sha": "aa3af2cc5fbaa11e4ffca6ab6d1ad88ca1d2463e", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "patch": "@@ -880,19 +880,29 @@ unsafe impl Bar for Foo { }\n \"##,\n \n E0201: r##\"\n-It is an error to define a method--a trait method or an inherent method--more\n-than once.\n+It is an error to define an associated function more than once.\n \n-For example,\n+For example:\n \n ```\n struct Foo(u8);\n \n impl Foo {\n+    fn bar(&self) -> bool { self.0 > 5 }\n+\n+    // error: duplicate associated function\n     fn bar() {}\n+}\n \n-    // error: duplicate method\n-    fn bar(&self) -> bool { self.0 > 5 }\n+trait Baz {\n+    fn baz(&self) -> bool;\n+}\n+\n+impl Baz for Foo {\n+    fn baz(&self) -> bool { true }\n+\n+    // error: duplicate associated function\n+    fn baz(&self) -> bool { self.0 > 5 }\n }\n ```\n \"##,"}, {"sha": "f2e4eb1d253e0bea60c7334bcf30d3776d1ac82f", "filename": "src/test/compile-fail/impl-duplicate-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs?ref=f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "patch": "@@ -11,7 +11,7 @@\n struct Foo;\n impl Foo {\n     fn orange(&self){}\n-    fn orange(&self){}   //~ ERROR error: duplicate method\n+    fn orange(&self){}   //~ ERROR duplicate associated function\n }\n \n fn main() {}"}, {"sha": "328de9f8187e56d2f1b38658fca5db8fd3d806e6", "filename": "src/test/compile-fail/issue-4265.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4265.rs?ref=f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "patch": "@@ -17,7 +17,7 @@ impl Foo {\n         Foo { baz: 0 }.bar();\n     }\n \n-    fn bar() { //~ ERROR duplicate method\n+    fn bar() { //~ ERROR duplicate associated function\n     }\n }\n "}, {"sha": "cce451498acdf7f8a96126018836d5160d826096", "filename": "src/test/compile-fail/issue-8153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8153.rs?ref=f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "patch": "@@ -18,7 +18,7 @@ trait Bar {\n \n impl Bar for Foo {\n     fn bar(&self) -> isize {1}\n-    fn bar(&self) -> isize {2} //~ ERROR duplicate method\n+    fn bar(&self) -> isize {2} //~ ERROR duplicate associated function\n }\n \n fn main() {"}, {"sha": "5a12c8e0bbe503783dc4e973b329714ec7fda234", "filename": "src/test/compile-fail/method-macro-backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs?ref=f1db9cd7c3f9612c4d5d594fd81bf4ca1e721540", "patch": "@@ -29,7 +29,7 @@ impl S {\n \n     // Cause an error. It shouldn't have any macro backtrace frames.\n     fn bar(&self) { }\n-    fn bar(&self) { } //~ ERROR duplicate method\n+    fn bar(&self) { } //~ ERROR duplicate associated function\n }\n \n fn main() { }"}]}