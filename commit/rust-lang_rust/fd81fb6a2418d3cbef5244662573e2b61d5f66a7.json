{"sha": "fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkODFmYjZhMjQxOGQzY2JlZjUyNDQ2NjI1NzNlMmI2MWQ1ZjY2YTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-09T04:08:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-09T04:08:00Z"}, "message": "rustc: Determine the crate type (lib/bin) in the session, not session opts\n\nThis is in preparation for adding a #[crate_type] attribute", "tree": {"sha": "ffbe0a081e582fd8723269c3aeafd437721c9b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffbe0a081e582fd8723269c3aeafd437721c9b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "html_url": "https://github.com/rust-lang/rust/commit/fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6ff44d9359ce062fb4f0e29c8f4c33eec7781e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6ff44d9359ce062fb4f0e29c8f4c33eec7781e", "html_url": "https://github.com/rust-lang/rust/commit/9e6ff44d9359ce062fb4f0e29c8f4c33eec7781e"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "dea4481fa26da5bb6a446749599e603f462a0b8a", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "patch": "@@ -425,7 +425,7 @@ fn build_link_meta(sess: session::session, c: ast::crate, output: str,\n     }\n \n     fn warn_missing(sess: session::session, name: str, default: str) {\n-        if !sess.get_opts().library { ret; }\n+        if !sess.building_library() { ret; }\n         sess.warn(#fmt[\"missing crate link meta '%s', using '%s' as default\",\n                        name, default]);\n     }\n@@ -611,7 +611,7 @@ fn link_binary(sess: session::session,\n     let used_libs = cstore::get_used_libraries(cstore);\n     for l: str in used_libs { gcc_args += [\"-l\" + l]; }\n \n-    if sess.get_opts().library {\n+    if sess.building_library() {\n         gcc_args += [lib_cmd];\n \n         // On mac we need to tell the linker to let this library"}, {"sha": "e00c16425f22f1aaabfd7bdd2f39a25a40f79ee3", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "patch": "@@ -282,6 +282,7 @@ options:\n \n     -o <filename>      write output to <filename>\n     --lib              compile a library crate\n+    --bin              compile an executable crate (default)\n     --static           use or produce static libraries\n     --no-core          omit the 'core' library (used and imported by default)\n     --pretty [type]    pretty-print the input instead of compiling\n@@ -371,7 +372,13 @@ fn host_triple() -> str {\n \n fn build_session_options(match: getopts::match)\n    -> @session::options {\n-    let library = opt_present(match, \"lib\");\n+    let crate_type = if opt_present(match, \"lib\") {\n+        session::lib_crate\n+    } else if opt_present(match, \"bin\") {\n+        session::bin_crate\n+    } else {\n+        session::unknown_crate\n+    };\n     let static = opt_present(match, \"static\");\n \n     let parse_only = opt_present(match, \"parse-only\");\n@@ -435,7 +442,7 @@ fn build_session_options(match: getopts::match)\n     let stack_growth = opt_present(match, \"stack-growth\");\n     let warn_unused_imports = opt_present(match, \"warn-unused-imports\");\n     let sopts: @session::options =\n-        @{library: library,\n+        @{crate_type: crate_type,\n           static: static,\n           libcore: libcore,\n           optimize: opt_level,\n@@ -495,20 +502,21 @@ fn opts() -> [getopts::opt] {\n          optflag(\"no-verify\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"no-core\"),\n-         optflag(\"lib\"), optflag(\"static\"), optflag(\"gc\"),\n+         optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),\n          optflag(\"stack-growth\"),\n          optflag(\"no-asm-comments\"),\n          optflag(\"warn-unused-imports\")];\n }\n \n fn build_output_filenames(ifile: str, ofile: option::t<str>,\n-                          sopts: @session::options)\n+                          sess: session::session)\n         -> @{out_filename: str, obj_filename:str} {\n     let obj_filename = \"\";\n     let saved_out_filename: str = \"\";\n+    let sopts = sess.get_opts();\n     let stop_after_codegen =\n         sopts.output_type != link::output_type_exe ||\n-            sopts.static && sopts.library;\n+            sopts.static && sess.building_library();\n     alt ofile {\n       none. {\n         // \"-\" as input file will cause the parser to read from stdin so we\n@@ -533,7 +541,7 @@ fn build_output_filenames(ifile: str, ofile: option::t<str>,\n             };\n         obj_filename = base_filename + \".\" + suffix;\n \n-        if sopts.library {\n+        if sess.building_library() {\n             saved_out_filename = std::os::dylib_filename(base_filename);\n         } else {\n             saved_out_filename = base_filename;\n@@ -580,7 +588,6 @@ fn main(args: [str]) {\n     let sopts = build_session_options(match);\n     let sess = build_session(sopts);\n     let ofile = getopts::opt_maybe_str(match, \"o\");\n-    let outputs = build_output_filenames(ifile, ofile, sopts);\n     let cfg = build_configuration(sess, binary, ifile);\n     let pretty =\n         option::map::<str,\n@@ -597,9 +604,11 @@ fn main(args: [str]) {\n         ret;\n     }\n \n+    let outputs = build_output_filenames(ifile, ofile, sess);\n+\n     let stop_after_codegen =\n         sopts.output_type != link::output_type_exe ||\n-            sopts.static && sopts.library;\n+            sopts.static && sess.building_library();\n \n     let temp_filename = outputs.obj_filename;\n "}, {"sha": "2292c5c2882461c2d77af5282466ec0e55443a24", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "patch": "@@ -13,6 +13,8 @@ tag os { os_win32; os_macos; os_linux; }\n \n tag arch { arch_x86; arch_x86_64; arch_arm; }\n \n+tag crate_type { bin_crate; lib_crate; unknown_crate; }\n+\n type config =\n     {os: os,\n      arch: arch,\n@@ -24,7 +26,7 @@ type config =\n type options =\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process\n-    {library: bool,\n+    {crate_type: crate_type,\n      static: bool,\n      libcore: bool,\n      optimize: uint,\n@@ -116,6 +118,7 @@ obj session(targ_cfg: @config,\n     fn set_main_id(d: node_id) { main_fn = some(d); }\n     fn get_main_id() -> option::t<node_id> { main_fn }\n     fn filesearch() -> filesearch::filesearch { filesearch }\n+    fn building_library() -> bool { opts.crate_type == lib_crate }\n }\n // Local Variables:\n // fill-column: 78;"}, {"sha": "4a8795d9d5e59a1a3fdc87499c4c9d67482bafce", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "patch": "@@ -362,7 +362,7 @@ fn visit_fn_with_scope(e: @env, f: ast::_fn, tp: [ast::ty_param], sp: span,\n     // is this a main fn declaration?\n     alt name {\n       some(nm) {\n-        if is_main_name([nm]) && !e.sess.get_opts().library {\n+        if is_main_name([nm]) && !e.sess.building_library() {\n             // This is a main function -- set it in the session\n             // as the main ID\n             e.sess.set_main_id(id);"}, {"sha": "df0de922fa36c4b7e96b4142be03f4befda5cb54", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "patch": "@@ -5528,7 +5528,7 @@ fn register_fn_full(ccx: @crate_ctxt, sp: span, path: [str], _flav: str,\n     ccx.item_ids.insert(node_id, llfn);\n     ccx.item_symbols.insert(node_id, ps);\n \n-    let is_main: bool = is_main_name(path) && !ccx.sess.get_opts().library;\n+    let is_main: bool = is_main_name(path) && !ccx.sess.building_library();\n     if is_main { create_main_wrapper(ccx, sp, llfn, node_type); }\n }\n \n@@ -5951,7 +5951,7 @@ fn decl_crate_map(sess: session::session, mapname: str,\n     let n_subcrates = 1;\n     let cstore = sess.get_cstore();\n     while cstore::have_crate_data(cstore, n_subcrates) { n_subcrates += 1; }\n-    let mapname = sess.get_opts().library ? mapname : \"toplevel\";\n+    let mapname = sess.building_library() ? mapname : \"toplevel\";\n     let sym_name = \"_rust_crate_map_\" + mapname;\n     let arrtype = T_array(int_type, n_subcrates as uint);\n     let maptype = T_struct([int_type, arrtype]);\n@@ -5983,7 +5983,7 @@ fn fill_crate_map(ccx: @crate_ctxt, map: ValueRef) {\n }\n \n fn write_metadata(cx: @crate_ctxt, crate: @ast::crate) {\n-    if !cx.sess.get_opts().library { ret; }\n+    if !cx.sess.building_library() { ret; }\n     let llmeta = C_postr(metadata::encoder::encode_metadata(cx, crate));\n     let llconst = trans_common::C_struct([llmeta]);\n     let llglobal ="}, {"sha": "feaa1215d872468f86f88e788c426c8910e6f790", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd81fb6a2418d3cbef5244662573e2b61d5f66a7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=fd81fb6a2418d3cbef5244662573e2b61d5f66a7", "patch": "@@ -2720,7 +2720,7 @@ fn check_main_fn_ty(tcx: ty::ctxt, main_id: ast::node_id) {\n }\n \n fn check_for_main_fn(tcx: ty::ctxt, crate: @ast::crate) {\n-    if !tcx.sess.get_opts().library {\n+    if !tcx.sess.building_library() {\n         alt tcx.sess.get_main_id() {\n           some(id) { check_main_fn_ty(tcx, id); }\n           none. { tcx.sess.span_err(crate.span, \"main function not found\"); }"}]}