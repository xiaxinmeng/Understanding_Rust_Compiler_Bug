{"sha": "4dbda0662964e02e02c2b1891cd1332966fef658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYmRhMDY2Mjk2NGUwMmUwMmMyYjE4OTFjZDEzMzI5NjZmZWY2NTg=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-06T10:24:23Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-06T10:24:23Z"}, "message": "Use push_rewrite() to remove duplicates", "tree": {"sha": "0430138b5f478fe9b12afe8b2540406d8336b4f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0430138b5f478fe9b12afe8b2540406d8336b4f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbda0662964e02e02c2b1891cd1332966fef658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbda0662964e02e02c2b1891cd1332966fef658", "html_url": "https://github.com/rust-lang/rust/commit/4dbda0662964e02e02c2b1891cd1332966fef658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbda0662964e02e02c2b1891cd1332966fef658/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd03737570c6f07e92b1bd1116bc3e56c571216", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd03737570c6f07e92b1bd1116bc3e56c571216", "html_url": "https://github.com/rust-lang/rust/commit/4bd03737570c6f07e92b1bd1116bc3e56c571216"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "f4288d84462304b6b67ba3e86836305d8ecfaccd", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4dbda0662964e02e02c2b1891cd1332966fef658/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbda0662964e02e02c2b1891cd1332966fef658/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=4dbda0662964e02e02c2b1891cd1332966fef658", "patch": "@@ -345,43 +345,32 @@ impl<'a> FmtVisitor<'a> {\n         match item.node {\n             ast::ItemKind::Use(ref vp) => self.format_import(&item, vp),\n             ast::ItemKind::Impl(..) => {\n-                self.format_missing_with_indent(source!(self, item.span).lo());\n                 let snippet = self.snippet(item.span);\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n                     .map(|x| (BytePos(x as u32)) + source!(self, item.span).lo());\n-                if let Some(impl_str) =\n-                    format_impl(&self.get_context(), item, self.block_indent, where_span_end)\n-                {\n-                    self.buffer.push_str(&impl_str);\n-                    self.last_pos = source!(self, item.span).hi();\n-                }\n+                let rw = format_impl(&self.get_context(), item, self.block_indent, where_span_end);\n+                self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::Trait(..) => {\n-                self.format_missing_with_indent(item.span.lo());\n-                if let Some(trait_str) = format_trait(&self.get_context(), item, self.block_indent)\n-                {\n-                    self.buffer.push_str(&trait_str);\n-                    self.last_pos = source!(self, item.span).hi();\n-                }\n+                let rw = format_trait(&self.get_context(), item, self.block_indent);\n+                self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::ExternCrate(_) => {\n                 let rw = rewrite_extern_crate(&self.get_context(), item);\n                 self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::Struct(ref def, ref generics) => {\n                 let rewrite = {\n-                    let indent = self.block_indent;\n-                    let context = self.get_context();\n                     ::items::format_struct(\n-                        &context,\n+                        &self.get_context(),\n                         \"struct \",\n                         item.ident,\n                         &item.vis,\n                         def,\n                         Some(generics),\n                         item.span,\n-                        indent,\n+                        self.block_indent,\n                         None,\n                     ).map(|s| match *def {\n                         ast::VariantData::Tuple(..) => s + \";\","}]}