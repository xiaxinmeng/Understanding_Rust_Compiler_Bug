{"sha": "4be260d693babea7d32fead0ca10762a64557aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZTI2MGQ2OTNiYWJlYTdkMzJmZWFkMGNhMTA3NjJhNjQ1NTdhYWY=", "commit": {"author": {"name": "Vladyslav Katasonov", "email": "cpud47@gmail.com", "date": "2021-02-10T17:05:03Z"}, "committer": {"name": "Vladyslav Katasonov", "email": "cpud47@gmail.com", "date": "2021-02-13T19:04:52Z"}, "message": "allow try expr? with return None in extracted function", "tree": {"sha": "180dced93a90abd43aa213fbe419601368f14dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/180dced93a90abd43aa213fbe419601368f14dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4be260d693babea7d32fead0ca10762a64557aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4be260d693babea7d32fead0ca10762a64557aaf", "html_url": "https://github.com/rust-lang/rust/commit/4be260d693babea7d32fead0ca10762a64557aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4be260d693babea7d32fead0ca10762a64557aaf/comments", "author": {"login": "cpud36", "id": 4218373, "node_id": "MDQ6VXNlcjQyMTgzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4218373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpud36", "html_url": "https://github.com/cpud36", "followers_url": "https://api.github.com/users/cpud36/followers", "following_url": "https://api.github.com/users/cpud36/following{/other_user}", "gists_url": "https://api.github.com/users/cpud36/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpud36/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpud36/subscriptions", "organizations_url": "https://api.github.com/users/cpud36/orgs", "repos_url": "https://api.github.com/users/cpud36/repos", "events_url": "https://api.github.com/users/cpud36/events{/privacy}", "received_events_url": "https://api.github.com/users/cpud36/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpud36", "id": 4218373, "node_id": "MDQ6VXNlcjQyMTgzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4218373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpud36", "html_url": "https://github.com/cpud36", "followers_url": "https://api.github.com/users/cpud36/followers", "following_url": "https://api.github.com/users/cpud36/following{/other_user}", "gists_url": "https://api.github.com/users/cpud36/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpud36/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpud36/subscriptions", "organizations_url": "https://api.github.com/users/cpud36/orgs", "repos_url": "https://api.github.com/users/cpud36/repos", "events_url": "https://api.github.com/users/cpud36/events{/privacy}", "received_events_url": "https://api.github.com/users/cpud36/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb19d92dd8d3200f3530faefa7a4048f58d280d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb19d92dd8d3200f3530faefa7a4048f58d280d", "html_url": "https://github.com/rust-lang/rust/commit/9eb19d92dd8d3200f3530faefa7a4048f58d280d"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "74fa2013cc44af3ef871110e9908114845cbbae7", "filename": "crates/assists/src/handlers/extract_function.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4be260d693babea7d32fead0ca10762a64557aaf/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be260d693babea7d32fead0ca10762a64557aaf/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=4be260d693babea7d32fead0ca10762a64557aaf", "patch": "@@ -229,12 +229,12 @@ fn external_control_flow(ctx: &AssistContext, body: &FunctionBody) -> Option<Con\n \n /// Checks is expr is `Err(_)` or `None`\n fn expr_err_kind(expr: &ast::Expr, ctx: &AssistContext) -> Option<TryKind> {\n-    let call_expr = match expr {\n-        ast::Expr::CallExpr(call_expr) => call_expr,\n+    let func_name = match expr {\n+        ast::Expr::CallExpr(call_expr) => call_expr.expr()?,\n+        ast::Expr::PathExpr(_) => expr.clone(),\n         _ => return None,\n     };\n-    let func = call_expr.expr()?;\n-    let text = func.syntax().text();\n+    let text = func_name.syntax().text();\n \n     if text == \"Err\" {\n         Some(TryKind::Result { ty: ctx.sema.type_of_expr(expr)? })\n@@ -3276,6 +3276,44 @@ fn $0fun_name() -> Result<i32, i64> {\n         );\n     }\n \n+    #[test]\n+    fn try_option_with_return() {\n+        check_assist(\n+            extract_function,\n+            r##\"\n+enum Option<T> { None, Some(T) }\n+use Option::*;\n+fn foo() -> Option<()> {\n+    let n = 1;\n+    $0let k = foo()?;\n+    if k == 42 {\n+        return None;\n+    }\n+    let m = k + 1;$0\n+    let h = 1 + m;\n+    Some(())\n+}\"##,\n+            r##\"\n+enum Option<T> { None, Some(T) }\n+use Option::*;\n+fn foo() -> Option<()> {\n+    let n = 1;\n+    let m = fun_name()?;\n+    let h = 1 + m;\n+    Some(())\n+}\n+\n+fn $0fun_name() -> Option<i32> {\n+    let k = foo()?;\n+    if k == 42 {\n+        return None;\n+    }\n+    let m = k + 1;\n+    Some(m)\n+}\"##,\n+        );\n+    }\n+\n     #[test]\n     fn try_result_with_return() {\n         check_assist("}]}