{"sha": "4a07662d948bd831eba6a87b7acc080cbee88d4a", "node_id": "C_kwDOAAsO6NoAKDRhMDc2NjJkOTQ4YmQ4MzFlYmE2YTg3YjdhY2MwODBjYmVlODhkNGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T20:08:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T20:08:29Z"}, "message": "Auto merge of #8561 - FoseFx:use_unwrap_or, r=xFrednet\n\nadd `or_then_unwrap`\n\nCloses #8557\n\nchangelog: New lint [`or_then_unwrap`]", "tree": {"sha": "e78f2fe9c28d622326e8bc42c92ffcb93512545b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e78f2fe9c28d622326e8bc42c92ffcb93512545b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a07662d948bd831eba6a87b7acc080cbee88d4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a07662d948bd831eba6a87b7acc080cbee88d4a", "html_url": "https://github.com/rust-lang/rust/commit/4a07662d948bd831eba6a87b7acc080cbee88d4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a07662d948bd831eba6a87b7acc080cbee88d4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0a3687d8ade4d621e50f3765d7e3034491096b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0a3687d8ade4d621e50f3765d7e3034491096b", "html_url": "https://github.com/rust-lang/rust/commit/ff0a3687d8ade4d621e50f3765d7e3034491096b"}, {"sha": "765cce11b10eabe667b42df1a9a878fe38b713ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/765cce11b10eabe667b42df1a9a878fe38b713ce", "html_url": "https://github.com/rust-lang/rust/commit/765cce11b10eabe667b42df1a9a878fe38b713ce"}], "stats": {"total": 239, "additions": 239, "deletions": 0}, "files": [{"sha": "dc83de665548f91fc81639353757554c3e8095a9", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -3367,6 +3367,7 @@ Released 2018-09-13\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n [`option_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_option\n [`or_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\n+[`or_then_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_then_unwrap\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n [`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic"}, {"sha": "132a466267626e51fd6b0444e0e48763db3880d5", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -182,6 +182,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::OPTION_FILTER_MAP),\n     LintId::of(methods::OPTION_MAP_OR_NONE),\n     LintId::of(methods::OR_FUN_CALL),\n+    LintId::of(methods::OR_THEN_UNWRAP),\n     LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),\n     LintId::of(methods::SEARCH_IS_SOME),\n     LintId::of(methods::SHOULD_IMPLEMENT_TRAIT),"}, {"sha": "a2ce69065f94d47685a1c47f1fa8deb01ecbc05b", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -47,6 +47,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::OPTION_AS_REF_DEREF),\n     LintId::of(methods::OPTION_FILTER_MAP),\n+    LintId::of(methods::OR_THEN_UNWRAP),\n     LintId::of(methods::SEARCH_IS_SOME),\n     LintId::of(methods::SKIP_WHILE_NEXT),\n     LintId::of(methods::UNNECESSARY_FILTER_MAP),"}, {"sha": "65ad64f190185d5a18c831612ac1ec151749b34a", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -320,6 +320,7 @@ store.register_lints(&[\n     methods::OPTION_FILTER_MAP,\n     methods::OPTION_MAP_OR_NONE,\n     methods::OR_FUN_CALL,\n+    methods::OR_THEN_UNWRAP,\n     methods::RESULT_MAP_OR_INTO_OPTION,\n     methods::SEARCH_IS_SOME,\n     methods::SHOULD_IMPLEMENT_TRAIT,"}, {"sha": "c586a0444f003848c0fcb4e41094a7c355d1e0b2", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -45,6 +45,7 @@ mod option_as_ref_deref;\n mod option_map_or_none;\n mod option_map_unwrap_or;\n mod or_fun_call;\n+mod or_then_unwrap;\n mod search_is_some;\n mod single_char_add_str;\n mod single_char_insert_string;\n@@ -778,6 +779,42 @@ declare_clippy_lint! {\n     \"using any `*or` method with a function call, which suggests `*or_else`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `.or(\u2026).unwrap()` calls to Options and Results.\n+    ///\n+    /// ### Why is this bad?\n+    /// You should use `.unwrap_or(\u2026)` instead for clarity.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let fallback = \"fallback\";\n+    /// // Result\n+    /// # type Error = &'static str;\n+    /// # let result: Result<&str, Error> = Err(\"error\");\n+    /// let value = result.or::<Error>(Ok(fallback)).unwrap();\n+    ///\n+    /// // Option\n+    /// # let option: Option<&str> = None;\n+    /// let value = option.or(Some(fallback)).unwrap();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let fallback = \"fallback\";\n+    /// // Result\n+    /// # let result: Result<&str, &str> = Err(\"error\");\n+    /// let value = result.unwrap_or(fallback);\n+    ///\n+    /// // Option\n+    /// # let option: Option<&str> = None;\n+    /// let value = option.unwrap_or(fallback);\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub OR_THEN_UNWRAP,\n+    complexity,\n+    \"checks for `.or(\u2026).unwrap()` calls to Options and Results.\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `.expect(&format!(...))`, `.expect(foo(..))`,\n@@ -2039,6 +2076,7 @@ impl_lint_pass!(Methods => [\n     OPTION_MAP_OR_NONE,\n     BIND_INSTEAD_OF_MAP,\n     OR_FUN_CALL,\n+    OR_THEN_UNWRAP,\n     EXPECT_FUN_CALL,\n     CHARS_NEXT_CMP,\n     CHARS_LAST_CMP,\n@@ -2474,6 +2512,9 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     Some((\"get_mut\", [recv, get_arg], _)) => {\n                         get_unwrap::check(cx, expr, recv, get_arg, true);\n                     },\n+                    Some((\"or\", [recv, or_arg], or_span)) => {\n+                        or_then_unwrap::check(cx, expr, recv, or_arg, or_span);\n+                    },\n                     _ => {},\n                 }\n                 unwrap_used::check(cx, expr, recv);"}, {"sha": "be5768c354504790eb9e073750d88759e9a1725a", "filename": "clippy_lints/src/methods/or_then_unwrap.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -0,0 +1,68 @@\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, is_lang_ctor};\n+use rustc_errors::Applicability;\n+use rustc_hir::{lang_items::LangItem, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::{sym, Span};\n+\n+use super::OR_THEN_UNWRAP;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    unwrap_expr: &Expr<'_>,\n+    recv: &'tcx Expr<'tcx>,\n+    or_arg: &'tcx Expr<'_>,\n+    or_span: Span,\n+) {\n+    let ty = cx.typeck_results().expr_ty(recv); // get type of x (we later check if it's Option or Result)\n+    let title;\n+    let or_arg_content: Span;\n+\n+    if is_type_diagnostic_item(cx, ty, sym::Option) {\n+        title = \"found `.or(Some(\u2026)).unwrap()`\";\n+        if let Some(content) = get_content_if_ctor_matches(cx, or_arg, LangItem::OptionSome) {\n+            or_arg_content = content;\n+        } else {\n+            return;\n+        }\n+    } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n+        title = \"found `.or(Ok(\u2026)).unwrap()`\";\n+        if let Some(content) = get_content_if_ctor_matches(cx, or_arg, LangItem::ResultOk) {\n+            or_arg_content = content;\n+        } else {\n+            return;\n+        }\n+    } else {\n+        // Someone has implemented a struct with .or(...).unwrap() chaining,\n+        // but it's not an Option or a Result, so bail\n+        return;\n+    }\n+\n+    let mut applicability = Applicability::MachineApplicable;\n+    let suggestion = format!(\n+        \"unwrap_or({})\",\n+        snippet_with_applicability(cx, or_arg_content, \"..\", &mut applicability)\n+    );\n+\n+    span_lint_and_sugg(\n+        cx,\n+        OR_THEN_UNWRAP,\n+        unwrap_expr.span.with_lo(or_span.lo()),\n+        title,\n+        \"try this\",\n+        suggestion,\n+        applicability,\n+    );\n+}\n+\n+fn get_content_if_ctor_matches(cx: &LateContext<'_>, expr: &Expr<'_>, item: LangItem) -> Option<Span> {\n+    if let ExprKind::Call(some_expr, [arg]) = expr.kind\n+        && let ExprKind::Path(qpath) = &some_expr.kind\n+        && is_lang_ctor(cx, qpath, item)\n+    {\n+        Some(arg.span)\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "27d4b795a5eeb8fd31307b952f03006c23068784", "filename": "tests/ui/or_then_unwrap.fixed", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/tests%2Fui%2For_then_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/tests%2Fui%2For_then_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.fixed?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -0,0 +1,52 @@\n+// run-rustfix\n+\n+#![warn(clippy::or_then_unwrap)]\n+#![allow(clippy::map_identity)]\n+\n+struct SomeStruct {}\n+impl SomeStruct {\n+    fn or(self, _: Option<Self>) -> Self {\n+        self\n+    }\n+    fn unwrap(&self) {}\n+}\n+\n+struct SomeOtherStruct {}\n+impl SomeOtherStruct {\n+    fn or(self) -> Self {\n+        self\n+    }\n+    fn unwrap(&self) {}\n+}\n+\n+fn main() {\n+    let option: Option<&str> = None;\n+    let _ = option.unwrap_or(\"fallback\"); // should trigger lint\n+\n+    let result: Result<&str, &str> = Err(\"Error\");\n+    let _ = result.unwrap_or(\"fallback\"); // should trigger lint\n+\n+    // as part of a method chain\n+    let option: Option<&str> = None;\n+    let _ = option.map(|v| v).unwrap_or(\"fallback\").to_string().chars(); // should trigger lint\n+\n+    // Not Option/Result\n+    let instance = SomeStruct {};\n+    let _ = instance.or(Some(SomeStruct {})).unwrap(); // should not trigger lint\n+\n+    // or takes no argument\n+    let instance = SomeOtherStruct {};\n+    let _ = instance.or().unwrap(); // should not trigger lint and should not panic\n+\n+    // None in or\n+    let option: Option<&str> = None;\n+    let _ = option.or(None).unwrap(); // should not trigger lint\n+\n+    // Not Err in or\n+    let result: Result<&str, &str> = Err(\"Error\");\n+    let _ = result.or::<&str>(Err(\"Other Error\")).unwrap(); // should not trigger lint\n+\n+    // other function between\n+    let option: Option<&str> = None;\n+    let _ = option.or(Some(\"fallback\")).map(|v| v).unwrap(); // should not trigger lint\n+}"}, {"sha": "0dab5ae2f1c04167c996b5e82e9975a27efe615c", "filename": "tests/ui/or_then_unwrap.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/tests%2Fui%2For_then_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/tests%2Fui%2For_then_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.rs?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -0,0 +1,52 @@\n+// run-rustfix\n+\n+#![warn(clippy::or_then_unwrap)]\n+#![allow(clippy::map_identity)]\n+\n+struct SomeStruct {}\n+impl SomeStruct {\n+    fn or(self, _: Option<Self>) -> Self {\n+        self\n+    }\n+    fn unwrap(&self) {}\n+}\n+\n+struct SomeOtherStruct {}\n+impl SomeOtherStruct {\n+    fn or(self) -> Self {\n+        self\n+    }\n+    fn unwrap(&self) {}\n+}\n+\n+fn main() {\n+    let option: Option<&str> = None;\n+    let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n+\n+    let result: Result<&str, &str> = Err(\"Error\");\n+    let _ = result.or::<&str>(Ok(\"fallback\")).unwrap(); // should trigger lint\n+\n+    // as part of a method chain\n+    let option: Option<&str> = None;\n+    let _ = option.map(|v| v).or(Some(\"fallback\")).unwrap().to_string().chars(); // should trigger lint\n+\n+    // Not Option/Result\n+    let instance = SomeStruct {};\n+    let _ = instance.or(Some(SomeStruct {})).unwrap(); // should not trigger lint\n+\n+    // or takes no argument\n+    let instance = SomeOtherStruct {};\n+    let _ = instance.or().unwrap(); // should not trigger lint and should not panic\n+\n+    // None in or\n+    let option: Option<&str> = None;\n+    let _ = option.or(None).unwrap(); // should not trigger lint\n+\n+    // Not Err in or\n+    let result: Result<&str, &str> = Err(\"Error\");\n+    let _ = result.or::<&str>(Err(\"Other Error\")).unwrap(); // should not trigger lint\n+\n+    // other function between\n+    let option: Option<&str> = None;\n+    let _ = option.or(Some(\"fallback\")).map(|v| v).unwrap(); // should not trigger lint\n+}"}, {"sha": "da88154c59f71f9b714f90416ef3a461954db6fe", "filename": "tests/ui/or_then_unwrap.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a07662d948bd831eba6a87b7acc080cbee88d4a/tests%2Fui%2For_then_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a07662d948bd831eba6a87b7acc080cbee88d4a/tests%2Fui%2For_then_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.stderr?ref=4a07662d948bd831eba6a87b7acc080cbee88d4a", "patch": "@@ -0,0 +1,22 @@\n+error: found `.or(Some(\u2026)).unwrap()`\n+  --> $DIR/or_then_unwrap.rs:24:20\n+   |\n+LL |     let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or(\"fallback\")`\n+   |\n+   = note: `-D clippy::or-then-unwrap` implied by `-D warnings`\n+\n+error: found `.or(Ok(\u2026)).unwrap()`\n+  --> $DIR/or_then_unwrap.rs:27:20\n+   |\n+LL |     let _ = result.or::<&str>(Ok(\"fallback\")).unwrap(); // should trigger lint\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or(\"fallback\")`\n+\n+error: found `.or(Some(\u2026)).unwrap()`\n+  --> $DIR/or_then_unwrap.rs:31:31\n+   |\n+LL |     let _ = option.map(|v| v).or(Some(\"fallback\")).unwrap().to_string().chars(); // should trigger lint\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or(\"fallback\")`\n+\n+error: aborting due to 3 previous errors\n+"}]}