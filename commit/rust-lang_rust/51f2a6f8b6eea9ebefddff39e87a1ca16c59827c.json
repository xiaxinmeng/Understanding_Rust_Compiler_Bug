{"sha": "51f2a6f8b6eea9ebefddff39e87a1ca16c59827c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZjJhNmY4YjZlZWE5ZWJlZmRkZmYzOWU4N2ExY2ExNmM1OTgyN2M=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-22T14:39:58Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-22T14:46:32Z"}, "message": "Add documentation for basic Clippy hacking", "tree": {"sha": "5bc7fa4687322be78fabe6bb47d0a6211b38fdbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc7fa4687322be78fabe6bb47d0a6211b38fdbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl8YUUgACgkQLO/Nsn7Q\nvnnaCA//QfWJh64L0VNc3NQtEi8ltGtVAopMjbal5/pI5ZVTMeNdnTFiRqGQexsL\nWUa+8l9vat0KEPAGpkMNL/nSWNVia8a3Ie3Qmf0J8t/k/JsB6AVIB5SY4Otf8wfp\nDIMJnL3I2QyD36fEkv/2Kn3r+0xWUa6YCzal19Lqc6lO+c7mY9G3DpsK1A8v6v3B\nHuzPshPNTmrEsdesbrarZPrNB4hYGko+8xUJd3RQh5JjaPTSeQsz4b3IgQj1rJpi\nWC+YDvGqx5Za3FufNzoNqiy9Rdh7Hpz5LqAbs5MHxynKJxkLEC5i+uVBnNkWD15P\nVq66/jAWwtRbAsmCW2OcuqxAPeH9OEoRTI+LSQ31F0EoinLZnvzenAObwhbrE70e\nAI8m1ZeLp+9xtE2hAzgk/zKcpXC/qqzx+XLuVZDe7A5XE7tbbOK0jaXt14KMcN+h\nGLmHET+k3rl2fMEZ5njoxzfeX48jhty5fLPB72OSdwV61mVagl1RuyIEYU7hfny5\nI67nmJouoPPVDQyxTze2TYRWsa7FX9lcxiI+ewvBqAWwEoDfZfLn26uwho0sh89I\n56XU3Fjy1Y2pP3j3bgBrLR+uWGMTYKqS6hMeNzTa9yOm09P31ePAl58yMxFN2WBu\n6VeLHVBWJTKBoGvvNUd1eWTxnCiUi9BqEdQriSWZLlY80+BTO+U=\n=bVsV\n-----END PGP SIGNATURE-----", "payload": "tree 5bc7fa4687322be78fabe6bb47d0a6211b38fdbf\nparent 8c83d5f484950d86630f467d32efcd585de2d775\nauthor flip1995 <hello@philkrones.com> 1595428798 +0200\ncommitter flip1995 <hello@philkrones.com> 1595429192 +0200\n\nAdd documentation for basic Clippy hacking\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c", "html_url": "https://github.com/rust-lang/rust/commit/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c83d5f484950d86630f467d32efcd585de2d775", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c83d5f484950d86630f467d32efcd585de2d775", "html_url": "https://github.com/rust-lang/rust/commit/8c83d5f484950d86630f467d32efcd585de2d775"}], "stats": {"total": 135, "additions": 119, "deletions": 16}, "files": [{"sha": "dfc5cc077c37f65b5ca7ed3f3394933a6c99b16a", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=51f2a6f8b6eea9ebefddff39e87a1ca16c59827c", "patch": "@@ -32,7 +32,7 @@ High level approach:\n \n 1. Find something to fix/improve\n 2. Change code (likely some file in `clippy_lints/src/`)\n-3. Follow the instructions in the [docs for writing lints](doc/adding_lints.md) such as running the `setup-toolchain.sh` script\n+3. Follow the instructions in the [Basics docs](doc/basics.md) such as running the `setup-toolchain.sh` script\n 4. Run `cargo test` in the root directory and wiggle code until it passes\n 5. Open a PR (also can be done after 2. if you run into problems)\n \n@@ -95,16 +95,16 @@ quick read.\n \n ## Getting code-completion for rustc internals to work\n \n-Unfortunately, [`rust-analyzer`][ra_homepage] does not (yet?) understand how Clippy uses compiler-internals \n-using `extern crate` and it also needs to be able to read the source files of the rustc-compiler which are not \n-available via a `rustup` component at the time of writing.  \n-To work around this, you need to have a copy of the [rustc-repo][rustc_repo] available which can be obtained via  \n-`git clone https://github.com/rust-lang/rust/`.  \n-Then you can run a `cargo dev` command to automatically make Clippy use the rustc-repo via path-dependencies \n-which rust-analyzer will be able to understand.  \n-Run `cargo dev ra-setup --repo-path <repo-path>` where `<repo-path>` is an absolute path to the rustc repo \n-you just cloned.  \n-The command will add path-dependencies pointing towards rustc-crates inside the rustc repo to \n+Unfortunately, [`rust-analyzer`][ra_homepage] does not (yet?) understand how Clippy uses compiler-internals\n+using `extern crate` and it also needs to be able to read the source files of the rustc-compiler which are not\n+available via a `rustup` component at the time of writing.\n+To work around this, you need to have a copy of the [rustc-repo][rustc_repo] available which can be obtained via\n+`git clone https://github.com/rust-lang/rust/`.\n+Then you can run a `cargo dev` command to automatically make Clippy use the rustc-repo via path-dependencies\n+which rust-analyzer will be able to understand.\n+Run `cargo dev ra-setup --repo-path <repo-path>` where `<repo-path>` is an absolute path to the rustc repo\n+you just cloned.\n+The command will add path-dependencies pointing towards rustc-crates inside the rustc repo to\n Clippys `Cargo.toml`s and should allow rust-analyzer to understand most of the types that Clippy uses.\n Just make sure to remove the dependencies again before finally making a pull request!\n "}, {"sha": "d5f4f5d56591b588d6f00fc39959a1758f420020", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=51f2a6f8b6eea9ebefddff39e87a1ca16c59827c", "patch": "@@ -27,10 +27,7 @@ because that's clearly a non-descriptive name.\n \n ## Setup\n \n-When working on Clippy, you will need the current git master version of rustc,\n-which can change rapidly. Make sure you're working near rust-clippy's master,\n-and use the `setup-toolchain.sh` script to configure the appropriate toolchain\n-for the Clippy directory.\n+See the [Basics](basics.md#get-the-code) documentation.\n \n ## Getting Started\n \n@@ -113,7 +110,7 @@ For cargo lints, the process of testing differs in that we are interested in\n the `Cargo.toml` manifest file. We also need a minimal crate associated\n with that manifest.\n \n-If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint` \n+If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint`\n we will find by default two new crates, each with its manifest file:\n \n * `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the new lint to raise an error."}, {"sha": "c1fd2fbcd1bd7213c455b87020ef8b537490d347", "filename": "doc/basics.md", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/51f2a6f8b6eea9ebefddff39e87a1ca16c59827c/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=51f2a6f8b6eea9ebefddff39e87a1ca16c59827c", "patch": "@@ -0,0 +1,106 @@\n+# Basics for hacking on Clippy\n+\n+This document explains the basics for hacking on Clippy. Besides others, this\n+includes how to set-up the development environment, how to build and how to test\n+Clippy. For a more in depth description on the codebase take a look at [Adding\n+Lints] or [Common Tools].\n+\n+[Adding Lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n+[Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md\n+\n+- [Basics for hacking on Clippy](#basics-for-hacking-on-clippy)\n+  - [Get the code](#get-the-code)\n+  - [Setup](#setup)\n+  - [Building and Testing](#building-and-testing)\n+  - [`cargo dev`](#cargo-dev)\n+\n+## Get the Code\n+\n+First, make sure you have checked out the latest version of Clippy. If this is\n+your first time working on Clippy, create a fork of the repository and clone it\n+afterwards with the following command:\n+\n+```bash\n+git clone git@github.com:<your-username>/rust-clippy\n+```\n+\n+If you've already cloned Clippy in the past, update it to the latest version:\n+\n+```bash\n+# upstream has to be the remote of the rust-lang/rust-clippy repo\n+git fetch upstream\n+# make sure that you are on the master branch\n+git checkout master\n+# rebase your master branch on the upstream master\n+git rebase upstream/master\n+# push to the master branch of your fork\n+git push\n+```\n+\n+## Setup\n+\n+Next we need to setup the toolchain to compile Clippy. Since Clippy heavily\n+relies on compiler internals it is build with the latest rustc master. To get\n+this toolchain, you can just use the `setup-toolchain.sh` script or use\n+`rustup-toolchain-install-master`:\n+\n+```bash\n+sh setup-toolchain.sh\n+# OR\n+cargo install rustup-toolchain-install-master\n+rustup-toolchain-install-master -f -n master -c rustc-dev -c llvm-tools\n+rustup override set master\n+```\n+\n+## Building and Testing\n+\n+Once the `master` toolchain is installed, you can build and test Clippy like\n+every other Rust project:\n+\n+```bash\n+cargo build  # builds Clippy\n+cargo test   # tests Clippy\n+```\n+\n+Since Clippys test suite is pretty big, there are some commands that only run a\n+subset of Clippys tests:\n+\n+```bash\n+# only run UI tests\n+cargo uitest\n+# only run UI tests starting with `test_`\n+TESTNAME=\"test_\" cargo uitest\n+# only run dogfood tests\n+cargo test --test dogfood\n+```\n+\n+If the output of a UI test differs from the expected output, you can update the\n+reference file with:\n+\n+```bash\n+sh tests/ui/update-all-references.sh\n+```\n+\n+For example, this is necessary, if you fix a typo in an error message of a lint\n+or if you modify a test file to add a test case.\n+\n+_Note:_ This command may update more files than you intended. In that case only\n+commit the files you wanted to update.\n+\n+## `cargo dev`\n+\n+Clippy has some dev tools to make working on Clippy more convenient. These tools\n+can be accessed through the `cargo dev` command. Available tools are listed\n+below. To get more information about these commands, just call them with\n+`--help`.\n+\n+```bash\n+# formats the whole Clippy codebase and all tests\n+cargo dev fmt\n+# register or update lint names/groups/...\n+cargo dev update_lints\n+# create a new lint and register it\n+cargo dev new_lint\n+# (experimental) Setup Clippy to work with rust-analyzer\n+cargo dev ra-setup\n+```"}]}