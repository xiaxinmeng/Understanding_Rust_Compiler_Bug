{"sha": "45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "node_id": "C_kwDOAAsO6NoAKDQ1YzAwMGJiYzcwMTc0ZTRiMDkzYjdmYmNkMWJmZDEwYzBiYmQxNzA", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-09-22T13:19:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-26T12:34:53Z"}, "message": "privacy: Rename \"accessibility levels\" to \"effective visibilities\"\n\nAnd a couple of other naming tweaks\n\nRelated to https://github.com/rust-lang/rust/issues/48054", "tree": {"sha": "95811b4e48394dde2b3892155a8dd52a0725ae11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95811b4e48394dde2b3892155a8dd52a0725ae11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "html_url": "https://github.com/rust-lang/rust/commit/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b336fddd3558743a558d6e5da23504ddff99ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b336fddd3558743a558d6e5da23504ddff99ca0", "html_url": "https://github.com/rust-lang/rust/commit/5b336fddd3558743a558d6e5da23504ddff99ca0"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "b47fa6c7ecf5732e3dbced0b222945ebc5428869", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -345,7 +345,7 @@ fn lint_for_missing_headers<'tcx>(\n     body_id: Option<hir::BodyId>,\n     panic_span: Option<Span>,\n ) {\n-    if !cx.access_levels.is_exported(def_id) {\n+    if !cx.effective_visibilities.is_exported(def_id) {\n         return; // Private functions do not require doc comments\n     }\n "}, {"sha": "2c3487a6e10f2a9b7d91e83a8716388f3601dc89", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -296,7 +296,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.def_id.def_id)) {\n+            if !(self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(item.def_id.def_id)) {\n                 check_variant(cx, self.threshold, def, item_name, item.span);\n             }\n         }"}, {"sha": "bb07b29b0763baa77b3844266b7e166dae1872d0", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -73,7 +73,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n-            if cx.access_levels.is_exported(item.def_id.def_id);\n+            if cx.effective_visibilities.is_exported(item.def_id.def_id);\n             let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {"}, {"sha": "32cba5e608ada90ddce448d2b12af2d710d877c3", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n     let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n     if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n+        let is_public = cx.effective_visibilities.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n@@ -44,7 +44,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n \n pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n+        let is_public = cx.effective_visibilities.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n@@ -67,7 +67,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n \n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n+        let is_public = cx.effective_visibilities.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n@@ -137,7 +137,7 @@ fn check_must_use_candidate<'tcx>(\n         || mutates_static(cx, body)\n         || in_external_macro(cx.sess(), item_span)\n         || returns_unit(decl)\n-        || !cx.access_levels.is_exported(item_id)\n+        || !cx.effective_visibilities.is_exported(item_id)\n         || is_must_use_ty(cx, return_ty(cx, cx.tcx.hir().local_def_id_to_hir_id(item_id)))\n     {\n         return;"}, {"sha": "0831b5cc38bdefa741745a80c0951f5bd2413299", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -42,7 +42,7 @@ fn check_raw_ptr<'tcx>(\n     body: &'tcx hir::Body<'tcx>,\n     def_id: LocalDefId,\n ) {\n-    if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(def_id) {\n+    if unsafety == hir::Unsafety::Normal && cx.effective_visibilities.is_exported(def_id) {\n         let raw_ptrs = iter_input_pats(decl, body)\n             .filter_map(|arg| raw_ptr_arg(cx, arg))\n             .collect::<HirIdSet>();"}, {"sha": "c5ce56dd2cef88dc0aaf6257d465db716c1f713b", "filename": "clippy_lints/src/functions/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -36,7 +36,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::Item<'tcx>, l\n     if let hir::ItemKind::Fn(ref sig, _generics, _) = item.kind\n         && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span)\n     {\n-        if cx.access_levels.is_exported(item.def_id.def_id) {\n+        if cx.effective_visibilities.is_exported(item.def_id.def_id) {\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             check_result_unit_err(cx, err_ty, fn_header_span);\n         }\n@@ -50,7 +50,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::ImplItem\n         && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span)\n         && trait_ref_of_method(cx, item.def_id.def_id).is_none()\n     {\n-        if cx.access_levels.is_exported(item.def_id.def_id) {\n+        if cx.effective_visibilities.is_exported(item.def_id.def_id) {\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             check_result_unit_err(cx, err_ty, fn_header_span);\n         }\n@@ -62,7 +62,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::TraitIt\n     if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span) {\n-            if cx.access_levels.is_exported(item.def_id.def_id) {\n+            if cx.effective_visibilities.is_exported(item.def_id.def_id) {\n                 check_result_unit_err(cx, err_ty, fn_header_span);\n             }\n             check_result_large_err(cx, err_ty, hir_ty.span, large_err_threshold);"}, {"sha": "6415f35ddd038b50e668a8960a5dad4ee3fb9f3f", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.access_levels.is_exported(item.def_id.def_id) {\n+        if !cx.effective_visibilities.is_exported(item.def_id.def_id) {\n             return;\n         }\n "}, {"sha": "6e31812d70536a3652217fc19cb34e1ebaa21998", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if item.ident.name == sym::len;\n             if let ImplItemKind::Fn(sig, _) = &item.kind;\n             if sig.decl.implicit_self.has_implicit_self();\n-            if cx.access_levels.is_exported(item.def_id.def_id);\n+            if cx.effective_visibilities.is_exported(item.def_id.def_id);\n             if matches!(sig.decl.output, FnRetTy::Return(_));\n             if let Some(imp) = get_parent_as_impl(cx.tcx, item.hir_id());\n             if imp.of_trait.is_none();\n@@ -210,7 +210,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.def_id.def_id)\n+    if cx.effective_visibilities.is_exported(visited_trait.def_id.def_id)\n         && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n     {\n         let mut current_and_super_traits = DefIdSet::default();\n@@ -331,7 +331,7 @@ fn check_for_is_empty<'tcx>(\n             None,\n             None,\n         ),\n-        Some(is_empty) if !cx.access_levels.is_exported(is_empty.def_id.expect_local()) => (\n+        Some(is_empty) if !cx.effective_visibilities.is_exported(is_empty.def_id.expect_local()) => (\n             format!(\n                 \"{item_kind} `{}` has a public `len` method, but a private `is_empty` method\",\n                 item_name.as_str(),"}, {"sha": "adfa7426607f96e92176f49457448a53e53fefff", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -3258,7 +3258,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n             let first_arg_ty_opt = method_sig.inputs().iter().next().copied();\n             // if this impl block implements a trait, lint in trait definition instead\n-            if !implements_trait && cx.access_levels.is_exported(impl_item.def_id.def_id) {\n+            if !implements_trait && cx.effective_visibilities.is_exported(impl_item.def_id.def_id) {\n                 // check missing trait implementations\n                 for method_config in &TRAIT_METHODS {\n                     if name == method_config.method_name\n@@ -3292,7 +3292,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             if sig.decl.implicit_self.has_implicit_self()\n                     && !(self.avoid_breaking_exported_api\n-                    && cx.access_levels.is_exported(impl_item.def_id.def_id))\n+                    && cx.effective_visibilities.is_exported(impl_item.def_id.def_id))\n                     && let Some(first_arg) = iter_input_pats(sig.decl, cx.tcx.hir().body(id)).next()\n                     && let Some(first_arg_ty) = first_arg_ty_opt\n                 {"}, {"sha": "ed9da2d921737205bb1aadf3c778e4c006f6d05a", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.access_levels.is_exported(it.def_id.def_id) {\n+        if !cx.effective_visibilities.is_exported(it.def_id.def_id) {\n             return;\n         }\n         match it.kind {\n@@ -142,7 +142,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.access_levels.is_exported(impl_item.def_id.def_id) {\n+        if !cx.effective_visibilities.is_exported(impl_item.def_id.def_id) {\n             return;\n         }\n \n@@ -159,7 +159,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.def_id.def_id) {\n+            if trait_def_id.is_local() && !cx.effective_visibilities.is_exported(impl_item.def_id.def_id) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "99166c68936c477ca90619f59c105d15ab47e892", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                         if_chain! {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n-                            if cx.access_levels.is_reachable(impl_item.def_id.def_id);\n+                            if cx.effective_visibilities.is_reachable(impl_item.def_id.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if self_ty == return_ty(cx, id);"}, {"sha": "c55985275db66bd610ff02b4e5354fb87179d6b9", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> PassByRefOrValue {\n     }\n \n     fn check_poly_fn(&mut self, cx: &LateContext<'tcx>, def_id: LocalDefId, decl: &FnDecl<'_>, span: Option<Span>) {\n-        if self.avoid_breaking_exported_api && cx.access_levels.is_exported(def_id) {\n+        if self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(def_id) {\n             return;\n         }\n "}, {"sha": "bc73613a1502ec880fe70a3d29f7919c90d65387", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if_chain! {\n             if cx.tcx.visibility(item.def_id.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id());\n-            if !cx.access_levels.is_exported(item.def_id.def_id) && self.is_exported.last() == Some(&false);\n+            if !cx.effective_visibilities.is_exported(item.def_id.def_id) && self.is_exported.last() == Some(&false);\n             if is_not_macro_export(item);\n             then {\n                 let span = item.span.with_hi(item.ident.span.hi());\n@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n         }\n \n         if let ItemKind::Mod { .. } = item.kind {\n-            self.is_exported.push(cx.access_levels.is_exported(item.def_id.def_id));\n+            self.is_exported.push(cx.effective_visibilities.is_exported(item.def_id.def_id));\n         }\n     }\n "}, {"sha": "7f34be5e7fd89d9e7ff22ccfbb4df62558fbb4ef", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -74,7 +74,7 @@ fn check_method(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_def: LocalDefId, spa\n         if !in_external_macro(cx.sess(), span);\n         if decl.implicit_self.has_implicit_self();\n         // We only show this warning for public exported methods.\n-        if cx.access_levels.is_exported(fn_def);\n+        if cx.effective_visibilities.is_exported(fn_def);\n         // We don't want to emit this lint if the `#[must_use]` attribute is already there.\n         if !cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::must_use));\n         if cx.tcx.visibility(fn_def.to_def_id()).is_public();"}, {"sha": "40cdcc3865bac2e0334b1776a5a76d6caec809b4", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -319,7 +319,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n                 false\n             };\n \n-        let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(id));\n+        let is_exported = cx.effective_visibilities.is_exported(cx.tcx.hir().local_def_id(id));\n \n         self.check_fn_decl(\n             cx,\n@@ -333,7 +333,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        let is_exported = cx.access_levels.is_exported(item.def_id.def_id);\n+        let is_exported = cx.effective_visibilities.is_exported(item.def_id.def_id);\n \n         match item.kind {\n             ItemKind::Static(ty, _, _) | ItemKind::Const(ty, _) => self.check_ty(\n@@ -379,7 +379,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n-        let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(field.hir_id));\n+        let is_exported = cx.effective_visibilities.is_exported(cx.tcx.hir().local_def_id(field.hir_id));\n \n         self.check_ty(\n             cx,\n@@ -392,7 +392,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &TraitItem<'_>) {\n-        let is_exported = cx.access_levels.is_exported(item.def_id.def_id);\n+        let is_exported = cx.effective_visibilities.is_exported(item.def_id.def_id);\n \n         let context = CheckTyContext {\n             is_exported,"}, {"sha": "60b46854b4ffebb2fa84bcd8f721e19a76c2d330", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         match fn_kind {\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 let def_id = cx.tcx.hir().local_def_id(hir_id);\n-                if self.avoid_breaking_exported_api && cx.access_levels.is_exported(def_id) {\n+                if self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(def_id) {\n                     return;\n                 }\n             },"}, {"sha": "62ab927d2f5c0be8042eee08cb864fbccd6e4ad4", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n-            if !cx.access_levels.is_exported(impl_item.def_id.def_id) || !self.avoid_breaking_exported_api;\n+            if !cx.effective_visibilities.is_exported(impl_item.def_id.def_id) || !self.avoid_breaking_exported_api;\n             let body = cx.tcx.hir().body(*body_id);\n             if let [self_param, ..] = body.params;\n             if !is_local_used(cx, body, self_param.pat.hir_id);"}, {"sha": "7a20148c70a5f6f46c6d8f31dae221187c3141c6", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c000bbc70174e4b093b7fbcd1bfd10c0bbd170/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=45c000bbc70174e4b093b7fbcd1bfd10c0bbd170", "patch": "@@ -105,7 +105,7 @@ impl LateLintPass<'_> for UpperCaseAcronyms {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &Item<'_>) {\n         // do not lint public items or in macros\n         if in_external_macro(cx.sess(), it.span)\n-            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.def_id.def_id))\n+            || (self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(it.def_id.def_id))\n         {\n             return;\n         }"}]}