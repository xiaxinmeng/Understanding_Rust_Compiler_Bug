{"sha": "0602d6484b32d8a74ebefa324651259f78fc5fda", "node_id": "C_kwDOAAsO6NoAKDA2MDJkNjQ4NGIzMmQ4YTc0ZWJlZmEzMjQ2NTEyNTlmNzhmYzVmZGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-16T20:36:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-16T20:36:06Z"}, "message": "Rollup merge of #103109 - RalfJung:phantom-data-impl, r=thomcc\n\nPhantomData: inline a macro that is used only once\n\nI suspect this macro used to have more uses, but right now it just obfuscates the code.", "tree": {"sha": "f2897fad2022e56cd1b1c38a35155c5a21bec9bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2897fad2022e56cd1b1c38a35155c5a21bec9bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0602d6484b32d8a74ebefa324651259f78fc5fda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTGs2CRBK7hj4Ov3rIwAArosIAHSi4rz++pthOx1szCpiMl2h\nxn0EXzcmeN6qPimLyfgVANI7VNP96tS4t+8AgQbukR4BDtwfguADeV97qwxd9Qgo\nl0HkhQ5S+7rSee+72q59T64tdQ83S5x8c5fR3sy4zPy7G5+Ng5deTOw6OgIuNyap\n5e3cqKDgZVEZjrTzxQIj/wMY575kRf/RKLCXb6vLqwizi69ty/eIgbWJ5n0Qjosz\nHx+pAiJhPJdWnhkvGIJSnUZW2PJ+6oeQjHIWXFNbDmbfu0Lnwf1ZGwkNVlFhn4Bt\n0POn7me0IYr8/LKfdcFqpUQ+u6X+9PBKW2IwjApEjDtLwPfUdNA1K0d/HHTSvDk=\n=ln28\n-----END PGP SIGNATURE-----\n", "payload": "tree f2897fad2022e56cd1b1c38a35155c5a21bec9bb\nparent bdfc2627421f6393acc7fce493ba5dd56e947bb0\nparent ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665952566 +0200\ncommitter GitHub <noreply@github.com> 1665952566 +0200\n\nRollup merge of #103109 - RalfJung:phantom-data-impl, r=thomcc\n\nPhantomData: inline a macro that is used only once\n\nI suspect this macro used to have more uses, but right now it just obfuscates the code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0602d6484b32d8a74ebefa324651259f78fc5fda", "html_url": "https://github.com/rust-lang/rust/commit/0602d6484b32d8a74ebefa324651259f78fc5fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0602d6484b32d8a74ebefa324651259f78fc5fda/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfc2627421f6393acc7fce493ba5dd56e947bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfc2627421f6393acc7fce493ba5dd56e947bb0", "html_url": "https://github.com/rust-lang/rust/commit/bdfc2627421f6393acc7fce493ba5dd56e947bb0"}, {"sha": "ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c", "html_url": "https://github.com/rust-lang/rust/commit/ddd5e983d19b9cc08fd4e587a3b0a03b5e68e26c"}], "stats": {"total": 112, "additions": 53, "deletions": 59}, "files": [{"sha": "c43c4fff6ae776228fc1f277f6e50978db2c6b9a", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 53, "deletions": 59, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/0602d6484b32d8a74ebefa324651259f78fc5fda/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0602d6484b32d8a74ebefa324651259f78fc5fda/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=0602d6484b32d8a74ebefa324651259f78fc5fda", "patch": "@@ -483,64 +483,6 @@ impl<T: ?Sized> !Sync for *const T {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !Sync for *mut T {}\n \n-macro_rules! impls {\n-    ($t: ident) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> Hash for $t<T> {\n-            #[inline]\n-            fn hash<H: Hasher>(&self, _: &mut H) {}\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> cmp::PartialEq for $t<T> {\n-            fn eq(&self, _other: &$t<T>) -> bool {\n-                true\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> cmp::Eq for $t<T> {}\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> cmp::PartialOrd for $t<T> {\n-            fn partial_cmp(&self, _other: &$t<T>) -> Option<cmp::Ordering> {\n-                Option::Some(cmp::Ordering::Equal)\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> cmp::Ord for $t<T> {\n-            fn cmp(&self, _other: &$t<T>) -> cmp::Ordering {\n-                cmp::Ordering::Equal\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> Copy for $t<T> {}\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> Clone for $t<T> {\n-            fn clone(&self) -> Self {\n-                Self\n-            }\n-        }\n-\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n-        impl<T: ?Sized> const Default for $t<T> {\n-            fn default() -> Self {\n-                Self\n-            }\n-        }\n-\n-        #[unstable(feature = \"structural_match\", issue = \"31434\")]\n-        impl<T: ?Sized> StructuralPartialEq for $t<T> {}\n-\n-        #[unstable(feature = \"structural_match\", issue = \"31434\")]\n-        impl<T: ?Sized> StructuralEq for $t<T> {}\n-    };\n-}\n-\n /// Zero-sized type used to mark things that \"act like\" they own a `T`.\n ///\n /// Adding a `PhantomData<T>` field to your type tells the compiler that your\n@@ -678,7 +620,59 @@ macro_rules! impls {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T: ?Sized>;\n \n-impls! { PhantomData }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Hash for PhantomData<T> {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, _: &mut H) {}\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> cmp::PartialEq for PhantomData<T> {\n+    fn eq(&self, _other: &PhantomData<T>) -> bool {\n+        true\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> cmp::Eq for PhantomData<T> {}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> cmp::PartialOrd for PhantomData<T> {\n+    fn partial_cmp(&self, _other: &PhantomData<T>) -> Option<cmp::Ordering> {\n+        Option::Some(cmp::Ordering::Equal)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> cmp::Ord for PhantomData<T> {\n+    fn cmp(&self, _other: &PhantomData<T>) -> cmp::Ordering {\n+        cmp::Ordering::Equal\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Copy for PhantomData<T> {}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Clone for PhantomData<T> {\n+    fn clone(&self) -> Self {\n+        Self\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T: ?Sized> const Default for PhantomData<T> {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+#[unstable(feature = \"structural_match\", issue = \"31434\")]\n+impl<T: ?Sized> StructuralPartialEq for PhantomData<T> {}\n+\n+#[unstable(feature = \"structural_match\", issue = \"31434\")]\n+impl<T: ?Sized> StructuralEq for PhantomData<T> {}\n \n mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}