{"sha": "05b7cc83707026de18dc49276db04a599781bbc2", "node_id": "C_kwDOAAsO6NoAKDA1YjdjYzgzNzA3MDI2ZGUxOGRjNDkyNzZkYjA0YTU5OTc4MWJiYzI", "commit": {"author": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2023-01-24T10:19:04Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2023-01-24T10:19:04Z"}, "message": "Move FFI attribute validation to `check_attr`", "tree": {"sha": "a7b880ee153d263caea0b0a12f6599bf4dac68ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b880ee153d263caea0b0a12f6599bf4dac68ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b7cc83707026de18dc49276db04a599781bbc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b7cc83707026de18dc49276db04a599781bbc2", "html_url": "https://github.com/rust-lang/rust/commit/05b7cc83707026de18dc49276db04a599781bbc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b7cc83707026de18dc49276db04a599781bbc2/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3984bc5833db8bfb0acc522c9775383e4171f3de", "url": "https://api.github.com/repos/rust-lang/rust/commits/3984bc5833db8bfb0acc522c9775383e4171f3de", "html_url": "https://github.com/rust-lang/rust/commit/3984bc5833db8bfb0acc522c9775383e4171f3de"}], "stats": {"total": 125, "additions": 78, "deletions": 47}, "files": [{"sha": "9ecd95f424f8b158316e87109ce83ca27c56e2ee", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 3, "deletions": 47, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/05b7cc83707026de18dc49276db04a599781bbc2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b7cc83707026de18dc49276db04a599781bbc2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=05b7cc83707026de18dc49276db04a599781bbc2", "patch": "@@ -85,55 +85,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::rustc_allocator) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR;\n         } else if attr.has_name(sym::ffi_returns_twice) {\n-            if tcx.is_foreign_item(did) {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE;\n-            } else {\n-                // `#[ffi_returns_twice]` is only allowed `extern fn`s.\n-                struct_span_err!(\n-                    tcx.sess,\n-                    attr.span,\n-                    E0724,\n-                    \"`#[ffi_returns_twice]` may only be used on foreign functions\"\n-                )\n-                .emit();\n-            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE;\n         } else if attr.has_name(sym::ffi_pure) {\n-            if tcx.is_foreign_item(did) {\n-                if attrs.iter().any(|a| a.has_name(sym::ffi_const)) {\n-                    // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        attr.span,\n-                        E0757,\n-                        \"`#[ffi_const]` function cannot be `#[ffi_pure]`\"\n-                    )\n-                    .emit();\n-                } else {\n-                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE;\n-                }\n-            } else {\n-                // `#[ffi_pure]` is only allowed on foreign functions\n-                struct_span_err!(\n-                    tcx.sess,\n-                    attr.span,\n-                    E0755,\n-                    \"`#[ffi_pure]` may only be used on foreign functions\"\n-                )\n-                .emit();\n-            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE;\n         } else if attr.has_name(sym::ffi_const) {\n-            if tcx.is_foreign_item(did) {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n-            } else {\n-                // `#[ffi_const]` is only allowed on foreign functions\n-                struct_span_err!(\n-                    tcx.sess,\n-                    attr.span,\n-                    E0756,\n-                    \"`#[ffi_const]` may only be used on foreign functions\"\n-                )\n-                .emit();\n-            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n         } else if attr.has_name(sym::rustc_nounwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n         } else if attr.has_name(sym::rustc_reallocator) {"}, {"sha": "adfe243430f34206fbefa53169ace3ac79446e01", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05b7cc83707026de18dc49276db04a599781bbc2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/05b7cc83707026de18dc49276db04a599781bbc2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=05b7cc83707026de18dc49276db04a599781bbc2", "patch": "@@ -182,6 +182,18 @@ passes_has_incoherent_inherent_impl =\n     `rustc_has_incoherent_inherent_impls` attribute should be applied to types or traits.\n     .label = only adts, extern types and traits are supported\n \n+passes_both_ffi_const_and_pure =\n+    `#[ffi_const]` function cannot be `#[ffi_pure]`\n+\n+passes_ffi_pure_invalid_target =\n+    `#[ffi_pure]` may only be used on foreign functions\n+\n+passes_ffi_const_invalid_target =\n+    `#[ffi_const]` may only be used on foreign functions\n+\n+passes_ffi_returns_twice_invalid_target =\n+    `#[ffi_returns_twice]` may only be used on foreign functions\n+\n passes_must_use_async =\n     `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n     .label = this attribute does nothing, the `Future`s returned by async functions are already `must_use`"}, {"sha": "f38b9c5834dec3e54dd5653fdbdf93b47319017b", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05b7cc83707026de18dc49276db04a599781bbc2/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b7cc83707026de18dc49276db04a599781bbc2/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=05b7cc83707026de18dc49276db04a599781bbc2", "patch": "@@ -150,6 +150,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_has_incoherent_inherent_impls => {\n                     self.check_has_incoherent_inherent_impls(&attr, span, target)\n                 }\n+                sym::ffi_pure => self.check_ffi_pure(hir_id, attr.span, attrs),\n+                sym::ffi_const => self.check_ffi_const(hir_id, attr.span),\n+                sym::ffi_returns_twice => self.check_ffi_returns_twice(hir_id, attr.span),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1171,6 +1174,38 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    fn check_ffi_pure(&self, hir_id: HirId, attr_span: Span, attrs: &[Attribute]) -> bool {\n+        if !self.tcx.is_foreign_item(self.tcx.hir().local_def_id(hir_id)) {\n+            self.tcx.sess.emit_err(errors::FfiPureInvalidTarget { attr_span });\n+            return false;\n+        }\n+        if attrs.iter().any(|a| a.has_name(sym::ffi_const)) {\n+            // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n+            self.tcx.sess.emit_err(errors::BothFfiConstAndPure { attr_span });\n+            false\n+        } else {\n+            true\n+        }\n+    }\n+\n+    fn check_ffi_const(&self, hir_id: HirId, attr_span: Span) -> bool {\n+        if self.tcx.is_foreign_item(self.tcx.hir().local_def_id(hir_id)) {\n+            true\n+        } else {\n+            self.tcx.sess.emit_err(errors::FfiConstInvalidTarget { attr_span });\n+            false\n+        }\n+    }\n+\n+    fn check_ffi_returns_twice(&self, hir_id: HirId, attr_span: Span) -> bool {\n+        if self.tcx.is_foreign_item(self.tcx.hir().local_def_id(hir_id)) {\n+            true\n+        } else {\n+            self.tcx.sess.emit_err(errors::FfiReturnsTwiceInvalidTarget { attr_span });\n+            false\n+        }\n+    }\n+\n     /// Warns against some misuses of `#[must_use]`\n     fn check_must_use(&self, hir_id: HirId, attr: &Attribute, target: Target) -> bool {\n         if !matches!("}, {"sha": "b746e543a98dab1cb5c47c574cf8cc99dc459c7f", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/05b7cc83707026de18dc49276db04a599781bbc2/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b7cc83707026de18dc49276db04a599781bbc2/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=05b7cc83707026de18dc49276db04a599781bbc2", "patch": "@@ -347,6 +347,34 @@ pub struct HasIncoherentInherentImpl {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(passes_both_ffi_const_and_pure, code = \"E0757\")]\n+pub struct BothFfiConstAndPure {\n+    #[primary_span]\n+    pub attr_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_ffi_pure_invalid_target, code = \"E0755\")]\n+pub struct FfiPureInvalidTarget {\n+    #[primary_span]\n+    pub attr_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_ffi_const_invalid_target, code = \"E0756\")]\n+pub struct FfiConstInvalidTarget {\n+    #[primary_span]\n+    pub attr_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_ffi_returns_twice_invalid_target, code = \"E0724\")]\n+pub struct FfiReturnsTwiceInvalidTarget {\n+    #[primary_span]\n+    pub attr_span: Span,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(passes_must_use_async)]\n pub struct MustUseAsync {"}]}