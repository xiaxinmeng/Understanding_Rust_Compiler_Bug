{"sha": "c925008a5ce44fd5f4755279793c64bb9ccb50f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MjUwMDhhNWNlNDRmZDVmNDc1NTI3OTc5M2M2NGJiOWNjYjUwZjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-01T18:52:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-15T21:49:21Z"}, "message": "assert that we are consuming all of the region obligations\n\nWhen we get around to resolving regions, we really ought to take region\nobligations into account. There is one case where they are presently\nbeing ignored. Keep ignoring them there for now but leave a TODO.", "tree": {"sha": "37077d25ddd9eaf1566593ccfd5d9c61b1daf510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37077d25ddd9eaf1566593ccfd5d9c61b1daf510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c925008a5ce44fd5f4755279793c64bb9ccb50f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c925008a5ce44fd5f4755279793c64bb9ccb50f4", "html_url": "https://github.com/rust-lang/rust/commit/c925008a5ce44fd5f4755279793c64bb9ccb50f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c925008a5ce44fd5f4755279793c64bb9ccb50f4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d78e40e88dbd53619cd5ec04b0f53cea871c07d", "html_url": "https://github.com/rust-lang/rust/commit/0d78e40e88dbd53619cd5ec04b0f53cea871c07d"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "ba99ff5291a1c2e953da1193dee6a3782f072f4b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c925008a5ce44fd5f4755279793c64bb9ccb50f4/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c925008a5ce44fd5f4755279793c64bb9ccb50f4/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=c925008a5ce44fd5f4755279793c64bb9ccb50f4", "patch": "@@ -1131,9 +1131,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                              region_context: DefId,\n                                              region_map: &region::ScopeTree,\n                                              free_regions: &FreeRegionMap<'tcx>) {\n-        // TODO assert!(self.region_obligations.borrow().is_empty(),\n-        // TODO         \"region_obligations not empty: {:#?}\",\n-        // TODO         self.region_obligations.borrow());\n+        assert!(self.is_tainted_by_errors() || self.region_obligations.borrow().is_empty(),\n+                \"region_obligations not empty: {:#?}\",\n+                self.region_obligations.borrow());\n \n         let region_rels = RegionRelations::new(self.tcx,\n                                                region_context,"}, {"sha": "cd4a6878851c130fe8b1923b66eff5a6c11ba801", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c925008a5ce44fd5f4755279793c64bb9ccb50f4/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c925008a5ce44fd5f4755279793c64bb9ccb50f4/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=c925008a5ce44fd5f4755279793c64bb9ccb50f4", "patch": "@@ -511,6 +511,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            unnormalized_env.reveal);\n \n     tcx.infer_ctxt().enter(|infcx| {\n+        let body_id = cause.body_id;\n         let predicates = match fully_normalize(\n             &infcx,\n             cause,\n@@ -536,6 +537,14 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         let region_scope_tree = region::ScopeTree::default();\n         let free_regions = FreeRegionMap::new();\n+\n+        // TODO We should really... do something with these. But as of\n+        // this writing we were ignoring them, just without knowing\n+        // it, and it would take some refactoring to stop doing so.\n+        // (In particular, the needed methods currently live in\n+        // regionck.) -nmatsakis\n+        let _ = infcx.take_region_obligations(body_id);\n+\n         infcx.resolve_regions_and_report_errors(region_context, &region_scope_tree, &free_regions);\n         let predicates = match infcx.fully_resolve(&predicates) {\n             Ok(predicates) => predicates,"}]}