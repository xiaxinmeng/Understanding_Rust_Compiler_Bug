{"sha": "b61e1bbf06334e235e475652bb41a603584e7150", "node_id": "C_kwDOAAsO6NoAKGI2MWUxYmJmMDYzMzRlMjM1ZTQ3NTY1MmJiNDFhNjAzNTg0ZTcxNTA", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-04T01:40:29Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-14T15:56:28Z"}, "message": "Add debug calls for negative impls in coherence", "tree": {"sha": "f1901f1c56fa6574bf3495ea21f2611675bd5186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1901f1c56fa6574bf3495ea21f2611675bd5186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b61e1bbf06334e235e475652bb41a603584e7150", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmIKe6wACgkQgTGiTgx5\n76+dIQ/+MLNWxQBHmECTXAk2wgIUE/kRwjllvqjE0oqnsi4TwIFahdiHWyfbHAxN\nRUvznVtcOSRZbB7FA6ayEpVMB/4uc84x24gRaOM+M7cIb/+DJ1sAUwADIVvz9xwe\n2tCmxzSoQlnPRkMFeqr14swOJPeGPS8BoNjhp5bHPcrx/0uCL4t9twrpmB8b8jJW\n/aMLe8LLNr8gsxVw1MS5LJGo6zCfqYudBfzGlGg+lH7M0yDE8Yqu0T2wNJperCsO\n4DGklWYD9KIFYmowrv7jaKDY3JwyLw8PhDn8DmkXzGREF1vBiZaMmkkFKyjD6d6N\nkffRjhyogawvuCPU2CBCnuPlMAXoylsM/dwNVORxwxKtKvuJ2ZARWqBnN9XcFOLM\nzQqegJopWX2ssPJ9d0T9uMesnCOopEzDnwGrfWxRVFeD+iuf85P18vdOVwk7j107\nMLwtuCjMCKAL5Db0VaZKKFobrdl35ogwKPqPnwYa6ofxqySnb3FhE7cYRvgzlDVU\n+jK098clNnzvLKCzFcdX9YGmxRSlhj2972S0j+IC2Gkix5ON1bWomcAcCxAtk1uk\nrB3lFSpuot0pQPGiR9GI/eu7wtr7Os3D4hm0y5nQGGDbtPuTPTVGCeFKT6vQOBc2\nX1oPIo2qPDhrAWqkd8Rf4077SJwv5/OBToTF/HRZW1S8UtVLWaI=\n=J2pY\n-----END PGP SIGNATURE-----", "payload": "tree f1901f1c56fa6574bf3495ea21f2611675bd5186\nparent 74c431866be8fd687d534c51f6bd3133ab2e5421\nauthor Santiago Pastorino <spastorino@gmail.com> 1643938829 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1644854188 -0300\n\nAdd debug calls for negative impls in coherence\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b61e1bbf06334e235e475652bb41a603584e7150", "html_url": "https://github.com/rust-lang/rust/commit/b61e1bbf06334e235e475652bb41a603584e7150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b61e1bbf06334e235e475652bb41a603584e7150/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c431866be8fd687d534c51f6bd3133ab2e5421", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c431866be8fd687d534c51f6bd3133ab2e5421", "html_url": "https://github.com/rust-lang/rust/commit/74c431866be8fd687d534c51f6bd3133ab2e5421"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "dd1293f1def9155387dcca578e4469a82b923fb2", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b61e1bbf06334e235e475652bb41a603584e7150/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b61e1bbf06334e235e475652bb41a603584e7150/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=b61e1bbf06334e235e475652bb41a603584e7150", "patch": "@@ -150,7 +150,10 @@ fn overlap<'cx, 'tcx>(\n     impl2_def_id: DefId,\n     overlap_mode: OverlapMode,\n ) -> Option<OverlapResult<'tcx>> {\n-    debug!(\"overlap(impl1_def_id={:?}, impl2_def_id={:?})\", impl1_def_id, impl2_def_id);\n+    debug!(\n+        \"overlap(impl1_def_id={:?}, impl2_def_id={:?}, overlap_mode={:?})\",\n+        impl1_def_id, impl2_def_id, overlap_mode\n+    );\n \n     selcx.infcx().probe_maybe_skip_leak_check(skip_leak_check.is_yes(), |snapshot| {\n         overlap_within_probe(\n@@ -191,9 +194,6 @@ fn overlap_within_probe<'cx, 'tcx>(\n     let impl1_header = with_fresh_ty_vars(selcx, param_env, impl1_def_id);\n     let impl2_header = with_fresh_ty_vars(selcx, param_env, impl2_def_id);\n \n-    debug!(\"overlap: impl1_header={:?}\", impl1_header);\n-    debug!(\"overlap: impl2_header={:?}\", impl2_header);\n-\n     let obligations = equate_impl_headers(selcx, &impl1_header, &impl2_header)?;\n     debug!(\"overlap: unification check succeeded\");\n \n@@ -226,6 +226,7 @@ fn equate_impl_headers<'cx, 'tcx>(\n     impl2_header: &ty::ImplHeader<'tcx>,\n ) -> Option<PredicateObligations<'tcx>> {\n     // Do `a` and `b` unify? If not, no overlap.\n+    debug!(\"equate_impl_headers(impl1_header={:?}, impl2_header={:?}\", impl1_header, impl2_header);\n     selcx\n         .infcx()\n         .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n@@ -264,6 +265,10 @@ fn implicit_negative<'cx, 'tcx>(\n     // If the obligation `&'?a str: Error` holds, it means that there's overlap. If that doesn't\n     // hold we need to check if `&'?a str: !Error` holds, if doesn't hold there's overlap because\n     // at some point an impl for `&'?a str: Error` could be added.\n+    debug!(\n+        \"implicit_negative(impl1_header={:?}, impl2_header={:?}, obligations={:?})\",\n+        impl1_header, impl2_header, obligations\n+    );\n     let infcx = selcx.infcx();\n     let tcx = infcx.tcx;\n     let opt_failing_obligation = impl1_header\n@@ -296,6 +301,7 @@ fn negative_impl<'cx, 'tcx>(\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n ) -> bool {\n+    debug!(\"negative_impl(impl1_def_id={:?}, impl2_def_id={:?})\", impl1_def_id, impl2_def_id);\n     let tcx = selcx.infcx().tcx;\n \n     // create a parameter environment corresponding to a (placeholder) instantiation of impl1"}]}