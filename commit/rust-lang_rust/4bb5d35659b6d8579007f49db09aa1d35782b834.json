{"sha": "4bb5d35659b6d8579007f49db09aa1d35782b834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjVkMzU2NTliNmQ4NTc5MDA3ZjQ5ZGIwOWFhMWQzNTc4MmI4MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-06T15:08:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-06T15:08:11Z"}, "message": "Auto merge of #56392 - petrochenkov:regensym, r=oli-obk\n\nDelay gensym creation for \"underscore items\" (`use foo as _`/`const _`) until name resolution\n\nSo they cannot be cloned by macros. See https://github.com/rust-lang/rust/pull/56303 for the discussion.\n\nMostly fix cross-crate use of underscore items by inverting the \"gensyms are lost in metadata\" bug as described in https://github.com/rust-lang/rust/pull/56303#issuecomment-442464695.\nFix unused import warnings for single-segment imports (first commit) and `use crate_name as _` imports (as specified in https://github.com/rust-lang/rust/pull/56303#issuecomment-442274118).\nProhibit accidentally implemented `static _: TYPE = EXPR;` (cc https://github.com/rust-lang/rust/pull/55983).\nAdd more tests for `use foo as _` imports.", "tree": {"sha": "270fb1c0ed6763b1ed5cfba48e663c157bc5a8b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/270fb1c0ed6763b1ed5cfba48e663c157bc5a8b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb5d35659b6d8579007f49db09aa1d35782b834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb5d35659b6d8579007f49db09aa1d35782b834", "html_url": "https://github.com/rust-lang/rust/commit/4bb5d35659b6d8579007f49db09aa1d35782b834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb5d35659b6d8579007f49db09aa1d35782b834/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "367e783e6f66a4dba32decdc68a262953d2f3f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/367e783e6f66a4dba32decdc68a262953d2f3f1b", "html_url": "https://github.com/rust-lang/rust/commit/367e783e6f66a4dba32decdc68a262953d2f3f1b"}, {"sha": "eb1d2e637ee9be0d111feb435b068081f10e6ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1d2e637ee9be0d111feb435b068081f10e6ec3", "html_url": "https://github.com/rust-lang/rust/commit/eb1d2e637ee9be0d111feb435b068081f10e6ec3"}], "stats": {"total": 282, "additions": 212, "deletions": 70}, "files": [{"sha": "191e4e8fe2a831485a245af4ac6233f1c8db9b91", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -157,7 +157,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         };\n         match use_tree.kind {\n             ast::UseTreeKind::Simple(rename, ..) => {\n-                let mut ident = use_tree.ident();\n+                let mut ident = use_tree.ident().gensym_if_underscore();\n                 let mut module_path = prefix;\n                 let mut source = module_path.pop().unwrap();\n                 let mut type_ns_only = false;\n@@ -230,13 +230,18 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n \n                 let subclass = SingleImport {\n-                    target: ident,\n                     source: source.ident,\n-                    result: PerNS {\n+                    target: ident,\n+                    source_bindings: PerNS {\n                         type_ns: Cell::new(Err(Undetermined)),\n                         value_ns: Cell::new(Err(Undetermined)),\n                         macro_ns: Cell::new(Err(Undetermined)),\n                     },\n+                    target_bindings: PerNS {\n+                        type_ns: Cell::new(None),\n+                        value_ns: Cell::new(None),\n+                        macro_ns: Cell::new(None),\n+                    },\n                     type_ns_only,\n                 };\n                 self.add_import_directive(\n@@ -329,7 +334,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     fn build_reduced_graph_for_item(&mut self, item: &Item, parent_scope: ParentScope<'a>) {\n         let parent = parent_scope.module;\n         let expansion = parent_scope.expansion;\n-        let ident = item.ident;\n+        let ident = item.ident.gensym_if_underscore();\n         let sp = item.span;\n         let vis = self.resolve_visibility(&item.vis);\n \n@@ -623,7 +628,11 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'a>, child: Export) {\n-        let Export { ident, def, vis, span, .. } = child;\n+        let Export { ident, def, vis, span } = child;\n+        // FIXME: We shouldn't create the gensym here, it should come from metadata,\n+        // but metadata cannot encode gensyms currently, so we create it here.\n+        // This is only a guess, two equivalent idents may incorrectly get different gensyms here.\n+        let ident = ident.gensym_if_underscore();\n         let def_id = def.def_id();\n         let expansion = Mark::root(); // FIXME(jseyfried) intercrate hygiene\n         match def {"}, {"sha": "f314d57acdd52e4bd3fd203aa62e84aeba263c4c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -1519,8 +1519,12 @@ pub struct Resolver<'a, 'b: 'a> {\n     /// The current self item if inside an ADT (used for better errors).\n     current_self_item: Option<NodeId>,\n \n-    /// FIXME: Refactor things so that this is passed through arguments and not resolver.\n+    /// FIXME: Refactor things so that these fields are passed through arguments and not resolver.\n+    /// We are resolving a last import segment during import validation.\n     last_import_segment: bool,\n+    /// This binding should be ignored during in-module resolution, so that we don't get\n+    /// \"self-confirming\" import resolutions during import validation.\n+    blacklisted_binding: Option<&'a NameBinding<'a>>,\n \n     /// The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n@@ -1871,6 +1875,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             current_self_type: None,\n             current_self_item: None,\n             last_import_segment: false,\n+            blacklisted_binding: None,\n \n             primitive_type_table: PrimitiveTypeTable::new(),\n "}, {"sha": "7deefc7f520c4693a280fb55c970b1bc624eb9ec", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -977,12 +977,14 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 let what = self.binding_description(binding, ident,\n                                                     flags.contains(Flags::MISC_FROM_PRELUDE));\n                 let note_msg = format!(\"this import refers to {what}\", what = what);\n-                if binding.span.is_dummy() {\n+                let label_span = if binding.span.is_dummy() {\n                     err.note(&note_msg);\n+                    ident.span\n                 } else {\n                     err.span_note(binding.span, &note_msg);\n-                    err.span_label(binding.span, \"not an extern crate passed with `--extern`\");\n-                }\n+                    binding.span\n+                };\n+                err.span_label(label_span, \"not an extern crate passed with `--extern`\");\n                 err.emit();\n             }\n "}, {"sha": "36b6b5296f04e212e9854cbf3328af2c432c1220", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -42,9 +42,15 @@ use std::{mem, ptr};\n #[derive(Clone, Debug)]\n pub enum ImportDirectiveSubclass<'a> {\n     SingleImport {\n-        target: Ident,\n+        /// `source` in `use prefix::source as target`.\n         source: Ident,\n-        result: PerNS<Cell<Result<&'a NameBinding<'a>, Determinacy>>>,\n+        /// `target` in `use prefix::source as target`.\n+        target: Ident,\n+        /// Bindings to which `source` refers to.\n+        source_bindings: PerNS<Cell<Result<&'a NameBinding<'a>, Determinacy>>>,\n+        /// Bindings introduced by `target`.\n+        target_bindings: PerNS<Cell<Option<&'a NameBinding<'a>>>>,\n+        /// `true` for `...::{self [as target]}` imports, `false` otherwise.\n         type_ns_only: bool,\n     },\n     GlobImport {\n@@ -227,6 +233,11 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n+            if let Some(blacklisted_binding) = this.blacklisted_binding {\n+                if ptr::eq(binding, blacklisted_binding) {\n+                    return Err((Determined, Weak::No));\n+                }\n+            }\n             // `extern crate` are always usable for backwards compatibility, see issue #37020,\n             // remove this together with `PUB_USE_OF_PRIVATE_EXTERN_CRATE`.\n             let usable = this.is_accessible(binding.vis) || binding.is_extern_crate();\n@@ -642,10 +653,10 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             if let Some((span, err, note)) = self.finalize_import(import) {\n                 errors = true;\n \n-                if let SingleImport { source, ref result, .. } = import.subclass {\n+                if let SingleImport { source, ref source_bindings, .. } = import.subclass {\n                     if source.name == \"self\" {\n                         // Silence `unresolved import` error if E0429 is already emitted\n-                        if let Err(Determined) = result.value_ns.get() {\n+                        if let Err(Determined) = source_bindings.value_ns.get() {\n                             continue;\n                         }\n                     }\n@@ -765,9 +776,11 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         };\n \n         directive.imported_module.set(Some(module));\n-        let (source, target, result, type_ns_only) = match directive.subclass {\n-            SingleImport { source, target, ref result, type_ns_only } =>\n-                (source, target, result, type_ns_only),\n+        let (source, target, source_bindings, target_bindings, type_ns_only) =\n+                match directive.subclass {\n+            SingleImport { source, target, ref source_bindings,\n+                           ref target_bindings, type_ns_only } =>\n+                (source, target, source_bindings, target_bindings, type_ns_only),\n             GlobImport { .. } => {\n                 self.resolve_glob_import(directive);\n                 return true;\n@@ -777,7 +790,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n \n         let mut indeterminate = false;\n         self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n-            if let Err(Undetermined) = result[ns].get() {\n+            if let Err(Undetermined) = source_bindings[ns].get() {\n                 // For better failure detection, pretend that the import will\n                 // not define any names while resolving its module path.\n                 let orig_vis = directive.vis.replace(ty::Visibility::Invisible);\n@@ -786,13 +799,13 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 );\n                 directive.vis.set(orig_vis);\n \n-                result[ns].set(binding);\n+                source_bindings[ns].set(binding);\n             } else {\n                 return\n             };\n \n             let parent = directive.parent_scope.module;\n-            match result[ns].get() {\n+            match source_bindings[ns].get() {\n                 Err(Undetermined) => indeterminate = true,\n                 Err(Determined) => {\n                     this.update_resolution(parent, target, ns, |_, resolution| {\n@@ -810,6 +823,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 }\n                 Ok(binding) => {\n                     let imported_binding = this.import(binding, directive);\n+                    target_bindings[ns].set(Some(imported_binding));\n                     let conflict = this.try_define(parent, target, ns, imported_binding);\n                     if let Err(old_binding) = conflict {\n                         this.report_conflict(parent, target, ns, imported_binding, old_binding);\n@@ -879,8 +893,11 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             PathResult::Indeterminate | PathResult::NonModule(..) => unreachable!(),\n         };\n \n-        let (ident, result, type_ns_only) = match directive.subclass {\n-            SingleImport { source, ref result, type_ns_only, .. } => (source, result, type_ns_only),\n+        let (ident, target, source_bindings, target_bindings, type_ns_only) =\n+                match directive.subclass {\n+            SingleImport { source, target, ref source_bindings,\n+                           ref target_bindings, type_ns_only } =>\n+                (source, target, source_bindings, target_bindings, type_ns_only),\n             GlobImport { is_prelude, ref max_vis } => {\n                 if directive.module_path.len() <= 1 {\n                     // HACK(eddyb) `lint_if_path_starts_with_module` needs at least\n@@ -919,20 +936,28 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let mut all_ns_err = true;\n         self.per_ns(|this, ns| if !type_ns_only || ns == TypeNS {\n             let orig_vis = directive.vis.replace(ty::Visibility::Invisible);\n+            let orig_blacklisted_binding =\n+                mem::replace(&mut this.blacklisted_binding, target_bindings[ns].get());\n             let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);\n             let binding = this.resolve_ident_in_module(\n                 module, ident, ns, Some(&directive.parent_scope), true, directive.span\n             );\n             this.last_import_segment = orig_last_import_segment;\n+            this.blacklisted_binding = orig_blacklisted_binding;\n             directive.vis.set(orig_vis);\n \n             match binding {\n                 Ok(binding) => {\n                     // Consistency checks, analogous to `finalize_current_module_macro_resolutions`.\n-                    let initial_def = result[ns].get().map(|initial_binding| {\n+                    let initial_def = source_bindings[ns].get().map(|initial_binding| {\n                         all_ns_err = false;\n-                        this.record_use(ident, ns, initial_binding,\n-                                        directive.module_path.is_empty());\n+                        if let Some(target_binding) = target_bindings[ns].get() {\n+                            if target.name == \"_\" &&\n+                               initial_binding.is_extern_crate() && !initial_binding.is_import() {\n+                                this.record_use(ident, ns, target_binding,\n+                                                directive.module_path.is_empty());\n+                            }\n+                        }\n                         initial_binding.def_ignoring_ambiguity()\n                     });\n                     let def = binding.def_ignoring_ambiguity();\n@@ -1034,7 +1059,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let mut reexport_error = None;\n         let mut any_successful_reexport = false;\n         self.per_ns(|this, ns| {\n-            if let Ok(binding) = result[ns].get() {\n+            if let Ok(binding) = source_bindings[ns].get() {\n                 let vis = directive.vis.get();\n                 if !binding.pseudo_vis().is_at_least(vis, &*this) {\n                     reexport_error = Some((ns, binding));\n@@ -1078,7 +1103,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             let mut full_path = directive.module_path.clone();\n             full_path.push(Segment::from_ident(ident));\n             self.per_ns(|this, ns| {\n-                if let Ok(binding) = result[ns].get() {\n+                if let Ok(binding) = source_bindings[ns].get() {\n                     this.lint_if_path_starts_with_module(\n                         directive.crate_lint(),\n                         &full_path,\n@@ -1092,7 +1117,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         // Record what this import resolves to for later uses in documentation,\n         // this may resolve to either a value or a type, but for documentation\n         // purposes it's good enough to just favor one over the other.\n-        self.per_ns(|this, ns| if let Some(binding) = result[ns].get().ok() {\n+        self.per_ns(|this, ns| if let Some(binding) = source_bindings[ns].get().ok() {\n             let mut def = binding.def();\n             if let Def::Macro(def_id, _) = def {\n                 // `DefId`s from the \"built-in macro crate\" should not leak from resolve because"}, {"sha": "c7eaf4d1eeeb7af8d3f3281d2cd5414329e013e5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -2017,6 +2017,17 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn parse_ident_or_underscore(&mut self) -> PResult<'a, ast::Ident> {\n+        match self.token {\n+            token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n+                let span = self.span;\n+                self.bump();\n+                Ok(Ident::new(ident.name, span))\n+            }\n+            _ => self.parse_ident(),\n+        }\n+    }\n+\n     /// Parses qualified path.\n     /// Assumes that the leading `<` has been parsed already.\n     ///\n@@ -6434,13 +6445,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> {\n-        let id = match self.token {\n-                token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n-                    self.bump(); // `_`\n-                    ident.gensym()\n-                    },\n-                _ => self.parse_ident()?,\n-            };\n+        let id = if m.is_none() { self.parse_ident_or_underscore() } else { self.parse_ident() }?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         self.expect(&token::Eq)?;\n@@ -7725,13 +7730,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_rename(&mut self) -> PResult<'a, Option<Ident>> {\n         if self.eat_keyword(keywords::As) {\n-            match self.token {\n-                token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n-                    self.bump(); // `_`\n-                    Ok(Some(ident.gensym()))\n-                }\n-                _ => self.parse_ident().map(Some),\n-            }\n+            self.parse_ident_or_underscore().map(Some)\n         } else {\n             Ok(None)\n         }"}, {"sha": "847bf60cefb9616d3ad5557cd137d26c9d543390", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -80,6 +80,10 @@ impl Ident {\n         Ident::new(self.name.gensymed(), self.span)\n     }\n \n+    pub fn gensym_if_underscore(self) -> Ident {\n+        if self.name == keywords::Underscore.name() { self.gensym() } else { self }\n+    }\n+\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n@@ -473,7 +477,7 @@ impl Ident {\n     // We see this identifier in a normal identifier position, like variable name or a type.\n     // How was it written originally? Did it use the raw form? Let's try to guess.\n     pub fn is_raw_guess(self) -> bool {\n-        self.name != keywords::Invalid.name() &&\n+        self.name != keywords::Invalid.name() && self.name != keywords::Underscore.name() &&\n         self.is_reserved() && !self.is_path_segment_keyword()\n     }\n }"}, {"sha": "0631f2c355f7c36c2b9ccdcfbca5dba6da0a8cd5", "filename": "src/test/ui/feature-gates/feature-gate-uniform-paths.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -25,11 +25,7 @@ LL | use inline; //~ ERROR imports can only refer to extern crate names\n    |     ^^^^^^ not an extern crate passed with `--extern`\n    |\n    = help: add #![feature(uniform_paths)] to the crate attributes to enable\n-note: this import refers to the built-in attribute imported here\n-  --> $DIR/feature-gate-uniform-paths.rs:21:5\n-   |\n-LL | use inline; //~ ERROR imports can only refer to extern crate names\n-   |     ^^^^^^\n+   = note: this import refers to a built-in attribute\n \n error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n   --> $DIR/feature-gate-uniform-paths.rs:23:5\n@@ -38,11 +34,7 @@ LL | use Vec; //~ ERROR imports can only refer to extern crate names\n    |     ^^^ not an extern crate passed with `--extern`\n    |\n    = help: add #![feature(uniform_paths)] to the crate attributes to enable\n-note: this import refers to the struct imported here\n-  --> $DIR/feature-gate-uniform-paths.rs:23:5\n-   |\n-LL | use Vec; //~ ERROR imports can only refer to extern crate names\n-   |     ^^^\n+   = note: this import refers to a struct from prelude\n \n error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n   --> $DIR/feature-gate-uniform-paths.rs:25:5\n@@ -51,11 +43,7 @@ LL | use vec; //~ ERROR imports can only refer to extern crate names\n    |     ^^^ not an extern crate passed with `--extern`\n    |\n    = help: add #![feature(uniform_paths)] to the crate attributes to enable\n-note: this import refers to the macro imported here\n-  --> $DIR/feature-gate-uniform-paths.rs:25:5\n-   |\n-LL | use vec; //~ ERROR imports can only refer to extern crate names\n-   |     ^^^\n+   = note: this import refers to a macro from prelude\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b41e3503d7ab5cee76eec7c3c6c155340aeb3aeb", "filename": "src/test/ui/feature-gates/underscore_const_names_feature_gate.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -9,6 +9,5 @@\n // except according to those terms.\n \n const _: () = (); //~ ERROR is unstable\n-static _: () = (); //~ ERROR is unstable\n \n fn main() {}", "previous_filename": "src/test/ui/underscore_const_names_feature_gate.rs"}, {"sha": "192cc258cf4e163e72657cea563397b463523922", "filename": "src/test/ui/feature-gates/underscore_const_names_feature_gate.stderr", "status": "renamed", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Funderscore_const_names_feature_gate.stderr?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -6,14 +6,6 @@ LL | const _: () = (); //~ ERROR is unstable\n    |\n    = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n \n-error[E0658]: naming constants with `_` is unstable (see issue #54912)\n-  --> $DIR/underscore_const_names_feature_gate.rs:12:1\n-   |\n-LL | static _: () = (); //~ ERROR is unstable\n-   | ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(underscore_const_names)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`.", "previous_filename": "src/test/ui/underscore_const_names_feature_gate.stderr"}, {"sha": "e1a9a02f9aaae75295b1b37039c46289b556243b", "filename": "src/test/ui/parser/underscore_static.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_static.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: -Z parse-only\n+\n+static _: () = (); //~ ERROR expected identifier, found reserved identifier `_`"}, {"sha": "1b766f785a52410c88961e0c7500ba1e22530076", "filename": "src/test/ui/parser/underscore_static.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore_static.stderr?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/underscore_static.rs:3:8\n+   |\n+LL | static _: () = (); //~ ERROR expected identifier, found reserved identifier `_`\n+   |        ^ expected identifier, found reserved identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "92d741b6a26631a89a809df0bd32fb7032515db5", "filename": "src/test/ui/rfc-2166-underscore-imports/auxiliary/duplicate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Fduplicate.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -0,0 +1,14 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn duplicate(_: TokenStream, input: TokenStream) -> TokenStream {\n+    let clone = input.clone();\n+    input.into_iter().chain(clone.into_iter()).collect()\n+}"}, {"sha": "70de9167332b01cf5ff554fedf08d7092c5f0ff5", "filename": "src/test/ui/rfc-2166-underscore-imports/auxiliary/underscore-imports.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Funderscore-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Funderscore-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fauxiliary%2Funderscore-imports.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -0,0 +1,22 @@\n+#![feature(underscore_imports)]\n+\n+#[macro_export]\n+macro_rules! do_nothing {\n+    () => ()\n+}\n+\n+mod m1 {\n+    pub trait InScope1 {\n+        fn in_scope1(&self) {}\n+    }\n+    impl InScope1 for () {}\n+}\n+mod m2 {\n+    pub trait InScope2 {\n+        fn in_scope2(&self) {}\n+    }\n+    impl InScope2 for () {}\n+}\n+\n+pub use m1::InScope1 as _;\n+pub use m2::InScope2 as _;"}, {"sha": "64a8d0720d628c45afd9e0ce838ecc4c519d8979", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -9,10 +9,16 @@\n // except according to those terms.\n \n // compile-pass\n+// aux-build:underscore-imports.rs\n \n #![feature(underscore_imports)]\n #![warn(unused_imports, unused_extern_crates)]\n \n+#[macro_use]\n+extern crate underscore_imports as _;\n+\n+do_nothing!(); // OK\n+\n struct S;\n \n mod m {"}, {"sha": "e1fe5cc0783d960bc1feb171e5558c2adfb75c51", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -1,17 +1,17 @@\n warning: unused import: `m::Tr1 as _`\n-  --> $DIR/basic.rs:31:9\n+  --> $DIR/basic.rs:37:9\n    |\n LL |     use m::Tr1 as _; //~ WARN unused import\n    |         ^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/basic.rs:14:9\n+  --> $DIR/basic.rs:15:9\n    |\n LL | #![warn(unused_imports, unused_extern_crates)]\n    |         ^^^^^^^^^^^^^^\n \n warning: unused import: `S as _`\n-  --> $DIR/basic.rs:32:9\n+  --> $DIR/basic.rs:38:9\n    |\n LL |     use S as _; //~ WARN unused import\n    |         ^^^^^^"}, {"sha": "92615c4966dae0fe76b4fbdfb4ddc1e9e1a90bd6", "filename": "src/test/ui/rfc-2166-underscore-imports/duplicate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fduplicate.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+// aux-build:duplicate.rs\n+\n+#![feature(underscore_imports)]\n+\n+extern crate duplicate;\n+\n+#[duplicate::duplicate]\n+use main as _; // OK\n+\n+macro_rules! duplicate {\n+    ($item: item) => { $item $item }\n+}\n+\n+duplicate!(use std as _;); // OK\n+\n+fn main() {}"}, {"sha": "8b5bb8b326097c4e50bdb6c630c6cb779da67a95", "filename": "src/test/ui/rfc-2166-underscore-imports/intercrate.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fintercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fintercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fintercrate.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+// aux-build:underscore-imports.rs\n+\n+extern crate underscore_imports;\n+\n+use underscore_imports::*;\n+\n+fn main() {\n+    ().in_scope1();\n+    ().in_scope2();\n+}"}, {"sha": "611eb3c67ca52299ef73eec1f902cca999bfdd1e", "filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.rs?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+\n+#![feature(underscore_imports)]\n+#![deny(unused_imports)]\n+\n+mod multi_segment {\n+    use core::any; //~ ERROR unused import: `core::any`\n+}\n+\n+mod single_segment {\n+    use core; //~ ERROR unused import: `core`\n+}\n+\n+mod single_segment_underscore {\n+    use core as _; // OK\n+}\n+\n+fn main() {}"}, {"sha": "02b29b3f4fe617eadb9d098a05c6f75a874e0e3f", "filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5d35659b6d8579007f49db09aa1d35782b834/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr?ref=4bb5d35659b6d8579007f49db09aa1d35782b834", "patch": "@@ -0,0 +1,20 @@\n+error: unused import: `core::any`\n+  --> $DIR/unused-2018.rs:7:9\n+   |\n+LL |     use core::any; //~ ERROR unused import: `core::any`\n+   |         ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unused-2018.rs:4:9\n+   |\n+LL | #![deny(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: unused import: `core`\n+  --> $DIR/unused-2018.rs:11:9\n+   |\n+LL |     use core; //~ ERROR unused import: `core`\n+   |         ^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}