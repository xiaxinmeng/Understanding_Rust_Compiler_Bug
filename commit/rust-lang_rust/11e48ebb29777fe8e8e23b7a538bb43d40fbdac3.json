{"sha": "11e48ebb29777fe8e8e23b7a538bb43d40fbdac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZTQ4ZWJiMjk3NzdmZThlOGUyM2I3YTUzOGJiNDNkNDBmYmRhYzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T20:18:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T20:18:56Z"}, "message": "please the mericless tidy, oh tidy", "tree": {"sha": "deaf31af4c7e3e2bd4a723f43ae0668d82c95642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deaf31af4c7e3e2bd4a723f43ae0668d82c95642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e48ebb29777fe8e8e23b7a538bb43d40fbdac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e48ebb29777fe8e8e23b7a538bb43d40fbdac3", "html_url": "https://github.com/rust-lang/rust/commit/11e48ebb29777fe8e8e23b7a538bb43d40fbdac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e48ebb29777fe8e8e23b7a538bb43d40fbdac3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f4efc006c24bfb427e9dd70853fb3e41584aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f4efc006c24bfb427e9dd70853fb3e41584aa9", "html_url": "https://github.com/rust-lang/rust/commit/c8f4efc006c24bfb427e9dd70853fb3e41584aa9"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "5056005bcd773ecddcbcff42f9d3eb288f82cd11", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e48ebb29777fe8e8e23b7a538bb43d40fbdac3/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e48ebb29777fe8e8e23b7a538bb43d40fbdac3/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=11e48ebb29777fe8e8e23b7a538bb43d40fbdac3", "patch": "@@ -207,7 +207,7 @@\n //!    tricky when interior mutability is involved. For example, imagine `RefCell`\n //!    would have a method `fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T>`.\n //!    Then we could do the following:\n-//!    ```ignore\n+//!    ```compile_fail\n //!    fn exploit_ref_cell<T>(rc: Pin<&mut RefCell<T>) {\n //!        { let p = rc.as_mut().get_pin_mut(); } // here we get pinned access to the `T`\n //!        let rc_shr: &RefCell<T> = rc.into_ref().get_ref();"}]}