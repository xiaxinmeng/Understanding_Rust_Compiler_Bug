{"sha": "8dca7be1dfac6193832575495e3f6483634189f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkY2E3YmUxZGZhYzYxOTM4MzI1NzU0OTVlM2Y2NDgzNjM0MTg5ZjE=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-28T19:24:30Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:41:58Z"}, "message": "A little more cosmetic cleanup", "tree": {"sha": "3f45fc5ff919d4adfb87fd3f7ab58f152b1d7f8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f45fc5ff919d4adfb87fd3f7ab58f152b1d7f8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dca7be1dfac6193832575495e3f6483634189f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dca7be1dfac6193832575495e3f6483634189f1", "html_url": "https://github.com/rust-lang/rust/commit/8dca7be1dfac6193832575495e3f6483634189f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dca7be1dfac6193832575495e3f6483634189f1/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6acb96c9cb1d0fad0f5171d6417eb048f6f23b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6acb96c9cb1d0fad0f5171d6417eb048f6f23b4", "html_url": "https://github.com/rust-lang/rust/commit/d6acb96c9cb1d0fad0f5171d6417eb048f6f23b4"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "6b347287ae42cc8ba2d5a833381f714122b37083", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8dca7be1dfac6193832575495e3f6483634189f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dca7be1dfac6193832575495e3f6483634189f1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=8dca7be1dfac6193832575495e3f6483634189f1", "patch": "@@ -230,24 +230,6 @@ fn generic_fields_of(cx: @CrateContext, r: &Repr, sizing: bool)\n     }\n }\n \n-fn load_discr(bcx: block, scrutinee: ValueRef, min: int, max: int)\n-    -> ValueRef {\n-    let ptr = GEPi(bcx, scrutinee, [0, 0]);\n-    if max + 1 == min {\n-        // i.e., if the range is everything.  The lo==hi case would be\n-        // rejected by the LLVM verifier (it would mean either an\n-        // empty set, which is impossible, or the entire range of the\n-        // type, which is pointless).\n-        Load(bcx, ptr)\n-    } else {\n-        // llvm::ConstantRange can deal with ranges that wrap around,\n-        // so an overflow on (max + 1) is fine.\n-        LoadRangeAssert(bcx, ptr, min as c_ulonglong,\n-                        (max + 1) as c_ulonglong,\n-                        /* signed: */ True)\n-    }\n-}\n-\n /**\n  * Obtain as much of a \"discriminant\" as this representation has.\n  * This should ideally be less tightly tied to `_match`.\n@@ -282,6 +264,24 @@ pub fn trans_cast_to_int(bcx: block, r: &Repr, scrutinee: ValueRef)\n     }\n }\n \n+fn load_discr(bcx: block, scrutinee: ValueRef, min: int, max: int)\n+    -> ValueRef {\n+    let ptr = GEPi(bcx, scrutinee, [0, 0]);\n+    if max + 1 == min {\n+        // i.e., if the range is everything.  The lo==hi case would be\n+        // rejected by the LLVM verifier (it would mean either an\n+        // empty set, which is impossible, or the entire range of the\n+        // type, which is pointless).\n+        Load(bcx, ptr)\n+    } else {\n+        // llvm::ConstantRange can deal with ranges that wrap around,\n+        // so an overflow on (max + 1) is fine.\n+        LoadRangeAssert(bcx, ptr, min as c_ulonglong,\n+                        (max + 1) as c_ulonglong,\n+                        /* signed: */ True)\n+    }\n+}\n+\n /**\n  * Yield information about how to dispatch a case of the\n  * discriminant-like value returned by `trans_switch`.\n@@ -433,10 +433,10 @@ pub fn trans_const(ccx: @CrateContext, r: &Repr, discr: int,\n     }\n }\n \n-fn padding(size: u64) -> ValueRef {\n-    C_undef(T_array(T_i8(), size /*bad*/as uint))\n-}\n-\n+/**\n+ * Building structs is a little complicated, because we might need to\n+ * insert padding if a field's value is less aligned than its type.\n+ */\n fn build_const_struct(ccx: @CrateContext, st: &Struct, vals: &[ValueRef])\n     -> ~[ValueRef] {\n     assert vals.len() == st.fields.len();\n@@ -457,12 +457,18 @@ fn build_const_struct(ccx: @CrateContext, st: &Struct, vals: &[ValueRef])\n         }\n         assert !is_undef(vals[i]);\n         // If that assert fails, could change it to wrap in a struct?\n+        // (See `const_struct_field` for why real fields must not be undef.)\n         cfields.push(vals[i]);\n     }\n \n     return cfields;\n }\n \n+fn padding(size: u64) -> ValueRef {\n+    C_undef(T_array(T_i8(), size /*bad*/as uint))\n+}\n+\n+// XXX this utility routine should be somewhere more general\n #[always_inline]\n fn roundup(x: u64, a: u64) -> u64 { ((x + (a - 1)) / a) * a }\n \n@@ -492,6 +498,7 @@ pub fn const_get_element(ccx: @CrateContext, r: &Repr, val: ValueRef,\n     }\n }\n \n+/// Extract field of struct-like const, skipping our alignment padding.\n fn const_struct_field(ccx: @CrateContext, val: ValueRef, ix: uint)\n     -> ValueRef {\n     // Get the ix-th non-undef element of the struct."}]}