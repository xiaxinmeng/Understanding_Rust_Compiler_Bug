{"sha": "0a7d2970e5947e7a2940a32e6975817a389b0708", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhN2QyOTcwZTU5NDdlN2EyOTQwYTMyZTY5NzU4MTdhMzg5YjA3MDg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-07T04:13:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-10T01:50:21Z"}, "message": "Eliminate `rust_input`.\n\nIt has a single call site and having it as a separate (higher-order!)\nfunction makes the code harder to read.", "tree": {"sha": "b8abcc1e2afa21ee4af39ee9739da11cc82da19a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8abcc1e2afa21ee4af39ee9739da11cc82da19a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a7d2970e5947e7a2940a32e6975817a389b0708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a7d2970e5947e7a2940a32e6975817a389b0708", "html_url": "https://github.com/rust-lang/rust/commit/0a7d2970e5947e7a2940a32e6975817a389b0708", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a7d2970e5947e7a2940a32e6975817a389b0708/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e59b08e62ea691916d2f063cac5aab4634128022", "url": "https://api.github.com/repos/rust-lang/rust/commits/e59b08e62ea691916d2f063cac5aab4634128022", "html_url": "https://github.com/rust-lang/rust/commit/e59b08e62ea691916d2f063cac5aab4634128022"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "b02880ab4d3de15dee597743d3cd33a78641caa6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0a7d2970e5947e7a2940a32e6975817a389b0708/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a7d2970e5947e7a2940a32e6975817a389b0708/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=0a7d2970e5947e7a2940a32e6975817a389b0708", "patch": "@@ -471,7 +471,29 @@ fn main_options(options: config::Options) -> i32 {\n     // but we can't crates the Handler ahead of time because it's not Send\n     let diag_opts = (options.error_format, options.edition, options.debugging_options.clone());\n     let show_coverage = options.show_coverage;\n-    rust_input(options, move |out| {\n+\n+    // First, parse the crate and extract all relevant information.\n+    info!(\"starting to run rustc\");\n+\n+    // Interpret the input file as a rust source file, passing it through the\n+    // compiler all the way through the analysis passes. The rustdoc output is\n+    // then generated from the cleaned AST of the crate. This runs all the\n+    // plug/cleaning passes.\n+    let result = rustc_driver::catch_fatal_errors(move || {\n+        let crate_name = options.crate_name.clone();\n+        let crate_version = options.crate_version.clone();\n+        let (mut krate, renderinfo, renderopts) = core::run_core(options);\n+\n+        info!(\"finished with rustc\");\n+\n+        if let Some(name) = crate_name {\n+            krate.name = name\n+        }\n+\n+        krate.version = crate_version;\n+\n+        let out = Output { krate, renderinfo, renderopts };\n+\n         if show_coverage {\n             // if we ran coverage, bail early, we don't need to also generate docs at this point\n             // (also we didn't load in any of the useful passes)\n@@ -491,36 +513,6 @@ fn main_options(options: config::Options) -> i32 {\n                 rustc_driver::EXIT_FAILURE\n             }\n         }\n-    })\n-}\n-\n-/// Interprets the input file as a rust source file, passing it through the\n-/// compiler all the way through the analysis passes. The rustdoc output is then\n-/// generated from the cleaned AST of the crate.\n-///\n-/// This form of input will run all of the plug/cleaning passes\n-fn rust_input<R, F>(options: config::Options, f: F) -> R\n-where\n-    R: 'static + Send,\n-    F: 'static + Send + FnOnce(Output) -> R,\n-{\n-    // First, parse the crate and extract all relevant information.\n-    info!(\"starting to run rustc\");\n-\n-    let result = rustc_driver::catch_fatal_errors(move || {\n-        let crate_name = options.crate_name.clone();\n-        let crate_version = options.crate_version.clone();\n-        let (mut krate, renderinfo, renderopts) = core::run_core(options);\n-\n-        info!(\"finished with rustc\");\n-\n-        if let Some(name) = crate_name {\n-            krate.name = name\n-        }\n-\n-        krate.version = crate_version;\n-\n-        f(Output { krate, renderinfo, renderopts })\n     });\n \n     match result {"}]}