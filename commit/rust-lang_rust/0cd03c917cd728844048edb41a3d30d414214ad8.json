{"sha": "0cd03c917cd728844048edb41a3d30d414214ad8", "node_id": "C_kwDOAAsO6NoAKDBjZDAzYzkxN2NkNzI4ODQ0MDQ4ZWRiNDFhM2QzMGQ0MTQyMTRhZDg", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-20T03:12:03Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-20T03:12:18Z"}, "message": "Extract ImplSubject information", "tree": {"sha": "6b693f6e98878f73e01df5ad8b8ae7cfc0784579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b693f6e98878f73e01df5ad8b8ae7cfc0784579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd03c917cd728844048edb41a3d30d414214ad8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmI2m5sACgkQgTGiTgx5\n769R4xAArFYZCze/4RgPhEZzEJ2mVeUyvXgzvsjkrwSpzv+vITND5ZsEwRmGrhR7\nxubll5gnofPfdS8C+Ae3eggNS2Hca8jWLfJZEKYG/WULMjpN6qBphHJBsbN9Zrld\ng5YYOewJO7Z5SNQOPKWmtrydRPwPoaCDw3DnLr2qiuWt5+I0+de/hnoF+NWdc9pS\nDjwp2vN+xrykPLwJc72+kMQrK7iMBaNWt6AdEdBe0cGcVgfV+Iol+ysS5MvmUq40\n8qaPUmJK4jEaUQLj0vr7Wezovi+9eXXqKwsTAs4zLmUri736Bqwkr4uuFiA9NeJY\n3C5nnCwq9qwrqGPcgRiMEF2ghDJ+uQ1V3yvcTcrVXueqEP1OVDHEo3Ha7qAEi6lA\n93spxhFj9+P/y8IwV3PlGeEPS+9XWQ6Ud7ODpQ08qlawHKaq5eM+mnUMG5lxh3SO\nbzQw21wDUKXRzR78f5b6AYB30j3DXHKuXPjZDnBkz0UhpIlalDoHBkJJSu9bVhIf\n6L+VNtaVZCx5v8kcV0b/8r8ljPN0w8hO2ZmJT1vJA/HgbC/87hvzE+Px4U5OFI6w\nTYaPzcYsloOexfC/1hkIIJat3rDbdvyTqK6dlI9KxdavGwNxqUtkwJ/pSUOp9I1Q\nMkl3c2gscNukdR0DeXsHliNR9SWqkzVFrxMOgIZWPTJ/cxmxSUI=\n=r4M+\n-----END PGP SIGNATURE-----", "payload": "tree 6b693f6e98878f73e01df5ad8b8ae7cfc0784579\nparent 91b52148ebc16f41632930344bdbe4e093f1970e\nauthor Santiago Pastorino <spastorino@gmail.com> 1647745923 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1647745938 -0300\n\nExtract ImplSubject information\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd03c917cd728844048edb41a3d30d414214ad8", "html_url": "https://github.com/rust-lang/rust/commit/0cd03c917cd728844048edb41a3d30d414214ad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd03c917cd728844048edb41a3d30d414214ad8/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b52148ebc16f41632930344bdbe4e093f1970e", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b52148ebc16f41632930344bdbe4e093f1970e", "html_url": "https://github.com/rust-lang/rust/commit/91b52148ebc16f41632930344bdbe4e093f1970e"}], "stats": {"total": 91, "additions": 52, "deletions": 39}, "files": [{"sha": "4bc0d3a4d860992caf3ea6e8d50ca060f2319db1", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cd03c917cd728844048edb41a3d30d414214ad8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd03c917cd728844048edb41a3d30d414214ad8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=0cd03c917cd728844048edb41a3d30d414214ad8", "patch": "@@ -7,10 +7,10 @@ pub mod nested_filter;\n pub mod place;\n \n use crate::ty::query::Providers;\n-use crate::ty::TyCtxt;\n+use crate::ty::{ImplSubject, TyCtxt};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::*;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_span::DUMMY_SP;\n@@ -54,6 +54,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn parent_module(self, id: HirId) -> LocalDefId {\n         self.parent_module_from_def_id(id.owner)\n     }\n+\n+    pub fn impl_header(self, def_id: DefId) -> ImplSubject<'tcx> {\n+        self.impl_trait_ref(def_id)\n+            .map(ImplSubject::Trait)\n+            .unwrap_or_else(|| ImplSubject::Inherent(self.type_of(def_id)))\n+    }\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "91d2d64c52e4a10f3346e4bf42e7b3c4119af3d1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cd03c917cd728844048edb41a3d30d414214ad8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd03c917cd728844048edb41a3d30d414214ad8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0cd03c917cd728844048edb41a3d30d414214ad8", "patch": "@@ -172,6 +172,12 @@ pub struct ImplHeader<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n }\n \n+#[derive(Debug)]\n+pub enum ImplSubject<'tcx> {\n+    Trait(TraitRef<'tcx>),\n+    Inherent(Ty<'tcx>),\n+}\n+\n #[derive(\n     Copy,\n     Clone,"}, {"sha": "a0fbf94c01d4fafdb574d56f5af5bb6242d2bc61", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0cd03c917cd728844048edb41a3d30d414214ad8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd03c917cd728844048edb41a3d30d414214ad8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=0cd03c917cd728844048edb41a3d30d414214ad8", "patch": "@@ -24,7 +24,7 @@ use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{self, TreatParams};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ImplSubject, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use std::fmt::Debug;\n@@ -307,46 +307,47 @@ fn negative_impl<'cx, 'tcx>(\n         // create a parameter environment corresponding to a (placeholder) instantiation of impl1\n         let impl1_env = tcx.param_env(impl1_def_id);\n \n-        if let Some(impl1_trait_ref) = tcx.impl_trait_ref(impl1_def_id) {\n-            // Normalize the trait reference. The WF rules ought to ensure\n-            // that this always succeeds.\n-            let impl1_trait_ref = match traits::fully_normalize(\n-                &infcx,\n-                FulfillmentContext::new(),\n-                ObligationCause::dummy(),\n-                impl1_env,\n-                impl1_trait_ref,\n-            ) {\n-                Ok(impl1_trait_ref) => impl1_trait_ref,\n-                Err(err) => {\n-                    bug!(\"failed to fully normalize {:?}: {:?}\", impl1_trait_ref, err);\n-                }\n-            };\n-\n-            // Attempt to prove that impl2 applies, given all of the above.\n-            let selcx = &mut SelectionContext::new(&infcx);\n-            let impl2_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl2_def_id);\n-            let (impl2_trait_ref, obligations) =\n-                impl_trait_ref_and_oblig(selcx, impl1_env, impl2_def_id, impl2_substs);\n-\n-            !obligations_satisfiable(\n-                &infcx,\n-                impl1_env,\n-                impl1_def_id,\n-                impl1_trait_ref,\n-                impl2_trait_ref,\n-                obligations,\n-            )\n-        } else {\n-            let ty1 = tcx.type_of(impl1_def_id);\n-            let ty2 = tcx.type_of(impl2_def_id);\n-\n-            !obligations_satisfiable(&infcx, impl1_env, impl1_def_id, ty1, ty2, iter::empty())\n+        match tcx.impl_header(impl1_def_id) {\n+            ImplSubject::Trait(impl1_trait_ref) => {\n+                // Normalize the trait reference. The WF rules ought to ensure\n+                // that this always succeeds.\n+                let impl1_trait_ref = match traits::fully_normalize(\n+                    &infcx,\n+                    FulfillmentContext::new(),\n+                    ObligationCause::dummy(),\n+                    impl1_env,\n+                    impl1_trait_ref,\n+                ) {\n+                    Ok(impl1_trait_ref) => impl1_trait_ref,\n+                    Err(err) => {\n+                        bug!(\"failed to fully normalize {:?}: {:?}\", impl1_trait_ref, err);\n+                    }\n+                };\n+\n+                // Attempt to prove that impl2 applies, given all of the above.\n+                let selcx = &mut SelectionContext::new(&infcx);\n+                let impl2_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl2_def_id);\n+                let (impl2_trait_ref, obligations) =\n+                    impl_trait_ref_and_oblig(selcx, impl1_env, impl2_def_id, impl2_substs);\n+\n+                !equate(\n+                    &infcx,\n+                    impl1_env,\n+                    impl1_def_id,\n+                    impl1_trait_ref,\n+                    impl2_trait_ref,\n+                    obligations,\n+                )\n+            }\n+            ImplSubject::Inherent(ty1) => {\n+                let ty2 = tcx.type_of(impl2_def_id);\n+                !equate(&infcx, impl1_env, impl1_def_id, ty1, ty2, iter::empty())\n+            }\n         }\n     })\n }\n \n-fn obligations_satisfiable<'cx, 'tcx, T: Debug + ToTrace<'tcx>>(\n+fn equate<'cx, 'tcx, T: Debug + ToTrace<'tcx>>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     impl1_env: ty::ParamEnv<'tcx>,\n     impl1_def_id: DefId,"}]}