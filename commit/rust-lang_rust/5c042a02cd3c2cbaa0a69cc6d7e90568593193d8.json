{"sha": "5c042a02cd3c2cbaa0a69cc6d7e90568593193d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMDQyYTAyY2QzYzJjYmFhMGE2OWNjNmQ3ZTkwNTY4NTkzMTkzZDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T05:11:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:11:12Z"}, "message": "Remove vecs from std::bitv", "tree": {"sha": "cdccc93acfe7969708a08cc8f392f353a826061f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdccc93acfe7969708a08cc8f392f353a826061f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8", "html_url": "https://github.com/rust-lang/rust/commit/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72773e6d4dedca633acbd5807d6a06a9e361c9c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72773e6d4dedca633acbd5807d6a06a9e361c9c4", "html_url": "https://github.com/rust-lang/rust/commit/72773e6d4dedca633acbd5807d6a06a9e361c9c4"}], "stats": {"total": 190, "additions": 85, "deletions": 105}, "files": [{"sha": "759c9b24d48752f24b12cd7c311a99b67e97fc2f", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=5c042a02cd3c2cbaa0a69cc6d7e90568593193d8", "patch": "@@ -14,9 +14,9 @@ export difference;\n export set;\n export is_true;\n export is_false;\n-export to_vec;\n+export to_ivec;\n export to_str;\n-export eq_vec;\n+export eq_ivec;\n \n \n // FIXME: With recursive object types, we could implement binary methods like\n@@ -145,39 +145,19 @@ fn is_false(v: &t) -> bool {\n \n fn init_to_vec(v: t, i: uint) -> uint { ret if get(v, i) { 1u } else { 0u }; }\n \n-fn to_vec(v: &t) -> vec[uint] {\n-    let sub = bind init_to_vec(v, _);\n-    ret vec::init_fn[uint](sub, v.nbits);\n-}\n-\n fn to_ivec(v: &t) -> [uint] {\n     let sub = bind init_to_vec(v, _);\n     ret ivec::init_fn[uint](sub, v.nbits);\n }\n \n fn to_str(v: &t) -> str {\n     let rs = \"\";\n-    for i: uint  in bitv::to_vec(v) {\n+    for i: uint  in to_ivec(v) {\n         if i == 1u { rs += \"1\"; } else { rs += \"0\"; }\n     }\n     ret rs;\n }\n \n-\n-// FIXME: can we just use structural equality on to_vec?\n-fn eq_vec(v0: &t, v1: &vec[uint]) -> bool {\n-    assert (v0.nbits == vec::len[uint](v1));\n-    let len = v0.nbits;\n-    let i = 0u;\n-    while i < len {\n-        let w0 = get(v0, i);\n-        let w1 = v1.(i);\n-        if !w0 && w1 != 0u || w0 && w1 == 0u { ret false; }\n-        i = i + 1u;\n-    }\n-    ret true;\n-}\n-\n fn eq_ivec(v0: &t, v1: &[uint]) -> bool {\n     assert (v0.nbits == ivec::len[uint](v1));\n     let len = v0.nbits;"}, {"sha": "0e0aaeaaf894eedc97018cff5e44de309895149b", "filename": "src/test/stdtest/bitv.rs", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8/src%2Ftest%2Fstdtest%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8/src%2Ftest%2Fstdtest%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fbitv.rs?ref=5c042a02cd3c2cbaa0a69cc6d7e90568593193d8", "patch": "@@ -1,26 +1,26 @@\n \n use std;\n-import std::vec;\n+import std::ivec;\n import std::bitv;\n \n #[test]\n fn test_0_elements() {\n     let act;\n     let exp;\n     act = bitv::create(0u, false);\n-    exp = vec::init_elt[uint](0u, 0u);\n+    exp = ivec::init_elt[uint](0u, 0u);\n     // FIXME: why can't I write vec[uint]()?\n \n-    assert (bitv::eq_vec(act, exp));\n+    assert (bitv::eq_ivec(act, exp));\n }\n \n #[test]\n fn test_1_element() {\n     let act;\n     act = bitv::create(1u, false);\n-    assert (bitv::eq_vec(act, [0u]));\n+    assert (bitv::eq_ivec(act, ~[0u]));\n     act = bitv::create(1u, true);\n-    assert (bitv::eq_vec(act, [1u]));\n+    assert (bitv::eq_ivec(act, ~[1u]));\n }\n \n #[test]\n@@ -29,11 +29,11 @@ fn test_10_elements() {\n     // all 0\n \n     act = bitv::create(10u, false);\n-    assert (bitv::eq_vec(act, [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act, ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n     // all 1\n \n     act = bitv::create(10u, true);\n-    assert (bitv::eq_vec(act, [1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act, ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(10u, false);\n@@ -42,7 +42,7 @@ fn test_10_elements() {\n     bitv::set(act, 2u, true);\n     bitv::set(act, 3u, true);\n     bitv::set(act, 4u, true);\n-    assert (bitv::eq_vec(act, [1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act, ~[1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u]));\n     // mixed\n \n     act = bitv::create(10u, false);\n@@ -51,15 +51,15 @@ fn test_10_elements() {\n     bitv::set(act, 7u, true);\n     bitv::set(act, 8u, true);\n     bitv::set(act, 9u, true);\n-    assert (bitv::eq_vec(act, [0u, 0u, 0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act, ~[0u, 0u, 0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(10u, false);\n     bitv::set(act, 0u, true);\n     bitv::set(act, 3u, true);\n     bitv::set(act, 6u, true);\n     bitv::set(act, 9u, true);\n-    assert (bitv::eq_vec(act, [1u, 0u, 0u, 1u, 0u, 0u, 1u, 0u, 0u, 1u]));\n+    assert (bitv::eq_ivec(act, ~[1u, 0u, 0u, 1u, 0u, 0u, 1u, 0u, 0u, 1u]));\n }\n \n #[test]\n@@ -68,17 +68,17 @@ fn test_31_elements() {\n     // all 0\n \n     act = bitv::create(31u, false);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u]));\n     // all 1\n \n     act = bitv::create(31u, true);\n-    assert (bitv::eq_vec(act,\n-                         [1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(31u, false);\n@@ -90,10 +90,10 @@ fn test_31_elements() {\n     bitv::set(act, 5u, true);\n     bitv::set(act, 6u, true);\n     bitv::set(act, 7u, true);\n-    assert (bitv::eq_vec(act,\n-                         [1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u]));\n     // mixed\n \n     act = bitv::create(31u, false);\n@@ -105,10 +105,10 @@ fn test_31_elements() {\n     bitv::set(act, 21u, true);\n     bitv::set(act, 22u, true);\n     bitv::set(act, 23u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u]));\n     // mixed\n \n     act = bitv::create(31u, false);\n@@ -119,20 +119,20 @@ fn test_31_elements() {\n     bitv::set(act, 28u, true);\n     bitv::set(act, 29u, true);\n     bitv::set(act, 30u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(31u, false);\n     bitv::set(act, 3u, true);\n     bitv::set(act, 17u, true);\n     bitv::set(act, 30u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 1u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 1u]));\n }\n \n #[test]\n@@ -141,17 +141,17 @@ fn test_32_elements() {\n     // all 0\n \n     act = bitv::create(32u, false);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u]));\n     // all 1\n \n     act = bitv::create(32u, true);\n-    assert (bitv::eq_vec(act,\n-                         [1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(32u, false);\n@@ -163,10 +163,10 @@ fn test_32_elements() {\n     bitv::set(act, 5u, true);\n     bitv::set(act, 6u, true);\n     bitv::set(act, 7u, true);\n-    assert (bitv::eq_vec(act,\n-                         [1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u]));\n     // mixed\n \n     act = bitv::create(32u, false);\n@@ -178,10 +178,10 @@ fn test_32_elements() {\n     bitv::set(act, 21u, true);\n     bitv::set(act, 22u, true);\n     bitv::set(act, 23u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u]));\n     // mixed\n \n     act = bitv::create(32u, false);\n@@ -193,21 +193,21 @@ fn test_32_elements() {\n     bitv::set(act, 29u, true);\n     bitv::set(act, 30u, true);\n     bitv::set(act, 31u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(32u, false);\n     bitv::set(act, 3u, true);\n     bitv::set(act, 17u, true);\n     bitv::set(act, 30u, true);\n     bitv::set(act, 31u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 1u, 1u]));\n }\n \n #[test]\n@@ -216,17 +216,17 @@ fn test_33_elements() {\n     // all 0\n \n     act = bitv::create(33u, false);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n     // all 1\n \n     act = bitv::create(33u, true);\n-    assert (bitv::eq_vec(act,\n-                         [1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u, 1u, 1u]));\n     // mixed\n \n     act = bitv::create(33u, false);\n@@ -238,10 +238,10 @@ fn test_33_elements() {\n     bitv::set(act, 5u, true);\n     bitv::set(act, 6u, true);\n     bitv::set(act, 7u, true);\n-    assert (bitv::eq_vec(act,\n-                         [1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n     // mixed\n \n     act = bitv::create(33u, false);\n@@ -253,10 +253,10 @@ fn test_33_elements() {\n     bitv::set(act, 21u, true);\n     bitv::set(act, 22u, true);\n     bitv::set(act, 23u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 1u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u]));\n     // mixed\n \n     act = bitv::create(33u, false);\n@@ -268,10 +268,10 @@ fn test_33_elements() {\n     bitv::set(act, 29u, true);\n     bitv::set(act, 30u, true);\n     bitv::set(act, 31u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n-                          1u, 1u, 1u, 1u, 1u, 1u, 0u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1u, 1u,\n+                           1u, 1u, 1u, 1u, 1u, 1u, 0u]));\n     // mixed\n \n     act = bitv::create(33u, false);\n@@ -280,9 +280,9 @@ fn test_33_elements() {\n     bitv::set(act, 30u, true);\n     bitv::set(act, 31u, true);\n     bitv::set(act, 32u, true);\n-    assert (bitv::eq_vec(act,\n-                         [0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n-                          0u, 0u, 0u, 0u, 1u, 1u, 1u]));\n+    assert (bitv::eq_ivec(act,\n+                         ~[0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u,\n+                           0u, 0u, 0u, 0u, 1u, 1u, 1u]));\n }\n "}]}