{"sha": "b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZGQwMWViMmE2NDFkNTFmMGIzMTM1NjcxYTBlNjc0ZDE4ZjI3Zjc=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-24T19:17:08Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-24T21:21:26Z"}, "message": "Add a bunch more unsafe blocks to prepare for the new semantics of unsafe/closure interactions.", "tree": {"sha": "73bef71b5d0dcfc7951cab54fdf68ef91753b3cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bef71b5d0dcfc7951cab54fdf68ef91753b3cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "html_url": "https://github.com/rust-lang/rust/commit/b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c96a43cf196a54f3494da24c32e1f50a0f58ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c96a43cf196a54f3494da24c32e1f50a0f58ad7", "html_url": "https://github.com/rust-lang/rust/commit/2c96a43cf196a54f3494da24c32e1f50a0f58ad7"}], "stats": {"total": 62, "additions": 32, "deletions": 30}, "files": [{"sha": "fb08a971385ccb3f74941c87c862e0dc7bbd1cdc", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "patch": "@@ -2089,7 +2089,7 @@ fn test_child_doesnt_ref_parent() {\n fn test_tls_multitask() unsafe {\n     fn my_key(+_x: @~str) { }\n     local_data_set(my_key, @~\"parent data\");\n-    do task::spawn {\n+    do task::spawn unsafe {\n         assert local_data_get(my_key) == none; // TLS shouldn't carry over.\n         local_data_set(my_key, @~\"child data\");\n         assert *(local_data_get(my_key).get()) == ~\"child data\";\n@@ -2155,19 +2155,19 @@ fn test_tls_multiple_types() unsafe {\n     fn str_key(+_x: @~str) { }\n     fn box_key(+_x: @@()) { }\n     fn int_key(+_x: @int) { }\n-    do task::spawn {\n+    do task::spawn unsafe {\n         local_data_set(str_key, @~\"string data\");\n         local_data_set(box_key, @@());\n         local_data_set(int_key, @42);\n     }\n }\n \n #[test]\n-fn test_tls_overwrite_multiple_types() unsafe {\n+fn test_tls_overwrite_multiple_types() {\n     fn str_key(+_x: @~str) { }\n     fn box_key(+_x: @@()) { }\n     fn int_key(+_x: @int) { }\n-    do task::spawn {\n+    do task::spawn unsafe {\n         local_data_set(str_key, @~\"string data\");\n         local_data_set(int_key, @42);\n         // This could cause a segfault if overwriting-destruction is done with\n@@ -2185,7 +2185,7 @@ fn test_tls_cleanup_on_failure() unsafe {\n     fn int_key(+_x: @int) { }\n     local_data_set(str_key, @~\"parent data\");\n     local_data_set(box_key, @@());\n-    do task::spawn { // spawn_linked\n+    do task::spawn unsafe { // spawn_linked\n         local_data_set(str_key, @~\"string data\");\n         local_data_set(box_key, @@());\n         local_data_set(int_key, @42);"}, {"sha": "57cc8bd0357fcc90049c4df20dced63cb41240fa", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "patch": "@@ -85,17 +85,17 @@ enum ip_get_addr_err {\n  * object in the case of failure\n  */\n fn get_addr(++node: ~str, iotask: iotask)\n-        -> result::result<~[ip_addr], ip_get_addr_err> unsafe {\n+        -> result::result<~[ip_addr], ip_get_addr_err> {\n     do core::comm::listen |output_ch| {\n-        do str::as_buf(node) |node_ptr, len| {\n+        do str::as_buf(node) |node_ptr, len| unsafe {\n             log(debug, fmt!(\"slice len %?\", len));\n             let handle = create_uv_getaddrinfo_t();\n             let handle_ptr = ptr::addr_of(handle);\n             let handle_data: get_addr_data = {\n                 output_ch: output_ch\n             };\n             let handle_data_ptr = ptr::addr_of(handle_data);\n-            do interact(iotask) |loop_ptr| {\n+            do interact(iotask) |loop_ptr| unsafe {\n                 let result = uv_getaddrinfo(\n                     loop_ptr,\n                     handle_ptr,"}, {"sha": "170823eb79dcc245235879ceffb834affe9420aa", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "patch": "@@ -145,7 +145,7 @@ fn connect(-input_ip: ip::ip_addr, port: uint,\n     // we can send into the interact cb to be handled in libuv..\n     log(debug, fmt!(\"stream_handle_ptr outside interact %?\",\n         stream_handle_ptr));\n-    do iotask::interact(iotask) |loop_ptr| {\n+    do iotask::interact(iotask) |loop_ptr| unsafe {\n         log(debug, ~\"in interact cb for tcp client connect..\");\n         log(debug, fmt!(\"stream_handle_ptr in interact %?\",\n             stream_handle_ptr));\n@@ -571,7 +571,7 @@ fn listen(-host_ip: ip::ip_addr, port: uint, backlog: uint,\n     -> result::result<(), tcp_listen_err_data> unsafe {\n     do listen_common(host_ip, port, backlog, iotask, on_establish_cb)\n         // on_connect_cb\n-        |handle| {\n+        |handle| unsafe {\n             let server_data_ptr = uv::ll::get_data_for_uv_handle(handle)\n                 as *tcp_listen_fc_data;\n             let new_conn = new_tcp_conn(handle);\n@@ -608,7 +608,7 @@ fn listen_common(-host_ip: ip::ip_addr, port: uint, backlog: uint,\n         // tcp::connect (because the iotask::interact cb isn't\n         // nested within a core::comm::listen block)\n         let loc_ip = copy(host_ip);\n-        do iotask::interact(iotask) |loop_ptr| {\n+        do iotask::interact(iotask) |loop_ptr| unsafe {\n             match uv::ll::tcp_init(loop_ptr, server_stream_ptr) {\n               0i32 => {\n                 uv::ll::set_data_for_uv_handle(\n@@ -660,7 +660,7 @@ fn listen_common(-host_ip: ip::ip_addr, port: uint, backlog: uint,\n     };\n     match setup_result {\n       some(err_data) => {\n-        do iotask::interact(iotask) |loop_ptr| {\n+        do iotask::interact(iotask) |loop_ptr| unsafe {\n             log(debug, fmt!(\"tcp::listen post-kill recv hl interact %?\",\n                             loop_ptr));\n             (*server_data_ptr).active = false;\n@@ -687,7 +687,7 @@ fn listen_common(-host_ip: ip::ip_addr, port: uint, backlog: uint,\n       none => {\n         on_establish_cb(kill_ch);\n         let kill_result = core::comm::recv(kill_po);\n-        do iotask::interact(iotask) |loop_ptr| {\n+        do iotask::interact(iotask) |loop_ptr| unsafe {\n             log(debug, fmt!(\"tcp::listen post-kill recv hl interact %?\",\n                             loop_ptr));\n             (*server_data_ptr).active = false;\n@@ -844,7 +844,7 @@ fn tear_down_socket_data(socket_data: @tcp_socket_data) unsafe {\n     };\n     let close_data_ptr = ptr::addr_of(close_data);\n     let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n-    do iotask::interact((*socket_data).iotask) |loop_ptr| {\n+    do iotask::interact((*socket_data).iotask) |loop_ptr| unsafe {\n         log(debug, fmt!(\"interact dtor for tcp_socket stream %? loop %?\",\n             stream_handle_ptr, loop_ptr));\n         uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n@@ -902,7 +902,7 @@ fn read_stop_common_impl(socket_data: *tcp_socket_data) ->\n     let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n     let stop_po = core::comm::port::<option<tcp_err_data>>();\n     let stop_ch = core::comm::chan(stop_po);\n-    do iotask::interact((*socket_data).iotask) |loop_ptr| {\n+    do iotask::interact((*socket_data).iotask) |loop_ptr| unsafe {\n         log(debug, ~\"in interact cb for tcp::read_stop\");\n         match uv::ll::read_stop(stream_handle_ptr as *uv::ll::uv_stream_t) {\n           0i32 => {\n@@ -930,7 +930,7 @@ fn read_start_common_impl(socket_data: *tcp_socket_data)\n     let start_po = core::comm::port::<option<uv::ll::uv_err_data>>();\n     let start_ch = core::comm::chan(start_po);\n     log(debug, ~\"in tcp::read_start before interact loop\");\n-    do iotask::interact((*socket_data).iotask) |loop_ptr| {\n+    do iotask::interact((*socket_data).iotask) |loop_ptr| unsafe {\n         log(debug, fmt!(\"in tcp::read_start interact cb %?\", loop_ptr));\n         match uv::ll::read_start(stream_handle_ptr as *uv::ll::uv_stream_t,\n                                on_alloc_cb,\n@@ -970,7 +970,7 @@ fn write_common_impl(socket_data_ptr: *tcp_socket_data,\n         result_ch: core::comm::chan(result_po)\n     };\n     let write_data_ptr = ptr::addr_of(write_data);\n-    do iotask::interact((*socket_data_ptr).iotask) |loop_ptr| {\n+    do iotask::interact((*socket_data_ptr).iotask) |loop_ptr| unsafe {\n         log(debug, fmt!(\"in interact cb for tcp::write %?\", loop_ptr));\n         match uv::ll::write(write_req_ptr,\n                           stream_handle_ptr,"}, {"sha": "d84d6632dbdcfb4258ea8bbd8b8494c3fd1c5b36", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "patch": "@@ -31,7 +31,7 @@ fn delayed_send<T: copy send>(iotask: iotask,\n             let timer_done_ch_ptr = ptr::addr_of(timer_done_ch);\n             let timer = uv::ll::timer_t();\n             let timer_ptr = ptr::addr_of(timer);\n-            do iotask::interact(iotask) |loop_ptr| {\n+            do iotask::interact(iotask) |loop_ptr| unsafe {\n                 let init_result = uv::ll::timer_init(loop_ptr, timer_ptr);\n                 if (init_result == 0i32) {\n                     let start_result = uv::ll::timer_start("}, {"sha": "6fe2cdb82237440dbc281dee4f521df227145d70", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "patch": "@@ -49,7 +49,7 @@ fn get_monitor_task_gl() -> iotask unsafe {\n                                                 task::task().sched_mode\n                                                 (task::SingleThreaded)\n                                                 .unlinked()\n-                                           }) |msg_po| {\n+                                           }) |msg_po| unsafe {\n         debug!(\"global monitor task starting\");\n \n         // As a weak task the runtime will notify us when to exit\n@@ -85,20 +85,22 @@ fn get_monitor_task_gl() -> iotask unsafe {\n     }\n }\n \n-fn spawn_loop() -> iotask unsafe {\n+fn spawn_loop() -> iotask {\n     let builder = do task::task().add_wrapper |task_body| {\n         fn~(move task_body) {\n             // The I/O loop task also needs to be weak so it doesn't keep\n             // the runtime alive\n-            do weaken_task |weak_exit_po| {\n-                debug!(\"global libuv task is now weak %?\", weak_exit_po);\n-                task_body();\n+            unsafe {\n+                do weaken_task |weak_exit_po| {\n+                    debug!(\"global libuv task is now weak %?\", weak_exit_po);\n+                    task_body();\n \n-                // We don't wait for the exit message on weak_exit_po\n-                // because the monitor task will tell the uv loop when to\n-                // exit\n+                    // We don't wait for the exit message on weak_exit_po\n+                    // because the monitor task will tell the uv loop when to\n+                    // exit\n \n-                debug!(\"global libuv task is leaving weakened state\");\n+                    debug!(\"global libuv task is leaving weakened state\");\n+                }\n             }\n         }\n     };\n@@ -120,7 +122,7 @@ mod test {\n         log(debug, ~\"in simple timer cb\");\n         ll::timer_stop(timer_ptr);\n         let hl_loop = get_gl();\n-        do iotask::interact(hl_loop) |_loop_ptr| {\n+        do iotask::interact(hl_loop) |_loop_ptr| unsafe {\n             log(debug, ~\"closing timer\");\n             ll::close(timer_ptr, simple_timer_close_cb);\n             log(debug, ~\"about to deref exit_ch_ptr\");\n@@ -137,7 +139,7 @@ mod test {\n                        exit_ch_ptr));\n         let timer_handle = ll::timer_t();\n         let timer_ptr = ptr::addr_of(timer_handle);\n-        do iotask::interact(iotask) |loop_ptr| {\n+        do iotask::interact(iotask) |loop_ptr| unsafe {\n             log(debug, ~\"user code inside interact loop!!!\");\n             let init_status = ll::timer_init(loop_ptr, timer_ptr);\n             if(init_status == 0i32) {"}, {"sha": "bb7f4f56782b329871413c66a5cac810a7634b12", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dd01eb2a641d51f0b3135671a0e674d18f27f7/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=b5dd01eb2a641d51f0b3135671a0e674d18f27f7", "patch": "@@ -193,7 +193,7 @@ mod test {\n             exit_ch: exit_ch\n         };\n         let ah_data_ptr = ptr::addr_of(ah_data);\n-        do interact(iotask) |loop_ptr| {\n+        do interact(iotask) |loop_ptr| unsafe {\n             ll::async_init(loop_ptr, ah_ptr, async_handle_cb);\n             ll::set_data_for_uv_handle(ah_ptr, ah_data_ptr as *libc::c_void);\n             ll::async_send(ah_ptr);"}]}