{"sha": "70b136d532460d2e35456d303726be736a3adb3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYjEzNmQ1MzI0NjBkMmUzNTQ1NmQzMDM3MjZiZTczNmEzYWRiM2Q=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-15T04:16:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-16T19:58:16Z"}, "message": "Use a `BitSet` in `LexicalResolver::iterate_until_fixed_point()`.\n\nThis wins 3% on `unicode_normalization`.", "tree": {"sha": "e305dff548b06ef72f1af34ba861e804ca7f0b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e305dff548b06ef72f1af34ba861e804ca7f0b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70b136d532460d2e35456d303726be736a3adb3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70b136d532460d2e35456d303726be736a3adb3d", "html_url": "https://github.com/rust-lang/rust/commit/70b136d532460d2e35456d303726be736a3adb3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70b136d532460d2e35456d303726be736a3adb3d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53aca553ec08e62a0591806fcf0f706ee9f53778", "url": "https://api.github.com/repos/rust-lang/rust/commits/53aca553ec08e62a0591806fcf0f706ee9f53778", "html_url": "https://github.com/rust-lang/rust/commit/53aca553ec08e62a0591806fcf0f706ee9f53778"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "a8d1b264760653170e12114279c9e11d445be7eb", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/70b136d532460d2e35456d303726be736a3adb3d/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b136d532460d2e35456d303726be736a3adb3d/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=70b136d532460d2e35456d303726be736a3adb3d", "patch": "@@ -19,8 +19,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n+use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use smallvec::SmallVec;\n use std::fmt;\n use syntax_pos::Span;\n \n@@ -870,21 +870,34 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     where\n         F: FnMut(&Constraint<'tcx>) -> (bool, bool),\n     {\n-        let mut constraints: SmallVec<[_; 16]> = self.data.constraints.keys().collect();\n+        // Using bitsets to track the remaining elements is faster than using a\n+        // `Vec` by itself (which requires removing elements, which requires\n+        // element shuffling, which is slow).\n+        let constraints: Vec<_> = self.data.constraints.keys().collect();\n+        let mut live_indices: BitSet<usize> = BitSet::new_filled(constraints.len());\n+        let mut killed_indices: BitSet<usize> = BitSet::new_empty(constraints.len());\n         let mut iteration = 0;\n         let mut changed = true;\n         while changed {\n             changed = false;\n             iteration += 1;\n             debug!(\"---- Expansion iteration {}\", iteration);\n-            constraints.retain(|constraint| {\n+            for index in live_indices.iter() {\n+                let constraint = constraints[index];\n                 let (edge_changed, retain) = body(constraint);\n                 if edge_changed {\n                     debug!(\"updated due to constraint {:?}\", constraint);\n                     changed = true;\n                 }\n-                retain\n-            });\n+                if !retain {\n+                    let changed = killed_indices.insert(index);\n+                    debug_assert!(changed);\n+                }\n+            }\n+            live_indices.subtract(&killed_indices);\n+\n+            // We could clear `killed_indices` here, but we don't need to and\n+            // it's cheaper not to.\n         }\n         debug!(\"---- Expansion complete after {} iteration(s)\", iteration);\n     }"}]}