{"sha": "1aacd9d44f1a822aa9e9e4847f1004e7035410cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYWNkOWQ0NGYxYTgyMmFhOWU5ZTQ4NDdmMTAwNGU3MDM1NDEwY2Y=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2016-01-16T13:29:20Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2016-01-16T13:29:20Z"}, "message": "simplify some code", "tree": {"sha": "ce75ea6435b1f156edebd1de2ed3c4ab1acdab24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce75ea6435b1f156edebd1de2ed3c4ab1acdab24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aacd9d44f1a822aa9e9e4847f1004e7035410cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aacd9d44f1a822aa9e9e4847f1004e7035410cf", "html_url": "https://github.com/rust-lang/rust/commit/1aacd9d44f1a822aa9e9e4847f1004e7035410cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aacd9d44f1a822aa9e9e4847f1004e7035410cf/comments", "author": null, "committer": null, "parents": [{"sha": "8e12365570c4a9e781298058d6394705ac648a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e12365570c4a9e781298058d6394705ac648a3b", "html_url": "https://github.com/rust-lang/rust/commit/8e12365570c4a9e781298058d6394705ac648a3b"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "378cb5bb5e08cb502c8685642a97679adc163fb2", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1aacd9d44f1a822aa9e9e4847f1004e7035410cf/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aacd9d44f1a822aa9e9e4847f1004e7035410cf/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=1aacd9d44f1a822aa9e9e4847f1004e7035410cf", "patch": "@@ -44,20 +44,6 @@ use std::mem::transmute;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64};\n use std::rc::Rc;\n \n-fn lookup_const<'a>(tcx: &'a ty::ctxt, e: &Expr) -> Option<&'a Expr> {\n-    let opt_def = tcx.def_map.borrow().get(&e.id).map(|d| d.full_def());\n-    match opt_def {\n-        Some(def::DefConst(def_id)) |\n-        Some(def::DefAssociatedConst(def_id)) => {\n-            lookup_const_by_id(tcx, def_id, Some(e.id), None)\n-        }\n-        Some(def::DefVariant(enum_def, variant_def, _)) => {\n-            lookup_variant_by_id(tcx, enum_def, variant_def)\n-        }\n-        _ => None\n-    }\n-}\n-\n fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n                             enum_def: DefId,\n                             variant_def: DefId)\n@@ -382,12 +368,12 @@ pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<hir::Pat>\n                     hir::PatStruct(path.clone(), hir::HirVec::new(), false),\n                 Some(def::DefVariant(..)) =>\n                     hir::PatEnum(path.clone(), None),\n-                _ => {\n-                    match lookup_const(tcx, expr) {\n-                        Some(actual) => return const_expr_to_pat(tcx, actual, span),\n-                        _ => unreachable!()\n-                    }\n-                }\n+                Some(def::DefConst(def_id)) |\n+                Some(def::DefAssociatedConst(def_id)) => {\n+                    let expr = lookup_const_by_id(tcx, def_id, Some(expr.id), None).unwrap();\n+                    return const_expr_to_pat(tcx, expr, span);\n+                },\n+                _ => unreachable!(),\n             }\n         }\n "}]}