{"sha": "616970758b438322d36bb903fcb6422575b12216", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjk3MDc1OGI0MzgzMjJkMzZiYjkwM2ZjYjY0MjI1NzViMTIyMTY=", "commit": {"author": {"name": "redroc", "email": "philipp.koppenstein@udo.edu", "date": "2018-08-04T03:51:02Z"}, "committer": {"name": "redroc", "email": "philipp.koppenstein@udo.edu", "date": "2018-08-04T03:51:02Z"}, "message": "deleted changed lines", "tree": {"sha": "9ac3e78c7beef42601e0980892905b15e812722b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac3e78c7beef42601e0980892905b15e812722b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/616970758b438322d36bb903fcb6422575b12216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/616970758b438322d36bb903fcb6422575b12216", "html_url": "https://github.com/rust-lang/rust/commit/616970758b438322d36bb903fcb6422575b12216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/616970758b438322d36bb903fcb6422575b12216/comments", "author": {"login": "r3drock", "id": 38569066, "node_id": "MDQ6VXNlcjM4NTY5MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/38569066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r3drock", "html_url": "https://github.com/r3drock", "followers_url": "https://api.github.com/users/r3drock/followers", "following_url": "https://api.github.com/users/r3drock/following{/other_user}", "gists_url": "https://api.github.com/users/r3drock/gists{/gist_id}", "starred_url": "https://api.github.com/users/r3drock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r3drock/subscriptions", "organizations_url": "https://api.github.com/users/r3drock/orgs", "repos_url": "https://api.github.com/users/r3drock/repos", "events_url": "https://api.github.com/users/r3drock/events{/privacy}", "received_events_url": "https://api.github.com/users/r3drock/received_events", "type": "User", "site_admin": false}, "committer": {"login": "r3drock", "id": 38569066, "node_id": "MDQ6VXNlcjM4NTY5MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/38569066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r3drock", "html_url": "https://github.com/r3drock", "followers_url": "https://api.github.com/users/r3drock/followers", "following_url": "https://api.github.com/users/r3drock/following{/other_user}", "gists_url": "https://api.github.com/users/r3drock/gists{/gist_id}", "starred_url": "https://api.github.com/users/r3drock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r3drock/subscriptions", "organizations_url": "https://api.github.com/users/r3drock/orgs", "repos_url": "https://api.github.com/users/r3drock/repos", "events_url": "https://api.github.com/users/r3drock/events{/privacy}", "received_events_url": "https://api.github.com/users/r3drock/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a", "html_url": "https://github.com/rust-lang/rust/commit/33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "356534a91879cde36e2ef26405b6e1030c910a7b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/616970758b438322d36bb903fcb6422575b12216/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/616970758b438322d36bb903fcb6422575b12216/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=616970758b438322d36bb903fcb6422575b12216", "patch": "@@ -2117,8 +2117,6 @@ impl str {\n     /// This length is in bytes, not [`char`]s or graphemes. In other words,\n     /// it may not be what a human considers the length of the string.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2590,8 +2588,6 @@ impl str {\n     /// Value, and may not match your idea of what a 'character' is. Iteration\n     /// over grapheme clusters may be what you actually want.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2643,8 +2639,6 @@ impl str {\n     /// The iterator yields tuples. The position is first, the [`char`] is\n     /// second.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2946,7 +2940,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n     /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -2994,7 +2987,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n     /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -3050,7 +3042,6 @@ impl str {\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit`] method can be used.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n     /// [`rsplit`]: #method.rsplit\n     ///\n     /// # Examples\n@@ -3157,8 +3148,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3224,7 +3213,6 @@ impl str {\n     /// elements. This is true for, eg, [`char`] but not for `&str`.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit_terminator`] method can be used.\n@@ -3259,8 +3247,6 @@ impl str {\n     /// Additional libraries might provide more complex patterns like\n     /// regular expressions.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// Equivalent to [`split`], except that the trailing substring is\n     /// skipped if empty.\n     ///\n@@ -3306,8 +3292,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will not be double ended, because it is\n@@ -3361,8 +3345,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines the split.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will not be double ended, because it is not\n@@ -3407,16 +3389,13 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines if a character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n     /// allows a reverse search and forward/reverse search yields the same\n     /// elements. This is true for, eg, [`char`] but not for `&str`.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rmatches`] method can be used.\n@@ -3446,8 +3425,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3488,8 +3465,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines\n     /// if a character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n@@ -3532,8 +3507,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if a\n     /// character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3665,8 +3638,6 @@ impl str {\n     /// The pattern can be a [`char`] or a closure that determines if a\n     /// character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Simple patterns:\n@@ -3711,8 +3682,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Text directionality\n     ///\n     /// A string is a sequence of bytes. 'Left' in this context means the first\n@@ -3750,8 +3719,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines if a character matches.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    ///\n     /// # Text directionality\n     ///\n     /// A string is a sequence of bytes. 'Right' in this context means the last"}]}