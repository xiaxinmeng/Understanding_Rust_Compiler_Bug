{"sha": "0d5bcb14adb71900a99f06b92485de7e019734c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNWJjYjE0YWRiNzE5MDBhOTlmMDZiOTI0ODVkZTdlMDE5NzM0YzI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-15T08:52:21Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T20:05:55Z"}, "message": "Switched to Box::new in many places.\n\nMany of the modifications putting in `Box::new` calls also include a\npointer to Issue 22405, which tracks going back to `box <expr>` if\npossible in the future.\n\n(Still tried to use `Box<_>` where it sufficed; thus some tests still\nhave `box_syntax` enabled, as they use a mix of `box` and `Box::new`.)\n\nPrecursor for overloaded-`box` and placement-`in`; see Issue 22181.", "tree": {"sha": "37b9faace62c6658ff6ecf9d646e04c01be875fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37b9faace62c6658ff6ecf9d646e04c01be875fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d5bcb14adb71900a99f06b92485de7e019734c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5bcb14adb71900a99f06b92485de7e019734c2", "html_url": "https://github.com/rust-lang/rust/commit/0d5bcb14adb71900a99f06b92485de7e019734c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d5bcb14adb71900a99f06b92485de7e019734c2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b03279aaa2b20f6033e66fc7aea29c0b43e71082", "url": "https://api.github.com/repos/rust-lang/rust/commits/b03279aaa2b20f6033e66fc7aea29c0b43e71082", "html_url": "https://github.com/rust-lang/rust/commit/b03279aaa2b20f6033e66fc7aea29c0b43e71082"}], "stats": {"total": 722, "additions": 349, "deletions": 373}, "files": [{"sha": "630ca837daac8eb2ca5b75d56a14ba825f316cd3", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -157,7 +157,7 @@ impl<T: Default> Default for Box<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Box<[T]> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn default() -> Box<[T]> { box [] }\n+    fn default() -> Box<[T]> { Box::<[T; 0]>::new([]) }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "da96680d84b50991dd541eedcca412a578b4d903", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -64,7 +64,8 @@ fn test_writer_hasher() {\n     //assert_eq!(hasher.hash(& s), 97 + 0xFF);\n     let cs: &[u8] = &[1u8, 2u8, 3u8];\n     assert_eq!(hash(& cs), 9);\n-    let cs: Box<[u8]> = box [1u8, 2u8, 3u8];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let cs: Box<[u8]> = Box::new([1u8, 2u8, 3u8]);\n     assert_eq!(hash(& cs), 9);\n \n     // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>"}, {"sha": "b1b10b582e55c5437ba1758ff65d4bbc853e121a", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -404,7 +404,8 @@ fn test_collect() {\n \n #[test]\n fn test_all() {\n-    let v: Box<[int]> = box [1, 2, 3, 4, 5];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let v: Box<[int]> = Box::new([1, 2, 3, 4, 5]);\n     assert!(v.iter().all(|&x| x < 10));\n     assert!(!v.iter().all(|&x| x % 2 == 0));\n     assert!(!v.iter().all(|&x| x > 100));\n@@ -413,7 +414,8 @@ fn test_all() {\n \n #[test]\n fn test_any() {\n-    let v: Box<[int]> = box [1, 2, 3, 4, 5];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let v: Box<[int]> = Box::new([1, 2, 3, 4, 5]);\n     assert!(v.iter().any(|&x| x < 10));\n     assert!(v.iter().any(|&x| x % 2 == 0));\n     assert!(!v.iter().any(|&x| x > 100));\n@@ -581,8 +583,9 @@ fn test_rposition() {\n #[test]\n #[should_fail]\n fn test_rposition_panic() {\n-    let v = [(box 0, box 0), (box 0, box 0),\n-             (box 0, box 0), (box 0, box 0)];\n+    let v: [(Box<_>, Box<_>); 4] =\n+        [(box 0, box 0), (box 0, box 0),\n+         (box 0, box 0), (box 0, box 0)];\n     let mut i = 0;\n     v.iter().rposition(|_elt| {\n         if i == 2 {"}, {"sha": "ae43738d471eb8dc8ac833473aa920f9f72544d3", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -79,7 +79,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n             None => {}\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, enum_def,\n-            box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n+            Box::new(|a, b, c, d| astencode::decode_inlined_item(a, b, c, d))) {\n             csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     // NOTE this doesn't do the right thing, it compares inlined\n@@ -119,7 +119,7 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n             None => {}\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, def_id,\n-            box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n+            Box::new(|a, b, c, d| astencode::decode_inlined_item(a, b, c, d))) {\n             csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None"}, {"sha": "6f98b79e782c0bcd7841427fd7a0bd795fcb9e01", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -99,7 +99,7 @@ impl<'a> Registry<'a> {\n     /// It builds for you a `NormalTT` that calls `expander`,\n     /// and also takes care of interning the macro's name.\n     pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n-        self.register_syntax_extension(token::intern(name), NormalTT(box expander, None));\n+        self.register_syntax_extension(token::intern(name), NormalTT(Box::new(expander), None));\n     }\n \n     /// Register a compiler lint pass."}, {"sha": "13f882bc36318c79d895c651c043158505afdb6b", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -2969,7 +2969,7 @@ pub fn write_metadata(cx: &SharedCrateContext, krate: &ast::Crate) -> Vec<u8> {\n     }\n \n     let encode_inlined_item: encoder::EncodeInlinedItem =\n-        box |ecx, rbml_w, ii| astencode::encode_inlined_item(ecx, rbml_w, ii);\n+        Box::new(|ecx, rbml_w, ii| astencode::encode_inlined_item(ecx, rbml_w, ii));\n \n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let metadata = encoder::encode_metadata(encode_parms, krate);"}, {"sha": "14f92334073720d38d212e1d787cf1641408b517", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -40,7 +40,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n     let csearch_result =\n         csearch::maybe_get_item_ast(\n             ccx.tcx(), fn_id,\n-            box |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n+            Box::new(|a,b,c,d| astencode::decode_inlined_item(a, b, c, d)));\n \n     let inline_def = match csearch_result {\n         csearch::FoundAst::NotFound => {"}, {"sha": "f31dbf5138bb601ce6f6e13689cdec546055624b", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -152,12 +152,12 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                                           &closure_ty.sig).0;\n                 fcx.record_deferred_call_resolution(\n                     def_id,\n-                    box CallResolution {call_expr: call_expr,\n-                                        callee_expr: callee_expr,\n-                                        adjusted_ty: adjusted_ty,\n-                                        autoderefref: autoderefref,\n-                                        fn_sig: fn_sig.clone(),\n-                                        closure_def_id: def_id});\n+                    Box::new(CallResolution {call_expr: call_expr,\n+                                         callee_expr: callee_expr,\n+                                         adjusted_ty: adjusted_ty,\n+                                         autoderefref: autoderefref,\n+                                         fn_sig: fn_sig.clone(),\n+                                         closure_def_id: def_id}));\n                 return Some(CallStep::DeferredClosure(fn_sig));\n             }\n         }"}, {"sha": "85bf4908f8397bf5ffe65c9835134109a8b4b84e", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -547,8 +547,9 @@ mod tests {\n \n         let (tx, rx) = channel();\n         let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let _t = thread::spawn(move|| {\n-            set_stdout(box w);\n+            set_stdout(Box::new(w));\n             println!(\"hello!\");\n         });\n         assert_eq!(r.read_to_string().unwrap(), \"hello!\\n\");\n@@ -560,8 +561,9 @@ mod tests {\n \n         let (tx, rx) = channel();\n         let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let _t = thread::spawn(move || -> () {\n-            set_stderr(box w);\n+            set_stderr(Box::new(w));\n             panic!(\"my special message\");\n         });\n         let s = r.read_to_string().unwrap();"}, {"sha": "de5f2141095f30705e99a467f9c5b16e746a04d6", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -15,6 +15,7 @@\n \n // FIXME: These functions take Durations but only pass ms to the backend impls.\n \n+use boxed::Box;\n use sync::mpsc::{Receiver, Sender, channel};\n use time::Duration;\n use old_io::IoResult;\n@@ -143,7 +144,7 @@ impl Timer {\n         let (tx, rx) = channel();\n         // Short-circuit the timer backend for 0 duration\n         if in_ms_u64(duration) != 0 {\n-            self.inner.oneshot(in_ms_u64(duration), box TimerCallback { tx: tx });\n+            self.inner.oneshot(in_ms_u64(duration), Box::new(TimerCallback { tx: tx }));\n         } else {\n             tx.send(()).unwrap();\n         }\n@@ -204,7 +205,7 @@ impl Timer {\n         // not clear what use a 0ms period is anyway...\n         let ms = if ms == 0 { 1 } else { ms };\n         let (tx, rx) = channel();\n-        self.inner.period(ms, box TimerCallback { tx: tx });\n+        self.inner.period(ms, Box::new(TimerCallback { tx: tx }));\n         return rx\n     }\n }"}, {"sha": "ebb2a2e4827a10770098405b7c2b3e9d44c60c21", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -166,7 +166,7 @@ fn rust_panic(cause: Box<Any + Send + 'static>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n     unsafe {\n-        let exception = box Exception {\n+        let exception: Box<_> = box Exception {\n             uwe: uw::_Unwind_Exception {\n                 exception_class: rust_exception_class(),\n                 exception_cleanup: exception_cleanup,\n@@ -506,7 +506,7 @@ pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, uint)) -\n \n     let mut s = String::new();\n     let _ = write!(&mut s, \"{}\", msg);\n-    begin_unwind_inner(box s, file_line)\n+    begin_unwind_inner(Box::new(s), file_line)\n }\n \n /// This is the entry point of unwinding for panic!() and assert!().\n@@ -521,7 +521,7 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, uint)) ->\n     // panicking.\n \n     // see below for why we do the `Any` coercion here.\n-    begin_unwind_inner(box msg, file_line)\n+    begin_unwind_inner(Box::new(msg), file_line)\n }\n \n /// The core of the unwinding."}, {"sha": "a9cb05b368f02a200acd64526b82dee685153639", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -33,7 +33,7 @@ impl<'a,A,R> Thunk<'a,A,R> {\n         where F : FnOnce(A) -> R, F : Send + 'a\n     {\n         Thunk {\n-            invoke: box func\n+            invoke: Box::<F>::new(func)\n         }\n     }\n "}, {"sha": "e094cbcac5378a8b3aa59ab8332e13057c12d596", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -223,7 +223,7 @@ pub fn mk_span_handler(handler: Handler, cm: codemap::CodeMap) -> SpanHandler {\n pub fn default_handler(color_config: ColorConfig,\n                        registry: Option<diagnostics::registry::Registry>,\n                        can_emit_warnings: bool) -> Handler {\n-    mk_handler(can_emit_warnings, box EmitterWriter::stderr(color_config, registry))\n+    mk_handler(can_emit_warnings, Box::new(EmitterWriter::stderr(color_config, registry)))\n }\n \n pub fn mk_handler(can_emit_warnings: bool, e: Box<Emitter + Send>) -> Handler {\n@@ -352,11 +352,11 @@ impl EmitterWriter {\n         if use_color {\n             let dst = match term::stderr() {\n                 Some(t) => Terminal(t),\n-                None    => Raw(box stderr),\n+                None    => Raw(Box::new(stderr)),\n             };\n             EmitterWriter { dst: dst, registry: registry }\n         } else {\n-            EmitterWriter { dst: Raw(box stderr), registry: registry }\n+            EmitterWriter { dst: Raw(Box::new(stderr)), registry: registry }\n         }\n     }\n "}, {"sha": "ad5ca627a935ad7dd77b1c0b2e910293de921a98", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -465,7 +465,7 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n                                         -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n-        NormalTT(box f, None)\n+        NormalTT(Box::new(f), None)\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n@@ -489,9 +489,9 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"derive\"),\n-                            Decorator(box ext::deriving::expand_meta_derive));\n+                            Decorator(Box::new(ext::deriving::expand_meta_derive)));\n     syntax_expanders.insert(intern(\"deriving\"),\n-                            Decorator(box ext::deriving::expand_deprecated_deriving));\n+                            Decorator(Box::new(ext::deriving::expand_deprecated_deriving)));\n \n     if ecfg.enable_quotes() {\n         // Quasi-quoting expanders"}, {"sha": "f89f3ab55f3f90ec064847743f893c2143e4ebf5", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -40,9 +40,9 @@ pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self_,\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |c, s, sub| {\n+                combine_substructure: combine_substructure(Box::new(|c, s, sub| {\n                     cs_clone(\"Clone\", c, s, sub)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "c02af437b1c7b987fdca37f696231b14740941bc", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 cx.expr_binary(span, ast::BiAnd, subexpr, eq)\n             },\n             cx.expr_bool(span, true),\n-            box |cx, span, _, _| cx.expr_bool(span, false),\n+            Box::new(|cx, span, _, _| cx.expr_bool(span, false)),\n             cx, span, substr)\n     }\n     fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n@@ -57,7 +57,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 cx.expr_binary(span, ast::BiOr, subexpr, eq)\n             },\n             cx.expr_bool(span, false),\n-            box |cx, span, _, _| cx.expr_bool(span, true),\n+            Box::new(|cx, span, _, _| cx.expr_bool(span, true)),\n             cx, span, substr)\n     }\n \n@@ -72,9 +72,9 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     $f(a, b, c)\n-                })\n+                }))\n             }\n         } }\n     }"}, {"sha": "b2b2654801863daa9512e5f9d029332282f3ffbc", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -38,9 +38,9 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |cx, span, substr| {\n+                combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n                     cs_op($op, $equal, cx, span, substr)\n-                })\n+                }))\n             }\n         } }\n     }\n@@ -61,9 +61,9 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n         args: vec![borrowed_self()],\n         ret_ty: ret_ty,\n         attributes: attrs,\n-        combine_substructure: combine_substructure(box |cx, span, substr| {\n+        combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n             cs_partial_cmp(cx, span, substr)\n-        })\n+        }))\n     };\n \n     let trait_def = TraitDef {\n@@ -175,13 +175,13 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n             cx.expr_block(cx.block(span, vec!(assign), Some(if_)))\n         },\n         equals_expr.clone(),\n-        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n                 some_ordering_collapsed(cx, span, PartialCmpOp, tag_tuple)\n             }\n-        },\n+        }),\n         cx, span, substr)\n }\n \n@@ -223,7 +223,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n             cx.expr_binary(span, ast::BiOr, cmp, and)\n         },\n         cx.expr_bool(span, equal),\n-        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n@@ -233,6 +233,6 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n                 };\n                 some_ordering_collapsed(cx, span, op, tag_tuple)\n             }\n-        },\n+        }),\n         cx, span, substr)\n }"}, {"sha": "83164d242e8fbd730fdcc9784bc4a4bb104403f0", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -32,7 +32,8 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n             let block = cx.block(span, stmts, None);\n             cx.expr_block(block)\n         },\n-                       box |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in derive(Eq)?\"),\n+                       Box::new(|cx, sp, _, _| {\n+                           cx.span_bug(sp, \"non matching enums in derive(Eq)?\") }),\n                        cx,\n                        span,\n                        substr)\n@@ -57,9 +58,9 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n                 args: vec!(),\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     cs_total_eq_assert(a, b, c)\n-                })\n+                }))\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "1de955856e712c208d5375574ccf3e7de76096c4", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -41,9 +41,9 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(path_std!(cx, core::cmp::Ordering)),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     cs_cmp(a, b, c)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),\n@@ -131,12 +131,12 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n             cx.expr_block(cx.block(span, vec!(assign), Some(if_)))\n         },\n         cx.expr_path(equals_path.clone()),\n-        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derives(Ord)`\")\n             } else {\n                 ordering_collapsed(cx, span, tag_tuple)\n             }\n-        },\n+        }),\n         cx, span, substr)\n }"}, {"sha": "6ce68948e4b010615b338836b0e85b49cd853a8b", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -82,9 +82,9 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                     true\n                 )),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     decodable_substructure(a, b, c, krate)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "f9991a233547c9dbc24511005df9643b38f65802", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -40,9 +40,9 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self_,\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     default_substructure(a, b, c)\n-                })\n+                }))\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "d7961d7da00f1e2e296bfd2e1f04c0a2b4a18398", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -158,9 +158,9 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                     true\n                 )),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     encodable_substructure(a, b, c)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "da80c7a0e6d15553f240e727654559bb33b71342", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -45,9 +45,9 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(arg), Borrowed(None, MutMutable))),\n                 ret_ty: nil_ty(),\n                 attributes: vec![],\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     hash_substructure(a, b, c)\n-                })\n+                }))\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "b2d0a9f6b51ad329a30b044332f2d32cbcc37880", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -45,9 +45,9 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs.clone(),\n-                combine_substructure: combine_substructure(box |c, s, sub| {\n+                combine_substructure: combine_substructure(Box::new(|c, s, sub| {\n                     cs_from(\"i64\", c, s, sub)\n-                }),\n+                })),\n             },\n             MethodDef {\n                 name: \"from_u64\",\n@@ -60,9 +60,9 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(box |c, s, sub| {\n+                combine_substructure: combine_substructure(Box::new(|c, s, sub| {\n                     cs_from(\"u64\", c, s, sub)\n-                }),\n+                })),\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "8a764fded6fd9d3cf3aca73028cffb07146ae51f", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -55,9 +55,9 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                 ),\n                 ret_ty: Self_,\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     rand_substructure(a, b, c)\n-                })\n+                }))\n             }\n         ),\n         associated_types: Vec::new(),"}, {"sha": "ce89c541fd44b89f6677d9193c266c834b80ac30", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -46,9 +46,9 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n                 args: vec!(fmtr),\n                 ret_ty: Literal(path_std!(cx, core::fmt::Result)),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(box |a, b, c| {\n+                combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     show_substructure(a, b, c)\n-                })\n+                }))\n             }\n         ],\n         associated_types: Vec::new(),"}, {"sha": "0ac78209b6f4f212fbc039444e04a226720c6c30", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -479,7 +479,7 @@ pub fn parse(sess: &ParseSess,\n                 }\n                 rdr.next_token();\n             } else /* bb_eis.len() == 1 */ {\n-                let mut rust_parser = Parser::new(sess, cfg.clone(), box rdr.clone());\n+                let mut rust_parser = Parser::new(sess, cfg.clone(), Box::new(rdr.clone()));\n \n                 let mut ei = bb_eis.pop().unwrap();\n                 match ei.top_elts.get_tt(ei.idx) {"}, {"sha": "db7db4b83ace2176f387d431738744031beaca60", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -180,7 +180,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                                            Some(named_matches),\n                                            imported_from,\n                                            rhs);\n-                let mut p = Parser::new(cx.parse_sess(), cx.cfg(), box trncbr);\n+                let mut p = Parser::new(cx.parse_sess(), cx.cfg(), Box::new(trncbr));\n                 p.check_unknown_macro_variable();\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n@@ -267,7 +267,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n         _ => cx.span_bug(def.span, \"wrong-structured rhs\")\n     };\n \n-    let exp = box MacroRulesMacroExpander {\n+    let exp: Box<_> = box MacroRulesMacroExpander {\n         name: def.ident,\n         imported_from: def.imported_from,\n         lhses: lhses,"}, {"sha": "25f1f9b8480a1204d71129325688b6f1d43c72be", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -30,7 +30,7 @@ impl<T:fmt::Debug> fmt::Debug for OwnedSlice<T> {\n \n impl<T> OwnedSlice<T> {\n     pub fn empty() -> OwnedSlice<T> {\n-        OwnedSlice  { data: box [] }\n+        OwnedSlice  { data: Box::new([]) }\n     }\n \n     #[inline(never)]"}, {"sha": "bbe1ddfd4cfc511de66e6e556ea78177d0ed1cdd", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -1484,8 +1484,9 @@ mod test {\n     use std::old_io::util;\n \n     fn mk_sh() -> diagnostic::SpanHandler {\n-        let emitter = diagnostic::EmitterWriter::new(box util::NullWriter, None);\n-        let handler = diagnostic::mk_handler(true, box emitter);\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let emitter = diagnostic::EmitterWriter::new(Box::new(util::NullWriter), None);\n+        let handler = diagnostic::mk_handler(true, Box::new(emitter));\n         diagnostic::mk_span_handler(handler, CodeMap::new())\n     }\n "}, {"sha": "d9afc1df28ebf79348ec3bb8255a3d803ba78519", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -36,10 +36,12 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"identity\", expand_identity);\n     reg.register_syntax_extension(\n         token::intern(\"into_foo\"),\n-        Modifier(box expand_into_foo));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        Modifier(Box::new(expand_into_foo)));\n     reg.register_syntax_extension(\n         token::intern(\"into_multi_foo\"),\n-        MultiModifier(box expand_into_foo_multi));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        MultiModifier(Box::new(expand_into_foo_multi)));\n }\n \n fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])"}, {"sha": "20c84c4ba5b4a9863d9623e558bb940d9cc7bb98", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -46,5 +46,6 @@ impl TTMacroExpander for Expander {\n pub fn plugin_registrar(reg: &mut Registry) {\n     let args = reg.args().clone();\n     reg.register_syntax_extension(token::intern(\"plugin_args\"),\n-        NormalTT(box Expander { args: args, }, None));\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        NormalTT(Box::new(Expander { args: args, }), None));\n }"}, {"sha": "8bbecfd48c6dca78c5b74dd6762f232319edb426", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -16,9 +16,10 @@ extern crate collections;\n use std::collections::HashMap;\n \n fn main() {\n-    let tmp;\n+    let tmp: Box<_>;\n     let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n-    buggy_map.insert(42, &*box 1); //~ ERROR borrowed value does not live long enough\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n \n     // but it is ok if we use a temporary\n     tmp = box 2;"}, {"sha": "7626f354eb46415a13575402bf74991f11b65bc5", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,19 +11,19 @@\n // Ensure that invoking a closure counts as a unique immutable borrow\n \n #![feature(unboxed_closures)]\n-#![feature(box_syntax)]\n \n type Fn<'a> = Box<FnMut() + 'a>;\n \n struct Test<'a> {\n     f: Box<FnMut() + 'a>\n }\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n fn call<F>(mut f: F) where F: FnMut(Fn) {\n-    f(box || {\n+    f(Box::new(|| {\n     //~^ ERROR: cannot borrow `f` as mutable more than once\n-        f(box || {})\n-    });\n+        f((Box::new(|| {})))\n+    }));\n }\n \n fn test1() {\n@@ -58,11 +58,12 @@ fn test6() {\n fn test7() {\n     fn foo<F>(_: F) where F: FnMut(Box<FnMut(isize)>, isize) {}\n     let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n-    f(box |a| {\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    f(Box::new(|a| {\n         foo(f);\n         //~^ ERROR cannot move `f` into closure because it is borrowed\n         //~| ERROR cannot move out of captured outer variable in an `FnMut` closure\n-    }, 3);\n+    }), 3);\n }\n \n fn main() {}"}, {"sha": "871f52cbebddc35fa026b3f2ca19c55986428014", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,14 +11,13 @@\n // Test that cross-borrowing (implicitly converting from `Box<T>` to `&T`) is\n // forbidden when `T` is a trait.\n \n-#![feature(box_syntax)]\n-\n struct Foo;\n trait Trait { fn foo(&self) {} }\n impl Trait for Foo {}\n \n pub fn main() {\n-    let x: Box<Trait> = box Foo;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let x: Box<Trait> = Box::new(Foo);\n     let _y: &Trait = x; //~  ERROR mismatched types\n                         //~| expected `&Trait`\n                         //~| found `Box<Trait>`"}, {"sha": "8441f3a99e1aa6b3430191b4672c1303de85d3c4", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,8 +10,6 @@\n \n // Forbid assignment into a dynamically sized type.\n \n-#![feature(box_syntax)]\n-\n struct Fat<T: ?Sized> {\n     f1: isize,\n     f2: &'static str,\n@@ -43,7 +41,8 @@ impl ToBar for Bar1 {\n pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    let z: Box<ToBar> = box Bar1 {f: 36};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "d3029bc6a99801a785754a1a9b8ac6bf92e05ec0", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,8 +10,6 @@\n \n // Forbid assignment into a dynamically sized type.\n \n-#![feature(box_syntax)]\n-\n struct Fat<T: ?Sized> {\n     f1: isize,\n     f2: &'static str,\n@@ -43,7 +41,8 @@ impl ToBar for Bar1 {\n pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    let z: Box<ToBar> = box Bar1 {f: 36};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n     //~| expected `ToBar`"}, {"sha": "9711d760ae666ccb54409aa5fdb6dd90f43f3478", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n fn test<'x>(x: &'x isize) {\n-    drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(box |z| {\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n         x\n         //~^ ERROR cannot infer an appropriate lifetime\n-    });\n+    }));\n }\n \n fn main() {}"}, {"sha": "f682d618ab646131735f3cf47ff98976be17369c", "filename": "src/test/compile-fail/issue-11515.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -15,6 +15,7 @@ struct Test {\n }\n \n fn main() {\n-    let closure: Box<Fn()+'static> = box || ();\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let closure: Box<Fn()+'static> = Box::new(|| ());\n     let test = box Test { func: closure }; //~ ERROR mismatched types\n }"}, {"sha": "68ddef671887852f14b200910d6a2529ccf9be92", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n fn main() {\n     let _foo = &[1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n     //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n-    let _bar = box 1_usize as std::fmt::Debug;\n+\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let _bar = Box::new(1_usize) as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Debug`\n     //~^^ HELP did you mean `Box<core::fmt::Debug>`?\n+\n     let _baz = 1_usize as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `usize` as `core::fmt::Debug`\n     //~^^ HELP consider using a box or reference as appropriate\n+\n     let _quux = [1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`\n     //~^^ HELP consider using a box or reference as appropriate"}, {"sha": "d6471ca018deec2c8c1eea7c26aa1f97090b7905", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,10 +11,8 @@\n // Test that moves of unsized values within closures are caught\n // and rejected.\n \n-#![feature(box_syntax)]\n-\n fn main() {\n-    (|| box *[0_usize].as_slice())();\n-    //~^ ERROR cannot move out of borrowed content\n-    //~^^ ERROR cannot move a value of type [usize]\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    (|| Box::new(*[0_usize].as_slice()))();\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[usize]`\n }"}, {"sha": "f6a3da81857750fd5937f66b5632e08f8471aafb", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n use std::cell::RefCell;\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n fn main() {\n     let mut y = 1_usize;\n     let c = RefCell::new(vec![]);\n-    c.push(box || y = 0);\n-    c.push(box || y = 0);\n+    c.push(Box::new(|| y = 0));\n+    c.push(Box::new(|| y = 0));\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n fn ufcs() {\n     let mut y = 1_usize;\n     let c = RefCell::new(vec![]);\n \n-    Push::push(&c, box || y = 0);\n-    Push::push(&c, box || y = 0);\n+    Push::push(&c, Box::new(|| y = 0));\n+    Push::push(&c, Box::new(|| y = 0));\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n "}, {"sha": "085b4e76afbf71650fece23c0481522a9d9de5da", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n mod my_mod {\n     pub struct MyStruct {\n         priv_field: isize\n@@ -26,10 +24,15 @@ fn main() {\n     let my_struct = my_mod::MyStruct();\n     let _woohoo = (&my_struct).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n-    let _woohoo = (box my_struct).priv_field;\n+\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let _woohoo = (Box::new(my_struct)).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n+\n     (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n-    (box my_struct).happyfun();            //~ ERROR method `happyfun` is private\n+\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    (Box::new(my_struct)).happyfun();          //~ ERROR method `happyfun` is private\n     let nope = my_struct.priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n }"}, {"sha": "55a793f7480a42e1db237844f544e8271d6c0a10", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n #![feature(unboxed_closures)]\n-#![feature(box_syntax)]\n \n fn id<T>(t: T) -> T { t }\n \n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n-    id(box || *v)\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    id(Box::new(|| *v))\n         //~^ ERROR `v` does not live long enough\n         //~| ERROR cannot move out of borrowed content\n }"}, {"sha": "c27362eea3e3c6cea897f9fe8ac073de693fc3d6", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n trait Foo { fn foo(&self) {} }\n impl Foo for u8 {}\n \n fn main() {\n-    let r: Box<Foo> = box 5;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let r: Box<Foo> = Box::new(5);\n     let _m: Box<Foo> = r as Box<Foo>;\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `Foo`\n }"}, {"sha": "e298a0f62cd81882ab9e47920f4ac74347b58e82", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -26,6 +26,7 @@ impl<K, V> Map<K, V> for HashMap<K, V> {}\n fn main() {\n     let x: Box<HashMap<isize, isize>> = box HashMap::new();\n     let x: Box<Map<isize, isize>> = x;\n-    let y: Box<Map<usize, isize>> = box x;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let y: Box<Map<usize, isize>> = Box::new(x);\n     //~^ ERROR the trait `Map<usize, isize>` is not implemented\n }"}, {"sha": "5af326b4298499ed42bfdd5bb505e75657b104d9", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -12,7 +12,6 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct R<'a> {\n@@ -41,7 +40,8 @@ fn innocent_looking_victim() {\n }\n \n fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n-    let mut r = R {c: box f};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let mut r = R {c: Box::new(f)};\n     f(&mut r, false) //~ ERROR use of moved value\n }\n "}, {"sha": "1bb2bb5a15450f3aa774ded692b1ac6f0e610626", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,32 +11,36 @@\n // Test that attempts to implicitly coerce a value into an\n // object respect the lifetime bound on the object type.\n \n-#![feature(box_syntax)]\n-\n trait Foo : ::std::marker::MarkerTrait {}\n impl<'a> Foo for &'a [u8] {}\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n fn a(v: &[u8]) -> Box<Foo + 'static> {\n-    let x: Box<Foo + 'static> = box v; //~ ERROR does not fulfill the required lifetime\n+    let x: Box<Foo + 'static> = Box::new(v);\n+    //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n     x\n }\n \n fn b(v: &[u8]) -> Box<Foo + 'static> {\n-    box v //~ ERROR does not fulfill the required lifetime\n+    Box::new(v)\n+        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n }\n \n fn c(v: &[u8]) -> Box<Foo> {\n     // same as previous case due to RFC 599\n \n-    box v //~ ERROR does not fulfill the required lifetime\n+    Box::new(v)\n+        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n-    box v //~ ERROR does not fulfill the required lifetime\n+    Box::new(v)\n+        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n }\n \n fn e<'a:'b,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n-    box v // OK, thanks to 'a:'b\n+    Box::new(v) // OK, thanks to 'a:'b\n }\n \n fn main() { }"}, {"sha": "72a024e563c6f6bc06caa285fe9b20879752c471", "filename": "src/test/compile-fail/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(box_syntax)]\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n use std::marker::MarkerTrait;\n \n trait X : MarkerTrait {}\n@@ -24,48 +26,48 @@ trait Iter {\n fn bad1<T: Iter>(v: T) -> Box<X+'static>\n {\n     let item = v.into_item();\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n fn bad2<T: Iter>(v: T) -> Box<X+'static>\n     where Box<T::Item> : X\n {\n-    let item = box v.into_item();\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n+    let item: Box<_> = box v.into_item();\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n fn bad3<'a, T: Iter>(v: T) -> Box<X+'a>\n {\n     let item = v.into_item();\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n fn bad4<'a, T: Iter>(v: T) -> Box<X+'a>\n     where Box<T::Item> : X\n {\n-    let item = box v.into_item();\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n+    let item: Box<_> = box v.into_item();\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n }\n \n fn ok1<'a, T: Iter>(v: T) -> Box<X+'a>\n     where T::Item : 'a\n {\n     let item = v.into_item();\n-    box item // OK, T::Item : 'a is declared\n+    Box::new(item) // OK, T::Item : 'a is declared\n }\n \n fn ok2<'a, T: Iter>(v: &T, w: &'a T::Item) -> Box<X+'a>\n     where T::Item : Clone\n {\n     let item = Clone::clone(w);\n-    box item // OK, T::Item : 'a is implied\n+    Box::new(item) // OK, T::Item : 'a is implied\n }\n \n fn ok3<'a, T: Iter>(v: &'a T) -> Box<X+'a>\n     where T::Item : Clone + 'a\n {\n     let item = Clone::clone(v.as_item());\n-    box item // OK, T::Item : 'a was declared\n+    Box::new(item) // OK, T::Item : 'a was declared\n }\n \n fn meh1<'a, T: Iter>(v: &'a T) -> Box<X+'a>\n@@ -78,7 +80,7 @@ fn meh1<'a, T: Iter>(v: &'a T) -> Box<X+'a>\n     // T::Item`. But we're not that smart at present.\n \n     let item = Clone::clone(v.as_item());\n-    box item //~ ERROR associated type `<T as Iter>::Item` may not live\n+    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live\n }\n \n fn main() {}"}, {"sha": "eebf93bc89377995173e7a3098eb7b4790203f53", "filename": "src/test/compile-fail/regions-close-param-into-object.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,32 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n trait X { fn foo(&self) {} }\n \n fn p1<T>(v: T) -> Box<X+'static>\n     where T : X\n {\n-    box v //~ ERROR parameter type `T` may not live long enough\n+    Box::new(v) //~ ERROR parameter type `T` may not live long enough\n }\n \n fn p2<T>(v: Box<T>) -> Box<X+'static>\n     where Box<T> : X\n {\n-    box v //~ ERROR parameter type `T` may not live long enough\n+    Box::new(v) //~ ERROR parameter type `T` may not live long enough\n }\n \n fn p3<'a,T>(v: T) -> Box<X+'a>\n     where T : X\n {\n-    box v //~ ERROR parameter type `T` may not live long enough\n+    Box::new(v) //~ ERROR parameter type `T` may not live long enough\n }\n \n fn p4<'a,T>(v: Box<T>) -> Box<X+'a>\n     where Box<T> : X\n {\n-    box v //~ ERROR parameter type `T` may not live long enough\n+    Box::new(v) //~ ERROR parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "f114a8bc7ce668bfe6a35ac4e3141cf41709bed1", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,25 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n fn ignore<T>(t: T) {}\n \n fn nested<'x>(x: &'x isize) {\n     let y = 3;\n     let mut ay = &y;\n \n-    ignore::<Box<for<'z> FnMut(&'z isize)>>(box |z| {\n+    ignore::<Box<for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n         ay = x; //~ ERROR cannot infer\n         ay = &y;\n         ay = z;\n-    });\n+    }));\n \n-    ignore::< Box<for<'z> FnMut(&'z isize) -> &'z isize>>(box |z| {\n+    ignore::< Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n         if false { return x; }  //~ ERROR cannot infer an appropriate lifetime for automatic\n         if false { return ay; }\n         return z;\n-    });\n+    }));\n }\n \n fn main() {}"}, {"sha": "3c137133c9867ca077ec86420b3d0c6e3716cce6", "filename": "src/test/compile-fail/regions-proc-bound-capture.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n fn borrowed_proc<'a>(x: &'a isize) -> Box<FnMut()->(isize) + 'a> {\n     // This is legal, because the region bound on `proc`\n     // states that it captures `x`.\n-    box move|| { *x }\n+    Box::new(move|| { *x })\n }\n \n fn static_proc(x: &isize) -> Box<FnMut()->(isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    box move|| { *x } //~ ERROR captured variable `x` does not outlive the enclosing closure\n+    Box::new(move|| { *x }) //~ ERROR captured variable `x` does not outlive the enclosing closure\n }\n \n fn main() { }"}, {"sha": "a30d8471a31788e6136a8498f009b8539722a075", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct closure_box<'a> {\n@@ -22,7 +21,8 @@ fn box_it<'r>(x: Box<FnMut() + 'r>) -> closure_box<'r> {\n fn main() {\n     let mut cl_box = {\n         let mut i = 3;\n-        box_it(box || i += 1) //~ ERROR `i` does not live long enough\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        box_it(Box::new(|| i += 1)) //~ ERROR `i` does not live long enough\n     };\n     cl_box.cl.call_mut(());\n }"}, {"sha": "b25af522b2476e35759af8a255ade6225020a8c0", "filename": "src/test/compile-fail/trait-coercion-generic-bad.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n struct Struct {\n     person: &'static str\n }\n@@ -25,7 +23,8 @@ impl Trait<&'static str> for Struct {\n }\n \n fn main() {\n-    let s: Box<Trait<isize>> = box Struct { person: \"Fred\" };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let s: Box<Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n     //~^ ERROR the trait `Trait<isize>` is not implemented for the type `Struct`\n     s.f(1);\n }"}, {"sha": "bbe256d1c8fd20cd36d5e0ce303556a72ecea839", "filename": "src/test/compile-fail/trait-coercion-generic-regions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n struct Struct {\n     person: &'static str\n }\n@@ -27,6 +25,7 @@ impl Trait<&'static str> for Struct {\n fn main() {\n     let person = \"Fred\".to_string();\n     let person: &str = &person;  //~ ERROR `person` does not live long enough\n-    let s: Box<Trait<&'static str>> = box Struct { person: person };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let s: Box<Trait<&'static str>> = Box::new(Struct { person: person });\n }\n "}, {"sha": "86e326f3c5a8b7f4b15f708491a39f15c225ccea", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n // Tests that we can't move out of an unboxed closure environment\n@@ -19,31 +18,33 @@ fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n fn main() {\n     // By-ref cases\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn_once(|| drop(x)); // OK -- FnOnce\n     }\n     // By-value cases\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0_usize;\n+        let x = Box::new(0_usize);\n         let f = to_fn_once(move || drop(x)); // this one is ok\n     }\n }"}, {"sha": "2ec10d08bb41d5ff92087c2eae36c4a410fd15a9", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n #[derive(Debug)]\n struct r {\n   b: bool,\n@@ -20,7 +18,8 @@ impl Drop for r {\n }\n \n fn main() {\n-    let i = box r { b: true };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let i = Box::new(r { b: true });\n     let _j = i.clone(); //~ ERROR not implement\n     println!(\"{:?}\", i);\n }"}, {"sha": "86fe4da3429d084f23d164d47fe024fc4811ae79", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n use std::rc::Rc;\n \n fn f<T:Send>(__isize: T) {\n }\n \n fn main() {\n-    let i = box Rc::new(100);\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let i = Box::new(Rc::new(100));\n     f(i);\n     //~^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "938abbf2c2018952a44739b07b3a7c027c866598", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(unsafe_destructor)]\n \n-#![feature(box_syntax)]\n-\n use std::cell::Cell;\n \n #[derive(Debug)]\n@@ -36,8 +34,9 @@ fn clone<T: Clone>(t: &T) -> T { t.clone() }\n fn main() {\n     let i1 = &Cell::new(0);\n     let i2 = &Cell::new(1);\n-    let r1 = vec!(box r { i: i1 });\n-    let r2 = vec!(box r { i: i2 });\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let r1 = vec!(Box::new(r { i: i1 }));\n+    let r2 = vec!(Box::new(r { i: i2 }));\n     f(clone(&r1), clone(&r2));\n     //~^ ERROR the trait `core::clone::Clone` is not implemented for the type\n     //~^^ ERROR the trait `core::clone::Clone` is not implemented for the type"}, {"sha": "448e157a251b211494910338d7a26a639e0c5ff1", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -60,7 +60,7 @@ fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n \n fn main() {\n     some_generic_fun(0.5f64, 10);\n-    some_generic_fun(&29, box 110);\n+    some_generic_fun(&29, Box::new(110));\n }\n \n fn zzz() { () }"}, {"sha": "4d0f7c29cb9df4ead4e9e10ff50fb7c2e2d7e386", "filename": "src/test/run-fail/panic-macro-any-wrapped.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-any-wrapped.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,9 +10,6 @@\n \n // error-pattern:panicked at 'Box<Any>'\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn main() {\n-    panic!(box 612_i64);\n+    panic!(Box::new(612_i64));\n }"}, {"sha": "83b2bb91f0073a59ba3418da547d8df276e47677", "filename": "src/test/run-fail/unique-panic.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-fail%2Funique-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-fail%2Funique-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funique-panic.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,7 +10,4 @@\n \n // error-pattern: panic\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n-fn main() { box panic!(); }\n+fn main() { Box::new(panic!()); }"}, {"sha": "f4ba789d6bf7be1c92b6bb1b7e2114c4936aae4f", "filename": "src/test/run-fail/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-unique.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,14 +10,11 @@\n \n // error-pattern:fail\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn failfn() {\n     panic!();\n }\n \n fn main() {\n-    box 0;\n+    Box::new(0);\n     failfn();\n }"}, {"sha": "7d94f4c7b172a0b09be5dbf7727cb78351db7a6e", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -245,9 +245,10 @@ fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n     let x = 32.0f32;\n     let _ = (x + ((x * x) + 1.0).sqrt()).ln();\n \n-    let s: Box<SomeTrait> = box some_fields {field1: 43};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let s: Box<SomeTrait> = Box::new(some_fields {field1: 43});\n     let s2: Box<some_fields> =  box some_fields {field1: 43};\n-    let s3 = box nofields;\n+    let s3: Box<_> = box nofields;\n \n     s.Method(43);\n     s3.Method(43);\n@@ -282,7 +283,7 @@ pub struct blah {\n }\n \n fn main() { // foo\n-    let s = box some_fields {field1: 43};\n+    let s: Box<_> = box some_fields {field1: 43};\n     hello((43, \"a\".to_string()), *s);\n     sub::sub2::hello();\n     sub2::sub3::hello();"}, {"sha": "d051b7b491b946d775b677ca982c4e7fba40dc1a", "filename": "src/test/run-pass-valgrind/dst-dtor-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n static mut DROP_RAN: bool = false;\n \n struct Foo;\n@@ -28,7 +26,8 @@ struct Fat<T: ?Sized> {\n \n pub fn main() {\n     {\n-        let _x: Box<Fat<Trait>> = box Fat { f: Foo };\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let _x: Box<Fat<Trait>> = Box::<Fat<Foo>>::new(Fat { f: Foo });\n     }\n     unsafe {\n         assert!(DROP_RAN);"}, {"sha": "2cb5f77fdc3f3b0e7385a08478c60d6d2def0862", "filename": "src/test/run-pass-valgrind/dst-dtor-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n-\n static mut DROP_RAN: int = 0;\n \n struct Foo;\n@@ -25,7 +23,8 @@ struct Fat<T: ?Sized> {\n \n pub fn main() {\n     {\n-        let _x: Box<Fat<[Foo]>> = box Fat { f: [Foo, Foo, Foo] };\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let _x: Box<Fat<[Foo]>> = Box::<Fat<[Foo; 3]>>::new(Fat { f: [Foo, Foo, Foo] });\n     }\n     unsafe {\n         assert!(DROP_RAN == 3);"}, {"sha": "c52e04322e911b24ce1e881e0a119c3f3d968243", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,15 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n #[derive(PartialEq, Debug)]\n struct Point { x : int }\n \n pub fn main() {\n     assert_eq!(14,14);\n     assert_eq!(\"abc\".to_string(),\"abc\".to_string());\n-    assert_eq!(box Point{x:34},box Point{x:34});\n+    assert_eq!(Box::new(Point{x:34}),Box::new(Point{x:34}));\n     assert_eq!(&Point{x:34},&Point{x:34});\n }"}, {"sha": "941e9a84538025b34d0b0b3e030cee1d90449a7a", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -25,6 +25,7 @@ fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=int>>) -> int {\n \n fn main() {\n     let v = vec!(1, 2, 3, 4, 5, 6);\n-    let r = pairwise_sub(box v.into_iter());\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let r = pairwise_sub(Box::new(v.into_iter()));\n     assert_eq!(r, 9);\n }"}, {"sha": "8a9325aecb1438832904b9deb3b6990dafdb91dd", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -17,12 +17,21 @@ use std::fmt::Debug;\n // rvalue expressions to be unsized. See #20169 for more information.\n \n pub fn main() {\n-    let _: Box<[int]> = box { [1, 2, 3] };\n-    let _: Box<[int]> = box if true { [1, 2, 3] } else { [1, 3, 4] };\n-    let _: Box<[int]> = box match true { true => [1, 2, 3], false => [1, 3, 4] };\n-    let _: Box<Fn(int) -> _> = box { |x| (x as u8) };\n-    let _: Box<Debug> = box if true { false } else { true };\n-    let _: Box<Debug> = box match true { true => 'a', false => 'b' };\n+    // FIXME #22405: We cannot infer the type `Box<[int; k]>` for\n+    // the r-value expression from the context `Box<[int]>`, and\n+    // therefore the `box EXPR` desugaring breaks down.\n+    //\n+    // One could reasonably claim that the `box EXPR` desugaring is\n+    // effectively regressing half of Issue #20169. Hopefully we will\n+    // eventually fix that, at which point the `Box::new` calls below\n+    // should be replaced wth uses of `box`.\n+\n+    let _: Box<[int]> = Box::new({ [1, 2, 3] });\n+    let _: Box<[int]> = Box::new(if true { [1, 2, 3] } else { [1, 3, 4] });\n+    let _: Box<[int]> = Box::new(match true { true => [1, 2, 3], false => [1, 3, 4] });\n+    let _: Box<Fn(int) -> _> = Box::new({ |x| (x as u8) });\n+    let _: Box<Debug> = Box::new(if true { false } else { true });\n+    let _: Box<Debug> = Box::new(match true { true => 'a', false => 'b' });\n \n     let _: &[int] = &{ [1, 2, 3] };\n     let _: &[int] = &if true { [1, 2, 3] } else { [1, 3, 4] };\n@@ -36,6 +45,6 @@ pub fn main() {\n \n     let _: Vec<Box<Fn(int) -> _>> = vec![\n         Box::new(|x| (x as u8)),\n-        box |x| (x as i16 as u8),\n+        Box::new(|x| (x as i16 as u8)),\n     ];\n }"}, {"sha": "3a64f53dbb01e4ef7d76a4b230af19904f5b845b", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,9 +11,6 @@\n // Make sure const bounds work on things, and test that a few types\n // are const.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn foo<T: Sync>(x: T) -> T { x }\n \n struct F { field: int }\n@@ -25,5 +22,5 @@ pub fn main() {\n     foo(F{field: 42});\n     foo((1, 2_usize));\n     foo(@1);*/\n-    foo(box 1);\n+    foo(Box::new(1));\n }"}, {"sha": "4d157f64fb9eda85553d93f8141692b990783a73", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -20,6 +20,7 @@ struct A {\n \n pub fn main() {\n     let a: A = Default::default();\n-    let b: Box<[_]> = box [];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let b: Box<[_]> = Box::<[bool; 0]>::new([]);\n     assert_eq!(a.foo, b);\n }"}, {"sha": "454156b4c9e3fa25b9c0ddcbfff14a15f9738afd", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -23,7 +23,8 @@ struct A {\n }\n \n fn main() {\n-    let obj = A { foo: box [true, false] };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let obj = A { foo: Box::new([true, false]) };\n     let s = json::encode(&obj).unwrap();\n     let obj2: A = json::decode(&s).unwrap();\n     assert!(obj.foo == obj2.foo);"}, {"sha": "03c93d3ab949b1efa06265c00e3989819f0b0bb1", "filename": "src/test/run-pass/deriving-eq-ord-boxed-slice.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n #[derive(PartialEq, PartialOrd, Eq, Ord)]\n struct Foo(Box<[u8]>);\n \n pub fn main() {\n-    let a = Foo(box [0, 1, 2]);\n-    let b = Foo(box [0, 1, 2]);\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let a = Foo(Box::new([0, 1, 2]));\n+    let b = Foo(Box::new([0, 1, 2]));\n     assert!(a == b);\n     println!(\"{}\", a != b);\n     println!(\"{}\", a < b);"}, {"sha": "33548d5e298cd16600594173574b8549a810dc42", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,9 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n use std::ops::{Deref, DerefMut};\n \n pub struct Arr {\n@@ -41,6 +38,7 @@ pub fn foo(arr: &mut Arr) {\n }\n \n fn main() {\n-    let mut a = Arr { ptr: box [1, 2, 3] };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let mut a = Arr { ptr: Box::new([1, 2, 3]) };\n     foo(&mut a);\n }"}, {"sha": "147a27afa80ed69b683fcc0a59d994675d6c307c", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,9 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n use std::ops::Deref;\n \n pub struct Arr {\n@@ -36,6 +33,7 @@ pub fn foo(arr: &Arr) {\n }\n \n fn main() {\n-    let a = Arr { ptr: box [1, 2, 3] };\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let a = Arr { ptr: Box::new([1, 2, 3]) };\n     foo(&a);\n }"}, {"sha": "15558414bf58ebeeffc68cb9b478e2dcf218b0c2", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -115,7 +115,7 @@ pub fn main() {\n     foo3(f5);\n \n     // Box.\n-    let f1 = box [1, 2, 3];\n+    let f1 = Box::new([1, 2, 3]);\n     assert!((*f1)[1] == 2);\n     let f2: Box<[int]> = f1;\n     assert!((*f2)[1] == 2);\n@@ -125,6 +125,9 @@ pub fn main() {\n     foo(&*f1);\n     let f2 : Box<Fat<[int]>> = f1;\n     foo(&*f2);\n-    let f3 : Box<Fat<[int]>> = box Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] };\n+\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let f3 : Box<Fat<[int]>> =\n+        Box::<Fat<[_; 3]>>::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f3);\n }"}, {"sha": "6590a8e1847dca828bc8446200ddeff140a5bae2", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -95,7 +95,9 @@ pub fn main() {\n     assert!(f6.ptr.to_bar() == Bar);\n \n     // &*\n-    let f7: Box<ToBar> = box Bar1 {f :42};\n+    //\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let f7: Box<ToBar> = Box::new(Bar1 {f :42});\n     bar(&*f7);\n \n     // Deep nesting"}, {"sha": "0459206c5b910854504bfeaa5227e69079d0a479", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,18 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n pub fn main() {\n-    assert!(Some(box() ()).is_some());\n+    assert!(Some(Box::new(())).is_some());\n \n-    let xs: Box<[()]> = box [];\n+    let xs: Box<[()]> = Box::<[(); 0]>::new([]);\n     assert!(Some(xs).is_some());\n \n     struct Foo;\n-    assert!(Some(box Foo).is_some());\n+    assert!(Some(Box::new(Foo)).is_some());\n \n-    let ys: Box<[Foo]> = box [];\n+    let ys: Box<[Foo]> = Box::<[Foo; 0]>::new([]);\n     assert!(Some(ys).is_some());\n }"}, {"sha": "f56d8843acd3fae7fc37fc4ecdca227b8a064f68", "filename": "src/test/run-pass/empty-allocation-rvalue-non-null.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-rvalue-non-null.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    let x = *box() ();\n+    let x = *Box::new(());\n }"}, {"sha": "81c4054d0091013a9d9ff2fccddb52e32f327965", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n /**\n@@ -61,7 +60,8 @@ mod map_reduce {\n         }\n \n         let ctrl_clone = ctrl.clone();\n-        ::map(input, box |a,b| emit(&mut intermediates, ctrl.clone(), a, b) );\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        ::map(input, Box::new(|a,b| emit(&mut intermediates, ctrl.clone(), a, b)));\n         ctrl_clone.send(ctrl_proto::mapper_done).unwrap();\n     }\n "}, {"sha": "f4daf9a4f629789696ce65177ad9f18ea75235b3", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n // Test that `Fn(int) -> int + 'static` parses as `(Fn(int) -> int) +\n // 'static` and not `Fn(int) -> (int + 'static)`. The latter would\n // cause a compilation error. Issue #18772.\n \n fn adder(y: int) -> Box<Fn(int) -> int + 'static> {\n-    box move |x| y + x\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    Box::new(move |x| y + x)\n }\n \n fn main() {}"}, {"sha": "c67ce92ee0a9acebcc4bb53e0b876e0fd3728656", "filename": "src/test/run-pass/issue-11205.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11205.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n+\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n trait Foo { fn dummy(&self) { } }\n impl Foo for int {}\n@@ -39,16 +39,16 @@ fn main() {\n     let r = &1;\n     foog(x, &[r]);\n \n-    let x: [Box<Foo>; 2] = [box 1, box 2];\n+    let x: [Box<Foo>; 2] = [Box::new(1), Box::new(2)];\n     bar(x);\n-    bar([box 1, box 2]);\n+    bar([Box::new(1), Box::new(2)]);\n \n-    let x: &[Box<Foo>] = &[box 1, box 2];\n+    let x: &[Box<Foo>] = &[Box::new(1), Box::new(2)];\n     bars(x);\n-    bars(&[box 1, box 2]);\n+    bars(&[Box::new(1), Box::new(2)]);\n \n-    let x: &[Box<Foo>] = &[box 1, box 2];\n-    foog(x, &[box 1]);\n+    let x: &[Box<Foo>] = &[Box::new(1), Box::new(2)];\n+    foog(x, &[Box::new(1)]);\n \n     struct T<'a> {\n         t: [&'a (Foo+'a); 2]\n@@ -85,9 +85,9 @@ fn main() {\n         t: &'a [Box<Foo+'static>]\n     }\n     let _n = M {\n-        t: &[box 1, box 2]\n+        t: &[Box::new(1), Box::new(2)]\n     };\n-    let x: [Box<Foo>; 2] = [box 1, box 2];\n+    let x: [Box<Foo>; 2] = [Box::new(1), Box::new(2)];\n     let _n = M {\n         t: &x\n     };"}, {"sha": "4b2b3e8702427fc8725405d37e887b1831faff2f", "filename": "src/test/run-pass/issue-11677.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11677.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n \n // this code used to cause an ICE\n \n@@ -28,5 +26,6 @@ impl X<int> for F {\n }\n \n fn main() {\n-  S {f: box F, g: box F};\n+  // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+  S {f: Box::new(F), g: Box::new(F) };\n }"}, {"sha": "56d1d3599c7fde3dcb7e3cfd8a49c5a88cc46d2f", "filename": "src/test/run-pass/issue-12744.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12744.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn main() {\n-    fn test() -> Box<std::any::Any + 'static> { box 1 }\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    fn test() -> Box<std::any::Any + 'static> { Box::new(1) }\n     println!(\"{:?}\", test())\n }"}, {"sha": "96e2a0dc48539c71f620dfdf434145e038d9d119", "filename": "src/test/run-pass/issue-13808.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13808.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n struct Foo<'a> {\n     listener: Box<FnMut() + 'a>,\n }\n \n impl<'a> Foo<'a> {\n     fn new<F>(listener: F) -> Foo<'a> where F: FnMut() + 'a {\n-        Foo { listener: box listener }\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        Foo { listener: Box::new(listener) }\n     }\n }\n "}, {"sha": "5924aa44d4d63c672dc701041d446289fdd8cfc6", "filename": "src/test/run-pass/issue-14589.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14589.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,13 +11,12 @@\n // All 3 expressions should work in that the argument gets\n // coerced to a trait object\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n fn main() {\n-    send::<Box<Foo>>(box Output(0));\n-    Test::<Box<Foo>>::foo(box Output(0));\n-    Test::<Box<Foo>>::new().send(box Output(0));\n+    send::<Box<Foo>>(Box::new(Output(0)));\n+    Test::<Box<Foo>>::foo(Box::new(Output(0)));\n+    Test::<Box<Foo>>::new().send(Box::new(Output(0)));\n }\n \n fn send<T>(_: T) {}"}, {"sha": "fbf08ab564d3510d9ba11ed64340cee2d1f47a3d", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n trait Matcher {\n     fn next_match(&mut self) -> Option<(uint, uint)>;\n }\n@@ -32,9 +29,10 @@ trait IntoMatcher<'a, T> {\n \n impl<'a, 'b, F> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for F where F: FnMut(char) -> bool + 'b {\n     fn into_matcher(self, s: &'a str) -> CharPredMatcher<'a, 'b> {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         CharPredMatcher {\n             str: s,\n-            pred: box self,\n+            pred: Box::new(self),\n         }\n     }\n }"}, {"sha": "5b093d16cbf838a3f7c0a5b0735a3b3fcdef4f3d", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n fn match_on_local() {\n-    let mut foo = Some(box 5);\n+    let mut foo: Option<Box<_>> = Some(box 5);\n     match foo {\n         None => {},\n         Some(x) => {\n@@ -33,7 +33,7 @@ fn match_on_arg(mut foo: Option<Box<i32>>) {\n }\n \n fn match_on_binding() {\n-    match Some(box 7) {\n+    match Some(Box::new(7)) {\n         mut foo => {\n             match foo {\n                 None => {},\n@@ -47,7 +47,7 @@ fn match_on_binding() {\n }\n \n fn match_on_upvar() {\n-    let mut foo = Some(box 8i32);\n+    let mut foo: Option<Box<_>> = Some(box 8i32);\n     let f = move|| {\n         match foo {\n             None => {},"}, {"sha": "786c701a0427bf0808c321b14002c872c25f1c4e", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,7 +11,6 @@\n // ignore-pretty\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct Parser<'a, I, O> {\n@@ -20,13 +19,14 @@ struct Parser<'a, I, O> {\n \n impl<'a, I: 'a, O: 'a> Parser<'a, I, O> {\n     fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         Parser {\n-            parse: box move |x: I| {\n+            parse: Box::new(move |x: I| {\n                 match (self.parse)(x) {\n                     Ok(r) => (rhs.parse)(r),\n                     Err(e) => Err(e)\n                 }\n-            }\n+            })\n         }\n     }\n }"}, {"sha": "497361969bfc3cffa1eddd796358c4c8a496eb05", "filename": "src/test/run-pass/issue-17734.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-17734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-17734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17734.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,16 +10,15 @@\n \n // Test that generating drop glue for Box<str> doesn't ICE\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn f(s: Box<str>) -> Box<str> {\n     s\n }\n \n fn main() {\n     // There is currently no safe way to construct a `Box<str>`, so improvise\n-    let box_arr: Box<[u8]> = box ['h' as u8, 'e' as u8, 'l' as u8, 'l' as u8, 'o' as u8];\n+    //\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let box_arr: Box<[u8]> = Box::new(['h' as u8, 'e' as u8, 'l' as u8, 'l' as u8, 'o' as u8]);\n     let box_str: Box<str> = unsafe { std::mem::transmute(box_arr) };\n     assert_eq!(&*box_str, \"hello\");\n     f(box_str);"}, {"sha": "2011b87e731021a96761aaea10b2d56ff5d963fd", "filename": "src/test/run-pass/issue-18425.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18425.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,9 +11,6 @@\n // Check that trans doesn't ICE when translating an array repeat\n // expression with a count of 1 and a non-Copy element type.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn main() {\n-    let _ = [box 1_usize; 1];\n+    let _ = [Box::new(1_usize); 1];\n }"}, {"sha": "9ebd96a685eafefbccb7c421098bee23a51cc7ba", "filename": "src/test/run-pass/issue-20575.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20575.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,10 +10,9 @@\n \n // Test that overloaded calls work with zero arity closures\n \n-#![feature(box_syntax)]\n-\n fn main() {\n-    let functions: [Box<Fn() -> Option<()>>; 1] = [box || None];\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n \n     let _: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n }"}, {"sha": "ae146d8d35356960d45f15ec5ec1642f2e870bb4", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,8 +11,6 @@\n //\n // ignore-lexer-test FIXME #15883\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unsafe_destructor)]\n \n pub type Task = int;\n@@ -52,11 +50,11 @@ pub mod pipes {\n \n     pub fn packet<T:Send>() -> *const packet<T> {\n         unsafe {\n-            let p: *const packet<T> = mem::transmute(box Stuff{\n+            let p: *const packet<T> = mem::transmute(Box::new(Stuff{\n                 state: empty,\n                 blocked_task: None::<Task>,\n                 payload: None::<T>\n-            });\n+            }));\n             p\n         }\n     }"}, {"sha": "0784c8be883c84dd39abde8723b1fd19404c1282", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n type Connection = Box<FnMut(Vec<u8>) + 'static>;\n \n fn f() -> Option<Connection> {\n-    let mock_connection: Connection = box |_| {};\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let mock_connection: Connection = Box::new(|_| {});\n     Some(mock_connection)\n }\n "}, {"sha": "e039be058defec1a6f6d1502da16eeda8172bcc5", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,7 +11,6 @@\n // rustc --test ignores2.rs && ./ignores2\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::old_path::{Path};\n@@ -23,9 +22,10 @@ type rsrc_loader = Box<FnMut(&Path) -> (result::Result<String, String>) + 'stati\n \n fn tester()\n {\n-    let mut loader: rsrc_loader = box move|_path| {\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let mut loader: rsrc_loader = Box::new(move|_path| {\n         result::Result::Ok(\"more blah\".to_string())\n-    };\n+    });\n \n     let path = old_path::Path::new(\"blah\");\n     assert!(loader(&path).is_ok());"}, {"sha": "28e44536892a5a5d1be7919b0e4561bfb2e2a6b0", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n \n use std::thread::Thread;\n use std::sync::mpsc::Sender;\n@@ -27,8 +26,8 @@ fn foo(name: String, samples_chan: Sender<Msg>) {\n     let _t = Thread::spawn(move|| {\n         let mut samples_chan = samples_chan;\n \n-        // `box() (...)` syntax is needed to make pretty printer converge in one try:\n-        let callback: SamplesFn = box() (move |buffer| {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let callback: SamplesFn = Box::new(move |buffer| {\n             for i in 0_usize..buffer.len() {\n                 println!(\"{}: {}\", i, buffer[i])\n             }"}, {"sha": "562e2b68af174391bd71ddbf093f919bb22445db", "filename": "src/test/run-pass/issue-6117.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-6117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6117.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n enum Either<T, U> { Left(T), Right(U) }\n \n pub fn main() {\n-    match Either::Left(box 17) {\n+    match Either::Left(Box::new(17)) {\n         Either::Right(()) => {}\n         _ => {}\n     }"}, {"sha": "d4d2603bfe2449b2626257b4e9504bcbdbe550b2", "filename": "src/test/run-pass/issue-8498.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8498.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,26 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n pub fn main() {\n-    match &[(box 5,box 7)] {\n+    match &[(Box::new(5),Box::new(7))] {\n         ps => {\n            let (ref y, _) = ps[0];\n            assert!(**y == 5);\n         }\n     }\n \n-    match Some(&[(box 5,)]) {\n+    match Some(&[(Box::new(5),)]) {\n         Some(ps) => {\n            let (ref y,) = ps[0];\n            assert!(**y == 5);\n         }\n         None => ()\n     }\n \n-    match Some(&[(box 5,box 7)]) {\n+    match Some(&[(Box::new(5),Box::new(7))]) {\n         Some(ps) => {\n            let (ref y, ref z) = ps[0];\n            assert!(**y == 5);"}, {"sha": "74ddb990c31cb839928d1da2fffdd1a64cb0a06c", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -17,11 +17,12 @@\n struct A { a: Box<isize> }\n \n fn foo() -> Box<FnMut() -> isize + 'static> {\n-    let k = box 22;\n+    let k: Box<_> = box 22;\n     let _u = A {a: k.clone()};\n     // FIXME(#16640) suffix in `22_isize` suffix shouldn't be necessary\n     let result  = || 22_isize;\n-    box result\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    Box::new(result)\n }\n \n pub fn main() {"}, {"sha": "039e53cab8044805db0dd51f51c63c482867bcd0", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,10 +11,8 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n-fn unique() -> Box<FnMut()+'static> { return box || (); }\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+fn unique() -> Box<FnMut()+'static> { return Box::new(|| ()); }\n \n pub fn main() {\n }"}, {"sha": "b7216c87c30bbc22a7f174ca07c3f25ea4447d61", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,10 +11,8 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n-fn unique() -> Box<FnMut()+'static> { box || () }\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+fn unique() -> Box<FnMut()+'static> { Box::new(|| ()) }\n \n pub fn main() {\n }"}, {"sha": "6436165968d678801130a581164d5a9e85b9f6fa", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -22,9 +22,10 @@ struct Point {\n }\n \n pub fn main() {\n-    let box_5 = box 5_usize;\n+    let box_5: Box<_> = box 5_usize;\n     assert_eq!(Rc::new(5_usize).to_uint(), Some(5));\n-    assert_eq!((box &box &Rc::new(box box &box_5)).to_uint(), Some(5));\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    assert_eq!((Box::new(&Box::new(&Rc::new(Box::new(Box::new(&box_5)))))).to_uint(), Some(5));\n     let point = Rc::new(Point {x: 2, y: 4});\n     assert_eq!(point.x, 2);\n     assert_eq!(point.y, 4);"}, {"sha": "bb1694be5e29b7765b8d2ae00449fbb84fa948a0", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::string::String;\n@@ -23,7 +20,7 @@ struct Point {\n \n pub fn main() {\n     assert_eq!(*Rc::new(5), 5);\n-    assert_eq!(***Rc::new(box box 5), 5);\n+    assert_eq!(***Rc::new(Box::new(Box::new(5))), 5);\n     assert_eq!(*Rc::new(Point {x: 2, y: 4}), Point {x: 2, y: 4});\n \n     let i = Rc::new(RefCell::new(2));"}, {"sha": "9be6b212a3caabd0b7259800b96999d68cf5ceee", "filename": "src/test/run-pass/owned-implies-static.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn f<T: 'static>(_x: T) {}\n \n pub fn main() {\n-    f(box 5);\n+    f(Box::new(5));\n }"}, {"sha": "3704fc1d8d1a30dcec80b0b287195eb9d94d2963", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct closure_box<'a> {\n@@ -25,7 +24,8 @@ pub fn main() {\n     assert_eq!(i, 3);\n     {\n         let cl = || i += 1;\n-        let mut cl_box = box_it(box cl);\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        let mut cl_box = box_it(Box::new(cl));\n         cl_box.cl.call_mut(());\n     }\n     assert_eq!(i, 4);"}, {"sha": "0057a51012dd0bdaef6fdeda53b048a37e14aaf0", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -13,7 +13,8 @@\n #![allow(dead_assignment)]\n #![allow(unused_variable)]\n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n+\n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n // Should pass region checking.\n fn ok(f: Box<FnMut(&uint)>) {\n@@ -23,14 +24,14 @@ fn ok(f: Box<FnMut(&uint)>) {\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: Box<for<'r> FnMut(&'r uint)> = box |x| { };\n+    let mut g: Box<for<'r> FnMut(&'r uint)> = Box::new(|x| { });\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n fn ok_inferred(f: Box<FnMut(&uint)>) {\n-    let mut g: Box<for<'r> FnMut(&'r uint)> = box |_| {};\n+    let mut g: Box<for<'r> FnMut(&'r uint)> = Box::new(|_| {});\n     g = f;\n }\n "}, {"sha": "1ad96d4bc55933e7c1d783b5e777027dda87ca0a", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -30,7 +30,8 @@ struct Foo<'a,'tcx:'a> {\n \n impl<'a,'tcx> Foo<'a,'tcx> {\n     fn bother(&mut self) -> int {\n-        self.elaborate_bounds(box |this| {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        self.elaborate_bounds(Box::new(|this| {\n             // (*) Here: type of `this` is `&'f0 Foo<&'f1, '_2>`,\n             // where `'f0` and `'f1` are fresh, free regions that\n             // result from the bound regions on the closure, and `'2`\n@@ -44,7 +45,7 @@ impl<'a,'tcx> Foo<'a,'tcx> {\n             // `region_inference.rs` file (and the `givens` field, in\n             // particular) for more details.\n             this.foo()\n-        })\n+        }))\n     }\n \n     fn foo(&mut self) -> int {"}, {"sha": "1bcde77261b930d9ada9754a9a7e290f19bb7e61", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -25,6 +25,7 @@ fn call_static_closure(mut cl: closure_box<'static>) {\n }\n \n pub fn main() {\n-    let cl_box = box_it(box || println!(\"Hello, world!\"));\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let cl_box = box_it(Box::new(|| println!(\"Hello, world!\")));\n     call_static_closure(cl_box);\n }"}, {"sha": "03971668182acd98ff8d1607b2f6dad8033dfa98", "filename": "src/test/run-pass/show-boxed-slice.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n #[derive(Debug)]\n struct Foo(Box<[u8]>);\n \n pub fn main() {\n-    println!(\"{:?}\", Foo(box [0, 1, 2]));\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    println!(\"{:?}\", Foo(Box::new([0, 1, 2])));\n }"}, {"sha": "cf23785b844482d226a02b63ee008f5042505076", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -104,9 +104,10 @@ fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n }\n fn check_names(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n     for pet in &*arc {\n-        pet.name(box |name| {\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        pet.name(Box::new(|name| {\n             assert!(name.as_bytes()[0] == 'a' as u8 && name.as_bytes()[1] == 'l' as u8);\n-        })\n+        }))\n     }\n }\n fn check_pedigree(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {"}, {"sha": "1565ccfe459d26a11b8fa25a5c6faaee5596d53b", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n trait Trait<T> {\n     fn f(&self, x: T);\n }\n@@ -29,7 +26,8 @@ impl Trait<&'static str> for Struct {\n \n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    let b: Box<Trait<&'static str>> = box a;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let b: Box<Trait<&'static str>> = Box::new(a);\n     b.f(\"Mary\");\n     let c: &Trait<&'static str> = &a;\n     c.f(\"Joe\");"}, {"sha": "6db7113b0504cb169b1f350b984fc43fc81ba7c4", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -33,14 +33,16 @@ fn foo(mut a: Box<Writer>) {\n     a.write(b\"Hello\\n\");\n }\n \n+// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+\n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    let b: Box<Trait> = box a;\n+    let b: Box<Trait> = Box::new(a);\n     b.f();\n     let c: &Trait = &a;\n     c.f();\n \n     let out = old_io::stdout();\n-    foo(box out);\n+    foo(Box::new(out));\n }\n "}, {"sha": "650688dd9088fc9d8da4f90ff55c98233e0111d8", "filename": "src/test/run-pass/traits-conditional-dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-conditional-dispatch.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -35,5 +35,5 @@ fn main() {\n     assert_eq!(get_it(&1_u32), 1_u32);\n     assert_eq!(get_it(&1_u16), 1_u16);\n     assert_eq!(get_it(&Some(1_u16)), Some(1_u16));\n-    assert_eq!(get_it(&box 1), box 1);\n+    assert_eq!(get_it(&Box::new(1)), Box::new(1));\n }"}, {"sha": "52311544297ae1d52149caa20415d55f7a76ecdf", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -11,13 +11,13 @@\n // Test that the call operator autoderefs when calling to an object type.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n \n fn make_adder(x: int) -> Box<FnMut(int)->int + 'static> {\n-    box move |y| { x + y }\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    Box::new(move |y| { x + y })\n }\n \n pub fn main() {"}, {"sha": "a34799fdcc543b8adc9a1720da70be8ccf8a326a", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n \n fn make_adder(x: int) -> Box<FnMut(int)->int + 'static> {\n-    box move |y| { x + y }\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    Box::new(move |y| { x + y })\n }\n \n pub fn main() {"}, {"sha": "056ae63b68488d5773ea9fb23d7a484744790367", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -17,7 +17,8 @@\n \n fn main(){\n     fn bar<'a, T:Clone+'a> (t: T) -> Box<FnMut()->T + 'a> {\n-        box move || t.clone()\n+        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+        Box::new(move || t.clone())\n     }\n \n     let mut f = bar(42_u32);"}, {"sha": "16a55ab550d2fcd46d501ae729bd98110af418de", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -15,10 +15,11 @@\n #![feature(unboxed_closures)]\n \n fn main() {\n-    let task: Box<Fn(int) -> int> = box |x| x;\n+    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    let task: Box<Fn(int) -> int> = Box::new(|x| x);\n     task.call((0, ));\n \n-    let mut task: Box<FnMut(int) -> int> = box |x| x;\n+    let mut task: Box<FnMut(int) -> int> = Box::new(|x| x);\n     task(0);\n \n     call(|x| x, 22);"}, {"sha": "93614e86c7303fb0cebe3aa5ddf3352126599a97", "filename": "src/test/run-pass/unique-match-discrim.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5bcb14adb71900a99f06b92485de7e019734c2/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-match-discrim.rs?ref=0d5bcb14adb71900a99f06b92485de7e019734c2", "patch": "@@ -10,11 +10,8 @@\n \n // Issue #961\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n fn altsimple() {\n-    match box true {\n+    match Box::new(true) {\n       _ => { }\n     }\n }"}]}