{"sha": "7a98fd412425ed39e8737e63a35da96202e43e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOThmZDQxMjQyNWVkMzllODczN2U2M2EzNWRhOTYyMDJlNDNlNTY=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-05-21T23:25:16Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-05-21T23:25:16Z"}, "message": "Small refactoring in `liveness.rs`", "tree": {"sha": "786572a4916a72c11801fde6ce89199b522f6480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/786572a4916a72c11801fde6ce89199b522f6480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a98fd412425ed39e8737e63a35da96202e43e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a98fd412425ed39e8737e63a35da96202e43e56", "html_url": "https://github.com/rust-lang/rust/commit/7a98fd412425ed39e8737e63a35da96202e43e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a98fd412425ed39e8737e63a35da96202e43e56/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bcc7591142c4bad5cbe290df28ded0e80e6b870", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcc7591142c4bad5cbe290df28ded0e80e6b870", "html_url": "https://github.com/rust-lang/rust/commit/2bcc7591142c4bad5cbe290df28ded0e80e6b870"}], "stats": {"total": 72, "additions": 21, "deletions": 51}, "files": [{"sha": "413fb32b70de3a03708791f29822ec7cf11781ac", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 21, "deletions": 51, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7a98fd412425ed39e8737e63a35da96202e43e56/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a98fd412425ed39e8737e63a35da96202e43e56/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=7a98fd412425ed39e8737e63a35da96202e43e56", "patch": "@@ -977,62 +977,13 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Call(ref f, ref args) => {\n-                let m = self.ir.tcx.parent_module(expr.hir_id).to_def_id();\n-                let ty = self.typeck_results.expr_ty(expr);\n-                let succ = if self.ir.tcx.is_ty_uninhabited_from(m, ty, self.param_env) {\n-                    if let LiveNodeKind::ExprNode(succ_span, succ_id) = self.ir.lnks[succ] {\n-                        self.warn_about_unreachable(\n-                            expr.span,\n-                            ty,\n-                            succ_span,\n-                            succ_id,\n-                            \"expression\",\n-                        );\n-                    } else if let LiveNodeKind::VarDefNode(succ_span, succ_id) = self.ir.lnks[succ]\n-                    {\n-                        self.warn_about_unreachable(\n-                            expr.span,\n-                            ty,\n-                            succ_span,\n-                            succ_id,\n-                            \"definition\",\n-                        );\n-                    }\n-                    self.exit_ln\n-                } else {\n-                    succ\n-                };\n+                let succ = self.check_is_ty_uninhabited(expr, succ);\n                 let succ = self.propagate_through_exprs(args, succ);\n                 self.propagate_through_expr(&f, succ)\n             }\n \n             hir::ExprKind::MethodCall(.., ref args, _) => {\n-                let m = self.ir.tcx.parent_module(expr.hir_id).to_def_id();\n-                let ty = self.typeck_results.expr_ty(expr);\n-                let succ = if self.ir.tcx.is_ty_uninhabited_from(m, ty, self.param_env) {\n-                    if let LiveNodeKind::ExprNode(succ_span, succ_id) = self.ir.lnks[succ] {\n-                        self.warn_about_unreachable(\n-                            expr.span,\n-                            ty,\n-                            succ_span,\n-                            succ_id,\n-                            \"expression\",\n-                        );\n-                    } else if let LiveNodeKind::VarDefNode(succ_span, succ_id) = self.ir.lnks[succ]\n-                    {\n-                        self.warn_about_unreachable(\n-                            expr.span,\n-                            ty,\n-                            succ_span,\n-                            succ_id,\n-                            \"definition\",\n-                        );\n-                    }\n-                    self.exit_ln\n-                } else {\n-                    succ\n-                };\n-\n+                let succ = self.check_is_ty_uninhabited(expr, succ);\n                 self.propagate_through_exprs(args, succ)\n             }\n \n@@ -1305,6 +1256,25 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         ln\n     }\n \n+    fn check_is_ty_uninhabited(&mut self, expr: &Expr<'_>, succ: LiveNode) -> LiveNode {\n+        let ty = self.typeck_results.expr_ty(expr);\n+        let m = self.ir.tcx.parent_module(expr.hir_id).to_def_id();\n+        if self.ir.tcx.is_ty_uninhabited_from(m, ty, self.param_env) {\n+            match self.ir.lnks[succ] {\n+                LiveNodeKind::ExprNode(succ_span, succ_id) => {\n+                    self.warn_about_unreachable(expr.span, ty, succ_span, succ_id, \"expression\");\n+                }\n+                LiveNodeKind::VarDefNode(succ_span, succ_id) => {\n+                    self.warn_about_unreachable(expr.span, ty, succ_span, succ_id, \"definition\");\n+                }\n+                _ => {}\n+            };\n+            self.exit_ln\n+        } else {\n+            succ\n+        }\n+    }\n+\n     fn warn_about_unreachable(\n         &mut self,\n         orig_span: Span,"}]}