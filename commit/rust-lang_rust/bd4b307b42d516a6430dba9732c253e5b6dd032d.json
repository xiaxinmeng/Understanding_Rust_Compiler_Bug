{"sha": "bd4b307b42d516a6430dba9732c253e5b6dd032d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNGIzMDdiNDJkNTE2YTY0MzBkYmE5NzMyYzI1M2U1YjZkZDAzMmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-10T14:10:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-10T14:10:12Z"}, "message": "Support dylibs", "tree": {"sha": "007bec1a61069449f29471c0c6e2c58eacf94545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007bec1a61069449f29471c0c6e2c58eacf94545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd4b307b42d516a6430dba9732c253e5b6dd032d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4b307b42d516a6430dba9732c253e5b6dd032d", "html_url": "https://github.com/rust-lang/rust/commit/bd4b307b42d516a6430dba9732c253e5b6dd032d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd4b307b42d516a6430dba9732c253e5b6dd032d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3441f6b5ba642be41115a1e6d30392c13db151d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3441f6b5ba642be41115a1e6d30392c13db151d5", "html_url": "https://github.com/rust-lang/rust/commit/3441f6b5ba642be41115a1e6d30392c13db151d5"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "9d5ab22a7c6b770d1c0444b532e9532fb1b73a6d", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd4b307b42d516a6430dba9732c253e5b6dd032d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4b307b42d516a6430dba9732c253e5b6dd032d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bd4b307b42d516a6430dba9732c253e5b6dd032d", "patch": "@@ -267,7 +267,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                     drop_place.write_place_ref(fx, arg_place);\n                     match ty.sty {\n                         ty::Dynamic(..) => {\n-                            unimpl!(\"Drop for trait object\");\n+                            fx.tcx.sess.warn(\"Drop for trait object\");\n                         }\n                         _ => {\n                             let drop_fn_ty = drop_fn.ty(fx.tcx);"}, {"sha": "132b9e8b74cb59db364600874328f597ec536fc4", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd4b307b42d516a6430dba9732c253e5b6dd032d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4b307b42d516a6430dba9732c253e5b6dd032d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bd4b307b42d516a6430dba9732c253e5b6dd032d", "patch": "@@ -312,7 +312,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             let output_name = out_filename(sess, crate_type, &outputs, &res.crate_name.as_str());\n             match crate_type {\n                 CrateType::Rlib => link::link_rlib(sess, &res, output_name),\n-                CrateType::Executable => link::link_bin(sess, &res, &output_name),\n+                CrateType::Dylib | CrateType::Executable => {\n+                    link::link_natively(sess, crate_type, &res, &output_name);\n+                }\n                 _ => sess.fatal(&format!(\"Unsupported crate type: {:?}\", crate_type)),\n             }\n         }"}, {"sha": "b600413fad2325e67f135433558764b4e0973b48", "filename": "src/link.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bd4b307b42d516a6430dba9732c253e5b6dd032d/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4b307b42d516a6430dba9732c253e5b6dd032d/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=bd4b307b42d516a6430dba9732c253e5b6dd032d", "patch": "@@ -1,7 +1,10 @@\n+use std::ascii;\n+use std::char;\n use std::env;\n use std::fs::File;\n use std::io;\n use std::path::{Path, PathBuf};\n+use std::str;\n \n use tempfile::Builder as TempFileBuilder;\n \n@@ -65,13 +68,20 @@ pub(crate) fn link_rlib(sess: &Session, res: &CodegenResults, output_name: PathB\n     }\n }\n \n-pub(crate) fn link_bin(sess: &Session, codegen_results: &CodegenResults, out_filename: &Path) {\n+pub(crate) fn link_natively(\n+    sess: &Session,\n+    crate_type: CrateType,\n+    codegen_results: &CodegenResults,\n+    out_filename: &Path,\n+) {\n     let tmpdir = match TempFileBuilder::new().prefix(\"rustc\").tempdir() {\n         Ok(tmpdir) => tmpdir,\n         Err(err) => sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)),\n     };\n \n     let (linker, flavor) = linker_and_flavor(sess);\n+\n+    // The invocations of cc share some flags across platforms\n     let (pname, mut cmd) = get_linker(sess, &linker, flavor);\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n@@ -88,11 +98,16 @@ pub(crate) fn link_bin(sess: &Session, codegen_results: &CodegenResults, out_fil\n     }\n     cmd.args(&sess.opts.debugging_opts.pre_link_arg);\n \n-    for obj in &sess.target.target.options.pre_link_objects_exe {\n+    let pre_link_objects = if crate_type == config::CrateType::Executable {\n+        &sess.target.target.options.pre_link_objects_exe\n+    } else {\n+        &sess.target.target.options.pre_link_objects_dll\n+    };\n+    for obj in pre_link_objects {\n         cmd.arg(root.join(obj));\n     }\n \n-    if sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static() {\n         for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n             cmd.arg(root.join(obj));\n         }\n@@ -108,9 +123,9 @@ pub(crate) fn link_bin(sess: &Session, codegen_results: &CodegenResults, out_fil\n     }\n \n     {\n-        let target_cpu = \"x86_64-apple-darwin\"; //::llvm_util::target_cpu(sess);\n-        let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor, target_cpu);\n-        link_args(&mut *linker, flavor, sess, CrateType::Executable, tmpdir.path(),\n+        let target_cpu = ::target_lexicon::HOST.to_string();\n+        let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor, &target_cpu);\n+        link_args(&mut *linker, flavor, sess, crate_type, tmpdir.path(),\n                   out_filename, codegen_results);\n         cmd = linker.finalize();\n     }\n@@ -203,14 +218,24 @@ pub(crate) fn link_bin(sess: &Session, codegen_results: &CodegenResults, out_fil\n \n     match prog {\n         Ok(prog) => {\n+            fn escape_string(s: &[u8]) -> String {\n+                str::from_utf8(s).map(|s| s.to_owned())\n+                    .unwrap_or_else(|_| {\n+                        let mut x = \"Non-UTF-8 output: \".to_string();\n+                        x.extend(s.iter()\n+                                  .flat_map(|&b| ascii::escape_default(b))\n+                                  .map(char::from));\n+                        x\n+                    })\n+            }\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n                 sess.struct_err(&format!(\"linking with `{}` failed: {}\",\n                                          pname.display(),\n                                          prog.status))\n                     .note(&format!(\"{:?}\", &cmd))\n-                    .note(&String::from_utf8_lossy(&output))\n+                    .note(&escape_string(&output))\n                     .emit();\n                 sess.abort_if_errors();\n             }\n@@ -251,9 +276,8 @@ pub(crate) fn link_bin(sess: &Session, codegen_results: &CodegenResults, out_fil\n     if sess.target.target.options.is_like_osx &&\n         sess.opts.debuginfo != DebugInfo::None\n     {\n-        match Command::new(\"dsymutil\").arg(out_filename).output() {\n-            Ok(..) => {}\n-            Err(e) => sess.fatal(&format!(\"failed to run dsymutil: {}\", e)),\n+        if let Err(e) = Command::new(\"dsymutil\").arg(out_filename).output() {\n+            sess.fatal(&format!(\"failed to run dsymutil: {}\", e))\n         }\n     }\n }"}]}