{"sha": "02a24c8e2fd370041a24b7d93e8c3710b7b76015", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYTI0YzhlMmZkMzcwMDQxYTI0YjdkOTNlOGMzNzEwYjdiNzYwMTU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-11T04:28:42Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:05Z"}, "message": "Don't ICE on infinitely recursive types\n\n`evaluate_obligation` can only be run on types that are already valid.\nSo rustdoc still has to run typeck even though it doesn't care about the\nresult.", "tree": {"sha": "826bbca890b868214a69ff7ec56cd6745bfd813d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/826bbca890b868214a69ff7ec56cd6745bfd813d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02a24c8e2fd370041a24b7d93e8c3710b7b76015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02a24c8e2fd370041a24b7d93e8c3710b7b76015", "html_url": "https://github.com/rust-lang/rust/commit/02a24c8e2fd370041a24b7d93e8c3710b7b76015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02a24c8e2fd370041a24b7d93e8c3710b7b76015/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d0e8e2162a2e2be233a63ba5a8cbf3e19770b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0e8e2162a2e2be233a63ba5a8cbf3e19770b17", "html_url": "https://github.com/rust-lang/rust/commit/2d0e8e2162a2e2be233a63ba5a8cbf3e19770b17"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "992421dcd7abb4aee336f51863836266e8bbf8f4", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02a24c8e2fd370041a24b7d93e8c3710b7b76015/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/02a24c8e2fd370041a24b7d93e8c3710b7b76015/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=02a24c8e2fd370041a24b7d93e8c3710b7b76015", "patch": "@@ -4027,6 +4027,7 @@ name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n  \"itertools 0.8.0\",\n+ \"lazy_static\",\n  \"minifier\",\n  \"pulldown-cmark\",\n  \"rustc-rayon\","}, {"sha": "baceb13cc61413f3035bfbb72eb4558e534abb1d", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=02a24c8e2fd370041a24b7d93e8c3710b7b76015", "patch": "@@ -16,3 +16,4 @@ serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n tempfile = \"3\"\n itertools = \"0.8\"\n+lazy_static = \"1\""}, {"sha": "a77b177bd2864d2f7093ea578642fa109d441857", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=02a24c8e2fd370041a24b7d93e8c3710b7b76015", "patch": "@@ -364,6 +364,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         ..Options::default()\n     };\n \n+    lazy_static! {\n+        static ref EMPTY_MAP: FxHashSet<LocalDefId> = FxHashSet::default();\n+    }\n     let config = interface::Config {\n         opts: sessopts,\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n@@ -378,8 +381,13 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         lint_caps,\n         register_lints: None,\n         override_queries: Some(|_sess, local_providers, external_providers| {\n+            // Most lints will require typechecking, so just don't run them.\n             local_providers.lint_mod = |_, _| {};\n             external_providers.lint_mod = |_, _| {};\n+            local_providers.typeck_item_bodies = |_, _| {};\n+            // hack so that `used_trait_imports` won't try to call typeck_tables_of\n+            local_providers.used_trait_imports = |_, _| &EMPTY_MAP;\n+            // In case typeck does end up being called, don't ICE in case there were name resolution errors\n             local_providers.typeck_tables_of = move |tcx, def_id| {\n                 // Closures' tables come from their outermost function,\n                 // as they are part of the same \"inference environment\".\n@@ -439,6 +447,13 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).take();\n \n             global_ctxt.enter(|tcx| {\n+                // Some queries require that they only run on valid types:\n+                // https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425\n+                // Therefore typecheck this crate before running lints.\n+                // NOTE: this does not typeck item bodies or run the default rustc lints\n+                // (see `override_queries` in the `config`)\n+                let _ = rustc_typeck::check_crate(tcx);\n+                tcx.sess.abort_if_errors();\n                 sess.time(\"missing_docs\", || {\n                     rustc_lint::check_crate(tcx, rustc_lint::builtin::MissingDoc::new);\n                 });"}, {"sha": "cbf53d52ef009d13661cbb2a681c6be5357a4955", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=02a24c8e2fd370041a24b7d93e8c3710b7b76015", "patch": "@@ -15,6 +15,8 @@\n #![recursion_limit = \"256\"]\n \n extern crate env_logger;\n+#[macro_use]\n+extern crate lazy_static;\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;"}, {"sha": "32793fc4f76c05c6236611db6ba3cf829ae37611", "filename": "src/test/rustdoc-ui/infinite-recursive-type.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.rs?ref=02a24c8e2fd370041a24b7d93e8c3710b7b76015", "patch": "@@ -0,0 +1,4 @@\n+enum E {\n+//~^ ERROR recursive type `E` has infinite size\n+    V(E),\n+}"}, {"sha": "897445f200cb701d57d6a70e45454e1aa09179b8", "filename": "src/test/rustdoc-ui/infinite-recursive-type.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a24c8e2fd370041a24b7d93e8c3710b7b76015/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr?ref=02a24c8e2fd370041a24b7d93e8c3710b7b76015", "patch": "@@ -0,0 +1,17 @@\n+error[E0072]: recursive type `E` has infinite size\n+  --> $DIR/infinite-recursive-type.rs:1:1\n+   |\n+LL | enum E {\n+   | ^^^^^^ recursive type has infinite size\n+LL |\n+LL |     V(E),\n+   |       - recursive without indirection\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `E` representable\n+   |\n+LL |     V(Box<E>),\n+   |       ^^^^ ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0072`."}]}