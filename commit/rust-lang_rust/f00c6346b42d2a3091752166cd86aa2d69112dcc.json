{"sha": "f00c6346b42d2a3091752166cd86aa2d69112dcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMGM2MzQ2YjQyZDJhMzA5MTc1MjE2NmNkODZhYTJkNjkxMTJkY2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-23T21:01:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-23T21:01:06Z"}, "message": "Allow using upstream generics in a dylib crate type\n\n... just don't export them!", "tree": {"sha": "42d2ae6f70a44448023661230e71a551485dca69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d2ae6f70a44448023661230e71a551485dca69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f00c6346b42d2a3091752166cd86aa2d69112dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f00c6346b42d2a3091752166cd86aa2d69112dcc", "html_url": "https://github.com/rust-lang/rust/commit/f00c6346b42d2a3091752166cd86aa2d69112dcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f00c6346b42d2a3091752166cd86aa2d69112dcc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c57d8c80b1fab4c1e9087756fb9fae396d5218", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c57d8c80b1fab4c1e9087756fb9fae396d5218", "html_url": "https://github.com/rust-lang/rust/commit/50c57d8c80b1fab4c1e9087756fb9fae396d5218"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "ff87f0b1547cec36a61cb67a2780bc0adf8057dc", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f00c6346b42d2a3091752166cd86aa2d69112dcc/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00c6346b42d2a3091752166cd86aa2d69112dcc/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=f00c6346b42d2a3091752166cd86aa2d69112dcc", "patch": "@@ -14,6 +14,7 @@ use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n                              LinkerPluginLto, Lto};\n+use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use rustc_serialize::{json, Encoder};\n@@ -1107,9 +1108,26 @@ fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n         if *dep_format == Linkage::Static {\n             // ... we add its symbol list to our export list.\n             for &(symbol, level) in tcx.exported_symbols(cnum).iter() {\n-                if level.is_below_threshold(export_threshold) {\n-                    symbols.push(symbol.symbol_name(tcx).to_string());\n+                if !level.is_below_threshold(export_threshold) {\n+                    continue;\n                 }\n+\n+                // Do not export generic symbols from upstream crates in linked\n+                // artifact (notably the `dylib` crate type). The main reason\n+                // for this is that `symbol_name` is actually wrong for generic\n+                // symbols because it guesses the name we'd give them locally\n+                // rather than the name it has upstream (depending on\n+                // `share_generics` settings and such).\n+                //\n+                // To fix that issue we just say that linked artifacts, aka\n+                // `dylib`s, never export generic symbols and they aren't\n+                // available to downstream crates. (the not available part is\n+                // handled elsewhere).\n+                if let ExportedSymbol::Generic(..) = symbol {\n+                    continue;\n+                }\n+\n+                symbols.push(symbol.symbol_name(tcx).to_string());\n             }\n         }\n     }"}, {"sha": "0bc53dbde5f8acc0998e200cf30d9a20c0b51351", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f00c6346b42d2a3091752166cd86aa2d69112dcc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f00c6346b42d2a3091752166cd86aa2d69112dcc/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=f00c6346b42d2a3091752166cd86aa2d69112dcc", "patch": "@@ -11,7 +11,6 @@ use rustc::middle::cstore::{CrateStore, DepKind,\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n use rustc::middle::dependency_format::Linkage;\n-use rustc::session::config::CrateType;\n use rustc::hir::def;\n use rustc::hir;\n use rustc::session::{CrateDisambiguator, Session};\n@@ -246,13 +245,13 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n         // When linked into a dylib crates don't export their generic symbols,\n         // so if that's happening then we can't load upstream monomorphizations\n-        // from this crate. As a result, if we're creating a dylib or this crate\n-        // is being included from a different dynamic library, then we filter\n-        // out all `Generic` symbols here.\n+        // from this crate.\n         let formats = tcx.dependency_formats(LOCAL_CRATE);\n-        let remove_generics = formats.iter().any(|(ty, list)| {\n-            *ty == CrateType::Dylib ||\n-                list.get(def_id.krate.as_usize() - 1) == Some(&Linkage::IncludedFromDylib)\n+        let remove_generics = formats.iter().any(|(_ty, list)| {\n+            match list.get(def_id.krate.as_usize() - 1) {\n+                Some(Linkage::IncludedFromDylib) | Some(Linkage::Dynamic) => true,\n+                _ => false,\n+            }\n         });\n         if remove_generics {\n             syms.retain(|(sym, _threshold)| {"}]}