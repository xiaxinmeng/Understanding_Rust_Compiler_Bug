{"sha": "53f0eae3866f5b4708e9f34b009df843f91136d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZjBlYWUzODY2ZjViNDcwOGU5ZjM0YjAwOWRmODQzZjkxMTM2ZDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-25T22:57:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-25T22:57:15Z"}, "message": "Revert \"Use fewer instructions for `fail!`\"\n\nThis reverts commit c61f9763e2e03afbe62445877ceb3ed15e22e123.\n\nConflicts:\n\tsrc/librustrt/unwind.rs\n\tsrc/libstd/macros.rs", "tree": {"sha": "339e9e398561ec6a382118ad365b4ecbe3579ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/339e9e398561ec6a382118ad365b4ecbe3579ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f0eae3866f5b4708e9f34b009df843f91136d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f0eae3866f5b4708e9f34b009df843f91136d7", "html_url": "https://github.com/rust-lang/rust/commit/53f0eae3866f5b4708e9f34b009df843f91136d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f0eae3866f5b4708e9f34b009df843f91136d7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7a89f0c0935412f24d64c0ae2e202970124ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7a89f0c0935412f24d64c0ae2e202970124ff9", "html_url": "https://github.com/rust-lang/rust/commit/cf7a89f0c0935412f24d64c0ae2e202970124ff9"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "b7b5e09a5562a197c38427bf20ef54897ce35a18", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53f0eae3866f5b4708e9f34b009df843f91136d7/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f0eae3866f5b4708e9f34b009df843f91136d7/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=53f0eae3866f5b4708e9f34b009df843f91136d7", "patch": "@@ -33,7 +33,7 @@ extern crate collections;\n #[cfg(test)] #[phase(plugin, link)] extern crate std;\n \n pub use self::util::{Stdio, Stdout, Stderr};\n-pub use self::unwind::{begin_unwind, begin_unwind_fmt, begin_unwind_no_time_to_explain};\n+pub use self::unwind::{begin_unwind, begin_unwind_fmt};\n \n use core::prelude::*;\n "}, {"sha": "5dfeb15afb84ad013f46c60562479d3e5ed5272b", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53f0eae3866f5b4708e9f34b009df843f91136d7/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f0eae3866f5b4708e9f34b009df843f91136d7/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=53f0eae3866f5b4708e9f34b009df843f91136d7", "patch": "@@ -432,12 +432,6 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> !\n     begin_unwind_inner(box msg, &(file, line))\n }\n \n-/// Unwinding for `fail!()`. Saves passing a string.\n-#[inline(never)] #[cold] #[experimental]\n-pub fn begin_unwind_no_time_to_explain(file_line: &(&'static str, uint)) -> ! {\n-    begin_unwind_inner(box () (\"explicit failure\"), file_line)\n-}\n-\n /// The core of the unwinding.\n ///\n /// This is non-generic to avoid instantiation bloat in other crates"}, {"sha": "f0732c7d508e82a6b99d8f4cd4530c126ea2bee7", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53f0eae3866f5b4708e9f34b009df843f91136d7/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f0eae3866f5b4708e9f34b009df843f91136d7/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=53f0eae3866f5b4708e9f34b009df843f91136d7", "patch": "@@ -39,11 +39,10 @@\n #[macro_export]\n macro_rules! fail(\n     () => ({\n-        // static requires less code at runtime, more constant data\n-        static FILE_LINE: (&'static str, uint) = (file!(), line!());\n-        ::std::rt::begin_unwind_no_time_to_explain(&FILE_LINE)\n+        fail!(\"explicit failure\")\n     });\n     ($msg:expr) => ({\n+        // static requires less code at runtime, more constant data\n         static FILE_LINE: (&'static str, uint) = (file!(), line!());\n         let (file, line) = FILE_LINE;\n         ::std::rt::begin_unwind($msg, file, line)"}, {"sha": "4490977bde619ef833f725c75af39cb9fa8ef796", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53f0eae3866f5b4708e9f34b009df843f91136d7/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f0eae3866f5b4708e9f34b009df843f91136d7/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=53f0eae3866f5b4708e9f34b009df843f91136d7", "patch": "@@ -66,8 +66,7 @@ pub use self::util::{default_sched_threads, min_stack, running_on_valgrind};\n // standard library which work together to create the entire runtime.\n pub use alloc::{heap, libc_heap};\n pub use rustrt::{task, local, mutex, exclusive, stack, args, rtio, thread};\n-pub use rustrt::{Stdio, Stdout, Stderr};\n-pub use rustrt::{begin_unwind, begin_unwind_fmt, begin_unwind_no_time_to_explain};\n+pub use rustrt::{Stdio, Stdout, Stderr, begin_unwind, begin_unwind_fmt};\n pub use rustrt::{bookkeeping, at_exit, unwind, DEFAULT_ERROR_CODE, Runtime};\n \n // Simple backtrace functionality (to print on failure)"}]}