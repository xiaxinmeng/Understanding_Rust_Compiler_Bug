{"sha": "c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YjJmZmFlYmRhZjc2ZWJmMDA4NGU1ZWQyZmM2MjUzNzg3YjA0Njc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-17T14:12:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-17T14:12:15Z"}, "message": "Fix intrinsic name", "tree": {"sha": "477a45e394dc36f888d5a941e560c8b43c71a0b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/477a45e394dc36f888d5a941e560c8b43c71a0b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467", "html_url": "https://github.com/rust-lang/rust/commit/c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9ee812719ad9d3fb0144458b6460f00a2b25bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9ee812719ad9d3fb0144458b6460f00a2b25bd", "html_url": "https://github.com/rust-lang/rust/commit/6e9ee812719ad9d3fb0144458b6460f00a2b25bd"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "5043c5ec0d86eb645857975d9689899069f88026", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=c7b2ffaebdaf76ebf0084e5ed2fc6253787b0467", "patch": "@@ -813,7 +813,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let res = CValue::by_val(swap(&mut fx.bcx, arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n-        assert_inhabited | assert_zero_valid | assert_any_valid, <T> () {\n+        assert_inhabited | assert_zero_valid | assert_uninit_valid, <T> () {\n             let layout = fx.layout_of(T);\n             if layout.abi.is_uninhabited() {\n                 crate::trap::trap_panic(fx, &format!(\"attempted to instantiate uninhabited type `{}`\", T));\n@@ -825,7 +825,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == \"assert_any_valid\" && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n+            if intrinsic == \"assert_uninit_valid\" && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n                 crate::trap::trap_panic(fx, &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T));\n                 return;\n             }"}]}