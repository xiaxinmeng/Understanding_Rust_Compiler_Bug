{"sha": "20c2cba61dc83e612d25ed496025171caa3db30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYzJjYmE2MWRjODNlNjEyZDI1ZWQ0OTYwMjUxNzFjYWEzZGIzMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-26T18:14:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-26T18:14:46Z"}, "message": "Auto merge of #57918 - Centril:rollup, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #57407 (Stabilize extern_crate_self)\n - #57703 (Make MutexGuard's Debug implementation more useful.)\n - #57764 (Fix some minor warnings)\n - #57825 (un-deprecate mem::zeroed)\n - #57827 (Ignore aarch64 in simd-intrinsic-generic-reduction)\n - #57908 (resolve: Fix span arithmetics in the import conflict error)\n - #57913 (Change crate-visibility-modifier issue number in The Unstable Book)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f6294c9e220acd5733dfe7b39541f4e2640c7187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6294c9e220acd5733dfe7b39541f4e2640c7187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20c2cba61dc83e612d25ed496025171caa3db30f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20c2cba61dc83e612d25ed496025171caa3db30f", "html_url": "https://github.com/rust-lang/rust/commit/20c2cba61dc83e612d25ed496025171caa3db30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20c2cba61dc83e612d25ed496025171caa3db30f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46a43dc1e987156c4c03a8c92c8ba7b21363982b", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a43dc1e987156c4c03a8c92c8ba7b21363982b", "html_url": "https://github.com/rust-lang/rust/commit/46a43dc1e987156c4c03a8c92c8ba7b21363982b"}, {"sha": "97833ee506d2b69c46bad4aad07aab89c7f03516", "url": "https://api.github.com/repos/rust-lang/rust/commits/97833ee506d2b69c46bad4aad07aab89c7f03516", "html_url": "https://github.com/rust-lang/rust/commit/97833ee506d2b69c46bad4aad07aab89c7f03516"}], "stats": {"total": 240, "additions": 156, "deletions": 84}, "files": [{"sha": "b59859dd348e70a323db7504f2865f344782479f", "filename": "src/doc/unstable-book/src/language-features/crate-visibility-modifier.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -1,8 +1,8 @@\n # `crate_visibility_modifier`\n \n-The tracking issue for this feature is: [#45388]\n+The tracking issue for this feature is: [#53120]\n \n-[#45388]: https://github.com/rust-lang/rust/issues/45388\n+[#53120]: https://github.com/rust-lang/rust/issues/53120\n \n -----\n "}, {"sha": "9e100d0a58d1762757c2a7527b107b6c36df2d08", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -489,7 +489,6 @@ pub const fn needs_drop<T>() -> bool {\n /// assert_eq!(0, x);\n /// ```\n #[inline]\n-#[rustc_deprecated(since = \"2.0.0\", reason = \"use `mem::MaybeUninit::zeroed` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn zeroed<T>() -> T {\n     #[cfg(not(stage0))]"}, {"sha": "4f516f18bbfdd60e391ddee8733b560d81f04b29", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -11,6 +11,7 @@\n        test(attr(deny(warnings))))]\n \n #![feature(nll)]\n+#![feature(rustc_private)]\n \n pub use self::Piece::*;\n pub use self::Position::*;"}, {"sha": "31f8ce26225cd7223890aa13e0e27bc24bd871d4", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -32,7 +32,7 @@ use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n-use syntax::feature_gate::{is_builtin_attr, emit_feature_err, GateIssue};\n+use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n use syntax::std_inject::injected_crate_name;\n use syntax::symbol::keywords;\n@@ -356,10 +356,6 @@ impl<'a> Resolver<'a> {\n                         .emit();\n                     return;\n                 } else if orig_name == Some(keywords::SelfLower.name()) {\n-                    if !self.session.features_untracked().extern_crate_self {\n-                        emit_feature_err(&self.session.parse_sess, \"extern_crate_self\", item.span,\n-                                         GateIssue::Language, \"`extern crate self` is unstable\");\n-                    }\n                     self.graph_root\n                 } else {\n                     let crate_id = self.crate_loader.process_extern_crate(item, &self.definitions);"}, {"sha": "873ace90172602f93b294b5ad075a4e4c4a500b8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 45, "deletions": 46, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -5134,60 +5134,59 @@ impl<'a> Resolver<'a> {\n         );\n \n         // See https://github.com/rust-lang/rust/issues/32354\n-        if old_binding.is_import() || new_binding.is_import() {\n-            let binding = if new_binding.is_import() && !new_binding.span.is_dummy() {\n-                new_binding\n+        let directive = match (&new_binding.kind, &old_binding.kind) {\n+            (NameBindingKind::Import { directive, .. }, _) if !new_binding.span.is_dummy() =>\n+                Some((directive, new_binding.span)),\n+            (_, NameBindingKind::Import { directive, .. }) if !old_binding.span.is_dummy() =>\n+                Some((directive, old_binding.span)),\n+            _ => None,\n+        };\n+        if let Some((directive, binding_span)) = directive {\n+            let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n+                format!(\"Other{}\", name)\n             } else {\n-                old_binding\n+                format!(\"other_{}\", name)\n             };\n \n-            let cm = self.session.source_map();\n-            let rename_msg = \"you can use `as` to change the binding name of the import\";\n-\n-            if let (\n-                Ok(snippet),\n-                NameBindingKind::Import { directive, ..},\n-                _dummy @ false,\n-            ) = (\n-                cm.span_to_snippet(binding.span),\n-                binding.kind.clone(),\n-                binding.span.is_dummy(),\n-            ) {\n-                let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n-                    format!(\"Other{}\", name)\n-                } else {\n-                    format!(\"other_{}\", name)\n-                };\n+            let mut suggestion = None;\n+            match directive.subclass {\n+                ImportDirectiveSubclass::SingleImport { type_ns_only: true, .. } =>\n+                    suggestion = Some(format!(\"self as {}\", suggested_name)),\n+                ImportDirectiveSubclass::SingleImport { source, .. } => {\n+                    if let Some(pos) = source.span.hi().0.checked_sub(binding_span.lo().0)\n+                                                         .map(|pos| pos as usize) {\n+                        if let Ok(snippet) = self.session.source_map()\n+                                                         .span_to_snippet(binding_span) {\n+                            if pos <= snippet.len() {\n+                                suggestion = Some(format!(\n+                                    \"{} as {}{}\",\n+                                    &snippet[..pos],\n+                                    suggested_name,\n+                                    if snippet.ends_with(\";\") { \";\" } else { \"\" }\n+                                ))\n+                            }\n+                        }\n+                    }\n+                }\n+                ImportDirectiveSubclass::ExternCrate { source, target, .. } =>\n+                    suggestion = Some(format!(\n+                        \"extern crate {} as {};\",\n+                        source.unwrap_or(target.name),\n+                        suggested_name,\n+                    )),\n+                _ => unreachable!(),\n+            }\n \n+            let rename_msg = \"you can use `as` to change the binding name of the import\";\n+            if let Some(suggestion) = suggestion {\n                 err.span_suggestion_with_applicability(\n-                    binding.span,\n-                    &rename_msg,\n-                    match directive.subclass {\n-                        ImportDirectiveSubclass::SingleImport { type_ns_only: true, .. } =>\n-                            format!(\"self as {}\", suggested_name),\n-                        ImportDirectiveSubclass::SingleImport { source, .. } =>\n-                            format!(\n-                                \"{} as {}{}\",\n-                                &snippet[..((source.span.hi().0 - binding.span.lo().0) as usize)],\n-                                suggested_name,\n-                                if snippet.ends_with(\";\") {\n-                                    \";\"\n-                                } else {\n-                                    \"\"\n-                                }\n-                            ),\n-                        ImportDirectiveSubclass::ExternCrate { source, target, .. } =>\n-                            format!(\n-                                \"extern crate {} as {};\",\n-                                source.unwrap_or(target.name),\n-                                suggested_name,\n-                            ),\n-                        _ => unreachable!(),\n-                    },\n+                    binding_span,\n+                    rename_msg,\n+                    suggestion,\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.span_label(binding.span, rename_msg);\n+                err.span_label(binding_span, rename_msg);\n             }\n         }\n "}, {"sha": "59829db23cbc27ebd912c102e7d473f3dabcb526", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -450,9 +450,7 @@ impl<'a, T: ?Sized> Drop for MutexGuard<'a, T> {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<'a, T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"MutexGuard\")\n-            .field(\"lock\", &self.__lock)\n-            .finish()\n+        fmt::Debug::fmt(&**self, f)\n     }\n }\n "}, {"sha": "2820924824697e4fd27d732d0067075c912d4568", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -453,9 +453,6 @@ declare_features! (\n     // Adds `reason` and `expect` lint attributes.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n-    // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n-    (active, extern_crate_self, \"1.31.0\", Some(56409), None),\n-\n     // Allows paths to enum variants on type aliases.\n     (active, type_alias_enum_variants, \"1.31.0\", Some(49683), None),\n \n@@ -689,6 +686,8 @@ declare_features! (\n     (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n     // Allows `cfg(target_vendor = \"...\")`.\n     (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n+    // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n+    (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must"}, {"sha": "fc03e685b6f54e487f90724f8f91d4fdb0a8bb70", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -25,7 +25,7 @@\n #![feature(asm)]\n #![cfg_attr(stage0, feature(cfg_target_vendor))]\n #![feature(fnbox)]\n-#![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n+#![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n #![feature(nll)]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]"}, {"sha": "e3faa7c625ccca6882c07e599e93ca2d59d8088b", "filename": "src/test/run-pass/simd/simd-intrinsic-generic-reduction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -2,6 +2,7 @@\n #![allow(non_camel_case_types)]\n \n // ignore-emscripten\n+// ignore-aarch64 FIXME: https://github.com/rust-lang/rust/issues/54510\n \n // Test that the simd_reduce_{op} intrinsics produce the correct results.\n "}, {"sha": "2161932c2f6aa187b48eeffa02f02dbb97e8505d", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_self.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46a43dc1e987156c4c03a8c92c8ba7b21363982b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a43dc1e987156c4c03a8c92c8ba7b21363982b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs?ref=46a43dc1e987156c4c03a8c92c8ba7b21363982b", "patch": "@@ -1,3 +0,0 @@\n-extern crate self as foo; //~ ERROR `extern crate self` is unstable\n-\n-fn main() {}"}, {"sha": "530015b2cb71266fccf77500418973744356e13d", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_self.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46a43dc1e987156c4c03a8c92c8ba7b21363982b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46a43dc1e987156c4c03a8c92c8ba7b21363982b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr?ref=46a43dc1e987156c4c03a8c92c8ba7b21363982b", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: `extern crate self` is unstable (see issue #56409)\n-  --> $DIR/feature-gate-extern_crate_self.rs:1:1\n-   |\n-LL | extern crate self as foo; //~ ERROR `extern crate self` is unstable\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(extern_crate_self)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "defa0e294bd743e81b25b3434ce26f1add8639d6", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(extern_crate_self)]\n-\n extern crate self; //~ ERROR `extern crate self;` requires renaming\n \n #[macro_use] //~ ERROR `macro_use` is not supported on `extern crate self`", "previous_filename": "src/test/ui/imports/extern-crate-self-fail.rs"}, {"sha": "b47d10343f68975d33b257160fc047270f478a3a", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -1,11 +1,11 @@\n error: `extern crate self;` requires renaming\n-  --> $DIR/extern-crate-self-fail.rs:3:1\n+  --> $DIR/extern-crate-self-fail.rs:1:1\n    |\n LL | extern crate self; //~ ERROR `extern crate self;` requires renaming\n    | ^^^^^^^^^^^^^^^^^^ help: try: `extern crate self as name;`\n \n error: `macro_use` is not supported on `extern crate self`\n-  --> $DIR/extern-crate-self-fail.rs:5:1\n+  --> $DIR/extern-crate-self-fail.rs:3:1\n    |\n LL | #[macro_use] //~ ERROR `macro_use` is not supported on `extern crate self`\n    | ^^^^^^^^^^^^", "previous_filename": "src/test/ui/imports/extern-crate-self-fail.stderr"}, {"sha": "79683522888cbeffa958ef76daa823aa377271af", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-macro-alias.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-alias.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+// Test that a macro can correctly expand the alias\n+// in an `extern crate self as ALIAS` item.\n+\n+fn the_answer() -> usize { 42 }\n+\n+macro_rules! alias_self {\n+    ($alias:ident) => { extern crate self as $alias; }\n+}\n+\n+alias_self!(the_alias);\n+\n+fn main() {\n+    assert_eq!(the_alias::the_answer(), 42);\n+}"}, {"sha": "9c9397999ff679c5f060b65432a0f072e1d89472", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-macro-item.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-item.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+// Test that `extern crate self;` is accepted\n+// syntactically as an item for use in a macro.\n+\n+macro_rules! accept_item { ($x:item) => {} }\n+\n+accept_item! {\n+    extern crate self;\n+}\n+\n+fn main() {}"}, {"sha": "009a92e877645ace1e68176b8edd52d4f8836826", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-macro-self.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-macro-self.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+// Test that a macro can correctly expand `self` in\n+// an `extern crate self as ALIAS` item.\n+\n+fn the_answer() -> usize { 42 }\n+\n+macro_rules! extern_something {\n+    ($alias:ident) => { extern crate $alias as the_alias; }\n+}\n+\n+extern_something!(self);\n+\n+fn main() {\n+    assert_eq!(the_alias::the_answer(), 42);\n+}"}, {"sha": "6f6343a614886f0ed74518dfc669bb23898ce528", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-pass.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-pass.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(extern_crate_self)]\n-\n extern crate self as foo;\n \n struct S;", "previous_filename": "src/test/ui/imports/extern-crate-self-pass.rs"}, {"sha": "3561c21cc7ee34d4ebc8759d80d88d68691d9a2f", "filename": "src/test/ui/issues/issue-56411.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fissues%2Fissue-56411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fissues%2Fissue-56411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56411.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -0,0 +1,17 @@\n+macro_rules! import {\n+    ( $($name:ident),* ) => {\n+        $(\n+            mod $name;\n+            pub use self::$name;\n+            //~^ ERROR the name `issue_56411_aux` is defined multiple times\n+            //~| ERROR `issue_56411_aux` is private, and cannot be re-exported\n+\n+        )*\n+    }\n+}\n+\n+import!(issue_56411_aux);\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "dd05852c091599c3521e9648677bd9fdab44336b", "filename": "src/test/ui/issues/issue-56411.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -0,0 +1,31 @@\n+error[E0255]: the name `issue_56411_aux` is defined multiple times\n+  --> $DIR/issue-56411.rs:5:21\n+   |\n+LL |             mod $name;\n+   |             ---------- previous definition of the module `issue_56411_aux` here\n+LL |             pub use self::$name;\n+   |                     ^^^^^^^^^^^\n+   |                     |\n+   |                     `issue_56411_aux` reimported here\n+   |                     you can use `as` to change the binding name of the import\n+...\n+LL | import!(issue_56411_aux);\n+   | ------------------------- in this macro invocation\n+   |\n+   = note: `issue_56411_aux` must be defined only once in the type namespace of this module\n+\n+error[E0365]: `issue_56411_aux` is private, and cannot be re-exported\n+  --> $DIR/issue-56411.rs:5:21\n+   |\n+LL |             pub use self::$name;\n+   |                     ^^^^^^^^^^^ re-export of private `issue_56411_aux`\n+...\n+LL | import!(issue_56411_aux);\n+   | ------------------------- in this macro invocation\n+   |\n+   = note: consider declaring type or module `issue_56411_aux` with `pub`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0255, E0365.\n+For more information about an error, try `rustc --explain E0255`."}, {"sha": "bd689e913aba6e1367357ebb6478abe16bf54302", "filename": "src/test/ui/issues/issue_56411_aux.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fissues%2Fissue_56411_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftest%2Fui%2Fissues%2Fissue_56411_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue_56411_aux.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -0,0 +1,5 @@\n+// compile-pass\n+\n+struct T {}\n+\n+fn main() {}"}, {"sha": "2cf0fcfd34cd6b19f48d797d6549747fe61188bf", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c2cba61dc83e612d25ed496025171caa3db30f/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=20c2cba61dc83e612d25ed496025171caa3db30f", "patch": "@@ -78,7 +78,7 @@ impl FileEntry {\n     fn parse_ids(&mut self, file: &Path, contents: &str, errors: &mut bool) {\n         if self.ids.is_empty() {\n             with_attrs_in_source(contents, \" id\", |fragment, i, _| {\n-                let frag = fragment.trim_left_matches(\"#\").to_owned();\n+                let frag = fragment.trim_start_matches(\"#\").to_owned();\n                 let encoded = small_url_encode(&frag);\n                 if !self.ids.insert(frag) {\n                     *errors = true;\n@@ -343,7 +343,7 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(contents: &str, attr: &str,\n                 Some(i) => i,\n                 None => continue,\n             };\n-            if rest[..pos_equals].trim_left_matches(\" \") != \"\" {\n+            if rest[..pos_equals].trim_start_matches(\" \") != \"\" {\n                 continue;\n             }\n \n@@ -355,7 +355,7 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(contents: &str, attr: &str,\n             };\n             let quote_delim = rest.as_bytes()[pos_quote] as char;\n \n-            if rest[..pos_quote].trim_left_matches(\" \") != \"\" {\n+            if rest[..pos_quote].trim_start_matches(\" \") != \"\" {\n                 continue;\n             }\n             let rest = &rest[pos_quote + 1..];"}]}