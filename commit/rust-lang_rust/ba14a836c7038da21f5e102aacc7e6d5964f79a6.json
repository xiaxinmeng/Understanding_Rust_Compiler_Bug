{"sha": "ba14a836c7038da21f5e102aacc7e6d5964f79a6", "node_id": "C_kwDOAAsO6NoAKGJhMTRhODM2YzcwMzhkYTIxZjVlMTAyYWFjYzdlNmQ1OTY0Zjc5YTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-10T12:32:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-10T12:32:01Z"}, "message": "Auto merge of #94802 - matthiaskrgr:rollup-4plu0fi, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #92150 (Improve suggestion when casting usize to (possibly) wide pointer)\n - #94635 (Merge `#[deprecated]` and `#[rustc_deprecated]`)\n - #94657 (Constify `Index{,Mut}` for `[T]`, `str`, and `[T; N]`)\n - #94746 (diagnostics: use rustc_on_unimplemented to recommend `[].iter()`)\n - #94788 (Account for suggestions for complete removal of lines)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "74faca104bf8154e790c595a8416c7b1e5b50869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74faca104bf8154e790c595a8416c7b1e5b50869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba14a836c7038da21f5e102aacc7e6d5964f79a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba14a836c7038da21f5e102aacc7e6d5964f79a6", "html_url": "https://github.com/rust-lang/rust/commit/ba14a836c7038da21f5e102aacc7e6d5964f79a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba14a836c7038da21f5e102aacc7e6d5964f79a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282778aee26166754315815552bae454fc968960", "url": "https://api.github.com/repos/rust-lang/rust/commits/282778aee26166754315815552bae454fc968960", "html_url": "https://github.com/rust-lang/rust/commit/282778aee26166754315815552bae454fc968960"}, {"sha": "6bbaca7d030b2c778a7a7b9762f3afb2a2408ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbaca7d030b2c778a7a7b9762f3afb2a2408ff5", "html_url": "https://github.com/rust-lang/rust/commit/6bbaca7d030b2c778a7a7b9762f3afb2a2408ff5"}], "stats": {"total": 1471, "additions": 854, "deletions": 617}, "files": [{"sha": "097bd07c74ce8a5ba6dca07e3f11d9bb113c423e", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -437,13 +437,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 )\n                 .emit();\n             }\n-        } else {\n-            if attr.has_name(sym::deprecated) {\n-                self.sess\n-                    .struct_span_err(attr.span, \"`#[deprecated]` cannot be used in staged API\")\n-                    .span_label(attr.span, \"use `#[rustc_deprecated]` instead\")\n-                    .emit();\n-            }\n         }\n     }\n "}, {"sha": "613320087d2ddc33d4087b30a8dba03885bb59ef", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -664,6 +664,7 @@ where\n {\n     let mut depr: Option<(Deprecation, Span)> = None;\n     let diagnostic = &sess.parse_sess.span_diagnostic;\n+    let is_rustc = sess.features_untracked().staged_api;\n \n     'outer: for attr in attrs_iter {\n         if !(attr.has_name(sym::deprecated) || attr.has_name(sym::rustc_deprecated)) {\n@@ -728,17 +729,31 @@ where\n                                     continue 'outer;\n                                 }\n                             }\n-                            sym::note if attr.has_name(sym::deprecated) => {\n+                            sym::note => {\n                                 if !get(mi, &mut note) {\n                                     continue 'outer;\n                                 }\n                             }\n+                            // FIXME(jhpratt) remove this after a bootstrap occurs. Emitting an\n+                            // error specific to the renaming would be a good idea as well.\n                             sym::reason if attr.has_name(sym::rustc_deprecated) => {\n                                 if !get(mi, &mut note) {\n                                     continue 'outer;\n                                 }\n                             }\n-                            sym::suggestion if attr.has_name(sym::rustc_deprecated) => {\n+                            sym::suggestion => {\n+                                if !sess.features_untracked().deprecated_suggestion {\n+                                    let mut diag = sess.struct_span_err(\n+                                        mi.span,\n+                                        \"suggestions on deprecated items are unstable\",\n+                                    );\n+                                    if sess.is_nightly_build() {\n+                                        diag.help(\"add `#![feature(deprecated_suggestion)]` to the crate root\");\n+                                    }\n+                                    // FIXME(jhpratt) change this to an actual tracking issue\n+                                    diag.note(\"see #XXX for more details\").emit();\n+                                }\n+\n                                 if !get(mi, &mut suggestion) {\n                                     continue 'outer;\n                                 }\n@@ -752,7 +767,7 @@ where\n                                         if attr.has_name(sym::deprecated) {\n                                             &[\"since\", \"note\"]\n                                         } else {\n-                                            &[\"since\", \"reason\", \"suggestion\"]\n+                                            &[\"since\", \"note\", \"suggestion\"]\n                                         },\n                                     ),\n                                 );\n@@ -775,24 +790,22 @@ where\n             }\n         }\n \n-        if suggestion.is_some() && attr.has_name(sym::deprecated) {\n-            unreachable!(\"only allowed on rustc_deprecated\")\n-        }\n-\n-        if attr.has_name(sym::rustc_deprecated) {\n+        if is_rustc {\n             if since.is_none() {\n                 handle_errors(&sess.parse_sess, attr.span, AttrError::MissingSince);\n                 continue;\n             }\n \n             if note.is_none() {\n-                struct_span_err!(diagnostic, attr.span, E0543, \"missing 'reason'\").emit();\n+                struct_span_err!(diagnostic, attr.span, E0543, \"missing 'note'\").emit();\n                 continue;\n             }\n         }\n \n-        let is_since_rustc_version = attr.has_name(sym::rustc_deprecated);\n-        depr = Some((Deprecation { since, note, suggestion, is_since_rustc_version }, attr.span));\n+        depr = Some((\n+            Deprecation { since, note, suggestion, is_since_rustc_version: is_rustc },\n+            attr.span,\n+        ));\n     }\n \n     depr"}, {"sha": "831d408195e2feede83e3e6f26f7f475bcff38cf", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1657,6 +1657,31 @@ impl EmitterWriter {\n             let line_start = sm.lookup_char_pos(parts[0].span.lo()).line;\n             draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);\n             let mut lines = complete.lines();\n+            if lines.clone().next().is_none() {\n+                // Account for a suggestion to completely remove a line(s) with whitespace (#94192).\n+                let line_end = sm.lookup_char_pos(parts[0].span.hi()).line;\n+                for line in line_start..=line_end {\n+                    buffer.puts(\n+                        row_num - 1 + line - line_start,\n+                        0,\n+                        &self.maybe_anonymized(line),\n+                        Style::LineNumber,\n+                    );\n+                    buffer.puts(\n+                        row_num - 1 + line - line_start,\n+                        max_line_num_len + 1,\n+                        \"- \",\n+                        Style::Removal,\n+                    );\n+                    buffer.puts(\n+                        row_num - 1 + line - line_start,\n+                        max_line_num_len + 3,\n+                        &normalize_whitespace(&*file_lines.file.get_line(line - 1).unwrap()),\n+                        Style::Removal,\n+                    );\n+                }\n+                row_num += line_end - line_start;\n+            }\n             for (line_pos, (line, highlight_parts)) in\n                 lines.by_ref().zip(highlights).take(MAX_SUGGESTION_HIGHLIGHT_LINES).enumerate()\n             {"}, {"sha": "1899e837eeabe659745037c68321735023cbfa4d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -362,6 +362,8 @@ declare_features! (\n     (active, default_alloc_error_handler, \"1.48.0\", Some(66741), None),\n     /// Allows default type parameters to influence type inference.\n     (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n+    /// Allows having using `suggestion` in the `#[deprecated]` attribute.\n+    (active, deprecated_suggestion, \"1.61.0\", Some(94785), None),\n     /// Allows `#[derive(Default)]` and `#[default]` on enums.\n     (active, derive_default_enum, \"1.56.0\", Some(86985), None),\n     /// Tells rustdoc to automatically generate `#[doc(cfg(...))]`."}, {"sha": "9c7b8f803249683bceef3387cb577b6f382038c4", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -461,7 +461,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // DuplicatesOk since it has its own validation\n     ungated!(\n         rustc_deprecated, Normal,\n-        template!(List: r#\"since = \"version\", reason = \"...\"\"#), DuplicatesOk // See E0550\n+        template!(List: r#\"since = \"version\", note = \"...\"\"#), DuplicatesOk // See E0550\n     ),\n     // DuplicatesOk since it has its own validation\n     ungated!("}, {"sha": "da54ad06e048b0cdc455fdc6e9e68ec98d104c40", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1886,6 +1886,15 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn is_array_slice(self) -> bool {\n+        match self.kind() {\n+            Slice(_) => true,\n+            RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_)),\n+            _ => false,\n+        }\n+    }\n+\n     #[inline]\n     pub fn is_array(self) -> bool {\n         matches!(self.kind(), Array(..))"}, {"sha": "f36a1f61aaccb03f02d693a14480a9491567dce2", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                     self.tcx.sess,\n                     *span,\n                     E0549,\n-                    \"rustc_deprecated attribute must be paired with \\\n+                    \"deprecated attribute must be paired with \\\n                     either stable or unstable attribute\"\n                 )\n                 .emit();"}, {"sha": "6b5dcacd12bd3b9bab8d86973c0d36a1bd58721d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -562,6 +562,7 @@ symbols! {\n         delay_span_bug_from_inside_query,\n         deny,\n         deprecated,\n+        deprecated_suggestion,\n         deref,\n         deref_method,\n         deref_mut,"}, {"sha": "59c88b6603c228aa1f8f7fde58ad0ad65d9d7bc1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -11,7 +11,7 @@ use std::iter;\n \n use super::InferCtxtPrivExt;\n \n-crate trait InferCtxtExt<'tcx> {\n+pub trait InferCtxtExt<'tcx> {\n     /*private*/\n     fn impl_similar_to(\n         &self,\n@@ -204,6 +204,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 flags.push((sym::_Self, Some(\"{integral}\".to_owned())));\n             }\n \n+            if self_ty.is_array_slice() {\n+                flags.push((sym::_Self, Some(\"&[]\".to_owned())));\n+            }\n+\n             if let ty::Array(aty, len) = self_ty.kind() {\n                 flags.push((sym::_Self, Some(\"[]\".to_owned())));\n                 flags.push((sym::_Self, Some(format!(\"[{}]\", aty))));"}, {"sha": "d3e9820834ab9310ca54a214ae0a775a56cdf9af", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -165,6 +165,12 @@ pub enum CastError {\n     NonScalar,\n     UnknownExprPtrKind,\n     UnknownCastPtrKind,\n+    /// Cast of int to (possibly) fat raw pointer.\n+    ///\n+    /// Argument is the specific name of the metadata in plain words, such as \"a vtable\"\n+    /// or \"a length\". If this argument is None, then the metadata is unknown, for example,\n+    /// when we're typechecking a type parameter with a ?Sized bound.\n+    IntToFatCast(Option<&'static str>),\n }\n \n impl From<ErrorGuaranteed> for CastError {\n@@ -522,6 +528,35 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 .diagnostic()\n                 .emit();\n             }\n+            CastError::IntToFatCast(known_metadata) => {\n+                let mut err = struct_span_err!(\n+                    fcx.tcx.sess,\n+                    self.cast_span,\n+                    E0606,\n+                    \"cannot cast `{}` to a pointer that {} wide\",\n+                    fcx.ty_to_string(self.expr_ty),\n+                    if known_metadata.is_some() { \"is\" } else { \"may be\" }\n+                );\n+\n+                err.span_label(\n+                    self.cast_span,\n+                    format!(\n+                        \"creating a `{}` requires both an address and {}\",\n+                        self.cast_ty,\n+                        known_metadata.unwrap_or(\"type-specific metadata\"),\n+                    ),\n+                );\n+\n+                if fcx.tcx.sess.is_nightly_build() {\n+                    err.span_label(\n+                        self.expr.span,\n+                        \"consider casting this expression to `*const ()`, \\\n+                        then using `core::ptr::from_raw_parts`\",\n+                    );\n+                }\n+\n+                err.emit();\n+            }\n             CastError::UnknownCastPtrKind | CastError::UnknownExprPtrKind => {\n                 let unknown_cast_to = match e {\n                     CastError::UnknownCastPtrKind => true,\n@@ -900,7 +935,13 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         match fcx.pointer_kind(m_cast.ty, self.span)? {\n             None => Err(CastError::UnknownCastPtrKind),\n             Some(PointerKind::Thin) => Ok(CastKind::AddrPtrCast),\n-            _ => Err(CastError::IllegalCast),\n+            Some(PointerKind::Vtable(_)) => Err(CastError::IntToFatCast(Some(\"a vtable\"))),\n+            Some(PointerKind::Length) => Err(CastError::IntToFatCast(Some(\"a length\"))),\n+            Some(\n+                PointerKind::OfProjection(_)\n+                | PointerKind::OfOpaque(_, _)\n+                | PointerKind::OfParam(_),\n+            ) => Err(CastError::IntToFatCast(None)),\n         }\n     }\n "}, {"sha": "504e1ce8c9f51c84de1a494d5db9e613adef0a1d", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 209, "deletions": 153, "changes": 362, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -19,9 +19,10 @@ use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{source_map, FileName, MultiSpan, Span};\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::error_reporting::on_unimplemented::InferCtxtExt as _;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n-    FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n+    FulfillmentError, Obligation, ObligationCause, ObligationCauseCode, OnUnimplementedNote,\n };\n \n use std::cmp::Ordering;\n@@ -483,150 +484,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                let mut label_span_not_found = || {\n-                    if unsatisfied_predicates.is_empty() {\n-                        err.span_label(span, format!(\"{item_kind} not found in `{ty_str}`\"));\n-                        let is_string_or_ref_str = match actual.kind() {\n-                            ty::Ref(_, ty, _) => {\n-                                ty.is_str()\n-                                    || matches!(\n-                                        ty.kind(),\n-                                        ty::Adt(adt, _) if self.tcx.is_diagnostic_item(sym::String, adt.did)\n-                                    )\n-                            }\n-                            ty::Adt(adt, _) => self.tcx.is_diagnostic_item(sym::String, adt.did),\n-                            _ => false,\n-                        };\n-                        if is_string_or_ref_str && item_name.name == sym::iter {\n-                            err.span_suggestion_verbose(\n-                                item_name.span,\n-                                \"because of the in-memory representation of `&str`, to obtain \\\n-                                 an `Iterator` over each of its codepoint use method `chars`\",\n-                                String::from(\"chars\"),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                        if let ty::Adt(adt, _) = rcvr_ty.kind() {\n-                            let mut inherent_impls_candidate = self\n-                                .tcx\n-                                .inherent_impls(adt.did)\n-                                .iter()\n-                                .copied()\n-                                .filter(|def_id| {\n-                                    if let Some(assoc) = self.associated_value(*def_id, item_name) {\n-                                        // Check for both mode is the same so we avoid suggesting\n-                                        // incorrect associated item.\n-                                        match (mode, assoc.fn_has_self_parameter, source) {\n-                                            (Mode::MethodCall, true, SelfSource::MethodCall(_)) => {\n-                                                // We check that the suggest type is actually\n-                                                // different from the received one\n-                                                // So we avoid suggestion method with Box<Self>\n-                                                // for instance\n-                                                self.tcx.at(span).type_of(*def_id) != actual\n-                                                    && self.tcx.at(span).type_of(*def_id) != rcvr_ty\n-                                            }\n-                                            (Mode::Path, false, _) => true,\n-                                            _ => false,\n-                                        }\n-                                    } else {\n-                                        false\n-                                    }\n-                                })\n-                                .collect::<Vec<_>>();\n-                            if !inherent_impls_candidate.is_empty() {\n-                                inherent_impls_candidate.sort();\n-                                inherent_impls_candidate.dedup();\n-\n-                                // number of type to shows at most.\n-                                let limit = if inherent_impls_candidate.len() == 5 { 5 } else { 4 };\n-                                let type_candidates = inherent_impls_candidate\n-                                    .iter()\n-                                    .take(limit)\n-                                    .map(|impl_item| {\n-                                        format!(\"- `{}`\", self.tcx.at(span).type_of(*impl_item))\n-                                    })\n-                                    .collect::<Vec<_>>()\n-                                    .join(\"\\n\");\n-                                let additional_types = if inherent_impls_candidate.len() > limit {\n-                                    format!(\n-                                        \"\\nand {} more types\",\n-                                        inherent_impls_candidate.len() - limit\n-                                    )\n-                                } else {\n-                                    \"\".to_string()\n-                                };\n-                                err.note(&format!(\n-                                    \"the {item_kind} was found for\\n{}{}\",\n-                                    type_candidates, additional_types\n-                                ));\n-                            }\n-                        }\n-                    } else {\n-                        err.span_label(span, format!(\"{item_kind} cannot be called on `{ty_str}` due to unsatisfied trait bounds\"));\n-                    }\n-                };\n-\n-                // If the method name is the name of a field with a function or closure type,\n-                // give a helping note that it has to be called as `(x.f)(...)`.\n-                if let SelfSource::MethodCall(expr) = source {\n-                    let field_receiver =\n-                        self.autoderef(span, rcvr_ty).find_map(|(ty, _)| match ty.kind() {\n-                            ty::Adt(def, substs) if !def.is_enum() => {\n-                                let variant = &def.non_enum_variant();\n-                                self.tcx.find_field_index(item_name, variant).map(|index| {\n-                                    let field = &variant.fields[index];\n-                                    let field_ty = field.ty(tcx, substs);\n-                                    (field, field_ty)\n-                                })\n-                            }\n-                            _ => None,\n-                        });\n-\n-                    if let Some((field, field_ty)) = field_receiver {\n-                        let scope = self.tcx.parent_module(self.body_id).to_def_id();\n-                        let is_accessible = field.vis.is_accessible_from(scope, self.tcx);\n-\n-                        if is_accessible {\n-                            if self.is_fn_ty(field_ty, span) {\n-                                let expr_span = expr.span.to(item_name.span);\n-                                err.multipart_suggestion(\n-                                    &format!(\n-                                        \"to call the function stored in `{}`, \\\n-                                         surround the field access with parentheses\",\n-                                        item_name,\n-                                    ),\n-                                    vec![\n-                                        (expr_span.shrink_to_lo(), '('.to_string()),\n-                                        (expr_span.shrink_to_hi(), ')'.to_string()),\n-                                    ],\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            } else {\n-                                let call_expr = self\n-                                    .tcx\n-                                    .hir()\n-                                    .expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));\n-\n-                                if let Some(span) = call_expr.span.trim_start(item_name.span) {\n-                                    err.span_suggestion(\n-                                        span,\n-                                        \"remove the arguments\",\n-                                        String::new(),\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                }\n-                            }\n-                        }\n-\n-                        let field_kind = if is_accessible { \"field\" } else { \"private field\" };\n-                        err.span_label(item_name.span, format!(\"{}, not a method\", field_kind));\n-                    } else if lev_candidate.is_none() && static_sources.is_empty() {\n-                        label_span_not_found();\n-                    }\n-                } else {\n-                    label_span_not_found();\n-                }\n-\n                 if self.is_fn_ty(rcvr_ty, span) {\n                     fn report_function<T: std::fmt::Display>(err: &mut Diagnostic, name: T) {\n                         err.note(\n@@ -645,12 +502,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n+                let mut custom_span_label = false;\n+\n                 if !static_sources.is_empty() {\n                     err.note(\n                         \"found the following associated functions; to be used as methods, \\\n                          functions must have a `self` parameter\",\n                     );\n                     err.span_label(span, \"this is an associated function, not a method\");\n+                    custom_span_label = true;\n                 }\n                 if static_sources.len() == 1 {\n                     let ty_str = if let Some(CandidateSource::ImplSource(impl_did)) =\n@@ -686,6 +546,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     report_candidates(span, &mut err, static_sources, sugg_span);\n                 }\n \n+                let mut bound_spans = vec![];\n                 let mut restrict_type_params = false;\n                 let mut unsatisfied_bounds = false;\n                 if item_name.name == sym::count && self.is_slice_ty(actual, span) {\n@@ -709,7 +570,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id))\n                     };\n                     let mut type_params = FxHashMap::default();\n-                    let mut bound_spans = vec![];\n+\n+                    // Pick out the list of unimplemented traits on the receiver.\n+                    // This is used for custom error messages with the `#[rustc_on_unimplemented]` attribute.\n+                    let mut unimplemented_traits = FxHashMap::default();\n+                    for (predicate, _parent_pred, cause) in &unsatisfied_predicates {\n+                        if let (ty::PredicateKind::Trait(p), Some(cause)) =\n+                            (predicate.kind().skip_binder(), cause.as_ref())\n+                        {\n+                            if p.trait_ref.self_ty() != rcvr_ty {\n+                                // This is necessary, not just to keep the errors clean, but also\n+                                // because our derived obligations can wind up with a trait ref that\n+                                // requires a different param_env to be correctly compared.\n+                                continue;\n+                            }\n+                            unimplemented_traits.entry(p.trait_ref.def_id).or_insert((\n+                                predicate.kind().rebind(p.trait_ref),\n+                                Obligation {\n+                                    cause: cause.clone(),\n+                                    param_env: self.param_env,\n+                                    predicate: predicate.clone(),\n+                                    recursion_depth: 0,\n+                                },\n+                            ));\n+                        }\n+                    }\n \n                     let mut collect_type_param_suggestions =\n                         |self_ty: Ty<'tcx>, parent_pred: ty::Predicate<'tcx>, obligation: &str| {\n@@ -945,21 +830,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     bound_list.sort_by(|(_, a), (_, b)| a.cmp(b)); // Sort alphabetically.\n                     bound_list.dedup_by(|(_, a), (_, b)| a == b); // #35677\n                     bound_list.sort_by_key(|(pos, _)| *pos); // Keep the original predicate order.\n-                    bound_spans.sort();\n-                    bound_spans.dedup();\n-                    for (span, msg) in bound_spans.into_iter() {\n-                        err.span_label(span, &msg);\n-                    }\n+\n                     if !bound_list.is_empty() || !skip_list.is_empty() {\n                         let bound_list = bound_list\n                             .into_iter()\n                             .map(|(_, path)| path)\n                             .collect::<Vec<_>>()\n                             .join(\"\\n\");\n                         let actual_prefix = actual.prefix_string(self.tcx);\n-                        err.set_primary_message(&format!(\n+                        info!(\"unimplemented_traits.len() == {}\", unimplemented_traits.len());\n+                        let (primary_message, label) = if unimplemented_traits.len() == 1 {\n+                            unimplemented_traits\n+                                .into_iter()\n+                                .next()\n+                                .map(|(_, (trait_ref, obligation))| {\n+                                    if trait_ref.self_ty().references_error()\n+                                        || actual.references_error()\n+                                    {\n+                                        // Avoid crashing.\n+                                        return (None, None);\n+                                    }\n+                                    let OnUnimplementedNote { message, label, .. } =\n+                                        self.infcx.on_unimplemented_note(trait_ref, &obligation);\n+                                    (message, label)\n+                                })\n+                                .unwrap_or((None, None))\n+                        } else {\n+                            (None, None)\n+                        };\n+                        let primary_message = primary_message.unwrap_or_else(|| format!(\n                             \"the {item_kind} `{item_name}` exists for {actual_prefix} `{ty_str}`, but its trait bounds were not satisfied\"\n                         ));\n+                        err.set_primary_message(&primary_message);\n+                        if let Some(label) = label {\n+                            custom_span_label = true;\n+                            err.span_label(span, label);\n+                        }\n                         if !bound_list.is_empty() {\n                             err.note(&format!(\n                                 \"the following trait bounds were not satisfied:\\n{bound_list}\"\n@@ -971,6 +877,156 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n+                let mut label_span_not_found = || {\n+                    if unsatisfied_predicates.is_empty() {\n+                        err.span_label(span, format!(\"{item_kind} not found in `{ty_str}`\"));\n+                        let is_string_or_ref_str = match actual.kind() {\n+                            ty::Ref(_, ty, _) => {\n+                                ty.is_str()\n+                                    || matches!(\n+                                        ty.kind(),\n+                                        ty::Adt(adt, _) if self.tcx.is_diagnostic_item(sym::String, adt.did)\n+                                    )\n+                            }\n+                            ty::Adt(adt, _) => self.tcx.is_diagnostic_item(sym::String, adt.did),\n+                            _ => false,\n+                        };\n+                        if is_string_or_ref_str && item_name.name == sym::iter {\n+                            err.span_suggestion_verbose(\n+                                item_name.span,\n+                                \"because of the in-memory representation of `&str`, to obtain \\\n+                                 an `Iterator` over each of its codepoint use method `chars`\",\n+                                String::from(\"chars\"),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                        if let ty::Adt(adt, _) = rcvr_ty.kind() {\n+                            let mut inherent_impls_candidate = self\n+                                .tcx\n+                                .inherent_impls(adt.did)\n+                                .iter()\n+                                .copied()\n+                                .filter(|def_id| {\n+                                    if let Some(assoc) = self.associated_value(*def_id, item_name) {\n+                                        // Check for both mode is the same so we avoid suggesting\n+                                        // incorrect associated item.\n+                                        match (mode, assoc.fn_has_self_parameter, source) {\n+                                            (Mode::MethodCall, true, SelfSource::MethodCall(_)) => {\n+                                                // We check that the suggest type is actually\n+                                                // different from the received one\n+                                                // So we avoid suggestion method with Box<Self>\n+                                                // for instance\n+                                                self.tcx.at(span).type_of(*def_id) != actual\n+                                                    && self.tcx.at(span).type_of(*def_id) != rcvr_ty\n+                                            }\n+                                            (Mode::Path, false, _) => true,\n+                                            _ => false,\n+                                        }\n+                                    } else {\n+                                        false\n+                                    }\n+                                })\n+                                .collect::<Vec<_>>();\n+                            if !inherent_impls_candidate.is_empty() {\n+                                inherent_impls_candidate.sort();\n+                                inherent_impls_candidate.dedup();\n+\n+                                // number of type to shows at most.\n+                                let limit = if inherent_impls_candidate.len() == 5 { 5 } else { 4 };\n+                                let type_candidates = inherent_impls_candidate\n+                                    .iter()\n+                                    .take(limit)\n+                                    .map(|impl_item| {\n+                                        format!(\"- `{}`\", self.tcx.at(span).type_of(*impl_item))\n+                                    })\n+                                    .collect::<Vec<_>>()\n+                                    .join(\"\\n\");\n+                                let additional_types = if inherent_impls_candidate.len() > limit {\n+                                    format!(\n+                                        \"\\nand {} more types\",\n+                                        inherent_impls_candidate.len() - limit\n+                                    )\n+                                } else {\n+                                    \"\".to_string()\n+                                };\n+                                err.note(&format!(\n+                                    \"the {item_kind} was found for\\n{}{}\",\n+                                    type_candidates, additional_types\n+                                ));\n+                            }\n+                        }\n+                    } else {\n+                        err.span_label(span, format!(\"{item_kind} cannot be called on `{ty_str}` due to unsatisfied trait bounds\"));\n+                    }\n+                };\n+\n+                // If the method name is the name of a field with a function or closure type,\n+                // give a helping note that it has to be called as `(x.f)(...)`.\n+                if let SelfSource::MethodCall(expr) = source {\n+                    let field_receiver =\n+                        self.autoderef(span, rcvr_ty).find_map(|(ty, _)| match ty.kind() {\n+                            ty::Adt(def, substs) if !def.is_enum() => {\n+                                let variant = &def.non_enum_variant();\n+                                self.tcx.find_field_index(item_name, variant).map(|index| {\n+                                    let field = &variant.fields[index];\n+                                    let field_ty = field.ty(tcx, substs);\n+                                    (field, field_ty)\n+                                })\n+                            }\n+                            _ => None,\n+                        });\n+\n+                    if let Some((field, field_ty)) = field_receiver {\n+                        let scope = self.tcx.parent_module(self.body_id).to_def_id();\n+                        let is_accessible = field.vis.is_accessible_from(scope, self.tcx);\n+\n+                        if is_accessible {\n+                            if self.is_fn_ty(field_ty, span) {\n+                                let expr_span = expr.span.to(item_name.span);\n+                                err.multipart_suggestion(\n+                                    &format!(\n+                                        \"to call the function stored in `{}`, \\\n+                                         surround the field access with parentheses\",\n+                                        item_name,\n+                                    ),\n+                                    vec![\n+                                        (expr_span.shrink_to_lo(), '('.to_string()),\n+                                        (expr_span.shrink_to_hi(), ')'.to_string()),\n+                                    ],\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            } else {\n+                                let call_expr = self\n+                                    .tcx\n+                                    .hir()\n+                                    .expect_expr(self.tcx.hir().get_parent_node(expr.hir_id));\n+\n+                                if let Some(span) = call_expr.span.trim_start(item_name.span) {\n+                                    err.span_suggestion(\n+                                        span,\n+                                        \"remove the arguments\",\n+                                        String::new(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                            }\n+                        }\n+\n+                        let field_kind = if is_accessible { \"field\" } else { \"private field\" };\n+                        err.span_label(item_name.span, format!(\"{}, not a method\", field_kind));\n+                    } else if lev_candidate.is_none() && !custom_span_label {\n+                        label_span_not_found();\n+                    }\n+                } else if !custom_span_label {\n+                    label_span_not_found();\n+                }\n+\n+                bound_spans.sort();\n+                bound_spans.dedup();\n+                for (span, msg) in bound_spans.into_iter() {\n+                    err.span_label(span, &msg);\n+                }\n+\n                 if actual.is_numeric() && actual.is_fresh() || restrict_type_params {\n                 } else {\n                     self.suggest_traits_to_import("}, {"sha": "20dfbc6347c4fb761f24ab5ee32ef864470ca301", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -276,9 +276,10 @@ impl<'a, T, const N: usize> IntoIterator for &'a mut [T; N] {\n }\n \n #[stable(feature = \"index_trait_on_arrays\", since = \"1.50.0\")]\n-impl<T, I, const N: usize> Index<I> for [T; N]\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<T, I, const N: usize> const Index<I> for [T; N]\n where\n-    [T]: Index<I>,\n+    [T]: ~const Index<I>,\n {\n     type Output = <[T] as Index<I>>::Output;\n \n@@ -289,9 +290,10 @@ where\n }\n \n #[stable(feature = \"index_trait_on_arrays\", since = \"1.50.0\")]\n-impl<T, I, const N: usize> IndexMut<I> for [T; N]\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<T, I, const N: usize> const IndexMut<I> for [T; N]\n where\n-    [T]: IndexMut<I>,\n+    [T]: ~const IndexMut<I>,\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut Self::Output {"}, {"sha": "c35d0784dd5a46e0de6ce1be950110c3297ca3a6", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -34,6 +34,11 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n         note = \"`..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant \\\n               to have a bounded `RangeInclusive`: `0..=end`\"\n     ),\n+    on(\n+        _Self = \"[]\",\n+        label = \"`{Self}` is not an iterator; try calling `.into_iter()` or `.iter()`\"\n+    ),\n+    on(_Self = \"&[]\", label = \"`{Self}` is not an iterator; try calling `.iter()`\"),\n     on(\n         _Self = \"&str\",\n         label = \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\""}, {"sha": "97add8f2c6a744ac76e5c75dfa9823001bc2708d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -149,6 +149,8 @@\n #![feature(variant_count)]\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]\n+#![feature(const_slice_index)]\n+#![feature(const_is_char_boundary)]\n //\n // Language features:\n #![feature(abi_unadjusted)]\n@@ -167,6 +169,7 @@\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n #![feature(derive_default_enum)]\n+#![cfg_attr(not(bootstrap), feature(deprecated_suggestion))]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n #![feature(rustdoc_internals)]"}, {"sha": "07fd317e07486ff9493c992699974070d54bf852", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -809,7 +809,7 @@ impl u8 {\n         ascii::escape_default(self)\n     }\n \n-    pub(crate) fn is_utf8_char_boundary(self) -> bool {\n+    pub(crate) const fn is_utf8_char_boundary(self) -> bool {\n         // This is bit magic equivalent to: b < 128 || b >= 192\n         (self as i8) >= -0x40\n     }"}, {"sha": "5029e0560b8929b187d5e744e0a35ec6e1e61bcd", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -446,7 +446,7 @@ impl RangeInclusive<usize> {\n     /// Converts to an exclusive `Range` for `SliceIndex` implementations.\n     /// The caller is responsible for dealing with `end == usize::MAX`.\n     #[inline]\n-    pub(crate) fn into_slice_range(self) -> Range<usize> {\n+    pub(crate) const fn into_slice_range(self) -> Range<usize> {\n         // If we're not exhausted, we want to simply slice `start..end + 1`.\n         // If we are exhausted, then slicing with `end + 1..end + 1` gives us an\n         // empty range that is still subject to bounds-checks for that endpoint."}, {"sha": "ee544b4842e864d3de9ecd866b1061f2ff1e3315", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1032,10 +1032,11 @@ impl<T> *const [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output\n+    pub const unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output\n     where\n-        I: SliceIndex<[T]>,\n+        I: ~const SliceIndex<[T]>,\n     {\n         // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         unsafe { index.get_unchecked(self) }"}, {"sha": "3374b48c88c6b2b06419c4c6b09704de2d424c6a", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1302,10 +1302,11 @@ impl<T> *mut [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output\n+    pub const unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output\n     where\n-        I: SliceIndex<[T]>,\n+        I: ~const SliceIndex<[T]>,\n     {\n         // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         unsafe { index.get_unchecked_mut(self) }"}, {"sha": "c744ad5dd2deb002d5b2001a6a0e02339c61dbb4", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -630,10 +630,11 @@ impl<T> NonNull<[T]> {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_ptr_get\", issue = \"74265\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> NonNull<I::Output>\n+    pub const unsafe fn get_unchecked_mut<I>(self, index: I) -> NonNull<I::Output>\n     where\n-        I: SliceIndex<[T]>,\n+        I: ~const SliceIndex<[T]>,\n     {\n         // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         // As a consequence, the resulting pointer cannot be null."}, {"sha": "7e6fbbe353889cfa7b4fbeb8469b216cc70762e4", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 67, "deletions": 16, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1,12 +1,14 @@\n //! Indexing implementations for `[T]`.\n \n+use crate::intrinsics::const_eval_select;\n use crate::ops;\n use crate::ptr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, I> ops::Index<I> for [T]\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<T, I> const ops::Index<I> for [T]\n where\n-    I: SliceIndex<[T]>,\n+    I: ~const SliceIndex<[T]>,\n {\n     type Output = I::Output;\n \n@@ -17,9 +19,10 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, I> ops::IndexMut<I> for [T]\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<T, I> const ops::IndexMut<I> for [T]\n where\n-    I: SliceIndex<[T]>,\n+    I: ~const SliceIndex<[T]>,\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut I::Output {\n@@ -31,39 +34,80 @@ where\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+const fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe {\n+        const_eval_select(\n+            (index, len),\n+            slice_start_index_len_fail_ct,\n+            slice_start_index_len_fail_rt,\n+        )\n+    }\n+}\n+\n+// FIXME const-hack\n+fn slice_start_index_len_fail_rt(index: usize, len: usize) -> ! {\n     panic!(\"range start index {} out of range for slice of length {}\", index, len);\n }\n \n+const fn slice_start_index_len_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice start index is out of range for slice\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+const fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe {\n+        const_eval_select((index, len), slice_end_index_len_fail_ct, slice_end_index_len_fail_rt)\n+    }\n+}\n+\n+// FIXME const-hack\n+fn slice_end_index_len_fail_rt(index: usize, len: usize) -> ! {\n     panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n+const fn slice_end_index_len_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice end index is out of range for slice\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+const fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+    // SAFETY: we are just panicking here\n+    unsafe { const_eval_select((index, end), slice_index_order_fail_ct, slice_index_order_fail_rt) }\n+}\n+\n+// FIXME const-hack\n+fn slice_index_order_fail_rt(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n+const fn slice_index_order_fail_ct(_: usize, _: usize) -> ! {\n+    panic!(\"slice index start is larger than end\");\n+}\n+\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_start_index_overflow_fail() -> ! {\n+const fn slice_start_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice from after maximum usize\");\n }\n \n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n-fn slice_end_index_overflow_fail() -> ! {\n+const fn slice_end_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n@@ -153,7 +197,8 @@ pub unsafe trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for usize {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for usize {\n     type Output = T;\n \n     #[inline]\n@@ -197,7 +242,8 @@ unsafe impl<T> SliceIndex<[T]> for usize {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::Range<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -261,7 +307,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeTo<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -298,7 +345,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeFrom<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -343,7 +391,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n }\n \n #[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeFull {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeFull {\n     type Output = [T];\n \n     #[inline]\n@@ -378,7 +427,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeFull {\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeInclusive<usize> {\n     type Output = [T];\n \n     #[inline]\n@@ -421,7 +471,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n }\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl<T> const SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n     type Output = [T];\n \n     #[inline]"}, {"sha": "7311fe40e04d68c730dec9cf048355c9dddb14f1", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -324,10 +324,11 @@ impl<T> [T] {\n     /// assert_eq!(None, v.get(0..4));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub fn get<I>(&self, index: I) -> Option<&I::Output>\n+    pub const fn get<I>(&self, index: I) -> Option<&I::Output>\n     where\n-        I: SliceIndex<Self>,\n+        I: ~const SliceIndex<Self>,\n     {\n         index.get(self)\n     }\n@@ -348,10 +349,11 @@ impl<T> [T] {\n     /// assert_eq!(x, &[0, 42, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n+    pub const fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n     where\n-        I: SliceIndex<Self>,\n+        I: ~const SliceIndex<Self>,\n     {\n         index.get_mut(self)\n     }\n@@ -379,10 +381,11 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n+    pub const unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n     where\n-        I: SliceIndex<Self>,\n+        I: ~const SliceIndex<Self>,\n     {\n         // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;\n         // the slice is dereferenceable because `self` is a safe reference.\n@@ -415,10 +418,11 @@ impl<T> [T] {\n     /// assert_eq!(x, &[1, 13, 4]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n+    pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n     where\n-        I: SliceIndex<Self>,\n+        I: ~const SliceIndex<Self>,\n     {\n         // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n         // the slice is dereferenceable because `self` is a safe reference."}, {"sha": "f66bab999a98a0b832731ee18a30ea7005297351", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -79,7 +79,23 @@ use iter::{MatchesInternal, SplitNInternal};\n #[inline(never)]\n #[cold]\n #[track_caller]\n-fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n+#[rustc_allow_const_fn_unstable(const_eval_select)]\n+const fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n+    // SAFETY: panics for both branches\n+    unsafe {\n+        crate::intrinsics::const_eval_select(\n+            (s, begin, end),\n+            slice_error_fail_ct,\n+            slice_error_fail_rt,\n+        )\n+    }\n+}\n+\n+const fn slice_error_fail_ct(_: &str, _: usize, _: usize) -> ! {\n+    panic!(\"failed to slice string\");\n+}\n+\n+fn slice_error_fail_rt(s: &str, begin: usize, end: usize) -> ! {\n     const MAX_DISPLAY_LENGTH: usize = 256;\n     let trunc_len = s.floor_char_boundary(MAX_DISPLAY_LENGTH);\n     let s_trunc = &s[..trunc_len];\n@@ -189,8 +205,9 @@ impl str {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]\n+    #[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]\n     #[inline]\n-    pub fn is_char_boundary(&self, index: usize) -> bool {\n+    pub const fn is_char_boundary(&self, index: usize) -> bool {\n         // 0 is always ok.\n         // Test for 0 explicitly so that it can optimize out the check\n         // easily and skip reading string data for that case.\n@@ -418,8 +435,9 @@ impl str {\n     /// assert!(v.get(..42).is_none());\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+    pub const fn get<I: ~const SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n         i.get(self)\n     }\n \n@@ -450,8 +468,9 @@ impl str {\n     /// assert_eq!(\"HEllo\", v);\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+    pub const fn get_mut<I: ~const SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n         i.get_mut(self)\n     }\n \n@@ -482,8 +501,9 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n+    pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i: I) -> &I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n         // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n@@ -517,8 +537,12 @@ impl str {\n     /// }\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n+    pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n+        &mut self,\n+        i: I,\n+    ) -> &mut I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;\n         // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is."}, {"sha": "8b6b4fa02f8334525efd44c2f4a1a8de620cb6e1", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -53,9 +53,10 @@ impl PartialOrd for str {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ops::Index<I> for str\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<I> const ops::Index<I> for str\n where\n-    I: SliceIndex<str>,\n+    I: ~const SliceIndex<str>,\n {\n     type Output = I::Output;\n \n@@ -66,9 +67,10 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ops::IndexMut<I> for str\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+impl<I> const ops::IndexMut<I> for str\n where\n-    I: SliceIndex<str>,\n+    I: ~const SliceIndex<str>,\n {\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut I::Output {\n@@ -79,7 +81,7 @@ where\n #[inline(never)]\n #[cold]\n #[track_caller]\n-fn str_index_overflow_fail() -> ! {\n+const fn str_index_overflow_fail() -> ! {\n     panic!(\"attempted to index str up to maximum usize\");\n }\n \n@@ -96,7 +98,8 @@ fn str_index_overflow_fail() -> ! {\n ///\n /// Equivalent to `&self[0 .. len]` or `&mut self[0 .. len]`.\n #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeFull {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeFull {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -160,7 +163,8 @@ unsafe impl SliceIndex<str> for ops::RangeFull {\n /// // &s[3 .. 100];\n /// ```\n #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-unsafe impl SliceIndex<str> for ops::Range<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::Range<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -247,7 +251,8 @@ unsafe impl SliceIndex<str> for ops::Range<usize> {\n /// Panics if `end` does not point to the starting byte offset of a\n /// character (as defined by `is_char_boundary`), or if `end > len`.\n #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeTo<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeTo<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -317,7 +322,8 @@ unsafe impl SliceIndex<str> for ops::RangeTo<usize> {\n /// Panics if `begin` does not point to the starting byte offset of\n /// a character (as defined by `is_char_boundary`), or if `begin > len`.\n #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeFrom<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -393,7 +399,8 @@ unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {\n /// to the ending byte offset of a character (`end + 1` is either a starting\n /// byte offset or equal to `len`), if `begin > end`, or if `end >= len`.\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeInclusive<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {\n@@ -444,7 +451,8 @@ unsafe impl SliceIndex<str> for ops::RangeInclusive<usize> {\n /// (`end + 1` is either a starting byte offset as defined by\n /// `is_char_boundary`, or equal to `len`), or if `end >= len`.\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n-unsafe impl SliceIndex<str> for ops::RangeToInclusive<usize> {\n+#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n+unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n     type Output = str;\n     #[inline]\n     fn get(self, slice: &str) -> Option<&Self::Output> {"}, {"sha": "ebc0c5180d77b1d6157f6b461bc9be180bd5996c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -263,6 +263,7 @@\n #![feature(doc_cfg)]\n #![feature(doc_cfg_hide)]\n #![feature(rustdoc_internals)]\n+#![cfg_attr(not(bootstrap), feature(deprecated_suggestion))]\n #![feature(doc_masked)]\n #![feature(doc_notable_trait)]\n #![feature(dropck_eyepatch)]"}, {"sha": "b5276dc619bfb4c1835ff99ffae403b9fec0afdc", "filename": "src/test/ui/cast/fat-ptr-cast.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -19,6 +19,15 @@ fn main() {\n     q as *const [i32]; //~ ERROR cannot cast\n \n     // #21397\n-    let t: *mut (dyn Trait + 'static) = 0 as *mut _; //~ ERROR casting\n-    let mut fail: *const str = 0 as *const str; //~ ERROR casting\n+    let t: *mut (dyn Trait + 'static) = 0 as *mut _;\n+    //~^ ERROR cannot cast `usize` to a pointer that is wide\n+    let mut fail: *const str = 0 as *const str;\n+    //~^ ERROR cannot cast `usize` to a pointer that is wide\n+    let mut fail2: *const str = 0isize as *const str;\n+    //~^ ERROR cannot cast `isize` to a pointer that is wide\n+}\n+\n+fn foo<T: ?Sized>() {\n+    let s = 0 as *const T;\n+    //~^ ERROR cannot cast `usize` to a pointer that may be wide\n }"}, {"sha": "18e7b68ff3c22ad1c37e86661e08d22025118acc", "filename": "src/test/ui/cast/fat-ptr-cast.stderr", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -50,19 +50,39 @@ error[E0607]: cannot cast thin pointer `*const i32` to fat pointer `*const [i32]\n LL |     q as *const [i32];\n    |     ^^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `usize` as `*mut (dyn Trait + 'static)` is invalid\n-  --> $DIR/fat-ptr-cast.rs:22:41\n+error[E0606]: cannot cast `usize` to a pointer that is wide\n+  --> $DIR/fat-ptr-cast.rs:22:46\n    |\n LL |     let t: *mut (dyn Trait + 'static) = 0 as *mut _;\n-   |                                         ^^^^^^^^^^^\n+   |                                         -    ^^^^^^ creating a `*mut (dyn Trait + 'static)` requires both an address and a vtable\n+   |                                         |\n+   |                                         consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n \n-error[E0606]: casting `usize` as `*const str` is invalid\n-  --> $DIR/fat-ptr-cast.rs:23:32\n+error[E0606]: cannot cast `usize` to a pointer that is wide\n+  --> $DIR/fat-ptr-cast.rs:24:37\n    |\n LL |     let mut fail: *const str = 0 as *const str;\n-   |                                ^^^^^^^^^^^^^^^\n+   |                                -    ^^^^^^^^^^ creating a `*const str` requires both an address and a length\n+   |                                |\n+   |                                consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n \n-error: aborting due to 9 previous errors\n+error[E0606]: cannot cast `isize` to a pointer that is wide\n+  --> $DIR/fat-ptr-cast.rs:26:43\n+   |\n+LL |     let mut fail2: *const str = 0isize as *const str;\n+   |                                 ------    ^^^^^^^^^^ creating a `*const str` requires both an address and a length\n+   |                                 |\n+   |                                 consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n+\n+error[E0606]: cannot cast `usize` to a pointer that may be wide\n+  --> $DIR/fat-ptr-cast.rs:31:18\n+   |\n+LL |     let s = 0 as *const T;\n+   |             -    ^^^^^^^^ creating a `*const T` requires both an address and type-specific metadata\n+   |             |\n+   |             consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n+\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0605, E0606, E0607.\n For more information about an error, try `rustc --explain E0605`."}, {"sha": "910bfd1b5e48a4afa42423439de70ecd486ee234", "filename": "src/test/ui/deprecation/deprecation-in-staged-api.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/282778aee26166754315815552bae454fc968960/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282778aee26166754315815552bae454fc968960/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.rs?ref=282778aee26166754315815552bae454fc968960", "patch": "@@ -1,4 +0,0 @@\n-#![feature(staged_api)]\n-#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[deprecated] //~ ERROR `#[deprecated]` cannot be used in staged API\n-fn main() {}"}, {"sha": "5c14f5ed356f321d54f21846801b1333a3c77a4d", "filename": "src/test/ui/deprecation/deprecation-in-staged-api.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/282778aee26166754315815552bae454fc968960/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/282778aee26166754315815552bae454fc968960/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr?ref=282778aee26166754315815552bae454fc968960", "patch": "@@ -1,8 +0,0 @@\n-error: `#[deprecated]` cannot be used in staged API\n-  --> $DIR/deprecation-in-staged-api.rs:3:1\n-   |\n-LL | #[deprecated]\n-   | ^^^^^^^^^^^^^ use `#[rustc_deprecated]` instead\n-\n-error: aborting due to previous error\n-"}, {"sha": "a2d0023e3f47938b23195d9e93ab07a894bfb919", "filename": "src/test/ui/deprecation/feature-gate-deprecated_suggestion.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: --crate-type=lib\n+\n+#![no_implicit_prelude]\n+\n+#[deprecated(suggestion = \"foo\")] //~ ERROR suggestions on deprecated items are unstable\n+struct Foo {}"}, {"sha": "3b995fed75c8cb73afaeb067a33839676d141ad9", "filename": "src/test/ui/deprecation/feature-gate-deprecated_suggestion.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Ffeature-gate-deprecated_suggestion.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -0,0 +1,11 @@\n+error: suggestions on deprecated items are unstable\n+  --> $DIR/feature-gate-deprecated_suggestion.rs:5:14\n+   |\n+LL | #[deprecated(suggestion = \"foo\")]\n+   |              ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(deprecated_suggestion)]` to the crate root\n+   = note: see #XXX for more details\n+\n+error: aborting due to previous error\n+"}, {"sha": "87b15ec303c336c751b18c0862c14ab753d4e454", "filename": "src/test/ui/deprecation/staged-deprecation-in-future.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fstaged-deprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fstaged-deprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fstaged-deprecation-in-future.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -4,11 +4,11 @@\n \n #![stable(feature = \"rustc_deprecation-in-future-test\", since = \"1.0.0\")]\n \n-#[rustc_deprecated(since = \"99.99.99\", reason = \"effectively never\")]\n+#[deprecated(since = \"99.99.99\", note = \"effectively never\")]\n #[stable(feature = \"rustc_deprecation-in-future-test\", since = \"1.0.0\")]\n pub struct S1;\n \n-#[rustc_deprecated(since = \"TBD\", reason = \"literally never\")]\n+#[deprecated(since = \"TBD\", note = \"literally never\")]\n #[stable(feature = \"rustc_deprecation-in-future-test\", since = \"1.0.0\")]\n pub struct S2;\n ", "previous_filename": "src/test/ui/deprecation/rustc_deprecation-in-future.rs"}, {"sha": "13d98044a88d830a2bed66c4898885cd39b9ff07", "filename": "src/test/ui/deprecation/staged-deprecation-in-future.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fstaged-deprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fstaged-deprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fstaged-deprecation-in-future.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1,17 +1,17 @@\n error: use of unit struct `S1` that will be deprecated in future version 99.99.99: effectively never\n-  --> $DIR/rustc_deprecation-in-future.rs:16:13\n+  --> $DIR/staged-deprecation-in-future.rs:16:13\n    |\n LL |     let _ = S1;\n    |             ^^\n    |\n note: the lint level is defined here\n-  --> $DIR/rustc_deprecation-in-future.rs:1:9\n+  --> $DIR/staged-deprecation-in-future.rs:1:9\n    |\n LL | #![deny(deprecated_in_future)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: use of unit struct `S2` that will be deprecated in a future Rust version: literally never\n-  --> $DIR/rustc_deprecation-in-future.rs:17:13\n+  --> $DIR/staged-deprecation-in-future.rs:17:13\n    |\n LL |     let _ = S2;\n    |             ^^", "previous_filename": "src/test/ui/deprecation/rustc_deprecation-in-future.stderr"}, {"sha": "d9fa2b56eeef705b94a316842252e34c1234600f", "filename": "src/test/ui/deprecation/suggestion.fixed", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.fixed?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![feature(staged_api)]\n+#![feature(deprecated_suggestion)]\n \n #![stable(since = \"1.0.0\", feature = \"test\")]\n \n@@ -10,9 +11,9 @@\n struct Foo;\n \n impl Foo {\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.0.0\",\n-        reason = \"replaced by `replacement`\",\n+        note = \"replaced by `replacement`\",\n         suggestion = \"replacement\",\n     )]\n     #[stable(since = \"1.0.0\", feature = \"test\")]\n@@ -22,9 +23,9 @@ impl Foo {\n }\n \n mod bar {\n-    #[rustc_deprecated(\n+    #[deprecated(\n     since = \"1.0.0\",\n-    reason = \"replaced by `replacement`\",\n+    note = \"replaced by `replacement`\",\n     suggestion = \"replacement\",\n     )]\n     #[stable(since = \"1.0.0\", feature = \"test\")]"}, {"sha": "9dc2eaf25550710b4b945dc66a5170ccf248d366", "filename": "src/test/ui/deprecation/suggestion.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![feature(staged_api)]\n+#![feature(deprecated_suggestion)]\n \n #![stable(since = \"1.0.0\", feature = \"test\")]\n \n@@ -10,9 +11,9 @@\n struct Foo;\n \n impl Foo {\n-    #[rustc_deprecated(\n+    #[deprecated(\n         since = \"1.0.0\",\n-        reason = \"replaced by `replacement`\",\n+        note = \"replaced by `replacement`\",\n         suggestion = \"replacement\",\n     )]\n     #[stable(since = \"1.0.0\", feature = \"test\")]\n@@ -22,9 +23,9 @@ impl Foo {\n }\n \n mod bar {\n-    #[rustc_deprecated(\n+    #[deprecated(\n     since = \"1.0.0\",\n-    reason = \"replaced by `replacement`\",\n+    note = \"replaced by `replacement`\",\n     suggestion = \"replacement\",\n     )]\n     #[stable(since = \"1.0.0\", feature = \"test\")]"}, {"sha": "8d1e108345f30418210b459951133102253c6cd1", "filename": "src/test/ui/deprecation/suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1,17 +1,17 @@\n error: use of deprecated function `bar::deprecated`: replaced by `replacement`\n-  --> $DIR/suggestion.rs:41:10\n+  --> $DIR/suggestion.rs:42:10\n    |\n LL |     bar::deprecated();\n    |          ^^^^^^^^^^ help: replace the use of the deprecated function: `replacement`\n    |\n note: the lint level is defined here\n-  --> $DIR/suggestion.rs:7:9\n+  --> $DIR/suggestion.rs:8:9\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n \n error: use of deprecated associated function `Foo::deprecated`: replaced by `replacement`\n-  --> $DIR/suggestion.rs:39:9\n+  --> $DIR/suggestion.rs:40:9\n    |\n LL |     foo.deprecated();\n    |         ^^^^^^^^^^ help: replace the use of the deprecated associated function: `replacement`"}, {"sha": "3acfbd0ca23aedd6b89356c27a504d4b800e8953", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-rustc_deprecated.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/282778aee26166754315815552bae454fc968960/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282778aee26166754315815552bae454fc968960/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.rs?ref=282778aee26166754315815552bae454fc968960", "patch": "@@ -1,43 +0,0 @@\n-// Testing gating of `#[rustc_deprecated]` in \"weird\" places.\n-//\n-// This file sits on its own because these signal errors, making\n-// this test incompatible with the \"warnings only\" nature of\n-// issue-43106-gating-of-builtin-attrs.rs\n-\n-#![rustc_deprecated()]\n-//~^ ERROR stability attributes may not be used outside of the standard library\n-//~| ERROR missing 'since' [E0542]\n-\n-#[rustc_deprecated()]\n-//~^ ERROR stability attributes may not be used outside of the standard library\n-//~| ERROR missing 'since' [E0542]\n-mod rustc_deprecated {\n-    mod inner {\n-        #![rustc_deprecated()]\n-        //~^ ERROR stability attributes may not be used outside of the standard library\n-        //~| ERROR missing 'since' [E0542]\n-    }\n-\n-    #[rustc_deprecated()]\n-    //~^ ERROR stability attributes may not be used outside of the standard library\n-    //~| ERROR missing 'since' [E0542]\n-    fn f() {}\n-\n-    #[rustc_deprecated()]\n-    //~^ ERROR stability attributes may not be used outside of the standard library\n-    //~| ERROR missing 'since' [E0542]\n-    //~| ERROR missing 'since' [E0542]\n-    struct S;\n-\n-    #[rustc_deprecated()]\n-    //~^ ERROR stability attributes may not be used outside of the standard library\n-    //~| ERROR missing 'since' [E0542]\n-    type T = S;\n-\n-    #[rustc_deprecated()]\n-    //~^ ERROR stability attributes may not be used outside of the standard library\n-    //~| ERROR missing 'since' [E0542]\n-    impl S {}\n-}\n-\n-fn main() {}"}, {"sha": "4ec78f318c2338fd6d19de21e2e3e59f5001dd7b", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-rustc_deprecated.stderr", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/282778aee26166754315815552bae454fc968960/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/282778aee26166754315815552bae454fc968960/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-rustc_deprecated.stderr?ref=282778aee26166754315815552bae454fc968960", "patch": "@@ -1,94 +0,0 @@\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:16:9\n-   |\n-LL |         #![rustc_deprecated()]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:21:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:26:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:32:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:37:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:11:1\n-   |\n-LL | #[rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:7:1\n-   |\n-LL | #![rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:7:1\n-   |\n-LL | #![rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:11:1\n-   |\n-LL | #[rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:16:9\n-   |\n-LL |         #![rustc_deprecated()]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:21:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:26:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:26:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:32:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:37:5\n-   |\n-LL |     #[rustc_deprecated()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 15 previous errors\n-\n-Some errors have detailed explanations: E0542, E0734.\n-For more information about an error, try `rustc --explain E0542`."}, {"sha": "193f89f83789713ceee17de020266ad0c9925ccc", "filename": "src/test/ui/issues/issue-17337.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fissues%2Fissue-17337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fissues%2Fissue-17337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17337.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -7,7 +7,7 @@ struct Foo;\n \n impl Foo {\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn foo(self) {}\n }\n "}, {"sha": "a336d1b0ed55d7e5707a1131dde331581ecaefce", "filename": "src/test/ui/issues/issue-21596.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: the method `to_string` exists for raw pointer `*const u8`, but its trait bounds were not satisfied\n+error[E0599]: `*const u8` doesn't implement `std::fmt::Display`\n   --> $DIR/issue-21596.rs:4:22\n    |\n LL |     println!(\"{}\", z.to_string());\n-   |                      ^^^^^^^^^ method cannot be called on `*const u8` due to unsatisfied trait bounds\n+   |                      ^^^^^^^^^ `*const u8` cannot be formatted with the default formatter\n    |\n    = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\n    = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior"}, {"sha": "62100e5cc9496c0dd153155c3402582d6817823f", "filename": "src/test/ui/lint/auxiliary/inherited_stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Finherited_stability.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -20,7 +20,7 @@ pub mod stable_mod {\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub mod unstable_mod {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn deprecated() {}\n \n     pub fn unstable() {}"}, {"sha": "4e3547250e4c4f1016d42924d0779ae9bedab482", "filename": "src/test/ui/lint/auxiliary/lint_output_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_output_format.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -4,7 +4,7 @@\n #![unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn foo() -> usize {\n     20\n }"}, {"sha": "99c29dcdda6777f28e7d8d43438caf2a5881fdfc", "filename": "src/test/ui/lint/auxiliary/lint_stability.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -5,21 +5,21 @@\n #![stable(feature = \"lint_stability\", since = \"1.0.0\")]\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn deprecated() {}\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn deprecated_text() {}\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"99.99.99\", reason = \"text\")]\n+#[deprecated(since = \"99.99.99\", note = \"text\")]\n pub fn deprecated_future() {}\n \n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn deprecated_unstable() {}\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn deprecated_unstable_text() {}\n \n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -37,17 +37,17 @@ pub struct MethodTester;\n \n impl MethodTester {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn method_deprecated(&self) {}\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn method_deprecated_text(&self) {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn method_deprecated_unstable(&self) {}\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn method_deprecated_unstable_text(&self) {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -64,17 +64,17 @@ impl MethodTester {\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub trait Trait {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn trait_deprecated(&self) {}\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn trait_deprecated_text(&self) {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn trait_deprecated_unstable(&self) {}\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn trait_deprecated_unstable_text(&self) {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -93,7 +93,7 @@ pub trait TraitWithAssociatedTypes {\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     type TypeUnstable = u8;\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     type TypeDeprecated = u8;\n }\n \n@@ -104,18 +104,18 @@ impl Trait for MethodTester {}\n pub trait UnstableTrait { fn dummy(&self) { } }\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub trait DeprecatedTrait {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] fn dummy(&self) { }\n }\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedUnstableStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n@@ -133,10 +133,10 @@ pub enum UnstableEnum {}\n pub enum StableEnum {}\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedUnitStruct;\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedUnstableUnitStruct;\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableUnitStruct;\n@@ -146,10 +146,10 @@ pub struct StableUnitStruct;\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub enum Enum {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     DeprecatedVariant,\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     DeprecatedUnstableVariant,\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     UnstableVariant,\n@@ -159,10 +159,10 @@ pub enum Enum {\n }\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedUnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);"}, {"sha": "e72a501e11b40cf643781d266f91b09135ecb5f2", "filename": "src/test/ui/lint/auxiliary/lint_stability_fields.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability_fields.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -6,7 +6,7 @@ pub struct Stable {\n     pub inherit: u8,\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub override1: u8,\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub override2: u8,\n     #[stable(feature = \"rust2\", since = \"2.0.0\")]\n@@ -17,7 +17,7 @@ pub struct Stable {\n pub struct Stable2(#[stable(feature = \"rust2\", since = \"2.0.0\")] pub u8,\n                    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")] pub u8,\n                    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-                   #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] pub u8,\n+                   #[deprecated(since = \"1.0.0\", note = \"text\")] pub u8,\n                    pub u8);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -28,7 +28,7 @@ pub enum Stable3 {\n     Override1,\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     Override2,\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     Override3,\n }\n@@ -38,7 +38,7 @@ pub struct Unstable {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub override1: u8,\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub override2: u8,\n }\n@@ -47,10 +47,10 @@ pub struct Unstable {\n pub struct Unstable2(pub u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n                      #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-                     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n+                     #[deprecated(since = \"1.0.0\", note = \"text\")] pub u8);\n \n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct Deprecated {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -60,7 +60,7 @@ pub struct Deprecated {\n }\n \n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct Deprecated2(pub u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n                        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")] pub u8);"}, {"sha": "94a8d08c8fe9ce98750b3960aa3ad3f080175e4a", "filename": "src/test/ui/lint/lint-stability-2.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -169,10 +169,10 @@ mod cross_crate {\n \n mod this_crate {\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn deprecated() {}\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn deprecated_text() {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -190,10 +190,10 @@ mod this_crate {\n \n     impl MethodTester {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         pub fn method_deprecated(&self) {}\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -209,10 +209,10 @@ mod this_crate {\n \n     pub trait Trait {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn trait_deprecated(&self) {}\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -229,7 +229,7 @@ mod this_crate {\n     impl Trait for MethodTester {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n@@ -243,7 +243,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedUnitStruct;\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableUnitStruct;\n@@ -252,7 +252,7 @@ mod this_crate {\n \n     pub enum Enum {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         DeprecatedVariant,\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         UnstableVariant,\n@@ -262,7 +262,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableTupleStruct(isize);\n@@ -382,23 +382,23 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body();\n     }\n \n     impl MethodTester {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body();\n         }\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }\n     }"}, {"sha": "bdc66e83083f66e6704b198354088eec67bf4a68", "filename": "src/test/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -219,10 +219,10 @@ mod inheritance {\n \n mod this_crate {\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn deprecated() {}\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn deprecated_text() {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -240,10 +240,10 @@ mod this_crate {\n \n     impl MethodTester {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         pub fn method_deprecated(&self) {}\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -259,10 +259,10 @@ mod this_crate {\n \n     pub trait Trait {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn trait_deprecated(&self) {}\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -279,7 +279,7 @@ mod this_crate {\n     impl Trait for MethodTester {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n@@ -293,7 +293,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedUnitStruct;\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableUnitStruct;\n@@ -302,7 +302,7 @@ mod this_crate {\n \n     pub enum Enum {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         DeprecatedVariant,\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         UnstableVariant,\n@@ -312,7 +312,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableTupleStruct(isize);\n@@ -433,23 +433,23 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body(); //~ WARN use of deprecated function `this_crate::test_fn_body::fn_in_body`: text\n     }\n \n     impl MethodTester {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body(); //~ WARN use of deprecated function `this_crate::MethodTester::test_method_body::fn_in_body`: text\n         }\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }\n     }"}, {"sha": "a5511966d7e79bad5793724f0623b8f87f973bdd", "filename": "src/test/ui/lint/lint-stability-fields-deprecated.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -160,7 +160,7 @@ mod this_crate {\n         inherit: u8,\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override1: u8,\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n@@ -169,14 +169,14 @@ mod this_crate {\n     struct Stable2(u8,\n                    #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n                    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-                   #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n+                   #[deprecated(since = \"1.0.0\", note = \"text\")] u8);\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     struct Unstable {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n@@ -185,10 +185,10 @@ mod this_crate {\n     struct Unstable2(u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n                      #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-                     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n+                     #[deprecated(since = \"1.0.0\", note = \"text\")] u8);\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     struct Deprecated {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -198,7 +198,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     struct Deprecated2(u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n                        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")] u8);"}, {"sha": "51990b6eef161fba0eb8a6d8593b8ff422b1b20f", "filename": "src/test/ui/lint/lint-stability-fields.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-fields.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -135,7 +135,7 @@ mod this_crate {\n         inherit: u8,\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override1: u8,\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n         #[stable(feature = \"rust2\", since = \"2.0.0\")]\n@@ -146,14 +146,14 @@ mod this_crate {\n     struct Stable2(u8,\n                    #[stable(feature = \"rust2\", since = \"2.0.0\")] u8,\n                    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-                   #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n+                   #[deprecated(since = \"1.0.0\", note = \"text\")] u8);\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     struct Unstable {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n@@ -162,10 +162,10 @@ mod this_crate {\n     struct Unstable2(u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n                      #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-                     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n+                     #[deprecated(since = \"1.0.0\", note = \"text\")] u8);\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     struct Deprecated {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -175,7 +175,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     struct Deprecated2(u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n                        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")] u8);"}, {"sha": "464b32c5f43ed994ac6a1259da96e5f41a185757", "filename": "src/test/ui/lint/lint-stability.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -204,14 +204,14 @@ mod inheritance {\n \n mod this_crate {\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn deprecated() {}\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn deprecated_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"99.99.99\", reason = \"text\")]\n+    #[deprecated(since = \"99.99.99\", note = \"text\")]\n     pub fn deprecated_future() {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -229,10 +229,10 @@ mod this_crate {\n \n     impl MethodTester {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         pub fn method_deprecated(&self) {}\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -248,10 +248,10 @@ mod this_crate {\n \n     pub trait Trait {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn trait_deprecated(&self) {}\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -268,7 +268,7 @@ mod this_crate {\n     impl Trait for MethodTester {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n@@ -282,7 +282,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedUnitStruct;\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableUnitStruct;\n@@ -291,7 +291,7 @@ mod this_crate {\n \n     pub enum Enum {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         DeprecatedVariant,\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         UnstableVariant,\n@@ -301,7 +301,7 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableTupleStruct(isize);\n@@ -423,23 +423,23 @@ mod this_crate {\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body();\n     }\n \n     impl MethodTester {\n         #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-        #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+        #[deprecated(since = \"1.0.0\", note = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body();\n         }\n     }\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }\n     }"}, {"sha": "3aadd4b0ca64181d732e9b2dcbe649bc173f58b9", "filename": "src/test/ui/macros/auxiliary/unstable-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -7,7 +7,7 @@\n macro_rules! unstable_macro{ () => () }\n \n #[stable(feature = \"deprecated_macros\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"deprecation reason\")]\n+#[deprecated(since = \"1.0.0\", note = \"deprecation note\")]\n #[macro_export]\n macro_rules! deprecated_macro{ () => () }\n "}, {"sha": "ed7618a672be8910d0a710132a68374e8b1fa2d4", "filename": "src/test/ui/macros/macro-stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -14,7 +14,7 @@ macro_rules! local_unstable { () => () }\n macro local_unstable_modern() {}\n \n #[stable(feature = \"deprecated_macros\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"local deprecation reason\")]\n+#[deprecated(since = \"1.0.0\", note = \"local deprecation note\")]\n #[macro_export]\n macro_rules! local_deprecated{ () => () }\n \n@@ -25,7 +25,7 @@ fn main() {\n     // unstable_macro_modern!(); // ERROR use of unstable library feature 'unstable_macros'\n \n     deprecated_macro!();\n-    //~^ WARN use of deprecated macro `deprecated_macro`: deprecation reason\n+    //~^ WARN use of deprecated macro `deprecated_macro`: deprecation note\n     local_deprecated!();\n-    //~^ WARN use of deprecated macro `local_deprecated`: local deprecation reason\n+    //~^ WARN use of deprecated macro `local_deprecated`: local deprecation note\n }"}, {"sha": "2cfdb52b174a90f3dce9ecc667e2f026fda7dc96", "filename": "src/test/ui/macros/macro-stability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -22,15 +22,15 @@ LL |     unstable_macro!();\n    |\n    = help: add `#![feature(unstable_macros)]` to the crate attributes to enable\n \n-warning: use of deprecated macro `deprecated_macro`: deprecation reason\n+warning: use of deprecated macro `deprecated_macro`: deprecation note\n   --> $DIR/macro-stability.rs:27:5\n    |\n LL |     deprecated_macro!();\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n-warning: use of deprecated macro `local_deprecated`: local deprecation reason\n+warning: use of deprecated macro `local_deprecated`: local deprecation note\n   --> $DIR/macro-stability.rs:29:5\n    |\n LL |     local_deprecated!();"}, {"sha": "df393e91db0842d65f12e78111a42dc926083772", "filename": "src/test/ui/methods/issues/issue-94581.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-94581.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-94581.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-94581.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -0,0 +1,7 @@\n+fn get_slice() -> &'static [i32] {\n+    &[1, 2, 3, 4]\n+}\n+\n+fn main() {\n+    let sqsum = get_slice().map(|i| i * i).sum(); //~ ERROR [E0599]\n+}"}, {"sha": "d6be29cf582c37deef9e4b75a9280a4dfcc15779", "filename": "src/test/ui/methods/issues/issue-94581.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-94581.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-94581.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-94581.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: `&'static [i32]` is not an iterator\n+  --> $DIR/issue-94581.rs:6:29\n+   |\n+LL |     let sqsum = get_slice().map(|i| i * i).sum();\n+   |                             ^^^ `&'static [i32]` is not an iterator; try calling `.iter()`\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `&'static [i32]: Iterator`\n+           which is required by `&mut &'static [i32]: Iterator`\n+           `[i32]: Iterator`\n+           which is required by `&mut [i32]: Iterator`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "d53ef445afc1bcf06174bf700cb2098ae2a7ac31", "filename": "src/test/ui/methods/method-call-err-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -16,7 +16,7 @@ fn main() {\n \n     let y = Foo;\n     y.zero()\n-     .take()    //~ ERROR the method\n+     .take()    //~ ERROR not an iterator\n      .one(0);\n     y.three::<usize>(); //~ ERROR this function takes 3 arguments but 0 arguments were supplied\n }"}, {"sha": "c410e076dde2655babda04452050473b7cdc44d2", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -40,7 +40,7 @@ note: associated function defined here\n LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n    |        ^^^ ----  --------  --------\n \n-error[E0599]: the method `take` exists for struct `Foo`, but its trait bounds were not satisfied\n+error[E0599]: `Foo` is not an iterator\n   --> $DIR/method-call-err-msg.rs:19:7\n    |\n LL | pub struct Foo;\n@@ -50,7 +50,7 @@ LL | pub struct Foo;\n    | doesn't satisfy `Foo: Iterator`\n ...\n LL |      .take()\n-   |       ^^^^ method cannot be called on `Foo` due to unsatisfied trait bounds\n+   |       ^^^^ `Foo` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Foo: Iterator`"}, {"sha": "57222f45947b41d8e9d8dea3f3fb863d750f98ac", "filename": "src/test/ui/mismatched_types/cast-rfc0401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -48,7 +48,7 @@ fn main()\n     let _ = E::A as *const u8; //~ ERROR is invalid\n     let _ = 'a' as *const u8; //~ ERROR is invalid\n \n-    let _ = 42usize as *const [u8]; //~ ERROR is invalid\n+    let _ = 42usize as *const [u8]; //~ ERROR cannot cast `usize` to a pointer that is wide\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const dyn Foo; //~ ERROR the size for values of type\n     let _ = foo as *const str; //~ ERROR is invalid"}, {"sha": "5f11e4ded8004e9b9552e0dc8bb9d39692c5a254", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -148,11 +148,13 @@ error[E0606]: casting `char` as `*const u8` is invalid\n LL |     let _ = 'a' as *const u8;\n    |             ^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `usize` as `*const [u8]` is invalid\n-  --> $DIR/cast-rfc0401.rs:51:13\n+error[E0606]: cannot cast `usize` to a pointer that is wide\n+  --> $DIR/cast-rfc0401.rs:51:24\n    |\n LL |     let _ = 42usize as *const [u8];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |             -------    ^^^^^^^^^^^ creating a `*const [u8]` requires both an address and a length\n+   |             |\n+   |             consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n \n error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   --> $DIR/cast-rfc0401.rs:52:13"}, {"sha": "0252ba2eb04606e860492fec1757de88a3015de4", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -5,6 +5,6 @@\n use std::iter::once;\n fn main() {\n     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-    //~^ ERROR the method\n+    //~^ ERROR not an iterator\n     //~| ERROR type mismatch in closure arguments\n }"}, {"sha": "b1010171eb23560fee29e2c705c15b8a6b55f736", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -12,11 +12,11 @@ note: required by a bound in `filter`\n LL |         P: FnMut(&Self::Item) -> bool,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `filter`\n \n-error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`, but its trait bounds were not satisfied\n+error[E0599]: `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` is not an iterator\n   --> $DIR/issue-36053-2.rs:7:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                       --------------  ^^^^^ method cannot be called on `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` due to unsatisfied trait bounds\n+   |                                       --------------  ^^^^^ `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` is not an iterator\n    |                                       |\n    |                                       doesn't satisfy `<_ as FnOnce<(&&str,)>>::Output = bool`\n    |                                       doesn't satisfy `_: FnMut<(&&str,)>`"}, {"sha": "99c29dcdda6777f28e7d8d43438caf2a5881fdfc", "filename": "src/test/ui/stability-attribute/auxiliary/lint-stability.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Flint-stability.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -5,21 +5,21 @@\n #![stable(feature = \"lint_stability\", since = \"1.0.0\")]\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn deprecated() {}\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn deprecated_text() {}\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"99.99.99\", reason = \"text\")]\n+#[deprecated(since = \"99.99.99\", note = \"text\")]\n pub fn deprecated_future() {}\n \n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn deprecated_unstable() {}\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub fn deprecated_unstable_text() {}\n \n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -37,17 +37,17 @@ pub struct MethodTester;\n \n impl MethodTester {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn method_deprecated(&self) {}\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn method_deprecated_text(&self) {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn method_deprecated_unstable(&self) {}\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn method_deprecated_unstable_text(&self) {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -64,17 +64,17 @@ impl MethodTester {\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub trait Trait {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn trait_deprecated(&self) {}\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn trait_deprecated_text(&self) {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn trait_deprecated_unstable(&self) {}\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     fn trait_deprecated_unstable_text(&self) {}\n \n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n@@ -93,7 +93,7 @@ pub trait TraitWithAssociatedTypes {\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     type TypeUnstable = u8;\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     type TypeDeprecated = u8;\n }\n \n@@ -104,18 +104,18 @@ impl Trait for MethodTester {}\n pub trait UnstableTrait { fn dummy(&self) { } }\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub trait DeprecatedTrait {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] fn dummy(&self) { }\n }\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedUnstableStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n@@ -133,10 +133,10 @@ pub enum UnstableEnum {}\n pub enum StableEnum {}\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedUnitStruct;\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedUnstableUnitStruct;\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableUnitStruct;\n@@ -146,10 +146,10 @@ pub struct StableUnitStruct;\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub enum Enum {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     DeprecatedVariant,\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+    #[deprecated(since = \"1.0.0\", note = \"text\")]\n     DeprecatedUnstableVariant,\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     UnstableVariant,\n@@ -159,10 +159,10 @@ pub enum Enum {\n }\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n-#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n pub struct DeprecatedUnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);"}, {"sha": "1d6a6bd4e13fcbabaf21e3e8e636743d5ca1a2ec", "filename": "src/test/ui/stability-attribute/auxiliary/unstable_generic_param.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Funstable_generic_param.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -40,14 +40,14 @@ pub struct Struct3<A = isize, #[unstable(feature = \"unstable_default\", issue = \"\n     pub field2: B,\n }\n \n-#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[deprecated(since = \"1.1.0\", note = \"test\")]\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub struct Struct4<A = usize> {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     pub field: A,\n }\n \n-#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[deprecated(since = \"1.1.0\", note = \"test\")]\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub struct Struct5<#[unstable(feature = \"unstable_default\", issue = \"none\")] A = usize> {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -99,7 +99,7 @@ pub enum Enum3<T = isize, #[unstable(feature = \"unstable_default\", issue = \"none\n     Err(#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] E),\n }\n \n-#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[deprecated(since = \"1.1.0\", note = \"test\")]\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub enum Enum4<T = usize> {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -108,7 +108,7 @@ pub enum Enum4<T = usize> {\n     None,\n }\n \n-#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[deprecated(since = \"1.1.0\", note = \"test\")]\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub enum Enum5<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -152,11 +152,11 @@ pub type Alias2<T = usize> = Option<T>;\n pub type Alias3<T = isize, #[unstable(feature = \"unstable_default\", issue = \"none\")] E = usize> =\n     Result<T, E>;\n \n-#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[deprecated(since = \"1.1.0\", note = \"test\")]\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub type Alias4<T = usize> = Option<T>;\n \n-#[rustc_deprecated(since = \"1.1.0\", reason = \"test\")]\n+#[deprecated(since = \"1.1.0\", note = \"test\")]\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub type Alias5<#[unstable(feature = \"unstable_default\", issue = \"none\")] T = usize> = Option<T>;\n "}, {"sha": "f61acc8aac5db919b6376e1f9fafb188e9f24cc3", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged-force-unstable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -2,6 +2,4 @@\n \n #[unstable()] //~ ERROR: stability attributes may not be used\n #[stable()] //~ ERROR: stability attributes may not be used\n-#[rustc_deprecated()] //~ ERROR: stability attributes may not be used\n-//~^ ERROR missing 'since'\n fn main() {}"}, {"sha": "45d965ea0a069a0d29c8ea062217c489820c8880", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged-force-unstable.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -10,19 +10,6 @@ error[E0734]: stability attributes may not be used outside of the standard libra\n LL | #[stable()]\n    | ^^^^^^^^^^^\n \n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/stability-attribute-non-staged-force-unstable.rs:5:1\n-   |\n-LL | #[rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/stability-attribute-non-staged-force-unstable.rs:5:1\n-   |\n-LL | #[rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0542, E0734.\n-For more information about an error, try `rustc --explain E0542`.\n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "4015f2f971e696f25ce21e9e0469c14217f5db73", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -1,5 +1,3 @@\n #[unstable()] //~ ERROR: stability attributes may not be used\n #[stable()] //~ ERROR: stability attributes may not be used\n-#[rustc_deprecated()] //~ ERROR: stability attributes may not be used\n-//~^ ERROR missing 'since'\n fn main() {}"}, {"sha": "391f3c2744d3cb77478e79bccdf3a96d1ecbdccb", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -10,19 +10,6 @@ error[E0734]: stability attributes may not be used outside of the standard libra\n LL | #[stable()]\n    | ^^^^^^^^^^^\n \n-error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/stability-attribute-non-staged.rs:3:1\n-   |\n-LL | #[rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0542]: missing 'since'\n-  --> $DIR/stability-attribute-non-staged.rs:3:1\n-   |\n-LL | #[rustc_deprecated()]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0542, E0734.\n-For more information about an error, try `rustc --explain E0542`.\n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "64f996352196a8406dfb034623dcf954de8df536", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-4.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -18,13 +18,11 @@ mod bogus_attribute_types_2 {\n     fn f4() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[rustc_deprecated] //~ ERROR malformed `rustc_deprecated` attribute\n-                        //~^ ERROR missing 'since'\n+    #[deprecated] //~ ERROR missing 'since'\n     fn f5() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[rustc_deprecated = \"a\"] //~ ERROR malformed `rustc_deprecated` attribute\n-                              //~^ ERROR missing 'since'\n+    #[deprecated = \"a\"] //~ ERROR missing 'since'\n     fn f6() { }\n }\n "}, {"sha": "a76f5be1e3d7c428f312e286d35f030ae8a127d2", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-4.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -22,30 +22,18 @@ error: malformed `stable` attribute input\n LL |     #[stable = \"a\"]\n    |     ^^^^^^^^^^^^^^^ help: must be of the form: `#[stable(feature = \"name\", since = \"version\")]`\n \n-error: malformed `rustc_deprecated` attribute input\n-  --> $DIR/stability-attribute-sanity-4.rs:21:5\n-   |\n-LL |     #[rustc_deprecated]\n-   |     ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n-\n-error: malformed `rustc_deprecated` attribute input\n-  --> $DIR/stability-attribute-sanity-4.rs:26:5\n-   |\n-LL |     #[rustc_deprecated = \"a\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n-\n error[E0542]: missing 'since'\n   --> $DIR/stability-attribute-sanity-4.rs:21:5\n    |\n-LL |     #[rustc_deprecated]\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[deprecated]\n+   |     ^^^^^^^^^^^^^\n \n error[E0542]: missing 'since'\n-  --> $DIR/stability-attribute-sanity-4.rs:26:5\n+  --> $DIR/stability-attribute-sanity-4.rs:25:5\n    |\n-LL |     #[rustc_deprecated = \"a\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[deprecated = \"a\"]\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0542`."}, {"sha": "f37a8f328a75ae3e839ac8a18195191597d5223e", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -37,11 +37,11 @@ mod missing_version {\n     fn f1() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[rustc_deprecated(reason = \"a\")] //~ ERROR missing 'since' [E0542]\n+    #[deprecated(note = \"a\")] //~ ERROR missing 'since' [E0542]\n     fn f2() { }\n \n     #[stable(feature = \"a\", since = \"b\")]\n-    #[rustc_deprecated(since = \"a\")] //~ ERROR missing 'reason' [E0543]\n+    #[deprecated(since = \"a\")] //~ ERROR missing 'note' [E0543]\n     fn f3() { }\n }\n \n@@ -58,19 +58,19 @@ fn multiple2() { }\n fn multiple3() { }\n \n #[stable(feature = \"a\", since = \"b\")] //~ ERROR invalid stability version found\n-#[rustc_deprecated(since = \"b\", reason = \"text\")]\n-#[rustc_deprecated(since = \"b\", reason = \"text\")] //~ ERROR multiple deprecated attributes\n+#[deprecated(since = \"b\", note = \"text\")]\n+#[deprecated(since = \"b\", note = \"text\")] //~ ERROR multiple deprecated attributes\n #[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n #[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n pub const fn multiple4() { }\n \n #[stable(feature = \"a\", since = \"1.0.0\")] //~ ERROR invalid deprecation version found\n //~^ ERROR feature `a` is declared stable since 1.0.0\n-#[rustc_deprecated(since = \"invalid\", reason = \"text\")]\n+#[deprecated(since = \"invalid\", note = \"text\")]\n fn invalid_deprecation_version() {}\n \n-#[rustc_deprecated(since = \"a\", reason = \"text\")]\n+#[deprecated(since = \"a\", note = \"text\")]\n fn deprecated_without_unstable_or_stable() { }\n-//~^^ ERROR rustc_deprecated attribute must be paired with either stable or unstable attribute\n+//~^^ ERROR deprecated attribute must be paired with either stable or unstable attribute\n \n fn main() { }"}, {"sha": "9e2d9f2708489c57489fd1c8265c36723f53215b", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -55,14 +55,14 @@ LL |     #[stable(feature = \"a\")]\n error[E0542]: missing 'since'\n   --> $DIR/stability-attribute-sanity.rs:40:5\n    |\n-LL |     #[rustc_deprecated(reason = \"a\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[deprecated(note = \"a\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0543]: missing 'reason'\n+error[E0543]: missing 'note'\n   --> $DIR/stability-attribute-sanity.rs:44:5\n    |\n-LL |     #[rustc_deprecated(since = \"a\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[deprecated(since = \"a\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0544]: multiple stability levels\n   --> $DIR/stability-attribute-sanity.rs:49:1\n@@ -85,10 +85,10 @@ LL | #[stable(feature = \"a\", since = \"b\")]\n error[E0550]: multiple deprecated attributes\n   --> $DIR/stability-attribute-sanity.rs:62:1\n    |\n-LL | #[rustc_deprecated(since = \"b\", reason = \"text\")]\n-   | ------------------------------------------------- first deprecation attribute\n-LL | #[rustc_deprecated(since = \"b\", reason = \"text\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ repeated deprecation attribute\n+LL | #[deprecated(since = \"b\", note = \"text\")]\n+   | ----------------------------------------- first deprecation attribute\n+LL | #[deprecated(since = \"b\", note = \"text\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ repeated deprecation attribute\n \n error[E0544]: multiple stability levels\n   --> $DIR/stability-attribute-sanity.rs:64:1\n@@ -114,11 +114,11 @@ LL | #[stable(feature = \"a\", since = \"1.0.0\")]\n LL | fn invalid_deprecation_version() {}\n    | ----------------------------------- the stability attribute annotates this item\n \n-error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n+error[E0549]: deprecated attribute must be paired with either stable or unstable attribute\n   --> $DIR/stability-attribute-sanity.rs:72:1\n    |\n-LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[deprecated(since = \"a\", note = \"text\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0711]: feature `a` is declared stable since 1.0.0, but was previously declared stable since b\n   --> $DIR/stability-attribute-sanity.rs:67:1"}, {"sha": "9ab409bbdcdf8e9282935b145a6973064fea4979", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -23,8 +23,8 @@ LL |     let _ = s.get(4);\n note: required by a bound in `core::str::<impl str>::get`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n-LL |     pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n+LL |     pub const fn get<I: ~const SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n@@ -40,8 +40,8 @@ LL |     let _ = s.get_unchecked(4);\n note: required by a bound in `core::str::<impl str>::get_unchecked`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n-LL |     pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n-   |                                    ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n+LL |     pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i: I) -> &I::Output {\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-idx.rs:6:17"}, {"sha": "5956e363b0c09b2bb5a7a7da21888b296786f246", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -47,8 +47,8 @@ LL |     s.get_mut(1);\n note: required by a bound in `core::str::<impl str>::get_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n-LL |     pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n-   |                       ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n+LL |     pub const fn get_mut<I: ~const SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n@@ -64,8 +64,8 @@ LL |     s.get_unchecked_mut(1);\n note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |\n-LL |     pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n-   |                                        ^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n+LL |     pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:5"}, {"sha": "56aed77c10e6877ee4b453e28cb620f6d316fb30", "filename": "src/test/ui/suggestions/removal-of-multiline-trait-bound-in-where-clause.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.rs?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -0,0 +1,30 @@\n+struct Wrapper<T>(T);\n+\n+fn foo<T>(foo: Wrapper<T>)\n+//~^ ERROR the size for values of type `T` cannot be known at compilation time\n+where\n+    T\n+    :\n+    ?\n+    Sized\n+{\n+    //\n+}\n+\n+fn bar<T>(foo: Wrapper<T>)\n+//~^ ERROR the size for values of type `T` cannot be known at compilation time\n+where T: ?Sized\n+{\n+    //\n+}\n+\n+fn qux<T>(foo: Wrapper<T>)\n+//~^ ERROR the size for values of type `T` cannot be known at compilation time\n+where\n+    T: ?Sized\n+{\n+    //\n+}\n+\n+\n+fn main() {}"}, {"sha": "3df17056ef42cbbf034457dfdd8c697ca1413dd2", "filename": "src/test/ui/suggestions/removal-of-multiline-trait-bound-in-where-clause.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba14a836c7038da21f5e102aacc7e6d5964f79a6/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr?ref=ba14a836c7038da21f5e102aacc7e6d5964f79a6", "patch": "@@ -0,0 +1,83 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:3:16\n+   |\n+LL | fn foo<T>(foo: Wrapper<T>)\n+   |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |        |\n+   |        this type parameter needs to be `std::marker::Sized`\n+   |\n+note: required by a bound in `Wrapper`\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                ^ required by this bound in `Wrapper`\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                ^  - ...if indirection were used here: `Box<T>`\n+   |                |\n+   |                this could be changed to `T: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - where\n+LL -     T\n+LL -     :\n+LL -     ?\n+LL -     Sized\n+   | \n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:14:16\n+   |\n+LL | fn bar<T>(foo: Wrapper<T>)\n+   |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |        |\n+   |        this type parameter needs to be `std::marker::Sized`\n+   |\n+note: required by a bound in `Wrapper`\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                ^ required by this bound in `Wrapper`\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                ^  - ...if indirection were used here: `Box<T>`\n+   |                |\n+   |                this could be changed to `T: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - where T: ?Sized\n+   | \n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:21:16\n+   |\n+LL | fn qux<T>(foo: Wrapper<T>)\n+   |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n+   |        |\n+   |        this type parameter needs to be `std::marker::Sized`\n+   |\n+note: required by a bound in `Wrapper`\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                ^ required by this bound in `Wrapper`\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                ^  - ...if indirection were used here: `Box<T>`\n+   |                |\n+   |                this could be changed to `T: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - where\n+LL -     T: ?Sized\n+   | \n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}