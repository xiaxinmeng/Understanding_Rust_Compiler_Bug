{"sha": "2d31bcaf16453b713d769178c5f6738eb5efbd9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzFiY2FmMTY0NTNiNzEzZDc2OTE3OGM1ZjY3MzhlYjVlZmJkOWQ=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-03-09T06:42:22Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-03-19T07:41:51Z"}, "message": "rustc: Fix x86 ffi for empty struct arguments", "tree": {"sha": "7def05b46f235f808c79ea0fe50788509b102d05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7def05b46f235f808c79ea0fe50788509b102d05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d31bcaf16453b713d769178c5f6738eb5efbd9d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d31bcaf16453b713d769178c5f6738eb5efbd9d", "html_url": "https://github.com/rust-lang/rust/commit/2d31bcaf16453b713d769178c5f6738eb5efbd9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d31bcaf16453b713d769178c5f6738eb5efbd9d/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7437995b3e68d3920e275ba5900b96a2ed254c66", "url": "https://api.github.com/repos/rust-lang/rust/commits/7437995b3e68d3920e275ba5900b96a2ed254c66", "html_url": "https://github.com/rust-lang/rust/commit/7437995b3e68d3920e275ba5900b96a2ed254c66"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "7e67673d160e7c5345cef670109058c677d8ab7d", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=2d31bcaf16453b713d769178c5f6738eb5efbd9d", "patch": "@@ -25,7 +25,9 @@ pub enum ArgKind {\n     /// LLVM type or by coercing to another specified type\n     Direct,\n     /// Pass the argument indirectly via a hidden pointer\n-    Indirect\n+    Indirect,\n+    /// Ignore the argument (useful for empty struct)\n+    Ignore,\n }\n \n /// Information about how a specific C type\n@@ -68,13 +70,27 @@ impl ArgType {\n         }\n     }\n \n+    pub fn ignore(ty: Type) -> ArgType {\n+        ArgType {\n+            kind: Ignore,\n+            ty: ty,\n+            cast: None,\n+            pad: None,\n+            attr: None,\n+        }\n+    }\n+\n     pub fn is_direct(&self) -> bool {\n         return self.kind == Direct;\n     }\n \n     pub fn is_indirect(&self) -> bool {\n         return self.kind == Indirect;\n     }\n+\n+    pub fn is_ignore(&self) -> bool {\n+        return self.kind == Ignore;\n+    }\n }\n \n /// Metadata describing how the arguments to a native function"}, {"sha": "85a7c14968f05ef942146fbdfbb145299f2ec911", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=2d31bcaf16453b713d769178c5f6738eb5efbd9d", "patch": "@@ -66,7 +66,12 @@ pub fn compute_abi_info(ccx: &CrateContext,\n     for &t in atys.iter() {\n         let ty = match t.kind() {\n             Struct => {\n-                ArgType::indirect(t, Some(ByValAttribute))\n+                let size = llsize_of_alloc(ccx, t);\n+                if size == 0 {\n+                    ArgType::ignore(t)\n+                } else {\n+                    ArgType::indirect(t, Some(ByValAttribute))\n+                }\n             }\n             _ => ArgType::direct(t, None, None, None),\n         };"}, {"sha": "74bed116806283f61536e2e5d9265bc17068efd1", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=2d31bcaf16453b713d769178c5f6738eb5efbd9d", "patch": "@@ -325,6 +325,10 @@ pub fn trans_native_call<'a>(\n     for (i, &llarg_rust) in llargs_rust.iter().enumerate() {\n         let mut llarg_rust = llarg_rust;\n \n+        if arg_tys[i].is_ignore() {\n+            continue;\n+        }\n+\n         // Does Rust pass this argument by pointer?\n         let rust_indirect = type_of::arg_is_indirect(ccx,\n                                                      *passed_arg_tys.get(i));\n@@ -901,6 +905,9 @@ fn lltype_for_fn_from_foreign_types(ccx: &CrateContext, tys: &ForeignTypes) -> T\n     };\n \n     for &arg_ty in tys.fn_ty.arg_tys.iter() {\n+        if arg_ty.is_ignore() {\n+            continue;\n+        }\n         // add padding\n         match arg_ty.pad {\n             Some(ty) => llargument_tys.push(ty),\n@@ -949,6 +956,9 @@ fn add_argument_attributes(tys: &ForeignTypes,\n     }\n \n     for &arg_ty in tys.fn_ty.arg_tys.iter() {\n+        if arg_ty.is_ignore() {\n+            continue;\n+        }\n         // skip padding\n         if arg_ty.pad.is_some() { i += 1; }\n "}, {"sha": "4d5b95155cabb5dd8fdfc62e5d072d7dcdb26eef", "filename": "src/rt/rust_test_helpers.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Frt%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Frt%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.c?ref=2d31bcaf16453b713d769178c5f6738eb5efbd9d", "patch": "@@ -126,6 +126,29 @@ rust_dbg_extern_identity_TwoDoubles(struct TwoDoubles u) {\n     return u;\n }\n \n+struct ManyInts {\n+    int8_t arg1;\n+    int16_t arg2;\n+    int32_t arg3;\n+    int16_t arg4;\n+    int8_t arg5;\n+    struct TwoU8s arg6;\n+};\n+\n+struct Empty {\n+};\n+\n+void\n+rust_dbg_extern_empty_struct(struct ManyInts v1, struct Empty e, struct ManyInts v2) {\n+    assert(v1.arg1 == v2.arg1 + 1);\n+    assert(v1.arg2 == v2.arg2 + 1);\n+    assert(v1.arg3 == v2.arg3 + 1);\n+    assert(v1.arg4 == v2.arg4 + 1);\n+    assert(v1.arg5 == v2.arg5 + 1);\n+    assert(v1.arg6.one == v2.arg6.one + 1);\n+    assert(v1.arg6.two == v2.arg6.two + 1);\n+}\n+\n intptr_t\n rust_get_test_int() {\n   return 1;"}, {"sha": "4c343fdb1a22c444292c686598c7934acce96e09", "filename": "src/test/run-pass/extern-pass-empty.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d31bcaf16453b713d769178c5f6738eb5efbd9d/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs?ref=2d31bcaf16453b713d769178c5f6738eb5efbd9d", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a foreign function that accepts empty struct.\n+\n+struct TwoU8s {\n+    one: u8,\n+    two: u8,\n+}\n+\n+struct ManyInts {\n+    arg1: i8,\n+    arg2: i16,\n+    arg3: i32,\n+    arg4: i16,\n+    arg5: i8,\n+    arg6: TwoU8s,\n+}\n+\n+struct Empty;\n+\n+#[link(name = \"rustrt\")]\n+extern {\n+    fn rust_dbg_extern_empty_struct(v1: ManyInts, e: Empty, v2: ManyInts);\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let x = ManyInts {\n+            arg1: 2,\n+            arg2: 3,\n+            arg3: 4,\n+            arg4: 5,\n+            arg5: 6,\n+            arg6: TwoU8s { one: 7, two: 8, }\n+        };\n+        let y = ManyInts {\n+            arg1: 1,\n+            arg2: 2,\n+            arg3: 3,\n+            arg4: 4,\n+            arg5: 5,\n+            arg6: TwoU8s { one: 6, two: 7, }\n+        };\n+        let empty = Empty;\n+        rust_dbg_extern_empty_struct(x, empty, y);\n+    }\n+}"}]}