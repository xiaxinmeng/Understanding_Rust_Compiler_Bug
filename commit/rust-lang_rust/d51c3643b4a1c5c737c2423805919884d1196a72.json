{"sha": "d51c3643b4a1c5c737c2423805919884d1196a72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MWMzNjQzYjRhMWM1YzczN2MyNDIzODA1OTE5ODg0ZDExOTZhNzI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-14T06:50:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-14T06:50:13Z"}, "message": "Rollup merge of #54173 - phansch:suggest_valid_crate_type, r=estebank\n\nSuggest valid crate type if invalid crate type is found\n\nThis adds a suggestion to the `invalid_crate_types` lint.\n\nThe suggestion is based on the Levenshtein distance to existing crate\ntypes. If no suggestion is found it will show the lint without any\nsuggestions.\n\nCloses #53958", "tree": {"sha": "4f84d76f93fb7c9bb5aba0be0dc2fc0164953146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f84d76f93fb7c9bb5aba0be0dc2fc0164953146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d51c3643b4a1c5c737c2423805919884d1196a72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbm1olCRBK7hj4Ov3rIwAAdHIIACB8PyWxI+NWXujU7SK2N7+0\nE2lOyrPNE7+ecg+w7eHsYkbPVkolrCaE7k09uPXYbi4JyBemz3V5eYjUigivWpDf\nxXw6sHggQF4gRLQmKCtgD0NkxJxvGnE/x54LpxSznKSwcClgh9of/wz1ntYwQwPK\nIz6qdueHsOhLuuYBnW0Dsa34uyc+oGwMZ+OrdoGeJ5SweRrif7zVF7Is0z5SCDVI\n+2dqiOxaebddYI/g9Ha7705vzVwZQFcd4Q8Lfg47GNkCYwzpD0chrVlHxxwJR9PH\n/BP0sEUQCK6N8dr/rdS+fQrTrZfYg4OgCpDGWpzvhVdHrphHtQnUTnrNybHAaPA=\n=nDdZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f84d76f93fb7c9bb5aba0be0dc2fc0164953146\nparent 9c0f946fe2f0b62ec9b60ed40a106e5d91f4a68d\nparent 7249a1b1ae075e3a955fda69cdea5161d0eb1aa5\nauthor kennytm <kennytm@gmail.com> 1536907813 +0800\ncommitter GitHub <noreply@github.com> 1536907813 +0800\n\nRollup merge of #54173 - phansch:suggest_valid_crate_type, r=estebank\n\nSuggest valid crate type if invalid crate type is found\n\nThis adds a suggestion to the `invalid_crate_types` lint.\n\nThe suggestion is based on the Levenshtein distance to existing crate\ntypes. If no suggestion is found it will show the lint without any\nsuggestions.\n\nCloses #53958\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d51c3643b4a1c5c737c2423805919884d1196a72", "html_url": "https://github.com/rust-lang/rust/commit/d51c3643b4a1c5c737c2423805919884d1196a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d51c3643b4a1c5c737c2423805919884d1196a72/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0f946fe2f0b62ec9b60ed40a106e5d91f4a68d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0f946fe2f0b62ec9b60ed40a106e5d91f4a68d", "html_url": "https://github.com/rust-lang/rust/commit/9c0f946fe2f0b62ec9b60ed40a106e5d91f4a68d"}, {"sha": "7249a1b1ae075e3a955fda69cdea5161d0eb1aa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7249a1b1ae075e3a955fda69cdea5161d0eb1aa5", "html_url": "https://github.com/rust-lang/rust/commit/7249a1b1ae075e3a955fda69cdea5161d0eb1aa5"}], "stats": {"total": 153, "additions": 143, "deletions": 10}, "files": [{"sha": "e6452ad09278e45a7282490e0582a40d4c9efba2", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d51c3643b4a1c5c737c2423805919884d1196a72/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51c3643b4a1c5c737c2423805919884d1196a72/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d51c3643b4a1c5c737c2423805919884d1196a72", "patch": "@@ -422,6 +422,7 @@ pub enum BuiltinLintDiagnostics {\n     ProcMacroDeriveResolutionFallback(Span),\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n     ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n+    UnknownCrateTypes(Span, String, String),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -500,6 +501,14 @@ impl BuiltinLintDiagnostics {\n                     Applicability::MachineApplicable\n                 );\n             }\n+            BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n+                db.span_suggestion_with_applicability(\n+                    span,\n+                    &note,\n+                    sugg,\n+                    Applicability::MaybeIncorrect\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "7fb66ea97f26ba05a92e3f60a0140f0cbdc07777", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d51c3643b4a1c5c737c2423805919884d1196a72/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51c3643b4a1c5c737c2423805919884d1196a72/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d51c3643b4a1c5c737c2423805919884d1196a72", "patch": "@@ -57,6 +57,8 @@ use syntax::ext::base::ExtCtxt;\n use syntax::fold::Folder;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n+use syntax::util::lev_distance::find_best_match_for_name;\n+use syntax::symbol::Symbol;\n use syntax_pos::{FileName, hygiene};\n use syntax_ext;\n \n@@ -1508,13 +1510,45 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                     Some(ref n) if *n == \"staticlib\" => Some(config::CrateType::Staticlib),\n                     Some(ref n) if *n == \"proc-macro\" => Some(config::CrateType::ProcMacro),\n                     Some(ref n) if *n == \"bin\" => Some(config::CrateType::Executable),\n-                    Some(_) => {\n-                        session.buffer_lint(\n-                            lint::builtin::UNKNOWN_CRATE_TYPES,\n-                            ast::CRATE_NODE_ID,\n-                            a.span,\n-                            \"invalid `crate_type` value\",\n-                        );\n+                    Some(ref n) => {\n+                        let crate_types = vec![\n+                            Symbol::intern(\"rlib\"),\n+                            Symbol::intern(\"dylib\"),\n+                            Symbol::intern(\"cdylib\"),\n+                            Symbol::intern(\"lib\"),\n+                            Symbol::intern(\"staticlib\"),\n+                            Symbol::intern(\"proc-macro\"),\n+                            Symbol::intern(\"bin\")\n+                        ];\n+                        if let ast::MetaItemKind::NameValue(spanned) = a.meta().unwrap().node {\n+                            let span = spanned.span;\n+                            let lev_candidate = find_best_match_for_name(\n+                                crate_types.iter(),\n+                                &n.as_str(),\n+                                None\n+                            );\n+                            if let Some(candidate) = lev_candidate {\n+                                session.buffer_lint_with_diagnostic(\n+                                    lint::builtin::UNKNOWN_CRATE_TYPES,\n+                                    ast::CRATE_NODE_ID,\n+                                    span,\n+                                    \"invalid `crate_type` value\",\n+                                    lint::builtin::BuiltinLintDiagnostics::\n+                                        UnknownCrateTypes(\n+                                            span,\n+                                            \"did you mean\".to_string(),\n+                                            format!(\"\\\"{}\\\"\", candidate)\n+                                        )\n+                                );\n+                            } else {\n+                                session.buffer_lint(\n+                                    lint::builtin::UNKNOWN_CRATE_TYPES,\n+                                    ast::CRATE_NODE_ID,\n+                                    span,\n+                                    \"invalid `crate_type` value\"\n+                                );\n+                            }\n+                        }\n                         None\n                     }\n                     _ => {"}, {"sha": "e7f4e32dc7c41b17a757858e2e9b1ea6aa51ef7d", "filename": "src/test/ui/invalid/invalid-crate-type.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d51c3643b4a1c5c737c2423805919884d1196a72/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51c3643b4a1c5c737c2423805919884d1196a72/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.rs?ref=d51c3643b4a1c5c737c2423805919884d1196a72", "patch": "@@ -11,6 +11,48 @@\n // regression test for issue 11256\n #![crate_type=\"foo\"]    //~ ERROR invalid `crate_type` value\n \n+// Tests for suggestions (#53958)\n+\n+#![crate_type=\"statoclib\"]\n+//~^ ERROR invalid `crate_type` value\n+//~| HELP did you mean\n+//~| SUGGESTION staticlib\n+\n+#![crate_type=\"procmacro\"]\n+//~^ ERROR invalid `crate_type` value\n+//~| HELP did you mean\n+//~| SUGGESTION proc-macro\n+\n+#![crate_type=\"static-lib\"]\n+//~^ ERROR invalid `crate_type` value\n+//~| HELP did you mean\n+//~| SUGGESTION staticlib\n+\n+#![crate_type=\"drylib\"]\n+//~^ ERROR invalid `crate_type` value\n+//~| HELP did you mean\n+//~| SUGGESTION dylib\n+\n+#![crate_type=\"dlib\"]\n+//~^ ERROR invalid `crate_type` value\n+//~| HELP did you mean\n+//~| SUGGESTION rlib\n+\n+#![crate_type=\"lob\"]\n+//~^ ERROR invalid `crate_type` value\n+//~| HELP did you mean\n+//~| SUGGESTION lib\n+\n+#![crate_type=\"bon\"]\n+//~^ ERROR invalid `crate_type` value\n+//~| HELP did you mean\n+//~| SUGGESTION bin\n+\n+#![crate_type=\"cdalib\"]\n+//~^ ERROR invalid `crate_type` value\n+//~| HELP did you mean\n+//~| SUGGESTION cdylib\n+\n fn main() {\n     return\n }"}, {"sha": "c82da865f33531b135ae8b628638220a0f378175", "filename": "src/test/ui/invalid/invalid-crate-type.stderr", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d51c3643b4a1c5c737c2423805919884d1196a72/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d51c3643b4a1c5c737c2423805919884d1196a72/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.stderr?ref=d51c3643b4a1c5c737c2423805919884d1196a72", "patch": "@@ -1,10 +1,58 @@\n error: invalid `crate_type` value\n-  --> $DIR/invalid-crate-type.rs:12:1\n+  --> $DIR/invalid-crate-type.rs:12:15\n    |\n LL | #![crate_type=\"foo\"]    //~ ERROR invalid `crate_type` value\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^\n    |\n    = note: #[deny(unknown_crate_types)] on by default\n \n-error: aborting due to previous error\n+error: invalid `crate_type` value\n+  --> $DIR/invalid-crate-type.rs:16:15\n+   |\n+LL | #![crate_type=\"statoclib\"]\n+   |               ^^^^^^^^^^^ help: did you mean: `\"staticlib\"`\n+\n+error: invalid `crate_type` value\n+  --> $DIR/invalid-crate-type.rs:21:15\n+   |\n+LL | #![crate_type=\"procmacro\"]\n+   |               ^^^^^^^^^^^ help: did you mean: `\"proc-macro\"`\n+\n+error: invalid `crate_type` value\n+  --> $DIR/invalid-crate-type.rs:26:15\n+   |\n+LL | #![crate_type=\"static-lib\"]\n+   |               ^^^^^^^^^^^^ help: did you mean: `\"staticlib\"`\n+\n+error: invalid `crate_type` value\n+  --> $DIR/invalid-crate-type.rs:31:15\n+   |\n+LL | #![crate_type=\"drylib\"]\n+   |               ^^^^^^^^ help: did you mean: `\"dylib\"`\n+\n+error: invalid `crate_type` value\n+  --> $DIR/invalid-crate-type.rs:36:15\n+   |\n+LL | #![crate_type=\"dlib\"]\n+   |               ^^^^^^ help: did you mean: `\"rlib\"`\n+\n+error: invalid `crate_type` value\n+  --> $DIR/invalid-crate-type.rs:41:15\n+   |\n+LL | #![crate_type=\"lob\"]\n+   |               ^^^^^ help: did you mean: `\"lib\"`\n+\n+error: invalid `crate_type` value\n+  --> $DIR/invalid-crate-type.rs:46:15\n+   |\n+LL | #![crate_type=\"bon\"]\n+   |               ^^^^^ help: did you mean: `\"bin\"`\n+\n+error: invalid `crate_type` value\n+  --> $DIR/invalid-crate-type.rs:51:15\n+   |\n+LL | #![crate_type=\"cdalib\"]\n+   |               ^^^^^^^^ help: did you mean: `\"cdylib\"`\n+\n+error: aborting due to 9 previous errors\n "}]}