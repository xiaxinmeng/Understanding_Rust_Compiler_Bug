{"sha": "c6ed08967193cadc927dfaf422601bcd160a6fc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZWQwODk2NzE5M2NhZGM5MjdkZmFmNDIyNjAxYmNkMTYwYTZmYzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-18T07:37:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-18T07:37:04Z"}, "message": "Merge #4499\n\n4499: CodeLens configuration options r=vsrs a=vsrs\n\nThis PR\r\n- adds an option to granularly enable\\disable all CodeLens, just like the TypeScript extension.\r\n- fixes a minor bug for doctests. It makes no sense to show `Debug` lens for them as cargo `Can't skip running doc tests with --no-run`.\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "aaccb210353786d000a3455264e368b76f61ff98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaccb210353786d000a3455264e368b76f61ff98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ed08967193cadc927dfaf422601bcd160a6fc9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewjsgCRBK7hj4Ov3rIwAAdHIIAEzgNlr3rF5dHqqc18NcIS2s\nBRFpNOQXtcueu3LFblXPeK8ik7vjqL5XyYB7OHxiNVJHH5rrhdms/t8gnaAdzTTE\n7mZSEl5csh5YB3YgVYVG/sO0UbmEPkjdrbNC+PBTWBUTrmNqtftCyGLQLWg9i82Q\nEOu4oKzYRwOkmZkLNuPvDB/ckjXwxB17ttNSMesgZAB9aJhkReyQm8FIKMVAWyLR\nCmlu031el4vSNAx+ZUMRG4LFiSRovoK8c9aeUH19I5OiMxOE+hkw9V4h0ChPTR9m\n3BtFMUZ5ZaA8SGowFZD4qnF0PEWRZGNMdaQ84adN3V1cmmih2nJrxlcX3TkvA+E=\n=yVqv\n-----END PGP SIGNATURE-----\n", "payload": "tree aaccb210353786d000a3455264e368b76f61ff98\nparent 31611da2538e66027ea67482235f6b8659bedf09\nparent 78817a319476d8af40c4f78e8c47dc958781f88f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589787424 +0000\ncommitter GitHub <noreply@github.com> 1589787424 +0000\n\nMerge #4499\n\n4499: CodeLens configuration options r=vsrs a=vsrs\n\nThis PR\r\n- adds an option to granularly enable\\disable all CodeLens, just like the TypeScript extension.\r\n- fixes a minor bug for doctests. It makes no sense to show `Debug` lens for them as cargo `Can't skip running doc tests with --no-run`.\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed08967193cadc927dfaf422601bcd160a6fc9", "html_url": "https://github.com/rust-lang/rust/commit/c6ed08967193cadc927dfaf422601bcd160a6fc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed08967193cadc927dfaf422601bcd160a6fc9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31611da2538e66027ea67482235f6b8659bedf09", "url": "https://api.github.com/repos/rust-lang/rust/commits/31611da2538e66027ea67482235f6b8659bedf09", "html_url": "https://github.com/rust-lang/rust/commit/31611da2538e66027ea67482235f6b8659bedf09"}, {"sha": "78817a319476d8af40c4f78e8c47dc958781f88f", "url": "https://api.github.com/repos/rust-lang/rust/commits/78817a319476d8af40c4f78e8c47dc958781f88f", "html_url": "https://github.com/rust-lang/rust/commit/78817a319476d8af40c4f78e8c47dc958781f88f"}], "stats": {"total": 257, "additions": 181, "deletions": 76}, "files": [{"sha": "b5dc6f0fa98507e0196c263e31916f056d090815", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed08967193cadc927dfaf422601bcd160a6fc9/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed08967193cadc927dfaf422601bcd160a6fc9/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c6ed08967193cadc927dfaf422601bcd160a6fc9", "patch": "@@ -33,6 +33,36 @@ pub struct Config {\n     pub inlay_hints: InlayHintsConfig,\n     pub completion: CompletionConfig,\n     pub call_info_full: bool,\n+    pub lens: LensConfig,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct LensConfig {\n+    pub run: bool,\n+    pub debug: bool,\n+    pub impementations: bool,\n+}\n+\n+impl Default for LensConfig {\n+    fn default() -> Self {\n+        Self { run: true, debug: true, impementations: true }\n+    }\n+}\n+\n+impl LensConfig {\n+    pub const NO_LENS: LensConfig = Self { run: false, debug: false, impementations: false };\n+\n+    pub fn any(&self) -> bool {\n+        self.impementations || self.runnable()\n+    }\n+\n+    pub fn none(&self) -> bool {\n+        !self.any()\n+    }\n+\n+    pub fn runnable(&self) -> bool {\n+        self.run || self.debug\n+    }\n }\n \n #[derive(Debug, Clone)]\n@@ -107,6 +137,7 @@ impl Default for Config {\n                 ..CompletionConfig::default()\n             },\n             call_info_full: true,\n+            lens: LensConfig::default(),\n         }\n     }\n }\n@@ -196,6 +227,16 @@ impl Config {\n         set(value, \"/completion/addCallArgumentSnippets\", &mut self.completion.add_call_argument_snippets);\n         set(value, \"/callInfo/full\", &mut self.call_info_full);\n \n+        let mut lens_enabled = true;\n+        set(value, \"/lens/enable\", &mut lens_enabled);\n+        if lens_enabled {\n+            set(value, \"/lens/run\", &mut self.lens.run);\n+            set(value, \"/lens/debug\", &mut self.lens.debug);\n+            set(value, \"/lens/implementations\", &mut self.lens.impementations);\n+        } else {\n+            self.lens = LensConfig::NO_LENS;\n+        }\n+\n         log::info!(\"Config::update() = {:#?}\", self);\n \n         fn get<'a, T: Deserialize<'a>>(value: &'a serde_json::Value, pointer: &str) -> Option<T> {"}, {"sha": "e675567528591cde2242078c893c64e68516539d", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 93, "deletions": 73, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed08967193cadc927dfaf422601bcd160a6fc9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed08967193cadc927dfaf422601bcd160a6fc9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c6ed08967193cadc927dfaf422601bcd160a6fc9", "patch": "@@ -812,88 +812,108 @@ pub fn handle_code_lens(\n     params: lsp_types::CodeLensParams,\n ) -> Result<Option<Vec<CodeLens>>> {\n     let _p = profile(\"handle_code_lens\");\n-    let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n-    let line_index = world.analysis().file_line_index(file_id)?;\n-\n     let mut lenses: Vec<CodeLens> = Default::default();\n \n+    if world.config.lens.none() {\n+        // early return before any db query!\n+        return Ok(Some(lenses));\n+    }\n+\n+    let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n     let cargo_spec = CargoTargetSpec::for_file(&world, file_id)?;\n-    // Gather runnables\n-    for runnable in world.analysis().runnables(file_id)? {\n-        let title = match &runnable.kind {\n-            RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => \"\u25b6\\u{fe0e} Run Test\",\n-            RunnableKind::DocTest { .. } => \"\u25b6\\u{fe0e} Run Doctest\",\n-            RunnableKind::Bench { .. } => \"Run Bench\",\n-            RunnableKind::Bin => {\n-                // Do not suggest binary run on other target than binary\n-                match &cargo_spec {\n-                    Some(spec) => match spec.target_kind {\n-                        TargetKind::Bin => \"Run\",\n-                        _ => continue,\n-                    },\n-                    None => continue,\n+\n+    if world.config.lens.runnable() {\n+        // Gather runnables\n+        for runnable in world.analysis().runnables(file_id)? {\n+            let (run_title, debugee) = match &runnable.kind {\n+                RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => {\n+                    (\"\u25b6\ufe0f\\u{fe0e}Run Test\", true)\n                 }\n+                RunnableKind::DocTest { .. } => {\n+                    // cargo does not support -no-run for doctests\n+                    (\"\u25b6\ufe0f\\u{fe0e}Run Doctest\", false)\n+                }\n+                RunnableKind::Bench { .. } => {\n+                    // Nothing wrong with bench debugging\n+                    (\"Run Bench\", true)\n+                }\n+                RunnableKind::Bin => {\n+                    // Do not suggest binary run on other target than binary\n+                    match &cargo_spec {\n+                        Some(spec) => match spec.target_kind {\n+                            TargetKind::Bin => (\"Run\", true),\n+                            _ => continue,\n+                        },\n+                        None => continue,\n+                    }\n+                }\n+            };\n+\n+            let mut r = to_lsp_runnable(&world, file_id, runnable)?;\n+            if world.config.lens.run {\n+                let lens = CodeLens {\n+                    range: r.range,\n+                    command: Some(Command {\n+                        title: run_title.to_string(),\n+                        command: \"rust-analyzer.runSingle\".into(),\n+                        arguments: Some(vec![to_value(&r).unwrap()]),\n+                    }),\n+                    data: None,\n+                };\n+                lenses.push(lens);\n             }\n-        }\n-        .to_string();\n-        let mut r = to_lsp_runnable(&world, file_id, runnable)?;\n-        let lens = CodeLens {\n-            range: r.range,\n-            command: Some(Command {\n-                title,\n-                command: \"rust-analyzer.runSingle\".into(),\n-                arguments: Some(vec![to_value(&r).unwrap()]),\n-            }),\n-            data: None,\n-        };\n-        lenses.push(lens);\n \n-        if r.args[0] == \"run\" {\n-            r.args[0] = \"build\".into();\n-        } else {\n-            r.args.push(\"--no-run\".into());\n+            if debugee && world.config.lens.debug {\n+                if r.args[0] == \"run\" {\n+                    r.args[0] = \"build\".into();\n+                } else {\n+                    r.args.push(\"--no-run\".into());\n+                }\n+                let debug_lens = CodeLens {\n+                    range: r.range,\n+                    command: Some(Command {\n+                        title: \"Debug\".into(),\n+                        command: \"rust-analyzer.debugSingle\".into(),\n+                        arguments: Some(vec![to_value(r).unwrap()]),\n+                    }),\n+                    data: None,\n+                };\n+                lenses.push(debug_lens);\n+            }\n         }\n-        let debug_lens = CodeLens {\n-            range: r.range,\n-            command: Some(Command {\n-                title: \"Debug\".into(),\n-                command: \"rust-analyzer.debugSingle\".into(),\n-                arguments: Some(vec![to_value(r).unwrap()]),\n-            }),\n-            data: None,\n-        };\n-        lenses.push(debug_lens);\n     }\n \n-    // Handle impls\n-    lenses.extend(\n-        world\n-            .analysis()\n-            .file_structure(file_id)?\n-            .into_iter()\n-            .filter(|it| match it.kind {\n-                SyntaxKind::TRAIT_DEF | SyntaxKind::STRUCT_DEF | SyntaxKind::ENUM_DEF => true,\n-                _ => false,\n-            })\n-            .map(|it| {\n-                let range = to_proto::range(&line_index, it.node_range);\n-                let pos = range.start;\n-                let lens_params = lsp_types::request::GotoImplementationParams {\n-                    text_document_position_params: lsp_types::TextDocumentPositionParams::new(\n-                        params.text_document.clone(),\n-                        pos,\n-                    ),\n-                    work_done_progress_params: Default::default(),\n-                    partial_result_params: Default::default(),\n-                };\n-                CodeLens {\n-                    range,\n-                    command: None,\n-                    data: Some(to_value(CodeLensResolveData::Impls(lens_params)).unwrap()),\n-                }\n-            }),\n-    );\n-\n+    if world.config.lens.impementations {\n+        // Handle impls\n+        lenses.extend(\n+            world\n+                .analysis()\n+                .file_structure(file_id)?\n+                .into_iter()\n+                .filter(|it| match it.kind {\n+                    SyntaxKind::TRAIT_DEF | SyntaxKind::STRUCT_DEF | SyntaxKind::ENUM_DEF => true,\n+                    _ => false,\n+                })\n+                .map(|it| {\n+                    let range = to_proto::range(&line_index, it.node_range);\n+                    let pos = range.start;\n+                    let lens_params = lsp_types::request::GotoImplementationParams {\n+                        text_document_position_params: lsp_types::TextDocumentPositionParams::new(\n+                            params.text_document.clone(),\n+                            pos,\n+                        ),\n+                        work_done_progress_params: Default::default(),\n+                        partial_result_params: Default::default(),\n+                    };\n+                    CodeLens {\n+                        range,\n+                        command: None,\n+                        data: Some(to_value(CodeLensResolveData::Impls(lens_params)).unwrap()),\n+                    }\n+                }),\n+        );\n+    }\n     Ok(Some(lenses))\n }\n "}, {"sha": "d899f60e333c64c66adc67aaeb69973c60ffa291", "filename": "editors/code/package.json", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed08967193cadc927dfaf422601bcd160a6fc9/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed08967193cadc927dfaf422601bcd160a6fc9/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c6ed08967193cadc927dfaf422601bcd160a6fc9", "patch": "@@ -443,6 +443,26 @@\n                     \"type\": \"object\",\n                     \"default\": {},\n                     \"description\": \"Optional settings passed to the debug engine. Example:\\n{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }\"\n+                },\n+                \"rust-analyzer.lens.enable\": {\n+                    \"description\": \"Whether to show CodeLens in Rust files.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.lens.run\": {\n+                    \"markdownDescription\": \"Whether to show Run lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.lens.debug\": {\n+                    \"markdownDescription\": \"Whether to show Debug lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n+                \"rust-analyzer.lens.implementations\": {\n+                    \"markdownDescription\": \"Whether to show Implementations lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n                 }\n             }\n         },"}, {"sha": "0bd30fb077d7743f097d8632f224884780b01a35", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed08967193cadc927dfaf422601bcd160a6fc9/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed08967193cadc927dfaf422601bcd160a6fc9/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=c6ed08967193cadc927dfaf422601bcd160a6fc9", "patch": "@@ -7,7 +7,7 @@ import { startDebugSession, getDebugConfiguration } from '../debug';\n \n const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n \n-async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, showButtons: boolean = true): Promise<RunnableQuickPick | undefined> {\n+async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, debuggeeOnly = false, showButtons: boolean = true): Promise<RunnableQuickPick | undefined> {\n     const editor = ctx.activeRustEditor;\n     const client = ctx.client;\n     if (!editor || !client) return;\n@@ -33,9 +33,20 @@ async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, showBu\n         ) {\n             continue;\n         }\n+\n+        if (debuggeeOnly && (r.label.startsWith('doctest') || r.label.startsWith('cargo'))) {\n+            continue;\n+        }\n         items.push(new RunnableQuickPick(r));\n     }\n \n+    if (items.length === 0) {\n+        // it is the debug case, run always has at least 'cargo check ...'\n+        // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_runnables\n+        vscode.window.showErrorMessage(\"There's no debug target!\");\n+        return;\n+    }\n+\n     return await new Promise((resolve) => {\n         const disposables: vscode.Disposable[] = [];\n         const close = (result?: RunnableQuickPick) => {\n@@ -107,7 +118,7 @@ export function debug(ctx: Ctx): Cmd {\n     let prevDebuggee: RunnableQuickPick | undefined;\n \n     return async () => {\n-        const item = await selectRunnable(ctx, prevDebuggee);\n+        const item = await selectRunnable(ctx, prevDebuggee, true);\n         if (!item) return;\n \n         item.detail = 'restart';\n@@ -147,7 +158,7 @@ async function makeDebugConfig(ctx: Ctx, item: RunnableQuickPick): Promise<void>\n \n export function newDebugConfig(ctx: Ctx): Cmd {\n     return async () => {\n-        const item = await selectRunnable(ctx, undefined, false);\n+        const item = await selectRunnable(ctx, undefined, true, false);\n         if (!item) return;\n \n         await makeDebugConfig(ctx, item);"}, {"sha": "ee294fbe312c4c9b5e121cbb769fd5f97b42dccb", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed08967193cadc927dfaf422601bcd160a6fc9/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed08967193cadc927dfaf422601bcd160a6fc9/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=c6ed08967193cadc927dfaf422601bcd160a6fc9", "patch": "@@ -16,6 +16,10 @@ export class Config {\n         \"files\",\n         \"highlighting\",\n         \"updates.channel\",\n+        \"lens.enable\",\n+        \"lens.run\",\n+        \"lens.debug\",\n+        \"lens.implementations\",\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);\n \n@@ -119,4 +123,13 @@ export class Config {\n             sourceFileMap: sourceFileMap\n         };\n     }\n+\n+    get lens() {\n+        return {\n+            enable: this.get<boolean>(\"lens.enable\"),\n+            run: this.get<boolean>(\"lens.run\"),\n+            debug: this.get<boolean>(\"lens.debug\"),\n+            implementations: this.get<boolean>(\"lens.implementations\"),\n+        };\n+    }\n }"}]}