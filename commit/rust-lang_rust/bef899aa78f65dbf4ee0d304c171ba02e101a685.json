{"sha": "bef899aa78f65dbf4ee0d304c171ba02e101a685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZjg5OWFhNzhmNjVkYmY0ZWUwZDMwNGMxNzFiYTAyZTEwMWE2ODU=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-01T00:13:39Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-02T18:07:05Z"}, "message": "Less mutability", "tree": {"sha": "40c8d35525e78863ab2d8cffc2cde3ad153a7d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40c8d35525e78863ab2d8cffc2cde3ad153a7d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef899aa78f65dbf4ee0d304c171ba02e101a685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef899aa78f65dbf4ee0d304c171ba02e101a685", "html_url": "https://github.com/rust-lang/rust/commit/bef899aa78f65dbf4ee0d304c171ba02e101a685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef899aa78f65dbf4ee0d304c171ba02e101a685/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a90401aeed24203b28012c040f19cda66e0589f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a90401aeed24203b28012c040f19cda66e0589f3", "html_url": "https://github.com/rust-lang/rust/commit/a90401aeed24203b28012c040f19cda66e0589f3"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "ec85749522070ce76421f232c00fc8b74bff1a7f", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bef899aa78f65dbf4ee0d304c171ba02e101a685/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef899aa78f65dbf4ee0d304c171ba02e101a685/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=bef899aa78f65dbf4ee0d304c171ba02e101a685", "patch": "@@ -185,10 +185,12 @@ impl ProjectWorkspace {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n             ProjectWorkspace::Json { project } => {\n-                let mut crates = FxHashMap::default();\n-                for (id, krate) in project.crates.iter().enumerate() {\n-                    let crate_id = json_project::CrateId(id);\n-                    if let Some(file_id) = load(&krate.root_module) {\n+                let crates: FxHashMap<_, _> = project\n+                    .crates\n+                    .iter()\n+                    .enumerate()\n+                    .filter_map(|(seq_index, krate)| {\n+                        let file_id = load(&krate.root_module)?;\n                         let edition = match krate.edition {\n                             json_project::Edition::Edition2015 => Edition::Edition2015,\n                             json_project::Edition::Edition2018 => Edition::Edition2018,\n@@ -218,8 +220,8 @@ impl ProjectWorkspace {\n                             .clone()\n                             .map(|it| proc_macro_client.by_dylib_path(&it));\n                         // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n-                        crates.insert(\n-                            crate_id,\n+                        Some((\n+                            json_project::CrateId(seq_index),\n                             crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n@@ -230,9 +232,9 @@ impl ProjectWorkspace {\n                                 extern_source,\n                                 proc_macro.unwrap_or_default(),\n                             ),\n-                        );\n-                    }\n-                }\n+                        ))\n+                    })\n+                    .collect();\n \n                 for (id, krate) in project.crates.iter().enumerate() {\n                     for dep in &krate.deps {\n@@ -256,9 +258,11 @@ impl ProjectWorkspace {\n                 }\n             }\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n-                let mut sysroot_crates = FxHashMap::default();\n-                for krate in sysroot.crates() {\n-                    if let Some(file_id) = load(&sysroot[krate].root) {\n+                let sysroot_crates: FxHashMap<_, _> = sysroot\n+                    .crates()\n+                    .filter_map(|krate| {\n+                        let file_id = load(&sysroot[krate].root)?;\n+\n                         // Crates from sysroot have `cfg(test)` disabled\n                         let cfg_options = {\n                             let mut opts = default_cfg_options.clone();\n@@ -269,22 +273,22 @@ impl ProjectWorkspace {\n                         let env = Env::default();\n                         let extern_source = ExternSource::default();\n                         let proc_macro = vec![];\n+                        let crate_name = CrateName::new(&sysroot[krate].name)\n+                            .expect(\"Sysroot crate names should not contain dashes\");\n \n                         let crate_id = crate_graph.add_crate_root(\n                             file_id,\n                             Edition::Edition2018,\n-                            Some(\n-                                CrateName::new(&sysroot[krate].name)\n-                                    .expect(\"Sysroot crate names should not contain dashes\"),\n-                            ),\n+                            Some(crate_name),\n                             cfg_options,\n                             env,\n                             extern_source,\n                             proc_macro,\n                         );\n-                        sysroot_crates.insert(krate, crate_id);\n-                    }\n-                }\n+                        Some((krate, crate_id))\n+                    })\n+                    .collect();\n+\n                 for from in sysroot.crates() {\n                     for &to in sysroot[from].deps.iter() {\n                         let name = &sysroot[to].name;"}]}