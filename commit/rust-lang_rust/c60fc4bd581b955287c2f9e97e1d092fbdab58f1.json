{"sha": "c60fc4bd581b955287c2f9e97e1d092fbdab58f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MGZjNGJkNTgxYjk1NTI4N2MyZjllOTdlMWQwOTJmYmRhYjU4ZjE=", "commit": {"author": {"name": "Tobias Schaffner", "email": "tschaff@genua.de", "date": "2017-08-22T09:11:30Z"}, "committer": {"name": "Tobias Schaffner", "email": "tschaff@genua.de", "date": "2017-08-22T16:05:08Z"}, "message": "Return L4Re TargetOptions as a Result type instead of panic\n\nIf the environment variable L4RE_LIBDIR ist not set an Error will be\nreturned wrapped in a result type instead of a panic.", "tree": {"sha": "63af2d2b1bb76740e9418d620efe329e065dc111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63af2d2b1bb76740e9418d620efe329e065dc111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c60fc4bd581b955287c2f9e97e1d092fbdab58f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c60fc4bd581b955287c2f9e97e1d092fbdab58f1", "html_url": "https://github.com/rust-lang/rust/commit/c60fc4bd581b955287c2f9e97e1d092fbdab58f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c60fc4bd581b955287c2f9e97e1d092fbdab58f1/comments", "author": null, "committer": null, "parents": [{"sha": "beedf4e7d88cdb803c4ba73511c871273402ebb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/beedf4e7d88cdb803c4ba73511c871273402ebb0", "html_url": "https://github.com/rust-lang/rust/commit/beedf4e7d88cdb803c4ba73511c871273402ebb0"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "31d428d2668395e4830ae934ec12495617abd241", "filename": "src/librustc_back/target/l4re_base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c60fc4bd581b955287c2f9e97e1d092fbdab58f1/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60fc4bd581b955287c2f9e97e1d092fbdab58f1/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs?ref=c60fc4bd581b955287c2f9e97e1d092fbdab58f1", "patch": "@@ -26,9 +26,9 @@ fn get_path_or(filename: &str) -> String {\n         .expect(\"Couldn't read path from GCC\").trim().into()\n }\n \n-pub fn opts() -> TargetOptions {\n-    let l4re_lib_path = env::var_os(\"L4RE_LIBDIR\").expect(\"Unable to find L4Re \\\n-        library directory: L4RE_LIBDIR not set.\").into_string().unwrap();\n+pub fn opts() -> Result<TargetOptions, String> {\n+    let l4re_lib_path = env::var_os(\"L4RE_LIBDIR\").ok_or(\"Unable to find L4Re \\\n+        library directory: L4RE_LIBDIR not set.\")?.into_string().unwrap();\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(LinkerFlavor::Ld, vec![\n         format!(\"-T{}/main_stat.ld\", l4re_lib_path),\n@@ -68,7 +68,7 @@ pub fn opts() -> TargetOptions {\n         format!(\"{}/crtn.o\", l4re_lib_path),\n     ]);\n \n-    TargetOptions {\n+    Ok(TargetOptions {\n         executables: true,\n         has_elf_tls: false,\n         exe_allocation_crate: None,\n@@ -78,5 +78,5 @@ pub fn opts() -> TargetOptions {\n         post_link_args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n-    }\n+    })\n }"}, {"sha": "99d3171e1c0e0f9dc1eef6f7d616dc9e5c28f77c", "filename": "src/librustc_back/target/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60fc4bd581b955287c2f9e97e1d092fbdab58f1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60fc4bd581b955287c2f9e97e1d092fbdab58f1/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs?ref=c60fc4bd581b955287c2f9e97e1d092fbdab58f1", "patch": "@@ -12,7 +12,7 @@ use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::l4re_base::opts();\n+    let mut base = super::l4re_base::opts()?;\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n "}]}