{"sha": "88e819f478c530d4e1ca7243e327803771b532af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZTgxOWY0NzhjNTMwZDRlMWNhNzI0M2UzMjc4MDM3NzFiNTMyYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-01T13:51:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-01T13:51:38Z"}, "message": "Auto merge of #30663 - apasel422:ll, r=bluss\n\nCC #30642\n\nr? @Gankro", "tree": {"sha": "fb0e0c17cb334246652cfd62a199c70d37010224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb0e0c17cb334246652cfd62a199c70d37010224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e819f478c530d4e1ca7243e327803771b532af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e819f478c530d4e1ca7243e327803771b532af", "html_url": "https://github.com/rust-lang/rust/commit/88e819f478c530d4e1ca7243e327803771b532af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e819f478c530d4e1ca7243e327803771b532af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb4212ee2ae658dfd4feb5991ebff55e9ac5240", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb4212ee2ae658dfd4feb5991ebff55e9ac5240", "html_url": "https://github.com/rust-lang/rust/commit/bfb4212ee2ae658dfd4feb5991ebff55e9ac5240"}, {"sha": "c9fd3d4f91abeacc5be5155e5f584dac4e8273d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fd3d4f91abeacc5be5155e5f584dac4e8273d9", "html_url": "https://github.com/rust-lang/rust/commit/c9fd3d4f91abeacc5be5155e5f584dac4e8273d9"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "370857287d6e6aea59368b200ddd79eca66b0e21", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e819f478c530d4e1ca7243e327803771b532af/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e819f478c530d4e1ca7243e327803771b532af/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=88e819f478c530d4e1ca7243e327803771b532af", "patch": "@@ -46,7 +46,7 @@\n #![feature(num_bits_bytes)]\n #![feature(oom)]\n #![feature(pattern)]\n-#![feature(ptr_as_ref)]\n+#![feature(shared)]\n #![feature(slice_bytes)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]"}, {"sha": "1bd5a83d4370860223f13966ab449a006369b14f", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88e819f478c530d4e1ca7243e327803771b532af/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e819f478c530d4e1ca7243e327803771b532af/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=88e819f478c530d4e1ca7243e327803771b532af", "patch": "@@ -27,7 +27,7 @@ use core::fmt;\n use core::hash::{Hasher, Hash};\n use core::iter::FromIterator;\n use core::mem;\n-use core::ptr;\n+use core::ptr::Shared;\n \n /// A doubly-linked list.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -40,7 +40,7 @@ pub struct LinkedList<T> {\n type Link<T> = Option<Box<Node<T>>>;\n \n struct Rawlink<T> {\n-    p: *mut T,\n+    p: Option<Shared<T>>,\n }\n \n impl<T> Copy for Rawlink<T> {}\n@@ -93,12 +93,12 @@ pub struct IntoIter<T> {\n impl<T> Rawlink<T> {\n     /// Like Option::None for Rawlink\n     fn none() -> Rawlink<T> {\n-        Rawlink { p: ptr::null_mut() }\n+        Rawlink { p: None }\n     }\n \n     /// Like Option::Some for Rawlink\n     fn some(n: &mut T) -> Rawlink<T> {\n-        Rawlink { p: n }\n+        unsafe { Rawlink { p: Some(Shared::new(n)) } }\n     }\n \n     /// Convert the `Rawlink` into an Option value\n@@ -108,7 +108,7 @@ impl<T> Rawlink<T> {\n     /// - Dereference of raw pointer.\n     /// - Returns reference of arbitrary lifetime.\n     unsafe fn resolve<'a>(&self) -> Option<&'a T> {\n-        self.p.as_ref()\n+        self.p.map(|p| &**p)\n     }\n \n     /// Convert the `Rawlink` into an Option value\n@@ -118,7 +118,7 @@ impl<T> Rawlink<T> {\n     /// - Dereference of raw pointer.\n     /// - Returns reference of arbitrary lifetime.\n     unsafe fn resolve_mut<'a>(&mut self) -> Option<&'a mut T> {\n-        self.p.as_mut()\n+        self.p.map(|p| &mut **p)\n     }\n \n     /// Return the `Rawlink` and replace with `Rawlink::none()`\n@@ -984,6 +984,14 @@ impl<A: Hash> Hash for LinkedList<A> {\n     }\n }\n \n+// Ensure that `LinkedList` and its read-only iterators are covariant in their type parameters.\n+#[allow(dead_code)]\n+fn assert_covariance() {\n+    fn a<'a>(x: LinkedList<&'static str>) -> LinkedList<&'a str> { x }\n+    fn b<'i, 'a>(x: Iter<'i, &'static str>) -> Iter<'i, &'a str> { x }\n+    fn c<'a>(x: IntoIter<&'static str>) -> IntoIter<&'a str> { x }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::clone::Clone;"}]}