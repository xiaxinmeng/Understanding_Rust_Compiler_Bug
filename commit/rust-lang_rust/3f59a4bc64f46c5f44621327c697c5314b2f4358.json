{"sha": "3f59a4bc64f46c5f44621327c697c5314b2f4358", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTlhNGJjNjRmNDZjNWY0NDYyMTMyN2M2OTdjNTMxNGIyZjQzNTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-03T23:34:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-03T23:49:46Z"}, "message": "More work on #2082, remove parser/lexer support for 'crust' and 'native'.", "tree": {"sha": "2857e15d9cc625c783997c2e6f74314e683912f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2857e15d9cc625c783997c2e6f74314e683912f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f59a4bc64f46c5f44621327c697c5314b2f4358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f59a4bc64f46c5f44621327c697c5314b2f4358", "html_url": "https://github.com/rust-lang/rust/commit/3f59a4bc64f46c5f44621327c697c5314b2f4358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f59a4bc64f46c5f44621327c697c5314b2f4358/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be2c92078b37b6e3a92275403e9670564f818ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/be2c92078b37b6e3a92275403e9670564f818ebb", "html_url": "https://github.com/rust-lang/rust/commit/be2c92078b37b6e3a92275403e9670564f818ebb"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "747ca07bee5fc5dcd42ac5efb8c6b71485b81a76", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f59a4bc64f46c5f44621327c697c5314b2f4358/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f59a4bc64f46c5f44621327c697c5314b2f4358/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3f59a4bc64f46c5f44621327c697c5314b2f4358", "patch": "@@ -149,8 +149,7 @@ class parser {\n     fn get_id() -> node_id { next_node_id(self.sess) }\n \n     fn parse_ty_fn(purity: ast::purity) -> ty_ {\n-        let proto = if self.eat_keyword(\"native\") ||\n-            self.eat_keyword(\"extern\") {\n+        let proto = if self.eat_keyword(\"extern\") {\n             self.expect_keyword(\"fn\");\n             ast::proto_bare\n         } else {\n@@ -433,8 +432,7 @@ class parser {\n             self.parse_ty_fn(ast::unsafe_fn)\n         } else if self.is_keyword(\"fn\") {\n             self.parse_ty_fn(ast::impure_fn)\n-        } else if self.eat_keyword(\"native\") ||\n-            self.eat_keyword(\"extern\") {\n+        } else if self.eat_keyword(\"extern\") {\n             self.expect_keyword(\"fn\");\n             ty_fn(proto_bare, self.parse_ty_fn_decl(ast::impure_fn))\n         } else if self.token == token::MOD_SEP || is_ident(self.token) {\n@@ -2457,13 +2455,8 @@ class parser {\n             } else {\n                 self.parse_item_foreign_mod()\n             }\n-        } else if self.eat_keyword(\"crust\") {\n-            self.expect_keyword(\"fn\");\n-            self.parse_item_fn(extern_fn)\n         } else if self.eat_keyword(\"mod\") {\n             self.parse_item_mod()\n-        } else if self.eat_keyword(\"native\") {\n-            self.parse_item_foreign_mod()\n         } else if self.eat_keyword(\"type\") {\n             self.parse_item_type()\n         } else if self.eat_keyword(\"enum\") {"}, {"sha": "4c573b45a1f22241ea8b3b9f428686d026449b58", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f59a4bc64f46c5f44621327c697c5314b2f4358/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f59a4bc64f46c5f44621327c697c5314b2f4358/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=3f59a4bc64f46c5f44621327c697c5314b2f4358", "patch": "@@ -293,14 +293,14 @@ fn restricted_keyword_table() -> hashmap<str, ()> {\n         \"alt\",\n         \"assert\",\n         \"break\",\n-        \"check\", \"claim\", \"class\", \"const\", \"cont\", \"copy\", \"crust\",\n+        \"check\", \"claim\", \"class\", \"const\", \"cont\", \"copy\",\n         \"do\", \"drop\",\n         \"else\", \"enum\", \"export\", \"extern\",\n         \"fail\", \"false\", \"fn\", \"for\",\n         \"if\", \"iface\", \"impl\", \"import\",\n         \"let\", \"log\", \"loop\",\n         \"mod\", \"mut\",\n-        \"native\", \"new\",\n+        \"new\",\n         \"pure\", \"ret\",\n         \"true\", \"trait\", \"type\",\n         \"unchecked\", \"unsafe\","}]}