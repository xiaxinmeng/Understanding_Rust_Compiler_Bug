{"sha": "e2c962d3d00d38aef9ed024caced7ef189cd2533", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYzk2MmQzZDAwZDM4YWVmOWVkMDI0Y2FjZWQ3ZWYxODljZDI1MzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-06T21:55:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-09T19:33:28Z"}, "message": "resolve: Cleanup some field processing code", "tree": {"sha": "c9c24a3c9003aed19dd7a714e413d183d0acb1fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c24a3c9003aed19dd7a714e413d183d0acb1fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2c962d3d00d38aef9ed024caced7ef189cd2533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c962d3d00d38aef9ed024caced7ef189cd2533", "html_url": "https://github.com/rust-lang/rust/commit/e2c962d3d00d38aef9ed024caced7ef189cd2533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2c962d3d00d38aef9ed024caced7ef189cd2533/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6725dcfe59665384e51ceb04280fee725d09a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6725dcfe59665384e51ceb04280fee725d09a3", "html_url": "https://github.com/rust-lang/rust/commit/9e6725dcfe59665384e51ceb04280fee725d09a3"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "4aaa1c9e5cf0b4a236b973f7fd92b336b6633c58", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e2c962d3d00d38aef9ed024caced7ef189cd2533/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c962d3d00d38aef9ed024caced7ef189cd2533/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e2c962d3d00d38aef9ed024caced7ef189cd2533", "patch": "@@ -299,6 +299,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n+    fn insert_field_names_local(&mut self, def_id: DefId, vdata: &ast::VariantData) {\n+        let field_names = vdata.fields().iter().map(|field| {\n+            respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name))\n+        }).collect();\n+        self.insert_field_names(def_id, field_names);\n+    }\n+\n     fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Name>>) {\n         if !field_names.is_empty() {\n             self.r.field_names.insert(def_id, field_names);\n@@ -736,58 +743,50 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items live in both the type and value namespaces.\n-            ItemKind::Struct(ref struct_def, _) => {\n+            ItemKind::Struct(ref vdata, _) => {\n                 // Define a name in the type namespace.\n                 let def_id = self.r.definitions.local_def_id(item.id);\n                 let res = Res::Def(DefKind::Struct, def_id);\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n \n-                let mut ctor_vis = vis;\n-\n-                let has_non_exhaustive = attr::contains_name(&item.attrs, sym::non_exhaustive);\n-\n-                // If the structure is marked as non_exhaustive then lower the visibility\n-                // to within the crate.\n-                if has_non_exhaustive && vis == ty::Visibility::Public {\n-                    ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n-                }\n-\n                 // Record field names for error reporting.\n-                let field_names = struct_def.fields().iter().map(|field| {\n-                    // NOTE: The field may be an expansion placeholder, but expansion sets correct\n-                    // visibilities for unnamed field placeholders specifically, so the constructor\n-                    // visibility should still be determined correctly.\n-                    let field_vis = self.resolve_visibility_speculative(&field.vis, true);\n-                    if ctor_vis.is_at_least(field_vis, &*self.r) {\n-                        ctor_vis = field_vis;\n-                    }\n-                    respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name))\n-                }).collect();\n-                let item_def_id = self.r.definitions.local_def_id(item.id);\n-                self.insert_field_names(item_def_id, field_names);\n+                self.insert_field_names_local(def_id, vdata);\n \n                 // If this is a tuple or unit struct, define a name\n                 // in the value namespace as well.\n-                if let Some(ctor_node_id) = struct_def.ctor_id() {\n+                if let Some(ctor_node_id) = vdata.ctor_id() {\n+                    let mut ctor_vis = vis;\n+                    // If the structure is marked as non_exhaustive then lower the visibility\n+                    // to within the crate.\n+                    if vis == ty::Visibility::Public &&\n+                       attr::contains_name(&item.attrs, sym::non_exhaustive) {\n+                        ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n+                    }\n+                    for field in vdata.fields() {\n+                        // NOTE: The field may be an expansion placeholder, but expansion sets\n+                        // correct visibilities for unnamed field placeholders specifically, so the\n+                        // constructor visibility should still be determined correctly.\n+                        let field_vis = self.resolve_visibility_speculative(&field.vis, true);\n+                        if ctor_vis.is_at_least(field_vis, &*self.r) {\n+                            ctor_vis = field_vis;\n+                        }\n+                    }\n                     let ctor_res = Res::Def(\n-                        DefKind::Ctor(CtorOf::Struct, CtorKind::from_ast(struct_def)),\n+                        DefKind::Ctor(CtorOf::Struct, CtorKind::from_ast(vdata)),\n                         self.r.definitions.local_def_id(ctor_node_id),\n                     );\n                     self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, sp, expansion));\n-                    self.r.struct_constructors.insert(res.def_id(), (ctor_res, ctor_vis));\n+                    self.r.struct_constructors.insert(def_id, (ctor_res, ctor_vis));\n                 }\n             }\n \n             ItemKind::Union(ref vdata, _) => {\n-                let res = Res::Def(DefKind::Union, self.r.definitions.local_def_id(item.id));\n+                let def_id = self.r.definitions.local_def_id(item.id);\n+                let res = Res::Def(DefKind::Union, def_id);\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n \n                 // Record field names for error reporting.\n-                let field_names = vdata.fields().iter().map(|field| {\n-                    respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name))\n-                }).collect();\n-                let item_def_id = self.r.definitions.local_def_id(item.id);\n-                self.insert_field_names(item_def_id, field_names);\n+                self.insert_field_names_local(def_id, vdata);\n             }\n \n             ItemKind::Impl(.., ref impl_items) => {"}]}