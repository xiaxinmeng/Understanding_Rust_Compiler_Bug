{"sha": "71dccf8706ab25f75667c1cbb85ce94f2decbb57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZGNjZjg3MDZhYjI1Zjc1NjY3YzFjYmI4NWNlOTRmMmRlY2JiNTc=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-11-19T18:01:11Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-11-21T01:11:15Z"}, "message": "Also check for NULs in environment variables\n\nThis check is necessary, because the underlying API only reads strings\nuntil the first NUL.", "tree": {"sha": "ae32a75493b7711f57ad58dd7f8968b0f427a2e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae32a75493b7711f57ad58dd7f8968b0f427a2e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71dccf8706ab25f75667c1cbb85ce94f2decbb57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71dccf8706ab25f75667c1cbb85ce94f2decbb57", "html_url": "https://github.com/rust-lang/rust/commit/71dccf8706ab25f75667c1cbb85ce94f2decbb57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71dccf8706ab25f75667c1cbb85ce94f2decbb57/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fab0ea7002bde57beaee6db7976ae0cb080c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fab0ea7002bde57beaee6db7976ae0cb080c38", "html_url": "https://github.com/rust-lang/rust/commit/06fab0ea7002bde57beaee6db7976ae0cb080c38"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "9db7ab534590ab23eb55f3e5826d9cdb03d385b1", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/71dccf8706ab25f75667c1cbb85ce94f2decbb57/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dccf8706ab25f75667c1cbb85ce94f2decbb57/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=71dccf8706ab25f75667c1cbb85ce94f2decbb57", "patch": "@@ -22,7 +22,8 @@ use sync::Arc;\n use sys::handle::Handle;\n use sys::{c, cvt};\n use sys_common::FromInner;\n-use vec::Vec;\n+\n+use super::to_u16s;\n \n pub struct File { handle: Handle }\n \n@@ -377,15 +378,6 @@ impl fmt::Debug for File {\n     }\n }\n \n-pub fn to_u16s(s: &Path) -> io::Result<Vec<u16>> {\n-    let mut maybe_result = s.as_os_str().encode_wide().collect();\n-    if maybe_result.iter().any(|&u| u == 0) {\n-        return Err(io::Error::new(io::ErrorKind::InvalidInput, \"paths cannot contain NULs\"));\n-    }\n-    maybe_result.push(0);\n-    Ok(maybe_result)\n-}\n-\n impl FileAttr {\n     pub fn size(&self) -> u64 {\n         ((self.data.nFileSizeHigh as u64) << 32) | (self.data.nFileSizeLow as u64)\n@@ -622,6 +614,7 @@ fn directory_junctions_are_directories() {\n     use ffi::OsStr;\n     use env;\n     use rand::{self, StdRng, Rng};\n+    use vec::Vec;\n \n     macro_rules! t {\n         ($e:expr) => (match $e {"}, {"sha": "7e5342a3fd4733d2308a60a7205d24e3fc0a5f18", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/71dccf8706ab25f75667c1cbb85ce94f2decbb57/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dccf8706ab25f75667c1cbb85ce94f2decbb57/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=71dccf8706ab25f75667c1cbb85ce94f2decbb57", "patch": "@@ -72,10 +72,17 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n-fn to_utf16_os(s: &OsStr) -> Vec<u16> {\n-    let mut v: Vec<_> = s.encode_wide().collect();\n-    v.push(0);\n-    v\n+pub fn to_u16s<S: AsRef<OsStr>>(s: S) -> io::Result<Vec<u16>> {\n+    fn inner(s: &OsStr) -> io::Result<Vec<u16>> {\n+        let mut maybe_result: Vec<u16> = s.encode_wide().collect();\n+        if maybe_result.iter().any(|&u| u == 0) {\n+            return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                      \"strings passed to WinAPI cannot contain NULs\"));\n+        }\n+        maybe_result.push(0);\n+        Ok(maybe_result)\n+    }\n+    inner(s.as_ref())\n }\n \n // Many Windows APIs follow a pattern of where we hand a buffer and then they"}, {"sha": "e2d2dc1a4de847d69cd1c771d3f5fbf4a0290222", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71dccf8706ab25f75667c1cbb85ce94f2decbb57/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dccf8706ab25f75667c1cbb85ce94f2decbb57/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=71dccf8706ab25f75667c1cbb85ce94f2decbb57", "patch": "@@ -28,6 +28,8 @@ use slice;\n use sys::{c, cvt};\n use sys::handle::Handle;\n \n+use super::to_u16s;\n+\n pub fn errno() -> i32 {\n     unsafe { c::GetLastError() as i32 }\n }\n@@ -228,7 +230,7 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n }\n \n pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    let k = super::to_utf16_os(k);\n+    let k = try!(to_u16s(k));\n     let res = super::fill_utf16_buf(|buf, sz| unsafe {\n         c::GetEnvironmentVariableW(k.as_ptr(), buf, sz)\n     }, |buf| {\n@@ -247,16 +249,16 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n-    let k = super::to_utf16_os(k);\n-    let v = super::to_utf16_os(v);\n+    let k = try!(to_u16s(k));\n+    let v = try!(to_u16s(v));\n \n     cvt(unsafe {\n         c::SetEnvironmentVariableW(k.as_ptr(), v.as_ptr())\n     }).map(|_| ())\n }\n \n pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n-    let v = super::to_utf16_os(n);\n+    let v = try!(to_u16s(n));\n     cvt(unsafe {\n         c::SetEnvironmentVariableW(v.as_ptr(), ptr::null())\n     }).map(|_| ())"}]}