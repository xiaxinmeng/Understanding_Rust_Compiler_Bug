{"sha": "d06a020e2b100d8a22252d8877783d8869e5a9ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNmEwMjBlMmIxMDBkOGEyMjI1MmQ4ODc3NzgzZDg4NjllNWE5YWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-12T15:33:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-12T15:33:59Z"}, "message": "Auto merge of #58330 - GuillaumeGomez:rustdoc-js-non-std, r=QuietMisdreavus,Mark-Simulacrum\n\nAdd rustdoc JS non-std tests\n\n@QuietMisdreavus: You asked it, here it is!\n\nr? @QuietMisdreavus", "tree": {"sha": "d6086cdd165c7ff1b75c0f871d27c3d4ca8eaec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6086cdd165c7ff1b75c0f871d27c3d4ca8eaec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d06a020e2b100d8a22252d8877783d8869e5a9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d06a020e2b100d8a22252d8877783d8869e5a9ad", "html_url": "https://github.com/rust-lang/rust/commit/d06a020e2b100d8a22252d8877783d8869e5a9ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d06a020e2b100d8a22252d8877783d8869e5a9ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "html_url": "https://github.com/rust-lang/rust/commit/8f4c226fc5b3b0c0d120bb3117089557ef35acc1"}, {"sha": "37ab3dc5b3560792ae4eab0521e0c08bbbdd95d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ab3dc5b3560792ae4eab0521e0c08bbbdd95d8", "html_url": "https://github.com/rust-lang/rust/commit/37ab3dc5b3560792ae4eab0521e0c08bbbdd95d8"}], "stats": {"total": 521, "additions": 482, "deletions": 39}, "files": [{"sha": "ffd23e72e80a68cd206f7e43c1943a06ee61bde6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -405,7 +405,8 @@ impl<'a> Builder<'a> {\n                 test::Miri,\n                 test::Clippy,\n                 test::CompiletestTest,\n-                test::RustdocJS,\n+                test::RustdocJSStd,\n+                test::RustdocJSNotStd,\n                 test::RustdocTheme,\n                 // Run bootstrap close to the end as it's unlikely to fail\n                 test::Bootstrap,"}, {"sha": "b7323b2eadc3dd21b798158f999404cfa4edc193", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -574,22 +574,22 @@ impl Step for RustdocTheme {\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct RustdocJS {\n+pub struct RustdocJSStd {\n     pub host: Interned<String>,\n     pub target: Interned<String>,\n }\n \n-impl Step for RustdocJS {\n+impl Step for RustdocJSStd {\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/test/rustdoc-js\")\n+        run.path(\"src/test/rustdoc-js-std\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(RustdocJS {\n+        run.builder.ensure(RustdocJSStd {\n             host: run.host,\n             target: run.target,\n         });\n@@ -598,12 +598,55 @@ impl Step for RustdocJS {\n     fn run(self, builder: &Builder<'_>) {\n         if let Some(ref nodejs) = builder.config.nodejs {\n             let mut command = Command::new(nodejs);\n-            command.args(&[\"src/tools/rustdoc-js/tester.js\", &*self.host]);\n+            command.args(&[\"src/tools/rustdoc-js-std/tester.js\", &*self.host]);\n             builder.ensure(crate::doc::Std {\n                 target: self.target,\n                 stage: builder.top_stage,\n             });\n             builder.run(&mut command);\n+        } else {\n+            builder.info(\n+                \"No nodejs found, skipping \\\"src/test/rustdoc-js-std\\\" tests\"\n+            );\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustdocJSNotStd {\n+    pub host: Interned<String>,\n+    pub target: Interned<String>,\n+    pub compiler: Compiler,\n+}\n+\n+impl Step for RustdocJSNotStd {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/test/rustdoc-js\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n+        run.builder.ensure(RustdocJSNotStd {\n+            host: run.host,\n+            target: run.target,\n+            compiler,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        if builder.config.nodejs.is_some() {\n+            builder.ensure(Compiletest {\n+                compiler: self.compiler,\n+                target: self.target,\n+                mode: \"js-doc-test\",\n+                suite: \"rustdoc-js\",\n+                path: None,\n+                compare_mode: None,\n+            });\n         } else {\n             builder.info(\n                 \"No nodejs found, skipping \\\"src/test/rustdoc-js\\\" tests\"\n@@ -990,12 +1033,13 @@ impl Step for Compiletest {\n             .arg(builder.sysroot_libdir(compiler, target));\n         cmd.arg(\"--rustc-path\").arg(builder.rustc(compiler));\n \n-        let is_rustdoc_ui = suite.ends_with(\"rustdoc-ui\");\n+        let is_rustdoc = suite.ends_with(\"rustdoc-ui\") || suite.ends_with(\"rustdoc-js\");\n \n         // Avoid depending on rustdoc when we don't need it.\n         if mode == \"rustdoc\"\n             || (mode == \"run-make\" && suite.ends_with(\"fulldeps\"))\n-            || (mode == \"ui\" && is_rustdoc_ui)\n+            || (mode == \"ui\" && is_rustdoc)\n+            || mode == \"js-doc-test\"\n         {\n             cmd.arg(\"--rustdoc-path\")\n                 .arg(builder.rustdoc(compiler.host));\n@@ -1029,12 +1073,12 @@ impl Step for Compiletest {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }\n \n-        let mut flags = if is_rustdoc_ui {\n+        let mut flags = if is_rustdoc {\n             Vec::new()\n         } else {\n             vec![\"-Crpath\".to_string()]\n         };\n-        if !is_rustdoc_ui {\n+        if !is_rustdoc {\n             if builder.config.rust_optimize_tests {\n                 flags.push(\"-O\".to_string());\n             }"}, {"sha": "7c6327fcdd7cae3e4aa54fa2e347e726ff8b5e56", "filename": "src/test/rustdoc-js-std/alias-1.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Falias-1.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Falias-1.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias-1.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/alias-1.js"}, {"sha": "f3c6713692b5982ec0ff7ab84000ef39792165c9", "filename": "src/test/rustdoc-js-std/alias-2.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Falias-2.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Falias-2.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias-2.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/alias-2.js"}, {"sha": "392b1e8183786a314e13d0b4dd9581c2bdeb2551", "filename": "src/test/rustdoc-js-std/alias-3.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Falias-3.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Falias-3.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias-3.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/alias-3.js"}, {"sha": "2b709c99119ae11e7a2b079d36c1d51f6f2955a6", "filename": "src/test/rustdoc-js-std/alias.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Falias.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Falias.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/alias.js"}, {"sha": "824cac71083328dd8e001f8a137c78d7d219db66", "filename": "src/test/rustdoc-js-std/basic.js", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fbasic.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -0,0 +1,15 @@\n+const QUERY = 'String';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::string', 'name': 'String' },\n+        { 'path': 'std::ffi', 'name': 'CString' },\n+        { 'path': 'std::ffi', 'name': 'OsString' },\n+    ],\n+    'in_args': [\n+        { 'path': 'std::str', 'name': 'eq' },\n+    ],\n+    'returned': [\n+        { 'path': 'std::string::String', 'name': 'add' },\n+    ],\n+};"}, {"sha": "f02f6cf55ed21aeb0f5b31b45c4858c71e896f6c", "filename": "src/test/rustdoc-js-std/deduplication.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fdeduplication.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fdeduplication.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fdeduplication.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/deduplication.js"}, {"sha": "902e09069108dc0b6d1b6dc1505d0e88842427a3", "filename": "src/test/rustdoc-js-std/enum-option.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fenum-option.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fenum-option.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fenum-option.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/enum-option.js"}, {"sha": "2e0330c449721153bc3c57d08d8b61694828e38b", "filename": "src/test/rustdoc-js-std/filter-crate.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Ffilter-crate.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Ffilter-crate.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Ffilter-crate.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/filter-crate.js"}, {"sha": "66a5fcaa7813dd9baa1bcb39ee16752a4dc41b0d", "filename": "src/test/rustdoc-js-std/fn-forget.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Ffn-forget.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Ffn-forget.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Ffn-forget.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/fn-forget.js"}, {"sha": "e3f3cd436aa6ae9267a934ff1862b78fa37d99fb", "filename": "src/test/rustdoc-js-std/from_u.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Ffrom_u.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Ffrom_u.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Ffrom_u.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/from_u.js"}, {"sha": "868ddd7b6dcebe3718507304c01f565f2edfe67c", "filename": "src/test/rustdoc-js-std/keyword.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fkeyword.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fkeyword.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fkeyword.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/keyword.js"}, {"sha": "242e0cbf5f4de12e8b11b3b26b9fa0e74f23d618", "filename": "src/test/rustdoc-js-std/macro-check.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fmacro-check.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fmacro-check.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fmacro-check.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/macro-check.js"}, {"sha": "858046e72e9a456518acb9d749bd972218101a00", "filename": "src/test/rustdoc-js-std/macro-print.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fmacro-print.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fmacro-print.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fmacro-print.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/macro-print.js"}, {"sha": "01e54065189c54e592c4a5281b1c246c896b20b2", "filename": "src/test/rustdoc-js-std/multi-query.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fmulti-query.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fmulti-query.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fmulti-query.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/multi-query.js"}, {"sha": "392b1e8183786a314e13d0b4dd9581c2bdeb2551", "filename": "src/test/rustdoc-js-std/never.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fnever.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fnever.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fnever.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/never.js"}, {"sha": "924129f86c8680214c07e2569cbea02aa2bc2a63", "filename": "src/test/rustdoc-js-std/quoted.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fquoted.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fquoted.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fquoted.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/quoted.js"}, {"sha": "b85a47dc08a88305ebda6e11be72fc199ce928b9", "filename": "src/test/rustdoc-js-std/should-fail.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fshould-fail.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fshould-fail.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fshould-fail.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/should-fail.js"}, {"sha": "f9edf4408db858f4578c1fb5c10b7c3462e275b0", "filename": "src/test/rustdoc-js-std/string-from_ut.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fstring-from_ut.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fstring-from_ut.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fstring-from_ut.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/string-from_ut.js"}, {"sha": "2c808143bae67fb434fda6307c5da81ef57d71c3", "filename": "src/test/rustdoc-js-std/struct-vec.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fstruct-vec.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fstruct-vec.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fstruct-vec.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/struct-vec.js"}, {"sha": "e4daa5065d2330cf302eb1c7ae2c0cf37b83a1de", "filename": "src/test/rustdoc-js-std/vec-new.js", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fvec-new.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js-std%2Fvec-new.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fvec-new.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "previous_filename": "src/test/rustdoc-js/vec-new.js"}, {"sha": "d99b23468b60cfa94361eac46317304aa7ae8332", "filename": "src/test/rustdoc-js/basic.js", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fbasic.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -1,15 +1,7 @@\n-const QUERY = 'String';\n+const QUERY = 'Fo';\n \n const EXPECTED = {\n     'others': [\n-        { 'path': 'std::string', 'name': 'String' },\n-        { 'path': 'std::ffi', 'name': 'CString' },\n-        { 'path': 'std::ffi', 'name': 'OsString' },\n-    ],\n-    'in_args': [\n-        { 'path': 'std::str', 'name': 'eq' },\n-    ],\n-    'returned': [\n-        { 'path': 'std::string::String', 'name': 'add' },\n+        { 'path': 'basic', 'name': 'Foo' },\n     ],\n };"}, {"sha": "1b4963fcebea8b71b4285bf8e0b15e986ec74ae1", "filename": "src/test/rustdoc-js/basic.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftest%2Frustdoc-js%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fbasic.rs?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -0,0 +1,2 @@\n+/// Foo\n+pub struct Foo;"}, {"sha": "f0991c8cdb5477f827c91388a5c52f570ab4147d", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -24,6 +24,7 @@ pub enum Mode {\n     Incremental,\n     RunMake,\n     Ui,\n+    JsDocTest,\n     MirOpt,\n }\n \n@@ -59,6 +60,7 @@ impl FromStr for Mode {\n             \"incremental\" => Ok(Incremental),\n             \"run-make\" => Ok(RunMake),\n             \"ui\" => Ok(Ui),\n+            \"js-doc-test\" => Ok(JsDocTest),\n             \"mir-opt\" => Ok(MirOpt),\n             _ => Err(()),\n         }\n@@ -82,6 +84,7 @@ impl fmt::Display for Mode {\n             Incremental => \"incremental\",\n             RunMake => \"run-make\",\n             Ui => \"ui\",\n+            JsDocTest => \"js-doc-test\",\n             MirOpt => \"mir-opt\",\n         };\n         fmt::Display::fmt(s, f)"}, {"sha": "84dd671fa7ddb1e1902672ed9f284cd13fd441c3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -4,7 +4,7 @@ use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, DebugInfoBoth, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use crate::common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use crate::common::{Config, TestPaths};\n-use crate::common::{Incremental, MirOpt, RunMake, Ui};\n+use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest};\n use diff;\n use crate::errors::{self, Error, ErrorKind};\n use filetime::FileTime;\n@@ -275,6 +275,7 @@ impl<'test> TestCx<'test> {\n             RunMake => self.run_rmake_test(),\n             RunPass | Ui => self.run_ui_test(),\n             MirOpt => self.run_mir_opt_test(),\n+            JsDocTest => self.run_js_doc_test(),\n         }\n     }\n \n@@ -291,6 +292,7 @@ impl<'test> TestCx<'test> {\n         match self.config.mode {\n             CompileFail => self.props.compile_pass,\n             RunPass => true,\n+            JsDocTest => true,\n             Ui => self.props.compile_pass,\n             Incremental => {\n                 let revision = self.revision\n@@ -1712,7 +1714,8 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn make_compile_args(&self, input_file: &Path, output_file: TargetLocation) -> Command {\n-        let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\");\n+        let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\") ||\n+                         self.config.src_base.ends_with(\"rustdoc-js\");\n         let mut rustc = if !is_rustdoc {\n             Command::new(&self.config.rustc_path)\n         } else {\n@@ -1802,7 +1805,7 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(dir_opt);\n             }\n             RunFail | RunPassValgrind | Pretty | DebugInfoBoth | DebugInfoGdb | DebugInfoLldb\n-            | Codegen | Rustdoc | RunMake | CodegenUnits => {\n+            | Codegen | Rustdoc | RunMake | CodegenUnits | JsDocTest => {\n                 // do not use JSON output\n             }\n         }\n@@ -2710,6 +2713,27 @@ impl<'test> TestCx<'test> {\n         fs::remove_dir(path)\n     }\n \n+    fn run_js_doc_test(&self) {\n+        if let Some(nodejs) = &self.config.nodejs {\n+            let out_dir = self.output_base_dir();\n+\n+            self.document(&out_dir);\n+\n+            let root = self.config.find_rust_src_root().unwrap();\n+            let res = self.cmd2procres(\n+                Command::new(&nodejs)\n+                    .arg(root.join(\"src/tools/rustdoc-js/tester.js\"))\n+                    .arg(out_dir.parent().expect(\"no parent\"))\n+                    .arg(&self.testpaths.file.file_stem().expect(\"couldn't get file stem\")),\n+            );\n+            if !res.status.success() {\n+                self.fatal_proc_rec(\"rustdoc-js test failed!\", &res);\n+            }\n+        } else {\n+            self.fatal(\"no nodeJS\");\n+        }\n+    }\n+\n     fn run_ui_test(&self) {\n         // if the user specified a format in the ui test\n         // print the output to the stderr file, otherwise extract"}, {"sha": "d5f0ab9f4292d56ab4508c1b27b1a697e1d3323c", "filename": "src/tools/rustdoc-js-std/tester.js", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-std%2Ftester.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -0,0 +1,344 @@\n+const fs = require('fs');\n+\n+const TEST_FOLDER = 'src/test/rustdoc-js-std/';\n+\n+function getNextStep(content, pos, stop) {\n+    while (pos < content.length && content[pos] !== stop &&\n+           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n+        pos += 1;\n+    }\n+    if (pos >= content.length) {\n+        return null;\n+    }\n+    if (content[pos] !== stop) {\n+        return pos * -1;\n+    }\n+    return pos;\n+}\n+\n+// Stupid function extractor based on indent. Doesn't support block\n+// comments. If someone puts a ' or an \" in a block comment this\n+// will blow up. Template strings are not tested and might also be\n+// broken.\n+function extractFunction(content, functionName) {\n+    var indent = 0;\n+    var splitter = \"function \" + functionName + \"(\";\n+\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = start;\n+        while (pos < content.length && content[pos] !== ')') {\n+            pos += 1;\n+        }\n+        if (pos >= content.length) {\n+            break;\n+        }\n+        pos = getNextStep(content, pos + 1, '{');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            // Eat single-line comments\n+            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '\\n');\n+\n+            // Eat quoted strings\n+            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n+                var stop = content[pos];\n+                var is_escaped = false;\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+\n+            // Otherwise, check for indent\n+            } else if (content[pos] === '{') {\n+                indent += 1;\n+            } else if (content[pos] === '}') {\n+                indent -= 1;\n+                if (indent === 0) {\n+                    return content.slice(start, pos + 1);\n+                }\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var splitter = \"var \" + arrayName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        pos = getNextStep(content, pos, '[');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ']' &&\n+                       pos + 1 < content.length &&\n+                       content[pos + 1] === ';') {\n+                return content.slice(start, pos + 2);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var splitter = \"var \" + varName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ';') {\n+                return content.slice(start, pos + 1);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+function loadContent(content) {\n+    var Module = module.constructor;\n+    var m = new Module();\n+    m._compile(content, \"tmp.js\");\n+    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n+        content.startsWith(\"// ignore-order\\n\");\n+    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n+        content.startsWith(\"// exact-check\\n\");\n+    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n+        content.startsWith(\"// should-fail\\n\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n+    }\n+    return content;\n+}\n+\n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            var value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return i;\n+        }\n+    }\n+    return null;\n+}\n+\n+function findFile(dir, name, extension) {\n+    var entries = fs.readdirSync(dir);\n+    for (var i = 0; i < entries.length; ++i) {\n+        var entry = entries[i];\n+        var file_type = fs.statSync(dir + entry);\n+        if (file_type.isDirectory()) {\n+            continue;\n+        }\n+        if (entry.startsWith(name) && entry.endsWith(extension)) {\n+            return entry;\n+        }\n+    }\n+    return null;\n+}\n+\n+function readFileMatching(dir, name, extension) {\n+    if (dir.endsWith(\"/\") === false) {\n+        dir += \"/\";\n+    }\n+    var f = findFile(dir, name, extension);\n+    if (f === null) {\n+        return \"\";\n+    }\n+    return readFile(dir + f);\n+}\n+\n+function main(argv) {\n+    if (argv.length !== 3) {\n+        console.error(\"Expected toolchain to check as argument (for example \\\n+                       'x86_64-apple-darwin')\");\n+        return 1;\n+    }\n+    var toolchain = argv[2];\n+\n+    var mainJs = readFileMatching(\"build/\" + toolchain + \"/doc/\", \"main\", \".js\");\n+    var ALIASES = readFileMatching(\"build/\" + toolchain + \"/doc/\", \"aliases\", \".js\");\n+    var searchIndex = readFileMatching(\"build/\" + toolchain + \"/doc/\",\n+                                       \"search-index\", \".js\").split(\"\\n\");\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\",\n+                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n+                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n+                           \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n+                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n+    finalJS += 'var rootPath = \"../\";\\n';\n+    finalJS += ALIASES;\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    var index = loaded.buildIndex(searchIndex.searchIndex);\n+\n+    var errors = 0;\n+\n+    fs.readdirSync(TEST_FOLDER).forEach(function(file) {\n+        var loadedFile = loadContent(readFile(TEST_FOLDER + file) +\n+                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+        const expected = loadedFile.EXPECTED;\n+        const query = loadedFile.QUERY;\n+        const filter_crate = loadedFile.FILTER_CRATE;\n+        const ignore_order = loadedFile.ignore_order;\n+        const exact_check = loadedFile.exact_check;\n+        const should_fail = loadedFile.should_fail;\n+        var results = loaded.execSearch(loaded.getQuery(query), index);\n+        process.stdout.write('Checking \"' + file + '\" ... ');\n+        var error_text = [];\n+        for (var key in expected) {\n+            if (!expected.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            if (!results.hasOwnProperty(key)) {\n+                error_text.push('==> Unknown key \"' + key + '\"');\n+                break;\n+            }\n+            var entry = expected[key];\n+            var prev_pos = -1;\n+            for (var i = 0; i < entry.length; ++i) {\n+                var entry_pos = lookForEntry(entry[i], results[key]);\n+                if (entry_pos === null) {\n+                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                    JSON.stringify(entry[i]) + \"'\");\n+                } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n+                    error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n+                                    \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n+                                    JSON.stringify(results[key][i]) + \"'\");\n+                } else if (ignore_order === false && entry_pos < prev_pos) {\n+                    error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n+                                    \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+                } else {\n+                    prev_pos = entry_pos;\n+                }\n+            }\n+        }\n+        if (error_text.length === 0 && should_fail === true) {\n+            errors += 1;\n+            console.error(\"FAILED\");\n+            console.error(\"==> Test was supposed to fail but all items were found...\");\n+        } else if (error_text.length !== 0 && should_fail === false) {\n+            errors += 1;\n+            console.error(\"FAILED\");\n+            console.error(error_text.join(\"\\n\"));\n+        } else {\n+            console.log(\"OK\");\n+        }\n+    });\n+    return errors;\n+}\n+\n+process.exit(main(process.argv));"}, {"sha": "833ce5d1370471f8544f8d23353477abc5f80c37", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/d06a020e2b100d8a22252d8877783d8869e5a9ad/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=d06a020e2b100d8a22252d8877783d8869e5a9ad", "patch": "@@ -1,4 +1,5 @@\n const fs = require('fs');\n+const { spawnSync } = require('child_process');\n \n const TEST_FOLDER = 'src/test/rustdoc-js/';\n \n@@ -219,16 +220,10 @@ function lookForEntry(entry, data) {\n     return null;\n }\n \n-function main(argv) {\n-    if (argv.length !== 3) {\n-        console.error(\"Expected toolchain to check as argument (for example 'x86_64-apple-darwin'\");\n-        return 1;\n-    }\n-    var toolchain = argv[2];\n-\n-    var mainJs = readFile(\"build/\" + toolchain + \"/doc/main.js\");\n-    var ALIASES = readFile(\"build/\" + toolchain + \"/doc/aliases.js\");\n-    var searchIndex = readFile(\"build/\" + toolchain + \"/doc/search-index.js\").split(\"\\n\");\n+function load_files(out_folder, crate) {\n+    var mainJs = readFile(out_folder + \"/main.js\");\n+    var ALIASES = readFile(out_folder + \"/aliases.js\");\n+    var searchIndex = readFile(out_folder + \"/search-index.js\").split(\"\\n\");\n     if (searchIndex[searchIndex.length - 1].length === 0) {\n         searchIndex.pop();\n     }\n@@ -247,20 +242,44 @@ function main(argv) {\n     var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n                            \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n \n-    finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n+    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n     finalJS += 'var rootPath = \"../\";\\n';\n     finalJS += ALIASES;\n     finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n     finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n     finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n \n     var loaded = loadContent(finalJS);\n-    var index = loaded.buildIndex(searchIndex.searchIndex);\n+    return [loaded, loaded.buildIndex(searchIndex.searchIndex)];\n+}\n+\n+function main(argv) {\n+    if (argv.length < 4) {\n+        console.error(\"USAGE: node tester.js OUT_FOLDER [TESTS]\");\n+        return 1;\n+    }\n+    if (argv[2].substr(-1) !== \"/\") {\n+        argv[2] += \"/\";\n+    }\n+    const out_folder = argv[2];\n \n     var errors = 0;\n \n-    fs.readdirSync(TEST_FOLDER).forEach(function(file) {\n-        var loadedFile = loadContent(readFile(TEST_FOLDER + file) +\n+    for (var j = 3; j < argv.length; ++j) {\n+        const test_name = argv[j];\n+\n+        process.stdout.write('Checking \"' + test_name + '\" ... ');\n+        if (!fs.existsSync(TEST_FOLDER + test_name + \".js\")) {\n+            errors += 1;\n+            console.error(\"FAILED\");\n+            console.error(\"==> Missing '\" + test_name + \".js' file...\");\n+            continue;\n+        }\n+\n+        const test_out_folder = out_folder + test_name;\n+\n+        var [loaded, index] = load_files(test_out_folder, test_name);\n+        var loadedFile = loadContent(readFile(TEST_FOLDER + test_name + \".js\") +\n                                'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n         const expected = loadedFile.EXPECTED;\n         const query = loadedFile.QUERY;\n@@ -269,7 +288,6 @@ function main(argv) {\n         const exact_check = loadedFile.exact_check;\n         const should_fail = loadedFile.should_fail;\n         var results = loaded.execSearch(loaded.getQuery(query), index);\n-        process.stdout.write('Checking \"' + file + '\" ... ');\n         var error_text = [];\n         for (var key in expected) {\n             if (!expected.hasOwnProperty(key)) {\n@@ -309,7 +327,7 @@ function main(argv) {\n         } else {\n             console.log(\"OK\");\n         }\n-    });\n+    }\n     return errors;\n }\n "}]}