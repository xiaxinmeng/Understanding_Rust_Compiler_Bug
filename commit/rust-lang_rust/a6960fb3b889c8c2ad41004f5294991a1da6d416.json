{"sha": "a6960fb3b889c8c2ad41004f5294991a1da6d416", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OTYwZmIzYjg4OWM4YzJhZDQxMDA0ZjUyOTQ5OTFhMWRhNmQ0MTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-17T10:31:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-17T10:31:40Z"}, "message": "simplify", "tree": {"sha": "cb96e0033b959a3a895dfd97751f3a5f26df733e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb96e0033b959a3a895dfd97751f3a5f26df733e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6960fb3b889c8c2ad41004f5294991a1da6d416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6960fb3b889c8c2ad41004f5294991a1da6d416", "html_url": "https://github.com/rust-lang/rust/commit/a6960fb3b889c8c2ad41004f5294991a1da6d416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6960fb3b889c8c2ad41004f5294991a1da6d416/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a658c4a973d934d622957a6fb03916271496385", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a658c4a973d934d622957a6fb03916271496385", "html_url": "https://github.com/rust-lang/rust/commit/0a658c4a973d934d622957a6fb03916271496385"}], "stats": {"total": 73, "additions": 32, "deletions": 41}, "files": [{"sha": "90ab5e7a9526dc7b55eac0050033e0f1c0ad975b", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a6960fb3b889c8c2ad41004f5294991a1da6d416/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6960fb3b889c8c2ad41004f5294991a1da6d416/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=a6960fb3b889c8c2ad41004f5294991a1da6d416", "patch": "@@ -70,12 +70,8 @@ impl ProjectWorkspace {\n                     format!(\"Failed to deserialize json file {}\", project_json.display())\n                 })?;\n                 let project_location = project_json.parent().unwrap().to_path_buf();\n-                let project = ProjectJson::new(&project_location, data);\n-                let sysroot = match &project.sysroot_src {\n-                    Some(path) => Some(Sysroot::load(path)?),\n-                    None => None,\n-                };\n-                ProjectWorkspace::Json { project, sysroot }\n+                let project_json = ProjectJson::new(&project_location, data);\n+                ProjectWorkspace::load_inline(project_json)?\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo_version = utf8_stdout({\n@@ -150,43 +146,38 @@ impl ProjectWorkspace {\n                     })\n                 }))\n                 .collect::<Vec<_>>(),\n-            ProjectWorkspace::Cargo { cargo, sysroot, rustc } => {\n-                let roots = cargo\n-                    .packages()\n-                    .map(|pkg| {\n-                        let is_member = cargo[pkg].is_member;\n-                        let pkg_root = cargo[pkg].root().to_path_buf();\n-\n-                        let mut include = vec![pkg_root.clone()];\n-                        include.extend(cargo[pkg].out_dir.clone());\n-\n-                        let mut exclude = vec![pkg_root.join(\".git\")];\n-                        if is_member {\n-                            exclude.push(pkg_root.join(\"target\"));\n-                        } else {\n-                            exclude.push(pkg_root.join(\"tests\"));\n-                            exclude.push(pkg_root.join(\"examples\"));\n-                            exclude.push(pkg_root.join(\"benches\"));\n-                        }\n-                        PackageRoot { is_member, include, exclude }\n-                    })\n-                    .chain(sysroot.crates().map(|krate| PackageRoot {\n+            ProjectWorkspace::Cargo { cargo, sysroot, rustc } => cargo\n+                .packages()\n+                .map(|pkg| {\n+                    let is_member = cargo[pkg].is_member;\n+                    let pkg_root = cargo[pkg].root().to_path_buf();\n+\n+                    let mut include = vec![pkg_root.clone()];\n+                    include.extend(cargo[pkg].out_dir.clone());\n+\n+                    let mut exclude = vec![pkg_root.join(\".git\")];\n+                    if is_member {\n+                        exclude.push(pkg_root.join(\"target\"));\n+                    } else {\n+                        exclude.push(pkg_root.join(\"tests\"));\n+                        exclude.push(pkg_root.join(\"examples\"));\n+                        exclude.push(pkg_root.join(\"benches\"));\n+                    }\n+                    PackageRoot { is_member, include, exclude }\n+                })\n+                .chain(sysroot.crates().map(|krate| PackageRoot {\n+                    is_member: false,\n+                    include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                    exclude: Vec::new(),\n+                }))\n+                .chain(rustc.into_iter().flat_map(|rustc| {\n+                    rustc.packages().map(move |krate| PackageRoot {\n                         is_member: false,\n-                        include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                        include: vec![rustc[krate].root().to_path_buf()],\n                         exclude: Vec::new(),\n-                    }));\n-                if let Some(rustc_packages) = rustc {\n-                    roots\n-                        .chain(rustc_packages.packages().map(|krate| PackageRoot {\n-                            is_member: false,\n-                            include: vec![rustc_packages[krate].root().to_path_buf()],\n-                            exclude: Vec::new(),\n-                        }))\n-                        .collect()\n-                } else {\n-                    roots.collect()\n-                }\n-            }\n+                    })\n+                }))\n+                .collect(),\n         }\n     }\n "}]}