{"sha": "24cdb14d5a99e3a12250f449b16d05cdd4a7d53c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0Y2RiMTRkNWE5OWUzYTEyMjUwZjQ0OWIxNmQwNWNkZDRhN2Q1M2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-14T13:34:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-18T13:06:39Z"}, "message": "refactor for speed", "tree": {"sha": "a94ac827fd60b69d197881ed461a3181bea39070", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a94ac827fd60b69d197881ed461a3181bea39070"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c", "html_url": "https://github.com/rust-lang/rust/commit/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1ecb6fce5b6e44f5a7e8c8ca2e15391dd64489", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1ecb6fce5b6e44f5a7e8c8ca2e15391dd64489", "html_url": "https://github.com/rust-lang/rust/commit/aa1ecb6fce5b6e44f5a7e8c8ca2e15391dd64489"}], "stats": {"total": 188, "additions": 125, "deletions": 63}, "files": [{"sha": "dd675981fae5207a61deb85b9f64ecc0546baaa8", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=24cdb14d5a99e3a12250f449b16d05cdd4a7d53c", "patch": "@@ -23,7 +23,6 @@ regex_macros = { version = \"0.1.33\", optional = true }\n semver = \"0.2.1\"\n toml = \"0.1\"\n unicode-normalization = \"0.1\"\n-strsim = \"0.4.0\"\n \n [dev-dependencies]\n compiletest_rs = \"0.1.0\""}, {"sha": "a42db8d1fcb6a4fd3e0f2b7617bbbc870c7b3cc2", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=24cdb14d5a99e3a12250f449b16d05cdd4a7d53c", "patch": "@@ -31,9 +31,6 @@ extern crate unicode_normalization;\n // for semver check in attrs.rs\n extern crate semver;\n \n-// for levensthein distance\n-extern crate strsim;\n-\n // for regex checking\n extern crate regex_syntax;\n \n@@ -205,7 +202,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box print::PrintLint);\n     reg.register_late_lint_pass(box vec::UselessVec);\n     reg.register_early_lint_pass(box non_expressive_names::NonExpressiveNames {\n-        similarity_threshold: 1,\n         max_single_char_names: 5,\n     });\n     reg.register_late_lint_pass(box drop_ref::DropRefPass);"}, {"sha": "0c7c97ce474af5c199d4b061821657dbe14bd4ff", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 120, "deletions": 58, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=24cdb14d5a99e3a12250f449b16d05cdd4a7d53c", "patch": "@@ -4,7 +4,6 @@ use syntax::parse::token::InternedString;\n use syntax::ast::*;\n use syntax::visit::{self, FnKind};\n use utils::{span_lint_and_then, in_macro, span_lint};\n-use strsim::levenshtein;\n \n /// **What it does:** This lint warns about names that are very similar and thus confusing\n ///\n@@ -33,7 +32,6 @@ declare_lint! {\n }\n \n pub struct NonExpressiveNames {\n-    pub similarity_threshold: usize,\n     pub max_single_char_names: usize,\n }\n \n@@ -44,7 +42,7 @@ impl LintPass for NonExpressiveNames {\n }\n \n struct SimilarNamesLocalVisitor<'a, 'b: 'a> {\n-    names: Vec<(InternedString, Span)>,\n+    names: Vec<(InternedString, Span, usize)>,\n     cx: &'a EarlyContext<'b>,\n     lint: &'a NonExpressiveNames,\n     single_char_names: Vec<char>,\n@@ -65,7 +63,43 @@ impl<'v, 'a, 'b, 'c> visit::Visitor<'v> for SimilarNamesNameVisitor<'a, 'b, 'c>\n     }\n }\n \n+fn whitelisted(interned_name: &str) -> bool {\n+    for &allow in WHITELIST {\n+        if interned_name == allow {\n+            return true;\n+        }\n+        if interned_name.len() <= allow.len() {\n+            continue;\n+        }\n+        // allow_*\n+        let allow_start = allow.chars().chain(Some('_'));\n+        if interned_name.chars().zip(allow_start).all(|(l, r)| l == r) {\n+            return true;\n+        }\n+        // *_allow\n+        let allow_end = Some('_').into_iter().chain(allow.chars());\n+        if interned_name.chars().rev().zip(allow_end.rev()).all(|(l, r)| l == r) {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n+    fn check_short_name(&mut self, c: char, span: Span) {\n+        // make sure we ignore shadowing\n+        if self.0.single_char_names.contains(&c) {\n+            return;\n+        }\n+        self.0.single_char_names.push(c);\n+        if self.0.single_char_names.len() >= self.0.lint.max_single_char_names {\n+            span_lint(self.0.cx,\n+                      MANY_SINGLE_CHAR_NAMES,\n+                      span,\n+                      &format!(\"{}th binding whose name is just one char\",\n+                               self.0.single_char_names.len()));\n+        }\n+    }\n     fn check_name(&mut self, span: Span, name: Name) {\n         if in_macro(self.0.cx, span) {\n             return;\n@@ -80,67 +114,68 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n                 return;\n             }\n             let c = interned_name.chars().next().expect(\"already checked\");\n-            // make sure we ignore shadowing\n-            if self.0.single_char_names.contains(&c) {\n-                return;\n-            }\n-            self.0.single_char_names.push(c);\n-            if self.0.single_char_names.len() >= self.0.lint.max_single_char_names {\n-                span_lint(self.0.cx,\n-                          MANY_SINGLE_CHAR_NAMES,\n-                          span,\n-                          &format!(\"{}th binding whose name is just one char\",\n-                                   self.0.single_char_names.len()));\n-            }\n+            self.check_short_name(c, span);\n             return;\n         }\n-        for &allow in WHITELIST {\n-            if interned_name == allow {\n-                return;\n-            }\n-            if interned_name.len() <= allow.len() {\n-                continue;\n-            }\n-            // allow_*\n-            let allow_start = allow.chars().chain(Some('_'));\n-            if interned_name.chars().zip(allow_start).all(|(l, r)| l == r) {\n-                return;\n-            }\n-            // *_allow\n-            let allow_end = Some('_').into_iter().chain(allow.chars());\n-            if interned_name.chars().rev().zip(allow_end.rev()).all(|(l, r)| l == r) {\n-                return;\n-            }\n+        if whitelisted(&interned_name) {\n+            return;\n         }\n-        for &(ref existing_name, sp) in &self.0.names {\n-            let dist = levenshtein(&interned_name, &existing_name);\n-            // equality is caught by shadow lints\n-            if dist == 0 {\n-                continue;\n-            }\n-            // if they differ enough it's all good\n-            if dist > self.0.lint.similarity_threshold {\n-                continue;\n-            }\n-            // are we doing stuff like `for item in items`?\n-            if interned_name.starts_with(&**existing_name) ||\n-               existing_name.starts_with(&*interned_name) ||\n-               interned_name.ends_with(&**existing_name) ||\n-               existing_name.ends_with(&*interned_name) {\n-                continue;\n-            }\n+        for &(ref existing_name, sp, existing_len) in &self.0.names {\n             let mut split_at = None;\n-            if dist == 1 {\n-                // are we doing stuff like a_bar, b_bar, c_bar?\n-                if interned_name.chars().next() != existing_name.chars().next() {\n-                    if interned_name.chars().nth(1) == Some('_') {\n+            if existing_len > count {\n+                if existing_len - count != 1 {\n+                    continue;\n+                }\n+                if levenstein_not_1(&interned_name, &existing_name) {\n+                    continue;\n+                }\n+            } else if existing_len < count {\n+                if count - existing_len != 1 {\n+                    continue;\n+                }\n+                if levenstein_not_1(&existing_name, &interned_name) {\n+                    continue;\n+                }\n+            } else {\n+                let mut interned_chars = interned_name.chars();\n+                let mut existing_chars = existing_name.chars();\n+\n+                if interned_chars.next() != existing_chars.next() {\n+                    let i = interned_chars.next().expect(\"we know we have more than 1 char\");\n+                    let e = existing_chars.next().expect(\"we know we have more than 1 char\");\n+                    if i == e {\n+                        if i == '_' {\n+                            // allowed similarity x_foo, y_foo\n+                            // or too many chars differ (x_foo, y_boo)\n+                            continue;\n+                        } else if interned_chars.ne(existing_chars) {\n+                            // too many chars differ\n+                            continue\n+                        }\n+                    } else {\n+                        // too many chars differ\n                         continue;\n                     }\n                     split_at = interned_name.chars().next().map(|c| c.len_utf8());\n-                }\n-                // are we doing stuff like foo_x, foo_y, foo_z?\n-                if interned_name.chars().rev().next() != existing_name.chars().rev().next() {\n-                    if interned_name.chars().rev().nth(1) == Some('_') {\n+                } else if interned_chars.next_back() == existing_chars.next_back() {\n+                    if interned_chars.zip(existing_chars).filter(|&(i, e)| i != e).count() != 1 {\n+                        // too many chars differ, or none differ (aka shadowing)\n+                        continue;\n+                    }\n+                } else {\n+                    let i = interned_chars.next_back().expect(\"we know we have more than 2 chars\");\n+                    let e = existing_chars.next_back().expect(\"we know we have more than 2 chars\");\n+                    if i == e {\n+                        if i == '_' {\n+                            // allowed similarity foo_x, foo_x\n+                            // or too many chars differ (foo_x, boo_x)\n+                            continue;\n+                        } else if interned_chars.ne(existing_chars) {\n+                            // too many chars differ\n+                            continue\n+                        }\n+                    } else {\n+                        // too many chars differ\n                         continue;\n                     }\n                     split_at = interned_name.char_indices().rev().next().map(|(i, _)| i);\n@@ -161,7 +196,7 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n                                });\n             return;\n         }\n-        self.0.names.push((interned_name, span));\n+        self.0.names.push((interned_name, span, count));\n     }\n }\n \n@@ -215,3 +250,30 @@ impl EarlyLintPass for NonExpressiveNames {\n         visit::walk_block(&mut visitor, blk);\n     }\n }\n+\n+/// precondition: a_name.chars().count() < b_name.chars().count()\n+fn levenstein_not_1(a_name: &str, b_name: &str) -> bool {\n+    debug_assert!(a_name.chars().count() < b_name.chars().count());\n+    let mut a_chars = a_name.chars();\n+    let mut b_chars = b_name.chars();\n+    while let (Some(a), Some(b)) = (a_chars.next(), b_chars.next()) {\n+        if a == b {\n+            continue;\n+        }\n+        if let Some(b2) = b_chars.next() {\n+            // check if there's just one character inserted\n+            if a == b2 && a_chars.eq(b_chars) {\n+                return false;\n+            } else {\n+                // two charaters don't match\n+                return true;\n+            }\n+        } else {\n+            // tuple\n+            // ntuple\n+            return true;\n+        }\n+    }\n+    // for item in items\n+    true\n+}"}, {"sha": "c374c3c4331ac090d1d468d7ae3de9cde721b84a", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24cdb14d5a99e3a12250f449b16d05cdd4a7d53c/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=24cdb14d5a99e3a12250f449b16d05cdd4a7d53c", "patch": "@@ -15,6 +15,11 @@ fn main() {\n     let b_bar: i32;\n     let c_bar: i32;\n \n+    let items = [5];\n+    for item in &items {\n+        loop {}\n+    }\n+\n     let foo_x: i32;\n     let foo_y: i32;\n "}]}