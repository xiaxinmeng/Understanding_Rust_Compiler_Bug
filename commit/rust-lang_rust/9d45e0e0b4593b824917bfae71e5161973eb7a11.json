{"sha": "9d45e0e0b4593b824917bfae71e5161973eb7a11", "node_id": "C_kwDOAAsO6NoAKDlkNDVlMGUwYjQ1OTNiODI0OTE3YmZhZTcxZTUxNjE5NzNlYjdhMTE", "commit": {"author": {"name": "Vin Singh", "email": "theshampoofactory@gmail.com", "date": "2021-12-08T12:01:13Z"}, "committer": {"name": "Vin Singh", "email": "theshampoofactory@gmail.com", "date": "2022-03-03T18:30:27Z"}, "message": "Revert #26494 regression", "tree": {"sha": "e4b912aecdd32ebfcd529c4b02f6d27c87bd8c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b912aecdd32ebfcd529c4b02f6d27c87bd8c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d45e0e0b4593b824917bfae71e5161973eb7a11", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEzRBofpOgX35onxttB7jSqK9z80QFAmIhCUMACgkQB7jSqK9z\n80RaSQ//RQRY59Ed9MwYg1hEUMvby/Cy56zdV5HFhi8hPorPZD+Fz3OMksLxJHM3\neC4rVfoYXjjInA2Y/MyQDJ4lk3Z1pZ4V/XWkmCSLmvExWMKMW9YNV5A0dtLXBKkt\npJjCDAcjLMy4sf9MSN8ZlfEHqMP9ukralWFEthjXg4O5yl7JeVavNP4AgmH49teg\ne2coYFK1FtZLK3xaenDODdToGg8MgUWYaZ/Mlz1Np1f4Lp51SjV/hMMraJQgA6nh\nbyLTTiRA1urSo1V6mlT9g/OpQ8EIOOSF4zNJM7mGpFNamhnJe2JBwyCKzN9iilyR\n0Zn6x27UbsWBmIEVIF6clVkEUlzsr6wmaZuNu/Nu8H2Qb7Br8ot0s9piS462smU+\nP89QYEdtjw6c/HT1DSKPSblyDS6ipr49SSsU6y+6avbNhtN8rBPcXv0rIP669zS+\nILiJCMa3fnlG/aI2M/NoknNguWx8VUfXvbZEr3kS1smXUqUi3CNzTAd8DhjI6T6w\nBxGKnu1MOJK+1eSkY0MToKt61oO4buoYHmLsRRSnnGNDqfcGbHyXYXZdRhE/H73n\nj+tug5NpFgFIfRjRyd6ln5W/jYLmzYk0lrVEF9YyQy701BO+jeQqkXKWEehKsPwu\n5uFNKKbYFQcqFtZJmQxcujueVWJ/U0pFq/AymnktzUcNtesB/rI=\n=PyDE\n-----END PGP SIGNATURE-----", "payload": "tree e4b912aecdd32ebfcd529c4b02f6d27c87bd8c35\nparent f0c4da49983aa699f715caf681e3154b445fb60b\nauthor Vin Singh <theshampoofactory@gmail.com> 1638964873 +0000\ncommitter Vin Singh <theshampoofactory@gmail.com> 1646332227 +0000\n\nRevert #26494 regression\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d45e0e0b4593b824917bfae71e5161973eb7a11", "html_url": "https://github.com/rust-lang/rust/commit/9d45e0e0b4593b824917bfae71e5161973eb7a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d45e0e0b4593b824917bfae71e5161973eb7a11/comments", "author": {"login": "shampoofactory", "id": 56542103, "node_id": "MDQ6VXNlcjU2NTQyMTAz", "avatar_url": "https://avatars.githubusercontent.com/u/56542103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shampoofactory", "html_url": "https://github.com/shampoofactory", "followers_url": "https://api.github.com/users/shampoofactory/followers", "following_url": "https://api.github.com/users/shampoofactory/following{/other_user}", "gists_url": "https://api.github.com/users/shampoofactory/gists{/gist_id}", "starred_url": "https://api.github.com/users/shampoofactory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shampoofactory/subscriptions", "organizations_url": "https://api.github.com/users/shampoofactory/orgs", "repos_url": "https://api.github.com/users/shampoofactory/repos", "events_url": "https://api.github.com/users/shampoofactory/events{/privacy}", "received_events_url": "https://api.github.com/users/shampoofactory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shampoofactory", "id": 56542103, "node_id": "MDQ6VXNlcjU2NTQyMTAz", "avatar_url": "https://avatars.githubusercontent.com/u/56542103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shampoofactory", "html_url": "https://github.com/shampoofactory", "followers_url": "https://api.github.com/users/shampoofactory/followers", "following_url": "https://api.github.com/users/shampoofactory/following{/other_user}", "gists_url": "https://api.github.com/users/shampoofactory/gists{/gist_id}", "starred_url": "https://api.github.com/users/shampoofactory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shampoofactory/subscriptions", "organizations_url": "https://api.github.com/users/shampoofactory/orgs", "repos_url": "https://api.github.com/users/shampoofactory/repos", "events_url": "https://api.github.com/users/shampoofactory/events{/privacy}", "received_events_url": "https://api.github.com/users/shampoofactory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c4da49983aa699f715caf681e3154b445fb60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c4da49983aa699f715caf681e3154b445fb60b", "html_url": "https://github.com/rust-lang/rust/commit/f0c4da49983aa699f715caf681e3154b445fb60b"}], "stats": {"total": 50, "additions": 5, "deletions": 45}, "files": [{"sha": "7495449da4c4f78abee054894d03aadd3f7eee9e", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d45e0e0b4593b824917bfae71e5161973eb7a11/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d45e0e0b4593b824917bfae71e5161973eb7a11/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=9d45e0e0b4593b824917bfae71e5161973eb7a11", "patch": "@@ -3226,12 +3226,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     _ => return,\n                 }\n \n-                // Pass and return structures up to 2 pointers in size by value, matching `ScalarPair`.\n-                // LLVM will usually pass these in 2 registers, which is more efficient than by-ref.\n-                let max_by_val_size = Pointer.size(self) * 2;\n                 let size = arg.layout.size;\n-\n-                if arg.layout.is_unsized() || size > max_by_val_size {\n+                if arg.layout.is_unsized() || size > Pointer.size(self) {\n                     arg.make_indirect();\n                 } else {\n                     // We want to pass small aggregates as immediates, but using"}, {"sha": "a69291d47821ae06742cdcaf714348db6ce10a73", "filename": "src/test/codegen/arg-return-value-in-reg.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -1,32 +0,0 @@\n-//! Check that types of up to 128 bits are passed and returned by-value instead of via pointer.\n-\n-// compile-flags: -C no-prepopulate-passes -O\n-// only-x86_64\n-\n-#![crate_type = \"lib\"]\n-\n-pub struct S {\n-    a: u64,\n-    b: u32,\n-    c: u32,\n-}\n-\n-// CHECK: define i128 @modify(i128{{( %0)?}})\n-#[no_mangle]\n-pub fn modify(s: S) -> S {\n-    S { a: s.a + s.a, b: s.b + s.b, c: s.c + s.c }\n-}\n-\n-#[repr(packed)]\n-pub struct TooBig {\n-    a: u64,\n-    b: u32,\n-    c: u32,\n-    d: u8,\n-}\n-\n-// CHECK: define void @m_big(%TooBig* [[ATTRS:.*sret.*]], %TooBig* [[ATTRS2:.*]] %s)\n-#[no_mangle]\n-pub fn m_big(s: TooBig) -> TooBig {\n-    TooBig { a: s.a + s.a, b: s.b + s.b, c: s.c + s.c, d: s.d + s.d }\n-}"}, {"sha": "c6b57ee5429c2c41d9086dfb672d7084cf29b73a", "filename": "src/test/codegen/array-equality.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d45e0e0b4593b824917bfae71e5161973eb7a11/src%2Ftest%2Fcodegen%2Farray-equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d45e0e0b4593b824917bfae71e5161973eb7a11/src%2Ftest%2Fcodegen%2Farray-equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farray-equality.rs?ref=9d45e0e0b4593b824917bfae71e5161973eb7a11", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -O\n // only-x86_64\n+// ignore-test will need to be rewritten if pull accepted\n \n #![crate_type = \"lib\"]\n "}, {"sha": "01f917b291094dcbdff7f00235b9327d4dfee06e", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d45e0e0b4593b824917bfae71e5161973eb7a11/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d45e0e0b4593b824917bfae71e5161973eb7a11/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=9d45e0e0b4593b824917bfae71e5161973eb7a11", "patch": "@@ -63,16 +63,11 @@ pub union UnionU128{a:u128}\n #[no_mangle]\n pub fn test_UnionU128(_: UnionU128) -> UnionU128 { loop {} }\n \n-pub union UnionU128x2{a:(u128, u128)}\n-// CHECK: define void @test_UnionU128x2(i128 %_1.0, i128 %_1.1)\n-#[no_mangle]\n-pub fn test_UnionU128x2(_: UnionU128x2) { loop {} }\n-\n #[repr(C)]\n-pub union CUnionU128x2{a:(u128, u128)}\n-// CHECK: define void @test_CUnionU128x2(%CUnionU128x2* {{.*}} %_1)\n+pub union CUnionU128{a:u128}\n+// CHECK: define void @test_CUnionU128(%CUnionU128* {{.*}} %_1)\n #[no_mangle]\n-pub fn test_CUnionU128x2(_: CUnionU128x2) { loop {} }\n+pub fn test_CUnionU128(_: CUnionU128) { loop {} }\n \n pub union UnionBool { b:bool }\n // CHECK: define noundef zeroext i1 @test_UnionBool(i8 %b)"}]}