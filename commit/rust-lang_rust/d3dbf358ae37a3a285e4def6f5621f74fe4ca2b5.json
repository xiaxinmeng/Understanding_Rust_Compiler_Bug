{"sha": "d3dbf358ae37a3a285e4def6f5621f74fe4ca2b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZGJmMzU4YWUzN2EzYTI4NWU0ZGVmNmY1NjIxZjc0ZmU0Y2EyYjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-02T10:06:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-02T10:06:02Z"}, "message": "Rustup to rustc 1.37.0-nightly (03ee55bb1 2019-06-01)", "tree": {"sha": "5ddcfaa8884a5120e5654a6494308e3d9687dcf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ddcfaa8884a5120e5654a6494308e3d9687dcf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3dbf358ae37a3a285e4def6f5621f74fe4ca2b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3dbf358ae37a3a285e4def6f5621f74fe4ca2b5", "html_url": "https://github.com/rust-lang/rust/commit/d3dbf358ae37a3a285e4def6f5621f74fe4ca2b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3dbf358ae37a3a285e4def6f5621f74fe4ca2b5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37708ada2c5dfac8673d7920b39b946be647faff", "url": "https://api.github.com/repos/rust-lang/rust/commits/37708ada2c5dfac8673d7920b39b946be647faff", "html_url": "https://github.com/rust-lang/rust/commit/37708ada2c5dfac8673d7920b39b946be647faff"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "b4e6273cfcbd2b88a35e18b488b28e61cdbbce5a", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3dbf358ae37a3a285e4def6f5621f74fe4ca2b5/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3dbf358ae37a3a285e4def6f5621f74fe4ca2b5/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d3dbf358ae37a3a285e4def6f5621f74fe4ca2b5", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n \n use rustc::mir::interpret::{\n-    read_target_uint, AllocId, AllocKind, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n+    read_target_uint, AllocId, GlobalAlloc, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n use rustc::ty::Const;\n use rustc_mir::interpret::{\n@@ -171,7 +171,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n     let alloc = result().expect(\"unable to convert ConstValue to Allocation\");\n \n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n-    let alloc_id = fx.tcx.alloc_map.lock().allocate(alloc);\n+    let alloc_id = fx.tcx.alloc_map.lock().create_memory_alloc(alloc);\n     fx.constants.todo.insert(TodoItem::Alloc(alloc_id));\n     let data_id = data_id_for_alloc_id(fx.module, alloc_id);\n     cplace_for_dataid(fx, const_.ty, data_id)\n@@ -296,18 +296,18 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n             };\n \n             let data_id = match tcx.alloc_map.lock().get(reloc).unwrap() {\n-                AllocKind::Function(instance) => {\n+                GlobalAlloc::Function(instance) => {\n                     assert_eq!(addend, 0);\n                     let func_id = crate::abi::import_function(tcx, module, instance);\n                     let local_func_id = module.declare_func_in_data(func_id, &mut data_ctx);\n                     data_ctx.write_function_addr(offset.bytes() as u32, local_func_id);\n                     continue;\n                 }\n-                AllocKind::Memory(_) => {\n+                GlobalAlloc::Memory(_) => {\n                     cx.todo.insert(TodoItem::Alloc(reloc));\n                     data_id_for_alloc_id(module, reloc)\n                 }\n-                AllocKind::Static(def_id) => {\n+                GlobalAlloc::Static(def_id) => {\n                     cx.todo.insert(TodoItem::Static(def_id));\n                     let linkage = crate::linkage::get_static_ref_linkage(tcx, def_id);\n                     data_id_for_static(tcx, module, def_id, linkage)"}]}