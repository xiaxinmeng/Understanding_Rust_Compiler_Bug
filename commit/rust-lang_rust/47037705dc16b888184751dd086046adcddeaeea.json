{"sha": "47037705dc16b888184751dd086046adcddeaeea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MDM3NzA1ZGMxNmI4ODgxODQ3NTFkZDA4NjA0NmFkY2RkZWFlZWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-07T10:20:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-07T10:28:04Z"}, "message": "add test comparing free region to bound region\n\nsuggested by arielb1", "tree": {"sha": "5b979cbf2b5b37a883c2bf1611ca353a542ce588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b979cbf2b5b37a883c2bf1611ca353a542ce588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47037705dc16b888184751dd086046adcddeaeea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47037705dc16b888184751dd086046adcddeaeea", "html_url": "https://github.com/rust-lang/rust/commit/47037705dc16b888184751dd086046adcddeaeea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47037705dc16b888184751dd086046adcddeaeea/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86e7b5c12acc112fcb7b53d431b1564215de4c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/86e7b5c12acc112fcb7b53d431b1564215de4c80", "html_url": "https://github.com/rust-lang/rust/commit/86e7b5c12acc112fcb7b53d431b1564215de4c80"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "0a47ee80256b5a4f886ff50c92e243f078e9ac75", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/47037705dc16b888184751dd086046adcddeaeea/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47037705dc16b888184751dd086046adcddeaeea/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.rs?ref=47037705dc16b888184751dd086046adcddeaeea", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a case where we setup relationships like `'x: 'a` or `'a: 'x`,\n+// where `'x` is bound in closure type but `'a` is free. This forces\n+// us to approximate `'x` one way or the other.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+fn foo<'a, F>(_cell: Cell<&'a u32>, _f: F)\n+where\n+    F: for<'x> FnOnce(Cell<&'a u32>, Cell<&'x u32>),\n+{\n+}\n+\n+#[rustc_regions]\n+fn case1() {\n+    let a = 0;\n+    let cell = Cell::new(&a);\n+    foo(cell, |cell_a, cell_x| {\n+        //~^ WARNING not reporting region error due to -Znll\n+        cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n+        //~^ ERROR free region `'_#2r` does not outlive free region `'_#1r`\n+    })\n+}\n+\n+#[rustc_regions]\n+fn case2() {\n+    let a = 0;\n+    let cell = Cell::new(&a);\n+\n+    // As you can see in the stderr output, this closure propoagates a\n+    // requirement that `'a: 'static'.\n+    //\n+    // FIXME(#45827) However, because of shortcomings in the MIR type\n+    // checker, this does not result in errors later on (yet).\n+    foo(cell, |cell_a, cell_x| {\n+        cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n+    })\n+}\n+\n+fn main() { }"}, {"sha": "e2de72ffe933fd3fcdc1de504cc99ae8c899b95d", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/47037705dc16b888184751dd086046adcddeaeea/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47037705dc16b888184751dd086046adcddeaeea/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=47037705dc16b888184751dd086046adcddeaeea", "patch": "@@ -0,0 +1,75 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:31:5\n+   |\n+31 |     foo(cell, |cell_a, cell_x| {\n+   |     ^^^\n+\n+error: free region `'_#2r` does not outlive free region `'_#1r`\n+  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:9\n+   |\n+33 |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n+   |         ^^^^^^\n+\n+note: External requirements\n+  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:31:15\n+   |\n+31 |       foo(cell, |cell_a, cell_x| {\n+   |  _______________^\n+32 | |         //~^ WARNING not reporting region error due to -Znll\n+33 | |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n+34 | |         //~^ ERROR free region `'_#2r` does not outlive free region `'_#1r`\n+35 | |     })\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:12 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n+               i32,\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n+           ]\n+   = note: number of external vids: 2\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:28:1\n+   |\n+28 | / fn case1() {\n+29 | |     let a = 0;\n+30 | |     let cell = Cell::new(&a);\n+31 | |     foo(cell, |cell_a, cell_x| {\n+...  |\n+35 | |     })\n+36 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:5 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]) with substs []\n+\n+note: External requirements\n+  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:48:15\n+   |\n+48 |       foo(cell, |cell_a, cell_x| {\n+   |  _______________^\n+49 | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n+50 | |     })\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:13 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n+               i32,\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n+           ]\n+   = note: number of external vids: 2\n+   = note: where '_#1r: '_#0r\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:39:1\n+   |\n+39 | / fn case2() {\n+40 | |     let a = 0;\n+41 | |     let cell = Cell::new(&a);\n+42 | |\n+...  |\n+50 | |     })\n+51 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]) with substs []\n+\n+error: aborting due to previous error\n+"}]}