{"sha": "6d7beafc87e7cd8806987c5203e52bc3b8c458fa", "node_id": "C_kwDOAAsO6NoAKDZkN2JlYWZjODdlN2NkODgwNjk4N2M1MjAzZTUyYmMzYjhjNDU4ZmE", "commit": {"author": {"name": "Rageking8", "email": "tomleetyt@gmail.com", "date": "2022-09-15T15:51:43Z"}, "committer": {"name": "Rageking8", "email": "tomleetyt@gmail.com", "date": "2022-09-15T15:51:43Z"}, "message": "slight vertical formatting", "tree": {"sha": "e998dada6d4f6c66e4d28cb17d903ace12548c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e998dada6d4f6c66e4d28cb17d903ace12548c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d7beafc87e7cd8806987c5203e52bc3b8c458fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7beafc87e7cd8806987c5203e52bc3b8c458fa", "html_url": "https://github.com/rust-lang/rust/commit/6d7beafc87e7cd8806987c5203e52bc3b8c458fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d7beafc87e7cd8806987c5203e52bc3b8c458fa/comments", "author": {"login": "Rageking8", "id": 106309953, "node_id": "U_kgDOBlYpQQ", "avatar_url": "https://avatars.githubusercontent.com/u/106309953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rageking8", "html_url": "https://github.com/Rageking8", "followers_url": "https://api.github.com/users/Rageking8/followers", "following_url": "https://api.github.com/users/Rageking8/following{/other_user}", "gists_url": "https://api.github.com/users/Rageking8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rageking8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rageking8/subscriptions", "organizations_url": "https://api.github.com/users/Rageking8/orgs", "repos_url": "https://api.github.com/users/Rageking8/repos", "events_url": "https://api.github.com/users/Rageking8/events{/privacy}", "received_events_url": "https://api.github.com/users/Rageking8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rageking8", "id": 106309953, "node_id": "U_kgDOBlYpQQ", "avatar_url": "https://avatars.githubusercontent.com/u/106309953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rageking8", "html_url": "https://github.com/Rageking8", "followers_url": "https://api.github.com/users/Rageking8/followers", "following_url": "https://api.github.com/users/Rageking8/following{/other_user}", "gists_url": "https://api.github.com/users/Rageking8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rageking8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rageking8/subscriptions", "organizations_url": "https://api.github.com/users/Rageking8/orgs", "repos_url": "https://api.github.com/users/Rageking8/repos", "events_url": "https://api.github.com/users/Rageking8/events{/privacy}", "received_events_url": "https://api.github.com/users/Rageking8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294f0eef736aa13cadf28ce7160a18a94ca7b87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/294f0eef736aa13cadf28ce7160a18a94ca7b87c", "html_url": "https://github.com/rust-lang/rust/commit/294f0eef736aa13cadf28ce7160a18a94ca7b87c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "103dd801257a728f2d738174066db1020504a1a2", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d7beafc87e7cd8806987c5203e52bc3b8c458fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d7beafc87e7cd8806987c5203e52bc3b8c458fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=6d7beafc87e7cd8806987c5203e52bc3b8c458fa", "patch": "@@ -66,18 +66,18 @@ impl<'a> Parser<'a> {\n             },\n             NonterminalKind::PatParam { .. } | NonterminalKind::PatWithOr { .. } => {\n                 match token.kind {\n-                token::Ident(..) |                  // box, ref, mut, and other identifiers (can stricten)\n-                token::OpenDelim(Delimiter::Parenthesis) |    // tuple pattern\n-                token::OpenDelim(Delimiter::Bracket) |  // slice pattern\n-                token::BinOp(token::And) |          // reference\n-                token::BinOp(token::Minus) |        // negative literal\n-                token::AndAnd |                     // double reference\n-                token::Literal(..) |                // literal\n-                token::DotDot |                     // range pattern (future compat)\n-                token::DotDotDot |                  // range pattern (future compat)\n-                token::ModSep |                     // path\n-                token::Lt |                         // path (UFCS constant)\n-                token::BinOp(token::Shl) => true,   // path (double UFCS)\n+                token::Ident(..) |                          // box, ref, mut, and other identifiers (can stricten)\n+                token::OpenDelim(Delimiter::Parenthesis) |  // tuple pattern\n+                token::OpenDelim(Delimiter::Bracket) |      // slice pattern\n+                token::BinOp(token::And) |                  // reference\n+                token::BinOp(token::Minus) |                // negative literal\n+                token::AndAnd |                             // double reference\n+                token::Literal(..) |                        // literal\n+                token::DotDot |                             // range pattern (future compat)\n+                token::DotDotDot |                          // range pattern (future compat)\n+                token::ModSep |                             // path\n+                token::Lt |                                 // path (UFCS constant)\n+                token::BinOp(token::Shl) => true,           // path (double UFCS)\n                 // leading vert `|` or-pattern\n                 token::BinOp(token::Or) =>  matches!(kind, NonterminalKind::PatWithOr {..}),\n                 token::Interpolated(ref nt) => may_be_ident(nt),"}]}