{"sha": "c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NmRiOTJkMWY5YjFhMjRkZTI0Y2VmZDk5NmM0M2M3Yjk4OGI0YzM=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-06T16:05:06Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-06T16:07:27Z"}, "message": "Finish implementing char validation", "tree": {"sha": "3085626b9ff574af24fd02b4b99ddf910d1abdbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3085626b9ff574af24fd02b4b99ddf910d1abdbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "html_url": "https://github.com/rust-lang/rust/commit/c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c56db92d1f9b1a24de24cefd996c43c7b988b4c3/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1b242262a6617b22140bddd0bed23115c260e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b242262a6617b22140bddd0bed23115c260e74", "html_url": "https://github.com/rust-lang/rust/commit/d1b242262a6617b22140bddd0bed23115c260e74"}], "stats": {"total": 101, "additions": 93, "deletions": 8}, "files": [{"sha": "cc53e0abac701b937ea4cee3426a0b31dd151e4a", "filename": "crates/ra_syntax/src/string_lexing/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c56db92d1f9b1a24de24cefd996c43c7b988b4c3/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56db92d1f9b1a24de24cefd996c43c7b988b4c3/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs?ref=c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "patch": "@@ -219,7 +219,7 @@ mod tests {\n \n     #[test]\n     fn test_unicode_escapes() {\n-        let unicode_escapes = &[r\"{DEAD}\", \"{BEEF}\", \"{FF}\", \"\"];\n+        let unicode_escapes = &[r\"{DEAD}\", \"{BEEF}\", \"{FF}\", \"{}\", \"\"];\n         for escape in unicode_escapes {\n             let escape_sequence = format!(r\"'\\u{}'\", escape);\n             let component = closed_char_component(&escape_sequence);"}, {"sha": "a550ce0ab17a9916bad74159c3c34087c5fae63d", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 76, "deletions": 7, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c56db92d1f9b1a24de24cefd996c43c7b988b4c3/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56db92d1f9b1a24de24cefd996c43c7b988b4c3/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "patch": "@@ -1,3 +1,5 @@\n+use std::u32;\n+\n use crate::{\n     algo::visit::{visitor_ctx, VisitorCtx},\n     ast::{self, AstNode},\n@@ -42,15 +44,82 @@ fn validate_char(node: ast::Char, errors: &mut Vec<SyntaxError>) {\n                 }\n             }\n             AsciiCodeEscape => {\n-                // TODO:\n-                // * First digit is octal\n-                // * Second digit is hex\n+                // An AsciiCodeEscape has 4 chars, example: `\\xDD`\n+                if text.len() < 4 {\n+                    errors.push(SyntaxError::new(TooShortAsciiCodeEscape, range));\n+                } else {\n+                    assert!(text.chars().count() == 4, \"AsciiCodeEscape cannot be longer than 4 chars\");\n+\n+                    match u8::from_str_radix(&text[2..], 16) {\n+                        Ok(code) if code < 128 => { /* Escape code is valid */ },\n+                        Ok(_) => errors.push(SyntaxError::new(AsciiCodeEscapeOutOfRange, range)),\n+                        Err(_) => errors.push(SyntaxError::new(MalformedAsciiCodeEscape, range)),\n+                    }\n+\n+                }\n             }\n             UnicodeEscape => {\n-                // TODO:\n-                // * Only hex digits or underscores allowed\n-                // * Max 6 chars\n-                // * Within allowed range (must be at most 10FFFF)\n+                assert!(&text[..2] == \"\\\\u\", \"UnicodeEscape always starts with \\\\u\");\n+\n+                if text.len() == 2 {\n+                    // No starting `{`\n+                    errors.push(SyntaxError::new(MalformedUnicodeEscape, range));\n+                    return;\n+                }\n+\n+                if text.len() == 3 {\n+                    // Only starting `{`\n+                    errors.push(SyntaxError::new(UnclosedUnicodeEscape, range));\n+                    return;\n+                }\n+\n+                let mut code = String::new();\n+                let mut closed = false;\n+                for c in text[3..].chars() {\n+                    assert!(!closed, \"no characters after escape is closed\");\n+\n+                    if c.is_digit(16) {\n+                        code.push(c);\n+                    } else if c == '_' {\n+                        // Reject leading _\n+                        if code.len() == 0 {\n+                            errors.push(SyntaxError::new(MalformedUnicodeEscape, range));\n+                            return;\n+                        }\n+                    } else if c == '}' {\n+                        closed = true;\n+                    } else {\n+                        errors.push(SyntaxError::new(MalformedUnicodeEscape, range));\n+                        return;\n+                    }\n+                }\n+\n+                if !closed {\n+                    errors.push(SyntaxError::new(UnclosedUnicodeEscape, range))\n+                }\n+\n+                if code.len() == 0 {\n+                    errors.push(SyntaxError::new(EmptyUnicodeEcape, range));\n+                    return;\n+                }\n+\n+                if code.len() > 6 {\n+                    errors.push(SyntaxError::new(OverlongUnicodeEscape, range));\n+                }\n+\n+                match u32::from_str_radix(&code, 16) {\n+                    Ok(code_u32) if code_u32 > 0x10FFFF => {\n+                        errors.push(SyntaxError::new(UnicodeEscapeOutOfRange, range));\n+                    }\n+                    Ok(_) => {\n+                        // Valid escape code\n+                    }\n+                    Err(_) => {\n+                        errors.push(SyntaxError::new(MalformedUnicodeEscape, range));\n+                    }\n+                }\n+\n+                // FIXME: we really need tests for this\n             }\n             // Code points are always valid\n             CodePoint => (),"}, {"sha": "9aed9e81eabe4b28870f1340faed47d1de33fbf0", "filename": "crates/ra_syntax/src/yellow/syntax_error.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c56db92d1f9b1a24de24cefd996c43c7b988b4c3/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56db92d1f9b1a24de24cefd996c43c7b988b4c3/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs?ref=c56db92d1f9b1a24de24cefd996c43c7b988b4c3", "patch": "@@ -69,6 +69,14 @@ pub enum SyntaxErrorKind {\n     LongChar,\n     EmptyAsciiEscape,\n     InvalidAsciiEscape,\n+    TooShortAsciiCodeEscape,\n+    AsciiCodeEscapeOutOfRange,\n+    MalformedAsciiCodeEscape,\n+    UnclosedUnicodeEscape,\n+    MalformedUnicodeEscape,\n+    EmptyUnicodeEcape,\n+    OverlongUnicodeEscape,\n+    UnicodeEscapeOutOfRange,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -83,6 +91,14 @@ impl fmt::Display for SyntaxErrorKind {\n             EmptyChar => write!(f, \"Empty char literal\"),\n             UnclosedChar => write!(f, \"Unclosed char literal\"),\n             LongChar => write!(f, \"Char literal should be one character long\"),\n+            TooShortAsciiCodeEscape => write!(f, \"Escape sequence should have two digits\"),\n+            AsciiCodeEscapeOutOfRange => write!(f, \"Escape sequence should be between \\\\x00 and \\\\x7F\"),\n+            MalformedAsciiCodeEscape => write!(f, \"Escape sequence should be a hexadecimal number\"),\n+            UnclosedUnicodeEscape => write!(f, \"Missing `}}`\"),\n+            MalformedUnicodeEscape => write!(f, \"Malformed unicode escape sequence\"),\n+            EmptyUnicodeEcape => write!(f, \"Empty unicode escape sequence\"),\n+            OverlongUnicodeEscape => write!(f, \"Unicode escape sequence should have at most 6 digits\"),\n+            UnicodeEscapeOutOfRange => write!(f, \"Unicode escape code should be at most 0x10FFFF\"),\n             ParseError(msg) => write!(f, \"{}\", msg.0),\n         }\n     }"}]}