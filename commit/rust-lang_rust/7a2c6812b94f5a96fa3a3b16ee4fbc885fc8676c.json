{"sha": "7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMmM2ODEyYjk0ZjVhOTZmYTNhM2IxNmVlNGZiYzg4NWZjODY3NmM=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-09-01T02:29:09Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-09-03T01:57:20Z"}, "message": "Per-thread errno storage", "tree": {"sha": "df8681694acbd2080671ecb629ee0424f5d11d4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8681694acbd2080671ecb629ee0424f5d11d4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "html_url": "https://github.com/rust-lang/rust/commit/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "html_url": "https://github.com/rust-lang/rust/commit/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "e36a0019cdcb25ff978983c9cb9b1eb9446ad43a", "filename": "src/eval.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "patch": "@@ -193,12 +193,6 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         StackPopCleanup::None { cleanup: true },\n     )?;\n \n-    // Set the last_error to 0\n-    let errno_layout = ecx.machine.layouts.u32;\n-    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Machine.into());\n-    ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n-    ecx.machine.last_error = Some(errno_place);\n-\n     Ok((ecx, ret_place))\n }\n "}, {"sha": "f56818726235da0665300d43db2deaf39fb32a45", "filename": "src/helpers.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "patch": "@@ -394,17 +394,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         )\n     }\n \n+    /// Get last error variable as a place, lazily allocating thread-local storage for it if\n+    /// necessary.\n+    fn last_error_place(&mut self) -> InterpResult<'tcx, MPlaceTy<'tcx, Tag>> {\n+        let this = self.eval_context_mut();\n+        if let Some(errno_place) = this.active_thread_ref().last_error {\n+            Ok(errno_place)\n+        } else {\n+            let errno_layout = this.machine.layouts.u32;\n+            let errno_place = this.allocate(errno_layout, MiriMemoryKind::Machine.into());\n+            this.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n+            this.active_thread_mut().last_error = Some(errno_place);\n+            Ok(errno_place)\n+        }\n+    }\n+\n     /// Sets the last error variable.\n     fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let errno_place = this.machine.last_error.unwrap();\n+        let errno_place = this.last_error_place()?;\n         this.write_scalar(scalar, errno_place.into())\n     }\n \n     /// Gets the last error variable.\n-    fn get_last_error(&self) -> InterpResult<'tcx, Scalar<Tag>> {\n-        let this = self.eval_context_ref();\n-        let errno_place = this.machine.last_error.unwrap();\n+    fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_mut();\n+        let errno_place = this.last_error_place()?;\n         this.read_scalar(errno_place.into())?.check_init()\n     }\n "}, {"sha": "6defb2d053aa7a701d4da0fcee57136d7929a0eb", "filename": "src/machine.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "patch": "@@ -236,9 +236,6 @@ pub struct Evaluator<'mir, 'tcx> {\n     pub(crate) argv: Option<Scalar<Tag>>,\n     pub(crate) cmd_line: Option<Scalar<Tag>>,\n \n-    /// Last OS error location in memory. It is a 32-bit integer.\n-    pub(crate) last_error: Option<MPlaceTy<'tcx, Tag>>,\n-\n     /// TLS state.\n     pub(crate) tls: TlsData<'tcx>,\n \n@@ -280,7 +277,6 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             argc: None,\n             argv: None,\n             cmd_line: None,\n-            last_error: None,\n             tls: TlsData::default(),\n             communicate,\n             validate,"}, {"sha": "357c55c926f13e31d1f7bc3c71d9801efa8ca2b4", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "patch": "@@ -21,7 +21,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // errno\n             \"__errno_location\" => {\n                 let &[] = check_arg_count(args)?;\n-                let errno_place = this.machine.last_error.unwrap();\n+                let errno_place = this.last_error_place()?;\n                 this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n             }\n "}, {"sha": "72ec7a5d97022e0cd697be4503d9f0b390492972", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "patch": "@@ -20,7 +20,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // errno\n             \"__error\" => {\n                 let &[] = check_arg_count(args)?;\n-                let errno_place = this.machine.last_error.unwrap();\n+                let errno_place = this.last_error_place()?;\n                 this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n             }\n "}, {"sha": "eeaee7dc44d5df283378a4e8cf954b09665f1df7", "filename": "src/thread.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "patch": "@@ -120,6 +120,9 @@ pub struct Thread<'mir, 'tcx> {\n     /// the call to `miri_start_panic` (the panic payload) when unwinding.\n     /// This is pointer-sized, and matches the `Payload` type in `src/libpanic_unwind/miri.rs`.\n     pub(crate) panic_payload: Option<Scalar<Tag>>,\n+\n+    /// Last OS error location in memory. It is a 32-bit integer.\n+    pub(crate) last_error: Option<MPlaceTy<'tcx, Tag>>,\n }\n \n impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n@@ -159,6 +162,7 @@ impl<'mir, 'tcx> Default for Thread<'mir, 'tcx> {\n             stack: Vec::new(),\n             join_status: ThreadJoinStatus::Joinable,\n             panic_payload: None,\n+            last_error: None,\n         }\n     }\n }\n@@ -583,6 +587,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.machine.threads.active_thread_mut()\n     }\n \n+    #[inline]\n+    fn active_thread_ref(&self) -> &Thread<'mir, 'tcx> {\n+        let this = self.eval_context_ref();\n+        this.machine.threads.active_thread_ref()\n+    }\n+\n     #[inline]\n     fn get_total_thread_count(&self) -> usize {\n         let this = self.eval_context_ref();"}, {"sha": "ab9a690fe1d771ffaa08cbee9c71722c5b2e2039", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "patch": "@@ -212,6 +212,24 @@ fn test_prctl_thread_name() {\n     }\n }\n \n+/// Tests whether each thread has its own `__errno_location`.\n+fn test_thread_local_errno() {\n+    #[cfg(not(target_os = \"macos\"))]\n+    use libc::__errno_location;\n+    #[cfg(target_os = \"macos\")]\n+    use libc::__error as __errno_location;\n+\n+    unsafe {\n+        *__errno_location() = 0xBEEF;\n+        std::thread::spawn(|| {\n+            assert_eq!(*__errno_location(), 0);\n+            *__errno_location() = 0xBAD1DEA;\n+            assert_eq!(*__errno_location(), 0xBAD1DEA);\n+        }).join().unwrap();\n+        assert_eq!(*__errno_location(), 0xBEEF);\n+    }\n+}\n+\n fn main() {\n     #[cfg(target_os = \"linux\")]\n     test_posix_fadvise();\n@@ -229,4 +247,6 @@ fn main() {\n \n     #[cfg(target_os = \"linux\")]\n     test_prctl_thread_name();\n+\n+    test_thread_local_errno();\n }"}, {"sha": "2dbfb7721d3683fb4d82c2ce771e3784be86fdc9", "filename": "tests/run-pass/libc.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/tests%2Frun-pass%2Flibc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c/tests%2Frun-pass%2Flibc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.stderr?ref=7a2c6812b94f5a96fa3a3b16ee4fbc885fc8676c", "patch": "@@ -0,0 +1,2 @@\n+warning: thread support is experimental. For example, Miri does not detect data races yet.\n+"}]}