{"sha": "1deef26324a91fdf09e586a8982b0d4ce45ec864", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWVmMjYzMjRhOTFmZGYwOWU1ODZhODk4MmIwZDRjZTQ1ZWM4NjQ=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-30T14:42:54Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-30T14:43:02Z"}, "message": "Improve wording of the `drop_bounds` lint", "tree": {"sha": "ca8eb2edc01042b4396a4f4d0dc04f2dd52b344d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca8eb2edc01042b4396a4f4d0dc04f2dd52b344d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1deef26324a91fdf09e586a8982b0d4ce45ec864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1deef26324a91fdf09e586a8982b0d4ce45ec864", "html_url": "https://github.com/rust-lang/rust/commit/1deef26324a91fdf09e586a8982b0d4ce45ec864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1deef26324a91fdf09e586a8982b0d4ce45ec864/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d34076975cd7661dca4e40e0c66a646a78ad091", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d34076975cd7661dca4e40e0c66a646a78ad091", "html_url": "https://github.com/rust-lang/rust/commit/5d34076975cd7661dca4e40e0c66a646a78ad091"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "1c9f23932d17e93a4f954016886cb843c73877f2", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1deef26324a91fdf09e586a8982b0d4ce45ec864/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deef26324a91fdf09e586a8982b0d4ce45ec864/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=1deef26324a91fdf09e586a8982b0d4ce45ec864", "patch": "@@ -18,23 +18,27 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// `Drop` bounds do not really accomplish anything. A type may have\n-    /// compiler-generated drop glue without implementing the `Drop` trait\n-    /// itself. The `Drop` trait also only has one method, `Drop::drop`, and\n-    /// that function is by fiat not callable in user code. So there is really\n-    /// no use case for using `Drop` in trait bounds.\n+    /// A generic trait bound of the form `T: Drop` is most likely misleading\n+    /// and not what the programmer intended (they probably should have used\n+    /// `std::mem::needs_drop` instead).\n     ///\n-    /// The most likely use case of a drop bound is to distinguish between\n-    /// types that have destructors and types that don't. Combined with\n-    /// specialization, a naive coder would write an implementation that\n-    /// assumed a type could be trivially dropped, then write a specialization\n-    /// for `T: Drop` that actually calls the destructor. Except that doing so\n-    /// is not correct; String, for example, doesn't actually implement Drop,\n-    /// but because String contains a Vec, assuming it can be trivially dropped\n-    /// will leak memory.\n+    /// `Drop` bounds do not actually indicate whether a type can be trivially\n+    /// dropped or not, because a composite type containing `Drop` types does\n+    /// not necessarily implement `Drop` itself. Na\u00efvely, one might be tempted\n+    /// to write an implementation that assumes that a type can be trivially\n+    /// dropped while also supplying a specialization for `T: Drop` that\n+    /// actually calls the destructor. However, this breaks down e.g. when `T`\n+    /// is `String`, which does not implement `Drop` itself but contains a\n+    /// `Vec`, which does implement `Drop`, so assuming `T` can be trivially\n+    /// dropped would lead to a memory leak here.\n+    ///\n+    /// Furthermore, the `Drop` trait only contains one method, `Drop::drop`,\n+    /// which may not be called explicitly in user code (`E0040`), so there is\n+    /// really no use case for using `Drop` in trait bounds, save perhaps for\n+    /// some obscure corner cases, which can use `#[allow(drop_bounds)]`.\n     pub DROP_BOUNDS,\n     Warn,\n-    \"bounds of the form `T: Drop` are useless\"\n+    \"bounds of the form `T: Drop` are most likely incorrect\"\n }\n \n declare_lint_pass!(\n@@ -65,8 +69,8 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                         None => return,\n                     };\n                     let msg = format!(\n-                        \"bounds on `{}` are useless, consider instead \\\n-                         using `{}` to detect if a type has a destructor\",\n+                        \"bounds on `{}` are most likely incorrect, consider instead \\\n+                         using `{}` to detect whether a type can be trivially dropped\",\n                         predicate,\n                         cx.tcx.def_path_str(needs_drop)\n                     );"}]}