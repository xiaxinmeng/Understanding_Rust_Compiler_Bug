{"sha": "6867d91d20a77ad9be4288829cedec2a8c2b72ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NjdkOTFkMjBhNzdhZDliZTQyODg4MjljZWRlYzJhOGMyYjcyYmE=", "commit": {"author": {"name": "Ben Gamari", "email": "bgamari.foss@gmail.com", "date": "2014-07-10T18:05:28Z"}, "committer": {"name": "Ben Gamari", "email": "bgamari.foss@gmail.com", "date": "2014-07-15T23:34:42Z"}, "message": "middle::kind: Don't crash when checking safety of Drop\n\nTo verify that a type can satisfy Send\n`check_struct_safe_for_destructor` attempts to construct a new `ty::t`\nan empty substitution list.\n\nPreviously the function would verify that the function has no type\nparameters before attempting this. Unfortunately this check would not\ncatch functions with only regions parameters. In this case, the type\nwould eventually find its way to the substition engine which would\nattempt to perform a substitution on the region parameters. As the\nconstructed substitution list is empty, this would fail, leading to a\ncompiler crash.\n\nWe fix this by verifying that types have both no type and region\nparameters.", "tree": {"sha": "f8dea1f15dc675c65ed8b0b4e05d9a2fa0ba4471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8dea1f15dc675c65ed8b0b4e05d9a2fa0ba4471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6867d91d20a77ad9be4288829cedec2a8c2b72ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6867d91d20a77ad9be4288829cedec2a8c2b72ba", "html_url": "https://github.com/rust-lang/rust/commit/6867d91d20a77ad9be4288829cedec2a8c2b72ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6867d91d20a77ad9be4288829cedec2a8c2b72ba/comments", "author": {"login": "bgamari", "id": 1010174, "node_id": "MDQ6VXNlcjEwMTAxNzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1010174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgamari", "html_url": "https://github.com/bgamari", "followers_url": "https://api.github.com/users/bgamari/followers", "following_url": "https://api.github.com/users/bgamari/following{/other_user}", "gists_url": "https://api.github.com/users/bgamari/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgamari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgamari/subscriptions", "organizations_url": "https://api.github.com/users/bgamari/orgs", "repos_url": "https://api.github.com/users/bgamari/repos", "events_url": "https://api.github.com/users/bgamari/events{/privacy}", "received_events_url": "https://api.github.com/users/bgamari/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bgamari", "id": 1010174, "node_id": "MDQ6VXNlcjEwMTAxNzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1010174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgamari", "html_url": "https://github.com/bgamari", "followers_url": "https://api.github.com/users/bgamari/followers", "following_url": "https://api.github.com/users/bgamari/following{/other_user}", "gists_url": "https://api.github.com/users/bgamari/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgamari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgamari/subscriptions", "organizations_url": "https://api.github.com/users/bgamari/orgs", "repos_url": "https://api.github.com/users/bgamari/repos", "events_url": "https://api.github.com/users/bgamari/events{/privacy}", "received_events_url": "https://api.github.com/users/bgamari/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c1a22c563e0840f0efcccfe01a496114ac6ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c1a22c563e0840f0efcccfe01a496114ac6ef0", "html_url": "https://github.com/rust-lang/rust/commit/c6c1a22c563e0840f0efcccfe01a496114ac6ef0"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "4f7cb742d8f86dca5cb3d2081459cf93d7f9fdf8", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6867d91d20a77ad9be4288829cedec2a8c2b72ba/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867d91d20a77ad9be4288829cedec2a8c2b72ba/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=6867d91d20a77ad9be4288829cedec2a8c2b72ba", "patch": "@@ -87,7 +87,8 @@ fn check_struct_safe_for_destructor(cx: &mut Context,\n                                     span: Span,\n                                     struct_did: DefId) {\n     let struct_tpt = ty::lookup_item_type(cx.tcx, struct_did);\n-    if !struct_tpt.generics.has_type_params(subst::TypeSpace) {\n+    if !struct_tpt.generics.has_type_params(subst::TypeSpace)\n+      && !struct_tpt.generics.has_region_params(subst::TypeSpace) {\n         let struct_ty = ty::mk_struct(cx.tcx, struct_did,\n                                       subst::Substs::empty());\n         if !ty::type_is_sendable(cx.tcx, struct_ty) {"}, {"sha": "dc69e3fd6399d3ca908321078e7bca9233e5671d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6867d91d20a77ad9be4288829cedec2a8c2b72ba/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867d91d20a77ad9be4288829cedec2a8c2b72ba/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6867d91d20a77ad9be4288829cedec2a8c2b72ba", "patch": "@@ -984,6 +984,10 @@ impl Generics {\n     pub fn has_type_params(&self, space: subst::ParamSpace) -> bool {\n         !self.types.is_empty_in(space)\n     }\n+\n+    pub fn has_region_params(&self, space: subst::ParamSpace) -> bool {\n+        !self.regions.is_empty_in(space)\n+    }\n }\n \n /// When type checking, we use the `ParameterEnvironment` to track"}]}