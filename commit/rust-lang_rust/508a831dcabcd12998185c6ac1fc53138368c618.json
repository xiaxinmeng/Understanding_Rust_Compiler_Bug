{"sha": "508a831dcabcd12998185c6ac1fc53138368c618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOGE4MzFkY2FiY2QxMjk5ODE4NWM2YWMxZmM1MzEzODM2OGM2MTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-19T16:12:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:12Z"}, "message": "use `report_generic_bound_failure` when we can in the compiler", "tree": {"sha": "239b6473fa6f2388b715fc7ee66e57ca21212d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/239b6473fa6f2388b715fc7ee66e57ca21212d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508a831dcabcd12998185c6ac1fc53138368c618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508a831dcabcd12998185c6ac1fc53138368c618", "html_url": "https://github.com/rust-lang/rust/commit/508a831dcabcd12998185c6ac1fc53138368c618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508a831dcabcd12998185c6ac1fc53138368c618/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3788f4207d7994ed75cfba77e2e7dcbe0634c667", "url": "https://api.github.com/repos/rust-lang/rust/commits/3788f4207d7994ed75cfba77e2e7dcbe0634c667", "html_url": "https://github.com/rust-lang/rust/commit/3788f4207d7994ed75cfba77e2e7dcbe0634c667"}], "stats": {"total": 274, "additions": 189, "deletions": 85}, "files": [{"sha": "30ce17b6c6a6a555ed92a9032e06e4ea7b596f55", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 87, "deletions": 27, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -430,7 +430,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             None\n         };\n \n-        self.check_type_tests(infcx, mir, outlives_requirements.as_mut());\n+        self.check_type_tests(infcx, mir, mir_def_id, outlives_requirements.as_mut());\n \n         self.check_universal_regions(infcx, mir, mir_def_id, outlives_requirements.as_mut());\n \n@@ -504,6 +504,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n     ) {\n         let tcx = infcx.tcx;\n@@ -522,14 +523,56 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             // Oh the humanity. Obviously we will do better than this error eventually.\n-            tcx.sess.span_err(\n-                type_test.span,\n-                &format!(\n-                    \"`{}` does not outlive `{:?}`\",\n+            let lower_bound_region = self.to_error_region(type_test.lower_bound);\n+            if let Some(lower_bound_region) = lower_bound_region {\n+                let region_scope_tree = &tcx.region_scope_tree(mir_def_id);\n+                infcx.report_generic_bound_failure(\n+                    region_scope_tree,\n+                    type_test.span,\n+                    None,\n                     type_test.generic_kind,\n-                    type_test.lower_bound,\n-                ),\n-            );\n+                    lower_bound_region,\n+                );\n+            } else {\n+                // FIXME. We should handle this case better. It\n+                // indicates that we have e.g. some region variable\n+                // whose value is like `'a+'b` where `'a` and `'b` are\n+                // distinct unrelated univesal regions that are not\n+                // known to outlive one another. It'd be nice to have\n+                // some examples where this arises to decide how best\n+                // to report it; we could probably handle it by\n+                // iterating over the universal regions and reporting\n+                // an error that multiple bounds are required.\n+                tcx.sess.span_err(\n+                    type_test.span,\n+                    &format!(\n+                        \"`{}` does not live long enough\",\n+                        type_test.generic_kind,\n+                    ),\n+                );\n+            }\n+        }\n+    }\n+\n+    /// Converts a region inference variable into a `ty::Region` that\n+    /// we can use for error reporting. If `r` is universally bound,\n+    /// then we use the name that we have on record for it. If `r` is\n+    /// existentially bound, then we check its inferred value and try\n+    /// to find a good name from that. Returns `None` if we can't find\n+    /// one (e.g., this is just some random part of the CFG).\n+    fn to_error_region(&self, r: RegionVid) -> Option<ty::Region<'tcx>> {\n+        if self.universal_regions.is_universal_region(r) {\n+            return self.definitions[r].external_name;\n+        } else {\n+            let inferred_values = self.inferred_values\n+                                      .as_ref()\n+                                      .expect(\"region values not yet inferred\");\n+            let upper_bound = self.universal_upper_bound(r);\n+            if inferred_values.contains(r, upper_bound) {\n+                self.to_error_region(upper_bound)\n+            } else {\n+                None\n+            }\n         }\n     }\n \n@@ -663,6 +706,36 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// encoding `T` as part of `try_promote_type_test_subject` (see\n     /// that fn for details).\n     ///\n+    /// This is based on the result `'y` of `universal_upper_bound`,\n+    /// except that it converts further takes the non-local upper\n+    /// bound of `'y`, so that the final result is non-local.\n+    fn non_local_universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n+        let inferred_values = self.inferred_values.as_ref().unwrap();\n+\n+        debug!(\n+            \"non_local_universal_upper_bound(r={:?}={})\",\n+            r,\n+            inferred_values.region_value_str(r)\n+        );\n+\n+        let lub = self.universal_upper_bound(r);\n+\n+        // Grow further to get smallest universal region known to\n+        // creator.\n+        let non_local_lub = self.universal_regions.non_local_upper_bound(lub);\n+\n+        debug!(\n+            \"non_local_universal_upper_bound: non_local_lub={:?}\",\n+            non_local_lub\n+        );\n+\n+        non_local_lub\n+    }\n+\n+    /// Returns a universally quantified region that outlives the\n+    /// value of `r` (`r` may be existentially or universally\n+    /// quantified).\n+    ///\n     /// Since `r` is (potentially) an existential region, it has some\n     /// value which may include (a) any number of points in the CFG\n     /// and (b) any number of `end('x)` elements of universally\n@@ -673,15 +746,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///   include the CFG anyhow.\n     /// - For each `end('x)` element in `'r`, compute the mutual LUB, yielding\n     ///   a result `'y`.\n-    /// - Finally, we take the non-local upper bound of `'y`.\n-    ///   - This uses `UniversalRegions::non_local_upper_bound`, which\n-    ///     is similar to this method but only works on universal\n-    ///     regions).\n-    fn non_local_universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n+    fn universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n         let inferred_values = self.inferred_values.as_ref().unwrap();\n \n         debug!(\n-            \"non_local_universal_upper_bound(r={:?}={})\",\n+            \"universal_upper_bound(r={:?}={})\",\n             r,\n             inferred_values.region_value_str(r)\n         );\n@@ -693,18 +762,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             lub = self.universal_regions.postdom_upper_bound(lub, ur);\n         }\n \n-        debug!(\"non_local_universal_upper_bound: lub={:?}\", lub);\n-\n-        // Grow further to get smallest universal region known to\n-        // creator.\n-        let non_local_lub = self.universal_regions.non_local_upper_bound(lub);\n+        debug!(\"universal_upper_bound: r={:?} lub={:?}\", r, lub);\n \n-        debug!(\n-            \"non_local_universal_upper_bound: non_local_lub={:?}\",\n-            non_local_lub\n-        );\n-\n-        non_local_lub\n+        lub\n     }\n \n     /// Test if `test` is true when applied to `lower_bound` at\n@@ -924,8 +984,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) {\n         // Obviously uncool error reporting.\n \n-        let fr_name = self.definitions[fr].external_name;\n-        let outlived_fr_name = self.definitions[outlived_fr].external_name;\n+        let fr_name = self.to_error_region(fr);\n+        let outlived_fr_name = self.to_error_region(outlived_fr);\n \n         if let (Some(f), Some(o)) = (fr_name, outlived_fr_name) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);"}, {"sha": "91796355752a5eb00af3da727479fae8bfbf5bf0", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -40,7 +40,7 @@ where\n     T: Trait<'a>,\n {\n     establish_relationships(value, |value| {\n-        //~^ ERROR `T` does not outlive\n+        //~^ ERROR the parameter type `T` may not live long enough\n \n         // This function call requires that\n         //"}, {"sha": "aefa160fcbc96d8a73d2038ef2cc62d0c60d5c94", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -9,7 +9,7 @@ note: External requirements\n    |\n 42 |       establish_relationships(value, |value| {\n    |  ____________________________________^\n-43 | |         //~^ ERROR `T` does not outlive\n+43 | |         //~^ ERROR the parameter type `T` may not live long enough\n 44 | |\n 45 | |         // This function call requires that\n ...  |\n@@ -26,18 +26,20 @@ note: External requirements\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n \n-error: `T` does not outlive `'_#3r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/propagate-from-trait-match.rs:42:36\n    |\n 42 |       establish_relationships(value, |value| {\n    |  ____________________________________^\n-43 | |         //~^ ERROR `T` does not outlive\n+43 | |         //~^ ERROR the parameter type `T` may not live long enough\n 44 | |\n 45 | |         // This function call requires that\n ...  |\n 56 | |         //~^ WARNING not reporting region error due to -Znll\n 57 | |     });\n    | |_____^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n   --> $DIR/propagate-from-trait-match.rs:38:1"}, {"sha": "135805a733944d9904ab9855a378853b3a74c477", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -21,7 +21,7 @@ where\n     T: Debug,\n {\n     x\n-    //~^ ERROR `T` does not outlive\n+    //~^ ERROR the parameter type `T` may not live long enough [E0309]\n }\n \n fn correct_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n@@ -37,7 +37,7 @@ where\n     T: 'b + Debug,\n {\n     x\n-    //~^ ERROR `T` does not outlive\n+    //~^ ERROR the parameter type `T` may not live long enough [E0309]\n }\n \n fn outlives_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a"}, {"sha": "5916d0060a02ae6af8b6d49e98ca190a07277605", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -10,17 +10,21 @@ warning: not reporting region error due to -Znll\n 34 | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n    |                                          ^^^^^^^^^^^^^^^\n \n-error: `T` does not outlive `'_#1r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:23:5\n    |\n 23 |     x\n    |     ^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n-error: `T` does not outlive `'_#1r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:39:5\n    |\n 39 |     x\n    |     ^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0ec6d7b74ad5add6c7f9948d3d2babe23347e9c2", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -44,7 +44,7 @@ where\n fn generic2<T: Iterator>(value: T) {\n     twice(value, |value_ref, item| invoke2(value_ref, item));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn invoke2<'a, T, U>(a: &T, b: Cell<&'a Option<U>>)"}, {"sha": "a49bdbbf09edf3779f492eb18db598718ef8e1e9", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -4,11 +4,13 @@ warning: not reporting region error due to -Znll\n 45 |     twice(value, |value_ref, item| invoke2(value_ref, item));\n    |                                    ^^^^^^^\n \n-error: `T` does not outlive `'_#0r`\n+error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/projection-implied-bounds.rs:45:18\n    |\n 45 |     twice(value, |value_ref, item| invoke2(value_ref, item));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n \n error: aborting due to previous error\n "}, {"sha": "0493bd1ea0d9cce01b3602e5332330e275f8cdaf", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -35,7 +35,7 @@ where\n {\n     with_signature(x, |mut y| Box::new(y.next()))\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `<T as std::iter::Iterator>::Item` does not outlive\n+    //~| ERROR the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n }\n \n #[rustc_regions]\n@@ -53,7 +53,7 @@ where\n {\n     with_signature(x, |mut y| Box::new(y.next()))\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `<T as std::iter::Iterator>::Item` does not outlive\n+    //~| ERROR the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n }\n \n #[rustc_regions]"}, {"sha": "b2e98b7c2f6a45be62f0962342b7e467de50c295", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -72,11 +72,13 @@ note: External requirements\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n-error: `<T as std::iter::Iterator>::Item` does not outlive `'_#4r`\n+error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-closure.rs:36:23\n    |\n 36 |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n   --> $DIR/projection-no-regions-closure.rs:32:1\n@@ -86,7 +88,7 @@ note: No external requirements\n 34 | |     T: Iterator,\n 35 | | {\n ...  |\n-38 | |     //~| ERROR `<T as std::iter::Iterator>::Item` does not outlive\n+38 | |     //~| ERROR the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n 39 | | }\n    | |_^\n    |\n@@ -111,11 +113,13 @@ note: No external requirements\n                T\n            ]\n \n-error: `<T as std::iter::Iterator>::Item` does not outlive `'_#6r`\n+error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-closure.rs:54:23\n    |\n 54 |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n   --> $DIR/projection-no-regions-closure.rs:50:1\n@@ -125,7 +129,7 @@ note: No external requirements\n 52 | |     T: 'b + Iterator,\n 53 | | {\n ...  |\n-56 | |     //~| ERROR `<T as std::iter::Iterator>::Item` does not outlive\n+56 | |     //~| ERROR the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n 57 | | }\n    | |_^\n    |"}, {"sha": "5f2e84e247a3c925911b708fabe438d96c73685c", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -23,7 +23,7 @@ where\n {\n     Box::new(x.next())\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `<T as std::iter::Iterator>::Item` does not outlive\n+    //~| the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n }\n \n fn correct_region<'a, T>(mut x: T) -> Box<dyn Anything + 'a>\n@@ -39,7 +39,7 @@ where\n {\n     Box::new(x.next())\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `<T as std::iter::Iterator>::Item` does not outlive\n+    //~| the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n }\n \n fn outlives_region<'a, 'b, T>(mut x: T) -> Box<dyn Anything + 'a>"}, {"sha": "d309bf2ce6ca4976eb1910f7a9a2d73e17047249", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-fn.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -10,17 +10,21 @@ warning: not reporting region error due to -Znll\n 40 |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: `<T as std::iter::Iterator>::Item` does not outlive `'_#4r`\n+error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-fn.rs:24:5\n    |\n 24 |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n-error: `<T as std::iter::Iterator>::Item` does not outlive `'_#5r`\n+error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-fn.rs:40:5\n    |\n 40 |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9a5e04deddfc92ce5a20265c30446027c0047c49", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -55,7 +55,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR does not outlive free region\n }\n \n@@ -67,7 +67,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR does not outlive free region\n }\n \n@@ -89,7 +89,7 @@ where\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| ERROR the parameter type `T` may not live long enough\n     //~| ERROR free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n }\n "}, {"sha": "e57a39a9de9635456f65af31d4fdf07b5583eed1", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -83,11 +83,13 @@ note: External requirements\n     = note: where T: '_#3r\n     = note: where '_#2r: '_#3r\n \n-error: `T` does not outlive `'_#5r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n 56 |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:17), 'a))`...\n \n error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:17), 'a))`\n   --> $DIR/projection-one-region-closure.rs:56:20\n@@ -112,11 +114,13 @@ note: No external requirements\n                T\n            ]\n \n-error: `T` does not outlive `'_#6r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:68:29\n    |\n 68 |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error: free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n   --> $DIR/projection-one-region-closure.rs:68:20\n@@ -142,11 +146,13 @@ note: No external requirements\n                T\n            ]\n \n-error: `T` does not outlive `'_#6r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:90:29\n    |\n 90 |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error: free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n   --> $DIR/projection-one-region-closure.rs:90:20"}, {"sha": "e3cee00ed4eb3b7539928eb4bdfb31403fa13d10", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -48,7 +48,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `<T as Anything<'_#5r, '_#6r>>::AssocType` does not outlive `'_#7r`\n+    //~| ERROR associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -59,7 +59,7 @@ where\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `<T as Anything<'_#6r, '_#7r>>::AssocType` does not outlive `'_#8r`\n+    //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -80,7 +80,7 @@ where\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `<T as Anything<'_#6r, '_#7r>>::AssocType` does not outlive `'_#8r`\n+    //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]"}, {"sha": "414ae38080f632aa41f0a48f87ff6d124aa81986", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -152,11 +152,13 @@ note: External requirements\n     = note: number of external vids: 3\n     = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n-error: `<T as Anything<'_#5r, '_#6r>>::AssocType` does not outlive `'_#7r`\n+error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:49:29\n    |\n 49 |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:19), 'a))`...\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:45:1\n@@ -166,7 +168,7 @@ note: No external requirements\n 47 | |     T: Anything<'b, 'c>,\n 48 | | {\n ...  |\n-51 | |     //~| ERROR `<T as Anything<'_#5r, '_#6r>>::AssocType` does not outlive `'_#7r`\n+51 | |     //~| ERROR associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n 52 | | }\n    | |_^\n    |\n@@ -176,11 +178,13 @@ note: No external requirements\n                T\n            ]\n \n-error: `<T as Anything<'_#6r, '_#7r>>::AssocType` does not outlive `'_#8r`\n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:60:29\n    |\n 60 |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:55:1\n@@ -190,7 +194,7 @@ note: No external requirements\n 57 | |     T: Anything<'b, 'c>,\n 58 | |     'a: 'a,\n ...  |\n-62 | |     //~| ERROR `<T as Anything<'_#6r, '_#7r>>::AssocType` does not outlive `'_#8r`\n+62 | |     //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n 63 | | }\n    | |_^\n    |\n@@ -201,11 +205,13 @@ note: No external requirements\n                T\n            ]\n \n-error: `<T as Anything<'_#6r, '_#7r>>::AssocType` does not outlive `'_#8r`\n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:81:29\n    |\n 81 |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:66:1\n@@ -215,7 +221,7 @@ note: No external requirements\n 68 | |     T: Anything<'b, 'c>,\n 69 | |     T::AssocType: 'a,\n ...  |\n-83 | |     //~| ERROR `<T as Anything<'_#6r, '_#7r>>::AssocType` does not outlive `'_#8r`\n+83 | |     //~| ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n 84 | | }\n    | |_^\n    |"}, {"sha": "423747a6bd6cbb927aa271f8d9739d93607ec1c4", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -43,7 +43,7 @@ fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n     twice(cell, value, |a, b| invoke(a, b));\n     //~^ WARNING not reporting region error\n     //~| WARNING not reporting region error\n-    //~| ERROR `T` does not outlive\n+    //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn invoke<'a, 'x, T>(x: Option<Cell<&'x &'a ()>>, y: &T)"}, {"sha": "ef564377e506e00d58e656d2453473b9e5759bf8", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -60,11 +60,13 @@ note: No external requirements\n                T\n            ]\n \n-error: `T` does not outlive `'_#3r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n    |\n 43 |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(1:16), 'a))`...\n \n note: No external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:1\n@@ -73,7 +75,7 @@ note: No external requirements\n 43 | |     twice(cell, value, |a, b| invoke(a, b));\n 44 | |     //~^ WARNING not reporting region error\n 45 | |     //~| WARNING not reporting region error\n-46 | |     //~| ERROR `T` does not outlive\n+46 | |     //~| ERROR the parameter type `T` may not live long enough\n 47 | | }\n    | |_^\n    |"}, {"sha": "95a483b3c355d00058fe1fd36f9c1cb65949c6ef", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -36,7 +36,7 @@ where\n \n     with_signature(x, |y| y)\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn correct_region<'a, T>(x: Box<T>) -> Box<Debug + 'a>\n@@ -52,7 +52,7 @@ where\n {\n     x\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>"}, {"sha": "b7120017a2c0e126857edd2f92bef1a8e32f4c75", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -25,11 +25,13 @@ note: External requirements\n    = note: number of external vids: 3\n    = note: where T: '_#2r\n \n-error: `T` does not outlive `'_#4r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:37:23\n    |\n 37 |     with_signature(x, |y| y)\n    |                       ^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:1\n@@ -39,7 +41,7 @@ note: No external requirements\n 28 | |     T: Debug,\n 29 | | {\n ...  |\n-39 | |     //~| ERROR `T` does not outlive\n+39 | |     //~| ERROR the parameter type `T` may not live long enough\n 40 | | }\n    | |_^\n    |\n@@ -48,11 +50,13 @@ note: No external requirements\n                T\n            ]\n \n-error: `T` does not outlive `'_#4r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:53:5\n    |\n 53 |     x\n    |     ^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1149f250a46e2f53b7deacba724f8f295033eb40", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -36,7 +36,7 @@ where\n #[rustc_regions]\n fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n     with_signature(a, b, |x, y| {\n-        //~^ ERROR `T` does not outlive\n+        //~^ ERROR the parameter type `T` may not live long enough\n         //\n         // See `correct_region`, which explains the point of this\n         // test.  The only difference is that, in the case of this\n@@ -74,7 +74,7 @@ where\n     T: 'b,\n {\n     with_signature(a, b, |x, y| {\n-        //~^ ERROR `T` does not outlive\n+        //~^ ERROR the parameter type `T` may not live long enough\n         // See `correct_region`\n         require(&x, &y)\n         //~^ WARNING not reporting region error due to -Znll"}, {"sha": "d47f506cd2043f314cece98a16180cbe2b930081", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -15,7 +15,7 @@ note: External requirements\n    |\n 38 |       with_signature(a, b, |x, y| {\n    |  __________________________^\n-39 | |         //~^ ERROR `T` does not outlive\n+39 | |         //~^ ERROR the parameter type `T` may not live long enough\n 40 | |         //\n 41 | |         // See `correct_region`, which explains the point of this\n ...  |\n@@ -58,7 +58,7 @@ note: External requirements\n    |\n 76 |       with_signature(a, b, |x, y| {\n    |  __________________________^\n-77 | |         //~^ ERROR `T` does not outlive\n+77 | |         //~^ ERROR the parameter type `T` may not live long enough\n 78 | |         // See `correct_region`\n 79 | |         require(&x, &y)\n 80 | |         //~^ WARNING not reporting region error due to -Znll\n@@ -94,25 +94,27 @@ note: External requirements\n    = note: number of external vids: 4\n    = note: where T: '_#3r\n \n-error: `T` does not outlive `'_#3r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:38:26\n    |\n 38 |       with_signature(a, b, |x, y| {\n    |  __________________________^\n-39 | |         //~^ ERROR `T` does not outlive\n+39 | |         //~^ ERROR the parameter type `T` may not live long enough\n 40 | |         //\n 41 | |         // See `correct_region`, which explains the point of this\n ...  |\n 46 | |         //~^ WARNING not reporting region error due to -Znll\n 47 | |     })\n    | |_____^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(1:15), 'a))`...\n \n note: No external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:37:1\n    |\n 37 | / fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n 38 | |     with_signature(a, b, |x, y| {\n-39 | |         //~^ ERROR `T` does not outlive\n+39 | |         //~^ ERROR the parameter type `T` may not live long enough\n 40 | |         //\n ...  |\n 47 | |     })\n@@ -140,17 +142,19 @@ note: No external requirements\n                T\n            ]\n \n-error: `T` does not outlive `'_#5r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:76:26\n    |\n 76 |       with_signature(a, b, |x, y| {\n    |  __________________________^\n-77 | |         //~^ ERROR `T` does not outlive\n+77 | |         //~^ ERROR the parameter type `T` may not live long enough\n 78 | |         // See `correct_region`\n 79 | |         require(&x, &y)\n 80 | |         //~^ WARNING not reporting region error due to -Znll\n 81 | |     })\n    | |_____^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(1:21), 'a))`...\n \n note: No external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:72:1"}, {"sha": "e66c1853b64b9167e73a39b6e8c9f20d2c2ce0da", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -29,7 +29,7 @@ fn region_within_body<T>(t: T) {\n fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n     outlives(cell, t)\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn outlives<'a, T>(x: Cell<&'a usize>, y: T)"}, {"sha": "3334f4ecc7c869050cd4977b99122af8c1f22f3a", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -4,11 +4,13 @@ warning: not reporting region error due to -Znll\n 30 |     outlives(cell, t)\n    |     ^^^^^^^^\n \n-error: `T` does not outlive `'_#4r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn-body.rs:30:5\n    |\n 30 |     outlives(cell, t)\n    |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to previous error\n "}, {"sha": "aa3a03afa35cdbfd2acb818366c050389ad568d0", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.rs?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -21,7 +21,7 @@ where\n {\n     x\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| the parameter type `T` may not live long enough\n }\n \n fn correct_region<'a, T>(x: Box<T>) -> Box<Debug + 'a>\n@@ -37,7 +37,7 @@ where\n {\n     x\n     //~^ WARNING not reporting region error due to -Znll\n-    //~| ERROR `T` does not outlive\n+    //~| the parameter type `T` may not live long enough\n }\n \n fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>"}, {"sha": "1e659e2e9f073798280aefb288035511959643c5", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/508a831dcabcd12998185c6ac1fc53138368c618/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr?ref=508a831dcabcd12998185c6ac1fc53138368c618", "patch": "@@ -10,17 +10,21 @@ warning: not reporting region error due to -Znll\n 38 |     x\n    |     ^\n \n-error: `T` does not outlive `'_#3r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:22:5\n    |\n 22 |     x\n    |     ^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n-error: `T` does not outlive `'_#4r`\n+error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:38:5\n    |\n 38 |     x\n    |     ^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error: aborting due to 2 previous errors\n "}]}