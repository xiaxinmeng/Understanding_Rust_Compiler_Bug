{"sha": "68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZWE5YWVkOTZiNmI4MTQ3YjZjMzdiODQ0Yzg1Y2I3YWUyODY3ZjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-11T01:57:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-24T01:23:21Z"}, "message": "librustc: Remove `@fn` managed closures from the language.", "tree": {"sha": "5677c1b702523ca3093a0bc8dc897276e3a97d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5677c1b702523ca3093a0bc8dc897276e3a97d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "html_url": "https://github.com/rust-lang/rust/commit/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a4de3f3058ddb2cd43863c7c2723cec3d0fc30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4de3f3058ddb2cd43863c7c2723cec3d0fc30a", "html_url": "https://github.com/rust-lang/rust/commit/9a4de3f3058ddb2cd43863c7c2723cec3d0fc30a"}], "stats": {"total": 202, "additions": 90, "deletions": 112}, "files": [{"sha": "99bb67ad89c3745643dc68ab25aedb67b83d745c", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -36,7 +36,6 @@\n  * still held if needed.\n  */\n \n-use std::cast;\n use std::ptr;\n use std::routine::Runnable;\n use std::util;\n@@ -57,9 +56,10 @@ struct DtorRes {\n #[unsafe_destructor]\n impl Drop for DtorRes {\n     fn drop(&mut self) {\n-        match self.dtor {\n-            option::None => (),\n-            option::Some(f) => f()\n+        let dtor = util::replace(&mut self.dtor, None);\n+        match dtor {\n+            None => (),\n+            Some(f) => f.run()\n         }\n     }\n }"}, {"sha": "7c7b6de9a3a894eb7b65653940c905f8fce44b6b", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -30,13 +30,11 @@ pub mod rustrt {\n \n macro_rules! locked {\n     ($expr:expr) => {\n-        unsafe {\n-            // FIXME #9105: can't use a static mutex in pure Rust yet.\n-            rustrt::rust_take_linenoise_lock();\n-            let x = $expr;\n-            rustrt::rust_drop_linenoise_lock();\n-            x\n-        }\n+        // FIXME #9105: can't use a static mutex in pure Rust yet.\n+        rustrt::rust_take_linenoise_lock();\n+        let x = $expr;\n+        rustrt::rust_drop_linenoise_lock();\n+        x\n     }\n }\n \n@@ -88,35 +86,36 @@ pub fn read(prompt: &str) -> Option<~str> {\n     }\n }\n \n-pub type CompletionCb = @fn(~str, @fn(~str));\n+/// The callback used to perform completions.\n+pub trait CompletionCb {\n+    /// Performs a completion.\n+    fn complete(&self, line: ~str, suggestion: &fn(~str));\n+}\n \n-local_data_key!(complete_key: CompletionCb)\n+local_data_key!(complete_key: @CompletionCb)\n \n /// Bind to the main completion callback in the current task.\n ///\n /// The completion callback should not call any `extra::rl` functions\n /// other than the closure that it receives as its second\n /// argument. Calling such a function will deadlock on the mutex used\n /// to ensure that the calls are thread-safe.\n-pub fn complete(cb: CompletionCb) {\n+pub unsafe fn complete(cb: @CompletionCb) {\n     local_data::set(complete_key, cb);\n \n-    extern fn callback(c_line: *c_char, completions: *()) {\n+    extern fn callback(line: *c_char, completions: *()) {\n         do local_data::get(complete_key) |opt_cb| {\n             // only fetch completions if a completion handler has been\n             // registered in the current task.\n             match opt_cb {\n-                None => {},\n+                None => {}\n                 Some(cb) => {\n-                    let line = unsafe { str::raw::from_c_str(c_line) };\n-                    do (*cb)(line) |suggestion| {\n-                        do suggestion.with_c_str |buf| {\n-                            // This isn't locked, because `callback` gets\n-                            // called inside `rustrt::linenoise`, which\n-                            // *is* already inside the mutex, so\n-                            // re-locking would be a deadlock.\n-                            unsafe {\n-                                rustrt::linenoiseAddCompletion(completions, buf);\n+                    unsafe {\n+                        do cb.complete(str::raw::from_c_str(line))\n+                                |suggestion| {\n+                            do suggestion.with_c_str |buf| {\n+                                rustrt::linenoiseAddCompletion(completions,\n+                                                               buf);\n                             }\n                         }\n                     }"}, {"sha": "7400973c28a809226b5e460a06d4a5b20e2c6bf4", "filename": "src/libextra/test.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -807,11 +807,6 @@ pub fn filter_tests(\n     }\n }\n \n-struct TestFuture {\n-    test: TestDesc,\n-    wait: @fn() -> TestResult,\n-}\n-\n pub fn run_test(force_ignore: bool,\n                 test: TestDescAndFn,\n                 monitor_ch: SharedChan<MonitorMsg>) {"}, {"sha": "1b3224a2217f0ba799416e9be3ecfb702e4485d5", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -218,14 +218,25 @@ fn with_appropriate_checker(cx: Context, id: NodeId,\n \n     let fty = ty::node_id_to_type(cx.tcx, id);\n     match ty::get(fty).sty {\n-        ty::ty_closure(ty::ClosureTy {sigil: OwnedSigil, bounds: bounds, _}) => {\n+        ty::ty_closure(ty::ClosureTy {\n+            sigil: OwnedSigil,\n+            bounds: bounds,\n+            _\n+        }) => {\n             b(|cx, fv| check_for_uniq(cx, fv, bounds))\n         }\n-        ty::ty_closure(ty::ClosureTy {sigil: ManagedSigil, bounds: bounds, _}) => {\n-            b(|cx, fv| check_for_box(cx, fv, bounds))\n+        ty::ty_closure(ty::ClosureTy {\n+            sigil: ManagedSigil,\n+            _\n+        }) => {\n+            // can't happen\n         }\n-        ty::ty_closure(ty::ClosureTy {sigil: BorrowedSigil, bounds: bounds,\n-                                      region: region, _}) => {\n+        ty::ty_closure(ty::ClosureTy {\n+            sigil: BorrowedSigil,\n+            bounds: bounds,\n+            region: region,\n+            _\n+        }) => {\n             b(|cx, fv| check_for_block(cx, fv, bounds, region))\n         }\n         ty::ty_bare_fn(_) => {"}, {"sha": "9cc95b873d25d1114b3b10a06b9b3f4b031981dd", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -187,8 +187,7 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n             Some(deref_ptr(gc_ptr(m)))\n         }\n \n-        ty::ty_estr(ty::vstore_box) |\n-        ty::ty_closure(ty::ClosureTy {sigil: ast::ManagedSigil, _}) => {\n+        ty::ty_estr(ty::vstore_box) => {\n             Some(deref_ptr(gc_ptr(ast::MutImmutable)))\n         }\n \n@@ -515,7 +514,8 @@ impl mem_categorization_ctxt {\n                           (ast::BorrowedSigil, ast::Once) => true,\n                           // Heap closures always capture by copy/move, and can\n                           // move out iff they are once.\n-                          (ast::OwnedSigil, _) | (ast::ManagedSigil, _) => false,\n+                          (ast::OwnedSigil, _) |\n+                          (ast::ManagedSigil, _) => false,\n \n                       };\n                       if var_is_refd {"}, {"sha": "5388e64348c6efa50efd9b44b724ffac87e97256", "filename": "src/librustc/middle/stack_check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Fstack_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Fstack_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstack_check.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -116,8 +116,7 @@ fn stack_check_fn<'a>(v: StackCheckVisitor,\n         visit::fk_anon(*) | visit::fk_fn_block => {\n             match ty::get(ty::node_id_to_type(in_cx.tcx, id)).sty {\n                 ty::ty_bare_fn(*) |\n-                ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, _}) |\n-                ty::ty_closure(ty::ClosureTy {sigil: ast::ManagedSigil, _}) => {\n+                ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, _}) => {\n                     false\n                 }\n                 _ => {"}, {"sha": "b5b181e22a6ebfa62e897cbb8976694fd1e5a89c", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 7, "deletions": 33, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -172,7 +172,7 @@ pub fn allocate_cbox(bcx: @mut Block, sigil: ast::Sigil, cdata_ty: ty::t)\n     // Allocate and initialize the box:\n     match sigil {\n         ast::ManagedSigil => {\n-            malloc_raw(bcx, cdata_ty, heap_managed)\n+            tcx.sess.bug(\"trying to trans allocation of @fn\")\n         }\n         ast::OwnedSigil => {\n             malloc_raw(bcx, cdata_ty, heap_for_unique_closure(bcx, cdata_ty))\n@@ -197,7 +197,8 @@ pub struct ClosureResult {\n // Otherwise, it is stack allocated and copies pointers to the upvars.\n pub fn store_environment(bcx: @mut Block,\n                          bound_values: ~[EnvValue],\n-                         sigil: ast::Sigil) -> ClosureResult {\n+                         sigil: ast::Sigil)\n+                         -> ClosureResult {\n     let _icx = push_ctxt(\"closure::store_environment\");\n     let ccx = bcx.ccx();\n     let tcx = ccx.tcx;\n@@ -444,27 +445,6 @@ pub fn make_closure_glue(\n     }\n }\n \n-pub fn make_opaque_cbox_take_glue(\n-    bcx: @mut Block,\n-    sigil: ast::Sigil,\n-    cboxptr: ValueRef)     // ptr to ptr to the opaque closure\n-    -> @mut Block {\n-    // Easy cases:\n-    let _icx = push_ctxt(\"closure::make_opaque_cbox_take_glue\");\n-    match sigil {\n-        ast::BorrowedSigil => {\n-            return bcx;\n-        }\n-        ast::ManagedSigil => {\n-            glue::incr_refcnt_of_boxed(bcx, Load(bcx, cboxptr));\n-            return bcx;\n-        }\n-        ast::OwnedSigil => {\n-            fail!(\"unique closures are not copyable\")\n-        }\n-    }\n-}\n-\n pub fn make_opaque_cbox_drop_glue(\n     bcx: @mut Block,\n     sigil: ast::Sigil,\n@@ -474,9 +454,7 @@ pub fn make_opaque_cbox_drop_glue(\n     match sigil {\n         ast::BorrowedSigil => bcx,\n         ast::ManagedSigil => {\n-            glue::decr_refcnt_maybe_free(\n-                bcx, Load(bcx, cboxptr), Some(cboxptr),\n-                ty::mk_opaque_closure_ptr(bcx.tcx(), sigil))\n+            bcx.tcx().sess.bug(\"trying to trans drop glue of @fn\")\n         }\n         ast::OwnedSigil => {\n             glue::free_ty(\n@@ -516,12 +494,8 @@ pub fn make_opaque_cbox_free_glue(\n                                     abi::tydesc_field_drop_glue, None);\n \n         // Free the ty descr (if necc) and the box itself\n-        match sigil {\n-            ast::ManagedSigil => glue::trans_free(bcx, cbox),\n-            ast::OwnedSigil => glue::trans_exchange_free(bcx, cbox),\n-            ast::BorrowedSigil => {\n-                bcx.sess().bug(\"impossible\")\n-            }\n-        }\n+        glue::trans_exchange_free(bcx, cbox);\n+\n+        bcx\n     }\n }"}, {"sha": "a760801d73ad8b0cef446aeb5457f030434ef54d", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -581,11 +581,7 @@ pub fn make_take_glue(bcx: @mut Block, v: ValueRef, t: ty::t) -> @mut Block {\n       | ty::ty_estr(ty::vstore_slice(_)) => {\n         bcx\n       }\n-      ty::ty_closure(ty::ClosureTy { sigil: ast::BorrowedSigil, _ }) |\n-      ty::ty_closure(ty::ClosureTy { sigil: ast::ManagedSigil, _ }) => {\n-        closure::make_closure_glue(bcx, v, t, take_ty)\n-      }\n-      ty::ty_closure(ty::ClosureTy { sigil: ast::OwnedSigil, _ }) => bcx,\n+      ty::ty_closure(_) => bcx,\n       ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n         let llbox = Load(bcx, GEPi(bcx, v, [0u, abi::trt_field_box]));\n         incr_refcnt_of_boxed(bcx, llbox);\n@@ -606,9 +602,7 @@ pub fn make_take_glue(bcx: @mut Block, v: ValueRef, t: ty::t) -> @mut Block {\n                                 None);\n           bcx\n       }\n-      ty::ty_opaque_closure_ptr(ck) => {\n-        closure::make_opaque_cbox_take_glue(bcx, ck, v)\n-      }\n+      ty::ty_opaque_closure_ptr(_) => bcx,\n       ty::ty_struct(did, _) => {\n         let tcx = bcx.tcx();\n         let bcx = iter_structural_ty(bcx, v, t, take_ty);"}, {"sha": "bcf4de0807339f2966cfdda9bd23b54429b02f10", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -2308,12 +2308,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             ast::Many => TC_NONE\n         };\n         // Prevent noncopyable types captured in the environment from being copied.\n-        let ct = if cty.sigil == ast::ManagedSigil {\n-            TC_NONE\n-        } else {\n-            TC_NONCOPY_TRAIT\n-        };\n-        st + rt + ot + ct\n+        st + rt + ot + TC_NONCOPY_TRAIT\n     }\n \n     fn trait_contents(store: TraitStore, mutbl: ast::Mutability,"}, {"sha": "024010e40dfada55226c70d7f92d6da169a36b43", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -400,6 +400,11 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope + Clone + 'static>(\n                                             bf.abis, &bf.lifetimes, &bf.decl))\n       }\n       ast::ty_closure(ref f) => {\n+        if f.sigil == ast::ManagedSigil {\n+            tcx.sess.span_err(ast_ty.span,\n+                              \"managed closures are not supported\");\n+        }\n+\n           let bounds = conv_builtin_bounds(this.tcx(), &f.bounds, match f.sigil {\n               // Use corresponding trait store to figure out default bounds\n               // if none were specified."}, {"sha": "5d5e895a5adae88384ad695e3383bfd55c9ae04a", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -403,7 +403,7 @@ struct ViewItemVisitor<'self> {\n     sess: session::Session,\n     exec: &'self mut workcache::Exec,\n     c: &'self ast::Crate,\n-    save: @fn(Path),\n+    save: &'self fn(Path),\n }\n \n impl<'self> Visitor<()> for ViewItemVisitor<'self> {\n@@ -508,7 +508,7 @@ pub fn find_and_install_dependencies(context: &BuildContext,\n                                      sess: session::Session,\n                                      exec: &mut workcache::Exec,\n                                      c: &ast::Crate,\n-                                     save: @fn(Path)) {\n+                                     save: &fn(Path)) {\n     debug!(\"In find_and_install_dependencies...\");\n     let mut visitor = ViewItemVisitor {\n         context: context,"}, {"sha": "ab8af22e1165ef0b0aeb8054e8e9fd7d9a28bd5a", "filename": "src/libstd/io.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -1846,31 +1846,38 @@ pub mod fsync {\n     pub struct Arg<t> {\n         val: t,\n         opt_level: Option<Level>,\n-        fsync_fn: @fn(f: &t, Level) -> int,\n+        fsync_fn: extern \"Rust\" fn(f: &t, Level) -> int,\n     }\n \n     // fsync file after executing blk\n     // FIXME (#2004) find better way to create resources within lifetime of\n     // outer res\n-    pub fn FILE_res_sync(file: &FILERes, opt_level: Option<Level>,\n+    pub fn FILE_res_sync(file: &FILERes,\n+                         opt_level: Option<Level>,\n                          blk: &fn(v: Res<*libc::FILE>)) {\n         blk(Res::new(Arg {\n-            val: file.f, opt_level: opt_level,\n-            fsync_fn: |file, l| fsync_fd(fileno(*file), l)\n+            val: file.f,\n+            opt_level: opt_level,\n+            fsync_fn: fsync_FILE,\n         }));\n \n         fn fileno(stream: *libc::FILE) -> libc::c_int {\n             #[fixed_stack_segment]; #[inline(never)];\n             unsafe { libc::fileno(stream) }\n         }\n+\n+        fn fsync_FILE(stream: &*libc::FILE, level: Level) -> int {\n+            fsync_fd(fileno(*stream), level)\n+        }\n     }\n \n     // fsync fd after executing blk\n     pub fn fd_res_sync(fd: &FdRes, opt_level: Option<Level>,\n                        blk: &fn(v: Res<fd_t>)) {\n         blk(Res::new(Arg {\n-            val: fd.fd, opt_level: opt_level,\n-            fsync_fn: |fd, l| fsync_fd(*fd, l)\n+            val: fd.fd,\n+            opt_level: opt_level,\n+            fsync_fn: fsync_fd_helper,\n         }));\n     }\n \n@@ -1880,17 +1887,26 @@ pub mod fsync {\n         os::fsync_fd(fd, level) as int\n     }\n \n+    fn fsync_fd_helper(fd_ptr: &libc::c_int, level: Level) -> int {\n+        fsync_fd(*fd_ptr, level)\n+    }\n+\n     // Type of objects that may want to fsync\n     pub trait FSyncable { fn fsync(&self, l: Level) -> int; }\n \n     // Call o.fsync after executing blk\n     pub fn obj_sync(o: @FSyncable, opt_level: Option<Level>,\n                     blk: &fn(v: Res<@FSyncable>)) {\n         blk(Res::new(Arg {\n-            val: o, opt_level: opt_level,\n-            fsync_fn: |o, l| (*o).fsync(l)\n+            val: o,\n+            opt_level: opt_level,\n+            fsync_fn: obj_fsync_fn,\n         }));\n     }\n+\n+    fn obj_fsync_fn(o: &@FSyncable, level: Level) -> int {\n+        (*o).fsync(level)\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "833a9f5ed82568ed0b7d246aba661a82458b7e28", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -485,9 +485,11 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_closure_ptr(&mut self, ck: uint) -> bool {\n-        self.align_to::<@fn()>();\n-        if ! self.inner.visit_closure_ptr(ck) { return false; }\n-        self.bump_past::<@fn()>();\n+        self.align_to::<~fn()>();\n+        if ! self.inner.visit_closure_ptr(ck) {\n+            return false\n+        }\n+        self.bump_past::<~fn()>();\n         true\n     }\n }"}, {"sha": "d98c13083dee8f48fbc88a7ef535f6f5068079ae", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -55,7 +55,6 @@ impl<'self,T> Finally<T> for &'self fn() -> T {\n }\n \n finally_fn!(~fn() -> T)\n-finally_fn!(@fn() -> T)\n finally_fn!(extern \"Rust\" fn() -> T)\n \n struct Finallyalizer<'self> {"}, {"sha": "867e4fe416b1d35ec5fda6f577dcde43e314754e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ea9aed96b6b8147b6c37b844c85cb7ae2867f4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=68ea9aed96b6b8147b6c37b844c85cb7ae2867f4", "patch": "@@ -2265,17 +2265,6 @@ pub fn print_fn_header_info(s: @ps,\n     print_opt_sigil(s, opt_sigil);\n }\n \n-pub fn opt_sigil_to_str(opt_p: Option<ast::Sigil>) -> &'static str {\n-    match opt_p {\n-      None => \"fn\",\n-      Some(p) => match p {\n-          ast::BorrowedSigil => \"fn&\",\n-          ast::OwnedSigil => \"fn~\",\n-          ast::ManagedSigil => \"fn@\"\n-      }\n-    }\n-}\n-\n pub fn purity_to_str(p: ast::purity) -> &'static str {\n     match p {\n       ast::impure_fn => \"impure\","}]}