{"sha": "a204dc56c97f35632575b1baa008f2e069b1bed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMDRkYzU2Yzk3ZjM1NjMyNTc1YjFiYWEwMDhmMmUwNjliMWJlZDk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:18:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:18:59Z"}, "message": "rollup merge of #20722: alexcrichton/audit-show\n\nConflicts:\n\tsrc/libcollections/vec.rs\n\tsrc/libcore/fmt/mod.rs\n\tsrc/librustdoc/html/format.rs", "tree": {"sha": "b55c302f46d0adb457d3ce2f250bc0b1209d0996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b55c302f46d0adb457d3ce2f250bc0b1209d0996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a204dc56c97f35632575b1baa008f2e069b1bed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a204dc56c97f35632575b1baa008f2e069b1bed9", "html_url": "https://github.com/rust-lang/rust/commit/a204dc56c97f35632575b1baa008f2e069b1bed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a204dc56c97f35632575b1baa008f2e069b1bed9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6bf7676a545f72cef2e3d042b6d0409f295693a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bf7676a545f72cef2e3d042b6d0409f295693a", "html_url": "https://github.com/rust-lang/rust/commit/a6bf7676a545f72cef2e3d042b6d0409f295693a"}, {"sha": "9851b4fbbf327bb1baab3182ce92970d4db22c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9851b4fbbf327bb1baab3182ce92970d4db22c6c", "html_url": "https://github.com/rust-lang/rust/commit/9851b4fbbf327bb1baab3182ce92970d4db22c6c"}], "stats": {"total": 152, "additions": 75, "deletions": 77}, "files": [{"sha": "48136bc1d96e240807f1f5caa3e3c4f4232340e8", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -584,6 +584,13 @@ impl<T: fmt::Show> fmt::Show for Arc<T> {\n     }\n }\n \n+#[stable]\n+impl<T: fmt::String> fmt::String for Arc<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::String::fmt(&**self, f)\n+    }\n+}\n+\n #[stable]\n impl<T: Default + Sync + Send> Default for Arc<T> {\n     #[stable]"}, {"sha": "b42337a898294ae5438ad9c74f1e946ccbfdb481", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -157,6 +157,7 @@ impl<T: ?Sized + fmt::Show> fmt::Show for Box<T> {\n     }\n }\n \n+#[stable]\n impl<T: ?Sized + fmt::String> fmt::String for Box<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::String::fmt(&**self, f)"}, {"sha": "27b3f03002fb9446f1c0c4a471ca5619491aabc0", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -622,6 +622,13 @@ impl<T: fmt::Show> fmt::Show for Rc<T> {\n     }\n }\n \n+#[stable]\n+impl<T: fmt::String> fmt::String for Rc<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::String::fmt(&**self, f)\n+    }\n+}\n+\n /// A weak version of `Rc<T>`.\n ///\n /// Weak references do not count when determining if the inner value should be dropped."}, {"sha": "32cd8661a5621c8d51604d57415ccb46d4bb6336", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -681,6 +681,7 @@ impl fmt::Show for FromUtf8Error {\n     }\n }\n \n+#[stable]\n impl fmt::String for FromUtf8Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::String::fmt(&self.error, f)\n@@ -693,6 +694,7 @@ impl fmt::Show for FromUtf16Error {\n     }\n }\n \n+#[stable]\n impl fmt::String for FromUtf16Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::String::fmt(\"invalid utf-16: lone surrogate found\", f)\n@@ -805,7 +807,7 @@ impl Default for String {\n     }\n }\n \n-#[experimental = \"waiting on fmt stabilization\"]\n+#[stable]\n impl fmt::String for String {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::String::fmt(&**self, f)\n@@ -1274,18 +1276,17 @@ mod tests {\n         assert_eq!(2u8.to_string(), \"2\");\n         assert_eq!(true.to_string(), \"true\");\n         assert_eq!(false.to_string(), \"false\");\n-        assert_eq!(().to_string(), \"()\");\n         assert_eq!((\"hi\".to_string()).to_string(), \"hi\");\n     }\n \n     #[test]\n     fn test_vectors() {\n         let x: Vec<int> = vec![];\n-        assert_eq!(x.to_string(), \"[]\");\n-        assert_eq!((vec![1i]).to_string(), \"[1]\");\n-        assert_eq!((vec![1i, 2, 3]).to_string(), \"[1, 2, 3]\");\n-        assert!((vec![vec![], vec![1i], vec![1i, 1]]).to_string() ==\n-               \"[[], [1], [1, 1]]\");\n+        assert_eq!(format!(\"{:?}\", x), \"[]\");\n+        assert_eq!(format!(\"{:?}\", vec![1i]), \"[1i]\");\n+        assert_eq!(format!(\"{:?}\", vec![1i, 2, 3]), \"[1i, 2i, 3i]\");\n+        assert!(format!(\"{:?}\", vec![vec![], vec![1i], vec![1i, 1]]) ==\n+               \"[[], [1i], [1i, 1i]]\");\n     }\n \n     #[test]"}, {"sha": "e3b31d2b55d25b6bc7ee1e46015179d7c58d4823", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -1462,13 +1462,6 @@ impl<T: fmt::Show> fmt::Show for Vec<T> {\n     }\n }\n \n-#[experimental = \"waiting on Show stability\"]\n-impl<T: fmt::String> fmt::String for Vec<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::String::fmt(self.as_slice(), f)\n-    }\n-}\n-\n impl<'a> fmt::Writer for Vec<u8> {\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n         self.push_all(s.as_bytes());"}, {"sha": "4363a0a444113bc72268563dcfa86b2ebd5f9f62", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -238,6 +238,7 @@ impl<'a, T, B: ?Sized> PartialOrd for Cow<'a, T, B> where B: PartialOrd + ToOwne\n     }\n }\n \n+#[stable]\n impl<'a, T, B: ?Sized> fmt::String for Cow<'a, T, B> where\n     B: fmt::String + ToOwned<T>,\n     T: fmt::String,"}, {"sha": "a9da1903d695446dbb5934814f7b41638c810ac3", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -219,6 +219,7 @@ impl<'a> Show for Arguments<'a> {\n     }\n }\n \n+#[stable]\n impl<'a> String for Arguments<'a> {\n     fn fmt(&self, fmt: &mut Formatter) -> Result {\n         write(fmt.buf, *self)\n@@ -627,6 +628,7 @@ impl Show for bool {\n     }\n }\n \n+#[stable]\n impl String for bool {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         String::fmt(if *self { \"true\" } else { \"false\" }, f)\n@@ -643,6 +645,7 @@ impl Show for str {\n     }\n }\n \n+#[stable]\n impl String for str {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(self)\n@@ -660,6 +663,7 @@ impl Show for char {\n     }\n }\n \n+#[stable]\n impl String for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         let mut utf8 = [0u8; 4];\n@@ -705,6 +709,7 @@ macro_rules! floating { ($ty:ident) => {\n         }\n     }\n \n+    #[stable]\n     impl String for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n             use num::Float;\n@@ -776,15 +781,9 @@ floating! { f64 }\n impl<T> Show for *const T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n-impl<T> String for *const T {\n-    fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n-}\n impl<T> Show for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n-impl<T> String for *mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n-}\n \n macro_rules! peel {\n     ($name:ident, $($other:ident,)*) => (tuple! { $($other,)* })\n@@ -843,39 +842,12 @@ impl<T: Show> Show for [T] {\n     }\n }\n \n-impl<T: String> String for [T] {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        if f.flags & (1 << (rt::FlagAlternate as uint)) == 0 {\n-            try!(write!(f, \"[\"));\n-        }\n-        let mut is_first = true;\n-        for x in self.iter() {\n-            if is_first {\n-                is_first = false;\n-            } else {\n-                try!(write!(f, \", \"));\n-            }\n-            try!(write!(f, \"{}\", *x))\n-        }\n-        if f.flags & (1 << (rt::FlagAlternate as uint)) == 0 {\n-            try!(write!(f, \"]\"));\n-        }\n-        Ok(())\n-    }\n-}\n-\n impl Show for () {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(\"()\")\n     }\n }\n \n-impl String for () {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        f.pad(\"()\")\n-    }\n-}\n-\n impl<T: Copy + Show> Show for Cell<T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         write!(f, \"Cell {{ value: {:?} }}\", self.get())\n@@ -904,6 +876,7 @@ impl<'b, T: Show> Show for RefMut<'b, T> {\n     }\n }\n \n+#[stable]\n impl String for Utf8Error {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         match *self {"}, {"sha": "56e27e801af9aed9159331715b93752c0db81311", "filename": "src/libcore/option.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -145,17 +145,18 @@\n \n use self::Option::*;\n \n+use clone::Clone;\n use cmp::{Eq, Ord};\n use default::Default;\n-use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator};\n+use fmt;\n use iter::{ExactSizeIterator};\n+use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator};\n use mem;\n-use result::Result;\n+use ops::{Deref, FnOnce};\n use result::Result::{Ok, Err};\n-use slice;\n+use result::Result;\n use slice::AsSlice;\n-use clone::Clone;\n-use ops::{Deref, FnOnce};\n+use slice;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -762,7 +763,6 @@ impl<T> AsSlice<T> for Option<T> {\n \n #[stable]\n impl<T> Default for Option<T> {\n-    #[stable]\n     #[inline]\n     #[stable]\n     fn default() -> Option<T> { None }"}, {"sha": "b3cef19e56705123659045b01aab381cfec45c58", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -51,6 +51,8 @@ pub struct ConciseStability<'a>(pub &'a Option<clean::Stability>);\n pub struct WhereClause<'a>(pub &'a clean::Generics);\n /// Wrapper struct for emitting type parameter bounds.\n pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n+/// Wrapper struct for emitting a comma-separated list of items\n+pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n \n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n@@ -64,6 +66,16 @@ impl UnsafetySpace {\n     }\n }\n \n+impl<'a, T: fmt::String> fmt::String for CommaSep<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        for (i, item) in self.0.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}\", item));\n+        }\n+        Ok(())\n+    }\n+}\n+\n impl<'a> fmt::String for TyParamBounds<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let &TyParamBounds(bounds) = self;\n@@ -450,7 +462,8 @@ impl fmt::String for clean::Type {\n                        lifetimes = if decl.lifetimes.len() == 0 {\n                            \"\".to_string()\n                        } else {\n-                           format!(\"for &lt;{:#}&gt;\", decl.lifetimes)\n+                           format!(\"for &lt;{}&gt;\",\n+                                   CommaSep(decl.lifetimes.as_slice()))\n                        },\n                        args = decl.decl.inputs,\n                        arrow = decl.decl.output,\n@@ -482,7 +495,8 @@ impl fmt::String for clean::Type {\n                        lifetimes = if decl.lifetimes.len() == 0 {\n                            \"\".to_string()\n                        } else {\n-                           format!(\"for &lt;{:#}&gt;\", decl.lifetimes)\n+                           format!(\"for &lt;{}&gt;\",\n+                                   CommaSep(decl.lifetimes.as_slice()))\n                        },\n                        args = decl.decl.inputs,\n                        bounds = if decl.bounds.len() == 0 {\n@@ -512,7 +526,8 @@ impl fmt::String for clean::Type {\n                 primitive_link(f, clean::PrimitiveTuple,\n                                match typs.as_slice() {\n                                     [ref one] => format!(\"({},)\", one),\n-                                    many => format!(\"({:#})\", many)\n+                                    many => format!(\"({})\",\n+                                                    CommaSep(many.as_slice()))\n                                }.as_slice())\n             }\n             clean::Vector(ref t) => {"}, {"sha": "c6c17212b7d89b9512570a7d8f1f85b90a465359", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -60,7 +60,7 @@ pub fn is_sep(c: char) -> bool {\n \n impl fmt::Show for Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Path {{ {} }}\", self.display())\n+        fmt::Show::fmt(&self.display(), f)\n     }\n }\n "}, {"sha": "31d1cb983ede735688d75c8f433c718c588feec3", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -87,7 +87,7 @@ pub struct Path {\n \n impl fmt::Show for Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Path {{ {} }}\", self.display())\n+        fmt::Show::fmt(&self.display(), f)\n     }\n }\n "}, {"sha": "d983c5d5087897a9b676aee43fa7350ebdfa8f82", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -18,7 +18,7 @@ struct defer<'a> {\n impl<'a> Drop for defer<'a> {\n     fn drop(&mut self) {\n         unsafe {\n-            println!(\"{}\", self.x);\n+            println!(\"{:?}\", self.x);\n         }\n     }\n }"}, {"sha": "d9d3d79b5af16e6db3148edac10ace30a56f411d", "filename": "src/test/compile-fail/drop-with-active-borrows-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -15,5 +15,5 @@ fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n }\n \n fn main() {\n-    println!(\"{}\", read_lines_borrowed());\n+    println!(\"{:?}\", read_lines_borrowed());\n }"}, {"sha": "3d4d0fee0bfe26bc341b893fbc7d0fe89b8c2211", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -23,5 +23,5 @@ fn main() {\n \n     assert_eq!((*arc_v)[2], 3);\n \n-    println!(\"{}\", *arc_v);\n+    println!(\"{:?}\", *arc_v);\n }"}, {"sha": "02028fe62e5ebf2cd224776a5c9b55a8388efbb4", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -21,5 +21,5 @@ fn main() {\n \n     assert_eq!((*arc_v)[2], 3); //~ ERROR use of moved value: `arc_v`\n \n-    println!(\"{}\", *arc_v); //~ ERROR use of moved value: `arc_v`\n+    println!(\"{:?}\", *arc_v); //~ ERROR use of moved value: `arc_v`\n }"}, {"sha": "70c9d8351611ec8690459b074946a45a97c496d7", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -34,6 +34,6 @@ fn main() {\n     let foo = Foo { bar: [1u8, 2, 3, 4, 5], baz: 10i32 };\n     unsafe {\n         let oof: Oof<[u8; 5], i32> = mem::transmute(foo);\n-        println!(\"{} {}\", &oof.rab[], oof.zab);\n+        println!(\"{:?} {:?}\", &oof.rab[], oof.zab);\n     }\n }"}, {"sha": "734ac3066534e3d00207730351c1d5333b3e0a90", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -22,15 +22,15 @@ pub fn main() {\n     let c : &[int] = &[2,2,2,2,3];\n     let cc : &[int] = &[2,2,2,2,2,2];\n \n-    println!(\"{}\", a);\n+    println!(\"{:?}\", a);\n \n     assert!(a < b);\n     assert!(a <= b);\n     assert!(a != b);\n     assert!(b >= a);\n     assert!(b > a);\n \n-    println!(\"{}\", b);\n+    println!(\"{:?}\", b);\n \n     assert!(b < c);\n     assert!(b <= c);\n@@ -44,13 +44,13 @@ pub fn main() {\n     assert!(c >= a);\n     assert!(c > a);\n \n-    println!(\"{}\", c);\n+    println!(\"{:?}\", c);\n \n     assert!(a < cc);\n     assert!(a <= cc);\n     assert!(a != cc);\n     assert!(cc >= a);\n     assert!(cc > a);\n \n-    println!(\"{}\", cc);\n+    println!(\"{:?}\", cc);\n }"}, {"sha": "c8d1080372b504faf69473d793e84600024306bc", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -183,7 +183,7 @@ fn test_write() {\n // can do with them just yet (to test the output)\n fn test_print() {\n     print!(\"hi\");\n-    print!(\"{}\", vec!(0u8));\n+    print!(\"{:?}\", vec!(0u8));\n     println!(\"hello\");\n     println!(\"this is a {}\", \"test\");\n     println!(\"{foo}\", foo=\"bar\");"}, {"sha": "fadc96f70baa347fdb3ba2551a57c7af445d59b2", "filename": "src/test/run-pass/issue-17503.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fissue-17503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fissue-17503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17503.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let ss: &&[int] = &s;\n     let sss: &&&[int] = &ss;\n \n-    println!(\"{}\", &s[0..3]);\n-    println!(\"{}\", &ss[3..]);\n-    println!(\"{}\", &sss[2..4]);\n+    println!(\"{:?}\", &s[0..3]);\n+    println!(\"{:?}\", &ss[3..]);\n+    println!(\"{:?}\", &sss[2..4]);\n }"}, {"sha": "cfe9c8f994c473bf056db18892bc8f6da2c25b83", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -25,6 +25,6 @@ static V: &'static [X] = &[X { vec: &[1, 2, 3] }];\n \n pub fn main() {\n     for &v in V.iter() {\n-        println!(\"{}\", v.vec);\n+        println!(\"{:?}\", v.vec);\n     }\n }"}, {"sha": "b8cfccad081400872f676aa76c8217d21abc5cc8", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -16,8 +16,8 @@ pub fn main() {\n \n     print!(\"[\");\n     for xi in x.iter() {\n-        print!(\"{}, \", &xi[]);\n+        print!(\"{:?}, \", &xi[]);\n     }\n     println!(\"]\");\n-    println!(\"{}\", &y[]);\n+    println!(\"{:?}\", &y[]);\n }"}, {"sha": "97c12d0954e4b6baf3314fc3c4098ccf7c456f80", "filename": "src/test/run-pass/vec-to_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a204dc56c97f35632575b1baa008f2e069b1bed9/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-to_str.rs?ref=a204dc56c97f35632575b1baa008f2e069b1bed9", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n pub fn main() {\n-    assert_eq!((vec!(0i, 1)).to_string(), \"[0, 1]\".to_string());\n+    assert_eq!(format!(\"{:?}\", vec!(0i, 1)), \"[0i, 1i]\".to_string());\n \n     let foo = vec!(3i, 4);\n     let bar: &[int] = &[4, 5];\n \n-    assert_eq!(foo.to_string(), \"[3, 4]\".to_string());\n-    assert_eq!(bar.to_string(), \"[4, 5]\".to_string());\n+    assert_eq!(format!(\"{:?}\", foo), \"[3i, 4i]\");\n+    assert_eq!(format!(\"{:?}\", bar), \"[4i, 5i]\");\n }"}]}