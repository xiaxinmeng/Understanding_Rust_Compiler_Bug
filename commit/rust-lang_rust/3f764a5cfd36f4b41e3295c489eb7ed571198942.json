{"sha": "3f764a5cfd36f4b41e3295c489eb7ed571198942", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNzY0YTVjZmQzNmY0YjQxZTMyOTVjNDg5ZWI3ZWQ1NzExOTg5NDI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-27T01:36:31Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-27T01:36:31Z"}, "message": "Update for changes in rustc and refactor.", "tree": {"sha": "48cdf61a8d4f8123bef4126ca136f82c54657c6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48cdf61a8d4f8123bef4126ca136f82c54657c6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f764a5cfd36f4b41e3295c489eb7ed571198942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f764a5cfd36f4b41e3295c489eb7ed571198942", "html_url": "https://github.com/rust-lang/rust/commit/3f764a5cfd36f4b41e3295c489eb7ed571198942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f764a5cfd36f4b41e3295c489eb7ed571198942/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16fa75c6cfded8ffd01e53e045a0ce2429c84fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/16fa75c6cfded8ffd01e53e045a0ce2429c84fa4", "html_url": "https://github.com/rust-lang/rust/commit/16fa75c6cfded8ffd01e53e045a0ce2429c84fa4"}], "stats": {"total": 117, "additions": 59, "deletions": 58}, "files": [{"sha": "41e1714b609815322f4f0d8c923f6e879bcc114d", "filename": "src/bin/miri.rs", "status": "modified", "additions": 56, "deletions": 54, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/3f764a5cfd36f4b41e3295c489eb7ed571198942/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f764a5cfd36f4b41e3295c489eb7ed571198942/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=3f764a5cfd36f4b41e3295c489eb7ed571198942", "patch": "@@ -11,71 +11,73 @@ extern crate syntax;\n \n use miri::{eval_main, run_mir_passes};\n use rustc::session::Session;\n-use rustc_driver::{driver, CompilerCalls, Compilation};\n+use rustc_driver::{CompilerCalls, Compilation};\n+use rustc_driver::driver::{CompileState, CompileController};\n use syntax::ast::{MetaItemKind, NestedMetaItemKind};\n \n struct MiriCompilerCalls;\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n-    fn build_controller(\n-        &mut self,\n-        _: &Session,\n-        _: &getopts::Matches\n-    ) -> driver::CompileController<'a> {\n-        let mut control = driver::CompileController::basic();\n-        control.after_hir_lowering.callback = Box::new(|state| {\n-            state.session.plugin_attributes.borrow_mut().push((\"miri\".to_owned(), syntax::feature_gate::AttributeType::Whitelisted));\n-        });\n+    fn build_controller(&mut self, _: &Session, _: &getopts::Matches) -> CompileController<'a> {\n+        let mut control = CompileController::basic();\n+        control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n+        control.after_analysis.callback = Box::new(after_analysis);\n         control.after_analysis.stop = Compilation::Stop;\n-        control.after_analysis.callback = Box::new(|state| {\n-            state.session.abort_if_errors();\n-\n-            let tcx = state.tcx.unwrap();\n-            let (entry_node_id, _) = state.session.entry_fn.borrow()\n-                .expect(\"no main or start function found\");\n-            let entry_def_id = tcx.map.local_def_id(entry_node_id);\n-\n-            let krate = state.hir_crate.as_ref().unwrap();\n-            let mut memory_size = 100*1024*1024; // 100MB\n-            let mut step_limit = 1000_000;\n-            let mut stack_limit = 100;\n-            let extract_int = |lit: &syntax::ast::Lit| -> u64 {\n-                match lit.node {\n-                    syntax::ast::LitKind::Int(i, _) => i,\n-                    _ => state.session.span_fatal(lit.span, \"expected an integer literal\"),\n-                }\n-            };\n-            for attr in krate.attrs.iter() {\n-                match attr.node.value.node {\n-                    MetaItemKind::List(ref name, _) if name != \"miri\" => {}\n-                    MetaItemKind::List(_, ref items) => for item in items {\n-                        match item.node {\n-                            NestedMetaItemKind::MetaItem(ref inner) => match inner.node {\n-                                MetaItemKind::NameValue(ref name, ref value) => {\n-                                    match &**name {\n-                                        \"memory_size\" => memory_size = extract_int(value),\n-                                        \"step_limit\" => step_limit = extract_int(value),\n-                                        \"stack_limit\" => stack_limit = extract_int(value) as usize,\n-                                        _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n-                                    }\n-                                }\n-                                _ => state.session.span_err(inner.span, \"miri attributes need to be of key = value kind\"),\n-                            },\n-                            _ => state.session.span_err(item.span, \"miri attributes need to be of key = value kind\"),\n+        control\n+    }\n+}\n+\n+fn after_hir_lowering(state: &mut CompileState) {\n+    let attr = (String::from(\"miri\"), syntax::feature_gate::AttributeType::Whitelisted);\n+    state.session.plugin_attributes.borrow_mut().push(attr);\n+}\n+\n+fn after_analysis(state: &mut CompileState) {\n+    state.session.abort_if_errors();\n+\n+    let tcx = state.tcx.unwrap();\n+    let (entry_node_id, _) = state.session.entry_fn.borrow()\n+        .expect(\"no main or start function found\");\n+    let entry_def_id = tcx.map.local_def_id(entry_node_id);\n+    let krate = state.hir_crate.as_ref().unwrap();\n+    let mut memory_size = 100 * 1024 * 1024; // 100 MB\n+    let mut step_limit = 1_000_000;\n+    let mut stack_limit = 100;\n+    let extract_int = |lit: &syntax::ast::Lit| -> u64 {\n+        match lit.node {\n+            syntax::ast::LitKind::Int(i, _) => i,\n+            _ => state.session.span_fatal(lit.span, \"expected an integer literal\"),\n+        }\n+    };\n+    let err_msg = \"miri attributes need to be in the form `miri(key = value)`\";\n+\n+    for attr in krate.attrs.iter().filter(|a| a.name() == \"miri\") {\n+        if let MetaItemKind::List(ref items) = attr.value.node {\n+            for item in items {\n+                if let NestedMetaItemKind::MetaItem(ref inner) = item.node {\n+                    if let MetaItemKind::NameValue(ref value) = inner.node {\n+                        match &inner.name().as_str()[..] {\n+                            \"memory_size\" => memory_size = extract_int(value),\n+                            \"step_limit\" => step_limit = extract_int(value),\n+                            \"stack_limit\" => stack_limit = extract_int(value) as usize,\n+                            _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n                         }\n-                    },\n-                    _ => {},\n+                    } else {\n+                        state.session.span_err(inner.span, err_msg);\n+                    }\n+                } else {\n+                    state.session.span_err(item.span, err_msg);\n                 }\n             }\n+        } else {\n+            state.session.span_err(attr.span, err_msg);\n+        }\n+    }\n \n-            run_mir_passes(tcx);\n-            eval_main(tcx, entry_def_id, memory_size, step_limit, stack_limit);\n-\n-            state.session.abort_if_errors();\n-        });\n+    run_mir_passes(tcx);\n+    eval_main(tcx, entry_def_id, memory_size, step_limit, stack_limit);\n \n-        control\n-    }\n+    state.session.abort_if_errors();\n }\n \n fn init_logger() {"}, {"sha": "7696b0e0fc151e52c2ce3aa66e95cd96fcbc14ff", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f764a5cfd36f4b41e3295c489eb7ed571198942/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f764a5cfd36f4b41e3295c489eb7ed571198942/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=3f764a5cfd36f4b41e3295c489eb7ed571198942", "patch": "@@ -304,10 +304,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     ) -> EvalResult<'tcx, ()> {\n         let name = self.tcx.item_name(def_id);\n         let attrs = self.tcx.get_attrs(def_id);\n-        let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n-            Some(ln) => ln.clone(),\n-            None => name.as_str(),\n-        };\n+        let link_name = attr::first_attr_value_str_by_name(&attrs, \"link_name\")\n+            .unwrap_or(name)\n+            .as_str();\n \n         let args_res: EvalResult<Vec<Value>> = args.iter()\n             .map(|arg| self.eval_operand(arg))"}]}