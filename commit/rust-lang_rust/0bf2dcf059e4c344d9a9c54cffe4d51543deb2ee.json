{"sha": "0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZjJkY2YwNTllNGMzNDRkOWE5YzU0Y2ZmZTRkNTE1NDNkZWIyZWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-08-02T20:08:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-02T20:08:48Z"}, "message": "Rollup merge of #75064 - petrochenkov:llvmtarg, r=Mark-Simulacrum\n\ncompiletest: Support ignoring tests requiring missing LLVM components\n\nThis PR implements a more principled solution to the problem described in https://github.com/rust-lang/rust/pull/66084.\n\nBuilds of LLVM backends take a lot of time and disk space.\nSo it usually makes sense to build rustc with\n```toml\n[llvm]\ntargets = \"X86\"\nexperimental-targets = \"\"\n```\nunless you are working on some target-specific tasks.\n\nA few tests, however, require non-x86 backends to be built.\nA new test directive `// needs-llvm-components: component1 component2 component3` makes such tests to be automatically ignored if one of the listed components is missing in the provided LLVM (this is determined through `llvm-config --components`).\n\nAs a result, the test suite now fully passes with LLVM built only with the x86 backend. The component list in this case is\n```\naggressiveinstcombine all all-targets analysis asmparser asmprinter binaryformat bitreader bitstreamreader bitwriter cfguard codegen core coroutines coverage debuginfocodeview debuginfodwarf debuginfogsym debuginfomsf debuginfopdb demangle dlltooldriver dwarflinker engine executionengine frontendopenmp fuzzmutate globalisel instcombine instrumentation interpreter ipo irreader jitlink libdriver lineeditor linker lto mc mca mcdisassembler mcjit mcparser mirparser native nativecodegen objcarcopts object objectyaml option orcerror orcjit passes profiledata remarks runtimedyld scalaropts selectiondag support symbolize tablegen target textapi transformutils vectorize windowsmanifest x86 x86asmparser x86codegen x86desc x86disassembler x86info x86utils xray\n```\n\n(With the default target list it's much larger.)\n```\naarch64 aarch64asmparser aarch64codegen aarch64desc aarch64disassembler aarch64info aarch64utils aggressiveinstcombine all all-targets analysis arm armasmparser armcodegen armdesc armdisassembler arminfo armutils asmparser asmprinter avr avrasmparser avrcodegen avrdesc avrdisassembler avrinfo binaryformat bitreader bitstreamreader bitwriter cfguard codegen core coroutines coverage debuginfocodeview debuginfodwarf debuginfogsym debuginfomsf debuginfopdb demangle dlltooldriver dwarflinker engine executionengine frontendopenmp fuzzmutate globalisel hexagon hexagonasmparser hexagoncodegen hexagondesc hexagondisassembler hexagoninfo instcombine instrumentation interpreter ipo irreader jitlink libdriver lineeditor linker lto mc mca mcdisassembler mcjit mcparser mips mipsasmparser mipscodegen mipsdesc mipsdisassembler mipsinfo mirparser msp430 msp430asmparser msp430codegen msp430desc msp430disassembler msp430info native nativecodegen nvptx nvptxcodegen nvptxdesc nvptxinfo objcarcopts object objectyaml option orcerror orcjit passes powerpc powerpcasmparser powerpccodegen powerpcdesc powerpcdisassembler powerpcinfo profiledata remarks riscv riscvasmparser riscvcodegen riscvdesc riscvdisassembler riscvinfo riscvutils runtimedyld scalaropts selectiondag sparc sparcasmparser sparccodegen sparcdesc sparcdisassembler sparcinfo support symbolize systemz systemzasmparser systemzcodegen systemzdesc systemzdisassembler systemzinfo tablegen target textapi transformutils vectorize webassembly webassemblyasmparser webassemblycodegen webassemblydesc webassemblydisassembler webassemblyinfo windowsmanifest x86 x86asmparser x86codegen x86desc x86disassembler x86info x86utils xray\n```\n\nhttps://github.com/rust-lang/rust/pull/66084 is also reverted now.\n\nr? @Mark-Simulacrum", "tree": {"sha": "2fab650983a5bad015e1c6e9d6083340bd4127f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fab650983a5bad015e1c6e9d6083340bd4127f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJx1RCRBK7hj4Ov3rIwAAdHIIAJ+C+b/a4b6Xgk+CPWLl0ilo\nRycBadSoXFbgd6R/YEBX21/57WCPSFONCVGt95Ot13BU1ZLz0KE+buUp24b2A4XI\n0BmsjDjw7aPWg22kkTi66/8yl9mjzRPhIGGXrPus3ykiCypq/Tvg4DVhXTzc2+PL\nXYvEDecsQXkvI7czsJHb2UH9WZNM44lecnv9Cv1LA7WhFGU4KsqofDjWaQFvU/Nq\nuD4QzxI9qalOF351SRbbKzI/WIQbvn5zFYG6VcU/FaeodG7M0ZDgzbsHkfHjw577\n6p7P+4gGQUXTpzV/syPOZp3O1InXUsYi93dP+K3AvnquvWsmeU0w/UVhVOqUu/E=\n=0YXF\n-----END PGP SIGNATURE-----\n", "payload": "tree 2fab650983a5bad015e1c6e9d6083340bd4127f5\nparent 9471ab068c13962034afd6e4eb3b0841b723e996\nparent d3277b927aa195d644069d4a7c2150a5bf760285\nauthor Manish Goregaokar <manishsmail@gmail.com> 1596398928 -0700\ncommitter GitHub <noreply@github.com> 1596398928 -0700\n\nRollup merge of #75064 - petrochenkov:llvmtarg, r=Mark-Simulacrum\n\ncompiletest: Support ignoring tests requiring missing LLVM components\n\nThis PR implements a more principled solution to the problem described in https://github.com/rust-lang/rust/pull/66084.\n\nBuilds of LLVM backends take a lot of time and disk space.\nSo it usually makes sense to build rustc with\n```toml\n[llvm]\ntargets = \"X86\"\nexperimental-targets = \"\"\n```\nunless you are working on some target-specific tasks.\n\nA few tests, however, require non-x86 backends to be built.\nA new test directive `// needs-llvm-components: component1 component2 component3` makes such tests to be automatically ignored if one of the listed components is missing in the provided LLVM (this is determined through `llvm-config --components`).\n\nAs a result, the test suite now fully passes with LLVM built only with the x86 backend. The component list in this case is\n```\naggressiveinstcombine all all-targets analysis asmparser asmprinter binaryformat bitreader bitstreamreader bitwriter cfguard codegen core coroutines coverage debuginfocodeview debuginfodwarf debuginfogsym debuginfomsf debuginfopdb demangle dlltooldriver dwarflinker engine executionengine frontendopenmp fuzzmutate globalisel instcombine instrumentation interpreter ipo irreader jitlink libdriver lineeditor linker lto mc mca mcdisassembler mcjit mcparser mirparser native nativecodegen objcarcopts object objectyaml option orcerror orcjit passes profiledata remarks runtimedyld scalaropts selectiondag support symbolize tablegen target textapi transformutils vectorize windowsmanifest x86 x86asmparser x86codegen x86desc x86disassembler x86info x86utils xray\n```\n\n(With the default target list it's much larger.)\n```\naarch64 aarch64asmparser aarch64codegen aarch64desc aarch64disassembler aarch64info aarch64utils aggressiveinstcombine all all-targets analysis arm armasmparser armcodegen armdesc armdisassembler arminfo armutils asmparser asmprinter avr avrasmparser avrcodegen avrdesc avrdisassembler avrinfo binaryformat bitreader bitstreamreader bitwriter cfguard codegen core coroutines coverage debuginfocodeview debuginfodwarf debuginfogsym debuginfomsf debuginfopdb demangle dlltooldriver dwarflinker engine executionengine frontendopenmp fuzzmutate globalisel hexagon hexagonasmparser hexagoncodegen hexagondesc hexagondisassembler hexagoninfo instcombine instrumentation interpreter ipo irreader jitlink libdriver lineeditor linker lto mc mca mcdisassembler mcjit mcparser mips mipsasmparser mipscodegen mipsdesc mipsdisassembler mipsinfo mirparser msp430 msp430asmparser msp430codegen msp430desc msp430disassembler msp430info native nativecodegen nvptx nvptxcodegen nvptxdesc nvptxinfo objcarcopts object objectyaml option orcerror orcjit passes powerpc powerpcasmparser powerpccodegen powerpcdesc powerpcdisassembler powerpcinfo profiledata remarks riscv riscvasmparser riscvcodegen riscvdesc riscvdisassembler riscvinfo riscvutils runtimedyld scalaropts selectiondag sparc sparcasmparser sparccodegen sparcdesc sparcdisassembler sparcinfo support symbolize systemz systemzasmparser systemzcodegen systemzdesc systemzdisassembler systemzinfo tablegen target textapi transformutils vectorize webassembly webassemblyasmparser webassemblycodegen webassemblydesc webassemblydisassembler webassemblyinfo windowsmanifest x86 x86asmparser x86codegen x86desc x86disassembler x86info x86utils xray\n```\n\nhttps://github.com/rust-lang/rust/pull/66084 is also reverted now.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "html_url": "https://github.com/rust-lang/rust/commit/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9471ab068c13962034afd6e4eb3b0841b723e996", "url": "https://api.github.com/repos/rust-lang/rust/commits/9471ab068c13962034afd6e4eb3b0841b723e996", "html_url": "https://github.com/rust-lang/rust/commit/9471ab068c13962034afd6e4eb3b0841b723e996"}, {"sha": "d3277b927aa195d644069d4a7c2150a5bf760285", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3277b927aa195d644069d4a7c2150a5bf760285", "html_url": "https://github.com/rust-lang/rust/commit/d3277b927aa195d644069d4a7c2150a5bf760285"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "bb5b9296c0aa73e2c5e2b822abf5036ad95834df", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -1158,13 +1158,19 @@ impl Step for Compiletest {\n             cmd.arg(\"--quiet\");\n         }\n \n+        let mut llvm_components_passed = false;\n+        let mut copts_passed = false;\n         if builder.config.llvm_enabled() {\n             let llvm_config = builder.ensure(native::Llvm { target: builder.config.build });\n             if !builder.config.dry_run {\n                 let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n+                let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 // Remove trailing newline from llvm-config output.\n-                let llvm_version = llvm_version.trim_end();\n-                cmd.arg(\"--llvm-version\").arg(llvm_version);\n+                cmd.arg(\"--llvm-version\")\n+                    .arg(llvm_version.trim())\n+                    .arg(\"--llvm-components\")\n+                    .arg(llvm_components.trim());\n+                llvm_components_passed = true;\n             }\n             if !builder.is_rust_llvm(target) {\n                 cmd.arg(\"--system-llvm\");\n@@ -1182,15 +1188,13 @@ impl Step for Compiletest {\n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n             if !builder.config.dry_run && suite == \"run-make-fulldeps\" {\n-                let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 cmd.arg(\"--cc\")\n                     .arg(builder.cc(target))\n                     .arg(\"--cxx\")\n                     .arg(builder.cxx(target).unwrap())\n                     .arg(\"--cflags\")\n-                    .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"))\n-                    .arg(\"--llvm-components\")\n-                    .arg(llvm_components.trim());\n+                    .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"));\n+                copts_passed = true;\n                 if let Some(ar) = builder.ar(target) {\n                     cmd.arg(\"--ar\").arg(ar);\n                 }\n@@ -1220,15 +1224,11 @@ impl Step for Compiletest {\n             }\n         }\n \n-        if suite != \"run-make-fulldeps\" {\n-            cmd.arg(\"--cc\")\n-                .arg(\"\")\n-                .arg(\"--cxx\")\n-                .arg(\"\")\n-                .arg(\"--cflags\")\n-                .arg(\"\")\n-                .arg(\"--llvm-components\")\n-                .arg(\"\");\n+        if !llvm_components_passed {\n+            cmd.arg(\"--llvm-components\").arg(\"\");\n+        }\n+        if !copts_passed {\n+            cmd.arg(\"--cc\").arg(\"\").arg(\"--cxx\").arg(\"\").arg(\"--cflags\").arg(\"\");\n         }\n \n         if builder.remote_tested(target) {"}, {"sha": "150997ee807da21abb5527548edaa0fe87111e5d", "filename": "src/test/assembly/asm/aarch64-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: -O\n // compile-flags: --target aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "b78a8cbb559b4f93cf750959d2d3b0b511938d54", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -1,6 +1,7 @@\n // no-system-llvm\n // assembly-output: emit-asm\n // compile-flags: --target aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "ad4ab63f265a73958be28c45a0742bdeac4a809f", "filename": "src/test/assembly/asm/arm-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -3,6 +3,7 @@\n // compile-flags: -O\n // compile-flags: --target armv7-unknown-linux-gnueabihf\n // compile-flags: -C target-feature=+neon\n+// needs-llvm-components: arm\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "07e25a38e458321e45704c8fb13cc2b8e9a8ccb1", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: --target armv7-unknown-linux-gnueabihf\n // compile-flags: -C target-feature=+neon\n+// needs-llvm-components: arm\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "b6b3b54cd710125ff104d9145b83c521d02cc8f2", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -1,6 +1,7 @@\n // no-system-llvm\n // assembly-output: emit-asm\n // compile-flags: --target hexagon-unknown-linux-musl\n+// needs-llvm-components: hexagon\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "77fd5141357e259216ff24496cf0916b7e1ae4c1", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: --target nvptx64-nvidia-cuda\n // compile-flags: --crate-type cdylib\n+// needs-llvm-components: nvptx\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![no_core]"}, {"sha": "b6735153b5dcf7e25939acb100ee8273a7a803fb", "filename": "src/test/assembly/asm/riscv-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -3,6 +3,7 @@\n // compile-flags: -O\n // compile-flags: --target riscv64gc-unknown-linux-gnu\n // compile-flags: -C target-feature=+f\n+// needs-llvm-components: riscv\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "0ff0bf1f94982162ced5ef181d4856eb85d8f1e2", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -4,6 +4,7 @@\n //[riscv64] compile-flags: --target riscv64imac-unknown-none-elf\n //[riscv32] compile-flags: --target riscv32imac-unknown-none-elf\n // compile-flags: -C target-feature=+d\n+// needs-llvm-components: riscv\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "1c0b77ad9c72727dc998da104d9edb9ba3958476", "filename": "src/test/codegen/abi-efiapi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -1,12 +1,14 @@\n // Checks if the correct annotation for the efiapi ABI is passed to llvm.\n \n-// revisions:x86_64 i686 arm\n-\n+// revisions:x86_64 i686 aarch64 arm riscv\n // min-llvm-version: 9.0\n+// needs-llvm-components: aarch64 arm riscv\n \n //[x86_64] compile-flags: --target x86_64-unknown-uefi\n //[i686] compile-flags: --target i686-unknown-linux-musl\n+//[aarch64] compile-flags: --target aarch64-unknown-none\n //[arm] compile-flags: --target armv7r-none-eabi\n+//[riscv] compile-flags: --target riscv64gc-unknown-none-elf\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n@@ -22,6 +24,8 @@ trait Copy { }\n \n //x86_64: define win64cc void @has_efiapi\n //i686: define void @has_efiapi\n+//aarch64: define void @has_efiapi\n //arm: define void @has_efiapi\n+//riscv: define void @has_efiapi\n #[no_mangle]\n pub extern \"efiapi\" fn has_efiapi() {}"}, {"sha": "6d25ca56f1488340855427af287ed4f724e0f2da", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -O --target=avr-unknown-unknown --crate-type=rlib\n+// needs-llvm-components: avr\n \n // This test validates that function pointers can be stored in global variables\n // and called upon. It ensures that Rust emits function pointers in the correct"}, {"sha": "ac2d1d1ed8b733cc6cc402aef47926ec0039642a", "filename": "src/test/ui/issues/issue-37131.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -3,6 +3,7 @@\n \n // compile-flags: --target=thumbv6m-none-eabi\n // ignore-arm\n+// needs-llvm-components: arm\n \n // error-pattern:target may not be installed\n fn main() { }"}, {"sha": "ddb070ddf9fae8838ac1df8fcdeeedb1a0877a4b", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -1,6 +1,7 @@\n //~ ERROR 1:1: 1:1: can't find crate for `core` [E0463]\n \n // compile-flags: --target thumbv7em-none-eabihf\n+// needs-llvm-components: arm\n #![deny(unsafe_code)]\n #![deny(warnings)]\n #![no_std]"}, {"sha": "e6a9451a060cdfdcb741dd017e788d1331263bd0", "filename": "src/test/ui/issues/issue-50993.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: --crate-type dylib --target thumbv7em-none-eabihf\n+// needs-llvm-components: arm\n // build-pass\n // error-pattern: dropping unsupported crate type `dylib` for target `thumbv7em-none-eabihf`\n "}, {"sha": "047fbe9da14fe08e2cfcfc1f3f8b52f2e1af2876", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0bf2dcf059e4c344d9a9c54cffe4d51543deb2ee", "patch": "@@ -1,3 +1,4 @@\n+use std::collections::HashSet;\n use std::env;\n use std::fs::File;\n use std::io::prelude::*;\n@@ -186,6 +187,17 @@ impl EarlyProps {\n             if config.system_llvm && line.starts_with(\"no-system-llvm\") {\n                 return true;\n             }\n+            if let Some(needed_components) =\n+                config.parse_name_value_directive(line, \"needs-llvm-components\")\n+            {\n+                let components: HashSet<_> = config.llvm_components.split_whitespace().collect();\n+                if !needed_components\n+                    .split_whitespace()\n+                    .all(|needed_component| components.contains(needed_component))\n+                {\n+                    return true;\n+                }\n+            }\n             if let Some(actual_version) = config.llvm_version {\n                 if let Some(rest) = line.strip_prefix(\"min-llvm-version:\").map(str::trim) {\n                     let min_version = extract_llvm_version(rest).unwrap();"}]}