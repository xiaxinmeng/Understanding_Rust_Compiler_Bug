{"sha": "cd3d38aa271773d26a57c521a45512cb458e62a0", "node_id": "C_kwDOAAsO6NoAKGNkM2QzOGFhMjcxNzczZDI2YTU3YzUyMWE0NTUxMmNiNDU4ZTYyYTA", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-11T23:33:39Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-12-20T10:12:13Z"}, "message": "Use `rustc_mir_dataflow::impls::MaybeStorageLive`", "tree": {"sha": "50fd33bda8fa75e4717086867536626c5db28173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50fd33bda8fa75e4717086867536626c5db28173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3d38aa271773d26a57c521a45512cb458e62a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3d38aa271773d26a57c521a45512cb458e62a0", "html_url": "https://github.com/rust-lang/rust/commit/cd3d38aa271773d26a57c521a45512cb458e62a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3d38aa271773d26a57c521a45512cb458e62a0/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e68973582403f62bf2d55aa2b805b43b4e931cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e68973582403f62bf2d55aa2b805b43b4e931cc", "html_url": "https://github.com/rust-lang/rust/commit/1e68973582403f62bf2d55aa2b805b43b4e931cc"}], "stats": {"total": 63, "additions": 3, "deletions": 60}, "files": [{"sha": "d262b335d99d3adf782a59eaa02f88c84db50908", "filename": "clippy_utils/src/mir/maybe_storage_live.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1e68973582403f62bf2d55aa2b805b43b4e931cc/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e68973582403f62bf2d55aa2b805b43b4e931cc/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fmaybe_storage_live.rs?ref=1e68973582403f62bf2d55aa2b805b43b4e931cc", "patch": "@@ -1,52 +0,0 @@\n-use rustc_index::bit_set::BitSet;\n-use rustc_middle::mir;\n-use rustc_mir_dataflow::{AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis};\n-\n-/// Determines liveness of each local purely based on `StorageLive`/`Dead`.\n-#[derive(Copy, Clone)]\n-pub(super) struct MaybeStorageLive;\n-\n-impl<'tcx> AnalysisDomain<'tcx> for MaybeStorageLive {\n-    type Domain = BitSet<mir::Local>;\n-    const NAME: &'static str = \"maybe_storage_live\";\n-\n-    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n-        // bottom = dead\n-        BitSet::new_empty(body.local_decls.len())\n-    }\n-\n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut Self::Domain) {\n-        for arg in body.args_iter() {\n-            state.insert(arg);\n-        }\n-    }\n-}\n-\n-impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n-    type Idx = mir::Local;\n-\n-    fn statement_effect(&self, trans: &mut impl GenKill<Self::Idx>, stmt: &mir::Statement<'tcx>, _: mir::Location) {\n-        match stmt.kind {\n-            mir::StatementKind::StorageLive(l) => trans.gen(l),\n-            mir::StatementKind::StorageDead(l) => trans.kill(l),\n-            _ => (),\n-        }\n-    }\n-\n-    fn terminator_effect(\n-        &self,\n-        _trans: &mut impl GenKill<Self::Idx>,\n-        _terminator: &mir::Terminator<'tcx>,\n-        _loc: mir::Location,\n-    ) {\n-    }\n-\n-    fn call_return_effect(\n-        &self,\n-        _trans: &mut impl GenKill<Self::Idx>,\n-        _block: mir::BasicBlock,\n-        _return_places: CallReturnPlaces<'_, 'tcx>,\n-    ) {\n-        // Nothing to do when a call returns successfully\n-    }\n-}"}, {"sha": "26c0015e87e0fb1aeab8e20f0c21faf6498c940c", "filename": "clippy_utils/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd3d38aa271773d26a57c521a45512cb458e62a0/clippy_utils%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3d38aa271773d26a57c521a45512cb458e62a0/clippy_utils%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fmod.rs?ref=cd3d38aa271773d26a57c521a45512cb458e62a0", "patch": "@@ -5,8 +5,6 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::TyCtxt;\n \n-mod maybe_storage_live;\n-\n mod possible_borrower;\n pub use possible_borrower::PossibleBorrowerMap;\n "}, {"sha": "8c695801c73fc18cc13ec4ede95818ff0def8f75", "filename": "clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd3d38aa271773d26a57c521a45512cb458e62a0/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3d38aa271773d26a57c521a45512cb458e62a0/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=cd3d38aa271773d26a57c521a45512cb458e62a0", "patch": "@@ -1,14 +1,11 @@\n-use super::{\n-    maybe_storage_live::MaybeStorageLive, possible_origin::PossibleOriginVisitor,\n-    transitive_relation::TransitiveRelation,\n-};\n+use super::{possible_origin::PossibleOriginVisitor, transitive_relation::TransitiveRelation};\n use crate::ty::is_copy;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n use rustc_middle::ty::{self, visit::TypeVisitor};\n-use rustc_mir_dataflow::{Analysis, ResultsCursor};\n+use rustc_mir_dataflow::{impls::MaybeStorageLive, Analysis, ResultsCursor};\n use std::ops::ControlFlow;\n \n /// Collects the possible borrowers of each local.\n@@ -182,7 +179,7 @@ impl<'a, 'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n             vis.visit_body(mir);\n             vis.into_map(cx)\n         };\n-        let maybe_storage_live_result = MaybeStorageLive\n+        let maybe_storage_live_result = MaybeStorageLive::new(BitSet::new_empty(mir.local_decls.len()))\n             .into_engine(cx.tcx, mir)\n             .pass_name(\"redundant_clone\")\n             .iterate_to_fixpoint()"}]}