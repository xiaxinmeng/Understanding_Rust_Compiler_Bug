{"sha": "ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "node_id": "C_kwDOAAsO6NoAKGNlZWI1YWRlMjAxZTQxODFjNmQ1ZGYyYmE5NmFlNWZiMjE5M2FhZGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T06:59:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T06:59:32Z"}, "message": "Auto merge of #93718 - thomcc:used-macho, r=pnkfelix\n\nOnly compile #[used] as llvm.compiler.used for ELF targets\n\nThis returns `#[used]` to how it worked prior to the LLVM 13 update. The intention is not that this is a stable promise.\n\nI'll add tests later today. The tests will test things that we don't actually promise, though.\n\nIt's a deliberately small patch, mostly comments. And assuming it's reviewed and lands in time, IMO it should at least be considered for uplifting to beta (so that it can be in 1.59), as the change broke many crates in the ecosystem, even if they are relying on behavior that is not guaranteed.\n\n# Background\n\nLLVM has two ways of preventing removal of an unused variable: `llvm.compiler.used`, which must be present in object files, but allows the linker to remove the value, and `llvm.used` which is supposed to apply to the linker as well, if possible.\n\nPrior to LLVM 13, `llvm.used` and `llvm.compiler.used` were the same on ELF targets, although they were different elsewhere. Prior to our update to LLVM 13, we compiled `#[used]` using `llvm.used` unconditionally, even though we only ever promised behavior like `llvm.compiler.used`.\n\nIn LLVM 13, ELF targets gained some support for preventing linker removal of `llvm.used` via the SHF_RETAIN section flag. This has some compatibility issues though: Concretely: some older versions `ld.gold` (specifically ones prior to v2.36, released in Jan 2021) had a bug where it would fail to place a `#[used] #[link_section = \".init_array\"]` static in between `__init_array_start`/`__init_array_end`, leading to code that does this failing to run a static constructor. This is technically not a thing we guarantee will work, is a common use case, and is needed in `libstd` (for example, to get access to `std::env::args()` even if Rust does not control `main`, such as when in a `cdylib` crate).\n\nAs a result, when updating to LLVM 13, we unconditionally switched to using `llvm.compiler.used`, which mirror the guarantees we make for `#[used]` and doesn't require the latest ld.gold. Unfortunately, this happened to break quite a bit of things in the ecosystem, as non-ELF targets had come to rely on `#[used]` being slightly stronger. In particular, there are cases where it will even break static constructors on these targets[^initinit] (and in fact, breaks way more use cases, as Mach-O uses special sections as an interface to the OS/linker/loader in many places).\n\nAs a result, we only switch to `llvm.compiler.used` on ELF[^elfish] targets. The rationale here is:\n\n1. It is (hopefully) identical to the semantics we used prior to the LLVM13 update as prior to that update we unconditionally used `llvm.used`, but on ELF `llvm.used` was the same as `llvm.compiler.used`.\n\n2. It seems to be how Clang compiles this, and given that they have similar (but stronger) compatibility promises, that makes sense.\n\n[^initinit]: For Mach-O targets: It is not always guaranteed that `__DATA,__mod_init_func` is a GC root if it does not have the `S_MOD_INIT_FUNC_POINTERS` flag which we cannot add. In most cases, when ld64 transformed this section into `__DATA_CONST,__mod_init_func` it gets applied, but it's not clear that that is intentional (let alone guaranteed), and the logic is complex enough that it probably happens sometimes, and people in the wild report it occurring.\n\n[^elfish]: Actually, there's not a great way to tell if it's ELF, so I've approximated it.\n\nThis is pretty ad-hoc and hacky! We probably should have a firmer set of guarantees here, but this change should relax the pressure on coming up with that considerably, returning it to previous levels.\n\n---\n\nUnsure who should review so leaving it open, but for sure CC `@nikic`", "tree": {"sha": "654e7f55251c05a6f5ad3a78cdec7789ca8d7076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654e7f55251c05a6f5ad3a78cdec7789ca8d7076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "html_url": "https://github.com/rust-lang/rust/commit/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "039a6ad1caa996379f683f2e219ac4f0e34889bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/039a6ad1caa996379f683f2e219ac4f0e34889bf", "html_url": "https://github.com/rust-lang/rust/commit/039a6ad1caa996379f683f2e219ac4f0e34889bf"}, {"sha": "a64b2a95ff3155fd6dc85312cb4ceac232d28d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64b2a95ff3155fd6dc85312cb4ceac232d28d02", "html_url": "https://github.com/rust-lang/rust/commit/a64b2a95ff3155fd6dc85312cb4ceac232d28d02"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "9d40f9c5d86cc9a29148c9c7095aa7d278733982", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "patch": "@@ -535,10 +535,20 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n \n                 // The semantics of #[used] in Rust only require the symbol to make it into the\n                 // object file. It is explicitly allowed for the linker to strip the symbol if it\n-                // is dead. As such, use llvm.compiler.used instead of llvm.used.\n+                // is dead, which means we are allowed use `llvm.compiler.used` instead of\n+                // `llvm.used` here.\n+                //\n                 // Additionally, https://reviews.llvm.org/D97448 in LLVM 13 started emitting unique\n                 // sections with SHF_GNU_RETAIN flag for llvm.used symbols, which may trigger bugs\n-                // in some versions of the gold linker.\n+                // in the handling of `.init_array` (the static constructor list) in versions of\n+                // the gold linker (prior to the one released with binutils 2.36).\n+                //\n+                // That said, we only ever emit these when compiling for ELF targets, unless\n+                // `#[used(compiler)]` is explicitly requested. This is to avoid similar breakage\n+                // on other targets, in particular MachO targets have *their* static constructor\n+                // lists broken if `llvm.compiler.used` is emitted rather than llvm.used. However,\n+                // that check happens when assigning the `CodegenFnAttrFlags` in `rustc_typeck`,\n+                // so we don't need to take care of it here.\n                 self.add_compiler_used_global(g);\n             }\n             if attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER) {"}, {"sha": "413d31bb94293db88ca40e7f84af41f3d7f56829", "filename": "compiler/rustc_codegen_ssa/src/traits/statics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs?ref=ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "patch": "@@ -13,7 +13,9 @@ pub trait StaticMethods: BackendTypes {\n     /// Same as add_used_global(), but only prevent the compiler from potentially removing an\n     /// otherwise unused symbol. The linker is still permitted to drop it.\n     ///\n-    /// This corresponds to the semantics of the `#[used]` attribute.\n+    /// This corresponds to the documented semantics of the `#[used]` attribute, although\n+    /// on some targets (non-ELF), we may use `add_used_global` for `#[used]` statics\n+    /// instead.\n     fn add_compiler_used_global(&self, global: Self::Value);\n }\n "}, {"sha": "24e6a5d30478978e7220c9f992ae6afd3b39a43b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "patch": "@@ -2813,7 +2813,37 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                         )\n                         .emit();\n                 }\n-                None => codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED,\n+                None => {\n+                    // Unfortunately, unconditionally using `llvm.used` causes\n+                    // issues in handling `.init_array` with the gold linker,\n+                    // but using `llvm.compiler.used` caused a nontrival amount\n+                    // of unintentional ecosystem breakage -- particularly on\n+                    // Mach-O targets.\n+                    //\n+                    // As a result, we emit `llvm.compiler.used` only on ELF\n+                    // targets. This is somewhat ad-hoc, but actually follows\n+                    // our pre-LLVM 13 behavior (prior to the ecosystem\n+                    // breakage), and seems to match `clang`'s behavior as well\n+                    // (both before and after LLVM 13), possibly because they\n+                    // have similar compatibility concerns to us. See\n+                    // https://github.com/rust-lang/rust/issues/47384#issuecomment-1019080146\n+                    // and following comments for some discussion of this, as\n+                    // well as the comments in `rustc_codegen_llvm` where these\n+                    // flags are handled.\n+                    //\n+                    // Anyway, to be clear: this is still up in the air\n+                    // somewhat, and is subject to change in the future (which\n+                    // is a good thing, because this would ideally be a bit\n+                    // more firmed up).\n+                    let is_like_elf = !(tcx.sess.target.is_like_osx\n+                        || tcx.sess.target.is_like_windows\n+                        || tcx.sess.target.is_like_wasm);\n+                    codegen_fn_attrs.flags = if is_like_elf {\n+                        CodegenFnAttrFlags::USED\n+                    } else {\n+                        CodegenFnAttrFlags::USED_LINKER\n+                    };\n+                }\n             }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n             if !matches!(tcx.fn_sig(did).abi(), abi::Abi::C { .. }) {"}, {"sha": "4828d9c8aad2c0b18fa59239817cffb07533f019", "filename": "src/test/run-make-fulldeps/used-cdylib-macos/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/src%2Ftest%2Frun-make-fulldeps%2Fused-cdylib-macos%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/src%2Ftest%2Frun-make-fulldeps%2Fused-cdylib-macos%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fused-cdylib-macos%2FMakefile?ref=ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+# only-macos\n+#\n+# This checks that `#[used]` passes through to the linker on\n+# darwin. This is subject to change in the future, see\n+# https://github.com/rust-lang/rust/pull/93718 for discussion\n+\n+all:\n+\t$(RUSTC) -Copt-level=3 dylib_used.rs\n+\tnm $(TMPDIR)/libdylib_used.dylib | $(CGREP) VERY_IMPORTANT_SYMBOL"}, {"sha": "85f0ff92fe7301be3469e3f18aa2067d13e59032", "filename": "src/test/run-make-fulldeps/used-cdylib-macos/dylib_used.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/src%2Ftest%2Frun-make-fulldeps%2Fused-cdylib-macos%2Fdylib_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc/src%2Ftest%2Frun-make-fulldeps%2Fused-cdylib-macos%2Fdylib_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fused-cdylib-macos%2Fdylib_used.rs?ref=ceeb5ade201e4181c6d5df2ba96ae5fb2193aadc", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type = \"cdylib\"]\n+\n+#[used]\n+static VERY_IMPORTANT_SYMBOL: u32 = 12345;"}]}