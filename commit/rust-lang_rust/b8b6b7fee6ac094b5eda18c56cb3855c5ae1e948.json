{"sha": "b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YjZiN2ZlZTZhYzA5NGI1ZWRhMThjNTZjYjM4NTVjNWFlMWU5NDg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-10T12:46:39Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-10T12:46:39Z"}, "message": "Try to explain `MATCH_SAME_ARMS` better", "tree": {"sha": "4712a2f6540f7e14031b41fd70aef7b46a359f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4712a2f6540f7e14031b41fd70aef7b46a359f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXgkPHAAoJEF5CfHlMukXobDQP/2POVT1h6yjzHdLhXFnVqSwb\nr7P+s7XvX+3Ghl2L3U+ZxOV4ukDEAoA8BDHhiAFkbi9V618+G3kSl6EsfxYEHP+Z\ng1ESEcrWBquraZ97Yew/9aWXSGebUXWJb0ng7bGVn+CJRKQGb9amd+LuDEL1ceqW\nInYqLfvrINY2Lwyq36sQiEHBrCqAUuN2AD2Y3aV1Q5tU2DihhqHn2Y2NZGPrmARW\nLQX0uFDC0YqFIsPW7FIgzqMvYlgw4mNAWl8y+9THBX7rbXm9koPxTNr0NmCi1dbU\nK719gMtd3126DQe0zlW7Runwkn08RJ8qqM5WcygYKzNvw8vDXI8Ttrn6JvMjpMJ3\nOHwEMOEQ8kVQ0LSrWv7ZuRcMg/7EbOE54kvp5fJKbbcypue4JK4MKzKVWpm808zX\nqHjn8zfwVkHtfc8I5uTllSoDQYr2yhzWrXXtpJ3G3P3njqtpyM+XhmNQPRER38s+\nR9F3W3YSdUgrZC97dU7P8Nr69JxWpzgxOfflFdjOa7YuYIQLE/+V6qJMoS25WiHf\npwuO8FMmda9Fk5LSjwG7RgCmhVttRe0urHOiNd6/A/mx40zwTS3fgepX45ebtPn9\nxi8CLEl/ZtS6Dd/LaCWuXFBW6scvcjUv5Rc6tz9ehI10cdZXoLJPemHXraEon0Fy\nLv0NdhKDs6AZlWJDO+nZ\n=7IYZ\n-----END PGP SIGNATURE-----", "payload": "tree 4712a2f6540f7e14031b41fd70aef7b46a359f9f\nparent eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d\nauthor mcarton <cartonmartin+git@gmail.com> 1468154799 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1468154799 +0200\n\nTry to explain `MATCH_SAME_ARMS` better\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948", "html_url": "https://github.com/rust-lang/rust/commit/b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "html_url": "https://github.com/rust-lang/rust/commit/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "fc0d829172fafe4292f58ceb4f29d9d0a81685b6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948", "patch": "@@ -6,7 +6,7 @@ use std::collections::hash_map::Entry;\n use syntax::parse::token::InternedString;\n use syntax::util::small_vector::SmallVector;\n use utils::{SpanlessEq, SpanlessHash};\n-use utils::{get_parent_expr, in_macro, span_note_and_lint};\n+use utils::{get_parent_expr, in_macro, span_lint_and_then, span_note_and_lint, snippet};\n \n /// **What it does:** This lint checks for consecutive `ifs` with the same condition. This lint is\n /// `Warn` by default.\n@@ -52,6 +52,23 @@ declare_lint! {\n ///     Baz => bar(), // <= oops\n /// }\n /// ```\n+///\n+/// This should probably be\n+/// ```rust,ignore\n+/// match foo {\n+///     Bar => bar(),\n+///     Quz => quz(),\n+///     Baz => baz(), // <= fixed\n+/// }\n+/// ```\n+///\n+/// or if the original code was not a typo:\n+/// ```rust,ignore\n+/// match foo {\n+///     Bar | Baz => bar(), // <= shows the intent better\n+///     Quz => quz(),\n+/// }\n+/// ```\n declare_lint! {\n     pub MATCH_SAME_ARMS,\n     Warn,\n@@ -143,12 +160,25 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n \n     if let ExprMatch(_, ref arms, MatchSource::Normal) = expr.node {\n         if let Some((i, j)) = search_same(arms, hash, eq) {\n-            span_note_and_lint(cx,\n+            span_lint_and_then(cx,\n                                MATCH_SAME_ARMS,\n                                j.body.span,\n                                \"this `match` has identical arm bodies\",\n-                               i.body.span,\n-                               \"same as this\");\n+                               |db| {\n+                db.span_note(i.body.span, \"same as this\");\n+\n+                // Note: this does not use `span_suggestion` on purpose: there is no clean way to\n+                // remove the other arm. Building a span and suggest to replace it to \"\" makes an\n+                // even more confusing error message. Also in order not to make up a span for the\n+                // whole pattern, the suggestion is only shown when there is only one pattern. The\n+                // user should know about `|` if they are already using it\u2026\n+\n+                if i.pats.len() == 1 && j.pats.len() == 1 {\n+                    let lhs = snippet(cx, i.pats[0].span, \"<pat1>\");\n+                    let rhs = snippet(cx, j.pats[0].span, \"<pat2>\");\n+                    db.span_note(i.body.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs));\n+                }\n+            });\n         }\n     }\n }"}, {"sha": "a8d7157629b4bfc9ed55bc8227f1046be7a20c00", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=b8b6b7fee6ac094b5eda18c56cb3855c5ae1e948", "patch": "@@ -21,6 +21,7 @@ struct Foo {\n #[deny(match_same_arms)]\n fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n+        //~^NOTE same as this\n         Foo { bar: 42 };\n         0..10;\n         ..;\n@@ -62,6 +63,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     let _ = if true {\n+        //~^NOTE same as this\n         foo();\n         42\n     }\n@@ -75,13 +77,15 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     let _ = if true {\n+        //~^NOTE same as this\n         42\n     }\n     else { //~ERROR this `if` has identical blocks\n         42\n     };\n \n     if true {\n+        //~^NOTE same as this\n         let bar = if true {\n             42\n         }\n@@ -105,6 +109,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n+        //~^NOTE same as this\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n@@ -125,13 +130,15 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n+        //~^NOTE same as this\n         if let Some(a) = Some(42) {}\n     }\n     else { //~ERROR this `if` has identical blocks\n         if let Some(a) = Some(42) {}\n     }\n \n     if true {\n+        //~^NOTE same as this\n         if let (1, .., 3) = (1, 2, 3) {}\n     }\n     else { //~ERROR this `if` has identical blocks\n@@ -168,12 +175,16 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = match 42 {\n         42 => foo(),\n+        //~^NOTE same as this\n+        //~|NOTE `42 | 51`\n         51 => foo(), //~ERROR this `match` has identical arm bodies\n         _ => true,\n     };\n \n     let _ = match Some(42) {\n         Some(_) => 24,\n+        //~^NOTE same as this\n+        //~|NOTE `Some(_) | None`\n         None => 24, //~ERROR this `match` has identical arm bodies\n     };\n \n@@ -196,18 +207,24 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     match (Some(42), Some(42)) {\n         (Some(a), None) => bar(a),\n+        //~^NOTE same as this\n+        //~|NOTE `(Some(a), None) | (None, Some(a))`\n         (None, Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n         _ => (),\n     }\n \n     match (Some(42), Some(42)) {\n         (Some(a), ..) => bar(a),\n+        //~^NOTE same as this\n+        //~|NOTE `(Some(a), ..) | (.., Some(a))`\n         (.., Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n         _ => (),\n     }\n \n     match (1, 2, 3) {\n         (1, .., 3) => 42,\n+        //~^NOTE same as this\n+        //~|NOTE `(1, .., 3) | (.., 3)`\n         (.., 3) => 42, //~ERROR this `match` has identical arm bodies\n         _ => 0,\n     };\n@@ -219,13 +236,15 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n+        //~^NOTE same as this\n         try!(Ok(\"foo\"));\n     }\n     else { //~ERROR this `if` has identical blocks\n         try!(Ok(\"foo\"));\n     }\n \n     if true {\n+        //~^NOTE same as this\n         let foo = \"\";\n         return Ok(&foo[0..]);\n     }\n@@ -246,16 +265,19 @@ fn ifs_same_cond() {\n     let b = false;\n \n     if b {\n+        //~^NOTE same as this\n     }\n     else if b { //~ERROR this `if` has the same condition as a previous if\n     }\n \n     if a == 1 {\n+        //~^NOTE same as this\n     }\n     else if a == 1 { //~ERROR this `if` has the same condition as a previous if\n     }\n \n     if 2*a == 1 {\n+        //~^NOTE same as this\n     }\n     else if 2*a == 2 {\n     }"}]}