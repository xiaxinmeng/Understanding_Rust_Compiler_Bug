{"sha": "1d077f61091b3e73b047be3ec681a923b54f3bf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMDc3ZjYxMDkxYjNlNzNiMDQ3YmUzZWM2ODFhOTIzYjU0ZjNiZjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-23T01:16:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T01:16:22Z"}, "message": "Rollup merge of #73578 - RalfJung:ty-ctxt-at, r=jonas-schievink\n\nMake is_freeze and is_copy_modulo_regions take TyCtxtAt\n\nMake is_freeze and is_copy_modulo_regions take TyCtxtAt instead of separately taking TyCtxt and Span. This is consistent with is_sized.", "tree": {"sha": "eb0a17a12464d869b064368cc35893e3665a96d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb0a17a12464d869b064368cc35893e3665a96d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d077f61091b3e73b047be3ec681a923b54f3bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d077f61091b3e73b047be3ec681a923b54f3bf0", "html_url": "https://github.com/rust-lang/rust/commit/1d077f61091b3e73b047be3ec681a923b54f3bf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d077f61091b3e73b047be3ec681a923b54f3bf0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11b873c70129eb14a49f7f0853a334f838afcce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11b873c70129eb14a49f7f0853a334f838afcce", "html_url": "https://github.com/rust-lang/rust/commit/e11b873c70129eb14a49f7f0853a334f838afcce"}, {"sha": "b92602ba692b03cc2f959f1927b4f909eb5e3fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b92602ba692b03cc2f959f1927b4f909eb5e3fcc", "html_url": "https://github.com/rust-lang/rust/commit/b92602ba692b03cc2f959f1927b4f909eb5e3fcc"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "1f9bd7a691b520bed9c788980974d3050d14e69d", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=1d077f61091b3e73b047be3ec681a923b54f3bf0", "patch": "@@ -513,7 +513,7 @@ fn is_mutable_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Span,\n         // primitive types are never mutable\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => false,\n         ty::Adt(ref adt, ref substs) => {\n-            tys.insert(adt.did) && !ty.is_freeze(cx.tcx, cx.param_env, span)\n+            tys.insert(adt.did) && !ty.is_freeze(cx.tcx.at(span), cx.param_env)\n                 || KNOWN_WRAPPER_TYS.iter().any(|path| match_def_path(cx, adt.did, path))\n                     && substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys))\n         },"}, {"sha": "e097f40f87e47c4b13084141de3e89b840b89232", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=1d077f61091b3e73b047be3ec681a923b54f3bf0", "patch": "@@ -74,9 +74,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                     let span = stmt.span.to(if_.span);\n \n                     let has_interior_mutability = !cx.tables.node_type(canonical_id).is_freeze(\n-                        cx.tcx,\n+                        cx.tcx.at(span),\n                         cx.param_env,\n-                        span\n                     );\n                     if has_interior_mutability { return; }\n "}, {"sha": "93569a04f7a3a23b151b70b28752f912d6cacf23", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=1d077f61091b3e73b047be3ec681a923b54f3bf0", "patch": "@@ -118,7 +118,7 @@ fn is_mutable_type<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Spa\n             size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0) && is_mutable_type(cx, inner_ty, span)\n         },\n         Tuple(..) => ty.tuple_fields().any(|ty| is_mutable_type(cx, ty, span)),\n-        Adt(..) => cx.tcx.layout_of(cx.param_env.and(ty)).is_ok() && !ty.is_freeze(cx.tcx, cx.param_env, span),\n+        Adt(..) => cx.tcx.layout_of(cx.param_env.and(ty)).is_ok() && !ty.is_freeze(cx.tcx.at(span), cx.param_env),\n         _ => false,\n     }\n }"}, {"sha": "230dfd2ebf5661c3dd768225627bc5b4199fd93d", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=1d077f61091b3e73b047be3ec681a923b54f3bf0", "patch": "@@ -110,7 +110,7 @@ impl Source {\n }\n \n fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: Source) {\n-    if ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP) || is_copy(cx, ty) {\n+    if ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env) || is_copy(cx, ty) {\n         // An `UnsafeCell` is `!Copy`, and an `UnsafeCell` is also the only type which\n         // is `!Freeze`, thus if our type is `Copy` we can be sure it must be `Freeze`\n         // as well."}, {"sha": "d8a73f8054bcaa0dff4509fd060d686b24a89ee2", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=1d077f61091b3e73b047be3ec681a923b54f3bf0", "patch": "@@ -137,7 +137,7 @@ impl QuestionMark {\n     fn moves_by_default(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {\n         let expr_ty = cx.tables.expr_ty(expression);\n \n-        !expr_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, expression.span)\n+        !expr_ty.is_copy_modulo_regions(cx.tcx.at(expression.span), cx.param_env)\n     }\n \n     fn is_option(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {"}, {"sha": "6d4c6c6ce1ceada7c78195219f454e35374ccc3f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d077f61091b3e73b047be3ec681a923b54f3bf0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1d077f61091b3e73b047be3ec681a923b54f3bf0", "patch": "@@ -891,7 +891,7 @@ pub fn type_is_unsafe_function<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx\n }\n \n pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_copy_modulo_regions(cx.tcx, cx.param_env, DUMMY_SP)\n+    ty.is_copy_modulo_regions(cx.tcx.at(DUMMY_SP), cx.param_env)\n }\n \n /// Checks if an expression is constructing a tuple-like enum variant or struct"}]}