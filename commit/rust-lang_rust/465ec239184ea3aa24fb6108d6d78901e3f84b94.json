{"sha": "465ec239184ea3aa24fb6108d6d78901e3f84b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NWVjMjM5MTg0ZWEzYWEyNGZiNjEwOGQ2ZDc4OTAxZTNmODRiOTQ=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-06-25T22:51:36Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-07-04T00:34:42Z"}, "message": "liburl: cosmetic test changes.", "tree": {"sha": "524ec5ca44744d831fa56058d287cf62f66f8916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524ec5ca44744d831fa56058d287cf62f66f8916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/465ec239184ea3aa24fb6108d6d78901e3f84b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/465ec239184ea3aa24fb6108d6d78901e3f84b94", "html_url": "https://github.com/rust-lang/rust/commit/465ec239184ea3aa24fb6108d6d78901e3f84b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/465ec239184ea3aa24fb6108d6d78901e3f84b94/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feaad623a12aeb1ce4ee3dabf251e36ccdfe7107", "url": "https://api.github.com/repos/rust-lang/rust/commits/feaad623a12aeb1ce4ee3dabf251e36ccdfe7107", "html_url": "https://github.com/rust-lang/rust/commit/feaad623a12aeb1ce4ee3dabf251e36ccdfe7107"}], "stats": {"total": 210, "additions": 113, "deletions": 97}, "files": [{"sha": "a024be898a5b9747c0f1837bc5ffd96b6bd36914", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 113, "deletions": 97, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/465ec239184ea3aa24fb6108d6d78901e3f84b94/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465ec239184ea3aa24fb6108d6d78901e3f84b94/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=465ec239184ea3aa24fb6108d6d78901e3f84b94", "patch": "@@ -427,9 +427,9 @@ fn query_from_str(rawquery: &str) -> DecodeResult<Query> {\n /// # Example\n ///\n /// ```rust\n-/// let query = vec!((\"title\".to_string(), \"The Village\".to_string()),\n+/// let query = vec![(\"title\".to_string(), \"The Village\".to_string()),\n ///                  (\"north\".to_string(), \"52.91\".to_string()),\n-///                  (\"west\".to_string(), \"4.10\".to_string()));\n+///                  (\"west\".to_string(), \"4.10\".to_string())];\n /// println!(\"{}\", url::query_to_str(&query));  // title=The%20Village&north=52.91&west=4.10\n /// ```\n pub fn query_to_str(query: &Query) -> String {\n@@ -868,87 +868,86 @@ mod tests {\n     #[test]\n     fn test_url_parse() {\n         let url = \"http://user:pass@rust-lang.org:8080/doc/~u?s=v#something\";\n+        let u = from_str::<Url>(url).unwrap();\n \n-        let up = from_str::<Url>(url);\n-        let u = up.unwrap();\n-        assert_eq!(&u.scheme, &\"http\".to_string());\n-        assert_eq!(&u.user, &Some(UserInfo::new(\"user\".to_string(), Some(\"pass\".to_string()))));\n-        assert_eq!(&u.host, &\"rust-lang.org\".to_string());\n-        assert_eq!(&u.port, &Some(8080));\n-        assert_eq!(&u.path.path, &\"/doc/~u\".to_string());\n-        assert_eq!(&u.path.query, &vec!((\"s\".to_string(), \"v\".to_string())));\n-        assert_eq!(&u.path.fragment, &Some(\"something\".to_string()));\n+        assert_eq!(u.scheme, \"http\".to_string());\n+        assert_eq!(u.user, Some(UserInfo::new(\"user\".to_string(), Some(\"pass\".to_string()))));\n+        assert_eq!(u.host, \"rust-lang.org\".to_string());\n+        assert_eq!(u.port, Some(8080));\n+        assert_eq!(u.path.path, \"/doc/~u\".to_string());\n+        assert_eq!(u.path.query, vec!((\"s\".to_string(), \"v\".to_string())));\n+        assert_eq!(u.path.fragment, Some(\"something\".to_string()));\n     }\n \n     #[test]\n     fn test_path_parse() {\n         let path = \"/doc/~u?s=v#something\";\n+        let u = from_str::<Path>(path).unwrap();\n \n-        let up = from_str::<Path>(path);\n-        let u = up.unwrap();\n-        assert_eq!(&u.path, &\"/doc/~u\".to_string());\n-        assert_eq!(&u.query, &vec!((\"s\".to_string(), \"v\".to_string())));\n-        assert_eq!(&u.fragment, &Some(\"something\".to_string()));\n+        assert_eq!(u.path, \"/doc/~u\".to_string());\n+        assert_eq!(u.query, vec!((\"s\".to_string(), \"v\".to_string())));\n+        assert_eq!(u.fragment, Some(\"something\".to_string()));\n     }\n \n     #[test]\n     fn test_url_parse_host_slash() {\n         let urlstr = \"http://0.42.42.42/\";\n         let url = from_str::<Url>(urlstr).unwrap();\n-        assert!(url.host == \"0.42.42.42\".to_string());\n-        assert!(url.path.path == \"/\".to_string());\n+        assert_eq!(url.host, \"0.42.42.42\".to_string());\n+        assert_eq!(url.path.path, \"/\".to_string());\n     }\n \n     #[test]\n     fn test_path_parse_host_slash() {\n         let pathstr = \"/\";\n         let path = from_str::<Path>(pathstr).unwrap();\n-        assert!(path.path == \"/\".to_string());\n+        assert_eq!(path.path, \"/\".to_string());\n     }\n \n     #[test]\n     fn test_url_host_with_port() {\n         let urlstr = \"scheme://host:1234\";\n         let url = from_str::<Url>(urlstr).unwrap();\n-        assert_eq!(&url.scheme, &\"scheme\".to_string());\n-        assert_eq!(&url.host, &\"host\".to_string());\n-        assert_eq!(&url.port, &Some(1234));\n+        assert_eq!(url.scheme, \"scheme\".to_string());\n+        assert_eq!(url.host, \"host\".to_string());\n+        assert_eq!(url.port, Some(1234));\n         // is empty path really correct? Other tests think so\n-        assert_eq!(&url.path.path, &\"\".to_string());\n+        assert_eq!(url.path.path, \"\".to_string());\n+\n         let urlstr = \"scheme://host:1234/\";\n         let url = from_str::<Url>(urlstr).unwrap();\n-        assert_eq!(&url.scheme, &\"scheme\".to_string());\n-        assert_eq!(&url.host, &\"host\".to_string());\n-        assert_eq!(&url.port, &Some(1234));\n-        assert_eq!(&url.path.path, &\"/\".to_string());\n+        assert_eq!(url.scheme, \"scheme\".to_string());\n+        assert_eq!(url.host, \"host\".to_string());\n+        assert_eq!(url.port, Some(1234));\n+        assert_eq!(url.path.path, \"/\".to_string());\n     }\n \n     #[test]\n     fn test_url_with_underscores() {\n         let urlstr = \"http://dotcom.com/file_name.html\";\n         let url = from_str::<Url>(urlstr).unwrap();\n-        assert!(url.path.path == \"/file_name.html\".to_string());\n+        assert_eq!(url.path.path, \"/file_name.html\".to_string());\n     }\n \n     #[test]\n     fn test_path_with_underscores() {\n         let pathstr = \"/file_name.html\";\n         let path = from_str::<Path>(pathstr).unwrap();\n-        assert!(path.path == \"/file_name.html\".to_string());\n+        assert_eq!(path.path, \"/file_name.html\".to_string());\n     }\n \n     #[test]\n     fn test_url_with_dashes() {\n         let urlstr = \"http://dotcom.com/file-name.html\";\n         let url = from_str::<Url>(urlstr).unwrap();\n-        assert!(url.path.path == \"/file-name.html\".to_string());\n+        assert_eq!(url.path.path, \"/file-name.html\".to_string());\n     }\n \n     #[test]\n     fn test_path_with_dashes() {\n         let pathstr = \"/file-name.html\";\n         let path = from_str::<Path>(pathstr).unwrap();\n-        assert!(path.path == \"/file-name.html\".to_string());\n+        assert_eq!(path.path, \"/file-name.html\".to_string());\n     }\n \n     #[test]\n@@ -965,62 +964,72 @@ mod tests {\n     #[test]\n     fn test_full_url_parse_and_format() {\n         let url = \"http://user:pass@rust-lang.org/doc?s=v#something\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_userless_url_parse_and_format() {\n         let url = \"http://rust-lang.org/doc?s=v#something\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_queryless_url_parse_and_format() {\n         let url = \"http://user:pass@rust-lang.org/doc#something\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_empty_query_url_parse_and_format() {\n         let url = \"http://user:pass@rust-lang.org/doc?#something\";\n         let should_be = \"http://user:pass@rust-lang.org/doc#something\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), should_be);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), should_be);\n     }\n \n     #[test]\n     fn test_fragmentless_url_parse_and_format() {\n         let url = \"http://user:pass@rust-lang.org/doc?q=v\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_minimal_url_parse_and_format() {\n         let url = \"http://rust-lang.org/doc\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_url_with_port_parse_and_format() {\n         let url = \"http://rust-lang.org:80/doc\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_scheme_host_only_url_parse_and_format() {\n         let url = \"http://rust-lang.org\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_pathless_url_parse_and_format() {\n         let url = \"http://user:pass@rust-lang.org?q=v#something\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_scheme_host_fragment_only_url_parse_and_format() {\n         let url = \"http://rust-lang.org#something\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n@@ -1042,68 +1051,75 @@ mod tests {\n     #[test]\n     fn test_url_without_authority() {\n         let url = \"mailto:test@email.com\";\n-        assert_eq!(from_str::<Url>(url).unwrap().to_str().as_slice(), url);\n+        let u = from_str::<Url>(url).unwrap();\n+        assert_eq!(format!(\"{}\", u).as_slice(), url);\n     }\n \n     #[test]\n     fn test_encode() {\n-        assert_eq!(encode(\"\"), \"\".to_string());\n-        assert_eq!(encode(\"http://example.com\"), \"http://example.com\".to_string());\n-        assert_eq!(encode(\"foo bar% baz\"), \"foo%20bar%25%20baz\".to_string());\n-        assert_eq!(encode(\" \"), \"%20\".to_string());\n-        assert_eq!(encode(\"!\"), \"!\".to_string());\n-        assert_eq!(encode(\"\\\"\"), \"\\\"\".to_string());\n-        assert_eq!(encode(\"#\"), \"#\".to_string());\n-        assert_eq!(encode(\"$\"), \"$\".to_string());\n-        assert_eq!(encode(\"%\"), \"%25\".to_string());\n-        assert_eq!(encode(\"&\"), \"&\".to_string());\n-        assert_eq!(encode(\"'\"), \"%27\".to_string());\n-        assert_eq!(encode(\"(\"), \"(\".to_string());\n-        assert_eq!(encode(\")\"), \")\".to_string());\n-        assert_eq!(encode(\"*\"), \"*\".to_string());\n-        assert_eq!(encode(\"+\"), \"+\".to_string());\n-        assert_eq!(encode(\",\"), \",\".to_string());\n-        assert_eq!(encode(\"/\"), \"/\".to_string());\n-        assert_eq!(encode(\":\"), \":\".to_string());\n-        assert_eq!(encode(\";\"), \";\".to_string());\n-        assert_eq!(encode(\"=\"), \"=\".to_string());\n-        assert_eq!(encode(\"?\"), \"?\".to_string());\n-        assert_eq!(encode(\"@\"), \"@\".to_string());\n-        assert_eq!(encode(\"[\"), \"[\".to_string());\n-        assert_eq!(encode(\"]\"), \"]\".to_string());\n-        assert_eq!(encode(\"\\0\"), \"%00\".to_string());\n-        assert_eq!(encode(\"\\n\"), \"%0A\".to_string());\n+        fn t(input: &str, expected: &str) {\n+            assert_eq!(encode(input), expected.to_string())\n+        }\n+\n+        t(\"\", \"\");\n+        t(\"http://example.com\", \"http://example.com\");\n+        t(\"foo bar% baz\", \"foo%20bar%25%20baz\");\n+        t(\" \", \"%20\");\n+        t(\"!\", \"!\");\n+        t(\"\\\"\", \"\\\"\");\n+        t(\"#\", \"#\");\n+        t(\"$\", \"$\");\n+        t(\"%\", \"%25\");\n+        t(\"&\", \"&\");\n+        t(\"'\", \"%27\");\n+        t(\"(\", \"(\");\n+        t(\")\", \")\");\n+        t(\"*\", \"*\");\n+        t(\"+\", \"+\");\n+        t(\",\", \",\");\n+        t(\"/\", \"/\");\n+        t(\":\", \":\");\n+        t(\";\", \";\");\n+        t(\"=\", \"=\");\n+        t(\"?\", \"?\");\n+        t(\"@\", \"@\");\n+        t(\"[\", \"[\");\n+        t(\"]\", \"]\");\n+        t(\"\\0\", \"%00\");\n+        t(\"\\n\", \"%0A\");\n     }\n \n     #[test]\n     fn test_encode_component() {\n-        assert_eq!(encode_component(\"\"), \"\".to_string());\n-        assert!(encode_component(\"http://example.com\") ==\n-            \"http%3A%2F%2Fexample.com\".to_string());\n-        assert!(encode_component(\"foo bar% baz\") ==\n-            \"foo%20bar%25%20baz\".to_string());\n-        assert_eq!(encode_component(\" \"), \"%20\".to_string());\n-        assert_eq!(encode_component(\"!\"), \"%21\".to_string());\n-        assert_eq!(encode_component(\"#\"), \"%23\".to_string());\n-        assert_eq!(encode_component(\"$\"), \"%24\".to_string());\n-        assert_eq!(encode_component(\"%\"), \"%25\".to_string());\n-        assert_eq!(encode_component(\"&\"), \"%26\".to_string());\n-        assert_eq!(encode_component(\"'\"), \"%27\".to_string());\n-        assert_eq!(encode_component(\"(\"), \"%28\".to_string());\n-        assert_eq!(encode_component(\")\"), \"%29\".to_string());\n-        assert_eq!(encode_component(\"*\"), \"%2A\".to_string());\n-        assert_eq!(encode_component(\"+\"), \"%2B\".to_string());\n-        assert_eq!(encode_component(\",\"), \"%2C\".to_string());\n-        assert_eq!(encode_component(\"/\"), \"%2F\".to_string());\n-        assert_eq!(encode_component(\":\"), \"%3A\".to_string());\n-        assert_eq!(encode_component(\";\"), \"%3B\".to_string());\n-        assert_eq!(encode_component(\"=\"), \"%3D\".to_string());\n-        assert_eq!(encode_component(\"?\"), \"%3F\".to_string());\n-        assert_eq!(encode_component(\"@\"), \"%40\".to_string());\n-        assert_eq!(encode_component(\"[\"), \"%5B\".to_string());\n-        assert_eq!(encode_component(\"]\"), \"%5D\".to_string());\n-        assert_eq!(encode_component(\"\\0\"), \"%00\".to_string());\n-        assert_eq!(encode_component(\"\\n\"), \"%0A\".to_string());\n+        fn t(input: &str, expected: &str) {\n+            assert_eq!(encode_component(input), expected.to_string())\n+        }\n+\n+        t(\"\", \"\");\n+        t(\"http://example.com\", \"http%3A%2F%2Fexample.com\");\n+        t(\"foo bar% baz\", \"foo%20bar%25%20baz\");\n+        t(\" \", \"%20\");\n+        t(\"!\", \"%21\");\n+        t(\"#\", \"%23\");\n+        t(\"$\", \"%24\");\n+        t(\"%\", \"%25\");\n+        t(\"&\", \"%26\");\n+        t(\"'\", \"%27\");\n+        t(\"(\", \"%28\");\n+        t(\")\", \"%29\");\n+        t(\"*\", \"%2A\");\n+        t(\"+\", \"%2B\");\n+        t(\",\", \"%2C\");\n+        t(\"/\", \"%2F\");\n+        t(\":\", \"%3A\");\n+        t(\";\", \"%3B\");\n+        t(\"=\", \"%3D\");\n+        t(\"?\", \"%3F\");\n+        t(\"@\", \"%40\");\n+        t(\"[\", \"%5B\");\n+        t(\"]\", \"%5D\");\n+        t(\"\\0\", \"%00\");\n+        t(\"\\n\", \"%0A\");\n     }\n \n     #[test]\n@@ -1189,8 +1205,8 @@ mod tests {\n \n         let mut m = HashMap::new();\n         m.insert(\"foo bar\".to_string(), vec!(\"abc\".to_string(), \"12 = 34\".to_string()));\n-        assert!(encode_form_urlencoded(&m) ==\n-            \"foo+bar=abc&foo+bar=12+%3D+34\".to_string());\n+        assert_eq!(encode_form_urlencoded(&m),\n+                    \"foo+bar=abc&foo+bar=12+%3D+34\".to_string());\n     }\n \n     #[test]"}]}