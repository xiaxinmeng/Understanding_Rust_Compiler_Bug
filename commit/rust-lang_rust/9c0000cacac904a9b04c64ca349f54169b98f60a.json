{"sha": "9c0000cacac904a9b04c64ca349f54169b98f60a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMDAwMGNhY2FjOTA0YTliMDRjNjRjYTM0OWY1NDE2OWI5OGY2MGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-16T02:53:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T17:29:47Z"}, "message": "Point at opaque and closure type definitions in type errors", "tree": {"sha": "005e3624e50948126cab642ee90a409eea132854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005e3624e50948126cab642ee90a409eea132854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c0000cacac904a9b04c64ca349f54169b98f60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0000cacac904a9b04c64ca349f54169b98f60a", "html_url": "https://github.com/rust-lang/rust/commit/9c0000cacac904a9b04c64ca349f54169b98f60a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c0000cacac904a9b04c64ca349f54169b98f60a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6468da160bd67a2ce0573427f09a98daff8c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6468da160bd67a2ce0573427f09a98daff8c07", "html_url": "https://github.com/rust-lang/rust/commit/ed6468da160bd67a2ce0573427f09a98daff8c07"}], "stats": {"total": 145, "additions": 137, "deletions": 8}, "files": [{"sha": "e134a6c17cc3d086ce663c0d02a25b79632dff1a", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 92, "deletions": 5, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -68,9 +68,11 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n \n-use errors::{struct_span_err, Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use errors::{\n+    pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticStyledString,\n+};\n use rustc_error_codes::*;\n-use rustc_span::{Pos, Span};\n+use rustc_span::{DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::{cmp, fmt};\n \n@@ -1289,6 +1291,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         mut values: Option<ValuePairs<'tcx>>,\n         terr: &TypeError<'tcx>,\n     ) {\n+        let span = cause.span(self.tcx);\n+\n         // For some types of errors, expected-found does not make\n         // sense, so just ignore the values we were given.\n         match terr {\n@@ -1298,6 +1302,85 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             _ => {}\n         }\n \n+        struct OpaqueTypesVisitor<'tcx> {\n+            types: FxHashMap<&'static str, FxHashSet<Span>>,\n+            expected: FxHashMap<&'static str, FxHashSet<Span>>,\n+            found: FxHashMap<&'static str, FxHashSet<Span>>,\n+            ignore_span: Span,\n+            tcx: TyCtxt<'tcx>,\n+        }\n+\n+        impl<'tcx> OpaqueTypesVisitor<'tcx> {\n+            fn visit_expected_found(\n+                tcx: TyCtxt<'tcx>,\n+                expected: Ty<'tcx>,\n+                found: Ty<'tcx>,\n+                ignore_span: Span,\n+            ) -> Self {\n+                let mut types_visitor = OpaqueTypesVisitor {\n+                    types: Default::default(),\n+                    expected: Default::default(),\n+                    found: Default::default(),\n+                    ignore_span,\n+                    tcx,\n+                };\n+                expected.visit_with(&mut types_visitor);\n+                std::mem::swap(&mut types_visitor.expected, &mut types_visitor.types);\n+                found.visit_with(&mut types_visitor);\n+                std::mem::swap(&mut types_visitor.found, &mut types_visitor.types);\n+                types_visitor\n+            }\n+\n+            fn report(&self, err: &mut DiagnosticBuilder<'_>) {\n+                for (target, types) in &[(\"expected\", &self.expected), (\"found\", &self.found)] {\n+                    for (key, values) in types.iter() {\n+                        let count = values.len();\n+                        for sp in values {\n+                            err.span_label(\n+                                *sp,\n+                                format!(\n+                                    \"{}this is {}the {} {}{}\",\n+                                    if sp.is_desugaring(DesugaringKind::Async) {\n+                                        \"in the desugared `async fn`, \"\n+                                    } else {\n+                                        \"\"\n+                                    },\n+                                    if count > 1 { \"one of\" } else { \"\" },\n+                                    target,\n+                                    key,\n+                                    pluralize!(count),\n+                                ),\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+                let kind = match t.kind {\n+                    ty::Closure(..) => \"closure\",\n+                    ty::Opaque(..) => \"opaque type\",\n+                    _ => \"\",\n+                };\n+                match t.kind {\n+                    ty::Closure(def_id, _) | ty::Opaque(def_id, _) => {\n+                        let span = self.tcx.def_span(def_id);\n+                        debug!(\"note_type_err visit_ty {:?}\", span.macro_backtrace());\n+                        if !self.ignore_span.overlaps(span)\n+                            && !self.expected.values().any(|exp| exp.iter().any(|sp| *sp == span))\n+                        {\n+                            let entry = self.types.entry(kind).or_default();\n+                            entry.insert(span);\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+                t.super_visit_with(self)\n+            }\n+        }\n+\n         debug!(\"note_type_err(diag={:?})\", diag);\n         let (expected_found, exp_found, is_simple_error) = match values {\n             None => (None, None, false),\n@@ -1306,6 +1389,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     ValuePairs::Types(exp_found) => {\n                         let is_simple_err =\n                             exp_found.expected.is_simple_text() && exp_found.found.is_simple_text();\n+                        OpaqueTypesVisitor::visit_expected_found(\n+                            self.tcx,\n+                            exp_found.expected,\n+                            exp_found.found,\n+                            span,\n+                        )\n+                        .report(diag);\n \n                         (is_simple_err, Some(exp_found))\n                     }\n@@ -1323,8 +1413,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let span = cause.span(self.tcx);\n-\n         // Ignore msg for object safe coercion\n         // since E0038 message will be printed\n         match terr {\n@@ -1336,7 +1424,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-\n         if let Some((expected, found)) = expected_found {\n             let expected_label = exp_found.map_or(\"type\".into(), |ef| ef.expected.prefix_string());\n             let found_label = exp_found.map_or(\"type\".into(), |ef| ef.found.prefix_string());"}, {"sha": "00ad00cf1b24c3a21ca41358be1066c89f17646a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -4743,14 +4743,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .join(\", \");\n                 }\n                 Some(Node::Expr(hir::Expr {\n-                    kind: ExprKind::Closure(_, _, body_id, closure_span, _),\n+                    kind: ExprKind::Closure(_, _, body_id, _, _),\n                     span: full_closure_span,\n                     ..\n                 })) => {\n                     if *full_closure_span == expr.span {\n                         return false;\n                     }\n-                    err.span_label(*closure_span, \"closure defined here\");\n                     msg = \"call this closure\";\n                     let body = hir.body(*body_id);\n                     sugg_call = body"}, {"sha": "5bf10e00892076ec4f75e5e5cdb9deb78f1c8ac9", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n+LL | async fn make_u32() -> u32 {\n+   |                        --- in the desugared `async fn`, this is the found opaque type\n+...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |"}, {"sha": "43366e6bbbfabcca7d25fed525d07c34e5302817", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n+LL | async fn make_u32() -> u32 {\n+   |                        --- in the desugared `async fn`, this is the found opaque type\n+...\n LL |         take_u32(x)\n    |                  ^\n    |                  |"}, {"sha": "c7fcbdd8138c18ba91b9d7f04f12daac2cc03744", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:13:14\n    |\n+LL | async fn make_u32() -> u32 {\n+   |                        --- in the desugared `async fn`, this is the found opaque type\n+...\n LL |     take_u32(x)\n    |              ^\n    |              |"}, {"sha": "16727b58e1ff607062db5e2b7db23351ecba3583", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/closure-reform-bad.rs:11:15\n    |\n+LL |     let f = |s: &str| println!(\"{}{}\", s, string);\n+   |             ------------------------------------- this is the found closure\n LL |     call_bare(f)\n    |               ^ expected fn pointer, found closure\n    |"}, {"sha": "4e1880f31dc2aeb7e9a370460ced1f8667a09b6a", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18\n    |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo {\n+   |                          -------- this is the found opaque type\n+...\n LL |     let _: u32 = hide(0_u32);\n    |            ---   ^^^^^^^^^^^ expected `u32`, found opaque type\n    |            |\n@@ -12,6 +15,9 @@ LL |     let _: u32 = hide(0_u32);\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:31:18\n    |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo {\n+   |                          -------- this is the found opaque type\n+...\n LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |            ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n    |            |\n@@ -25,6 +31,9 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10\n    |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo {\n+   |                          -------- this is the expected opaque type\n+...\n LL |     x = (x.1,\n    |          ^^^ expected `u32`, found `i32`\n    |\n@@ -34,6 +43,9 @@ LL |     x = (x.1,\n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:41:10\n    |\n+LL | fn hide<T: Foo>(x: T) -> impl Foo {\n+   |                          -------- this is the expected opaque type\n+...\n LL |          x.0);\n    |          ^^^ expected `i32`, found `u32`\n    |"}, {"sha": "670bf57067b5652c5fa8a65a4100440ed8f6e417", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-24036.rs:3:9\n    |\n+LL |     let mut x = |c| c + 1;\n+   |                 --------- this is the expected closure\n LL |     x = |c| c + 1;\n    |         ^^^^^^^^^ expected closure, found a different closure\n    |"}, {"sha": "5b18c239b6ee34ed2675164ffd9eca3e742bab0b", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -236,7 +236,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n    |\n LL |     let closure = || 42;\n-   |                   -- closure defined here\n+   |                   ----- this is the found closure\n LL |     let _: usize = closure;\n    |            -----   ^^^^^^^\n    |            |       |"}, {"sha": "3a7ea2bcdd2a4fbf6e58a942692d50d6bc2f9b05", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n+LL |   fn thing_two() -> impl Future<Output = Result<(), ()>> {\n+   |                     ------------------------------------ this is the found opaque type\n+...\n LL | /     if true {\n LL | |         thing_one()\n    | |         ----------- expected because of this"}, {"sha": "182a3c7e81e60cfd228fb3d6a43122fe9c9c304c", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -11,6 +11,9 @@ LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n    |            |\n    |            expected due to this\n+...\n+LL | type WrongGeneric<T> = impl 'static;\n+   | ------------------------------------ this is the found opaque type\n    |\n    = note:     expected type `i32`\n            found opaque type `WrongGeneric::<&{integer}>`"}, {"sha": "b061ec3fff8f44e3d27ea762b046d95ce80a1334", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -11,6 +11,9 @@ LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n    |            |\n    |            expected due to this\n+...\n+LL | type WrongGeneric<T> = impl 'static;\n+   | ------------------------------------ this is the found opaque type\n    |\n    = note:     expected type `i32`\n            found opaque type `WrongGeneric::<&{integer}>`"}, {"sha": "415ac4bbdcba700dea9ae324a78973423e327db9", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/never_reveal_concrete_type.rs:13:27\n    |\n+LL | type NoReveal = impl std::fmt::Debug;\n+   | ------------------------------------- this is the found opaque type\n+...\n LL |     let _: &'static str = x;\n    |            ------------   ^ expected `&str`, found opaque type\n    |            |"}, {"sha": "3e67dc90dcb5c383e324b2b013f9c8acddc4b672", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0000cacac904a9b04c64ca349f54169b98f60a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=9c0000cacac904a9b04c64ca349f54169b98f60a", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:15:19\n    |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |     -------------------------------------- this is the found opaque type\n+...\n LL |     let _: &str = bomp();\n    |            ----   ^^^^^^ expected `&str`, found opaque type\n    |            |\n@@ -12,6 +15,9 @@ LL |     let _: &str = bomp();\n error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:19:5\n    |\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |     -------------------------------------- this is the expected opaque type\n+...\n LL | fn bomp() -> boo::Boo {\n    |              -------- expected `Boo` because of return type\n LL |     \"\""}]}