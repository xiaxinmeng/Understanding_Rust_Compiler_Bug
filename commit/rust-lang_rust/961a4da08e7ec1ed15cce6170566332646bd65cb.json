{"sha": "961a4da08e7ec1ed15cce6170566332646bd65cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MWE0ZGEwOGU3ZWMxZWQxNWNjZTYxNzA1NjYzMzI2NDZiZDY1Y2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-29T21:29:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T23:26:46Z"}, "message": "Stabilize bind_by_move_pattern_guards in 1.39.0.", "tree": {"sha": "d50f7f49ac27969eeb2cdd654bbe083a3a2f247b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d50f7f49ac27969eeb2cdd654bbe083a3a2f247b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961a4da08e7ec1ed15cce6170566332646bd65cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961a4da08e7ec1ed15cce6170566332646bd65cb", "html_url": "https://github.com/rust-lang/rust/commit/961a4da08e7ec1ed15cce6170566332646bd65cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961a4da08e7ec1ed15cce6170566332646bd65cb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a5ff4222e1f217ac14331afd59f82ec4204d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a5ff4222e1f217ac14331afd59f82ec4204d12", "html_url": "https://github.com/rust-lang/rust/commit/43a5ff4222e1f217ac14331afd59f82ec4204d12"}], "stats": {"total": 95, "additions": 6, "deletions": 89}, "files": [{"sha": "1b4b56082a696ba4d13707463a87db08ffc719f8", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 86, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/961a4da08e7ec1ed15cce6170566332646bd65cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961a4da08e7ec1ed15cce6170566332646bd65cb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=961a4da08e7ec1ed15cce6170566332646bd65cb", "patch": "@@ -5,11 +5,6 @@ use super::_match::WitnessPreference::*;\n use super::{Pattern, PatternContext, PatternError, PatternKind};\n \n use rustc::middle::borrowck::SignalledError;\n-use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n-use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n-use rustc::middle::expr_use_visitor as euv;\n-use rustc::middle::mem_categorization::cmt_;\n-use rustc::middle::region;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -36,9 +31,7 @@ crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) -> SignalledError {\n \n     let mut visitor = MatchVisitor {\n         tcx,\n-        body_owner: def_id,\n         tables: tcx.body_tables(body_id),\n-        region_scope_tree: &tcx.region_scope_tree(def_id),\n         param_env: tcx.param_env(def_id),\n         identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n         signalled_error: SignalledError::NoErrorsSeen,\n@@ -53,11 +46,9 @@ fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBu\n \n struct MatchVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    body_owner: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     identity_substs: SubstsRef<'tcx>,\n-    region_scope_tree: &'a region::ScopeTree,\n     signalled_error: SignalledError,\n }\n \n@@ -151,11 +142,8 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n             // Second, if there is a guard on each arm, make sure it isn't\n             // assigning or borrowing anything mutably.\n-            if let Some(ref guard) = arm.guard {\n+            if arm.guard.is_some() {\n                 self.signalled_error = SignalledError::SawSomeError;\n-                if !self.tcx.features().bind_by_move_pattern_guards {\n-                    check_for_mutation_in_guard(self, &guard);\n-                }\n             }\n \n             // Third, perform some lints.\n@@ -582,19 +570,10 @@ fn check_legality_of_move_bindings(\n                              \"cannot bind by-move with sub-bindings\")\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n-        } else if has_guard {\n-            if !cx.tcx.features().bind_by_move_pattern_guards {\n-                let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n-                                            \"cannot bind by-move into a pattern guard\");\n-                err.span_label(p.span, \"moves value into pattern guard\");\n-                if cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n-                    err.help(\"add `#![feature(bind_by_move_pattern_guards)]` to the \\\n-                            crate attributes to enable\");\n-                }\n-                err.emit();\n+        } else if !has_guard {\n+            if let Some(_by_ref_span) = by_ref_span {\n+                span_vec.push(p.span);\n             }\n-        } else if let Some(_by_ref_span) = by_ref_span {\n-            span_vec.push(p.span);\n         }\n     };\n \n@@ -636,67 +615,6 @@ fn check_legality_of_move_bindings(\n     }\n }\n \n-/// Ensures that a pattern guard doesn't borrow by mutable reference or assign.\n-//\n-// FIXME: this should be done by borrowck.\n-fn check_for_mutation_in_guard(cx: &MatchVisitor<'_, '_>, guard: &hir::Guard) {\n-    let mut checker = MutationChecker {\n-        cx,\n-    };\n-    match guard {\n-        hir::Guard::If(expr) =>\n-            ExprUseVisitor::new(&mut checker,\n-                                cx.tcx,\n-                                cx.body_owner,\n-                                cx.param_env,\n-                                cx.region_scope_tree,\n-                                cx.tables,\n-                                None).walk_expr(expr),\n-    };\n-}\n-\n-struct MutationChecker<'a, 'tcx> {\n-    cx: &'a MatchVisitor<'a, 'tcx>,\n-}\n-\n-impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n-    fn matched_pat(&mut self, _: &Pat, _: &cmt_<'_>, _: euv::MatchMode) {}\n-    fn consume(&mut self, _: hir::HirId, _: Span, _: &cmt_<'_>, _: ConsumeMode) {}\n-    fn consume_pat(&mut self, _: &Pat, _: &cmt_<'_>, _: ConsumeMode) {}\n-    fn borrow(&mut self,\n-              _: hir::HirId,\n-              span: Span,\n-              _: &cmt_<'_>,\n-              _: ty::Region<'tcx>,\n-              kind:ty:: BorrowKind,\n-              _: LoanCause) {\n-        match kind {\n-            ty::MutBorrow => {\n-                let mut err = struct_span_err!(self.cx.tcx.sess, span, E0301,\n-                          \"cannot mutably borrow in a pattern guard\");\n-                err.span_label(span, \"borrowed mutably in pattern guard\");\n-                if self.cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n-                    err.help(\"add `#![feature(bind_by_move_pattern_guards)]` to the \\\n-                              crate attributes to enable\");\n-                }\n-                err.emit();\n-            }\n-            ty::ImmBorrow | ty::UniqueImmBorrow => {}\n-        }\n-    }\n-    fn decl_without_init(&mut self, _: hir::HirId, _: Span) {}\n-    fn mutate(&mut self, _: hir::HirId, span: Span, _: &cmt_<'_>, mode: MutateMode) {\n-        match mode {\n-            MutateMode::JustWrite | MutateMode::WriteAndRead => {\n-                struct_span_err!(self.cx.tcx.sess, span, E0302, \"cannot assign in a pattern guard\")\n-                    .span_label(span, \"assignment in pattern guard\")\n-                    .emit();\n-            }\n-            MutateMode::Init => {}\n-        }\n-    }\n-}\n-\n /// Forbids bindings in `@` patterns. This is necessary for memory safety,\n /// because of the way rvalues are handled in the borrow check. (See issue\n /// #14587.)"}, {"sha": "eff9f90a8619e29d4ae697d28a021b9d21e34cce", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/961a4da08e7ec1ed15cce6170566332646bd65cb/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961a4da08e7ec1ed15cce6170566332646bd65cb/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=961a4da08e7ec1ed15cce6170566332646bd65cb", "patch": "@@ -241,6 +241,8 @@ declare_features! (\n     (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n     /// Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n     (accepted, async_await, \"1.39.0\", Some(50547), None),\n+    /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n+    (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "dd78777b569863682447c81383ebd7f2d41ecd51", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/961a4da08e7ec1ed15cce6170566332646bd65cb/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961a4da08e7ec1ed15cce6170566332646bd65cb/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=961a4da08e7ec1ed15cce6170566332646bd65cb", "patch": "@@ -461,9 +461,6 @@ declare_features! (\n     /// Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n-    (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n-\n     /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n     (active, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n "}]}