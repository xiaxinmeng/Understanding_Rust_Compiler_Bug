{"sha": "86f4f68b70fb743d05778e88a44bb1259a03e3df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZjRmNjhiNzBmYjc0M2QwNTc3OGU4OGE0NGJiMTI1OWEwM2UzZGY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-07-30T04:24:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-07-30T04:24:10Z"}, "message": "Improve handling of invalid references in `format!()`", "tree": {"sha": "0300c9a8e30bd02bf9ef4d4639e759c307403e2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0300c9a8e30bd02bf9ef4d4639e759c307403e2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86f4f68b70fb743d05778e88a44bb1259a03e3df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86f4f68b70fb743d05778e88a44bb1259a03e3df", "html_url": "https://github.com/rust-lang/rust/commit/86f4f68b70fb743d05778e88a44bb1259a03e3df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86f4f68b70fb743d05778e88a44bb1259a03e3df/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "159dcb2194e6af28e070f15b9a69af354f87d6d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/159dcb2194e6af28e070f15b9a69af354f87d6d6", "html_url": "https://github.com/rust-lang/rust/commit/159dcb2194e6af28e070f15b9a69af354f87d6d6"}], "stats": {"total": 100, "additions": 82, "deletions": 18}, "files": [{"sha": "3e0588d03eb01573c7bbcbfe1254f55b5d294ae4", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/86f4f68b70fb743d05778e88a44bb1259a03e3df/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f4f68b70fb743d05778e88a44bb1259a03e3df/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=86f4f68b70fb743d05778e88a44bb1259a03e3df", "patch": "@@ -275,19 +275,18 @@ impl<'a, 'b> Context<'a, 'b> {\n         } else {\n             MultiSpan::from_span(self.fmtsp)\n         };\n-        let refs_len = self.invalid_refs.len();\n-        let mut refs = self\n+        let refs = self\n             .invalid_refs\n             .iter()\n             .map(|(r, pos)| (r.to_string(), self.arg_spans.get(*pos)));\n \n         let mut zero_based_note = false;\n \n-        if self.names.is_empty() && !numbered_position_args {\n-            let count = self.pieces.len() + self.arg_with_formatting\n-                .iter()\n-                .filter(|fmt| fmt.precision_span.is_some())\n-                .count();\n+        let count = self.pieces.len() + self.arg_with_formatting\n+            .iter()\n+            .filter(|fmt| fmt.precision_span.is_some())\n+            .count();\n+        if self.names.is_empty() && !numbered_position_args && count != self.args.len() {\n             e = self.ecx.mut_span_err(\n                 sp,\n                 &format!(\n@@ -298,14 +297,22 @@ impl<'a, 'b> Context<'a, 'b> {\n                 ),\n             );\n         } else {\n-            let (arg_list, mut sp) = if refs_len == 1 {\n-                let (reg, pos) = refs.next().unwrap();\n+            let (mut refs, spans): (Vec<_>, Vec<_>) = refs.unzip();\n+            // Avoid `invalid reference to positional arguments 7 and 7 (there is 1 argument)`\n+            // for `println!(\"{7:7$}\", 1);`\n+            refs.dedup();\n+            refs.sort();\n+            let (arg_list, mut sp) = if refs.len() == 1 {\n+                let spans: Vec<_> = spans.into_iter().filter_map(|sp| sp.map(|sp| *sp)).collect();\n                 (\n-                    format!(\"argument {}\", reg),\n-                    MultiSpan::from_span(*pos.unwrap_or(&self.fmtsp)),\n+                    format!(\"argument {}\", refs[0]),\n+                    if spans.is_empty() {\n+                        MultiSpan::from_span(self.fmtsp)\n+                    } else {\n+                        MultiSpan::from_spans(spans)\n+                    },\n                 )\n             } else {\n-                let (mut refs, spans): (Vec<_>, Vec<_>) = refs.unzip();\n                 let pos = MultiSpan::from_spans(spans.into_iter().map(|s| *s.unwrap()).collect());\n                 let reg = refs.pop().unwrap();\n                 (\n@@ -754,7 +761,21 @@ impl<'a, 'b> Context<'a, 'b> {\n                     \"x\" => \"LowerHex\",\n                     \"X\" => \"UpperHex\",\n                     _ => {\n-                        ecx.span_err(sp, &format!(\"unknown format trait `{}`\", *tyname));\n+                        let mut err = ecx.struct_span_err(\n+                            sp,\n+                            &format!(\"unknown format trait `{}`\", *tyname),\n+                        );\n+                        err.note(\"the only appropriate formatting traits are:\\n\\\n+                                  - ``, which uses the `Display` trait\\n\\\n+                                  - `?`, which uses the `Debug` trait\\n\\\n+                                  - `e`, which uses the `LowerExp` trait\\n\\\n+                                  - `E`, which uses the `UpperExp` trait\\n\\\n+                                  - `o`, which uses the `Octal` trait\\n\\\n+                                  - `p`, which uses the `Pointer` trait\\n\\\n+                                  - `b`, which uses the `Binary` trait\\n\\\n+                                  - `x`, which uses the `LowerHex` trait\\n\\\n+                                  - `X`, which uses the `UpperHex` trait\");\n+                        err.emit();\n                         return DummyResult::raw_expr(sp, true);\n                     }\n                 }"}, {"sha": "ba897f171af25aa3c0ba5a28e820b0bcb66d0d10", "filename": "src/test/ui/if/ifmt-bad-arg.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86f4f68b70fb743d05778e88a44bb1259a03e3df/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f4f68b70fb743d05778e88a44bb1259a03e3df/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs?ref=86f4f68b70fb743d05778e88a44bb1259a03e3df", "patch": "@@ -82,5 +82,8 @@ tenth number: {}\",\n     //~^ ERROR 4 positional arguments in format string, but there are 3 arguments\n     //~| ERROR mismatched types\n     println!(\"{} {:07$} {}\", 1, 3.2, 4);\n-    //~^ ERROR 3 positional arguments in format string, but there are 3 arguments\n+    //~^ ERROR invalid reference to positional argument 7 (there are 3 arguments)\n+    println!(\"{:foo}\", 1); //~ ERROR unknown format trait `foo`\n+    println!(\"{5} {:4$} {6:7$}\", 1);\n+    //~^ ERROR invalid reference to positional arguments 4, 5, 6 and 7 (there is 1 argument)\n }"}, {"sha": "0de0c53f5369a38982c0a0f8f9915334e70e57f7", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/86f4f68b70fb743d05778e88a44bb1259a03e3df/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86f4f68b70fb743d05778e88a44bb1259a03e3df/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=86f4f68b70fb743d05778e88a44bb1259a03e3df", "patch": "@@ -243,17 +243,46 @@ LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n-error: 3 positional arguments in format string, but there are 3 arguments\n-  --> $DIR/ifmt-bad-arg.rs:84:15\n+error: invalid reference to positional argument 7 (there are 3 arguments)\n+  --> $DIR/ifmt-bad-arg.rs:84:18\n    |\n LL |     println!(\"{} {:07$} {}\", 1, 3.2, 4);\n-   |               ^^ ^^---^ ^^\n+   |                  ^^---^\n    |                    |\n    |                    this width flag expects an `usize` argument at position 7, but there are 3 arguments\n    |\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n+error: unknown format trait `foo`\n+  --> $DIR/ifmt-bad-arg.rs:86:24\n+   |\n+LL |     println!(\"{:foo}\", 1);\n+   |                        ^\n+   |\n+   = note: the only appropriate formatting traits are:\n+           - ``, which uses the `Display` trait\n+           - `?`, which uses the `Debug` trait\n+           - `e`, which uses the `LowerExp` trait\n+           - `E`, which uses the `UpperExp` trait\n+           - `o`, which uses the `Octal` trait\n+           - `p`, which uses the `Pointer` trait\n+           - `b`, which uses the `Binary` trait\n+           - `x`, which uses the `LowerHex` trait\n+           - `X`, which uses the `UpperHex` trait\n+\n+error: invalid reference to positional arguments 4, 5, 6 and 7 (there is 1 argument)\n+  --> $DIR/ifmt-bad-arg.rs:87:15\n+   |\n+LL |     println!(\"{5} {:4$} {6:7$}\", 1);\n+   |               ^^^ ^^--^ ^^^--^\n+   |                     |      |\n+   |                     |      this width flag expects an `usize` argument at position 7, but there is 1 argument\n+   |                     this width flag expects an `usize` argument at position 4, but there is 1 argument\n+   |\n+   = note: positional arguments are zero-based\n+   = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n+\n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32\n    |\n@@ -272,6 +301,6 @@ LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    = note: expected type `&usize`\n               found type `&{float}`\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 35 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "7853b5ca0c9a6c642bf27d11bdad689e07399c5a", "filename": "src/test/ui/if/ifmt-unknown-trait.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86f4f68b70fb743d05778e88a44bb1259a03e3df/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86f4f68b70fb743d05778e88a44bb1259a03e3df/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-unknown-trait.stderr?ref=86f4f68b70fb743d05778e88a44bb1259a03e3df", "patch": "@@ -3,6 +3,17 @@ error: unknown format trait `notimplemented`\n    |\n LL |     format!(\"{:notimplemented}\", \"3\");\n    |                                  ^^^\n+   |\n+   = note: the only appropriate formatting traits are:\n+           - ``, which uses the `Display` trait\n+           - `?`, which uses the `Debug` trait\n+           - `e`, which uses the `LowerExp` trait\n+           - `E`, which uses the `UpperExp` trait\n+           - `o`, which uses the `Octal` trait\n+           - `p`, which uses the `Pointer` trait\n+           - `b`, which uses the `Binary` trait\n+           - `x`, which uses the `LowerHex` trait\n+           - `X`, which uses the `UpperHex` trait\n \n error: aborting due to previous error\n "}]}