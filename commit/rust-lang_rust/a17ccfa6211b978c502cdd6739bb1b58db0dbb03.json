{"sha": "a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "node_id": "C_kwDOAAsO6NoAKGExN2NjZmE2MjExYjk3OGM1MDJjZGQ2NzM5YmIxYjU4ZGIwZGJiMDM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-27T10:45:02Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-27T11:06:08Z"}, "message": "Accept `TyCtxt` instead of `TyCtxtAt` in `Ty::is_*` functions\n\nFunctions in answer:\n\n- `Ty::is_freeze`\n- `Ty::is_sized`\n- `Ty::is_unpin`\n- `Ty::is_copy_modulo_regions`", "tree": {"sha": "b7f4c86ce1613f93b41c716fcb6b86ec20c3e161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7f4c86ce1613f93b41c716fcb6b86ec20c3e161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "html_url": "https://github.com/rust-lang/rust/commit/a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "html_url": "https://github.com/rust-lang/rust/commit/44fcfb0a9606fa08ea293a71f2e6d470227ef9df"}], "stats": {"total": 120, "additions": 51, "deletions": 69}, "files": [{"sha": "074aca9251c8d503140b0d675e091e2d25d6fb5f", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -1776,7 +1776,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // `Sized` bound in no way depends on precise regions, so this\n         // shouldn't affect `is_sized`.\n         let erased_ty = tcx.erase_regions(ty);\n-        if !erased_ty.is_sized(tcx.at(span), self.param_env) {\n+        if !erased_ty.is_sized(tcx, self.param_env) {\n             // in current MIR construction, all non-control-flow rvalue\n             // expressions evaluate through `as_temp` or `into` a return\n             // slot or local, so to find all unsized rvalues it is enough"}, {"sha": "bdc6a91cf6ab5f411cd61602e2920212dfb228eb", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -5,7 +5,6 @@ use crate::common::TypeKind;\n use crate::mir::place::PlaceRef;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{ArgAbi, CastTarget, FnAbi, Reg};\n use rustc_target::abi::{AddressSpace, Integer};\n \n@@ -75,16 +74,16 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n \n     fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_sized(self.tcx().at(DUMMY_SP), ty::ParamEnv::reveal_all())\n+        ty.is_sized(self.tcx(), ty::ParamEnv::reveal_all())\n     }\n \n     fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(self.tcx().at(DUMMY_SP), ty::ParamEnv::reveal_all())\n+        ty.is_freeze(self.tcx(), ty::ParamEnv::reveal_all())\n     }\n \n     fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {\n         let param_env = ty::ParamEnv::reveal_all();\n-        if ty.is_sized(self.tcx().at(DUMMY_SP), param_env) {\n+        if ty.is_sized(self.tcx(), param_env) {\n             return false;\n         }\n "}, {"sha": "f4da11883957a73f0376d35c2202c659a2d1a8ab", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -212,7 +212,7 @@ fn create_pointee_place<'tcx>(\n ) -> MPlaceTy<'tcx> {\n     let tcx = ecx.tcx.tcx;\n \n-    if !ty.is_sized(ecx.tcx, ty::ParamEnv::empty()) {\n+    if !ty.is_sized(*ecx.tcx, ty::ParamEnv::empty()) {\n         // We need to create `Allocation`s for custom DSTs\n \n         let (unsized_inner_ty, num_elems) = get_info_on_unsized_field(ty, valtree, tcx);\n@@ -398,7 +398,7 @@ fn valtree_into_mplace<'tcx>(\n \n                 let mut place_inner = match ty.kind() {\n                     ty::Str | ty::Slice(_) => ecx.mplace_index(&place, i as u64).unwrap(),\n-                    _ if !ty.is_sized(ecx.tcx, ty::ParamEnv::empty())\n+                    _ if !ty.is_sized(*ecx.tcx, ty::ParamEnv::empty())\n                         && i == branches.len() - 1 =>\n                     {\n                         // Note: For custom DSTs we need to manually process the last unsized field."}, {"sha": "a9063ad31cfe65c8b9d631888538b076eeeb9cdd", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -468,7 +468,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline]\n     pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(self.tcx, self.param_env)\n+        ty.is_freeze(*self.tcx, self.param_env)\n     }\n \n     pub fn load_mir("}, {"sha": "79f981797a8946c9714495f1a1b6dcd032361df7", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -114,7 +114,7 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval:\n     if let InternMode::Static(mutability) = mode {\n         // For this, we need to take into account `UnsafeCell`. When `ty` is `None`, we assume\n         // no interior mutability.\n-        let frozen = ty.map_or(true, |ty| ty.is_freeze(ecx.tcx, ecx.param_env));\n+        let frozen = ty.map_or(true, |ty| ty.is_freeze(*ecx.tcx, ecx.param_env));\n         // For statics, allocation mutability is the combination of place mutability and\n         // type mutability.\n         // The entire allocation needs to be mutable if it contains an `UnsafeCell` anywhere."}, {"sha": "8aa56c275d91b93c51b1618c87687a9146ca57c7", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -15,7 +15,6 @@ use rustc_middle::mir::interpret::InterpError;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::DUMMY_SP;\n use rustc_target::abi::{Abi, Scalar as ScalarAbi, Size, VariantIdx, Variants, WrappingRange};\n \n use std::hash::Hash;\n@@ -726,7 +725,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n     ) -> InterpResult<'tcx> {\n         // Special check preventing `UnsafeCell` inside unions in the inner part of constants.\n         if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. })) {\n-            if !op.layout.ty.is_freeze(self.ecx.tcx.at(DUMMY_SP), self.ecx.param_env) {\n+            if !op.layout.ty.is_freeze(*self.ecx.tcx, self.ecx.param_env) {\n                 throw_validation_failure!(self.path, { \"`UnsafeCell` in a `const`\" });\n             }\n         }"}, {"sha": "335992342a64756e393398380fea985ca93cbf6b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -8,7 +8,6 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n-use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::{\n     self, ImplSource, Obligation, ObligationCause, SelectionContext,\n };\n@@ -92,7 +91,7 @@ impl Qualif for HasMutInterior {\n     }\n \n     fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n-        !ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env)\n+        !ty.is_freeze(cx.tcx, cx.param_env)\n     }\n \n     fn in_adt_inherently<'tcx>("}, {"sha": "805e6096b35c8577c2a033d3f999f26c462c5a55", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::mir::{self, BasicBlock, Local, Location, Statement, StatementK\n use rustc_mir_dataflow::fmt::DebugWithContext;\n use rustc_mir_dataflow::JoinSemiLattice;\n use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces};\n-use rustc_span::DUMMY_SP;\n \n use std::fmt;\n use std::marker::PhantomData;\n@@ -120,10 +119,7 @@ where\n     ///\n     /// [rust-lang/unsafe-code-guidelines#134]: https://github.com/rust-lang/unsafe-code-guidelines/issues/134\n     fn shared_borrow_allows_mutation(&self, place: mir::Place<'tcx>) -> bool {\n-        !place\n-            .ty(self.ccx.body, self.ccx.tcx)\n-            .ty\n-            .is_freeze(self.ccx.tcx.at(DUMMY_SP), self.ccx.param_env)\n+        !place.ty(self.ccx.body, self.ccx.tcx).ty.is_freeze(self.ccx.tcx, self.ccx.param_env)\n     }\n }\n "}, {"sha": "81b82a21fa1a7276796672a3980784bad79869ed", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -235,9 +235,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             // `Operand::Copy` is only supposed to be used with `Copy` types.\n             if let Operand::Copy(place) = operand {\n                 let ty = place.ty(&self.body.local_decls, self.tcx).ty;\n-                let span = self.body.source_info(location).span;\n \n-                if !ty.is_copy_modulo_regions(self.tcx.at(span), self.param_env) {\n+                if !ty.is_copy_modulo_regions(self.tcx, self.param_env) {\n                     self.fail(location, format!(\"`Operand::Copy` with non-`Copy` type {}\", ty));\n                 }\n             }"}, {"sha": "0bdd509e621ff3a96c5ec8cec4c73855ca286069", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -114,7 +114,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                 _ => {\n                     // Fallback case: allow `ManuallyDrop` and things that are `Copy`.\n                     ty.ty_adt_def().is_some_and(|adt_def| adt_def.is_manually_drop())\n-                        || ty.is_copy_modulo_regions(tcx.at(span), param_env)\n+                        || ty.is_copy_modulo_regions(tcx, param_env)\n                 }\n             }\n         }"}, {"sha": "17c4d0d482f2ab0b2a72e58c27aad8717f3decff", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n     fn is_thin_ptr_ty(&self, ty: Ty<'tcx>) -> bool {\n         // Type still may have region variables, but `Sized` does not depend\n         // on those, so just erase them before querying.\n-        if ty.is_sized(self.tcx.at(DUMMY_SP), self.param_env) {\n+        if ty.is_sized(self.tcx, self.param_env) {\n             return true;\n         }\n         if let ty::Foreign(..) = ty.kind() {\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n \n         // Check that the type implements Copy. The only case where this can\n         // possibly fail is for SIMD types which don't #[derive(Copy)].\n-        if !ty.is_copy_modulo_regions(self.tcx.at(expr.span), self.param_env) {\n+        if !ty.is_copy_modulo_regions(self.tcx, self.param_env) {\n             let msg = \"arguments for inline assembly must be copyable\";\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n             err.note(&format!(\"`{ty}` does not implement the Copy trait\"));"}, {"sha": "2617b60ec3094df11be3b8c8605d53cf4640e010", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -752,7 +752,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n             return;\n         }\n         let param_env = ty::ParamEnv::empty();\n-        if ty.is_copy_modulo_regions(cx.tcx.at(item.span), param_env) {\n+        if ty.is_copy_modulo_regions(cx.tcx, param_env) {\n             return;\n         }\n         if can_type_implement_copy("}, {"sha": "05957b57408bed71b76a32db9abcf83fdc764863", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, Symbol, DUMMY_SP};\n+use rustc_span::{Span, Symbol};\n use rustc_target::abi::{Abi, WrappingRange};\n use rustc_target::abi::{Integer, TagEncoding, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n@@ -931,7 +931,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match *ty.kind() {\n             ty::Adt(def, substs) => {\n                 if def.is_box() && matches!(self.mode, CItemKind::Definition) {\n-                    if ty.boxed_ty().is_sized(tcx.at(DUMMY_SP), self.cx.param_env) {\n+                    if ty.boxed_ty().is_sized(tcx, self.cx.param_env) {\n                         return FfiSafe;\n                     } else {\n                         return FfiUnsafe {\n@@ -1082,7 +1082,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::RawPtr(ty::TypeAndMut { ty, .. }) | ty::Ref(_, ty, _)\n                 if {\n                     matches!(self.mode, CItemKind::Definition)\n-                        && ty.is_sized(self.cx.tcx.at(DUMMY_SP), self.cx.param_env)\n+                        && ty.is_sized(self.cx.tcx, self.cx.param_env)\n                 } =>\n             {\n                 FfiSafe"}, {"sha": "3312f44c67b2a884319601a67df751396701b1f5", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -830,7 +830,7 @@ where\n                 } else {\n                     match mt {\n                         hir::Mutability::Not => {\n-                            if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {\n+                            if ty.is_freeze(tcx, cx.param_env()) {\n                                 PointerKind::Frozen\n                             } else {\n                                 PointerKind::SharedMutable\n@@ -841,7 +841,7 @@ where\n                             // noalias, as another pointer to the structure can be obtained, that\n                             // is not based-on the original reference. We consider all !Unpin\n                             // types to be potentially self-referential here.\n-                            if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {\n+                            if ty.is_unpin(tcx, cx.param_env()) {\n                                 PointerKind::UniqueBorrowed\n                             } else {\n                                 PointerKind::UniqueBorrowedPinned"}, {"sha": "f72e236eda1332cd4013315af28a120909cdfbfb", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -2,7 +2,6 @@\n \n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::layout::IntegerExt;\n-use crate::ty::query::TyCtxtAt;\n use crate::ty::{\n     self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n     TypeVisitable,\n@@ -821,12 +820,8 @@ impl<'tcx> Ty<'tcx> {\n     /// does copies even when the type actually doesn't satisfy the\n     /// full requirements for the `Copy` trait (cc #29149) -- this\n     /// winds up being reported as an error during NLL borrow check.\n-    pub fn is_copy_modulo_regions(\n-        self,\n-        tcx_at: TyCtxtAt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-    ) -> bool {\n-        self.is_trivially_pure_clone_copy() || tcx_at.is_copy_raw(param_env.and(self))\n+    pub fn is_copy_modulo_regions(self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n+        self.is_trivially_pure_clone_copy() || tcx.is_copy_raw(param_env.and(self))\n     }\n \n     /// Checks whether values of this type `T` have a size known at\n@@ -835,8 +830,8 @@ impl<'tcx> Ty<'tcx> {\n     /// over-approximation in generic contexts, where one can have\n     /// strange rules like `<T as Foo<'static>>::Bar: Sized` that\n     /// actually carry lifetime requirements.\n-    pub fn is_sized(self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n-        self.is_trivially_sized(tcx_at.tcx) || tcx_at.is_sized_raw(param_env.and(self))\n+    pub fn is_sized(self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n+        self.is_trivially_sized(tcx) || tcx.is_sized_raw(param_env.and(self))\n     }\n \n     /// Checks whether values of this type `T` implement the `Freeze`\n@@ -846,8 +841,8 @@ impl<'tcx> Ty<'tcx> {\n     /// optimization as well as the rules around static values. Note\n     /// that the `Freeze` trait is not exposed to end users and is\n     /// effectively an implementation detail.\n-    pub fn is_freeze(self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n-        self.is_trivially_freeze() || tcx_at.is_freeze_raw(param_env.and(self))\n+    pub fn is_freeze(self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n+        self.is_trivially_freeze() || tcx.is_freeze_raw(param_env.and(self))\n     }\n \n     /// Fast path helper for testing if a type is `Freeze`.\n@@ -886,8 +881,8 @@ impl<'tcx> Ty<'tcx> {\n     }\n \n     /// Checks whether values of this type `T` implement the `Unpin` trait.\n-    pub fn is_unpin(self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n-        self.is_trivially_unpin() || tcx_at.is_unpin_raw(param_env.and(self))\n+    pub fn is_unpin(self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n+        self.is_trivially_unpin() || tcx.is_unpin_raw(param_env.and(self))\n     }\n \n     /// Fast path helper for testing if a type is `Unpin`."}, {"sha": "c8610af7038d7f2c2b089cfbf1658055bd2d8115", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -153,12 +153,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         if tcx.features().unsized_fn_params {\n             let ty = expr.ty;\n-            let span = expr.span;\n             let param_env = this.param_env;\n \n-            if !ty.is_sized(tcx.at(span), param_env) {\n+            if !ty.is_sized(tcx, param_env) {\n                 // !sized means !copy, so this is an unsized move\n-                assert!(!ty.is_copy_modulo_regions(tcx.at(span), param_env));\n+                assert!(!ty.is_copy_modulo_regions(tcx, param_env));\n \n                 // As described above, detect the case where we are passing a value of unsized\n                 // type, and that value is coming from the deref of a box."}, {"sha": "fb1ea9ed300ad4f8c87a02d6c32718c614ceca21", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                     };\n                     match borrow_kind {\n                         BorrowKind::Shallow | BorrowKind::Shared | BorrowKind::Unique => {\n-                            if !ty.is_freeze(self.tcx.at(pat.span), self.param_env) {\n+                            if !ty.is_freeze(self.tcx, self.param_env) {\n                                 self.requires_unsafe(pat.span, BorrowOfLayoutConstrainedField);\n                             }\n                         }\n@@ -457,9 +457,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 if visitor.found {\n                     match borrow_kind {\n                         BorrowKind::Shallow | BorrowKind::Shared | BorrowKind::Unique\n-                            if !self.thir[arg]\n-                                .ty\n-                                .is_freeze(self.tcx.at(self.thir[arg].span), self.param_env) =>\n+                            if !self.thir[arg].ty.is_freeze(self.tcx, self.param_env) =>\n                         {\n                             self.requires_unsafe(expr.span, BorrowOfLayoutConstrainedField)\n                         }"}, {"sha": "858129c742dc672037333af168c1743f19b6d537", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -1004,8 +1004,8 @@ fn maybe_point_at_variant<'a, 'p: 'a, 'tcx: 'a>(\n }\n \n /// Check if a by-value binding is by-value. That is, check if the binding's type is not `Copy`.\n-fn is_binding_by_move(cx: &MatchVisitor<'_, '_, '_>, hir_id: HirId, span: Span) -> bool {\n-    !cx.typeck_results.node_type(hir_id).is_copy_modulo_regions(cx.tcx.at(span), cx.param_env)\n+fn is_binding_by_move(cx: &MatchVisitor<'_, '_, '_>, hir_id: HirId) -> bool {\n+    !cx.typeck_results.node_type(hir_id).is_copy_modulo_regions(cx.tcx, cx.param_env)\n }\n \n /// Check that there are no borrow or move conflicts in `binding @ subpat` patterns.\n@@ -1031,7 +1031,7 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n \n     // Get the binding move, extract the mutability if by-ref.\n     let mut_outer = match typeck_results.extract_binding_mode(sess, pat.hir_id, pat.span) {\n-        Some(ty::BindByValue(_)) if is_binding_by_move(cx, pat.hir_id, pat.span) => {\n+        Some(ty::BindByValue(_)) if is_binding_by_move(cx, pat.hir_id) => {\n             // We have `x @ pat` where `x` is by-move. Reject all borrows in `pat`.\n             let mut conflicts_ref = Vec::new();\n             sub.each_binding(|_, hir_id, span, _| {\n@@ -1070,7 +1070,7 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n                 (Mutability::Mut, Mutability::Mut) => conflicts_mut_mut.push((span, name)), // 2x `ref mut`.\n                 _ => conflicts_mut_ref.push((span, name)), // `ref` + `ref mut` in either direction.\n             },\n-            Some(ty::BindByValue(_)) if is_binding_by_move(cx, hir_id, span) => {\n+            Some(ty::BindByValue(_)) if is_binding_by_move(cx, hir_id) => {\n                 conflicts_move.push((span, name)) // `ref mut?` + by-move conflict.\n             }\n             Some(ty::BindByValue(_)) | None => {} // `ref mut?` + by-copy is fine."}, {"sha": "ad12e011621173c7ebd6866e494dec164d136126", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -506,7 +506,7 @@ impl<'tcx> ConstToPat<'tcx> {\n                 // convert the dereferenced constant to a pattern that is the sub-pattern of the\n                 // deref pattern.\n                 _ => {\n-                    if !pointee_ty.is_sized(tcx.at(span), param_env) {\n+                    if !pointee_ty.is_sized(tcx, param_env) {\n                         // `tcx.deref_mir_constant()` below will ICE with an unsized type\n                         // (except slices, which are handled in a separate arm above).\n                         let msg = format!(\"cannot use unsized non-slice type `{}` in constant patterns\", pointee_ty);\n@@ -534,7 +534,7 @@ impl<'tcx> ConstToPat<'tcx> {\n             ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::FnDef(..) => {\n                 PatKind::Constant { value: cv }\n             }\n-            ty::RawPtr(pointee) if pointee.ty.is_sized(tcx.at(span), param_env) => {\n+            ty::RawPtr(pointee) if pointee.ty.is_sized(tcx, param_env) => {\n                 PatKind::Constant { value: cv }\n             }\n             // FIXME: these can have very surprising behaviour where optimization levels or other"}, {"sha": "f8f04214a2ca55a34255d458455c6ffa04b44479", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -312,7 +312,7 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n                             } else if !place\n                                 .ty(self.body, self.tcx)\n                                 .ty\n-                                .is_freeze(self.tcx.at(self.source_info.span), self.param_env)\n+                                .is_freeze(self.tcx, self.param_env)\n                             {\n                                 UnsafetyViolationDetails::BorrowOfLayoutConstrainedField\n                             } else {"}, {"sha": "4e4515888454b8a1038a583478ac845cbd868892", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -633,7 +633,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n         if !rvalue\n             .ty(&self.ecx.frame().body.local_decls, *self.ecx.tcx)\n-            .is_sized(self.ecx.tcx, self.param_env)\n+            .is_sized(*self.ecx.tcx, self.param_env)\n         {\n             // the interpreter doesn't support unsized locals (only unsized arguments),\n             // but rustc does (in a kinda broken way), so we have to skip them here"}, {"sha": "479c4e577d4e3aad83e0098e3c18764cd654af67", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -500,7 +500,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n         if !rvalue\n             .ty(&self.ecx.frame().body.local_decls, *self.ecx.tcx)\n-            .is_sized(self.ecx.tcx, self.param_env)\n+            .is_sized(*self.ecx.tcx, self.param_env)\n         {\n             // the interpreter doesn't support unsized locals (only unsized arguments),\n             // but rustc does (in a kinda broken way), so we have to skip them here"}, {"sha": "28b1c5a48099bc9d8c14d9b1456b263ea568f531", "filename": "compiler/rustc_mir_transform/src/deduce_param_attrs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location, Operand, Terminator, TerminatorKind, RETURN_PLACE};\n use rustc_middle::ty::{self, DeducedParamAttrs, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n-use rustc_span::DUMMY_SP;\n \n /// A visitor that determines which arguments have been mutated. We can't use the mutability field\n /// on LocalDecl for this because it has no meaning post-optimization.\n@@ -232,7 +231,7 @@ pub fn deduced_param_attrs<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx [Ded\n         body.local_decls.iter().skip(1).take(body.arg_count).enumerate().map(\n             |(arg_index, local_decl)| DeducedParamAttrs {\n                 read_only: !deduce_read_only.mutable_args.contains(arg_index)\n-                    && local_decl.ty.is_freeze(tcx.at(DUMMY_SP), ParamEnv::reveal_all()),\n+                    && local_decl.ty.is_freeze(tcx, ParamEnv::reveal_all()),\n             },\n         ),\n     );"}, {"sha": "4e8798b7a55d2a58c9680fae5a8c4329e2289ba4", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -312,7 +312,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n     let param_env = tcx.param_env(def_id);\n \n     let mut builder = CloneShimBuilder::new(tcx, def_id, self_ty);\n-    let is_copy = self_ty.is_copy_modulo_regions(tcx.at(builder.span), param_env);\n+    let is_copy = self_ty.is_copy_modulo_regions(tcx, param_env);\n \n     let dest = Place::return_place();\n     let src = tcx.mk_place_deref(Place::from(Local::new(1 + 0)));"}, {"sha": "6079a02d13743ac5c39ade380ae3447e916c3765", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -1067,7 +1067,7 @@ fn find_vtable_types_for_unsizing<'tcx>(\n     let ptr_vtable = |inner_source: Ty<'tcx>, inner_target: Ty<'tcx>| {\n         let param_env = ty::ParamEnv::reveal_all();\n         let type_has_metadata = |ty: Ty<'tcx>| -> bool {\n-            if ty.is_sized(tcx.at(DUMMY_SP), param_env) {\n+            if ty.is_sized(tcx, param_env) {\n                 return false;\n             }\n             let tail = tcx.struct_tail_erasing_lifetimes(ty, param_env);"}, {"sha": "a335f8e06bc944b1258a42043ae036530ae40932", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         let ty = self.resolve_vars_if_possible(ty);\n \n         if !(param_env, ty).needs_infer() {\n-            return ty.is_copy_modulo_regions(self.tcx.at(span), param_env);\n+            return ty.is_copy_modulo_regions(self.tcx, param_env);\n         }\n \n         let copy_def_id = self.tcx.require_lang_item(LangItem::Copy, None);"}, {"sha": "6436713b3881154043bf4288158472c3a2d28df5", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -4,7 +4,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt, TypeVisitable};\n-use rustc_span::{sym, DUMMY_SP};\n+use rustc_span::sym;\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n \n@@ -236,7 +236,7 @@ fn resolve_associated_item<'tcx>(\n                 if name == sym::clone {\n                     let self_ty = trait_ref.self_ty();\n \n-                    let is_copy = self_ty.is_copy_modulo_regions(tcx.at(DUMMY_SP), param_env);\n+                    let is_copy = self_ty.is_copy_modulo_regions(tcx, param_env);\n                     match self_ty.kind() {\n                         _ if is_copy => (),\n                         ty::Generator(..)"}, {"sha": "52ba0eee97cd5e4d526383e09bf240c0a6d298b2", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -399,7 +399,7 @@ fn layout_of_uncached<'tcx>(\n             }\n \n             let pointee = tcx.normalize_erasing_regions(param_env, pointee);\n-            if pointee.is_sized(tcx.at(DUMMY_SP), param_env) {\n+            if pointee.is_sized(tcx, param_env) {\n                 return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n             }\n \n@@ -755,8 +755,7 @@ fn layout_of_uncached<'tcx>(\n                 } else {\n                     let param_env = tcx.param_env(def.did());\n                     let last_field = def.variant(v).fields.last().unwrap();\n-                    let always_sized =\n-                        tcx.type_of(last_field.did).is_sized(tcx.at(DUMMY_SP), param_env);\n+                    let always_sized = tcx.type_of(last_field.did).is_sized(tcx, param_env);\n                     if !always_sized { StructKind::MaybeUnsized } else { StructKind::AlwaysSized }\n                 };\n "}, {"sha": "024dcd591bd77d68d321bb27a7016ee9b1b544e7", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17ccfa6211b978c502cdd6739bb1b58db0dbb03/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=a17ccfa6211b978c502cdd6739bb1b58db0dbb03", "patch": "@@ -109,7 +109,7 @@ where\n \n             for component in components {\n                 match *component.kind() {\n-                    _ if component.is_copy_modulo_regions(tcx.at(DUMMY_SP), self.param_env) => (),\n+                    _ if component.is_copy_modulo_regions(tcx, self.param_env) => (),\n \n                     ty::Closure(_, substs) => {\n                         queue_type(self, substs.as_closure().tupled_upvars_ty());"}]}