{"sha": "872bf09381751600de8e58aab65b1d2511c33223", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MmJmMDkzODE3NTE2MDBkZThlNThhYWI2NWIxZDI1MTFjMzMyMjM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-18T15:58:43Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-18T16:56:35Z"}, "message": "Add `MacroType` syntax", "tree": {"sha": "17cf18031eeed0e8990c439e8d47a758ad778ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17cf18031eeed0e8990c439e8d47a758ad778ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/872bf09381751600de8e58aab65b1d2511c33223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/872bf09381751600de8e58aab65b1d2511c33223", "html_url": "https://github.com/rust-lang/rust/commit/872bf09381751600de8e58aab65b1d2511c33223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/872bf09381751600de8e58aab65b1d2511c33223/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9daba961f236750c3a5d831c9775606271b37eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9daba961f236750c3a5d831c9775606271b37eff", "html_url": "https://github.com/rust-lang/rust/commit/9daba961f236750c3a5d831c9775606271b37eff"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "aac473191fe43b03dfeb25f8b559d8097547de7b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872bf09381751600de8e58aab65b1d2511c33223/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/872bf09381751600de8e58aab65b1d2511c33223/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=872bf09381751600de8e58aab65b1d2511c33223", "patch": "@@ -1839,9 +1839,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.9.0\"\n+version = \"1.9.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b137a875a3b942539dd04bd37d193649f5d67e11407186f5b9d63ae0332b1a93\"\n+checksum = \"58a02e2041a872d56354e843e8e86e6b946fc8e7dc32982fcdc335e29eb4cc8b\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "049b2e462e6cf7b9e0f226fc0a6164992368d96a", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872bf09381751600de8e58aab65b1d2511c33223/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872bf09381751600de8e58aab65b1d2511c33223/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=872bf09381751600de8e58aab65b1d2511c33223", "patch": "@@ -159,6 +159,8 @@ impl TypeRef {\n             ast::Type::DynTraitType(inner) => {\n                 TypeRef::DynTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }\n+            // FIXME: Macros in type position are not yet supported.\n+            ast::Type::MacroType(_) => TypeRef::Error,\n         }\n     }\n "}, {"sha": "bcefd183a1af608d8d2629c5946a84cd4cdc5d46", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872bf09381751600de8e58aab65b1d2511c33223/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872bf09381751600de8e58aab65b1d2511c33223/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=872bf09381751600de8e58aab65b1d2511c33223", "patch": "@@ -143,6 +143,7 @@ pub enum SyntaxKind {\n     MACRO_DEF,\n     PAREN_TYPE,\n     TUPLE_TYPE,\n+    MACRO_TYPE,\n     NEVER_TYPE,\n     PATH_TYPE,\n     PTR_TYPE,"}, {"sha": "5baa54a3f848696ada422415dca2c84e0908a242", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/872bf09381751600de8e58aab65b1d2511c33223/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872bf09381751600de8e58aab65b1d2511c33223/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=872bf09381751600de8e58aab65b1d2511c33223", "patch": "@@ -1072,6 +1072,13 @@ impl InferType {\n     pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MacroType {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl MacroType {\n+    pub fn macro_call(&self) -> Option<MacroCall> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct NeverType {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1300,6 +1307,7 @@ pub enum Type {\n     ForType(ForType),\n     ImplTraitType(ImplTraitType),\n     InferType(InferType),\n+    MacroType(MacroType),\n     NeverType(NeverType),\n     ParenType(ParenType),\n     PathType(PathType),\n@@ -2558,6 +2566,17 @@ impl AstNode for InferType {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for MacroType {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_TYPE }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for NeverType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == NEVER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2889,6 +2908,9 @@ impl From<ImplTraitType> for Type {\n impl From<InferType> for Type {\n     fn from(node: InferType) -> Type { Type::InferType(node) }\n }\n+impl From<MacroType> for Type {\n+    fn from(node: MacroType) -> Type { Type::MacroType(node) }\n+}\n impl From<NeverType> for Type {\n     fn from(node: NeverType) -> Type { Type::NeverType(node) }\n }\n@@ -2914,8 +2936,8 @@ impl AstNode for Type {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ARRAY_TYPE | DYN_TRAIT_TYPE | FN_PTR_TYPE | FOR_TYPE | IMPL_TRAIT_TYPE | INFER_TYPE\n-            | NEVER_TYPE | PAREN_TYPE | PATH_TYPE | PTR_TYPE | REF_TYPE | SLICE_TYPE\n-            | TUPLE_TYPE => true,\n+            | MACRO_TYPE | NEVER_TYPE | PAREN_TYPE | PATH_TYPE | PTR_TYPE | REF_TYPE\n+            | SLICE_TYPE | TUPLE_TYPE => true,\n             _ => false,\n         }\n     }\n@@ -2927,6 +2949,7 @@ impl AstNode for Type {\n             FOR_TYPE => Type::ForType(ForType { syntax }),\n             IMPL_TRAIT_TYPE => Type::ImplTraitType(ImplTraitType { syntax }),\n             INFER_TYPE => Type::InferType(InferType { syntax }),\n+            MACRO_TYPE => Type::MacroType(MacroType { syntax }),\n             NEVER_TYPE => Type::NeverType(NeverType { syntax }),\n             PAREN_TYPE => Type::ParenType(ParenType { syntax }),\n             PATH_TYPE => Type::PathType(PathType { syntax }),\n@@ -2946,6 +2969,7 @@ impl AstNode for Type {\n             Type::ForType(it) => &it.syntax,\n             Type::ImplTraitType(it) => &it.syntax,\n             Type::InferType(it) => &it.syntax,\n+            Type::MacroType(it) => &it.syntax,\n             Type::NeverType(it) => &it.syntax,\n             Type::ParenType(it) => &it.syntax,\n             Type::PathType(it) => &it.syntax,\n@@ -4082,6 +4106,11 @@ impl std::fmt::Display for InferType {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for MacroType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for NeverType {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "0fd1d13e6355c8c47f5555aec54ad0e8ed8f9fd4", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872bf09381751600de8e58aab65b1d2511c33223/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872bf09381751600de8e58aab65b1d2511c33223/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=872bf09381751600de8e58aab65b1d2511c33223", "patch": "@@ -104,6 +104,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"MACRO_DEF\",\n         \"PAREN_TYPE\",\n         \"TUPLE_TYPE\",\n+        \"MACRO_TYPE\",\n         \"NEVER_TYPE\",\n         \"PATH_TYPE\",\n         \"PTR_TYPE\","}]}