{"sha": "a750135a0ac5a42035a1baa808e0af8ae562cd72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTAxMzVhMGFjNWE0MjAzNWExYmFhODA4ZTBhZjhhZTU2MmNkNzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T21:14:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T21:14:26Z"}, "message": "If expr", "tree": {"sha": "aa36d394a72cb4c41107152e5dabf255118dc92b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa36d394a72cb4c41107152e5dabf255118dc92b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a750135a0ac5a42035a1baa808e0af8ae562cd72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a750135a0ac5a42035a1baa808e0af8ae562cd72", "html_url": "https://github.com/rust-lang/rust/commit/a750135a0ac5a42035a1baa808e0af8ae562cd72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a750135a0ac5a42035a1baa808e0af8ae562cd72/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a31cb829ed763f9dd1fcf422469eedd3402e5fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31cb829ed763f9dd1fcf422469eedd3402e5fbc", "html_url": "https://github.com/rust-lang/rust/commit/a31cb829ed763f9dd1fcf422469eedd3402e5fbc"}], "stats": {"total": 127, "additions": 120, "deletions": 7}, "files": [{"sha": "9912f969889c159cdbc774c0331e6e5ac3c890ea", "filename": "src/grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a750135a0ac5a42035a1baa808e0af8ae562cd72/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/a750135a0ac5a42035a1baa808e0af8ae562cd72/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=a750135a0ac5a42035a1baa808e0af8ae562cd72", "patch": "@@ -60,6 +60,7 @@ Grammar(\n         \"loop\",\n         \"while\",\n         \"if\",\n+        \"else\",\n         \"match\",\n         \"const\",\n         \"static\",\n@@ -134,6 +135,7 @@ Grammar(\n         \"LAMBDA_EXPR\",\n         \"STRUCT_LIT\",\n         \"STRUCT_LIT_FIELD\",\n+        \"IF_EXPR\",\n \n         \"EXTERN_BLOCK\",\n         \"ENUM_VARIANT\","}, {"sha": "ed9236b02db6d252cec2e1a8e573ad0bd2fd16e0", "filename": "src/grammar/expressions.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a750135a0ac5a42035a1baa808e0af8ae562cd72/src%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a750135a0ac5a42035a1baa808e0af8ae562cd72/src%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions.rs?ref=a750135a0ac5a42035a1baa808e0af8ae562cd72", "patch": "@@ -145,14 +145,16 @@ fn atom_expr(p: &mut Parser) -> Option<CompletedMarker> {\n         return Some(path_expr(p));\n     }\n \n-    match p.current() {\n-        L_PAREN => Some(tuple_expr(p)),\n-        PIPE => Some(lambda_expr(p)),\n+    let done = match p.current() {\n+        L_PAREN => tuple_expr(p),\n+        PIPE => lambda_expr(p),\n+        IF_KW => if_expr(p),\n         _ => {\n             p.err_and_bump(\"expected expression\");\n-            None\n+            return None;\n         }\n-    }\n+    };\n+    Some(done)\n }\n \n fn tuple_expr(p: &mut Parser) -> CompletedMarker {\n@@ -182,6 +184,29 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, LAMBDA_EXPR)\n }\n \n+// test if_expr\n+// fn foo() {\n+//     if true {};\n+//     if true {} else {};\n+//     if true {} else if false {} else {}\n+// }\n+fn if_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(IF_KW));\n+    let m = p.start();\n+    p.bump();\n+    expr(p);\n+    block(p);\n+    if p.at(ELSE_KW) {\n+        p.bump();\n+        if p.at(IF_KW) {\n+            if_expr(p);\n+        } else {\n+            block(p);\n+        }\n+    }\n+    m.complete(p, IF_EXPR)\n+}\n+\n // test call_expr\n // fn foo() {\n //     let _ = f();"}, {"sha": "35d9640fab68cc3c0fb9fc80655f0f689630449c", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a750135a0ac5a42035a1baa808e0af8ae562cd72/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a750135a0ac5a42035a1baa808e0af8ae562cd72/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=a750135a0ac5a42035a1baa808e0af8ae562cd72", "patch": "@@ -61,6 +61,7 @@ pub enum SyntaxKind {\n     LOOP_KW,\n     WHILE_KW,\n     IF_KW,\n+    ELSE_KW,\n     MATCH_KW,\n     CONST_KW,\n     STATIC_KW,\n@@ -125,6 +126,7 @@ pub enum SyntaxKind {\n     LAMBDA_EXPR,\n     STRUCT_LIT,\n     STRUCT_LIT_FIELD,\n+    IF_EXPR,\n     EXTERN_BLOCK,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -223,6 +225,7 @@ impl SyntaxKind {\n             LOOP_KW => &SyntaxInfo { name: \"LOOP_KW\" },\n             WHILE_KW => &SyntaxInfo { name: \"WHILE_KW\" },\n             IF_KW => &SyntaxInfo { name: \"IF_KW\" },\n+            ELSE_KW => &SyntaxInfo { name: \"ELSE_KW\" },\n             MATCH_KW => &SyntaxInfo { name: \"MATCH_KW\" },\n             CONST_KW => &SyntaxInfo { name: \"CONST_KW\" },\n             STATIC_KW => &SyntaxInfo { name: \"STATIC_KW\" },\n@@ -287,6 +290,7 @@ impl SyntaxKind {\n             LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n             STRUCT_LIT => &SyntaxInfo { name: \"STRUCT_LIT\" },\n             STRUCT_LIT_FIELD => &SyntaxInfo { name: \"STRUCT_LIT_FIELD\" },\n+            IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n             EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },\n@@ -344,6 +348,7 @@ impl SyntaxKind {\n             \"loop\" => LOOP_KW,\n             \"while\" => WHILE_KW,\n             \"if\" => IF_KW,\n+            \"else\" => ELSE_KW,\n             \"match\" => MATCH_KW,\n             \"const\" => CONST_KW,\n             \"static\" => STATIC_KW,\n@@ -445,6 +450,7 @@ impl SyntaxKind {\n             LOOP_KW => \"loop\",\n             WHILE_KW => \"while\",\n             IF_KW => \"if\",\n+            ELSE_KW => \"else\",\n             MATCH_KW => \"match\",\n             CONST_KW => \"const\",\n             STATIC_KW => \"static\","}, {"sha": "2a78b5dd2f4eb189b022733a960c28587fb40b2a", "filename": "tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=a750135a0ac5a42035a1baa808e0af8ae562cd72", "patch": "@@ -1,3 +1,3 @@\n fn use struct trait enum impl true false as extern crate\n mod pub self super in where for loop while if match const\n-static mut type ref let\n+static mut type ref let else"}, {"sha": "e25d7d4b4e14fd9c1b5531f511e09a2777f33852", "filename": "tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=a750135a0ac5a42035a1baa808e0af8ae562cd72", "patch": "@@ -53,4 +53,6 @@ WHITESPACE 1 \" \"\n REF_KW 3 \"ref\"\n WHITESPACE 1 \" \"\n LET_KW 3 \"let\"\n+WHITESPACE 1 \" \"\n+ELSE_KW 4 \"else\"\n WHITESPACE 1 \"\\n\""}, {"sha": "81a5dd4c323e11c98becd8e01875edc17eb9ee96", "filename": "tests/data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=a750135a0ac5a42035a1baa808e0af8ae562cd72", "patch": "@@ -37,7 +37,7 @@ FILE@[0; 95)\n     WHITESPACE@[45; 50)\n     R_CURLY@[50; 51)\n     WHITESPACE@[51; 52)\n-    IDENT@[52; 56) \"else\"\n+    ELSE_KW@[52; 56)\n     WHITESPACE@[56; 57)\n     L_CURLY@[57; 58)\n     WHITESPACE@[58; 67)"}, {"sha": "f1691c159bf998ea974ddecfe9b054142738c7ff", "filename": "tests/data/parser/inline/0065_if_expr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.rs?ref=a750135a0ac5a42035a1baa808e0af8ae562cd72", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {\n+    if true {};\n+    if true {} else {};\n+    if true {} else if false {} else {}\n+}"}, {"sha": "5d9bdfb13bb7b65875bd0d0710ca309b9228817c", "filename": "tests/data/parser/inline/0065_if_expr.txt", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a750135a0ac5a42035a1baa808e0af8ae562cd72/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt?ref=a750135a0ac5a42035a1baa808e0af8ae562cd72", "patch": "@@ -0,0 +1,73 @@\n+FILE@[0; 93)\n+  FN_ITEM@[0; 93)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK@[9; 93)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 31)\n+        IF_EXPR@[10; 25)\n+          WHITESPACE@[10; 15)\n+          IF_KW@[15; 17)\n+          LITERAL@[17; 23)\n+            WHITESPACE@[17; 18)\n+            TRUE_KW@[18; 22)\n+            WHITESPACE@[22; 23)\n+          BLOCK@[23; 25)\n+            L_CURLY@[23; 24)\n+            R_CURLY@[24; 25)\n+        SEMI@[25; 26)\n+        WHITESPACE@[26; 31)\n+      EXPR_STMT@[31; 55)\n+        IF_EXPR@[31; 49)\n+          IF_KW@[31; 33)\n+          LITERAL@[33; 39)\n+            WHITESPACE@[33; 34)\n+            TRUE_KW@[34; 38)\n+            WHITESPACE@[38; 39)\n+          BLOCK@[39; 42)\n+            L_CURLY@[39; 40)\n+            R_CURLY@[40; 41)\n+            WHITESPACE@[41; 42)\n+          ELSE_KW@[42; 46)\n+          BLOCK@[46; 49)\n+            WHITESPACE@[46; 47)\n+            L_CURLY@[47; 48)\n+            R_CURLY@[48; 49)\n+        SEMI@[49; 50)\n+        WHITESPACE@[50; 55)\n+      IF_EXPR@[55; 91)\n+        IF_KW@[55; 57)\n+        LITERAL@[57; 63)\n+          WHITESPACE@[57; 58)\n+          TRUE_KW@[58; 62)\n+          WHITESPACE@[62; 63)\n+        BLOCK@[63; 66)\n+          L_CURLY@[63; 64)\n+          R_CURLY@[64; 65)\n+          WHITESPACE@[65; 66)\n+        ELSE_KW@[66; 70)\n+        IF_EXPR@[70; 91)\n+          WHITESPACE@[70; 71)\n+          IF_KW@[71; 73)\n+          LITERAL@[73; 80)\n+            WHITESPACE@[73; 74)\n+            FALSE_KW@[74; 79)\n+            WHITESPACE@[79; 80)\n+          BLOCK@[80; 83)\n+            L_CURLY@[80; 81)\n+            R_CURLY@[81; 82)\n+            WHITESPACE@[82; 83)\n+          ELSE_KW@[83; 87)\n+          BLOCK@[87; 91)\n+            WHITESPACE@[87; 88)\n+            L_CURLY@[88; 89)\n+            R_CURLY@[89; 90)\n+            WHITESPACE@[90; 91)\n+      R_CURLY@[91; 92)\n+      WHITESPACE@[92; 93)"}]}