{"sha": "8f6827ffb7031abec81a1db40a0b6cbcf8a464af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNjgyN2ZmYjcwMzFhYmVjODFhMWRiNDBhMGI2Y2JjZjhhNDY0YWY=", "commit": {"author": {"name": "Manuel Drehwald", "email": "git@manuel.drehwald.info", "date": "2021-07-20T00:38:39Z"}, "committer": {"name": "Manuel Drehwald", "email": "git@manuel.drehwald.info", "date": "2021-07-31T21:14:54Z"}, "message": "add two new build flags to build clang and enable llvm plugins", "tree": {"sha": "b755378ee1d8e614a61a45175b639d50c0d55799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b755378ee1d8e614a61a45175b639d50c0d55799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f6827ffb7031abec81a1db40a0b6cbcf8a464af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6827ffb7031abec81a1db40a0b6cbcf8a464af", "html_url": "https://github.com/rust-lang/rust/commit/8f6827ffb7031abec81a1db40a0b6cbcf8a464af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/comments", "author": {"login": "ZuseZ4", "id": 25483084, "node_id": "MDQ6VXNlcjI1NDgzMDg0", "avatar_url": "https://avatars.githubusercontent.com/u/25483084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZuseZ4", "html_url": "https://github.com/ZuseZ4", "followers_url": "https://api.github.com/users/ZuseZ4/followers", "following_url": "https://api.github.com/users/ZuseZ4/following{/other_user}", "gists_url": "https://api.github.com/users/ZuseZ4/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZuseZ4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZuseZ4/subscriptions", "organizations_url": "https://api.github.com/users/ZuseZ4/orgs", "repos_url": "https://api.github.com/users/ZuseZ4/repos", "events_url": "https://api.github.com/users/ZuseZ4/events{/privacy}", "received_events_url": "https://api.github.com/users/ZuseZ4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ZuseZ4", "id": 25483084, "node_id": "MDQ6VXNlcjI1NDgzMDg0", "avatar_url": "https://avatars.githubusercontent.com/u/25483084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZuseZ4", "html_url": "https://github.com/ZuseZ4", "followers_url": "https://api.github.com/users/ZuseZ4/followers", "following_url": "https://api.github.com/users/ZuseZ4/following{/other_user}", "gists_url": "https://api.github.com/users/ZuseZ4/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZuseZ4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZuseZ4/subscriptions", "organizations_url": "https://api.github.com/users/ZuseZ4/orgs", "repos_url": "https://api.github.com/users/ZuseZ4/repos", "events_url": "https://api.github.com/users/ZuseZ4/events{/privacy}", "received_events_url": "https://api.github.com/users/ZuseZ4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f8de06d18cf197fbd229accdce82da62ba22e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f8de06d18cf197fbd229accdce82da62ba22e9", "html_url": "https://github.com/rust-lang/rust/commit/29f8de06d18cf197fbd229accdce82da62ba22e9"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "c2d51c140b4ef0aa7d1c77af7615c7c25f034539", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=8f6827ffb7031abec81a1db40a0b6cbcf8a464af", "patch": "@@ -68,6 +68,9 @@ changelog-seen = 2\n # Indicates whether the LLVM assertions are enabled or not\n #assertions = false\n \n+# Indicates whether the LLVM plugin is enabled or not\n+#plugins = false\n+\n # Indicates whether ccache is used when building LLVM\n #ccache = false\n # or alternatively ...\n@@ -145,6 +148,9 @@ changelog-seen = 2\n # Whether to include the Polly optimizer.\n #polly = false\n \n+# Whether to build the clang compiler.\n+#clang = false\n+\n # =============================================================================\n # General build configuration options\n # ============================================================================="}, {"sha": "fdddc1dbbaf77ec1ae092b61b0c1e83ea186946c", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8f6827ffb7031abec81a1db40a0b6cbcf8a464af", "patch": "@@ -90,6 +90,7 @@ pub struct Config {\n     // llvm codegen options\n     pub llvm_skip_rebuild: bool,\n     pub llvm_assertions: bool,\n+    pub llvm_plugins: bool,\n     pub llvm_optimize: bool,\n     pub llvm_thin_lto: bool,\n     pub llvm_release_debuginfo: bool,\n@@ -104,6 +105,7 @@ pub struct Config {\n     pub llvm_use_linker: Option<String>,\n     pub llvm_allow_old_toolchain: bool,\n     pub llvm_polly: bool,\n+    pub llvm_clang: bool,\n     pub llvm_from_ci: bool,\n \n     pub use_lld: bool,\n@@ -415,6 +417,7 @@ struct Llvm {\n     thin_lto: Option<bool>,\n     release_debuginfo: Option<bool>,\n     assertions: Option<bool>,\n+    plugins: Option<bool>,\n     ccache: Option<StringOrBool>,\n     version_check: Option<bool>,\n     static_libstdcpp: Option<bool>,\n@@ -432,6 +435,7 @@ struct Llvm {\n     use_linker: Option<String>,\n     allow_old_toolchain: Option<bool>,\n     polly: Option<bool>,\n+    clang: Option<bool>,\n     download_ci_llvm: Option<StringOrBool>,\n }\n \n@@ -702,6 +706,7 @@ impl Config {\n         // Store off these values as options because if they're not provided\n         // we'll infer default values for them later\n         let mut llvm_assertions = None;\n+        let mut llvm_plugins = None;\n         let mut debug = None;\n         let mut debug_assertions = None;\n         let mut debug_assertions_std = None;\n@@ -724,6 +729,7 @@ impl Config {\n             }\n             set(&mut config.ninja_in_file, llvm.ninja);\n             llvm_assertions = llvm.assertions;\n+            llvm_plugins = llvm.plugins;\n             llvm_skip_rebuild = llvm_skip_rebuild.or(llvm.skip_rebuild);\n             set(&mut config.llvm_optimize, llvm.optimize);\n             set(&mut config.llvm_thin_lto, llvm.thin_lto);\n@@ -744,6 +750,7 @@ impl Config {\n             config.llvm_use_linker = llvm.use_linker.clone();\n             config.llvm_allow_old_toolchain = llvm.allow_old_toolchain.unwrap_or(false);\n             config.llvm_polly = llvm.polly.unwrap_or(false);\n+            config.llvm_clang = llvm.clang.unwrap_or(false);\n             config.llvm_from_ci = match llvm.download_ci_llvm {\n                 Some(StringOrBool::String(s)) => {\n                     assert!(s == \"if-available\", \"unknown option `{}` for download-ci-llvm\", s);\n@@ -790,6 +797,8 @@ impl Config {\n                 check_ci_llvm!(llvm.use_linker);\n                 check_ci_llvm!(llvm.allow_old_toolchain);\n                 check_ci_llvm!(llvm.polly);\n+                check_ci_llvm!(llvm.clang);\n+                check_ci_llvm!(llvm.plugins);\n \n                 // CI-built LLVM can be either dynamic or static.\n                 let ci_llvm = config.out.join(&*config.build.triple).join(\"ci-llvm\");\n@@ -952,6 +961,7 @@ impl Config {\n \n         config.llvm_skip_rebuild = llvm_skip_rebuild.unwrap_or(false);\n         config.llvm_assertions = llvm_assertions.unwrap_or(false);\n+        config.llvm_plugins = llvm_plugins.unwrap_or(false);\n         config.rust_optimize = optimize.unwrap_or(true);\n \n         let default = debug == Some(true);"}, {"sha": "a1941efb5621bf72edd9b69ecbf7a20f130d6806", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=8f6827ffb7031abec81a1db40a0b6cbcf8a464af", "patch": "@@ -57,6 +57,7 @@ def v(*args):\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")\n o(\"full-tools\", None, \"enable all tools\")\n o(\"lld\", \"rust.lld\", \"build lld\")\n+o(\"clang\", \"llvm.clang\", \"build clang\")\n o(\"missing-tools\", \"dist.missing-tools\", \"allow failures when building tools\")\n o(\"use-libcxx\", \"llvm.use-libcxx\", \"build LLVM with libc++\")\n o(\"control-flow-guard\", \"rust.control-flow-guard\", \"Enable Control Flow Guard\")\n@@ -72,6 +73,7 @@ def v(*args):\n o(\"optimize\", \"rust.optimize\", \"build optimized rust code\")\n o(\"optimize-llvm\", \"llvm.optimize\", \"build optimized LLVM\")\n o(\"llvm-assertions\", \"llvm.assertions\", \"build LLVM with assertions\")\n+o(\"llvm-plugins\", \"llvm.plugins\", \"build LLVM with plugin interface\")\n o(\"debug-assertions\", \"rust.debug-assertions\", \"build with debugging assertions\")\n o(\"llvm-release-debuginfo\", \"llvm.release-debuginfo\", \"build LLVM with debugger metadata\")\n v(\"debuginfo-level\", \"rust.debuginfo-level\", \"debuginfo level for Rust code\")"}, {"sha": "d32426afb0b8f524a1052c825a32cf3592c4f884", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6827ffb7031abec81a1db40a0b6cbcf8a464af/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=8f6827ffb7031abec81a1db40a0b6cbcf8a464af", "patch": "@@ -169,10 +169,12 @@ impl Step for Llvm {\n         };\n \n         let assertions = if builder.config.llvm_assertions { \"ON\" } else { \"OFF\" };\n+        let plugins = if builder.config.llvm_plugins { \"ON\" } else { \"OFF\" };\n \n         cfg.out_dir(&out_dir)\n             .profile(profile)\n             .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n+            .define(\"LLVM_ENABLE_PLUGINS\", plugins)\n             .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n             .define(\"LLVM_EXPERIMENTAL_TARGETS_TO_BUILD\", llvm_exp_targets)\n             .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n@@ -265,6 +267,10 @@ impl Step for Llvm {\n             enabled_llvm_projects.push(\"polly\");\n         }\n \n+        if builder.config.llvm_clang {\n+            enabled_llvm_projects.push(\"clang\");\n+        }\n+\n         // We want libxml to be disabled.\n         // See https://github.com/rust-lang/rust/pull/50104\n         cfg.define(\"LLVM_ENABLE_LIBXML2\", \"OFF\");"}]}