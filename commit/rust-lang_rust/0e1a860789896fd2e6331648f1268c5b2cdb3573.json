{"sha": "0e1a860789896fd2e6331648f1268c5b2cdb3573", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWE4NjA3ODk4OTZmZDJlNjMzMTY0OGYxMjY4YzViMmNkYjM1NzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T20:33:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-01T05:17:08Z"}, "message": "rustdoc: Capture all output from rustc by default\n\nThis helps prevent interleaving of error messages when running rustdoc tests.\nThis has an interesting bit of shuffling with I/O handles, but other than that\nthis is just using the APIs laid out in the previous commit.\n\nCloses #12623", "tree": {"sha": "77ab66abdf87824620e9399cfab83c0b5ae38be3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ab66abdf87824620e9399cfab83c0b5ae38be3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1a860789896fd2e6331648f1268c5b2cdb3573", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1a860789896fd2e6331648f1268c5b2cdb3573", "html_url": "https://github.com/rust-lang/rust/commit/0e1a860789896fd2e6331648f1268c5b2cdb3573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1a860789896fd2e6331648f1268c5b2cdb3573/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324547140e0b67b109b43dfa79cc39cdf06151e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/324547140e0b67b109b43dfa79cc39cdf06151e5", "html_url": "https://github.com/rust-lang/rust/commit/324547140e0b67b109b43dfa79cc39cdf06151e5"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "26650d22fe9b8fca420ee0f20239df819f2018b0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a860789896fd2e6331648f1268c5b2cdb3573/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a860789896fd2e6331648f1268c5b2cdb3573/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=0e1a860789896fd2e6331648f1268c5b2cdb3573", "patch": "@@ -58,7 +58,7 @@ fn get_ast_and_resolve(cpath: &Path,\n     };\n \n \n-    let diagnostic_handler = syntax::diagnostic::mk_handler();\n+    let diagnostic_handler = syntax::diagnostic::default_handler();\n     let span_diagnostic_handler =\n         syntax::diagnostic::mk_span_handler(diagnostic_handler, parsesess.cm);\n "}, {"sha": "8f90a39539a8780cd72a528070411259f32b17e8", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a860789896fd2e6331648f1268c5b2cdb3573/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a860789896fd2e6331648f1268c5b2cdb3573/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=0e1a860789896fd2e6331648f1268c5b2cdb3573", "patch": "@@ -28,7 +28,7 @@ use t = syntax::parse::token;\n /// Highlights some source code, returning the HTML output.\n pub fn highlight(src: &str) -> ~str {\n     let sess = parse::new_parse_sess();\n-    let handler = diagnostic::mk_handler();\n+    let handler = diagnostic::default_handler();\n     let span_handler = diagnostic::mk_span_handler(handler, sess.cm);\n     let fm = parse::string_to_filemap(sess, src.to_owned(), ~\"<stdin>\");\n "}, {"sha": "f97dd98e4578298622a5266722d1f3b4a14aa89e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a860789896fd2e6331648f1268c5b2cdb3573/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a860789896fd2e6331648f1268c5b2cdb3573/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=0e1a860789896fd2e6331648f1268c5b2cdb3573", "patch": "@@ -50,7 +50,7 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n \n \n     let cm = @CodeMap::new();\n-    let diagnostic_handler = diagnostic::mk_handler();\n+    let diagnostic_handler = diagnostic::default_handler();\n     let span_diagnostic_handler =\n         diagnostic::mk_span_handler(diagnostic_handler, cm);\n     let parsesess = parse::new_parse_sess_special_handler(span_diagnostic_handler,\n@@ -115,7 +115,30 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool)\n         .. (*session::basic_options()).clone()\n     };\n \n-    let diagnostic_handler = diagnostic::mk_handler();\n+    // Shuffle around a few input and output handles here. We're going to pass\n+    // an explicit handle into rustc to collect output messages, but we also\n+    // want to catch the error message that rustc prints when it fails.\n+    //\n+    // We take our task-local stderr (likely set by the test runner), and move\n+    // it into another task. This helper task then acts as a sink for both the\n+    // stderr of this task and stderr of rustc itself, copying all the info onto\n+    // the stderr channel we originally started with.\n+    //\n+    // The basic idea is to not use a default_handler() for rustc, and then also\n+    // not print things by default to the actual stderr.\n+    let (p, c) = Chan::new();\n+    let w1 = io::ChanWriter::new(c);\n+    let w2 = w1.clone();\n+    let old = io::stdio::set_stderr(~w1);\n+    spawn(proc() {\n+        let mut p = io::PortReader::new(p);\n+        let mut err = old.unwrap_or(~io::stderr() as ~Writer);\n+        io::util::copy(&mut p, &mut err).unwrap();\n+    });\n+    let emitter = diagnostic::EmitterWriter::new(~w2);\n+\n+    // Compile the code\n+    let diagnostic_handler = diagnostic::mk_handler(~emitter);\n     let span_diagnostic_handler =\n         diagnostic::mk_span_handler(diagnostic_handler, parsesess.cm);\n \n@@ -129,6 +152,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool)\n     let cfg = driver::build_configuration(sess);\n     driver::compile_input(sess, cfg, &input, &out, &None);\n \n+    // Run the code!\n     let exe = outdir.path().join(\"rust_out\");\n     let out = Process::output(exe.as_str().unwrap(), []);\n     match out {"}, {"sha": "344aab63d5b8e15f939b0f8ba7e78d993eb8ec11", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a860789896fd2e6331648f1268c5b2cdb3573/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a860789896fd2e6331648f1268c5b2cdb3573/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=0e1a860789896fd2e6331648f1268c5b2cdb3573", "patch": "@@ -1004,6 +1004,7 @@ mod test {\n     use diagnostic;\n     use parse::token;\n     use parse::token::{str_to_ident};\n+    use std::io::util;\n \n     // represents a testing reader (incl. both reader and interner)\n     struct Env {\n@@ -1014,7 +1015,10 @@ mod test {\n     fn setup(teststr: ~str) -> Env {\n         let cm = CodeMap::new();\n         let fm = cm.new_filemap(~\"zebra.rs\", teststr);\n-        let span_handler = diagnostic::mk_span_handler(diagnostic::mk_handler(), @cm);\n+        let writer = ~util::NullWriter;\n+        let emitter = diagnostic::EmitterWriter::new(writer);\n+        let handler = diagnostic::mk_handler(~emitter);\n+        let span_handler = diagnostic::mk_span_handler(handler, @cm);\n         Env {\n             string_reader: new_string_reader(span_handler,fm)\n         }"}]}