{"sha": "015f470daa3020ebe92abf61fa4010b56bde006d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNWY0NzBkYWEzMDIwZWJlOTJhYmY2MWZhNDAxMGI1NmJkZTAwNmQ=", "commit": {"author": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-08-04T15:41:03Z"}, "committer": {"name": "Bruno Dutra", "email": "brunocodutra@gmail.com", "date": "2018-09-03T18:02:35Z"}, "message": "Move EvalSnapshot into its own module", "tree": {"sha": "20c70850490079eb58291084255e087c3f2204fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c70850490079eb58291084255e087c3f2204fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/015f470daa3020ebe92abf61fa4010b56bde006d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/015f470daa3020ebe92abf61fa4010b56bde006d", "html_url": "https://github.com/rust-lang/rust/commit/015f470daa3020ebe92abf61fa4010b56bde006d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/015f470daa3020ebe92abf61fa4010b56bde006d/comments", "author": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunocodutra", "id": 4043663, "node_id": "MDQ6VXNlcjQwNDM2NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4043663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunocodutra", "html_url": "https://github.com/brunocodutra", "followers_url": "https://api.github.com/users/brunocodutra/followers", "following_url": "https://api.github.com/users/brunocodutra/following{/other_user}", "gists_url": "https://api.github.com/users/brunocodutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunocodutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunocodutra/subscriptions", "organizations_url": "https://api.github.com/users/brunocodutra/orgs", "repos_url": "https://api.github.com/users/brunocodutra/repos", "events_url": "https://api.github.com/users/brunocodutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brunocodutra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a083aa02edf0a3cb963dc71aea1509afe6e179a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a083aa02edf0a3cb963dc71aea1509afe6e179a0", "html_url": "https://github.com/rust-lang/rust/commit/a083aa02edf0a3cb963dc71aea1509afe6e179a0"}], "stats": {"total": 92, "additions": 50, "deletions": 42}, "files": [{"sha": "b6a84ed8404e4381e95c60836d45f062207a6400", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/015f470daa3020ebe92abf61fa4010b56bde006d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015f470daa3020ebe92abf61fa4010b56bde006d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=015f470daa3020ebe92abf61fa4010b56bde006d", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::fmt::Write;\n-use std::hash::{Hash, Hasher};\n use std::mem;\n \n use rustc::hir::def_id::DefId;\n@@ -40,6 +39,8 @@ use super::{\n     Memory, Machine\n };\n \n+use super::snapshot::EvalSnapshot;\n+\n pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// Stores the `Machine` instance.\n     pub machine: M,\n@@ -207,47 +208,6 @@ impl_stable_hash_for!(enum self::LocalValue {\n     Live(x),\n });\n \n-/// The virtual machine state during const-evaluation at a given point in time.\n-#[derive(Eq, PartialEq)]\n-struct EvalSnapshot<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n-    machine: M,\n-    memory: Memory<'a, 'mir, 'tcx, M>,\n-    stack: Vec<Frame<'mir, 'tcx>>,\n-}\n-\n-impl<'a, 'mir, 'tcx, M> EvalSnapshot<'a, 'mir, 'tcx, M>\n-    where M: Machine<'mir, 'tcx>,\n-{\n-    fn new<'b>(machine: &M, memory: &Memory<'a, 'mir, 'tcx, M>, stack: &[Frame<'mir, 'tcx>]) -> Self {\n-        EvalSnapshot {\n-            machine: machine.clone(),\n-            memory: memory.clone(),\n-            stack: stack.into(),\n-        }\n-    }\n-}\n-\n-impl<'a, 'mir, 'tcx, M> Hash for EvalSnapshot<'a, 'mir, 'tcx, M>\n-    where M: Machine<'mir, 'tcx>,\n-{\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        // Implement in terms of hash stable, so that k1 == k2 -> hash(k1) == hash(k2)\n-        let mut hcx = self.memory.tcx.get_stable_hashing_context();\n-        let mut hasher = StableHasher::<u64>::new();\n-        self.hash_stable(&mut hcx, &mut hasher);\n-        hasher.finish().hash(state)\n-    }\n-}\n-\n-impl<'a, 'b, 'mir, 'tcx, M> HashStable<StableHashingContext<'b>> for EvalSnapshot<'a, 'mir, 'tcx, M>\n-    where M: Machine<'mir, 'tcx>,\n-{\n-    fn hash_stable<W: StableHasherResult>(&self, hcx: &mut StableHashingContext<'b>, hasher: &mut StableHasher<W>) {\n-        let EvalSnapshot{ machine, memory, stack } = self;\n-        (machine, &memory.data, stack).hash_stable(hcx, hasher);\n-    }\n-}\n-\n pub(super) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// The set of all `EvalSnapshot` *hashes* observed by this detector.\n     ///"}, {"sha": "1e8de02923240652af9a56a30e1b601b82a9f1c3", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/015f470daa3020ebe92abf61fa4010b56bde006d/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015f470daa3020ebe92abf61fa4010b56bde006d/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=015f470daa3020ebe92abf61fa4010b56bde006d", "patch": "@@ -17,6 +17,7 @@ mod operand;\n mod machine;\n mod memory;\n mod operator;\n+mod snapshot;\n mod step;\n mod terminator;\n mod traits;"}, {"sha": "45574da741025247bda67f600b8a08f202fea378", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/015f470daa3020ebe92abf61fa4010b56bde006d/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015f470daa3020ebe92abf61fa4010b56bde006d/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=015f470daa3020ebe92abf61fa4010b56bde006d", "patch": "@@ -0,0 +1,47 @@\n+use std::hash::{Hash, Hasher};\n+\n+use rustc::ich::{StableHashingContext, StableHashingContextProvider};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n+\n+use super::{Frame, Memory, Machine};\n+\n+/// The virtual machine state during const-evaluation at a given point in time.\n+#[derive(Eq, PartialEq)]\n+pub struct EvalSnapshot<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n+    machine: M,\n+    memory: Memory<'a, 'mir, 'tcx, M>,\n+    stack: Vec<Frame<'mir, 'tcx>>,\n+}\n+\n+impl<'a, 'mir, 'tcx, M> EvalSnapshot<'a, 'mir, 'tcx, M>\n+    where M: Machine<'mir, 'tcx>,\n+{\n+    pub fn new(machine: &M, memory: &Memory<'a, 'mir, 'tcx, M>, stack: &[Frame<'mir, 'tcx>]) -> Self {\n+        EvalSnapshot {\n+            machine: machine.clone(),\n+            memory: memory.clone(),\n+            stack: stack.into(),\n+        }\n+    }\n+}\n+\n+impl<'a, 'mir, 'tcx, M> Hash for EvalSnapshot<'a, 'mir, 'tcx, M>\n+    where M: Machine<'mir, 'tcx>,\n+{\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        // Implement in terms of hash stable, so that k1 == k2 -> hash(k1) == hash(k2)\n+        let mut hcx = self.memory.tcx.get_stable_hashing_context();\n+        let mut hasher = StableHasher::<u64>::new();\n+        self.hash_stable(&mut hcx, &mut hasher);\n+        hasher.finish().hash(state)\n+    }\n+}\n+\n+impl<'a, 'b, 'mir, 'tcx, M> HashStable<StableHashingContext<'b>> for EvalSnapshot<'a, 'mir, 'tcx, M>\n+    where M: Machine<'mir, 'tcx>,\n+{\n+    fn hash_stable<W: StableHasherResult>(&self, hcx: &mut StableHashingContext<'b>, hasher: &mut StableHasher<W>) {\n+        let EvalSnapshot{ machine, memory, stack } = self;\n+        (machine, &memory.data, stack).hash_stable(hcx, hasher);\n+    }\n+}"}]}