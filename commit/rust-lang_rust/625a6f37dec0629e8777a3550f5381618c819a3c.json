{"sha": "625a6f37dec0629e8777a3550f5381618c819a3c", "node_id": "C_kwDOAAsO6NoAKDYyNWE2ZjM3ZGVjMDYyOWU4Nzc3YTM1NTBmNTM4MTYxOGM4MTlhM2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T19:19:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T19:19:19Z"}, "message": "Auto merge of #14519 - Veykril:hir-def-refac, r=Veykril\n\ninternal: Don't recreate Hygiene unnecessarily", "tree": {"sha": "795f396d82ce822149377b99b6a87f7b9332c1a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795f396d82ce822149377b99b6a87f7b9332c1a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/625a6f37dec0629e8777a3550f5381618c819a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/625a6f37dec0629e8777a3550f5381618c819a3c", "html_url": "https://github.com/rust-lang/rust/commit/625a6f37dec0629e8777a3550f5381618c819a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/625a6f37dec0629e8777a3550f5381618c819a3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "html_url": "https://github.com/rust-lang/rust/commit/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e"}, {"sha": "f742943a4bcc7e511200615112ea8663936ee656", "url": "https://api.github.com/repos/rust-lang/rust/commits/f742943a4bcc7e511200615112ea8663936ee656", "html_url": "https://github.com/rust-lang/rust/commit/f742943a4bcc7e511200615112ea8663936ee656"}], "stats": {"total": 86, "additions": 35, "deletions": 51}, "files": [{"sha": "a165ba85e6161cde579b0ac78d6421b6127b7a93", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -77,6 +77,10 @@ impl CfgExpander {\n         let attrs = self.parse_attrs(db, owner);\n         attrs.is_cfg_enabled(&self.cfg_options)\n     }\n+\n+    pub(crate) fn hygiene(&self) -> &Hygiene {\n+        &self.hygiene\n+    }\n }\n \n impl Expander {\n@@ -181,6 +185,10 @@ impl Expander {\n         mark.bomb.defuse();\n     }\n \n+    pub fn ctx<'a>(&self, db: &'a dyn DefDatabase) -> LowerCtx<'a> {\n+        LowerCtx::new(db, &self.cfg_expander.hygiene, self.current_file_id)\n+    }\n+\n     pub(crate) fn to_source<T>(&self, value: T) -> InFile<T> {\n         InFile { file_id: self.current_file_id, value }\n     }"}, {"sha": "b87fb94d923fb9ad94c625d1fb9afc81c8311bad", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -39,7 +39,6 @@ use crate::{\n         RecordFieldPat, RecordLitField, Statement,\n     },\n     item_scope::BuiltinShadowMode,\n-    item_tree::ItemTree,\n     lang_item::LangItem,\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n@@ -53,7 +52,11 @@ pub struct LowerCtx<'a> {\n }\n \n impl<'a> LowerCtx<'a> {\n-    pub fn new(db: &'a dyn DefDatabase, file_id: HirFileId) -> Self {\n+    pub fn new(db: &'a dyn DefDatabase, hygiene: &Hygiene, file_id: HirFileId) -> Self {\n+        LowerCtx { db, hygiene: hygiene.clone(), ast_id_map: Some((file_id, OnceCell::new())) }\n+    }\n+\n+    pub fn with_file_id(db: &'a dyn DefDatabase, file_id: HirFileId) -> Self {\n         LowerCtx {\n             db,\n             hygiene: Hygiene::new(db.upcast(), file_id),\n@@ -230,7 +233,7 @@ impl ExprCollector<'_> {\n     }\n \n     fn ctx(&self) -> LowerCtx<'_> {\n-        LowerCtx::new(self.db, self.expander.current_file_id)\n+        self.expander.ctx(self.db)\n     }\n \n     fn alloc_expr(&mut self, expr: Expr, ptr: ExprPtr) -> ExprId {\n@@ -973,8 +976,18 @@ impl ExprCollector<'_> {\n         block: ast::BlockExpr,\n         mk_block: impl FnOnce(Option<BlockId>, Box<[Statement]>, Option<ExprId>) -> Expr,\n     ) -> ExprId {\n-        let block_id = if ItemTree::block_has_items(self.db, self.expander.current_file_id, &block)\n-        {\n+        let block_has_items = {\n+            let statement_has_item = block.statements().any(|stmt| match stmt {\n+                ast::Stmt::Item(_) => true,\n+                // Macro calls can be both items and expressions. The syntax library always treats\n+                // them as expressions here, so we undo that.\n+                ast::Stmt::ExprStmt(es) => matches!(es.expr(), Some(ast::Expr::MacroExpr(_))),\n+                _ => false,\n+            });\n+            statement_has_item || matches!(block.tail_expr(), Some(ast::Expr::MacroExpr(_)))\n+        };\n+\n+        let block_id = if block_has_items {\n             let file_local_id = self.ast_id_map.ast_id(&block);\n             let ast_id = AstId::new(self.expander.current_file_id, file_local_id);\n             Some(self.db.intern_block(BlockLoc {"}, {"sha": "0b6a51fe7649da2b19d4f19d7eab2644591f26e1", "filename": "crates/hir-def/src/data/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -473,7 +473,7 @@ fn lower_struct(\n     trace: &mut Trace<FieldData, Either<ast::TupleField, ast::RecordField>>,\n     ast: &InFile<ast::StructKind>,\n ) -> StructKind {\n-    let ctx = LowerCtx::new(db, ast.file_id);\n+    let ctx = LowerCtx::new(db, &expander.hygiene(), ast.file_id);\n \n     match &ast.value {\n         ast::StructKind::Tuple(fl) => {"}, {"sha": "30edaed109585362c7437951be7ce8900857ef9f", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -12,7 +12,6 @@ use hir_expand::{\n use intern::Interned;\n use la_arena::{Arena, ArenaMap, Idx};\n use once_cell::unsync::Lazy;\n-use std::ops::DerefMut;\n use stdx::impl_from;\n use syntax::ast::{self, HasGenericParams, HasName, HasTypeBounds};\n \n@@ -328,7 +327,7 @@ impl GenericParams {\n     pub(crate) fn fill_implicit_impl_trait_args(\n         &mut self,\n         db: &dyn DefDatabase,\n-        expander: &mut impl DerefMut<Target = Expander>,\n+        expander: &mut Expander,\n         type_ref: &TypeRef,\n     ) {\n         type_ref.walk(&mut |type_ref| {\n@@ -350,7 +349,7 @@ impl GenericParams {\n                 let macro_call = mc.to_node(db.upcast());\n                 match expander.enter_expand::<ast::Type>(db, macro_call) {\n                     Ok(ExpandResult { value: Some((mark, expanded)), .. }) => {\n-                        let ctx = LowerCtx::new(db, expander.current_file_id());\n+                        let ctx = expander.ctx(db);\n                         let type_ref = TypeRef::from_ast(&ctx, expanded);\n                         self.fill_implicit_impl_trait_args(db, expander, &type_ref);\n                         expander.exit(db, mark);"}, {"sha": "d445e063f5f2d2d6fad6e9c04466778b76c5565c", "filename": "crates/hir-def/src/item_tree.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -152,14 +152,6 @@ impl ItemTree {\n         &self.top_level\n     }\n \n-    pub fn block_has_items(\n-        db: &dyn DefDatabase,\n-        file_id: HirFileId,\n-        block: &ast::BlockExpr,\n-    ) -> bool {\n-        lower::Ctx::new(db, file_id).block_has_items(block)\n-    }\n-\n     /// Returns the inner attributes of the source file.\n     pub fn top_level_attrs(&self, db: &dyn DefDatabase, krate: CrateId) -> Attrs {\n         Attrs::filter("}, {"sha": "0488bad3f987e65152b15eac1c0434b9b1f832d7", "filename": "crates/hir-def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -29,7 +29,7 @@ impl<'a> Ctx<'a> {\n             db,\n             tree: ItemTree::default(),\n             source_ast_id_map: db.ast_id_map(file),\n-            body_ctx: crate::body::LowerCtx::new(db, file),\n+            body_ctx: crate::body::LowerCtx::with_file_id(db, file),\n         }\n     }\n \n@@ -101,34 +101,6 @@ impl<'a> Ctx<'a> {\n         self.tree\n     }\n \n-    pub(super) fn block_has_items(mut self, block: &ast::BlockExpr) -> bool {\n-        let statement_has_item = block\n-            .statements()\n-            .find_map(|stmt| match stmt {\n-                ast::Stmt::Item(item) => self.lower_mod_item(&item),\n-                // Macro calls can be both items and expressions. The syntax library always treats\n-                // them as expressions here, so we undo that.\n-                ast::Stmt::ExprStmt(es) => match es.expr()? {\n-                    ast::Expr::MacroExpr(expr) => self.lower_mod_item(&expr.macro_call()?.into()),\n-                    _ => None,\n-                },\n-                _ => None,\n-            })\n-            .is_some();\n-        if statement_has_item {\n-            return true;\n-        }\n-\n-        if let Some(ast::Expr::MacroExpr(expr)) = block.tail_expr() {\n-            if let Some(call) = expr.macro_call() {\n-                if let Some(_) = self.lower_mod_item(&call.into()) {\n-                    return true;\n-                }\n-            }\n-        }\n-        false\n-    }\n-\n     fn data(&mut self) -> &mut ItemTreeData {\n         self.tree.data_mut()\n     }"}, {"sha": "fd05e516c265528567af00ccd1b3e21b5f7564f4", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -18,7 +18,7 @@ use chalk_ir::{\n \n use either::Either;\n use hir_def::{\n-    body::{Expander, LowerCtx},\n+    body::Expander,\n     builtin_type::BuiltinType,\n     data::adt::StructKind,\n     generics::{\n@@ -380,7 +380,7 @@ impl<'a> TyLoweringContext<'a> {\n                     let macro_call = macro_call.to_node(self.db.upcast());\n                     match expander.enter_expand::<ast::Type>(self.db.upcast(), macro_call) {\n                         Ok(ExpandResult { value: Some((mark, expanded)), .. }) => {\n-                            let ctx = LowerCtx::new(self.db.upcast(), expander.current_file_id());\n+                            let ctx = expander.ctx(self.db.upcast());\n                             let type_ref = TypeRef::from_ast(&ctx, expanded);\n \n                             drop(expander);"}, {"sha": "ffd0b0ad7adc41d24a782e0f0327999756615946", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -1065,7 +1065,7 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn resolve_type(&self, ty: &ast::Type) -> Option<Type> {\n         let analyze = self.analyze(ty.syntax())?;\n-        let ctx = body::LowerCtx::new(self.db.upcast(), analyze.file_id);\n+        let ctx = body::LowerCtx::with_file_id(self.db.upcast(), analyze.file_id);\n         let ty = hir_ty::TyLoweringContext::new(self.db, &analyze.resolver)\n             .lower_ty(&crate::TypeRef::from_ast(&ctx, ty.clone()));\n         Some(Type::new_with_resolver(self.db, &analyze.resolver, ty))\n@@ -1672,7 +1672,7 @@ impl<'a> SemanticsScope<'a> {\n     /// Resolve a path as-if it was written at the given scope. This is\n     /// necessary a heuristic, as it doesn't take hygiene into account.\n     pub fn speculative_resolve(&self, path: &ast::Path) -> Option<PathResolution> {\n-        let ctx = body::LowerCtx::new(self.db.upcast(), self.file_id);\n+        let ctx = body::LowerCtx::with_file_id(self.db.upcast(), self.file_id);\n         let path = Path::from_src(path.clone(), &ctx)?;\n         resolve_hir_path(self.db, &self.resolver, &path)\n     }"}, {"sha": "2a7a0ae4c43c7a27ec9a4f7bc4898c64689dee2d", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625a6f37dec0629e8777a3550f5381618c819a3c/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=625a6f37dec0629e8777a3550f5381618c819a3c", "patch": "@@ -463,7 +463,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         macro_call: InFile<&ast::MacroCall>,\n     ) -> Option<Macro> {\n-        let ctx = body::LowerCtx::new(db.upcast(), macro_call.file_id);\n+        let ctx = body::LowerCtx::with_file_id(db.upcast(), macro_call.file_id);\n         let path = macro_call.value.path().and_then(|ast| Path::from_src(ast, &ctx))?;\n         self.resolver.resolve_path_as_macro(db.upcast(), path.mod_path()?).map(|it| it.into())\n     }"}]}