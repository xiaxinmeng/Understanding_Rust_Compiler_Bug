{"sha": "2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOTM0NDIwNmJlOGVjZDFjZDIxMDZiZDkzY2NjZjQ2ODkyZmMyZTU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T17:13:11Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-04T12:53:15Z"}, "message": "Normalize variants of CrateType to standard style\n\nThis is a clippy-breaking change.", "tree": {"sha": "c7f24f8ff8b1bbdf361f42b7a1697181a5efcea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f24f8ff8b1bbdf361f42b7a1697181a5efcea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "html_url": "https://github.com/rust-lang/rust/commit/2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e59e02ef46c360eb6a2e2e30dd7cd10fc71e5e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e59e02ef46c360eb6a2e2e30dd7cd10fc71e5e41", "html_url": "https://github.com/rust-lang/rust/commit/e59e02ef46c360eb6a2e2e30dd7cd10fc71e5e41"}], "stats": {"total": 289, "additions": 144, "deletions": 145}, "files": [{"sha": "a9c118d606b2eb1584a7d8dd9a546cb74e16c935", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -115,30 +115,30 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let preferred_linkage = match ty {\n         // cdylibs must have all static dependencies.\n-        config::CrateTypeCdylib => Linkage::Static,\n+        config::CrateType::Cdylib => Linkage::Static,\n \n         // Generating a dylib without `-C prefer-dynamic` means that we're going\n         // to try to eagerly statically link all dependencies. This is normally\n         // done for end-product dylibs, not intermediate products.\n-        config::CrateTypeDylib if !sess.opts.cg.prefer_dynamic => Linkage::Static,\n-        config::CrateTypeDylib => Linkage::Dynamic,\n+        config::CrateType::Dylib if !sess.opts.cg.prefer_dynamic => Linkage::Static,\n+        config::CrateType::Dylib => Linkage::Dynamic,\n \n         // If the global prefer_dynamic switch is turned off, or the final\n         // executable will be statically linked, prefer static crate linkage.\n-        config::CrateTypeExecutable if !sess.opts.cg.prefer_dynamic ||\n+        config::CrateType::Executable if !sess.opts.cg.prefer_dynamic ||\n             sess.crt_static() => Linkage::Static,\n-        config::CrateTypeExecutable => Linkage::Dynamic,\n+        config::CrateType::Executable => Linkage::Dynamic,\n \n         // proc-macro crates are required to be dylibs, and they're currently\n         // required to link to libsyntax as well.\n-        config::CrateTypeProcMacro => Linkage::Dynamic,\n+        config::CrateType::ProcMacro => Linkage::Dynamic,\n \n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything.\n-        config::CrateTypeRlib => Linkage::NotLinked,\n+        config::CrateType::Rlib => Linkage::NotLinked,\n \n         // staticlibs must have all static dependencies.\n-        config::CrateTypeStaticlib => Linkage::Static,\n+        config::CrateType::Staticlib => Linkage::Static,\n     };\n \n     if preferred_linkage == Linkage::NotLinked {\n@@ -155,8 +155,8 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Staticlibs, cdylibs, and static executables must have all static\n         // dependencies. If any are not found, generate some nice pretty errors.\n-        if ty == config::CrateTypeCdylib || ty == config::CrateTypeStaticlib ||\n-                (ty == config::CrateTypeExecutable && sess.crt_static() &&\n+        if ty == config::CrateType::Cdylib || ty == config::CrateType::Staticlib ||\n+                (ty == config::CrateType::Executable && sess.crt_static() &&\n                 !sess.target.target.options.crt_static_allows_dylibs) {\n             for &cnum in tcx.crates().iter() {\n                 if tcx.dep_kind(cnum).macros_only() { continue }"}, {"sha": "9c2157aa2b31b7b038a5c7bbdfec1f296d35ddd8", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -59,7 +59,7 @@ pub fn find_entry_point(session: &Session,\n                         hir_map: &hir_map::Map,\n                         crate_name: &str) {\n     let any_exe = session.crate_types.borrow().iter().any(|ty| {\n-        *ty == config::CrateTypeExecutable\n+        *ty == config::CrateType::Executable\n     });\n     if !any_exe {\n         // No need to find a main function"}, {"sha": "94246db37069aedb56d409b6be983842279f4182", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -408,8 +408,8 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n-        *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||\n-        *ty == config::CrateTypeProcMacro\n+        *ty == config::CrateType::Rlib || *ty == config::CrateType::Dylib ||\n+        *ty == config::CrateType::ProcMacro\n     });\n     let mut reachable_context = ReachableContext {\n         tcx,"}, {"sha": "e8431ce3e109b4d9505fd0d96acd225d0c29fb2b", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -89,12 +89,12 @@ fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // emitting something that's not an rlib.\n     let needs_check = tcx.sess.crate_types.borrow().iter().any(|kind| {\n         match *kind {\n-            config::CrateTypeDylib |\n-            config::CrateTypeProcMacro |\n-            config::CrateTypeCdylib |\n-            config::CrateTypeExecutable |\n-            config::CrateTypeStaticlib => true,\n-            config::CrateTypeRlib => false,\n+            config::CrateType::Dylib |\n+            config::CrateType::ProcMacro |\n+            config::CrateType::Cdylib |\n+            config::CrateType::Executable |\n+            config::CrateType::Staticlib => true,\n+            config::CrateType::Rlib => false,\n         }\n     });\n     if !needs_check {"}, {"sha": "27fc5995d735d4b81c63ab54d6b1049bb6b331c1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -12,7 +12,6 @@\n //! command line options.\n \n pub use self::EntryFnType::*;\n-pub use self::CrateType::*;\n pub use self::Passes::*;\n pub use self::DebugInfoLevel::*;\n \n@@ -670,12 +669,12 @@ pub enum EntryFnType {\n \n #[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n pub enum CrateType {\n-    CrateTypeExecutable,\n-    CrateTypeDylib,\n-    CrateTypeRlib,\n-    CrateTypeStaticlib,\n-    CrateTypeCdylib,\n-    CrateTypeProcMacro,\n+    Executable,\n+    Dylib,\n+    Rlib,\n+    Staticlib,\n+    Cdylib,\n+    ProcMacro,\n }\n \n #[derive(Clone, Hash)]\n@@ -1374,7 +1373,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n }\n \n pub fn default_lib_output() -> CrateType {\n-    CrateTypeRlib\n+    CrateType::Rlib\n }\n \n pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n@@ -1432,7 +1431,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     if sess.opts.debug_assertions {\n         ret.insert((Symbol::intern(\"debug_assertions\"), None));\n     }\n-    if sess.opts.crate_types.contains(&CrateTypeProcMacro) {\n+    if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n         ret.insert((Symbol::intern(\"proc_macro\"), None));\n     }\n     return ret;\n@@ -2277,12 +2276,12 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n         for part in unparsed_crate_type.split(',') {\n             let new_part = match part {\n                 \"lib\" => default_lib_output(),\n-                \"rlib\" => CrateTypeRlib,\n-                \"staticlib\" => CrateTypeStaticlib,\n-                \"dylib\" => CrateTypeDylib,\n-                \"cdylib\" => CrateTypeCdylib,\n-                \"bin\" => CrateTypeExecutable,\n-                \"proc-macro\" => CrateTypeProcMacro,\n+                \"rlib\" => CrateType::Rlib,\n+                \"staticlib\" => CrateType::Staticlib,\n+                \"dylib\" => CrateType::Dylib,\n+                \"cdylib\" => CrateType::Cdylib,\n+                \"bin\" => CrateType::Executable,\n+                \"proc-macro\" => CrateType::ProcMacro,\n                 _ => {\n                     return Err(format!(\"unknown crate type: `{}`\", part));\n                 }\n@@ -2360,12 +2359,12 @@ pub mod nightly_options {\n impl fmt::Display for CrateType {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            CrateTypeExecutable => \"bin\".fmt(f),\n-            CrateTypeDylib => \"dylib\".fmt(f),\n-            CrateTypeRlib => \"rlib\".fmt(f),\n-            CrateTypeStaticlib => \"staticlib\".fmt(f),\n-            CrateTypeCdylib => \"cdylib\".fmt(f),\n-            CrateTypeProcMacro => \"proc-macro\".fmt(f),\n+            CrateType::Executable => \"bin\".fmt(f),\n+            CrateType::Dylib => \"dylib\".fmt(f),\n+            CrateType::Rlib => \"rlib\".fmt(f),\n+            CrateType::Staticlib => \"staticlib\".fmt(f),\n+            CrateType::Cdylib => \"cdylib\".fmt(f),\n+            CrateType::ProcMacro => \"proc-macro\".fmt(f),\n         }\n     }\n }"}, {"sha": "03a84021a0da6d5c8551e89f5e8734b214d762e1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -15,7 +15,7 @@ use dep_graph::{DepNode, DepConstructor};\n use errors::DiagnosticBuilder;\n use session::Session;\n use session::config::{BorrowckMode, OutputFilenames, OptLevel};\n-use session::config::CrateType::*;\n+use session::config::CrateType;\n use middle;\n use hir::{TraitCandidate, HirId, ItemLocalId};\n use hir::def::{Def, Export};\n@@ -1493,12 +1493,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         self.sess.crate_types.borrow().iter().any(|crate_type| {\n             match crate_type {\n-                CrateTypeExecutable |\n-                CrateTypeStaticlib  |\n-                CrateTypeProcMacro  |\n-                CrateTypeCdylib     => false,\n-                CrateTypeRlib       |\n-                CrateTypeDylib      => true,\n+                CrateType::Executable |\n+                CrateType::Staticlib  |\n+                CrateType::ProcMacro  |\n+                CrateType::Cdylib     => false,\n+                CrateType::Rlib       |\n+                CrateType::Dylib      => true,\n             }\n         })\n     }"}, {"sha": "7cd2deabdeb7c0e2a63717441d57363a7ace990c", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -151,7 +151,7 @@ pub(crate) fn link_binary(sess: &Session,\n         let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n         if (sess.opts.debugging_opts.no_codegen || !sess.opts.output_types.should_codegen()) &&\n            !output_metadata &&\n-           crate_type == config::CrateTypeExecutable {\n+           crate_type == config::CrateType::Executable {\n             continue;\n         }\n \n@@ -208,7 +208,7 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     // the objects as they're losslessly contained inside the archives.\n     let output_linked = sess.crate_types.borrow()\n         .iter()\n-        .any(|x| *x != config::CrateTypeRlib && *x != config::CrateTypeStaticlib);\n+        .any(|x| *x != config::CrateType::Rlib && *x != config::CrateType::Staticlib);\n     if !output_linked {\n         return false\n     }\n@@ -255,10 +255,10 @@ pub(crate) fn each_linked_rlib(sess: &Session,\n                                f: &mut dyn FnMut(CrateNum, &Path)) -> Result<(), String> {\n     let crates = info.used_crates_static.iter();\n     let fmts = sess.dependency_formats.borrow();\n-    let fmts = fmts.get(&config::CrateTypeExecutable)\n-                   .or_else(|| fmts.get(&config::CrateTypeStaticlib))\n-                   .or_else(|| fmts.get(&config::CrateTypeCdylib))\n-                   .or_else(|| fmts.get(&config::CrateTypeProcMacro));\n+    let fmts = fmts.get(&config::CrateType::Executable)\n+                   .or_else(|| fmts.get(&config::CrateType::Staticlib))\n+                   .or_else(|| fmts.get(&config::CrateType::Cdylib))\n+                   .or_else(|| fmts.get(&config::CrateType::ProcMacro));\n     let fmts = match fmts {\n         Some(f) => f,\n         None => return Err(\"could not find formats for rlibs\".to_string())\n@@ -344,14 +344,14 @@ fn link_binary_output(sess: &Session,\n     if outputs.outputs.should_codegen() {\n         let out_filename = out_filename(sess, crate_type, outputs, crate_name);\n         match crate_type {\n-            config::CrateTypeRlib => {\n+            config::CrateType::Rlib => {\n                 link_rlib(sess,\n                           codegen_results,\n                           RlibFlavor::Normal,\n                           &out_filename,\n                           &tmpdir).build();\n             }\n-            config::CrateTypeStaticlib => {\n+            config::CrateType::Staticlib => {\n                 link_staticlib(sess, codegen_results, &out_filename, &tmpdir);\n             }\n             _ => {\n@@ -644,7 +644,7 @@ fn link_natively(sess: &Session,\n     }\n     cmd.args(&sess.opts.debugging_opts.pre_link_arg);\n \n-    let pre_link_objects = if crate_type == config::CrateTypeExecutable {\n+    let pre_link_objects = if crate_type == config::CrateType::Executable {\n         &sess.target.target.options.pre_link_objects_exe\n     } else {\n         &sess.target.target.options.pre_link_objects_dll\n@@ -653,7 +653,7 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n \n-    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static() {\n         for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n             cmd.arg(root.join(obj));\n         }\n@@ -1013,7 +1013,7 @@ fn link_args(cmd: &mut dyn Linker,\n     }\n     cmd.output_filename(out_filename);\n \n-    if crate_type == config::CrateTypeExecutable &&\n+    if crate_type == config::CrateType::Executable &&\n        sess.target.target.options.is_like_windows {\n         if let Some(ref s) = codegen_results.windows_subsystem {\n             cmd.subsystem(s);\n@@ -1022,16 +1022,16 @@ fn link_args(cmd: &mut dyn Linker,\n \n     // If we're building a dynamic library then some platforms need to make sure\n     // that all symbols are exported correctly from the dynamic library.\n-    if crate_type != config::CrateTypeExecutable ||\n+    if crate_type != config::CrateType::Executable ||\n        sess.target.target.options.is_like_emscripten {\n         cmd.export_symbols(tmpdir, crate_type);\n     }\n \n     // When linking a dynamic library, we put the metadata into a section of the\n     // executable. This metadata is in a separate object file from the main\n     // object file, so we link that in here.\n-    if crate_type == config::CrateTypeDylib ||\n-       crate_type == config::CrateTypeProcMacro {\n+    if crate_type == config::CrateType::Dylib ||\n+       crate_type == config::CrateType::ProcMacro {\n         if let Some(obj) = codegen_results.metadata_module.object.as_ref() {\n             cmd.add_object(obj);\n         }\n@@ -1047,13 +1047,13 @@ fn link_args(cmd: &mut dyn Linker,\n     // Try to strip as much out of the generated object by removing unused\n     // sections if possible. See more comments in linker.rs\n     if !sess.opts.cg.link_dead_code {\n-        let keep_metadata = crate_type == config::CrateTypeDylib;\n+        let keep_metadata = crate_type == config::CrateType::Dylib;\n         cmd.gc_sections(keep_metadata);\n     }\n \n     let used_link_args = &codegen_results.crate_info.link_args;\n \n-    if crate_type == config::CrateTypeExecutable {\n+    if crate_type == config::CrateType::Executable {\n         let mut position_independent_executable = false;\n \n         if t.options.position_independent_executables {\n@@ -1145,10 +1145,10 @@ fn link_args(cmd: &mut dyn Linker,\n     add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n \n     // Tell the linker what we're doing.\n-    if crate_type != config::CrateTypeExecutable {\n+    if crate_type != config::CrateType::Executable {\n         cmd.build_dylib(out_filename);\n     }\n-    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static() {\n         cmd.build_static_executable();\n     }\n \n@@ -1448,7 +1448,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n \n         if (!is_full_lto_enabled(sess) ||\n             ignored_for_lto(sess, &codegen_results.crate_info, cnum)) &&\n-           crate_type != config::CrateTypeDylib &&\n+           crate_type != config::CrateType::Dylib &&\n            !skip_native {\n             cmd.link_rlib(&fix_windows_verbatim_for_gcc(cratepath));\n             return\n@@ -1524,7 +1524,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n             // Note, though, that we don't want to include the whole of a\n             // compiler-builtins crate (e.g. compiler-rt) because it'll get\n             // repeatedly linked anyway.\n-            if crate_type == config::CrateTypeDylib &&\n+            if crate_type == config::CrateType::Dylib &&\n                 codegen_results.crate_info.compiler_builtins != Some(cnum) {\n                 cmd.link_whole_rlib(&fix_windows_verbatim_for_gcc(&dst));\n             } else {"}, {"sha": "0383539e7c475a0be1f25e72587d1b653e3027dc", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -387,8 +387,8 @@ impl<'a> Linker for GccLinker<'a> {\n         // exported symbols to ensure we don't expose any more. The object files\n         // have far more public symbols than we actually want to export, so we\n         // hide them all here.\n-        if crate_type == CrateType::CrateTypeDylib ||\n-           crate_type == CrateType::CrateTypeProcMacro {\n+        if crate_type == CrateType::Dylib ||\n+           crate_type == CrateType::ProcMacro {\n             return\n         }\n "}, {"sha": "098676c95a2892472c731c6db1098d09e45317e0", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -32,13 +32,13 @@ use std::sync::Arc;\n \n pub fn crate_type_allows_lto(crate_type: config::CrateType) -> bool {\n     match crate_type {\n-        config::CrateTypeExecutable |\n-        config::CrateTypeStaticlib  |\n-        config::CrateTypeCdylib     => true,\n+        config::CrateType::Executable |\n+        config::CrateType::Staticlib  |\n+        config::CrateType::Cdylib     => true,\n \n-        config::CrateTypeDylib     |\n-        config::CrateTypeRlib      |\n-        config::CrateTypeProcMacro => false,\n+        config::CrateType::Dylib     |\n+        config::CrateType::Rlib      |\n+        config::CrateType::ProcMacro => false,\n     }\n }\n "}, {"sha": "5ce0d45a9bc5a7b82ca11b252f8a07a72d7aee88", "filename": "src/librustc_codegen_llvm/back/symbol_export.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -37,12 +37,12 @@ pub fn threshold(tcx: TyCtxt) -> SymbolExportLevel {\n \n fn crate_export_threshold(crate_type: config::CrateType) -> SymbolExportLevel {\n     match crate_type {\n-        config::CrateTypeExecutable |\n-        config::CrateTypeStaticlib  |\n-        config::CrateTypeProcMacro  |\n-        config::CrateTypeCdylib     => SymbolExportLevel::C,\n-        config::CrateTypeRlib       |\n-        config::CrateTypeDylib      => SymbolExportLevel::Rust,\n+        config::CrateType::Executable |\n+        config::CrateType::Staticlib  |\n+        config::CrateType::ProcMacro  |\n+        config::CrateType::Cdylib     => SymbolExportLevel::C,\n+        config::CrateType::Rlib       |\n+        config::CrateType::Dylib      => SymbolExportLevel::Rust,\n     }\n }\n \n@@ -235,7 +235,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    if tcx.sess.crate_types.borrow().contains(&config::CrateTypeDylib) {\n+    if tcx.sess.crate_types.borrow().contains(&config::CrateType::Dylib) {\n         let symbol_name = metadata_symbol_name(tcx);\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));\n "}, {"sha": "484d30ab7a5e49c6392618800f856c7732d8dfe8", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -875,7 +875,7 @@ pub(crate) struct CompiledModules {\n }\n \n fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n-    sess.crate_types.borrow().contains(&config::CrateTypeRlib) &&\n+    sess.crate_types.borrow().contains(&config::CrateType::Rlib) &&\n     sess.opts.output_types.contains_key(&OutputType::Exe)\n }\n \n@@ -1341,7 +1341,7 @@ fn execute_work_item(cgcx: &CodegenContext,\n                 // anything about it yet until we've got a final product.\n                 Lto::Yes | Lto::Fat | Lto::Thin => {\n                     cgcx.crate_types.len() != 1 ||\n-                        cgcx.crate_types[0] != config::CrateTypeRlib\n+                        cgcx.crate_types[0] != config::CrateType::Rlib\n                 }\n \n                 // When we're automatically doing ThinLTO for multi-codegen-unit\n@@ -2346,7 +2346,7 @@ pub(crate) fn submit_codegened_module_to_llvm(tcx: TyCtxt,\n \n fn msvc_imps_needed(tcx: TyCtxt) -> bool {\n     tcx.sess.target.target.options.is_like_msvc &&\n-        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateTypeRlib)\n+        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateType::Rlib)\n }\n \n // Create a `__imp_<symbol> = &symbol` global for every public static `symbol`."}, {"sha": "8fb3670e5ed9b3b98832b945a98c4733ac2b09c0", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -645,14 +645,14 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n \n     let kind = tcx.sess.crate_types.borrow().iter().map(|ty| {\n         match *ty {\n-            config::CrateTypeExecutable |\n-            config::CrateTypeStaticlib |\n-            config::CrateTypeCdylib => MetadataKind::None,\n+            config::CrateType::Executable |\n+            config::CrateType::Staticlib |\n+            config::CrateType::Cdylib => MetadataKind::None,\n \n-            config::CrateTypeRlib => MetadataKind::Uncompressed,\n+            config::CrateType::Rlib => MetadataKind::Uncompressed,\n \n-            config::CrateTypeDylib |\n-            config::CrateTypeProcMacro => MetadataKind::Compressed,\n+            config::CrateType::Dylib |\n+            config::CrateType::ProcMacro => MetadataKind::Compressed,\n         }\n     }).max().unwrap_or(MetadataKind::None);\n \n@@ -1102,7 +1102,7 @@ impl CrateInfo {\n \n         let load_wasm_items = tcx.sess.crate_types.borrow()\n             .iter()\n-            .any(|c| *c != config::CrateTypeRlib) &&\n+            .any(|c| *c != config::CrateType::Rlib) &&\n             tcx.sess.opts.target_triple.triple() == \"wasm32-unknown-unknown\";\n \n         if load_wasm_items {"}, {"sha": "2832c114f5158c4b0c32c45c5bbf0240f8f9996a", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -147,7 +147,7 @@ fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n \n fn is_any_library(sess: &Session) -> bool {\n     sess.crate_types.borrow().iter().any(|ty| {\n-        *ty != config::CrateTypeExecutable\n+        *ty != config::CrateType::Executable\n     })\n }\n "}, {"sha": "7e726f00b0bf159f5467f15af32fbb74d703b36a", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -114,8 +114,7 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n     fn init(&self, sess: &Session) {\n         for cty in sess.opts.crate_types.iter() {\n             match *cty {\n-                CrateType::CrateTypeRlib | CrateType::CrateTypeDylib |\n-                CrateType::CrateTypeExecutable => {},\n+                CrateType::Rlib | CrateType::Dylib | CrateType::Executable => {},\n                 _ => {\n                     sess.parse_sess.span_diagnostic.warn(\n                         &format!(\"LLVM unsupported, so output type {} is not supported\", cty)\n@@ -201,13 +200,14 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         let ongoing_codegen = ongoing_codegen.downcast::<OngoingCodegen>()\n             .expect(\"Expected MetadataOnlyCodegenBackend's OngoingCodegen, found Box<dyn Any>\");\n         for &crate_type in sess.opts.crate_types.iter() {\n-            if crate_type != CrateType::CrateTypeRlib && crate_type != CrateType::CrateTypeDylib {\n+            if crate_type != CrateType::Rlib &&\n+               crate_type != CrateType::Dylib {\n                 continue;\n             }\n             let output_name =\n                 out_filename(sess, crate_type, &outputs, &ongoing_codegen.crate_name.as_str());\n             let mut compressed = ongoing_codegen.metadata_version.clone();\n-            let metadata = if crate_type == CrateType::CrateTypeDylib {\n+            let metadata = if crate_type == CrateType::Dylib {\n                 DeflateEncoder::new(&mut compressed, Compression::fast())\n                     .write_all(&ongoing_codegen.metadata.raw_data)\n                     .unwrap();\n@@ -220,8 +220,8 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         }\n \n         sess.abort_if_errors();\n-        if !sess.opts.crate_types.contains(&CrateType::CrateTypeRlib)\n-            && !sess.opts.crate_types.contains(&CrateType::CrateTypeDylib)\n+        if !sess.opts.crate_types.contains(&CrateType::Rlib)\n+            && !sess.opts.crate_types.contains(&CrateType::Dylib)\n         {\n             sess.fatal(\"Executables are not supported by the metadata-only backend.\");\n         }"}, {"sha": "73cffdf7d491d297667881481aa2129657426738", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -114,24 +114,24 @@ pub fn filename_for_input(sess: &Session,\n     let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n \n     match crate_type {\n-        config::CrateTypeRlib => {\n+        config::CrateType::Rlib => {\n             outputs.out_directory.join(&format!(\"lib{}.rlib\", libname))\n         }\n-        config::CrateTypeCdylib |\n-        config::CrateTypeProcMacro |\n-        config::CrateTypeDylib => {\n+        config::CrateType::Cdylib |\n+        config::CrateType::ProcMacro |\n+        config::CrateType::Dylib => {\n             let (prefix, suffix) = (&sess.target.target.options.dll_prefix,\n                                     &sess.target.target.options.dll_suffix);\n             outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname,\n                                                 suffix))\n         }\n-        config::CrateTypeStaticlib => {\n+        config::CrateType::Staticlib => {\n             let (prefix, suffix) = (&sess.target.target.options.staticlib_prefix,\n                                     &sess.target.target.options.staticlib_suffix);\n             outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname,\n                                                 suffix))\n         }\n-        config::CrateTypeExecutable => {\n+        config::CrateType::Executable => {\n             let suffix = &sess.target.target.options.exe_suffix;\n             let out_filename = outputs.path(OutputType::Exe);\n             if suffix.is_empty() {\n@@ -148,25 +148,25 @@ pub fn filename_for_input(sess: &Session,\n /// Default crate type is used when crate type isn't provided neither\n /// through cmd line arguments nor through crate attributes\n ///\n-/// It is CrateTypeExecutable for all platforms but iOS as there is no\n+/// It is CrateType::Executable for all platforms but iOS as there is no\n /// way to run iOS binaries anyway without jailbreaking and\n /// interaction with Rust code through static library is the only\n /// option for now\n pub fn default_output_for_target(sess: &Session) -> config::CrateType {\n     if !sess.target.target.options.executables {\n-        config::CrateTypeStaticlib\n+        config::CrateType::Staticlib\n     } else {\n-        config::CrateTypeExecutable\n+        config::CrateType::Executable\n     }\n }\n \n /// Checks if target supports crate_type as output\n pub fn invalid_output_for_target(sess: &Session,\n                                  crate_type: config::CrateType) -> bool {\n     match crate_type {\n-        config::CrateTypeCdylib |\n-        config::CrateTypeDylib |\n-        config::CrateTypeProcMacro => {\n+        config::CrateType::Cdylib |\n+        config::CrateType::Dylib |\n+        config::CrateType::ProcMacro => {\n             if !sess.target.target.options.dynamic_linking {\n                 return true\n             }\n@@ -178,12 +178,12 @@ pub fn invalid_output_for_target(sess: &Session,\n     }\n     if sess.target.target.options.only_cdylib {\n         match crate_type {\n-            config::CrateTypeProcMacro | config::CrateTypeDylib => return true,\n+            config::CrateType::ProcMacro | config::CrateType::Dylib => return true,\n             _ => {}\n         }\n     }\n     if !sess.target.target.options.executables {\n-        if crate_type == config::CrateTypeExecutable {\n+        if crate_type == config::CrateType::Executable {\n             return true\n         }\n     }"}, {"sha": "27b747c633cfe864a07618252967d3f2fe9f2683", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -1058,7 +1058,7 @@ where\n         krate = time(sess, \"maybe creating a macro crate\", || {\n             let crate_types = sess.crate_types.borrow();\n             let num_crate_types = crate_types.len();\n-            let is_proc_macro_crate = crate_types.contains(&config::CrateTypeProcMacro);\n+            let is_proc_macro_crate = crate_types.contains(&config::CrateType::ProcMacro);\n             let is_test_crate = sess.opts.test;\n             syntax_ext::proc_macro_registrar::modify(\n                 &sess.parse_sess,\n@@ -1501,13 +1501,13 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n         .filter_map(|a| {\n             if a.check_name(\"crate_type\") {\n                 match a.value_str() {\n-                    Some(ref n) if *n == \"rlib\" => Some(config::CrateTypeRlib),\n-                    Some(ref n) if *n == \"dylib\" => Some(config::CrateTypeDylib),\n-                    Some(ref n) if *n == \"cdylib\" => Some(config::CrateTypeCdylib),\n+                    Some(ref n) if *n == \"rlib\" => Some(config::CrateType::Rlib),\n+                    Some(ref n) if *n == \"dylib\" => Some(config::CrateType::Dylib),\n+                    Some(ref n) if *n == \"cdylib\" => Some(config::CrateType::Cdylib),\n                     Some(ref n) if *n == \"lib\" => Some(config::default_lib_output()),\n-                    Some(ref n) if *n == \"staticlib\" => Some(config::CrateTypeStaticlib),\n-                    Some(ref n) if *n == \"proc-macro\" => Some(config::CrateTypeProcMacro),\n-                    Some(ref n) if *n == \"bin\" => Some(config::CrateTypeExecutable),\n+                    Some(ref n) if *n == \"staticlib\" => Some(config::CrateType::Staticlib),\n+                    Some(ref n) if *n == \"proc-macro\" => Some(config::CrateType::ProcMacro),\n+                    Some(ref n) if *n == \"bin\" => Some(config::CrateType::Executable),\n                     Some(_) => {\n                         session.buffer_lint(\n                             lint::builtin::UNKNOWN_CRATE_TYPES,\n@@ -1534,7 +1534,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n     // If we're generating a test executable, then ignore all other output\n     // styles at all other locations\n     if session.opts.test {\n-        return vec![config::CrateTypeExecutable];\n+        return vec![config::CrateType::Executable];\n     }\n \n     // Only check command line flags if present. If no types are specified by\n@@ -1598,7 +1598,7 @@ pub fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguator {\n     let is_exe = session\n         .crate_types\n         .borrow()\n-        .contains(&config::CrateTypeExecutable);\n+        .contains(&config::CrateType::Executable);\n     hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n \n     CrateDisambiguator::from(hasher.finish())"}, {"sha": "62c06aac1df0ecb5bb3006fdcc97a5ed4b8c9ecd", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -627,7 +627,7 @@ impl<'a> CrateLoader<'a> {\n         // If we're only compiling an rlib, then there's no need to select a\n         // panic runtime, so we just skip this section entirely.\n         let any_non_rlib = self.sess.crate_types.borrow().iter().any(|ct| {\n-            *ct != config::CrateTypeRlib\n+            *ct != config::CrateType::Rlib\n         });\n         if !any_non_rlib {\n             info!(\"panic runtime injection skipped, only generating rlib\");\n@@ -738,13 +738,13 @@ impl<'a> CrateLoader<'a> {\n                 if !self.sess.crate_types.borrow().iter().all(|ct| {\n                     match *ct {\n                         // Link the runtime\n-                        config::CrateTypeStaticlib |\n-                        config::CrateTypeExecutable => true,\n+                        config::CrateType::Staticlib |\n+                        config::CrateType::Executable => true,\n                         // This crate will be compiled with the required\n                         // instrumentation pass\n-                        config::CrateTypeRlib |\n-                        config::CrateTypeDylib |\n-                        config::CrateTypeCdylib =>\n+                        config::CrateType::Rlib |\n+                        config::CrateType::Dylib |\n+                        config::CrateType::Cdylib =>\n                             false,\n                         _ => {\n                             self.sess.err(&format!(\"Only executables, staticlibs, \\\n@@ -760,10 +760,10 @@ impl<'a> CrateLoader<'a> {\n                 if !self.sess.crate_types.borrow().iter().all(|ct| {\n                     match *ct {\n                         // Link the runtime\n-                        config::CrateTypeExecutable => true,\n+                        config::CrateType::Executable => true,\n                         // This crate will be compiled with the required\n                         // instrumentation pass\n-                        config::CrateTypeRlib => false,\n+                        config::CrateType::Rlib => false,\n                         _ => {\n                             self.sess.err(&format!(\"Only executables and rlibs can be \\\n                                                     compiled with `-Z sanitizer`\"));\n@@ -853,12 +853,12 @@ impl<'a> CrateLoader<'a> {\n         let mut need_exe_alloc = false;\n         for ct in self.sess.crate_types.borrow().iter() {\n             match *ct {\n-                config::CrateTypeExecutable => need_exe_alloc = true,\n-                config::CrateTypeDylib |\n-                config::CrateTypeProcMacro |\n-                config::CrateTypeCdylib |\n-                config::CrateTypeStaticlib => need_lib_alloc = true,\n-                config::CrateTypeRlib => {}\n+                config::CrateType::Executable => need_exe_alloc = true,\n+                config::CrateType::Dylib |\n+                config::CrateType::ProcMacro |\n+                config::CrateType::Cdylib |\n+                config::CrateType::Staticlib => need_lib_alloc = true,\n+                config::CrateType::Rlib => {}\n             }\n         }\n         if !need_lib_alloc && !need_exe_alloc {"}, {"sha": "4a02a278bc14ebb5bbe38370124840a98c739f90", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -28,7 +28,7 @@ use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt, ReprOptions, SymbolName};\n use rustc::ty::codec::{self as ty_codec, TyEncoder};\n \n-use rustc::session::config::{self, CrateTypeProcMacro};\n+use rustc::session::config::{self, CrateType};\n use rustc::util::nodemap::FxHashMap;\n \n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -478,7 +478,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let attrs = tcx.hir.krate_attrs();\n         let link_meta = self.link_meta;\n-        let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeProcMacro);\n+        let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateType::ProcMacro);\n         let has_default_lib_allocator = attr::contains_name(&attrs, \"default_lib_allocator\");\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n \n@@ -1542,7 +1542,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> {\n-        match self.tcx.sess.dependency_formats.borrow().get(&config::CrateTypeDylib) {\n+        match self.tcx.sess.dependency_formats.borrow().get(&config::CrateType::Dylib) {\n             Some(arr) => {\n                 self.lazy_seq(arr.iter().map(|slot| {\n                     match *slot {"}, {"sha": "6e49951ff298ac652ffd9a841ca50b6e7b20ffde", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -44,7 +44,7 @@ use rustc::hir::def::Def as HirDef;\n use rustc::hir::map::{Node, NodeTraitItem, NodeImplItem};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::ExternCrate;\n-use rustc::session::config::CrateType::CrateTypeExecutable;\n+use rustc::session::config::CrateType;\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -1048,7 +1048,7 @@ impl<'a> DumpHandler<'a> {\n                 let executable = sess.crate_types\n                     .borrow()\n                     .iter()\n-                    .any(|ct| *ct == CrateTypeExecutable);\n+                    .any(|ct| *ct == CrateType::Executable);\n                 let mut out_name = if executable {\n                     \"\".to_owned()\n                 } else {"}, {"sha": "b4b573fcb3d161eece6c401e6299a5309e28def8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -223,7 +223,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let sessopts = config::Options {\n         maybe_sysroot,\n         search_paths,\n-        crate_types: vec![config::CrateTypeRlib],\n+        crate_types: vec![config::CrateType::Rlib],\n         lint_opts: if !allow_warnings {\n             lints\n         } else {"}, {"sha": "401d0d193a161c5f6548b21b715a569ad046bad6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -73,7 +73,7 @@ pub fn run(input_path: &Path,\n         maybe_sysroot: maybe_sysroot.clone().or_else(\n             || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n         search_paths: libs.clone(),\n-        crate_types: vec![config::CrateTypeDylib],\n+        crate_types: vec![config::CrateType::Dylib],\n         cg: cg.clone(),\n         externs: externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n@@ -216,7 +216,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         maybe_sysroot: maybe_sysroot.or_else(\n             || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n         search_paths: libs,\n-        crate_types: vec![config::CrateTypeExecutable],\n+        crate_types: vec![config::CrateType::Executable],\n         output_types: outputs,\n         externs,\n         cg: config::CodegenOptions {"}, {"sha": "87d2026fe2dc86c670c47c3a25df150aefe19468", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9344206be8ecd1cd2106bd93cccf46892fc2e5/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=2a9344206be8ecd1cd2106bd93cccf46892fc2e5", "patch": "@@ -63,7 +63,7 @@ impl CodegenBackend for TheBackend {\n         let crate_name = ongoing_codegen.downcast::<Symbol>()\n             .expect(\"in join_codegen_and_link: ongoing_codegen is not a Symbol\");\n         for &crate_type in sess.opts.crate_types.iter() {\n-            if crate_type != CrateType::CrateTypeRlib {\n+            if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));\n             }\n             let output_name ="}]}