{"sha": "44e34c24c4752408038f95225f536d11605c5ba4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZTM0YzI0YzQ3NTI0MDgwMzhmOTUyMjVmNTM2ZDExNjA1YzViYTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-11T19:45:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-13T17:56:05Z"}, "message": "rustdoc: Fix rendering closures and trait bounds\n\nClosures did not have their bounds printed at all, nor their lifetimes. Trait\nbounds were also printed in angle brackets rather than after a colon with a '+'\ninbetween them.\n\nNote that on the current task::spawn [1] documentation page, there is no mention\nof a `Send` bound even though it is crucially important!\n\n[1] - http://static.rust-lang.org/doc/master/std/task/fn.task.html", "tree": {"sha": "d0b8323faddd66056e06aec63e088c40890dd695", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0b8323faddd66056e06aec63e088c40890dd695"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e34c24c4752408038f95225f536d11605c5ba4", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e34c24c4752408038f95225f536d11605c5ba4", "html_url": "https://github.com/rust-lang/rust/commit/44e34c24c4752408038f95225f536d11605c5ba4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e34c24c4752408038f95225f536d11605c5ba4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c62ab109b8bc4da7218c5fab0be1509a8f21664", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c62ab109b8bc4da7218c5fab0be1509a8f21664", "html_url": "https://github.com/rust-lang/rust/commit/4c62ab109b8bc4da7218c5fab0be1509a8f21664"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "1457c454c5766c3f17fc5d86cc508784ef97dd95", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/44e34c24c4752408038f95225f536d11605c5ba4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e34c24c4752408038f95225f536d11605c5ba4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=44e34c24c4752408038f95225f536d11605c5ba4", "patch": "@@ -279,18 +279,17 @@ fn path(w: &mut io::Writer, path: &clean::Path, print_all: bool,\n }\n \n /// Helper to render type parameters\n-fn typarams(w: &mut io::Writer,\n+fn tybounds(w: &mut io::Writer,\n             typarams: &Option<Vec<clean::TyParamBound> >) -> fmt::Result {\n     match *typarams {\n         Some(ref params) => {\n-            try!(write!(w, \"&lt;\"));\n+            try!(write!(w, \":\"));\n             for (i, param) in params.iter().enumerate() {\n                 if i > 0 {\n-                    try!(write!(w, \", \"));\n+                    try!(write!(w, \" + \"));\n                 }\n                 try!(write!(w, \"{}\", *param));\n             }\n-            try!(write!(w, \"&gt;\"));\n             Ok(())\n         }\n         None => Ok(())\n@@ -308,13 +307,13 @@ impl fmt::Show for clean::Type {\n             }\n             clean::ResolvedPath{id, typarams: ref tp, path: ref path} => {\n                 try!(resolved_path(f.buf, id, path, false));\n-                typarams(f.buf, tp)\n+                tybounds(f.buf, tp)\n             }\n             clean::ExternalPath{path: ref path, typarams: ref tp,\n                                 fqn: ref fqn, kind, krate} => {\n                 try!(external_path(f.buf, path, false, fqn.as_slice(), kind,\n                                      krate))\n-                typarams(f.buf, tp)\n+                tybounds(f.buf, tp)\n             }\n             clean::Self(..) => f.buf.write(\"Self\".as_bytes()),\n             clean::Primitive(prim) => {\n@@ -338,26 +337,59 @@ impl fmt::Show for clean::Type {\n                 f.buf.write(s.as_bytes())\n             }\n             clean::Closure(ref decl, ref region) => {\n-                let region = match *region {\n-                    Some(ref region) => format!(\"{} \", *region),\n-                    None => ~\"\",\n-                };\n-\n-                write!(f.buf, \"{}{}|{}|{arrow, select, yes{ -&gt; {ret}} other{}}\",\n-                       FnStyleSpace(decl.fn_style),\n-                       region,\n-                       decl.decl.inputs,\n+                write!(f.buf, \"{style}{lifetimes}|{args}|{bounds}\\\n+                               {arrow, select, yes{ -&gt; {ret}} other{}}\",\n+                       style = FnStyleSpace(decl.fn_style),\n+                       lifetimes = if decl.lifetimes.len() == 0 {\n+                           ~\"\"\n+                       } else {\n+                           format!(\"&lt;{:#}&gt;\", decl.lifetimes)\n+                       },\n+                       args = decl.decl.inputs,\n                        arrow = match decl.decl.output { clean::Unit => \"no\", _ => \"yes\" },\n-                       ret = decl.decl.output)\n-                // FIXME: where are bounds and lifetimes printed?!\n+                       ret = decl.decl.output,\n+                       bounds = {\n+                           let mut ret = StrBuf::new();\n+                           match *region {\n+                               Some(ref lt) => {\n+                                   ret.push_str(format!(\": {}\", *lt));\n+                               }\n+                               None => {}\n+                           }\n+                           for bound in decl.bounds.iter() {\n+                                match *bound {\n+                                    clean::RegionBound => {}\n+                                    clean::TraitBound(ref t) => {\n+                                        if ret.len() == 0 {\n+                                            ret.push_str(\": \");\n+                                        } else {\n+                                            ret.push_str(\" + \");\n+                                        }\n+                                        ret.push_str(format!(\"{}\", *t));\n+                                    }\n+                                }\n+                           }\n+                           ret.into_owned()\n+                       })\n             }\n             clean::Proc(ref decl) => {\n-                write!(f.buf, \"{}proc({}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n-                       FnStyleSpace(decl.fn_style),\n-                       decl.decl.inputs,\n+                write!(f.buf, \"{style}{lifetimes}proc({args}){bounds}\\\n+                               {arrow, select, yes{ -&gt; {ret}} other{}}\",\n+                       style = FnStyleSpace(decl.fn_style),\n+                       lifetimes = if decl.lifetimes.len() == 0 {\n+                           ~\"\"\n+                       } else {\n+                           format!(\"&lt;{:#}&gt;\", decl.lifetimes)\n+                       },\n+                       args = decl.decl.inputs,\n+                       bounds = if decl.bounds.len() == 0 {\n+                           ~\"\"\n+                       } else {\n+                           let mut m = decl.bounds.iter().map(|s| s.to_str());\n+                           \": \" + m.collect::<~[~str]>().connect(\" + \")\n+                       },\n                        arrow = match decl.decl.output { clean::Unit => \"no\", _ => \"yes\" },\n                        ret = decl.decl.output)\n-                // FIXME: where are bounds and lifetimes printed?!\n             }\n             clean::BareFunction(ref decl) => {\n                 write!(f.buf, \"{}{}fn{}{}\","}, {"sha": "aedaa5b3c159f5406537245a939a394cfb36433f", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44e34c24c4752408038f95225f536d11605c5ba4/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e34c24c4752408038f95225f536d11605c5ba4/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=44e34c24c4752408038f95225f536d11605c5ba4", "patch": "@@ -2601,7 +2601,9 @@ impl<A: Clone> Clone for ~[A] {\n \n impl<'a, T: fmt::Show> fmt::Show for &'a [T] {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f.buf, \"[\"));\n+        if f.flags & (1 << (fmt::parse::FlagAlternate as uint)) == 0 {\n+            try!(write!(f.buf, \"[\"));\n+        }\n         let mut is_first = true;\n         for x in self.iter() {\n             if is_first {\n@@ -2611,7 +2613,10 @@ impl<'a, T: fmt::Show> fmt::Show for &'a [T] {\n             }\n             try!(write!(f.buf, \"{}\", *x))\n         }\n-        write!(f.buf, \"]\")\n+        if f.flags & (1 << (fmt::parse::FlagAlternate as uint)) == 0 {\n+            try!(write!(f.buf, \"]\"));\n+        }\n+        Ok(())\n     }\n }\n "}]}