{"sha": "805af227b6e3c817df59aa068bdfc594a8ded0e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNWFmMjI3YjZlM2M4MTdkZjU5YWEwNjhiZGZjNTk0YThkZWQwZTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-30T13:56:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-30T13:57:08Z"}, "message": "Fix line debuginfo malformness in presence of macros", "tree": {"sha": "53ca79994bac6cb4c3f41ce26aad4dbf24070885", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53ca79994bac6cb4c3f41ce26aad4dbf24070885"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/805af227b6e3c817df59aa068bdfc594a8ded0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/805af227b6e3c817df59aa068bdfc594a8ded0e3", "html_url": "https://github.com/rust-lang/rust/commit/805af227b6e3c817df59aa068bdfc594a8ded0e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/805af227b6e3c817df59aa068bdfc594a8ded0e3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9c38b417a54a4d25fe241d973e59e1ebe86c2c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c38b417a54a4d25fe241d973e59e1ebe86c2c2", "html_url": "https://github.com/rust-lang/rust/commit/a9c38b417a54a4d25fe241d973e59e1ebe86c2c2"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "b623d45a5b1d85ed7bafe818ff224a83b98de65d", "filename": "src/debuginfo.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/805af227b6e3c817df59aa068bdfc594a8ded0e3/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805af227b6e3c817df59aa068bdfc594a8ded0e3/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=805af227b6e3c817df59aa068bdfc594a8ded0e3", "patch": "@@ -2,9 +2,10 @@ extern crate gimli;\n \n use crate::prelude::*;\n \n-use std::path::Path;\n use std::marker::PhantomData;\n \n+use syntax::source_map::FileName;\n+\n use gimli::write::{\n     Address, AttributeValue, CompilationUnit, DebugAbbrev, DebugInfo, DebugLine, DebugRanges,\n     DebugRngLists, DebugStr, EndianVec, LineProgram, LineProgramId, LineProgramTable, Range,\n@@ -24,15 +25,28 @@ fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     }\n }\n \n-fn line_program_add_file<P: AsRef<Path>>(line_program: &mut LineProgram, file: P) -> FileId {\n-    let file = file.as_ref();\n-    let dir_id =\n-        line_program.add_directory(file.parent().unwrap().to_str().unwrap().as_bytes());\n-    line_program.add_file(\n-        file.file_name().unwrap().to_str().unwrap().as_bytes(),\n-        dir_id,\n-        None,\n-    )\n+fn line_program_add_file(line_program: &mut LineProgram, file: &FileName) -> FileId {\n+    match file {\n+        FileName::Real(path) => {\n+            let dir_id =\n+                line_program.add_directory(path.parent().unwrap().to_str().unwrap().as_bytes());\n+            line_program.add_file(\n+                path.file_name().unwrap().to_str().unwrap().as_bytes(),\n+                dir_id,\n+                None,\n+            )\n+        }\n+        // FIXME give more appropriate file names\n+        _ => {\n+            let dir_id = line_program.default_directory();\n+            line_program.add_file(\n+                file.to_string().as_bytes(),\n+                dir_id,\n+                None,\n+            )\n+        }\n+    }\n+    \n }\n \n struct DebugReloc {\n@@ -146,7 +160,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n \n         let line_program = self.line_programs.get_mut(self.global_line_program);\n-        let file_id = line_program_add_file(line_program, loc.file.name.to_string());\n+        let file_id = line_program_add_file(line_program, &loc.file.name);\n \n         let unit = self.units.get_mut(self.unit_id);\n         let entry = unit.get_mut(entry_id);\n@@ -347,7 +361,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n \n         let create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n             let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n-            let file_id = line_program_add_file(line_program, loc.file.name.to_string());\n+            let file_id = line_program_add_file(line_program, &loc.file.name);\n \n             /*println!(\n                 \"srcloc {:>04X} {}:{}:{}\","}]}