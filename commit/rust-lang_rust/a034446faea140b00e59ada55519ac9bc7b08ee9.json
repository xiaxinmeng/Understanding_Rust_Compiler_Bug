{"sha": "a034446faea140b00e59ada55519ac9bc7b08ee9", "node_id": "C_kwDOAAsO6NoAKGEwMzQ0NDZmYWVhMTQwYjAwZTU5YWRhNTU1MTlhYzliYzdiMDhlZTk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-23T14:32:01Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-15T15:56:16Z"}, "message": "Add some tracing instrumentation", "tree": {"sha": "a4b2646a3d685fc4b6ad9a9e588068e857ab70b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4b2646a3d685fc4b6ad9a9e588068e857ab70b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a034446faea140b00e59ada55519ac9bc7b08ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a034446faea140b00e59ada55519ac9bc7b08ee9", "html_url": "https://github.com/rust-lang/rust/commit/a034446faea140b00e59ada55519ac9bc7b08ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a034446faea140b00e59ada55519ac9bc7b08ee9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a444a1f45ce5a436e19391ea5a1d9312bed1ad", "html_url": "https://github.com/rust-lang/rust/commit/84a444a1f45ce5a436e19391ea5a1d9312bed1ad"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "dac8862647a85c7e303f0a7946fa122926bae9d5", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=a034446faea140b00e59ada55519ac9bc7b08ee9", "patch": "@@ -23,17 +23,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         ensure_sufficient_stack(|| self.as_temp_inner(block, temp_lifetime, expr, mutability))\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn as_temp_inner(\n         &mut self,\n         mut block: BasicBlock,\n         temp_lifetime: Option<region::Scope>,\n         expr: &Expr<'tcx>,\n         mutability: Mutability,\n     ) -> BlockAnd<Local> {\n-        debug!(\n-            \"as_temp(block={:?}, temp_lifetime={:?}, expr={:?}, mutability={:?})\",\n-            block, temp_lifetime, expr, mutability\n-        );\n         let this = self;\n \n         let expr_span = expr.span;"}, {"sha": "6132de6d4862aaba9a148f854669630d510c63d4", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=a034446faea140b00e59ada55519ac9bc7b08ee9", "patch": "@@ -15,14 +15,13 @@ use std::iter;\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which\n     /// is assumed to be uninitialized.\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn expr_into_dest(\n         &mut self,\n         destination: Place<'tcx>,\n         mut block: BasicBlock,\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<()> {\n-        debug!(\"expr_into_dest(destination={:?}, block={:?}, expr={:?})\", destination, block, expr);\n-\n         // since we frequently have to reference `self` from within a\n         // closure, where `self` would be shadowed, it's easier to\n         // just use the name `this` uniformly"}, {"sha": "f2c8b80b1d7630d1fbdc348ad734b25bea90f2e5", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=a034446faea140b00e59ada55519ac9bc7b08ee9", "patch": "@@ -654,6 +654,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// scope for the bindings in these patterns, if such a scope had to be\n     /// created. NOTE: Declaring the bindings should always be done in their\n     /// drop scope.\n+    #[instrument(skip(self), level = \"debug\")]\n     pub(crate) fn declare_bindings(\n         &mut self,\n         mut visibility_scope: Option<SourceScope>,\n@@ -662,7 +663,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<&Place<'tcx>>, Span)>,\n     ) -> Option<SourceScope> {\n-        debug!(\"declare_bindings: pattern={:?}\", pattern);\n         self.visit_primary_bindings(\n             &pattern,\n             UserTypeProjections::none(),\n@@ -1048,6 +1048,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// if `x.0` matches `false` (for the third arm). In the (impossible at\n     /// runtime) case when `x.0` is now `true`, we branch to\n     /// `otherwise_block`.\n+    #[instrument(skip(self, fake_borrows), level = \"debug\")]\n     fn match_candidates<'pat>(\n         &mut self,\n         span: Span,\n@@ -1057,11 +1058,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         candidates: &mut [&mut Candidate<'pat, 'tcx>],\n         fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) {\n-        debug!(\n-            \"matched_candidate(span={:?}, candidates={:?}, start_block={:?}, otherwise_block={:?})\",\n-            span, candidates, start_block, otherwise_block,\n-        );\n-\n         // Start by simplifying candidates. Once this process is complete, all\n         // the match pairs which remain require some form of test, whether it\n         // be a switch or pattern comparison.\n@@ -1380,6 +1376,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         )\n     }\n \n+    #[instrument(\n+        skip(self, otherwise, or_span, place, fake_borrows, candidate, pats),\n+        level = \"debug\"\n+    )]\n     fn test_or_pattern<'pat>(\n         &mut self,\n         candidate: &mut Candidate<'pat, 'tcx>,\n@@ -1389,7 +1389,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         place: PlaceBuilder<'tcx>,\n         fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) {\n-        debug!(\"test_or_pattern:\\ncandidate={:#?}\\npats={:#?}\", candidate, pats);\n+        debug!(\"candidate={:#?}\\npats={:#?}\", candidate, pats);\n         let mut or_candidates: Vec<_> = pats\n             .iter()\n             .map(|pat| Candidate::new(place.clone(), pat, candidate.has_guard))\n@@ -1634,9 +1634,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             candidates = rest;\n         }\n         // at least the first candidate ought to be tested\n-        assert!(total_candidate_count > candidates.len());\n-        debug!(\"test_candidates: tested_candidates: {}\", total_candidate_count - candidates.len());\n-        debug!(\"test_candidates: untested_candidates: {}\", candidates.len());\n+        assert!(\n+            total_candidate_count > candidates.len(),\n+            \"{}, {:#?}\",\n+            total_candidate_count,\n+            candidates\n+        );\n+        debug!(\"tested_candidates: {}\", total_candidate_count - candidates.len());\n+        debug!(\"untested_candidates: {}\", candidates.len());\n \n         // HACK(matthewjasper) This is a closure so that we can let the test\n         // create its blocks before the rest of the match. This currently\n@@ -2195,6 +2200,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// first local is a binding for occurrences of `var` in the guard, which\n     /// will have type `&T`. The second local is a binding for occurrences of\n     /// `var` in the arm body, which will have type `T`.\n+    #[instrument(skip(self), level = \"debug\")]\n     fn declare_binding(\n         &mut self,\n         source_info: SourceInfo,\n@@ -2209,19 +2215,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,\n     ) {\n-        debug!(\n-            \"declare_binding(var_id={:?}, name={:?}, mode={:?}, var_ty={:?}, \\\n-             visibility_scope={:?}, source_info={:?})\",\n-            var_id, name, mode, var_ty, visibility_scope, source_info\n-        );\n-\n         let tcx = self.tcx;\n         let debug_source_info = SourceInfo { span: source_info.span, scope: visibility_scope };\n         let binding_mode = match mode {\n             BindingMode::ByValue => ty::BindingMode::BindByValue(mutability),\n             BindingMode::ByRef(_) => ty::BindingMode::BindByReference(mutability),\n         };\n-        debug!(\"declare_binding: user_ty={:?}\", user_ty);\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty,\n@@ -2271,7 +2270,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         } else {\n             LocalsForNode::One(for_arm_body)\n         };\n-        debug!(\"declare_binding: vars={:?}\", locals);\n+        debug!(?locals);\n         self.var_indices.insert(var_id, locals);\n     }\n "}, {"sha": "878b17ce5a41db5356ee2d4c06a81e1bfe9149d1", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=a034446faea140b00e59ada55519ac9bc7b08ee9", "patch": "@@ -37,12 +37,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///\n     /// only generates a single switch. If this happens this method returns\n     /// `true`.\n+    #[instrument(skip(self, candidate), level = \"debug\")]\n     pub(super) fn simplify_candidate<'pat>(\n         &mut self,\n         candidate: &mut Candidate<'pat, 'tcx>,\n     ) -> bool {\n         // repeatedly simplify match pairs until fixed point is reached\n-        debug!(?candidate, \"simplify_candidate\");\n+        debug!(\"{:#?}\", candidate);\n \n         // existing_bindings and new_bindings exists to keep the semantics in order.\n         // Reversing the binding order for bindings after `@` changes the binding order in places"}, {"sha": "1ef2524f136a58b2c86765e09ddac4b556615211", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=a034446faea140b00e59ada55519ac9bc7b08ee9", "patch": "@@ -144,6 +144,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self, make_target_blocks, place_builder), level = \"debug\")]\n     pub(super) fn perform_test(\n         &mut self,\n         match_start_span: Span,"}, {"sha": "ab37c4802852a85e1015038723230591167e8d75", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=a034446faea140b00e59ada55519ac9bc7b08ee9", "patch": "@@ -553,6 +553,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     /// Convenience wrapper that pushes a scope and then executes `f`\n     /// to build its contents, popping the scope afterwards.\n+    #[instrument(skip(self, f), level = \"debug\")]\n     pub(crate) fn in_scope<F, R>(\n         &mut self,\n         region_scope: (region::Scope, SourceInfo),\n@@ -562,7 +563,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     where\n         F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>,\n     {\n-        debug!(\"in_scope(region_scope={:?})\", region_scope);\n         let source_scope = self.source_scope;\n         let tcx = self.tcx;\n         if let LintLevel::Explicit(current_hir_id) = lint_level {\n@@ -589,7 +589,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(region_scope, block));\n         self.source_scope = source_scope;\n-        debug!(\"in_scope: exiting region_scope={:?} block={:?}\", region_scope, block);\n+        debug!(?block);\n         block.and(rv)\n     }\n "}, {"sha": "05da33caa91bdefe94a338c292d4e52a33cd4f16", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=a034446faea140b00e59ada55519ac9bc7b08ee9", "patch": "@@ -48,6 +48,8 @@ impl<'tcx> Cx<'tcx> {\n             _ => None,\n         };\n \n+        trace!(?expr.ty);\n+\n         // Now apply adjustments, if any.\n         for adjustment in self.typeck_results.expr_adjustments(hir_expr) {\n             trace!(?expr, ?adjustment);\n@@ -56,6 +58,8 @@ impl<'tcx> Cx<'tcx> {\n                 self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));\n         }\n \n+        trace!(?expr.ty, \"after adjustments\");\n+\n         // Next, wrap this up in the expr's scope.\n         expr = Expr {\n             temp_lifetime,"}, {"sha": "7d22f7b69d862059da105dbe1dc55b71ab79cf15", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a034446faea140b00e59ada55519ac9bc7b08ee9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=a034446faea140b00e59ada55519ac9bc7b08ee9", "patch": "@@ -196,6 +196,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Pat<'tcx> {\n         let mut ty = self.typeck_results.node_type(pat.hir_id);\n "}]}