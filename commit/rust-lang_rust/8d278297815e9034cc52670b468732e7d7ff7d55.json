{"sha": "8d278297815e9034cc52670b468732e7d7ff7d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMjc4Mjk3ODE1ZTkwMzRjYzUyNjcwYjQ2ODczMmU3ZDdmZjdkNTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-31T16:43:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-31T17:29:11Z"}, "message": "Reduce deps", "tree": {"sha": "5d0ae6e3e1184b00cdfc293c12525fa90cb79f4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d0ae6e3e1184b00cdfc293c12525fa90cb79f4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d278297815e9034cc52670b468732e7d7ff7d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d278297815e9034cc52670b468732e7d7ff7d55", "html_url": "https://github.com/rust-lang/rust/commit/8d278297815e9034cc52670b468732e7d7ff7d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d278297815e9034cc52670b468732e7d7ff7d55/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a01de42c1bd435710741a2e15ceee1efaccf39", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a01de42c1bd435710741a2e15ceee1efaccf39", "html_url": "https://github.com/rust-lang/rust/commit/37a01de42c1bd435710741a2e15ceee1efaccf39"}], "stats": {"total": 79, "additions": 40, "deletions": 39}, "files": [{"sha": "9a1a0568307168ba775319b32ffca745ad376153", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d278297815e9034cc52670b468732e7d7ff7d55/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8d278297815e9034cc52670b468732e7d7ff7d55/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8d278297815e9034cc52670b468732e7d7ff7d55", "patch": "@@ -1103,7 +1103,6 @@ dependencies = [\n  \"ra_arena\",\n  \"ra_cfg\",\n  \"ra_db\",\n- \"ra_flycheck\",\n  \"ra_proc_macro\",\n  \"rustc-hash\",\n  \"serde\","}, {"sha": "38940a77bf75ec24d45e777c1f17f404bf2f3607", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d278297815e9034cc52670b468732e7d7ff7d55/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d278297815e9034cc52670b468732e7d7ff7d55/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=8d278297815e9034cc52670b468732e7d7ff7d55", "patch": "@@ -243,7 +243,7 @@ impl fmt::Display for CargoError {\n }\n impl error::Error for CargoError {}\n \n-pub fn run_cargo(\n+fn run_cargo(\n     args: &[String],\n     current_dir: Option<&Path>,\n     on_message: &mut dyn FnMut(cargo_metadata::Message) -> bool,"}, {"sha": "b10644b4b05e5e6df5f6f9d63b279c55dd09d107", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d278297815e9034cc52670b468732e7d7ff7d55/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8d278297815e9034cc52670b468732e7d7ff7d55/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=8d278297815e9034cc52670b468732e7d7ff7d55", "patch": "@@ -16,7 +16,6 @@ cargo_metadata = \"0.9.1\"\n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n-ra_flycheck = { path = \"../ra_flycheck\" }\n ra_proc_macro =  { path = \"../ra_proc_macro\" }\n \n serde = { version = \"1.0.104\", features = [\"derive\"] }"}, {"sha": "f4fd6ad28cfe9baa8acfdc7a2dca0d75005202af", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 39, "deletions": 36, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8d278297815e9034cc52670b468732e7d7ff7d55/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d278297815e9034cc52670b468732e7d7ff7d55/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=8d278297815e9034cc52670b468732e7d7ff7d55", "patch": "@@ -1,16 +1,17 @@\n //! FIXME: write short doc here\n \n use std::{\n+    env,\n     ffi::OsStr,\n     ops,\n     path::{Path, PathBuf},\n+    process::Command,\n };\n \n use anyhow::{Context, Result};\n use cargo_metadata::{BuildScript, CargoOpt, Message, MetadataCommand, PackageId};\n use ra_arena::{Arena, Idx};\n use ra_db::Edition;\n-use ra_flycheck::run_cargo;\n use rustc_hash::FxHashMap;\n use serde::Deserialize;\n \n@@ -163,7 +164,7 @@ impl CargoWorkspace {\n         let mut out_dir_by_id = FxHashMap::default();\n         let mut proc_macro_dylib_paths = FxHashMap::default();\n         if cargo_features.load_out_dirs_from_check {\n-            let resources = load_extern_resources(cargo_toml, cargo_features);\n+            let resources = load_extern_resources(cargo_toml, cargo_features)?;\n             out_dir_by_id = resources.out_dirs;\n             proc_macro_dylib_paths = resources.proc_dylib_paths;\n         }\n@@ -272,53 +273,51 @@ pub struct ExternResources {\n     proc_dylib_paths: FxHashMap<PackageId, PathBuf>,\n }\n \n-pub fn load_extern_resources(cargo_toml: &Path, cargo_features: &CargoFeatures) -> ExternResources {\n-    let mut args: Vec<String> = vec![\n-        \"check\".to_string(),\n-        \"--message-format=json\".to_string(),\n-        \"--manifest-path\".to_string(),\n-        cargo_toml.display().to_string(),\n-    ];\n-\n+pub fn load_extern_resources(\n+    cargo_toml: &Path,\n+    cargo_features: &CargoFeatures,\n+) -> Result<ExternResources> {\n+    let mut cmd = Command::new(cargo_binary());\n+    cmd.args(&[\"check\", \"--message-format=json\", \"--manifest-path\"]).arg(cargo_toml);\n     if cargo_features.all_features {\n-        args.push(\"--all-features\".to_string());\n+        cmd.arg(\"--all-features\");\n     } else if cargo_features.no_default_features {\n         // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n         // https://github.com/oli-obk/cargo_metadata/issues/79\n-        args.push(\"--no-default-features\".to_string());\n+        cmd.arg(\"--no-default-features\");\n     } else {\n-        args.extend(cargo_features.features.iter().cloned());\n+        cmd.args(&cargo_features.features);\n     }\n \n-    let mut acc = ExternResources::default();\n-    let res = run_cargo(&args, cargo_toml.parent(), &mut |message| {\n-        match message {\n-            Message::BuildScriptExecuted(BuildScript { package_id, out_dir, .. }) => {\n-                acc.out_dirs.insert(package_id, out_dir);\n-            }\n+    let output = cmd.output()?;\n+\n+    let mut res = ExternResources::default();\n+\n+    let stdout = String::from_utf8(output.stdout)?;\n+    for line in stdout.lines() {\n+        if let Ok(message) = serde_json::from_str::<cargo_metadata::Message>(&line) {\n+            match message {\n+                Message::BuildScriptExecuted(BuildScript { package_id, out_dir, .. }) => {\n+                    res.out_dirs.insert(package_id, out_dir);\n+                }\n \n-            Message::CompilerArtifact(message) => {\n-                if message.target.kind.contains(&\"proc-macro\".to_string()) {\n-                    let package_id = message.package_id;\n-                    // Skip rmeta file\n-                    if let Some(filename) =\n-                        message.filenames.iter().filter(|name| is_dylib(name)).next()\n-                    {\n-                        acc.proc_dylib_paths.insert(package_id, filename.clone());\n+                Message::CompilerArtifact(message) => {\n+                    if message.target.kind.contains(&\"proc-macro\".to_string()) {\n+                        let package_id = message.package_id;\n+                        // Skip rmeta file\n+                        if let Some(filename) =\n+                            message.filenames.iter().filter(|name| is_dylib(name)).next()\n+                        {\n+                            res.proc_dylib_paths.insert(package_id, filename.clone());\n+                        }\n                     }\n                 }\n+                Message::CompilerMessage(_) => (),\n+                Message::Unknown => (),\n             }\n-            Message::CompilerMessage(_) => (),\n-            Message::Unknown => (),\n         }\n-        true\n-    });\n-\n-    if let Err(err) = res {\n-        log::error!(\"Failed to load outdirs: {:?}\", err);\n     }\n-\n-    acc\n+    Ok(res)\n }\n \n // FIXME: File a better way to know if it is a dylib\n@@ -328,3 +327,7 @@ fn is_dylib(path: &Path) -> bool {\n         Some(ext) => matches!(ext.as_str(), \"dll\" | \"dylib\" | \"so\"),\n     }\n }\n+\n+fn cargo_binary() -> String {\n+    env::var(\"CARGO\").unwrap_or_else(|_| \"cargo\".to_string())\n+}"}]}