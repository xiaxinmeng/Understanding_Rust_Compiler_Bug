{"sha": "dfdd6dbc5464147d984470086ab27c950d60d83e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZGQ2ZGJjNTQ2NDE0N2Q5ODQ0NzAwODZhYjI3Yzk1MGQ2MGQ4M2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T17:46:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T17:47:33Z"}, "message": "rustc: Remove the bitwise not operator", "tree": {"sha": "0cef168e2bebe9ce4aeba5a96f1647216bee3ea4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cef168e2bebe9ce4aeba5a96f1647216bee3ea4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfdd6dbc5464147d984470086ab27c950d60d83e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfdd6dbc5464147d984470086ab27c950d60d83e", "html_url": "https://github.com/rust-lang/rust/commit/dfdd6dbc5464147d984470086ab27c950d60d83e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfdd6dbc5464147d984470086ab27c950d60d83e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a066ba547ab900d22fd435652fd9106ba180dfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a066ba547ab900d22fd435652fd9106ba180dfa", "html_url": "https://github.com/rust-lang/rust/commit/7a066ba547ab900d22fd435652fd9106ba180dfa"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "a61562b9c161b93975638c647e97189446c6b66e", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=dfdd6dbc5464147d984470086ab27c950d60d83e", "patch": "@@ -183,7 +183,6 @@ fn binop_to_str(binop op) -> str {\n tag unop {\n     box(mutability);\n     deref;\n-    bitnot;\n     not;\n     neg;\n }\n@@ -195,7 +194,6 @@ fn unop_to_str(unop op) -> str {\n             ret \"@\";\n         }\n         case (deref) {ret \"*\";}\n-        case (bitnot) {ret \"~\";}\n         case (not) {ret \"!\";}\n         case (neg) {ret \"-\";}\n     }"}, {"sha": "7aa4d7b8ee62907055dbf22c71f5940773a16f4b", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=dfdd6dbc5464147d984470086ab27c950d60d83e", "patch": "@@ -1172,13 +1172,6 @@ fn parse_prefix_expr(&parser p) -> @ast::expr {\n             ex = ast::expr_unary(ast::not, e, p.get_ann());\n         }\n \n-        case (token::TILDE) {\n-            p.bump();\n-            auto e = parse_prefix_expr(p);\n-            hi = e.span.hi;\n-            ex = ast::expr_unary(ast::bitnot, e, p.get_ann());\n-        }\n-\n         case (token::BINOP(?b)) {\n             alt (b) {\n                 case (token::MINUS) {"}, {"sha": "ec51e8e691be2a4a58b71e4d9d0af224119fd6bf", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=dfdd6dbc5464147d984470086ab27c950d60d83e", "patch": "@@ -3388,11 +3388,6 @@ fn trans_unary(&@block_ctxt cx, ast::unop op,\n     auto e_ty = ty::expr_ty(cx.fcx.lcx.ccx.tcx, e);\n \n     alt (op) {\n-        case (ast::bitnot) {\n-            sub = autoderef(sub.bcx, sub.val,\n-                            ty::expr_ty(cx.fcx.lcx.ccx.tcx, e));\n-            ret res(sub.bcx, sub.bcx.build.Not(sub.val));\n-        }\n         case (ast::not) {\n             sub = autoderef(sub.bcx, sub.val,\n                             ty::expr_ty(cx.fcx.lcx.ccx.tcx, e));"}, {"sha": "289691444b0b5c7baa6928986a07642a10d35482", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=dfdd6dbc5464147d984470086ab27c950d60d83e", "patch": "@@ -1580,6 +1580,16 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                         }\n                     }\n                 }\n+                case (ast::not) {\n+                    if (!type_is_integral(fcx, oper.span, oper_t) &&\n+                            structure_of(fcx, oper.span, oper_t)\n+                                != ty::ty_bool) {\n+                        fcx.ccx.tcx.sess.span_err(expr.span,\n+                            #fmt(\"mismatched types: expected bool or \\\n+                            integer but found %s\",\n+                            ty_to_str(fcx.ccx.tcx, oper_t)));\n+                    }\n+                }\n                 case (_) { oper_t = strip_boxes(fcx, expr.span, oper_t); }\n             }\n "}, {"sha": "689f3501b52316019ca2d28300b036f845bdc9bd", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=dfdd6dbc5464147d984470086ab27c950d60d83e", "patch": "@@ -32,11 +32,7 @@ fn uint_bits() -> uint {\n }\n \n fn create(uint nbits, bool init) -> t {\n-    auto elt = if (init) {\n-        ~0u\n-    } else {\n-        0u\n-    };\n+    auto elt = if (init) { !0u } else { 0u };\n \n     auto storage = vec::init_elt_mut[uint](elt, nbits / uint_bits() + 1u);\n     ret rec(storage = storage, nbits = nbits);\n@@ -139,7 +135,7 @@ fn set_all(&t v) {\n \n fn invert(&t v) {\n     for each (uint i in uint::range(0u, vec::len(v.storage))) {\n-        v.storage.(i) = ~v.storage.(i);\n+        v.storage.(i) = !v.storage.(i);\n     }\n }\n \n@@ -163,7 +159,7 @@ fn set(&t v, uint i, bool x) {\n     v.storage.(w) = if (x) {\n         v.storage.(w) | flag\n     } else {\n-        v.storage.(w) & ~flag\n+        v.storage.(w) & !flag\n     };\n }\n "}, {"sha": "215671c545eeebd2d9b02d3215d88ec886594a47", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdd6dbc5464147d984470086ab27c950d60d83e/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=dfdd6dbc5464147d984470086ab27c950d60d83e", "patch": "@@ -110,7 +110,7 @@ fn mk_sha1() -> sha1 {\n         t = 0;\n         while (t < 20) {\n             temp = circular_shift(5u32, a)\n-                + ((b & c) | ((~b) & d)) + e + w.(t) + k0;\n+                + ((b & c) | ((!b) & d)) + e + w.(t) + k0;\n             e = d;\n             d = c;\n             c = circular_shift(30u32, b);"}]}