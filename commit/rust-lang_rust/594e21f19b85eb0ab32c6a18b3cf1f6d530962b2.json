{"sha": "594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NGUyMWYxOWI4NWViMGFiMzJjNmExOGIzY2YxZjZkNTMwOTYyYjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-08T01:23:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-03T00:05:14Z"}, "message": "Correct various compile-fail tests. Most of the changes are because we\nnow don't print duplicate errors within one context, so I sometimes\nhad to break functions into two functions.", "tree": {"sha": "fe587133ed52b815a081ac058e1884cdacd56e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe587133ed52b815a081ac058e1884cdacd56e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "html_url": "https://github.com/rust-lang/rust/commit/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85ff16173b54a1aa813eabb411c45c28ffcb66d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85ff16173b54a1aa813eabb411c45c28ffcb66d", "html_url": "https://github.com/rust-lang/rust/commit/d85ff16173b54a1aa813eabb411c45c28ffcb66d"}], "stats": {"total": 96, "additions": 72, "deletions": 24}, "files": [{"sha": "8cb4b6328c490dd5731b6cd598ea4a96c48ab704", "filename": "src/test/compile-fail/comm-not-freeze-receiver.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn test<T: Sync>() {}\n+\n+fn main() {\n+    test::<Receiver<int>>();   //~ ERROR: `core::kinds::Sync` is not implemented\n+}"}, {"sha": "8c17895eb8a02e8dc5b309c61d46d7a19951eac9", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -11,7 +11,5 @@\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Sender<int>>();        //~ ERROR: `core::kinds::Sync` is not implemented\n-    test::<Receiver<int>>();        //~ ERROR: `core::kinds::Sync` is not implemented\n-    test::<Sender<int>>();  //~ ERROR: `core::kinds::Sync` is not implemented\n+    test::<Sender<int>>();     //~ ERROR: `core::kinds::Sync` is not implemented\n }"}, {"sha": "e6ac30139c37fba489a4bf4c19708529db799cc2", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -18,7 +18,6 @@ fn new_struct(r: A+'static)\n     -> Struct { //~^  ERROR the trait `core::kinds::Sized` is not implemented\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented\n     Struct { r: r }\n-    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }\n \n trait Curve {}"}, {"sha": "bef8ca6b86cba026c43aef7b1e8521273d4044de", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -32,5 +32,5 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR the trait `core::kinds::Send` is not implemented for the type `B`\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n }"}, {"sha": "d1a86d334cb44e631c7705f20fb61a0cf8570878", "filename": "src/test/compile-fail/issue-8727.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern:reached the recursion limit during monomorphization\n+\n // Verify the compiler fails with an error on infinite function\n // recursions.\n \n-\n struct Data(Box<Option<Data>>);\n \n fn generic<T>( _ : Vec<(Data,T)> ) {\n-    //~^ ERROR reached the recursion limit during monomorphization\n     let rec : Vec<(Data,(bool,T))> = Vec::new();\n     generic( rec );\n }"}, {"sha": "f0c4a4243acc977e62897556d38544cf8f8c75f3", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -22,7 +22,7 @@ struct MyStruct {\n }\n \n struct MyNoncopyStruct {\n-    x: Box<int>,\n+    x: Box<char>,\n }\n \n fn test<'a,T,U:Copy>(_: &'a int) {"}, {"sha": "1a82a2b3832cbba7c090ac329464c21a08c1a71a", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n }\n \n impl Drop for Foo {\n-//~^ ERROR the trait `core::kinds::Send` is not implemented for the type `Foo`\n+//~^ ERROR the trait `core::kinds::Send` is not implemented\n //~^^ NOTE cannot implement a destructor on a structure or enumeration that does not satisfy Send\n     fn drop(&mut self) {\n     }"}, {"sha": "a430fe72333cd783607b25b8ebc559dbbd994580", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -22,6 +22,10 @@ fn f<T>(val: T) {\n     let a = &t as &Gettable<T>;\n     //~^ ERROR the trait `core::kinds::Send` is not implemented\n     //~^^ ERROR the trait `core::kinds::Copy` is not implemented\n+}\n+\n+fn g<T>(val: T) {\n+    let t: S<T> = S;\n     let a: &Gettable<T> = &t;\n     //~^ ERROR the trait `core::kinds::Send` is not implemented\n     //~^^ ERROR the trait `core::kinds::Copy` is not implemented\n@@ -30,9 +34,15 @@ fn f<T>(val: T) {\n fn foo<'a>() {\n     let t: S<&'a int> = S;\n     let a = &t as &Gettable<&'a int>;\n+}\n+\n+fn foo2<'a>() {\n     let t: Box<S<String>> = box S;\n     let a = t as Box<Gettable<String>>;\n     //~^ ERROR the trait `core::kinds::Copy` is not implemented\n+}\n+\n+fn foo3<'a>() {\n     let t: Box<S<String>> = box S;\n     let a: Box<Gettable<String>> = t;\n     //~^ ERROR the trait `core::kinds::Copy` is not implemented"}, {"sha": "d694fd2c79512a6d8c3ddd50e461265eda3d5d61", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -13,10 +13,14 @@ use std::rc::Rc;\n \n fn foo(_x: Rc<uint>) {}\n \n-fn main() {\n+fn bar() {\n     let x = Rc::new(3u);\n     let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n-    let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n-    let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n+}\n+\n+fn bar2() {\n+    let x = Rc::new(3u);\n     let _: proc() = proc() foo(x);\n }\n+\n+fn main() { }"}, {"sha": "d988a245700f200b3d31f25b13e3c5dc392be8be", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -29,5 +29,5 @@ fn foo(i:int, j: Rc<String>) -> foo {\n fn main() {\n   let cat = \"kitty\".to_string();\n   let (tx, _) = channel(); //~ ERROR `core::kinds::Send` is not implemented\n-  tx.send(foo(42, Rc::new(cat))); //~ ERROR `core::kinds::Send` is not implemented\n+  tx.send(foo(42, Rc::new(cat)));\n }"}, {"sha": "0462a2025d2ce72dac239bede11451bbe31b6242", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -8,14 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Foo<T> { FooSome(T), FooNone }\n \n-fn bar<T: Sized>() { }\n-fn foo<Sized? T>() { bar::<Foo<T>>() }\n+fn is_sized<T:Sized>() { }\n+fn not_sized<Sized? T>() { }\n+\n+enum Foo<U> { FooSome(U), FooNone }\n+fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n+fn foo2<Sized? T>() { not_sized::<Foo<T>>() }\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented\n+//\n+// Not OK: `T` is not sized.\n+\n+enum Bar<Sized? U> { BarSome(U), BarNone }\n+fn bar1<Sized? T>() { not_sized::<Bar<T>>() }\n+fn bar2<Sized? T>() { is_sized::<Bar<T>>() }\n //~^ ERROR the trait `core::kinds::Sized` is not implemented\n-//~^^ ERROR the trait `core::kinds::Sized` is not implemented\n //\n-// One error is for T being provided to Foo<T>, the other is\n-// for Foo<T> being provided to bar.\n+// Not OK: `Bar<T>` is not sized, but it should be.\n \n fn main() { }"}, {"sha": "db2e9cb932800d5d4aa7c1f2482e6303874dad98", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -8,13 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+fn is_sized<T:Sized>() { }\n+fn not_sized<Sized? T>() { }\n+\n struct Foo<T> { data: T }\n+fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n+fn foo2<Sized? T>() { not_sized::<Foo<T>>() }\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented\n+//\n+// Not OK: `T` is not sized.\n \n-fn bar<T: Sized>() { }\n-fn foo<Sized? T>() { bar::<Foo<T>>() }\n+struct Bar<Sized? T> { data: T }\n+fn bar1<Sized? T>() { not_sized::<Bar<T>>() }\n+fn bar2<Sized? T>() { is_sized::<Bar<T>>() }\n //~^ ERROR the trait `core::kinds::Sized` is not implemented\n-//~^^ ERROR the trait `core::kinds::Sized` is not implemented\n-// One error is for the T in Foo<T>, the other is for Foo<T> as a value\n-// for bar's type parameter.\n+//\n+// Not OK: `Bar<T>` is not sized, but it should be.\n \n fn main() { }"}, {"sha": "0a75240f2d89df613224e0d8fd16e8299df98441", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -57,6 +57,9 @@ fn f8<Sized? X>(x1: &S<X>, x2: &S<X>) {\n fn f9<Sized? X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(*x1, 34i));\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented\n+}\n+\n+fn f10<Sized? X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(32i, *x2));\n     //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }"}, {"sha": "d9d7a86889f5771f741b6a76cf458000ae01bd42", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594e21f19b85eb0ab32c6a18b3cf1f6d530962b2/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=594e21f19b85eb0ab32c6a18b3cf1f6d530962b2", "patch": "@@ -29,6 +29,8 @@ struct S4 {\n }\n enum E<Sized? X> {\n     V1(X, int), //~ERROR `core::kinds::Sized` is not implemented\n+}\n+enum F<Sized? X> {\n     V2{f1: X, f: int}, //~ERROR `core::kinds::Sized` is not implemented\n }\n "}]}