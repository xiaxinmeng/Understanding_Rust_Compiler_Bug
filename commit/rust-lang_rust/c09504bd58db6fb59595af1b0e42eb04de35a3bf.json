{"sha": "c09504bd58db6fb59595af1b0e42eb04de35a3bf", "node_id": "C_kwDOAAsO6NoAKGMwOTUwNGJkNThkYjZmYjU5NTk1YWYxYjBlNDJlYjA0ZGUzNWEzYmY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-07T13:24:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-07T13:24:58Z"}, "message": "Merge #11194\n\n11194: fix(gen-doc-assist): remove lifetimes in description of `new` r=Veykril a=numero-744\n\nFrom wrong behavior:\r\n\r\n```rust\r\n/// Creates a new [`MyGenericStruct<'a, T>`].\r\n```\r\n\r\nto correct behavior:\r\n\r\n```rust\r\n/// Creates a new [`MyGenericStruct<T>`].\r\n```\r\n\r\nBut I feel like there is a better way to implement it. Do you know if there is an existing function that could do the work of `lifetimes_removed()` below?\n\nCo-authored-by: C\u00f4me ALLART <come.allart@etu.emse.fr>", "tree": {"sha": "d1467a450b821afb4258dcc382e8fe2f35c1984f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1467a450b821afb4258dcc382e8fe2f35c1984f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09504bd58db6fb59595af1b0e42eb04de35a3bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2D8qCRBK7hj4Ov3rIwAAqosIALGMEM5XB708lU5Fv7cYRLXG\ndUC0XXAacKmstUVM9T+2/Pu1WV5esi6SxbdPO1zpCBrxc1ZuQ0e+iUKjllaH8Y2V\nYZxDVnhh71IUS7zV3UiKNEOxcdPuFwmZEATUqq7dBp8UcDsx6gfR+IH9akM7zs+3\nap37HDOYnvTvXeFnh9NhKgvZLUoX/NRyqsnyJP7rSv4PSimjGJdMdQLhV6AOM9sY\nUxBRTNS4q7jT4ouhLER4Yl66VF4OLTgzlovzW3f0oHu2s7aFliBhT92oaN6BZHb6\n3wJpWO7S/auB6BKCuGLwlhzhFYreKGNP8W3/QlD1QBehb59tSVfQwgk25MFPUPQ=\n=88bJ\n-----END PGP SIGNATURE-----\n", "payload": "tree d1467a450b821afb4258dcc382e8fe2f35c1984f\nparent 2fb6f5e46a5f53a78c2f750dd3c8e79dd418c4c9\nparent 1b5c60f5491d8f992d89734e3027d5ba01fabfab\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641561898 +0000\ncommitter GitHub <noreply@github.com> 1641561898 +0000\n\nMerge #11194\n\n11194: fix(gen-doc-assist): remove lifetimes in description of `new` r=Veykril a=numero-744\n\nFrom wrong behavior:\r\n\r\n```rust\r\n/// Creates a new [`MyGenericStruct<'a, T>`].\r\n```\r\n\r\nto correct behavior:\r\n\r\n```rust\r\n/// Creates a new [`MyGenericStruct<T>`].\r\n```\r\n\r\nBut I feel like there is a better way to implement it. Do you know if there is an existing function that could do the work of `lifetimes_removed()` below?\n\nCo-authored-by: C\u00f4me ALLART <come.allart@etu.emse.fr>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09504bd58db6fb59595af1b0e42eb04de35a3bf", "html_url": "https://github.com/rust-lang/rust/commit/c09504bd58db6fb59595af1b0e42eb04de35a3bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09504bd58db6fb59595af1b0e42eb04de35a3bf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb6f5e46a5f53a78c2f750dd3c8e79dd418c4c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb6f5e46a5f53a78c2f750dd3c8e79dd418c4c9", "html_url": "https://github.com/rust-lang/rust/commit/2fb6f5e46a5f53a78c2f750dd3c8e79dd418c4c9"}, {"sha": "1b5c60f5491d8f992d89734e3027d5ba01fabfab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5c60f5491d8f992d89734e3027d5ba01fabfab", "html_url": "https://github.com/rust-lang/rust/commit/1b5c60f5491d8f992d89734e3027d5ba01fabfab"}], "stats": {"total": 156, "additions": 146, "deletions": 10}, "files": [{"sha": "bb7c8b10102cb07d0b700f5578d19782e7254fac", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 146, "deletions": 10, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/c09504bd58db6fb59595af1b0e42eb04de35a3bf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09504bd58db6fb59595af1b0e42eb04de35a3bf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=c09504bd58db6fb59595af1b0e42eb04de35a3bf", "patch": "@@ -88,7 +88,9 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> String {\n \n             let is_new = ast_func.name()?.to_string() == \"new\";\n             match is_new && ret_ty == self_ty {\n-                true => Some(format!(\"Creates a new [`{}`].\", self_type(ast_func)?)),\n+                true => {\n+                    Some(format!(\"Creates a new [`{}`].\", self_type_without_lifetimes(ast_func)?))\n+                }\n                 false => None,\n             }\n         } else {\n@@ -221,18 +223,34 @@ fn self_name(ast_func: &ast::Fn) -> Option<String> {\n }\n \n /// Heper function to get the name of the type of `self`\n-fn self_type(ast_func: &ast::Fn) -> Option<String> {\n-    ast_func\n-        .syntax()\n-        .ancestors()\n-        .find_map(ast::Impl::cast)\n-        .and_then(|i| i.self_ty())\n-        .map(|t| (t.to_string()))\n+fn self_type(ast_func: &ast::Fn) -> Option<ast::Type> {\n+    ast_func.syntax().ancestors().find_map(ast::Impl::cast).and_then(|i| i.self_ty())\n+}\n+\n+/// Output the real name of `Self` like `MyType<T>`, without the lifetimes.\n+fn self_type_without_lifetimes(ast_func: &ast::Fn) -> Option<String> {\n+    let path_segment = match self_type(ast_func)? {\n+        ast::Type::PathType(path_type) => path_type.path()?.segment()?,\n+        _ => return None,\n+    };\n+    let mut name = path_segment.name_ref()?.to_string();\n+    let generics = path_segment\n+        .generic_arg_list()?\n+        .generic_args()\n+        .filter(|generic| matches!(generic, ast::GenericArg::TypeArg(_)))\n+        .map(|generic| generic.to_string());\n+    let generics: String = generics.format(\", \").to_string();\n+    if !generics.is_empty() {\n+        name.push('<');\n+        name.push_str(&generics);\n+        name.push('>');\n+    }\n+    Some(name)\n }\n \n /// Heper function to get the name of the type of `self` without generic arguments\n fn self_partial_type(ast_func: &ast::Fn) -> Option<String> {\n-    let mut self_type = self_type(ast_func)?;\n+    let mut self_type = self_type(ast_func)?.to_string();\n     if let Some(idx) = self_type.find(|c| ['<', ' '].contains(&c)) {\n         self_type.truncate(idx);\n     }\n@@ -309,7 +327,7 @@ fn arguments_from_params(param_list: &ast::ParamList) -> String {\n         },\n         _ => \"_\".to_string(),\n     });\n-    Itertools::intersperse(args_iter, \", \".to_string()).collect()\n+    args_iter.format(\", \").to_string()\n }\n \n /// Helper function to build a function call. `None` if expected `self_name` was not provided\n@@ -991,6 +1009,124 @@ impl<T> MyGenericStruct<T> {\n         );\n     }\n \n+    #[test]\n+    fn removes_one_lifetime_from_description() {\n+        check_assist(\n+            generate_documentation_template,\n+            r#\"\n+#[derive(Debug, PartialEq)]\n+pub struct MyGenericStruct<'a, T> {\n+    pub x: &'a T,\n+}\n+impl<'a, T> MyGenericStruct<'a, T> {\n+    pub fn new$0(x: &'a T) -> Self {\n+        MyGenericStruct { x }\n+    }\n+}\n+\"#,\n+            r#\"\n+#[derive(Debug, PartialEq)]\n+pub struct MyGenericStruct<'a, T> {\n+    pub x: &'a T,\n+}\n+impl<'a, T> MyGenericStruct<'a, T> {\n+    /// Creates a new [`MyGenericStruct<T>`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use test::MyGenericStruct;\n+    ///\n+    /// assert_eq!(MyGenericStruct::new(x), );\n+    /// ```\n+    pub fn new(x: &'a T) -> Self {\n+        MyGenericStruct { x }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn removes_all_lifetimes_from_description() {\n+        check_assist(\n+            generate_documentation_template,\n+            r#\"\n+#[derive(Debug, PartialEq)]\n+pub struct MyGenericStruct<'a, 'b, T> {\n+    pub x: &'a T,\n+    pub y: &'b T,\n+}\n+impl<'a, 'b, T> MyGenericStruct<'a, 'b, T> {\n+    pub fn new$0(x: &'a T, y: &'b T) -> Self {\n+        MyGenericStruct { x, y }\n+    }\n+}\n+\"#,\n+            r#\"\n+#[derive(Debug, PartialEq)]\n+pub struct MyGenericStruct<'a, 'b, T> {\n+    pub x: &'a T,\n+    pub y: &'b T,\n+}\n+impl<'a, 'b, T> MyGenericStruct<'a, 'b, T> {\n+    /// Creates a new [`MyGenericStruct<T>`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use test::MyGenericStruct;\n+    ///\n+    /// assert_eq!(MyGenericStruct::new(x, y), );\n+    /// ```\n+    pub fn new(x: &'a T, y: &'b T) -> Self {\n+        MyGenericStruct { x, y }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn removes_all_lifetimes_and_brackets_from_description() {\n+        check_assist(\n+            generate_documentation_template,\n+            r#\"\n+#[derive(Debug, PartialEq)]\n+pub struct MyGenericStruct<'a, 'b> {\n+    pub x: &'a usize,\n+    pub y: &'b usize,\n+}\n+impl<'a, 'b> MyGenericStruct<'a, 'b> {\n+    pub fn new$0(x: &'a usize, y: &'b usize) -> Self {\n+        MyGenericStruct { x, y }\n+    }\n+}\n+\"#,\n+            r#\"\n+#[derive(Debug, PartialEq)]\n+pub struct MyGenericStruct<'a, 'b> {\n+    pub x: &'a usize,\n+    pub y: &'b usize,\n+}\n+impl<'a, 'b> MyGenericStruct<'a, 'b> {\n+    /// Creates a new [`MyGenericStruct`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use test::MyGenericStruct;\n+    ///\n+    /// assert_eq!(MyGenericStruct::new(x, y), );\n+    /// ```\n+    pub fn new(x: &'a usize, y: &'b usize) -> Self {\n+        MyGenericStruct { x, y }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn detects_new_with_self() {\n         check_assist("}]}