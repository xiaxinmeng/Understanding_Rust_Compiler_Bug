{"sha": "173fac098948b2004284a138a831ebc16799e3de", "node_id": "C_kwDOAAsO6NoAKDE3M2ZhYzA5ODk0OGIyMDA0Mjg0YTEzOGE4MzFlYmMxNjc5OWUzZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-30T19:08:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-30T19:08:04Z"}, "message": "Auto merge of #10255 - khayyamsaleem:issue_9520, r=Jarcho\n\nprevents `len_without_is_empty` from yielding positive when `len` takes arguments besides `&self`\n\nFixes #9520\n\n---\n\nchangelog: FP [`len_without_is_empty`]: No longer lints, if `len` as a non-default signature\n[#10255](https://github.com/rust-lang/rust-clippy/pull/10255)\n<!-- changelog_checked -->", "tree": {"sha": "06748276738a3c937e9a2ae2c6ffed6a9449fc46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06748276738a3c937e9a2ae2c6ffed6a9449fc46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/173fac098948b2004284a138a831ebc16799e3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/173fac098948b2004284a138a831ebc16799e3de", "html_url": "https://github.com/rust-lang/rust/commit/173fac098948b2004284a138a831ebc16799e3de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/173fac098948b2004284a138a831ebc16799e3de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92070a7b9bf450f3798dca3cad64fd055ffefd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92070a7b9bf450f3798dca3cad64fd055ffefd8", "html_url": "https://github.com/rust-lang/rust/commit/d92070a7b9bf450f3798dca3cad64fd055ffefd8"}, {"sha": "2fd94a4e01d9e8049df3651d0b29b3964cf235d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd94a4e01d9e8049df3651d0b29b3964cf235d8", "html_url": "https://github.com/rust-lang/rust/commit/2fd94a4e01d9e8049df3651d0b29b3964cf235d8"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "920ab7f06336df59885d77e233baed59bb995882", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/173fac098948b2004284a138a831ebc16799e3de/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173fac098948b2004284a138a831ebc16799e3de/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=173fac098948b2004284a138a831ebc16799e3de", "patch": "@@ -135,6 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if item.ident.name == sym::len;\n             if let ImplItemKind::Fn(sig, _) = &item.kind;\n             if sig.decl.implicit_self.has_implicit_self();\n+            if sig.decl.inputs.len() == 1;\n             if cx.effective_visibilities.is_exported(item.owner_id.def_id);\n             if matches!(sig.decl.output, FnRetTy::Return(_));\n             if let Some(imp) = get_parent_as_impl(cx.tcx, item.hir_id());"}, {"sha": "b5dec6c46bdddac2685705a76fc541c71671d4da", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/173fac098948b2004284a138a831ebc16799e3de/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173fac098948b2004284a138a831ebc16799e3de/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=173fac098948b2004284a138a831ebc16799e3de", "patch": "@@ -282,4 +282,50 @@ impl AsyncLen {\n     }\n }\n \n+// issue #9520\n+pub struct NonStandardLenAndIsEmptySignature;\n+impl NonStandardLenAndIsEmptySignature {\n+    // don't lint\n+    pub fn len(&self, something: usize) -> usize {\n+        something\n+    }\n+\n+    pub fn is_empty(&self, something: usize) -> bool {\n+        something == 0\n+    }\n+}\n+\n+// test case for #9520 with generics in the function signature\n+pub trait TestResource {\n+    type NonStandardSignatureWithGenerics: Copy;\n+    fn lookup_content(&self, item: Self::NonStandardSignatureWithGenerics) -> Result<Option<&[u8]>, String>;\n+}\n+pub struct NonStandardSignatureWithGenerics(u32);\n+impl NonStandardSignatureWithGenerics {\n+    pub fn is_empty<T, U>(self, resource: &T) -> bool\n+    where\n+        T: TestResource<NonStandardSignatureWithGenerics = U>,\n+        U: Copy + From<NonStandardSignatureWithGenerics>,\n+    {\n+        if let Ok(Some(content)) = resource.lookup_content(self.into()) {\n+            content.is_empty()\n+        } else {\n+            true\n+        }\n+    }\n+\n+    // test case for #9520 with generics in the function signature\n+    pub fn len<T, U>(self, resource: &T) -> usize\n+    where\n+        T: TestResource<NonStandardSignatureWithGenerics = U>,\n+        U: Copy + From<NonStandardSignatureWithGenerics>,\n+    {\n+        if let Ok(Some(content)) = resource.lookup_content(self.into()) {\n+            content.len()\n+        } else {\n+            0_usize\n+        }\n+    }\n+}\n+\n fn main() {}"}]}