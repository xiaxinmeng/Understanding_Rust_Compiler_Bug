{"sha": "1926217b86d0894dd5f1dc2c9c41aaed4282fd6c", "node_id": "C_kwDOAAsO6NoAKDE5MjYyMTdiODZkMDg5NGRkNWYxZGMyYzljNDFhYWVkNDI4MmZkNmM", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-05-10T15:27:12Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-05-10T15:27:12Z"}, "message": "chore", "tree": {"sha": "c1b8a4f79675c6148955f7ccd62fc15db88ecf81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1b8a4f79675c6148955f7ccd62fc15db88ecf81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1926217b86d0894dd5f1dc2c9c41aaed4282fd6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1926217b86d0894dd5f1dc2c9c41aaed4282fd6c", "html_url": "https://github.com/rust-lang/rust/commit/1926217b86d0894dd5f1dc2c9c41aaed4282fd6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1926217b86d0894dd5f1dc2c9c41aaed4282fd6c/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf87c3871c16d087aac4d09acdb15a5d6331acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf87c3871c16d087aac4d09acdb15a5d6331acd", "html_url": "https://github.com/rust-lang/rust/commit/aaf87c3871c16d087aac4d09acdb15a5d6331acd"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "bde7613b48eefb71a4645c6341dd863bc537b89b", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1926217b86d0894dd5f1dc2c9c41aaed4282fd6c/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1926217b86d0894dd5f1dc2c9c41aaed4282fd6c/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=1926217b86d0894dd5f1dc2c9c41aaed4282fd6c", "patch": "@@ -219,7 +219,7 @@ fn comment_start_before_impl_in_mod(\n             if idx == 0 {\n                 // mod A { /* comment */ unsafe impl T {} ... }\n                 // ^------------------------------------------^ returns the start of this span\n-                //       ^---------------^ finally checks comments in this range\n+                // ^---------------------^ finally checks comments in this range\n                 if let Some(sp) = walk_span_to_context(parent_mod_span, SyntaxContext::root()) {\n                     return Some(sp.lo());\n                 }"}]}