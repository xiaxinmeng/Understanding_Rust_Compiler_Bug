{"sha": "da6be9fdda23213813883cec6493b93f22b8c6ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNmJlOWZkZGEyMzIxMzgxMzg4M2NlYzY0OTNiOTNmMjJiOGM2ZWE=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-20T19:47:29Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-20T19:47:29Z"}, "message": "Add weird_exprs test", "tree": {"sha": "58feac410d2fb2464d4d9e45a973f4d8228f9565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58feac410d2fb2464d4d9e45a973f4d8228f9565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da6be9fdda23213813883cec6493b93f22b8c6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da6be9fdda23213813883cec6493b93f22b8c6ea", "html_url": "https://github.com/rust-lang/rust/commit/da6be9fdda23213813883cec6493b93f22b8c6ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da6be9fdda23213813883cec6493b93f22b8c6ea/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ebe449c98a2e96e677e68b54b5c0e5496bc534", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ebe449c98a2e96e677e68b54b5c0e5496bc534", "html_url": "https://github.com/rust-lang/rust/commit/55ebe449c98a2e96e677e68b54b5c0e5496bc534"}], "stats": {"total": 2385, "additions": 2385, "deletions": 0}, "files": [{"sha": "74edc635474e39260bb17dcca9abe0b83fef2f84", "filename": "crates/ra_syntax/tests/data/parser/ok/0035_weird_exprs.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/da6be9fdda23213813883cec6493b93f22b8c6ea/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6be9fdda23213813883cec6493b93f22b8c6ea/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.rs?ref=da6be9fdda23213813883cec6493b93f22b8c6ea", "patch": "@@ -0,0 +1,149 @@\n+#![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n+#![allow(unreachable_code)]\n+#![allow(unused_parens)]\n+\n+#![recursion_limit = \"128\"]\n+\n+use std::cell::Cell;\n+use std::mem::swap;\n+\n+// Just a grab bag of stuff that you wouldn't want to actually write.\n+\n+fn strange() -> bool { let _x: bool = return true; }\n+\n+fn funny() {\n+    fn f(_x: ()) { }\n+    f(return);\n+}\n+\n+fn what() {\n+    fn the(x: &Cell<bool>) {\n+        return while !x.get() { x.set(true); };\n+    }\n+    let i = &Cell::new(false);\n+    let dont = {||the(i)};\n+    dont();\n+    assert!((i.get()));\n+}\n+\n+fn zombiejesus() {\n+    loop {\n+        while (return) {\n+            if (return) {\n+                match (return) {\n+                    1 => {\n+                        if (return) {\n+                            return\n+                        } else {\n+                            return\n+                        }\n+                    }\n+                    _ => { return }\n+                };\n+            } else if (return) {\n+                return;\n+            }\n+        }\n+        if (return) { break; }\n+    }\n+}\n+\n+fn notsure() {\n+    let mut _x: isize;\n+    let mut _y = (_x = 0) == (_x = 0);\n+    let mut _z = (_x = 0) < (_x = 0);\n+    let _a = (_x += 0) == (_x = 0);\n+    let _b = swap(&mut _y, &mut _z) == swap(&mut _y, &mut _z);\n+}\n+\n+fn canttouchthis() -> usize {\n+    fn p() -> bool { true }\n+    let _a = (assert!((true)) == (assert!(p())));\n+    let _c = (assert!((p())) == ());\n+    let _b: bool = (println!(\"{}\", 0) == (return 0));\n+}\n+\n+fn angrydome() {\n+    loop { if break { } }\n+    let mut i = 0;\n+    loop { i += 1; if i == 1 { match (continue) { 1 => { }, _ => panic!(\"wat\") } }\n+      break; }\n+}\n+\n+fn evil_lincoln() { let _evil = println!(\"lincoln\"); }\n+\n+fn dots() {\n+    assert_eq!(String::from(\"..................................................\"),\n+               format!(\"{:?}\", .. .. .. .. .. .. .. .. .. .. .. .. ..\n+                               .. .. .. .. .. .. .. .. .. .. .. ..));\n+}\n+\n+fn u8(u8: u8) {\n+    if u8 != 0u8 {\n+        assert_eq!(8u8, {\n+            macro_rules! u8 {\n+                (u8) => {\n+                    mod u8 {\n+                        pub fn u8<'u8: 'u8 + 'u8>(u8: &'u8 u8) -> &'u8 u8 {\n+                            \"u8\";\n+                            u8\n+                        }\n+                    }\n+                };\n+            }\n+\n+            u8!(u8);\n+            let &u8: &u8 = u8::u8(&8u8);\n+            crate::u8(0u8);\n+            u8\n+        });\n+    }\n+}\n+\n+fn fishy() {\n+    assert_eq!(String::from(\"><>\"),\n+               String::<>::from::<>(\"><>\").chars::<>().rev::<>().collect::<String>());\n+}\n+\n+fn union() {\n+    union union<'union> { union: &'union union<'union>, }\n+}\n+\n+fn special_characters() {\n+    let val = !((|(..):(_,_),__@_|__)((&*\"\\\\\",'\ud83e\udd14')/**/,{})=={&[..=..][..];})//\n+    ;\n+    assert!(!val);\n+}\n+\n+fn punch_card() -> impl std::fmt::Debug {\n+    ..=..=.. ..    .. .. .. ..    .. .. .. ..    .. ..=.. ..\n+    ..=.. ..=..    .. .. .. ..    .. .. .. ..    ..=..=..=..\n+    ..=.. ..=..    ..=.. ..=..    .. ..=..=..    .. ..=.. ..\n+    ..=..=.. ..    ..=.. ..=..    ..=.. .. ..    .. ..=.. ..\n+    ..=.. ..=..    ..=.. ..=..    .. ..=.. ..    .. ..=.. ..\n+    ..=.. ..=..    ..=.. ..=..    .. .. ..=..    .. ..=.. ..\n+    ..=.. ..=..    .. ..=..=..    ..=..=.. ..    .. ..=.. ..\n+}\n+\n+fn ktulhu() {\n+    ;;;();;;;;;;;;()\n+}\n+\n+pub fn main() {\n+    strange();\n+    funny();\n+    what();\n+    zombiejesus();\n+    notsure();\n+    canttouchthis();\n+    angrydome();\n+    evil_lincoln();\n+    dots();\n+    u8(8u8);\n+    fishy();\n+    union();\n+    special_characters();\n+    punch_card();\n+    ktulhu();\n+}"}, {"sha": "e4507c553ac78d9d0f2fde02cf33e259e3559929", "filename": "crates/ra_syntax/tests/data/parser/ok/0035_weird_exprs.txt", "status": "added", "additions": 2236, "deletions": 0, "changes": 2236, "blob_url": "https://github.com/rust-lang/rust/blob/da6be9fdda23213813883cec6493b93f22b8c6ea/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/da6be9fdda23213813883cec6493b93f22b8c6ea/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt?ref=da6be9fdda23213813883cec6493b93f22b8c6ea"}]}