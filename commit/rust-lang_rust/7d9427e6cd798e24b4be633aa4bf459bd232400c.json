{"sha": "7d9427e6cd798e24b4be633aa4bf459bd232400c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOTQyN2U2Y2Q3OThlMjRiNGJlNjMzYWE0YmY0NTliZDIzMjQwMGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-10T16:37:10Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-10T16:37:10Z"}, "message": "Rollup merge of #26146 - steveklabnik:remove_unsafe_pointer, r=Gankro\n\nUsing two terms for one thing is confusing, these are called 'raw pointers' today.", "tree": {"sha": "55d99b6696147318e487ac6af8005865b89daaae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55d99b6696147318e487ac6af8005865b89daaae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d9427e6cd798e24b4be633aa4bf459bd232400c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9427e6cd798e24b4be633aa4bf459bd232400c", "html_url": "https://github.com/rust-lang/rust/commit/7d9427e6cd798e24b4be633aa4bf459bd232400c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d9427e6cd798e24b4be633aa4bf459bd232400c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef089ff70daad26f848efbe89bf1a1d1c1e7226d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef089ff70daad26f848efbe89bf1a1d1c1e7226d", "html_url": "https://github.com/rust-lang/rust/commit/ef089ff70daad26f848efbe89bf1a1d1c1e7226d"}, {"sha": "2c75256c151774407e5f4a0e4c655604d34bee17", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c75256c151774407e5f4a0e4c655604d34bee17", "html_url": "https://github.com/rust-lang/rust/commit/2c75256c151774407e5f4a0e4c655604d34bee17"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "54e850c051e8db01a039b2bc4769e49fbe25ba21", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -238,7 +238,7 @@ However it is often desired that the callback is targeted to a special\n Rust object. This could be the object that represents the wrapper for the\n respective C object.\n \n-This can be achieved by passing an unsafe pointer to the object down to the\n+This can be achieved by passing an raw pointer to the object down to the\n C library. The C library can then include the pointer to the Rust object in\n the notification. This will allow the callback to unsafely access the\n referenced Rust object.\n@@ -370,7 +370,7 @@ On OSX, frameworks behave with the same semantics as a dynamic library.\n \n # Unsafe blocks\n \n-Some operations, like dereferencing unsafe pointers or calling functions that have been marked\n+Some operations, like dereferencing raw pointers or calling functions that have been marked\n unsafe are only allowed inside unsafe blocks. Unsafe blocks isolate unsafety and are a promise to\n the compiler that the unsafety does not leak out of the block.\n "}, {"sha": "8a3b98b72927b3303f3146e076084347a327c014", "filename": "src/doc/trpl/raw-pointers.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Fdoc%2Ftrpl%2Fraw-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Fdoc%2Ftrpl%2Fraw-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fraw-pointers.md?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -52,9 +52,9 @@ println!(\"raw points at {}\", *raw);\n It gives this error:\n \n ```text\n-error: dereference of unsafe pointer requires unsafe function or block [E0133]\n-     println!(\"raw points at{}\", *raw);\n-                                 ^~~~\n+error: dereference of raw pointer requires unsafe function or block [E0133]\n+     println!(\"raw points at {}\", *raw);\n+                                  ^~~~\n ```\n \n When you dereference a raw pointer, you\u2019re taking responsibility that it\u2019s not"}, {"sha": "e99fc95d200bd9d29f2f96dc9c7f6d64e6082582", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -370,7 +370,7 @@ impl<T> [T] {\n         core_slice::SliceExt::get_unchecked_mut(self, index)\n     }\n \n-    /// Returns an unsafe pointer to the slice's buffer\n+    /// Returns an raw pointer to the slice's buffer\n     ///\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage."}, {"sha": "0020c65157a7882e5fe6c2317f7929dba55a051a", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -525,7 +525,7 @@ impl str {\n         core_str::StrExt::as_bytes(&self[..])\n     }\n \n-    /// Returns an unsafe pointer to the `&str`'s buffer.\n+    /// Returns a raw pointer to the `&str`'s buffer.\n     ///\n     /// The caller must ensure that the string outlives this pointer, and\n     /// that it is not"}, {"sha": "e7b700119f9079ff20dfe749290a0e1e90ac9d75", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -1215,7 +1215,7 @@ impl<T: PartialEq> Vec<T> {\n             let ln = self.len();\n             if ln < 1 { return; }\n \n-            // Avoid bounds checks by using unsafe pointers.\n+            // Avoid bounds checks by using raw pointers.\n             let p = self.as_mut_ptr();\n             let mut r: usize = 1;\n             let mut w: usize = 1;"}, {"sha": "774f86563d79c82a164e869547fbfa862edcfc36", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -46,7 +46,7 @@ use marker::Sized;\n \n extern \"rust-intrinsic\" {\n \n-    // NB: These intrinsics take unsafe pointers because they mutate aliased\n+    // NB: These intrinsics take raw pointers because they mutate aliased\n     // memory, which is not valid for either `&` or `&mut`.\n \n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> T;"}, {"sha": "7c20722b26d47ec5da9a09b9dc120f8650064638", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -357,7 +357,7 @@ macro_rules! impls{\n /// struct is dropped, it may in turn drop one or more instances of\n /// the type `T`, though that may not be apparent from the other\n /// structure of the type itself. This is commonly necessary if the\n-/// structure is using an unsafe pointer like `*mut T` whose referent\n+/// structure is using a raw pointer like `*mut T` whose referent\n /// may be dropped when the type is dropped, as a `*mut T` is\n /// otherwise not treated as owned.\n ///"}, {"sha": "9ca9b4fc46c99d4bfd17a36a7a53aff0d2c2c113", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -10,16 +10,16 @@\n \n // FIXME: talk about offset, copy_memory, copy_nonoverlapping_memory\n \n-//! Operations on unsafe pointers, `*const T`, and `*mut T`.\n+//! Operations on raw pointers, `*const T`, and `*mut T`.\n //!\n-//! Working with unsafe pointers in Rust is uncommon,\n+//! Working with raw pointers in Rust is uncommon,\n //! typically limited to a few patterns.\n //!\n //! Use the `null` function to create null pointers, and the `is_null` method\n //! of the `*const T` type  to check for null. The `*const T` type also defines\n //! the `offset` method, for pointer math.\n //!\n-//! # Common ways to create unsafe pointers\n+//! # Common ways to create raw pointers\n //!\n //! ## 1. Coerce a reference (`&T`) or mutable reference (`&mut T`).\n //!\n@@ -86,7 +86,7 @@\n //!\n //! Usually you wouldn't literally use `malloc` and `free` from Rust,\n //! but C APIs hand out a lot of pointers generally, so are a common source\n-//! of unsafe pointers in Rust.\n+//! of raw pointers in Rust.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"pointer\")]"}, {"sha": "defdf2ae0886542d83728479fab3351152b45070", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 debug!(\"effect: unary case, base type is {}\",\n                        ppaux::ty_to_string(self.tcx, base_type));\n                 if let ty::ty_ptr(_) = base_type.sty {\n-                    self.require_unsafe(expr.span, \"dereference of unsafe pointer\")\n+                    self.require_unsafe(expr.span, \"dereference of raw pointer\")\n                 }\n             }\n             ast::ExprAssign(ref base, _) | ast::ExprAssignOp(_, ref base, _) => {"}, {"sha": "9ce89f8823459ffdf60d86041aba23c9402ded63", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -1546,7 +1546,7 @@ impl<'tcx> cmt_<'tcx> {\n                                 format!(\"`Box` content\")\n                             }\n                             UnsafePtr(..) => {\n-                                format!(\"dereference of unsafe pointer\")\n+                                format!(\"dereference of raw pointer\")\n                             }\n                             BorrowedPtr(..) => {\n                                 format!(\"borrowed content\")"}, {"sha": "fee15fc0baa7a11e72a7a4cd02db6cbb824f5f49", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -3646,7 +3646,7 @@ impl TypeContents {\n             *self & TC::ReachesAll)\n     }\n \n-    /// Includes only those bits that still apply when indirected through an unsafe pointer (`*`)\n+    /// Includes only those bits that still apply when indirected through a raw pointer (`*`)\n     pub fn unsafe_pointer(&self) -> TypeContents {\n         *self & TC::ReachesAll\n     }"}, {"sha": "fef8acf2f7b5c6f9887612b31554f494975d606f", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -137,7 +137,7 @@ fn gather_move<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                move_info.id, move_info.kind);\n         }\n         None => {\n-            // move from rvalue or unsafe pointer, hence ok\n+            // move from rvalue or raw pointer, hence ok\n         }\n     }\n }"}, {"sha": "56f49a3047bf5eab48d7b64210ffc7242421ec49", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    // Borrowck is not relevant for unsafe pointers\n+                    // Borrowck is not relevant for raw pointers\n                     mc::UnsafePtr(..) => Safe\n                 }\n             }"}, {"sha": "b84572292923a88bbee07fee0bfec2f9c3af736a", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -341,8 +341,8 @@ impl<'tcx> CastCheck<'tcx> {\n                 // Due to the limitations of LLVM global constants,\n                 // region pointers end up pointing at copies of\n                 // vector elements instead of the original values.\n-                // To allow unsafe pointers to work correctly, we\n-                // need to special-case obtaining an unsafe pointer\n+                // To allow raw pointers to work correctly, we\n+                // need to special-case obtaining a raw pointer\n                 // from a region pointer to a vector.\n \n                 // this will report a type mismatch if needed"}, {"sha": "3b2cb00d8c47dcbb6130763eb7635a0a0ee7c328", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -102,7 +102,7 @@ pub struct StaticKey {\n /// type is entirely safe to use.\n ///\n /// Implementations will likely, however, contain unsafe code as this type only\n-/// operates on `*mut u8`, an unsafe pointer.\n+/// operates on `*mut u8`, a raw pointer.\n ///\n /// # Examples\n ///"}, {"sha": "32066b744134db800b2e496c13c286274564aeeb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -4215,7 +4215,7 @@ impl<'a> Parser<'a> {\n                 };\n                 if self.is_self_ident() {\n                     let span = self.span;\n-                    self.span_err(span, \"cannot pass self by unsafe pointer\");\n+                    self.span_err(span, \"cannot pass self by raw pointer\");\n                     try!(self.bump());\n                 }\n                 // error case, making bogus self ident:"}, {"sha": "7284fa7a850f0cbd63aedac91cc1c4ddf429e3c3", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -10,7 +10,7 @@\n \n \n fn foo(x: *const Box<isize>) -> Box<isize> {\n-    let y = *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    let y = *x; //~ ERROR dereference of raw pointer requires unsafe function or block\n     return y;\n }\n "}, {"sha": "d3b97a9c058633a45fd9f15717e0c2717c4856ff", "filename": "src/test/compile-fail/issue-20801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -40,8 +40,8 @@ pub fn main() {\n     //~^ ERROR cannot move out of borrowed content\n \n     let c = unsafe { *mut_ptr() };\n-    //~^ ERROR cannot move out of dereference of unsafe pointer\n+    //~^ ERROR cannot move out of dereference of raw pointer\n \n     let d = unsafe { *const_ptr() };\n-    //~^ ERROR cannot move out of dereference of unsafe pointer\n+    //~^ ERROR cannot move out of dereference of raw pointer\n }"}, {"sha": "19c50d57e1b39565386fe8d2f3410830aacd25ca", "filename": "src/test/compile-fail/regions-bounded-by-trait-requiring-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -54,7 +54,7 @@ fn box_with_region_not_ok<'a>() {\n     assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n }\n \n-// unsafe pointers are ok unless they point at unsendable things\n+// raw pointers are ok unless they point at unsendable things\n \n fn unsafe_ok1<'a>(_: &'a isize) {\n     assert_send::<*const isize>();"}, {"sha": "cff10329b858970d2ddd03da32ef21788319921f", "filename": "src/test/compile-fail/unsafe-fn-assign-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -10,7 +10,7 @@\n \n \n fn f(p: *const u8) {\n-    *p = 0; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    *p = 0; //~ ERROR dereference of raw pointer requires unsafe function or block\n     return;\n }\n "}, {"sha": "bf87df71fd87dc77163aebfe05b48caec1ef56c1", "filename": "src/test/compile-fail/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -10,7 +10,7 @@\n \n \n fn f(p: *const u8) -> u8 {\n-    return *p; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    return *p; //~ ERROR dereference of raw pointer requires unsafe function or block\n }\n \n fn main() {"}, {"sha": "1cc0e62f5b2d5cfb5d9a2db13809b873c7096872", "filename": "src/test/parse-fail/no-unsafe-self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9427e6cd798e24b4be633aa4bf459bd232400c/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs?ref=7d9427e6cd798e24b4be633aa4bf459bd232400c", "patch": "@@ -11,14 +11,14 @@\n // compile-flags: -Z parse-only\n \n trait A {\n-    fn foo(*mut self); //~ ERROR cannot pass self by unsafe pointer\n-    fn bar(*self); //~ ERROR cannot pass self by unsafe pointer\n+    fn foo(*mut self); //~ ERROR cannot pass self by raw pointer\n+    fn bar(*self); //~ ERROR cannot pass self by raw pointer\n }\n \n struct X;\n impl A for X {\n-    fn foo(*mut self) { } //~ ERROR cannot pass self by unsafe pointer\n-    fn bar(*self) { } //~ ERROR cannot pass self by unsafe pointer\n+    fn foo(*mut self) { } //~ ERROR cannot pass self by raw pointer\n+    fn bar(*self) { } //~ ERROR cannot pass self by raw pointer\n }\n \n fn main() { }"}]}