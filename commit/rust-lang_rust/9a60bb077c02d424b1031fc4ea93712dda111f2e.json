{"sha": "9a60bb077c02d424b1031fc4ea93712dda111f2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjBiYjA3N2MwMmQ0MjRiMTAzMWZjNGVhOTM3MTJkZGExMTFmMmU=", "commit": {"author": {"name": "Michal Budzynski", "email": "budziq@gmail.com", "date": "2017-09-15T15:03:09Z"}, "committer": {"name": "Michal Budzynski", "email": "budziq@gmail.com", "date": "2017-09-16T20:18:46Z"}, "message": "Added example to `compiler_fence` docs taken from unstable-book", "tree": {"sha": "2540d972920554e0a14de7653635e1a15c12bf7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2540d972920554e0a14de7653635e1a15c12bf7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a60bb077c02d424b1031fc4ea93712dda111f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a60bb077c02d424b1031fc4ea93712dda111f2e", "html_url": "https://github.com/rust-lang/rust/commit/9a60bb077c02d424b1031fc4ea93712dda111f2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a60bb077c02d424b1031fc4ea93712dda111f2e/comments", "author": {"login": "budziq", "id": 221000, "node_id": "MDQ6VXNlcjIyMTAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/221000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/budziq", "html_url": "https://github.com/budziq", "followers_url": "https://api.github.com/users/budziq/followers", "following_url": "https://api.github.com/users/budziq/following{/other_user}", "gists_url": "https://api.github.com/users/budziq/gists{/gist_id}", "starred_url": "https://api.github.com/users/budziq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/budziq/subscriptions", "organizations_url": "https://api.github.com/users/budziq/orgs", "repos_url": "https://api.github.com/users/budziq/repos", "events_url": "https://api.github.com/users/budziq/events{/privacy}", "received_events_url": "https://api.github.com/users/budziq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "budziq", "id": 221000, "node_id": "MDQ6VXNlcjIyMTAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/221000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/budziq", "html_url": "https://github.com/budziq", "followers_url": "https://api.github.com/users/budziq/followers", "following_url": "https://api.github.com/users/budziq/following{/other_user}", "gists_url": "https://api.github.com/users/budziq/gists{/gist_id}", "starred_url": "https://api.github.com/users/budziq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/budziq/subscriptions", "organizations_url": "https://api.github.com/users/budziq/orgs", "repos_url": "https://api.github.com/users/budziq/repos", "events_url": "https://api.github.com/users/budziq/events{/privacy}", "received_events_url": "https://api.github.com/users/budziq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a11172d6b7707818142861f9405faeec7768af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a11172d6b7707818142861f9405faeec7768af6", "html_url": "https://github.com/rust-lang/rust/commit/8a11172d6b7707818142861f9405faeec7768af6"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "8e4625b71592753c3d9aed0b96093eac27c5f7dd", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9a60bb077c02d424b1031fc4ea93712dda111f2e/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a60bb077c02d424b1031fc4ea93712dda111f2e/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=9a60bb077c02d424b1031fc4ea93712dda111f2e", "patch": "@@ -1695,6 +1695,40 @@ pub fn fence(order: Ordering) {\n ///\n /// Panics if `order` is [`Relaxed`].\n ///\n+/// # Examples\n+///\n+/// Without `compiler_fence`, the `assert_eq!` in following code\n+/// is *not* guaranteed to succeed, despite everything happening in a single thread.\n+/// To see why, remember that the compiler is free to swap the stores to\n+/// `IMPORTANT_VARIABLE` and `IS_READ` since they are both\n+/// `Ordering::Relaxed`. If it does, and the signal handler is invoked right\n+/// after `IS_READY` is updated, then the signal handler will see\n+/// `IS_READY=1`, but `IMPORTANT_VARIABLE=0`.\n+/// Using a `compiler_fence` remedies this situation.\n+///\n+/// ```\n+/// use std::sync::atomic::{AtomicBool, AtomicUsize};\n+/// use std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\n+/// use std::sync::atomic::Ordering;\n+/// use std::sync::atomic::compiler_fence;\n+///\n+/// static IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\n+/// static IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n+///\n+/// fn main() {\n+///     IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);\n+///     // prevent earlier writes from being moved beyond this point\n+///     compiler_fence(Ordering::Release);\n+///     IS_READY.store(true, Ordering::Relaxed);\n+/// }\n+///\n+/// fn signal_handler() {\n+///     if IS_READY.load(Ordering::Relaxed) {\n+///         assert_eq!(IMPORTANT_VARIABLE.load(Ordering::Relaxed), 42);\n+///     }\n+/// }\n+/// ```\n+///\n /// [`fence`]: fn.fence.html\n /// [`Ordering`]: enum.Ordering.html\n /// [`Acquire`]: enum.Ordering.html#variant.Acquire"}]}