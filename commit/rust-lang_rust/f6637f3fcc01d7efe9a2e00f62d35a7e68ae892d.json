{"sha": "f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NjM3ZjNmY2MwMWQ3ZWZlOWEyZTAwZjYyZDM1YTdlNjhhZTg5MmQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-16T23:35:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-20T04:46:30Z"}, "message": "Move `is_gensymed` from `Symbol` to `Ident`.\n\nNote that the `is_gensymed` call on `primitive_types` is unnecessary\nbecause that table only contains the name of primitive types (e.g.\n`i32`) and never contains gensyms.", "tree": {"sha": "aa9c2ae41673a8c5ca44261cd2dec76465497343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9c2ae41673a8c5ca44261cd2dec76465497343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d", "html_url": "https://github.com/rust-lang/rust/commit/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "128b4c8035fc788b78157d4e1975cda0f25ce599", "url": "https://api.github.com/repos/rust-lang/rust/commits/128b4c8035fc788b78157d4e1975cda0f25ce599", "html_url": "https://github.com/rust-lang/rust/commit/128b4c8035fc788b78157d4e1975cda0f25ce599"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "c4a4dd306055bb92db05298eebe2bba46db2ef20", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d", "patch": "@@ -4225,7 +4225,7 @@ impl<'a> Resolver<'a> {\n         let add_module_candidates = |module: Module<'_>, names: &mut Vec<TypoSuggestion>| {\n             for (&(ident, _), resolution) in module.resolutions.borrow().iter() {\n                 if let Some(binding) = resolution.borrow().binding {\n-                    if !ident.name.is_gensymed() && filter_fn(binding.res()) {\n+                    if !ident.is_gensymed() && filter_fn(binding.res()) {\n                         names.push(TypoSuggestion {\n                             candidate: ident.name,\n                             article: binding.res().article(),\n@@ -4243,7 +4243,7 @@ impl<'a> Resolver<'a> {\n             for rib in self.ribs[ns].iter().rev() {\n                 // Locals and type parameters\n                 for (ident, &res) in &rib.bindings {\n-                    if !ident.name.is_gensymed() && filter_fn(res) {\n+                    if !ident.is_gensymed() && filter_fn(res) {\n                         names.push(TypoSuggestion {\n                             candidate: ident.name,\n                             article: res.article(),\n@@ -4273,7 +4273,7 @@ impl<'a> Resolver<'a> {\n                                             },\n                                         );\n \n-                                        if !ident.name.is_gensymed() && filter_fn(crate_mod) {\n+                                        if !ident.is_gensymed() && filter_fn(crate_mod) {\n                                             Some(TypoSuggestion {\n                                                 candidate: ident.name,\n                                                 article: \"a\",\n@@ -4298,7 +4298,6 @@ impl<'a> Resolver<'a> {\n                 names.extend(\n                     self.primitive_type_table.primitive_types\n                         .iter()\n-                        .filter(|(name, _)| !name.is_gensymed())\n                         .map(|(name, _)| {\n                             TypoSuggestion {\n                                 candidate: *name,"}, {"sha": "3a6a8b56ff35d875b695f8d2c644ddaec78be745", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d", "patch": "@@ -1395,7 +1395,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             // so they can cause name conflict errors downstream.\n             let is_good_import = binding.is_import() && !binding.is_ambiguity() &&\n                                  // Note that as_str() de-gensyms the Symbol\n-                                 !(ident.name.is_gensymed() && ident.name.as_str() != \"_\");\n+                                 !(ident.is_gensymed() && ident.name.as_str() != \"_\");\n             if is_good_import || binding.is_macro_def() {\n                 let res = binding.res();\n                 if res != Res::Err {"}, {"sha": "88c22085bc4d25adb78309dc1e73aa4cf199ade0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d", "patch": "@@ -72,11 +72,7 @@ pub struct Path {\n impl PartialEq<Symbol> for Path {\n     fn eq(&self, symbol: &Symbol) -> bool {\n         self.segments.len() == 1 && {\n-            let name = self.segments[0].ident.name;\n-            // Make sure these symbols are pure strings\n-            debug_assert!(!symbol.is_gensymed());\n-            debug_assert!(!name.is_gensymed());\n-            name == *symbol\n+            self.segments[0].ident.name == *symbol\n         }\n     }\n }"}, {"sha": "3cd5577e19e49633f74bbd5f92d972ea46933912", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=f6637f3fcc01d7efe9a2e00f62d35a7e68ae892d", "patch": "@@ -684,6 +684,11 @@ impl Ident {\n         if self.name == keywords::Underscore.name() { self.gensym() } else { self }\n     }\n \n+    // WARNING: this function is deprecated and will be removed in the future.\n+    pub fn is_gensymed(self) -> bool {\n+        with_interner(|interner| interner.is_gensymed(self.name))\n+    }\n+\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n@@ -786,11 +791,6 @@ impl Symbol {\n         with_interner(|interner| interner.gensymed(self))\n     }\n \n-    // WARNING: this function is deprecated and will be removed in the future.\n-    pub fn is_gensymed(self) -> bool {\n-        with_interner(|interner| interner.is_gensymed(self))\n-    }\n-\n     pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n             LocalInternedString {"}]}