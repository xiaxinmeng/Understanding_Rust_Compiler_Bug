{"sha": "1436fa9e90a180d0985cef9fe79b556106c967ae", "node_id": "C_kwDOAAsO6NoAKDE0MzZmYTllOTBhMTgwZDA5ODVjZWY5ZmU3OWI1NTYxMDZjOTY3YWU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-28T14:55:15Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-29T06:45:06Z"}, "message": "optimize bound vars replacement :3", "tree": {"sha": "df587233b2e034f109fe654d8e71395d751636da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df587233b2e034f109fe654d8e71395d751636da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1436fa9e90a180d0985cef9fe79b556106c967ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1436fa9e90a180d0985cef9fe79b556106c967ae", "html_url": "https://github.com/rust-lang/rust/commit/1436fa9e90a180d0985cef9fe79b556106c967ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1436fa9e90a180d0985cef9fe79b556106c967ae/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3fce8e9379069daf50ac393918ab6e60b57f4ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fce8e9379069daf50ac393918ab6e60b57f4ca", "html_url": "https://github.com/rust-lang/rust/commit/c3fce8e9379069daf50ac393918ab6e60b57f4ca"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "34b6113427d489a0b1ab9d588e6184086363c69b", "filename": "compiler/rustc_infer/src/infer/canonical/substitute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1436fa9e90a180d0985cef9fe79b556106c967ae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1436fa9e90a180d0985cef9fe79b556106c967ae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=1436fa9e90a180d0985cef9fe79b556106c967ae", "patch": "@@ -71,7 +71,7 @@ where\n     if var_values.var_values.is_empty() {\n         value\n     } else {\n-        let mut delegate = FnMutDelegate {\n+        let delegate = FnMutDelegate {\n             regions: |br: ty::BoundRegion| match var_values.var_values[br.var].unpack() {\n                 GenericArgKind::Lifetime(l) => l,\n                 r => bug!(\"{:?} is a region but value is {:?}\", br, r),\n@@ -86,6 +86,6 @@ where\n             },\n         };\n \n-        tcx.replace_escaping_bound_vars_uncached(value, &mut delegate)\n+        tcx.replace_escaping_bound_vars_uncached(value, delegate)\n     }\n }"}, {"sha": "5e96e278b9cad5f76008b2878a8bdfbe9c89b9af", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1436fa9e90a180d0985cef9fe79b556106c967ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1436fa9e90a180d0985cef9fe79b556106c967ae/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=1436fa9e90a180d0985cef9fe79b556106c967ae", "patch": "@@ -400,23 +400,26 @@ where\n }\n \n /// Replaces the escaping bound vars (late bound regions or bound types) in a type.\n-struct BoundVarReplacer<'a, 'tcx> {\n+struct BoundVarReplacer<'tcx, D> {\n     tcx: TyCtxt<'tcx>,\n \n     /// As with `RegionFolder`, represents the index of a binder *just outside*\n     /// the ones we have visited.\n     current_index: ty::DebruijnIndex,\n \n-    delegate: &'a mut dyn BoundVarReplacerDelegate<'tcx>,\n+    delegate: D,\n }\n \n-impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>, delegate: &'a mut dyn BoundVarReplacerDelegate<'tcx>) -> Self {\n+impl<'tcx, D: BoundVarReplacerDelegate<'tcx>> BoundVarReplacer<'tcx, D> {\n+    fn new(tcx: TyCtxt<'tcx>, delegate: D) -> Self {\n         BoundVarReplacer { tcx, current_index: ty::INNERMOST, delegate }\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n+impl<'tcx, D> TypeFolder<'tcx> for BoundVarReplacer<'tcx, D>\n+where\n+    D: BoundVarReplacerDelegate<'tcx>,\n+{\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -452,7 +455,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n                     // debruijn index. Then we adjust it to the\n                     // correct depth.\n                     assert_eq!(debruijn1, ty::INNERMOST);\n-                    self.tcx.mk_region(ty::ReLateBound(debruijn, br))\n+                    self.tcx.reuse_or_mk_region(region, ty::ReLateBound(debruijn, br))\n                 } else {\n                     region\n                 }\n@@ -518,12 +521,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         if !value.has_escaping_bound_vars() {\n             value\n         } else {\n-            let mut delegate = FnMutDelegate {\n+            let delegate = FnMutDelegate {\n                 regions: replace_regions,\n                 types: |b| bug!(\"unexpected bound ty in binder: {b:?}\"),\n                 consts: |b, ty| bug!(\"unexpected bound ct in binder: {b:?} {ty}\"),\n             };\n-            let mut replacer = BoundVarReplacer::new(self, &mut delegate);\n+            let mut replacer = BoundVarReplacer::new(self, delegate);\n             value.fold_with(&mut replacer)\n         }\n     }\n@@ -534,7 +537,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_escaping_bound_vars_uncached<T: TypeFoldable<'tcx>>(\n         self,\n         value: T,\n-        delegate: &mut impl BoundVarReplacerDelegate<'tcx>,\n+        delegate: impl BoundVarReplacerDelegate<'tcx>,\n     ) -> T {\n         if !value.has_escaping_bound_vars() {\n             value\n@@ -550,9 +553,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_bound_vars_uncached<T: TypeFoldable<'tcx>>(\n         self,\n         value: Binder<'tcx, T>,\n-        mut delegate: impl BoundVarReplacerDelegate<'tcx>,\n+        delegate: impl BoundVarReplacerDelegate<'tcx>,\n     ) -> T {\n-        self.replace_escaping_bound_vars_uncached(value.skip_binder(), &mut delegate)\n+        self.replace_escaping_bound_vars_uncached(value.skip_binder(), delegate)\n     }\n \n     /// Replaces any late-bound regions bound in `value` with\n@@ -580,7 +583,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let shift_bv = |bv: ty::BoundVar| ty::BoundVar::from_usize(bv.as_usize() + bound_vars);\n         self.replace_escaping_bound_vars_uncached(\n             value,\n-            &mut FnMutDelegate {\n+            FnMutDelegate {\n                 regions: |r: ty::BoundRegion| {\n                     self.mk_region(ty::ReLateBound(\n                         ty::INNERMOST,\n@@ -647,11 +650,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        struct Anonymize<'tcx> {\n+        struct Anonymize<'a, 'tcx> {\n             tcx: TyCtxt<'tcx>,\n-            map: FxIndexMap<ty::BoundVar, ty::BoundVariableKind>,\n+            map: &'a mut FxIndexMap<ty::BoundVar, ty::BoundVariableKind>,\n         }\n-        impl<'tcx> BoundVarReplacerDelegate<'tcx> for Anonymize<'tcx> {\n+        impl<'tcx> BoundVarReplacerDelegate<'tcx> for Anonymize<'_, 'tcx> {\n             fn replace_region(&mut self, br: ty::BoundRegion) -> ty::Region<'tcx> {\n                 let entry = self.map.entry(br.var);\n                 let index = entry.index();\n@@ -680,9 +683,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         }\n \n-        let mut delegate = Anonymize { tcx: self, map: Default::default() };\n-        let inner = self.replace_escaping_bound_vars_uncached(value.skip_binder(), &mut delegate);\n-        let bound_vars = self.mk_bound_variable_kinds(delegate.map.into_values());\n+        let mut map = Default::default();\n+        let delegate = Anonymize { tcx: self, map: &mut map };\n+        let inner = self.replace_escaping_bound_vars_uncached(value.skip_binder(), delegate);\n+        let bound_vars = self.mk_bound_variable_kinds(map.into_values());\n         Binder::bind_with_vars(inner, bound_vars)\n     }\n }"}]}