{"sha": "b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMDAzZTFlMWFmOGVlNWNhNzQ0NTg3ODdmNWViOGM1NjVhNDdlMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T21:36:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T21:36:41Z"}, "message": "auto merge of #11895 : xales/rust/libstd, r=alexcrichton\n\nFixes #11814", "tree": {"sha": "468dce881317bb3d9521d94ffeb098ac4e9fbaad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/468dce881317bb3d9521d94ffeb098ac4e9fbaad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "html_url": "https://github.com/rust-lang/rust/commit/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3427137f667e7def78f12a69af7d8beb2fcd5e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/3427137f667e7def78f12a69af7d8beb2fcd5e65", "html_url": "https://github.com/rust-lang/rust/commit/3427137f667e7def78f12a69af7d8beb2fcd5e65"}, {"sha": "f17d972014625eae13ac6d7fe98ff82a110a14d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f17d972014625eae13ac6d7fe98ff82a110a14d3", "html_url": "https://github.com/rust-lang/rust/commit/f17d972014625eae13ac6d7fe98ff82a110a14d3"}], "stats": {"total": 52, "additions": 10, "deletions": 42}, "files": [{"sha": "1c6c3adf97228da68781e58a220603eee06e2567", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -47,7 +47,6 @@ use sync::{Mutex, RWLock};\n use std::cast;\n use std::sync::arc::UnsafeArc;\n use std::task;\n-use std::borrow;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signaling.\n pub struct Condvar<'a> {\n@@ -465,7 +464,7 @@ impl<T:Freeze + Send> RWArc<T> {\n             // of this cast is removing the mutability.)\n             let new_data = data;\n             // Downgrade ensured the token belonged to us. Just a sanity check.\n-            assert!(borrow::ref_eq(&(*state).data, new_data));\n+            assert!((&(*state).data as *T as uint) == (new_data as *mut T as uint));\n             // Produce new token\n             RWReadMode {\n                 data: new_data,"}, {"sha": "26a555a646c58408fc774411d8b3103d5d128bed", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -18,7 +18,6 @@\n  */\n \n \n-use std::borrow;\n use std::comm;\n use std::unstable::sync::Exclusive;\n use std::sync::arc::UnsafeArc;\n@@ -634,7 +633,7 @@ impl RWLock {\n     /// To be called inside of the write_downgrade block.\n     pub fn downgrade<'a>(&self, token: RWLockWriteMode<'a>)\n                          -> RWLockReadMode<'a> {\n-        if !borrow::ref_eq(self, token.lock) {\n+        if !((self as *RWLock) == (token.lock as *RWLock)) {\n             fail!(\"Can't downgrade() with a different rwlock's write_mode!\");\n         }\n         unsafe {"}, {"sha": "d7a7011319ae9afbd9f4d044b8f771dde7c73b1c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "patch": "@@ -123,7 +123,7 @@ pub mod send_str;\n pub mod ptr;\n pub mod owned;\n pub mod managed;\n-pub mod borrow;\n+mod reference;\n pub mod rc;\n pub mod gc;\n \n@@ -223,7 +223,6 @@ mod std {\n     pub use kinds;\n     pub use local_data;\n     pub use logging;\n-    pub use logging;\n     pub use option;\n     pub use os;\n     pub use rt;"}, {"sha": "91f03f02892e35a6c06f5d4f2296b514c2b60f5e", "filename": "src/libstd/reference.rs", "status": "renamed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibstd%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibstd%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freference.rs?ref=b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "patch": "@@ -13,18 +13,6 @@\n #[cfg(not(test))]\n use prelude::*;\n \n-/// Cast a region pointer - &T - to a uint.\n-#[inline]\n-pub fn to_uint<T>(thing: &T) -> uint {\n-    thing as *T as uint\n-}\n-\n-/// Determine if two borrowed pointers point to the same thing.\n-#[inline]\n-pub fn ref_eq<'a, 'b, T>(thing: &'a T, other: &'b T) -> bool {\n-    (thing as *T) == (other as *T)\n-}\n-\n // Equality for region pointers\n #[cfg(not(test))]\n impl<'a, T: Eq> Eq for &'a T {\n@@ -71,16 +59,3 @@ impl<'a, T: TotalEq> TotalEq for &'a T {\n     fn equals(&self, other: & &'a T) -> bool { (**self).equals(*other) }\n }\n \n-#[cfg(test)]\n-mod tests {\n-    use super::ref_eq;\n-\n-    #[test]\n-    fn test_ref_eq() {\n-        let x = 1;\n-        let y = 1;\n-\n-        assert!(ref_eq(&x, &x));\n-        assert!(!ref_eq(&x, &y));\n-    }\n-}", "previous_filename": "src/libstd/borrow.rs"}, {"sha": "7c43e64f17b15b6e6ed39cad779d0fe3c5a65944", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "patch": "@@ -14,7 +14,6 @@\n //! to implement this.\n \n use any::AnyOwnExt;\n-use borrow;\n use cast;\n use cleanup;\n use clone::Clone;\n@@ -287,7 +286,7 @@ impl Task {\n \n impl Drop for Task {\n     fn drop(&mut self) {\n-        rtdebug!(\"called drop for a task: {}\", borrow::to_uint(self));\n+        rtdebug!(\"called drop for a task: {}\", self as *mut Task as uint);\n         rtassert!(self.destroyed);\n     }\n }"}, {"sha": "fe1be6d06db83cce39d251bba32657a582da970c", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::borrow;\n use std::ptr;\n \n fn borrow(x: &int, f: |x: &int|) {\n@@ -20,7 +19,7 @@ fn borrow(x: &int, f: |x: &int|) {\n fn test1(x: @~int) {\n     borrow(&*(*x).clone(), |p| {\n         let x_a = ptr::to_unsafe_ptr(&**x);\n-        assert!((x_a as uint) != borrow::to_uint(p));\n+        assert!((x_a as uint) != (p as *int as uint));\n         assert_eq!(unsafe{*x_a}, *p);\n     })\n }"}, {"sha": "a831cd1da69d52d3f04d01b14291e2e5d027f3cd", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3003e1e1af8ee5ca74458787f5eb8c565a47e1d/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=b3003e1e1af8ee5ca74458787f5eb8c565a47e1d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::borrow;\n-\n pub fn main() {\n     let x = 3;\n-    info!(\"&x={:x}\", borrow::to_uint(&x));\n+    info!(\"&x={:x}\", (&x as *int as uint));\n }"}]}