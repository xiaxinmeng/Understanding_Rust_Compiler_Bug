{"sha": "250f66562c4209b367325e718c845d11eeac0619", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MGY2NjU2MmM0MjA5YjM2NzMyNWU3MThjODQ1ZDExZWVhYzA2MTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-09T09:34:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-09T09:34:23Z"}, "message": "ignore `print!`, turn `panic!` into a EvalError", "tree": {"sha": "bfcfb7ff96ce5b18428108d8c908c3c080fac116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfcfb7ff96ce5b18428108d8c908c3c080fac116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250f66562c4209b367325e718c845d11eeac0619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250f66562c4209b367325e718c845d11eeac0619", "html_url": "https://github.com/rust-lang/rust/commit/250f66562c4209b367325e718c845d11eeac0619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250f66562c4209b367325e718c845d11eeac0619/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aed897c70abdd1171545fbe5695cc89797ffa9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aed897c70abdd1171545fbe5695cc89797ffa9c", "html_url": "https://github.com/rust-lang/rust/commit/6aed897c70abdd1171545fbe5695cc89797ffa9c"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "bc6510b1f129f50d7a872c42e1d6cc3b4b4eda2e", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/250f66562c4209b367325e718c845d11eeac0619/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250f66562c4209b367325e718c845d11eeac0619/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=250f66562c4209b367325e718c845d11eeac0619", "patch": "@@ -56,6 +56,7 @@ pub enum EvalError<'tcx> {\n     ExpectedConcreteFunction(Function<'tcx>),\n     ExpectedDropGlue(Function<'tcx>),\n     ManuallyCalledDropGlue,\n+    Panic,\n }\n \n pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n@@ -134,6 +135,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"tried to use non-drop-glue function as drop glue\",\n             EvalError::ManuallyCalledDropGlue =>\n                 \"tried to manually invoke drop glue\",\n+            EvalError::Panic =>\n+                \"the evaluated program panicked\",\n         }\n     }\n "}, {"sha": "6f6bb4b59789b223c33c2e3041d6314a0e31d448", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/250f66562c4209b367325e718c845d11eeac0619/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250f66562c4209b367325e718c845d11eeac0619/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=250f66562c4209b367325e718c845d11eeac0619", "patch": "@@ -292,7 +292,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n                 }\n \n-                let mir = self.load_mir(resolved_def_id)?;\n+                let mir = match self.load_mir(resolved_def_id) {\n+                    Ok(mir) => mir,\n+                    Err(EvalError::NoMirFor(path)) => {\n+                        match &path[..] {\n+                            // let's just ignore all output for now\n+                            \"std::io::_print\" => {\n+                                self.goto_block(destination.unwrap().1);\n+                                return Ok(());\n+                            },\n+                            \"std::thread::Builder::new\" => return Err(EvalError::Unimplemented(\"miri does not support threading\".to_owned())),\n+                            \"std::env::args\" => return Err(EvalError::Unimplemented(\"miri does not support program arguments\".to_owned())),\n+                            \"std::panicking::rust_panic_with_hook\" |\n+                            \"std::rt::begin_panic_fmt\" => return Err(EvalError::Panic),\n+                            _ => {},\n+                        }\n+                        return Err(EvalError::NoMirFor(path));\n+                    },\n+                    Err(other) => return Err(other),\n+                };\n                 let (return_lvalue, return_to_block) = match destination {\n                     Some((lvalue, block)) => (lvalue, StackPopCleanup::Goto(block)),\n                     None => {"}]}