{"sha": "e2311b31c64e56c3d3218f6101c22ffe573bb687", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMzExYjMxYzY0ZTU2YzNkMzIxOGY2MTAxYzIyZmZlNTczYmI2ODc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-13T16:21:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-13T16:21:43Z"}, "message": "Rollup merge of #57549 - taiki-e:must_use, r=estebank\n\nAdd #[must_use] message to Iterator and Future\n\n~~Iterator's message is based on current iterator adaptor's #[must_use] message (added in #15561) and https://github.com/rust-lang/rust/pull/56677/files#r241236020~~\nFuture's message is the same as those used in [futures-rs](https://github.com/rust-lang-nursery/futures-rs/search?q=must_use&unscoped_q=must_use) and [tokio](https://github.com/tokio-rs/tokio/search?q=must_use&unscoped_q=must_use).\n\nr? @Centril", "tree": {"sha": "f8fb56005e89061df2d542ac7016b2e9afdcdd62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8fb56005e89061df2d542ac7016b2e9afdcdd62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2311b31c64e56c3d3218f6101c22ffe573bb687", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcO2WXCRBK7hj4Ov3rIwAAdHIIAELF2ig8K1ygnVWieSp6bCvw\nwt1ob4My2ng5G9qFE6Dt/3OoMB/nsZXiQiITbuCzgQhJaNp4VnhOZf6qQwWIh9B5\nqc9UF5NcH79e7JrIkVp5iDESPF/3Ph4J+urth5hhfxxwS4oJyOHE9/gi4fMdAutS\nlysDEAAxhIZFn1NRCFUytYseLeMVUh4ai8hdlaeetNXppgODddwlYBvvOww2vido\nfo3K/zec036ekdBrdM0Hc0RwWX3DZpplPaUBZ80YsuUbriy8XTi+6t40dXIXCcRJ\njb/IsL+NF+pTGM/IfXNie52ZmrN+vUZpujZQ3E+5jpLciYqTbNcss1Xatf8Uhkw=\n=QMJb\n-----END PGP SIGNATURE-----\n", "payload": "tree f8fb56005e89061df2d542ac7016b2e9afdcdd62\nparent a53a79fea25ac256e6b30395411f90fbbaa2b7e0\nparent da933cca1a2db66c904efeb8b800c0d309f8c18d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547396503 +0100\ncommitter GitHub <noreply@github.com> 1547396503 +0100\n\nRollup merge of #57549 - taiki-e:must_use, r=estebank\n\nAdd #[must_use] message to Iterator and Future\n\n~~Iterator's message is based on current iterator adaptor's #[must_use] message (added in #15561) and https://github.com/rust-lang/rust/pull/56677/files#r241236020~~\nFuture's message is the same as those used in [futures-rs](https://github.com/rust-lang-nursery/futures-rs/search?q=must_use&unscoped_q=must_use) and [tokio](https://github.com/tokio-rs/tokio/search?q=must_use&unscoped_q=must_use).\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2311b31c64e56c3d3218f6101c22ffe573bb687", "html_url": "https://github.com/rust-lang/rust/commit/e2311b31c64e56c3d3218f6101c22ffe573bb687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2311b31c64e56c3d3218f6101c22ffe573bb687/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53a79fea25ac256e6b30395411f90fbbaa2b7e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53a79fea25ac256e6b30395411f90fbbaa2b7e0", "html_url": "https://github.com/rust-lang/rust/commit/a53a79fea25ac256e6b30395411f90fbbaa2b7e0"}, {"sha": "da933cca1a2db66c904efeb8b800c0d309f8c18d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da933cca1a2db66c904efeb8b800c0d309f8c18d", "html_url": "https://github.com/rust-lang/rust/commit/da933cca1a2db66c904efeb8b800c0d309f8c18d"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "539b07fc21eea4ec8031e0347d7f56cc4b8eea00", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2311b31c64e56c3d3218f6101c22ffe573bb687/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2311b31c64e56c3d3218f6101c22ffe573bb687/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=e2311b31c64e56c3d3218f6101c22ffe573bb687", "patch": "@@ -23,7 +23,7 @@ use task::{Poll, LocalWaker};\n ///\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `await!` the value.\n-#[must_use]\n+#[must_use = \"futures do nothing unless polled\"]\n pub trait Future {\n     /// The result of the `Future`.\n     type Output;"}, {"sha": "640af748172826294af275cdf165539557b34508", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2311b31c64e56c3d3218f6101c22ffe573bb687/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2311b31c64e56c3d3218f6101c22ffe573bb687/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=e2311b31c64e56c3d3218f6101c22ffe573bb687", "patch": "@@ -88,7 +88,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     message=\"`{Self}` is not an iterator\"\n )]\n #[doc(spotlight)]\n-#[must_use]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1ef5428a789cf9cbbd3df9b50e5c64927306bb07", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e2311b31c64e56c3d3218f6101c22ffe573bb687/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2311b31c64e56c3d3218f6101c22ffe573bb687/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=e2311b31c64e56c3d3218f6101c22ffe573bb687", "patch": "@@ -243,7 +243,7 @@\n //! using it. The compiler will warn us about this kind of behavior:\n //!\n //! ```text\n-//! warning: unused result that must be used: iterator adaptors are lazy and\n+//! warning: unused result that must be used: iterators are lazy and\n //! do nothing unless consumed\n //! ```\n //!\n@@ -404,7 +404,7 @@ impl<R: Try> LoopState<R::Ok, R> {\n /// [`rev`]: trait.Iterator.html#method.rev\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rev<T> {\n     iter: T\n@@ -505,7 +505,7 @@ unsafe impl<I> TrustedLen for Rev<I>\n /// [`copied`]: trait.Iterator.html#method.copied\n /// [`Iterator`]: trait.Iterator.html\n #[unstable(feature = \"iter_copied\", issue = \"57127\")]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n pub struct Copied<I> {\n     it: I,\n@@ -605,7 +605,7 @@ unsafe impl<'a, I, T: 'a> TrustedLen for Copied<I>\n /// [`cloned`]: trait.Iterator.html#method.cloned\n /// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n pub struct Cloned<I> {\n     it: I,\n@@ -717,7 +717,7 @@ unsafe impl<'a, I, T: 'a> TrustedLen for Cloned<I>\n /// [`cycle`]: trait.Iterator.html#method.cycle\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Cycle<I> {\n     orig: I,\n@@ -757,7 +757,7 @@ impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n ///\n /// [`step_by`]: trait.Iterator.html#method.step_by\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n #[derive(Clone, Debug)]\n pub struct StepBy<I> {\n@@ -849,7 +849,7 @@ impl<I> ExactSizeIterator for StepBy<I> where I: ExactSizeIterator {}\n /// [`chain`]: trait.Iterator.html#method.chain\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<A, B> {\n     a: A,\n@@ -1100,7 +1100,7 @@ unsafe impl<A, B> TrustedLen for Chain<A, B>\n /// [`zip`]: trait.Iterator.html#method.zip\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Zip<A, B> {\n     a: A,\n@@ -1400,7 +1400,7 @@ unsafe impl<A, B> TrustedLen for Zip<A, B>\n ///     println!(\"{:?}\", pair);\n /// }\n /// ```\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Map<I, F> {\n@@ -1511,7 +1511,7 @@ unsafe impl<B, I, F> TrustedRandomAccess for Map<I, F>\n ///\n /// [`filter`]: trait.Iterator.html#method.filter\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Filter<I, P> {\n@@ -1643,7 +1643,7 @@ impl<I: FusedIterator, P> FusedIterator for Filter<I, P>\n ///\n /// [`filter_map`]: trait.Iterator.html#method.filter_map\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct FilterMap<I, F> {\n@@ -1754,7 +1754,7 @@ impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F>\n /// [`enumerate`]: trait.Iterator.html#method.enumerate\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Enumerate<I> {\n     iter: I,\n@@ -1915,7 +1915,7 @@ unsafe impl<I> TrustedLen for Enumerate<I>\n /// [`peekable`]: trait.Iterator.html#method.peekable\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Peekable<I: Iterator> {\n     iter: I,\n@@ -2066,7 +2066,7 @@ impl<I: Iterator> Peekable<I> {\n ///\n /// [`skip_while`]: trait.Iterator.html#method.skip_while\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct SkipWhile<I, P> {\n@@ -2149,7 +2149,7 @@ impl<I, P> FusedIterator for SkipWhile<I, P>\n ///\n /// [`take_while`]: trait.Iterator.html#method.take_while\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct TakeWhile<I, P> {\n@@ -2233,7 +2233,7 @@ impl<I, P> FusedIterator for TakeWhile<I, P>\n /// [`skip`]: trait.Iterator.html#method.skip\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Skip<I> {\n     iter: I,\n@@ -2371,7 +2371,7 @@ impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n /// [`take`]: trait.Iterator.html#method.take\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Take<I> {\n     iter: I,\n@@ -2458,7 +2458,7 @@ unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n ///\n /// [`scan`]: trait.Iterator.html#method.scan\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Scan<I, St, F> {\n@@ -2518,7 +2518,7 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n ///\n /// [`flat_map`]: trait.Iterator.html#method.flat_map\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct FlatMap<I, U: IntoIterator, F> {\n     inner: FlattenCompat<Map<I, F>, <U as IntoIterator>::IntoIter>\n@@ -2603,7 +2603,7 @@ impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n ///\n /// [`flatten`]: trait.Iterator.html#method.flatten\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub struct Flatten<I: Iterator>\n where I::Item: IntoIterator {\n@@ -2832,7 +2832,7 @@ impl<I, U> DoubleEndedIterator for FlattenCompat<I, U>\n /// [`fuse`]: trait.Iterator.html#method.fuse\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Fuse<I> {\n     iter: I,\n@@ -3056,7 +3056,7 @@ impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {\n ///\n /// [`inspect`]: trait.Iterator.html#method.inspect\n /// [`Iterator`]: trait.Iterator.html\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Inspect<I, F> {"}, {"sha": "e0184164b3ac22c68975dc89d1cc15899d7b0a49", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2311b31c64e56c3d3218f6101c22ffe573bb687/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2311b31c64e56c3d3218f6101c22ffe573bb687/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=e2311b31c64e56c3d3218f6101c22ffe573bb687", "patch": "@@ -28,7 +28,7 @@ fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /*\n \n // Full example of enumerate iterator\n \n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n struct StreamEnumerate<I> {\n     iter: I,\n     count: usize,"}]}