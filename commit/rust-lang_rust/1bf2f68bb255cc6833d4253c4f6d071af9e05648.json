{"sha": "1bf2f68bb255cc6833d4253c4f6d071af9e05648", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZjJmNjhiYjI1NWNjNjgzM2Q0MjUzYzRmNmQwNzFhZjllMDU2NDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-13T12:04:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-13T12:04:41Z"}, "message": "auto merge of #6437 : Thiez/rust/atomic, r=Aatch\n\nThis pull request adds 4 atomic intrinsics to the compiler, in preparation for #5042.\r\n\r\n* `atomic_load(src: &int) -> int` performs an atomic sequentially consistent load.\r\n* `atomic_load_acq(src: &int) -> int` performs an atomic acquiring load.\r\n* `atomic_store(dst: &mut int, val: int)` performs an atomic sequentially consistent store.\r\n* `atomic_store_rel(dst: &mut int, val: int)` performs an atomic releasing store.\r\n\r\nFor more information about the whole acquire/release thing: http://llvm.org/docs/Atomics.html\r\n\r\nr?", "tree": {"sha": "7ed14f8a52d842e64bbf258f9a2bcc3a8ca1cb34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ed14f8a52d842e64bbf258f9a2bcc3a8ca1cb34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bf2f68bb255cc6833d4253c4f6d071af9e05648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf2f68bb255cc6833d4253c4f6d071af9e05648", "html_url": "https://github.com/rust-lang/rust/commit/1bf2f68bb255cc6833d4253c4f6d071af9e05648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bf2f68bb255cc6833d4253c4f6d071af9e05648/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2774392b41af806028d9946f42e84495d58a33d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2774392b41af806028d9946f42e84495d58a33d6", "html_url": "https://github.com/rust-lang/rust/commit/2774392b41af806028d9946f42e84495d58a33d6"}, {"sha": "852af346d346e0119af8336c88ee1b113346ac7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/852af346d346e0119af8336c88ee1b113346ac7c", "html_url": "https://github.com/rust-lang/rust/commit/852af346d346e0119af8336c88ee1b113346ac7c"}], "stats": {"total": 141, "additions": 136, "deletions": 5}, "files": [{"sha": "b8c0c4e4a9292874885d27618f49f2d444692102", "filename": "src/libcore/unstable/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibcore%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibcore%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fintrinsics.rs?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -20,6 +20,16 @@ pub extern \"rust-intrinsic\" {\n     pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n     pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n \n+    #[cfg(not(stage0))]\n+    pub fn atomic_load(src: &int) -> int;\n+    #[cfg(not(stage0))]\n+    pub fn atomic_load_acq(src: &int) -> int;\n+\n+    #[cfg(not(stage0))]\n+    pub fn atomic_store(dst: &mut int, val: int);\n+    #[cfg(not(stage0))]\n+    pub fn atomic_store_rel(dst: &mut int, val: int);\n+\n     pub fn atomic_xchg(dst: &mut int, src: int) -> int;\n     pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;"}, {"sha": "4c61c42a3393268831f545f1604336d6935f5245", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -1339,13 +1339,16 @@ pub mod llvm {\n                                     PointerVal: ValueRef) -> ValueRef;\n         #[fast_ffi]\n         pub unsafe fn LLVMBuildLoad(B: BuilderRef,\n-                                PointerVal: ValueRef,\n-                                Name: *c_char)\n-                             -> ValueRef;\n+                                    PointerVal: ValueRef,\n+                                    Name: *c_char)\n+                                 -> ValueRef;\n+\n         #[fast_ffi]\n         pub unsafe fn LLVMBuildStore(B: BuilderRef,\n                                      Val: ValueRef,\n-                                     Ptr: ValueRef) -> ValueRef;\n+                                     Ptr: ValueRef)\n+                                  -> ValueRef;\n+\n         #[fast_ffi]\n         pub unsafe fn LLVMBuildGEP(B: BuilderRef,\n                                Pointer: ValueRef,\n@@ -1561,6 +1564,17 @@ pub mod llvm {\n                                        Name: *c_char) -> ValueRef;\n \n         /* Atomic Operations */\n+        pub unsafe fn LLVMBuildAtomicLoad(B: BuilderRef,\n+                                          PointerVal: ValueRef,\n+                                          Order: AtomicOrdering)\n+                                       -> ValueRef;\n+\n+        pub unsafe fn LLVMBuildAtomicStore(B: BuilderRef,\n+                                           Val: ValueRef,\n+                                           Ptr: ValueRef,\n+                                           Order: AtomicOrdering)\n+                                        -> ValueRef;\n+\n         pub unsafe fn LLVMBuildAtomicCmpXchg(B: BuilderRef,\n                                              LHS: ValueRef,\n                                              CMP: ValueRef,"}, {"sha": "b2af91887ecbfe89a4f3ce53af3e51cd80e29ebc", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -537,6 +537,18 @@ pub fn Load(cx: block, PointerVal: ValueRef) -> ValueRef {\n     }\n }\n \n+pub fn AtomicLoad(cx: block, PointerVal: ValueRef, order: AtomicOrdering) -> ValueRef {\n+    unsafe {\n+        let ccx = cx.fcx.ccx;\n+        if cx.unreachable {\n+            return llvm::LLVMGetUndef(ccx.int_type);\n+        }\n+        count_insn(cx, \"load.atomic\");\n+        return llvm::LLVMBuildAtomicLoad(B(cx), PointerVal, order);\n+    }\n+}\n+\n+\n pub fn LoadRangeAssert(cx: block, PointerVal: ValueRef, lo: c_ulonglong,\n                        hi: c_ulonglong, signed: lib::llvm::Bool) -> ValueRef {\n     let value = Load(cx, PointerVal);\n@@ -567,6 +579,17 @@ pub fn Store(cx: block, Val: ValueRef, Ptr: ValueRef) {\n     }\n }\n \n+pub fn AtomicStore(cx: block, Val: ValueRef, Ptr: ValueRef, order: AtomicOrdering) {\n+    unsafe {\n+        if cx.unreachable { return; }\n+        debug!(\"Store %s -> %s\",\n+               val_str(cx.ccx().tn, Val),\n+               val_str(cx.ccx().tn, Ptr));\n+        count_insn(cx, \"store.atomic\");\n+        llvm::LLVMBuildAtomicStore(B(cx), Val, Ptr, order);\n+    }\n+}\n+\n pub fn GEP(cx: block, Pointer: ValueRef, Indices: &[ValueRef]) -> ValueRef {\n     unsafe {\n         if cx.unreachable { return llvm::LLVMGetUndef(T_ptr(T_nil())); }"}, {"sha": "30db63e9c19da3b82e719db057307ca0f58f2048", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -592,6 +592,30 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                                     Release);\n             Store(bcx, old, fcx.llretptr.get());\n         }\n+        ~\"atomic_load\" => {\n+            let old = AtomicLoad(bcx,\n+                                 get_param(decl, first_real_arg),\n+                                 SequentiallyConsistent);\n+            Store(bcx, old, fcx.llretptr.get());\n+        }\n+        ~\"atomic_load_acq\" => {\n+            let old = AtomicLoad(bcx,\n+                                 get_param(decl, first_real_arg),\n+                                 Acquire);\n+            Store(bcx, old, fcx.llretptr.get());\n+        }\n+        ~\"atomic_store\" => {\n+            AtomicStore(bcx,\n+                        get_param(decl, first_real_arg + 1u),\n+                        get_param(decl, first_real_arg),\n+                        SequentiallyConsistent);\n+        }\n+        ~\"atomic_store_rel\" => {\n+            AtomicStore(bcx,\n+                        get_param(decl, first_real_arg + 1u),\n+                        get_param(decl, first_real_arg),\n+                        Release);\n+        }\n         ~\"atomic_xchg\" => {\n             let old = AtomicRMW(bcx, Xchg,\n                                 get_param(decl, first_real_arg),"}, {"sha": "6a271f979caed93b59beb511c47ddf4944e3291f", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -124,7 +124,9 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n                 ~\"get_tydesc\" | ~\"needs_drop\" => use_tydesc,\n \n                 ~\"atomic_cxchg\"    | ~\"atomic_cxchg_acq\"|\n-                ~\"atomic_cxchg_rel\"| ~\"atomic_xchg\"     |\n+                ~\"atomic_cxchg_rel\"| ~\"atomic_load\"     |\n+                ~\"atomic_load_acq\" | ~\"atomic_store\"    |\n+                ~\"atomic_store_rel\"| ~\"atomic_xchg\"     |\n                 ~\"atomic_xadd\"     | ~\"atomic_xsub\"     |\n                 ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" |\n                 ~\"atomic_xsub_acq\" | ~\"atomic_xchg_rel\" |"}, {"sha": "7f73ed94c031c932ef1f1282fccb6201d46b463b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -3486,6 +3486,25 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n          ],\n          ty::mk_int())\n       }\n+      ~\"atomic_load\"     | ~\"atomic_load_acq\" => {\n+        (0,\n+         ~[\n+            arg(ty::mk_imm_rptr(tcx,\n+                            ty::re_bound(ty::br_anon(0)),\n+                            ty::mk_int()))\n+         ],\n+        ty::mk_int())\n+      }\n+      ~\"atomic_store\"    | ~\"atomic_store_rel\" => {\n+        (0,\n+         ~[\n+            arg(ty::mk_mut_rptr(tcx,\n+                                ty::re_bound(ty::br_anon(0)),\n+                                ty::mk_int())),\n+            arg(ty::mk_int())\n+         ],\n+         ty::mk_nil())\n+      }\n       ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\"     |\n       ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n       ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" => {"}, {"sha": "8c081858d602a42b85864978e6fbd82727a6e7b8", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -545,6 +545,28 @@ extern \"C\" LLVMTypeRef LLVMMetadataType(void) {\n   return LLVMMetadataTypeInContext(LLVMGetGlobalContext());\n }\n \n+extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n+                                            LLVMValueRef source,\n+                                            const char* Name,\n+                                            AtomicOrdering order) {\n+    LoadInst* li = new LoadInst(unwrap(source),0);\n+    li->setVolatile(true);\n+    li->setAtomic(order);\n+    li->setAlignment(sizeof(intptr_t));\n+    return wrap(unwrap(B)->Insert(li));\n+}\n+\n+extern \"C\" LLVMValueRef LLVMBuildAtomicStore(LLVMBuilderRef B,\n+                                            LLVMValueRef val,\n+                                            LLVMValueRef target,\n+                                            AtomicOrdering order) {\n+    StoreInst* si = new StoreInst(unwrap(val),unwrap(target));\n+    si->setVolatile(true);\n+    si->setAtomic(order);\n+    si->setAlignment(sizeof(intptr_t));\n+    return wrap(unwrap(B)->Insert(si));\n+}\n+\n extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n                                                LLVMValueRef target,\n                                                LLVMValueRef old,"}, {"sha": "dd5dc7102d1e9f9959c6c4e2062352b6587b9d29", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -84,6 +84,8 @@ LLVMArrayType\n LLVMBasicBlockAsValue\n LLVMBlockAddress\n LLVMBuildAShr\n+LLVMBuildAtomicLoad\n+LLVMBuildAtomicStore\n LLVMBuildAtomicCmpXchg\n LLVMBuildAtomicRMW\n LLVMBuildAdd"}, {"sha": "d4701f74488c8d9595b35455177fa0bca02c6615", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf2f68bb255cc6833d4253c4f6d071af9e05648/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=1bf2f68bb255cc6833d4253c4f6d071af9e05648", "patch": "@@ -15,6 +15,12 @@ mod rusti {\n         pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n         pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n \n+        pub fn atomic_load(src: &int) -> int;\n+        pub fn atomic_load_acq(src: &int) -> int;\n+        \n+        pub fn atomic_store(dst: &mut int, val: int);\n+        pub fn atomic_store_rel(dst: &mut int, val: int);\n+\n         pub fn atomic_xchg(dst: &mut int, src: int) -> int;\n         pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n         pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n@@ -33,6 +39,15 @@ pub fn main() {\n     unsafe {\n         let mut x = ~1;\n \n+        assert!(rusti::atomic_load(x) == 1);\n+        *x = 5;\n+        assert!(rusti::atomic_load_acq(x) == 5);\n+        \n+        rusti::atomic_store(x,3);\n+        assert!(*x == 3);\n+        rusti::atomic_store_rel(x,1);\n+        assert!(*x == 1);\n+\n         assert!(rusti::atomic_cxchg(x, 1, 2) == 1);\n         assert!(*x == 2);\n "}]}