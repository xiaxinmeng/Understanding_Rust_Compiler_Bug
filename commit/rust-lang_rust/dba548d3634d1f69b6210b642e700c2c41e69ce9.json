{"sha": "dba548d3634d1f69b6210b642e700c2c41e69ce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYTU0OGQzNjM0ZDFmNjliNjIxMGI2NDJlNzAwYzJjNDFlNjljZTk=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-14T07:26:08Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-14T07:26:08Z"}, "message": "fix via mdinger", "tree": {"sha": "38940f597b8911dd78990e534a4f37f79e81c573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38940f597b8911dd78990e534a4f37f79e81c573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dba548d3634d1f69b6210b642e700c2c41e69ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dba548d3634d1f69b6210b642e700c2c41e69ce9", "html_url": "https://github.com/rust-lang/rust/commit/dba548d3634d1f69b6210b642e700c2c41e69ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dba548d3634d1f69b6210b642e700c2c41e69ce9/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04578f6611ca5da47b23fa0d10381f7858b3a325", "url": "https://api.github.com/repos/rust-lang/rust/commits/04578f6611ca5da47b23fa0d10381f7858b3a325", "html_url": "https://github.com/rust-lang/rust/commit/04578f6611ca5da47b23fa0d10381f7858b3a325"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "a1f5f29f8d85ed039dd77be116f6065e1c2e7f20", "filename": "src/doc/tarpl/repr-rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dba548d3634d1f69b6210b642e700c2c41e69ce9/src%2Fdoc%2Ftarpl%2Frepr-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/dba548d3634d1f69b6210b642e700c2c41e69ce9/src%2Fdoc%2Ftarpl%2Frepr-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Frepr-rust.md?ref=dba548d3634d1f69b6210b642e700c2c41e69ce9", "patch": "@@ -109,7 +109,7 @@ struct FooRepr {\n \n And indeed this is approximately how it would be laid out in general\n (modulo the size and position of `tag`). However there are several cases where\n-such a representation is ineffiecient. The classic case of this is Rust's\n+such a representation is inefficient. The classic case of this is Rust's\n \"null pointer optimization\". Given a pointer that is known to not be null\n (e.g. `&u32`), an enum can *store* a discriminant bit *inside* the pointer\n by using null as a special value. The net result is that\n@@ -121,4 +121,4 @@ nested enums pooling their tags into a single descriminant, as they are by\n definition known to have a limited range of valid values. In principle enums can\n use fairly elaborate algorithms to cache bits throughout nested types with\n special constrained representations. As such it is *especially* desirable that\n-we leave enum layout unspecified today.\n\\ No newline at end of file\n+we leave enum layout unspecified today."}]}