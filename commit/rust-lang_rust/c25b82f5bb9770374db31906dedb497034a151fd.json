{"sha": "c25b82f5bb9770374db31906dedb497034a151fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNWI4MmY1YmI5NzcwMzc0ZGIzMTkwNmRlZGI0OTcwMzRhMTUxZmQ=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-21T03:50:28Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-21T04:55:00Z"}, "message": "Use Step::forward_unchecked in RangeInclusive::next", "tree": {"sha": "00fe398ec15a3d92ed6e04d583fba2f85695b33b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00fe398ec15a3d92ed6e04d583fba2f85695b33b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c25b82f5bb9770374db31906dedb497034a151fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c25b82f5bb9770374db31906dedb497034a151fd", "html_url": "https://github.com/rust-lang/rust/commit/c25b82f5bb9770374db31906dedb497034a151fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c25b82f5bb9770374db31906dedb497034a151fd/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96f387920c21a83fa620b1838066fd4c73c4b486", "url": "https://api.github.com/repos/rust-lang/rust/commits/96f387920c21a83fa620b1838066fd4c73c4b486", "html_url": "https://github.com/rust-lang/rust/commit/96f387920c21a83fa620b1838066fd4c73c4b486"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "3fa4cf2ca0da60946476d29dc2084f74b4918856", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c25b82f5bb9770374db31906dedb497034a151fd/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25b82f5bb9770374db31906dedb497034a151fd/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=c25b82f5bb9770374db31906dedb497034a151fd", "patch": "@@ -646,7 +646,11 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         }\n         let is_iterating = self.start < self.end;\n         Some(if is_iterating {\n-            let n = Step::forward(self.start.clone(), 1);\n+            // SAFETY: just checked precondition\n+            // We use the unchecked version here, because\n+            // otherwise `for _ in '\\0'..=char::MAX`\n+            // does not successfully remove panicking code.\n+            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n             mem::replace(&mut self.start, n)\n         } else {\n             self.exhausted = true;"}]}