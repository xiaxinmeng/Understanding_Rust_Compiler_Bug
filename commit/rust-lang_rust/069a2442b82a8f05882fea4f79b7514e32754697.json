{"sha": "069a2442b82a8f05882fea4f79b7514e32754697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OWEyNDQyYjgyYThmMDU4ODJmZWE0Zjc5Yjc1MTRlMzI3NTQ2OTc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-10-27T20:04:22Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "Add exprs map to crate, collect item blocks there", "tree": {"sha": "59d247cb4fc1c1dc2898f264c10dc3ddd495745c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59d247cb4fc1c1dc2898f264c10dc3ddd495745c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069a2442b82a8f05882fea4f79b7514e32754697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069a2442b82a8f05882fea4f79b7514e32754697", "html_url": "https://github.com/rust-lang/rust/commit/069a2442b82a8f05882fea4f79b7514e32754697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069a2442b82a8f05882fea4f79b7514e32754697/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c448574bc668b0de70ed75223bf8798d17bf058", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c448574bc668b0de70ed75223bf8798d17bf058", "html_url": "https://github.com/rust-lang/rust/commit/1c448574bc668b0de70ed75223bf8798d17bf058"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "7ea870e4300138d83328c254f9cc4ad30efb630c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/069a2442b82a8f05882fea4f79b7514e32754697/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069a2442b82a8f05882fea4f79b7514e32754697/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=069a2442b82a8f05882fea4f79b7514e32754697", "patch": "@@ -47,9 +47,12 @@ use hir::def_id::{DefIndex, DefId};\n use hir::def::{Def, PathResolution};\n use session::Session;\n use util::nodemap::NodeMap;\n+use rustc_data_structures::fnv::FnvHashMap;\n \n use std::collections::BTreeMap;\n use std::iter;\n+use std::mem;\n+\n use syntax::ast::*;\n use syntax::errors;\n use syntax::ptr::P;\n@@ -68,6 +71,7 @@ pub struct LoweringContext<'a> {\n     // the form of a DefIndex) so that if we create a new node which introduces\n     // a definition, then we can properly create the def id.\n     parent_def: Option<DefIndex>,\n+    exprs: FnvHashMap<hir::ExprId, hir::Expr>,\n     resolver: &'a mut Resolver,\n \n     /// The items being lowered are collected here.\n@@ -104,6 +108,7 @@ pub fn lower_crate(sess: &Session,\n         crate_root: std_inject::injected_crate_name(krate),\n         sess: sess,\n         parent_def: None,\n+        exprs: FnvHashMap(),\n         resolver: resolver,\n         items: BTreeMap::new(),\n         impl_items: BTreeMap::new(),\n@@ -120,6 +125,23 @@ enum ParamMode {\n \n impl<'a> LoweringContext<'a> {\n     fn lower_crate(mut self, c: &Crate) -> hir::Crate {\n+        self.lower_items(c);\n+        let module = self.lower_mod(&c.module);\n+        let attrs = self.lower_attrs(&c.attrs);\n+        let exported_macros = c.exported_macros.iter().map(|m| self.lower_macro_def(m)).collect();\n+\n+        hir::Crate {\n+            module: module,\n+            attrs: attrs,\n+            span: c.span,\n+            exported_macros: exported_macros,\n+            items: self.items,\n+            impl_items: self.impl_items,\n+            exprs: mem::replace(&mut self.exprs, FnvHashMap()),\n+        }\n+    }\n+\n+    fn lower_items(&mut self, c: &Crate) {\n         struct ItemLowerer<'lcx, 'interner: 'lcx> {\n             lctx: &'lcx mut LoweringContext<'interner>,\n         }\n@@ -139,16 +161,14 @@ impl<'a> LoweringContext<'a> {\n             }\n         }\n \n-        visit::walk_crate(&mut ItemLowerer { lctx: &mut self }, c);\n+        let mut item_lowerer = ItemLowerer { lctx: self };\n+        visit::walk_crate(&mut item_lowerer, c);\n+    }\n \n-        hir::Crate {\n-            module: self.lower_mod(&c.module),\n-            attrs: self.lower_attrs(&c.attrs),\n-            span: c.span,\n-            exported_macros: c.exported_macros.iter().map(|m| self.lower_macro_def(m)).collect(),\n-            items: self.items,\n-            impl_items: self.impl_items,\n-        }\n+    fn record_expr(&mut self, expr: hir::Expr) -> hir::ExprId {\n+        let id = hir::ExprId(expr.id);\n+        self.exprs.insert(id, expr);\n+        id\n     }\n \n     fn next_id(&self) -> NodeId {"}, {"sha": "eda8e34516ef18c9edd50b9e5a3b149193d331dd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/069a2442b82a8f05882fea4f79b7514e32754697/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069a2442b82a8f05882fea4f79b7514e32754697/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=069a2442b82a8f05882fea4f79b7514e32754697", "patch": "@@ -33,6 +33,7 @@ pub use self::PathParameters::*;\n use hir::def::Def;\n use hir::def_id::DefId;\n use util::nodemap::{NodeMap, FxHashSet};\n+use rustc_data_structures::fnv::FnvHashMap;\n \n use syntax_pos::{mk_sp, Span, ExpnId, DUMMY_SP};\n use syntax::codemap::{self, respan, Spanned};\n@@ -428,6 +429,7 @@ pub struct Crate {\n     pub items: BTreeMap<NodeId, Item>,\n \n     pub impl_items: BTreeMap<ImplItemId, ImplItem>,\n+    pub exprs: FnvHashMap<ExprId, Expr>,\n }\n \n impl Crate {\n@@ -846,6 +848,15 @@ pub enum UnsafeSource {\n     UserProvided,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct ExprId(NodeId);\n+\n+impl ExprId {\n+    pub fn node_id(self) -> NodeId {\n+        self.0\n+    }\n+}\n+\n /// An expression\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Expr {"}]}