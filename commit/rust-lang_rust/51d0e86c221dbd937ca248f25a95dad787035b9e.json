{"sha": "51d0e86c221dbd937ca248f25a95dad787035b9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDBlODZjMjIxZGJkOTM3Y2EyNDhmMjVhOTVkYWQ3ODcwMzViOWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-03T20:14:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T02:46:11Z"}, "message": "Emit missing unclosed delimiter errors", "tree": {"sha": "f27ebd02767e4c907470b4e989ccc9f7920d06d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f27ebd02767e4c907470b4e989ccc9f7920d06d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d0e86c221dbd937ca248f25a95dad787035b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d0e86c221dbd937ca248f25a95dad787035b9e", "html_url": "https://github.com/rust-lang/rust/commit/51d0e86c221dbd937ca248f25a95dad787035b9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d0e86c221dbd937ca248f25a95dad787035b9e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c70a516c23ae19ce568166a81e64c92a4ecf540a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70a516c23ae19ce568166a81e64c92a4ecf540a", "html_url": "https://github.com/rust-lang/rust/commit/c70a516c23ae19ce568166a81e64c92a4ecf540a"}], "stats": {"total": 111, "additions": 56, "deletions": 55}, "files": [{"sha": "67a249e605ecc8e4ddb002df2ed1edbd8cfd7930", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=51d0e86c221dbd937ca248f25a95dad787035b9e", "patch": "@@ -439,8 +439,8 @@ impl cstore::CStore {\n \n         let source_file = sess.parse_sess.source_map().new_source_file(source_name, def.body);\n         let local_span = Span::new(source_file.start_pos, source_file.end_pos, NO_EXPANSION);\n-        let (body, errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n-        emit_unclosed_delims(&errors, &sess.diagnostic());\n+        let (body, mut errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n+        emit_unclosed_delims(&mut errors, &sess.diagnostic());\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index, sess);"}, {"sha": "bde14e192e96bcbabb1abbae114a603946be2b52", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=51d0e86c221dbd937ca248f25a95dad787035b9e", "patch": "@@ -7798,7 +7798,10 @@ impl<'a> Parser<'a> {\n         attributes_allowed: bool,\n     ) -> PResult<'a, Option<P<Item>>> {\n         let (ret, tokens) = self.collect_tokens(|this| {\n-            this.parse_item_implementation(attrs, macros_allowed, attributes_allowed)\n+            let item = this.parse_item_implementation(attrs, macros_allowed, attributes_allowed);\n+            let diag = this.diagnostic();\n+            emit_unclosed_delims(&mut this.unclosed_delims, diag);\n+            item\n         })?;\n \n         // Once we've parsed an item and recorded the tokens we got while\n@@ -8555,8 +8558,8 @@ impl<'a> Parser<'a> {\n             module: self.parse_mod_items(&token::Eof, lo)?,\n             span: lo.to(self.span),\n         });\n-        emit_unclosed_delims(&self.unclosed_delims, self.diagnostic());\n-        self.unclosed_delims.clear();\n+        let diag = self.diagnostic();\n+        emit_unclosed_delims(&mut self.unclosed_delims, diag);\n         krate\n     }\n \n@@ -8587,8 +8590,8 @@ impl<'a> Parser<'a> {\n     }\n }\n \n-pub fn emit_unclosed_delims(unclosed_delims: &[UnmatchedBrace], handler: &errors::Handler) {\n-    for unmatched in unclosed_delims {\n+pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, handler: &errors::Handler) {\n+    for unmatched in unclosed_delims.iter() {\n         let mut err = handler.struct_span_err(unmatched.found_span, &format!(\n             \"incorrect close delimiter: `{}`\",\n             pprust::token_to_string(&token::Token::CloseDelim(unmatched.found_delim)),\n@@ -8602,4 +8605,5 @@ pub fn emit_unclosed_delims(unclosed_delims: &[UnmatchedBrace], handler: &errors\n         }\n         err.emit();\n     }\n+    unclosed_delims.clear();\n }"}, {"sha": "bb4da12bae8931e5c9689dd86d95ac69b99e9575", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=51d0e86c221dbd937ca248f25a95dad787035b9e", "patch": "@@ -675,9 +675,9 @@ impl Nonterminal {\n         // FIXME(#43081): Avoid this pretty-print + reparse hack\n         let source = pprust::nonterminal_to_string(self);\n         let filename = FileName::macro_expansion_source_code(&source);\n-        let (tokens_for_real, errors) =\n+        let (tokens_for_real, mut errors) =\n             parse_stream_from_source_str(filename, source, sess, Some(span));\n-        emit_unclosed_delims(&errors, &sess.span_diagnostic);\n+        emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n \n         // During early phases of the compiler the AST could get modified\n         // directly (e.g., attributes added or removed) and the internal cache\n@@ -740,13 +740,13 @@ fn prepend_attrs(sess: &ParseSess,\n         let source = pprust::attr_to_string(attr);\n         let macro_filename = FileName::macro_expansion_source_code(&source);\n         if attr.is_sugared_doc {\n-            let (stream, errors) = parse_stream_from_source_str(\n+            let (stream, mut errors) = parse_stream_from_source_str(\n                 macro_filename,\n                 source,\n                 sess,\n                 Some(span),\n             );\n-            emit_unclosed_delims(&errors, &sess.span_diagnostic);\n+            emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n             builder.push(stream);\n             continue\n         }\n@@ -763,13 +763,13 @@ fn prepend_attrs(sess: &ParseSess,\n         // ... and for more complicated paths, fall back to a reparse hack that\n         // should eventually be removed.\n         } else {\n-            let (stream, errors) = parse_stream_from_source_str(\n+            let (stream, mut errors) = parse_stream_from_source_str(\n                 macro_filename,\n                 source,\n                 sess,\n                 Some(span),\n             );\n-            emit_unclosed_delims(&errors, &sess.span_diagnostic);\n+            emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n             brackets.push(stream);\n         }\n "}, {"sha": "5822b5607f7dfb37f7b936c951e64fe828cfeb1b", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=51d0e86c221dbd937ca248f25a95dad787035b9e", "patch": "@@ -410,13 +410,13 @@ impl server::TokenStream for Rustc<'_> {\n         stream.is_empty()\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n-        let (tokens, errors) = parse::parse_stream_from_source_str(\n+        let (tokens, mut errors) = parse::parse_stream_from_source_str(\n             FileName::proc_macro_source_code(src.clone()),\n             src.to_string(),\n             self.sess,\n             Some(self.call_site),\n         );\n-        emit_unclosed_delims(&errors, &self.sess.span_diagnostic);\n+        emit_unclosed_delims(&mut errors, &self.sess.span_diagnostic);\n         tokens\n     }\n     fn to_string(&mut self, stream: &Self::TokenStream) -> String {"}, {"sha": "92d8cbc100a039fa79499ff976c0b75724b80ab7", "filename": "src/test/ui/parser-recovery-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Ftest%2Fui%2Fparser-recovery-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Ftest%2Fui%2Fparser-recovery-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-2.stderr?ref=51d0e86c221dbd937ca248f25a95dad787035b9e", "patch": "@@ -1,9 +1,3 @@\n-error: unexpected token: `;`\n-  --> $DIR/parser-recovery-2.rs:12:15\n-   |\n-LL |     let x = y.;  //~ ERROR unexpected token\n-   |               ^\n-\n error: incorrect close delimiter: `)`\n   --> $DIR/parser-recovery-2.rs:8:5\n    |\n@@ -13,6 +7,12 @@ LL |         let x = foo(); //~ ERROR cannot find function `foo` in this scope\n LL |     ) //~ ERROR incorrect close delimiter: `)`\n    |     ^ incorrect close delimiter\n \n+error: unexpected token: `;`\n+  --> $DIR/parser-recovery-2.rs:12:15\n+   |\n+LL |     let x = y.;  //~ ERROR unexpected token\n+   |               ^\n+\n error[E0425]: cannot find function `foo` in this scope\n   --> $DIR/parser-recovery-2.rs:7:17\n    |"}, {"sha": "05bdbeacf72fecd3447925adb52d01905286435f", "filename": "src/test/ui/resolve/token-error-correct-3.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs?ref=51d0e86c221dbd937ca248f25a95dad787035b9e", "patch": "@@ -10,16 +10,14 @@ pub mod raw {\n     pub fn ensure_dir_exists<P: AsRef<Path>, F: FnOnce(&Path)>(path: P,\n                                                                callback: F)\n                                                                -> io::Result<bool> {\n-        if !is_directory(path.as_ref()) { //~ ERROR: cannot find function `is_directory`\n-            callback(path.as_ref(); //~ ERROR expected one of\n-            fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n-            //~^ expected (), found enum `std::result::Result`\n-            //~| expected type `()`\n-            //~| found type `std::result::Result<bool, std::io::Error>`\n-            //~| expected one of\n+        if !is_directory(path.as_ref()) {\n+            //~^ ERROR cannot find function `is_directory`\n+            callback(path.as_ref();\n+            //~^ ERROR expected one of\n+            //~| ERROR this function takes 1 parameter but 2 parameters were supplied\n+            fs::create_dir_all(path.as_ref()).map(|()| true)\n         } else {\n-            //~^ ERROR: expected one of\n-            //~| unexpected token\n+            //~^ ERROR incorrect close delimiter: `}`\n             Ok(false);\n         }\n "}, {"sha": "0f1cbd6c2f772302213495a66804d3352df903b5", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51d0e86c221dbd937ca248f25a95dad787035b9e/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=51d0e86c221dbd937ca248f25a95dad787035b9e", "patch": "@@ -1,39 +1,38 @@\n-error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n-  --> $DIR/token-error-correct-3.rs:14:35\n-   |\n-LL |             callback(path.as_ref(); //~ ERROR expected one of\n-   |                     -             ^\n-   |                     |             |\n-   |                     |             help: `)` may belong here\n-   |                     unclosed delimiter\n-\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n-  --> $DIR/token-error-correct-3.rs:20:9\n+error: incorrect close delimiter: `}`\n+  --> $DIR/token-error-correct-3.rs:19:9\n    |\n-LL |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n-   |                                                             - expected one of `.`, `;`, `?`, `}`, or an operator here\n+LL |         if !is_directory(path.as_ref()) {\n+   |                                         - close delimiter possibly meant for this\n+LL |             //~^ ERROR cannot find function `is_directory`\n+LL |             callback(path.as_ref();\n+   |                     - un-closed delimiter\n ...\n LL |         } else {\n-   |         ^ unexpected token\n+   |         ^ incorrect close delimiter\n+\n+error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n+  --> $DIR/token-error-correct-3.rs:15:35\n+   |\n+LL |             callback(path.as_ref();\n+   |                                   ^ expected one of `)`, `,`, `.`, `?`, or an operator here\n \n error[E0425]: cannot find function `is_directory` in this scope\n   --> $DIR/token-error-correct-3.rs:13:13\n    |\n-LL |         if !is_directory(path.as_ref()) { //~ ERROR: cannot find function `is_directory`\n+LL |         if !is_directory(path.as_ref()) {\n    |             ^^^^^^^^^^^^ not found in this scope\n \n-error[E0308]: mismatched types\n+error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n   --> $DIR/token-error-correct-3.rs:15:13\n    |\n-LL |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n-   |             |\n-   |             expected (), found enum `std::result::Result`\n-   |\n-   = note: expected type `()`\n-              found type `std::result::Result<bool, std::io::Error>`\n+LL | /             callback(path.as_ref();\n+LL | |             //~^ ERROR expected one of\n+LL | |             //~| ERROR this function takes 1 parameter but 2 parameters were supplied\n+LL | |             fs::create_dir_all(path.as_ref()).map(|()| true)\n+LL | |         } else {\n+   | |_________^ expected 1 parameter\n \n error: aborting due to 4 previous errors\n \n-Some errors occurred: E0308, E0425.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors occurred: E0057, E0425.\n+For more information about an error, try `rustc --explain E0057`."}]}