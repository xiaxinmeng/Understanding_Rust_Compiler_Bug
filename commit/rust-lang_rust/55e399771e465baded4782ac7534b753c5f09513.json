{"sha": "55e399771e465baded4782ac7534b753c5f09513", "node_id": "C_kwDOAAsO6NoAKDU1ZTM5OTc3MWU0NjViYWRlZDQ3ODJhYzc1MzRiNzUzYzVmMDk1MTM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-18T16:22:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-18T16:22:07Z"}, "message": "Rollup merge of #96156 - est31:use_from_le_bytes, r=Dylan-DPC\n\nReplace u8to64_le macro with u64::from_le_bytes\n\nThe macro was a reimplementation of the function.", "tree": {"sha": "e46fb387a3a911774e2097d62f8ed49df94e98a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46fb387a3a911774e2097d62f8ed49df94e98a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55e399771e465baded4782ac7534b753c5f09513", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXZAvCRBK7hj4Ov3rIwAABaoIAIPXLnVcE56yky9ttS/0IFLO\natiLmEfmTZdaKHzvDpEhnGVIMyLjfjGVGOsftMFcjS5SY3r2IYaa2M2B870QwHp3\ncCFQtogBzjos6W0E3iiFHWsVABuTHoAAdmJQNfIrYmyi2K/zxMrlt/dgqXZr/LGX\n8pDXq6luEeJITGaIs9wSZpCuXpzh6BXrPIpu2P6stvunpcOiW5MaqVaXjvWKO4kM\nj7R6ISZUzMQuWDWdub10jeLcaxP1Q8b6oeTt+e8Ik//M2+Ii1C2vJZuOK50NrVwd\nbBLZhjViNXDaFJGg7dp+NGefwONoRI6/vKwnT9CZjJ8U6voVHKjc/h+NtDFlB3I=\n=1rEf\n-----END PGP SIGNATURE-----\n", "payload": "tree e46fb387a3a911774e2097d62f8ed49df94e98a7\nparent 97d016eefd11c301d140ea5fba90a971665ba2f2\nparent 9e7a319f0137bd2ffec55cc57f4de5a17f0ceffc\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650298927 +0200\ncommitter GitHub <noreply@github.com> 1650298927 +0200\n\nRollup merge of #96156 - est31:use_from_le_bytes, r=Dylan-DPC\n\nReplace u8to64_le macro with u64::from_le_bytes\n\nThe macro was a reimplementation of the function.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55e399771e465baded4782ac7534b753c5f09513", "html_url": "https://github.com/rust-lang/rust/commit/55e399771e465baded4782ac7534b753c5f09513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55e399771e465baded4782ac7534b753c5f09513/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d016eefd11c301d140ea5fba90a971665ba2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d016eefd11c301d140ea5fba90a971665ba2f2", "html_url": "https://github.com/rust-lang/rust/commit/97d016eefd11c301d140ea5fba90a971665ba2f2"}, {"sha": "9e7a319f0137bd2ffec55cc57f4de5a17f0ceffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7a319f0137bd2ffec55cc57f4de5a17f0ceffc", "html_url": "https://github.com/rust-lang/rust/commit/9e7a319f0137bd2ffec55cc57f4de5a17f0ceffc"}], "stats": {"total": 26, "additions": 2, "deletions": 24}, "files": [{"sha": "877d0841830551b0b104f0f3d5967e553007278f", "filename": "library/core/tests/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55e399771e465baded4782ac7534b753c5f09513/library%2Fcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e399771e465baded4782ac7534b753c5f09513/library%2Fcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fsip.rs?ref=55e399771e465baded4782ac7534b753c5f09513", "patch": "@@ -15,28 +15,6 @@ impl<'a> Hash for Bytes<'a> {\n     }\n }\n \n-macro_rules! u8to64_le {\n-    ($buf:expr, $i:expr) => {\n-        $buf[0 + $i] as u64\n-            | ($buf[1 + $i] as u64) << 8\n-            | ($buf[2 + $i] as u64) << 16\n-            | ($buf[3 + $i] as u64) << 24\n-            | ($buf[4 + $i] as u64) << 32\n-            | ($buf[5 + $i] as u64) << 40\n-            | ($buf[6 + $i] as u64) << 48\n-            | ($buf[7 + $i] as u64) << 56\n-    };\n-    ($buf:expr, $i:expr, $len:expr) => {{\n-        let mut t = 0;\n-        let mut out = 0;\n-        while t < $len {\n-            out |= ($buf[t + $i] as u64) << t * 8;\n-            t += 1;\n-        }\n-        out\n-    }};\n-}\n-\n fn hash_with<H: Hasher, T: Hash>(mut st: H, x: &T) -> u64 {\n     x.hash(&mut st);\n     st.finish()\n@@ -123,7 +101,7 @@ fn test_siphash_1_3() {\n     let mut state_inc = SipHasher13::new_with_keys(k0, k1);\n \n     while t < 64 {\n-        let vec = u8to64_le!(vecs[t], 0);\n+        let vec = u64::from_le_bytes(vecs[t]);\n         let out = hash_with(SipHasher13::new_with_keys(k0, k1), &Bytes(&buf));\n         assert_eq!(vec, out);\n \n@@ -217,7 +195,7 @@ fn test_siphash_2_4() {\n     let mut state_inc = SipHasher::new_with_keys(k0, k1);\n \n     while t < 64 {\n-        let vec = u8to64_le!(vecs[t], 0);\n+        let vec = u64::from_le_bytes(vecs[t]);\n         let out = hash_with(SipHasher::new_with_keys(k0, k1), &Bytes(&buf));\n         assert_eq!(vec, out);\n "}]}