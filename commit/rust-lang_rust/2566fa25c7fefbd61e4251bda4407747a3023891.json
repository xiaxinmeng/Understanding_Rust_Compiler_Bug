{"sha": "2566fa25c7fefbd61e4251bda4407747a3023891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NjZmYTI1YzdmZWZiZDYxZTQyNTFiZGE0NDA3NzQ3YTMwMjM4OTE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-06T21:06:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-26T16:00:45Z"}, "message": "Revert \"Add a file to trivially disable tool building or testing\"\n\nThis reverts commit ab018c76e14b87f3c9e0b7384cc9b02d94779cd5.\n\nThis also adds the `ToolBuild::is_ext_tool` field to replace the previous\n`ToolBuild::expectation` field, to indicate whether a build-failure of\ncertain tool is essential.", "tree": {"sha": "981d391ca169cbf67f886f56f79c5dd55887d0b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981d391ca169cbf67f886f56f79c5dd55887d0b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2566fa25c7fefbd61e4251bda4407747a3023891", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpCci0ACgkQ/vbIBR0O\nATyYhBAAtY2xHP7moxlbwYWh6GAPYcnhdsK3HqcWezrkFd3HJ+N9xczyPcWz8cDO\nq5xp3bJKaaQ8PEiihglaowdyE/B0Tf0u3IiXiwdqQ+r9ElioWhNzX5Qw4aGPRqvG\nzzDnc0yWykVG19ExO1shHfTWmfEBOaz6bVJMWq3H909EjWT18mWIm6OEeO3//1Ok\n3q2h68pjPBmPyes9V7OU4kZ9wNUdTyeJiQ3fZn8Mt6REyik6ycwr+nf62eHru+VW\nZHjl7GXQm591HTHi5vb8iVzDlgFo6DKwzw/ntGTZttzYWPEAqeTQ0ga9vnQhpwag\n/f8r1+JB8EIuGSRvk1SpijEiU7Daf/hD9E/MYE8mF1K9DkBH0W0ayM0pxFxdDZYy\nyyJyfFaR7L8wm8XUCtnxHUHB1AWyKCdS0f0shGmMZvWKGpmo3X9EZrShl2jGP9Ay\nZxhRn8bNb76bleGy+QPCZul4m6+ikwNhnKLypRoqrOS4+QtcAgtClfROJCqbRBH1\niAWuZIuP9H+0MwJxJ4LuZoyWNHC/RxQrne+nlCvNc9CMHhKsWx0eYAJglogqrc0X\nRaP1YobNd2LOcOSynnzYw8uVehs427cIKNz0EO05BYens5TQvfLVTjXdOZfM6ayC\n9YnuIuj0ZB/q0yH9ZnOgXwILyWxNB7F9pQUF5h9vHufQDkDlO54=\n=+8CD\n-----END PGP SIGNATURE-----", "payload": "tree 981d391ca169cbf67f886f56f79c5dd55887d0b2\nparent 519f92f2aa7f2ec6833c57460283784a5077f73e\nauthor kennytm <kennytm@gmail.com> 1512594408 +0800\ncommitter kennytm <kennytm@gmail.com> 1514304045 +0800\n\nRevert \"Add a file to trivially disable tool building or testing\"\n\nThis reverts commit ab018c76e14b87f3c9e0b7384cc9b02d94779cd5.\n\nThis also adds the `ToolBuild::is_ext_tool` field to replace the previous\n`ToolBuild::expectation` field, to indicate whether a build-failure of\ncertain tool is essential.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2566fa25c7fefbd61e4251bda4407747a3023891", "html_url": "https://github.com/rust-lang/rust/commit/2566fa25c7fefbd61e4251bda4407747a3023891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2566fa25c7fefbd61e4251bda4407747a3023891/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519f92f2aa7f2ec6833c57460283784a5077f73e", "url": "https://api.github.com/repos/rust-lang/rust/commits/519f92f2aa7f2ec6833c57460283784a5077f73e", "html_url": "https://github.com/rust-lang/rust/commit/519f92f2aa7f2ec6833c57460283784a5077f73e"}], "stats": {"total": 288, "additions": 56, "deletions": 232}, "files": [{"sha": "79a6a39d54697bbb23620ba9cb771adfe85576d9", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -23,7 +23,7 @@ use std::path::{PathBuf, Path};\n use std::process::Command;\n use std::io::Read;\n \n-use build_helper::{self, output, BuildExpectation};\n+use build_helper::{self, output};\n \n use builder::{Kind, RunConfig, ShouldRun, Builder, Compiler, Step};\n use cache::{INTERNER, Interned};\n@@ -65,23 +65,19 @@ impl fmt::Display for TestKind {\n     }\n }\n \n-fn try_run_expecting(build: &Build, cmd: &mut Command, expect: BuildExpectation) -> bool {\n+fn try_run(build: &Build, cmd: &mut Command) -> bool {\n     if !build.fail_fast {\n-        if !build.try_run(cmd, expect) {\n+        if !build.try_run(cmd) {\n             let mut failures = build.delayed_failures.borrow_mut();\n             failures.push(format!(\"{:?}\", cmd));\n             return false;\n         }\n     } else {\n-        build.run_expecting(cmd, expect);\n+        build.run(cmd);\n     }\n     true\n }\n \n-fn try_run(build: &Build, cmd: &mut Command) {\n-    try_run_expecting(build, cmd, BuildExpectation::None);\n-}\n-\n fn try_run_quiet(build: &Build, cmd: &mut Command) {\n     if !build.fail_fast {\n         if !build.try_run_quiet(cmd) {\n@@ -259,11 +255,7 @@ impl Step for Rls {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        if try_run_expecting(\n-            build,\n-            &mut cargo,\n-            builder.build.config.toolstate.rls.passes(ToolState::Testing),\n-        ) {\n+        if try_run(build, &mut cargo) {\n             build.save_toolstate(\"rls\", ToolState::Testing);\n         }\n     }\n@@ -309,11 +301,7 @@ impl Step for Rustfmt {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        if try_run_expecting(\n-            build,\n-            &mut cargo,\n-            builder.build.config.toolstate.rustfmt.passes(ToolState::Testing),\n-        ) {\n+        if try_run(build, &mut cargo) {\n             build.save_toolstate(\"rustfmt\", ToolState::Testing);\n         }\n     }\n@@ -363,11 +351,7 @@ impl Step for Miri {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run_expecting(\n-                build,\n-                &mut cargo,\n-                builder.build.config.toolstate.miri.passes(ToolState::Testing),\n-            ) {\n+            if try_run(build, &mut cargo) {\n                 build.save_toolstate(\"miri\", ToolState::Testing);\n             }\n         } else {\n@@ -422,11 +406,7 @@ impl Step for Clippy {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run_expecting(\n-                build,\n-                &mut cargo,\n-                builder.build.config.toolstate.clippy.passes(ToolState::Testing),\n-            ) {\n+            if try_run(build, &mut cargo) {\n                 build.save_toolstate(\"clippy-driver\", ToolState::Testing);\n             }\n         } else {"}, {"sha": "f3ffe9a276111efc2e6beac1e5a18175e81f148c", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -27,7 +27,6 @@ use util::exe;\n use cache::{INTERNER, Interned};\n use flags::Flags;\n pub use flags::Subcommand;\n-use toolstate::ToolStates;\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -134,8 +133,6 @@ pub struct Config {\n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n-\n-    pub toolstate: ToolStates,\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -348,18 +345,6 @@ impl Config {\n             }\n         }).unwrap_or_else(|| TomlConfig::default());\n \n-        let toolstate_toml_path = config.src.join(\"src/tools/toolstate.toml\");\n-        let parse_toolstate = || -> Result<_, Box<::std::error::Error>> {\n-            let mut f = File::open(toolstate_toml_path)?;\n-            let mut contents = String::new();\n-            f.read_to_string(&mut contents)?;\n-            Ok(toml::from_str(&contents)?)\n-        };\n-        config.toolstate = parse_toolstate().unwrap_or_else(|err| {\n-            println!(\"failed to parse TOML configuration 'toolstate.toml': {}\", err);\n-            process::exit(2);\n-        });\n-\n         let build = toml.build.clone().unwrap_or(Build::default());\n         set(&mut config.build, build.build.clone().map(|x| INTERNER.intern_string(x)));\n         set(&mut config.build, flags.build);"}, {"sha": "3d2795f04e27cc12ffaff6065a84c43d26b96b13", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -1077,11 +1077,6 @@ impl Step for Rls {\n         let target = self.target;\n         assert!(build.config.extended);\n \n-        if !builder.config.toolstate.rls.testing() {\n-            println!(\"skipping Dist RLS stage{} ({})\", stage, target);\n-            return None\n-        }\n-\n         println!(\"Dist RLS stage{} ({})\", stage, target);\n         let src = build.src.join(\"src/tools/rls\");\n         let release_num = build.release_num(\"rls\");\n@@ -1164,11 +1159,6 @@ impl Step for Rustfmt {\n         let target = self.target;\n         assert!(build.config.extended);\n \n-        if !builder.config.toolstate.rustfmt.testing() {\n-            println!(\"skipping Dist Rustfmt stage{} ({})\", stage, target);\n-            return None\n-        }\n-\n         println!(\"Dist Rustfmt stage{} ({})\", stage, target);\n         let src = build.src.join(\"src/tools/rustfmt\");\n         let release_num = build.release_num(\"rustfmt\");"}, {"sha": "d6dc44034a70836da579c128c5de6c44feb15e33", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -143,8 +143,7 @@ use std::path::{PathBuf, Path};\n use std::process::{self, Command};\n use std::slice;\n \n-use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime,\n-                   BuildExpectation};\n+use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n \n use util::{exe, libdir, OutputFolder, CiEnv};\n \n@@ -569,39 +568,32 @@ impl Build {\n             .join(libdir(&self.config.build))\n     }\n \n-    /// Runs a command, printing out nice contextual information if its build\n-    /// status is not the expected one\n-    fn run_expecting(&self, cmd: &mut Command, expect: BuildExpectation) {\n-        self.verbose(&format!(\"running: {:?}\", cmd));\n-        run_silent(cmd, expect)\n-    }\n-\n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run(&self, cmd: &mut Command) {\n-        self.run_expecting(cmd, BuildExpectation::None)\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        run_silent(cmd)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run_quiet(&self, cmd: &mut Command) {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        run_suppressed(cmd, BuildExpectation::None)\n+        run_suppressed(cmd)\n     }\n \n-    /// Runs a command, printing out nice contextual information if its build\n-    /// status is not the expected one.\n-    /// Exits if the command failed to execute at all, otherwise returns whether\n-    /// the expectation was met\n-    fn try_run(&self, cmd: &mut Command, expect: BuildExpectation) -> bool {\n+    /// Runs a command, printing out nice contextual information if it fails.\n+    /// Exits if the command failed to execute at all, otherwise returns its\n+    /// `status.success()`.\n+    fn try_run(&self, cmd: &mut Command) -> bool {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run_silent(cmd, expect)\n+        try_run_silent(cmd)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     /// Exits if the command failed to execute at all, otherwise returns its\n     /// `status.success()`.\n     fn try_run_quiet(&self, cmd: &mut Command) -> bool {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run_suppressed(cmd, BuildExpectation::None)\n+        try_run_suppressed(cmd)\n     }\n \n     pub fn is_verbose(&self) -> bool {"}, {"sha": "16e8b025b0869cb7dc287f98afefafcd6cea6d10", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -22,7 +22,6 @@ use native;\n use channel::GitInfo;\n use cache::Interned;\n use toolstate::ToolState;\n-use build_helper::BuildExpectation;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct CleanTools {\n@@ -82,7 +81,7 @@ struct ToolBuild {\n     tool: &'static str,\n     path: &'static str,\n     mode: Mode,\n-    expectation: BuildExpectation,\n+    is_ext_tool: bool,\n }\n \n impl Step for ToolBuild {\n@@ -102,7 +101,7 @@ impl Step for ToolBuild {\n         let target = self.target;\n         let tool = self.tool;\n         let path = self.path;\n-        let expectation = self.expectation;\n+        let is_ext_tool = self.is_ext_tool;\n \n         match self.mode {\n             Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n@@ -115,34 +114,25 @@ impl Step for ToolBuild {\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n-        let is_expected = build.try_run(&mut cargo, expectation);\n-        // If the expectation is \"Failing\", `try_run` returning true actually\n-        // means a build-failure is successfully observed, i.e. the tool is\n-        // broken. Thus the XOR here.\n-        // Sorry for the complicated logic, but we can remove this expectation\n-        // logic after #45861 is fully fixed.\n-        build.save_toolstate(tool, if is_expected ^ (expectation == BuildExpectation::Failing) {\n+        let is_expected = build.try_run(&mut cargo);\n+        build.save_toolstate(tool, if is_expected {\n             ToolState::Compiling\n         } else {\n             ToolState::Broken\n         });\n \n         if !is_expected {\n-            if expectation == BuildExpectation::None {\n+            if !is_ext_tool {\n                 exit(1);\n             } else {\n                 return None;\n             }\n-        }\n-\n-        if expectation == BuildExpectation::Succeeding || expectation == BuildExpectation::None {\n+        } else {\n             let cargo_out = build.cargo_out(compiler, Mode::Tool, target)\n                 .join(exe(tool, &compiler.host));\n             let bin = build.tools_dir(compiler).join(exe(tool, &compiler.host));\n             copy(&cargo_out, &bin);\n             Some(bin)\n-        } else {\n-            None\n         }\n     }\n }\n@@ -251,8 +241,8 @@ macro_rules! tool {\n                     tool: $tool_name,\n                     mode: $mode,\n                     path: $path,\n-                    expectation: BuildExpectation::None,\n-                }).expect(\"expected to build -- BuildExpectation::None\")\n+                    is_ext_tool: false,\n+                }).expect(\"expected to build -- essential tool\")\n             }\n         }\n         )+\n@@ -299,8 +289,8 @@ impl Step for RemoteTestServer {\n             tool: \"remote-test-server\",\n             mode: Mode::Libstd,\n             path: \"src/tools/remote-test-server\",\n-            expectation: BuildExpectation::None,\n-        }).expect(\"expected to build -- BuildExpectation::None\")\n+            is_ext_tool: false,\n+        }).expect(\"expected to build -- essential tool\")\n     }\n }\n \n@@ -417,8 +407,8 @@ impl Step for Cargo {\n             tool: \"cargo\",\n             mode: Mode::Librustc,\n             path: \"src/tools/cargo\",\n-            expectation: BuildExpectation::None,\n-        }).expect(\"BuildExpectation::None - expected to build\")\n+            is_ext_tool: false,\n+        }).expect(\"expected to build -- essential tool\")\n     }\n }\n \n@@ -455,14 +445,13 @@ macro_rules! tool_extended {\n \n             fn run($sel, $builder: &Builder) -> Option<PathBuf> {\n                 $extra_deps\n-                let toolstate = $builder.build.config.toolstate.$toolstate;\n                 $builder.ensure(ToolBuild {\n                     compiler: $sel.compiler,\n                     target: $sel.target,\n                     tool: $tool_name,\n                     mode: Mode::Librustc,\n                     path: $path,\n-                    expectation: toolstate.passes(ToolState::Compiling),\n+                    is_ext_tool: true,\n                 })\n             }\n         }"}, {"sha": "3c490044e4e27a13ecc780b12584c932783f2b5e", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build_helper::BuildExpectation;\n-\n #[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, Eq)]\n /// Whether a tool can be compiled, tested or neither\n pub enum ToolState {\n@@ -21,38 +19,9 @@ pub enum ToolState {\n     Broken = 0,\n }\n \n-impl ToolState {\n-    /// If a tool with the current toolstate should be working on\n-    /// the given toolstate\n-    pub fn passes(self, other: ToolState) -> BuildExpectation {\n-        if self as usize >= other as usize {\n-            BuildExpectation::Succeeding\n-        } else {\n-            BuildExpectation::Failing\n-        }\n-    }\n-\n-    pub fn testing(&self) -> bool {\n-        match *self {\n-            ToolState::Testing => true,\n-            _ => false,\n-        }\n-    }\n-}\n-\n impl Default for ToolState {\n     fn default() -> Self {\n         // err on the safe side\n         ToolState::Broken\n     }\n }\n-\n-#[derive(Copy, Clone, Debug, Deserialize, Default)]\n-/// Used to express which tools should (not) be compiled or tested.\n-/// This is created from `toolstate.toml`.\n-pub struct ToolStates {\n-    pub miri: ToolState,\n-    pub clippy: ToolState,\n-    pub rls: ToolState,\n-    pub rustfmt: ToolState,\n-}"}, {"sha": "363bbd795442251c295a45cbfcfa998c4966bb1f", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 19, "deletions": 61, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -35,97 +35,55 @@ macro_rules! t {\n     })\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub enum BuildExpectation {\n-    Succeeding,\n-    Failing,\n-    None,\n-}\n-\n-pub fn run(cmd: &mut Command, expect: BuildExpectation) {\n+pub fn run(cmd: &mut Command) {\n     println!(\"running: {:?}\", cmd);\n-    run_silent(cmd, expect);\n+    run_silent(cmd);\n }\n \n-pub fn run_silent(cmd: &mut Command, expect: BuildExpectation) {\n-    if !try_run_silent(cmd, expect) {\n+pub fn run_silent(cmd: &mut Command) {\n+    if !try_run_silent(cmd) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run_silent(cmd: &mut Command, expect: BuildExpectation) -> bool {\n+pub fn try_run_silent(cmd: &mut Command) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n-    process_status(\n-        cmd,\n-        status.success(),\n-        expect,\n-        || println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-                    expected success, got: {}\\n\\n\",\n-                    cmd,\n-                    status))\n-}\n-\n-fn process_status<F: FnOnce()>(\n-    cmd: &Command,\n-    success: bool,\n-    expect: BuildExpectation,\n-    f: F,\n-) -> bool {\n-    use BuildExpectation::*;\n-    match (expect, success) {\n-        (None, false) => { f(); false },\n-        // Non-tool build succeeds, everything is good\n-        (None, true) => true,\n-        // Tool expected to work and is working\n-        (Succeeding, true) => true,\n-        // Tool expected to fail and is failing\n-        (Failing, false) => {\n-            println!(\"This failure is expected (see `src/tools/toolstate.toml`)\");\n-            true\n-        },\n-        // Tool expected to work, but is failing\n-        (Succeeding, false) => {\n-            f();\n-            println!(\"You can disable the tool in `src/tools/toolstate.toml`\");\n-            false\n-        },\n-        // Tool expected to fail, but is working\n-        (Failing, true) => {\n-            println!(\"Expected `{:?}` to fail, but it succeeded.\\n\\\n-                     Please adjust `src/tools/toolstate.toml` accordingly\", cmd);\n-            false\n-        }\n+    if !status.success() {\n+        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+                  expected success, got: {}\\n\\n\",\n+                 cmd,\n+                 status);\n     }\n+    status.success()\n }\n \n-pub fn run_suppressed(cmd: &mut Command, expect: BuildExpectation) {\n-    if !try_run_suppressed(cmd, expect) {\n+pub fn run_suppressed(cmd: &mut Command) {\n+    if !try_run_suppressed(cmd) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run_suppressed(cmd: &mut Command, expect: BuildExpectation) -> bool {\n+pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n     let output = match cmd.output() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n-    process_status(\n-        cmd,\n-        output.status.success(),\n-        expect,\n-        || println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+    if !output.status.success() {\n+        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n                   expected success, got: {}\\n\\n\\\n                   stdout ----\\n{}\\n\\\n                   stderr ----\\n{}\\n\\n\",\n                  cmd,\n                  output.status,\n                  String::from_utf8_lossy(&output.stdout),\n-                 String::from_utf8_lossy(&output.stderr)))\n+                 String::from_utf8_lossy(&output.stderr));\n+    }\n+    output.status.success()\n }\n \n pub fn gnu_target(target: &str) -> String {"}, {"sha": "649cd6e8e85fb41b895b9c00222d2640eb545105", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -16,7 +16,7 @@ extern crate cc;\n use std::env;\n use std::path::PathBuf;\n use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate, BuildExpectation};\n+use build_helper::{run, native_lib_boilerplate};\n \n fn main() {\n     // FIXME: This is a hack to support building targets that don't\n@@ -113,7 +113,7 @@ fn main() {\n         cmd.arg(\"--with-lg-quantum=4\");\n     }\n \n-    run(&mut cmd, BuildExpectation::None);\n+    run(&mut cmd);\n \n     let mut make = Command::new(build_helper::make(&host));\n     make.current_dir(&native.out_dir)\n@@ -130,7 +130,7 @@ fn main() {\n             .arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\"));\n     }\n \n-    run(&mut make, BuildExpectation::None);\n+    run(&mut make);\n \n     // The pthread_atfork symbols is used by jemalloc on android but the really\n     // old android we're building on doesn't have them defined, so just make"}, {"sha": "8a28105ff81e1e20f16b2ec9ac5daf4195d9bbd0", "filename": "src/libstd/build.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2566fa25c7fefbd61e4251bda4407747a3023891/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=2566fa25c7fefbd61e4251bda4407747a3023891", "patch": "@@ -14,7 +14,7 @@ extern crate build_helper;\n \n use std::env;\n use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate, BuildExpectation};\n+use build_helper::{run, native_lib_boilerplate};\n \n fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n@@ -91,14 +91,11 @@ fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n                 .arg(\"--disable-host-shared\")\n                 .arg(format!(\"--host={}\", build_helper::gnu_target(target)))\n                 .arg(format!(\"--build={}\", build_helper::gnu_target(host)))\n-                .env(\"CFLAGS\", env::var(\"CFLAGS\").unwrap_or_default() + \" -fvisibility=hidden\"),\n-        BuildExpectation::None);\n+                .env(\"CFLAGS\", env::var(\"CFLAGS\").unwrap_or_default() + \" -fvisibility=hidden\"));\n \n     run(Command::new(build_helper::make(host))\n                 .current_dir(&native.out_dir)\n                 .arg(format!(\"INCDIR={}\", native.src_dir.display()))\n-                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")),\n-        BuildExpectation::None);\n-\n+                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n     Ok(())\n }"}, {"sha": "6901343e367a71ee984dd91c74f8848e3bcb94e0", "filename": "src/tools/toolstate.toml", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/519f92f2aa7f2ec6833c57460283784a5077f73e/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/519f92f2aa7f2ec6833c57460283784a5077f73e/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=519f92f2aa7f2ec6833c57460283784a5077f73e", "patch": "@@ -1,36 +0,0 @@\n-# This file reflects the current status of all tools which are allowed\n-# to fail without failing the build.\n-#\n-# There are three states a tool can be in:\n-# 1. Broken: The tool doesn't build\n-# 2. Compiling: The tool builds but its tests are failing\n-# 3. Testing: The tool builds and its tests are passing\n-#\n-# In the future there will be further states like \"Distributing\", which\n-# configures whether the tool is included in the Rust distribution.\n-#\n-# If a tool was working before your PR but is broken now, consider\n-# opening a PR against the tool so that it works with your changes.\n-# If the tool stops compiling, change its state to `Broken`. If it\n-# still builds, change it to `Compiling`.\n-# How to do that is described in\n-# \"CONTRIBUTING.md#External Dependencies\". If the effort required is not\n-# warranted (e.g. due to the tool abusing some API that you changed, and\n-# fixing the tool would mean a significant refactoring) remember to ping\n-# the tool authors, so they can fix it, instead of being surprised by the\n-# breakage.\n-#\n-# Each tool has a list of people to ping\n-\n-# ping @oli-obk @RalfJung @eddyb\n-miri = \"Broken\"\n-\n-# ping @Manishearth @llogiq @mcarton @oli-obk\n-clippy = \"Broken\"\n-\n-# ping @nrc\n-rls = \"Broken\"\n-\n-# ping @nrc\n-# when breaking rustfmt, always break rls as well\n-rustfmt = \"Broken\""}]}