{"sha": "fc150d17b5e705132f0f70595dfc213aa6b564d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMTUwZDE3YjVlNzA1MTMyZjBmNzA1OTVkZmMyMTNhYTZiNTY0ZDM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-02-15T19:52:28Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-02-15T19:52:28Z"}, "message": "Expand FlattenCompat folds\n\nThe former `chain`+`chain`+`fold` implementation looked nice from a\nfunctional-programming perspective, but it introduced unnecessary layers\nof abstraction on every `flat_map`/`flatten` fold. It's straightforward\nto just fold each part in turn, and this makes it look like a simplified\nversion of the existing `try_fold` implementation.\n\nFor the `iter::bench_flat_map*` benchmarks, I get a large improvement in\n`bench_flat_map_chain_sum`, from 1,598,473 ns/iter to 499,889 ns/iter,\nand the rest are unchanged.", "tree": {"sha": "1e6f35bfc79387eb078f1df0d359fc1701d7e4cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e6f35bfc79387eb078f1df0d359fc1701d7e4cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc150d17b5e705132f0f70595dfc213aa6b564d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc150d17b5e705132f0f70595dfc213aa6b564d3", "html_url": "https://github.com/rust-lang/rust/commit/fc150d17b5e705132f0f70595dfc213aa6b564d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc150d17b5e705132f0f70595dfc213aa6b564d3/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1206f950ffb76c76e1b74a19ae33c2b7d949454", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1206f950ffb76c76e1b74a19ae33c2b7d949454", "html_url": "https://github.com/rust-lang/rust/commit/d1206f950ffb76c76e1b74a19ae33c2b7d949454"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "0114d7af4f41018ce1ab8ca806304001773db1df", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fc150d17b5e705132f0f70595dfc213aa6b564d3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc150d17b5e705132f0f70595dfc213aa6b564d3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=fc150d17b5e705132f0f70595dfc213aa6b564d3", "patch": "@@ -325,22 +325,28 @@ where\n     }\n \n     #[inline]\n-    fn fold<Acc, Fold>(self, init: Acc, ref mut fold: Fold) -> Acc\n+    fn fold<Acc, Fold>(self, mut init: Acc, mut fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         #[inline]\n-        fn flatten<U: Iterator, Acc>(\n-            fold: &mut impl FnMut(Acc, U::Item) -> Acc,\n-        ) -> impl FnMut(Acc, U) -> Acc + '_ {\n-            move |acc, iter| iter.fold(acc, &mut *fold)\n+        fn flatten<T: IntoIterator, Acc>(\n+            fold: &mut impl FnMut(Acc, T::Item) -> Acc,\n+        ) -> impl FnMut(Acc, T) -> Acc + '_ {\n+            move |acc, x| x.into_iter().fold(acc, &mut *fold)\n         }\n \n-        self.frontiter\n-            .into_iter()\n-            .chain(self.iter.map(IntoIterator::into_iter))\n-            .chain(self.backiter)\n-            .fold(init, flatten(fold))\n+        if let Some(front) = self.frontiter {\n+            init = front.fold(init, &mut fold);\n+        }\n+\n+        init = self.iter.fold(init, flatten(&mut fold));\n+\n+        if let Some(back) = self.backiter {\n+            init = back.fold(init, &mut fold);\n+        }\n+\n+        init\n     }\n }\n \n@@ -411,21 +417,30 @@ where\n     }\n \n     #[inline]\n-    fn rfold<Acc, Fold>(self, init: Acc, ref mut fold: Fold) -> Acc\n+    fn rfold<Acc, Fold>(self, mut init: Acc, mut fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         #[inline]\n-        fn flatten<U: DoubleEndedIterator, Acc>(\n-            fold: &mut impl FnMut(Acc, U::Item) -> Acc,\n-        ) -> impl FnMut(Acc, U) -> Acc + '_ {\n-            move |acc, iter| iter.rfold(acc, &mut *fold)\n+        fn flatten<T: IntoIterator, Acc>(\n+            fold: &mut impl FnMut(Acc, T::Item) -> Acc,\n+        ) -> impl FnMut(Acc, T) -> Acc + '_\n+        where\n+            T::IntoIter: DoubleEndedIterator,\n+        {\n+            move |acc, x| x.into_iter().rfold(acc, &mut *fold)\n+        }\n+\n+        if let Some(back) = self.backiter {\n+            init = back.rfold(init, &mut fold);\n+        }\n+\n+        init = self.iter.rfold(init, flatten(&mut fold));\n+\n+        if let Some(front) = self.frontiter {\n+            init = front.rfold(init, &mut fold);\n         }\n \n-        self.frontiter\n-            .into_iter()\n-            .chain(self.iter.map(IntoIterator::into_iter))\n-            .chain(self.backiter)\n-            .rfold(init, flatten(fold))\n+        init\n     }\n }"}]}