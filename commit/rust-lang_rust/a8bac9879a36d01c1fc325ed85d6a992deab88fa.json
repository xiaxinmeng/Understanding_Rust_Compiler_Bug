{"sha": "a8bac9879a36d01c1fc325ed85d6a992deab88fa", "node_id": "C_kwDOAAsO6NoAKGE4YmFjOTg3OWEzNmQwMWMxZmMzMjVlZDg1ZDZhOTkyZGVhYjg4ZmE", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-16T22:47:33Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2022-01-25T22:55:22Z"}, "message": "Remove 1-tuple unreachable case", "tree": {"sha": "10c738a6d462cd84f054f5a53198111713e7ea8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c738a6d462cd84f054f5a53198111713e7ea8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8bac9879a36d01c1fc325ed85d6a992deab88fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8bac9879a36d01c1fc325ed85d6a992deab88fa", "html_url": "https://github.com/rust-lang/rust/commit/a8bac9879a36d01c1fc325ed85d6a992deab88fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8bac9879a36d01c1fc325ed85d6a992deab88fa/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a129a85144efb67bfd8f380a758ed6be41d3e29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a129a85144efb67bfd8f380a758ed6be41d3e29b", "html_url": "https://github.com/rust-lang/rust/commit/a129a85144efb67bfd8f380a758ed6be41d3e29b"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "d7022c27d3984d0fcdefb7d555e7f0fbaa52d20b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a8bac9879a36d01c1fc325ed85d6a992deab88fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8bac9879a36d01c1fc325ed85d6a992deab88fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=a8bac9879a36d01c1fc325ed85d6a992deab88fa", "patch": "@@ -28,9 +28,9 @@ use crate::structured_errors::StructuredDiagnostic;\n use std::iter;\n use std::slice;\n \n-enum FnArgsAsTuple<'hir> {\n-    Single(&'hir hir::Expr<'hir>),\n-    Multi { first: &'hir hir::Expr<'hir>, last: &'hir hir::Expr<'hir> },\n+struct FnArgsAsTuple<'hir> {\n+    first: &'hir hir::Expr<'hir>,\n+    last: &'hir hir::Expr<'hir>,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -432,23 +432,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     String::from(\"()\"),\n                     Applicability::MachineApplicable,\n                 );\n-            } else if let Some(tuple_fn_arg) = sugg_tuple_wrap_args {\n-                use FnArgsAsTuple::*;\n-\n-                let spans = match tuple_fn_arg {\n-                    Multi { first, last } => vec![\n+            } else if let Some(FnArgsAsTuple { first, last }) = sugg_tuple_wrap_args {\n+                err.multipart_suggestion(\n+                    \"use parentheses to construct a tuple\",\n+                    vec![\n                         (first.span.shrink_to_lo(), '('.to_string()),\n                         (last.span.shrink_to_hi(), ')'.to_string()),\n                     ],\n-                    Single(single) => vec![\n-                        (single.span.shrink_to_lo(), '('.to_string()),\n-                        (single.span.shrink_to_hi(), \",)\".to_string()),\n-                    ],\n-                };\n-\n-                err.multipart_suggestion(\n-                    \"use parentheses to construct a tuple\",\n-                    spans,\n                     Applicability::MachineApplicable,\n                 );\n             } else {\n@@ -519,8 +509,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if all_match {\n             match provided_args {\n                 [] => None,\n-                [single] => Some(FnArgsAsTuple::Single(single)),\n-                [first, .., last] => Some(FnArgsAsTuple::Multi { first, last }),\n+                [_] => unreachable!(\n+                    \"shouldn't reach here - need count mismatch between 1-tuple and 1-argument\"\n+                ),\n+                [first, .., last] => Some(FnArgsAsTuple { first, last }),\n             }\n         } else {\n             None"}, {"sha": "2c3ee5fcb803908fd7d50eba98ea1fc55ae16a95", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8bac9879a36d01c1fc325ed85d6a992deab88fa/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8bac9879a36d01c1fc325ed85d6a992deab88fa/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs?ref=a8bac9879a36d01c1fc325ed85d6a992deab88fa", "patch": "@@ -7,6 +7,9 @@ fn main() {\n     //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n     int_bool(1, 2);\n     //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+\n+    let _: Option<(i8,)> = Some();\n+    //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n }\n \n fn int_bool(_: (i32, bool)) {"}, {"sha": "a2ad602dbd47a0e65fa8eb1b6f69a7e9060f506e", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8bac9879a36d01c1fc325ed85d6a992deab88fa/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8bac9879a36d01c1fc325ed85d6a992deab88fa/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=a8bac9879a36d01c1fc325ed85d6a992deab88fa", "patch": "@@ -15,11 +15,19 @@ LL |     int_bool(1, 2);\n    |     expected 1 argument\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple-errors.rs:12:4\n+  --> $DIR/args-instead-of-tuple-errors.rs:15:4\n    |\n LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n \n-error: aborting due to 2 previous errors\n+error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n+  --> $DIR/args-instead-of-tuple-errors.rs:11:28\n+   |\n+LL |     let _: Option<(i8,)> = Some();\n+   |                            ^^^^-- supplied 0 arguments\n+   |                            |\n+   |                            expected 1 argument\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0061`."}]}