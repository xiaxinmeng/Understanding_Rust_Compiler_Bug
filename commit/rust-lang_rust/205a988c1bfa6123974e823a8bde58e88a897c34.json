{"sha": "205a988c1bfa6123974e823a8bde58e88a897c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNWE5ODhjMWJmYTYxMjM5NzRlODIzYThiZGU1OGU4OGE4OTdjMzQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T07:40:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T07:40:01Z"}, "message": "improve rustdoc rendering", "tree": {"sha": "6dae9f669cb1a7d3747dd2f5871624f93b850038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dae9f669cb1a7d3747dd2f5871624f93b850038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/205a988c1bfa6123974e823a8bde58e88a897c34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXa5JRAAoJEFbW7qD8Z6xGP5oQAIN64r0Gr7YXvqmd3CO9GVWv\nxFLW01vWHaemQquxzLpRxewH9pHncvPkXzp3YbSW2rSuur9JxWQ2Xth0bEb72yvf\nkH/grgcPOuOnSguUtzx7UAGrJv78kPL1VJ2l7/svrIEJQnbQua0kkB9gxi76VX6N\nfZtLw7wW3Rr/G+97OaKekdmbq3r8kQp6VslKZzNADlo8hJnB7mj839Gd0IcDFUlN\nUEH6eIlCkgTff4PUvEYxCq0MPnFEfIkGjpqAp8BgLydrZJ7HA9bhYhqPQ35XE/2m\nteJDKvnm6tSx9Uv1A9Z2peu3eFXnVJbiKbiPKOA/PrJRK2UHtRBpU114hfe0cjnx\nvmhIW0YA2M7RXYGBgB9nQ+ouibQ9aQJMUEAn0KY8RinEOI3sCw7iOj9x/4mhjuuC\nCICpbWV+pJVp8OcR9CbqftBsAacsoV4+nVVDK6IGb8nTSy432p4SegE1vZMAacCl\n4DCQaaC0mCbhzlGqWNg8NStkhJ2ETG2CPI38wol4u6xmMND4cedWzPu99CjiXbVz\neX7cVl4ff8qgtVmPSMGskHnnZg2zBPXBT0byUuogbkTnvoIE/8+ZwXrtWv1LfmeJ\nUKb790ymJOkgxmtWFXYs4xQhebG27aU0x5+195uWFCvQ8aVTltNWq5OKyMQLtgXa\nshABhgSjh8MZ6P1QsW7N\n=XxYj\n-----END PGP SIGNATURE-----", "payload": "tree 6dae9f669cb1a7d3747dd2f5871624f93b850038\nparent 055b6a8d3824b9a97f601346b8aa051fd6f827ec\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466667601 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466667601 +0200\n\nimprove rustdoc rendering"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/205a988c1bfa6123974e823a8bde58e88a897c34", "html_url": "https://github.com/rust-lang/rust/commit/205a988c1bfa6123974e823a8bde58e88a897c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/205a988c1bfa6123974e823a8bde58e88a897c34/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "055b6a8d3824b9a97f601346b8aa051fd6f827ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/055b6a8d3824b9a97f601346b8aa051fd6f827ec", "html_url": "https://github.com/rust-lang/rust/commit/055b6a8d3824b9a97f601346b8aa051fd6f827ec"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "acf2b20b965a77cbe51d8f3bfc67262599d752a9", "filename": "src/memory.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/205a988c1bfa6123974e823a8bde58e88a897c34/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205a988c1bfa6123974e823a8bde58e88a897c34/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=205a988c1bfa6123974e823a8bde58e88a897c34", "patch": "@@ -155,11 +155,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n         Ok(())\n     }\n+}\n \n-    ////////////////////////////////////////////////////////////////////////////////\n-    // Allocation accessors\n-    ////////////////////////////////////////////////////////////////////////////////\n-\n+/// Allocation accessors\n+impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn get(&self, id: AllocId) -> EvalResult<'tcx, &Allocation> {\n         match self.alloc_map.get(&id) {\n             Some(alloc) => Ok(alloc),\n@@ -245,11 +244,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             }\n         }\n     }\n+}\n \n-    ////////////////////////////////////////////////////////////////////////////////\n-    // Byte accessors\n-    ////////////////////////////////////////////////////////////////////////////////\n-\n+/// Byte accessors\n+impl<'a, 'tcx> Memory<'a, 'tcx> {\n     fn get_bytes_unchecked(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, &[u8]> {\n         let alloc = self.get(ptr.alloc_id)?;\n         if ptr.offset + size > alloc.bytes.len() {\n@@ -287,11 +285,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         self.mark_definedness(ptr, size, true)?;\n         self.get_bytes_unchecked_mut(ptr, size)\n     }\n+}\n \n-    ////////////////////////////////////////////////////////////////////////////////\n-    // Reading and writing\n-    ////////////////////////////////////////////////////////////////////////////////\n-\n+/// Reading and writing\n+impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn copy(&mut self, src: Pointer, dest: Pointer, size: usize) -> EvalResult<'tcx, ()> {\n         self.check_relocation_edges(src, size)?;\n \n@@ -422,11 +419,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let size = self.pointer_size;\n         self.write_uint(ptr, n, size)\n     }\n+}\n \n-    ////////////////////////////////////////////////////////////////////////////////\n-    // Relocations\n-    ////////////////////////////////////////////////////////////////////////////////\n-\n+/// Relocations\n+impl<'a, 'tcx> Memory<'a, 'tcx> {\n     fn relocations(&self, ptr: Pointer, size: usize)\n         -> EvalResult<'tcx, btree_map::Range<usize, AllocId>>\n     {\n@@ -478,11 +474,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         self.get_mut(dest.alloc_id)?.relocations.extend(relocations);\n         Ok(())\n     }\n+}\n \n-    ////////////////////////////////////////////////////////////////////////////////\n-    // Undefined bytes\n-    ////////////////////////////////////////////////////////////////////////////////\n-\n+/// Undefined bytes\n+impl<'a, 'tcx> Memory<'a, 'tcx> {\n     // FIXME(solson): This is a very naive, slow version.\n     fn copy_undef_mask(&mut self, src: Pointer, dest: Pointer, size: usize) -> EvalResult<'tcx, ()> {\n         // The bits have to be saved locally before writing to dest in case src and dest overlap."}]}