{"sha": "ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMzFiMWQ2M2FlOTFhNjlmMWNlOWMwYjA3NTQwMzgzNGJhMTlmMzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-28T22:37:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-28T22:37:25Z"}, "message": "Merge #5105\n\n5105: Simlify with matches!() r=matklad a=Veetaha\n\n\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "df719c1ccd7cbd174b79ca50ffd0052731d1ea86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df719c1ccd7cbd174b79ca50ffd0052731d1ea86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+RulCRBK7hj4Ov3rIwAAdHIIAISrbEnrdnp0LGZEYJvfCp6t\nt6vGhoktWoSBTp5GCXeKoh1cxUsHRffyHl4T884DthZJUl6qeCefPBki3ss5LmOf\nwzAd9jbqddhzrovR8lhIoXXrIYqAf2XibkC9ehtuu1ZQZ6QQB6sRuNKBMT6sisRC\nRg7mpsbzl2s7gvbQAbKMAOFgopv48YzChYL+o+NYGp36dAaC5H0d3wXk8tTUhupZ\nSlle+swXDzjiXbP7Vk7LxRFgZzObVMMH08sUxS5Buh2I5FRA4RMaH0drO476d0zB\nyPF6aHl1i74xZWFvCcOlqmbllUCAJ7hiolsum/cn5Ld0PzukV6jCgUlRjqS0aew=\n=ZSqS\n-----END PGP SIGNATURE-----\n", "payload": "tree df719c1ccd7cbd174b79ca50ffd0052731d1ea86\nparent 11f31ae4c3a38831609e4591e751ce10c4e38daf\nparent 36128c170d9d938cfcc52bc851aaed1fab6a2ad9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593383845 +0000\ncommitter GitHub <noreply@github.com> 1593383845 +0000\n\nMerge #5105\n\n5105: Simlify with matches!() r=matklad a=Veetaha\n\n\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "html_url": "https://github.com/rust-lang/rust/commit/ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f31ae4c3a38831609e4591e751ce10c4e38daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f31ae4c3a38831609e4591e751ce10c4e38daf", "html_url": "https://github.com/rust-lang/rust/commit/11f31ae4c3a38831609e4591e751ce10c4e38daf"}, {"sha": "36128c170d9d938cfcc52bc851aaed1fab6a2ad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/36128c170d9d938cfcc52bc851aaed1fab6a2ad9", "html_url": "https://github.com/rust-lang/rust/commit/36128c170d9d938cfcc52bc851aaed1fab6a2ad9"}], "stats": {"total": 163, "additions": 44, "deletions": 119}, "files": [{"sha": "157c7b6654afb9ac86417ca5b48b58e5b08fe2b7", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -1,15 +1,12 @@\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n-    SyntaxKind::{\n-        ATTR, COMMENT, CONST_DEF, ENUM_DEF, FN_DEF, MODULE, STRUCT_DEF, TRAIT_DEF, VISIBILITY,\n-        WHITESPACE,\n-    },\n-    SyntaxNode, TextSize, T,\n+    SyntaxKind::{CONST_DEF, ENUM_DEF, FN_DEF, MODULE, STRUCT_DEF, TRAIT_DEF, VISIBILITY},\n+    T,\n };\n use test_utils::mark;\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{utils::vis_offset, AssistContext, AssistId, Assists};\n \n // Assist: change_visibility\n //\n@@ -30,9 +27,8 @@ pub(crate) fn change_visibility(acc: &mut Assists, ctx: &AssistContext) -> Optio\n }\n \n fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let item_keyword = ctx.token_at_offset().find(|leaf| match leaf.kind() {\n-        T![const] | T![fn] | T![mod] | T![struct] | T![enum] | T![trait] => true,\n-        _ => false,\n+    let item_keyword = ctx.token_at_offset().find(|leaf| {\n+        matches!(leaf.kind(), T![const] | T![fn] | T![mod] | T![struct] | T![enum] | T![trait])\n     });\n \n     let (offset, target) = if let Some(keyword) = item_keyword {\n@@ -71,17 +67,6 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     })\n }\n \n-fn vis_offset(node: &SyntaxNode) -> TextSize {\n-    node.children_with_tokens()\n-        .skip_while(|it| match it.kind() {\n-            WHITESPACE | COMMENT | ATTR => true,\n-            _ => false,\n-        })\n-        .next()\n-        .map(|it| it.text_range().start())\n-        .unwrap_or_else(|| node.text_range().start())\n-}\n-\n fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n     if vis.syntax().text() == \"pub\" {\n         let target = vis.syntax().text_range();"}, {"sha": "19d4dac5e1c704729342f1b54db29fc7922f3dca", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -1,12 +1,8 @@\n use hir::{db::HirDatabase, HasSource, HasVisibility, PathResolution};\n use ra_db::FileId;\n-use ra_syntax::{\n-    ast, AstNode,\n-    SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n-    SyntaxNode, TextRange, TextSize,\n-};\n+use ra_syntax::{ast, AstNode, TextRange, TextSize};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{utils::vis_offset, AssistContext, AssistId, Assists};\n \n // FIXME: this really should be a fix for diagnostic, rather than an assist.\n \n@@ -177,17 +173,6 @@ fn target_data_for_def(\n     Some((offset, target, target_file, target_name))\n }\n \n-fn vis_offset(node: &SyntaxNode) -> TextSize {\n-    node.children_with_tokens()\n-        .skip_while(|it| match it.kind() {\n-            WHITESPACE | COMMENT | ATTR => true,\n-            _ => false,\n-        })\n-        .next()\n-        .map(|it| it.text_range().start())\n-        .unwrap_or_else(|| node.text_range().start())\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};"}, {"sha": "90ce66378f26dc0caa31aa602f802e908182b0cf", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -81,10 +81,7 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n }\n \n fn contains_placeholder(a: &ast::MatchArm) -> bool {\n-    match a.pat() {\n-        Some(ra_syntax::ast::Pat::PlaceholderPat(..)) => true,\n-        _ => false,\n-    }\n+    matches!(a.pat(), Some(ast::Pat::PlaceholderPat(..)))\n }\n \n #[cfg(test)]"}, {"sha": "02de902d6ed4f1b1459ccbd3fef73964477d43ba", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -7,7 +7,9 @@ use hir::{Adt, Crate, Enum, ScopeDef, Semantics, Trait, Type};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, make, NameOwner},\n-    AstNode, SyntaxNode, T,\n+    AstNode,\n+    SyntaxKind::*,\n+    SyntaxNode, TextSize, T,\n };\n use rustc_hash::FxHashSet;\n \n@@ -120,6 +122,13 @@ pub(crate) fn resolve_target_trait(\n     }\n }\n \n+pub(crate) fn vis_offset(node: &SyntaxNode) -> TextSize {\n+    node.children_with_tokens()\n+        .find(|it| !matches!(it.kind(), WHITESPACE | COMMENT | ATTR))\n+        .map(|it| it.text_range().start())\n+        .unwrap_or_else(|| node.text_range().start())\n+}\n+\n pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n     if let Some(expr) = invert_special_case(&expr) {\n         return expr;"}, {"sha": "22884522a84849c28af1de2787167f00cfc9a4cf", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -785,11 +785,7 @@ impl<'a> InferenceContext<'a> {\n         for &check_closures in &[false, true] {\n             let param_iter = param_tys.iter().cloned().chain(repeat(Ty::Unknown));\n             for (&arg, param_ty) in args.iter().zip(param_iter) {\n-                let is_closure = match &self.body[arg] {\n-                    Expr::Lambda { .. } => true,\n-                    _ => false,\n-                };\n-\n+                let is_closure = matches!(&self.body[arg], Expr::Lambda { .. });\n                 if is_closure != check_closures {\n                     continue;\n                 }"}, {"sha": "c9513b752abf33c381272537ecb407f3b10577b1", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -620,17 +620,11 @@ pub enum GenericPredicate {\n \n impl GenericPredicate {\n     pub fn is_error(&self) -> bool {\n-        match self {\n-            GenericPredicate::Error => true,\n-            _ => false,\n-        }\n+        matches!(self, GenericPredicate::Error)\n     }\n \n     pub fn is_implemented(&self) -> bool {\n-        match self {\n-            GenericPredicate::Implemented(_) => true,\n-            _ => false,\n-        }\n+        matches!(self, GenericPredicate::Implemented(_))\n     }\n \n     pub fn trait_ref(&self, db: &dyn HirDatabase) -> Option<TraitRef> {"}, {"sha": "c8765255515f48abff49bda5b27a872e93ac0e54", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -313,10 +313,8 @@ fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n }\n \n fn is_obvious_param(param_name: &str) -> bool {\n-    let is_obvious_param_name = match param_name {\n-        \"predicate\" | \"value\" | \"pat\" | \"rhs\" | \"other\" => true,\n-        _ => false,\n-    };\n+    let is_obvious_param_name =\n+        matches!(param_name, \"predicate\" | \"value\" | \"pat\" | \"rhs\" | \"other\");\n     param_name.len() == 1 || is_obvious_param_name\n }\n "}, {"sha": "6907c09e80c1a8abfbc476719e47e53df0933599", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -165,10 +165,7 @@ fn join_single_use_tree(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Opti\n }\n \n fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n-    match (left, right) {\n-        (T![,], T![')']) | (T![,], T![']']) => true,\n-        _ => false,\n-    }\n+    matches!((left, right), (T![,], T![')']) | (T![,], T![']']))\n }\n \n #[cfg(test)]"}, {"sha": "5a09e7d1de7b241227db46971e16acb1b6a52cdc", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -346,10 +346,7 @@ impl Query {\n }\n \n fn is_type(kind: SyntaxKind) -> bool {\n-    match kind {\n-        STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => true,\n-        _ => false,\n-    }\n+    matches!(kind, STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF)\n }\n \n /// The actual data that is stored in the index. It should be as compact as"}, {"sha": "1e5dafbdf919cda08f4e30999d4fcbd4207d76f8", "filename": "crates/ra_mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fparser.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -137,10 +137,7 @@ fn eat_fragment_kind<'a>(\n }\n \n fn is_boolean_literal(lit: &tt::Literal) -> bool {\n-    match lit.text.as_str() {\n-        \"true\" | \"false\" => true,\n-        _ => false,\n-    }\n+    matches!(lit.text.as_str(), \"true\" | \"false\")\n }\n \n fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), ExpandError> {"}, {"sha": "caedeead0826900fe633ad2e0ed8e0e36993af1d", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -73,10 +73,7 @@ pub(crate) mod fragments {\n     // Parse a meta item , which excluded [], e.g : #[ MetaItem ]\n     pub(crate) fn meta_item(p: &mut Parser) {\n         fn is_delimiter(p: &mut Parser) -> bool {\n-            match p.current() {\n-                T!['{'] | T!['('] | T!['['] => true,\n-                _ => false,\n-            }\n+            matches!(p.current(), T!['{'] | T!['('] | T!['['])\n         }\n \n         if is_delimiter(p) {"}, {"sha": "b503af1dc9454c0a88b2f57b0c7c2938709f8fff", "filename": "crates/ra_parser/src/grammar/paths.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -41,10 +41,7 @@ fn path(p: &mut Parser, mode: Mode) {\n     path_segment(p, mode, true);\n     let mut qual = path.complete(p, PATH);\n     loop {\n-        let use_tree = match p.nth(2) {\n-            T![*] | T!['{'] => true,\n-            _ => false,\n-        };\n+        let use_tree = matches!(p.nth(2), T![*] | T!['{']);\n         if p.at(T![::]) && !use_tree {\n             let path = qual.precede(p);\n             p.bump(T![::]);"}, {"sha": "d1330d4b9595c284aff566be8c0892bcc3d8fca5", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -169,10 +169,7 @@ fn is_where_predicate(p: &mut Parser) -> bool {\n }\n \n fn is_where_clause_end(p: &mut Parser) -> bool {\n-    match p.current() {\n-        T!['{'] | T![;] | T![=] => true,\n-        _ => false,\n-    }\n+    matches!(p.current(), T!['{'] | T![;] | T![=])\n }\n \n fn where_predicate(p: &mut Parser) {"}, {"sha": "63204436c33e453d2b6aebc5cbbf2cdd4f3739ab", "filename": "crates/ra_parser/src/syntax_kind.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -20,9 +20,6 @@ impl From<SyntaxKind> for u16 {\n \n impl SyntaxKind {\n     pub fn is_trivia(self) -> bool {\n-        match self {\n-            SyntaxKind::WHITESPACE | SyntaxKind::COMMENT => true,\n-            _ => false,\n-        }\n+        matches!(self, SyntaxKind::WHITESPACE | SyntaxKind::COMMENT)\n     }\n }"}, {"sha": "db5438d687087a497a50b25eaee42d8759033a2a", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -399,10 +399,7 @@ impl ast::BlockExpr {\n             Some(it) => it,\n             None => return true,\n         };\n-        match parent.kind() {\n-            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | EFFECT_EXPR => false,\n-            _ => true,\n-        }\n+        !matches!(parent.kind(), FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | EFFECT_EXPR)\n     }\n }\n "}, {"sha": "662c6f73ee2ed442bbde7a2648b5ea2f2e0f9d94", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -459,16 +459,16 @@ impl ast::RangePat {\n \n impl ast::TokenTree {\n     pub fn left_delimiter_token(&self) -> Option<SyntaxToken> {\n-        self.syntax().first_child_or_token()?.into_token().filter(|it| match it.kind() {\n-            T!['{'] | T!['('] | T!['['] => true,\n-            _ => false,\n-        })\n+        self.syntax()\n+            .first_child_or_token()?\n+            .into_token()\n+            .filter(|it| matches!(it.kind(), T!['{'] | T!['('] | T!['[']))\n     }\n \n     pub fn right_delimiter_token(&self) -> Option<SyntaxToken> {\n-        self.syntax().last_child_or_token()?.into_token().filter(|it| match it.kind() {\n-            T!['}'] | T![')'] | T![']'] => true,\n-            _ => false,\n-        })\n+        self.syntax()\n+            .last_child_or_token()?\n+            .into_token()\n+            .filter(|it| matches!(it.kind(), T!['}'] | T![')'] | T![']']))\n     }\n }"}, {"sha": "ed5a42ea388dae2b53216b136a9853b16a392d5b", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -120,10 +120,7 @@ fn get_text_after_edit(element: SyntaxElement, edit: &Indel) -> String {\n }\n \n fn is_contextual_kw(text: &str) -> bool {\n-    match text {\n-        \"auto\" | \"default\" | \"union\" => true,\n-        _ => false,\n-    }\n+    matches!(text, \"auto\" | \"default\" | \"union\")\n }\n \n fn find_reparsable_node(node: &SyntaxNode, range: TextRange) -> Option<(SyntaxNode, Reparser)> {"}, {"sha": "02c771f70f7a9f2c79757f38095cb885eddf04de", "filename": "crates/ra_tt/src/buffer.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Fbuffer.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -105,10 +105,7 @@ impl<'a> Eq for Cursor<'a> {}\n impl<'a> Cursor<'a> {\n     /// Check whether it is eof\n     pub fn eof(self) -> bool {\n-        match self.buffer.entry(&self.ptr) {\n-            None | Some(Entry::End(None)) => true,\n-            _ => false,\n-        }\n+        matches!(self.buffer.entry(&self.ptr), None | Some(Entry::End(None)))\n     }\n \n     /// If the cursor is pointing at the end of a subtree, returns"}, {"sha": "c5faec83a985282e0653a74a6f880c4bd71c73e7", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -28,16 +28,10 @@ pub enum Verbosity {\n \n impl Verbosity {\n     pub fn is_verbose(self) -> bool {\n-        match self {\n-            Verbosity::Verbose | Verbosity::Spammy => true,\n-            _ => false,\n-        }\n+        matches!(self, Verbosity::Verbose | Verbosity::Spammy)\n     }\n     pub fn is_spammy(self) -> bool {\n-        match self {\n-            Verbosity::Spammy => true,\n-            _ => false,\n-        }\n+        matches!(self, Verbosity::Spammy)\n     }\n }\n "}, {"sha": "930375d3efbabdcdaff65dd2b5b16935ca68a01f", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca31b1d63ae91a69f1ce9c0b075403834ba19f38/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=ca31b1d63ae91a69f1ce9c0b075403834ba19f38", "patch": "@@ -78,10 +78,7 @@ pub fn analysis_bench(\n             }\n         }\n         BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => {\n-            let is_completion = match what {\n-                BenchWhat::Complete(..) => true,\n-                _ => false,\n-            };\n+            let is_completion = matches!(what, BenchWhat::Complete(..));\n \n             let offset = host\n                 .analysis()"}]}