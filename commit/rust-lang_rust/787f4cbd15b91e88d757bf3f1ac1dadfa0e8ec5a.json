{"sha": "787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a", "node_id": "C_kwDOAAsO6NoAKDc4N2Y0Y2JkMTViOTFlODhkNzU3YmYzZjFhYzFkYWRmYTBlOGVjNWE", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-12-17T22:36:51Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:30Z"}, "message": "Handle uninhabited return types\n\nThis changes drop range analysis to handle uninhabited return types such\nas `!`. Since these calls to these functions do not return, we model\nthem as ending in an infinite loop.", "tree": {"sha": "577c54a2e758f332557f895f136b0e031e03cbc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/577c54a2e758f332557f895f136b0e031e03cbc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a", "html_url": "https://github.com/rust-lang/rust/commit/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f730bd0dad555e2a5db4b0110b0888ca515f6fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f730bd0dad555e2a5db4b0110b0888ca515f6fef", "html_url": "https://github.com/rust-lang/rust/commit/f730bd0dad555e2a5db4b0110b0888ca515f6fef"}], "stats": {"total": 104, "additions": 64, "deletions": 40}, "files": [{"sha": "cf463d0aeaebda29997673cc3f0ae208bd739f01", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a", "patch": "@@ -36,8 +36,14 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n     let consumed_borrowed_places = find_consumed_and_borrowed(fcx, def_id, body);\n \n     let num_exprs = fcx.tcx.region_scope_tree(def_id).body_expr_count(body.id()).unwrap_or(0);\n-    let mut drop_ranges =\n-        build_control_flow_graph(fcx.tcx.hir(), consumed_borrowed_places, body, num_exprs);\n+    let mut drop_ranges = build_control_flow_graph(\n+        fcx.tcx.hir(),\n+        fcx.tcx,\n+        &fcx.typeck_results.borrow(),\n+        consumed_borrowed_places,\n+        body,\n+        num_exprs,\n+    );\n \n     drop_ranges.propagate_to_fixpoint();\n "}, {"sha": "1591b144dc62babd409cf56950475a2156baf9de", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a", "patch": "@@ -8,7 +8,10 @@ use hir::{\n };\n use rustc_hir as hir;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::{\n+    hir::map::Map,\n+    ty::{TyCtxt, TypeckResults},\n+};\n use std::mem::swap;\n \n /// Traverses the body to find the control flow graph and locations for the\n@@ -18,11 +21,14 @@ use std::mem::swap;\n /// can be done with propagate_to_fixpoint in cfg_propagate.\n pub(super) fn build_control_flow_graph<'tcx>(\n     hir: Map<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    typeck_results: &TypeckResults<'tcx>,\n     consumed_borrowed_places: ConsumedAndBorrowedPlaces,\n     body: &'tcx Body<'tcx>,\n     num_exprs: usize,\n ) -> DropRangesBuilder {\n-    let mut drop_range_visitor = DropRangeVisitor::new(hir, consumed_borrowed_places, num_exprs);\n+    let mut drop_range_visitor =\n+        DropRangeVisitor::new(hir, tcx, typeck_results, consumed_borrowed_places, num_exprs);\n     intravisit::walk_body(&mut drop_range_visitor, body);\n \n     drop_range_visitor.drop_ranges.process_deferred_edges();\n@@ -36,22 +42,30 @@ pub(super) fn build_control_flow_graph<'tcx>(\n /// We are interested in points where a variables is dropped or initialized, and the control flow\n /// of the code. We identify locations in code by their post-order traversal index, so it is\n /// important for this traversal to match that in `RegionResolutionVisitor` and `InteriorVisitor`.\n-struct DropRangeVisitor<'tcx> {\n+struct DropRangeVisitor<'a, 'tcx> {\n     hir: Map<'tcx>,\n     places: ConsumedAndBorrowedPlaces,\n     drop_ranges: DropRangesBuilder,\n     expr_index: PostOrderId,\n+    tcx: TyCtxt<'tcx>,\n+    typeck_results: &'a TypeckResults<'tcx>,\n }\n \n-impl<'tcx> DropRangeVisitor<'tcx> {\n-    fn new(hir: Map<'tcx>, places: ConsumedAndBorrowedPlaces, num_exprs: usize) -> Self {\n+impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n+    fn new(\n+        hir: Map<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n+        typeck_results: &'a TypeckResults<'tcx>,\n+        places: ConsumedAndBorrowedPlaces,\n+        num_exprs: usize,\n+    ) -> Self {\n         debug!(\"consumed_places: {:?}\", places.consumed);\n         let drop_ranges = DropRangesBuilder::new(\n             places.consumed.iter().flat_map(|(_, places)| places.iter().copied()),\n             hir,\n             num_exprs,\n         );\n-        Self { hir, places, drop_ranges, expr_index: PostOrderId::from_u32(0) }\n+        Self { hir, places, drop_ranges, expr_index: PostOrderId::from_u32(0), typeck_results, tcx }\n     }\n \n     fn record_drop(&mut self, hir_id: HirId) {\n@@ -91,9 +105,23 @@ impl<'tcx> DropRangeVisitor<'tcx> {\n             debug!(\"reinitializing {:?} is not supported\", expr);\n         }\n     }\n+\n+    /// For an expression with an uninhabited return type (e.g. a function that returns !),\n+    /// this adds a self edge to to the CFG to model the fact that the function does not\n+    /// return.\n+    fn handle_uninhabited_return(&mut self, expr: &Expr<'tcx>) {\n+        let ty = self.typeck_results.expr_ty(expr);\n+        let ty = self.tcx.erase_regions(ty);\n+        let m = self.tcx.parent_module(expr.hir_id).to_def_id();\n+        let param_env = self.tcx.param_env(m.expect_local());\n+        if self.tcx.is_ty_uninhabited_from(m, ty, param_env) {\n+            // This function will not return. We model this fact as an infinite loop.\n+            self.drop_ranges.add_control_edge(self.expr_index + 1, self.expr_index + 1);\n+        }\n+    }\n }\n \n-impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -109,6 +137,7 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n \n                 reinit = Some(lhs);\n             }\n+\n             ExprKind::If(test, if_true, if_false) => {\n                 self.visit_expr(test);\n \n@@ -155,6 +184,7 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n                     self.drop_ranges.add_control_edge(arm_end, self.expr_index + 1)\n                 });\n             }\n+\n             ExprKind::Loop(body, ..) => {\n                 let loop_begin = self.expr_index + 1;\n                 if body.stmts.is_empty() && body.expr.is_none() {\n@@ -172,14 +202,29 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n                 self.drop_ranges.add_control_edge_hir_id(self.expr_index, target);\n             }\n \n+            ExprKind::Call(f, args) => {\n+                self.visit_expr(f);\n+                for arg in args {\n+                    self.visit_expr(arg);\n+                }\n+\n+                self.handle_uninhabited_return(expr);\n+            }\n+            ExprKind::MethodCall(_, _, exprs, _) => {\n+                for expr in exprs {\n+                    self.visit_expr(expr);\n+                }\n+\n+                self.handle_uninhabited_return(expr);\n+            }\n+\n             ExprKind::AddrOf(..)\n             | ExprKind::Array(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Block(..)\n             | ExprKind::Box(..)\n             | ExprKind::Break(..)\n-            | ExprKind::Call(..)\n             | ExprKind::Cast(..)\n             | ExprKind::Closure(..)\n             | ExprKind::ConstBlock(..)\n@@ -192,7 +237,6 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n             | ExprKind::Let(..)\n             | ExprKind::Lit(..)\n             | ExprKind::LlvmInlineAsm(..)\n-            | ExprKind::MethodCall(..)\n             | ExprKind::Path(..)\n             | ExprKind::Repeat(..)\n             | ExprKind::Ret(..)"}, {"sha": "123cadc2cbb04053262b2638a193b259f5930cb9", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a", "patch": "@@ -36,7 +36,6 @@ async fn non_send_temporary_in_match() {\n }\n \n async fn non_sync_with_method_call() {\n-    // FIXME: it would be nice for this to work\n     let f: &mut std::fmt::Formatter = panic!();\n     if non_sync().fmt(f).unwrap() == () {\n         fut().await;\n@@ -57,6 +56,5 @@ pub fn pass_assert() {\n     assert_send(non_send_temporary_in_match());\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call());\n-    //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_infinite_loop());\n }"}, {"sha": "be42d46a9060e39fd9b532327aaa89f6823cc642", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=787f4cbd15b91e88d757bf3f1ac1dadfa0e8ec5a", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:57:17\n+  --> $DIR/async-fn-nonsend.rs:56:17\n    |\n LL |     assert_send(non_send_temporary_in_match());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n@@ -16,34 +16,10 @@ LL |         Some(_) => fut().await,\n LL | }\n    | - `Some(non_send())` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:53:24\n+  --> $DIR/async-fn-nonsend.rs:52:24\n    |\n LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`\n \n-error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:59:17\n-   |\n-LL |     assert_send(non_sync_with_method_call());\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n-   |\n-   = help: the trait `Send` is not implemented for `dyn std::fmt::Write`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:42:14\n-   |\n-LL |     let f: &mut std::fmt::Formatter = panic!();\n-   |         - has type `&mut Formatter<'_>` which is not `Send`\n-LL |     if non_sync().fmt(f).unwrap() == () {\n-LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `f` maybe used later\n-LL |     }\n-LL | }\n-   | - `f` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:53:24\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ^^^^ required by this bound in `assert_send`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}