{"sha": "29e690fe14bf6354c07c793c3af53d5242ec202d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTY5MGZlMTRiZjYzNTRjMDdjNzkzYzNhZjUzZDUyNDJlYzIwMmQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T09:36:02Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T09:36:02Z"}, "message": "Handle writing undefined PrimVals and mask properly.", "tree": {"sha": "201fbfd0375a2628349fed722164c0378a1bf42b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/201fbfd0375a2628349fed722164c0378a1bf42b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e690fe14bf6354c07c793c3af53d5242ec202d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e690fe14bf6354c07c793c3af53d5242ec202d", "html_url": "https://github.com/rust-lang/rust/commit/29e690fe14bf6354c07c793c3af53d5242ec202d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e690fe14bf6354c07c793c3af53d5242ec202d/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142d971c821717f37e2e45abbc556d1059745145", "url": "https://api.github.com/repos/rust-lang/rust/commits/142d971c821717f37e2e45abbc556d1059745145", "html_url": "https://github.com/rust-lang/rust/commit/142d971c821717f37e2e45abbc556d1059745145"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "90fbf04c73d415695ce22903b7ac318280860763", "filename": "src/memory.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/29e690fe14bf6354c07c793c3af53d5242ec202d/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e690fe14bf6354c07c793c3af53d5242ec202d/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=29e690fe14bf6354c07c793c3af53d5242ec202d", "patch": "@@ -587,21 +587,36 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         val: PrimVal,\n         kind: PrimValKind,\n     ) -> EvalResult<'tcx, ()> {\n-        if let Some(alloc_id) = val.relocation() {\n-            return self.write_ptr(dest, Pointer::new(alloc_id, val.bits()));\n-        }\n-\n         use value::PrimValKind::*;\n-        let (size, bits) = match kind {\n-            I8 | U8 | Bool         => (1, val.bits() as u8  as u64),\n-            I16 | U16              => (2, val.bits() as u16 as u64),\n-            I32 | U32 | F32 | Char => (4, val.bits() as u32 as u64),\n-            I64 | U64 | F64        => (8, val.bits()),\n-            // int -> ptr transmutes are handled here\n-            FnPtr | Ptr            => return self.write_usize(dest, val.bits()),\n+        let size = match kind {\n+            I8 | U8 | Bool         => 1,\n+            I16 | U16              => 2,\n+            I32 | U32 | F32 | Char => 4,\n+            I64 | U64 | F64        => 8,\n+            Ptr | FnPtr            => self.pointer_size(),\n         };\n \n-        self.write_uint(dest, bits, size)\n+        match val {\n+            PrimVal::Ptr(ptr) => {\n+                assert_eq!(size, self.pointer_size());\n+                self.write_ptr(dest, ptr)\n+            }\n+\n+            PrimVal::Bytes(bytes) => {\n+                // We need to mask here, or the byteorder crate can die when given a u64 larger\n+                // than fits in an integer of the requested size.\n+                let mask = match size {\n+                    1 => 0xff,\n+                    2 => 0xffff,\n+                    4 => 0xffffffff,\n+                    8 => 0xffffffffffffffff,\n+                    _ => bug!(\"unexpected PrimVal size\"),\n+                };\n+                self.write_uint(dest, bytes & mask, size)\n+            }\n+\n+            PrimVal::Undef => self.mark_definedness(dest, size, false),\n+        }\n     }\n \n     pub fn read_bool(&self, ptr: Pointer) -> EvalResult<'tcx, bool> {"}]}