{"sha": "44ffb61623741f86fca9f2f51d49dc1778310ee1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZmZiNjE2MjM3NDFmODZmY2E5ZjJmNTFkNDlkYzE3NzgzMTBlZTE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-30T04:12:53Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-08-13T00:15:43Z"}, "message": "Unify flags into config.\n\nThis introduces a slight change in behavior, where we unilaterally\nrespect the --host and --target parameters passed for all sanity\nchecking and runtime configuration.", "tree": {"sha": "1bdd6613027d648834d3f23f28b04a6fdc0b007b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bdd6613027d648834d3f23f28b04a6fdc0b007b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44ffb61623741f86fca9f2f51d49dc1778310ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44ffb61623741f86fca9f2f51d49dc1778310ee1", "html_url": "https://github.com/rust-lang/rust/commit/44ffb61623741f86fca9f2f51d49dc1778310ee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44ffb61623741f86fca9f2f51d49dc1778310ee1/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f774bced502cf190426f778001a342715acb1d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/f774bced502cf190426f778001a342715acb1d47", "html_url": "https://github.com/rust-lang/rust/commit/f774bced502cf190426f778001a342715acb1d47"}], "stats": {"total": 243, "additions": 126, "deletions": 117}, "files": [{"sha": "d02bc7972ae9a0980c7a7768446b206bc0f7b010", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -21,11 +21,10 @@ extern crate bootstrap;\n \n use std::env;\n \n-use bootstrap::{Flags, Config, Build};\n+use bootstrap::{Config, Build};\n \n fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n-    let flags = Flags::parse(&args);\n-    let config = Config::parse(&flags.build, flags.config.clone());\n-    Build::new(flags, config).build();\n+    let config = Config::parse(&args);\n+    Build::new(config).build();\n }"}, {"sha": "a6cbb0134127d4c13dbaa6f194525d6cfcc55d36", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -120,28 +120,21 @@ impl StepDescription {\n     fn maybe_run(&self, builder: &Builder, path: Option<&Path>) {\n         let build = builder.build;\n         let hosts = if self.only_build_targets || self.only_build {\n-            &build.config.host[..1]\n+            build.build_triple()\n         } else {\n             &build.hosts\n         };\n \n-        // Determine the actual targets participating in this rule.\n-        // NOTE: We should keep the full projection from build triple to\n-        // the hosts for the dist steps, now that the hosts array above is\n-        // truncated to avoid duplication of work in that case. Therefore\n-        // the original non-shadowed hosts array is used below.\n+        // Determine the targets participating in this rule.\n         let targets = if self.only_hosts {\n-            // If --target was specified but --host wasn't specified,\n-            // don't run any host-only tests. Also, respect any `--host`\n-            // overrides as done for `hosts`.\n-            if build.flags.host.len() > 0 {\n-                &build.flags.host[..]\n-            } else if build.flags.target.len() > 0 {\n+            // If --target was specified but --host wasn't specified, don't run\n+            // any host-only tests.\n+            if build.config.hosts.is_empty() && !build.config.targets.is_empty() {\n                 &[]\n             } else if self.only_build {\n-                &build.config.host[..1]\n+                build.build_triple()\n             } else {\n-                &build.config.host[..]\n+                &build.hosts\n             }\n         } else {\n             &build.targets\n@@ -288,7 +281,7 @@ impl<'a> Builder<'a> {\n \n         let builder = Builder {\n             build: build,\n-            top_stage: build.flags.stage.unwrap_or(2),\n+            top_stage: build.config.stage.unwrap_or(2),\n             kind: kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n@@ -307,7 +300,7 @@ impl<'a> Builder<'a> {\n     }\n \n     pub fn run(build: &Build) {\n-        let (kind, paths) = match build.flags.cmd {\n+        let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n             Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n@@ -319,7 +312,7 @@ impl<'a> Builder<'a> {\n \n         let builder = Builder {\n             build: build,\n-            top_stage: build.flags.stage.unwrap_or(2),\n+            top_stage: build.config.stage.unwrap_or(2),\n             kind: kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n@@ -543,12 +536,12 @@ impl<'a> Builder<'a> {\n         // Ignore incremental modes except for stage0, since we're\n         // not guaranteeing correctness across builds if the compiler\n         // is changing under your feet.`\n-        if self.flags.incremental && compiler.stage == 0 {\n+        if self.config.incremental && compiler.stage == 0 {\n             let incr_dir = self.incremental_dir(compiler);\n             cargo.env(\"RUSTC_INCREMENTAL\", incr_dir);\n         }\n \n-        if let Some(ref on_fail) = self.flags.on_fail {\n+        if let Some(ref on_fail) = self.config.on_fail {\n             cargo.env(\"RUSTC_ON_FAIL\", on_fail);\n         }\n "}, {"sha": "0f25da8a238d012d2d39af45f1bd695a3e796fc2", "filename": "src/bootstrap/cc.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -32,6 +32,7 @@\n //! everything.\n \n use std::process::Command;\n+use std::iter;\n \n use build_helper::{cc2ar, output};\n use gcc;\n@@ -43,47 +44,41 @@ use cache::Interned;\n pub fn find(build: &mut Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n-    //\n-    // This includes targets that aren't necessarily passed on the commandline\n-    // (FIXME: Perhaps it shouldn't?)\n-    for target in &build.config.target {\n+    for target in build.targets.iter().chain(&build.hosts).cloned().chain(iter::once(build.build)) {\n         let mut cfg = gcc::Config::new();\n         cfg.cargo_metadata(false).opt_level(0).debug(false)\n-           .target(target).host(&build.build);\n+           .target(&target).host(&build.build);\n \n         let config = build.config.target_config.get(&target);\n         if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n             cfg.compiler(cc);\n         } else {\n-            set_compiler(&mut cfg, \"gcc\", *target, config, build);\n+            set_compiler(&mut cfg, \"gcc\", target, config, build);\n         }\n \n         let compiler = cfg.get_compiler();\n-        let ar = cc2ar(compiler.path(), target);\n-        build.verbose(&format!(\"CC_{} = {:?}\", target, compiler.path()));\n+        let ar = cc2ar(compiler.path(), &target);\n+        build.verbose(&format!(\"CC_{} = {:?}\", &target, compiler.path()));\n         if let Some(ref ar) = ar {\n-            build.verbose(&format!(\"AR_{} = {:?}\", target, ar));\n+            build.verbose(&format!(\"AR_{} = {:?}\", &target, ar));\n         }\n-        build.cc.insert(*target, (compiler, ar));\n+        build.cc.insert(target, (compiler, ar));\n     }\n \n     // For all host triples we need to find a C++ compiler as well\n-    //\n-    // This includes hosts that aren't necessarily passed on the commandline\n-    // (FIXME: Perhaps it shouldn't?)\n-    for host in &build.config.host {\n+    for host in build.hosts.iter().cloned().chain(iter::once(build.build)) {\n         let mut cfg = gcc::Config::new();\n         cfg.cargo_metadata(false).opt_level(0).debug(false).cpp(true)\n-           .target(host).host(&build.build);\n-        let config = build.config.target_config.get(host);\n+           .target(&host).host(&build.build);\n+        let config = build.config.target_config.get(&host);\n         if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n         } else {\n-            set_compiler(&mut cfg, \"g++\", *host, config, build);\n+            set_compiler(&mut cfg, \"g++\", host, config, build);\n         }\n         let compiler = cfg.get_compiler();\n         build.verbose(&format!(\"CXX_{} = {:?}\", host, compiler.path()));\n-        build.cxx.insert(*host, compiler);\n+        build.cxx.insert(host, compiler);\n     }\n }\n "}, {"sha": "0351e9b81585fdaec814b58b71ae9d0d6232ec0c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -625,7 +625,7 @@ impl Step for Compiletest {\n             cmd.arg(\"--system-llvm\");\n         }\n \n-        cmd.args(&build.flags.cmd.test_args());\n+        cmd.args(&build.config.cmd.test_args());\n \n         if build.is_verbose() {\n             cmd.arg(\"--verbose\");\n@@ -820,7 +820,7 @@ fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) {\n     cmd.arg(markdown);\n     cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n-    let test_args = build.flags.cmd.test_args().join(\" \");\n+    let test_args = build.config.cmd.test_args().join(\" \");\n     cmd.arg(\"--test-args\").arg(test_args);\n \n     if build.config.quiet_tests {\n@@ -1051,7 +1051,7 @@ impl Step for Crate {\n         cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n         cargo.arg(\"--\");\n-        cargo.args(&build.flags.cmd.test_args());\n+        cargo.args(&build.config.cmd.test_args());\n \n         if build.config.quiet_tests {\n             cargo.arg(\"--quiet\");\n@@ -1147,6 +1147,7 @@ pub struct Distcheck;\n \n impl Step for Distcheck {\n     type Output = ();\n+    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"distcheck\")\n@@ -1160,16 +1161,6 @@ impl Step for Distcheck {\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n \n-        if *build.build != *\"x86_64-unknown-linux-gnu\" {\n-            return\n-        }\n-        if !build.config.host.iter().any(|s| s == \"x86_64-unknown-linux-gnu\") {\n-            return\n-        }\n-        if !build.config.target.iter().any(|s| s == \"x86_64-unknown-linux-gnu\") {\n-            return\n-        }\n-\n         println!(\"Distcheck\");\n         let dir = build.out.join(\"tmp\").join(\"distcheck\");\n         let _ = fs::remove_dir_all(&dir);\n@@ -1236,7 +1227,7 @@ impl Step for Bootstrap {\n         if !build.fail_fast {\n             cmd.arg(\"--no-fail-fast\");\n         }\n-        cmd.arg(\"--\").args(&build.flags.cmd.test_args());\n+        cmd.arg(\"--\").args(&build.config.cmd.test_args());\n         try_run(build, &mut cmd);\n     }\n "}, {"sha": "119340a0190c4c11271d61e847ffaa600e61c03a", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -26,7 +26,7 @@ pub fn clean(build: &Build) {\n     rm_rf(&build.out.join(\"tmp\"));\n     rm_rf(&build.out.join(\"dist\"));\n \n-    for host in build.config.host.iter() {\n+    for host in &build.hosts {\n         let entries = match build.out.join(host).read_dir() {\n             Ok(iter) => iter,\n             Err(_) => continue,"}, {"sha": "a6702300c811f913d2ec3e59eee4237c2bd51ef3", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -679,10 +679,10 @@ impl Step for Assemble {\n         // link to these. (FIXME: Is that correct? It seems to be correct most\n         // of the time but I think we do link to these for stage2/bin compilers\n         // when not performing a full bootstrap).\n-        if builder.build.flags.keep_stage.map_or(false, |s| target_compiler.stage <= s) {\n+        if builder.build.config.keep_stage.map_or(false, |s| target_compiler.stage <= s) {\n             builder.verbose(\"skipping compilation of compiler due to --keep-stage\");\n             let compiler = build_compiler;\n-            for stage in 0..min(target_compiler.stage, builder.flags.keep_stage.unwrap()) {\n+            for stage in 0..min(target_compiler.stage, builder.config.keep_stage.unwrap()) {\n                 let target_compiler = builder.compiler(stage, target_compiler.host);\n                 let target = target_compiler.host;\n                 builder.ensure(StdLink { compiler, target_compiler, target });"}, {"sha": "c0494bd7fd083beac6fe7d9e4b3842d603e4c57a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -19,11 +19,14 @@ use std::fs::{self, File};\n use std::io::prelude::*;\n use std::path::PathBuf;\n use std::process;\n+use std::cmp;\n \n use num_cpus;\n use toml;\n use util::{exe, push_exe_path};\n use cache::{INTERNER, Interned};\n+use flags::Flags;\n+pub use flags::Subcommand;\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -52,6 +55,14 @@ pub struct Config {\n     pub sanitizers: bool,\n     pub profiler: bool,\n \n+    pub on_fail: Option<String>,\n+    pub stage: Option<u32>,\n+    pub keep_stage: Option<u32>,\n+    pub src: PathBuf,\n+    pub jobs: Option<u32>,\n+    pub cmd: Subcommand,\n+    pub incremental: bool,\n+\n     // llvm codegen options\n     pub llvm_enabled: bool,\n     pub llvm_assertions: bool,\n@@ -79,8 +90,8 @@ pub struct Config {\n     pub rust_dist_src: bool,\n \n     pub build: Interned<String>,\n-    pub host: Vec<Interned<String>>,\n-    pub target: Vec<Interned<String>>,\n+    pub hosts: Vec<Interned<String>>,\n+    pub targets: Vec<Interned<String>>,\n     pub local_rebuild: bool,\n \n     // dist misc\n@@ -265,7 +276,9 @@ struct TomlTarget {\n }\n \n impl Config {\n-    pub fn parse(build: &str, file: Option<PathBuf>) -> Config {\n+    pub fn parse(args: &[String]) -> Config {\n+        let flags = Flags::parse(&args);\n+        let file = flags.config.clone();\n         let mut config = Config::default();\n         config.llvm_enabled = true;\n         config.llvm_optimize = true;\n@@ -277,11 +290,19 @@ impl Config {\n         config.docs = true;\n         config.rust_rpath = true;\n         config.rust_codegen_units = 1;\n-        config.build = INTERNER.intern_str(build);\n+        config.build = flags.build;\n         config.channel = \"dev\".to_string();\n         config.codegen_tests = true;\n         config.rust_dist_src = true;\n \n+        config.on_fail = flags.on_fail;\n+        config.stage = flags.stage;\n+        config.src = flags.src;\n+        config.jobs = flags.jobs;\n+        config.cmd = flags.cmd;\n+        config.incremental = flags.incremental;\n+        config.keep_stage = flags.keep_stage;\n+\n         let toml = file.map(|file| {\n             let mut f = t!(File::open(&file));\n             let mut contents = String::new();\n@@ -298,20 +319,41 @@ impl Config {\n \n         let build = toml.build.clone().unwrap_or(Build::default());\n         set(&mut config.build, build.build.clone().map(|x| INTERNER.intern_string(x)));\n-        config.host.push(config.build.clone());\n+        config.hosts.push(config.build.clone());\n         for host in build.host.iter() {\n             let host = INTERNER.intern_str(host);\n-            if !config.host.contains(&host) {\n-                config.host.push(host);\n+            if !config.hosts.contains(&host) {\n+                config.hosts.push(host);\n             }\n         }\n-        for target in config.host.iter().cloned()\n+        for target in config.hosts.iter().cloned()\n             .chain(build.target.iter().map(|s| INTERNER.intern_str(s)))\n         {\n-            if !config.target.contains(&target) {\n-                config.target.push(target);\n+            if !config.targets.contains(&target) {\n+                config.targets.push(target);\n             }\n         }\n+        config.hosts = if !flags.host.is_empty() {\n+            for host in flags.host.iter() {\n+                if !config.hosts.contains(host) {\n+                    panic!(\"specified host `{}` is not in configuration\", host);\n+                }\n+            }\n+            flags.host\n+        } else {\n+            config.hosts\n+        };\n+        config.targets = if !flags.target.is_empty() {\n+            for target in flags.target.iter() {\n+                if !config.targets.contains(target) {\n+                    panic!(\"specified target `{}` is not in configuration\", target);\n+                }\n+            }\n+            flags.target\n+        } else {\n+            config.targets\n+        };\n+\n         config.nodejs = build.nodejs.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n@@ -327,6 +369,7 @@ impl Config {\n         set(&mut config.sanitizers, build.sanitizers);\n         set(&mut config.profiler, build.profiler);\n         set(&mut config.openssl_static, build.openssl_static);\n+        config.verbose = cmp::max(config.verbose, flags.verbose);\n \n         if let Some(ref install) = toml.install {\n             config.prefix = install.prefix.clone().map(PathBuf::from);\n@@ -505,11 +548,11 @@ impl Config {\n             match key {\n                 \"CFG_BUILD\" if value.len() > 0 => self.build = INTERNER.intern_str(value),\n                 \"CFG_HOST\" if value.len() > 0 => {\n-                    self.host.extend(value.split(\" \").map(|s| INTERNER.intern_str(s)));\n+                    self.hosts.extend(value.split(\" \").map(|s| INTERNER.intern_str(s)));\n \n                 }\n                 \"CFG_TARGET\" if value.len() > 0 => {\n-                    self.target.extend(value.split(\" \").map(|s| INTERNER.intern_str(s)));\n+                    self.targets.extend(value.split(\" \").map(|s| INTERNER.intern_str(s)));\n                 }\n                 \"CFG_EXPERIMENTAL_TARGETS\" if value.len() > 0 => {\n                     self.llvm_experimental_targets = Some(value.to_string());"}, {"sha": "e467ba49b9734c1a114e1ebb222d1dde0671e94d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -546,7 +546,7 @@ impl Step for Std {\n         // We want to package up as many target libraries as possible\n         // for the `rust-std` package, so if this is a host target we\n         // depend on librustc and otherwise we just depend on libtest.\n-        if build.config.host.iter().any(|t| t == target) {\n+        if build.hosts.iter().any(|t| t == target) {\n             builder.ensure(compile::Rustc { compiler, target });\n         } else {\n             builder.ensure(compile::Test { compiler, target });"}, {"sha": "b20801971f19dfcccf6e577794d65281c85be0ae", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -34,6 +34,7 @@ pub struct Flags {\n     pub stage: Option<u32>,\n     pub keep_stage: Option<u32>,\n     pub build: Interned<String>,\n+\n     pub host: Vec<Interned<String>>,\n     pub target: Vec<Interned<String>>,\n     pub config: Option<PathBuf>,\n@@ -68,6 +69,14 @@ pub enum Subcommand {\n     },\n }\n \n+impl Default for Subcommand {\n+    fn default() -> Subcommand {\n+        Subcommand::Build {\n+            paths: vec![PathBuf::from(\"nowhere\")],\n+        }\n+    }\n+}\n+\n impl Flags {\n     pub fn parse(args: &[String]) -> Flags {\n         let mut extra_help = String::new();\n@@ -243,10 +252,8 @@ Arguments:\n \n         // All subcommands can have an optional \"Available paths\" section\n         if matches.opt_present(\"verbose\") {\n-            let flags = Flags::parse(&[\"build\".to_string()]);\n-            let mut config = Config::parse(&flags.build, cfg_file.clone());\n-            config.build = flags.build.clone();\n-            let mut build = Build::new(flags, config);\n+            let config = Config::parse(&[\"build\".to_string()]);\n+            let mut build = Build::new(config);\n             metadata::build(&mut build);\n \n             let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());"}, {"sha": "89690e444d1f6d9bfb997d1b26faba7cb29b0cac", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -28,7 +28,7 @@ pub fn install_docs(builder: &Builder, stage: u32, host: Interned<String>) {\n }\n \n pub fn install_std(builder: &Builder, stage: u32) {\n-    for target in builder.build.config.target.iter() {\n+    for target in &builder.build.targets {\n         install_sh(builder, \"std\", \"rust-std\", stage, Some(*target));\n     }\n }"}, {"sha": "e1d2779057f9dd1221e901cc96b7bf75961068bf", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -136,13 +136,13 @@ extern crate toml;\n extern crate libc;\n \n use std::cell::Cell;\n-use std::cmp;\n use std::collections::{HashSet, HashMap};\n use std::env;\n use std::fs::{self, File};\n use std::io::Read;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n+use std::slice;\n \n use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n \n@@ -187,7 +187,7 @@ mod job {\n }\n \n pub use config::Config;\n-pub use flags::{Flags, Subcommand};\n+use flags::Subcommand;\n use cache::{Interned, INTERNER};\n \n /// A structure representing a Rust compiler.\n@@ -215,9 +215,6 @@ pub struct Build {\n     // User-specified configuration via config.toml\n     config: Config,\n \n-    // User-specified configuration via CLI flags\n-    flags: Flags,\n-\n     // Derived properties from the above two configurations\n     src: PathBuf,\n     out: PathBuf,\n@@ -288,9 +285,9 @@ impl Build {\n     /// line and the filesystem `config`.\n     ///\n     /// By default all build output will be placed in the current directory.\n-    pub fn new(flags: Flags, config: Config) -> Build {\n+    pub fn new(config: Config) -> Build {\n         let cwd = t!(env::current_dir());\n-        let src = flags.src.clone();\n+        let src = config.src.clone();\n         let out = cwd.join(\"build\");\n \n         let is_sudo = match env::var_os(\"SUDO_USER\") {\n@@ -306,39 +303,17 @@ impl Build {\n         let cargo_info = channel::GitInfo::new(&src.join(\"src/tools/cargo\"));\n         let rls_info = channel::GitInfo::new(&src.join(\"src/tools/rls\"));\n \n-        let hosts = if !flags.host.is_empty() {\n-            for host in flags.host.iter() {\n-                if !config.host.contains(host) {\n-                    panic!(\"specified host `{}` is not in configuration\", host);\n-                }\n-            }\n-            flags.host.clone()\n-        } else {\n-            config.host.clone()\n-        };\n-        let targets = if !flags.target.is_empty() {\n-            for target in flags.target.iter() {\n-                if !config.target.contains(target) {\n-                    panic!(\"specified target `{}` is not in configuration\", target);\n-                }\n-            }\n-            flags.target.clone()\n-        } else {\n-            config.target.clone()\n-        };\n-\n         Build {\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n             local_rebuild: config.local_rebuild,\n-            fail_fast: flags.cmd.fail_fast(),\n-            verbosity: cmp::max(flags.verbose, config.verbose),\n+            fail_fast: config.cmd.fail_fast(),\n+            verbosity: config.verbose,\n \n-            build: config.host[0].clone(),\n-            hosts: hosts,\n-            targets: targets,\n+            build: config.build,\n+            hosts: config.hosts.clone(),\n+            targets: config.targets.clone(),\n \n-            flags: flags,\n             config: config,\n             src: src,\n             out: out,\n@@ -357,13 +332,19 @@ impl Build {\n         }\n     }\n \n+    pub fn build_triple(&self) -> &[Interned<String>] {\n+        unsafe {\n+            slice::from_raw_parts(&self.build, 1)\n+        }\n+    }\n+\n     /// Executes the entire build, as configured by the flags and configuration.\n     pub fn build(&mut self) {\n         unsafe {\n             job::setup(self);\n         }\n \n-        if let Subcommand::Clean = self.flags.cmd {\n+        if let Subcommand::Clean = self.config.cmd {\n             return clean::clean(self);\n         }\n \n@@ -608,7 +589,7 @@ impl Build {\n     /// Returns the number of parallel jobs that have been configured for this\n     /// build.\n     fn jobs(&self) -> u32 {\n-        self.flags.jobs.unwrap_or_else(|| num_cpus::get() as u32)\n+        self.config.jobs.unwrap_or_else(|| num_cpus::get() as u32)\n     }\n \n     /// Returns the path to the C compiler for the target specified.\n@@ -727,7 +708,7 @@ impl Build {\n     fn force_use_stage1(&self, compiler: Compiler, target: Interned<String>) -> bool {\n         !self.config.full_bootstrap &&\n             compiler.stage >= 2 &&\n-            self.config.host.iter().any(|h| *h == target)\n+            self.hosts.iter().any(|h| *h == target)\n     }\n \n     /// Returns the directory that OpenSSL artifacts are compiled into if"}, {"sha": "436a13500f254054913b0259d0173ed3b847d315", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44ffb61623741f86fca9f2f51d49dc1778310ee1/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=44ffb61623741f86fca9f2f51d49dc1778310ee1", "patch": "@@ -85,7 +85,7 @@ pub fn check(build: &mut Build) {\n     }\n \n     // We need cmake, but only if we're actually building LLVM or sanitizers.\n-    let building_llvm = build.config.host.iter()\n+    let building_llvm = build.hosts.iter()\n         .filter_map(|host| build.config.target_config.get(host))\n         .any(|config| config.llvm_config.is_none());\n     if building_llvm || build.config.sanitizers {\n@@ -114,7 +114,7 @@ pub fn check(build: &mut Build) {\n \n     // We're gonna build some custom C code here and there, host triples\n     // also build some C++ shims for LLVM so we need a C++ compiler.\n-    for target in &build.config.target {\n+    for target in &build.targets {\n         // On emscripten we don't actually need the C compiler to just\n         // build the target artifacts, only for testing. For the sake\n         // of easier bot configuration, just skip detection.\n@@ -128,7 +128,7 @@ pub fn check(build: &mut Build) {\n         }\n     }\n \n-    for host in build.config.host.iter() {\n+    for host in &build.hosts {\n         cmd_finder.must_have(build.cxx(*host).unwrap());\n \n         // The msvc hosts don't use jemalloc, turn it off globally to\n@@ -144,7 +144,7 @@ pub fn check(build: &mut Build) {\n         panic!(\"FileCheck executable {:?} does not exist\", filecheck);\n     }\n \n-    for target in &build.config.target {\n+    for target in &build.targets {\n         // Can't compile for iOS unless we're on macOS\n         if target.contains(\"apple-ios\") &&\n            !build.build.contains(\"apple-darwin\") {"}]}