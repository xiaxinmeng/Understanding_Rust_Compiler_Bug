{"sha": "207fb5f070174368ebb56a17b6f4e5a161cabe51", "node_id": "C_kwDOAAsO6NoAKDIwN2ZiNWYwNzAxNzQzNjhlYmI1NmExN2I2ZjRlNWExNjFjYWJlNTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-18T03:18:42Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-18T03:18:42Z"}, "message": "fix impl trait message, bless tests", "tree": {"sha": "56ccd3588578c71e303a20b34ebd152122767533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56ccd3588578c71e303a20b34ebd152122767533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207fb5f070174368ebb56a17b6f4e5a161cabe51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207fb5f070174368ebb56a17b6f4e5a161cabe51", "html_url": "https://github.com/rust-lang/rust/commit/207fb5f070174368ebb56a17b6f4e5a161cabe51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207fb5f070174368ebb56a17b6f4e5a161cabe51/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f04f732503a239b3fac22be2238d21971aa03dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04f732503a239b3fac22be2238d21971aa03dce", "html_url": "https://github.com/rust-lang/rust/commit/f04f732503a239b3fac22be2238d21971aa03dce"}], "stats": {"total": 385, "additions": 129, "deletions": 256}, "files": [{"sha": "bdbee3e2f4b3a0b62c3a5527b8ddf3b1a28f8ef2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -297,7 +297,7 @@ impl std::fmt::Display for ImplTraitPosition {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let name = match self {\n             ImplTraitPosition::Path => \"path\",\n-            ImplTraitPosition::Variable => \"variable\",\n+            ImplTraitPosition::Variable => \"variable binding\",\n             ImplTraitPosition::Type => \"type\",\n             ImplTraitPosition::Trait => \"trait\",\n             ImplTraitPosition::AsyncBlock => \"async block\",\n@@ -1419,10 +1419,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             self.sess,\n                             t.span,\n                             E0562,\n-                            \"`impl Trait` not allowed outside of \\\n-                            function and inherent method return types\",\n+                            \"`impl Trait` only allowed in function and inherent method return types, not in {}\",\n+                            position\n                         );\n-                        err.note(&format!(\"found `impl Trait` in {}\", position));\n                         err.emit();\n                         hir::TyKind::Err\n                     }"}, {"sha": "a93fb7977131db566a8164941ea206565bcb3973", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -57,20 +57,20 @@ fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n \n const _cdef: impl Tr1<As1: Copy> = S1;\n //~^ ERROR associated type bounds are unstable\n-//~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n+//~| ERROR `impl Trait` only allowed in function and inherent method return types\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // const _cdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n static _sdef: impl Tr1<As1: Copy> = S1;\n //~^ ERROR associated type bounds are unstable\n-//~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n+//~| ERROR `impl Trait` only allowed in function and inherent method return types\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // static _sdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n fn main() {\n     let _: impl Tr1<As1: Copy> = S1;\n     //~^ ERROR associated type bounds are unstable\n-    //~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n+    //~| ERROR `impl Trait` only allowed in function and inherent method return types\n     // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n     // let _: &dyn Tr1<As1: Copy> = &S1;\n }"}, {"sha": "5be1d97a059853d0bd9c9ea432608cd2e297d1dc", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -115,29 +115,23 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/feature-gate-associated_type_bounds.rs:58:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/feature-gate-associated_type_bounds.rs:71:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is not satisfied\n   --> $DIR/feature-gate-associated_type_bounds.rs:15:28"}, {"sha": "3024fedf7b5fbad353f783ed2c4c06b9e074fcd1", "filename": "src/test/ui/impl-trait/issues/issue-54600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -2,6 +2,6 @@ use std::fmt::Debug;\n \n fn main() {\n     let x: Option<impl Debug> = Some(44_u32);\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n     println!(\"{:?}\", x);\n }"}, {"sha": "316566a57a8964f5d7681f66ba8f8a34b3cc27c1", "filename": "src/test/ui/impl-trait/issues/issue-54600.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,10 +1,8 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-54600.rs:4:19\n    |\n LL |     let x: Option<impl Debug> = Some(44_u32);\n    |                   ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "8f1e0ece03a62ec16b87898c0b78271aa948c07c", "filename": "src/test/ui/impl-trait/issues/issue-54840.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -3,5 +3,5 @@ use std::ops::Add;\n fn main() {\n     let i: i32 = 0;\n     let j: &impl Add = &i;\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "8d82133ac90298d31f72d7545409837aabf794c8", "filename": "src/test/ui/impl-trait/issues/issue-54840.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,10 +1,8 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-54840.rs:5:13\n    |\n LL |     let j: &impl Add = &i;\n    |             ^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "e5865d0dfff340ddea23fbbb43b735b4212c4f02", "filename": "src/test/ui/impl-trait/issues/issue-58504.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -8,5 +8,5 @@ fn mk_gen() -> impl Generator<Return=!, Yield=()> {\n \n fn main() {\n     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "6656e9fc3fbfc05846b9e253d235eae2659835df", "filename": "src/test/ui/impl-trait/issues/issue-58504.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,10 +1,8 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-58504.rs:10:16\n    |\n LL |     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "68cfcd9ba4f9e03c72e9f5e4acee8b5db6bda814", "filename": "src/test/ui/impl-trait/issues/issue-58956.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -5,9 +5,9 @@ impl Lam for B {}\n pub struct Wrap<T>(T);\n \n const _A: impl Lam = {\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n     let x: Wrap<impl Lam> = Wrap(B);\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n     x.0\n };\n "}, {"sha": "123fb4df4b3c8650c9acd6d3cd3f43b561df2cdc", "filename": "src/test/ui/impl-trait/issues/issue-58956.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,18 +1,14 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/issue-58956.rs:7:11\n    |\n LL | const _A: impl Lam = {\n    |           ^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-58956.rs:9:17\n    |\n LL |     let x: Wrap<impl Lam> = Wrap(B);\n    |                 ^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8ae18bacd67d68e095583013dc53c50857023df", "filename": "src/test/ui/impl-trait/issues/issue-70971.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x : (impl Copy,) = (true,);\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "4dda4c22aa2cf04524b44023b5c718d102a4e850", "filename": "src/test/ui/impl-trait/issues/issue-70971.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,10 +1,8 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-70971.rs:2:14\n    |\n LL |     let x : (impl Copy,) = (true,);\n    |              ^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "da53594f3d091a547a3a6c80268d1b68be1ed9b8", "filename": "src/test/ui/impl-trait/issues/issue-79099.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,7 +1,7 @@\n struct Bug {\n     V1: [(); {\n         let f: impl core::future::Future<Output = u8> = async { 1 };\n-        //~^ `impl Trait` not allowed outside of function and inherent method return types\n+        //~^ `impl Trait` only allowed in function and inherent method return types\n         //~| expected identifier\n         1\n     }],"}, {"sha": "4c9ec2a83ff37959c37c945fcd6866e3f8f0ab51", "filename": "src/test/ui/impl-trait/issues/issue-79099.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -9,13 +9,11 @@ LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n    = help: set `edition = \"2021\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-79099.rs:3:16\n    |\n LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "344f359529b6185ec879bdd5a8357b246d0ee84b", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,8 +1,8 @@\n struct Foo<T = impl Copy>(T);\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // should not cause ICE\n fn x() -> Foo {"}, {"sha": "e635e554e23848be23f2077644b61041c9ade79c", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,18 +1,14 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n    |\n LL | struct Foo<T = impl Copy>(T);\n    |                ^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n    |\n LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a0b73743a2b2dc98109e7088d2ea8e7a8b02fe21", "filename": "src/test/ui/impl-trait/issues/issue-84919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -3,7 +3,7 @@ impl Trait for () {}\n \n fn foo<'a: 'a>() {\n     let _x: impl Trait = ();\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }\n \n fn main() {}"}, {"sha": "5abe1bd877943bf1a80a27d6be77b25392e93cdb", "filename": "src/test/ui/impl-trait/issues/issue-84919.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,10 +1,8 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-84919.rs:5:13\n    |\n LL |     let _x: impl Trait = ();\n    |             ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "e6e95771400d302f31be971363c97d7f3064b0ad", "filename": "src/test/ui/impl-trait/issues/issue-86642.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,5 +1,5 @@\n static x: impl Fn(&str) -> Result<&str, ()> = move |source| {\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n     let res = (move |source| Ok(source))(source);\n     let res = res.or((move |source| Ok(source))(source));\n     res"}, {"sha": "0ec118d5be80219b3bcae67d7a08ccf89ef66762", "filename": "src/test/ui/impl-trait/issues/issue-86642.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,10 +1,8 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/issue-86642.rs:1:11\n    |\n LL | static x: impl Fn(&str) -> Result<&str, ()> = move |source| {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n error: aborting due to previous error\n "}, {"sha": "aeb8f83326e4dbf0859f42a582ce2c88698c8eb7", "filename": "src/test/ui/impl-trait/issues/issue-87295.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -14,5 +14,5 @@ impl<F> Struct<F> {\n \n fn main() {\n     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());\n-    //~^ `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "0b043056b84a6f3f6e306ff42223d3a0fe4a57d2", "filename": "src/test/ui/impl-trait/issues/issue-87295.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,10 +1,8 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-87295.rs:16:31\n    |\n LL |     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "06a2191a0176152d3fb960ce4b10665740de489f", "filename": "src/test/ui/impl-trait/nested_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -7,7 +7,7 @@ fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n \n fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n //~^ ERROR nested `impl Trait` is not allowed\n-//~^^ `impl Trait` not allowed\n+//~| `impl Trait` only allowed in function and inherent method return types\n \n fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n //~^ ERROR nested `impl Trait` is not allowed\n@@ -23,7 +23,7 @@ fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {\n }\n \n fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n-//~^ `impl Trait` not allowed\n+//~^ `impl Trait` only allowed in function and inherent method return types\n     || 5\n }\n "}, {"sha": "4444e6a454f896ab518c56d9b14a55b50a641a6e", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -34,21 +34,17 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  |         nested `impl Trait` here\n    |                                  outer `impl Trait`\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/nested_impl_trait.rs:8:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `fn` pointer return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/nested_impl_trait.rs:25:42\n    |\n LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n    |                                          ^^^^^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait return\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c1dd46c7ff7fd1d9f769368173351b340e8a5cbd", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -13,61 +13,61 @@ fn in_adt_in_parameters(_: Vec<impl Debug>) { panic!() }\n \n // Disallowed\n fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~^^ ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n \n // Allowed\n@@ -80,22 +80,22 @@ fn in_impl_Trait_in_return() -> impl IntoIterator<Item = impl IntoIterator> {\n \n // Disallowed\n struct InBraceStructField { x: impl Debug }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n struct InAdtInBraceStructField { x: Vec<impl Debug> }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n struct InTupleStructField(impl Debug);\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n enum InEnum {\n     InBraceVariant { x: impl Debug },\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     InTupleVariant(impl Debug),\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Allowed\n@@ -106,7 +106,7 @@ trait InTraitDefnParameters {\n // Disallowed\n trait InTraitDefnReturn {\n     fn in_return() -> impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Allowed and disallowed in trait impls\n@@ -123,7 +123,7 @@ impl DummyTrait for () {\n     // Allowed\n \n     fn in_trait_impl_return() -> impl Debug { () }\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Allowed\n@@ -136,10 +136,10 @@ impl DummyType {\n // Disallowed\n extern \"C\" {\n     fn in_foreign_parameters(_: impl Debug);\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n     fn in_foreign_return() -> impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Allowed\n@@ -155,97 +155,97 @@ type InTypeAlias<R> = impl Debug;\n //~^ ERROR `impl Trait` in type aliases is unstable\n \n type InReturnInTypeAlias<R> = fn() -> impl Debug;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR `impl Trait` in type aliases is unstable\n \n // Disallowed in impl headers\n impl PartialEq<impl Debug> for () {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Disallowed in impl headers\n impl PartialEq<()> for impl Debug {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Disallowed in inherent impls\n impl impl Debug {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Disallowed in inherent impls\n struct InInherentImplAdt<T> { t: T }\n impl InInherentImplAdt<impl Debug> {\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }\n \n // Disallowed in where clauses\n fn in_fn_where_clause()\n     where impl Debug: Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed in where clauses\n fn in_adt_in_fn_where_clause()\n     where Vec<impl Debug>: Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_trait_parameter_in_fn_where_clause<T>()\n     where T: PartialEq<impl Debug>\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_Fn_parameter_in_fn_where_clause<T>()\n     where T: Fn(impl Debug)\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_Fn_return_in_fn_where_clause<T>()\n     where T: Fn() -> impl Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n {\n }\n \n // Disallowed\n struct InStructGenericParamDefault<T = impl Debug>(T);\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n trait InTraitGenericParamDefault<T = impl Debug> {}\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n // Disallowed\n impl <T = impl Debug> T {}\n //~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| WARNING this was previously accepted by the compiler but is being phased out\n-//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~| ERROR `impl Trait` only allowed in function and inherent method return types\n //~| ERROR no nominal type found\n \n // Disallowed\n fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| WARNING this was previously accepted by the compiler but is being phased out\n-//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~| ERROR `impl Trait` only allowed in function and inherent method return types\n \n fn main() {\n     let _in_local_variable: impl Fn() = || {};\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n }"}, {"sha": "eef20c2de94bc7b0b4f5b83ba9cea83b68e8be46", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 41, "deletions": 123, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -43,333 +43,251 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n   --> $DIR/where-allowed.rs:15:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `fn` pointer param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/where-allowed.rs:19:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `fn` pointer return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n   --> $DIR/where-allowed.rs:23:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `fn` pointer param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/where-allowed.rs:27:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `fn` pointer return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:31:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:35:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:39:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:43:57\n    |\n LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n    |                                                         ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:61:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:65:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:69:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:82:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in path\n   --> $DIR/where-allowed.rs:86:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in path\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:90:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:95:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:97:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n   --> $DIR/where-allowed.rs:108:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in trait method return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n   --> $DIR/where-allowed.rs:125:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `impl` method return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n   --> $DIR/where-allowed.rs:138:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `extern fn` param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n   --> $DIR/where-allowed.rs:141:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `extern fn` return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/where-allowed.rs:157:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `fn` pointer return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n   --> $DIR/where-allowed.rs:162:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in trait\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:167:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:172:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:178:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:184:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:191:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n   --> $DIR/where-allowed.rs:198:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in bound\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n   --> $DIR/where-allowed.rs:205:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/where-allowed.rs:212:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:218:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:222:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:226:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:230:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:234:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n   --> $DIR/where-allowed.rs:241:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/where-allowed.rs:247:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in variable\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n   --> $DIR/where-allowed.rs:249:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in closure return\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n   --> $DIR/where-allowed.rs:234:7"}, {"sha": "b8088c18dadfeda82e7b0ca3d54bb3d286a1c3f8", "filename": "src/test/ui/issues/issue-47715.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fissues%2Fissue-47715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fissues%2Fissue-47715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47715.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -7,22 +7,22 @@ trait Iterable {\n }\n \n struct Container<T: Iterable<Item = impl Foo>> {\n-    //~^ ERROR `impl Trait` not allowed\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     field: T\n }\n \n enum Enum<T: Iterable<Item = impl Foo>> {\n-    //~^ ERROR `impl Trait` not allowed\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     A(T),\n }\n \n union Union<T: Iterable<Item = impl Foo> + Copy> {\n-    //~^ ERROR `impl Trait` not allowed\n+    //~^ ERROR `impl Trait` only allowed in function and inherent method return types\n     x: T,\n }\n \n type Type<T: Iterable<Item = impl Foo>> = T;\n-//~^ ERROR `impl Trait` not allowed\n+//~^ ERROR `impl Trait` only allowed in function and inherent method return types\n \n fn main() {\n }"}, {"sha": "0ee9388bf2b2ce321231b6bb74d2991c78162ae5", "filename": "src/test/ui/issues/issue-47715.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,34 +1,26 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n   --> $DIR/issue-47715.rs:9:37\n    |\n LL | struct Container<T: Iterable<Item = impl Foo>> {\n    |                                     ^^^^^^^^\n-   |\n-   = note: found `impl Trait` in generic\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n   --> $DIR/issue-47715.rs:14:30\n    |\n LL | enum Enum<T: Iterable<Item = impl Foo>> {\n    |                              ^^^^^^^^\n-   |\n-   = note: found `impl Trait` in generic\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n   --> $DIR/issue-47715.rs:19:32\n    |\n LL | union Union<T: Iterable<Item = impl Foo> + Copy> {\n    |                                ^^^^^^^^\n-   |\n-   = note: found `impl Trait` in generic\n \n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n   --> $DIR/issue-47715.rs:24:30\n    |\n LL | type Type<T: Iterable<Item = impl Foo>> = T;\n    |                              ^^^^^^^^\n-   |\n-   = note: found `impl Trait` in generic\n \n error: aborting due to 4 previous errors\n "}, {"sha": "857066c78c9026576b6365faacbda4444f836631", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -4,7 +4,7 @@\n // FIXME: this is ruled out for now but should work\n \n type Foo = fn() -> impl Send;\n-//~^ ERROR: `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR: `impl Trait` only allowed in function and inherent method return types\n \n fn make_foo() -> Foo {\n     || 15"}, {"sha": "a31cf1a51ccd7c2aafa7f1bc7014edb35803b621", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207fb5f070174368ebb56a17b6f4e5a161cabe51/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr?ref=207fb5f070174368ebb56a17b6f4e5a161cabe51", "patch": "@@ -1,10 +1,8 @@\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n   --> $DIR/type-alias-impl-trait-fn-type.rs:6:20\n    |\n LL | type Foo = fn() -> impl Send;\n    |                    ^^^^^^^^^\n-   |\n-   = note: found `impl Trait` in `fn` pointer return\n \n error: aborting due to previous error\n "}]}