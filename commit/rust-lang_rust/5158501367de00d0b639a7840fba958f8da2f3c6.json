{"sha": "5158501367de00d0b639a7840fba958f8da2f3c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNTg1MDEzNjdkZTAwZDBiNjM5YTc4NDBmYmE5NThmOGRhMmYzYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-26T09:54:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-26T09:54:03Z"}, "message": "Auto merge of #39075 - est31:remove_reflect, r=nikomatsakis\n\nRemove Reflect\n\nPR for removing the `Reflect` trait. Opened so that a crater run can be done for testing the impact: https://github.com/rust-lang/rust/issues/27749#issuecomment-272665163\n\nFixes #27749", "tree": {"sha": "2419b282fd678c3ccb5a6d2f03c89862917d57b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2419b282fd678c3ccb5a6d2f03c89862917d57b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5158501367de00d0b639a7840fba958f8da2f3c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5158501367de00d0b639a7840fba958f8da2f3c6", "html_url": "https://github.com/rust-lang/rust/commit/5158501367de00d0b639a7840fba958f8da2f3c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5158501367de00d0b639a7840fba958f8da2f3c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0463a4a4f323c4deffc861349e38c6b5091782", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0463a4a4f323c4deffc861349e38c6b5091782", "html_url": "https://github.com/rust-lang/rust/commit/2f0463a4a4f323c4deffc861349e38c6b5091782"}, {"sha": "af46d69b8a3d553a4d33e0c9d296b845c404e499", "url": "https://api.github.com/repos/rust-lang/rust/commits/af46d69b8a3d553a4d33e0c9d296b845c404e499", "html_url": "https://github.com/rust-lang/rust/commit/af46d69b8a3d553a4d33e0c9d296b845c404e499"}], "stats": {"total": 252, "additions": 5, "deletions": 247}, "files": [{"sha": "98871bd084e3ca8f609f5aed1ed8e96df24b2145", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5158501367de00d0b639a7840fba958f8da2f3c6", "patch": "@@ -82,7 +82,6 @@\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n-#![feature(reflect)]\n #![feature(unwind_attributes)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]"}, {"sha": "ede22ccddc62fee14b5781f3cd250c9df7618170", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=5158501367de00d0b639a7840fba958f8da2f3c6", "patch": "@@ -553,59 +553,3 @@ mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     unsafe impl<'a, T: Send + ?Sized> Send for &'a mut T {}\n }\n-\n-/// Types that can be reflected over.\n-///\n-/// By \"reflection\" we mean use of the [`Any`][any] trait, or related\n-/// machinery such as [`TypeId`][typeid].\n-///\n-/// `Reflect` is implemented for all types. Its purpose is to ensure\n-/// that when you write a generic function that will employ reflection,\n-/// that must be reflected (no pun intended) in the generic bounds of\n-/// that function.\n-///\n-/// ```\n-/// #![feature(reflect_marker)]\n-/// use std::marker::Reflect;\n-/// use std::any::Any;\n-///\n-/// # #[allow(dead_code)]\n-/// fn foo<T: Reflect + 'static>(x: &T) {\n-///     let any: &Any = x;\n-///     if any.is::<u32>() { println!(\"u32\"); }\n-/// }\n-/// ```\n-///\n-/// Without the bound `T: Reflect`, `foo` would not typecheck. (As\n-/// a matter of style, it would be preferable to write `T: Any`,\n-/// because `T: Any` implies `T: Reflect` and `T: 'static`, but we\n-/// use `Reflect` here for illustrative purposes.)\n-///\n-/// The `Reflect` bound serves to alert `foo`'s caller to the\n-/// fact that `foo` may behave differently depending on whether\n-/// `T` is `u32` or not. The ability for a caller to reason about what\n-/// a function may do based solely on what generic bounds are declared\n-/// is often called the \"[parametricity property][param]\". Despite the\n-/// use of `Reflect`, Rust lacks true parametricity because a generic\n-/// function can, at the very least, call [`mem::size_of`][size_of]\n-/// without employing any trait bounds whatsoever.\n-///\n-/// [any]: ../any/trait.Any.html\n-/// [typeid]: ../any/struct.TypeId.html\n-/// [param]: http://en.wikipedia.org/wiki/Parametricity\n-/// [size_of]: ../mem/fn.size_of.html\n-#[rustc_reflect_like]\n-#[unstable(feature = \"reflect_marker\",\n-           reason = \"requires RFC and more experience\",\n-           issue = \"27749\")]\n-#[rustc_deprecated(since = \"1.14.0\", reason = \"Specialization makes parametricity impossible\")]\n-#[rustc_on_unimplemented = \"`{Self}` does not implement `Any`; \\\n-                            ensure all type parameters are bounded by `Any`\"]\n-pub trait Reflect {}\n-\n-#[unstable(feature = \"reflect_marker\",\n-           reason = \"requires RFC and more experience\",\n-           issue = \"27749\")]\n-#[rustc_deprecated(since = \"1.14.0\", reason = \"Specialization makes parametricity impossible\")]\n-#[allow(deprecated)]\n-impl Reflect for .. { }"}, {"sha": "4990bb9f521d3490025094b3179462202e15458e", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5158501367de00d0b639a7840fba958f8da2f3c6", "patch": "@@ -204,7 +204,6 @@ enum SelectionCandidate<'tcx> {\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n     ImplCandidate(DefId),\n     DefaultImplCandidate(DefId),\n-    DefaultImplObjectCandidate(DefId),\n \n     /// This is a trait matching with a projected type as `Self`, and\n     /// we found an applicable bound in the trait definition.\n@@ -237,9 +236,6 @@ impl<'a, 'tcx> ty::Lift<'tcx> for SelectionCandidate<'a> {\n             }\n             ImplCandidate(def_id) => ImplCandidate(def_id),\n             DefaultImplCandidate(def_id) => DefaultImplCandidate(def_id),\n-            DefaultImplObjectCandidate(def_id) => {\n-                DefaultImplObjectCandidate(def_id)\n-            }\n             ProjectionCandidate => ProjectionCandidate,\n             FnPointerCandidate => FnPointerCandidate,\n             ObjectCandidate => ObjectCandidate,\n@@ -1431,17 +1427,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             match self_ty.sty {\n                 ty::TyDynamic(..) => {\n                     // For object types, we don't know what the closed\n-                    // over types are. For most traits, this means we\n-                    // conservatively say nothing; a candidate may be\n-                    // added by `assemble_candidates_from_object_ty`.\n-                    // However, for the kind of magic reflect trait,\n-                    // we consider it to be implemented even for\n-                    // object types, because it just lets you reflect\n-                    // onto the object type, not into the object's\n-                    // interior.\n-                    if self.tcx().has_attr(def_id, \"rustc_reflect_like\") {\n-                        candidates.vec.push(DefaultImplObjectCandidate(def_id));\n-                    }\n+                    // over types are. This means we conservatively\n+                    // say nothing; a candidate may be added by\n+                    // `assemble_candidates_from_object_ty`.\n                 }\n                 ty::TyParam(..) |\n                 ty::TyProjection(..) |\n@@ -1671,7 +1659,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 FnPointerCandidate |\n                 BuiltinObjectCandidate |\n                 BuiltinUnsizeCandidate |\n-                DefaultImplObjectCandidate(..) |\n                 BuiltinCandidate { .. } => {\n                     // We have a where-clause so don't go around looking\n                     // for impls.\n@@ -1998,11 +1985,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Ok(VtableDefaultImpl(data))\n             }\n \n-            DefaultImplObjectCandidate(trait_def_id) => {\n-                let data = self.confirm_default_impl_object_candidate(obligation, trait_def_id);\n-                Ok(VtableDefaultImpl(data))\n-            }\n-\n             ImplCandidate(impl_def_id) => {\n                 Ok(VtableImpl(self.confirm_impl_candidate(obligation, impl_def_id)))\n             }\n@@ -2138,42 +2120,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.vtable_default_impl(obligation, trait_def_id, ty::Binder(types))\n     }\n \n-    fn confirm_default_impl_object_candidate(&mut self,\n-                                             obligation: &TraitObligation<'tcx>,\n-                                             trait_def_id: DefId)\n-                                             -> VtableDefaultImplData<PredicateObligation<'tcx>>\n-    {\n-        debug!(\"confirm_default_impl_object_candidate({:?}, {:?})\",\n-               obligation,\n-               trait_def_id);\n-\n-        assert!(self.tcx().has_attr(trait_def_id, \"rustc_reflect_like\"));\n-\n-        // OK to skip binder, it is reintroduced below\n-        let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());\n-        match self_ty.sty {\n-            ty::TyDynamic(ref data, ..) => {\n-                // OK to skip the binder, it is reintroduced below\n-                let principal = data.principal().unwrap();\n-                let input_types = principal.input_types();\n-                let assoc_types = data.projection_bounds()\n-                                      .map(|pb| pb.skip_binder().ty);\n-                let all_types: Vec<_> = input_types.chain(assoc_types)\n-                                                   .collect();\n-\n-                // reintroduce the two binding levels we skipped, then flatten into one\n-                let all_types = ty::Binder(ty::Binder(all_types));\n-                let all_types = self.tcx().flatten_late_bound_regions(&all_types);\n-\n-                self.vtable_default_impl(obligation, trait_def_id, all_types)\n-            }\n-            _ => {\n-                bug!(\"asked to confirm default object implementation for non-object type: {:?}\",\n-                     self_ty);\n-            }\n-        }\n-    }\n-\n     /// See `confirm_default_impl_candidate`\n     fn vtable_default_impl(&mut self,\n                            obligation: &TraitObligation<'tcx>,"}, {"sha": "d4448da932eaed8acd3df105bc563afe87bfb39c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5158501367de00d0b639a7840fba958f8da2f3c6", "patch": "@@ -124,7 +124,6 @@ declare_features! (\n     (active, advanced_slice_patterns, \"1.0.0\", Some(23121)),\n     (active, box_syntax, \"1.0.0\", Some(27779)),\n     (active, placement_in_syntax, \"1.0.0\", Some(27779)),\n-    (active, reflect, \"1.0.0\", Some(27749)),\n     (active, unboxed_closures, \"1.0.0\", Some(29625)),\n \n     (active, allocator, \"1.0.0\", Some(27389)),\n@@ -337,6 +336,7 @@ declare_features! (\n     (removed, managed_boxes, \"1.0.0\", None),\n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n     (removed, negate_unsigned, \"1.0.0\", Some(29645)),\n+    (removed, reflect, \"1.0.0\", Some(27749)),\n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n     (removed, opt_out_copy, \"1.0.0\", None),\n     (removed, quad_precision_float, \"1.0.0\", None),\n@@ -734,10 +734,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                         \"unboxed_closures\",\n                                         \"unboxed_closures are still evolving\",\n                                         cfg_fn!(unboxed_closures))),\n-    (\"rustc_reflect_like\", Whitelisted, Gated(Stability::Unstable,\n-                                              \"reflect\",\n-                                              \"defining reflective traits is still evolving\",\n-                                              cfg_fn!(reflect))),\n \n     (\"windows_subsystem\", Whitelisted, Gated(Stability::Unstable,\n                                              \"windows_subsystem\","}, {"sha": "47da97daaffda1b0ed92d68b5c75d2302b648a50", "filename": "src/test/compile-fail/reflect-assoc.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(reflect_marker)]\n-\n-// Test that types that appear in assoc bindings in an object\n-// type are subject to the reflect check.\n-\n-use std::marker::Reflect;\n-use std::io::Write;\n-\n-trait Get {\n-    type Output;\n-    fn get(self) -> Self::Output;\n-}\n-\n-struct Struct<T>(T);\n-\n-fn is_reflect<T:Reflect>() { }\n-\n-fn a<T>() {\n-    is_reflect::<Box<Get<Output=T>>>(); //~ ERROR E0277\n-}\n-\n-fn ok_a<T: Reflect>() {\n-    is_reflect::<Box<Get<Output=T>>>(); // OK\n-}\n-\n-fn main() {\n-}"}, {"sha": "be0dbd801b7966efc2bbb3e090fbbccc41c2cd10", "filename": "src/test/compile-fail/reflect-object-param.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(reflect_marker)]\n-\n-// Test that types that appear in input types in an object type are\n-// subject to the reflect check.\n-\n-use std::marker::Reflect;\n-use std::io::Write;\n-\n-trait Get<T> {\n-    fn get(self) -> T;\n-}\n-\n-struct Struct<T>(T);\n-\n-fn is_reflect<T:Reflect>() { }\n-\n-fn a<T>() {\n-    is_reflect::<T>(); //~ ERROR E0277\n-}\n-\n-fn ok_a<T: Reflect>() {\n-    is_reflect::<T>(); // OK\n-}\n-\n-fn b<T>() {\n-    is_reflect::<Box<Get<T>>>(); //~ ERROR E0277\n-}\n-\n-fn ok_b<T: Reflect>() {\n-    is_reflect::<Box<Get<T>>>(); // OK\n-}\n-\n-fn c<T>() {\n-    is_reflect::<Box<Get<Struct<T>>>>(); //~ ERROR E0277\n-}\n-\n-fn main() {\n-    is_reflect::<Box<Get<Struct<()>>>>(); // OK\n-}"}, {"sha": "28ff7c82c2e0a02af568b87698d7da66de131ddc", "filename": "src/test/compile-fail/reflect.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(reflect_marker)]\n-\n-// Test that there is no way to get a generic type `T` to be\n-// considered as `Reflect` (or accessible via something that is\n-// considered `Reflect`) without a reflect bound, but that any\n-// concrete type works fine. Note that object types are tested\n-// separately.\n-\n-use std::marker::Reflect;\n-use std::io::Write;\n-\n-struct Struct<T>(T);\n-\n-fn is_reflect<T:Reflect>() { }\n-\n-fn c<T>() {\n-    is_reflect::<Struct<T>>(); //~ ERROR E0277\n-}\n-\n-fn ok_c<T: Reflect>() {\n-    is_reflect::<Struct<T>>(); // OK\n-}\n-\n-fn d<T>() {\n-    is_reflect::<(i32, T)>(); //~ ERROR E0277\n-}\n-\n-fn main() {\n-    is_reflect::<&i32>(); // OK\n-    is_reflect::<Box<Write>>(); // OK\n-}"}, {"sha": "154ebd3649bcd0ec1aaa6df7c38505ee9584d922", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5158501367de00d0b639a7840fba958f8da2f3c6/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=5158501367de00d0b639a7840fba958f8da2f3c6", "patch": "@@ -167,7 +167,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     // FIXME get this whitelist empty.\n     let whitelist = vec![\n         \"abi_ptx\", \"simd\", \"macro_reexport\",\n-        \"static_recursion\", \"reflect\", \"quote\",\n+        \"static_recursion\", \"quote\",\n         \"cfg_target_has_atomic\", \"staged_api\", \"const_indexing\",\n         \"unboxed_closures\", \"stmt_expr_attributes\",\n         \"cfg_target_thread_local\", \"unwind_attributes\","}]}