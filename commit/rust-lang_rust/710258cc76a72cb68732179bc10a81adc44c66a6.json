{"sha": "710258cc76a72cb68732179bc10a81adc44c66a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMDI1OGNjNzZhNzJjYjY4NzMyMTc5YmMxMGE4MWFkYzQ0YzY2YTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-24T02:06:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-24T02:06:43Z"}, "message": "rustdoc: Make reexports work in the crate module", "tree": {"sha": "b7bd8f81ee5bebbe84b780171836ba3442c7d435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7bd8f81ee5bebbe84b780171836ba3442c7d435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/710258cc76a72cb68732179bc10a81adc44c66a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/710258cc76a72cb68732179bc10a81adc44c66a6", "html_url": "https://github.com/rust-lang/rust/commit/710258cc76a72cb68732179bc10a81adc44c66a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/710258cc76a72cb68732179bc10a81adc44c66a6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d44ca0923a5545113c96a8953f880090f334872c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d44ca0923a5545113c96a8953f880090f334872c", "html_url": "https://github.com/rust-lang/rust/commit/d44ca0923a5545113c96a8953f880090f334872c"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "5c3b2eb52554b8458fc7537112a5daa300ddeea7", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/710258cc76a72cb68732179bc10a81adc44c66a6/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710258cc76a72cb68732179bc10a81adc44c66a6/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=710258cc76a72cb68732179bc10a81adc44c66a6", "patch": "@@ -2,6 +2,9 @@\n \n type ast_id = int;\n \n+// FIXME: We currently give topmod the name of the crate.  There would\n+// probably be fewer special cases if the crate had its own name and\n+// topmod's name was the empty string.\n type cratedoc = {\n     topmod: moddoc,\n };"}, {"sha": "0e9c251991b9362e9d92e8d75fc8a0dc3828a831", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/710258cc76a72cb68732179bc10a81adc44c66a6/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710258cc76a72cb68732179bc10a81adc44c66a6/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=710258cc76a72cb68732179bc10a81adc44c66a6", "patch": "@@ -188,7 +188,16 @@ fn merge_reexports(\n     fn fold_mod(fold: fold::fold<path_map>, doc: doc::moddoc) -> doc::moddoc {\n         let doc = fold::default_seq_fold_mod(fold, doc);\n \n-        let path = doc.path() + [doc.name()];\n+        let is_topmod = doc.id() == rustc::syntax::ast::crate_node_id;\n+\n+        // In the case of the top mod, it really doesn't have a name;\n+        // the name we have here is actually the crate name\n+        let path = if is_topmod {\n+            doc.path()\n+        } else {\n+            doc.path() + [doc.name()]\n+        };\n+\n         let new_items = get_new_items(path, fold.ctxt);\n         #debug(\"merging into %?: %?\", path, new_items);\n \n@@ -309,6 +318,25 @@ fn should_rename_items_reexported_with_different_names() {\n     assert doc.topmod.mods()[1].fns()[0].name() == \"x\";\n }\n \n+#[test]\n+fn should_reexport_in_topmod() {\n+    fn mk_doc(source: str) -> doc::cratedoc {\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"core\");\n+            let doc = path_pass::mk_pass()(srv, doc);\n+            run(srv, doc)\n+        }\n+    }\n+    let source = \"import option::{some, none}; \\\n+                  import option = option::t; \\\n+                  export option, some, none; \\\n+                  mod option { \\\n+                  enum t { some, none } \\\n+                  }\";\n+    let doc = mk_doc(source);\n+    assert doc.topmod.enums()[0].name() == \"option\";\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}]}