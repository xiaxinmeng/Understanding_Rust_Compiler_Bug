{"sha": "11585b598ccf5942df405320bead98c096e93259", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNTg1YjU5OGNjZjU5NDJkZjQwNTMyMGJlYWQ5OGMwOTZlOTMyNTk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-13T20:08:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-15T09:42:07Z"}, "message": "pprust: Use `print_mac_common` for delimited token groups", "tree": {"sha": "583630e8c192b9e63be86a917497093b56419bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/583630e8c192b9e63be86a917497093b56419bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11585b598ccf5942df405320bead98c096e93259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11585b598ccf5942df405320bead98c096e93259", "html_url": "https://github.com/rust-lang/rust/commit/11585b598ccf5942df405320bead98c096e93259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11585b598ccf5942df405320bead98c096e93259/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23c5c1bfe7e3785fa1dcf1d3ff6e6bbaa855f66f", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c5c1bfe7e3785fa1dcf1d3ff6e6bbaa855f66f", "html_url": "https://github.com/rust-lang/rust/commit/23c5c1bfe7e3785fa1dcf1d3ff6e6bbaa855f66f"}], "stats": {"total": 172, "additions": 94, "deletions": 78}, "files": [{"sha": "6cfc1b77e03feeb3505f475f63d1b11449ddc819", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -6,7 +6,7 @@ pub use crate::symbol::{Ident, Symbol as Name};\n pub use crate::util::parser::ExprPrecedence;\n \n use crate::ext::hygiene::{Mark, SyntaxContext};\n-use crate::parse::token;\n+use crate::parse::token::{self, DelimToken};\n use crate::print::pprust;\n use crate::ptr::P;\n use crate::source_map::{dummy_spanned, respan, Spanned};\n@@ -1298,6 +1298,16 @@ impl Mac_ {\n     }\n }\n \n+impl MacDelimiter {\n+    crate fn to_token(self) -> DelimToken {\n+        match self {\n+            MacDelimiter::Parenthesis => DelimToken::Paren,\n+            MacDelimiter::Bracket => DelimToken::Bracket,\n+            MacDelimiter::Brace => DelimToken::Brace,\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MacroDef {\n     pub tokens: TokenStream,"}, {"sha": "77f2dff0d8eba16b919478d5a345ecc8fcb7916f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -621,12 +621,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n             } else {\n                 match attr.tokens.trees().next() {\n                     Some(TokenTree::Delimited(_, delim, tts)) => {\n-                        let delim = match delim {\n-                            DelimToken::Brace => MacDelimiter::Brace,\n-                            DelimToken::Bracket => MacDelimiter::Bracket,\n-                            DelimToken::Paren | DelimToken::NoDelim => MacDelimiter::Parenthesis,\n-                        };\n-                        self.print_mac_common(&attr.path, false, None, tts, delim, attr.span);\n+                        self.print_mac_common(\n+                            Some(&attr.path), false, None, delim, tts, true, attr.span\n+                        );\n                     }\n                     tree => {\n                         self.print_path(&attr.path, false, 0);\n@@ -692,13 +689,11 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n                     _ => {}\n                 }\n             }\n-            TokenTree::Delimited(_, delim, tts) => {\n-                self.word(token_kind_to_string(&token::OpenDelim(delim)));\n-                self.space();\n-                self.print_tts(tts, convert_dollar_crate);\n-                self.space();\n-                self.word(token_kind_to_string(&token::CloseDelim(delim)))\n-            },\n+            TokenTree::Delimited(dspan, delim, tts) => {\n+                self.print_mac_common(\n+                    None, false, None, delim, tts, convert_dollar_crate, dspan.entire()\n+                );\n+            }\n         }\n     }\n \n@@ -715,14 +710,17 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n \n     fn print_mac_common(\n         &mut self,\n-        path: &ast::Path,\n+        path: Option<&ast::Path>,\n         has_bang: bool,\n         ident: Option<ast::Ident>,\n+        delim: DelimToken,\n         tts: TokenStream,\n-        delim: MacDelimiter,\n+        convert_dollar_crate: bool,\n         span: Span,\n     ) {\n-        self.print_path(path, false, 0);\n+        if let Some(path) = path {\n+            self.print_path(path, false, 0);\n+        }\n         if has_bang {\n             self.word(\"!\");\n         }\n@@ -732,18 +730,20 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n             self.space();\n         }\n         match delim {\n-            MacDelimiter::Parenthesis => self.popen(),\n-            MacDelimiter::Bracket => self.word(\"[\"),\n-            MacDelimiter::Brace => {\n+            DelimToken::Paren => self.popen(),\n+            DelimToken::Bracket => self.word(\"[\"),\n+            DelimToken::NoDelim => self.word(\" \"),\n+            DelimToken::Brace => {\n                 self.head(\"\");\n                 self.bopen();\n             }\n         }\n-        self.print_tts(tts, true);\n+        self.print_tts(tts, convert_dollar_crate);\n         match delim {\n-            MacDelimiter::Parenthesis => self.pclose(),\n-            MacDelimiter::Bracket => self.word(\"]\"),\n-            MacDelimiter::Brace => self.bclose(span),\n+            DelimToken::Paren => self.pclose(),\n+            DelimToken::Bracket => self.word(\"]\"),\n+            DelimToken::NoDelim => self.word(\" \"),\n+            DelimToken::Brace => self.bclose(span),\n         }\n     }\n \n@@ -1356,9 +1356,14 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::MacroDef(ref macro_def) => {\n-                let path = &ast::Path::from_ident(ast::Ident::with_empty_ctxt(sym::macro_rules));\n                 self.print_mac_common(\n-                    path, true, Some(item.ident), macro_def.stream(), MacDelimiter::Brace, item.span\n+                    Some(&ast::Path::from_ident(ast::Ident::with_empty_ctxt(sym::macro_rules))),\n+                    true,\n+                    Some(item.ident),\n+                    DelimToken::Brace,\n+                    macro_def.stream(),\n+                    true,\n+                    item.span,\n                 );\n             }\n         }\n@@ -1747,10 +1752,11 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_mac(&mut self, m: &ast::Mac) {\n-        self.print_mac_common(&m.node.path, true, None, m.node.stream(), m.node.delim, m.span);\n+        self.print_mac_common(\n+            Some(&m.node.path), true, None, m.node.delim.to_token(), m.node.stream(), true, m.span\n+        );\n     }\n \n-\n     fn print_call_post(&mut self, args: &[P<ast::Expr>]) {\n         self.popen();\n         self.commasep_exprs(Inconsistent, args);"}, {"sha": "1ae30983d202abba383bfa7c2db74fe6870707f5", "filename": "src/test/pretty/cast-lt.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fpretty%2Fcast-lt.pp", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fpretty%2Fcast-lt.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.pp?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -8,6 +8,6 @@\n // pretty-mode:expanded\n // pp-exact:cast-lt.pp\n \n-macro_rules! negative {( $ e : expr ) => { $ e < 0 } }\n+macro_rules! negative {($ e : expr) => {$ e < 0 } }\n \n fn main() { (1 as i32) < 0; }"}, {"sha": "acc11f3f84abac69fdaa86e387e3c3a4f0df5b76", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -113,7 +113,7 @@ fn _8() {\n fn _9() {\n     macro_rules!\n     stmt_mac\n-    {(  ) => { let _ = (  ) ; } }\n+    {() => {let _ = () ; } }\n \n     #[rustc_dummy]\n     stmt_mac!();\n@@ -130,7 +130,7 @@ fn _9() {\n     let _ = ();\n }\n \n-macro_rules! expr_mac {(  ) => { (  ) } }\n+macro_rules! expr_mac {() => {() } }\n \n fn _10() {\n     let _ = #[rustc_dummy] expr_mac!();"}, {"sha": "321545740cf486f430d6b51584bebc9f6caa6b06", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -7,8 +7,8 @@ LL |     produces_async! {}\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n-LL | (  ) => ( pub fn r#async (  ) {  } )\n-   |                  ^^^^^^^\n+LL | () => (pub fn r#async () { })\n+   |               ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3c4a153353447f2b2778f1959941e5f32b680003", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -31,10 +31,10 @@ LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n-  --> <::edition_kw_macro_2015::passes_ident macros>:1:25\n+  --> <::edition_kw_macro_2015::passes_ident macros>:1:22\n    |\n-LL | ( $ i : ident ) => ( $ i )\n-   |                         ^ expected one of `move`, `|`, or `||` here\n+LL | ($ i : ident) => ($ i)\n+   |                      ^ expected one of `move`, `|`, or `||` here\n    | \n   ::: $DIR/edition-keywords-2018-2015-parsing.rs:16:8\n    |"}, {"sha": "8942e3ce430a8e71edab78f36f89efa5bfbd5cdc", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -7,8 +7,8 @@ LL |     produces_async! {}\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n-LL | (  ) => ( pub fn r#async (  ) {  } )\n-   |                  ^^^^^^^\n+LL | () => (pub fn r#async () { })\n+   |               ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "46aa9ca34e17c05c626c4913c49af776e4b8e0c7", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -31,10 +31,10 @@ LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n-  --> <::edition_kw_macro_2018::passes_ident macros>:1:25\n+  --> <::edition_kw_macro_2018::passes_ident macros>:1:22\n    |\n-LL | ( $ i : ident ) => ( $ i )\n-   |                         ^ expected one of `move`, `|`, or `||` here\n+LL | ($ i : ident) => ($ i)\n+   |                      ^ expected one of `move`, `|`, or `||` here\n    | \n   ::: $DIR/edition-keywords-2018-2018-parsing.rs:16:8\n    |"}, {"sha": "6f82d4040bce5ec5eccdda4a67b8bbf38ff47b34", "filename": "src/test/ui/macro_backtrace/main.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -24,10 +24,10 @@ LL |       ping!();\n    | \n   ::: <::ping::ping macros>:1:1\n    |\n-LL |   (  ) => { pong ! (  ) ; }\n-   |   -------------------------\n-   |   |         |\n-   |   |         in this macro invocation\n+LL |   () => {pong ! () ; }\n+   |   --------------------\n+   |   |      |\n+   |   |      in this macro invocation\n    |   in this expansion of `ping!`\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n@@ -44,34 +44,34 @@ LL |       deep!();\n    | \n   ::: <::ping::deep macros>:1:1\n    |\n-LL |   (  ) => { foo ! (  ) ; }\n-   |   ------------------------\n-   |   |         |\n-   |   |         in this macro invocation (#2)\n+LL |   () => {foo ! () ; }\n+   |   -------------------\n+   |   |      |\n+   |   |      in this macro invocation (#2)\n    |   in this expansion of `deep!` (#1)\n    | \n   ::: <::ping::foo macros>:1:1\n    |\n-LL |   (  ) => { bar ! (  ) ; }\n-   |   ------------------------\n-   |   |         |\n-   |   |         in this macro invocation (#3)\n+LL |   () => {bar ! () ; }\n+   |   -------------------\n+   |   |      |\n+   |   |      in this macro invocation (#3)\n    |   in this expansion of `foo!` (#2)\n    | \n   ::: <::ping::bar macros>:1:1\n    |\n-LL |   (  ) => { ping ! (  ) ; }\n-   |   -------------------------\n-   |   |         |\n-   |   |         in this macro invocation (#4)\n+LL |   () => {ping ! () ; }\n+   |   --------------------\n+   |   |      |\n+   |   |      in this macro invocation (#4)\n    |   in this expansion of `bar!` (#3)\n    | \n   ::: <::ping::ping macros>:1:1\n    |\n-LL |   (  ) => { pong ! (  ) ; }\n-   |   -------------------------\n-   |   |         |\n-   |   |         in this macro invocation (#5)\n+LL |   () => {pong ! () ; }\n+   |   --------------------\n+   |   |      |\n+   |   |      in this macro invocation (#5)\n    |   in this expansion of `ping!` (#4)\n \n error: aborting due to 3 previous errors"}, {"sha": "545ed33cd10be2e34c79efc321727752cdafbafb", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `{ $crate :: io :: _print ( format_args_nl ! ( \"Hello, World!\" ) ) ; }`\n+   = note: to `{$crate :: io :: _print (format_args_nl ! (\"Hello, World!\")) ; }`\n "}, {"sha": "f06e6581ff7fb0b2cb9a160a473b5d3e770522a8", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -17,7 +17,7 @@ LL |     my_faulty_macro!();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `my_faulty_macro! {  }`\n-   = note: to `my_faulty_macro ! ( bcd ) ;`\n+   = note: to `my_faulty_macro ! (bcd) ;`\n    = note: expanding `my_faulty_macro! { bcd }`\n \n error: recursion limit reached while expanding the macro `my_recursive_macro`\n@@ -38,13 +38,13 @@ LL |     my_recursive_macro!();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `my_recursive_macro! {  }`\n-   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: to `my_recursive_macro ! () ;`\n    = note: expanding `my_recursive_macro! {  }`\n-   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: to `my_recursive_macro ! () ;`\n    = note: expanding `my_recursive_macro! {  }`\n-   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: to `my_recursive_macro ! () ;`\n    = note: expanding `my_recursive_macro! {  }`\n-   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: to `my_recursive_macro ! () ;`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b2be35e8259936e73f10c550be06c9fcc569e317", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -1 +1 @@\n-fn main (  ) { let y : u32 = \"z\" ; { let x : u32 = \"y\" ; } }\n+fn main () {let y : u32 = \"z\" ; {let x : u32 = \"y\" ; } }"}, {"sha": "0fe02a9a34d18ba21e9d74841d54d2db183b3bf0", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "a499e1362ec0bba94c0d17779067d9a631be7b9c", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -1,5 +1,5 @@\n PRINT-ATTR INPUT (DISPLAY): struct A(identity!(crate :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( identity ! ( $crate :: S ) ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A (identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -55,7 +55,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct B(identity!(::dollar_crate_external :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct B ( identity ! ( $crate :: S ) ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct B (identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "72b02ebcb76f450e80ce4937ce4c59b1c197e856", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/11585b598ccf5942df405320bead98c096e93259/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=11585b598ccf5942df405320bead98c096e93259", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -80,7 +80,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(crate::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( $crate :: S ) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -120,7 +120,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         span: #2 bytes(LO..HI),\n     },\n ]\n-PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -161,7 +161,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -202,7 +202,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( $crate :: S ) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}]}