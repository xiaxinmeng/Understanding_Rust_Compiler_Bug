{"sha": "d9c54f83877c813964923f6a00ece8804ae4f3b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YzU0ZjgzODc3YzgxMzk2NDkyM2Y2YTAwZWNlODgwNGFlNGYzYjg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-03T16:08:53Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-20T15:40:48Z"}, "message": "librustc: use LLVM intrinsics for several floating point operations.\n\nAchieves at least 5x speed up for some functions!\n\nAlso, reorganise the delegation code so that the delegated function wrappers\nhave the #[inline(always)] annotation, and reduce the repetition of\ndelegate!(..).", "tree": {"sha": "4ec63f542a6a738f8631f6acb1db89f9fa9f61b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec63f542a6a738f8631f6acb1db89f9fa9f61b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c54f83877c813964923f6a00ece8804ae4f3b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c54f83877c813964923f6a00ece8804ae4f3b8", "html_url": "https://github.com/rust-lang/rust/commit/d9c54f83877c813964923f6a00ece8804ae4f3b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c54f83877c813964923f6a00ece8804ae4f3b8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c0888b6c6111c645d5aa2ef78da6fe8ab2c307", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c0888b6c6111c645d5aa2ef78da6fe8ab2c307", "html_url": "https://github.com/rust-lang/rust/commit/93c0888b6c6111c645d5aa2ef78da6fe8ab2c307"}], "stats": {"total": 319, "additions": 166, "deletions": 153}, "files": [{"sha": "6233f8c2a61b53425aaa10999ddfddf2859028fa", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 80, "deletions": 72, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/d9c54f83877c813964923f6a00ece8804ae4f3b8/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c54f83877c813964923f6a00ece8804ae4f3b8/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=d9c54f83877c813964923f6a00ece8804ae4f3b8", "patch": "@@ -10,12 +10,9 @@\n \n //! Operations and constants for `f32`\n \n-use cmath;\n-use libc::{c_float, c_int};\n use num::strconv;\n use num;\n use option::Option;\n-use unstable::intrinsics::floorf32;\n use from_str;\n use to_str;\n \n@@ -24,79 +21,93 @@ use to_str;\n \n pub use cmath::c_float_targ_consts::*;\n \n+// An inner module is required to get the #[inline(always)] attribute on the\n+// functions.\n+pub use self::delegated::*;\n+\n macro_rules! delegate(\n     (\n-        fn $name:ident(\n-            $(\n-                $arg:ident : $arg_ty:ty\n-            ),*\n-        ) -> $rv:ty = $bound_name:path\n+        $(\n+            fn $name:ident(\n+                $(\n+                    $arg:ident : $arg_ty:ty\n+                ),*\n+            ) -> $rv:ty = $bound_name:path\n+        ),*\n     ) => (\n-        pub fn $name($( $arg : $arg_ty ),*) -> $rv {\n-            unsafe {\n-                $bound_name($( $arg ),*)\n-            }\n+        mod delegated {\n+            use cmath::c_float_utils;\n+            use libc::{c_float, c_int};\n+            use unstable::intrinsics;\n+\n+            $(\n+                #[inline(always)]\n+                pub fn $name($( $arg : $arg_ty ),*) -> $rv {\n+                    unsafe {\n+                        $bound_name($( $arg ),*)\n+                    }\n+                }\n+            )*\n         }\n     )\n )\n \n-delegate!(fn acos(n: c_float) -> c_float = cmath::c_float_utils::acos)\n-delegate!(fn asin(n: c_float) -> c_float = cmath::c_float_utils::asin)\n-delegate!(fn atan(n: c_float) -> c_float = cmath::c_float_utils::atan)\n-delegate!(fn atan2(a: c_float, b: c_float) -> c_float =\n-    cmath::c_float_utils::atan2)\n-delegate!(fn cbrt(n: c_float) -> c_float = cmath::c_float_utils::cbrt)\n-delegate!(fn ceil(n: c_float) -> c_float = cmath::c_float_utils::ceil)\n-delegate!(fn copysign(x: c_float, y: c_float) -> c_float =\n-    cmath::c_float_utils::copysign)\n-delegate!(fn cos(n: c_float) -> c_float = cmath::c_float_utils::cos)\n-delegate!(fn cosh(n: c_float) -> c_float = cmath::c_float_utils::cosh)\n-delegate!(fn erf(n: c_float) -> c_float = cmath::c_float_utils::erf)\n-delegate!(fn erfc(n: c_float) -> c_float = cmath::c_float_utils::erfc)\n-delegate!(fn exp(n: c_float) -> c_float = cmath::c_float_utils::exp)\n-delegate!(fn expm1(n: c_float) -> c_float = cmath::c_float_utils::expm1)\n-delegate!(fn exp2(n: c_float) -> c_float = cmath::c_float_utils::exp2)\n-delegate!(fn abs(n: c_float) -> c_float = cmath::c_float_utils::abs)\n-delegate!(fn abs_sub(a: c_float, b: c_float) -> c_float =\n-    cmath::c_float_utils::abs_sub)\n-delegate!(fn mul_add(a: c_float, b: c_float, c: c_float) -> c_float =\n-    cmath::c_float_utils::mul_add)\n-delegate!(fn fmax(a: c_float, b: c_float) -> c_float =\n-    cmath::c_float_utils::fmax)\n-delegate!(fn fmin(a: c_float, b: c_float) -> c_float =\n-    cmath::c_float_utils::fmin)\n-delegate!(fn nextafter(x: c_float, y: c_float) -> c_float =\n-    cmath::c_float_utils::nextafter)\n-delegate!(fn frexp(n: c_float, value: &mut c_int) -> c_float =\n-    cmath::c_float_utils::frexp)\n-delegate!(fn hypot(x: c_float, y: c_float) -> c_float =\n-    cmath::c_float_utils::hypot)\n-delegate!(fn ldexp(x: c_float, n: c_int) -> c_float =\n-    cmath::c_float_utils::ldexp)\n-delegate!(fn lgamma(n: c_float, sign: &mut c_int) -> c_float =\n-    cmath::c_float_utils::lgamma)\n-delegate!(fn ln(n: c_float) -> c_float = cmath::c_float_utils::ln)\n-delegate!(fn log_radix(n: c_float) -> c_float =\n-    cmath::c_float_utils::log_radix)\n-delegate!(fn ln1p(n: c_float) -> c_float = cmath::c_float_utils::ln1p)\n-delegate!(fn log10(n: c_float) -> c_float = cmath::c_float_utils::log10)\n-delegate!(fn log2(n: c_float) -> c_float = cmath::c_float_utils::log2)\n-delegate!(fn ilog_radix(n: c_float) -> c_int =\n-    cmath::c_float_utils::ilog_radix)\n-delegate!(fn modf(n: c_float, iptr: &mut c_float) -> c_float =\n-    cmath::c_float_utils::modf)\n-delegate!(fn pow(n: c_float, e: c_float) -> c_float =\n-    cmath::c_float_utils::pow)\n-delegate!(fn round(n: c_float) -> c_float = cmath::c_float_utils::round)\n-delegate!(fn ldexp_radix(n: c_float, i: c_int) -> c_float =\n-    cmath::c_float_utils::ldexp_radix)\n-delegate!(fn sin(n: c_float) -> c_float = cmath::c_float_utils::sin)\n-delegate!(fn sinh(n: c_float) -> c_float = cmath::c_float_utils::sinh)\n-delegate!(fn sqrt(n: c_float) -> c_float = cmath::c_float_utils::sqrt)\n-delegate!(fn tan(n: c_float) -> c_float = cmath::c_float_utils::tan)\n-delegate!(fn tanh(n: c_float) -> c_float = cmath::c_float_utils::tanh)\n-delegate!(fn tgamma(n: c_float) -> c_float = cmath::c_float_utils::tgamma)\n-delegate!(fn trunc(n: c_float) -> c_float = cmath::c_float_utils::trunc)\n+delegate!(\n+    // intrinsics\n+    fn abs(n: f32) -> f32 = intrinsics::fabsf32,\n+    fn cos(n: f32) -> f32 = intrinsics::cosf32,\n+    fn exp(n: f32) -> f32 = intrinsics::expf32,\n+    fn exp2(n: f32) -> f32 = intrinsics::exp2f32,\n+    fn floor(x: f32) -> f32 = intrinsics::floorf32,\n+    fn ln(n: f32) -> f32 = intrinsics::logf32,\n+    fn log10(n: f32) -> f32 = intrinsics::log10f32,\n+    fn log2(n: f32) -> f32 = intrinsics::log2f32,\n+    fn mul_add(a: f32, b: f32, c: f32) -> f32 = intrinsics::fmaf32,\n+    fn pow(n: f32, e: f32) -> f32 = intrinsics::powf32,\n+    fn powi(n: f32, e: c_int) -> f32 = intrinsics::powif32,\n+    fn sin(n: f32) -> f32 = intrinsics::sinf32,\n+    fn sqrt(n: f32) -> f32 = intrinsics::sqrtf32,\n+\n+    // LLVM 3.3 required to use intrinsics for these four\n+    fn ceil(n: c_float) -> c_float = c_float_utils::ceil,\n+    fn trunc(n: c_float) -> c_float = c_float_utils::trunc,\n+    /*\n+    fn ceil(n: f32) -> f32 = intrinsics::ceilf32,\n+    fn trunc(n: f32) -> f32 = intrinsics::truncf32,\n+    fn rint(n: f32) -> f32 = intrinsics::rintf32,\n+    fn nearbyint(n: f32) -> f32 = intrinsics::nearbyintf32,\n+    */\n+\n+    // cmath\n+    fn acos(n: c_float) -> c_float = c_float_utils::acos,\n+    fn asin(n: c_float) -> c_float = c_float_utils::asin,\n+    fn atan(n: c_float) -> c_float = c_float_utils::atan,\n+    fn atan2(a: c_float, b: c_float) -> c_float = c_float_utils::atan2,\n+    fn cbrt(n: c_float) -> c_float = c_float_utils::cbrt,\n+    fn copysign(x: c_float, y: c_float) -> c_float = c_float_utils::copysign,\n+    fn cosh(n: c_float) -> c_float = c_float_utils::cosh,\n+    fn erf(n: c_float) -> c_float = c_float_utils::erf,\n+    fn erfc(n: c_float) -> c_float = c_float_utils::erfc,\n+    fn expm1(n: c_float) -> c_float = c_float_utils::expm1,\n+    fn abs_sub(a: c_float, b: c_float) -> c_float = c_float_utils::abs_sub,\n+    fn fmax(a: c_float, b: c_float) -> c_float = c_float_utils::fmax,\n+    fn fmin(a: c_float, b: c_float) -> c_float = c_float_utils::fmin,\n+    fn nextafter(x: c_float, y: c_float) -> c_float = c_float_utils::nextafter,\n+    fn frexp(n: c_float, value: &mut c_int) -> c_float = c_float_utils::frexp,\n+    fn hypot(x: c_float, y: c_float) -> c_float = c_float_utils::hypot,\n+    fn ldexp(x: c_float, n: c_int) -> c_float = c_float_utils::ldexp,\n+    fn lgamma(n: c_float, sign: &mut c_int) -> c_float = c_float_utils::lgamma,\n+    fn log_radix(n: c_float) -> c_float = c_float_utils::log_radix,\n+    fn ln1p(n: c_float) -> c_float = c_float_utils::ln1p,\n+    fn ilog_radix(n: c_float) -> c_int = c_float_utils::ilog_radix,\n+    fn modf(n: c_float, iptr: &mut c_float) -> c_float = c_float_utils::modf,\n+    fn round(n: c_float) -> c_float = c_float_utils::round,\n+    fn ldexp_radix(n: c_float, i: c_int) -> c_float = c_float_utils::ldexp_radix,\n+    fn sinh(n: c_float) -> c_float = c_float_utils::sinh,\n+    fn tan(n: c_float) -> c_float = c_float_utils::tan,\n+    fn tanh(n: c_float) -> c_float = c_float_utils::tanh,\n+    fn tgamma(n: c_float) -> c_float = c_float_utils::tgamma)\n+\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -143,9 +154,6 @@ pub fn ge(x: f32, y: f32) -> bool { return x >= y; }\n #[inline(always)]\n pub fn gt(x: f32, y: f32) -> bool { return x > y; }\n \n-/// Returns `x` rounded down\n-#[inline(always)]\n-pub fn floor(x: f32) -> f32 { unsafe { floorf32(x) } }\n \n // FIXME (#1999): replace the predicates below with llvm intrinsics or\n // calls to the libmath macros in the rust runtime for performance."}, {"sha": "7f32893f5bff76f21a30e101b6a19e78e9f38785", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 85, "deletions": 80, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/d9c54f83877c813964923f6a00ece8804ae4f3b8/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c54f83877c813964923f6a00ece8804ae4f3b8/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=d9c54f83877c813964923f6a00ece8804ae4f3b8", "patch": "@@ -10,12 +10,9 @@\n \n //! Operations and constants for `f64`\n \n-use cmath;\n-use libc::{c_double, c_int};\n use num::strconv;\n use num;\n use option::Option;\n-use unstable::intrinsics::floorf64;\n use to_str;\n use from_str;\n \n@@ -25,87 +22,98 @@ use from_str;\n pub use cmath::c_double_targ_consts::*;\n pub use cmp::{min, max};\n \n+// An inner module is required to get the #[inline(always)] attribute on the\n+// functions.\n+pub use self::delegated::*;\n+\n macro_rules! delegate(\n     (\n-        fn $name:ident(\n-            $(\n-                $arg:ident : $arg_ty:ty\n-            ),*\n-        ) -> $rv:ty = $bound_name:path\n+        $(\n+            fn $name:ident(\n+                $(\n+                    $arg:ident : $arg_ty:ty\n+                ),*\n+            ) -> $rv:ty = $bound_name:path\n+        ),*\n     ) => (\n-        pub fn $name($( $arg : $arg_ty ),*) -> $rv {\n-            unsafe {\n-                $bound_name($( $arg ),*)\n-            }\n+        mod delegated {\n+            use cmath::c_double_utils;\n+            use libc::{c_double, c_int};\n+            use unstable::intrinsics;\n+\n+            $(\n+                #[inline(always)]\n+                pub fn $name($( $arg : $arg_ty ),*) -> $rv {\n+                    unsafe {\n+                        $bound_name($( $arg ),*)\n+                    }\n+                }\n+            )*\n         }\n     )\n )\n \n-delegate!(fn acos(n: c_double) -> c_double = cmath::c_double_utils::acos)\n-delegate!(fn asin(n: c_double) -> c_double = cmath::c_double_utils::asin)\n-delegate!(fn atan(n: c_double) -> c_double = cmath::c_double_utils::atan)\n-delegate!(fn atan2(a: c_double, b: c_double) -> c_double =\n-    cmath::c_double_utils::atan2)\n-delegate!(fn cbrt(n: c_double) -> c_double = cmath::c_double_utils::cbrt)\n-delegate!(fn ceil(n: c_double) -> c_double = cmath::c_double_utils::ceil)\n-delegate!(fn copysign(x: c_double, y: c_double) -> c_double =\n-    cmath::c_double_utils::copysign)\n-delegate!(fn cos(n: c_double) -> c_double = cmath::c_double_utils::cos)\n-delegate!(fn cosh(n: c_double) -> c_double = cmath::c_double_utils::cosh)\n-delegate!(fn erf(n: c_double) -> c_double = cmath::c_double_utils::erf)\n-delegate!(fn erfc(n: c_double) -> c_double = cmath::c_double_utils::erfc)\n-delegate!(fn exp(n: c_double) -> c_double = cmath::c_double_utils::exp)\n-delegate!(fn expm1(n: c_double) -> c_double = cmath::c_double_utils::expm1)\n-delegate!(fn exp2(n: c_double) -> c_double = cmath::c_double_utils::exp2)\n-delegate!(fn abs(n: c_double) -> c_double = cmath::c_double_utils::abs)\n-delegate!(fn abs_sub(a: c_double, b: c_double) -> c_double =\n-    cmath::c_double_utils::abs_sub)\n-delegate!(fn mul_add(a: c_double, b: c_double, c: c_double) -> c_double =\n-    cmath::c_double_utils::mul_add)\n-delegate!(fn fmax(a: c_double, b: c_double) -> c_double =\n-    cmath::c_double_utils::fmax)\n-delegate!(fn fmin(a: c_double, b: c_double) -> c_double =\n-    cmath::c_double_utils::fmin)\n-delegate!(fn nextafter(x: c_double, y: c_double) -> c_double =\n-    cmath::c_double_utils::nextafter)\n-delegate!(fn frexp(n: c_double, value: &mut c_int) -> c_double =\n-    cmath::c_double_utils::frexp)\n-delegate!(fn hypot(x: c_double, y: c_double) -> c_double =\n-    cmath::c_double_utils::hypot)\n-delegate!(fn ldexp(x: c_double, n: c_int) -> c_double =\n-    cmath::c_double_utils::ldexp)\n-delegate!(fn lgamma(n: c_double, sign: &mut c_int) -> c_double =\n-    cmath::c_double_utils::lgamma)\n-delegate!(fn ln(n: c_double) -> c_double = cmath::c_double_utils::ln)\n-delegate!(fn log_radix(n: c_double) -> c_double =\n-    cmath::c_double_utils::log_radix)\n-delegate!(fn ln1p(n: c_double) -> c_double = cmath::c_double_utils::ln1p)\n-delegate!(fn log10(n: c_double) -> c_double = cmath::c_double_utils::log10)\n-delegate!(fn log2(n: c_double) -> c_double = cmath::c_double_utils::log2)\n-delegate!(fn ilog_radix(n: c_double) -> c_int =\n-    cmath::c_double_utils::ilog_radix)\n-delegate!(fn modf(n: c_double, iptr: &mut c_double) -> c_double =\n-    cmath::c_double_utils::modf)\n-delegate!(fn pow(n: c_double, e: c_double) -> c_double =\n-    cmath::c_double_utils::pow)\n-delegate!(fn round(n: c_double) -> c_double = cmath::c_double_utils::round)\n-delegate!(fn ldexp_radix(n: c_double, i: c_int) -> c_double =\n-    cmath::c_double_utils::ldexp_radix)\n-delegate!(fn sin(n: c_double) -> c_double = cmath::c_double_utils::sin)\n-delegate!(fn sinh(n: c_double) -> c_double = cmath::c_double_utils::sinh)\n-delegate!(fn sqrt(n: c_double) -> c_double = cmath::c_double_utils::sqrt)\n-delegate!(fn tan(n: c_double) -> c_double = cmath::c_double_utils::tan)\n-delegate!(fn tanh(n: c_double) -> c_double = cmath::c_double_utils::tanh)\n-delegate!(fn tgamma(n: c_double) -> c_double = cmath::c_double_utils::tgamma)\n-delegate!(fn trunc(n: c_double) -> c_double = cmath::c_double_utils::trunc)\n-delegate!(fn j0(n: c_double) -> c_double = cmath::c_double_utils::j0)\n-delegate!(fn j1(n: c_double) -> c_double = cmath::c_double_utils::j1)\n-delegate!(fn jn(i: c_int, n: c_double) -> c_double =\n-    cmath::c_double_utils::jn)\n-delegate!(fn y0(n: c_double) -> c_double = cmath::c_double_utils::y0)\n-delegate!(fn y1(n: c_double) -> c_double = cmath::c_double_utils::y1)\n-delegate!(fn yn(i: c_int, n: c_double) -> c_double =\n-    cmath::c_double_utils::yn)\n+delegate!(\n+    // intrinsics\n+    fn abs(n: f64) -> f64 = intrinsics::fabsf64,\n+    fn cos(n: f64) -> f64 = intrinsics::cosf64,\n+    fn exp(n: f64) -> f64 = intrinsics::expf64,\n+    fn exp2(n: f64) -> f64 = intrinsics::exp2f64,\n+    fn floor(x: f64) -> f64 = intrinsics::floorf64,\n+    fn ln(n: f64) -> f64 = intrinsics::logf64,\n+    fn log10(n: f64) -> f64 = intrinsics::log10f64,\n+    fn log2(n: f64) -> f64 = intrinsics::log2f64,\n+    fn mul_add(a: f64, b: f64, c: f64) -> f64 = intrinsics::fmaf64,\n+    fn pow(n: f64, e: f64) -> f64 = intrinsics::powf64,\n+    fn powi(n: f64, e: c_int) -> f64 = intrinsics::powif64,\n+    fn sin(n: f64) -> f64 = intrinsics::sinf64,\n+    fn sqrt(n: f64) -> f64 = intrinsics::sqrtf64,\n+\n+    // LLVM 3.3 required to use intrinsics for these four\n+    fn ceil(n: c_double) -> c_double = c_double_utils::ceil,\n+    fn trunc(n: c_double) -> c_double = c_double_utils::trunc,\n+    /*\n+    fn ceil(n: f64) -> f64 = intrinsics::ceilf64,\n+    fn trunc(n: f64) -> f64 = intrinsics::truncf64,\n+    fn rint(n: c_double) -> c_double = intrinsics::rintf64,\n+    fn nearbyint(n: c_double) -> c_double = intrinsics::nearbyintf64,\n+    */\n+\n+    // cmath\n+    fn acos(n: c_double) -> c_double = c_double_utils::acos,\n+    fn asin(n: c_double) -> c_double = c_double_utils::asin,\n+    fn atan(n: c_double) -> c_double = c_double_utils::atan,\n+    fn atan2(a: c_double, b: c_double) -> c_double = c_double_utils::atan2,\n+    fn cbrt(n: c_double) -> c_double = c_double_utils::cbrt,\n+    fn copysign(x: c_double, y: c_double) -> c_double = c_double_utils::copysign,\n+    fn cosh(n: c_double) -> c_double = c_double_utils::cosh,\n+    fn erf(n: c_double) -> c_double = c_double_utils::erf,\n+    fn erfc(n: c_double) -> c_double = c_double_utils::erfc,\n+    fn expm1(n: c_double) -> c_double = c_double_utils::expm1,\n+    fn abs_sub(a: c_double, b: c_double) -> c_double = c_double_utils::abs_sub,\n+    fn fmax(a: c_double, b: c_double) -> c_double = c_double_utils::fmax,\n+    fn fmin(a: c_double, b: c_double) -> c_double = c_double_utils::fmin,\n+    fn nextafter(x: c_double, y: c_double) -> c_double = c_double_utils::nextafter,\n+    fn frexp(n: c_double, value: &mut c_int) -> c_double = c_double_utils::frexp,\n+    fn hypot(x: c_double, y: c_double) -> c_double = c_double_utils::hypot,\n+    fn ldexp(x: c_double, n: c_int) -> c_double = c_double_utils::ldexp,\n+    fn lgamma(n: c_double, sign: &mut c_int) -> c_double = c_double_utils::lgamma,\n+    fn log_radix(n: c_double) -> c_double = c_double_utils::log_radix,\n+    fn ln1p(n: c_double) -> c_double = c_double_utils::ln1p,\n+    fn ilog_radix(n: c_double) -> c_int = c_double_utils::ilog_radix,\n+    fn modf(n: c_double, iptr: &mut c_double) -> c_double = c_double_utils::modf,\n+    fn round(n: c_double) -> c_double = c_double_utils::round,\n+    fn ldexp_radix(n: c_double, i: c_int) -> c_double = c_double_utils::ldexp_radix,\n+    fn sinh(n: c_double) -> c_double = c_double_utils::sinh,\n+    fn tan(n: c_double) -> c_double = c_double_utils::tan,\n+    fn tanh(n: c_double) -> c_double = c_double_utils::tanh,\n+    fn tgamma(n: c_double) -> c_double = c_double_utils::tgamma,\n+    fn j0(n: c_double) -> c_double = c_double_utils::j0,\n+    fn j1(n: c_double) -> c_double = c_double_utils::j1,\n+    fn jn(i: c_int, n: c_double) -> c_double = c_double_utils::jn,\n+    fn y0(n: c_double) -> c_double = c_double_utils::y0,\n+    fn y1(n: c_double) -> c_double = c_double_utils::y1,\n+    fn yn(i: c_int, n: c_double) -> c_double = c_double_utils::yn)\n \n // FIXME (#1433): obtain these in a different way\n \n@@ -218,9 +226,6 @@ pub fn is_finite(x: f64) -> bool {\n     return !(is_NaN(x) || is_infinite(x));\n }\n \n-/// Returns `x` rounded down\n-#[inline(always)]\n-pub fn floor(x: f64) -> f64 { unsafe { floorf64(x) } }\n \n // FIXME (#1999): add is_normal, is_subnormal, and fpclassify\n "}, {"sha": "c9cda20640d569666587d7461f500da418fdf788", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9c54f83877c813964923f6a00ece8804ae4f3b8/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c54f83877c813964923f6a00ece8804ae4f3b8/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=d9c54f83877c813964923f6a00ece8804ae4f3b8", "patch": "@@ -36,7 +36,7 @@ pub use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n pub use f64::{erf, erfc, exp, expm1, exp2, abs_sub};\n pub use f64::{mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp};\n pub use f64::{lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix};\n-pub use f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n+pub use f64::{modf, pow, powi, round, sinh, tanh, tgamma, trunc};\n pub use f64::signbit;\n pub use f64::{j0, j1, jn, y0, y1, yn};\n "}]}