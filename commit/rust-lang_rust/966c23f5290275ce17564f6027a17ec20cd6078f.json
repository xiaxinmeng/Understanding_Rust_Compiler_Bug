{"sha": "966c23f5290275ce17564f6027a17ec20cd6078f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NmMyM2Y1MjkwMjc1Y2UxNzU2NGY2MDI3YTE3ZWMyMGNkNjA3OGY=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-17T00:27:56Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-17T00:27:56Z"}, "message": "avoid converting types into themselves via .into() (clippy::useless-conversion)\n\nexample: let x: String = String::from(\"hello world\").into();", "tree": {"sha": "9e977a29eaf10d1733340563ef31fda064e37400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e977a29eaf10d1733340563ef31fda064e37400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/966c23f5290275ce17564f6027a17ec20cd6078f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/966c23f5290275ce17564f6027a17ec20cd6078f", "html_url": "https://github.com/rust-lang/rust/commit/966c23f5290275ce17564f6027a17ec20cd6078f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/966c23f5290275ce17564f6027a17ec20cd6078f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e6940efb42675226adb8d2856c095b8dce36c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e6940efb42675226adb8d2856c095b8dce36c5", "html_url": "https://github.com/rust-lang/rust/commit/83e6940efb42675226adb8d2856c095b8dce36c5"}], "stats": {"total": 117, "additions": 56, "deletions": 61}, "files": [{"sha": "8d4641355723a65d036532745d2cb207d6a010c1", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -197,7 +197,7 @@ impl ChangeFixture {\n \n             change.change_file(file_id, Some(Arc::new(text)));\n             let path = VfsPath::new_virtual_path(meta.path);\n-            file_set.insert(file_id, path.into());\n+            file_set.insert(file_id, path);\n             files.push(file_id);\n             file_id.0 += 1;\n         }"}, {"sha": "b9c6959214f8562c9d41ce02f0944e4348d83690", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -124,5 +124,5 @@ fn resolve_doc_path(\n         Some(Namespace::Macros) => return None,\n         None => resolved.iter_items().find_map(|it| it.as_module_def_id())?,\n     };\n-    Some(def.into())\n+    Some(def)\n }"}, {"sha": "861b7329ef32a7a4384e7a63a5158815e6feced8", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -1335,7 +1335,7 @@ impl Local {\n \n     // FIXME: why is this an option? It shouldn't be?\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n-        let body = db.body(self.parent.into());\n+        let body = db.body(self.parent);\n         match &body[self.pat_id] {\n             Pat::Bind { name, .. } => Some(name.clone()),\n             _ => None,\n@@ -1347,7 +1347,7 @@ impl Local {\n     }\n \n     pub fn is_mut(self, db: &dyn HirDatabase) -> bool {\n-        let body = db.body(self.parent.into());\n+        let body = db.body(self.parent);\n         matches!(&body[self.pat_id], Pat::Bind { mode: BindingAnnotation::Mutable, .. })\n     }\n \n@@ -1360,15 +1360,15 @@ impl Local {\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n-        let def = DefWithBodyId::from(self.parent);\n+        let def = self.parent;\n         let infer = db.infer(def);\n         let ty = infer[self.pat_id].clone();\n         let krate = def.module(db.upcast()).krate();\n         Type::new(db, krate, def, ty)\n     }\n \n     pub fn source(self, db: &dyn HirDatabase) -> InFile<Either<ast::IdentPat, ast::SelfParam>> {\n-        let (_body, source_map) = db.body_with_source_map(self.parent.into());\n+        let (_body, source_map) = db.body_with_source_map(self.parent);\n         let src = source_map.pat_syntax(self.pat_id).unwrap(); // Hmm...\n         let root = src.file_syntax(db.upcast());\n         src.map(|ast| {\n@@ -1393,12 +1393,12 @@ impl Label {\n     }\n \n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n-        let body = db.body(self.parent.into());\n+        let body = db.body(self.parent);\n         body[self.label_id].name.clone()\n     }\n \n     pub fn source(self, db: &dyn HirDatabase) -> InFile<ast::Label> {\n-        let (_body, source_map) = db.body_with_source_map(self.parent.into());\n+        let (_body, source_map) = db.body_with_source_map(self.parent);\n         let src = source_map.label_syntax(self.label_id);\n         let root = src.file_syntax(db.upcast());\n         src.map(|ast| ast.to_node(&root))"}, {"sha": "00b076175ee061fa78a3eda8c1553a63b874e984", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -835,7 +835,7 @@ impl<'a> SemanticsScope<'a> {\n                 resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n                 resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(id.into()),\n                 resolver::ScopeDef::Local(pat_id) => {\n-                    let parent = resolver.body_owner().unwrap().into();\n+                    let parent = resolver.body_owner().unwrap();\n                     ScopeDef::Local(Local { parent, pat_id })\n                 }\n             };"}, {"sha": "37d162b328a04b392d319884c5d7db5a522b1d0a", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -484,7 +484,7 @@ fn resolve_hir_path_(\n         resolver.resolve_path_in_value_ns_fully(db.upcast(), path.mod_path()).and_then(|val| {\n             let res = match val {\n                 ValueNs::LocalBinding(pat_id) => {\n-                    let var = Local { parent: body_owner?.into(), pat_id };\n+                    let var = Local { parent: body_owner?, pat_id };\n                     PathResolution::Local(var)\n                 }\n                 ValueNs::FunctionId(it) => PathResolution::Def(Function::from(it).into()),"}, {"sha": "b0b4b505214240c1d9ea7fed9f8f550d86e96bdc", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -325,7 +325,7 @@ impl Attrs {\n         if docs.is_empty() {\n             None\n         } else {\n-            Some(Documentation(docs.into()))\n+            Some(Documentation(docs))\n         }\n     }\n }"}, {"sha": "bfe239793c6598a97f0b847c266c450051e65125", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: fn_src.file_id,\n                 ident_type: IdentType::Function,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: replacement.expected_case,\n                 ident_text: replacement.current_name.to_string(),\n                 suggested_text: replacement.suggested_text,\n@@ -261,7 +261,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: fn_src.file_id,\n                 ident_type: IdentType::Argument,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: param_to_rename.expected_case,\n                 ident_text: param_to_rename.current_name.to_string(),\n                 suggested_text: param_to_rename.suggested_text,\n@@ -313,7 +313,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n                         let diagnostic = IncorrectCase {\n                             file: source_ptr.file_id,\n                             ident_type: IdentType::Variable,\n-                            ident: AstPtr::new(&name_ast).into(),\n+                            ident: AstPtr::new(&name_ast),\n                             expected_case: replacement.expected_case,\n                             ident_text: replacement.current_name.to_string(),\n                             suggested_text: replacement.suggested_text,\n@@ -403,7 +403,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: struct_src.file_id,\n                 ident_type: IdentType::Structure,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: replacement.expected_case,\n                 ident_text: replacement.current_name.to_string(),\n                 suggested_text: replacement.suggested_text,\n@@ -448,7 +448,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: struct_src.file_id,\n                 ident_type: IdentType::Field,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: field_to_rename.expected_case,\n                 ident_text: field_to_rename.current_name.to_string(),\n                 suggested_text: field_to_rename.suggested_text,\n@@ -527,7 +527,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: enum_src.file_id,\n                 ident_type: IdentType::Enum,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: replacement.expected_case,\n                 ident_text: replacement.current_name.to_string(),\n                 suggested_text: replacement.suggested_text,\n@@ -572,7 +572,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             let diagnostic = IncorrectCase {\n                 file: enum_src.file_id,\n                 ident_type: IdentType::Variant,\n-                ident: AstPtr::new(&ast_ptr).into(),\n+                ident: AstPtr::new(&ast_ptr),\n                 expected_case: variant_to_rename.expected_case,\n                 ident_text: variant_to_rename.current_name.to_string(),\n                 suggested_text: variant_to_rename.suggested_text,\n@@ -617,7 +617,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let diagnostic = IncorrectCase {\n             file: const_src.file_id,\n             ident_type: IdentType::Constant,\n-            ident: AstPtr::new(&ast_ptr).into(),\n+            ident: AstPtr::new(&ast_ptr),\n             expected_case: replacement.expected_case,\n             ident_text: replacement.current_name.to_string(),\n             suggested_text: replacement.suggested_text,\n@@ -665,7 +665,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let diagnostic = IncorrectCase {\n             file: static_src.file_id,\n             ident_type: IdentType::StaticVariable,\n-            ident: AstPtr::new(&ast_ptr).into(),\n+            ident: AstPtr::new(&ast_ptr),\n             expected_case: replacement.expected_case,\n             ident_text: replacement.current_name.to_string(),\n             suggested_text: replacement.suggested_text,"}, {"sha": "71b2cade0881b71c4c81251ef5cb220c7afdb1ce", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     pub(super) fn validate_body(&mut self, db: &dyn HirDatabase) {\n         self.check_for_filter_map_next(db);\n \n-        let body = db.body(self.owner.into());\n+        let body = db.body(self.owner);\n \n         for (id, expr) in body.exprs.iter() {\n             if let Some((variant_def, missed_fields, true)) =\n@@ -98,7 +98,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         missed_fields: Vec<LocalFieldId>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n-        let (_, source_map) = db.body_with_source_map(self.owner.into());\n+        let (_, source_map) = db.body_with_source_map(self.owner);\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n             let root = source_ptr.file_syntax(db.upcast());\n@@ -128,7 +128,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         missed_fields: Vec<LocalFieldId>,\n     ) {\n         // XXX: only look at source_map if we do have missing fields\n-        let (_, source_map) = db.body_with_source_map(self.owner.into());\n+        let (_, source_map) = db.body_with_source_map(self.owner);\n \n         if let Ok(source_ptr) = source_map.pat_syntax(id) {\n             if let Some(expr) = source_ptr.value.as_ref().left() {\n@@ -175,7 +175,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         // Search function body for instances of .filter_map(..).next()\n-        let body = db.body(self.owner.into());\n+        let body = db.body(self.owner);\n         let mut prev = None;\n         for (id, expr) in body.exprs.iter() {\n             if let Expr::MethodCall { receiver, .. } = expr {\n@@ -192,7 +192,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 if function_id == *next_function_id {\n                     if let Some(filter_map_id) = prev {\n                         if *receiver == filter_map_id {\n-                            let (_, source_map) = db.body_with_source_map(self.owner.into());\n+                            let (_, source_map) = db.body_with_source_map(self.owner);\n                             if let Ok(next_source_ptr) = source_map.expr_syntax(id) {\n                                 self.sink.push(ReplaceFilterMapNextWithFindMap {\n                                     file: next_source_ptr.file_id,\n@@ -262,7 +262,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let mut arg_count = args.len();\n \n         if arg_count != param_count {\n-            let (_, source_map) = db.body_with_source_map(self.owner.into());\n+            let (_, source_map) = db.body_with_source_map(self.owner);\n             if let Ok(source_ptr) = source_map.expr_syntax(call_id) {\n                 if is_method_call {\n                     param_count -= 1;\n@@ -287,7 +287,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         infer: Arc<InferenceResult>,\n     ) {\n         let (body, source_map): (Arc<Body>, Arc<BodySourceMap>) =\n-            db.body_with_source_map(self.owner.into());\n+            db.body_with_source_map(self.owner);\n \n         let match_expr_ty = if infer.type_of_expr[match_expr].is_unknown() {\n             return;\n@@ -393,7 +393,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         if params.len() > 0 && params[0] == mismatch.actual {\n-            let (_, source_map) = db.body_with_source_map(self.owner.into());\n+            let (_, source_map) = db.body_with_source_map(self.owner);\n \n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n                 self.sink.push(MissingOkOrSomeInTailExpr {\n@@ -425,7 +425,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             return;\n         }\n \n-        let (_, source_map) = db.body_with_source_map(self.owner.into());\n+        let (_, source_map) = db.body_with_source_map(self.owner);\n \n         if let Ok(source_ptr) = source_map.expr_syntax(possible_tail_id) {\n             self.sink"}, {"sha": "1f49a49096eda96aa3821507e8767e85da4dab94", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n     }\n \n     pub(super) fn validate_body(&mut self, db: &dyn HirDatabase) {\n-        let def = self.owner.into();\n+        let def = self.owner;\n         let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n         let is_unsafe = match self.owner {\n             DefWithBodyId::FunctionId(it) => db.function_data(it).qualifier.is_unsafe,"}, {"sha": "d969527dc90c2c08d04edb0aa63cac5d4876f89f", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -52,7 +52,7 @@ impl ToChalk for Ty {\n \n             TyKind::Tuple(cardinality, substs) => {\n                 let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::Tuple(cardinality.into(), substitution).intern(&Interner)\n+                chalk_ir::TyKind::Tuple(cardinality, substitution).intern(&Interner)\n             }\n             TyKind::Raw(mutability, ty) => {\n                 let ty = ty.to_chalk(db);"}, {"sha": "2f840909c1c53dfe87960e2ae39500ef0067d7a5", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -180,7 +180,7 @@ fn missing_record_expr_field_fix(\n     let def_id = sema.resolve_variant(record_lit)?;\n     let module;\n     let def_file_id;\n-    let record_fields = match VariantDef::from(def_id) {\n+    let record_fields = match def_id {\n         VariantDef::Struct(s) => {\n             module = s.module(sema.db);\n             let source = s.source(sema.db)?;"}, {"sha": "09882c4f310edef56ab2bde5fddf615d68944351", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -56,7 +56,7 @@ impl Builder {\n \n impl Completions {\n     pub(crate) fn add(&mut self, item: CompletionItem) {\n-        self.buf.push(item.into())\n+        self.buf.push(item)\n     }\n \n     pub(crate) fn add_all<I>(&mut self, items: I)"}, {"sha": "3f1c6730b4642f940bb00997babfb2ebebbe4217", "filename": "crates/ide_completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -89,7 +89,7 @@ enum State {\n impl FormatStrParser {\n     pub(crate) fn new(input: String) -> Self {\n         Self {\n-            input: input.into(),\n+            input: input,\n             output: String::new(),\n             extracted_expressions: Vec::new(),\n             state: State::NotExpr,"}, {"sha": "75167ff3942b6b444b4431d1eda35848a8c8a3d7", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -181,7 +181,7 @@ impl NameClass {\n                 },\n                 ast::SelfParam(it) => {\n                     let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::Local(def.into())))\n+                    Some(NameClass::Definition(Definition::Local(def)))\n                 },\n                 ast::RecordField(it) => {\n                     let field: hir::Field = sema.to_def(&it)?;"}, {"sha": "9e0cb91c3fc2f98e385e20ca47b3ee36989dbd03", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -80,7 +80,7 @@ impl ImportScope {\n             })\n             .last()\n             .map(|last_inner_element| {\n-                (InsertPosition::After(last_inner_element.into()), AddBlankLine::BeforeTwice)\n+                (InsertPosition::After(last_inner_element), AddBlankLine::BeforeTwice)\n             })\n             .unwrap_or_else(|| self.first_insert_pos())\n     }"}, {"sha": "bd8ea6452c19a978bca43b21d8ec89b528f1cb71", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -120,7 +120,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n                 Some(\"pat\") => parent.token_trees.push(make_ident(\"foo\")),\n                 Some(\"path\") => parent.token_trees.push(make_ident(\"foo\")),\n                 Some(\"literal\") => parent.token_trees.push(make_literal(\"1\")),\n-                Some(\"expr\") => parent.token_trees.push(make_ident(\"foo\").into()),\n+                Some(\"expr\") => parent.token_trees.push(make_ident(\"foo\")),\n                 Some(\"lifetime\") => {\n                     parent.token_trees.push(make_punct('\\''));\n                     parent.token_trees.push(make_ident(\"a\"));\n@@ -157,17 +157,15 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n                     if i + 1 != cnt {\n                         if let Some(sep) = separator {\n                             match sep {\n-                                Separator::Literal(it) => parent\n-                                    .token_trees\n-                                    .push(tt::Leaf::Literal(it.clone().into()).into()),\n-                                Separator::Ident(it) => parent\n-                                    .token_trees\n-                                    .push(tt::Leaf::Ident(it.clone().into()).into()),\n+                                Separator::Literal(it) => {\n+                                    parent.token_trees.push(tt::Leaf::Literal(it.clone()).into())\n+                                }\n+                                Separator::Ident(it) => {\n+                                    parent.token_trees.push(tt::Leaf::Ident(it.clone()).into())\n+                                }\n                                 Separator::Puncts(puncts) => {\n                                     for it in puncts {\n-                                        parent\n-                                            .token_trees\n-                                            .push(tt::Leaf::Punct(it.clone().into()).into())\n+                                        parent.token_trees.push(tt::Leaf::Punct(it.clone()).into())\n                                     }\n                                 }\n                             };"}, {"sha": "1bf7c2e81dc7e5a19f3dcf4fd9e11822f535a378", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -722,7 +722,7 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                     input\n                         .expect_literal()\n                         .map(|literal| {\n-                            let lit = tt::Leaf::from(literal.clone());\n+                            let lit = literal.clone();\n                             match neg {\n                                 None => Some(lit.into()),\n                                 Some(neg) => Some(tt::TokenTree::Subtree(tt::Subtree {"}, {"sha": "85163c4b32b0df10b3916f8ee12029382cffeeca", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -130,7 +130,7 @@ pub fn parse_exprs_with_sep(tt: &tt::Subtree, sep: char) -> Vec<tt::Subtree> {\n         res.push(match expanded.value {\n             None => break,\n             Some(tt @ tt::TokenTree::Leaf(_)) => {\n-                tt::Subtree { delimiter: None, token_trees: vec![tt.into()] }\n+                tt::Subtree { delimiter: None, token_trees: vec![tt] }\n             }\n             Some(tt::TokenTree::Subtree(tt)) => tt,\n         });\n@@ -727,7 +727,7 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n             // Note: We always assume the semi-colon would be the last token in\n             // other parts of RA such that we don't add whitespace here.\n             if curr.spacing == tt::Spacing::Alone && curr.char != ';' {\n-                self.inner.token(WHITESPACE, \" \".into());\n+                self.inner.token(WHITESPACE, \" \");\n                 self.text_pos += TextSize::of(' ');\n             }\n         }"}, {"sha": "25c374b9b262e78d880fee751a858c354b9d1cfc", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -35,7 +35,7 @@ mod rule_parsing {\n     fn test_invalid_arms() {\n         fn check(macro_body: &str, err: ParseError) {\n             let m = parse_macro_arm(macro_body);\n-            assert_eq!(m, Err(err.into()));\n+            assert_eq!(m, Err(err));\n         }\n         check(\"invalid\", ParseError::Expected(\"expected subtree\".into()));\n "}, {"sha": "9a68e2cc5139588a68f0b88b4b33ae579853e742", "filename": "crates/proc_macro_api/src/rpc.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -236,13 +236,10 @@ mod tests {\n         subtree\n             .token_trees\n             .push(TokenTree::Leaf(Ident { text: \"Foo\".into(), id: TokenId(1) }.into()));\n-        subtree.token_trees.push(TokenTree::Subtree(\n-            Subtree {\n-                delimiter: Some(Delimiter { id: TokenId(2), kind: DelimiterKind::Brace }),\n-                token_trees: vec![],\n-            }\n-            .into(),\n-        ));\n+        subtree.token_trees.push(TokenTree::Subtree(Subtree {\n+            delimiter: Some(Delimiter { id: TokenId(2), kind: DelimiterKind::Brace }),\n+            token_trees: vec![],\n+        }));\n         subtree\n     }\n "}, {"sha": "2ac487632f792aa9598b677851117387c14d7448", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -36,7 +36,7 @@ impl Progress {\n \n impl GlobalState {\n     pub(crate) fn show_message(&mut self, typ: lsp_types::MessageType, message: String) {\n-        let message = message.into();\n+        let message = message;\n         self.send_notification::<lsp_types::notification::ShowMessage>(\n             lsp_types::ShowMessageParams { typ, message },\n         )"}, {"sha": "c63fe2915e360705ced3c15d535fee36ca71ab99", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -287,7 +287,7 @@ pub(crate) fn signature_help(\n             let params = call_info\n                 .parameter_ranges()\n                 .iter()\n-                .map(|it| [u32::from(it.start()).into(), u32::from(it.end()).into()])\n+                .map(|it| [u32::from(it.start()), u32::from(it.end())])\n                 .map(|label_offsets| lsp_types::ParameterInformation {\n                     label: lsp_types::ParameterLabel::LabelOffsets(label_offsets),\n                     documentation: None,"}, {"sha": "64fac13a73f83d2afeeda7cd4a737312db4e2219", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -479,7 +479,7 @@ impl ast::MatchArmList {\n             Some(t) => t,\n             None => return self.clone(),\n         };\n-        let position = InsertPosition::Before(r_curly.into());\n+        let position = InsertPosition::Before(r_curly);\n         let arm_ws = tokens::WsBuilder::new(\"    \");\n         let match_indent = &leading_indent(self.syntax()).unwrap_or_default();\n         let match_ws = tokens::WsBuilder::new(&format!(\"\\n{}\", match_indent));"}, {"sha": "442dfa14ae39ce5f6a92702494fc2f5a72cb3767", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966c23f5290275ce17564f6027a17ec20cd6078f/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=966c23f5290275ce17564f6027a17ec20cd6078f", "patch": "@@ -122,5 +122,5 @@ fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken\n     if right.kind() == T![;] || right.kind() == T![,] {\n         return None;\n     }\n-    Some(make::tokens::single_space().into())\n+    Some(make::tokens::single_space())\n }"}]}