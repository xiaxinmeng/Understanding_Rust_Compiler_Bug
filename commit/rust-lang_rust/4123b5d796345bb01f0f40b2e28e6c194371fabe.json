{"sha": "4123b5d796345bb01f0f40b2e28e6c194371fabe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMjNiNWQ3OTYzNDViYjAxZjBmNDBiMmUyOGU2YzE5NDM3MWZhYmU=", "commit": {"author": {"name": "Cedric", "email": "cedric.brancourt@gmail.com", "date": "2019-06-08T10:18:13Z"}, "committer": {"name": "Cedric", "email": "cedric.brancourt@gmail.com", "date": "2019-06-08T10:18:13Z"}, "message": "fix bad style for structs", "tree": {"sha": "fd70212b1e3f20130662bc7a8be714f02343343b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd70212b1e3f20130662bc7a8be714f02343343b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4123b5d796345bb01f0f40b2e28e6c194371fabe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4123b5d796345bb01f0f40b2e28e6c194371fabe", "html_url": "https://github.com/rust-lang/rust/commit/4123b5d796345bb01f0f40b2e28e6c194371fabe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4123b5d796345bb01f0f40b2e28e6c194371fabe/comments", "author": {"login": "Electron-libre", "id": 5979, "node_id": "MDQ6VXNlcjU5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Electron-libre", "html_url": "https://github.com/Electron-libre", "followers_url": "https://api.github.com/users/Electron-libre/followers", "following_url": "https://api.github.com/users/Electron-libre/following{/other_user}", "gists_url": "https://api.github.com/users/Electron-libre/gists{/gist_id}", "starred_url": "https://api.github.com/users/Electron-libre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Electron-libre/subscriptions", "organizations_url": "https://api.github.com/users/Electron-libre/orgs", "repos_url": "https://api.github.com/users/Electron-libre/repos", "events_url": "https://api.github.com/users/Electron-libre/events{/privacy}", "received_events_url": "https://api.github.com/users/Electron-libre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Electron-libre", "id": 5979, "node_id": "MDQ6VXNlcjU5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Electron-libre", "html_url": "https://github.com/Electron-libre", "followers_url": "https://api.github.com/users/Electron-libre/followers", "following_url": "https://api.github.com/users/Electron-libre/following{/other_user}", "gists_url": "https://api.github.com/users/Electron-libre/gists{/gist_id}", "starred_url": "https://api.github.com/users/Electron-libre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Electron-libre/subscriptions", "organizations_url": "https://api.github.com/users/Electron-libre/orgs", "repos_url": "https://api.github.com/users/Electron-libre/repos", "events_url": "https://api.github.com/users/Electron-libre/events{/privacy}", "received_events_url": "https://api.github.com/users/Electron-libre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad91a8e59abca232a3e4449186712c032ab12519", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad91a8e59abca232a3e4449186712c032ab12519", "html_url": "https://github.com/rust-lang/rust/commit/ad91a8e59abca232a3e4449186712c032ab12519"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "b4cf24f5ac51908e4d15de5b4a322a6ed7bc6d8e", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4123b5d796345bb01f0f40b2e28e6c194371fabe/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4123b5d796345bb01f0f40b2e28e6c194371fabe/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=4123b5d796345bb01f0f40b2e28e6c194371fabe", "patch": "@@ -34,7 +34,9 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                    token_tree: &[TokenTree])\n                                    -> Box<dyn MacResult+'cx> {\n     let code = match token_tree {\n-        &[TokenTree::Token(Token { kind: token::Ident(code, _), .. })] => code,\n+        &[\n+            TokenTree::Token(Token { kind: token::Ident(code, _), .. })\n+        ] => code,\n         _ => unreachable!()\n     };\n \n@@ -67,12 +69,16 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                        token_tree: &[TokenTree])\n                                        -> Box<dyn MacResult+'cx> {\n     let (code, description) = match  token_tree {\n-        &[TokenTree::Token(Token { kind: token::Ident(code, _), .. })] => {\n+        &[\n+            TokenTree::Token(Token { kind: token::Ident(code, _), .. })\n+        ] => {\n             (code, None)\n         },\n-        &[TokenTree::Token(Token { kind: token::Ident(code, _), .. }),\n-          TokenTree::Token(Token { kind: token::Comma, .. }),\n-          TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..})] => {\n+        &[\n+            TokenTree::Token(Token { kind: token::Ident(code, _), .. }),\n+            TokenTree::Token(Token { kind: token::Comma, .. }),\n+            TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..})\n+        ] => {\n             (code, Some(symbol))\n         },\n         _ => unreachable!()"}, {"sha": "025972d8ca78b148482de57523246b5c4eafa28b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4123b5d796345bb01f0f40b2e28e6c194371fabe/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4123b5d796345bb01f0f40b2e28e6c194371fabe/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4123b5d796345bb01f0f40b2e28e6c194371fabe", "patch": "@@ -426,34 +426,34 @@ mod tests {\n \n             match tts {\n                 &[\n-                    TokenTree::Token(Token {kind: token::Ident(name_macro_rules, false), ..}),\n-                    TokenTree::Token(Token {kind: token::Not, ..}),\n-                    TokenTree::Token(Token {kind: token::Ident(name_zip, false), ..}),\n+                    TokenTree::Token(Token { kind: token::Ident(name_macro_rules, false), .. }),\n+                    TokenTree::Token(Token { kind: token::Not, .. }),\n+                    TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }),\n                     TokenTree::Delimited(_, macro_delim, ref macro_tts)\n                 ]\n                 if name_macro_rules == sym::macro_rules && name_zip.as_str() == \"zip\" => {\n                     let tts = &macro_tts.trees().collect::<Vec<_>>();\n                     match tts {\n                         &[\n                             TokenTree::Delimited(_, first_delim, ref first_tts),\n-                            TokenTree::Token(Token {kind: token::FatArrow, ..}),\n+                            TokenTree::Token(Token { kind: token::FatArrow, .. }),\n                             TokenTree::Delimited(_, second_delim, ref second_tts),\n                         ]\n                         if macro_delim == token::Paren => {\n                             let tts = &first_tts.trees().collect::<Vec<_>>();\n                             match tts {\n                                 &[\n-                                    TokenTree::Token(Token {kind: token::Dollar, ..}),\n-                                    TokenTree::Token(Token {kind: token::Ident(name, false), ..}),\n+                                    TokenTree::Token(Token { kind: token::Dollar, .. }),\n+                                    TokenTree::Token(Token { kind: token::Ident(name, false), .. }),\n                                 ]\n                                 if first_delim == token::Paren && name.as_str() == \"a\" => {},\n                                 _ => panic!(\"value 3: {:?} {:?}\", first_delim, first_tts),\n                             }\n                             let tts = &second_tts.trees().collect::<Vec<_>>();\n                             match tts {\n                                 &[\n-                                    TokenTree::Token(Token {kind: token::Dollar, ..}),\n-                                    TokenTree::Token(Token {kind: token::Ident(name, false), ..}),\n+                                    TokenTree::Token(Token { kind: token::Dollar, .. }),\n+                                    TokenTree::Token(Token { kind: token::Ident(name, false), .. }),\n                                 ]\n                                 if second_delim == token::Paren && name.as_str() == \"a\" => {},\n                                 _ => panic!(\"value 4: {:?} {:?}\", second_delim, second_tts),"}]}