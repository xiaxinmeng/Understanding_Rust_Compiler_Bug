{"sha": "04b0bc97bb84915f2487743b7dde7993ddb34e5d", "node_id": "C_kwDOAAsO6NoAKDA0YjBiYzk3YmI4NDkxNWYyNDg3NzQzYjdkZGU3OTkzZGRiMzRlNWQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-28T10:22:14Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-29T14:45:17Z"}, "message": "Use futex-based locks and thread parker on FreeBSD.", "tree": {"sha": "490ccb048c9dce0eb555e6a4a56ad9bfc075bf05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490ccb048c9dce0eb555e6a4a56ad9bfc075bf05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b0bc97bb84915f2487743b7dde7993ddb34e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b0bc97bb84915f2487743b7dde7993ddb34e5d", "html_url": "https://github.com/rust-lang/rust/commit/04b0bc97bb84915f2487743b7dde7993ddb34e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b0bc97bb84915f2487743b7dde7993ddb34e5d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f0bcb26def1bccdf3774fc487201258b746fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f0bcb26def1bccdf3774fc487201258b746fca", "html_url": "https://github.com/rust-lang/rust/commit/69f0bcb26def1bccdf3774fc487201258b746fca"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "4f91d48f2f0745f7607ed70a9b3a42a34353f35f", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/04b0bc97bb84915f2487743b7dde7993ddb34e5d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b0bc97bb84915f2487743b7dde7993ddb34e5d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=04b0bc97bb84915f2487743b7dde7993ddb34e5d", "patch": "@@ -2,6 +2,7 @@\n     target_os = \"linux\",\n     target_os = \"android\",\n     all(target_os = \"emscripten\", target_feature = \"atomics\"),\n+    target_os = \"freebsd\",\n     target_os = \"openbsd\",\n     target_os = \"netbsd\",\n     target_os = \"dragonfly\",\n@@ -18,7 +19,12 @@ pub const SYS___futex: i32 = 166;\n /// Returns directly if the futex doesn't hold the expected value.\n ///\n /// Returns false on timeout, and true in all other cases.\n-#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n+#[cfg(any(\n+    target_os = \"linux\",\n+    target_os = \"android\",\n+    target_os = \"freebsd\",\n+    target_os = \"netbsd\"\n+))]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n     use super::time::Timespec;\n     use crate::ptr::null;\n@@ -40,7 +46,26 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n         // absolute time rather than a relative time.\n         let r = unsafe {\n             cfg_if::cfg_if! {\n-                if #[cfg(target_os = \"netbsd\")] {\n+                if #[cfg(target_os = \"freebsd\")] {\n+                    // FreeBSD doesn't have futex(), but it has\n+                    // _umtx_op(UMTX_OP_WAIT_UINT_PRIVATE), which is nearly\n+                    // identical. It supports absolute timeouts through a flag\n+                    // in the _umtx_time struct.\n+                    let umtx_timeout = timespec.map(|t| libc::_umtx_time {\n+                        _timeout: t.t,\n+                        _flags: libc::UMTX_ABSTIME,\n+                        _clockid: libc::CLOCK_MONOTONIC as u32,\n+                    });\n+                    let umtx_timeout_ptr = umtx_timeout.as_ref().map_or(null(), |t| t as *const _);\n+                    let umtx_timeout_size = umtx_timeout.as_ref().map_or(0, |t| crate::mem::size_of_val(t));\n+                    libc::_umtx_op(\n+                        futex as *const AtomicU32 as *mut _,\n+                        libc::UMTX_OP_WAIT_UINT_PRIVATE,\n+                        expected as libc::c_ulong,\n+                        crate::ptr::invalid_mut(umtx_timeout_size),\n+                        umtx_timeout_ptr as *mut _,\n+                    )\n+                } else if #[cfg(target_os = \"netbsd\")] {\n                     // Netbsd's futex syscall takes addr2 and val2 as separate arguments.\n                     // (Both are unused for FUTEX_WAIT[_BITSET].)\n                     libc::syscall(\n@@ -110,6 +135,35 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n     }\n }\n \n+// FreeBSD doesn't tell us how many threads are woken up, so this doesn't return a bool.\n+#[cfg(target_os = \"freebsd\")]\n+pub fn futex_wake(futex: &AtomicU32) {\n+    use crate::ptr::null_mut;\n+    unsafe {\n+        libc::_umtx_op(\n+            futex as *const AtomicU32 as *mut _,\n+            libc::UMTX_OP_WAKE_PRIVATE,\n+            1,\n+            null_mut(),\n+            null_mut(),\n+        )\n+    };\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+pub fn futex_wake_all(futex: &AtomicU32) {\n+    use crate::ptr::null_mut;\n+    unsafe {\n+        libc::_umtx_op(\n+            futex as *const AtomicU32 as *mut _,\n+            libc::UMTX_OP_WAKE_PRIVATE,\n+            i32::MAX as libc::c_ulong,\n+            null_mut(),\n+            null_mut(),\n+        )\n+    };\n+}\n+\n #[cfg(target_os = \"openbsd\")]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n     use crate::convert::TryInto;"}, {"sha": "9c698f89b0dd7019987b025a8eef926900a8c505", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04b0bc97bb84915f2487743b7dde7993ddb34e5d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b0bc97bb84915f2487743b7dde7993ddb34e5d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=04b0bc97bb84915f2487743b7dde7993ddb34e5d", "patch": "@@ -284,8 +284,8 @@ impl RwLock {\n     fn wake_writer(&self) -> bool {\n         self.writer_notify.fetch_add(1, Release);\n         cfg_if::cfg_if! {\n-            if #[cfg(target_os = \"dragonfly\")] {\n-                // DragonFlyBSD doesn't tell us whether it woke up any threads or not.\n+            if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))] {\n+                // FreeBSD and DragonFlyBSD don't tell us whether they woke up any threads or not.\n                 // So, we always return `false` here, as that still results in correct behaviour.\n                 // The downside is an extra syscall in case both readers and writers were waiting,\n                 // and unnecessarily waking up readers when a writer is about to attempt to lock the lock."}, {"sha": "27d007a1051e5ebee395038b25efd816e9e92963", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04b0bc97bb84915f2487743b7dde7993ddb34e5d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b0bc97bb84915f2487743b7dde7993ddb34e5d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=04b0bc97bb84915f2487743b7dde7993ddb34e5d", "patch": "@@ -3,6 +3,7 @@ cfg_if::cfg_if! {\n         target_os = \"linux\",\n         target_os = \"android\",\n         all(target_os = \"emscripten\", target_feature = \"atomics\"),\n+        target_os = \"freebsd\",\n         target_os = \"openbsd\",\n         target_os = \"netbsd\",\n         target_os = \"dragonfly\","}, {"sha": "5305f1f2dee8c2af43ab950cd809bb6dc7486377", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04b0bc97bb84915f2487743b7dde7993ddb34e5d/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b0bc97bb84915f2487743b7dde7993ddb34e5d/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=04b0bc97bb84915f2487743b7dde7993ddb34e5d", "patch": "@@ -3,6 +3,7 @@ cfg_if::cfg_if! {\n         target_os = \"linux\",\n         target_os = \"android\",\n         all(target_arch = \"wasm32\", target_feature = \"atomics\"),\n+        target_os = \"freebsd\",\n         target_os = \"openbsd\",\n         target_os = \"netbsd\",\n         target_os = \"dragonfly\","}]}