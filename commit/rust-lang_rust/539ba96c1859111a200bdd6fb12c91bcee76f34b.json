{"sha": "539ba96c1859111a200bdd6fb12c91bcee76f34b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOWJhOTZjMTg1OTExMWEyMDBiZGQ2ZmIxMmM5MWJjZWU3NmYzNGI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-27T16:20:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-27T16:20:20Z"}, "message": "Rollup merge of #74822 - JohnTitor:no-sigsegv, r=oli-obk\n\nMore ensure stack to avoid segfault with increased `recursion_limit`\n\nFixes #74711\nI do not add the test here since the limit value depends on the machine and it's hard to test the output.\nr? @oli-obk", "tree": {"sha": "21b936024aa6b6c6b232b3f3448247be51d889f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b936024aa6b6c6b232b3f3448247be51d889f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539ba96c1859111a200bdd6fb12c91bcee76f34b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfHv7ECRBK7hj4Ov3rIwAAdHIIAHLrv01zPbxRChhEoiAF/WhF\nOcpsJin27SMeEqA0ZrillNTztwzFiD9NkRFimCzHFS+3Y4BAqsVxttSVq+ZMdXk/\nroP5IWhorkAZJaB7ofBcAKveUNbm8sU56F3Ir1x6RzFI7wYvgIpjq8OvNVddpMjW\nsYQrZAahXUw7eXYQuPPgj2iyCffgYGS18LtnEjeb6+Q1RPDp0kLOtE8i+jq3rwF7\n1Tm+bjCxKh9lYrdeRefO6D9Hlju2cRs7jFC7ZHBEo1Hu0lFEc18D/MQ26vynPbMx\nZTipD9qbBZE3wd1q1JRA3EuiZMpwX1BBfyCU+en16pnSLM6SCwErk3QJkUaMQqs=\n=NGDj\n-----END PGP SIGNATURE-----\n", "payload": "tree 21b936024aa6b6c6b232b3f3448247be51d889f0\nparent c9cdc87d8b58be04a17212a9f72b80562f5de32c\nparent 00b380b8cad11abd07299fd181173b3c9b1d869e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595866820 -0700\ncommitter GitHub <noreply@github.com> 1595866820 -0700\n\nRollup merge of #74822 - JohnTitor:no-sigsegv, r=oli-obk\n\nMore ensure stack to avoid segfault with increased `recursion_limit`\n\nFixes #74711\nI do not add the test here since the limit value depends on the machine and it's hard to test the output.\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539ba96c1859111a200bdd6fb12c91bcee76f34b", "html_url": "https://github.com/rust-lang/rust/commit/539ba96c1859111a200bdd6fb12c91bcee76f34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539ba96c1859111a200bdd6fb12c91bcee76f34b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9cdc87d8b58be04a17212a9f72b80562f5de32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cdc87d8b58be04a17212a9f72b80562f5de32c", "html_url": "https://github.com/rust-lang/rust/commit/c9cdc87d8b58be04a17212a9f72b80562f5de32c"}, {"sha": "00b380b8cad11abd07299fd181173b3c9b1d869e", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b380b8cad11abd07299fd181173b3c9b1d869e", "html_url": "https://github.com/rust-lang/rust/commit/00b380b8cad11abd07299fd181173b3c9b1d869e"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "432abee6d1cf910d71fa26d35c360e111e848515", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/539ba96c1859111a200bdd6fb12c91bcee76f34b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539ba96c1859111a200bdd6fb12c91bcee76f34b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=539ba96c1859111a200bdd6fb12c91bcee76f34b", "patch": "@@ -7,6 +7,7 @@ use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n use crate::traits::normalize_projection_type;\n \n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -1912,12 +1913,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n                 if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n-                    self.note_obligation_cause_code(\n-                        err,\n-                        &parent_predicate,\n-                        &data.parent_code,\n-                        obligated_types,\n-                    );\n+                    // #74711: avoid a stack overflow\n+                    ensure_sufficient_stack(|| {\n+                        self.note_obligation_cause_code(\n+                            err,\n+                            &parent_predicate,\n+                            &data.parent_code,\n+                            obligated_types,\n+                        )\n+                    });\n                 }\n             }\n             ObligationCauseCode::ImplDerivedObligation(ref data) => {\n@@ -1928,22 +1932,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     parent_trait_ref.skip_binder().self_ty()\n                 ));\n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n-                self.note_obligation_cause_code(\n-                    err,\n-                    &parent_predicate,\n-                    &data.parent_code,\n-                    obligated_types,\n-                );\n+                // #74711: avoid a stack overflow\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        err,\n+                        &parent_predicate,\n+                        &data.parent_code,\n+                        obligated_types,\n+                    )\n+                });\n             }\n             ObligationCauseCode::DerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n-                self.note_obligation_cause_code(\n-                    err,\n-                    &parent_predicate,\n-                    &data.parent_code,\n-                    obligated_types,\n-                );\n+                // #74711: avoid a stack overflow\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        err,\n+                        &parent_predicate,\n+                        &data.parent_code,\n+                        obligated_types,\n+                    )\n+                });\n             }\n             ObligationCauseCode::CompareImplMethodObligation { .. } => {\n                 err.note(&format!("}]}