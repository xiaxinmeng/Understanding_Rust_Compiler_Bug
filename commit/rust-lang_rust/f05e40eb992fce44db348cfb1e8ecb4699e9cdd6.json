{"sha": "f05e40eb992fce44db348cfb1e8ecb4699e9cdd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNWU0MGViOTkyZmNlNDRkYjM0OGNmYjFlOGVjYjQ2OTllOWNkZDY=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-01-01T20:35:08Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-01-13T01:43:00Z"}, "message": "address review comments", "tree": {"sha": "8e8eee8ad2e5294354ff7e22f323bb8a4e21545f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e8eee8ad2e5294354ff7e22f323bb8a4e21545f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6", "html_url": "https://github.com/rust-lang/rust/commit/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a804868bbf578dada5249ac3c79b7b524684c78e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a804868bbf578dada5249ac3c79b7b524684c78e", "html_url": "https://github.com/rust-lang/rust/commit/a804868bbf578dada5249ac3c79b7b524684c78e"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "b999dfa3031035f83157f12b37fd2e0a1ea4c2f3", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=f05e40eb992fce44db348cfb1e8ecb4699e9cdd6", "patch": "@@ -138,8 +138,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if let DefiningTy::Closure(def_id, substs) =\n                     self.regioncx.universal_regions().defining_ty\n                 {\n-                    let closure_kind_ty = substs.as_closure().kind_ty(def_id, self.infcx.tcx);\n-                    return Some(ty::ClosureKind::FnMut) == closure_kind_ty.to_opt_closure_kind();\n+                    return substs.as_closure().kind(def_id, self.infcx.tcx)\n+                        == ty::ClosureKind::FnMut;\n                 }\n             }\n         }\n@@ -160,7 +160,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     // Try to convert the lower-bound region into something named we can print for the user.\n                     let lower_bound_region = self.to_error_region(type_test.lower_bound);\n \n-                    // Skip duplicate-ish errors.\n                     let type_test_span = type_test.locations.span(&self.body);\n \n                     if let Some(lower_bound_region) = lower_bound_region {\n@@ -236,7 +235,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 RegionErrorKind::RegionError { fr_origin, longer_fr, shorter_fr, is_reported } => {\n                     if is_reported {\n-                        self.report_error(\n+                        self.report_region_error(\n                             longer_fr,\n                             fr_origin,\n                             shorter_fr,\n@@ -270,21 +269,21 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     ///\n     /// Here we would be invoked with `fr = 'a` and `outlived_fr = `'b`.\n-    pub(in crate::borrow_check) fn report_error(\n+    pub(in crate::borrow_check) fn report_region_error(\n         &mut self,\n         fr: RegionVid,\n         fr_origin: NLLRegionVariableOrigin,\n         outlived_fr: RegionVid,\n         outlives_suggestion: &mut OutlivesSuggestionBuilder,\n     ) {\n-        debug!(\"report_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n+        debug!(\"report_region_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n \n         let (category, _, span) =\n             self.regioncx.best_blame_constraint(&self.body, fr, fr_origin, |r| {\n                 self.regioncx.provides_universal_region(r, fr, outlived_fr)\n             });\n \n-        debug!(\"report_error: category={:?} {:?}\", category, span);\n+        debug!(\"report_region_error: category={:?} {:?}\", category, span);\n         // Check if we can use one of the \"nice region errors\".\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             let tables = self.infcx.tcx.typeck_tables_of(self.mir_def_id);\n@@ -301,7 +300,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         );\n \n         debug!(\n-            \"report_error: fr_is_local={:?} outlived_fr_is_local={:?} category={:?}\",\n+            \"report_region_error: fr_is_local={:?} outlived_fr_is_local={:?} category={:?}\",\n             fr_is_local, outlived_fr_is_local, category\n         );\n "}, {"sha": "47eb2d8940af402c9c0959fffb678e70d902167a", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=f05e40eb992fce44db348cfb1e8ecb4699e9cdd6", "patch": "@@ -123,9 +123,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///\n     /// This is _not_ idempotent. Call `give_region_a_name` when possible.\n     fn synthesize_region_name(&self) -> Symbol {\n-        let mut counter = self.next_region_name.try_borrow_mut().unwrap();\n-        let c = *counter;\n-        *counter += 1;\n+        let c = self.next_region_name.replace_with(|counter| *counter + 1);\n         Symbol::intern(&format!(\"'{:?}\", c))\n     }\n "}, {"sha": "26d9cf2e0450fe02d82d69d73b6154434b672834", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05e40eb992fce44db348cfb1e8ecb4699e9cdd6/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=f05e40eb992fce44db348cfb1e8ecb4699e9cdd6", "patch": "@@ -846,6 +846,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n             // Type-test failed. Report the error.\n             let erased_generic_kind = infcx.tcx.erase_regions(&type_test.generic_kind);\n+\n+            // Skip duplicate-ish errors.\n             if deduplicate_errors.insert((\n                 erased_generic_kind,\n                 type_test.lower_bound,\n@@ -1850,8 +1852,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         self.scc_values.contains(r_scc, upper)\n     }\n \n-    crate fn universal_regions(&self) -> Rc<UniversalRegions<'tcx>> {\n-        self.universal_regions.clone()\n+    crate fn universal_regions(&self) -> &UniversalRegions<'tcx> {\n+        self.universal_regions.as_ref()\n     }\n \n     /// Tries to find the best constraint to blame for the fact that"}]}