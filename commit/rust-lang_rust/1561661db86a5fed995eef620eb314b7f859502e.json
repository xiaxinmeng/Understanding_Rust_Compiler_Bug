{"sha": "1561661db86a5fed995eef620eb314b7f859502e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NjE2NjFkYjg2YTVmZWQ5OTVlZWY2MjBlYjMxNGI3Zjg1OTUwMmU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-15T06:35:15Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-15T07:39:20Z"}, "message": "add reserve_at_least method to LinearMap/LinearSet", "tree": {"sha": "4ec2e563f8ffade9262745a48d573249501d799d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec2e563f8ffade9262745a48d573249501d799d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1561661db86a5fed995eef620eb314b7f859502e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1561661db86a5fed995eef620eb314b7f859502e", "html_url": "https://github.com/rust-lang/rust/commit/1561661db86a5fed995eef620eb314b7f859502e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1561661db86a5fed995eef620eb314b7f859502e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e809aad3a187a284fc2c8f79dceda891deafc8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e809aad3a187a284fc2c8f79dceda891deafc8a", "html_url": "https://github.com/rust-lang/rust/commit/1e809aad3a187a284fc2c8f79dceda891deafc8a"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "9cc7c2b760c5590b4f3c37afb8c67f90cd73c21d", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1561661db86a5fed995eef620eb314b7f859502e/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1561661db86a5fed995eef620eb314b7f859502e/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=1561661db86a5fed995eef620eb314b7f859502e", "patch": "@@ -51,6 +51,7 @@ pub mod linear {\n         FoundEntry(uint), FoundHole(uint), TableFull\n     }\n \n+    #[inline(always)]\n     pure fn resize_at(capacity: uint) -> uint {\n         ((capacity as float) * 3. / 4.) as uint\n     }\n@@ -126,12 +127,19 @@ pub mod linear {\n             TableFull\n         }\n \n-        /// Expands the capacity of the array and re-inserts each\n-        /// of the existing buckets.\n+        /// Expand the capacity of the array to the next power of two\n+        /// and re-insert each of the existing buckets.\n+        #[inline(always)]\n         fn expand(&mut self) {\n+            let new_capacity = self.buckets.len() * 2;\n+            self.resize(new_capacity);\n+        }\n+\n+        /// Expands the capacity of the array and re-insert each of the\n+        /// existing buckets.\n+        fn resize(&mut self, new_capacity: uint) {\n             let old_capacity = self.buckets.len();\n-            let new_capacity = old_capacity * 2;\n-            self.resize_at = ((new_capacity as float) * 3.0 / 4.0) as uint;\n+            self.resize_at = resize_at(new_capacity);\n \n             let mut old_buckets = vec::from_fn(new_capacity, |_| None);\n             self.buckets <-> old_buckets;\n@@ -331,6 +339,14 @@ pub mod linear {\n             linear_map_with_capacity(INITIAL_CAPACITY)\n         }\n \n+        /// Reserve space for at least `n` elements in the hash table.\n+        fn reserve_at_least(&mut self, n: uint) {\n+            if n > self.buckets.len() {\n+                let buckets = n * 4 / 3 + 1;\n+                self.resize(uint::next_power_of_two(buckets));\n+            }\n+        }\n+\n         fn pop(&mut self, k: &K) -> Option<V> {\n             let hash = k.hash_keyed(self.k0, self.k1) as uint;\n             self.pop_internal(hash, k)\n@@ -562,6 +578,11 @@ pub mod linear {\n     pub impl <T: Hash IterBytes Eq> LinearSet<T> {\n         /// Create an empty LinearSet\n         static fn new() -> LinearSet<T> { LinearSet{map: LinearMap::new()} }\n+\n+        /// Reserve space for at least `n` elements in the hash table.\n+        fn reserve_at_least(&mut self, n: uint) {\n+            self.map.reserve_at_least(n)\n+        }\n     }\n }\n "}]}