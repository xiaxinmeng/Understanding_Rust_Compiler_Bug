{"sha": "dd74ae09297556c38964a26d817c9af384e707ed", "node_id": "C_kwDOAAsO6NoAKGRkNzRhZTA5Mjk3NTU2YzM4OTY0YTI2ZDgxN2M5YWYzODRlNzA3ZWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-26T06:24:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-26T06:24:09Z"}, "message": "Rollup merge of #111951 - cjgillot:uninh-comment, r=Nadrieril\n\nCorrect comment on privately uninhabited pattern.\n\nFollow-up to https://github.com/rust-lang/rust/pull/111624#discussion_r1204767933\n\nr? `@Nadrieril`", "tree": {"sha": "4ac0cf0e0a4fb79fec8bfff45cef5a519dab4205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ac0cf0e0a4fb79fec8bfff45cef5a519dab4205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd74ae09297556c38964a26d817c9af384e707ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkcFCJCRBK7hj4Ov3rIwAA9W4IABZCEAKvfUu08Tn+wUmEn1LQ\nh7dAI7dPR5H3eAZVztyOOW6w5Hn4RBHXdPosBz/fT4xqKwzNPppWGnjZOCX3tw86\ny/Hhrnkt1h/zCTJvaeRyGs0usY2xtlBED75jHZ8YUIjuKN8AafvqO31rPn1FtIeh\nI5xTgfwMEpSbSNw6nAnp9twLt1qwoIPXD9xKKMUotKkcrhUgBUp3l2eLFftxvxRd\n33gIr54MnJfn7d7KMF3yoReuPhimOP23wBC6YWC2oRk5kJanhqhXt7VNJIQ2OEAc\nKB2dKG+2uCuKEn3gFhDIyBWWUHc0EIc5RylO/ufr87HxCBlLkcprcDrXxwRoOoo=\n=tDma\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ac0cf0e0a4fb79fec8bfff45cef5a519dab4205\nparent 39b633ece4d1f874801c13aa482d12f476e7c409\nparent ee27c49dfc33c12b41527948069b125236e74893\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685082249 +0200\ncommitter GitHub <noreply@github.com> 1685082249 +0200\n\nRollup merge of #111951 - cjgillot:uninh-comment, r=Nadrieril\n\nCorrect comment on privately uninhabited pattern.\n\nFollow-up to https://github.com/rust-lang/rust/pull/111624#discussion_r1204767933\n\nr? `@Nadrieril`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd74ae09297556c38964a26d817c9af384e707ed", "html_url": "https://github.com/rust-lang/rust/commit/dd74ae09297556c38964a26d817c9af384e707ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd74ae09297556c38964a26d817c9af384e707ed/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39b633ece4d1f874801c13aa482d12f476e7c409", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b633ece4d1f874801c13aa482d12f476e7c409", "html_url": "https://github.com/rust-lang/rust/commit/39b633ece4d1f874801c13aa482d12f476e7c409"}, {"sha": "ee27c49dfc33c12b41527948069b125236e74893", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee27c49dfc33c12b41527948069b125236e74893", "html_url": "https://github.com/rust-lang/rust/commit/ee27c49dfc33c12b41527948069b125236e74893"}], "stats": {"total": 257, "additions": 179, "deletions": 78}, "files": [{"sha": "1e51cb9aa96e7360b8a992dfb728c34b48e83c2e", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd74ae09297556c38964a26d817c9af384e707ed/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd74ae09297556c38964a26d817c9af384e707ed/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=dd74ae09297556c38964a26d817c9af384e707ed", "patch": "@@ -491,8 +491,8 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n             AdtDefinedHere { adt_def_span, ty, variants }\n         };\n \n-        // Emit an extra note if the first uncovered witness is\n-        // visibly uninhabited anywhere in the current crate.\n+        // Emit an extra note if the first uncovered witness would be uninhabited\n+        // if we disregard visibility.\n         let witness_1_is_privately_uninhabited =\n             if cx.tcx.features().exhaustive_patterns\n                 && let Some(witness_1) = witnesses.get(0)"}, {"sha": "49b6dfca62e5d2193f8e19b4187654b1440365b8", "filename": "tests/ui/pattern/usefulness/empty-match.exhaustive_patterns.stderr", "status": "modified", "additions": 56, "deletions": 38, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/dd74ae09297556c38964a26d817c9af384e707ed/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd74ae09297556c38964a26d817c9af384e707ed/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr?ref=dd74ae09297556c38964a26d817c9af384e707ed", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/empty-match.rs:37:9\n+  --> $DIR/empty-match.rs:58:9\n    |\n LL |         _ => {},\n    |         ^\n@@ -11,37 +11,52 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:40:9\n+  --> $DIR/empty-match.rs:61:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:47:9\n+  --> $DIR/empty-match.rs:68:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:50:9\n+  --> $DIR/empty-match.rs:71:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/empty-match.rs:76:9\n+   |\n+LL |     let None = x;\n+   |         ^^^^ pattern `Some(_)` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: pattern `Some(_)` is currently uninhabited, but this variant contains private fields which may become inhabited in the future\n+   = note: the matched value is of type `Option<SecretlyUninhabitedForeignStruct>`\n+help: you might want to use `if let` to ignore the variant that isn't matched\n+   |\n+LL |     if let None = x { todo!() };\n+   |     ++              +++++++++++\n+\n error: unreachable pattern\n-  --> $DIR/empty-match.rs:57:9\n+  --> $DIR/empty-match.rs:88:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:60:9\n+  --> $DIR/empty-match.rs:91:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/empty-match.rs:78:20\n+  --> $DIR/empty-match.rs:109:20\n    |\n LL |     match_no_arms!(0u8);\n    |                    ^^^\n@@ -50,69 +65,69 @@ LL |     match_no_arms!(0u8);\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n-  --> $DIR/empty-match.rs:79:20\n+  --> $DIR/empty-match.rs:111:20\n    |\n LL |     match_no_arms!(NonEmptyStruct1);\n    |                    ^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyStruct1` defined here\n-  --> $DIR/empty-match.rs:14:8\n+  --> $DIR/empty-match.rs:15:8\n    |\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n-  --> $DIR/empty-match.rs:80:20\n+  --> $DIR/empty-match.rs:113:20\n    |\n LL |     match_no_arms!(NonEmptyStruct2(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyStruct2` defined here\n-  --> $DIR/empty-match.rs:15:8\n+  --> $DIR/empty-match.rs:18:8\n    |\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/empty-match.rs:81:20\n+  --> $DIR/empty-match.rs:115:20\n    |\n LL |     match_no_arms!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyUnion1` defined here\n-  --> $DIR/empty-match.rs:16:7\n+  --> $DIR/empty-match.rs:21:7\n    |\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/empty-match.rs:82:20\n+  --> $DIR/empty-match.rs:117:20\n    |\n LL |     match_no_arms!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyUnion2` defined here\n-  --> $DIR/empty-match.rs:19:7\n+  --> $DIR/empty-match.rs:26:7\n    |\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:83:20\n+  --> $DIR/empty-match.rs:119:20\n    |\n LL |     match_no_arms!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n-  --> $DIR/empty-match.rs:24:5\n+  --> $DIR/empty-match.rs:33:5\n    |\n LL | enum NonEmptyEnum1 {\n    |      -------------\n@@ -122,39 +137,40 @@ LL |     Foo(bool),\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:84:20\n+  --> $DIR/empty-match.rs:122:20\n    |\n LL |     match_no_arms!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n-  --> $DIR/empty-match.rs:27:5\n+  --> $DIR/empty-match.rs:40:5\n    |\n LL | enum NonEmptyEnum2 {\n    |      -------------\n LL |     Foo(bool),\n    |     ^^^ not covered\n+...\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:85:20\n+  --> $DIR/empty-match.rs:125:20\n    |\n LL |     match_no_arms!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n-  --> $DIR/empty-match.rs:30:6\n+  --> $DIR/empty-match.rs:49:6\n    |\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyEnum5`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/empty-match.rs:87:24\n+  --> $DIR/empty-match.rs:129:24\n    |\n LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n@@ -167,13 +183,13 @@ LL +             _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n-  --> $DIR/empty-match.rs:88:24\n+  --> $DIR/empty-match.rs:133:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n    |\n note: `NonEmptyStruct1` defined here\n-  --> $DIR/empty-match.rs:14:8\n+  --> $DIR/empty-match.rs:15:8\n    |\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n@@ -185,13 +201,13 @@ LL +             NonEmptyStruct1 => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n-  --> $DIR/empty-match.rs:89:24\n+  --> $DIR/empty-match.rs:137:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n    |\n note: `NonEmptyStruct2` defined here\n-  --> $DIR/empty-match.rs:15:8\n+  --> $DIR/empty-match.rs:18:8\n    |\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n@@ -203,13 +219,13 @@ LL +             NonEmptyStruct2(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/empty-match.rs:90:24\n+  --> $DIR/empty-match.rs:141:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n note: `NonEmptyUnion1` defined here\n-  --> $DIR/empty-match.rs:16:7\n+  --> $DIR/empty-match.rs:21:7\n    |\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n@@ -221,13 +237,13 @@ LL +             NonEmptyUnion1 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/empty-match.rs:91:24\n+  --> $DIR/empty-match.rs:145:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n note: `NonEmptyUnion2` defined here\n-  --> $DIR/empty-match.rs:19:7\n+  --> $DIR/empty-match.rs:26:7\n    |\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n@@ -239,13 +255,13 @@ LL +             NonEmptyUnion2 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:92:24\n+  --> $DIR/empty-match.rs:149:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n-  --> $DIR/empty-match.rs:24:5\n+  --> $DIR/empty-match.rs:33:5\n    |\n LL | enum NonEmptyEnum1 {\n    |      -------------\n@@ -259,18 +275,19 @@ LL +             NonEmptyEnum1::Foo(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:93:24\n+  --> $DIR/empty-match.rs:153:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n-  --> $DIR/empty-match.rs:27:5\n+  --> $DIR/empty-match.rs:40:5\n    |\n LL | enum NonEmptyEnum2 {\n    |      -------------\n LL |     Foo(bool),\n    |     ^^^ not covered\n+...\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n@@ -281,13 +298,13 @@ LL +             NonEmptyEnum2::Foo(_) | NonEmptyEnum2::Bar => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:94:24\n+  --> $DIR/empty-match.rs:157:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum5::V1);\n    |                        ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n-  --> $DIR/empty-match.rs:30:6\n+  --> $DIR/empty-match.rs:49:6\n    |\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n@@ -298,6 +315,7 @@ LL ~             _ if false => {},\n LL +             _ => todo!()\n    |\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 23 previous errors\n \n-For more information about this error, try `rustc --explain E0004`.\n+Some errors have detailed explanations: E0004, E0005.\n+For more information about an error, try `rustc --explain E0004`."}, {"sha": "f54a3f3364ff960954e8e8878c1033678cd8d575", "filename": "tests/ui/pattern/usefulness/empty-match.normal.stderr", "status": "modified", "additions": 55, "deletions": 38, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/dd74ae09297556c38964a26d817c9af384e707ed/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd74ae09297556c38964a26d817c9af384e707ed/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr?ref=dd74ae09297556c38964a26d817c9af384e707ed", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/empty-match.rs:37:9\n+  --> $DIR/empty-match.rs:58:9\n    |\n LL |         _ => {},\n    |         ^\n@@ -11,37 +11,51 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:40:9\n+  --> $DIR/empty-match.rs:61:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:47:9\n+  --> $DIR/empty-match.rs:68:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:50:9\n+  --> $DIR/empty-match.rs:71:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/empty-match.rs:76:9\n+   |\n+LL |     let None = x;\n+   |         ^^^^ pattern `Some(_)` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `Option<SecretlyUninhabitedForeignStruct>`\n+help: you might want to use `if let` to ignore the variant that isn't matched\n+   |\n+LL |     if let None = x { todo!() };\n+   |     ++              +++++++++++\n+\n error: unreachable pattern\n-  --> $DIR/empty-match.rs:57:9\n+  --> $DIR/empty-match.rs:88:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:60:9\n+  --> $DIR/empty-match.rs:91:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/empty-match.rs:78:20\n+  --> $DIR/empty-match.rs:109:20\n    |\n LL |     match_no_arms!(0u8);\n    |                    ^^^\n@@ -50,69 +64,69 @@ LL |     match_no_arms!(0u8);\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n-  --> $DIR/empty-match.rs:79:20\n+  --> $DIR/empty-match.rs:111:20\n    |\n LL |     match_no_arms!(NonEmptyStruct1);\n    |                    ^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyStruct1` defined here\n-  --> $DIR/empty-match.rs:14:8\n+  --> $DIR/empty-match.rs:15:8\n    |\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n-  --> $DIR/empty-match.rs:80:20\n+  --> $DIR/empty-match.rs:113:20\n    |\n LL |     match_no_arms!(NonEmptyStruct2(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyStruct2` defined here\n-  --> $DIR/empty-match.rs:15:8\n+  --> $DIR/empty-match.rs:18:8\n    |\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/empty-match.rs:81:20\n+  --> $DIR/empty-match.rs:115:20\n    |\n LL |     match_no_arms!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyUnion1` defined here\n-  --> $DIR/empty-match.rs:16:7\n+  --> $DIR/empty-match.rs:21:7\n    |\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/empty-match.rs:82:20\n+  --> $DIR/empty-match.rs:117:20\n    |\n LL |     match_no_arms!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyUnion2` defined here\n-  --> $DIR/empty-match.rs:19:7\n+  --> $DIR/empty-match.rs:26:7\n    |\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:83:20\n+  --> $DIR/empty-match.rs:119:20\n    |\n LL |     match_no_arms!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n-  --> $DIR/empty-match.rs:24:5\n+  --> $DIR/empty-match.rs:33:5\n    |\n LL | enum NonEmptyEnum1 {\n    |      -------------\n@@ -122,39 +136,40 @@ LL |     Foo(bool),\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:84:20\n+  --> $DIR/empty-match.rs:122:20\n    |\n LL |     match_no_arms!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n-  --> $DIR/empty-match.rs:27:5\n+  --> $DIR/empty-match.rs:40:5\n    |\n LL | enum NonEmptyEnum2 {\n    |      -------------\n LL |     Foo(bool),\n    |     ^^^ not covered\n+...\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:85:20\n+  --> $DIR/empty-match.rs:125:20\n    |\n LL |     match_no_arms!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n-  --> $DIR/empty-match.rs:30:6\n+  --> $DIR/empty-match.rs:49:6\n    |\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyEnum5`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/empty-match.rs:87:24\n+  --> $DIR/empty-match.rs:129:24\n    |\n LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n@@ -167,13 +182,13 @@ LL +             _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n-  --> $DIR/empty-match.rs:88:24\n+  --> $DIR/empty-match.rs:133:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n    |\n note: `NonEmptyStruct1` defined here\n-  --> $DIR/empty-match.rs:14:8\n+  --> $DIR/empty-match.rs:15:8\n    |\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n@@ -185,13 +200,13 @@ LL +             NonEmptyStruct1 => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n-  --> $DIR/empty-match.rs:89:24\n+  --> $DIR/empty-match.rs:137:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n    |\n note: `NonEmptyStruct2` defined here\n-  --> $DIR/empty-match.rs:15:8\n+  --> $DIR/empty-match.rs:18:8\n    |\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n@@ -203,13 +218,13 @@ LL +             NonEmptyStruct2(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/empty-match.rs:90:24\n+  --> $DIR/empty-match.rs:141:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n note: `NonEmptyUnion1` defined here\n-  --> $DIR/empty-match.rs:16:7\n+  --> $DIR/empty-match.rs:21:7\n    |\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n@@ -221,13 +236,13 @@ LL +             NonEmptyUnion1 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/empty-match.rs:91:24\n+  --> $DIR/empty-match.rs:145:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n note: `NonEmptyUnion2` defined here\n-  --> $DIR/empty-match.rs:19:7\n+  --> $DIR/empty-match.rs:26:7\n    |\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n@@ -239,13 +254,13 @@ LL +             NonEmptyUnion2 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:92:24\n+  --> $DIR/empty-match.rs:149:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n-  --> $DIR/empty-match.rs:24:5\n+  --> $DIR/empty-match.rs:33:5\n    |\n LL | enum NonEmptyEnum1 {\n    |      -------------\n@@ -259,18 +274,19 @@ LL +             NonEmptyEnum1::Foo(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:93:24\n+  --> $DIR/empty-match.rs:153:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n-  --> $DIR/empty-match.rs:27:5\n+  --> $DIR/empty-match.rs:40:5\n    |\n LL | enum NonEmptyEnum2 {\n    |      -------------\n LL |     Foo(bool),\n    |     ^^^ not covered\n+...\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n@@ -281,13 +297,13 @@ LL +             NonEmptyEnum2::Foo(_) | NonEmptyEnum2::Bar => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:94:24\n+  --> $DIR/empty-match.rs:157:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum5::V1);\n    |                        ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n-  --> $DIR/empty-match.rs:30:6\n+  --> $DIR/empty-match.rs:49:6\n    |\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n@@ -298,6 +314,7 @@ LL ~             _ if false => {},\n LL +             _ => todo!()\n    |\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 23 previous errors\n \n-For more information about this error, try `rustc --explain E0004`.\n+Some errors have detailed explanations: E0004, E0005.\n+For more information about an error, try `rustc --explain E0004`."}, {"sha": "062241faa4cf22cfe9c70e6aee0175b259d4e52b", "filename": "tests/ui/pattern/usefulness/empty-match.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dd74ae09297556c38964a26d817c9af384e707ed/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd74ae09297556c38964a26d817c9af384e707ed/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs?ref=dd74ae09297556c38964a26d817c9af384e707ed", "patch": "@@ -6,28 +6,49 @@\n #![feature(never_type_fallback)]\n #![cfg_attr(exhaustive_patterns, feature(exhaustive_patterns))]\n #![deny(unreachable_patterns)]\n+//~^ NOTE the lint level is defined here\n \n extern crate empty;\n \n enum EmptyEnum {}\n \n struct NonEmptyStruct1;\n+//~^ NOTE `NonEmptyStruct1` defined here\n+//~| NOTE `NonEmptyStruct1` defined here\n struct NonEmptyStruct2(bool);\n+//~^ NOTE `NonEmptyStruct2` defined here\n+//~| NOTE `NonEmptyStruct2` defined here\n union NonEmptyUnion1 {\n+    //~^ NOTE `NonEmptyUnion1` defined here\n+    //~| NOTE `NonEmptyUnion1` defined here\n     foo: (),\n }\n union NonEmptyUnion2 {\n+    //~^ NOTE `NonEmptyUnion2` defined here\n+    //~| NOTE `NonEmptyUnion2` defined here\n     foo: (),\n     bar: (),\n }\n enum NonEmptyEnum1 {\n     Foo(bool),\n+    //~^ NOTE `NonEmptyEnum1` defined here\n+    //~| NOTE `NonEmptyEnum1` defined here\n+    //~| NOTE not covered\n+    //~| NOTE not covered\n }\n enum NonEmptyEnum2 {\n     Foo(bool),\n+    //~^ NOTE `NonEmptyEnum2` defined here\n+    //~| NOTE `NonEmptyEnum2` defined here\n+    //~| NOTE not covered\n+    //~| NOTE not covered\n     Bar,\n+    //~^ NOTE not covered\n+    //~| NOTE not covered\n }\n enum NonEmptyEnum5 {\n+    //~^ NOTE `NonEmptyEnum5` defined here\n+    //~| NOTE `NonEmptyEnum5` defined here\n     V1, V2, V3, V4, V5,\n }\n \n@@ -51,6 +72,16 @@ fn empty_foreign_enum(x: empty::EmptyForeignEnum) {\n     }\n }\n \n+fn empty_foreign_enum_private(x: Option<empty::SecretlyUninhabitedForeignStruct>) {\n+    let None = x;\n+    //~^ ERROR refutable pattern in local binding\n+    //~| NOTE `let` bindings require an \"irrefutable pattern\"\n+    //~| NOTE for more information, visit\n+    //~| NOTE the matched value is of type\n+    //~| NOTE pattern `Some(_)` not covered\n+    //[exhaustive_patterns]~| NOTE currently uninhabited, but this variant contains private fields\n+}\n+\n fn never(x: !) {\n     match x {} // ok\n     match x {\n@@ -76,20 +107,55 @@ macro_rules! match_guarded_arm {\n \n fn main() {\n     match_no_arms!(0u8); //~ ERROR type `u8` is non-empty\n+                         //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyStruct1); //~ ERROR type `NonEmptyStruct1` is non-empty\n+                                     //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyStruct2(true)); //~ ERROR type `NonEmptyStruct2` is non-empty\n+                                           //~| NOTE the matched value is of type\n     match_no_arms!((NonEmptyUnion1 { foo: () })); //~ ERROR type `NonEmptyUnion1` is non-empty\n+                                                  //~| NOTE the matched value is of type\n     match_no_arms!((NonEmptyUnion2 { foo: () })); //~ ERROR type `NonEmptyUnion2` is non-empty\n+                                                  //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyEnum1::Foo(true)); //~ ERROR `NonEmptyEnum1::Foo(_)` not covered\n+                                              //~| NOTE pattern `NonEmptyEnum1::Foo(_)` not covered\n+                                              //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyEnum2::Foo(true)); //~ ERROR `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n+                                              //~| NOTE patterns `NonEmptyEnum2::Foo(_)` and\n+                                              //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyEnum5::V1); //~ ERROR `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n+                                       //~| NOTE patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`\n+                                       //~| NOTE the matched value is of type\n \n     match_guarded_arm!(0u8); //~ ERROR `_` not covered\n+                             //~| NOTE the matched value is of type\n+                             //~| NOTE pattern `_` not covered\n+                             //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyStruct1); //~ ERROR `NonEmptyStruct1` not covered\n+                                         //~| NOTE pattern `NonEmptyStruct1` not covered\n+                                         //~| NOTE the matched value is of type\n+                                         //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyStruct2(true)); //~ ERROR `NonEmptyStruct2(_)` not covered\n+                                               //~| NOTE the matched value is of type\n+                                               //~| NOTE pattern `NonEmptyStruct2(_)` not covered\n+                                               //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!((NonEmptyUnion1 { foo: () })); //~ ERROR `NonEmptyUnion1 { .. }` not covered\n+                                                      //~| NOTE the matched value is of type\n+                                                      //~| NOTE pattern `NonEmptyUnion1 { .. }` not covered\n+                                                      //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!((NonEmptyUnion2 { foo: () })); //~ ERROR `NonEmptyUnion2 { .. }` not covered\n+                                                      //~| NOTE the matched value is of type\n+                                                      //~| NOTE pattern `NonEmptyUnion2 { .. }` not covered\n+                                                      //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyEnum1::Foo(true)); //~ ERROR `NonEmptyEnum1::Foo(_)` not covered\n+                                                  //~| NOTE the matched value is of type\n+                                                  //~| NOTE pattern `NonEmptyEnum1::Foo(_)` not covered\n+                                                  //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyEnum2::Foo(true)); //~ ERROR `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n+                                                  //~| NOTE the matched value is of type\n+                                                  //~| NOTE patterns `NonEmptyEnum2::Foo(_)` and\n+                                                  //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyEnum5::V1); //~ ERROR `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n+                                           //~| NOTE the matched value is of type\n+                                           //~| NOTE patterns `NonEmptyEnum5::V1`,\n+                                           //~| NOTE in this expansion of match_guarded_arm!\n }"}]}