{"sha": "d203c13db23fe0f0d39b448e6926beaad9b550a4", "node_id": "C_kwDOAAsO6NoAKGQyMDNjMTNkYjIzZmUwZjBkMzliNDQ4ZTY5MjZiZWFhZDliNTUwYTQ", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-15T00:18:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-15T15:47:04Z"}, "message": "simply the IfEq bound -- we only ever use a region\n\nthe excessive generality becomes annoying later because\nit wouldn't implement type folding etc", "tree": {"sha": "6f16c6c5a2b67c07f74da776325534a528b945a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f16c6c5a2b67c07f74da776325534a528b945a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d203c13db23fe0f0d39b448e6926beaad9b550a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d203c13db23fe0f0d39b448e6926beaad9b550a4", "html_url": "https://github.com/rust-lang/rust/commit/d203c13db23fe0f0d39b448e6926beaad9b550a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d203c13db23fe0f0d39b448e6926beaad9b550a4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966", "html_url": "https://github.com/rust-lang/rust/commit/1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "228e88b33cf2ed14a5fc6ab996e2ce14a763458d", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d203c13db23fe0f0d39b448e6926beaad9b550a4/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d203c13db23fe0f0d39b448e6926beaad9b550a4/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=d203c13db23fe0f0d39b448e6926beaad9b550a4", "patch": "@@ -1170,9 +1170,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"eval_verify_bound(lower_bound={:?}, verify_bound={:?})\", lower_bound, verify_bound);\n \n         match verify_bound {\n-            VerifyBound::IfEq(test_ty, verify_bound1) => {\n-                self.eval_if_eq(tcx, body, generic_ty, lower_bound, *test_ty, verify_bound1)\n-            }\n+            VerifyBound::IfEq(test_ty, verify_bound1) => self.eval_if_eq(\n+                tcx,\n+                body,\n+                generic_ty,\n+                lower_bound,\n+                *test_ty,\n+                &VerifyBound::OutlivedBy(*verify_bound1),\n+            ),\n \n             VerifyBound::IsEmpty => {\n                 let lower_bound_scc = self.constraint_sccs.scc(lower_bound);"}, {"sha": "c5afd3762171d09809b5dc80bfc47b7d752f7047", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d203c13db23fe0f0d39b448e6926beaad9b550a4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d203c13db23fe0f0d39b448e6926beaad9b550a4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=d203c13db23fe0f0d39b448e6926beaad9b550a4", "patch": "@@ -818,9 +818,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         min: ty::Region<'tcx>,\n     ) -> bool {\n         match bound {\n-            VerifyBound::IfEq(k, b) => {\n+            VerifyBound::IfEq(k, r) => {\n                 (var_values.normalize(self.region_rels.tcx, *k) == generic_ty)\n-                    && self.bound_is_met(b, var_values, generic_ty, min)\n+                    && self.bound_is_met(&VerifyBound::OutlivedBy(*r), var_values, generic_ty, min)\n             }\n \n             VerifyBound::OutlivedBy(r) => {"}, {"sha": "17681338a639b14af449ea466a48900e64a752a3", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d203c13db23fe0f0d39b448e6926beaad9b550a4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d203c13db23fe0f0d39b448e6926beaad9b550a4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=d203c13db23fe0f0d39b448e6926beaad9b550a4", "patch": "@@ -160,14 +160,13 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n             .projection_approx_declared_bounds_from_env(projection_ty)\n             .into_iter()\n             .map(|ty::OutlivesPredicate(ty, r)| {\n-                let vb = VerifyBound::OutlivedBy(r);\n                 if ty == projection_ty_as_ty {\n                     // Micro-optimize if this is an exact match (this\n                     // occurs often when there are no region variables\n                     // involved).\n-                    vb\n+                    VerifyBound::OutlivedBy(r)\n                 } else {\n-                    VerifyBound::IfEq(ty, Box::new(vb))\n+                    VerifyBound::IfEq(ty, r)\n                 }\n             });\n "}, {"sha": "d7b4f450e0f8d7714865c254d834365749349f86", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d203c13db23fe0f0d39b448e6926beaad9b550a4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d203c13db23fe0f0d39b448e6926beaad9b550a4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=d203c13db23fe0f0d39b448e6926beaad9b550a4", "patch": "@@ -224,7 +224,7 @@ pub enum VerifyBound<'tcx> {\n     ///\n     /// meaning, if the subject G is equal to `<T as Trait<'a>>::Item`\n     /// (after inference), and `'a: min`, then `G: min`.\n-    IfEq(Ty<'tcx>, Box<VerifyBound<'tcx>>),\n+    IfEq(Ty<'tcx>, Region<'tcx>),\n \n     /// Given a region `R`, expands to the function:\n     ///\n@@ -770,7 +770,7 @@ impl<'tcx> VerifyBound<'tcx> {\n \n     pub fn cannot_hold(&self) -> bool {\n         match self {\n-            VerifyBound::IfEq(_, b) => b.cannot_hold(),\n+            VerifyBound::IfEq(_, _) => false,\n             VerifyBound::IsEmpty => false,\n             VerifyBound::OutlivedBy(_) => false,\n             VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),"}]}