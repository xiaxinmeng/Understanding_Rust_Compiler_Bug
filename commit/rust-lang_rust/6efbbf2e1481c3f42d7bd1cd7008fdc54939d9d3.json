{"sha": "6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZmJiZjJlMTQ4MWMzZjQyZDdiZDFjZDcwMDhmZGM1NDkzOWQ5ZDM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T09:56:11Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T09:56:11Z"}, "message": "Combine PrimitiveInt, Int, and Uint traits into one single trait\n\nHaving three traits for primitive ints/uints seemed rather excessive. If users wish to specify between them they can simply combine Int with either the Signed and Unsigned traits. For example: fn foo<T: Int + Signed>() { \u2026 }", "tree": {"sha": "c229ca5c81f0a066d2ee05ada4f49aee3bfce41c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c229ca5c81f0a066d2ee05ada4f49aee3bfce41c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "html_url": "https://github.com/rust-lang/rust/commit/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faaf3bf1495a8d76e822981544de2b346346d91d", "url": "https://api.github.com/repos/rust-lang/rust/commits/faaf3bf1495a8d76e822981544de2b346346d91d", "html_url": "https://github.com/rust-lang/rust/commit/faaf3bf1495a8d76e822981544de2b346346d91d"}], "stats": {"total": 34, "additions": 8, "deletions": 26}, "files": [{"sha": "47f83103b799c897237538e035797a48984cb3e7", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "patch": "@@ -107,8 +107,7 @@ pub use num::{Num, NumCast};\n pub use num::{Signed, Unsigned, Integer};\n pub use num::{Round, Fractional, Real, RealExt};\n pub use num::{Bitwise, BitCount, Bounded};\n-pub use num::{Primitive, PrimitiveInt};\n-pub use num::{Int, Uint, Float};\n+pub use num::{Primitive, Int, Float};\n pub use ptr::Ptr;\n pub use to_str::ToStr;\n pub use clone::Clone;"}, {"sha": "0c126bd1de536b09b98ebc9ea059ad2485efc144", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "patch": "@@ -445,8 +445,6 @@ impl Bounded for T {\n     fn max_value() -> T { max_value }\n }\n \n-impl PrimitiveInt for T {}\n-\n impl Int for T {}\n \n // String conversion functions and impl str -> num"}, {"sha": "f1a77a4ed59e905963dd5303cc30ef955030c736", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "patch": "@@ -217,23 +217,11 @@ pub trait Primitive: Num\n ///\n /// A collection of traits relevant to primitive signed and unsigned integers\n ///\n-pub trait PrimitiveInt: Integer\n-                      + Primitive\n-                      + Bounded\n-                      + Bitwise\n-                      + BitCount {}\n-\n-///\n-/// Specialisation of `PrimitiveInt` for unsigned integers\n-///\n-pub trait Uint: PrimitiveInt\n-              + Unsigned {}\n-\n-///\n-/// Specialisation of `PrimitiveInt` for signed integers\n-///\n-pub trait Int: PrimitiveInt\n-             + Signed {}\n+pub trait Int: Integer\n+             + Primitive\n+             + Bounded\n+             + Bitwise\n+             + BitCount {}\n \n ///\n /// Primitive floating point numbers. This trait should only be implemented"}, {"sha": "d84f4a99d53f3b9a0ddae2ab6aac4e639b2f74f6", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "patch": "@@ -277,9 +277,7 @@ impl Bounded for T {\n     fn max_value() -> T { max_value }\n }\n \n-impl PrimitiveInt for T {}\n-\n-impl Uint for T {}\n+impl Int for T {}\n \n // String conversion functions and impl str -> num\n "}, {"sha": "2711399c483fca72e90f98919713abb0af400396", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=6efbbf2e1481c3f42d7bd1cd7008fdc54939d9d3", "patch": "@@ -41,8 +41,7 @@ pub use num::{Num, NumCast};\n pub use num::{Signed, Unsigned, Integer};\n pub use num::{Round, Fractional, Real, RealExt};\n pub use num::{Bitwise, BitCount, Bounded};\n-pub use num::{Primitive, PrimitiveInt};\n-pub use num::{Int, Uint, Float};\n+pub use num::{Primitive, Int, Float};\n pub use path::GenericPath;\n pub use path::Path;\n pub use path::PosixPath;"}]}