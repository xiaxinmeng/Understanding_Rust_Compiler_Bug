{"sha": "393014805986a1360d9b2ec4fd54137839777dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MzAxNDgwNTk4NmExMzYwZDliMmVjNGZkNTQxMzc4Mzk3NzdkYmU=", "commit": {"author": {"name": "Lucas Lois", "email": "lucasloisp@gmail.com", "date": "2018-11-30T13:21:11Z"}, "committer": {"name": "Lucas Lois", "email": "lucasloisp@gmail.com", "date": "2018-12-03T19:32:11Z"}, "message": "Adds inequality cases to bool comparison lint\n\nThe lint now checks cases like `y != true`", "tree": {"sha": "15d3a0820213e1701845a85a1c0cf6227f0c3655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d3a0820213e1701845a85a1c0cf6227f0c3655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393014805986a1360d9b2ec4fd54137839777dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393014805986a1360d9b2ec4fd54137839777dbe", "html_url": "https://github.com/rust-lang/rust/commit/393014805986a1360d9b2ec4fd54137839777dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393014805986a1360d9b2ec4fd54137839777dbe/comments", "author": {"login": "lucasloisp", "id": 3135138, "node_id": "MDQ6VXNlcjMxMzUxMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/3135138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucasloisp", "html_url": "https://github.com/lucasloisp", "followers_url": "https://api.github.com/users/lucasloisp/followers", "following_url": "https://api.github.com/users/lucasloisp/following{/other_user}", "gists_url": "https://api.github.com/users/lucasloisp/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucasloisp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucasloisp/subscriptions", "organizations_url": "https://api.github.com/users/lucasloisp/orgs", "repos_url": "https://api.github.com/users/lucasloisp/repos", "events_url": "https://api.github.com/users/lucasloisp/events{/privacy}", "received_events_url": "https://api.github.com/users/lucasloisp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lucasloisp", "id": 3135138, "node_id": "MDQ6VXNlcjMxMzUxMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/3135138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucasloisp", "html_url": "https://github.com/lucasloisp", "followers_url": "https://api.github.com/users/lucasloisp/followers", "following_url": "https://api.github.com/users/lucasloisp/following{/other_user}", "gists_url": "https://api.github.com/users/lucasloisp/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucasloisp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucasloisp/subscriptions", "organizations_url": "https://api.github.com/users/lucasloisp/orgs", "repos_url": "https://api.github.com/users/lucasloisp/repos", "events_url": "https://api.github.com/users/lucasloisp/events{/privacy}", "received_events_url": "https://api.github.com/users/lucasloisp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c669727df4de8a9b155b4ebd389f56cc68fa3b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/c669727df4de8a9b155b4ebd389f56cc68fa3b30", "html_url": "https://github.com/rust-lang/rust/commit/c669727df4de8a9b155b4ebd389f56cc68fa3b30"}], "stats": {"total": 160, "additions": 95, "deletions": 65}, "files": [{"sha": "3bb87fbf5e92119a824901f8a41fde2dd70d640a", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 66, "deletions": 64, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/393014805986a1360d9b2ec4fd54137839777dbe/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393014805986a1360d9b2ec4fd54137839777dbe/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=393014805986a1360d9b2ec4fd54137839777dbe", "patch": "@@ -18,7 +18,7 @@ use crate::rustc_errors::Applicability;\n use crate::syntax::ast::LitKind;\n use crate::syntax::source_map::Spanned;\n use crate::utils::sugg::Sugg;\n-use crate::utils::{in_macro, snippet_with_applicability, span_lint, span_lint_and_sugg};\n+use crate::utils::{in_macro, span_lint, span_lint_and_sugg};\n \n /// **What it does:** Checks for expressions of the form `if c { true } else {\n /// false }`\n@@ -45,8 +45,8 @@ declare_clippy_lint! {\n     \"if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\"\n }\n \n-/// **What it does:** Checks for expressions of the form `x == true` (or vice\n-/// versa) and suggest using the variable directly.\n+/// **What it does:** Checks for expressions of the form `x == true` and\n+/// `x != true` (or vice versa) and suggest using the variable directly.\n ///\n /// **Why is this bad?** Unnecessary code.\n ///\n@@ -59,7 +59,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     pub BOOL_COMPARISON,\n     complexity,\n-    \"comparing a variable to a boolean, e.g. `if x == true`\"\n+    \"comparing a variable to a boolean, e.g. `if x == true` or `if x != true`\"\n }\n \n #[derive(Copy, Clone)]\n@@ -138,76 +138,78 @@ impl LintPass for BoolComparison {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        use self::Expression::*;\n-\n         if in_macro(e.span) {\n             return;\n         }\n \n-        if let ExprKind::Binary(\n-            Spanned {\n-                node: BinOpKind::Eq, ..\n-            },\n-            ref left_side,\n-            ref right_side,\n-        ) = e.node\n-        {\n-            let mut applicability = Applicability::MachineApplicable;\n-            match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n-                (Bool(true), Other) => {\n-                    let hint = snippet_with_applicability(cx, right_side.span, \"..\", &mut applicability);\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_COMPARISON,\n-                        e.span,\n-                        \"equality checks against true are unnecessary\",\n-                        \"try simplifying it as shown\",\n-                        hint.to_string(),\n-                        applicability,\n-                    );\n-                },\n-                (Other, Bool(true)) => {\n-                    let hint = snippet_with_applicability(cx, left_side.span, \"..\", &mut applicability);\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_COMPARISON,\n-                        e.span,\n-                        \"equality checks against true are unnecessary\",\n-                        \"try simplifying it as shown\",\n-                        hint.to_string(),\n-                        applicability,\n-                    );\n-                },\n-                (Bool(false), Other) => {\n-                    let hint = Sugg::hir_with_applicability(cx, right_side, \"..\", &mut applicability);\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_COMPARISON,\n-                        e.span,\n-                        \"equality checks against false can be replaced by a negation\",\n-                        \"try simplifying it as shown\",\n-                        (!hint).to_string(),\n-                        applicability,\n-                    );\n-                },\n-                (Other, Bool(false)) => {\n-                    let hint = Sugg::hir_with_applicability(cx, left_side, \"..\", &mut applicability);\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_COMPARISON,\n-                        e.span,\n-                        \"equality checks against false can be replaced by a negation\",\n-                        \"try simplifying it as shown\",\n-                        (!hint).to_string(),\n-                        applicability,\n-                    );\n-                },\n+        if let ExprKind::Binary(Spanned { node, .. }, ..) = e.node {\n+            match node {\n+                BinOpKind::Eq => check_comparison(\n+                    cx,\n+                    e,\n+                    \"equality checks against true are unnecessary\",\n+                    \"equality checks against false can be replaced by a negation\",\n+                    |h| h,\n+                    |h| !h,\n+                ),\n+                BinOpKind::Ne => check_comparison(\n+                    cx,\n+                    e,\n+                    \"inequality checks against true can be replaced by a negation\",\n+                    \"inequality checks against false are unnecessary\",\n+                    |h| !h,\n+                    |h| h,\n+                ),\n                 _ => (),\n             }\n         }\n     }\n }\n \n+fn check_comparison<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    e: &'tcx Expr,\n+    true_message: &str,\n+    false_message: &str,\n+    true_hint: impl FnOnce(Sugg<'_>) -> Sugg<'_>,\n+    false_hint: impl FnOnce(Sugg<'_>) -> Sugg<'_>,\n+) {\n+    use self::Expression::*;\n+\n+    if let ExprKind::Binary(_, ref left_side, ref right_side) = e.node {\n+        let applicability = Applicability::MachineApplicable;\n+        match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n+            (Bool(true), Other) => suggest_bool_comparison(cx, e, right_side, applicability, true_message, true_hint),\n+            (Other, Bool(true)) => suggest_bool_comparison(cx, e, left_side, applicability, true_message, true_hint),\n+            (Bool(false), Other) => {\n+                suggest_bool_comparison(cx, e, right_side, applicability, false_message, false_hint)\n+            },\n+            (Other, Bool(false)) => suggest_bool_comparison(cx, e, left_side, applicability, false_message, false_hint),\n+            _ => (),\n+        }\n+    }\n+}\n+\n+fn suggest_bool_comparison<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    e: &'tcx Expr,\n+    expr: &Expr,\n+    mut applicability: Applicability,\n+    message: &str,\n+    conv_hint: impl FnOnce(Sugg<'_>) -> Sugg<'_>,\n+) {\n+    let hint = Sugg::hir_with_applicability(cx, expr, \"..\", &mut applicability);\n+    span_lint_and_sugg(\n+        cx,\n+        BOOL_COMPARISON,\n+        e.span,\n+        message,\n+        \"try simplifying it as shown\",\n+        conv_hint(hint).to_string(),\n+        applicability,\n+    );\n+}\n+\n enum Expression {\n     Bool(bool),\n     RetBool(bool),"}, {"sha": "8ab8b3f928139a2ed90efa6a947c9ee9b7b0d25a", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/393014805986a1360d9b2ec4fd54137839777dbe/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393014805986a1360d9b2ec4fd54137839777dbe/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=393014805986a1360d9b2ec4fd54137839777dbe", "patch": "@@ -18,4 +18,8 @@ fn main() {\n     if x == false { \"yes\" } else { \"no\" };\n     if true == x { \"yes\" } else { \"no\" };\n     if false == x { \"yes\" } else { \"no\" };\n+    if x != true { \"yes\" } else { \"no\" };\n+    if x != false { \"yes\" } else { \"no\" };\n+    if true != x { \"yes\" } else { \"no\" };\n+    if false != x { \"yes\" } else { \"no\" };\n }"}, {"sha": "b4a1545b49e68cdcae8a3ad1fc797594012874ea", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/393014805986a1360d9b2ec4fd54137839777dbe/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/393014805986a1360d9b2ec4fd54137839777dbe/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=393014805986a1360d9b2ec4fd54137839777dbe", "patch": "@@ -24,5 +24,29 @@ error: equality checks against false can be replaced by a negation\n 20 |     if false == x { \"yes\" } else { \"no\" };\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n-error: aborting due to 4 previous errors\n+error: inequality checks against true can be replaced by a negation\n+  --> $DIR/bool_comparison.rs:21:8\n+   |\n+21 |     if x != true { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^ help: try simplifying it as shown: `!x`\n+\n+error: inequality checks against false are unnecessary\n+  --> $DIR/bool_comparison.rs:22:8\n+   |\n+22 |     if x != false { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^^ help: try simplifying it as shown: `x`\n+\n+error: inequality checks against true can be replaced by a negation\n+  --> $DIR/bool_comparison.rs:23:8\n+   |\n+23 |     if true != x { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^ help: try simplifying it as shown: `!x`\n+\n+error: inequality checks against false are unnecessary\n+  --> $DIR/bool_comparison.rs:24:8\n+   |\n+24 |     if false != x { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^^ help: try simplifying it as shown: `x`\n+\n+error: aborting due to 8 previous errors\n "}]}